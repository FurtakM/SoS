// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 17977 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 18075 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 18083 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_miner := 81 ;
4669: LD_ADDR_EXP 14
4673: PUSH
4674: LD_INT 81
4676: ST_TO_ADDR
// ar_crane := 88 ;
4677: LD_ADDR_EXP 13
4681: PUSH
4682: LD_INT 88
4684: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4685: LD_ADDR_EXP 8
4689: PUSH
4690: LD_INT 89
4692: ST_TO_ADDR
// us_hack := 99 ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 99
4700: ST_TO_ADDR
// us_artillery := 97 ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 97
4708: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4709: LD_ADDR_EXP 11
4713: PUSH
4714: LD_INT 91
4716: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4717: LD_ADDR_EXP 12
4721: PUSH
4722: LD_INT 92
4724: ST_TO_ADDR
// ru_radar := 98 ;
4725: LD_ADDR_EXP 7
4729: PUSH
4730: LD_INT 98
4732: ST_TO_ADDR
// tech_Artillery := 80 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 80
4740: ST_TO_ADDR
// tech_RadMat := 81 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 81
4748: ST_TO_ADDR
// tech_BasicTools := 82 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 82
4756: ST_TO_ADDR
// tech_Cargo := 83 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 83
4764: ST_TO_ADDR
// tech_Track := 84 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 84
4772: ST_TO_ADDR
// tech_Crane := 85 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 85
4780: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 86
4788: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4789: LD_ADDR_EXP 22
4793: PUSH
4794: LD_INT 87
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// every 1 do
4802: GO 4804
4804: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4805: CALL 4666 0 0
4809: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4810: LD_VAR 0 2
4814: PUSH
4815: LD_INT 100
4817: EQUAL
4818: IFFALSE 5767
// begin if not StreamModeActive then
4820: LD_EXP 23
4824: NOT
4825: IFFALSE 4835
// StreamModeActive := true ;
4827: LD_ADDR_EXP 23
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 0 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 0
4842: EQUAL
4843: IFFALSE 4849
// InitStreamMode ;
4845: CALL 5925 0 0
// if p3 = 1 then
4849: LD_VAR 0 3
4853: PUSH
4854: LD_INT 1
4856: EQUAL
4857: IFFALSE 4867
// sRocket := true ;
4859: LD_ADDR_EXP 28
4863: PUSH
4864: LD_INT 1
4866: ST_TO_ADDR
// if p3 = 2 then
4867: LD_VAR 0 3
4871: PUSH
4872: LD_INT 2
4874: EQUAL
4875: IFFALSE 4885
// sSpeed := true ;
4877: LD_ADDR_EXP 27
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// if p3 = 3 then
4885: LD_VAR 0 3
4889: PUSH
4890: LD_INT 3
4892: EQUAL
4893: IFFALSE 4903
// sEngine := true ;
4895: LD_ADDR_EXP 29
4899: PUSH
4900: LD_INT 1
4902: ST_TO_ADDR
// if p3 = 4 then
4903: LD_VAR 0 3
4907: PUSH
4908: LD_INT 4
4910: EQUAL
4911: IFFALSE 4921
// sSpec := true ;
4913: LD_ADDR_EXP 26
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// if p3 = 5 then
4921: LD_VAR 0 3
4925: PUSH
4926: LD_INT 5
4928: EQUAL
4929: IFFALSE 4939
// sLevel := true ;
4931: LD_ADDR_EXP 30
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// if p3 = 6 then
4939: LD_VAR 0 3
4943: PUSH
4944: LD_INT 6
4946: EQUAL
4947: IFFALSE 4957
// sArmoury := true ;
4949: LD_ADDR_EXP 31
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// if p3 = 7 then
4957: LD_VAR 0 3
4961: PUSH
4962: LD_INT 7
4964: EQUAL
4965: IFFALSE 4975
// sRadar := true ;
4967: LD_ADDR_EXP 32
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// if p3 = 8 then
4975: LD_VAR 0 3
4979: PUSH
4980: LD_INT 8
4982: EQUAL
4983: IFFALSE 4993
// sBunker := true ;
4985: LD_ADDR_EXP 33
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// if p3 = 9 then
4993: LD_VAR 0 3
4997: PUSH
4998: LD_INT 9
5000: EQUAL
5001: IFFALSE 5011
// sHack := true ;
5003: LD_ADDR_EXP 34
5007: PUSH
5008: LD_INT 1
5010: ST_TO_ADDR
// if p3 = 10 then
5011: LD_VAR 0 3
5015: PUSH
5016: LD_INT 10
5018: EQUAL
5019: IFFALSE 5029
// sFire := true ;
5021: LD_ADDR_EXP 35
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// if p3 = 11 then
5029: LD_VAR 0 3
5033: PUSH
5034: LD_INT 11
5036: EQUAL
5037: IFFALSE 5047
// sRefresh := true ;
5039: LD_ADDR_EXP 36
5043: PUSH
5044: LD_INT 1
5046: ST_TO_ADDR
// if p3 = 12 then
5047: LD_VAR 0 3
5051: PUSH
5052: LD_INT 12
5054: EQUAL
5055: IFFALSE 5065
// sExp := true ;
5057: LD_ADDR_EXP 37
5061: PUSH
5062: LD_INT 1
5064: ST_TO_ADDR
// if p3 = 13 then
5065: LD_VAR 0 3
5069: PUSH
5070: LD_INT 13
5072: EQUAL
5073: IFFALSE 5083
// sDepot := true ;
5075: LD_ADDR_EXP 38
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// if p3 = 14 then
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 14
5090: EQUAL
5091: IFFALSE 5101
// sFlag := true ;
5093: LD_ADDR_EXP 39
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// if p3 = 15 then
5101: LD_VAR 0 3
5105: PUSH
5106: LD_INT 15
5108: EQUAL
5109: IFFALSE 5119
// sKamikadze := true ;
5111: LD_ADDR_EXP 47
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// if p3 = 16 then
5119: LD_VAR 0 3
5123: PUSH
5124: LD_INT 16
5126: EQUAL
5127: IFFALSE 5137
// sTroll := true ;
5129: LD_ADDR_EXP 48
5133: PUSH
5134: LD_INT 1
5136: ST_TO_ADDR
// if p3 = 17 then
5137: LD_VAR 0 3
5141: PUSH
5142: LD_INT 17
5144: EQUAL
5145: IFFALSE 5155
// sSlow := true ;
5147: LD_ADDR_EXP 49
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// if p3 = 18 then
5155: LD_VAR 0 3
5159: PUSH
5160: LD_INT 18
5162: EQUAL
5163: IFFALSE 5173
// sLack := true ;
5165: LD_ADDR_EXP 50
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// if p3 = 19 then
5173: LD_VAR 0 3
5177: PUSH
5178: LD_INT 19
5180: EQUAL
5181: IFFALSE 5191
// sTank := true ;
5183: LD_ADDR_EXP 52
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// if p3 = 20 then
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 20
5198: EQUAL
5199: IFFALSE 5209
// sRemote := true ;
5201: LD_ADDR_EXP 53
5205: PUSH
5206: LD_INT 1
5208: ST_TO_ADDR
// if p3 = 21 then
5209: LD_VAR 0 3
5213: PUSH
5214: LD_INT 21
5216: EQUAL
5217: IFFALSE 5227
// sPowell := true ;
5219: LD_ADDR_EXP 54
5223: PUSH
5224: LD_INT 1
5226: ST_TO_ADDR
// if p3 = 22 then
5227: LD_VAR 0 3
5231: PUSH
5232: LD_INT 22
5234: EQUAL
5235: IFFALSE 5245
// sTeleport := true ;
5237: LD_ADDR_EXP 57
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// if p3 = 23 then
5245: LD_VAR 0 3
5249: PUSH
5250: LD_INT 23
5252: EQUAL
5253: IFFALSE 5263
// sOilTower := true ;
5255: LD_ADDR_EXP 59
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// if p3 = 24 then
5263: LD_VAR 0 3
5267: PUSH
5268: LD_INT 24
5270: EQUAL
5271: IFFALSE 5281
// sShovel := true ;
5273: LD_ADDR_EXP 60
5277: PUSH
5278: LD_INT 1
5280: ST_TO_ADDR
// if p3 = 25 then
5281: LD_VAR 0 3
5285: PUSH
5286: LD_INT 25
5288: EQUAL
5289: IFFALSE 5299
// sSheik := true ;
5291: LD_ADDR_EXP 61
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// if p3 = 26 then
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 26
5306: EQUAL
5307: IFFALSE 5317
// sEarthquake := true ;
5309: LD_ADDR_EXP 63
5313: PUSH
5314: LD_INT 1
5316: ST_TO_ADDR
// if p3 = 27 then
5317: LD_VAR 0 3
5321: PUSH
5322: LD_INT 27
5324: EQUAL
5325: IFFALSE 5335
// sAI := true ;
5327: LD_ADDR_EXP 64
5331: PUSH
5332: LD_INT 1
5334: ST_TO_ADDR
// if p3 = 28 then
5335: LD_VAR 0 3
5339: PUSH
5340: LD_INT 28
5342: EQUAL
5343: IFFALSE 5353
// sCargo := true ;
5345: LD_ADDR_EXP 67
5349: PUSH
5350: LD_INT 1
5352: ST_TO_ADDR
// if p3 = 29 then
5353: LD_VAR 0 3
5357: PUSH
5358: LD_INT 29
5360: EQUAL
5361: IFFALSE 5371
// sDLaser := true ;
5363: LD_ADDR_EXP 68
5367: PUSH
5368: LD_INT 1
5370: ST_TO_ADDR
// if p3 = 30 then
5371: LD_VAR 0 3
5375: PUSH
5376: LD_INT 30
5378: EQUAL
5379: IFFALSE 5389
// sExchange := true ;
5381: LD_ADDR_EXP 69
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// if p3 = 31 then
5389: LD_VAR 0 3
5393: PUSH
5394: LD_INT 31
5396: EQUAL
5397: IFFALSE 5407
// sFac := true ;
5399: LD_ADDR_EXP 70
5403: PUSH
5404: LD_INT 1
5406: ST_TO_ADDR
// if p3 = 32 then
5407: LD_VAR 0 3
5411: PUSH
5412: LD_INT 32
5414: EQUAL
5415: IFFALSE 5425
// sPower := true ;
5417: LD_ADDR_EXP 71
5421: PUSH
5422: LD_INT 1
5424: ST_TO_ADDR
// if p3 = 33 then
5425: LD_VAR 0 3
5429: PUSH
5430: LD_INT 33
5432: EQUAL
5433: IFFALSE 5443
// sRandom := true ;
5435: LD_ADDR_EXP 72
5439: PUSH
5440: LD_INT 1
5442: ST_TO_ADDR
// if p3 = 34 then
5443: LD_VAR 0 3
5447: PUSH
5448: LD_INT 34
5450: EQUAL
5451: IFFALSE 5461
// sShield := true ;
5453: LD_ADDR_EXP 73
5457: PUSH
5458: LD_INT 1
5460: ST_TO_ADDR
// if p3 = 35 then
5461: LD_VAR 0 3
5465: PUSH
5466: LD_INT 35
5468: EQUAL
5469: IFFALSE 5479
// sTime := true ;
5471: LD_ADDR_EXP 74
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// if p3 = 36 then
5479: LD_VAR 0 3
5483: PUSH
5484: LD_INT 36
5486: EQUAL
5487: IFFALSE 5497
// sTools := true ;
5489: LD_ADDR_EXP 75
5493: PUSH
5494: LD_INT 1
5496: ST_TO_ADDR
// if p3 = 101 then
5497: LD_VAR 0 3
5501: PUSH
5502: LD_INT 101
5504: EQUAL
5505: IFFALSE 5515
// sSold := true ;
5507: LD_ADDR_EXP 40
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// if p3 = 102 then
5515: LD_VAR 0 3
5519: PUSH
5520: LD_INT 102
5522: EQUAL
5523: IFFALSE 5533
// sDiff := true ;
5525: LD_ADDR_EXP 41
5529: PUSH
5530: LD_INT 1
5532: ST_TO_ADDR
// if p3 = 103 then
5533: LD_VAR 0 3
5537: PUSH
5538: LD_INT 103
5540: EQUAL
5541: IFFALSE 5551
// sFog := true ;
5543: LD_ADDR_EXP 44
5547: PUSH
5548: LD_INT 1
5550: ST_TO_ADDR
// if p3 = 104 then
5551: LD_VAR 0 3
5555: PUSH
5556: LD_INT 104
5558: EQUAL
5559: IFFALSE 5569
// sReset := true ;
5561: LD_ADDR_EXP 45
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// if p3 = 105 then
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 105
5576: EQUAL
5577: IFFALSE 5587
// sSun := true ;
5579: LD_ADDR_EXP 46
5583: PUSH
5584: LD_INT 1
5586: ST_TO_ADDR
// if p3 = 106 then
5587: LD_VAR 0 3
5591: PUSH
5592: LD_INT 106
5594: EQUAL
5595: IFFALSE 5605
// sTiger := true ;
5597: LD_ADDR_EXP 42
5601: PUSH
5602: LD_INT 1
5604: ST_TO_ADDR
// if p3 = 107 then
5605: LD_VAR 0 3
5609: PUSH
5610: LD_INT 107
5612: EQUAL
5613: IFFALSE 5623
// sBomb := true ;
5615: LD_ADDR_EXP 43
5619: PUSH
5620: LD_INT 1
5622: ST_TO_ADDR
// if p3 = 108 then
5623: LD_VAR 0 3
5627: PUSH
5628: LD_INT 108
5630: EQUAL
5631: IFFALSE 5641
// sWound := true ;
5633: LD_ADDR_EXP 51
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// if p3 = 109 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 109
5648: EQUAL
5649: IFFALSE 5659
// sBetray := true ;
5651: LD_ADDR_EXP 55
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 110 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 110
5666: EQUAL
5667: IFFALSE 5677
// sContamin := true ;
5669: LD_ADDR_EXP 56
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 111 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 111
5684: EQUAL
5685: IFFALSE 5695
// sOil := true ;
5687: LD_ADDR_EXP 58
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 112 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 112
5702: EQUAL
5703: IFFALSE 5713
// sStu := true ;
5705: LD_ADDR_EXP 62
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 113 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 113
5720: EQUAL
5721: IFFALSE 5731
// sBazooka := true ;
5723: LD_ADDR_EXP 65
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 114 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 114
5738: EQUAL
5739: IFFALSE 5749
// sMortar := true ;
5741: LD_ADDR_EXP 66
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 115 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 115
5756: EQUAL
5757: IFFALSE 5767
// sRanger := true ;
5759: LD_ADDR_EXP 76
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// end ; if p2 = 101 then
5767: LD_VAR 0 2
5771: PUSH
5772: LD_INT 101
5774: EQUAL
5775: IFFALSE 5903
// begin case p3 of 1 :
5777: LD_VAR 0 3
5781: PUSH
5782: LD_INT 1
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5790
5788: GO 5797
5790: POP
// hHackUnlimitedResources ; 2 :
5791: CALL 16938 0 0
5795: GO 5903
5797: LD_INT 2
5799: DOUBLE
5800: EQUAL
5801: IFTRUE 5805
5803: GO 5812
5805: POP
// hHackSetLevel10 ; 3 :
5806: CALL 17071 0 0
5810: GO 5903
5812: LD_INT 3
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5820
5818: GO 5827
5820: POP
// hHackSetLevel10YourUnits ; 4 :
5821: CALL 17156 0 0
5825: GO 5903
5827: LD_INT 4
5829: DOUBLE
5830: EQUAL
5831: IFTRUE 5835
5833: GO 5842
5835: POP
// hHackInvincible ; 5 :
5836: CALL 17604 0 0
5840: GO 5903
5842: LD_INT 5
5844: DOUBLE
5845: EQUAL
5846: IFTRUE 5850
5848: GO 5857
5850: POP
// hHackInvisible ; 6 :
5851: CALL 17715 0 0
5855: GO 5903
5857: LD_INT 6
5859: DOUBLE
5860: EQUAL
5861: IFTRUE 5865
5863: GO 5872
5865: POP
// hHackChangeYourSide ; 7 :
5866: CALL 17772 0 0
5870: GO 5903
5872: LD_INT 7
5874: DOUBLE
5875: EQUAL
5876: IFTRUE 5880
5878: GO 5887
5880: POP
// hHackChangeUnitSide ; 8 :
5881: CALL 17814 0 0
5885: GO 5903
5887: LD_INT 8
5889: DOUBLE
5890: EQUAL
5891: IFTRUE 5895
5893: GO 5902
5895: POP
// hHackFog ; end ;
5896: CALL 17915 0 0
5900: GO 5903
5902: POP
// end ; end ;
5903: PPOPN 6
5905: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5906: GO 5908
5908: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5909: LD_STRING initStreamRollete();
5911: PPUSH
5912: CALL_OW 559
// InitStreamMode ;
5916: CALL 5925 0 0
// DefineStreamItems ( ) ;
5920: CALL 6365 0 0
// end ;
5924: END
// function InitStreamMode ; begin
5925: LD_INT 0
5927: PPUSH
// streamModeActive := false ;
5928: LD_ADDR_EXP 23
5932: PUSH
5933: LD_INT 0
5935: ST_TO_ADDR
// normalCounter := 36 ;
5936: LD_ADDR_EXP 24
5940: PUSH
5941: LD_INT 36
5943: ST_TO_ADDR
// hardcoreCounter := 16 ;
5944: LD_ADDR_EXP 25
5948: PUSH
5949: LD_INT 16
5951: ST_TO_ADDR
// sRocket := false ;
5952: LD_ADDR_EXP 28
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// sSpeed := false ;
5960: LD_ADDR_EXP 27
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// sEngine := false ;
5968: LD_ADDR_EXP 29
5972: PUSH
5973: LD_INT 0
5975: ST_TO_ADDR
// sSpec := false ;
5976: LD_ADDR_EXP 26
5980: PUSH
5981: LD_INT 0
5983: ST_TO_ADDR
// sLevel := false ;
5984: LD_ADDR_EXP 30
5988: PUSH
5989: LD_INT 0
5991: ST_TO_ADDR
// sArmoury := false ;
5992: LD_ADDR_EXP 31
5996: PUSH
5997: LD_INT 0
5999: ST_TO_ADDR
// sRadar := false ;
6000: LD_ADDR_EXP 32
6004: PUSH
6005: LD_INT 0
6007: ST_TO_ADDR
// sBunker := false ;
6008: LD_ADDR_EXP 33
6012: PUSH
6013: LD_INT 0
6015: ST_TO_ADDR
// sHack := false ;
6016: LD_ADDR_EXP 34
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// sFire := false ;
6024: LD_ADDR_EXP 35
6028: PUSH
6029: LD_INT 0
6031: ST_TO_ADDR
// sRefresh := false ;
6032: LD_ADDR_EXP 36
6036: PUSH
6037: LD_INT 0
6039: ST_TO_ADDR
// sExp := false ;
6040: LD_ADDR_EXP 37
6044: PUSH
6045: LD_INT 0
6047: ST_TO_ADDR
// sDepot := false ;
6048: LD_ADDR_EXP 38
6052: PUSH
6053: LD_INT 0
6055: ST_TO_ADDR
// sFlag := false ;
6056: LD_ADDR_EXP 39
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// sKamikadze := false ;
6064: LD_ADDR_EXP 47
6068: PUSH
6069: LD_INT 0
6071: ST_TO_ADDR
// sTroll := false ;
6072: LD_ADDR_EXP 48
6076: PUSH
6077: LD_INT 0
6079: ST_TO_ADDR
// sSlow := false ;
6080: LD_ADDR_EXP 49
6084: PUSH
6085: LD_INT 0
6087: ST_TO_ADDR
// sLack := false ;
6088: LD_ADDR_EXP 50
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// sTank := false ;
6096: LD_ADDR_EXP 52
6100: PUSH
6101: LD_INT 0
6103: ST_TO_ADDR
// sRemote := false ;
6104: LD_ADDR_EXP 53
6108: PUSH
6109: LD_INT 0
6111: ST_TO_ADDR
// sPowell := false ;
6112: LD_ADDR_EXP 54
6116: PUSH
6117: LD_INT 0
6119: ST_TO_ADDR
// sTeleport := false ;
6120: LD_ADDR_EXP 57
6124: PUSH
6125: LD_INT 0
6127: ST_TO_ADDR
// sOilTower := false ;
6128: LD_ADDR_EXP 59
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// sShovel := false ;
6136: LD_ADDR_EXP 60
6140: PUSH
6141: LD_INT 0
6143: ST_TO_ADDR
// sSheik := false ;
6144: LD_ADDR_EXP 61
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// sEarthquake := false ;
6152: LD_ADDR_EXP 63
6156: PUSH
6157: LD_INT 0
6159: ST_TO_ADDR
// sAI := false ;
6160: LD_ADDR_EXP 64
6164: PUSH
6165: LD_INT 0
6167: ST_TO_ADDR
// sCargo := false ;
6168: LD_ADDR_EXP 67
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// sDLaser := false ;
6176: LD_ADDR_EXP 68
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// sExchange := false ;
6184: LD_ADDR_EXP 69
6188: PUSH
6189: LD_INT 0
6191: ST_TO_ADDR
// sFac := false ;
6192: LD_ADDR_EXP 70
6196: PUSH
6197: LD_INT 0
6199: ST_TO_ADDR
// sPower := false ;
6200: LD_ADDR_EXP 71
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// sRandom := false ;
6208: LD_ADDR_EXP 72
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// sShield := false ;
6216: LD_ADDR_EXP 73
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// sTime := false ;
6224: LD_ADDR_EXP 74
6228: PUSH
6229: LD_INT 0
6231: ST_TO_ADDR
// sTools := false ;
6232: LD_ADDR_EXP 75
6236: PUSH
6237: LD_INT 0
6239: ST_TO_ADDR
// sSold := false ;
6240: LD_ADDR_EXP 40
6244: PUSH
6245: LD_INT 0
6247: ST_TO_ADDR
// sDiff := false ;
6248: LD_ADDR_EXP 41
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// sFog := false ;
6256: LD_ADDR_EXP 44
6260: PUSH
6261: LD_INT 0
6263: ST_TO_ADDR
// sReset := false ;
6264: LD_ADDR_EXP 45
6268: PUSH
6269: LD_INT 0
6271: ST_TO_ADDR
// sSun := false ;
6272: LD_ADDR_EXP 46
6276: PUSH
6277: LD_INT 0
6279: ST_TO_ADDR
// sTiger := false ;
6280: LD_ADDR_EXP 42
6284: PUSH
6285: LD_INT 0
6287: ST_TO_ADDR
// sBomb := false ;
6288: LD_ADDR_EXP 43
6292: PUSH
6293: LD_INT 0
6295: ST_TO_ADDR
// sWound := false ;
6296: LD_ADDR_EXP 51
6300: PUSH
6301: LD_INT 0
6303: ST_TO_ADDR
// sBetray := false ;
6304: LD_ADDR_EXP 55
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// sContamin := false ;
6312: LD_ADDR_EXP 56
6316: PUSH
6317: LD_INT 0
6319: ST_TO_ADDR
// sOil := false ;
6320: LD_ADDR_EXP 58
6324: PUSH
6325: LD_INT 0
6327: ST_TO_ADDR
// sStu := false ;
6328: LD_ADDR_EXP 62
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// sBazooka := false ;
6336: LD_ADDR_EXP 65
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// sMortar := false ;
6344: LD_ADDR_EXP 66
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// sRanger := false ;
6352: LD_ADDR_EXP 76
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// end ;
6360: LD_VAR 0 1
6364: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// result := [ ] ;
6372: LD_ADDR_VAR 0 1
6376: PUSH
6377: EMPTY
6378: ST_TO_ADDR
// if campaign_id = 1 then
6379: LD_OWVAR 69
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 9325
// begin case mission_number of 1 :
6389: LD_OWVAR 70
6393: PUSH
6394: LD_INT 1
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6466
6402: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6403: LD_ADDR_VAR 0 1
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 11
6416: PUSH
6417: LD_INT 12
6419: PUSH
6420: LD_INT 15
6422: PUSH
6423: LD_INT 16
6425: PUSH
6426: LD_INT 22
6428: PUSH
6429: LD_INT 23
6431: PUSH
6432: LD_INT 26
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 101
6448: PUSH
6449: LD_INT 102
6451: PUSH
6452: LD_INT 106
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: ST_TO_ADDR
6464: GO 9323
6466: LD_INT 2
6468: DOUBLE
6469: EQUAL
6470: IFTRUE 6474
6472: GO 6546
6474: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6475: LD_ADDR_VAR 0 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 4
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: LD_INT 15
6494: PUSH
6495: LD_INT 16
6497: PUSH
6498: LD_INT 22
6500: PUSH
6501: LD_INT 23
6503: PUSH
6504: LD_INT 26
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 101
6520: PUSH
6521: LD_INT 102
6523: PUSH
6524: LD_INT 105
6526: PUSH
6527: LD_INT 106
6529: PUSH
6530: LD_INT 108
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 9323
6546: LD_INT 3
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6630
6554: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 4
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: LD_INT 11
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 15
6577: PUSH
6578: LD_INT 16
6580: PUSH
6581: LD_INT 22
6583: PUSH
6584: LD_INT 26
6586: PUSH
6587: LD_INT 36
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 101
6604: PUSH
6605: LD_INT 102
6607: PUSH
6608: LD_INT 105
6610: PUSH
6611: LD_INT 106
6613: PUSH
6614: LD_INT 108
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 9323
6630: LD_INT 4
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6722
6638: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6639: LD_ADDR_VAR 0 1
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 8
6655: PUSH
6656: LD_INT 11
6658: PUSH
6659: LD_INT 12
6661: PUSH
6662: LD_INT 15
6664: PUSH
6665: LD_INT 16
6667: PUSH
6668: LD_INT 22
6670: PUSH
6671: LD_INT 23
6673: PUSH
6674: LD_INT 26
6676: PUSH
6677: LD_INT 36
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 101
6696: PUSH
6697: LD_INT 102
6699: PUSH
6700: LD_INT 105
6702: PUSH
6703: LD_INT 106
6705: PUSH
6706: LD_INT 108
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: ST_TO_ADDR
6720: GO 9323
6722: LD_INT 5
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6830
6730: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: LD_INT 2
6738: PUSH
6739: LD_INT 4
6741: PUSH
6742: LD_INT 5
6744: PUSH
6745: LD_INT 6
6747: PUSH
6748: LD_INT 8
6750: PUSH
6751: LD_INT 11
6753: PUSH
6754: LD_INT 12
6756: PUSH
6757: LD_INT 15
6759: PUSH
6760: LD_INT 16
6762: PUSH
6763: LD_INT 22
6765: PUSH
6766: LD_INT 23
6768: PUSH
6769: LD_INT 25
6771: PUSH
6772: LD_INT 26
6774: PUSH
6775: LD_INT 36
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 101
6796: PUSH
6797: LD_INT 102
6799: PUSH
6800: LD_INT 105
6802: PUSH
6803: LD_INT 106
6805: PUSH
6806: LD_INT 108
6808: PUSH
6809: LD_INT 109
6811: PUSH
6812: LD_INT 112
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: ST_TO_ADDR
6828: GO 9323
6830: LD_INT 6
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6958
6838: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 2
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: LD_INT 5
6852: PUSH
6853: LD_INT 6
6855: PUSH
6856: LD_INT 8
6858: PUSH
6859: LD_INT 11
6861: PUSH
6862: LD_INT 12
6864: PUSH
6865: LD_INT 15
6867: PUSH
6868: LD_INT 16
6870: PUSH
6871: LD_INT 20
6873: PUSH
6874: LD_INT 21
6876: PUSH
6877: LD_INT 22
6879: PUSH
6880: LD_INT 23
6882: PUSH
6883: LD_INT 25
6885: PUSH
6886: LD_INT 26
6888: PUSH
6889: LD_INT 30
6891: PUSH
6892: LD_INT 31
6894: PUSH
6895: LD_INT 32
6897: PUSH
6898: LD_INT 36
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: LD_INT 109
6939: PUSH
6940: LD_INT 112
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 9323
6958: LD_INT 7
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 7066
6966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6967: LD_ADDR_VAR 0 1
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: LD_INT 5
6980: PUSH
6981: LD_INT 7
6983: PUSH
6984: LD_INT 11
6986: PUSH
6987: LD_INT 12
6989: PUSH
6990: LD_INT 15
6992: PUSH
6993: LD_INT 16
6995: PUSH
6996: LD_INT 20
6998: PUSH
6999: LD_INT 21
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 23
7007: PUSH
7008: LD_INT 25
7010: PUSH
7011: LD_INT 26
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 101
7032: PUSH
7033: LD_INT 102
7035: PUSH
7036: LD_INT 103
7038: PUSH
7039: LD_INT 105
7041: PUSH
7042: LD_INT 106
7044: PUSH
7045: LD_INT 108
7047: PUSH
7048: LD_INT 112
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 9323
7066: LD_INT 8
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7202
7074: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: LD_INT 5
7088: PUSH
7089: LD_INT 6
7091: PUSH
7092: LD_INT 7
7094: PUSH
7095: LD_INT 8
7097: PUSH
7098: LD_INT 11
7100: PUSH
7101: LD_INT 12
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: LD_INT 16
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 31
7133: PUSH
7134: LD_INT 32
7136: PUSH
7137: LD_INT 36
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 101
7164: PUSH
7165: LD_INT 102
7167: PUSH
7168: LD_INT 103
7170: PUSH
7171: LD_INT 105
7173: PUSH
7174: LD_INT 106
7176: PUSH
7177: LD_INT 108
7179: PUSH
7180: LD_INT 109
7182: PUSH
7183: LD_INT 112
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: ST_TO_ADDR
7200: GO 9323
7202: LD_INT 9
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7346
7210: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7211: LD_ADDR_VAR 0 1
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 4
7221: PUSH
7222: LD_INT 5
7224: PUSH
7225: LD_INT 6
7227: PUSH
7228: LD_INT 7
7230: PUSH
7231: LD_INT 8
7233: PUSH
7234: LD_INT 11
7236: PUSH
7237: LD_INT 12
7239: PUSH
7240: LD_INT 15
7242: PUSH
7243: LD_INT 16
7245: PUSH
7246: LD_INT 20
7248: PUSH
7249: LD_INT 21
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 23
7257: PUSH
7258: LD_INT 25
7260: PUSH
7261: LD_INT 26
7263: PUSH
7264: LD_INT 28
7266: PUSH
7267: LD_INT 30
7269: PUSH
7270: LD_INT 31
7272: PUSH
7273: LD_INT 32
7275: PUSH
7276: LD_INT 36
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 101
7304: PUSH
7305: LD_INT 102
7307: PUSH
7308: LD_INT 103
7310: PUSH
7311: LD_INT 105
7313: PUSH
7314: LD_INT 106
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 109
7322: PUSH
7323: LD_INT 112
7325: PUSH
7326: LD_INT 114
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: ST_TO_ADDR
7344: GO 9323
7346: LD_INT 10
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7538
7354: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 4
7365: PUSH
7366: LD_INT 5
7368: PUSH
7369: LD_INT 6
7371: PUSH
7372: LD_INT 7
7374: PUSH
7375: LD_INT 8
7377: PUSH
7378: LD_INT 9
7380: PUSH
7381: LD_INT 10
7383: PUSH
7384: LD_INT 11
7386: PUSH
7387: LD_INT 12
7389: PUSH
7390: LD_INT 13
7392: PUSH
7393: LD_INT 14
7395: PUSH
7396: LD_INT 15
7398: PUSH
7399: LD_INT 16
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 18
7407: PUSH
7408: LD_INT 19
7410: PUSH
7411: LD_INT 20
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 22
7419: PUSH
7420: LD_INT 23
7422: PUSH
7423: LD_INT 24
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 26
7431: PUSH
7432: LD_INT 28
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 31
7440: PUSH
7441: LD_INT 32
7443: PUSH
7444: LD_INT 36
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 101
7480: PUSH
7481: LD_INT 102
7483: PUSH
7484: LD_INT 103
7486: PUSH
7487: LD_INT 104
7489: PUSH
7490: LD_INT 105
7492: PUSH
7493: LD_INT 106
7495: PUSH
7496: LD_INT 107
7498: PUSH
7499: LD_INT 108
7501: PUSH
7502: LD_INT 109
7504: PUSH
7505: LD_INT 110
7507: PUSH
7508: LD_INT 111
7510: PUSH
7511: LD_INT 112
7513: PUSH
7514: LD_INT 114
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: ST_TO_ADDR
7536: GO 9323
7538: LD_INT 11
7540: DOUBLE
7541: EQUAL
7542: IFTRUE 7546
7544: GO 7738
7546: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 4
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 6
7566: PUSH
7567: LD_INT 7
7569: PUSH
7570: LD_INT 8
7572: PUSH
7573: LD_INT 9
7575: PUSH
7576: LD_INT 10
7578: PUSH
7579: LD_INT 11
7581: PUSH
7582: LD_INT 12
7584: PUSH
7585: LD_INT 13
7587: PUSH
7588: LD_INT 14
7590: PUSH
7591: LD_INT 15
7593: PUSH
7594: LD_INT 16
7596: PUSH
7597: LD_INT 17
7599: PUSH
7600: LD_INT 18
7602: PUSH
7603: LD_INT 19
7605: PUSH
7606: LD_INT 20
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 23
7617: PUSH
7618: LD_INT 24
7620: PUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 26
7626: PUSH
7627: LD_INT 28
7629: PUSH
7630: LD_INT 30
7632: PUSH
7633: LD_INT 31
7635: PUSH
7636: LD_INT 32
7638: PUSH
7639: LD_INT 34
7641: PUSH
7642: LD_INT 36
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 101
7680: PUSH
7681: LD_INT 102
7683: PUSH
7684: LD_INT 103
7686: PUSH
7687: LD_INT 104
7689: PUSH
7690: LD_INT 105
7692: PUSH
7693: LD_INT 106
7695: PUSH
7696: LD_INT 107
7698: PUSH
7699: LD_INT 108
7701: PUSH
7702: LD_INT 109
7704: PUSH
7705: LD_INT 110
7707: PUSH
7708: LD_INT 111
7710: PUSH
7711: LD_INT 112
7713: PUSH
7714: LD_INT 114
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: ST_TO_ADDR
7736: GO 9323
7738: LD_INT 12
7740: DOUBLE
7741: EQUAL
7742: IFTRUE 7746
7744: GO 7954
7746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: LD_INT 3
7760: PUSH
7761: LD_INT 4
7763: PUSH
7764: LD_INT 5
7766: PUSH
7767: LD_INT 6
7769: PUSH
7770: LD_INT 7
7772: PUSH
7773: LD_INT 8
7775: PUSH
7776: LD_INT 9
7778: PUSH
7779: LD_INT 10
7781: PUSH
7782: LD_INT 11
7784: PUSH
7785: LD_INT 12
7787: PUSH
7788: LD_INT 13
7790: PUSH
7791: LD_INT 14
7793: PUSH
7794: LD_INT 15
7796: PUSH
7797: LD_INT 16
7799: PUSH
7800: LD_INT 17
7802: PUSH
7803: LD_INT 18
7805: PUSH
7806: LD_INT 19
7808: PUSH
7809: LD_INT 20
7811: PUSH
7812: LD_INT 21
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 23
7820: PUSH
7821: LD_INT 24
7823: PUSH
7824: LD_INT 25
7826: PUSH
7827: LD_INT 26
7829: PUSH
7830: LD_INT 27
7832: PUSH
7833: LD_INT 28
7835: PUSH
7836: LD_INT 30
7838: PUSH
7839: LD_INT 31
7841: PUSH
7842: LD_INT 32
7844: PUSH
7845: LD_INT 33
7847: PUSH
7848: LD_INT 34
7850: PUSH
7851: LD_INT 36
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 101
7892: PUSH
7893: LD_INT 102
7895: PUSH
7896: LD_INT 103
7898: PUSH
7899: LD_INT 104
7901: PUSH
7902: LD_INT 105
7904: PUSH
7905: LD_INT 106
7907: PUSH
7908: LD_INT 107
7910: PUSH
7911: LD_INT 108
7913: PUSH
7914: LD_INT 109
7916: PUSH
7917: LD_INT 110
7919: PUSH
7920: LD_INT 111
7922: PUSH
7923: LD_INT 112
7925: PUSH
7926: LD_INT 113
7928: PUSH
7929: LD_INT 114
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 9323
7954: LD_INT 13
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 8158
7962: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7963: LD_ADDR_VAR 0 1
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 4
7979: PUSH
7980: LD_INT 5
7982: PUSH
7983: LD_INT 8
7985: PUSH
7986: LD_INT 9
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: LD_INT 11
7994: PUSH
7995: LD_INT 12
7997: PUSH
7998: LD_INT 14
8000: PUSH
8001: LD_INT 15
8003: PUSH
8004: LD_INT 16
8006: PUSH
8007: LD_INT 17
8009: PUSH
8010: LD_INT 18
8012: PUSH
8013: LD_INT 19
8015: PUSH
8016: LD_INT 20
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 23
8027: PUSH
8028: LD_INT 24
8030: PUSH
8031: LD_INT 25
8033: PUSH
8034: LD_INT 26
8036: PUSH
8037: LD_INT 27
8039: PUSH
8040: LD_INT 28
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 31
8048: PUSH
8049: LD_INT 32
8051: PUSH
8052: LD_INT 33
8054: PUSH
8055: LD_INT 34
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 101
8096: PUSH
8097: LD_INT 102
8099: PUSH
8100: LD_INT 103
8102: PUSH
8103: LD_INT 104
8105: PUSH
8106: LD_INT 105
8108: PUSH
8109: LD_INT 106
8111: PUSH
8112: LD_INT 107
8114: PUSH
8115: LD_INT 108
8117: PUSH
8118: LD_INT 109
8120: PUSH
8121: LD_INT 110
8123: PUSH
8124: LD_INT 111
8126: PUSH
8127: LD_INT 112
8129: PUSH
8130: LD_INT 113
8132: PUSH
8133: LD_INT 114
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 9323
8158: LD_INT 14
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8378
8166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: LD_INT 1
8174: PUSH
8175: LD_INT 2
8177: PUSH
8178: LD_INT 3
8180: PUSH
8181: LD_INT 4
8183: PUSH
8184: LD_INT 5
8186: PUSH
8187: LD_INT 6
8189: PUSH
8190: LD_INT 7
8192: PUSH
8193: LD_INT 8
8195: PUSH
8196: LD_INT 9
8198: PUSH
8199: LD_INT 10
8201: PUSH
8202: LD_INT 11
8204: PUSH
8205: LD_INT 12
8207: PUSH
8208: LD_INT 13
8210: PUSH
8211: LD_INT 14
8213: PUSH
8214: LD_INT 15
8216: PUSH
8217: LD_INT 16
8219: PUSH
8220: LD_INT 17
8222: PUSH
8223: LD_INT 18
8225: PUSH
8226: LD_INT 19
8228: PUSH
8229: LD_INT 20
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 22
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 24
8243: PUSH
8244: LD_INT 25
8246: PUSH
8247: LD_INT 26
8249: PUSH
8250: LD_INT 27
8252: PUSH
8253: LD_INT 28
8255: PUSH
8256: LD_INT 29
8258: PUSH
8259: LD_INT 30
8261: PUSH
8262: LD_INT 31
8264: PUSH
8265: LD_INT 32
8267: PUSH
8268: LD_INT 33
8270: PUSH
8271: LD_INT 34
8273: PUSH
8274: LD_INT 36
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 101
8316: PUSH
8317: LD_INT 102
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 104
8325: PUSH
8326: LD_INT 105
8328: PUSH
8329: LD_INT 106
8331: PUSH
8332: LD_INT 107
8334: PUSH
8335: LD_INT 108
8337: PUSH
8338: LD_INT 109
8340: PUSH
8341: LD_INT 110
8343: PUSH
8344: LD_INT 111
8346: PUSH
8347: LD_INT 112
8349: PUSH
8350: LD_INT 113
8352: PUSH
8353: LD_INT 114
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 9323
8378: LD_INT 15
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8598
8386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: LD_INT 1
8394: PUSH
8395: LD_INT 2
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: LD_INT 4
8403: PUSH
8404: LD_INT 5
8406: PUSH
8407: LD_INT 6
8409: PUSH
8410: LD_INT 7
8412: PUSH
8413: LD_INT 8
8415: PUSH
8416: LD_INT 9
8418: PUSH
8419: LD_INT 10
8421: PUSH
8422: LD_INT 11
8424: PUSH
8425: LD_INT 12
8427: PUSH
8428: LD_INT 13
8430: PUSH
8431: LD_INT 14
8433: PUSH
8434: LD_INT 15
8436: PUSH
8437: LD_INT 16
8439: PUSH
8440: LD_INT 17
8442: PUSH
8443: LD_INT 18
8445: PUSH
8446: LD_INT 19
8448: PUSH
8449: LD_INT 20
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 23
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: LD_INT 27
8472: PUSH
8473: LD_INT 28
8475: PUSH
8476: LD_INT 29
8478: PUSH
8479: LD_INT 30
8481: PUSH
8482: LD_INT 31
8484: PUSH
8485: LD_INT 32
8487: PUSH
8488: LD_INT 33
8490: PUSH
8491: LD_INT 34
8493: PUSH
8494: LD_INT 36
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 101
8536: PUSH
8537: LD_INT 102
8539: PUSH
8540: LD_INT 103
8542: PUSH
8543: LD_INT 104
8545: PUSH
8546: LD_INT 105
8548: PUSH
8549: LD_INT 106
8551: PUSH
8552: LD_INT 107
8554: PUSH
8555: LD_INT 108
8557: PUSH
8558: LD_INT 109
8560: PUSH
8561: LD_INT 110
8563: PUSH
8564: LD_INT 111
8566: PUSH
8567: LD_INT 112
8569: PUSH
8570: LD_INT 113
8572: PUSH
8573: LD_INT 114
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: ST_TO_ADDR
8596: GO 9323
8598: LD_INT 16
8600: DOUBLE
8601: EQUAL
8602: IFTRUE 8606
8604: GO 8730
8606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 4
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 7
8623: PUSH
8624: LD_INT 11
8626: PUSH
8627: LD_INT 12
8629: PUSH
8630: LD_INT 15
8632: PUSH
8633: LD_INT 16
8635: PUSH
8636: LD_INT 20
8638: PUSH
8639: LD_INT 21
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_INT 23
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 26
8653: PUSH
8654: LD_INT 30
8656: PUSH
8657: LD_INT 31
8659: PUSH
8660: LD_INT 32
8662: PUSH
8663: LD_INT 33
8665: PUSH
8666: LD_INT 34
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 101
8692: PUSH
8693: LD_INT 102
8695: PUSH
8696: LD_INT 103
8698: PUSH
8699: LD_INT 106
8701: PUSH
8702: LD_INT 108
8704: PUSH
8705: LD_INT 112
8707: PUSH
8708: LD_INT 113
8710: PUSH
8711: LD_INT 114
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: ST_TO_ADDR
8728: GO 9323
8730: LD_INT 17
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8950
8738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: LD_INT 4
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: LD_INT 6
8761: PUSH
8762: LD_INT 7
8764: PUSH
8765: LD_INT 8
8767: PUSH
8768: LD_INT 9
8770: PUSH
8771: LD_INT 10
8773: PUSH
8774: LD_INT 11
8776: PUSH
8777: LD_INT 12
8779: PUSH
8780: LD_INT 13
8782: PUSH
8783: LD_INT 14
8785: PUSH
8786: LD_INT 15
8788: PUSH
8789: LD_INT 16
8791: PUSH
8792: LD_INT 17
8794: PUSH
8795: LD_INT 18
8797: PUSH
8798: LD_INT 19
8800: PUSH
8801: LD_INT 20
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_INT 23
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: LD_INT 27
8824: PUSH
8825: LD_INT 28
8827: PUSH
8828: LD_INT 29
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 31
8836: PUSH
8837: LD_INT 32
8839: PUSH
8840: LD_INT 33
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 36
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 101
8888: PUSH
8889: LD_INT 102
8891: PUSH
8892: LD_INT 103
8894: PUSH
8895: LD_INT 104
8897: PUSH
8898: LD_INT 105
8900: PUSH
8901: LD_INT 106
8903: PUSH
8904: LD_INT 107
8906: PUSH
8907: LD_INT 108
8909: PUSH
8910: LD_INT 109
8912: PUSH
8913: LD_INT 110
8915: PUSH
8916: LD_INT 111
8918: PUSH
8919: LD_INT 112
8921: PUSH
8922: LD_INT 113
8924: PUSH
8925: LD_INT 114
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: ST_TO_ADDR
8948: GO 9323
8950: LD_INT 18
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 9094
8958: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8959: LD_ADDR_VAR 0 1
8963: PUSH
8964: LD_INT 2
8966: PUSH
8967: LD_INT 4
8969: PUSH
8970: LD_INT 5
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: LD_INT 11
8978: PUSH
8979: LD_INT 12
8981: PUSH
8982: LD_INT 15
8984: PUSH
8985: LD_INT 16
8987: PUSH
8988: LD_INT 20
8990: PUSH
8991: LD_INT 21
8993: PUSH
8994: LD_INT 22
8996: PUSH
8997: LD_INT 23
8999: PUSH
9000: LD_INT 25
9002: PUSH
9003: LD_INT 26
9005: PUSH
9006: LD_INT 30
9008: PUSH
9009: LD_INT 31
9011: PUSH
9012: LD_INT 32
9014: PUSH
9015: LD_INT 33
9017: PUSH
9018: LD_INT 34
9020: PUSH
9021: LD_INT 35
9023: PUSH
9024: LD_INT 36
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 101
9052: PUSH
9053: LD_INT 102
9055: PUSH
9056: LD_INT 103
9058: PUSH
9059: LD_INT 106
9061: PUSH
9062: LD_INT 108
9064: PUSH
9065: LD_INT 112
9067: PUSH
9068: LD_INT 113
9070: PUSH
9071: LD_INT 114
9073: PUSH
9074: LD_INT 115
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: ST_TO_ADDR
9092: GO 9323
9094: LD_INT 19
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9322
9102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_INT 1
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: LD_INT 3
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: LD_INT 5
9122: PUSH
9123: LD_INT 6
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 8
9131: PUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 11
9140: PUSH
9141: LD_INT 12
9143: PUSH
9144: LD_INT 13
9146: PUSH
9147: LD_INT 14
9149: PUSH
9150: LD_INT 15
9152: PUSH
9153: LD_INT 16
9155: PUSH
9156: LD_INT 17
9158: PUSH
9159: LD_INT 18
9161: PUSH
9162: LD_INT 19
9164: PUSH
9165: LD_INT 20
9167: PUSH
9168: LD_INT 21
9170: PUSH
9171: LD_INT 22
9173: PUSH
9174: LD_INT 23
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 25
9182: PUSH
9183: LD_INT 26
9185: PUSH
9186: LD_INT 27
9188: PUSH
9189: LD_INT 28
9191: PUSH
9192: LD_INT 29
9194: PUSH
9195: LD_INT 30
9197: PUSH
9198: LD_INT 31
9200: PUSH
9201: LD_INT 32
9203: PUSH
9204: LD_INT 33
9206: PUSH
9207: LD_INT 34
9209: PUSH
9210: LD_INT 35
9212: PUSH
9213: LD_INT 36
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 101
9256: PUSH
9257: LD_INT 102
9259: PUSH
9260: LD_INT 103
9262: PUSH
9263: LD_INT 104
9265: PUSH
9266: LD_INT 105
9268: PUSH
9269: LD_INT 106
9271: PUSH
9272: LD_INT 107
9274: PUSH
9275: LD_INT 108
9277: PUSH
9278: LD_INT 109
9280: PUSH
9281: LD_INT 110
9283: PUSH
9284: LD_INT 111
9286: PUSH
9287: LD_INT 112
9289: PUSH
9290: LD_INT 113
9292: PUSH
9293: LD_INT 114
9295: PUSH
9296: LD_INT 115
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: ST_TO_ADDR
9320: GO 9323
9322: POP
// end else
9323: GO 9542
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_INT 1
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: LD_INT 3
9338: PUSH
9339: LD_INT 4
9341: PUSH
9342: LD_INT 5
9344: PUSH
9345: LD_INT 6
9347: PUSH
9348: LD_INT 7
9350: PUSH
9351: LD_INT 8
9353: PUSH
9354: LD_INT 9
9356: PUSH
9357: LD_INT 10
9359: PUSH
9360: LD_INT 11
9362: PUSH
9363: LD_INT 12
9365: PUSH
9366: LD_INT 13
9368: PUSH
9369: LD_INT 14
9371: PUSH
9372: LD_INT 15
9374: PUSH
9375: LD_INT 16
9377: PUSH
9378: LD_INT 17
9380: PUSH
9381: LD_INT 18
9383: PUSH
9384: LD_INT 19
9386: PUSH
9387: LD_INT 20
9389: PUSH
9390: LD_INT 21
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 23
9398: PUSH
9399: LD_INT 24
9401: PUSH
9402: LD_INT 25
9404: PUSH
9405: LD_INT 26
9407: PUSH
9408: LD_INT 27
9410: PUSH
9411: LD_INT 28
9413: PUSH
9414: LD_INT 29
9416: PUSH
9417: LD_INT 30
9419: PUSH
9420: LD_INT 31
9422: PUSH
9423: LD_INT 32
9425: PUSH
9426: LD_INT 33
9428: PUSH
9429: LD_INT 34
9431: PUSH
9432: LD_INT 35
9434: PUSH
9435: LD_INT 36
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 101
9478: PUSH
9479: LD_INT 102
9481: PUSH
9482: LD_INT 103
9484: PUSH
9485: LD_INT 104
9487: PUSH
9488: LD_INT 105
9490: PUSH
9491: LD_INT 106
9493: PUSH
9494: LD_INT 107
9496: PUSH
9497: LD_INT 108
9499: PUSH
9500: LD_INT 109
9502: PUSH
9503: LD_INT 110
9505: PUSH
9506: LD_INT 111
9508: PUSH
9509: LD_INT 112
9511: PUSH
9512: LD_INT 113
9514: PUSH
9515: LD_INT 114
9517: PUSH
9518: LD_INT 115
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if result then
9542: LD_VAR 0 1
9546: IFFALSE 9835
// begin normal :=  ;
9548: LD_ADDR_VAR 0 3
9552: PUSH
9553: LD_STRING 
9555: ST_TO_ADDR
// hardcore :=  ;
9556: LD_ADDR_VAR 0 4
9560: PUSH
9561: LD_STRING 
9563: ST_TO_ADDR
// for i = 1 to normalCounter do
9564: LD_ADDR_VAR 0 5
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_EXP 24
9578: PUSH
9579: FOR_TO
9580: IFFALSE 9681
// begin tmp := 0 ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_STRING 0
9589: ST_TO_ADDR
// if result [ 1 ] then
9590: LD_VAR 0 1
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: IFFALSE 9663
// if result [ 1 ] [ 1 ] = i then
9600: LD_VAR 0 1
9604: PUSH
9605: LD_INT 1
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PUSH
9613: LD_VAR 0 5
9617: EQUAL
9618: IFFALSE 9663
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9620: LD_ADDR_VAR 0 1
9624: PUSH
9625: LD_VAR 0 1
9629: PPUSH
9630: LD_INT 1
9632: PPUSH
9633: LD_VAR 0 1
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 3
9649: PPUSH
9650: CALL_OW 1
9654: ST_TO_ADDR
// tmp := 1 ;
9655: LD_ADDR_VAR 0 2
9659: PUSH
9660: LD_STRING 1
9662: ST_TO_ADDR
// end ; normal := normal & tmp ;
9663: LD_ADDR_VAR 0 3
9667: PUSH
9668: LD_VAR 0 3
9672: PUSH
9673: LD_VAR 0 2
9677: STR
9678: ST_TO_ADDR
// end ;
9679: GO 9579
9681: POP
9682: POP
// for i = 1 to hardcoreCounter do
9683: LD_ADDR_VAR 0 5
9687: PUSH
9688: DOUBLE
9689: LD_INT 1
9691: DEC
9692: ST_TO_ADDR
9693: LD_EXP 25
9697: PUSH
9698: FOR_TO
9699: IFFALSE 9804
// begin tmp := 0 ;
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_STRING 0
9708: ST_TO_ADDR
// if result [ 2 ] then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 2
9716: ARRAY
9717: IFFALSE 9786
// if result [ 2 ] [ 1 ] = 100 + i then
9719: LD_VAR 0 1
9723: PUSH
9724: LD_INT 2
9726: ARRAY
9727: PUSH
9728: LD_INT 1
9730: ARRAY
9731: PUSH
9732: LD_INT 100
9734: PUSH
9735: LD_VAR 0 5
9739: PLUS
9740: EQUAL
9741: IFFALSE 9786
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9743: LD_ADDR_VAR 0 1
9747: PUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: LD_INT 2
9755: PPUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 2
9763: ARRAY
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 3
9772: PPUSH
9773: CALL_OW 1
9777: ST_TO_ADDR
// tmp := 1 ;
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_STRING 1
9785: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: STR
9801: ST_TO_ADDR
// end ;
9802: GO 9698
9804: POP
9805: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9806: LD_STRING getStreamItemsFromMission("
9808: PUSH
9809: LD_VAR 0 3
9813: STR
9814: PUSH
9815: LD_STRING ","
9817: STR
9818: PUSH
9819: LD_VAR 0 4
9823: STR
9824: PUSH
9825: LD_STRING ")
9827: STR
9828: PPUSH
9829: CALL_OW 559
// end else
9833: GO 9842
// ToLua ( getStreamItemsFromMission("","") ) ;
9835: LD_STRING getStreamItemsFromMission("","")
9837: PPUSH
9838: CALL_OW 559
// end ;
9842: LD_VAR 0 1
9846: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9847: LD_EXP 23
9851: PUSH
9852: LD_EXP 28
9856: AND
9857: IFFALSE 9981
9859: GO 9861
9861: DISABLE
9862: LD_INT 0
9864: PPUSH
9865: PPUSH
// begin enable ;
9866: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: LD_INT 22
9874: PUSH
9875: LD_OWVAR 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: LD_INT 34
9889: PUSH
9890: LD_INT 7
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 34
9899: PUSH
9900: LD_INT 45
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 34
9909: PUSH
9910: LD_INT 28
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 34
9919: PUSH
9920: LD_INT 47
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: ST_TO_ADDR
// if not tmp then
9943: LD_VAR 0 2
9947: NOT
9948: IFFALSE 9952
// exit ;
9950: GO 9981
// for i in tmp do
9952: LD_ADDR_VAR 0 1
9956: PUSH
9957: LD_VAR 0 2
9961: PUSH
9962: FOR_IN
9963: IFFALSE 9979
// begin SetLives ( i , 0 ) ;
9965: LD_VAR 0 1
9969: PPUSH
9970: LD_INT 0
9972: PPUSH
9973: CALL_OW 234
// end ;
9977: GO 9962
9979: POP
9980: POP
// end ;
9981: PPOPN 2
9983: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9984: LD_EXP 23
9988: PUSH
9989: LD_EXP 29
9993: AND
9994: IFFALSE 10078
9996: GO 9998
9998: DISABLE
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
// begin enable ;
10003: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10004: LD_ADDR_VAR 0 2
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_OWVAR 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 32
10023: PUSH
10024: LD_INT 3
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PPUSH
10035: CALL_OW 69
10039: ST_TO_ADDR
// if not tmp then
10040: LD_VAR 0 2
10044: NOT
10045: IFFALSE 10049
// exit ;
10047: GO 10078
// for i in tmp do
10049: LD_ADDR_VAR 0 1
10053: PUSH
10054: LD_VAR 0 2
10058: PUSH
10059: FOR_IN
10060: IFFALSE 10076
// begin SetLives ( i , 0 ) ;
10062: LD_VAR 0 1
10066: PPUSH
10067: LD_INT 0
10069: PPUSH
10070: CALL_OW 234
// end ;
10074: GO 10059
10076: POP
10077: POP
// end ;
10078: PPOPN 2
10080: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10081: LD_EXP 23
10085: PUSH
10086: LD_EXP 26
10090: AND
10091: IFFALSE 10184
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin enable ;
10099: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10100: LD_ADDR_VAR 0 1
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_OWVAR 2
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 25
10122: PUSH
10123: LD_INT 5
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 25
10132: PUSH
10133: LD_INT 9
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 25
10142: PUSH
10143: LD_INT 8
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: PUSH
10165: FOR_IN
10166: IFFALSE 10182
// begin SetClass ( i , 1 ) ;
10168: LD_VAR 0 1
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 336
// end ;
10180: GO 10165
10182: POP
10183: POP
// end ;
10184: PPOPN 1
10186: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10187: LD_EXP 23
10191: PUSH
10192: LD_EXP 27
10196: AND
10197: PUSH
10198: LD_OWVAR 65
10202: PUSH
10203: LD_INT 7
10205: LESS
10206: AND
10207: IFFALSE 10221
10209: GO 10211
10211: DISABLE
// begin enable ;
10212: ENABLE
// game_speed := 7 ;
10213: LD_ADDR_OWVAR 65
10217: PUSH
10218: LD_INT 7
10220: ST_TO_ADDR
// end ;
10221: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10222: LD_EXP 23
10226: PUSH
10227: LD_EXP 30
10231: AND
10232: IFFALSE 10434
10234: GO 10236
10236: DISABLE
10237: LD_INT 0
10239: PPUSH
10240: PPUSH
10241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10242: LD_ADDR_VAR 0 3
10246: PUSH
10247: LD_INT 81
10249: PUSH
10250: LD_OWVAR 2
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 21
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PPUSH
10273: CALL_OW 69
10277: ST_TO_ADDR
// if not tmp then
10278: LD_VAR 0 3
10282: NOT
10283: IFFALSE 10287
// exit ;
10285: GO 10434
// if tmp > 5 then
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 5
10294: GREATER
10295: IFFALSE 10307
// k := 5 else
10297: LD_ADDR_VAR 0 2
10301: PUSH
10302: LD_INT 5
10304: ST_TO_ADDR
10305: GO 10317
// k := tmp ;
10307: LD_ADDR_VAR 0 2
10311: PUSH
10312: LD_VAR 0 3
10316: ST_TO_ADDR
// for i := 1 to k do
10317: LD_ADDR_VAR 0 1
10321: PUSH
10322: DOUBLE
10323: LD_INT 1
10325: DEC
10326: ST_TO_ADDR
10327: LD_VAR 0 2
10331: PUSH
10332: FOR_TO
10333: IFFALSE 10432
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10335: LD_VAR 0 3
10339: PUSH
10340: LD_VAR 0 1
10344: ARRAY
10345: PPUSH
10346: LD_VAR 0 1
10350: PUSH
10351: LD_INT 4
10353: MOD
10354: PUSH
10355: LD_INT 1
10357: PLUS
10358: PPUSH
10359: CALL_OW 259
10363: PUSH
10364: LD_INT 10
10366: LESS
10367: IFFALSE 10430
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10369: LD_VAR 0 3
10373: PUSH
10374: LD_VAR 0 1
10378: ARRAY
10379: PPUSH
10380: LD_VAR 0 1
10384: PUSH
10385: LD_INT 4
10387: MOD
10388: PUSH
10389: LD_INT 1
10391: PLUS
10392: PPUSH
10393: LD_VAR 0 3
10397: PUSH
10398: LD_VAR 0 1
10402: ARRAY
10403: PPUSH
10404: LD_VAR 0 1
10408: PUSH
10409: LD_INT 4
10411: MOD
10412: PUSH
10413: LD_INT 1
10415: PLUS
10416: PPUSH
10417: CALL_OW 259
10421: PUSH
10422: LD_INT 1
10424: PLUS
10425: PPUSH
10426: CALL_OW 237
10430: GO 10332
10432: POP
10433: POP
// end ;
10434: PPOPN 3
10436: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10437: LD_EXP 23
10441: PUSH
10442: LD_EXP 31
10446: AND
10447: IFFALSE 10467
10449: GO 10451
10451: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10452: LD_INT 4
10454: PPUSH
10455: LD_OWVAR 2
10459: PPUSH
10460: LD_INT 0
10462: PPUSH
10463: CALL_OW 324
10467: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10468: LD_EXP 23
10472: PUSH
10473: LD_EXP 60
10477: AND
10478: IFFALSE 10498
10480: GO 10482
10482: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10483: LD_INT 19
10485: PPUSH
10486: LD_OWVAR 2
10490: PPUSH
10491: LD_INT 0
10493: PPUSH
10494: CALL_OW 324
10498: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10499: LD_EXP 23
10503: PUSH
10504: LD_EXP 32
10508: AND
10509: IFFALSE 10611
10511: GO 10513
10513: DISABLE
10514: LD_INT 0
10516: PPUSH
10517: PPUSH
// begin enable ;
10518: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_OWVAR 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: LD_INT 34
10541: PUSH
10542: LD_INT 11
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 34
10551: PUSH
10552: LD_INT 30
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PPUSH
10568: CALL_OW 69
10572: ST_TO_ADDR
// if not tmp then
10573: LD_VAR 0 2
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10611
// for i in tmp do
10582: LD_ADDR_VAR 0 1
10586: PUSH
10587: LD_VAR 0 2
10591: PUSH
10592: FOR_IN
10593: IFFALSE 10609
// begin SetLives ( i , 0 ) ;
10595: LD_VAR 0 1
10599: PPUSH
10600: LD_INT 0
10602: PPUSH
10603: CALL_OW 234
// end ;
10607: GO 10592
10609: POP
10610: POP
// end ;
10611: PPOPN 2
10613: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10614: LD_EXP 23
10618: PUSH
10619: LD_EXP 33
10623: AND
10624: IFFALSE 10644
10626: GO 10628
10628: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10629: LD_INT 32
10631: PPUSH
10632: LD_OWVAR 2
10636: PPUSH
10637: LD_INT 0
10639: PPUSH
10640: CALL_OW 324
10644: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10645: LD_EXP 23
10649: PUSH
10650: LD_EXP 34
10654: AND
10655: IFFALSE 10836
10657: GO 10659
10659: DISABLE
10660: LD_INT 0
10662: PPUSH
10663: PPUSH
10664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_INT 22
10672: PUSH
10673: LD_OWVAR 2
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 33
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// if not tmp then
10701: LD_VAR 0 2
10705: NOT
10706: IFFALSE 10710
// exit ;
10708: GO 10836
// side := 0 ;
10710: LD_ADDR_VAR 0 3
10714: PUSH
10715: LD_INT 0
10717: ST_TO_ADDR
// for i := 1 to 8 do
10718: LD_ADDR_VAR 0 1
10722: PUSH
10723: DOUBLE
10724: LD_INT 1
10726: DEC
10727: ST_TO_ADDR
10728: LD_INT 8
10730: PUSH
10731: FOR_TO
10732: IFFALSE 10780
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10734: LD_OWVAR 2
10738: PUSH
10739: LD_VAR 0 1
10743: NONEQUAL
10744: PUSH
10745: LD_OWVAR 2
10749: PPUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 81
10759: PUSH
10760: LD_INT 2
10762: EQUAL
10763: AND
10764: IFFALSE 10778
// begin side := i ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_VAR 0 1
10775: ST_TO_ADDR
// break ;
10776: GO 10780
// end ;
10778: GO 10731
10780: POP
10781: POP
// if not side then
10782: LD_VAR 0 3
10786: NOT
10787: IFFALSE 10791
// exit ;
10789: GO 10836
// for i := 1 to tmp do
10791: LD_ADDR_VAR 0 1
10795: PUSH
10796: DOUBLE
10797: LD_INT 1
10799: DEC
10800: ST_TO_ADDR
10801: LD_VAR 0 2
10805: PUSH
10806: FOR_TO
10807: IFFALSE 10834
// if Prob ( 60 ) then
10809: LD_INT 60
10811: PPUSH
10812: CALL_OW 13
10816: IFFALSE 10832
// SetSide ( i , side ) ;
10818: LD_VAR 0 1
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: CALL_OW 235
10832: GO 10806
10834: POP
10835: POP
// end ;
10836: PPOPN 3
10838: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10839: LD_EXP 23
10843: PUSH
10844: LD_EXP 36
10848: AND
10849: IFFALSE 10968
10851: GO 10853
10853: DISABLE
10854: LD_INT 0
10856: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10857: LD_ADDR_VAR 0 1
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_OWVAR 2
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 21
10876: PUSH
10877: LD_INT 1
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 23
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: PUSH
10911: FOR_IN
10912: IFFALSE 10966
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 257
10923: PUSH
10924: LD_INT 1
10926: PUSH
10927: LD_INT 2
10929: PUSH
10930: LD_INT 3
10932: PUSH
10933: LD_INT 4
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: IN
10942: IFFALSE 10964
// SetClass ( un , rand ( 1 , 4 ) ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: LD_INT 4
10954: PPUSH
10955: CALL_OW 12
10959: PPUSH
10960: CALL_OW 336
10964: GO 10911
10966: POP
10967: POP
// end ;
10968: PPOPN 1
10970: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10971: LD_EXP 23
10975: PUSH
10976: LD_EXP 35
10980: AND
10981: IFFALSE 11060
10983: GO 10985
10985: DISABLE
10986: LD_INT 0
10988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_OWVAR 2
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 21
11008: PUSH
11009: LD_INT 3
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 69
11024: ST_TO_ADDR
// if not tmp then
11025: LD_VAR 0 1
11029: NOT
11030: IFFALSE 11034
// exit ;
11032: GO 11060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11034: LD_VAR 0 1
11038: PUSH
11039: LD_INT 1
11041: PPUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 12
11051: ARRAY
11052: PPUSH
11053: LD_INT 100
11055: PPUSH
11056: CALL_OW 234
// end ;
11060: PPOPN 1
11062: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11063: LD_EXP 23
11067: PUSH
11068: LD_EXP 37
11072: AND
11073: IFFALSE 11171
11075: GO 11077
11077: DISABLE
11078: LD_INT 0
11080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: LD_INT 22
11088: PUSH
11089: LD_OWVAR 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 21
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: ST_TO_ADDR
// if not tmp then
11117: LD_VAR 0 1
11121: NOT
11122: IFFALSE 11126
// exit ;
11124: GO 11171
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11126: LD_VAR 0 1
11130: PUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL_OW 12
11143: ARRAY
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: LD_INT 4
11150: PPUSH
11151: CALL_OW 12
11155: PPUSH
11156: LD_INT 3000
11158: PPUSH
11159: LD_INT 9000
11161: PPUSH
11162: CALL_OW 12
11166: PPUSH
11167: CALL_OW 492
// end ;
11171: PPOPN 1
11173: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11174: LD_EXP 23
11178: PUSH
11179: LD_EXP 38
11183: AND
11184: IFFALSE 11204
11186: GO 11188
11188: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11189: LD_INT 1
11191: PPUSH
11192: LD_OWVAR 2
11196: PPUSH
11197: LD_INT 0
11199: PPUSH
11200: CALL_OW 324
11204: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11205: LD_EXP 23
11209: PUSH
11210: LD_EXP 39
11214: AND
11215: IFFALSE 11298
11217: GO 11219
11219: DISABLE
11220: LD_INT 0
11222: PPUSH
11223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11224: LD_ADDR_VAR 0 2
11228: PUSH
11229: LD_INT 22
11231: PUSH
11232: LD_OWVAR 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 21
11243: PUSH
11244: LD_INT 3
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: ST_TO_ADDR
// if not tmp then
11260: LD_VAR 0 2
11264: NOT
11265: IFFALSE 11269
// exit ;
11267: GO 11298
// for i in tmp do
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_VAR 0 2
11278: PUSH
11279: FOR_IN
11280: IFFALSE 11296
// SetBLevel ( i , 10 ) ;
11282: LD_VAR 0 1
11286: PPUSH
11287: LD_INT 10
11289: PPUSH
11290: CALL_OW 241
11294: GO 11279
11296: POP
11297: POP
// end ;
11298: PPOPN 2
11300: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11301: LD_EXP 23
11305: PUSH
11306: LD_EXP 40
11310: AND
11311: IFFALSE 11422
11313: GO 11315
11315: DISABLE
11316: LD_INT 0
11318: PPUSH
11319: PPUSH
11320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_OWVAR 2
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: ST_TO_ADDR
// if not tmp then
11357: LD_VAR 0 3
11361: NOT
11362: IFFALSE 11366
// exit ;
11364: GO 11422
// un := tmp [ rand ( 1 , tmp ) ] ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_VAR 0 3
11375: PUSH
11376: LD_INT 1
11378: PPUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: CALL_OW 12
11388: ARRAY
11389: ST_TO_ADDR
// if Crawls ( un ) then
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL_OW 318
11399: IFFALSE 11410
// ComWalk ( un ) ;
11401: LD_VAR 0 2
11405: PPUSH
11406: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11410: LD_VAR 0 2
11414: PPUSH
11415: LD_INT 5
11417: PPUSH
11418: CALL_OW 336
// end ;
11422: PPOPN 3
11424: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11425: LD_EXP 23
11429: PUSH
11430: LD_EXP 41
11434: AND
11435: PUSH
11436: LD_OWVAR 67
11440: PUSH
11441: LD_INT 3
11443: LESS
11444: AND
11445: IFFALSE 11464
11447: GO 11449
11449: DISABLE
// Difficulty := Difficulty + 1 ;
11450: LD_ADDR_OWVAR 67
11454: PUSH
11455: LD_OWVAR 67
11459: PUSH
11460: LD_INT 1
11462: PLUS
11463: ST_TO_ADDR
11464: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11465: LD_EXP 23
11469: PUSH
11470: LD_EXP 42
11474: AND
11475: IFFALSE 11578
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
// begin for i := 1 to 5 do
11483: LD_ADDR_VAR 0 1
11487: PUSH
11488: DOUBLE
11489: LD_INT 1
11491: DEC
11492: ST_TO_ADDR
11493: LD_INT 5
11495: PUSH
11496: FOR_TO
11497: IFFALSE 11576
// begin uc_nation := nation_nature ;
11499: LD_ADDR_OWVAR 21
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// uc_side := 0 ;
11507: LD_ADDR_OWVAR 20
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11515: LD_ADDR_OWVAR 29
11519: PUSH
11520: LD_INT 12
11522: PUSH
11523: LD_INT 12
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: ST_TO_ADDR
// hc_agressivity := 20 ;
11530: LD_ADDR_OWVAR 35
11534: PUSH
11535: LD_INT 20
11537: ST_TO_ADDR
// hc_class := class_tiger ;
11538: LD_ADDR_OWVAR 28
11542: PUSH
11543: LD_INT 14
11545: ST_TO_ADDR
// hc_gallery :=  ;
11546: LD_ADDR_OWVAR 33
11550: PUSH
11551: LD_STRING 
11553: ST_TO_ADDR
// hc_name :=  ;
11554: LD_ADDR_OWVAR 26
11558: PUSH
11559: LD_STRING 
11561: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11562: CALL_OW 44
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 51
// end ;
11574: GO 11496
11576: POP
11577: POP
// end ;
11578: PPOPN 1
11580: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11581: LD_EXP 23
11585: PUSH
11586: LD_EXP 43
11590: AND
11591: IFFALSE 11600
11593: GO 11595
11595: DISABLE
// StreamSibBomb ;
11596: CALL 11601 0 0
11600: END
// export function StreamSibBomb ; var i , x , y ; begin
11601: LD_INT 0
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
// result := false ;
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// for i := 1 to 16 do
11615: LD_ADDR_VAR 0 2
11619: PUSH
11620: DOUBLE
11621: LD_INT 1
11623: DEC
11624: ST_TO_ADDR
11625: LD_INT 16
11627: PUSH
11628: FOR_TO
11629: IFFALSE 11828
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 10
11638: PUSH
11639: LD_INT 20
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: LD_INT 40
11647: PUSH
11648: LD_INT 50
11650: PUSH
11651: LD_INT 60
11653: PUSH
11654: LD_INT 70
11656: PUSH
11657: LD_INT 80
11659: PUSH
11660: LD_INT 90
11662: PUSH
11663: LD_INT 100
11665: PUSH
11666: LD_INT 110
11668: PUSH
11669: LD_INT 120
11671: PUSH
11672: LD_INT 130
11674: PUSH
11675: LD_INT 140
11677: PUSH
11678: LD_INT 150
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 1
11700: PPUSH
11701: LD_INT 15
11703: PPUSH
11704: CALL_OW 12
11708: ARRAY
11709: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11710: LD_ADDR_VAR 0 4
11714: PUSH
11715: LD_INT 10
11717: PUSH
11718: LD_INT 20
11720: PUSH
11721: LD_INT 30
11723: PUSH
11724: LD_INT 40
11726: PUSH
11727: LD_INT 50
11729: PUSH
11730: LD_INT 60
11732: PUSH
11733: LD_INT 70
11735: PUSH
11736: LD_INT 80
11738: PUSH
11739: LD_INT 90
11741: PUSH
11742: LD_INT 100
11744: PUSH
11745: LD_INT 110
11747: PUSH
11748: LD_INT 120
11750: PUSH
11751: LD_INT 130
11753: PUSH
11754: LD_INT 140
11756: PUSH
11757: LD_INT 150
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 1
11779: PPUSH
11780: LD_INT 15
11782: PPUSH
11783: CALL_OW 12
11787: ARRAY
11788: ST_TO_ADDR
// if ValidHex ( x , y ) then
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_VAR 0 4
11798: PPUSH
11799: CALL_OW 488
11803: IFFALSE 11826
// begin result := [ x , y ] ;
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_VAR 0 3
11814: PUSH
11815: LD_VAR 0 4
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: ST_TO_ADDR
// break ;
11824: GO 11828
// end ; end ;
11826: GO 11628
11828: POP
11829: POP
// if result then
11830: LD_VAR 0 1
11834: IFFALSE 11894
// begin ToLua ( playSibBomb() ) ;
11836: LD_STRING playSibBomb()
11838: PPUSH
11839: CALL_OW 559
// wait ( 0 0$14 ) ;
11843: LD_INT 490
11845: PPUSH
11846: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11850: LD_VAR 0 1
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: PPUSH
11859: LD_VAR 0 1
11863: PUSH
11864: LD_INT 2
11866: ARRAY
11867: PPUSH
11868: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11872: LD_VAR 0 1
11876: PUSH
11877: LD_INT 1
11879: ARRAY
11880: PPUSH
11881: LD_VAR 0 1
11885: PUSH
11886: LD_INT 2
11888: ARRAY
11889: PPUSH
11890: CALL_OW 429
// end ; end ;
11894: LD_VAR 0 1
11898: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11899: LD_EXP 23
11903: PUSH
11904: LD_EXP 45
11908: AND
11909: IFFALSE 11921
11911: GO 11913
11913: DISABLE
// YouLost (  ) ;
11914: LD_STRING 
11916: PPUSH
11917: CALL_OW 104
11921: END
// every 0 0$1 trigger StreamModeActive and sFog do
11922: LD_EXP 23
11926: PUSH
11927: LD_EXP 44
11931: AND
11932: IFFALSE 11946
11934: GO 11936
11936: DISABLE
// FogOff ( your_side ) ;
11937: LD_OWVAR 2
11941: PPUSH
11942: CALL_OW 344
11946: END
// every 0 0$1 trigger StreamModeActive and sSun do
11947: LD_EXP 23
11951: PUSH
11952: LD_EXP 46
11956: AND
11957: IFFALSE 11985
11959: GO 11961
11961: DISABLE
// begin solar_recharge_percent := 0 ;
11962: LD_ADDR_OWVAR 79
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11970: LD_INT 10500
11972: PPUSH
11973: CALL_OW 67
// solar_recharge_percent := 100 ;
11977: LD_ADDR_OWVAR 79
11981: PUSH
11982: LD_INT 100
11984: ST_TO_ADDR
// end ;
11985: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11986: LD_EXP 23
11990: PUSH
11991: LD_EXP 47
11995: AND
11996: IFFALSE 12235
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
12005: PPUSH
// begin tmp := [ ] ;
12006: LD_ADDR_VAR 0 3
12010: PUSH
12011: EMPTY
12012: ST_TO_ADDR
// for i := 1 to 6 do
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: DOUBLE
12019: LD_INT 1
12021: DEC
12022: ST_TO_ADDR
12023: LD_INT 6
12025: PUSH
12026: FOR_TO
12027: IFFALSE 12132
// begin uc_nation := nation_nature ;
12029: LD_ADDR_OWVAR 21
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// uc_side := 0 ;
12037: LD_ADDR_OWVAR 20
12041: PUSH
12042: LD_INT 0
12044: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12045: LD_ADDR_OWVAR 29
12049: PUSH
12050: LD_INT 12
12052: PUSH
12053: LD_INT 12
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: ST_TO_ADDR
// hc_agressivity := 20 ;
12060: LD_ADDR_OWVAR 35
12064: PUSH
12065: LD_INT 20
12067: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12068: LD_ADDR_OWVAR 28
12072: PUSH
12073: LD_INT 17
12075: ST_TO_ADDR
// hc_gallery :=  ;
12076: LD_ADDR_OWVAR 33
12080: PUSH
12081: LD_STRING 
12083: ST_TO_ADDR
// hc_name :=  ;
12084: LD_ADDR_OWVAR 26
12088: PUSH
12089: LD_STRING 
12091: ST_TO_ADDR
// un := CreateHuman ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: CALL_OW 44
12101: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 51
// tmp := tmp ^ un ;
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: LD_VAR 0 3
12123: PUSH
12124: LD_VAR 0 2
12128: ADD
12129: ST_TO_ADDR
// end ;
12130: GO 12026
12132: POP
12133: POP
// repeat wait ( 0 0$1 ) ;
12134: LD_INT 35
12136: PPUSH
12137: CALL_OW 67
// for un in tmp do
12141: LD_ADDR_VAR 0 2
12145: PUSH
12146: LD_VAR 0 3
12150: PUSH
12151: FOR_IN
12152: IFFALSE 12226
// begin if IsDead ( un ) then
12154: LD_VAR 0 2
12158: PPUSH
12159: CALL_OW 301
12163: IFFALSE 12183
// begin tmp := tmp diff un ;
12165: LD_ADDR_VAR 0 3
12169: PUSH
12170: LD_VAR 0 3
12174: PUSH
12175: LD_VAR 0 2
12179: DIFF
12180: ST_TO_ADDR
// continue ;
12181: GO 12151
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_INT 3
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_INT 0
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 69
12209: PPUSH
12210: LD_VAR 0 2
12214: PPUSH
12215: CALL_OW 74
12219: PPUSH
12220: CALL_OW 115
// end ;
12224: GO 12151
12226: POP
12227: POP
// until not tmp ;
12228: LD_VAR 0 3
12232: NOT
12233: IFFALSE 12134
// end ;
12235: PPOPN 3
12237: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12238: LD_EXP 23
12242: PUSH
12243: LD_EXP 48
12247: AND
12248: IFFALSE 12302
12250: GO 12252
12252: DISABLE
// begin ToLua ( displayTroll(); ) ;
12253: LD_STRING displayTroll();
12255: PPUSH
12256: CALL_OW 559
// wait ( 3 3$00 ) ;
12260: LD_INT 6300
12262: PPUSH
12263: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12267: LD_STRING hideTroll();
12269: PPUSH
12270: CALL_OW 559
// wait ( 1 1$00 ) ;
12274: LD_INT 2100
12276: PPUSH
12277: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12281: LD_STRING displayTroll();
12283: PPUSH
12284: CALL_OW 559
// wait ( 1 1$00 ) ;
12288: LD_INT 2100
12290: PPUSH
12291: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12295: LD_STRING hideTroll();
12297: PPUSH
12298: CALL_OW 559
// end ;
12302: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12303: LD_EXP 23
12307: PUSH
12308: LD_EXP 49
12312: AND
12313: IFFALSE 12376
12315: GO 12317
12317: DISABLE
12318: LD_INT 0
12320: PPUSH
// begin p := 0 ;
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 0
12328: ST_TO_ADDR
// repeat game_speed := 1 ;
12329: LD_ADDR_OWVAR 65
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12337: LD_INT 35
12339: PPUSH
12340: CALL_OW 67
// p := p + 1 ;
12344: LD_ADDR_VAR 0 1
12348: PUSH
12349: LD_VAR 0 1
12353: PUSH
12354: LD_INT 1
12356: PLUS
12357: ST_TO_ADDR
// until p >= 60 ;
12358: LD_VAR 0 1
12362: PUSH
12363: LD_INT 60
12365: GREATEREQUAL
12366: IFFALSE 12329
// game_speed := 4 ;
12368: LD_ADDR_OWVAR 65
12372: PUSH
12373: LD_INT 4
12375: ST_TO_ADDR
// end ;
12376: PPOPN 1
12378: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12379: LD_EXP 23
12383: PUSH
12384: LD_EXP 50
12388: AND
12389: IFFALSE 12535
12391: GO 12393
12393: DISABLE
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 0
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: ST_TO_ADDR
// if not depot then
12452: LD_VAR 0 1
12456: NOT
12457: IFFALSE 12461
// exit ;
12459: GO 12535
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12461: LD_ADDR_VAR 0 2
12465: PUSH
12466: LD_VAR 0 1
12470: PUSH
12471: LD_INT 1
12473: PPUSH
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 12
12483: ARRAY
12484: PPUSH
12485: CALL_OW 274
12489: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12490: LD_VAR 0 2
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_INT 0
12500: PPUSH
12501: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12505: LD_VAR 0 2
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 0
12515: PPUSH
12516: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12520: LD_VAR 0 2
12524: PPUSH
12525: LD_INT 3
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 277
// end ;
12535: PPOPN 2
12537: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12538: LD_EXP 23
12542: PUSH
12543: LD_EXP 51
12547: AND
12548: IFFALSE 12645
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12556: LD_ADDR_VAR 0 1
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 21
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 3
12585: PUSH
12586: LD_INT 23
12588: PUSH
12589: LD_INT 0
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// if not tmp then
12610: LD_VAR 0 1
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: LD_INT 200
12640: PPUSH
12641: CALL_OW 234
// end ;
12645: PPOPN 1
12647: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12648: LD_EXP 23
12652: PUSH
12653: LD_EXP 52
12657: AND
12658: IFFALSE 12737
12660: GO 12662
12662: DISABLE
12663: LD_INT 0
12665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12666: LD_ADDR_VAR 0 1
12670: PUSH
12671: LD_INT 22
12673: PUSH
12674: LD_OWVAR 2
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 21
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: ST_TO_ADDR
// if not tmp then
12702: LD_VAR 0 1
12706: NOT
12707: IFFALSE 12711
// exit ;
12709: GO 12737
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: PPUSH
12719: LD_VAR 0 1
12723: PPUSH
12724: CALL_OW 12
12728: ARRAY
12729: PPUSH
12730: LD_INT 60
12732: PPUSH
12733: CALL_OW 234
// end ;
12737: PPOPN 1
12739: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12740: LD_EXP 23
12744: PUSH
12745: LD_EXP 53
12749: AND
12750: IFFALSE 12849
12752: GO 12754
12754: DISABLE
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// begin enable ;
12759: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12760: LD_ADDR_VAR 0 1
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_OWVAR 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 61
12779: PUSH
12780: EMPTY
12781: LIST
12782: PUSH
12783: LD_INT 33
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: ST_TO_ADDR
// if not tmp then
12803: LD_VAR 0 1
12807: NOT
12808: IFFALSE 12812
// exit ;
12810: GO 12849
// for i in tmp do
12812: LD_ADDR_VAR 0 2
12816: PUSH
12817: LD_VAR 0 1
12821: PUSH
12822: FOR_IN
12823: IFFALSE 12847
// if IsControledBy ( i ) then
12825: LD_VAR 0 2
12829: PPUSH
12830: CALL_OW 312
12834: IFFALSE 12845
// ComUnlink ( i ) ;
12836: LD_VAR 0 2
12840: PPUSH
12841: CALL_OW 136
12845: GO 12822
12847: POP
12848: POP
// end ;
12849: PPOPN 2
12851: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12852: LD_EXP 23
12856: PUSH
12857: LD_EXP 54
12861: AND
12862: IFFALSE 13002
12864: GO 12866
12866: DISABLE
12867: LD_INT 0
12869: PPUSH
12870: PPUSH
// begin ToLua ( displayPowell(); ) ;
12871: LD_STRING displayPowell();
12873: PPUSH
12874: CALL_OW 559
// uc_side := 0 ;
12878: LD_ADDR_OWVAR 20
12882: PUSH
12883: LD_INT 0
12885: ST_TO_ADDR
// uc_nation := 2 ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_INT 2
12893: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12894: LD_ADDR_OWVAR 37
12898: PUSH
12899: LD_INT 14
12901: ST_TO_ADDR
// vc_engine := engine_siberite ;
12902: LD_ADDR_OWVAR 39
12906: PUSH
12907: LD_INT 3
12909: ST_TO_ADDR
// vc_control := control_apeman ;
12910: LD_ADDR_OWVAR 38
12914: PUSH
12915: LD_INT 5
12917: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12918: LD_ADDR_OWVAR 40
12922: PUSH
12923: LD_INT 29
12925: ST_TO_ADDR
// un := CreateVehicle ;
12926: LD_ADDR_VAR 0 2
12930: PUSH
12931: CALL_OW 45
12935: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12948: LD_INT 35
12950: PPUSH
12951: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12955: LD_VAR 0 2
12959: PPUSH
12960: LD_INT 22
12962: PUSH
12963: LD_OWVAR 2
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 69
12976: PPUSH
12977: LD_VAR 0 2
12981: PPUSH
12982: CALL_OW 74
12986: PPUSH
12987: CALL_OW 115
// until IsDead ( un ) ;
12991: LD_VAR 0 2
12995: PPUSH
12996: CALL_OW 301
13000: IFFALSE 12948
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sStu do
13005: LD_EXP 23
13009: PUSH
13010: LD_EXP 62
13014: AND
13015: IFFALSE 13031
13017: GO 13019
13019: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13020: LD_STRING displayStucuk();
13022: PPUSH
13023: CALL_OW 559
// ResetFog ;
13027: CALL_OW 335
// end ;
13031: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13032: LD_EXP 23
13036: PUSH
13037: LD_EXP 55
13041: AND
13042: IFFALSE 13183
13044: GO 13046
13046: DISABLE
13047: LD_INT 0
13049: PPUSH
13050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_OWVAR 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 1
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: ST_TO_ADDR
// if not tmp then
13087: LD_VAR 0 2
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 13183
// un := tmp [ rand ( 1 , tmp ) ] ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: LD_INT 1
13108: PPUSH
13109: LD_VAR 0 2
13113: PPUSH
13114: CALL_OW 12
13118: ARRAY
13119: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13120: LD_VAR 0 1
13124: PPUSH
13125: LD_INT 0
13127: PPUSH
13128: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13132: LD_VAR 0 1
13136: PPUSH
13137: LD_OWVAR 3
13141: PUSH
13142: LD_VAR 0 1
13146: DIFF
13147: PPUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 74
13157: PPUSH
13158: CALL_OW 115
// wait ( 0 0$20 ) ;
13162: LD_INT 700
13164: PPUSH
13165: CALL_OW 67
// SetSide ( un , your_side ) ;
13169: LD_VAR 0 1
13173: PPUSH
13174: LD_OWVAR 2
13178: PPUSH
13179: CALL_OW 235
// end ;
13183: PPOPN 2
13185: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13186: LD_EXP 23
13190: PUSH
13191: LD_EXP 56
13195: AND
13196: IFFALSE 13302
13198: GO 13200
13200: DISABLE
13201: LD_INT 0
13203: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13204: LD_ADDR_VAR 0 1
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: LD_INT 30
13226: PUSH
13227: LD_INT 0
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 30
13236: PUSH
13237: LD_INT 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 69
13257: ST_TO_ADDR
// if not depot then
13258: LD_VAR 0 1
13262: NOT
13263: IFFALSE 13267
// exit ;
13265: GO 13302
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 250
13280: PPUSH
13281: LD_VAR 0 1
13285: PUSH
13286: LD_INT 1
13288: ARRAY
13289: PPUSH
13290: CALL_OW 251
13294: PPUSH
13295: LD_INT 70
13297: PPUSH
13298: CALL_OW 495
// end ;
13302: PPOPN 1
13304: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13305: LD_EXP 23
13309: PUSH
13310: LD_EXP 57
13314: AND
13315: IFFALSE 13526
13317: GO 13319
13319: DISABLE
13320: LD_INT 0
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13327: LD_ADDR_VAR 0 5
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_OWVAR 2
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PPUSH
13358: CALL_OW 69
13362: ST_TO_ADDR
// if not tmp then
13363: LD_VAR 0 5
13367: NOT
13368: IFFALSE 13372
// exit ;
13370: GO 13526
// for i in tmp do
13372: LD_ADDR_VAR 0 1
13376: PUSH
13377: LD_VAR 0 5
13381: PUSH
13382: FOR_IN
13383: IFFALSE 13524
// begin d := rand ( 0 , 5 ) ;
13385: LD_ADDR_VAR 0 4
13389: PUSH
13390: LD_INT 0
13392: PPUSH
13393: LD_INT 5
13395: PPUSH
13396: CALL_OW 12
13400: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13401: LD_ADDR_VAR 0 2
13405: PUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: CALL_OW 250
13415: PPUSH
13416: LD_VAR 0 4
13420: PPUSH
13421: LD_INT 3
13423: PPUSH
13424: LD_INT 12
13426: PPUSH
13427: CALL_OW 12
13431: PPUSH
13432: CALL_OW 272
13436: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13437: LD_ADDR_VAR 0 3
13441: PUSH
13442: LD_VAR 0 1
13446: PPUSH
13447: CALL_OW 251
13451: PPUSH
13452: LD_VAR 0 4
13456: PPUSH
13457: LD_INT 3
13459: PPUSH
13460: LD_INT 12
13462: PPUSH
13463: CALL_OW 12
13467: PPUSH
13468: CALL_OW 273
13472: ST_TO_ADDR
// if ValidHex ( x , y ) then
13473: LD_VAR 0 2
13477: PPUSH
13478: LD_VAR 0 3
13482: PPUSH
13483: CALL_OW 488
13487: IFFALSE 13522
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_INT 3
13506: PPUSH
13507: LD_INT 6
13509: PPUSH
13510: CALL_OW 12
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 483
// end ;
13522: GO 13382
13524: POP
13525: POP
// end ;
13526: PPOPN 5
13528: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13529: LD_EXP 23
13533: PUSH
13534: LD_EXP 58
13538: AND
13539: IFFALSE 13633
13541: GO 13543
13543: DISABLE
13544: LD_INT 0
13546: PPUSH
13547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_OWVAR 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 32
13567: PUSH
13568: LD_INT 1
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 21
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 69
13594: ST_TO_ADDR
// if not tmp then
13595: LD_VAR 0 2
13599: NOT
13600: IFFALSE 13604
// exit ;
13602: GO 13633
// for i in tmp do
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: LD_VAR 0 2
13613: PUSH
13614: FOR_IN
13615: IFFALSE 13631
// SetFuel ( i , 0 ) ;
13617: LD_VAR 0 1
13621: PPUSH
13622: LD_INT 0
13624: PPUSH
13625: CALL_OW 240
13629: GO 13614
13631: POP
13632: POP
// end ;
13633: PPOPN 2
13635: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13636: LD_EXP 23
13640: PUSH
13641: LD_EXP 59
13645: AND
13646: IFFALSE 13712
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 30
13673: PUSH
13674: LD_INT 29
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 1
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13712
// DestroyUnit ( tmp [ 1 ] ) ;
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 65
// end ;
13712: PPOPN 1
13714: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13715: LD_EXP 23
13719: PUSH
13720: LD_EXP 61
13724: AND
13725: IFFALSE 13854
13727: GO 13729
13729: DISABLE
13730: LD_INT 0
13732: PPUSH
// begin uc_side := 0 ;
13733: LD_ADDR_OWVAR 20
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// uc_nation := nation_arabian ;
13741: LD_ADDR_OWVAR 21
13745: PUSH
13746: LD_INT 2
13748: ST_TO_ADDR
// hc_gallery :=  ;
13749: LD_ADDR_OWVAR 33
13753: PUSH
13754: LD_STRING 
13756: ST_TO_ADDR
// hc_name :=  ;
13757: LD_ADDR_OWVAR 26
13761: PUSH
13762: LD_STRING 
13764: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 11
13770: PPUSH
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 380
// un := CreateHuman ;
13778: LD_ADDR_VAR 0 1
13782: PUSH
13783: CALL_OW 44
13787: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13800: LD_INT 35
13802: PPUSH
13803: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13807: LD_VAR 0 1
13811: PPUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: PPUSH
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 74
13838: PPUSH
13839: CALL_OW 115
// until IsDead ( un ) ;
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 301
13852: IFFALSE 13800
// end ;
13854: PPOPN 1
13856: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13857: LD_EXP 23
13861: PUSH
13862: LD_EXP 63
13866: AND
13867: IFFALSE 13879
13869: GO 13871
13871: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13872: LD_STRING earthquake(getX(game), 0, 32)
13874: PPUSH
13875: CALL_OW 559
13879: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13880: LD_EXP 23
13884: PUSH
13885: LD_EXP 64
13889: AND
13890: IFFALSE 13981
13892: GO 13894
13894: DISABLE
13895: LD_INT 0
13897: PPUSH
// begin enable ;
13898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13899: LD_ADDR_VAR 0 1
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_OWVAR 2
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 33
13928: PUSH
13929: LD_INT 3
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: PPUSH
13941: CALL_OW 69
13945: ST_TO_ADDR
// if not tmp then
13946: LD_VAR 0 1
13950: NOT
13951: IFFALSE 13955
// exit ;
13953: GO 13981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13955: LD_VAR 0 1
13959: PUSH
13960: LD_INT 1
13962: PPUSH
13963: LD_VAR 0 1
13967: PPUSH
13968: CALL_OW 12
13972: ARRAY
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 234
// end ;
13981: PPOPN 1
13983: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13984: LD_EXP 23
13988: PUSH
13989: LD_EXP 65
13993: AND
13994: IFFALSE 14135
13996: GO 13998
13998: DISABLE
13999: LD_INT 0
14001: PPUSH
14002: PPUSH
14003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14004: LD_ADDR_VAR 0 3
14008: PUSH
14009: LD_INT 22
14011: PUSH
14012: LD_OWVAR 2
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 25
14023: PUSH
14024: LD_INT 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: ST_TO_ADDR
// if not tmp then
14040: LD_VAR 0 3
14044: NOT
14045: IFFALSE 14049
// exit ;
14047: GO 14135
// un := tmp [ rand ( 1 , tmp ) ] ;
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: LD_VAR 0 3
14058: PUSH
14059: LD_INT 1
14061: PPUSH
14062: LD_VAR 0 3
14066: PPUSH
14067: CALL_OW 12
14071: ARRAY
14072: ST_TO_ADDR
// if Crawls ( un ) then
14073: LD_VAR 0 2
14077: PPUSH
14078: CALL_OW 318
14082: IFFALSE 14093
// ComWalk ( un ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14093: LD_VAR 0 2
14097: PPUSH
14098: LD_INT 9
14100: PPUSH
14101: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14105: LD_INT 28
14107: PPUSH
14108: LD_OWVAR 2
14112: PPUSH
14113: LD_INT 2
14115: PPUSH
14116: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14120: LD_INT 29
14122: PPUSH
14123: LD_OWVAR 2
14127: PPUSH
14128: LD_INT 2
14130: PPUSH
14131: CALL_OW 322
// end ;
14135: PPOPN 3
14137: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14138: LD_EXP 23
14142: PUSH
14143: LD_EXP 66
14147: AND
14148: IFFALSE 14259
14150: GO 14152
14152: DISABLE
14153: LD_INT 0
14155: PPUSH
14156: PPUSH
14157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14158: LD_ADDR_VAR 0 3
14162: PUSH
14163: LD_INT 22
14165: PUSH
14166: LD_OWVAR 2
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 25
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 69
14193: ST_TO_ADDR
// if not tmp then
14194: LD_VAR 0 3
14198: NOT
14199: IFFALSE 14203
// exit ;
14201: GO 14259
// un := tmp [ rand ( 1 , tmp ) ] ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_VAR 0 3
14212: PUSH
14213: LD_INT 1
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 12
14225: ARRAY
14226: ST_TO_ADDR
// if Crawls ( un ) then
14227: LD_VAR 0 2
14231: PPUSH
14232: CALL_OW 318
14236: IFFALSE 14247
// ComWalk ( un ) ;
14238: LD_VAR 0 2
14242: PPUSH
14243: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14247: LD_VAR 0 2
14251: PPUSH
14252: LD_INT 8
14254: PPUSH
14255: CALL_OW 336
// end ;
14259: PPOPN 3
14261: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14262: LD_EXP 23
14266: PUSH
14267: LD_EXP 67
14271: AND
14272: IFFALSE 14416
14274: GO 14276
14276: DISABLE
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_OWVAR 2
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 2
14310: PUSH
14311: LD_INT 34
14313: PUSH
14314: LD_INT 12
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 34
14323: PUSH
14324: LD_INT 51
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 34
14333: PUSH
14334: LD_INT 32
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 2
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14416
// for i in tmp do
14366: LD_ADDR_VAR 0 1
14370: PUSH
14371: LD_VAR 0 2
14375: PUSH
14376: FOR_IN
14377: IFFALSE 14414
// if GetCargo ( i , mat_artifact ) = 0 then
14379: LD_VAR 0 1
14383: PPUSH
14384: LD_INT 4
14386: PPUSH
14387: CALL_OW 289
14391: PUSH
14392: LD_INT 0
14394: EQUAL
14395: IFFALSE 14412
// SetCargo ( i , mat_siberit , 100 ) ;
14397: LD_VAR 0 1
14401: PPUSH
14402: LD_INT 3
14404: PPUSH
14405: LD_INT 100
14407: PPUSH
14408: CALL_OW 290
14412: GO 14376
14414: POP
14415: POP
// end ;
14416: PPOPN 2
14418: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14419: LD_EXP 23
14423: PUSH
14424: LD_EXP 68
14428: AND
14429: IFFALSE 14612
14431: GO 14433
14433: DISABLE
14434: LD_INT 0
14436: PPUSH
14437: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14438: LD_ADDR_VAR 0 2
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_OWVAR 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// if not tmp then
14460: LD_VAR 0 2
14464: NOT
14465: IFFALSE 14469
// exit ;
14467: GO 14612
// for i := 1 to 2 do
14469: LD_ADDR_VAR 0 1
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_INT 2
14481: PUSH
14482: FOR_TO
14483: IFFALSE 14610
// begin uc_side := your_side ;
14485: LD_ADDR_OWVAR 20
14489: PUSH
14490: LD_OWVAR 2
14494: ST_TO_ADDR
// uc_nation := nation_american ;
14495: LD_ADDR_OWVAR 21
14499: PUSH
14500: LD_INT 1
14502: ST_TO_ADDR
// vc_chassis := us_morphling ;
14503: LD_ADDR_OWVAR 37
14507: PUSH
14508: LD_INT 5
14510: ST_TO_ADDR
// vc_engine := engine_siberite ;
14511: LD_ADDR_OWVAR 39
14515: PUSH
14516: LD_INT 3
14518: ST_TO_ADDR
// vc_control := control_computer ;
14519: LD_ADDR_OWVAR 38
14523: PUSH
14524: LD_INT 3
14526: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14527: LD_ADDR_OWVAR 40
14531: PUSH
14532: LD_INT 10
14534: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14535: LD_VAR 0 2
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PPUSH
14544: CALL_OW 310
14548: NOT
14549: IFFALSE 14596
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14551: CALL_OW 45
14555: PPUSH
14556: LD_VAR 0 2
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: CALL_OW 250
14569: PPUSH
14570: LD_VAR 0 2
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: PPUSH
14579: CALL_OW 251
14583: PPUSH
14584: LD_INT 12
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 50
14594: GO 14608
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14596: CALL_OW 45
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 51
// end ;
14608: GO 14482
14610: POP
14611: POP
// end ;
14612: PPOPN 2
14614: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14615: LD_EXP 23
14619: PUSH
14620: LD_EXP 69
14624: AND
14625: IFFALSE 14847
14627: GO 14629
14629: DISABLE
14630: LD_INT 0
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14638: LD_ADDR_VAR 0 6
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_OWVAR 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 0
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 6
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14847
// s1 := rand ( 1 , 4 ) ;
14701: LD_ADDR_VAR 0 2
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 4
14711: PPUSH
14712: CALL_OW 12
14716: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_VAR 0 6
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 2
14735: PPUSH
14736: CALL_OW 259
14740: ST_TO_ADDR
// if s1 = 1 then
14741: LD_VAR 0 2
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14769
// s2 := rand ( 2 , 4 ) else
14751: LD_ADDR_VAR 0 3
14755: PUSH
14756: LD_INT 2
14758: PPUSH
14759: LD_INT 4
14761: PPUSH
14762: CALL_OW 12
14766: ST_TO_ADDR
14767: GO 14777
// s2 := 1 ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14777: LD_ADDR_VAR 0 5
14781: PUSH
14782: LD_VAR 0 6
14786: PUSH
14787: LD_INT 1
14789: ARRAY
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: CALL_OW 259
14800: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14801: LD_VAR 0 6
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 2
14814: PPUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14824: LD_VAR 0 6
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_VAR 0 4
14842: PPUSH
14843: CALL_OW 237
// end ;
14847: PPOPN 6
14849: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14850: LD_EXP 23
14854: PUSH
14855: LD_EXP 70
14859: AND
14860: IFFALSE 14939
14862: GO 14864
14864: DISABLE
14865: LD_INT 0
14867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14868: LD_ADDR_VAR 0 1
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_OWVAR 2
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: LD_INT 3
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: ST_TO_ADDR
// if not tmp then
14904: LD_VAR 0 1
14908: NOT
14909: IFFALSE 14913
// exit ;
14911: GO 14939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14913: LD_VAR 0 1
14917: PUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 12
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 234
// end ;
14939: PPOPN 1
14941: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14942: LD_EXP 23
14946: PUSH
14947: LD_EXP 71
14951: AND
14952: IFFALSE 15064
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14961: LD_ADDR_VAR 0 2
14965: PUSH
14966: LD_INT 22
14968: PUSH
14969: LD_OWVAR 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: LD_INT 30
14983: PUSH
14984: LD_INT 27
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 26
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 30
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: ST_TO_ADDR
// if not tmp then
15026: LD_VAR 0 2
15030: NOT
15031: IFFALSE 15035
// exit ;
15033: GO 15064
// for i in tmp do
15035: LD_ADDR_VAR 0 1
15039: PUSH
15040: LD_VAR 0 2
15044: PUSH
15045: FOR_IN
15046: IFFALSE 15062
// SetLives ( i , 1 ) ;
15048: LD_VAR 0 1
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 234
15060: GO 15045
15062: POP
15063: POP
// end ;
15064: PPOPN 2
15066: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15067: LD_EXP 23
15071: PUSH
15072: LD_EXP 72
15076: AND
15077: IFFALSE 15351
15079: GO 15081
15081: DISABLE
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
// begin i := rand ( 1 , 7 ) ;
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: LD_INT 1
15094: PPUSH
15095: LD_INT 7
15097: PPUSH
15098: CALL_OW 12
15102: ST_TO_ADDR
// case i of 1 :
15103: LD_VAR 0 1
15107: PUSH
15108: LD_INT 1
15110: DOUBLE
15111: EQUAL
15112: IFTRUE 15116
15114: GO 15126
15116: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15117: LD_STRING earthquake(getX(game), 0, 32)
15119: PPUSH
15120: CALL_OW 559
15124: GO 15351
15126: LD_INT 2
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15148
15134: POP
// begin ToLua ( displayStucuk(); ) ;
15135: LD_STRING displayStucuk();
15137: PPUSH
15138: CALL_OW 559
// ResetFog ;
15142: CALL_OW 335
// end ; 3 :
15146: GO 15351
15148: LD_INT 3
15150: DOUBLE
15151: EQUAL
15152: IFTRUE 15156
15154: GO 15260
15156: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15157: LD_ADDR_VAR 0 2
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_OWVAR 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 25
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if not tmp then
15193: LD_VAR 0 2
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15351
// un := tmp [ rand ( 1 , tmp ) ] ;
15202: LD_ADDR_VAR 0 3
15206: PUSH
15207: LD_VAR 0 2
15211: PUSH
15212: LD_INT 1
15214: PPUSH
15215: LD_VAR 0 2
15219: PPUSH
15220: CALL_OW 12
15224: ARRAY
15225: ST_TO_ADDR
// if Crawls ( un ) then
15226: LD_VAR 0 3
15230: PPUSH
15231: CALL_OW 318
15235: IFFALSE 15246
// ComWalk ( un ) ;
15237: LD_VAR 0 3
15241: PPUSH
15242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 8
15253: PPUSH
15254: CALL_OW 336
// end ; 4 :
15258: GO 15351
15260: LD_INT 4
15262: DOUBLE
15263: EQUAL
15264: IFTRUE 15268
15266: GO 15329
15268: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15269: LD_ADDR_VAR 0 2
15273: PUSH
15274: LD_INT 22
15276: PUSH
15277: LD_OWVAR 2
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 30
15288: PUSH
15289: LD_INT 29
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PPUSH
15300: CALL_OW 69
15304: ST_TO_ADDR
// if not tmp then
15305: LD_VAR 0 2
15309: NOT
15310: IFFALSE 15314
// exit ;
15312: GO 15351
// DestroyUnit ( tmp [ 1 ] ) ;
15314: LD_VAR 0 2
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: CALL_OW 65
// end ; 5 .. 7 :
15327: GO 15351
15329: LD_INT 5
15331: DOUBLE
15332: GREATEREQUAL
15333: IFFALSE 15341
15335: LD_INT 7
15337: DOUBLE
15338: LESSEQUAL
15339: IFTRUE 15343
15341: GO 15350
15343: POP
// StreamSibBomb ; end ;
15344: CALL 11601 0 0
15348: GO 15351
15350: POP
// end ;
15351: PPOPN 3
15353: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15354: LD_EXP 23
15358: PUSH
15359: LD_EXP 73
15363: AND
15364: IFFALSE 15520
15366: GO 15368
15368: DISABLE
15369: LD_INT 0
15371: PPUSH
15372: PPUSH
15373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15374: LD_ADDR_VAR 0 2
15378: PUSH
15379: LD_INT 81
15381: PUSH
15382: LD_OWVAR 2
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: LD_INT 21
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 21
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 69
15427: ST_TO_ADDR
// if not tmp then
15428: LD_VAR 0 2
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 15520
// p := 0 ;
15437: LD_ADDR_VAR 0 3
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15445: LD_INT 35
15447: PPUSH
15448: CALL_OW 67
// p := p + 1 ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_VAR 0 3
15461: PUSH
15462: LD_INT 1
15464: PLUS
15465: ST_TO_ADDR
// for i in tmp do
15466: LD_ADDR_VAR 0 1
15470: PUSH
15471: LD_VAR 0 2
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15508
// if GetLives ( i ) < 1000 then
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 256
15488: PUSH
15489: LD_INT 1000
15491: LESS
15492: IFFALSE 15506
// SetLives ( i , 1000 ) ;
15494: LD_VAR 0 1
15498: PPUSH
15499: LD_INT 1000
15501: PPUSH
15502: CALL_OW 234
15506: GO 15476
15508: POP
15509: POP
// until p > 20 ;
15510: LD_VAR 0 3
15514: PUSH
15515: LD_INT 20
15517: GREATER
15518: IFFALSE 15445
// end ;
15520: PPOPN 3
15522: END
// every 0 0$1 trigger StreamModeActive and sTime do
15523: LD_EXP 23
15527: PUSH
15528: LD_EXP 74
15532: AND
15533: IFFALSE 15568
15535: GO 15537
15537: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15538: LD_INT 28
15540: PPUSH
15541: LD_OWVAR 2
15545: PPUSH
15546: LD_INT 2
15548: PPUSH
15549: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15553: LD_INT 30
15555: PPUSH
15556: LD_OWVAR 2
15560: PPUSH
15561: LD_INT 2
15563: PPUSH
15564: CALL_OW 322
// end ;
15568: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15569: LD_EXP 23
15573: PUSH
15574: LD_EXP 75
15578: AND
15579: IFFALSE 15700
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
15587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15588: LD_ADDR_VAR 0 2
15592: PUSH
15593: LD_INT 22
15595: PUSH
15596: LD_OWVAR 2
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 21
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 3
15617: PUSH
15618: LD_INT 23
15620: PUSH
15621: LD_INT 0
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 69
15641: ST_TO_ADDR
// if not tmp then
15642: LD_VAR 0 2
15646: NOT
15647: IFFALSE 15651
// exit ;
15649: GO 15700
// for i in tmp do
15651: LD_ADDR_VAR 0 1
15655: PUSH
15656: LD_VAR 0 2
15660: PUSH
15661: FOR_IN
15662: IFFALSE 15698
// begin if Crawls ( i ) then
15664: LD_VAR 0 1
15668: PPUSH
15669: CALL_OW 318
15673: IFFALSE 15684
// ComWalk ( i ) ;
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 138
// SetClass ( i , 2 ) ;
15684: LD_VAR 0 1
15688: PPUSH
15689: LD_INT 2
15691: PPUSH
15692: CALL_OW 336
// end ;
15696: GO 15661
15698: POP
15699: POP
// end ;
15700: PPOPN 2
15702: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15703: LD_EXP 23
15707: PUSH
15708: LD_EXP 76
15712: AND
15713: IFFALSE 15994
15715: GO 15717
15717: DISABLE
15718: LD_INT 0
15720: PPUSH
15721: PPUSH
15722: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15723: LD_OWVAR 2
15727: PPUSH
15728: LD_INT 9
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15741: LD_INT 9
15743: PPUSH
15744: LD_OWVAR 2
15748: PPUSH
15749: CALL_OW 343
// uc_side := 9 ;
15753: LD_ADDR_OWVAR 20
15757: PUSH
15758: LD_INT 9
15760: ST_TO_ADDR
// uc_nation := 2 ;
15761: LD_ADDR_OWVAR 21
15765: PUSH
15766: LD_INT 2
15768: ST_TO_ADDR
// hc_name := Dark Warrior ;
15769: LD_ADDR_OWVAR 26
15773: PUSH
15774: LD_STRING Dark Warrior
15776: ST_TO_ADDR
// hc_gallery :=  ;
15777: LD_ADDR_OWVAR 33
15781: PUSH
15782: LD_STRING 
15784: ST_TO_ADDR
// hc_noskilllimit := true ;
15785: LD_ADDR_OWVAR 76
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15793: LD_ADDR_OWVAR 31
15797: PUSH
15798: LD_INT 30
15800: PUSH
15801: LD_INT 30
15803: PUSH
15804: LD_INT 30
15806: PUSH
15807: LD_INT 30
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// un := CreateHuman ;
15816: LD_ADDR_VAR 0 3
15820: PUSH
15821: CALL_OW 44
15825: ST_TO_ADDR
// hc_noskilllimit := false ;
15826: LD_ADDR_OWVAR 76
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 51
// p := 0 ;
15846: LD_ADDR_VAR 0 2
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15854: LD_INT 35
15856: PPUSH
15857: CALL_OW 67
// p := p + 1 ;
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: LD_VAR 0 2
15870: PUSH
15871: LD_INT 1
15873: PLUS
15874: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15875: LD_VAR 0 3
15879: PPUSH
15880: CALL_OW 256
15884: PUSH
15885: LD_INT 1000
15887: LESS
15888: IFFALSE 15902
// SetLives ( un , 1000 ) ;
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_INT 1000
15897: PPUSH
15898: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 81
15909: PUSH
15910: LD_OWVAR 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 91
15921: PUSH
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: PPUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: CALL_OW 74
15953: PPUSH
15954: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15958: LD_VAR 0 2
15962: PUSH
15963: LD_INT 60
15965: GREATER
15966: PUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: CALL_OW 301
15976: OR
15977: IFFALSE 15854
// if un then
15979: LD_VAR 0 3
15983: IFFALSE 15994
// RemoveUnit ( un ) ;
15985: LD_VAR 0 3
15989: PPUSH
15990: CALL_OW 64
// end ;
15994: PPOPN 3
15996: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15997: LD_INT 0
15999: PPUSH
// case cmd of 301 :
16000: LD_VAR 0 1
16004: PUSH
16005: LD_INT 301
16007: DOUBLE
16008: EQUAL
16009: IFTRUE 16013
16011: GO 16045
16013: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16014: LD_VAR 0 6
16018: PPUSH
16019: LD_VAR 0 7
16023: PPUSH
16024: LD_VAR 0 8
16028: PPUSH
16029: LD_VAR 0 4
16033: PPUSH
16034: LD_VAR 0 5
16038: PPUSH
16039: CALL 17246 0 5
16043: GO 16166
16045: LD_INT 302
16047: DOUBLE
16048: EQUAL
16049: IFTRUE 16053
16051: GO 16090
16053: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16054: LD_VAR 0 6
16058: PPUSH
16059: LD_VAR 0 7
16063: PPUSH
16064: LD_VAR 0 8
16068: PPUSH
16069: LD_VAR 0 9
16073: PPUSH
16074: LD_VAR 0 4
16078: PPUSH
16079: LD_VAR 0 5
16083: PPUSH
16084: CALL 17337 0 6
16088: GO 16166
16090: LD_INT 303
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16135
16098: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16099: LD_VAR 0 6
16103: PPUSH
16104: LD_VAR 0 7
16108: PPUSH
16109: LD_VAR 0 8
16113: PPUSH
16114: LD_VAR 0 9
16118: PPUSH
16119: LD_VAR 0 4
16123: PPUSH
16124: LD_VAR 0 5
16128: PPUSH
16129: CALL 16171 0 6
16133: GO 16166
16135: LD_INT 304
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16165
16143: POP
// hHackTeleport ( unit , x , y ) ; end ;
16144: LD_VAR 0 2
16148: PPUSH
16149: LD_VAR 0 4
16153: PPUSH
16154: LD_VAR 0 5
16158: PPUSH
16159: CALL 17930 0 3
16163: GO 16166
16165: POP
// end ;
16166: LD_VAR 0 12
16170: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16175: LD_VAR 0 1
16179: PUSH
16180: LD_INT 1
16182: LESS
16183: PUSH
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 3
16191: GREATER
16192: OR
16193: PUSH
16194: LD_VAR 0 5
16198: PPUSH
16199: LD_VAR 0 6
16203: PPUSH
16204: CALL_OW 428
16208: OR
16209: IFFALSE 16213
// exit ;
16211: GO 16933
// uc_side := your_side ;
16213: LD_ADDR_OWVAR 20
16217: PUSH
16218: LD_OWVAR 2
16222: ST_TO_ADDR
// uc_nation := nation ;
16223: LD_ADDR_OWVAR 21
16227: PUSH
16228: LD_VAR 0 1
16232: ST_TO_ADDR
// bc_level = 1 ;
16233: LD_ADDR_OWVAR 43
16237: PUSH
16238: LD_INT 1
16240: ST_TO_ADDR
// case btype of 1 :
16241: LD_VAR 0 2
16245: PUSH
16246: LD_INT 1
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16265
16254: POP
// bc_type := b_depot ; 2 :
16255: LD_ADDR_OWVAR 42
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
16263: GO 16877
16265: LD_INT 2
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16273
16271: GO 16284
16273: POP
// bc_type := b_warehouse ; 3 :
16274: LD_ADDR_OWVAR 42
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
16282: GO 16877
16284: LD_INT 3
16286: DOUBLE
16287: EQUAL
16288: IFTRUE 16292
16290: GO 16303
16292: POP
// bc_type := b_lab ; 4 .. 9 :
16293: LD_ADDR_OWVAR 42
16297: PUSH
16298: LD_INT 6
16300: ST_TO_ADDR
16301: GO 16877
16303: LD_INT 4
16305: DOUBLE
16306: GREATEREQUAL
16307: IFFALSE 16315
16309: LD_INT 9
16311: DOUBLE
16312: LESSEQUAL
16313: IFTRUE 16317
16315: GO 16369
16317: POP
// begin bc_type := b_lab_half ;
16318: LD_ADDR_OWVAR 42
16322: PUSH
16323: LD_INT 7
16325: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16326: LD_ADDR_OWVAR 44
16330: PUSH
16331: LD_INT 10
16333: PUSH
16334: LD_INT 11
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 15
16342: PUSH
16343: LD_INT 14
16345: PUSH
16346: LD_INT 13
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: LD_VAR 0 2
16361: PUSH
16362: LD_INT 3
16364: MINUS
16365: ARRAY
16366: ST_TO_ADDR
// end ; 10 .. 13 :
16367: GO 16877
16369: LD_INT 10
16371: DOUBLE
16372: GREATEREQUAL
16373: IFFALSE 16381
16375: LD_INT 13
16377: DOUBLE
16378: LESSEQUAL
16379: IFTRUE 16383
16381: GO 16460
16383: POP
// begin bc_type := b_lab_full ;
16384: LD_ADDR_OWVAR 42
16388: PUSH
16389: LD_INT 8
16391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16392: LD_ADDR_OWVAR 44
16396: PUSH
16397: LD_INT 10
16399: PUSH
16400: LD_INT 12
16402: PUSH
16403: LD_INT 14
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: LD_INT 9
16422: MINUS
16423: ARRAY
16424: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16425: LD_ADDR_OWVAR 45
16429: PUSH
16430: LD_INT 11
16432: PUSH
16433: LD_INT 15
16435: PUSH
16436: LD_INT 12
16438: PUSH
16439: LD_INT 15
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 9
16455: MINUS
16456: ARRAY
16457: ST_TO_ADDR
// end ; 14 :
16458: GO 16877
16460: LD_INT 14
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16479
16468: POP
// bc_type := b_workshop ; 15 :
16469: LD_ADDR_OWVAR 42
16473: PUSH
16474: LD_INT 2
16476: ST_TO_ADDR
16477: GO 16877
16479: LD_INT 15
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16498
16487: POP
// bc_type := b_factory ; 16 :
16488: LD_ADDR_OWVAR 42
16492: PUSH
16493: LD_INT 3
16495: ST_TO_ADDR
16496: GO 16877
16498: LD_INT 16
16500: DOUBLE
16501: EQUAL
16502: IFTRUE 16506
16504: GO 16517
16506: POP
// bc_type := b_ext_gun ; 17 :
16507: LD_ADDR_OWVAR 42
16511: PUSH
16512: LD_INT 17
16514: ST_TO_ADDR
16515: GO 16877
16517: LD_INT 17
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16525
16523: GO 16553
16525: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16526: LD_ADDR_OWVAR 42
16530: PUSH
16531: LD_INT 19
16533: PUSH
16534: LD_INT 23
16536: PUSH
16537: LD_INT 19
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: PUSH
16545: LD_VAR 0 1
16549: ARRAY
16550: ST_TO_ADDR
16551: GO 16877
16553: LD_INT 18
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16572
16561: POP
// bc_type := b_ext_radar ; 19 :
16562: LD_ADDR_OWVAR 42
16566: PUSH
16567: LD_INT 20
16569: ST_TO_ADDR
16570: GO 16877
16572: LD_INT 19
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16580
16578: GO 16591
16580: POP
// bc_type := b_ext_radio ; 20 :
16581: LD_ADDR_OWVAR 42
16585: PUSH
16586: LD_INT 22
16588: ST_TO_ADDR
16589: GO 16877
16591: LD_INT 20
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16610
16599: POP
// bc_type := b_ext_siberium ; 21 :
16600: LD_ADDR_OWVAR 42
16604: PUSH
16605: LD_INT 21
16607: ST_TO_ADDR
16608: GO 16877
16610: LD_INT 21
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16629
16618: POP
// bc_type := b_ext_computer ; 22 :
16619: LD_ADDR_OWVAR 42
16623: PUSH
16624: LD_INT 24
16626: ST_TO_ADDR
16627: GO 16877
16629: LD_INT 22
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16648
16637: POP
// bc_type := b_ext_track ; 23 :
16638: LD_ADDR_OWVAR 42
16642: PUSH
16643: LD_INT 16
16645: ST_TO_ADDR
16646: GO 16877
16648: LD_INT 23
16650: DOUBLE
16651: EQUAL
16652: IFTRUE 16656
16654: GO 16667
16656: POP
// bc_type := b_ext_laser ; 24 :
16657: LD_ADDR_OWVAR 42
16661: PUSH
16662: LD_INT 25
16664: ST_TO_ADDR
16665: GO 16877
16667: LD_INT 24
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16686
16675: POP
// bc_type := b_control_tower ; 25 :
16676: LD_ADDR_OWVAR 42
16680: PUSH
16681: LD_INT 36
16683: ST_TO_ADDR
16684: GO 16877
16686: LD_INT 25
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16705
16694: POP
// bc_type := b_breastwork ; 26 :
16695: LD_ADDR_OWVAR 42
16699: PUSH
16700: LD_INT 31
16702: ST_TO_ADDR
16703: GO 16877
16705: LD_INT 26
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16724
16713: POP
// bc_type := b_bunker ; 27 :
16714: LD_ADDR_OWVAR 42
16718: PUSH
16719: LD_INT 32
16721: ST_TO_ADDR
16722: GO 16877
16724: LD_INT 27
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 16743
16732: POP
// bc_type := b_turret ; 28 :
16733: LD_ADDR_OWVAR 42
16737: PUSH
16738: LD_INT 33
16740: ST_TO_ADDR
16741: GO 16877
16743: LD_INT 28
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16762
16751: POP
// bc_type := b_armoury ; 29 :
16752: LD_ADDR_OWVAR 42
16756: PUSH
16757: LD_INT 4
16759: ST_TO_ADDR
16760: GO 16877
16762: LD_INT 29
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16781
16770: POP
// bc_type := b_barracks ; 30 :
16771: LD_ADDR_OWVAR 42
16775: PUSH
16776: LD_INT 5
16778: ST_TO_ADDR
16779: GO 16877
16781: LD_INT 30
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16789
16787: GO 16800
16789: POP
// bc_type := b_solar_power ; 31 :
16790: LD_ADDR_OWVAR 42
16794: PUSH
16795: LD_INT 27
16797: ST_TO_ADDR
16798: GO 16877
16800: LD_INT 31
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16819
16808: POP
// bc_type := b_oil_power ; 32 :
16809: LD_ADDR_OWVAR 42
16813: PUSH
16814: LD_INT 26
16816: ST_TO_ADDR
16817: GO 16877
16819: LD_INT 32
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16838
16827: POP
// bc_type := b_siberite_power ; 33 :
16828: LD_ADDR_OWVAR 42
16832: PUSH
16833: LD_INT 28
16835: ST_TO_ADDR
16836: GO 16877
16838: LD_INT 33
16840: DOUBLE
16841: EQUAL
16842: IFTRUE 16846
16844: GO 16857
16846: POP
// bc_type := b_oil_mine ; 34 :
16847: LD_ADDR_OWVAR 42
16851: PUSH
16852: LD_INT 29
16854: ST_TO_ADDR
16855: GO 16877
16857: LD_INT 34
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16876
16865: POP
// bc_type := b_siberite_mine ; end ;
16866: LD_ADDR_OWVAR 42
16870: PUSH
16871: LD_INT 30
16873: ST_TO_ADDR
16874: GO 16877
16876: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16877: LD_ADDR_VAR 0 8
16881: PUSH
16882: LD_VAR 0 5
16886: PPUSH
16887: LD_VAR 0 6
16891: PPUSH
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 47
16901: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16902: LD_OWVAR 42
16906: PUSH
16907: LD_INT 32
16909: PUSH
16910: LD_INT 33
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: IN
16917: IFFALSE 16933
// PlaceWeaponTurret ( b , weapon ) ;
16919: LD_VAR 0 8
16923: PPUSH
16924: LD_VAR 0 4
16928: PPUSH
16929: CALL_OW 431
// end ;
16933: LD_VAR 0 7
16937: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16944: LD_ADDR_VAR 0 4
16948: PUSH
16949: LD_INT 22
16951: PUSH
16952: LD_OWVAR 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 2
16963: PUSH
16964: LD_INT 30
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 30
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PPUSH
16993: CALL_OW 69
16997: ST_TO_ADDR
// if not tmp then
16998: LD_VAR 0 4
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17066
// for i in tmp do
17007: LD_ADDR_VAR 0 2
17011: PUSH
17012: LD_VAR 0 4
17016: PUSH
17017: FOR_IN
17018: IFFALSE 17064
// for j = 1 to 3 do
17020: LD_ADDR_VAR 0 3
17024: PUSH
17025: DOUBLE
17026: LD_INT 1
17028: DEC
17029: ST_TO_ADDR
17030: LD_INT 3
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17060
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17036: LD_VAR 0 2
17040: PPUSH
17041: CALL_OW 274
17045: PPUSH
17046: LD_VAR 0 3
17050: PPUSH
17051: LD_INT 99999
17053: PPUSH
17054: CALL_OW 277
17058: GO 17033
17060: POP
17061: POP
17062: GO 17017
17064: POP
17065: POP
// end ;
17066: LD_VAR 0 1
17070: RET
// export function hHackSetLevel10 ; var i , j ; begin
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17076: LD_ADDR_VAR 0 2
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17149
// if IsSelected ( i ) then
17099: LD_VAR 0 2
17103: PPUSH
17104: CALL_OW 306
17108: IFFALSE 17147
// begin for j := 1 to 4 do
17110: LD_ADDR_VAR 0 3
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_INT 4
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17145
// SetSkill ( i , j , 10 ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 10
17138: PPUSH
17139: CALL_OW 237
17143: GO 17123
17145: POP
17146: POP
// end ;
17147: GO 17096
17149: POP
17150: POP
// end ;
17151: LD_VAR 0 1
17155: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17156: LD_INT 0
17158: PPUSH
17159: PPUSH
17160: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17161: LD_ADDR_VAR 0 2
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_OWVAR 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: PUSH
17197: FOR_IN
17198: IFFALSE 17239
// begin for j := 1 to 4 do
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: DOUBLE
17206: LD_INT 1
17208: DEC
17209: ST_TO_ADDR
17210: LD_INT 4
17212: PUSH
17213: FOR_TO
17214: IFFALSE 17235
// SetSkill ( i , j , 10 ) ;
17216: LD_VAR 0 2
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_INT 10
17228: PPUSH
17229: CALL_OW 237
17233: GO 17213
17235: POP
17236: POP
// end ;
17237: GO 17197
17239: POP
17240: POP
// end ;
17241: LD_VAR 0 1
17245: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17246: LD_INT 0
17248: PPUSH
// uc_side := your_side ;
17249: LD_ADDR_OWVAR 20
17253: PUSH
17254: LD_OWVAR 2
17258: ST_TO_ADDR
// uc_nation := nation ;
17259: LD_ADDR_OWVAR 21
17263: PUSH
17264: LD_VAR 0 1
17268: ST_TO_ADDR
// InitHc ;
17269: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17273: LD_INT 0
17275: PPUSH
17276: LD_VAR 0 2
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17290: LD_VAR 0 4
17294: PPUSH
17295: LD_VAR 0 5
17299: PPUSH
17300: CALL_OW 428
17304: PUSH
17305: LD_INT 0
17307: EQUAL
17308: IFFALSE 17332
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17310: CALL_OW 44
17314: PPUSH
17315: LD_VAR 0 4
17319: PPUSH
17320: LD_VAR 0 5
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 48
// end ;
17332: LD_VAR 0 6
17336: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// uc_side := your_side ;
17341: LD_ADDR_OWVAR 20
17345: PUSH
17346: LD_OWVAR 2
17350: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17351: LD_VAR 0 1
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: IN
17378: IFFALSE 17390
// uc_nation := nation_american else
17380: LD_ADDR_OWVAR 21
17384: PUSH
17385: LD_INT 1
17387: ST_TO_ADDR
17388: GO 17433
// if chassis in [ 11 , 12 , 13 , 14 ] then
17390: LD_VAR 0 1
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 13
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: IN
17413: IFFALSE 17425
// uc_nation := nation_arabian else
17415: LD_ADDR_OWVAR 21
17419: PUSH
17420: LD_INT 2
17422: ST_TO_ADDR
17423: GO 17433
// uc_nation := nation_russian ;
17425: LD_ADDR_OWVAR 21
17429: PUSH
17430: LD_INT 3
17432: ST_TO_ADDR
// vc_chassis := chassis ;
17433: LD_ADDR_OWVAR 37
17437: PUSH
17438: LD_VAR 0 1
17442: ST_TO_ADDR
// vc_engine := engine ;
17443: LD_ADDR_OWVAR 39
17447: PUSH
17448: LD_VAR 0 2
17452: ST_TO_ADDR
// vc_control := control ;
17453: LD_ADDR_OWVAR 38
17457: PUSH
17458: LD_VAR 0 3
17462: ST_TO_ADDR
// vc_weapon := weapon ;
17463: LD_ADDR_OWVAR 40
17467: PUSH
17468: LD_VAR 0 4
17472: ST_TO_ADDR
// un := CreateVehicle ;
17473: LD_ADDR_VAR 0 8
17477: PUSH
17478: CALL_OW 45
17482: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17483: LD_VAR 0 8
17487: PPUSH
17488: LD_INT 0
17490: PPUSH
17491: LD_INT 5
17493: PPUSH
17494: CALL_OW 12
17498: PPUSH
17499: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17503: LD_VAR 0 8
17507: PPUSH
17508: LD_VAR 0 5
17512: PPUSH
17513: LD_VAR 0 6
17517: PPUSH
17518: LD_INT 1
17520: PPUSH
17521: CALL_OW 48
// end ;
17525: LD_VAR 0 7
17529: RET
// export hInvincible ; every 1 do
17530: GO 17532
17532: DISABLE
// hInvincible := [ ] ;
17533: LD_ADDR_EXP 77
17537: PUSH
17538: EMPTY
17539: ST_TO_ADDR
17540: END
// every 10 do var i ;
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
// begin enable ;
17547: ENABLE
// if not hInvincible then
17548: LD_EXP 77
17552: NOT
17553: IFFALSE 17557
// exit ;
17555: GO 17601
// for i in hInvincible do
17557: LD_ADDR_VAR 0 1
17561: PUSH
17562: LD_EXP 77
17566: PUSH
17567: FOR_IN
17568: IFFALSE 17599
// if GetLives ( i ) < 1000 then
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 256
17579: PUSH
17580: LD_INT 1000
17582: LESS
17583: IFFALSE 17597
// SetLives ( i , 1000 ) ;
17585: LD_VAR 0 1
17589: PPUSH
17590: LD_INT 1000
17592: PPUSH
17593: CALL_OW 234
17597: GO 17567
17599: POP
17600: POP
// end ;
17601: PPOPN 1
17603: END
// export function hHackInvincible ; var i ; begin
17604: LD_INT 0
17606: PPUSH
17607: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17608: LD_ADDR_VAR 0 2
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: LD_INT 21
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 21
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: PUSH
17646: FOR_IN
17647: IFFALSE 17708
// if IsSelected ( i ) then
17649: LD_VAR 0 2
17653: PPUSH
17654: CALL_OW 306
17658: IFFALSE 17706
// begin if i in hInvincible then
17660: LD_VAR 0 2
17664: PUSH
17665: LD_EXP 77
17669: IN
17670: IFFALSE 17690
// hInvincible := hInvincible diff i else
17672: LD_ADDR_EXP 77
17676: PUSH
17677: LD_EXP 77
17681: PUSH
17682: LD_VAR 0 2
17686: DIFF
17687: ST_TO_ADDR
17688: GO 17706
// hInvincible := hInvincible union i ;
17690: LD_ADDR_EXP 77
17694: PUSH
17695: LD_EXP 77
17699: PUSH
17700: LD_VAR 0 2
17704: UNION
17705: ST_TO_ADDR
// end ;
17706: GO 17646
17708: POP
17709: POP
// end ;
17710: LD_VAR 0 1
17714: RET
// export function hHackInvisible ; var i , j ; begin
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
17719: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17720: LD_ADDR_VAR 0 2
17724: PUSH
17725: LD_INT 21
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PPUSH
17735: CALL_OW 69
17739: PUSH
17740: FOR_IN
17741: IFFALSE 17765
// if IsSelected ( i ) then
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 306
17752: IFFALSE 17763
// ComForceInvisible ( i ) ;
17754: LD_VAR 0 2
17758: PPUSH
17759: CALL_OW 496
17763: GO 17740
17765: POP
17766: POP
// end ;
17767: LD_VAR 0 1
17771: RET
// export function hHackChangeYourSide ; begin
17772: LD_INT 0
17774: PPUSH
// if your_side = 8 then
17775: LD_OWVAR 2
17779: PUSH
17780: LD_INT 8
17782: EQUAL
17783: IFFALSE 17795
// your_side := 0 else
17785: LD_ADDR_OWVAR 2
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
17793: GO 17809
// your_side := your_side + 1 ;
17795: LD_ADDR_OWVAR 2
17799: PUSH
17800: LD_OWVAR 2
17804: PUSH
17805: LD_INT 1
17807: PLUS
17808: ST_TO_ADDR
// end ;
17809: LD_VAR 0 1
17813: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17814: LD_INT 0
17816: PPUSH
17817: PPUSH
17818: PPUSH
// for i in all_units do
17819: LD_ADDR_VAR 0 2
17823: PUSH
17824: LD_OWVAR 3
17828: PUSH
17829: FOR_IN
17830: IFFALSE 17908
// if IsSelected ( i ) then
17832: LD_VAR 0 2
17836: PPUSH
17837: CALL_OW 306
17841: IFFALSE 17906
// begin j := GetSide ( i ) ;
17843: LD_ADDR_VAR 0 3
17847: PUSH
17848: LD_VAR 0 2
17852: PPUSH
17853: CALL_OW 255
17857: ST_TO_ADDR
// if j = 8 then
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 8
17865: EQUAL
17866: IFFALSE 17878
// j := 0 else
17868: LD_ADDR_VAR 0 3
17872: PUSH
17873: LD_INT 0
17875: ST_TO_ADDR
17876: GO 17892
// j := j + 1 ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 1
17890: PLUS
17891: ST_TO_ADDR
// SetSide ( i , j ) ;
17892: LD_VAR 0 2
17896: PPUSH
17897: LD_VAR 0 3
17901: PPUSH
17902: CALL_OW 235
// end ;
17906: GO 17829
17908: POP
17909: POP
// end ;
17910: LD_VAR 0 1
17914: RET
// export function hHackFog ; begin
17915: LD_INT 0
17917: PPUSH
// FogOff ( true ) ;
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 344
// end ;
17925: LD_VAR 0 1
17929: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17930: LD_INT 0
17932: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_VAR 0 2
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 483
// CenterOnXY ( x , y ) ;
17958: LD_VAR 0 2
17962: PPUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: CALL_OW 84
// end ; end_of_file
17972: LD_VAR 0 4
17976: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17977: LD_INT 0
17979: PPUSH
17980: PPUSH
17981: PPUSH
17982: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 264
17992: PUSH
17993: LD_EXP 11
17997: EQUAL
17998: IFFALSE 18070
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18000: LD_INT 68
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 255
18012: PPUSH
18013: CALL_OW 321
18017: PUSH
18018: LD_INT 2
18020: EQUAL
18021: IFFALSE 18033
// eff := 70 else
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: LD_INT 70
18030: ST_TO_ADDR
18031: GO 18041
// eff := 30 ;
18033: LD_ADDR_VAR 0 4
18037: PUSH
18038: LD_INT 30
18040: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 250
18050: PPUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 251
18060: PPUSH
18061: LD_VAR 0 4
18065: PPUSH
18066: CALL_OW 495
// end ; end ;
18070: LD_VAR 0 2
18074: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18075: LD_INT 0
18077: PPUSH
// end ;
18078: LD_VAR 0 4
18082: RET
// export function SOS_Command ( cmd ) ; begin
18083: LD_INT 0
18085: PPUSH
// end ;
18086: LD_VAR 0 2
18090: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18091: LD_INT 0
18093: PPUSH
// if cmd = 121 then
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 121
18101: EQUAL
18102: IFFALSE 18104
// end ;
18104: LD_VAR 0 6
18108: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18109: LD_INT 0
18111: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18112: LD_VAR 0 1
18116: PUSH
18117: LD_INT 250
18119: EQUAL
18120: PUSH
18121: LD_VAR 0 2
18125: PPUSH
18126: CALL_OW 264
18130: PUSH
18131: LD_EXP 14
18135: EQUAL
18136: AND
18137: IFFALSE 18158
// MinerPlaceMine ( unit , x , y ) ;
18139: LD_VAR 0 2
18143: PPUSH
18144: LD_VAR 0 4
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: CALL 20507 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18158: LD_VAR 0 1
18162: PUSH
18163: LD_INT 251
18165: EQUAL
18166: PUSH
18167: LD_VAR 0 2
18171: PPUSH
18172: CALL_OW 264
18176: PUSH
18177: LD_EXP 14
18181: EQUAL
18182: AND
18183: IFFALSE 18204
// MinerDetonateMine ( unit , x , y ) ;
18185: LD_VAR 0 2
18189: PPUSH
18190: LD_VAR 0 4
18194: PPUSH
18195: LD_VAR 0 5
18199: PPUSH
18200: CALL 20784 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18204: LD_VAR 0 1
18208: PUSH
18209: LD_INT 252
18211: EQUAL
18212: PUSH
18213: LD_VAR 0 2
18217: PPUSH
18218: CALL_OW 264
18222: PUSH
18223: LD_EXP 14
18227: EQUAL
18228: AND
18229: IFFALSE 18250
// MinerCreateMinefield ( unit , x , y ) ;
18231: LD_VAR 0 2
18235: PPUSH
18236: LD_VAR 0 4
18240: PPUSH
18241: LD_VAR 0 5
18245: PPUSH
18246: CALL 21201 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18250: LD_VAR 0 1
18254: PUSH
18255: LD_INT 253
18257: EQUAL
18258: PUSH
18259: LD_VAR 0 2
18263: PPUSH
18264: CALL_OW 257
18268: PUSH
18269: LD_INT 5
18271: EQUAL
18272: AND
18273: IFFALSE 18294
// ComBinocular ( unit , x , y ) ;
18275: LD_VAR 0 2
18279: PPUSH
18280: LD_VAR 0 4
18284: PPUSH
18285: LD_VAR 0 5
18289: PPUSH
18290: CALL 21572 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18294: LD_VAR 0 1
18298: PUSH
18299: LD_INT 254
18301: EQUAL
18302: PUSH
18303: LD_VAR 0 2
18307: PPUSH
18308: CALL_OW 264
18312: PUSH
18313: LD_EXP 9
18317: EQUAL
18318: AND
18319: PUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: CALL_OW 263
18329: PUSH
18330: LD_INT 3
18332: EQUAL
18333: AND
18334: IFFALSE 18350
// HackDestroyVehicle ( unit , selectedUnit ) ;
18336: LD_VAR 0 2
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: CALL 19867 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_INT 255
18357: EQUAL
18358: PUSH
18359: LD_VAR 0 2
18363: PPUSH
18364: CALL_OW 264
18368: PUSH
18369: LD_INT 14
18371: PUSH
18372: LD_INT 53
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: IN
18379: AND
18380: PUSH
18381: LD_VAR 0 4
18385: PPUSH
18386: LD_VAR 0 5
18390: PPUSH
18391: CALL_OW 488
18395: AND
18396: IFFALSE 18420
// CutTreeXYR ( unit , x , y , 12 ) ;
18398: LD_VAR 0 2
18402: PPUSH
18403: LD_VAR 0 4
18407: PPUSH
18408: LD_VAR 0 5
18412: PPUSH
18413: LD_INT 12
18415: PPUSH
18416: CALL 18433 0 4
// end ;
18420: LD_VAR 0 6
18424: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18425: LD_INT 0
18427: PPUSH
// end ;
18428: LD_VAR 0 4
18432: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18433: LD_INT 0
18435: PPUSH
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18444: LD_VAR 0 1
18448: NOT
18449: PUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: CALL_OW 488
18464: NOT
18465: OR
18466: PUSH
18467: LD_VAR 0 4
18471: NOT
18472: OR
18473: IFFALSE 18477
// exit ;
18475: GO 18817
// list := [ ] ;
18477: LD_ADDR_VAR 0 13
18481: PUSH
18482: EMPTY
18483: ST_TO_ADDR
// if x - r < 0 then
18484: LD_VAR 0 2
18488: PUSH
18489: LD_VAR 0 4
18493: MINUS
18494: PUSH
18495: LD_INT 0
18497: LESS
18498: IFFALSE 18510
// min_x := 0 else
18500: LD_ADDR_VAR 0 7
18504: PUSH
18505: LD_INT 0
18507: ST_TO_ADDR
18508: GO 18526
// min_x := x - r ;
18510: LD_ADDR_VAR 0 7
18514: PUSH
18515: LD_VAR 0 2
18519: PUSH
18520: LD_VAR 0 4
18524: MINUS
18525: ST_TO_ADDR
// if y - r < 0 then
18526: LD_VAR 0 3
18530: PUSH
18531: LD_VAR 0 4
18535: MINUS
18536: PUSH
18537: LD_INT 0
18539: LESS
18540: IFFALSE 18552
// min_y := 0 else
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: LD_INT 0
18549: ST_TO_ADDR
18550: GO 18568
// min_y := y - r ;
18552: LD_ADDR_VAR 0 8
18556: PUSH
18557: LD_VAR 0 3
18561: PUSH
18562: LD_VAR 0 4
18566: MINUS
18567: ST_TO_ADDR
// max_x := x + r ;
18568: LD_ADDR_VAR 0 9
18572: PUSH
18573: LD_VAR 0 2
18577: PUSH
18578: LD_VAR 0 4
18582: PLUS
18583: ST_TO_ADDR
// max_y := y + r ;
18584: LD_ADDR_VAR 0 10
18588: PUSH
18589: LD_VAR 0 3
18593: PUSH
18594: LD_VAR 0 4
18598: PLUS
18599: ST_TO_ADDR
// for _x = min_x to max_x do
18600: LD_ADDR_VAR 0 11
18604: PUSH
18605: DOUBLE
18606: LD_VAR 0 7
18610: DEC
18611: ST_TO_ADDR
18612: LD_VAR 0 9
18616: PUSH
18617: FOR_TO
18618: IFFALSE 18735
// for _y = min_y to max_y do
18620: LD_ADDR_VAR 0 12
18624: PUSH
18625: DOUBLE
18626: LD_VAR 0 8
18630: DEC
18631: ST_TO_ADDR
18632: LD_VAR 0 10
18636: PUSH
18637: FOR_TO
18638: IFFALSE 18731
// begin if not ValidHex ( _x , _y ) then
18640: LD_VAR 0 11
18644: PPUSH
18645: LD_VAR 0 12
18649: PPUSH
18650: CALL_OW 488
18654: NOT
18655: IFFALSE 18659
// continue ;
18657: GO 18637
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18659: LD_VAR 0 11
18663: PPUSH
18664: LD_VAR 0 12
18668: PPUSH
18669: CALL_OW 351
18673: PUSH
18674: LD_VAR 0 11
18678: PPUSH
18679: LD_VAR 0 12
18683: PPUSH
18684: CALL_OW 554
18688: AND
18689: IFFALSE 18729
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18691: LD_ADDR_VAR 0 13
18695: PUSH
18696: LD_VAR 0 13
18700: PPUSH
18701: LD_VAR 0 13
18705: PUSH
18706: LD_INT 1
18708: PLUS
18709: PPUSH
18710: LD_VAR 0 11
18714: PUSH
18715: LD_VAR 0 12
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PPUSH
18724: CALL_OW 2
18728: ST_TO_ADDR
// end ;
18729: GO 18637
18731: POP
18732: POP
18733: GO 18617
18735: POP
18736: POP
// if not list then
18737: LD_VAR 0 13
18741: NOT
18742: IFFALSE 18746
// exit ;
18744: GO 18817
// for i in list do
18746: LD_ADDR_VAR 0 6
18750: PUSH
18751: LD_VAR 0 13
18755: PUSH
18756: FOR_IN
18757: IFFALSE 18815
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_STRING M
18766: PUSH
18767: LD_VAR 0 6
18771: PUSH
18772: LD_INT 1
18774: ARRAY
18775: PUSH
18776: LD_VAR 0 6
18780: PUSH
18781: LD_INT 2
18783: ARRAY
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: PPUSH
18809: CALL_OW 447
18813: GO 18756
18815: POP
18816: POP
// end ;
18817: LD_VAR 0 5
18821: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18822: LD_EXP 80
18826: NOT
18827: IFFALSE 18877
18829: GO 18831
18831: DISABLE
// begin initHack := true ;
18832: LD_ADDR_EXP 80
18836: PUSH
18837: LD_INT 1
18839: ST_TO_ADDR
// hackTanks := [ ] ;
18840: LD_ADDR_EXP 81
18844: PUSH
18845: EMPTY
18846: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18847: LD_ADDR_EXP 82
18851: PUSH
18852: EMPTY
18853: ST_TO_ADDR
// hackLimit := 3 ;
18854: LD_ADDR_EXP 83
18858: PUSH
18859: LD_INT 3
18861: ST_TO_ADDR
// hackDist := 12 ;
18862: LD_ADDR_EXP 84
18866: PUSH
18867: LD_INT 12
18869: ST_TO_ADDR
// hackCounter := [ ] ;
18870: LD_ADDR_EXP 85
18874: PUSH
18875: EMPTY
18876: ST_TO_ADDR
// end ;
18877: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18878: LD_EXP 80
18882: PUSH
18883: LD_INT 34
18885: PUSH
18886: LD_EXP 9
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: AND
18900: IFFALSE 19155
18902: GO 18904
18904: DISABLE
18905: LD_INT 0
18907: PPUSH
18908: PPUSH
// begin enable ;
18909: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: LD_INT 34
18917: PUSH
18918: LD_EXP 9
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: PUSH
18932: FOR_IN
18933: IFFALSE 19153
// begin if not i in hackTanks then
18935: LD_VAR 0 1
18939: PUSH
18940: LD_EXP 81
18944: IN
18945: NOT
18946: IFFALSE 19029
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18948: LD_ADDR_EXP 81
18952: PUSH
18953: LD_EXP 81
18957: PPUSH
18958: LD_EXP 81
18962: PUSH
18963: LD_INT 1
18965: PLUS
18966: PPUSH
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 1
18976: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18977: LD_ADDR_EXP 82
18981: PUSH
18982: LD_EXP 82
18986: PPUSH
18987: LD_EXP 82
18991: PUSH
18992: LD_INT 1
18994: PLUS
18995: PPUSH
18996: EMPTY
18997: PPUSH
18998: CALL_OW 1
19002: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19003: LD_ADDR_EXP 85
19007: PUSH
19008: LD_EXP 85
19012: PPUSH
19013: LD_EXP 85
19017: PUSH
19018: LD_INT 1
19020: PLUS
19021: PPUSH
19022: EMPTY
19023: PPUSH
19024: CALL_OW 1
19028: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 302
19038: NOT
19039: IFFALSE 19052
// begin HackUnlinkAll ( i ) ;
19041: LD_VAR 0 1
19045: PPUSH
19046: CALL 19158 0 1
// continue ;
19050: GO 18932
// end ; HackCheckCapturedStatus ( i ) ;
19052: LD_VAR 0 1
19056: PPUSH
19057: CALL 19601 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19061: LD_ADDR_VAR 0 2
19065: PUSH
19066: LD_INT 81
19068: PUSH
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 255
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 33
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 91
19095: PUSH
19096: LD_VAR 0 1
19100: PUSH
19101: LD_EXP 84
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 50
19113: PUSH
19114: EMPTY
19115: LIST
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: ST_TO_ADDR
// if not tmp then
19128: LD_VAR 0 2
19132: NOT
19133: IFFALSE 19137
// continue ;
19135: GO 18932
// HackLink ( i , tmp ) ;
19137: LD_VAR 0 1
19141: PPUSH
19142: LD_VAR 0 2
19146: PPUSH
19147: CALL 19294 0 2
// end ;
19151: GO 18932
19153: POP
19154: POP
// end ;
19155: PPOPN 2
19157: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19158: LD_INT 0
19160: PPUSH
19161: PPUSH
19162: PPUSH
// if not hack in hackTanks then
19163: LD_VAR 0 1
19167: PUSH
19168: LD_EXP 81
19172: IN
19173: NOT
19174: IFFALSE 19178
// exit ;
19176: GO 19289
// index := GetElementIndex ( hackTanks , hack ) ;
19178: LD_ADDR_VAR 0 4
19182: PUSH
19183: LD_EXP 81
19187: PPUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL 26723 0 2
19197: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19198: LD_EXP 82
19202: PUSH
19203: LD_VAR 0 4
19207: ARRAY
19208: IFFALSE 19289
// begin for i in hackTanksCaptured [ index ] do
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_EXP 82
19219: PUSH
19220: LD_VAR 0 4
19224: ARRAY
19225: PUSH
19226: FOR_IN
19227: IFFALSE 19253
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 1
19236: ARRAY
19237: PPUSH
19238: LD_VAR 0 3
19242: PUSH
19243: LD_INT 2
19245: ARRAY
19246: PPUSH
19247: CALL_OW 235
19251: GO 19226
19253: POP
19254: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19255: LD_ADDR_EXP 82
19259: PUSH
19260: LD_EXP 82
19264: PPUSH
19265: LD_VAR 0 4
19269: PPUSH
19270: EMPTY
19271: PPUSH
19272: CALL_OW 1
19276: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19277: LD_VAR 0 1
19281: PPUSH
19282: LD_INT 0
19284: PPUSH
19285: CALL_OW 505
// end ; end ;
19289: LD_VAR 0 2
19293: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19294: LD_INT 0
19296: PPUSH
19297: PPUSH
19298: PPUSH
// if not hack in hackTanks or not vehicles then
19299: LD_VAR 0 1
19303: PUSH
19304: LD_EXP 81
19308: IN
19309: NOT
19310: PUSH
19311: LD_VAR 0 2
19315: NOT
19316: OR
19317: IFFALSE 19321
// exit ;
19319: GO 19596
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_INT 1
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL 27373 0 4
19346: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19347: LD_ADDR_VAR 0 5
19351: PUSH
19352: LD_EXP 81
19356: PPUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL 26723 0 2
19366: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19367: LD_EXP 82
19371: PUSH
19372: LD_VAR 0 5
19376: ARRAY
19377: PUSH
19378: LD_EXP 83
19382: LESS
19383: IFFALSE 19572
// begin for i := 1 to vehicles do
19385: LD_ADDR_VAR 0 4
19389: PUSH
19390: DOUBLE
19391: LD_INT 1
19393: DEC
19394: ST_TO_ADDR
19395: LD_VAR 0 2
19399: PUSH
19400: FOR_TO
19401: IFFALSE 19570
// begin if hackTanksCaptured [ index ] = hackLimit then
19403: LD_EXP 82
19407: PUSH
19408: LD_VAR 0 5
19412: ARRAY
19413: PUSH
19414: LD_EXP 83
19418: EQUAL
19419: IFFALSE 19423
// break ;
19421: GO 19570
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19423: LD_ADDR_EXP 85
19427: PUSH
19428: LD_EXP 85
19432: PPUSH
19433: LD_VAR 0 5
19437: PPUSH
19438: LD_EXP 85
19442: PUSH
19443: LD_VAR 0 5
19447: ARRAY
19448: PUSH
19449: LD_INT 1
19451: PLUS
19452: PPUSH
19453: CALL_OW 1
19457: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19458: LD_ADDR_EXP 82
19462: PUSH
19463: LD_EXP 82
19467: PPUSH
19468: LD_VAR 0 5
19472: PUSH
19473: LD_EXP 82
19477: PUSH
19478: LD_VAR 0 5
19482: ARRAY
19483: PUSH
19484: LD_INT 1
19486: PLUS
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PPUSH
19492: LD_VAR 0 2
19496: PUSH
19497: LD_VAR 0 4
19501: ARRAY
19502: PUSH
19503: LD_VAR 0 2
19507: PUSH
19508: LD_VAR 0 4
19512: ARRAY
19513: PPUSH
19514: CALL_OW 255
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PPUSH
19523: CALL 26938 0 3
19527: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19528: LD_VAR 0 2
19532: PUSH
19533: LD_VAR 0 4
19537: ARRAY
19538: PPUSH
19539: LD_VAR 0 1
19543: PPUSH
19544: CALL_OW 255
19548: PPUSH
19549: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19553: LD_VAR 0 2
19557: PUSH
19558: LD_VAR 0 4
19562: ARRAY
19563: PPUSH
19564: CALL_OW 141
// end ;
19568: GO 19400
19570: POP
19571: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_EXP 82
19581: PUSH
19582: LD_VAR 0 5
19586: ARRAY
19587: PUSH
19588: LD_INT 0
19590: PLUS
19591: PPUSH
19592: CALL_OW 505
// end ;
19596: LD_VAR 0 3
19600: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19601: LD_INT 0
19603: PPUSH
19604: PPUSH
19605: PPUSH
19606: PPUSH
// if not hack in hackTanks then
19607: LD_VAR 0 1
19611: PUSH
19612: LD_EXP 81
19616: IN
19617: NOT
19618: IFFALSE 19622
// exit ;
19620: GO 19862
// index := GetElementIndex ( hackTanks , hack ) ;
19622: LD_ADDR_VAR 0 4
19626: PUSH
19627: LD_EXP 81
19631: PPUSH
19632: LD_VAR 0 1
19636: PPUSH
19637: CALL 26723 0 2
19641: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19642: LD_ADDR_VAR 0 3
19646: PUSH
19647: DOUBLE
19648: LD_EXP 82
19652: PUSH
19653: LD_VAR 0 4
19657: ARRAY
19658: INC
19659: ST_TO_ADDR
19660: LD_INT 1
19662: PUSH
19663: FOR_DOWNTO
19664: IFFALSE 19836
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19666: LD_ADDR_VAR 0 5
19670: PUSH
19671: LD_EXP 82
19675: PUSH
19676: LD_VAR 0 4
19680: ARRAY
19681: PUSH
19682: LD_VAR 0 3
19686: ARRAY
19687: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19688: LD_VAR 0 5
19692: PUSH
19693: LD_INT 1
19695: ARRAY
19696: PPUSH
19697: CALL_OW 302
19701: NOT
19702: PUSH
19703: LD_VAR 0 5
19707: PUSH
19708: LD_INT 1
19710: ARRAY
19711: PPUSH
19712: CALL_OW 255
19716: PUSH
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 255
19726: NONEQUAL
19727: OR
19728: IFFALSE 19834
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19730: LD_VAR 0 5
19734: PUSH
19735: LD_INT 1
19737: ARRAY
19738: PPUSH
19739: CALL_OW 305
19743: PUSH
19744: LD_VAR 0 5
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: PPUSH
19753: CALL_OW 255
19757: PUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 255
19767: EQUAL
19768: AND
19769: IFFALSE 19793
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19771: LD_VAR 0 5
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: PPUSH
19780: LD_VAR 0 5
19784: PUSH
19785: LD_INT 2
19787: ARRAY
19788: PPUSH
19789: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19793: LD_ADDR_EXP 82
19797: PUSH
19798: LD_EXP 82
19802: PPUSH
19803: LD_VAR 0 4
19807: PPUSH
19808: LD_EXP 82
19812: PUSH
19813: LD_VAR 0 4
19817: ARRAY
19818: PPUSH
19819: LD_VAR 0 3
19823: PPUSH
19824: CALL_OW 3
19828: PPUSH
19829: CALL_OW 1
19833: ST_TO_ADDR
// end ; end ;
19834: GO 19663
19836: POP
19837: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19838: LD_VAR 0 1
19842: PPUSH
19843: LD_EXP 82
19847: PUSH
19848: LD_VAR 0 4
19852: ARRAY
19853: PUSH
19854: LD_INT 0
19856: PLUS
19857: PPUSH
19858: CALL_OW 505
// end ;
19862: LD_VAR 0 2
19866: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19867: LD_INT 0
19869: PPUSH
19870: PPUSH
19871: PPUSH
19872: PPUSH
// if not hack in hackTanks then
19873: LD_VAR 0 1
19877: PUSH
19878: LD_EXP 81
19882: IN
19883: NOT
19884: IFFALSE 19888
// exit ;
19886: GO 19973
// index := GetElementIndex ( hackTanks , hack ) ;
19888: LD_ADDR_VAR 0 5
19892: PUSH
19893: LD_EXP 81
19897: PPUSH
19898: LD_VAR 0 1
19902: PPUSH
19903: CALL 26723 0 2
19907: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19908: LD_ADDR_VAR 0 4
19912: PUSH
19913: DOUBLE
19914: LD_INT 1
19916: DEC
19917: ST_TO_ADDR
19918: LD_EXP 82
19922: PUSH
19923: LD_VAR 0 5
19927: ARRAY
19928: PUSH
19929: FOR_TO
19930: IFFALSE 19971
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19932: LD_EXP 82
19936: PUSH
19937: LD_VAR 0 5
19941: ARRAY
19942: PUSH
19943: LD_VAR 0 4
19947: ARRAY
19948: PUSH
19949: LD_INT 1
19951: ARRAY
19952: PUSH
19953: LD_VAR 0 2
19957: EQUAL
19958: IFFALSE 19969
// KillUnit ( vehicle ) ;
19960: LD_VAR 0 2
19964: PPUSH
19965: CALL_OW 66
19969: GO 19929
19971: POP
19972: POP
// end ;
19973: LD_VAR 0 3
19977: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19978: LD_EXP 86
19982: NOT
19983: IFFALSE 20018
19985: GO 19987
19987: DISABLE
// begin initMiner := true ;
19988: LD_ADDR_EXP 86
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// minersList := [ ] ;
19996: LD_ADDR_EXP 87
20000: PUSH
20001: EMPTY
20002: ST_TO_ADDR
// minerMinesList := [ ] ;
20003: LD_ADDR_EXP 88
20007: PUSH
20008: EMPTY
20009: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20010: LD_ADDR_EXP 89
20014: PUSH
20015: LD_INT 5
20017: ST_TO_ADDR
// end ;
20018: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20019: LD_EXP 86
20023: PUSH
20024: LD_INT 34
20026: PUSH
20027: LD_EXP 14
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PPUSH
20036: CALL_OW 69
20040: AND
20041: IFFALSE 20504
20043: GO 20045
20045: DISABLE
20046: LD_INT 0
20048: PPUSH
20049: PPUSH
20050: PPUSH
20051: PPUSH
// begin enable ;
20052: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20053: LD_ADDR_VAR 0 1
20057: PUSH
20058: LD_INT 34
20060: PUSH
20061: LD_EXP 14
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PPUSH
20070: CALL_OW 69
20074: PUSH
20075: FOR_IN
20076: IFFALSE 20148
// begin if not i in minersList then
20078: LD_VAR 0 1
20082: PUSH
20083: LD_EXP 87
20087: IN
20088: NOT
20089: IFFALSE 20146
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20091: LD_ADDR_EXP 87
20095: PUSH
20096: LD_EXP 87
20100: PPUSH
20101: LD_EXP 87
20105: PUSH
20106: LD_INT 1
20108: PLUS
20109: PPUSH
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 1
20119: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20120: LD_ADDR_EXP 88
20124: PUSH
20125: LD_EXP 88
20129: PPUSH
20130: LD_EXP 88
20134: PUSH
20135: LD_INT 1
20137: PLUS
20138: PPUSH
20139: EMPTY
20140: PPUSH
20141: CALL_OW 1
20145: ST_TO_ADDR
// end end ;
20146: GO 20075
20148: POP
20149: POP
// for i := minerMinesList downto 1 do
20150: LD_ADDR_VAR 0 1
20154: PUSH
20155: DOUBLE
20156: LD_EXP 88
20160: INC
20161: ST_TO_ADDR
20162: LD_INT 1
20164: PUSH
20165: FOR_DOWNTO
20166: IFFALSE 20502
// begin if IsLive ( minersList [ i ] ) then
20168: LD_EXP 87
20172: PUSH
20173: LD_VAR 0 1
20177: ARRAY
20178: PPUSH
20179: CALL_OW 300
20183: IFFALSE 20211
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20185: LD_EXP 87
20189: PUSH
20190: LD_VAR 0 1
20194: ARRAY
20195: PPUSH
20196: LD_EXP 88
20200: PUSH
20201: LD_VAR 0 1
20205: ARRAY
20206: PPUSH
20207: CALL_OW 505
// if not minerMinesList [ i ] then
20211: LD_EXP 88
20215: PUSH
20216: LD_VAR 0 1
20220: ARRAY
20221: NOT
20222: IFFALSE 20226
// continue ;
20224: GO 20165
// for j := minerMinesList [ i ] downto 1 do
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: DOUBLE
20232: LD_EXP 88
20236: PUSH
20237: LD_VAR 0 1
20241: ARRAY
20242: INC
20243: ST_TO_ADDR
20244: LD_INT 1
20246: PUSH
20247: FOR_DOWNTO
20248: IFFALSE 20498
// begin side := GetSide ( minersList [ i ] ) ;
20250: LD_ADDR_VAR 0 3
20254: PUSH
20255: LD_EXP 87
20259: PUSH
20260: LD_VAR 0 1
20264: ARRAY
20265: PPUSH
20266: CALL_OW 255
20270: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20271: LD_ADDR_VAR 0 4
20275: PUSH
20276: LD_EXP 88
20280: PUSH
20281: LD_VAR 0 1
20285: ARRAY
20286: PUSH
20287: LD_VAR 0 2
20291: ARRAY
20292: PUSH
20293: LD_INT 1
20295: ARRAY
20296: PPUSH
20297: LD_EXP 88
20301: PUSH
20302: LD_VAR 0 1
20306: ARRAY
20307: PUSH
20308: LD_VAR 0 2
20312: ARRAY
20313: PUSH
20314: LD_INT 2
20316: ARRAY
20317: PPUSH
20318: CALL_OW 428
20322: ST_TO_ADDR
// if not tmp then
20323: LD_VAR 0 4
20327: NOT
20328: IFFALSE 20332
// continue ;
20330: GO 20247
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20332: LD_VAR 0 4
20336: PUSH
20337: LD_INT 81
20339: PUSH
20340: LD_VAR 0 3
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PPUSH
20349: CALL_OW 69
20353: IN
20354: PUSH
20355: LD_EXP 88
20359: PUSH
20360: LD_VAR 0 1
20364: ARRAY
20365: PUSH
20366: LD_VAR 0 2
20370: ARRAY
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: PPUSH
20376: LD_EXP 88
20380: PUSH
20381: LD_VAR 0 1
20385: ARRAY
20386: PUSH
20387: LD_VAR 0 2
20391: ARRAY
20392: PUSH
20393: LD_INT 2
20395: ARRAY
20396: PPUSH
20397: CALL_OW 458
20401: AND
20402: IFFALSE 20496
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20404: LD_EXP 88
20408: PUSH
20409: LD_VAR 0 1
20413: ARRAY
20414: PUSH
20415: LD_VAR 0 2
20419: ARRAY
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: PPUSH
20425: LD_EXP 88
20429: PUSH
20430: LD_VAR 0 1
20434: ARRAY
20435: PUSH
20436: LD_VAR 0 2
20440: ARRAY
20441: PUSH
20442: LD_INT 2
20444: ARRAY
20445: PPUSH
20446: LD_VAR 0 3
20450: PPUSH
20451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20455: LD_ADDR_EXP 88
20459: PUSH
20460: LD_EXP 88
20464: PPUSH
20465: LD_VAR 0 1
20469: PPUSH
20470: LD_EXP 88
20474: PUSH
20475: LD_VAR 0 1
20479: ARRAY
20480: PPUSH
20481: LD_VAR 0 2
20485: PPUSH
20486: CALL_OW 3
20490: PPUSH
20491: CALL_OW 1
20495: ST_TO_ADDR
// end ; end ;
20496: GO 20247
20498: POP
20499: POP
// end ;
20500: GO 20165
20502: POP
20503: POP
// end ;
20504: PPOPN 4
20506: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
// result := false ;
20511: LD_ADDR_VAR 0 4
20515: PUSH
20516: LD_INT 0
20518: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 264
20528: PUSH
20529: LD_EXP 14
20533: EQUAL
20534: NOT
20535: IFFALSE 20539
// exit ;
20537: GO 20779
// index := GetElementIndex ( minersList , unit ) ;
20539: LD_ADDR_VAR 0 5
20543: PUSH
20544: LD_EXP 87
20548: PPUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: CALL 26723 0 2
20558: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20559: LD_EXP 88
20563: PUSH
20564: LD_VAR 0 5
20568: ARRAY
20569: PUSH
20570: LD_EXP 89
20574: GREATEREQUAL
20575: IFFALSE 20579
// exit ;
20577: GO 20779
// ComMoveXY ( unit , x , y ) ;
20579: LD_VAR 0 1
20583: PPUSH
20584: LD_VAR 0 2
20588: PPUSH
20589: LD_VAR 0 3
20593: PPUSH
20594: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20598: LD_INT 35
20600: PPUSH
20601: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_VAR 0 2
20614: PPUSH
20615: LD_VAR 0 3
20619: PPUSH
20620: CALL 57120 0 3
20624: NOT
20625: PUSH
20626: LD_VAR 0 1
20630: PPUSH
20631: CALL_OW 314
20635: AND
20636: IFFALSE 20640
// exit ;
20638: GO 20779
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20640: LD_VAR 0 2
20644: PPUSH
20645: LD_VAR 0 3
20649: PPUSH
20650: CALL_OW 428
20654: PUSH
20655: LD_VAR 0 1
20659: EQUAL
20660: PUSH
20661: LD_VAR 0 1
20665: PPUSH
20666: CALL_OW 314
20670: NOT
20671: AND
20672: IFFALSE 20598
// PlaySoundXY ( x , y , PlantMine ) ;
20674: LD_VAR 0 2
20678: PPUSH
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_STRING PlantMine
20686: PPUSH
20687: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20691: LD_VAR 0 2
20695: PPUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 255
20710: PPUSH
20711: LD_INT 0
20713: PPUSH
20714: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20718: LD_ADDR_EXP 88
20722: PUSH
20723: LD_EXP 88
20727: PPUSH
20728: LD_VAR 0 5
20732: PUSH
20733: LD_EXP 88
20737: PUSH
20738: LD_VAR 0 5
20742: ARRAY
20743: PUSH
20744: LD_INT 1
20746: PLUS
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PPUSH
20752: LD_VAR 0 2
20756: PUSH
20757: LD_VAR 0 3
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PPUSH
20766: CALL 26938 0 3
20770: ST_TO_ADDR
// result := true ;
20771: LD_ADDR_VAR 0 4
20775: PUSH
20776: LD_INT 1
20778: ST_TO_ADDR
// end ;
20779: LD_VAR 0 4
20783: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20784: LD_INT 0
20786: PPUSH
20787: PPUSH
20788: PPUSH
// if not unit in minersList then
20789: LD_VAR 0 1
20793: PUSH
20794: LD_EXP 87
20798: IN
20799: NOT
20800: IFFALSE 20804
// exit ;
20802: GO 21196
// index := GetElementIndex ( minersList , unit ) ;
20804: LD_ADDR_VAR 0 6
20808: PUSH
20809: LD_EXP 87
20813: PPUSH
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL 26723 0 2
20823: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20824: LD_ADDR_VAR 0 5
20828: PUSH
20829: DOUBLE
20830: LD_EXP 88
20834: PUSH
20835: LD_VAR 0 6
20839: ARRAY
20840: INC
20841: ST_TO_ADDR
20842: LD_INT 1
20844: PUSH
20845: FOR_DOWNTO
20846: IFFALSE 21007
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20848: LD_EXP 88
20852: PUSH
20853: LD_VAR 0 6
20857: ARRAY
20858: PUSH
20859: LD_VAR 0 5
20863: ARRAY
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PUSH
20869: LD_VAR 0 2
20873: EQUAL
20874: PUSH
20875: LD_EXP 88
20879: PUSH
20880: LD_VAR 0 6
20884: ARRAY
20885: PUSH
20886: LD_VAR 0 5
20890: ARRAY
20891: PUSH
20892: LD_INT 2
20894: ARRAY
20895: PUSH
20896: LD_VAR 0 3
20900: EQUAL
20901: AND
20902: IFFALSE 21005
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20904: LD_EXP 88
20908: PUSH
20909: LD_VAR 0 6
20913: ARRAY
20914: PUSH
20915: LD_VAR 0 5
20919: ARRAY
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: PPUSH
20925: LD_EXP 88
20929: PUSH
20930: LD_VAR 0 6
20934: ARRAY
20935: PUSH
20936: LD_VAR 0 5
20940: ARRAY
20941: PUSH
20942: LD_INT 2
20944: ARRAY
20945: PPUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 255
20955: PPUSH
20956: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20960: LD_ADDR_EXP 88
20964: PUSH
20965: LD_EXP 88
20969: PPUSH
20970: LD_VAR 0 6
20974: PPUSH
20975: LD_EXP 88
20979: PUSH
20980: LD_VAR 0 6
20984: ARRAY
20985: PPUSH
20986: LD_VAR 0 5
20990: PPUSH
20991: CALL_OW 3
20995: PPUSH
20996: CALL_OW 1
21000: ST_TO_ADDR
// exit ;
21001: POP
21002: POP
21003: GO 21196
// end ; end ;
21005: GO 20845
21007: POP
21008: POP
// for i := minerMinesList [ index ] downto 1 do
21009: LD_ADDR_VAR 0 5
21013: PUSH
21014: DOUBLE
21015: LD_EXP 88
21019: PUSH
21020: LD_VAR 0 6
21024: ARRAY
21025: INC
21026: ST_TO_ADDR
21027: LD_INT 1
21029: PUSH
21030: FOR_DOWNTO
21031: IFFALSE 21194
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21033: LD_EXP 88
21037: PUSH
21038: LD_VAR 0 6
21042: ARRAY
21043: PUSH
21044: LD_VAR 0 5
21048: ARRAY
21049: PUSH
21050: LD_INT 1
21052: ARRAY
21053: PPUSH
21054: LD_EXP 88
21058: PUSH
21059: LD_VAR 0 6
21063: ARRAY
21064: PUSH
21065: LD_VAR 0 5
21069: ARRAY
21070: PUSH
21071: LD_INT 2
21073: ARRAY
21074: PPUSH
21075: LD_VAR 0 2
21079: PPUSH
21080: LD_VAR 0 3
21084: PPUSH
21085: CALL_OW 298
21089: PUSH
21090: LD_INT 6
21092: LESS
21093: IFFALSE 21192
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21095: LD_EXP 88
21099: PUSH
21100: LD_VAR 0 6
21104: ARRAY
21105: PUSH
21106: LD_VAR 0 5
21110: ARRAY
21111: PUSH
21112: LD_INT 1
21114: ARRAY
21115: PPUSH
21116: LD_EXP 88
21120: PUSH
21121: LD_VAR 0 6
21125: ARRAY
21126: PUSH
21127: LD_VAR 0 5
21131: ARRAY
21132: PUSH
21133: LD_INT 2
21135: ARRAY
21136: PPUSH
21137: LD_VAR 0 1
21141: PPUSH
21142: CALL_OW 255
21146: PPUSH
21147: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21151: LD_ADDR_EXP 88
21155: PUSH
21156: LD_EXP 88
21160: PPUSH
21161: LD_VAR 0 6
21165: PPUSH
21166: LD_EXP 88
21170: PUSH
21171: LD_VAR 0 6
21175: ARRAY
21176: PPUSH
21177: LD_VAR 0 5
21181: PPUSH
21182: CALL_OW 3
21186: PPUSH
21187: CALL_OW 1
21191: ST_TO_ADDR
// end ; end ;
21192: GO 21030
21194: POP
21195: POP
// end ;
21196: LD_VAR 0 4
21200: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21201: LD_INT 0
21203: PPUSH
21204: PPUSH
21205: PPUSH
21206: PPUSH
21207: PPUSH
21208: PPUSH
21209: PPUSH
21210: PPUSH
21211: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 264
21221: PUSH
21222: LD_EXP 14
21226: EQUAL
21227: NOT
21228: PUSH
21229: LD_VAR 0 1
21233: PUSH
21234: LD_EXP 87
21238: IN
21239: NOT
21240: OR
21241: IFFALSE 21245
// exit ;
21243: GO 21567
// index := GetElementIndex ( minersList , unit ) ;
21245: LD_ADDR_VAR 0 6
21249: PUSH
21250: LD_EXP 87
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL 26723 0 2
21264: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21265: LD_ADDR_VAR 0 8
21269: PUSH
21270: LD_EXP 89
21274: PUSH
21275: LD_EXP 88
21279: PUSH
21280: LD_VAR 0 6
21284: ARRAY
21285: MINUS
21286: ST_TO_ADDR
// if not minesFreeAmount then
21287: LD_VAR 0 8
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 21567
// tmp := [ ] ;
21296: LD_ADDR_VAR 0 7
21300: PUSH
21301: EMPTY
21302: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21303: LD_ADDR_VAR 0 5
21307: PUSH
21308: DOUBLE
21309: LD_INT 1
21311: DEC
21312: ST_TO_ADDR
21313: LD_VAR 0 8
21317: PUSH
21318: FOR_TO
21319: IFFALSE 21514
// begin _d := rand ( 0 , 5 ) ;
21321: LD_ADDR_VAR 0 11
21325: PUSH
21326: LD_INT 0
21328: PPUSH
21329: LD_INT 5
21331: PPUSH
21332: CALL_OW 12
21336: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21337: LD_ADDR_VAR 0 12
21341: PUSH
21342: LD_INT 2
21344: PPUSH
21345: LD_INT 6
21347: PPUSH
21348: CALL_OW 12
21352: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21353: LD_ADDR_VAR 0 9
21357: PUSH
21358: LD_VAR 0 2
21362: PPUSH
21363: LD_VAR 0 11
21367: PPUSH
21368: LD_VAR 0 12
21372: PPUSH
21373: CALL_OW 272
21377: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21378: LD_ADDR_VAR 0 10
21382: PUSH
21383: LD_VAR 0 3
21387: PPUSH
21388: LD_VAR 0 11
21392: PPUSH
21393: LD_VAR 0 12
21397: PPUSH
21398: CALL_OW 273
21402: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21403: LD_VAR 0 9
21407: PPUSH
21408: LD_VAR 0 10
21412: PPUSH
21413: CALL_OW 488
21417: PUSH
21418: LD_VAR 0 9
21422: PUSH
21423: LD_VAR 0 10
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_VAR 0 7
21436: IN
21437: NOT
21438: AND
21439: PUSH
21440: LD_VAR 0 9
21444: PPUSH
21445: LD_VAR 0 10
21449: PPUSH
21450: CALL_OW 458
21454: NOT
21455: AND
21456: IFFALSE 21498
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21458: LD_ADDR_VAR 0 7
21462: PUSH
21463: LD_VAR 0 7
21467: PPUSH
21468: LD_VAR 0 7
21472: PUSH
21473: LD_INT 1
21475: PLUS
21476: PPUSH
21477: LD_VAR 0 9
21481: PUSH
21482: LD_VAR 0 10
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PPUSH
21491: CALL_OW 1
21495: ST_TO_ADDR
21496: GO 21512
// i := i - 1 ;
21498: LD_ADDR_VAR 0 5
21502: PUSH
21503: LD_VAR 0 5
21507: PUSH
21508: LD_INT 1
21510: MINUS
21511: ST_TO_ADDR
// end ;
21512: GO 21318
21514: POP
21515: POP
// for i in tmp do
21516: LD_ADDR_VAR 0 5
21520: PUSH
21521: LD_VAR 0 7
21525: PUSH
21526: FOR_IN
21527: IFFALSE 21565
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21529: LD_VAR 0 1
21533: PPUSH
21534: LD_VAR 0 5
21538: PUSH
21539: LD_INT 1
21541: ARRAY
21542: PPUSH
21543: LD_VAR 0 5
21547: PUSH
21548: LD_INT 2
21550: ARRAY
21551: PPUSH
21552: CALL 20507 0 3
21556: NOT
21557: IFFALSE 21563
// exit ;
21559: POP
21560: POP
21561: GO 21567
21563: GO 21526
21565: POP
21566: POP
// end ;
21567: LD_VAR 0 4
21571: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
// if not GetClass ( unit ) = class_sniper then
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 257
21590: PUSH
21591: LD_INT 5
21593: EQUAL
21594: NOT
21595: IFFALSE 21599
// exit ;
21597: GO 21987
// dist := 8 ;
21599: LD_ADDR_VAR 0 5
21603: PUSH
21604: LD_INT 8
21606: ST_TO_ADDR
// viewRange := 12 ;
21607: LD_ADDR_VAR 0 7
21611: PUSH
21612: LD_INT 12
21614: ST_TO_ADDR
// side := GetSide ( unit ) ;
21615: LD_ADDR_VAR 0 6
21619: PUSH
21620: LD_VAR 0 1
21624: PPUSH
21625: CALL_OW 255
21629: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21630: LD_INT 61
21632: PPUSH
21633: LD_VAR 0 6
21637: PPUSH
21638: CALL_OW 321
21642: PUSH
21643: LD_INT 2
21645: EQUAL
21646: IFFALSE 21656
// viewRange := 16 ;
21648: LD_ADDR_VAR 0 7
21652: PUSH
21653: LD_INT 16
21655: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_VAR 0 2
21665: PPUSH
21666: LD_VAR 0 3
21670: PPUSH
21671: CALL_OW 297
21675: PUSH
21676: LD_VAR 0 5
21680: GREATER
21681: IFFALSE 21760
// begin ComMoveXY ( unit , x , y ) ;
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: LD_VAR 0 3
21697: PPUSH
21698: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21702: LD_INT 35
21704: PPUSH
21705: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21709: LD_VAR 0 1
21713: PPUSH
21714: LD_VAR 0 2
21718: PPUSH
21719: LD_VAR 0 3
21723: PPUSH
21724: CALL 57120 0 3
21728: NOT
21729: IFFALSE 21733
// exit ;
21731: GO 21987
// until GetDistUnitXY ( unit , x , y ) < dist ;
21733: LD_VAR 0 1
21737: PPUSH
21738: LD_VAR 0 2
21742: PPUSH
21743: LD_VAR 0 3
21747: PPUSH
21748: CALL_OW 297
21752: PUSH
21753: LD_VAR 0 5
21757: LESS
21758: IFFALSE 21702
// end ; ComTurnXY ( unit , x , y ) ;
21760: LD_VAR 0 1
21764: PPUSH
21765: LD_VAR 0 2
21769: PPUSH
21770: LD_VAR 0 3
21774: PPUSH
21775: CALL_OW 118
// wait ( 5 ) ;
21779: LD_INT 5
21781: PPUSH
21782: CALL_OW 67
// _d := GetDir ( unit ) ;
21786: LD_ADDR_VAR 0 10
21790: PUSH
21791: LD_VAR 0 1
21795: PPUSH
21796: CALL_OW 254
21800: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21801: LD_ADDR_VAR 0 8
21805: PUSH
21806: LD_VAR 0 1
21810: PPUSH
21811: CALL_OW 250
21815: PPUSH
21816: LD_VAR 0 10
21820: PPUSH
21821: LD_VAR 0 5
21825: PPUSH
21826: CALL_OW 272
21830: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21831: LD_ADDR_VAR 0 9
21835: PUSH
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 251
21845: PPUSH
21846: LD_VAR 0 10
21850: PPUSH
21851: LD_VAR 0 5
21855: PPUSH
21856: CALL_OW 273
21860: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21861: LD_VAR 0 8
21865: PPUSH
21866: LD_VAR 0 9
21870: PPUSH
21871: CALL_OW 488
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 21987
// ComAnimCustom ( unit , 1 ) ;
21880: LD_VAR 0 1
21884: PPUSH
21885: LD_INT 1
21887: PPUSH
21888: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21892: LD_VAR 0 8
21896: PPUSH
21897: LD_VAR 0 9
21901: PPUSH
21902: LD_VAR 0 6
21906: PPUSH
21907: LD_VAR 0 7
21911: PPUSH
21912: CALL_OW 330
// repeat wait ( 1 ) ;
21916: LD_INT 1
21918: PPUSH
21919: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 316
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 314
21942: OR
21943: PUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 302
21953: NOT
21954: OR
21955: PUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 301
21965: OR
21966: IFFALSE 21916
// RemoveSeeing ( _x , _y , side ) ;
21968: LD_VAR 0 8
21972: PPUSH
21973: LD_VAR 0 9
21977: PPUSH
21978: LD_VAR 0 6
21982: PPUSH
21983: CALL_OW 331
// end ; end_of_file
21987: LD_VAR 0 4
21991: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21992: LD_INT 0
21994: PPUSH
21995: PPUSH
// if exist_mode then
21996: LD_VAR 0 2
22000: IFFALSE 22025
// unit := CreateCharacter ( prefix & ident ) else
22002: LD_ADDR_VAR 0 5
22006: PUSH
22007: LD_VAR 0 3
22011: PUSH
22012: LD_VAR 0 1
22016: STR
22017: PPUSH
22018: CALL_OW 34
22022: ST_TO_ADDR
22023: GO 22040
// unit := NewCharacter ( ident ) ;
22025: LD_ADDR_VAR 0 5
22029: PUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 25
22039: ST_TO_ADDR
// result := unit ;
22040: LD_ADDR_VAR 0 4
22044: PUSH
22045: LD_VAR 0 5
22049: ST_TO_ADDR
// end ;
22050: LD_VAR 0 4
22054: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22055: LD_INT 0
22057: PPUSH
22058: PPUSH
// if not side or not nation then
22059: LD_VAR 0 1
22063: NOT
22064: PUSH
22065: LD_VAR 0 2
22069: NOT
22070: OR
22071: IFFALSE 22075
// exit ;
22073: GO 22839
// case nation of nation_american :
22075: LD_VAR 0 2
22079: PUSH
22080: LD_INT 1
22082: DOUBLE
22083: EQUAL
22084: IFTRUE 22088
22086: GO 22302
22088: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22089: LD_ADDR_VAR 0 4
22093: PUSH
22094: LD_INT 35
22096: PUSH
22097: LD_INT 45
22099: PUSH
22100: LD_INT 46
22102: PUSH
22103: LD_INT 47
22105: PUSH
22106: LD_INT 82
22108: PUSH
22109: LD_INT 83
22111: PUSH
22112: LD_INT 84
22114: PUSH
22115: LD_INT 85
22117: PUSH
22118: LD_INT 86
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 2
22126: PUSH
22127: LD_INT 6
22129: PUSH
22130: LD_INT 15
22132: PUSH
22133: LD_INT 16
22135: PUSH
22136: LD_INT 7
22138: PUSH
22139: LD_INT 12
22141: PUSH
22142: LD_INT 13
22144: PUSH
22145: LD_INT 10
22147: PUSH
22148: LD_INT 14
22150: PUSH
22151: LD_INT 20
22153: PUSH
22154: LD_INT 21
22156: PUSH
22157: LD_INT 22
22159: PUSH
22160: LD_INT 25
22162: PUSH
22163: LD_INT 32
22165: PUSH
22166: LD_INT 27
22168: PUSH
22169: LD_INT 36
22171: PUSH
22172: LD_INT 69
22174: PUSH
22175: LD_INT 39
22177: PUSH
22178: LD_INT 34
22180: PUSH
22181: LD_INT 40
22183: PUSH
22184: LD_INT 48
22186: PUSH
22187: LD_INT 49
22189: PUSH
22190: LD_INT 50
22192: PUSH
22193: LD_INT 51
22195: PUSH
22196: LD_INT 52
22198: PUSH
22199: LD_INT 53
22201: PUSH
22202: LD_INT 54
22204: PUSH
22205: LD_INT 55
22207: PUSH
22208: LD_INT 56
22210: PUSH
22211: LD_INT 57
22213: PUSH
22214: LD_INT 58
22216: PUSH
22217: LD_INT 59
22219: PUSH
22220: LD_INT 60
22222: PUSH
22223: LD_INT 61
22225: PUSH
22226: LD_INT 62
22228: PUSH
22229: LD_INT 80
22231: PUSH
22232: LD_INT 82
22234: PUSH
22235: LD_INT 83
22237: PUSH
22238: LD_INT 84
22240: PUSH
22241: LD_INT 85
22243: PUSH
22244: LD_INT 86
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: ST_TO_ADDR
22300: GO 22763
22302: LD_INT 2
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22532
22310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22311: LD_ADDR_VAR 0 4
22315: PUSH
22316: LD_INT 35
22318: PUSH
22319: LD_INT 45
22321: PUSH
22322: LD_INT 46
22324: PUSH
22325: LD_INT 47
22327: PUSH
22328: LD_INT 82
22330: PUSH
22331: LD_INT 83
22333: PUSH
22334: LD_INT 84
22336: PUSH
22337: LD_INT 85
22339: PUSH
22340: LD_INT 87
22342: PUSH
22343: LD_INT 70
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 11
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: LD_INT 4
22357: PUSH
22358: LD_INT 5
22360: PUSH
22361: LD_INT 6
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 18
22369: PUSH
22370: LD_INT 7
22372: PUSH
22373: LD_INT 17
22375: PUSH
22376: LD_INT 8
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 72
22390: PUSH
22391: LD_INT 26
22393: PUSH
22394: LD_INT 69
22396: PUSH
22397: LD_INT 39
22399: PUSH
22400: LD_INT 40
22402: PUSH
22403: LD_INT 41
22405: PUSH
22406: LD_INT 42
22408: PUSH
22409: LD_INT 43
22411: PUSH
22412: LD_INT 48
22414: PUSH
22415: LD_INT 49
22417: PUSH
22418: LD_INT 50
22420: PUSH
22421: LD_INT 51
22423: PUSH
22424: LD_INT 52
22426: PUSH
22427: LD_INT 53
22429: PUSH
22430: LD_INT 54
22432: PUSH
22433: LD_INT 55
22435: PUSH
22436: LD_INT 56
22438: PUSH
22439: LD_INT 60
22441: PUSH
22442: LD_INT 61
22444: PUSH
22445: LD_INT 62
22447: PUSH
22448: LD_INT 66
22450: PUSH
22451: LD_INT 67
22453: PUSH
22454: LD_INT 68
22456: PUSH
22457: LD_INT 81
22459: PUSH
22460: LD_INT 82
22462: PUSH
22463: LD_INT 83
22465: PUSH
22466: LD_INT 84
22468: PUSH
22469: LD_INT 85
22471: PUSH
22472: LD_INT 87
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: ST_TO_ADDR
22530: GO 22763
22532: LD_INT 3
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22762
22540: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22541: LD_ADDR_VAR 0 4
22545: PUSH
22546: LD_INT 46
22548: PUSH
22549: LD_INT 47
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: LD_INT 2
22557: PUSH
22558: LD_INT 82
22560: PUSH
22561: LD_INT 83
22563: PUSH
22564: LD_INT 84
22566: PUSH
22567: LD_INT 85
22569: PUSH
22570: LD_INT 86
22572: PUSH
22573: LD_INT 11
22575: PUSH
22576: LD_INT 9
22578: PUSH
22579: LD_INT 20
22581: PUSH
22582: LD_INT 19
22584: PUSH
22585: LD_INT 21
22587: PUSH
22588: LD_INT 24
22590: PUSH
22591: LD_INT 22
22593: PUSH
22594: LD_INT 25
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: LD_INT 29
22602: PUSH
22603: LD_INT 30
22605: PUSH
22606: LD_INT 31
22608: PUSH
22609: LD_INT 37
22611: PUSH
22612: LD_INT 38
22614: PUSH
22615: LD_INT 32
22617: PUSH
22618: LD_INT 27
22620: PUSH
22621: LD_INT 33
22623: PUSH
22624: LD_INT 69
22626: PUSH
22627: LD_INT 39
22629: PUSH
22630: LD_INT 34
22632: PUSH
22633: LD_INT 40
22635: PUSH
22636: LD_INT 71
22638: PUSH
22639: LD_INT 23
22641: PUSH
22642: LD_INT 44
22644: PUSH
22645: LD_INT 48
22647: PUSH
22648: LD_INT 49
22650: PUSH
22651: LD_INT 50
22653: PUSH
22654: LD_INT 51
22656: PUSH
22657: LD_INT 52
22659: PUSH
22660: LD_INT 53
22662: PUSH
22663: LD_INT 54
22665: PUSH
22666: LD_INT 55
22668: PUSH
22669: LD_INT 56
22671: PUSH
22672: LD_INT 57
22674: PUSH
22675: LD_INT 58
22677: PUSH
22678: LD_INT 59
22680: PUSH
22681: LD_INT 63
22683: PUSH
22684: LD_INT 64
22686: PUSH
22687: LD_INT 65
22689: PUSH
22690: LD_INT 82
22692: PUSH
22693: LD_INT 83
22695: PUSH
22696: LD_INT 84
22698: PUSH
22699: LD_INT 85
22701: PUSH
22702: LD_INT 86
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: ST_TO_ADDR
22760: GO 22763
22762: POP
// if state > - 1 and state < 3 then
22763: LD_VAR 0 3
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: GREATER
22772: PUSH
22773: LD_VAR 0 3
22777: PUSH
22778: LD_INT 3
22780: LESS
22781: AND
22782: IFFALSE 22839
// for i in result do
22784: LD_ADDR_VAR 0 5
22788: PUSH
22789: LD_VAR 0 4
22793: PUSH
22794: FOR_IN
22795: IFFALSE 22837
// if GetTech ( i , side ) <> state then
22797: LD_VAR 0 5
22801: PPUSH
22802: LD_VAR 0 1
22806: PPUSH
22807: CALL_OW 321
22811: PUSH
22812: LD_VAR 0 3
22816: NONEQUAL
22817: IFFALSE 22835
// result := result diff i ;
22819: LD_ADDR_VAR 0 4
22823: PUSH
22824: LD_VAR 0 4
22828: PUSH
22829: LD_VAR 0 5
22833: DIFF
22834: ST_TO_ADDR
22835: GO 22794
22837: POP
22838: POP
// end ;
22839: LD_VAR 0 4
22843: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22844: LD_INT 0
22846: PPUSH
22847: PPUSH
22848: PPUSH
// result := true ;
22849: LD_ADDR_VAR 0 3
22853: PUSH
22854: LD_INT 1
22856: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22857: LD_ADDR_VAR 0 5
22861: PUSH
22862: LD_VAR 0 2
22866: PPUSH
22867: CALL_OW 480
22871: ST_TO_ADDR
// if not tmp then
22872: LD_VAR 0 5
22876: NOT
22877: IFFALSE 22881
// exit ;
22879: GO 22930
// for i in tmp do
22881: LD_ADDR_VAR 0 4
22885: PUSH
22886: LD_VAR 0 5
22890: PUSH
22891: FOR_IN
22892: IFFALSE 22928
// if GetTech ( i , side ) <> state_researched then
22894: LD_VAR 0 4
22898: PPUSH
22899: LD_VAR 0 1
22903: PPUSH
22904: CALL_OW 321
22908: PUSH
22909: LD_INT 2
22911: NONEQUAL
22912: IFFALSE 22926
// begin result := false ;
22914: LD_ADDR_VAR 0 3
22918: PUSH
22919: LD_INT 0
22921: ST_TO_ADDR
// exit ;
22922: POP
22923: POP
22924: GO 22930
// end ;
22926: GO 22891
22928: POP
22929: POP
// end ;
22930: LD_VAR 0 3
22934: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22935: LD_INT 0
22937: PPUSH
22938: PPUSH
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
22945: PPUSH
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22950: LD_VAR 0 1
22954: NOT
22955: PUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 257
22965: PUSH
22966: LD_INT 9
22968: NONEQUAL
22969: OR
22970: IFFALSE 22974
// exit ;
22972: GO 23547
// side := GetSide ( unit ) ;
22974: LD_ADDR_VAR 0 9
22978: PUSH
22979: LD_VAR 0 1
22983: PPUSH
22984: CALL_OW 255
22988: ST_TO_ADDR
// tech_space := tech_spacanom ;
22989: LD_ADDR_VAR 0 12
22993: PUSH
22994: LD_INT 29
22996: ST_TO_ADDR
// tech_time := tech_taurad ;
22997: LD_ADDR_VAR 0 13
23001: PUSH
23002: LD_INT 28
23004: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23005: LD_ADDR_VAR 0 11
23009: PUSH
23010: LD_VAR 0 1
23014: PPUSH
23015: CALL_OW 310
23019: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23020: LD_VAR 0 11
23024: PPUSH
23025: CALL_OW 247
23029: PUSH
23030: LD_INT 2
23032: EQUAL
23033: IFFALSE 23037
// exit ;
23035: GO 23547
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23037: LD_ADDR_VAR 0 8
23041: PUSH
23042: LD_INT 81
23044: PUSH
23045: LD_VAR 0 9
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 3
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PPUSH
23075: CALL_OW 69
23079: ST_TO_ADDR
// if not tmp then
23080: LD_VAR 0 8
23084: NOT
23085: IFFALSE 23089
// exit ;
23087: GO 23547
// if in_unit then
23089: LD_VAR 0 11
23093: IFFALSE 23117
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23095: LD_ADDR_VAR 0 10
23099: PUSH
23100: LD_VAR 0 8
23104: PPUSH
23105: LD_VAR 0 11
23109: PPUSH
23110: CALL_OW 74
23114: ST_TO_ADDR
23115: GO 23137
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23117: LD_ADDR_VAR 0 10
23121: PUSH
23122: LD_VAR 0 8
23126: PPUSH
23127: LD_VAR 0 1
23131: PPUSH
23132: CALL_OW 74
23136: ST_TO_ADDR
// if not enemy then
23137: LD_VAR 0 10
23141: NOT
23142: IFFALSE 23146
// exit ;
23144: GO 23547
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23146: LD_VAR 0 11
23150: PUSH
23151: LD_VAR 0 11
23155: PPUSH
23156: LD_VAR 0 10
23160: PPUSH
23161: CALL_OW 296
23165: PUSH
23166: LD_INT 13
23168: GREATER
23169: AND
23170: PUSH
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_VAR 0 10
23180: PPUSH
23181: CALL_OW 296
23185: PUSH
23186: LD_INT 12
23188: GREATER
23189: OR
23190: IFFALSE 23194
// exit ;
23192: GO 23547
// missile := [ 1 ] ;
23194: LD_ADDR_VAR 0 14
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: EMPTY
23203: LIST
23204: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23205: LD_VAR 0 9
23209: PPUSH
23210: LD_VAR 0 12
23214: PPUSH
23215: CALL_OW 325
23219: IFFALSE 23248
// missile := Insert ( missile , missile + 1 , 2 ) ;
23221: LD_ADDR_VAR 0 14
23225: PUSH
23226: LD_VAR 0 14
23230: PPUSH
23231: LD_VAR 0 14
23235: PUSH
23236: LD_INT 1
23238: PLUS
23239: PPUSH
23240: LD_INT 2
23242: PPUSH
23243: CALL_OW 2
23247: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23248: LD_VAR 0 9
23252: PPUSH
23253: LD_VAR 0 13
23257: PPUSH
23258: CALL_OW 325
23262: PUSH
23263: LD_VAR 0 10
23267: PPUSH
23268: CALL_OW 255
23272: PPUSH
23273: LD_VAR 0 13
23277: PPUSH
23278: CALL_OW 325
23282: NOT
23283: AND
23284: IFFALSE 23313
// missile := Insert ( missile , missile + 1 , 3 ) ;
23286: LD_ADDR_VAR 0 14
23290: PUSH
23291: LD_VAR 0 14
23295: PPUSH
23296: LD_VAR 0 14
23300: PUSH
23301: LD_INT 1
23303: PLUS
23304: PPUSH
23305: LD_INT 3
23307: PPUSH
23308: CALL_OW 2
23312: ST_TO_ADDR
// if missile < 2 then
23313: LD_VAR 0 14
23317: PUSH
23318: LD_INT 2
23320: LESS
23321: IFFALSE 23325
// exit ;
23323: GO 23547
// x := GetX ( enemy ) ;
23325: LD_ADDR_VAR 0 4
23329: PUSH
23330: LD_VAR 0 10
23334: PPUSH
23335: CALL_OW 250
23339: ST_TO_ADDR
// y := GetY ( enemy ) ;
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_VAR 0 10
23349: PPUSH
23350: CALL_OW 251
23354: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23355: LD_ADDR_VAR 0 6
23359: PUSH
23360: LD_VAR 0 4
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 12
23376: PLUS
23377: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23378: LD_ADDR_VAR 0 7
23382: PUSH
23383: LD_VAR 0 5
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: CALL_OW 12
23399: PLUS
23400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23401: LD_VAR 0 6
23405: PPUSH
23406: LD_VAR 0 7
23410: PPUSH
23411: CALL_OW 488
23415: NOT
23416: IFFALSE 23438
// begin _x := x ;
23418: LD_ADDR_VAR 0 6
23422: PUSH
23423: LD_VAR 0 4
23427: ST_TO_ADDR
// _y := y ;
23428: LD_ADDR_VAR 0 7
23432: PUSH
23433: LD_VAR 0 5
23437: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_INT 1
23445: PPUSH
23446: LD_VAR 0 14
23450: PPUSH
23451: CALL_OW 12
23455: ST_TO_ADDR
// case i of 1 :
23456: LD_VAR 0 3
23460: PUSH
23461: LD_INT 1
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23486
23469: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23470: LD_VAR 0 1
23474: PPUSH
23475: LD_VAR 0 10
23479: PPUSH
23480: CALL_OW 115
23484: GO 23547
23486: LD_INT 2
23488: DOUBLE
23489: EQUAL
23490: IFTRUE 23494
23492: GO 23516
23494: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23495: LD_VAR 0 1
23499: PPUSH
23500: LD_VAR 0 6
23504: PPUSH
23505: LD_VAR 0 7
23509: PPUSH
23510: CALL_OW 153
23514: GO 23547
23516: LD_INT 3
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23546
23524: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_VAR 0 6
23534: PPUSH
23535: LD_VAR 0 7
23539: PPUSH
23540: CALL_OW 154
23544: GO 23547
23546: POP
// end ;
23547: LD_VAR 0 2
23551: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23552: LD_INT 0
23554: PPUSH
23555: PPUSH
23556: PPUSH
23557: PPUSH
23558: PPUSH
23559: PPUSH
// if not unit or not building then
23560: LD_VAR 0 1
23564: NOT
23565: PUSH
23566: LD_VAR 0 2
23570: NOT
23571: OR
23572: IFFALSE 23576
// exit ;
23574: GO 23734
// x := GetX ( building ) ;
23576: LD_ADDR_VAR 0 5
23580: PUSH
23581: LD_VAR 0 2
23585: PPUSH
23586: CALL_OW 250
23590: ST_TO_ADDR
// y := GetY ( building ) ;
23591: LD_ADDR_VAR 0 6
23595: PUSH
23596: LD_VAR 0 2
23600: PPUSH
23601: CALL_OW 251
23605: ST_TO_ADDR
// for i = 0 to 5 do
23606: LD_ADDR_VAR 0 4
23610: PUSH
23611: DOUBLE
23612: LD_INT 0
23614: DEC
23615: ST_TO_ADDR
23616: LD_INT 5
23618: PUSH
23619: FOR_TO
23620: IFFALSE 23732
// begin _x := ShiftX ( x , i , 3 ) ;
23622: LD_ADDR_VAR 0 7
23626: PUSH
23627: LD_VAR 0 5
23631: PPUSH
23632: LD_VAR 0 4
23636: PPUSH
23637: LD_INT 3
23639: PPUSH
23640: CALL_OW 272
23644: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23645: LD_ADDR_VAR 0 8
23649: PUSH
23650: LD_VAR 0 6
23654: PPUSH
23655: LD_VAR 0 4
23659: PPUSH
23660: LD_INT 3
23662: PPUSH
23663: CALL_OW 273
23667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23668: LD_VAR 0 7
23672: PPUSH
23673: LD_VAR 0 8
23677: PPUSH
23678: CALL_OW 488
23682: NOT
23683: IFFALSE 23687
// continue ;
23685: GO 23619
// if HexInfo ( _x , _y ) = 0 then
23687: LD_VAR 0 7
23691: PPUSH
23692: LD_VAR 0 8
23696: PPUSH
23697: CALL_OW 428
23701: PUSH
23702: LD_INT 0
23704: EQUAL
23705: IFFALSE 23730
// begin ComMoveXY ( unit , _x , _y ) ;
23707: LD_VAR 0 1
23711: PPUSH
23712: LD_VAR 0 7
23716: PPUSH
23717: LD_VAR 0 8
23721: PPUSH
23722: CALL_OW 111
// exit ;
23726: POP
23727: POP
23728: GO 23734
// end ; end ;
23730: GO 23619
23732: POP
23733: POP
// end ;
23734: LD_VAR 0 3
23738: RET
// export function ScanBase ( side , base_area ) ; begin
23739: LD_INT 0
23741: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23742: LD_ADDR_VAR 0 3
23746: PUSH
23747: LD_VAR 0 2
23751: PPUSH
23752: LD_INT 81
23754: PUSH
23755: LD_VAR 0 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PPUSH
23764: CALL_OW 70
23768: ST_TO_ADDR
// end ;
23769: LD_VAR 0 3
23773: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
// result := false ;
23780: LD_ADDR_VAR 0 2
23784: PUSH
23785: LD_INT 0
23787: ST_TO_ADDR
// side := GetSide ( unit ) ;
23788: LD_ADDR_VAR 0 3
23792: PUSH
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 255
23802: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 248
23817: ST_TO_ADDR
// case nat of 1 :
23818: LD_VAR 0 4
23822: PUSH
23823: LD_INT 1
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23842
23831: POP
// tech := tech_lassight ; 2 :
23832: LD_ADDR_VAR 0 5
23836: PUSH
23837: LD_INT 12
23839: ST_TO_ADDR
23840: GO 23881
23842: LD_INT 2
23844: DOUBLE
23845: EQUAL
23846: IFTRUE 23850
23848: GO 23861
23850: POP
// tech := tech_mortar ; 3 :
23851: LD_ADDR_VAR 0 5
23855: PUSH
23856: LD_INT 41
23858: ST_TO_ADDR
23859: GO 23881
23861: LD_INT 3
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23880
23869: POP
// tech := tech_bazooka ; end ;
23870: LD_ADDR_VAR 0 5
23874: PUSH
23875: LD_INT 44
23877: ST_TO_ADDR
23878: GO 23881
23880: POP
// if Researched ( side , tech ) then
23881: LD_VAR 0 3
23885: PPUSH
23886: LD_VAR 0 5
23890: PPUSH
23891: CALL_OW 325
23895: IFFALSE 23922
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23897: LD_ADDR_VAR 0 2
23901: PUSH
23902: LD_INT 5
23904: PUSH
23905: LD_INT 8
23907: PUSH
23908: LD_INT 9
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: PUSH
23916: LD_VAR 0 4
23920: ARRAY
23921: ST_TO_ADDR
// end ;
23922: LD_VAR 0 2
23926: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23927: LD_INT 0
23929: PPUSH
23930: PPUSH
23931: PPUSH
// if not mines then
23932: LD_VAR 0 2
23936: NOT
23937: IFFALSE 23941
// exit ;
23939: GO 24085
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23941: LD_ADDR_VAR 0 5
23945: PUSH
23946: LD_INT 81
23948: PUSH
23949: LD_VAR 0 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 3
23960: PUSH
23961: LD_INT 21
23963: PUSH
23964: LD_INT 3
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PPUSH
23979: CALL_OW 69
23983: ST_TO_ADDR
// for i in mines do
23984: LD_ADDR_VAR 0 4
23988: PUSH
23989: LD_VAR 0 2
23993: PUSH
23994: FOR_IN
23995: IFFALSE 24083
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23997: LD_VAR 0 4
24001: PUSH
24002: LD_INT 1
24004: ARRAY
24005: PPUSH
24006: LD_VAR 0 4
24010: PUSH
24011: LD_INT 2
24013: ARRAY
24014: PPUSH
24015: CALL_OW 458
24019: NOT
24020: IFFALSE 24024
// continue ;
24022: GO 23994
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24024: LD_VAR 0 4
24028: PUSH
24029: LD_INT 1
24031: ARRAY
24032: PPUSH
24033: LD_VAR 0 4
24037: PUSH
24038: LD_INT 2
24040: ARRAY
24041: PPUSH
24042: CALL_OW 428
24046: PUSH
24047: LD_VAR 0 5
24051: IN
24052: IFFALSE 24081
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24054: LD_VAR 0 4
24058: PUSH
24059: LD_INT 1
24061: ARRAY
24062: PPUSH
24063: LD_VAR 0 4
24067: PUSH
24068: LD_INT 2
24070: ARRAY
24071: PPUSH
24072: LD_VAR 0 1
24076: PPUSH
24077: CALL_OW 456
// end ;
24081: GO 23994
24083: POP
24084: POP
// end ;
24085: LD_VAR 0 3
24089: RET
// export function Count ( array ) ; var i ; begin
24090: LD_INT 0
24092: PPUSH
24093: PPUSH
// result := 0 ;
24094: LD_ADDR_VAR 0 2
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// for i in array do
24102: LD_ADDR_VAR 0 3
24106: PUSH
24107: LD_VAR 0 1
24111: PUSH
24112: FOR_IN
24113: IFFALSE 24137
// if i then
24115: LD_VAR 0 3
24119: IFFALSE 24135
// result := result + 1 ;
24121: LD_ADDR_VAR 0 2
24125: PUSH
24126: LD_VAR 0 2
24130: PUSH
24131: LD_INT 1
24133: PLUS
24134: ST_TO_ADDR
24135: GO 24112
24137: POP
24138: POP
// end ;
24139: LD_VAR 0 2
24143: RET
// export function IsEmpty ( building ) ; begin
24144: LD_INT 0
24146: PPUSH
// if not building then
24147: LD_VAR 0 1
24151: NOT
24152: IFFALSE 24156
// exit ;
24154: GO 24199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24156: LD_ADDR_VAR 0 2
24160: PUSH
24161: LD_VAR 0 1
24165: PUSH
24166: LD_INT 22
24168: PUSH
24169: LD_VAR 0 1
24173: PPUSH
24174: CALL_OW 255
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 58
24185: PUSH
24186: EMPTY
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PPUSH
24193: CALL_OW 69
24197: IN
24198: ST_TO_ADDR
// end ;
24199: LD_VAR 0 2
24203: RET
// export function IsNotFull ( building ) ; begin
24204: LD_INT 0
24206: PPUSH
// if not building then
24207: LD_VAR 0 1
24211: NOT
24212: IFFALSE 24216
// exit ;
24214: GO 24235
// result := UnitsInside ( building ) < 6 ;
24216: LD_ADDR_VAR 0 2
24220: PUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 313
24230: PUSH
24231: LD_INT 6
24233: LESS
24234: ST_TO_ADDR
// end ;
24235: LD_VAR 0 2
24239: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
// tmp := [ ] ;
24246: LD_ADDR_VAR 0 3
24250: PUSH
24251: EMPTY
24252: ST_TO_ADDR
// list := [ ] ;
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: EMPTY
24259: ST_TO_ADDR
// for i = 16 to 25 do
24260: LD_ADDR_VAR 0 4
24264: PUSH
24265: DOUBLE
24266: LD_INT 16
24268: DEC
24269: ST_TO_ADDR
24270: LD_INT 25
24272: PUSH
24273: FOR_TO
24274: IFFALSE 24347
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24276: LD_ADDR_VAR 0 3
24280: PUSH
24281: LD_VAR 0 3
24285: PUSH
24286: LD_INT 22
24288: PUSH
24289: LD_VAR 0 1
24293: PPUSH
24294: CALL_OW 255
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 91
24305: PUSH
24306: LD_VAR 0 1
24310: PUSH
24311: LD_INT 6
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 30
24321: PUSH
24322: LD_VAR 0 4
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: PUSH
24336: EMPTY
24337: LIST
24338: PPUSH
24339: CALL_OW 69
24343: ADD
24344: ST_TO_ADDR
24345: GO 24273
24347: POP
24348: POP
// for i = 1 to tmp do
24349: LD_ADDR_VAR 0 4
24353: PUSH
24354: DOUBLE
24355: LD_INT 1
24357: DEC
24358: ST_TO_ADDR
24359: LD_VAR 0 3
24363: PUSH
24364: FOR_TO
24365: IFFALSE 24453
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24367: LD_ADDR_VAR 0 5
24371: PUSH
24372: LD_VAR 0 5
24376: PUSH
24377: LD_VAR 0 3
24381: PUSH
24382: LD_VAR 0 4
24386: ARRAY
24387: PPUSH
24388: CALL_OW 266
24392: PUSH
24393: LD_VAR 0 3
24397: PUSH
24398: LD_VAR 0 4
24402: ARRAY
24403: PPUSH
24404: CALL_OW 250
24408: PUSH
24409: LD_VAR 0 3
24413: PUSH
24414: LD_VAR 0 4
24418: ARRAY
24419: PPUSH
24420: CALL_OW 251
24424: PUSH
24425: LD_VAR 0 3
24429: PUSH
24430: LD_VAR 0 4
24434: ARRAY
24435: PPUSH
24436: CALL_OW 254
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: ADD
24450: ST_TO_ADDR
24451: GO 24364
24453: POP
24454: POP
// result := list ;
24455: LD_ADDR_VAR 0 2
24459: PUSH
24460: LD_VAR 0 5
24464: ST_TO_ADDR
// end ;
24465: LD_VAR 0 2
24469: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24470: LD_INT 0
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
// if not factory then
24479: LD_VAR 0 1
24483: NOT
24484: IFFALSE 24488
// exit ;
24486: GO 25081
// if control = control_apeman then
24488: LD_VAR 0 4
24492: PUSH
24493: LD_INT 5
24495: EQUAL
24496: IFFALSE 24605
// begin tmp := UnitsInside ( factory ) ;
24498: LD_ADDR_VAR 0 8
24502: PUSH
24503: LD_VAR 0 1
24507: PPUSH
24508: CALL_OW 313
24512: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24513: LD_VAR 0 8
24517: PPUSH
24518: LD_INT 25
24520: PUSH
24521: LD_INT 12
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PPUSH
24528: CALL_OW 72
24532: NOT
24533: IFFALSE 24543
// control := control_manual ;
24535: LD_ADDR_VAR 0 4
24539: PUSH
24540: LD_INT 1
24542: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24543: LD_ADDR_VAR 0 8
24547: PUSH
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL 24240 0 1
24557: ST_TO_ADDR
// if tmp then
24558: LD_VAR 0 8
24562: IFFALSE 24605
// begin for i in tmp do
24564: LD_ADDR_VAR 0 7
24568: PUSH
24569: LD_VAR 0 8
24573: PUSH
24574: FOR_IN
24575: IFFALSE 24603
// if i [ 1 ] = b_ext_radio then
24577: LD_VAR 0 7
24581: PUSH
24582: LD_INT 1
24584: ARRAY
24585: PUSH
24586: LD_INT 22
24588: EQUAL
24589: IFFALSE 24601
// begin control := control_remote ;
24591: LD_ADDR_VAR 0 4
24595: PUSH
24596: LD_INT 2
24598: ST_TO_ADDR
// break ;
24599: GO 24603
// end ;
24601: GO 24574
24603: POP
24604: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_VAR 0 4
24624: PPUSH
24625: LD_VAR 0 5
24629: PPUSH
24630: CALL_OW 448
24634: IFFALSE 24669
// begin result := [ chassis , engine , control , weapon ] ;
24636: LD_ADDR_VAR 0 6
24640: PUSH
24641: LD_VAR 0 2
24645: PUSH
24646: LD_VAR 0 3
24650: PUSH
24651: LD_VAR 0 4
24655: PUSH
24656: LD_VAR 0 5
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: ST_TO_ADDR
// exit ;
24667: GO 25081
// end ; _chassis := AvailableChassisList ( factory ) ;
24669: LD_ADDR_VAR 0 9
24673: PUSH
24674: LD_VAR 0 1
24678: PPUSH
24679: CALL_OW 475
24683: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24684: LD_ADDR_VAR 0 11
24688: PUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL_OW 476
24698: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24699: LD_ADDR_VAR 0 12
24703: PUSH
24704: LD_VAR 0 1
24708: PPUSH
24709: CALL_OW 477
24713: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24714: LD_ADDR_VAR 0 10
24718: PUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL_OW 478
24728: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24729: LD_VAR 0 9
24733: NOT
24734: PUSH
24735: LD_VAR 0 11
24739: NOT
24740: OR
24741: PUSH
24742: LD_VAR 0 12
24746: NOT
24747: OR
24748: PUSH
24749: LD_VAR 0 10
24753: NOT
24754: OR
24755: IFFALSE 24790
// begin result := [ chassis , engine , control , weapon ] ;
24757: LD_ADDR_VAR 0 6
24761: PUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_VAR 0 3
24771: PUSH
24772: LD_VAR 0 4
24776: PUSH
24777: LD_VAR 0 5
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: ST_TO_ADDR
// exit ;
24788: GO 25081
// end ; if not chassis in _chassis then
24790: LD_VAR 0 2
24794: PUSH
24795: LD_VAR 0 9
24799: IN
24800: NOT
24801: IFFALSE 24827
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24803: LD_ADDR_VAR 0 2
24807: PUSH
24808: LD_VAR 0 9
24812: PUSH
24813: LD_INT 1
24815: PPUSH
24816: LD_VAR 0 9
24820: PPUSH
24821: CALL_OW 12
24825: ARRAY
24826: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24827: LD_VAR 0 2
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: CALL 25086 0 2
24841: NOT
24842: IFFALSE 24901
// repeat engine := _engine [ 1 ] ;
24844: LD_ADDR_VAR 0 3
24848: PUSH
24849: LD_VAR 0 11
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24858: LD_ADDR_VAR 0 11
24862: PUSH
24863: LD_VAR 0 11
24867: PPUSH
24868: LD_INT 1
24870: PPUSH
24871: CALL_OW 3
24875: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24876: LD_VAR 0 2
24880: PPUSH
24881: LD_VAR 0 3
24885: PPUSH
24886: CALL 25086 0 2
24890: PUSH
24891: LD_VAR 0 11
24895: PUSH
24896: EMPTY
24897: EQUAL
24898: OR
24899: IFFALSE 24844
// if not control in _control then
24901: LD_VAR 0 4
24905: PUSH
24906: LD_VAR 0 12
24910: IN
24911: NOT
24912: IFFALSE 24938
// control := _control [ rand ( 1 , _control ) ] ;
24914: LD_ADDR_VAR 0 4
24918: PUSH
24919: LD_VAR 0 12
24923: PUSH
24924: LD_INT 1
24926: PPUSH
24927: LD_VAR 0 12
24931: PPUSH
24932: CALL_OW 12
24936: ARRAY
24937: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24938: LD_VAR 0 2
24942: PPUSH
24943: LD_VAR 0 5
24947: PPUSH
24948: CALL 25306 0 2
24952: NOT
24953: IFFALSE 25012
// repeat weapon := _weapon [ 1 ] ;
24955: LD_ADDR_VAR 0 5
24959: PUSH
24960: LD_VAR 0 10
24964: PUSH
24965: LD_INT 1
24967: ARRAY
24968: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24969: LD_ADDR_VAR 0 10
24973: PUSH
24974: LD_VAR 0 10
24978: PPUSH
24979: LD_INT 1
24981: PPUSH
24982: CALL_OW 3
24986: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24987: LD_VAR 0 2
24991: PPUSH
24992: LD_VAR 0 5
24996: PPUSH
24997: CALL 25306 0 2
25001: PUSH
25002: LD_VAR 0 10
25006: PUSH
25007: EMPTY
25008: EQUAL
25009: OR
25010: IFFALSE 24955
// result := [ ] ;
25012: LD_ADDR_VAR 0 6
25016: PUSH
25017: EMPTY
25018: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25019: LD_VAR 0 1
25023: PPUSH
25024: LD_VAR 0 2
25028: PPUSH
25029: LD_VAR 0 3
25033: PPUSH
25034: LD_VAR 0 4
25038: PPUSH
25039: LD_VAR 0 5
25043: PPUSH
25044: CALL_OW 448
25048: IFFALSE 25081
// result := [ chassis , engine , control , weapon ] ;
25050: LD_ADDR_VAR 0 6
25054: PUSH
25055: LD_VAR 0 2
25059: PUSH
25060: LD_VAR 0 3
25064: PUSH
25065: LD_VAR 0 4
25069: PUSH
25070: LD_VAR 0 5
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: ST_TO_ADDR
// end ;
25081: LD_VAR 0 6
25085: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25086: LD_INT 0
25088: PPUSH
// if not chassis or not engine then
25089: LD_VAR 0 1
25093: NOT
25094: PUSH
25095: LD_VAR 0 2
25099: NOT
25100: OR
25101: IFFALSE 25105
// exit ;
25103: GO 25301
// case engine of engine_solar :
25105: LD_VAR 0 2
25109: PUSH
25110: LD_INT 2
25112: DOUBLE
25113: EQUAL
25114: IFTRUE 25118
25116: GO 25156
25118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25119: LD_ADDR_VAR 0 3
25123: PUSH
25124: LD_INT 11
25126: PUSH
25127: LD_INT 12
25129: PUSH
25130: LD_INT 13
25132: PUSH
25133: LD_INT 14
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: LD_INT 3
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: ST_TO_ADDR
25154: GO 25285
25156: LD_INT 1
25158: DOUBLE
25159: EQUAL
25160: IFTRUE 25164
25162: GO 25226
25164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25165: LD_ADDR_VAR 0 3
25169: PUSH
25170: LD_INT 11
25172: PUSH
25173: LD_INT 12
25175: PUSH
25176: LD_INT 13
25178: PUSH
25179: LD_INT 14
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 4
25193: PUSH
25194: LD_INT 5
25196: PUSH
25197: LD_INT 21
25199: PUSH
25200: LD_INT 23
25202: PUSH
25203: LD_INT 22
25205: PUSH
25206: LD_INT 24
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
25224: GO 25285
25226: LD_INT 3
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25284
25234: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_INT 13
25242: PUSH
25243: LD_INT 14
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: LD_INT 3
25251: PUSH
25252: LD_INT 4
25254: PUSH
25255: LD_INT 5
25257: PUSH
25258: LD_INT 21
25260: PUSH
25261: LD_INT 22
25263: PUSH
25264: LD_INT 23
25266: PUSH
25267: LD_INT 24
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: ST_TO_ADDR
25282: GO 25285
25284: POP
// result := ( chassis in result ) ;
25285: LD_ADDR_VAR 0 3
25289: PUSH
25290: LD_VAR 0 1
25294: PUSH
25295: LD_VAR 0 3
25299: IN
25300: ST_TO_ADDR
// end ;
25301: LD_VAR 0 3
25305: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25306: LD_INT 0
25308: PPUSH
// if not chassis or not weapon then
25309: LD_VAR 0 1
25313: NOT
25314: PUSH
25315: LD_VAR 0 2
25319: NOT
25320: OR
25321: IFFALSE 25325
// exit ;
25323: GO 26351
// case weapon of us_machine_gun :
25325: LD_VAR 0 2
25329: PUSH
25330: LD_INT 2
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25368
25338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25339: LD_ADDR_VAR 0 3
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 4
25355: PUSH
25356: LD_INT 5
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: ST_TO_ADDR
25366: GO 26335
25368: LD_INT 3
25370: DOUBLE
25371: EQUAL
25372: IFTRUE 25376
25374: GO 25406
25376: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: LD_INT 3
25390: PUSH
25391: LD_INT 4
25393: PUSH
25394: LD_INT 5
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: ST_TO_ADDR
25404: GO 26335
25406: LD_INT 11
25408: DOUBLE
25409: EQUAL
25410: IFTRUE 25414
25412: GO 25444
25414: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 3
25428: PUSH
25429: LD_INT 4
25431: PUSH
25432: LD_INT 5
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
25442: GO 26335
25444: LD_INT 4
25446: DOUBLE
25447: EQUAL
25448: IFTRUE 25452
25450: GO 25478
25452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25453: LD_ADDR_VAR 0 3
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: LD_INT 3
25463: PUSH
25464: LD_INT 4
25466: PUSH
25467: LD_INT 5
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: ST_TO_ADDR
25476: GO 26335
25478: LD_INT 5
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25512
25486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 4
25500: PUSH
25501: LD_INT 5
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 26335
25512: LD_INT 9
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25546
25520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: LD_INT 3
25531: PUSH
25532: LD_INT 4
25534: PUSH
25535: LD_INT 5
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: ST_TO_ADDR
25544: GO 26335
25546: LD_INT 7
25548: DOUBLE
25549: EQUAL
25550: IFTRUE 25554
25552: GO 25580
25554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25555: LD_ADDR_VAR 0 3
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: LD_INT 3
25565: PUSH
25566: LD_INT 4
25568: PUSH
25569: LD_INT 5
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 26335
25580: LD_INT 12
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25614
25588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: LD_INT 3
25599: PUSH
25600: LD_INT 4
25602: PUSH
25603: LD_INT 5
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: ST_TO_ADDR
25612: GO 26335
25614: LD_INT 13
25616: DOUBLE
25617: EQUAL
25618: IFTRUE 25622
25620: GO 25648
25622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25623: LD_ADDR_VAR 0 3
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: LD_INT 4
25636: PUSH
25637: LD_INT 5
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: ST_TO_ADDR
25646: GO 26335
25648: LD_INT 14
25650: DOUBLE
25651: EQUAL
25652: IFTRUE 25656
25654: GO 25674
25656: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 4
25664: PUSH
25665: LD_INT 5
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: ST_TO_ADDR
25672: GO 26335
25674: LD_INT 6
25676: DOUBLE
25677: EQUAL
25678: IFTRUE 25682
25680: GO 25700
25682: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_INT 4
25690: PUSH
25691: LD_INT 5
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: ST_TO_ADDR
25698: GO 26335
25700: LD_INT 10
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25708
25706: GO 25726
25708: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25709: LD_ADDR_VAR 0 3
25713: PUSH
25714: LD_INT 4
25716: PUSH
25717: LD_INT 5
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: ST_TO_ADDR
25724: GO 26335
25726: LD_INT 22
25728: DOUBLE
25729: EQUAL
25730: IFTRUE 25734
25732: GO 25760
25734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25735: LD_ADDR_VAR 0 3
25739: PUSH
25740: LD_INT 11
25742: PUSH
25743: LD_INT 12
25745: PUSH
25746: LD_INT 13
25748: PUSH
25749: LD_INT 14
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: ST_TO_ADDR
25758: GO 26335
25760: LD_INT 23
25762: DOUBLE
25763: EQUAL
25764: IFTRUE 25768
25766: GO 25794
25768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25769: LD_ADDR_VAR 0 3
25773: PUSH
25774: LD_INT 11
25776: PUSH
25777: LD_INT 12
25779: PUSH
25780: LD_INT 13
25782: PUSH
25783: LD_INT 14
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
25792: GO 26335
25794: LD_INT 24
25796: DOUBLE
25797: EQUAL
25798: IFTRUE 25802
25800: GO 25828
25802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25803: LD_ADDR_VAR 0 3
25807: PUSH
25808: LD_INT 11
25810: PUSH
25811: LD_INT 12
25813: PUSH
25814: LD_INT 13
25816: PUSH
25817: LD_INT 14
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: ST_TO_ADDR
25826: GO 26335
25828: LD_INT 30
25830: DOUBLE
25831: EQUAL
25832: IFTRUE 25836
25834: GO 25862
25836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25837: LD_ADDR_VAR 0 3
25841: PUSH
25842: LD_INT 11
25844: PUSH
25845: LD_INT 12
25847: PUSH
25848: LD_INT 13
25850: PUSH
25851: LD_INT 14
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: ST_TO_ADDR
25860: GO 26335
25862: LD_INT 25
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25888
25870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: LD_INT 13
25878: PUSH
25879: LD_INT 14
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 26335
25888: LD_INT 27
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25914
25896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 13
25904: PUSH
25905: LD_INT 14
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: ST_TO_ADDR
25912: GO 26335
25914: LD_INT 28
25916: DOUBLE
25917: EQUAL
25918: IFTRUE 25922
25920: GO 25940
25922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_INT 13
25930: PUSH
25931: LD_INT 14
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: ST_TO_ADDR
25938: GO 26335
25940: LD_INT 29
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25966
25948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_INT 13
25956: PUSH
25957: LD_INT 14
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: ST_TO_ADDR
25964: GO 26335
25966: LD_INT 31
25968: DOUBLE
25969: EQUAL
25970: IFTRUE 25974
25972: GO 25992
25974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_INT 13
25982: PUSH
25983: LD_INT 14
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: ST_TO_ADDR
25990: GO 26335
25992: LD_INT 26
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26018
26000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 13
26008: PUSH
26009: LD_INT 14
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: ST_TO_ADDR
26016: GO 26335
26018: LD_INT 42
26020: DOUBLE
26021: EQUAL
26022: IFTRUE 26026
26024: GO 26052
26026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 22
26037: PUSH
26038: LD_INT 23
26040: PUSH
26041: LD_INT 24
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 26335
26052: LD_INT 43
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26086
26060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 22
26071: PUSH
26072: LD_INT 23
26074: PUSH
26075: LD_INT 24
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
26084: GO 26335
26086: LD_INT 44
26088: DOUBLE
26089: EQUAL
26090: IFTRUE 26094
26092: GO 26120
26094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_INT 21
26102: PUSH
26103: LD_INT 22
26105: PUSH
26106: LD_INT 23
26108: PUSH
26109: LD_INT 24
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: ST_TO_ADDR
26118: GO 26335
26120: LD_INT 45
26122: DOUBLE
26123: EQUAL
26124: IFTRUE 26128
26126: GO 26154
26128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26129: LD_ADDR_VAR 0 3
26133: PUSH
26134: LD_INT 21
26136: PUSH
26137: LD_INT 22
26139: PUSH
26140: LD_INT 23
26142: PUSH
26143: LD_INT 24
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: ST_TO_ADDR
26152: GO 26335
26154: LD_INT 49
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26188
26162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_INT 21
26170: PUSH
26171: LD_INT 22
26173: PUSH
26174: LD_INT 23
26176: PUSH
26177: LD_INT 24
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: ST_TO_ADDR
26186: GO 26335
26188: LD_INT 51
26190: DOUBLE
26191: EQUAL
26192: IFTRUE 26196
26194: GO 26222
26196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26197: LD_ADDR_VAR 0 3
26201: PUSH
26202: LD_INT 21
26204: PUSH
26205: LD_INT 22
26207: PUSH
26208: LD_INT 23
26210: PUSH
26211: LD_INT 24
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: ST_TO_ADDR
26220: GO 26335
26222: LD_INT 52
26224: DOUBLE
26225: EQUAL
26226: IFTRUE 26230
26228: GO 26256
26230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26231: LD_ADDR_VAR 0 3
26235: PUSH
26236: LD_INT 21
26238: PUSH
26239: LD_INT 22
26241: PUSH
26242: LD_INT 23
26244: PUSH
26245: LD_INT 24
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: ST_TO_ADDR
26254: GO 26335
26256: LD_INT 53
26258: DOUBLE
26259: EQUAL
26260: IFTRUE 26264
26262: GO 26282
26264: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26265: LD_ADDR_VAR 0 3
26269: PUSH
26270: LD_INT 23
26272: PUSH
26273: LD_INT 24
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: ST_TO_ADDR
26280: GO 26335
26282: LD_INT 46
26284: DOUBLE
26285: EQUAL
26286: IFTRUE 26290
26288: GO 26308
26290: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_INT 23
26298: PUSH
26299: LD_INT 24
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: ST_TO_ADDR
26306: GO 26335
26308: LD_INT 47
26310: DOUBLE
26311: EQUAL
26312: IFTRUE 26316
26314: GO 26334
26316: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26317: LD_ADDR_VAR 0 3
26321: PUSH
26322: LD_INT 23
26324: PUSH
26325: LD_INT 24
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: ST_TO_ADDR
26332: GO 26335
26334: POP
// result := ( chassis in result ) ;
26335: LD_ADDR_VAR 0 3
26339: PUSH
26340: LD_VAR 0 1
26344: PUSH
26345: LD_VAR 0 3
26349: IN
26350: ST_TO_ADDR
// end ;
26351: LD_VAR 0 3
26355: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26356: LD_INT 0
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
// result := array ;
26365: LD_ADDR_VAR 0 5
26369: PUSH
26370: LD_VAR 0 1
26374: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26375: LD_VAR 0 1
26379: NOT
26380: PUSH
26381: LD_VAR 0 2
26385: NOT
26386: OR
26387: PUSH
26388: LD_VAR 0 3
26392: NOT
26393: OR
26394: PUSH
26395: LD_VAR 0 2
26399: PUSH
26400: LD_VAR 0 1
26404: GREATER
26405: OR
26406: PUSH
26407: LD_VAR 0 3
26411: PUSH
26412: LD_VAR 0 1
26416: GREATER
26417: OR
26418: IFFALSE 26422
// exit ;
26420: GO 26718
// if direction then
26422: LD_VAR 0 4
26426: IFFALSE 26490
// begin d := 1 ;
26428: LD_ADDR_VAR 0 9
26432: PUSH
26433: LD_INT 1
26435: ST_TO_ADDR
// if i_from > i_to then
26436: LD_VAR 0 2
26440: PUSH
26441: LD_VAR 0 3
26445: GREATER
26446: IFFALSE 26472
// length := ( array - i_from ) + i_to else
26448: LD_ADDR_VAR 0 11
26452: PUSH
26453: LD_VAR 0 1
26457: PUSH
26458: LD_VAR 0 2
26462: MINUS
26463: PUSH
26464: LD_VAR 0 3
26468: PLUS
26469: ST_TO_ADDR
26470: GO 26488
// length := i_to - i_from ;
26472: LD_ADDR_VAR 0 11
26476: PUSH
26477: LD_VAR 0 3
26481: PUSH
26482: LD_VAR 0 2
26486: MINUS
26487: ST_TO_ADDR
// end else
26488: GO 26551
// begin d := - 1 ;
26490: LD_ADDR_VAR 0 9
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: ST_TO_ADDR
// if i_from > i_to then
26499: LD_VAR 0 2
26503: PUSH
26504: LD_VAR 0 3
26508: GREATER
26509: IFFALSE 26529
// length := i_from - i_to else
26511: LD_ADDR_VAR 0 11
26515: PUSH
26516: LD_VAR 0 2
26520: PUSH
26521: LD_VAR 0 3
26525: MINUS
26526: ST_TO_ADDR
26527: GO 26551
// length := ( array - i_to ) + i_from ;
26529: LD_ADDR_VAR 0 11
26533: PUSH
26534: LD_VAR 0 1
26538: PUSH
26539: LD_VAR 0 3
26543: MINUS
26544: PUSH
26545: LD_VAR 0 2
26549: PLUS
26550: ST_TO_ADDR
// end ; if not length then
26551: LD_VAR 0 11
26555: NOT
26556: IFFALSE 26560
// exit ;
26558: GO 26718
// tmp := array ;
26560: LD_ADDR_VAR 0 10
26564: PUSH
26565: LD_VAR 0 1
26569: ST_TO_ADDR
// for i = 1 to length do
26570: LD_ADDR_VAR 0 6
26574: PUSH
26575: DOUBLE
26576: LD_INT 1
26578: DEC
26579: ST_TO_ADDR
26580: LD_VAR 0 11
26584: PUSH
26585: FOR_TO
26586: IFFALSE 26706
// begin for j = 1 to array do
26588: LD_ADDR_VAR 0 7
26592: PUSH
26593: DOUBLE
26594: LD_INT 1
26596: DEC
26597: ST_TO_ADDR
26598: LD_VAR 0 1
26602: PUSH
26603: FOR_TO
26604: IFFALSE 26692
// begin k := j + d ;
26606: LD_ADDR_VAR 0 8
26610: PUSH
26611: LD_VAR 0 7
26615: PUSH
26616: LD_VAR 0 9
26620: PLUS
26621: ST_TO_ADDR
// if k > array then
26622: LD_VAR 0 8
26626: PUSH
26627: LD_VAR 0 1
26631: GREATER
26632: IFFALSE 26642
// k := 1 ;
26634: LD_ADDR_VAR 0 8
26638: PUSH
26639: LD_INT 1
26641: ST_TO_ADDR
// if not k then
26642: LD_VAR 0 8
26646: NOT
26647: IFFALSE 26659
// k := array ;
26649: LD_ADDR_VAR 0 8
26653: PUSH
26654: LD_VAR 0 1
26658: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26659: LD_ADDR_VAR 0 10
26663: PUSH
26664: LD_VAR 0 10
26668: PPUSH
26669: LD_VAR 0 8
26673: PPUSH
26674: LD_VAR 0 1
26678: PUSH
26679: LD_VAR 0 7
26683: ARRAY
26684: PPUSH
26685: CALL_OW 1
26689: ST_TO_ADDR
// end ;
26690: GO 26603
26692: POP
26693: POP
// array := tmp ;
26694: LD_ADDR_VAR 0 1
26698: PUSH
26699: LD_VAR 0 10
26703: ST_TO_ADDR
// end ;
26704: GO 26585
26706: POP
26707: POP
// result := array ;
26708: LD_ADDR_VAR 0 5
26712: PUSH
26713: LD_VAR 0 1
26717: ST_TO_ADDR
// end ;
26718: LD_VAR 0 5
26722: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
// result := 0 ;
26727: LD_ADDR_VAR 0 3
26731: PUSH
26732: LD_INT 0
26734: ST_TO_ADDR
// if not array or not value in array then
26735: LD_VAR 0 1
26739: NOT
26740: PUSH
26741: LD_VAR 0 2
26745: PUSH
26746: LD_VAR 0 1
26750: IN
26751: NOT
26752: OR
26753: IFFALSE 26757
// exit ;
26755: GO 26811
// for i = 1 to array do
26757: LD_ADDR_VAR 0 4
26761: PUSH
26762: DOUBLE
26763: LD_INT 1
26765: DEC
26766: ST_TO_ADDR
26767: LD_VAR 0 1
26771: PUSH
26772: FOR_TO
26773: IFFALSE 26809
// if value = array [ i ] then
26775: LD_VAR 0 2
26779: PUSH
26780: LD_VAR 0 1
26784: PUSH
26785: LD_VAR 0 4
26789: ARRAY
26790: EQUAL
26791: IFFALSE 26807
// begin result := i ;
26793: LD_ADDR_VAR 0 3
26797: PUSH
26798: LD_VAR 0 4
26802: ST_TO_ADDR
// exit ;
26803: POP
26804: POP
26805: GO 26811
// end ;
26807: GO 26772
26809: POP
26810: POP
// end ;
26811: LD_VAR 0 3
26815: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26816: LD_INT 0
26818: PPUSH
// vc_chassis := chassis ;
26819: LD_ADDR_OWVAR 37
26823: PUSH
26824: LD_VAR 0 1
26828: ST_TO_ADDR
// vc_engine := engine ;
26829: LD_ADDR_OWVAR 39
26833: PUSH
26834: LD_VAR 0 2
26838: ST_TO_ADDR
// vc_control := control ;
26839: LD_ADDR_OWVAR 38
26843: PUSH
26844: LD_VAR 0 3
26848: ST_TO_ADDR
// vc_weapon := weapon ;
26849: LD_ADDR_OWVAR 40
26853: PUSH
26854: LD_VAR 0 4
26858: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26859: LD_ADDR_OWVAR 41
26863: PUSH
26864: LD_VAR 0 5
26868: ST_TO_ADDR
// end ;
26869: LD_VAR 0 6
26873: RET
// export function WantPlant ( unit ) ; var task ; begin
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
// result := false ;
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_INT 0
26885: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26886: LD_ADDR_VAR 0 3
26890: PUSH
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 437
26900: ST_TO_ADDR
// if task then
26901: LD_VAR 0 3
26905: IFFALSE 26933
// if task [ 1 ] [ 1 ] = p then
26907: LD_VAR 0 3
26911: PUSH
26912: LD_INT 1
26914: ARRAY
26915: PUSH
26916: LD_INT 1
26918: ARRAY
26919: PUSH
26920: LD_STRING p
26922: EQUAL
26923: IFFALSE 26933
// result := true ;
26925: LD_ADDR_VAR 0 2
26929: PUSH
26930: LD_INT 1
26932: ST_TO_ADDR
// end ;
26933: LD_VAR 0 2
26937: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26938: LD_INT 0
26940: PPUSH
26941: PPUSH
26942: PPUSH
26943: PPUSH
// if pos < 1 then
26944: LD_VAR 0 2
26948: PUSH
26949: LD_INT 1
26951: LESS
26952: IFFALSE 26956
// exit ;
26954: GO 27259
// if pos = 1 then
26956: LD_VAR 0 2
26960: PUSH
26961: LD_INT 1
26963: EQUAL
26964: IFFALSE 26997
// result := Replace ( arr , pos [ 1 ] , value ) else
26966: LD_ADDR_VAR 0 4
26970: PUSH
26971: LD_VAR 0 1
26975: PPUSH
26976: LD_VAR 0 2
26980: PUSH
26981: LD_INT 1
26983: ARRAY
26984: PPUSH
26985: LD_VAR 0 3
26989: PPUSH
26990: CALL_OW 1
26994: ST_TO_ADDR
26995: GO 27259
// begin tmp := arr ;
26997: LD_ADDR_VAR 0 6
27001: PUSH
27002: LD_VAR 0 1
27006: ST_TO_ADDR
// s_arr := [ tmp ] ;
27007: LD_ADDR_VAR 0 7
27011: PUSH
27012: LD_VAR 0 6
27016: PUSH
27017: EMPTY
27018: LIST
27019: ST_TO_ADDR
// for i = 1 to pos - 1 do
27020: LD_ADDR_VAR 0 5
27024: PUSH
27025: DOUBLE
27026: LD_INT 1
27028: DEC
27029: ST_TO_ADDR
27030: LD_VAR 0 2
27034: PUSH
27035: LD_INT 1
27037: MINUS
27038: PUSH
27039: FOR_TO
27040: IFFALSE 27085
// begin tmp := tmp [ pos [ i ] ] ;
27042: LD_ADDR_VAR 0 6
27046: PUSH
27047: LD_VAR 0 6
27051: PUSH
27052: LD_VAR 0 2
27056: PUSH
27057: LD_VAR 0 5
27061: ARRAY
27062: ARRAY
27063: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27064: LD_ADDR_VAR 0 7
27068: PUSH
27069: LD_VAR 0 7
27073: PUSH
27074: LD_VAR 0 6
27078: PUSH
27079: EMPTY
27080: LIST
27081: ADD
27082: ST_TO_ADDR
// end ;
27083: GO 27039
27085: POP
27086: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27087: LD_ADDR_VAR 0 6
27091: PUSH
27092: LD_VAR 0 6
27096: PPUSH
27097: LD_VAR 0 2
27101: PUSH
27102: LD_VAR 0 2
27106: ARRAY
27107: PPUSH
27108: LD_VAR 0 3
27112: PPUSH
27113: CALL_OW 1
27117: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27118: LD_ADDR_VAR 0 7
27122: PUSH
27123: LD_VAR 0 7
27127: PPUSH
27128: LD_VAR 0 7
27132: PPUSH
27133: LD_VAR 0 6
27137: PPUSH
27138: CALL_OW 1
27142: ST_TO_ADDR
// for i = s_arr downto 2 do
27143: LD_ADDR_VAR 0 5
27147: PUSH
27148: DOUBLE
27149: LD_VAR 0 7
27153: INC
27154: ST_TO_ADDR
27155: LD_INT 2
27157: PUSH
27158: FOR_DOWNTO
27159: IFFALSE 27243
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27161: LD_ADDR_VAR 0 6
27165: PUSH
27166: LD_VAR 0 7
27170: PUSH
27171: LD_VAR 0 5
27175: PUSH
27176: LD_INT 1
27178: MINUS
27179: ARRAY
27180: PPUSH
27181: LD_VAR 0 2
27185: PUSH
27186: LD_VAR 0 5
27190: PUSH
27191: LD_INT 1
27193: MINUS
27194: ARRAY
27195: PPUSH
27196: LD_VAR 0 7
27200: PUSH
27201: LD_VAR 0 5
27205: ARRAY
27206: PPUSH
27207: CALL_OW 1
27211: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27212: LD_ADDR_VAR 0 7
27216: PUSH
27217: LD_VAR 0 7
27221: PPUSH
27222: LD_VAR 0 5
27226: PUSH
27227: LD_INT 1
27229: MINUS
27230: PPUSH
27231: LD_VAR 0 6
27235: PPUSH
27236: CALL_OW 1
27240: ST_TO_ADDR
// end ;
27241: GO 27158
27243: POP
27244: POP
// result := s_arr [ 1 ] ;
27245: LD_ADDR_VAR 0 4
27249: PUSH
27250: LD_VAR 0 7
27254: PUSH
27255: LD_INT 1
27257: ARRAY
27258: ST_TO_ADDR
// end ; end ;
27259: LD_VAR 0 4
27263: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27264: LD_INT 0
27266: PPUSH
27267: PPUSH
// if not list then
27268: LD_VAR 0 1
27272: NOT
27273: IFFALSE 27277
// exit ;
27275: GO 27368
// i := list [ pos1 ] ;
27277: LD_ADDR_VAR 0 5
27281: PUSH
27282: LD_VAR 0 1
27286: PUSH
27287: LD_VAR 0 2
27291: ARRAY
27292: ST_TO_ADDR
// if not i then
27293: LD_VAR 0 5
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27368
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27302: LD_ADDR_VAR 0 1
27306: PUSH
27307: LD_VAR 0 1
27311: PPUSH
27312: LD_VAR 0 2
27316: PPUSH
27317: LD_VAR 0 1
27321: PUSH
27322: LD_VAR 0 3
27326: ARRAY
27327: PPUSH
27328: CALL_OW 1
27332: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27333: LD_ADDR_VAR 0 1
27337: PUSH
27338: LD_VAR 0 1
27342: PPUSH
27343: LD_VAR 0 3
27347: PPUSH
27348: LD_VAR 0 5
27352: PPUSH
27353: CALL_OW 1
27357: ST_TO_ADDR
// result := list ;
27358: LD_ADDR_VAR 0 4
27362: PUSH
27363: LD_VAR 0 1
27367: ST_TO_ADDR
// end ;
27368: LD_VAR 0 4
27372: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27373: LD_INT 0
27375: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27376: LD_ADDR_VAR 0 5
27380: PUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL_OW 250
27390: PPUSH
27391: LD_VAR 0 1
27395: PPUSH
27396: CALL_OW 251
27400: PPUSH
27401: LD_VAR 0 2
27405: PPUSH
27406: LD_VAR 0 3
27410: PPUSH
27411: LD_VAR 0 4
27415: PPUSH
27416: CALL 27426 0 5
27420: ST_TO_ADDR
// end ;
27421: LD_VAR 0 5
27425: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27426: LD_INT 0
27428: PPUSH
27429: PPUSH
27430: PPUSH
27431: PPUSH
// if not list then
27432: LD_VAR 0 3
27436: NOT
27437: IFFALSE 27441
// exit ;
27439: GO 27829
// result := [ ] ;
27441: LD_ADDR_VAR 0 6
27445: PUSH
27446: EMPTY
27447: ST_TO_ADDR
// for i in list do
27448: LD_ADDR_VAR 0 7
27452: PUSH
27453: LD_VAR 0 3
27457: PUSH
27458: FOR_IN
27459: IFFALSE 27661
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27461: LD_ADDR_VAR 0 9
27465: PUSH
27466: LD_VAR 0 7
27470: PPUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: LD_VAR 0 2
27480: PPUSH
27481: CALL_OW 297
27485: ST_TO_ADDR
// if not result then
27486: LD_VAR 0 6
27490: NOT
27491: IFFALSE 27517
// result := [ [ i , tmp ] ] else
27493: LD_ADDR_VAR 0 6
27497: PUSH
27498: LD_VAR 0 7
27502: PUSH
27503: LD_VAR 0 9
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: ST_TO_ADDR
27515: GO 27659
// begin if result [ result ] [ 2 ] < tmp then
27517: LD_VAR 0 6
27521: PUSH
27522: LD_VAR 0 6
27526: ARRAY
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PUSH
27532: LD_VAR 0 9
27536: LESS
27537: IFFALSE 27579
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27539: LD_ADDR_VAR 0 6
27543: PUSH
27544: LD_VAR 0 6
27548: PPUSH
27549: LD_VAR 0 6
27553: PUSH
27554: LD_INT 1
27556: PLUS
27557: PPUSH
27558: LD_VAR 0 7
27562: PUSH
27563: LD_VAR 0 9
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PPUSH
27572: CALL_OW 2
27576: ST_TO_ADDR
27577: GO 27659
// for j = 1 to result do
27579: LD_ADDR_VAR 0 8
27583: PUSH
27584: DOUBLE
27585: LD_INT 1
27587: DEC
27588: ST_TO_ADDR
27589: LD_VAR 0 6
27593: PUSH
27594: FOR_TO
27595: IFFALSE 27657
// begin if tmp < result [ j ] [ 2 ] then
27597: LD_VAR 0 9
27601: PUSH
27602: LD_VAR 0 6
27606: PUSH
27607: LD_VAR 0 8
27611: ARRAY
27612: PUSH
27613: LD_INT 2
27615: ARRAY
27616: LESS
27617: IFFALSE 27655
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27619: LD_ADDR_VAR 0 6
27623: PUSH
27624: LD_VAR 0 6
27628: PPUSH
27629: LD_VAR 0 8
27633: PPUSH
27634: LD_VAR 0 7
27638: PUSH
27639: LD_VAR 0 9
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PPUSH
27648: CALL_OW 2
27652: ST_TO_ADDR
// break ;
27653: GO 27657
// end ; end ;
27655: GO 27594
27657: POP
27658: POP
// end ; end ;
27659: GO 27458
27661: POP
27662: POP
// if result and not asc then
27663: LD_VAR 0 6
27667: PUSH
27668: LD_VAR 0 4
27672: NOT
27673: AND
27674: IFFALSE 27749
// begin tmp := result ;
27676: LD_ADDR_VAR 0 9
27680: PUSH
27681: LD_VAR 0 6
27685: ST_TO_ADDR
// for i = tmp downto 1 do
27686: LD_ADDR_VAR 0 7
27690: PUSH
27691: DOUBLE
27692: LD_VAR 0 9
27696: INC
27697: ST_TO_ADDR
27698: LD_INT 1
27700: PUSH
27701: FOR_DOWNTO
27702: IFFALSE 27747
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27704: LD_ADDR_VAR 0 6
27708: PUSH
27709: LD_VAR 0 6
27713: PPUSH
27714: LD_VAR 0 9
27718: PUSH
27719: LD_VAR 0 7
27723: MINUS
27724: PUSH
27725: LD_INT 1
27727: PLUS
27728: PPUSH
27729: LD_VAR 0 9
27733: PUSH
27734: LD_VAR 0 7
27738: ARRAY
27739: PPUSH
27740: CALL_OW 1
27744: ST_TO_ADDR
27745: GO 27701
27747: POP
27748: POP
// end ; tmp := [ ] ;
27749: LD_ADDR_VAR 0 9
27753: PUSH
27754: EMPTY
27755: ST_TO_ADDR
// if mode then
27756: LD_VAR 0 5
27760: IFFALSE 27829
// begin for i = 1 to result do
27762: LD_ADDR_VAR 0 7
27766: PUSH
27767: DOUBLE
27768: LD_INT 1
27770: DEC
27771: ST_TO_ADDR
27772: LD_VAR 0 6
27776: PUSH
27777: FOR_TO
27778: IFFALSE 27817
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27780: LD_ADDR_VAR 0 9
27784: PUSH
27785: LD_VAR 0 9
27789: PPUSH
27790: LD_VAR 0 7
27794: PPUSH
27795: LD_VAR 0 6
27799: PUSH
27800: LD_VAR 0 7
27804: ARRAY
27805: PUSH
27806: LD_INT 1
27808: ARRAY
27809: PPUSH
27810: CALL_OW 1
27814: ST_TO_ADDR
27815: GO 27777
27817: POP
27818: POP
// result := tmp ;
27819: LD_ADDR_VAR 0 6
27823: PUSH
27824: LD_VAR 0 9
27828: ST_TO_ADDR
// end ; end ;
27829: LD_VAR 0 6
27833: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27834: LD_INT 0
27836: PPUSH
27837: PPUSH
27838: PPUSH
27839: PPUSH
27840: PPUSH
27841: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27842: LD_ADDR_VAR 0 5
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: ST_TO_ADDR
// if not x or not y then
27864: LD_VAR 0 2
27868: NOT
27869: PUSH
27870: LD_VAR 0 3
27874: NOT
27875: OR
27876: IFFALSE 27880
// exit ;
27878: GO 29526
// if not range then
27880: LD_VAR 0 4
27884: NOT
27885: IFFALSE 27895
// range := 10 ;
27887: LD_ADDR_VAR 0 4
27891: PUSH
27892: LD_INT 10
27894: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27895: LD_ADDR_VAR 0 8
27899: PUSH
27900: LD_INT 81
27902: PUSH
27903: LD_VAR 0 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 92
27914: PUSH
27915: LD_VAR 0 2
27919: PUSH
27920: LD_VAR 0 3
27924: PUSH
27925: LD_VAR 0 4
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: LD_INT 21
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: PPUSH
27958: CALL_OW 69
27962: ST_TO_ADDR
// if not tmp then
27963: LD_VAR 0 8
27967: NOT
27968: IFFALSE 27972
// exit ;
27970: GO 29526
// for i in tmp do
27972: LD_ADDR_VAR 0 6
27976: PUSH
27977: LD_VAR 0 8
27981: PUSH
27982: FOR_IN
27983: IFFALSE 29501
// begin points := [ 0 , 0 , 0 ] ;
27985: LD_ADDR_VAR 0 9
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// bpoints := 1 ;
28004: LD_ADDR_VAR 0 10
28008: PUSH
28009: LD_INT 1
28011: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28012: LD_VAR 0 6
28016: PPUSH
28017: CALL_OW 247
28021: PUSH
28022: LD_INT 1
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28608
28030: POP
// begin if GetClass ( i ) = 1 then
28031: LD_VAR 0 6
28035: PPUSH
28036: CALL_OW 257
28040: PUSH
28041: LD_INT 1
28043: EQUAL
28044: IFFALSE 28065
// points := [ 10 , 5 , 3 ] ;
28046: LD_ADDR_VAR 0 9
28050: PUSH
28051: LD_INT 10
28053: PUSH
28054: LD_INT 5
28056: PUSH
28057: LD_INT 3
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 257
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: LD_INT 4
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: IN
28089: IFFALSE 28110
// points := [ 3 , 2 , 1 ] ;
28091: LD_ADDR_VAR 0 9
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28110: LD_VAR 0 6
28114: PPUSH
28115: CALL_OW 257
28119: PUSH
28120: LD_INT 5
28122: EQUAL
28123: IFFALSE 28144
// points := [ 130 , 5 , 2 ] ;
28125: LD_ADDR_VAR 0 9
28129: PUSH
28130: LD_INT 130
28132: PUSH
28133: LD_INT 5
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28144: LD_VAR 0 6
28148: PPUSH
28149: CALL_OW 257
28153: PUSH
28154: LD_INT 8
28156: EQUAL
28157: IFFALSE 28178
// points := [ 35 , 35 , 30 ] ;
28159: LD_ADDR_VAR 0 9
28163: PUSH
28164: LD_INT 35
28166: PUSH
28167: LD_INT 35
28169: PUSH
28170: LD_INT 30
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28178: LD_VAR 0 6
28182: PPUSH
28183: CALL_OW 257
28187: PUSH
28188: LD_INT 9
28190: EQUAL
28191: IFFALSE 28212
// points := [ 20 , 55 , 40 ] ;
28193: LD_ADDR_VAR 0 9
28197: PUSH
28198: LD_INT 20
28200: PUSH
28201: LD_INT 55
28203: PUSH
28204: LD_INT 40
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: LIST
28211: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28212: LD_VAR 0 6
28216: PPUSH
28217: CALL_OW 257
28221: PUSH
28222: LD_INT 12
28224: PUSH
28225: LD_INT 16
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: IN
28232: IFFALSE 28253
// points := [ 5 , 3 , 2 ] ;
28234: LD_ADDR_VAR 0 9
28238: PUSH
28239: LD_INT 5
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: LIST
28252: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28253: LD_VAR 0 6
28257: PPUSH
28258: CALL_OW 257
28262: PUSH
28263: LD_INT 17
28265: EQUAL
28266: IFFALSE 28287
// points := [ 100 , 50 , 75 ] ;
28268: LD_ADDR_VAR 0 9
28272: PUSH
28273: LD_INT 100
28275: PUSH
28276: LD_INT 50
28278: PUSH
28279: LD_INT 75
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28287: LD_VAR 0 6
28291: PPUSH
28292: CALL_OW 257
28296: PUSH
28297: LD_INT 15
28299: EQUAL
28300: IFFALSE 28321
// points := [ 10 , 5 , 3 ] ;
28302: LD_ADDR_VAR 0 9
28306: PUSH
28307: LD_INT 10
28309: PUSH
28310: LD_INT 5
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28321: LD_VAR 0 6
28325: PPUSH
28326: CALL_OW 257
28330: PUSH
28331: LD_INT 14
28333: EQUAL
28334: IFFALSE 28355
// points := [ 10 , 0 , 0 ] ;
28336: LD_ADDR_VAR 0 9
28340: PUSH
28341: LD_INT 10
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28355: LD_VAR 0 6
28359: PPUSH
28360: CALL_OW 257
28364: PUSH
28365: LD_INT 11
28367: EQUAL
28368: IFFALSE 28389
// points := [ 30 , 10 , 5 ] ;
28370: LD_ADDR_VAR 0 9
28374: PUSH
28375: LD_INT 30
28377: PUSH
28378: LD_INT 10
28380: PUSH
28381: LD_INT 5
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28389: LD_VAR 0 1
28393: PPUSH
28394: LD_INT 5
28396: PPUSH
28397: CALL_OW 321
28401: PUSH
28402: LD_INT 2
28404: EQUAL
28405: IFFALSE 28422
// bpoints := bpoints * 1.8 ;
28407: LD_ADDR_VAR 0 10
28411: PUSH
28412: LD_VAR 0 10
28416: PUSH
28417: LD_REAL  1.80000000000000E+0000
28420: MUL
28421: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28422: LD_VAR 0 6
28426: PPUSH
28427: CALL_OW 257
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 3
28440: PUSH
28441: LD_INT 4
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: IN
28450: PUSH
28451: LD_VAR 0 1
28455: PPUSH
28456: LD_INT 51
28458: PPUSH
28459: CALL_OW 321
28463: PUSH
28464: LD_INT 2
28466: EQUAL
28467: AND
28468: IFFALSE 28485
// bpoints := bpoints * 1.2 ;
28470: LD_ADDR_VAR 0 10
28474: PUSH
28475: LD_VAR 0 10
28479: PUSH
28480: LD_REAL  1.20000000000000E+0000
28483: MUL
28484: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28485: LD_VAR 0 6
28489: PPUSH
28490: CALL_OW 257
28494: PUSH
28495: LD_INT 5
28497: PUSH
28498: LD_INT 7
28500: PUSH
28501: LD_INT 9
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: IN
28509: PUSH
28510: LD_VAR 0 1
28514: PPUSH
28515: LD_INT 52
28517: PPUSH
28518: CALL_OW 321
28522: PUSH
28523: LD_INT 2
28525: EQUAL
28526: AND
28527: IFFALSE 28544
// bpoints := bpoints * 1.5 ;
28529: LD_ADDR_VAR 0 10
28533: PUSH
28534: LD_VAR 0 10
28538: PUSH
28539: LD_REAL  1.50000000000000E+0000
28542: MUL
28543: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_INT 66
28551: PPUSH
28552: CALL_OW 321
28556: PUSH
28557: LD_INT 2
28559: EQUAL
28560: IFFALSE 28577
// bpoints := bpoints * 1.1 ;
28562: LD_ADDR_VAR 0 10
28566: PUSH
28567: LD_VAR 0 10
28571: PUSH
28572: LD_REAL  1.10000000000000E+0000
28575: MUL
28576: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28577: LD_ADDR_VAR 0 10
28581: PUSH
28582: LD_VAR 0 10
28586: PUSH
28587: LD_VAR 0 6
28591: PPUSH
28592: LD_INT 1
28594: PPUSH
28595: CALL_OW 259
28599: PUSH
28600: LD_REAL  1.15000000000000E+0000
28603: MUL
28604: MUL
28605: ST_TO_ADDR
// end ; unit_vehicle :
28606: GO 29430
28608: LD_INT 2
28610: DOUBLE
28611: EQUAL
28612: IFTRUE 28616
28614: GO 29418
28616: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28617: LD_VAR 0 6
28621: PPUSH
28622: CALL_OW 264
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 42
28632: PUSH
28633: LD_INT 24
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: IN
28641: IFFALSE 28662
// points := [ 25 , 5 , 3 ] ;
28643: LD_ADDR_VAR 0 9
28647: PUSH
28648: LD_INT 25
28650: PUSH
28651: LD_INT 5
28653: PUSH
28654: LD_INT 3
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28662: LD_VAR 0 6
28666: PPUSH
28667: CALL_OW 264
28671: PUSH
28672: LD_INT 4
28674: PUSH
28675: LD_INT 43
28677: PUSH
28678: LD_INT 25
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: LIST
28685: IN
28686: IFFALSE 28707
// points := [ 40 , 15 , 5 ] ;
28688: LD_ADDR_VAR 0 9
28692: PUSH
28693: LD_INT 40
28695: PUSH
28696: LD_INT 15
28698: PUSH
28699: LD_INT 5
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28707: LD_VAR 0 6
28711: PPUSH
28712: CALL_OW 264
28716: PUSH
28717: LD_INT 3
28719: PUSH
28720: LD_INT 23
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: IN
28727: IFFALSE 28748
// points := [ 7 , 25 , 8 ] ;
28729: LD_ADDR_VAR 0 9
28733: PUSH
28734: LD_INT 7
28736: PUSH
28737: LD_INT 25
28739: PUSH
28740: LD_INT 8
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28748: LD_VAR 0 6
28752: PPUSH
28753: CALL_OW 264
28757: PUSH
28758: LD_INT 5
28760: PUSH
28761: LD_INT 27
28763: PUSH
28764: LD_INT 44
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: LIST
28771: IN
28772: IFFALSE 28793
// points := [ 14 , 50 , 16 ] ;
28774: LD_ADDR_VAR 0 9
28778: PUSH
28779: LD_INT 14
28781: PUSH
28782: LD_INT 50
28784: PUSH
28785: LD_INT 16
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28793: LD_VAR 0 6
28797: PPUSH
28798: CALL_OW 264
28802: PUSH
28803: LD_INT 6
28805: PUSH
28806: LD_INT 46
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: IN
28813: IFFALSE 28834
// points := [ 32 , 120 , 70 ] ;
28815: LD_ADDR_VAR 0 9
28819: PUSH
28820: LD_INT 32
28822: PUSH
28823: LD_INT 120
28825: PUSH
28826: LD_INT 70
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28834: LD_VAR 0 6
28838: PPUSH
28839: CALL_OW 264
28843: PUSH
28844: LD_INT 7
28846: PUSH
28847: LD_INT 28
28849: PUSH
28850: LD_INT 45
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: IN
28858: IFFALSE 28879
// points := [ 35 , 20 , 45 ] ;
28860: LD_ADDR_VAR 0 9
28864: PUSH
28865: LD_INT 35
28867: PUSH
28868: LD_INT 20
28870: PUSH
28871: LD_INT 45
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28879: LD_VAR 0 6
28883: PPUSH
28884: CALL_OW 264
28888: PUSH
28889: LD_INT 47
28891: PUSH
28892: EMPTY
28893: LIST
28894: IN
28895: IFFALSE 28916
// points := [ 67 , 45 , 75 ] ;
28897: LD_ADDR_VAR 0 9
28901: PUSH
28902: LD_INT 67
28904: PUSH
28905: LD_INT 45
28907: PUSH
28908: LD_INT 75
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28916: LD_VAR 0 6
28920: PPUSH
28921: CALL_OW 264
28925: PUSH
28926: LD_INT 26
28928: PUSH
28929: EMPTY
28930: LIST
28931: IN
28932: IFFALSE 28953
// points := [ 120 , 30 , 80 ] ;
28934: LD_ADDR_VAR 0 9
28938: PUSH
28939: LD_INT 120
28941: PUSH
28942: LD_INT 30
28944: PUSH
28945: LD_INT 80
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28953: LD_VAR 0 6
28957: PPUSH
28958: CALL_OW 264
28962: PUSH
28963: LD_INT 22
28965: PUSH
28966: EMPTY
28967: LIST
28968: IN
28969: IFFALSE 28990
// points := [ 40 , 1 , 1 ] ;
28971: LD_ADDR_VAR 0 9
28975: PUSH
28976: LD_INT 40
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 1
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28990: LD_VAR 0 6
28994: PPUSH
28995: CALL_OW 264
28999: PUSH
29000: LD_INT 29
29002: PUSH
29003: EMPTY
29004: LIST
29005: IN
29006: IFFALSE 29027
// points := [ 70 , 200 , 400 ] ;
29008: LD_ADDR_VAR 0 9
29012: PUSH
29013: LD_INT 70
29015: PUSH
29016: LD_INT 200
29018: PUSH
29019: LD_INT 400
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29027: LD_VAR 0 6
29031: PPUSH
29032: CALL_OW 264
29036: PUSH
29037: LD_INT 14
29039: PUSH
29040: LD_INT 53
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: IN
29047: IFFALSE 29068
// points := [ 40 , 10 , 20 ] ;
29049: LD_ADDR_VAR 0 9
29053: PUSH
29054: LD_INT 40
29056: PUSH
29057: LD_INT 10
29059: PUSH
29060: LD_INT 20
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29068: LD_VAR 0 6
29072: PPUSH
29073: CALL_OW 264
29077: PUSH
29078: LD_INT 9
29080: PUSH
29081: EMPTY
29082: LIST
29083: IN
29084: IFFALSE 29105
// points := [ 5 , 70 , 20 ] ;
29086: LD_ADDR_VAR 0 9
29090: PUSH
29091: LD_INT 5
29093: PUSH
29094: LD_INT 70
29096: PUSH
29097: LD_INT 20
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29105: LD_VAR 0 6
29109: PPUSH
29110: CALL_OW 264
29114: PUSH
29115: LD_INT 10
29117: PUSH
29118: EMPTY
29119: LIST
29120: IN
29121: IFFALSE 29142
// points := [ 35 , 110 , 70 ] ;
29123: LD_ADDR_VAR 0 9
29127: PUSH
29128: LD_INT 35
29130: PUSH
29131: LD_INT 110
29133: PUSH
29134: LD_INT 70
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29142: LD_VAR 0 6
29146: PPUSH
29147: CALL_OW 265
29151: PUSH
29152: LD_INT 25
29154: EQUAL
29155: IFFALSE 29176
// points := [ 80 , 65 , 100 ] ;
29157: LD_ADDR_VAR 0 9
29161: PUSH
29162: LD_INT 80
29164: PUSH
29165: LD_INT 65
29167: PUSH
29168: LD_INT 100
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29176: LD_VAR 0 6
29180: PPUSH
29181: CALL_OW 263
29185: PUSH
29186: LD_INT 1
29188: EQUAL
29189: IFFALSE 29224
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29191: LD_ADDR_VAR 0 10
29195: PUSH
29196: LD_VAR 0 10
29200: PUSH
29201: LD_VAR 0 6
29205: PPUSH
29206: CALL_OW 311
29210: PPUSH
29211: LD_INT 3
29213: PPUSH
29214: CALL_OW 259
29218: PUSH
29219: LD_INT 4
29221: MUL
29222: MUL
29223: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29224: LD_VAR 0 6
29228: PPUSH
29229: CALL_OW 263
29233: PUSH
29234: LD_INT 2
29236: EQUAL
29237: IFFALSE 29288
// begin j := IsControledBy ( i ) ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: LD_VAR 0 6
29248: PPUSH
29249: CALL_OW 312
29253: ST_TO_ADDR
// if j then
29254: LD_VAR 0 7
29258: IFFALSE 29288
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29260: LD_ADDR_VAR 0 10
29264: PUSH
29265: LD_VAR 0 10
29269: PUSH
29270: LD_VAR 0 7
29274: PPUSH
29275: LD_INT 3
29277: PPUSH
29278: CALL_OW 259
29282: PUSH
29283: LD_INT 3
29285: MUL
29286: MUL
29287: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29288: LD_VAR 0 6
29292: PPUSH
29293: CALL_OW 264
29297: PUSH
29298: LD_INT 5
29300: PUSH
29301: LD_INT 6
29303: PUSH
29304: LD_INT 46
29306: PUSH
29307: LD_INT 44
29309: PUSH
29310: LD_INT 47
29312: PUSH
29313: LD_INT 45
29315: PUSH
29316: LD_INT 28
29318: PUSH
29319: LD_INT 7
29321: PUSH
29322: LD_INT 27
29324: PUSH
29325: LD_INT 29
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: IN
29340: PUSH
29341: LD_VAR 0 1
29345: PPUSH
29346: LD_INT 52
29348: PPUSH
29349: CALL_OW 321
29353: PUSH
29354: LD_INT 2
29356: EQUAL
29357: AND
29358: IFFALSE 29375
// bpoints := bpoints * 1.2 ;
29360: LD_ADDR_VAR 0 10
29364: PUSH
29365: LD_VAR 0 10
29369: PUSH
29370: LD_REAL  1.20000000000000E+0000
29373: MUL
29374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29375: LD_VAR 0 6
29379: PPUSH
29380: CALL_OW 264
29384: PUSH
29385: LD_INT 6
29387: PUSH
29388: LD_INT 46
29390: PUSH
29391: LD_INT 47
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: IN
29399: IFFALSE 29416
// bpoints := bpoints * 1.2 ;
29401: LD_ADDR_VAR 0 10
29405: PUSH
29406: LD_VAR 0 10
29410: PUSH
29411: LD_REAL  1.20000000000000E+0000
29414: MUL
29415: ST_TO_ADDR
// end ; unit_building :
29416: GO 29430
29418: LD_INT 3
29420: DOUBLE
29421: EQUAL
29422: IFTRUE 29426
29424: GO 29429
29426: POP
// ; end ;
29427: GO 29430
29429: POP
// for j = 1 to 3 do
29430: LD_ADDR_VAR 0 7
29434: PUSH
29435: DOUBLE
29436: LD_INT 1
29438: DEC
29439: ST_TO_ADDR
29440: LD_INT 3
29442: PUSH
29443: FOR_TO
29444: IFFALSE 29497
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29446: LD_ADDR_VAR 0 5
29450: PUSH
29451: LD_VAR 0 5
29455: PPUSH
29456: LD_VAR 0 7
29460: PPUSH
29461: LD_VAR 0 5
29465: PUSH
29466: LD_VAR 0 7
29470: ARRAY
29471: PUSH
29472: LD_VAR 0 9
29476: PUSH
29477: LD_VAR 0 7
29481: ARRAY
29482: PUSH
29483: LD_VAR 0 10
29487: MUL
29488: PLUS
29489: PPUSH
29490: CALL_OW 1
29494: ST_TO_ADDR
29495: GO 29443
29497: POP
29498: POP
// end ;
29499: GO 27982
29501: POP
29502: POP
// result := Replace ( result , 4 , tmp ) ;
29503: LD_ADDR_VAR 0 5
29507: PUSH
29508: LD_VAR 0 5
29512: PPUSH
29513: LD_INT 4
29515: PPUSH
29516: LD_VAR 0 8
29520: PPUSH
29521: CALL_OW 1
29525: ST_TO_ADDR
// end ;
29526: LD_VAR 0 5
29530: RET
// export function DangerAtRange ( unit , range ) ; begin
29531: LD_INT 0
29533: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29534: LD_ADDR_VAR 0 3
29538: PUSH
29539: LD_VAR 0 1
29543: PPUSH
29544: CALL_OW 255
29548: PPUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL_OW 250
29558: PPUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 251
29568: PPUSH
29569: LD_VAR 0 2
29573: PPUSH
29574: CALL 27834 0 4
29578: ST_TO_ADDR
// end ;
29579: LD_VAR 0 3
29583: RET
// export function DangerInArea ( side , area ) ; begin
29584: LD_INT 0
29586: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29587: LD_ADDR_VAR 0 3
29591: PUSH
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_INT 81
29599: PUSH
29600: LD_VAR 0 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PPUSH
29609: CALL_OW 70
29613: ST_TO_ADDR
// end ;
29614: LD_VAR 0 3
29618: RET
// export function IsExtension ( b ) ; begin
29619: LD_INT 0
29621: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29622: LD_ADDR_VAR 0 2
29626: PUSH
29627: LD_VAR 0 1
29631: PUSH
29632: LD_INT 23
29634: PUSH
29635: LD_INT 20
29637: PUSH
29638: LD_INT 22
29640: PUSH
29641: LD_INT 17
29643: PUSH
29644: LD_INT 24
29646: PUSH
29647: LD_INT 21
29649: PUSH
29650: LD_INT 19
29652: PUSH
29653: LD_INT 16
29655: PUSH
29656: LD_INT 25
29658: PUSH
29659: LD_INT 18
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: IN
29674: ST_TO_ADDR
// end ;
29675: LD_VAR 0 2
29679: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29680: LD_INT 0
29682: PPUSH
29683: PPUSH
29684: PPUSH
// result := [ ] ;
29685: LD_ADDR_VAR 0 4
29689: PUSH
29690: EMPTY
29691: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29692: LD_ADDR_VAR 0 5
29696: PUSH
29697: LD_VAR 0 2
29701: PPUSH
29702: LD_INT 21
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PPUSH
29712: CALL_OW 70
29716: ST_TO_ADDR
// if not tmp then
29717: LD_VAR 0 5
29721: NOT
29722: IFFALSE 29726
// exit ;
29724: GO 29790
// if checkLink then
29726: LD_VAR 0 3
29730: IFFALSE 29780
// begin for i in tmp do
29732: LD_ADDR_VAR 0 6
29736: PUSH
29737: LD_VAR 0 5
29741: PUSH
29742: FOR_IN
29743: IFFALSE 29778
// if GetBase ( i ) <> base then
29745: LD_VAR 0 6
29749: PPUSH
29750: CALL_OW 274
29754: PUSH
29755: LD_VAR 0 1
29759: NONEQUAL
29760: IFFALSE 29776
// ComLinkToBase ( base , i ) ;
29762: LD_VAR 0 1
29766: PPUSH
29767: LD_VAR 0 6
29771: PPUSH
29772: CALL_OW 169
29776: GO 29742
29778: POP
29779: POP
// end ; result := tmp ;
29780: LD_ADDR_VAR 0 4
29784: PUSH
29785: LD_VAR 0 5
29789: ST_TO_ADDR
// end ;
29790: LD_VAR 0 4
29794: RET
// export function ComComplete ( units , b ) ; var i ; begin
29795: LD_INT 0
29797: PPUSH
29798: PPUSH
// if not units then
29799: LD_VAR 0 1
29803: NOT
29804: IFFALSE 29808
// exit ;
29806: GO 29898
// for i in units do
29808: LD_ADDR_VAR 0 4
29812: PUSH
29813: LD_VAR 0 1
29817: PUSH
29818: FOR_IN
29819: IFFALSE 29896
// if BuildingStatus ( b ) = bs_build then
29821: LD_VAR 0 2
29825: PPUSH
29826: CALL_OW 461
29830: PUSH
29831: LD_INT 1
29833: EQUAL
29834: IFFALSE 29894
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29836: LD_VAR 0 4
29840: PPUSH
29841: LD_STRING h
29843: PUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: CALL_OW 250
29853: PUSH
29854: LD_VAR 0 2
29858: PPUSH
29859: CALL_OW 251
29863: PUSH
29864: LD_VAR 0 2
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: PPUSH
29890: CALL_OW 446
29894: GO 29818
29896: POP
29897: POP
// end ;
29898: LD_VAR 0 3
29902: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29903: LD_INT 0
29905: PPUSH
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29911: LD_VAR 0 1
29915: NOT
29916: PUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 263
29926: PUSH
29927: LD_INT 2
29929: EQUAL
29930: NOT
29931: OR
29932: IFFALSE 29936
// exit ;
29934: GO 30252
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29936: LD_ADDR_VAR 0 6
29940: PUSH
29941: LD_INT 22
29943: PUSH
29944: LD_VAR 0 1
29948: PPUSH
29949: CALL_OW 255
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: LD_INT 36
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 34
29973: PUSH
29974: LD_INT 31
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PPUSH
29990: CALL_OW 69
29994: ST_TO_ADDR
// if not tmp then
29995: LD_VAR 0 6
29999: NOT
30000: IFFALSE 30004
// exit ;
30002: GO 30252
// result := [ ] ;
30004: LD_ADDR_VAR 0 2
30008: PUSH
30009: EMPTY
30010: ST_TO_ADDR
// for i in tmp do
30011: LD_ADDR_VAR 0 3
30015: PUSH
30016: LD_VAR 0 6
30020: PUSH
30021: FOR_IN
30022: IFFALSE 30093
// begin t := UnitsInside ( i ) ;
30024: LD_ADDR_VAR 0 4
30028: PUSH
30029: LD_VAR 0 3
30033: PPUSH
30034: CALL_OW 313
30038: ST_TO_ADDR
// if t then
30039: LD_VAR 0 4
30043: IFFALSE 30091
// for j in t do
30045: LD_ADDR_VAR 0 7
30049: PUSH
30050: LD_VAR 0 4
30054: PUSH
30055: FOR_IN
30056: IFFALSE 30089
// result := Insert ( result , result + 1 , j ) ;
30058: LD_ADDR_VAR 0 2
30062: PUSH
30063: LD_VAR 0 2
30067: PPUSH
30068: LD_VAR 0 2
30072: PUSH
30073: LD_INT 1
30075: PLUS
30076: PPUSH
30077: LD_VAR 0 7
30081: PPUSH
30082: CALL_OW 2
30086: ST_TO_ADDR
30087: GO 30055
30089: POP
30090: POP
// end ;
30091: GO 30021
30093: POP
30094: POP
// if not result then
30095: LD_VAR 0 2
30099: NOT
30100: IFFALSE 30104
// exit ;
30102: GO 30252
// mech := result [ 1 ] ;
30104: LD_ADDR_VAR 0 5
30108: PUSH
30109: LD_VAR 0 2
30113: PUSH
30114: LD_INT 1
30116: ARRAY
30117: ST_TO_ADDR
// if result > 1 then
30118: LD_VAR 0 2
30122: PUSH
30123: LD_INT 1
30125: GREATER
30126: IFFALSE 30238
// for i = 2 to result do
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: DOUBLE
30134: LD_INT 2
30136: DEC
30137: ST_TO_ADDR
30138: LD_VAR 0 2
30142: PUSH
30143: FOR_TO
30144: IFFALSE 30236
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30146: LD_ADDR_VAR 0 4
30150: PUSH
30151: LD_VAR 0 2
30155: PUSH
30156: LD_VAR 0 3
30160: ARRAY
30161: PPUSH
30162: LD_INT 3
30164: PPUSH
30165: CALL_OW 259
30169: PUSH
30170: LD_VAR 0 2
30174: PUSH
30175: LD_VAR 0 3
30179: ARRAY
30180: PPUSH
30181: CALL_OW 432
30185: MINUS
30186: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30187: LD_VAR 0 4
30191: PUSH
30192: LD_VAR 0 5
30196: PPUSH
30197: LD_INT 3
30199: PPUSH
30200: CALL_OW 259
30204: PUSH
30205: LD_VAR 0 5
30209: PPUSH
30210: CALL_OW 432
30214: MINUS
30215: GREATEREQUAL
30216: IFFALSE 30234
// mech := result [ i ] ;
30218: LD_ADDR_VAR 0 5
30222: PUSH
30223: LD_VAR 0 2
30227: PUSH
30228: LD_VAR 0 3
30232: ARRAY
30233: ST_TO_ADDR
// end ;
30234: GO 30143
30236: POP
30237: POP
// ComLinkTo ( vehicle , mech ) ;
30238: LD_VAR 0 1
30242: PPUSH
30243: LD_VAR 0 5
30247: PPUSH
30248: CALL_OW 135
// end ;
30252: LD_VAR 0 2
30256: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30257: LD_INT 0
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
// result := [ ] ;
30272: LD_ADDR_VAR 0 7
30276: PUSH
30277: EMPTY
30278: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 266
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: IN
30299: NOT
30300: IFFALSE 30304
// exit ;
30302: GO 31938
// if name then
30304: LD_VAR 0 3
30308: IFFALSE 30324
// SetBName ( base_dep , name ) ;
30310: LD_VAR 0 1
30314: PPUSH
30315: LD_VAR 0 3
30319: PPUSH
30320: CALL_OW 500
// base := GetBase ( base_dep ) ;
30324: LD_ADDR_VAR 0 15
30328: PUSH
30329: LD_VAR 0 1
30333: PPUSH
30334: CALL_OW 274
30338: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30339: LD_ADDR_VAR 0 16
30343: PUSH
30344: LD_VAR 0 1
30348: PPUSH
30349: CALL_OW 255
30353: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30354: LD_ADDR_VAR 0 17
30358: PUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 248
30368: ST_TO_ADDR
// if sources then
30369: LD_VAR 0 5
30373: IFFALSE 30420
// for i = 1 to 3 do
30375: LD_ADDR_VAR 0 8
30379: PUSH
30380: DOUBLE
30381: LD_INT 1
30383: DEC
30384: ST_TO_ADDR
30385: LD_INT 3
30387: PUSH
30388: FOR_TO
30389: IFFALSE 30418
// AddResourceType ( base , i , sources [ i ] ) ;
30391: LD_VAR 0 15
30395: PPUSH
30396: LD_VAR 0 8
30400: PPUSH
30401: LD_VAR 0 5
30405: PUSH
30406: LD_VAR 0 8
30410: ARRAY
30411: PPUSH
30412: CALL_OW 276
30416: GO 30388
30418: POP
30419: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30420: LD_ADDR_VAR 0 18
30424: PUSH
30425: LD_VAR 0 15
30429: PPUSH
30430: LD_VAR 0 2
30434: PPUSH
30435: LD_INT 1
30437: PPUSH
30438: CALL 29680 0 3
30442: ST_TO_ADDR
// InitHc ;
30443: CALL_OW 19
// InitUc ;
30447: CALL_OW 18
// uc_side := side ;
30451: LD_ADDR_OWVAR 20
30455: PUSH
30456: LD_VAR 0 16
30460: ST_TO_ADDR
// uc_nation := nation ;
30461: LD_ADDR_OWVAR 21
30465: PUSH
30466: LD_VAR 0 17
30470: ST_TO_ADDR
// if buildings then
30471: LD_VAR 0 18
30475: IFFALSE 31797
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30477: LD_ADDR_VAR 0 19
30481: PUSH
30482: LD_VAR 0 18
30486: PPUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 30
30492: PUSH
30493: LD_INT 29
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 30
30502: PUSH
30503: LD_INT 30
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: PPUSH
30515: CALL_OW 72
30519: ST_TO_ADDR
// if tmp then
30520: LD_VAR 0 19
30524: IFFALSE 30572
// for i in tmp do
30526: LD_ADDR_VAR 0 8
30530: PUSH
30531: LD_VAR 0 19
30535: PUSH
30536: FOR_IN
30537: IFFALSE 30570
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30539: LD_VAR 0 8
30543: PPUSH
30544: CALL_OW 250
30548: PPUSH
30549: LD_VAR 0 8
30553: PPUSH
30554: CALL_OW 251
30558: PPUSH
30559: LD_VAR 0 16
30563: PPUSH
30564: CALL_OW 441
30568: GO 30536
30570: POP
30571: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30572: LD_VAR 0 18
30576: PPUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 30
30582: PUSH
30583: LD_INT 32
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 30
30592: PUSH
30593: LD_INT 33
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: PPUSH
30605: CALL_OW 72
30609: IFFALSE 30697
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30611: LD_ADDR_VAR 0 8
30615: PUSH
30616: LD_VAR 0 18
30620: PPUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: LD_INT 32
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 33
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: PPUSH
30649: CALL_OW 72
30653: PUSH
30654: FOR_IN
30655: IFFALSE 30695
// begin if not GetBWeapon ( i ) then
30657: LD_VAR 0 8
30661: PPUSH
30662: CALL_OW 269
30666: NOT
30667: IFFALSE 30693
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30669: LD_VAR 0 8
30673: PPUSH
30674: LD_VAR 0 8
30678: PPUSH
30679: LD_VAR 0 2
30683: PPUSH
30684: CALL 31943 0 2
30688: PPUSH
30689: CALL_OW 431
// end ;
30693: GO 30654
30695: POP
30696: POP
// end ; for i = 1 to personel do
30697: LD_ADDR_VAR 0 8
30701: PUSH
30702: DOUBLE
30703: LD_INT 1
30705: DEC
30706: ST_TO_ADDR
30707: LD_VAR 0 6
30711: PUSH
30712: FOR_TO
30713: IFFALSE 31777
// begin if i > 4 then
30715: LD_VAR 0 8
30719: PUSH
30720: LD_INT 4
30722: GREATER
30723: IFFALSE 30727
// break ;
30725: GO 31777
// case i of 1 :
30727: LD_VAR 0 8
30731: PUSH
30732: LD_INT 1
30734: DOUBLE
30735: EQUAL
30736: IFTRUE 30740
30738: GO 30820
30740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30741: LD_ADDR_VAR 0 12
30745: PUSH
30746: LD_VAR 0 18
30750: PPUSH
30751: LD_INT 22
30753: PUSH
30754: LD_VAR 0 16
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 58
30765: PUSH
30766: EMPTY
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 32
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 30
30784: PUSH
30785: LD_INT 4
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 30
30794: PUSH
30795: LD_INT 5
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 72
30817: ST_TO_ADDR
30818: GO 31042
30820: LD_INT 2
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 30890
30828: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30829: LD_ADDR_VAR 0 12
30833: PUSH
30834: LD_VAR 0 18
30838: PPUSH
30839: LD_INT 22
30841: PUSH
30842: LD_VAR 0 16
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 30
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PPUSH
30883: CALL_OW 72
30887: ST_TO_ADDR
30888: GO 31042
30890: LD_INT 3
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30960
30898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30899: LD_ADDR_VAR 0 12
30903: PUSH
30904: LD_VAR 0 18
30908: PPUSH
30909: LD_INT 22
30911: PUSH
30912: LD_VAR 0 16
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 30
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 30
30936: PUSH
30937: LD_INT 3
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PPUSH
30953: CALL_OW 72
30957: ST_TO_ADDR
30958: GO 31042
30960: LD_INT 4
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 31041
30968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30969: LD_ADDR_VAR 0 12
30973: PUSH
30974: LD_VAR 0 18
30978: PPUSH
30979: LD_INT 22
30981: PUSH
30982: LD_VAR 0 16
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: LD_INT 30
30996: PUSH
30997: LD_INT 6
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 30
31006: PUSH
31007: LD_INT 7
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 30
31016: PUSH
31017: LD_INT 8
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PPUSH
31034: CALL_OW 72
31038: ST_TO_ADDR
31039: GO 31042
31041: POP
// if i = 1 then
31042: LD_VAR 0 8
31046: PUSH
31047: LD_INT 1
31049: EQUAL
31050: IFFALSE 31161
// begin tmp := [ ] ;
31052: LD_ADDR_VAR 0 19
31056: PUSH
31057: EMPTY
31058: ST_TO_ADDR
// for j in f do
31059: LD_ADDR_VAR 0 9
31063: PUSH
31064: LD_VAR 0 12
31068: PUSH
31069: FOR_IN
31070: IFFALSE 31143
// if GetBType ( j ) = b_bunker then
31072: LD_VAR 0 9
31076: PPUSH
31077: CALL_OW 266
31081: PUSH
31082: LD_INT 32
31084: EQUAL
31085: IFFALSE 31112
// tmp := Insert ( tmp , 1 , j ) else
31087: LD_ADDR_VAR 0 19
31091: PUSH
31092: LD_VAR 0 19
31096: PPUSH
31097: LD_INT 1
31099: PPUSH
31100: LD_VAR 0 9
31104: PPUSH
31105: CALL_OW 2
31109: ST_TO_ADDR
31110: GO 31141
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31112: LD_ADDR_VAR 0 19
31116: PUSH
31117: LD_VAR 0 19
31121: PPUSH
31122: LD_VAR 0 19
31126: PUSH
31127: LD_INT 1
31129: PLUS
31130: PPUSH
31131: LD_VAR 0 9
31135: PPUSH
31136: CALL_OW 2
31140: ST_TO_ADDR
31141: GO 31069
31143: POP
31144: POP
// if tmp then
31145: LD_VAR 0 19
31149: IFFALSE 31161
// f := tmp ;
31151: LD_ADDR_VAR 0 12
31155: PUSH
31156: LD_VAR 0 19
31160: ST_TO_ADDR
// end ; x := personel [ i ] ;
31161: LD_ADDR_VAR 0 13
31165: PUSH
31166: LD_VAR 0 6
31170: PUSH
31171: LD_VAR 0 8
31175: ARRAY
31176: ST_TO_ADDR
// if x = - 1 then
31177: LD_VAR 0 13
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: EQUAL
31186: IFFALSE 31395
// begin for j in f do
31188: LD_ADDR_VAR 0 9
31192: PUSH
31193: LD_VAR 0 12
31197: PUSH
31198: FOR_IN
31199: IFFALSE 31391
// repeat InitHc ;
31201: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31205: LD_VAR 0 9
31209: PPUSH
31210: CALL_OW 266
31214: PUSH
31215: LD_INT 5
31217: EQUAL
31218: IFFALSE 31288
// begin if UnitsInside ( j ) < 3 then
31220: LD_VAR 0 9
31224: PPUSH
31225: CALL_OW 313
31229: PUSH
31230: LD_INT 3
31232: LESS
31233: IFFALSE 31269
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31235: LD_INT 0
31237: PPUSH
31238: LD_INT 5
31240: PUSH
31241: LD_INT 8
31243: PUSH
31244: LD_INT 9
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: PUSH
31252: LD_VAR 0 17
31256: ARRAY
31257: PPUSH
31258: LD_VAR 0 4
31262: PPUSH
31263: CALL_OW 380
31267: GO 31286
// PrepareHuman ( false , i , skill ) ;
31269: LD_INT 0
31271: PPUSH
31272: LD_VAR 0 8
31276: PPUSH
31277: LD_VAR 0 4
31281: PPUSH
31282: CALL_OW 380
// end else
31286: GO 31305
// PrepareHuman ( false , i , skill ) ;
31288: LD_INT 0
31290: PPUSH
31291: LD_VAR 0 8
31295: PPUSH
31296: LD_VAR 0 4
31300: PPUSH
31301: CALL_OW 380
// un := CreateHuman ;
31305: LD_ADDR_VAR 0 14
31309: PUSH
31310: CALL_OW 44
31314: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31315: LD_ADDR_VAR 0 7
31319: PUSH
31320: LD_VAR 0 7
31324: PPUSH
31325: LD_INT 1
31327: PPUSH
31328: LD_VAR 0 14
31332: PPUSH
31333: CALL_OW 2
31337: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31338: LD_VAR 0 14
31342: PPUSH
31343: LD_VAR 0 9
31347: PPUSH
31348: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31352: LD_VAR 0 9
31356: PPUSH
31357: CALL_OW 313
31361: PUSH
31362: LD_INT 6
31364: EQUAL
31365: PUSH
31366: LD_VAR 0 9
31370: PPUSH
31371: CALL_OW 266
31375: PUSH
31376: LD_INT 32
31378: PUSH
31379: LD_INT 31
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: IN
31386: OR
31387: IFFALSE 31201
31389: GO 31198
31391: POP
31392: POP
// end else
31393: GO 31775
// for j = 1 to x do
31395: LD_ADDR_VAR 0 9
31399: PUSH
31400: DOUBLE
31401: LD_INT 1
31403: DEC
31404: ST_TO_ADDR
31405: LD_VAR 0 13
31409: PUSH
31410: FOR_TO
31411: IFFALSE 31773
// begin InitHc ;
31413: CALL_OW 19
// if not f then
31417: LD_VAR 0 12
31421: NOT
31422: IFFALSE 31511
// begin PrepareHuman ( false , i , skill ) ;
31424: LD_INT 0
31426: PPUSH
31427: LD_VAR 0 8
31431: PPUSH
31432: LD_VAR 0 4
31436: PPUSH
31437: CALL_OW 380
// un := CreateHuman ;
31441: LD_ADDR_VAR 0 14
31445: PUSH
31446: CALL_OW 44
31450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31451: LD_ADDR_VAR 0 7
31455: PUSH
31456: LD_VAR 0 7
31460: PPUSH
31461: LD_INT 1
31463: PPUSH
31464: LD_VAR 0 14
31468: PPUSH
31469: CALL_OW 2
31473: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31474: LD_VAR 0 14
31478: PPUSH
31479: LD_VAR 0 1
31483: PPUSH
31484: CALL_OW 250
31488: PPUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 251
31498: PPUSH
31499: LD_INT 10
31501: PPUSH
31502: LD_INT 0
31504: PPUSH
31505: CALL_OW 50
// continue ;
31509: GO 31410
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31511: LD_VAR 0 12
31515: PUSH
31516: LD_INT 1
31518: ARRAY
31519: PPUSH
31520: CALL_OW 313
31524: PUSH
31525: LD_VAR 0 12
31529: PUSH
31530: LD_INT 1
31532: ARRAY
31533: PPUSH
31534: CALL_OW 266
31538: PUSH
31539: LD_INT 32
31541: PUSH
31542: LD_INT 31
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: IN
31549: AND
31550: PUSH
31551: LD_VAR 0 12
31555: PUSH
31556: LD_INT 1
31558: ARRAY
31559: PPUSH
31560: CALL_OW 313
31564: PUSH
31565: LD_INT 6
31567: EQUAL
31568: OR
31569: IFFALSE 31589
// f := Delete ( f , 1 ) ;
31571: LD_ADDR_VAR 0 12
31575: PUSH
31576: LD_VAR 0 12
31580: PPUSH
31581: LD_INT 1
31583: PPUSH
31584: CALL_OW 3
31588: ST_TO_ADDR
// if not f then
31589: LD_VAR 0 12
31593: NOT
31594: IFFALSE 31612
// begin x := x + 2 ;
31596: LD_ADDR_VAR 0 13
31600: PUSH
31601: LD_VAR 0 13
31605: PUSH
31606: LD_INT 2
31608: PLUS
31609: ST_TO_ADDR
// continue ;
31610: GO 31410
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31612: LD_VAR 0 12
31616: PUSH
31617: LD_INT 1
31619: ARRAY
31620: PPUSH
31621: CALL_OW 266
31625: PUSH
31626: LD_INT 5
31628: EQUAL
31629: IFFALSE 31703
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31631: LD_VAR 0 12
31635: PUSH
31636: LD_INT 1
31638: ARRAY
31639: PPUSH
31640: CALL_OW 313
31644: PUSH
31645: LD_INT 3
31647: LESS
31648: IFFALSE 31684
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31650: LD_INT 0
31652: PPUSH
31653: LD_INT 5
31655: PUSH
31656: LD_INT 8
31658: PUSH
31659: LD_INT 9
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: PUSH
31667: LD_VAR 0 17
31671: ARRAY
31672: PPUSH
31673: LD_VAR 0 4
31677: PPUSH
31678: CALL_OW 380
31682: GO 31701
// PrepareHuman ( false , i , skill ) ;
31684: LD_INT 0
31686: PPUSH
31687: LD_VAR 0 8
31691: PPUSH
31692: LD_VAR 0 4
31696: PPUSH
31697: CALL_OW 380
// end else
31701: GO 31720
// PrepareHuman ( false , i , skill ) ;
31703: LD_INT 0
31705: PPUSH
31706: LD_VAR 0 8
31710: PPUSH
31711: LD_VAR 0 4
31715: PPUSH
31716: CALL_OW 380
// un := CreateHuman ;
31720: LD_ADDR_VAR 0 14
31724: PUSH
31725: CALL_OW 44
31729: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31730: LD_ADDR_VAR 0 7
31734: PUSH
31735: LD_VAR 0 7
31739: PPUSH
31740: LD_INT 1
31742: PPUSH
31743: LD_VAR 0 14
31747: PPUSH
31748: CALL_OW 2
31752: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31753: LD_VAR 0 14
31757: PPUSH
31758: LD_VAR 0 12
31762: PUSH
31763: LD_INT 1
31765: ARRAY
31766: PPUSH
31767: CALL_OW 52
// end ;
31771: GO 31410
31773: POP
31774: POP
// end ;
31775: GO 30712
31777: POP
31778: POP
// result := result ^ buildings ;
31779: LD_ADDR_VAR 0 7
31783: PUSH
31784: LD_VAR 0 7
31788: PUSH
31789: LD_VAR 0 18
31793: ADD
31794: ST_TO_ADDR
// end else
31795: GO 31938
// begin for i = 1 to personel do
31797: LD_ADDR_VAR 0 8
31801: PUSH
31802: DOUBLE
31803: LD_INT 1
31805: DEC
31806: ST_TO_ADDR
31807: LD_VAR 0 6
31811: PUSH
31812: FOR_TO
31813: IFFALSE 31936
// begin if i > 4 then
31815: LD_VAR 0 8
31819: PUSH
31820: LD_INT 4
31822: GREATER
31823: IFFALSE 31827
// break ;
31825: GO 31936
// x := personel [ i ] ;
31827: LD_ADDR_VAR 0 13
31831: PUSH
31832: LD_VAR 0 6
31836: PUSH
31837: LD_VAR 0 8
31841: ARRAY
31842: ST_TO_ADDR
// if x = - 1 then
31843: LD_VAR 0 13
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: EQUAL
31852: IFFALSE 31856
// continue ;
31854: GO 31812
// PrepareHuman ( false , i , skill ) ;
31856: LD_INT 0
31858: PPUSH
31859: LD_VAR 0 8
31863: PPUSH
31864: LD_VAR 0 4
31868: PPUSH
31869: CALL_OW 380
// un := CreateHuman ;
31873: LD_ADDR_VAR 0 14
31877: PUSH
31878: CALL_OW 44
31882: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31883: LD_VAR 0 14
31887: PPUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL_OW 250
31897: PPUSH
31898: LD_VAR 0 1
31902: PPUSH
31903: CALL_OW 251
31907: PPUSH
31908: LD_INT 10
31910: PPUSH
31911: LD_INT 0
31913: PPUSH
31914: CALL_OW 50
// result := result ^ un ;
31918: LD_ADDR_VAR 0 7
31922: PUSH
31923: LD_VAR 0 7
31927: PUSH
31928: LD_VAR 0 14
31932: ADD
31933: ST_TO_ADDR
// end ;
31934: GO 31812
31936: POP
31937: POP
// end ; end ;
31938: LD_VAR 0 7
31942: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31943: LD_INT 0
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
31951: PPUSH
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
// result := false ;
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 0
31968: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31969: LD_VAR 0 1
31973: NOT
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 266
31984: PUSH
31985: LD_INT 32
31987: PUSH
31988: LD_INT 33
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: IN
31995: NOT
31996: OR
31997: IFFALSE 32001
// exit ;
31999: GO 33140
// nat := GetNation ( tower ) ;
32001: LD_ADDR_VAR 0 12
32005: PUSH
32006: LD_VAR 0 1
32010: PPUSH
32011: CALL_OW 248
32015: ST_TO_ADDR
// side := GetSide ( tower ) ;
32016: LD_ADDR_VAR 0 16
32020: PUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 255
32030: ST_TO_ADDR
// x := GetX ( tower ) ;
32031: LD_ADDR_VAR 0 10
32035: PUSH
32036: LD_VAR 0 1
32040: PPUSH
32041: CALL_OW 250
32045: ST_TO_ADDR
// y := GetY ( tower ) ;
32046: LD_ADDR_VAR 0 11
32050: PUSH
32051: LD_VAR 0 1
32055: PPUSH
32056: CALL_OW 251
32060: ST_TO_ADDR
// if not x or not y then
32061: LD_VAR 0 10
32065: NOT
32066: PUSH
32067: LD_VAR 0 11
32071: NOT
32072: OR
32073: IFFALSE 32077
// exit ;
32075: GO 33140
// weapon := 0 ;
32077: LD_ADDR_VAR 0 18
32081: PUSH
32082: LD_INT 0
32084: ST_TO_ADDR
// fac_list := [ ] ;
32085: LD_ADDR_VAR 0 17
32089: PUSH
32090: EMPTY
32091: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32092: LD_ADDR_VAR 0 6
32096: PUSH
32097: LD_VAR 0 1
32101: PPUSH
32102: CALL_OW 274
32106: PPUSH
32107: LD_VAR 0 2
32111: PPUSH
32112: LD_INT 0
32114: PPUSH
32115: CALL 29680 0 3
32119: PPUSH
32120: LD_INT 30
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PPUSH
32130: CALL_OW 72
32134: ST_TO_ADDR
// if not factories then
32135: LD_VAR 0 6
32139: NOT
32140: IFFALSE 32144
// exit ;
32142: GO 33140
// for i in factories do
32144: LD_ADDR_VAR 0 8
32148: PUSH
32149: LD_VAR 0 6
32153: PUSH
32154: FOR_IN
32155: IFFALSE 32180
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32157: LD_ADDR_VAR 0 17
32161: PUSH
32162: LD_VAR 0 17
32166: PUSH
32167: LD_VAR 0 8
32171: PPUSH
32172: CALL_OW 478
32176: UNION
32177: ST_TO_ADDR
32178: GO 32154
32180: POP
32181: POP
// if not fac_list then
32182: LD_VAR 0 17
32186: NOT
32187: IFFALSE 32191
// exit ;
32189: GO 33140
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32191: LD_ADDR_VAR 0 5
32195: PUSH
32196: LD_INT 4
32198: PUSH
32199: LD_INT 5
32201: PUSH
32202: LD_INT 9
32204: PUSH
32205: LD_INT 10
32207: PUSH
32208: LD_INT 6
32210: PUSH
32211: LD_INT 7
32213: PUSH
32214: LD_INT 11
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 27
32228: PUSH
32229: LD_INT 28
32231: PUSH
32232: LD_INT 26
32234: PUSH
32235: LD_INT 30
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 43
32246: PUSH
32247: LD_INT 44
32249: PUSH
32250: LD_INT 46
32252: PUSH
32253: LD_INT 45
32255: PUSH
32256: LD_INT 47
32258: PUSH
32259: LD_INT 49
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: PUSH
32275: LD_VAR 0 12
32279: ARRAY
32280: ST_TO_ADDR
// for i in list do
32281: LD_ADDR_VAR 0 8
32285: PUSH
32286: LD_VAR 0 5
32290: PUSH
32291: FOR_IN
32292: IFFALSE 32325
// if not i in fac_list then
32294: LD_VAR 0 8
32298: PUSH
32299: LD_VAR 0 17
32303: IN
32304: NOT
32305: IFFALSE 32323
// list := list diff i ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_VAR 0 5
32316: PUSH
32317: LD_VAR 0 8
32321: DIFF
32322: ST_TO_ADDR
32323: GO 32291
32325: POP
32326: POP
// if not list then
32327: LD_VAR 0 5
32331: NOT
32332: IFFALSE 32336
// exit ;
32334: GO 33140
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32336: LD_VAR 0 12
32340: PUSH
32341: LD_INT 3
32343: EQUAL
32344: PUSH
32345: LD_INT 49
32347: PUSH
32348: LD_VAR 0 5
32352: IN
32353: AND
32354: PUSH
32355: LD_INT 31
32357: PPUSH
32358: LD_VAR 0 16
32362: PPUSH
32363: CALL_OW 321
32367: PUSH
32368: LD_INT 2
32370: EQUAL
32371: AND
32372: IFFALSE 32432
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32374: LD_INT 22
32376: PUSH
32377: LD_VAR 0 16
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 35
32388: PUSH
32389: LD_INT 49
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 91
32398: PUSH
32399: LD_VAR 0 1
32403: PUSH
32404: LD_INT 10
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: PPUSH
32417: CALL_OW 69
32421: NOT
32422: IFFALSE 32432
// weapon := ru_time_lapser ;
32424: LD_ADDR_VAR 0 18
32428: PUSH
32429: LD_INT 49
32431: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32432: LD_VAR 0 12
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: IN
32447: PUSH
32448: LD_INT 11
32450: PUSH
32451: LD_VAR 0 5
32455: IN
32456: PUSH
32457: LD_INT 30
32459: PUSH
32460: LD_VAR 0 5
32464: IN
32465: OR
32466: AND
32467: PUSH
32468: LD_INT 6
32470: PPUSH
32471: LD_VAR 0 16
32475: PPUSH
32476: CALL_OW 321
32480: PUSH
32481: LD_INT 2
32483: EQUAL
32484: AND
32485: IFFALSE 32650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32487: LD_INT 22
32489: PUSH
32490: LD_VAR 0 16
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 35
32504: PUSH
32505: LD_INT 11
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 35
32514: PUSH
32515: LD_INT 30
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 91
32529: PUSH
32530: LD_VAR 0 1
32534: PUSH
32535: LD_INT 18
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: PPUSH
32548: CALL_OW 69
32552: NOT
32553: PUSH
32554: LD_INT 22
32556: PUSH
32557: LD_VAR 0 16
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 30
32571: PUSH
32572: LD_INT 32
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 30
32581: PUSH
32582: LD_INT 33
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 91
32596: PUSH
32597: LD_VAR 0 1
32601: PUSH
32602: LD_INT 12
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: PPUSH
32618: CALL_OW 69
32622: PUSH
32623: LD_INT 2
32625: GREATER
32626: AND
32627: IFFALSE 32650
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32629: LD_ADDR_VAR 0 18
32633: PUSH
32634: LD_INT 11
32636: PUSH
32637: LD_INT 30
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_VAR 0 12
32648: ARRAY
32649: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32650: LD_VAR 0 18
32654: NOT
32655: PUSH
32656: LD_INT 40
32658: PPUSH
32659: LD_VAR 0 16
32663: PPUSH
32664: CALL_OW 321
32668: PUSH
32669: LD_INT 2
32671: EQUAL
32672: AND
32673: PUSH
32674: LD_INT 7
32676: PUSH
32677: LD_VAR 0 5
32681: IN
32682: PUSH
32683: LD_INT 28
32685: PUSH
32686: LD_VAR 0 5
32690: IN
32691: OR
32692: PUSH
32693: LD_INT 45
32695: PUSH
32696: LD_VAR 0 5
32700: IN
32701: OR
32702: AND
32703: IFFALSE 32957
// begin hex := GetHexInfo ( x , y ) ;
32705: LD_ADDR_VAR 0 4
32709: PUSH
32710: LD_VAR 0 10
32714: PPUSH
32715: LD_VAR 0 11
32719: PPUSH
32720: CALL_OW 546
32724: ST_TO_ADDR
// if hex [ 1 ] then
32725: LD_VAR 0 4
32729: PUSH
32730: LD_INT 1
32732: ARRAY
32733: IFFALSE 32737
// exit ;
32735: GO 33140
// height := hex [ 2 ] ;
32737: LD_ADDR_VAR 0 15
32741: PUSH
32742: LD_VAR 0 4
32746: PUSH
32747: LD_INT 2
32749: ARRAY
32750: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32751: LD_ADDR_VAR 0 14
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: LD_INT 5
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
// for i in tmp do
32774: LD_ADDR_VAR 0 8
32778: PUSH
32779: LD_VAR 0 14
32783: PUSH
32784: FOR_IN
32785: IFFALSE 32955
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32787: LD_ADDR_VAR 0 9
32791: PUSH
32792: LD_VAR 0 10
32796: PPUSH
32797: LD_VAR 0 8
32801: PPUSH
32802: LD_INT 5
32804: PPUSH
32805: CALL_OW 272
32809: PUSH
32810: LD_VAR 0 11
32814: PPUSH
32815: LD_VAR 0 8
32819: PPUSH
32820: LD_INT 5
32822: PPUSH
32823: CALL_OW 273
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32832: LD_VAR 0 9
32836: PUSH
32837: LD_INT 1
32839: ARRAY
32840: PPUSH
32841: LD_VAR 0 9
32845: PUSH
32846: LD_INT 2
32848: ARRAY
32849: PPUSH
32850: CALL_OW 488
32854: IFFALSE 32953
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32856: LD_ADDR_VAR 0 4
32860: PUSH
32861: LD_VAR 0 9
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: PPUSH
32870: LD_VAR 0 9
32874: PUSH
32875: LD_INT 2
32877: ARRAY
32878: PPUSH
32879: CALL_OW 546
32883: ST_TO_ADDR
// if hex [ 1 ] then
32884: LD_VAR 0 4
32888: PUSH
32889: LD_INT 1
32891: ARRAY
32892: IFFALSE 32896
// continue ;
32894: GO 32784
// h := hex [ 2 ] ;
32896: LD_ADDR_VAR 0 13
32900: PUSH
32901: LD_VAR 0 4
32905: PUSH
32906: LD_INT 2
32908: ARRAY
32909: ST_TO_ADDR
// if h + 7 < height then
32910: LD_VAR 0 13
32914: PUSH
32915: LD_INT 7
32917: PLUS
32918: PUSH
32919: LD_VAR 0 15
32923: LESS
32924: IFFALSE 32953
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32926: LD_ADDR_VAR 0 18
32930: PUSH
32931: LD_INT 7
32933: PUSH
32934: LD_INT 28
32936: PUSH
32937: LD_INT 45
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: PUSH
32945: LD_VAR 0 12
32949: ARRAY
32950: ST_TO_ADDR
// break ;
32951: GO 32955
// end ; end ; end ;
32953: GO 32784
32955: POP
32956: POP
// end ; if not weapon then
32957: LD_VAR 0 18
32961: NOT
32962: IFFALSE 33022
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32964: LD_ADDR_VAR 0 5
32968: PUSH
32969: LD_VAR 0 5
32973: PUSH
32974: LD_INT 11
32976: PUSH
32977: LD_INT 30
32979: PUSH
32980: LD_INT 49
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: DIFF
32988: ST_TO_ADDR
// if not list then
32989: LD_VAR 0 5
32993: NOT
32994: IFFALSE 32998
// exit ;
32996: GO 33140
// weapon := list [ rand ( 1 , list ) ] ;
32998: LD_ADDR_VAR 0 18
33002: PUSH
33003: LD_VAR 0 5
33007: PUSH
33008: LD_INT 1
33010: PPUSH
33011: LD_VAR 0 5
33015: PPUSH
33016: CALL_OW 12
33020: ARRAY
33021: ST_TO_ADDR
// end ; if weapon then
33022: LD_VAR 0 18
33026: IFFALSE 33140
// begin tmp := CostOfWeapon ( weapon ) ;
33028: LD_ADDR_VAR 0 14
33032: PUSH
33033: LD_VAR 0 18
33037: PPUSH
33038: CALL_OW 451
33042: ST_TO_ADDR
// j := GetBase ( tower ) ;
33043: LD_ADDR_VAR 0 9
33047: PUSH
33048: LD_VAR 0 1
33052: PPUSH
33053: CALL_OW 274
33057: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33058: LD_VAR 0 9
33062: PPUSH
33063: LD_INT 1
33065: PPUSH
33066: CALL_OW 275
33070: PUSH
33071: LD_VAR 0 14
33075: PUSH
33076: LD_INT 1
33078: ARRAY
33079: GREATEREQUAL
33080: PUSH
33081: LD_VAR 0 9
33085: PPUSH
33086: LD_INT 2
33088: PPUSH
33089: CALL_OW 275
33093: PUSH
33094: LD_VAR 0 14
33098: PUSH
33099: LD_INT 2
33101: ARRAY
33102: GREATEREQUAL
33103: AND
33104: PUSH
33105: LD_VAR 0 9
33109: PPUSH
33110: LD_INT 3
33112: PPUSH
33113: CALL_OW 275
33117: PUSH
33118: LD_VAR 0 14
33122: PUSH
33123: LD_INT 3
33125: ARRAY
33126: GREATEREQUAL
33127: AND
33128: IFFALSE 33140
// result := weapon ;
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: LD_VAR 0 18
33139: ST_TO_ADDR
// end ; end ;
33140: LD_VAR 0 3
33144: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33145: LD_INT 0
33147: PPUSH
33148: PPUSH
// result := true ;
33149: LD_ADDR_VAR 0 3
33153: PUSH
33154: LD_INT 1
33156: ST_TO_ADDR
// if array1 = array2 then
33157: LD_VAR 0 1
33161: PUSH
33162: LD_VAR 0 2
33166: EQUAL
33167: IFFALSE 33227
// begin for i = 1 to array1 do
33169: LD_ADDR_VAR 0 4
33173: PUSH
33174: DOUBLE
33175: LD_INT 1
33177: DEC
33178: ST_TO_ADDR
33179: LD_VAR 0 1
33183: PUSH
33184: FOR_TO
33185: IFFALSE 33223
// if array1 [ i ] <> array2 [ i ] then
33187: LD_VAR 0 1
33191: PUSH
33192: LD_VAR 0 4
33196: ARRAY
33197: PUSH
33198: LD_VAR 0 2
33202: PUSH
33203: LD_VAR 0 4
33207: ARRAY
33208: NONEQUAL
33209: IFFALSE 33221
// begin result := false ;
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_INT 0
33218: ST_TO_ADDR
// break ;
33219: GO 33223
// end ;
33221: GO 33184
33223: POP
33224: POP
// end else
33225: GO 33235
// result := false ;
33227: LD_ADDR_VAR 0 3
33231: PUSH
33232: LD_INT 0
33234: ST_TO_ADDR
// end ;
33235: LD_VAR 0 3
33239: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
// if not array1 or not array2 then
33244: LD_VAR 0 1
33248: NOT
33249: PUSH
33250: LD_VAR 0 2
33254: NOT
33255: OR
33256: IFFALSE 33260
// exit ;
33258: GO 33324
// result := true ;
33260: LD_ADDR_VAR 0 3
33264: PUSH
33265: LD_INT 1
33267: ST_TO_ADDR
// for i = 1 to array1 do
33268: LD_ADDR_VAR 0 4
33272: PUSH
33273: DOUBLE
33274: LD_INT 1
33276: DEC
33277: ST_TO_ADDR
33278: LD_VAR 0 1
33282: PUSH
33283: FOR_TO
33284: IFFALSE 33322
// if array1 [ i ] <> array2 [ i ] then
33286: LD_VAR 0 1
33290: PUSH
33291: LD_VAR 0 4
33295: ARRAY
33296: PUSH
33297: LD_VAR 0 2
33301: PUSH
33302: LD_VAR 0 4
33306: ARRAY
33307: NONEQUAL
33308: IFFALSE 33320
// begin result := false ;
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_INT 0
33317: ST_TO_ADDR
// break ;
33318: GO 33322
// end ;
33320: GO 33283
33322: POP
33323: POP
// end ;
33324: LD_VAR 0 3
33328: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33329: LD_INT 0
33331: PPUSH
33332: PPUSH
33333: PPUSH
// pom := GetBase ( fac ) ;
33334: LD_ADDR_VAR 0 5
33338: PUSH
33339: LD_VAR 0 1
33343: PPUSH
33344: CALL_OW 274
33348: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33349: LD_ADDR_VAR 0 4
33353: PUSH
33354: LD_VAR 0 2
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: PPUSH
33363: LD_VAR 0 2
33367: PUSH
33368: LD_INT 2
33370: ARRAY
33371: PPUSH
33372: LD_VAR 0 2
33376: PUSH
33377: LD_INT 3
33379: ARRAY
33380: PPUSH
33381: LD_VAR 0 2
33385: PUSH
33386: LD_INT 4
33388: ARRAY
33389: PPUSH
33390: CALL_OW 449
33394: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_VAR 0 5
33404: PPUSH
33405: LD_INT 1
33407: PPUSH
33408: CALL_OW 275
33412: PUSH
33413: LD_VAR 0 4
33417: PUSH
33418: LD_INT 1
33420: ARRAY
33421: GREATEREQUAL
33422: PUSH
33423: LD_VAR 0 5
33427: PPUSH
33428: LD_INT 2
33430: PPUSH
33431: CALL_OW 275
33435: PUSH
33436: LD_VAR 0 4
33440: PUSH
33441: LD_INT 2
33443: ARRAY
33444: GREATEREQUAL
33445: AND
33446: PUSH
33447: LD_VAR 0 5
33451: PPUSH
33452: LD_INT 3
33454: PPUSH
33455: CALL_OW 275
33459: PUSH
33460: LD_VAR 0 4
33464: PUSH
33465: LD_INT 3
33467: ARRAY
33468: GREATEREQUAL
33469: AND
33470: ST_TO_ADDR
// end ;
33471: LD_VAR 0 3
33475: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33476: LD_INT 0
33478: PPUSH
33479: PPUSH
33480: PPUSH
33481: PPUSH
// pom := GetBase ( building ) ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_VAR 0 1
33491: PPUSH
33492: CALL_OW 274
33496: ST_TO_ADDR
// if not pom then
33497: LD_VAR 0 3
33501: NOT
33502: IFFALSE 33506
// exit ;
33504: GO 33676
// btype := GetBType ( building ) ;
33506: LD_ADDR_VAR 0 5
33510: PUSH
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL_OW 266
33520: ST_TO_ADDR
// if btype = b_armoury then
33521: LD_VAR 0 5
33525: PUSH
33526: LD_INT 4
33528: EQUAL
33529: IFFALSE 33539
// btype := b_barracks ;
33531: LD_ADDR_VAR 0 5
33535: PUSH
33536: LD_INT 5
33538: ST_TO_ADDR
// if btype = b_depot then
33539: LD_VAR 0 5
33543: PUSH
33544: LD_INT 0
33546: EQUAL
33547: IFFALSE 33557
// btype := b_warehouse ;
33549: LD_ADDR_VAR 0 5
33553: PUSH
33554: LD_INT 1
33556: ST_TO_ADDR
// if btype = b_workshop then
33557: LD_VAR 0 5
33561: PUSH
33562: LD_INT 2
33564: EQUAL
33565: IFFALSE 33575
// btype := b_factory ;
33567: LD_ADDR_VAR 0 5
33571: PUSH
33572: LD_INT 3
33574: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33575: LD_ADDR_VAR 0 4
33579: PUSH
33580: LD_VAR 0 5
33584: PPUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: CALL_OW 248
33594: PPUSH
33595: CALL_OW 450
33599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33600: LD_ADDR_VAR 0 2
33604: PUSH
33605: LD_VAR 0 3
33609: PPUSH
33610: LD_INT 1
33612: PPUSH
33613: CALL_OW 275
33617: PUSH
33618: LD_VAR 0 4
33622: PUSH
33623: LD_INT 1
33625: ARRAY
33626: GREATEREQUAL
33627: PUSH
33628: LD_VAR 0 3
33632: PPUSH
33633: LD_INT 2
33635: PPUSH
33636: CALL_OW 275
33640: PUSH
33641: LD_VAR 0 4
33645: PUSH
33646: LD_INT 2
33648: ARRAY
33649: GREATEREQUAL
33650: AND
33651: PUSH
33652: LD_VAR 0 3
33656: PPUSH
33657: LD_INT 3
33659: PPUSH
33660: CALL_OW 275
33664: PUSH
33665: LD_VAR 0 4
33669: PUSH
33670: LD_INT 3
33672: ARRAY
33673: GREATEREQUAL
33674: AND
33675: ST_TO_ADDR
// end ;
33676: LD_VAR 0 2
33680: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33681: LD_INT 0
33683: PPUSH
33684: PPUSH
33685: PPUSH
// pom := GetBase ( building ) ;
33686: LD_ADDR_VAR 0 4
33690: PUSH
33691: LD_VAR 0 1
33695: PPUSH
33696: CALL_OW 274
33700: ST_TO_ADDR
// if not pom then
33701: LD_VAR 0 4
33705: NOT
33706: IFFALSE 33710
// exit ;
33708: GO 33811
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33710: LD_ADDR_VAR 0 5
33714: PUSH
33715: LD_VAR 0 2
33719: PPUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 248
33729: PPUSH
33730: CALL_OW 450
33734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_VAR 0 4
33744: PPUSH
33745: LD_INT 1
33747: PPUSH
33748: CALL_OW 275
33752: PUSH
33753: LD_VAR 0 5
33757: PUSH
33758: LD_INT 1
33760: ARRAY
33761: GREATEREQUAL
33762: PUSH
33763: LD_VAR 0 4
33767: PPUSH
33768: LD_INT 2
33770: PPUSH
33771: CALL_OW 275
33775: PUSH
33776: LD_VAR 0 5
33780: PUSH
33781: LD_INT 2
33783: ARRAY
33784: GREATEREQUAL
33785: AND
33786: PUSH
33787: LD_VAR 0 4
33791: PPUSH
33792: LD_INT 3
33794: PPUSH
33795: CALL_OW 275
33799: PUSH
33800: LD_VAR 0 5
33804: PUSH
33805: LD_INT 3
33807: ARRAY
33808: GREATEREQUAL
33809: AND
33810: ST_TO_ADDR
// end ;
33811: LD_VAR 0 3
33815: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33816: LD_INT 0
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
// result := false ;
33829: LD_ADDR_VAR 0 8
33833: PUSH
33834: LD_INT 0
33836: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33837: LD_VAR 0 5
33841: NOT
33842: PUSH
33843: LD_VAR 0 1
33847: NOT
33848: OR
33849: PUSH
33850: LD_VAR 0 2
33854: NOT
33855: OR
33856: PUSH
33857: LD_VAR 0 3
33861: NOT
33862: OR
33863: IFFALSE 33867
// exit ;
33865: GO 34681
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33867: LD_ADDR_VAR 0 14
33871: PUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_VAR 0 2
33881: PPUSH
33882: LD_VAR 0 3
33886: PPUSH
33887: LD_VAR 0 4
33891: PPUSH
33892: LD_VAR 0 5
33896: PUSH
33897: LD_INT 1
33899: ARRAY
33900: PPUSH
33901: CALL_OW 248
33905: PPUSH
33906: LD_INT 0
33908: PPUSH
33909: CALL 35518 0 6
33913: ST_TO_ADDR
// if not hexes then
33914: LD_VAR 0 14
33918: NOT
33919: IFFALSE 33923
// exit ;
33921: GO 34681
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33923: LD_ADDR_VAR 0 17
33927: PUSH
33928: LD_VAR 0 5
33932: PPUSH
33933: LD_INT 22
33935: PUSH
33936: LD_VAR 0 13
33940: PPUSH
33941: CALL_OW 255
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 30
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 30
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PPUSH
33982: CALL_OW 72
33986: ST_TO_ADDR
// for i = 1 to hexes do
33987: LD_ADDR_VAR 0 9
33991: PUSH
33992: DOUBLE
33993: LD_INT 1
33995: DEC
33996: ST_TO_ADDR
33997: LD_VAR 0 14
34001: PUSH
34002: FOR_TO
34003: IFFALSE 34679
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34005: LD_ADDR_VAR 0 13
34009: PUSH
34010: LD_VAR 0 14
34014: PUSH
34015: LD_VAR 0 9
34019: ARRAY
34020: PUSH
34021: LD_INT 1
34023: ARRAY
34024: PPUSH
34025: LD_VAR 0 14
34029: PUSH
34030: LD_VAR 0 9
34034: ARRAY
34035: PUSH
34036: LD_INT 2
34038: ARRAY
34039: PPUSH
34040: CALL_OW 428
34044: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34045: LD_VAR 0 14
34049: PUSH
34050: LD_VAR 0 9
34054: ARRAY
34055: PUSH
34056: LD_INT 1
34058: ARRAY
34059: PPUSH
34060: LD_VAR 0 14
34064: PUSH
34065: LD_VAR 0 9
34069: ARRAY
34070: PUSH
34071: LD_INT 2
34073: ARRAY
34074: PPUSH
34075: CALL_OW 351
34079: PUSH
34080: LD_VAR 0 14
34084: PUSH
34085: LD_VAR 0 9
34089: ARRAY
34090: PUSH
34091: LD_INT 1
34093: ARRAY
34094: PPUSH
34095: LD_VAR 0 14
34099: PUSH
34100: LD_VAR 0 9
34104: ARRAY
34105: PUSH
34106: LD_INT 2
34108: ARRAY
34109: PPUSH
34110: CALL_OW 488
34114: NOT
34115: OR
34116: PUSH
34117: LD_VAR 0 13
34121: PPUSH
34122: CALL_OW 247
34126: PUSH
34127: LD_INT 3
34129: EQUAL
34130: OR
34131: IFFALSE 34137
// exit ;
34133: POP
34134: POP
34135: GO 34681
// if not tmp then
34137: LD_VAR 0 13
34141: NOT
34142: IFFALSE 34146
// continue ;
34144: GO 34002
// result := true ;
34146: LD_ADDR_VAR 0 8
34150: PUSH
34151: LD_INT 1
34153: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34154: LD_VAR 0 6
34158: PUSH
34159: LD_VAR 0 13
34163: PPUSH
34164: CALL_OW 247
34168: PUSH
34169: LD_INT 2
34171: EQUAL
34172: AND
34173: PUSH
34174: LD_VAR 0 13
34178: PPUSH
34179: CALL_OW 263
34183: PUSH
34184: LD_INT 1
34186: EQUAL
34187: AND
34188: IFFALSE 34352
// begin if IsDrivenBy ( tmp ) then
34190: LD_VAR 0 13
34194: PPUSH
34195: CALL_OW 311
34199: IFFALSE 34203
// continue ;
34201: GO 34002
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34203: LD_VAR 0 6
34207: PPUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 60
34213: PUSH
34214: EMPTY
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 3
34223: PUSH
34224: LD_INT 55
34226: PUSH
34227: EMPTY
34228: LIST
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PPUSH
34238: CALL_OW 72
34242: IFFALSE 34350
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34244: LD_ADDR_VAR 0 18
34248: PUSH
34249: LD_VAR 0 6
34253: PPUSH
34254: LD_INT 3
34256: PUSH
34257: LD_INT 60
34259: PUSH
34260: EMPTY
34261: LIST
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: LD_INT 55
34272: PUSH
34273: EMPTY
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PPUSH
34284: CALL_OW 72
34288: PUSH
34289: LD_INT 1
34291: ARRAY
34292: ST_TO_ADDR
// if IsInUnit ( driver ) then
34293: LD_VAR 0 18
34297: PPUSH
34298: CALL_OW 310
34302: IFFALSE 34313
// ComExit ( driver ) ;
34304: LD_VAR 0 18
34308: PPUSH
34309: CALL 58702 0 1
// AddComEnterUnit ( driver , tmp ) ;
34313: LD_VAR 0 18
34317: PPUSH
34318: LD_VAR 0 13
34322: PPUSH
34323: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34327: LD_VAR 0 18
34331: PPUSH
34332: LD_VAR 0 7
34336: PPUSH
34337: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34341: LD_VAR 0 18
34345: PPUSH
34346: CALL_OW 181
// end ; continue ;
34350: GO 34002
// end ; if not cleaners or not tmp in cleaners then
34352: LD_VAR 0 6
34356: NOT
34357: PUSH
34358: LD_VAR 0 13
34362: PUSH
34363: LD_VAR 0 6
34367: IN
34368: NOT
34369: OR
34370: IFFALSE 34677
// begin if dep then
34372: LD_VAR 0 17
34376: IFFALSE 34512
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34378: LD_ADDR_VAR 0 16
34382: PUSH
34383: LD_VAR 0 17
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PPUSH
34392: CALL_OW 250
34396: PPUSH
34397: LD_VAR 0 17
34401: PUSH
34402: LD_INT 1
34404: ARRAY
34405: PPUSH
34406: CALL_OW 254
34410: PPUSH
34411: LD_INT 5
34413: PPUSH
34414: CALL_OW 272
34418: PUSH
34419: LD_VAR 0 17
34423: PUSH
34424: LD_INT 1
34426: ARRAY
34427: PPUSH
34428: CALL_OW 251
34432: PPUSH
34433: LD_VAR 0 17
34437: PUSH
34438: LD_INT 1
34440: ARRAY
34441: PPUSH
34442: CALL_OW 254
34446: PPUSH
34447: LD_INT 5
34449: PPUSH
34450: CALL_OW 273
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34459: LD_VAR 0 16
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 16
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PPUSH
34477: CALL_OW 488
34481: IFFALSE 34512
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34483: LD_VAR 0 13
34487: PPUSH
34488: LD_VAR 0 16
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: PPUSH
34497: LD_VAR 0 16
34501: PUSH
34502: LD_INT 2
34504: ARRAY
34505: PPUSH
34506: CALL_OW 111
// continue ;
34510: GO 34002
// end ; end ; r := GetDir ( tmp ) ;
34512: LD_ADDR_VAR 0 15
34516: PUSH
34517: LD_VAR 0 13
34521: PPUSH
34522: CALL_OW 254
34526: ST_TO_ADDR
// if r = 5 then
34527: LD_VAR 0 15
34531: PUSH
34532: LD_INT 5
34534: EQUAL
34535: IFFALSE 34545
// r := 0 ;
34537: LD_ADDR_VAR 0 15
34541: PUSH
34542: LD_INT 0
34544: ST_TO_ADDR
// for j = r to 5 do
34545: LD_ADDR_VAR 0 10
34549: PUSH
34550: DOUBLE
34551: LD_VAR 0 15
34555: DEC
34556: ST_TO_ADDR
34557: LD_INT 5
34559: PUSH
34560: FOR_TO
34561: IFFALSE 34675
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34563: LD_ADDR_VAR 0 11
34567: PUSH
34568: LD_VAR 0 13
34572: PPUSH
34573: CALL_OW 250
34577: PPUSH
34578: LD_VAR 0 10
34582: PPUSH
34583: LD_INT 2
34585: PPUSH
34586: CALL_OW 272
34590: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34591: LD_ADDR_VAR 0 12
34595: PUSH
34596: LD_VAR 0 13
34600: PPUSH
34601: CALL_OW 251
34605: PPUSH
34606: LD_VAR 0 10
34610: PPUSH
34611: LD_INT 2
34613: PPUSH
34614: CALL_OW 273
34618: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34619: LD_VAR 0 11
34623: PPUSH
34624: LD_VAR 0 12
34628: PPUSH
34629: CALL_OW 488
34633: PUSH
34634: LD_VAR 0 11
34638: PPUSH
34639: LD_VAR 0 12
34643: PPUSH
34644: CALL_OW 428
34648: NOT
34649: AND
34650: IFFALSE 34673
// begin ComMoveXY ( tmp , _x , _y ) ;
34652: LD_VAR 0 13
34656: PPUSH
34657: LD_VAR 0 11
34661: PPUSH
34662: LD_VAR 0 12
34666: PPUSH
34667: CALL_OW 111
// break ;
34671: GO 34675
// end ; end ;
34673: GO 34560
34675: POP
34676: POP
// end ; end ;
34677: GO 34002
34679: POP
34680: POP
// end ;
34681: LD_VAR 0 8
34685: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
// result := false ;
34698: LD_ADDR_VAR 0 6
34702: PUSH
34703: LD_INT 0
34705: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34706: LD_VAR 0 1
34710: NOT
34711: PUSH
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 266
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: IN
34732: NOT
34733: OR
34734: PUSH
34735: LD_VAR 0 2
34739: NOT
34740: OR
34741: PUSH
34742: LD_VAR 0 5
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: LD_INT 3
34758: PUSH
34759: LD_INT 4
34761: PUSH
34762: LD_INT 5
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: IN
34773: NOT
34774: OR
34775: PUSH
34776: LD_VAR 0 3
34780: PPUSH
34781: LD_VAR 0 4
34785: PPUSH
34786: CALL_OW 488
34790: NOT
34791: OR
34792: IFFALSE 34796
// exit ;
34794: GO 35513
// pom := GetBase ( depot ) ;
34796: LD_ADDR_VAR 0 10
34800: PUSH
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL_OW 274
34810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34811: LD_ADDR_VAR 0 11
34815: PUSH
34816: LD_VAR 0 2
34820: PPUSH
34821: LD_VAR 0 1
34825: PPUSH
34826: CALL_OW 248
34830: PPUSH
34831: CALL_OW 450
34835: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34836: LD_VAR 0 10
34840: PPUSH
34841: LD_INT 1
34843: PPUSH
34844: CALL_OW 275
34848: PUSH
34849: LD_VAR 0 11
34853: PUSH
34854: LD_INT 1
34856: ARRAY
34857: GREATEREQUAL
34858: PUSH
34859: LD_VAR 0 10
34863: PPUSH
34864: LD_INT 2
34866: PPUSH
34867: CALL_OW 275
34871: PUSH
34872: LD_VAR 0 11
34876: PUSH
34877: LD_INT 2
34879: ARRAY
34880: GREATEREQUAL
34881: AND
34882: PUSH
34883: LD_VAR 0 10
34887: PPUSH
34888: LD_INT 3
34890: PPUSH
34891: CALL_OW 275
34895: PUSH
34896: LD_VAR 0 11
34900: PUSH
34901: LD_INT 3
34903: ARRAY
34904: GREATEREQUAL
34905: AND
34906: NOT
34907: IFFALSE 34911
// exit ;
34909: GO 35513
// if GetBType ( depot ) = b_depot then
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 266
34920: PUSH
34921: LD_INT 0
34923: EQUAL
34924: IFFALSE 34936
// dist := 28 else
34926: LD_ADDR_VAR 0 14
34930: PUSH
34931: LD_INT 28
34933: ST_TO_ADDR
34934: GO 34944
// dist := 36 ;
34936: LD_ADDR_VAR 0 14
34940: PUSH
34941: LD_INT 36
34943: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34944: LD_VAR 0 1
34948: PPUSH
34949: LD_VAR 0 3
34953: PPUSH
34954: LD_VAR 0 4
34958: PPUSH
34959: CALL_OW 297
34963: PUSH
34964: LD_VAR 0 14
34968: GREATER
34969: IFFALSE 34973
// exit ;
34971: GO 35513
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34973: LD_ADDR_VAR 0 12
34977: PUSH
34978: LD_VAR 0 2
34982: PPUSH
34983: LD_VAR 0 3
34987: PPUSH
34988: LD_VAR 0 4
34992: PPUSH
34993: LD_VAR 0 5
34997: PPUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 248
35007: PPUSH
35008: LD_INT 0
35010: PPUSH
35011: CALL 35518 0 6
35015: ST_TO_ADDR
// if not hexes then
35016: LD_VAR 0 12
35020: NOT
35021: IFFALSE 35025
// exit ;
35023: GO 35513
// hex := GetHexInfo ( x , y ) ;
35025: LD_ADDR_VAR 0 15
35029: PUSH
35030: LD_VAR 0 3
35034: PPUSH
35035: LD_VAR 0 4
35039: PPUSH
35040: CALL_OW 546
35044: ST_TO_ADDR
// if hex [ 1 ] then
35045: LD_VAR 0 15
35049: PUSH
35050: LD_INT 1
35052: ARRAY
35053: IFFALSE 35057
// exit ;
35055: GO 35513
// height := hex [ 2 ] ;
35057: LD_ADDR_VAR 0 13
35061: PUSH
35062: LD_VAR 0 15
35066: PUSH
35067: LD_INT 2
35069: ARRAY
35070: ST_TO_ADDR
// for i = 1 to hexes do
35071: LD_ADDR_VAR 0 7
35075: PUSH
35076: DOUBLE
35077: LD_INT 1
35079: DEC
35080: ST_TO_ADDR
35081: LD_VAR 0 12
35085: PUSH
35086: FOR_TO
35087: IFFALSE 35417
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35089: LD_VAR 0 12
35093: PUSH
35094: LD_VAR 0 7
35098: ARRAY
35099: PUSH
35100: LD_INT 1
35102: ARRAY
35103: PPUSH
35104: LD_VAR 0 12
35108: PUSH
35109: LD_VAR 0 7
35113: ARRAY
35114: PUSH
35115: LD_INT 2
35117: ARRAY
35118: PPUSH
35119: CALL_OW 488
35123: NOT
35124: PUSH
35125: LD_VAR 0 12
35129: PUSH
35130: LD_VAR 0 7
35134: ARRAY
35135: PUSH
35136: LD_INT 1
35138: ARRAY
35139: PPUSH
35140: LD_VAR 0 12
35144: PUSH
35145: LD_VAR 0 7
35149: ARRAY
35150: PUSH
35151: LD_INT 2
35153: ARRAY
35154: PPUSH
35155: CALL_OW 428
35159: PUSH
35160: LD_INT 0
35162: GREATER
35163: OR
35164: PUSH
35165: LD_VAR 0 12
35169: PUSH
35170: LD_VAR 0 7
35174: ARRAY
35175: PUSH
35176: LD_INT 1
35178: ARRAY
35179: PPUSH
35180: LD_VAR 0 12
35184: PUSH
35185: LD_VAR 0 7
35189: ARRAY
35190: PUSH
35191: LD_INT 2
35193: ARRAY
35194: PPUSH
35195: CALL_OW 351
35199: OR
35200: IFFALSE 35206
// exit ;
35202: POP
35203: POP
35204: GO 35513
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35206: LD_ADDR_VAR 0 8
35210: PUSH
35211: LD_VAR 0 12
35215: PUSH
35216: LD_VAR 0 7
35220: ARRAY
35221: PUSH
35222: LD_INT 1
35224: ARRAY
35225: PPUSH
35226: LD_VAR 0 12
35230: PUSH
35231: LD_VAR 0 7
35235: ARRAY
35236: PUSH
35237: LD_INT 2
35239: ARRAY
35240: PPUSH
35241: CALL_OW 546
35245: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35246: LD_VAR 0 8
35250: PUSH
35251: LD_INT 1
35253: ARRAY
35254: PUSH
35255: LD_VAR 0 8
35259: PUSH
35260: LD_INT 2
35262: ARRAY
35263: PUSH
35264: LD_VAR 0 13
35268: PUSH
35269: LD_INT 2
35271: PLUS
35272: GREATER
35273: OR
35274: PUSH
35275: LD_VAR 0 8
35279: PUSH
35280: LD_INT 2
35282: ARRAY
35283: PUSH
35284: LD_VAR 0 13
35288: PUSH
35289: LD_INT 2
35291: MINUS
35292: LESS
35293: OR
35294: PUSH
35295: LD_VAR 0 8
35299: PUSH
35300: LD_INT 3
35302: ARRAY
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: LD_INT 8
35309: PUSH
35310: LD_INT 9
35312: PUSH
35313: LD_INT 10
35315: PUSH
35316: LD_INT 11
35318: PUSH
35319: LD_INT 12
35321: PUSH
35322: LD_INT 13
35324: PUSH
35325: LD_INT 16
35327: PUSH
35328: LD_INT 17
35330: PUSH
35331: LD_INT 18
35333: PUSH
35334: LD_INT 19
35336: PUSH
35337: LD_INT 20
35339: PUSH
35340: LD_INT 21
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: IN
35358: NOT
35359: OR
35360: PUSH
35361: LD_VAR 0 8
35365: PUSH
35366: LD_INT 5
35368: ARRAY
35369: NOT
35370: OR
35371: PUSH
35372: LD_VAR 0 8
35376: PUSH
35377: LD_INT 6
35379: ARRAY
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: LD_INT 7
35389: PUSH
35390: LD_INT 9
35392: PUSH
35393: LD_INT 10
35395: PUSH
35396: LD_INT 11
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: IN
35407: NOT
35408: OR
35409: IFFALSE 35415
// exit ;
35411: POP
35412: POP
35413: GO 35513
// end ;
35415: GO 35086
35417: POP
35418: POP
// side := GetSide ( depot ) ;
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_VAR 0 1
35428: PPUSH
35429: CALL_OW 255
35433: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35434: LD_VAR 0 9
35438: PPUSH
35439: LD_VAR 0 3
35443: PPUSH
35444: LD_VAR 0 4
35448: PPUSH
35449: LD_INT 20
35451: PPUSH
35452: CALL 27834 0 4
35456: PUSH
35457: LD_INT 4
35459: ARRAY
35460: IFFALSE 35464
// exit ;
35462: GO 35513
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 29
35471: PUSH
35472: LD_INT 30
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: IN
35479: PUSH
35480: LD_VAR 0 3
35484: PPUSH
35485: LD_VAR 0 4
35489: PPUSH
35490: LD_VAR 0 9
35494: PPUSH
35495: CALL_OW 440
35499: NOT
35500: AND
35501: IFFALSE 35505
// exit ;
35503: GO 35513
// result := true ;
35505: LD_ADDR_VAR 0 6
35509: PUSH
35510: LD_INT 1
35512: ST_TO_ADDR
// end ;
35513: LD_VAR 0 6
35517: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35518: LD_INT 0
35520: PPUSH
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
35525: PPUSH
35526: PPUSH
35527: PPUSH
35528: PPUSH
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
35533: PPUSH
35534: PPUSH
35535: PPUSH
35536: PPUSH
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
35551: PPUSH
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
35572: PPUSH
35573: PPUSH
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
// result = [ ] ;
35578: LD_ADDR_VAR 0 7
35582: PUSH
35583: EMPTY
35584: ST_TO_ADDR
// temp_list = [ ] ;
35585: LD_ADDR_VAR 0 9
35589: PUSH
35590: EMPTY
35591: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35592: LD_VAR 0 4
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: LD_INT 4
35611: PUSH
35612: LD_INT 5
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: IN
35623: NOT
35624: PUSH
35625: LD_VAR 0 1
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: IN
35640: PUSH
35641: LD_VAR 0 5
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: IN
35660: NOT
35661: AND
35662: OR
35663: IFFALSE 35667
// exit ;
35665: GO 54058
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35667: LD_VAR 0 1
35671: PUSH
35672: LD_INT 6
35674: PUSH
35675: LD_INT 7
35677: PUSH
35678: LD_INT 8
35680: PUSH
35681: LD_INT 13
35683: PUSH
35684: LD_INT 12
35686: PUSH
35687: LD_INT 15
35689: PUSH
35690: LD_INT 11
35692: PUSH
35693: LD_INT 14
35695: PUSH
35696: LD_INT 10
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: IN
35710: IFFALSE 35720
// btype = b_lab ;
35712: LD_ADDR_VAR 0 1
35716: PUSH
35717: LD_INT 6
35719: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35720: LD_VAR 0 6
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: IN
35739: NOT
35740: PUSH
35741: LD_VAR 0 1
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 3
35757: PUSH
35758: LD_INT 6
35760: PUSH
35761: LD_INT 36
35763: PUSH
35764: LD_INT 4
35766: PUSH
35767: LD_INT 5
35769: PUSH
35770: LD_INT 31
35772: PUSH
35773: LD_INT 32
35775: PUSH
35776: LD_INT 33
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: IN
35792: NOT
35793: PUSH
35794: LD_VAR 0 6
35798: PUSH
35799: LD_INT 1
35801: EQUAL
35802: AND
35803: OR
35804: PUSH
35805: LD_VAR 0 1
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: IN
35820: NOT
35821: PUSH
35822: LD_VAR 0 6
35826: PUSH
35827: LD_INT 2
35829: EQUAL
35830: AND
35831: OR
35832: IFFALSE 35842
// mode = 0 ;
35834: LD_ADDR_VAR 0 6
35838: PUSH
35839: LD_INT 0
35841: ST_TO_ADDR
// case mode of 0 :
35842: LD_VAR 0 6
35846: PUSH
35847: LD_INT 0
35849: DOUBLE
35850: EQUAL
35851: IFTRUE 35855
35853: GO 47308
35855: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35856: LD_ADDR_VAR 0 11
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 3
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 2
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36049: LD_ADDR_VAR 0 12
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: NEG
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: NEG
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 3
36217: NEG
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36245: LD_ADDR_VAR 0 13
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: LD_INT 3
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 3
36404: NEG
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 3
36416: NEG
36417: PUSH
36418: LD_INT 3
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36444: LD_ADDR_VAR 0 14
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 3
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 3
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 2
36616: NEG
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36640: LD_ADDR_VAR 0 15
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 1
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 1
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 3
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36833: LD_ADDR_VAR 0 16
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37026: LD_ADDR_VAR 0 17
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37256: LD_ADDR_VAR 0 18
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37486: LD_ADDR_VAR 0 19
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37716: LD_ADDR_VAR 0 20
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 2
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37946: LD_ADDR_VAR 0 21
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: NEG
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: LD_INT 2
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38176: LD_ADDR_VAR 0 22
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38406: LD_ADDR_VAR 0 23
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38686: LD_ADDR_VAR 0 24
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 2
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 3
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 3
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38962: LD_ADDR_VAR 0 25
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 2
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39236: LD_ADDR_VAR 0 26
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 2
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39512: LD_ADDR_VAR 0 27
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39792: LD_ADDR_VAR 0 28
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 2
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 3
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: NEG
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 3
40039: NEG
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40074: LD_ADDR_VAR 0 29
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: LD_INT 3
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 3
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 3
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 3
40318: NEG
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40353: LD_ADDR_VAR 0 30
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 3
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40631: LD_ADDR_VAR 0 31
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 3
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 3
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 3
40874: NEG
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40909: LD_ADDR_VAR 0 32
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 3
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41187: LD_ADDR_VAR 0 33
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 3
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 3
41431: NEG
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41466: LD_ADDR_VAR 0 34
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41746: LD_ADDR_VAR 0 35
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41858: LD_ADDR_VAR 0 36
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41970: LD_ADDR_VAR 0 37
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42082: LD_ADDR_VAR 0 38
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42194: LD_ADDR_VAR 0 39
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42306: LD_ADDR_VAR 0 40
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42418: LD_ADDR_VAR 0 41
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 3
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 3
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 3
42661: PUSH
42662: LD_INT 3
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 3
42727: NEG
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42768: LD_ADDR_VAR 0 42
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 3
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: NEG
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43118: LD_ADDR_VAR 0 43
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43466: LD_ADDR_VAR 0 44
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 3
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 3
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 3
43740: NEG
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 3
43751: NEG
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 3
43763: NEG
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 3
43775: NEG
43776: PUSH
43777: LD_INT 3
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43816: LD_ADDR_VAR 0 45
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 3
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 3
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 3
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 3
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 3
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 3
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44166: LD_ADDR_VAR 0 46
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 3
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44514: LD_ADDR_VAR 0 47
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44665: LD_ADDR_VAR 0 48
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44812: LD_ADDR_VAR 0 49
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44956: LD_ADDR_VAR 0 50
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45100: LD_ADDR_VAR 0 51
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45247: LD_ADDR_VAR 0 52
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45398: LD_ADDR_VAR 0 53
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45628: LD_ADDR_VAR 0 54
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45858: LD_ADDR_VAR 0 55
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46088: LD_ADDR_VAR 0 56
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46318: LD_ADDR_VAR 0 57
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46548: LD_ADDR_VAR 0 58
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46778: LD_ADDR_VAR 0 59
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46866: LD_ADDR_VAR 0 60
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46954: LD_ADDR_VAR 0 61
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47042: LD_ADDR_VAR 0 62
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47130: LD_ADDR_VAR 0 63
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47218: LD_ADDR_VAR 0 64
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: ST_TO_ADDR
// end ; 1 :
47306: GO 53203
47308: LD_INT 1
47310: DOUBLE
47311: EQUAL
47312: IFTRUE 47316
47314: GO 49939
47316: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47317: LD_ADDR_VAR 0 11
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47361: LD_ADDR_VAR 0 12
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47402: LD_ADDR_VAR 0 13
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47442: LD_ADDR_VAR 0 14
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47483: LD_ADDR_VAR 0 15
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47527: LD_ADDR_VAR 0 16
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: NEG
47559: PUSH
47560: LD_INT 3
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47573: LD_ADDR_VAR 0 17
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47617: LD_ADDR_VAR 0 18
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47658: LD_ADDR_VAR 0 19
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47698: LD_ADDR_VAR 0 20
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47739: LD_ADDR_VAR 0 21
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47783: LD_ADDR_VAR 0 22
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 3
47802: NEG
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47829: LD_ADDR_VAR 0 23
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 4
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47873: LD_ADDR_VAR 0 24
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 4
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47914: LD_ADDR_VAR 0 25
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 4
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: LD_INT 4
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47954: LD_ADDR_VAR 0 26
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47995: LD_ADDR_VAR 0 27
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 4
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48039: LD_ADDR_VAR 0 28
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: LD_INT 4
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 4
48070: NEG
48071: PUSH
48072: LD_INT 3
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48085: LD_ADDR_VAR 0 29
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 3
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 4
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 4
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 5
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 5
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 4
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 6
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 6
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 5
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48240: LD_ADDR_VAR 0 30
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 4
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 4
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 4
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 5
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 5
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 5
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 6
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 6
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48383: LD_ADDR_VAR 0 31
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 4
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 4
48430: PUSH
48431: LD_INT 4
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: LD_INT 4
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 5
48450: PUSH
48451: LD_INT 4
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 5
48460: PUSH
48461: LD_INT 5
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 4
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 6
48480: PUSH
48481: LD_INT 5
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 6
48490: PUSH
48491: LD_INT 6
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 5
48500: PUSH
48501: LD_INT 6
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48522: LD_ADDR_VAR 0 32
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 4
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 4
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 5
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 5
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: LD_INT 6
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 6
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 5
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48665: LD_ADDR_VAR 0 33
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 3
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 4
48717: NEG
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 4
48728: NEG
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 4
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 5
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 5
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 5
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 6
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 6
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48820: LD_ADDR_VAR 0 34
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 3
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 4
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 4
48875: NEG
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 4
48887: NEG
48888: PUSH
48889: LD_INT 4
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 4
48899: NEG
48900: PUSH
48901: LD_INT 5
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 5
48911: NEG
48912: PUSH
48913: LD_INT 4
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 5
48923: NEG
48924: PUSH
48925: LD_INT 5
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 5
48935: NEG
48936: PUSH
48937: LD_INT 6
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 6
48947: NEG
48948: PUSH
48949: LD_INT 5
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 6
48959: NEG
48960: PUSH
48961: LD_INT 6
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48983: LD_ADDR_VAR 0 41
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: LIST
49026: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49027: LD_ADDR_VAR 0 42
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49068: LD_ADDR_VAR 0 43
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49108: LD_ADDR_VAR 0 44
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49149: LD_ADDR_VAR 0 45
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49193: LD_ADDR_VAR 0 46
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49239: LD_ADDR_VAR 0 47
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 3
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49272: LD_ADDR_VAR 0 48
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49303: LD_ADDR_VAR 0 49
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49332: LD_ADDR_VAR 0 50
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49361: LD_ADDR_VAR 0 51
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49392: LD_ADDR_VAR 0 52
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 3
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49425: LD_ADDR_VAR 0 53
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 3
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49469: LD_ADDR_VAR 0 54
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49510: LD_ADDR_VAR 0 55
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 3
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49550: LD_ADDR_VAR 0 56
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 3
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49591: LD_ADDR_VAR 0 57
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49635: LD_ADDR_VAR 0 58
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49681: LD_ADDR_VAR 0 59
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49725: LD_ADDR_VAR 0 60
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49766: LD_ADDR_VAR 0 61
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49806: LD_ADDR_VAR 0 62
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49847: LD_ADDR_VAR 0 63
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49891: LD_ADDR_VAR 0 64
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// end ; 2 :
49937: GO 53203
49939: LD_INT 2
49941: DOUBLE
49942: EQUAL
49943: IFTRUE 49947
49945: GO 53202
49947: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49948: LD_ADDR_VAR 0 29
49952: PUSH
49953: LD_INT 4
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 4
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 5
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 5
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 4
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 5
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 4
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 4
50078: PUSH
50079: LD_INT 4
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: PUSH
50089: LD_INT 4
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 4
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 4
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 4
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 4
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 5
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 5
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 4
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 5
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 3
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 4
50287: NEG
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 4
50310: NEG
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 4
50333: NEG
50334: PUSH
50335: LD_INT 4
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 4
50345: NEG
50346: PUSH
50347: LD_INT 5
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: LD_INT 4
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: LD_INT 3
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 4
50381: NEG
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 5
50393: NEG
50394: PUSH
50395: LD_INT 4
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 5
50405: NEG
50406: PUSH
50407: LD_INT 5
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 3
50417: NEG
50418: PUSH
50419: LD_INT 5
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 5
50429: NEG
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50486: LD_ADDR_VAR 0 30
50490: PUSH
50491: LD_INT 4
50493: PUSH
50494: LD_INT 4
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 5
50513: PUSH
50514: LD_INT 4
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 5
50523: PUSH
50524: LD_INT 5
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 4
50533: PUSH
50534: LD_INT 5
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 4
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 5
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 5
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 4
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 4
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 4
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 4
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 4
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 5
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 5
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 5
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: NEG
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: LD_INT 4
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 4
50838: NEG
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 4
50850: NEG
50851: PUSH
50852: LD_INT 4
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 4
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 4
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 4
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 5
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 4
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 5
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 5
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51033: LD_ADDR_VAR 0 31
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 4
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 4
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 5
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 5
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 4
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 5
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 4
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 4
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 4
51235: NEG
51236: PUSH
51237: LD_INT 4
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 4
51247: NEG
51248: PUSH
51249: LD_INT 5
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: LD_INT 4
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 4
51283: NEG
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 5
51295: NEG
51296: PUSH
51297: LD_INT 4
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 5
51307: NEG
51308: PUSH
51309: LD_INT 5
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: LD_INT 5
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 5
51331: NEG
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 4
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 4
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 4
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 5
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 5
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 4
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 5
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51583: LD_ADDR_VAR 0 32
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 4
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 4
51635: NEG
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 5
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 5
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 5
51669: NEG
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: LD_INT 4
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 4
51752: NEG
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 4
51764: NEG
51765: PUSH
51766: LD_INT 4
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 4
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 4
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 5
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 4
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 4
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 5
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 5
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 4
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 4
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 4
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 4
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 5
52025: PUSH
52026: LD_INT 5
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: LD_INT 5
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 4
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 5
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 5
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52130: LD_ADDR_VAR 0 33
52134: PUSH
52135: LD_INT 4
52137: NEG
52138: PUSH
52139: LD_INT 4
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 4
52149: NEG
52150: PUSH
52151: LD_INT 5
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 4
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 3
52173: NEG
52174: PUSH
52175: LD_INT 3
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 4
52185: NEG
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 5
52197: NEG
52198: PUSH
52199: LD_INT 4
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 5
52209: NEG
52210: PUSH
52211: LD_INT 5
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: LD_INT 5
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 5
52233: NEG
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 4
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 4
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 4
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 4
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 5
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 5
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: LD_INT 4
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: LD_INT 4
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: LD_INT 4
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 4
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 4
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 5
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 5
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 5
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52668: LD_ADDR_VAR 0 34
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 4
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 5
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 4
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 3
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 5
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 5
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 4
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 4
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 4
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 4
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 5
52890: PUSH
52891: LD_INT 4
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 5
52900: PUSH
52901: LD_INT 5
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: LD_INT 5
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: LD_INT 4
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 5
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 5
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: LD_INT 4
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 4
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 4
53053: NEG
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 4
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 5
53109: NEG
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 5
53120: NEG
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 5
53132: NEG
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// end ; end ;
53200: GO 53203
53202: POP
// case btype of b_depot , b_warehouse :
53203: LD_VAR 0 1
53207: PUSH
53208: LD_INT 0
53210: DOUBLE
53211: EQUAL
53212: IFTRUE 53222
53214: LD_INT 1
53216: DOUBLE
53217: EQUAL
53218: IFTRUE 53222
53220: GO 53423
53222: POP
// case nation of nation_american :
53223: LD_VAR 0 5
53227: PUSH
53228: LD_INT 1
53230: DOUBLE
53231: EQUAL
53232: IFTRUE 53236
53234: GO 53292
53236: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53237: LD_ADDR_VAR 0 9
53241: PUSH
53242: LD_VAR 0 11
53246: PUSH
53247: LD_VAR 0 12
53251: PUSH
53252: LD_VAR 0 13
53256: PUSH
53257: LD_VAR 0 14
53261: PUSH
53262: LD_VAR 0 15
53266: PUSH
53267: LD_VAR 0 16
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: PUSH
53280: LD_VAR 0 4
53284: PUSH
53285: LD_INT 1
53287: PLUS
53288: ARRAY
53289: ST_TO_ADDR
53290: GO 53421
53292: LD_INT 2
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53300
53298: GO 53356
53300: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53301: LD_ADDR_VAR 0 9
53305: PUSH
53306: LD_VAR 0 17
53310: PUSH
53311: LD_VAR 0 18
53315: PUSH
53316: LD_VAR 0 19
53320: PUSH
53321: LD_VAR 0 20
53325: PUSH
53326: LD_VAR 0 21
53330: PUSH
53331: LD_VAR 0 22
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: PUSH
53344: LD_VAR 0 4
53348: PUSH
53349: LD_INT 1
53351: PLUS
53352: ARRAY
53353: ST_TO_ADDR
53354: GO 53421
53356: LD_INT 3
53358: DOUBLE
53359: EQUAL
53360: IFTRUE 53364
53362: GO 53420
53364: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53365: LD_ADDR_VAR 0 9
53369: PUSH
53370: LD_VAR 0 23
53374: PUSH
53375: LD_VAR 0 24
53379: PUSH
53380: LD_VAR 0 25
53384: PUSH
53385: LD_VAR 0 26
53389: PUSH
53390: LD_VAR 0 27
53394: PUSH
53395: LD_VAR 0 28
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: PUSH
53408: LD_VAR 0 4
53412: PUSH
53413: LD_INT 1
53415: PLUS
53416: ARRAY
53417: ST_TO_ADDR
53418: GO 53421
53420: POP
53421: GO 53976
53423: LD_INT 2
53425: DOUBLE
53426: EQUAL
53427: IFTRUE 53437
53429: LD_INT 3
53431: DOUBLE
53432: EQUAL
53433: IFTRUE 53437
53435: GO 53493
53437: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53438: LD_ADDR_VAR 0 9
53442: PUSH
53443: LD_VAR 0 29
53447: PUSH
53448: LD_VAR 0 30
53452: PUSH
53453: LD_VAR 0 31
53457: PUSH
53458: LD_VAR 0 32
53462: PUSH
53463: LD_VAR 0 33
53467: PUSH
53468: LD_VAR 0 34
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: PUSH
53481: LD_VAR 0 4
53485: PUSH
53486: LD_INT 1
53488: PLUS
53489: ARRAY
53490: ST_TO_ADDR
53491: GO 53976
53493: LD_INT 16
53495: DOUBLE
53496: EQUAL
53497: IFTRUE 53555
53499: LD_INT 17
53501: DOUBLE
53502: EQUAL
53503: IFTRUE 53555
53505: LD_INT 18
53507: DOUBLE
53508: EQUAL
53509: IFTRUE 53555
53511: LD_INT 19
53513: DOUBLE
53514: EQUAL
53515: IFTRUE 53555
53517: LD_INT 22
53519: DOUBLE
53520: EQUAL
53521: IFTRUE 53555
53523: LD_INT 20
53525: DOUBLE
53526: EQUAL
53527: IFTRUE 53555
53529: LD_INT 21
53531: DOUBLE
53532: EQUAL
53533: IFTRUE 53555
53535: LD_INT 23
53537: DOUBLE
53538: EQUAL
53539: IFTRUE 53555
53541: LD_INT 24
53543: DOUBLE
53544: EQUAL
53545: IFTRUE 53555
53547: LD_INT 25
53549: DOUBLE
53550: EQUAL
53551: IFTRUE 53555
53553: GO 53611
53555: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53556: LD_ADDR_VAR 0 9
53560: PUSH
53561: LD_VAR 0 35
53565: PUSH
53566: LD_VAR 0 36
53570: PUSH
53571: LD_VAR 0 37
53575: PUSH
53576: LD_VAR 0 38
53580: PUSH
53581: LD_VAR 0 39
53585: PUSH
53586: LD_VAR 0 40
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: PUSH
53599: LD_VAR 0 4
53603: PUSH
53604: LD_INT 1
53606: PLUS
53607: ARRAY
53608: ST_TO_ADDR
53609: GO 53976
53611: LD_INT 6
53613: DOUBLE
53614: EQUAL
53615: IFTRUE 53667
53617: LD_INT 7
53619: DOUBLE
53620: EQUAL
53621: IFTRUE 53667
53623: LD_INT 8
53625: DOUBLE
53626: EQUAL
53627: IFTRUE 53667
53629: LD_INT 13
53631: DOUBLE
53632: EQUAL
53633: IFTRUE 53667
53635: LD_INT 12
53637: DOUBLE
53638: EQUAL
53639: IFTRUE 53667
53641: LD_INT 15
53643: DOUBLE
53644: EQUAL
53645: IFTRUE 53667
53647: LD_INT 11
53649: DOUBLE
53650: EQUAL
53651: IFTRUE 53667
53653: LD_INT 14
53655: DOUBLE
53656: EQUAL
53657: IFTRUE 53667
53659: LD_INT 10
53661: DOUBLE
53662: EQUAL
53663: IFTRUE 53667
53665: GO 53723
53667: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53668: LD_ADDR_VAR 0 9
53672: PUSH
53673: LD_VAR 0 41
53677: PUSH
53678: LD_VAR 0 42
53682: PUSH
53683: LD_VAR 0 43
53687: PUSH
53688: LD_VAR 0 44
53692: PUSH
53693: LD_VAR 0 45
53697: PUSH
53698: LD_VAR 0 46
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: PUSH
53711: LD_VAR 0 4
53715: PUSH
53716: LD_INT 1
53718: PLUS
53719: ARRAY
53720: ST_TO_ADDR
53721: GO 53976
53723: LD_INT 36
53725: DOUBLE
53726: EQUAL
53727: IFTRUE 53731
53729: GO 53787
53731: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53732: LD_ADDR_VAR 0 9
53736: PUSH
53737: LD_VAR 0 47
53741: PUSH
53742: LD_VAR 0 48
53746: PUSH
53747: LD_VAR 0 49
53751: PUSH
53752: LD_VAR 0 50
53756: PUSH
53757: LD_VAR 0 51
53761: PUSH
53762: LD_VAR 0 52
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: PUSH
53775: LD_VAR 0 4
53779: PUSH
53780: LD_INT 1
53782: PLUS
53783: ARRAY
53784: ST_TO_ADDR
53785: GO 53976
53787: LD_INT 4
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53813
53793: LD_INT 5
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53813
53799: LD_INT 34
53801: DOUBLE
53802: EQUAL
53803: IFTRUE 53813
53805: LD_INT 37
53807: DOUBLE
53808: EQUAL
53809: IFTRUE 53813
53811: GO 53869
53813: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53814: LD_ADDR_VAR 0 9
53818: PUSH
53819: LD_VAR 0 53
53823: PUSH
53824: LD_VAR 0 54
53828: PUSH
53829: LD_VAR 0 55
53833: PUSH
53834: LD_VAR 0 56
53838: PUSH
53839: LD_VAR 0 57
53843: PUSH
53844: LD_VAR 0 58
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: PUSH
53857: LD_VAR 0 4
53861: PUSH
53862: LD_INT 1
53864: PLUS
53865: ARRAY
53866: ST_TO_ADDR
53867: GO 53976
53869: LD_INT 31
53871: DOUBLE
53872: EQUAL
53873: IFTRUE 53919
53875: LD_INT 32
53877: DOUBLE
53878: EQUAL
53879: IFTRUE 53919
53881: LD_INT 33
53883: DOUBLE
53884: EQUAL
53885: IFTRUE 53919
53887: LD_INT 27
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53919
53893: LD_INT 26
53895: DOUBLE
53896: EQUAL
53897: IFTRUE 53919
53899: LD_INT 28
53901: DOUBLE
53902: EQUAL
53903: IFTRUE 53919
53905: LD_INT 29
53907: DOUBLE
53908: EQUAL
53909: IFTRUE 53919
53911: LD_INT 30
53913: DOUBLE
53914: EQUAL
53915: IFTRUE 53919
53917: GO 53975
53919: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53920: LD_ADDR_VAR 0 9
53924: PUSH
53925: LD_VAR 0 59
53929: PUSH
53930: LD_VAR 0 60
53934: PUSH
53935: LD_VAR 0 61
53939: PUSH
53940: LD_VAR 0 62
53944: PUSH
53945: LD_VAR 0 63
53949: PUSH
53950: LD_VAR 0 64
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: PUSH
53963: LD_VAR 0 4
53967: PUSH
53968: LD_INT 1
53970: PLUS
53971: ARRAY
53972: ST_TO_ADDR
53973: GO 53976
53975: POP
// temp_list2 = [ ] ;
53976: LD_ADDR_VAR 0 10
53980: PUSH
53981: EMPTY
53982: ST_TO_ADDR
// for i in temp_list do
53983: LD_ADDR_VAR 0 8
53987: PUSH
53988: LD_VAR 0 9
53992: PUSH
53993: FOR_IN
53994: IFFALSE 54046
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53996: LD_ADDR_VAR 0 10
54000: PUSH
54001: LD_VAR 0 10
54005: PUSH
54006: LD_VAR 0 8
54010: PUSH
54011: LD_INT 1
54013: ARRAY
54014: PUSH
54015: LD_VAR 0 2
54019: PLUS
54020: PUSH
54021: LD_VAR 0 8
54025: PUSH
54026: LD_INT 2
54028: ARRAY
54029: PUSH
54030: LD_VAR 0 3
54034: PLUS
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: ADD
54043: ST_TO_ADDR
54044: GO 53993
54046: POP
54047: POP
// result = temp_list2 ;
54048: LD_ADDR_VAR 0 7
54052: PUSH
54053: LD_VAR 0 10
54057: ST_TO_ADDR
// end ;
54058: LD_VAR 0 7
54062: RET
// export function EnemyInRange ( unit , dist ) ; begin
54063: LD_INT 0
54065: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: LD_VAR 0 1
54075: PPUSH
54076: CALL_OW 255
54080: PPUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: CALL_OW 250
54090: PPUSH
54091: LD_VAR 0 1
54095: PPUSH
54096: CALL_OW 251
54100: PPUSH
54101: LD_VAR 0 2
54105: PPUSH
54106: CALL 27834 0 4
54110: PUSH
54111: LD_INT 4
54113: ARRAY
54114: ST_TO_ADDR
// end ;
54115: LD_VAR 0 3
54119: RET
// export function PlayerSeeMe ( unit ) ; begin
54120: LD_INT 0
54122: PPUSH
// result := See ( your_side , unit ) ;
54123: LD_ADDR_VAR 0 2
54127: PUSH
54128: LD_OWVAR 2
54132: PPUSH
54133: LD_VAR 0 1
54137: PPUSH
54138: CALL_OW 292
54142: ST_TO_ADDR
// end ;
54143: LD_VAR 0 2
54147: RET
// export function ReverseDir ( unit ) ; begin
54148: LD_INT 0
54150: PPUSH
// if not unit then
54151: LD_VAR 0 1
54155: NOT
54156: IFFALSE 54160
// exit ;
54158: GO 54183
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54160: LD_ADDR_VAR 0 2
54164: PUSH
54165: LD_VAR 0 1
54169: PPUSH
54170: CALL_OW 254
54174: PUSH
54175: LD_INT 3
54177: PLUS
54178: PUSH
54179: LD_INT 6
54181: MOD
54182: ST_TO_ADDR
// end ;
54183: LD_VAR 0 2
54187: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54188: LD_INT 0
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
54194: PPUSH
// if not hexes then
54195: LD_VAR 0 2
54199: NOT
54200: IFFALSE 54204
// exit ;
54202: GO 54352
// dist := 9999 ;
54204: LD_ADDR_VAR 0 5
54208: PUSH
54209: LD_INT 9999
54211: ST_TO_ADDR
// for i = 1 to hexes do
54212: LD_ADDR_VAR 0 4
54216: PUSH
54217: DOUBLE
54218: LD_INT 1
54220: DEC
54221: ST_TO_ADDR
54222: LD_VAR 0 2
54226: PUSH
54227: FOR_TO
54228: IFFALSE 54340
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54230: LD_VAR 0 1
54234: PPUSH
54235: LD_VAR 0 2
54239: PUSH
54240: LD_VAR 0 4
54244: ARRAY
54245: PUSH
54246: LD_INT 1
54248: ARRAY
54249: PPUSH
54250: LD_VAR 0 2
54254: PUSH
54255: LD_VAR 0 4
54259: ARRAY
54260: PUSH
54261: LD_INT 2
54263: ARRAY
54264: PPUSH
54265: CALL_OW 297
54269: PUSH
54270: LD_VAR 0 5
54274: LESS
54275: IFFALSE 54338
// begin hex := hexes [ i ] ;
54277: LD_ADDR_VAR 0 7
54281: PUSH
54282: LD_VAR 0 2
54286: PUSH
54287: LD_VAR 0 4
54291: ARRAY
54292: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54293: LD_ADDR_VAR 0 5
54297: PUSH
54298: LD_VAR 0 1
54302: PPUSH
54303: LD_VAR 0 2
54307: PUSH
54308: LD_VAR 0 4
54312: ARRAY
54313: PUSH
54314: LD_INT 1
54316: ARRAY
54317: PPUSH
54318: LD_VAR 0 2
54322: PUSH
54323: LD_VAR 0 4
54327: ARRAY
54328: PUSH
54329: LD_INT 2
54331: ARRAY
54332: PPUSH
54333: CALL_OW 297
54337: ST_TO_ADDR
// end ; end ;
54338: GO 54227
54340: POP
54341: POP
// result := hex ;
54342: LD_ADDR_VAR 0 3
54346: PUSH
54347: LD_VAR 0 7
54351: ST_TO_ADDR
// end ;
54352: LD_VAR 0 3
54356: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54357: LD_INT 0
54359: PPUSH
54360: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54361: LD_VAR 0 1
54365: NOT
54366: PUSH
54367: LD_VAR 0 1
54371: PUSH
54372: LD_INT 21
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 23
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PPUSH
54396: CALL_OW 69
54400: IN
54401: NOT
54402: OR
54403: IFFALSE 54407
// exit ;
54405: GO 54454
// for i = 1 to 3 do
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: DOUBLE
54413: LD_INT 1
54415: DEC
54416: ST_TO_ADDR
54417: LD_INT 3
54419: PUSH
54420: FOR_TO
54421: IFFALSE 54452
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54423: LD_VAR 0 1
54427: PPUSH
54428: CALL_OW 250
54432: PPUSH
54433: LD_VAR 0 1
54437: PPUSH
54438: CALL_OW 251
54442: PPUSH
54443: LD_INT 1
54445: PPUSH
54446: CALL_OW 453
54450: GO 54420
54452: POP
54453: POP
// end ;
54454: LD_VAR 0 2
54458: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54459: LD_INT 0
54461: PPUSH
54462: PPUSH
54463: PPUSH
54464: PPUSH
54465: PPUSH
54466: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54467: LD_VAR 0 1
54471: NOT
54472: PUSH
54473: LD_VAR 0 2
54477: NOT
54478: OR
54479: PUSH
54480: LD_VAR 0 1
54484: PPUSH
54485: CALL_OW 314
54489: OR
54490: IFFALSE 54494
// exit ;
54492: GO 54935
// x := GetX ( enemy_unit ) ;
54494: LD_ADDR_VAR 0 7
54498: PUSH
54499: LD_VAR 0 2
54503: PPUSH
54504: CALL_OW 250
54508: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54509: LD_ADDR_VAR 0 8
54513: PUSH
54514: LD_VAR 0 2
54518: PPUSH
54519: CALL_OW 251
54523: ST_TO_ADDR
// if not x or not y then
54524: LD_VAR 0 7
54528: NOT
54529: PUSH
54530: LD_VAR 0 8
54534: NOT
54535: OR
54536: IFFALSE 54540
// exit ;
54538: GO 54935
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54540: LD_ADDR_VAR 0 6
54544: PUSH
54545: LD_VAR 0 7
54549: PPUSH
54550: LD_INT 0
54552: PPUSH
54553: LD_INT 4
54555: PPUSH
54556: CALL_OW 272
54560: PUSH
54561: LD_VAR 0 8
54565: PPUSH
54566: LD_INT 0
54568: PPUSH
54569: LD_INT 4
54571: PPUSH
54572: CALL_OW 273
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_VAR 0 7
54585: PPUSH
54586: LD_INT 1
54588: PPUSH
54589: LD_INT 4
54591: PPUSH
54592: CALL_OW 272
54596: PUSH
54597: LD_VAR 0 8
54601: PPUSH
54602: LD_INT 1
54604: PPUSH
54605: LD_INT 4
54607: PPUSH
54608: CALL_OW 273
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_VAR 0 7
54621: PPUSH
54622: LD_INT 2
54624: PPUSH
54625: LD_INT 4
54627: PPUSH
54628: CALL_OW 272
54632: PUSH
54633: LD_VAR 0 8
54637: PPUSH
54638: LD_INT 2
54640: PPUSH
54641: LD_INT 4
54643: PPUSH
54644: CALL_OW 273
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_VAR 0 7
54657: PPUSH
54658: LD_INT 3
54660: PPUSH
54661: LD_INT 4
54663: PPUSH
54664: CALL_OW 272
54668: PUSH
54669: LD_VAR 0 8
54673: PPUSH
54674: LD_INT 3
54676: PPUSH
54677: LD_INT 4
54679: PPUSH
54680: CALL_OW 273
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_VAR 0 7
54693: PPUSH
54694: LD_INT 4
54696: PPUSH
54697: LD_INT 4
54699: PPUSH
54700: CALL_OW 272
54704: PUSH
54705: LD_VAR 0 8
54709: PPUSH
54710: LD_INT 4
54712: PPUSH
54713: LD_INT 4
54715: PPUSH
54716: CALL_OW 273
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_VAR 0 7
54729: PPUSH
54730: LD_INT 5
54732: PPUSH
54733: LD_INT 4
54735: PPUSH
54736: CALL_OW 272
54740: PUSH
54741: LD_VAR 0 8
54745: PPUSH
54746: LD_INT 5
54748: PPUSH
54749: LD_INT 4
54751: PPUSH
54752: CALL_OW 273
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// for i = tmp downto 1 do
54769: LD_ADDR_VAR 0 4
54773: PUSH
54774: DOUBLE
54775: LD_VAR 0 6
54779: INC
54780: ST_TO_ADDR
54781: LD_INT 1
54783: PUSH
54784: FOR_DOWNTO
54785: IFFALSE 54886
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54787: LD_VAR 0 6
54791: PUSH
54792: LD_VAR 0 4
54796: ARRAY
54797: PUSH
54798: LD_INT 1
54800: ARRAY
54801: PPUSH
54802: LD_VAR 0 6
54806: PUSH
54807: LD_VAR 0 4
54811: ARRAY
54812: PUSH
54813: LD_INT 2
54815: ARRAY
54816: PPUSH
54817: CALL_OW 488
54821: NOT
54822: PUSH
54823: LD_VAR 0 6
54827: PUSH
54828: LD_VAR 0 4
54832: ARRAY
54833: PUSH
54834: LD_INT 1
54836: ARRAY
54837: PPUSH
54838: LD_VAR 0 6
54842: PUSH
54843: LD_VAR 0 4
54847: ARRAY
54848: PUSH
54849: LD_INT 2
54851: ARRAY
54852: PPUSH
54853: CALL_OW 428
54857: PUSH
54858: LD_INT 0
54860: NONEQUAL
54861: OR
54862: IFFALSE 54884
// tmp := Delete ( tmp , i ) ;
54864: LD_ADDR_VAR 0 6
54868: PUSH
54869: LD_VAR 0 6
54873: PPUSH
54874: LD_VAR 0 4
54878: PPUSH
54879: CALL_OW 3
54883: ST_TO_ADDR
54884: GO 54784
54886: POP
54887: POP
// j := GetClosestHex ( unit , tmp ) ;
54888: LD_ADDR_VAR 0 5
54892: PUSH
54893: LD_VAR 0 1
54897: PPUSH
54898: LD_VAR 0 6
54902: PPUSH
54903: CALL 54188 0 2
54907: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54908: LD_VAR 0 1
54912: PPUSH
54913: LD_VAR 0 5
54917: PUSH
54918: LD_INT 1
54920: ARRAY
54921: PPUSH
54922: LD_VAR 0 5
54926: PUSH
54927: LD_INT 2
54929: ARRAY
54930: PPUSH
54931: CALL_OW 111
// end ;
54935: LD_VAR 0 3
54939: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54940: LD_INT 0
54942: PPUSH
54943: PPUSH
54944: PPUSH
// uc_side = 0 ;
54945: LD_ADDR_OWVAR 20
54949: PUSH
54950: LD_INT 0
54952: ST_TO_ADDR
// uc_nation = 0 ;
54953: LD_ADDR_OWVAR 21
54957: PUSH
54958: LD_INT 0
54960: ST_TO_ADDR
// InitHc_All ( ) ;
54961: CALL_OW 584
// InitVc ;
54965: CALL_OW 20
// if mastodonts then
54969: LD_VAR 0 6
54973: IFFALSE 55040
// for i = 1 to mastodonts do
54975: LD_ADDR_VAR 0 11
54979: PUSH
54980: DOUBLE
54981: LD_INT 1
54983: DEC
54984: ST_TO_ADDR
54985: LD_VAR 0 6
54989: PUSH
54990: FOR_TO
54991: IFFALSE 55038
// begin vc_chassis := 31 ;
54993: LD_ADDR_OWVAR 37
54997: PUSH
54998: LD_INT 31
55000: ST_TO_ADDR
// vc_control := control_rider ;
55001: LD_ADDR_OWVAR 38
55005: PUSH
55006: LD_INT 4
55008: ST_TO_ADDR
// animal := CreateVehicle ;
55009: LD_ADDR_VAR 0 12
55013: PUSH
55014: CALL_OW 45
55018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55019: LD_VAR 0 12
55023: PPUSH
55024: LD_VAR 0 8
55028: PPUSH
55029: LD_INT 0
55031: PPUSH
55032: CALL 57228 0 3
// end ;
55036: GO 54990
55038: POP
55039: POP
// if horses then
55040: LD_VAR 0 5
55044: IFFALSE 55111
// for i = 1 to horses do
55046: LD_ADDR_VAR 0 11
55050: PUSH
55051: DOUBLE
55052: LD_INT 1
55054: DEC
55055: ST_TO_ADDR
55056: LD_VAR 0 5
55060: PUSH
55061: FOR_TO
55062: IFFALSE 55109
// begin hc_class := 21 ;
55064: LD_ADDR_OWVAR 28
55068: PUSH
55069: LD_INT 21
55071: ST_TO_ADDR
// hc_gallery :=  ;
55072: LD_ADDR_OWVAR 33
55076: PUSH
55077: LD_STRING 
55079: ST_TO_ADDR
// animal := CreateHuman ;
55080: LD_ADDR_VAR 0 12
55084: PUSH
55085: CALL_OW 44
55089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55090: LD_VAR 0 12
55094: PPUSH
55095: LD_VAR 0 8
55099: PPUSH
55100: LD_INT 0
55102: PPUSH
55103: CALL 57228 0 3
// end ;
55107: GO 55061
55109: POP
55110: POP
// if birds then
55111: LD_VAR 0 1
55115: IFFALSE 55182
// for i = 1 to birds do
55117: LD_ADDR_VAR 0 11
55121: PUSH
55122: DOUBLE
55123: LD_INT 1
55125: DEC
55126: ST_TO_ADDR
55127: LD_VAR 0 1
55131: PUSH
55132: FOR_TO
55133: IFFALSE 55180
// begin hc_class = 18 ;
55135: LD_ADDR_OWVAR 28
55139: PUSH
55140: LD_INT 18
55142: ST_TO_ADDR
// hc_gallery =  ;
55143: LD_ADDR_OWVAR 33
55147: PUSH
55148: LD_STRING 
55150: ST_TO_ADDR
// animal := CreateHuman ;
55151: LD_ADDR_VAR 0 12
55155: PUSH
55156: CALL_OW 44
55160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55161: LD_VAR 0 12
55165: PPUSH
55166: LD_VAR 0 8
55170: PPUSH
55171: LD_INT 0
55173: PPUSH
55174: CALL 57228 0 3
// end ;
55178: GO 55132
55180: POP
55181: POP
// if tigers then
55182: LD_VAR 0 2
55186: IFFALSE 55270
// for i = 1 to tigers do
55188: LD_ADDR_VAR 0 11
55192: PUSH
55193: DOUBLE
55194: LD_INT 1
55196: DEC
55197: ST_TO_ADDR
55198: LD_VAR 0 2
55202: PUSH
55203: FOR_TO
55204: IFFALSE 55268
// begin hc_class = class_tiger ;
55206: LD_ADDR_OWVAR 28
55210: PUSH
55211: LD_INT 14
55213: ST_TO_ADDR
// hc_gallery =  ;
55214: LD_ADDR_OWVAR 33
55218: PUSH
55219: LD_STRING 
55221: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55222: LD_ADDR_OWVAR 35
55226: PUSH
55227: LD_INT 7
55229: NEG
55230: PPUSH
55231: LD_INT 7
55233: PPUSH
55234: CALL_OW 12
55238: ST_TO_ADDR
// animal := CreateHuman ;
55239: LD_ADDR_VAR 0 12
55243: PUSH
55244: CALL_OW 44
55248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55249: LD_VAR 0 12
55253: PPUSH
55254: LD_VAR 0 8
55258: PPUSH
55259: LD_INT 0
55261: PPUSH
55262: CALL 57228 0 3
// end ;
55266: GO 55203
55268: POP
55269: POP
// if apemans then
55270: LD_VAR 0 3
55274: IFFALSE 55397
// for i = 1 to apemans do
55276: LD_ADDR_VAR 0 11
55280: PUSH
55281: DOUBLE
55282: LD_INT 1
55284: DEC
55285: ST_TO_ADDR
55286: LD_VAR 0 3
55290: PUSH
55291: FOR_TO
55292: IFFALSE 55395
// begin hc_class = class_apeman ;
55294: LD_ADDR_OWVAR 28
55298: PUSH
55299: LD_INT 12
55301: ST_TO_ADDR
// hc_gallery =  ;
55302: LD_ADDR_OWVAR 33
55306: PUSH
55307: LD_STRING 
55309: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55310: LD_ADDR_OWVAR 35
55314: PUSH
55315: LD_INT 5
55317: NEG
55318: PPUSH
55319: LD_INT 5
55321: PPUSH
55322: CALL_OW 12
55326: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55327: LD_ADDR_OWVAR 31
55331: PUSH
55332: LD_INT 1
55334: PPUSH
55335: LD_INT 3
55337: PPUSH
55338: CALL_OW 12
55342: PUSH
55343: LD_INT 1
55345: PPUSH
55346: LD_INT 3
55348: PPUSH
55349: CALL_OW 12
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: ST_TO_ADDR
// animal := CreateHuman ;
55366: LD_ADDR_VAR 0 12
55370: PUSH
55371: CALL_OW 44
55375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55376: LD_VAR 0 12
55380: PPUSH
55381: LD_VAR 0 8
55385: PPUSH
55386: LD_INT 0
55388: PPUSH
55389: CALL 57228 0 3
// end ;
55393: GO 55291
55395: POP
55396: POP
// if enchidnas then
55397: LD_VAR 0 4
55401: IFFALSE 55468
// for i = 1 to enchidnas do
55403: LD_ADDR_VAR 0 11
55407: PUSH
55408: DOUBLE
55409: LD_INT 1
55411: DEC
55412: ST_TO_ADDR
55413: LD_VAR 0 4
55417: PUSH
55418: FOR_TO
55419: IFFALSE 55466
// begin hc_class = 13 ;
55421: LD_ADDR_OWVAR 28
55425: PUSH
55426: LD_INT 13
55428: ST_TO_ADDR
// hc_gallery =  ;
55429: LD_ADDR_OWVAR 33
55433: PUSH
55434: LD_STRING 
55436: ST_TO_ADDR
// animal := CreateHuman ;
55437: LD_ADDR_VAR 0 12
55441: PUSH
55442: CALL_OW 44
55446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55447: LD_VAR 0 12
55451: PPUSH
55452: LD_VAR 0 8
55456: PPUSH
55457: LD_INT 0
55459: PPUSH
55460: CALL 57228 0 3
// end ;
55464: GO 55418
55466: POP
55467: POP
// if fishes then
55468: LD_VAR 0 7
55472: IFFALSE 55539
// for i = 1 to fishes do
55474: LD_ADDR_VAR 0 11
55478: PUSH
55479: DOUBLE
55480: LD_INT 1
55482: DEC
55483: ST_TO_ADDR
55484: LD_VAR 0 7
55488: PUSH
55489: FOR_TO
55490: IFFALSE 55537
// begin hc_class = 20 ;
55492: LD_ADDR_OWVAR 28
55496: PUSH
55497: LD_INT 20
55499: ST_TO_ADDR
// hc_gallery =  ;
55500: LD_ADDR_OWVAR 33
55504: PUSH
55505: LD_STRING 
55507: ST_TO_ADDR
// animal := CreateHuman ;
55508: LD_ADDR_VAR 0 12
55512: PUSH
55513: CALL_OW 44
55517: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55518: LD_VAR 0 12
55522: PPUSH
55523: LD_VAR 0 9
55527: PPUSH
55528: LD_INT 0
55530: PPUSH
55531: CALL 57228 0 3
// end ;
55535: GO 55489
55537: POP
55538: POP
// end ;
55539: LD_VAR 0 10
55543: RET
// export function WantHeal ( sci , unit ) ; begin
55544: LD_INT 0
55546: PPUSH
// if GetTaskList ( sci ) > 0 then
55547: LD_VAR 0 1
55551: PPUSH
55552: CALL_OW 437
55556: PUSH
55557: LD_INT 0
55559: GREATER
55560: IFFALSE 55630
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55562: LD_VAR 0 1
55566: PPUSH
55567: CALL_OW 437
55571: PUSH
55572: LD_INT 1
55574: ARRAY
55575: PUSH
55576: LD_INT 1
55578: ARRAY
55579: PUSH
55580: LD_STRING l
55582: EQUAL
55583: PUSH
55584: LD_VAR 0 1
55588: PPUSH
55589: CALL_OW 437
55593: PUSH
55594: LD_INT 1
55596: ARRAY
55597: PUSH
55598: LD_INT 4
55600: ARRAY
55601: PUSH
55602: LD_VAR 0 2
55606: EQUAL
55607: AND
55608: IFFALSE 55620
// result := true else
55610: LD_ADDR_VAR 0 3
55614: PUSH
55615: LD_INT 1
55617: ST_TO_ADDR
55618: GO 55628
// result := false ;
55620: LD_ADDR_VAR 0 3
55624: PUSH
55625: LD_INT 0
55627: ST_TO_ADDR
// end else
55628: GO 55638
// result := false ;
55630: LD_ADDR_VAR 0 3
55634: PUSH
55635: LD_INT 0
55637: ST_TO_ADDR
// end ;
55638: LD_VAR 0 3
55642: RET
// export function HealTarget ( sci ) ; begin
55643: LD_INT 0
55645: PPUSH
// if not sci then
55646: LD_VAR 0 1
55650: NOT
55651: IFFALSE 55655
// exit ;
55653: GO 55720
// result := 0 ;
55655: LD_ADDR_VAR 0 2
55659: PUSH
55660: LD_INT 0
55662: ST_TO_ADDR
// if GetTaskList ( sci ) then
55663: LD_VAR 0 1
55667: PPUSH
55668: CALL_OW 437
55672: IFFALSE 55720
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 437
55683: PUSH
55684: LD_INT 1
55686: ARRAY
55687: PUSH
55688: LD_INT 1
55690: ARRAY
55691: PUSH
55692: LD_STRING l
55694: EQUAL
55695: IFFALSE 55720
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55697: LD_ADDR_VAR 0 2
55701: PUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL_OW 437
55711: PUSH
55712: LD_INT 1
55714: ARRAY
55715: PUSH
55716: LD_INT 4
55718: ARRAY
55719: ST_TO_ADDR
// end ;
55720: LD_VAR 0 2
55724: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55725: LD_INT 0
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
// if not base_units then
55731: LD_VAR 0 1
55735: NOT
55736: IFFALSE 55740
// exit ;
55738: GO 55827
// result := false ;
55740: LD_ADDR_VAR 0 2
55744: PUSH
55745: LD_INT 0
55747: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55748: LD_ADDR_VAR 0 5
55752: PUSH
55753: LD_VAR 0 1
55757: PPUSH
55758: LD_INT 21
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PPUSH
55768: CALL_OW 72
55772: ST_TO_ADDR
// if not tmp then
55773: LD_VAR 0 5
55777: NOT
55778: IFFALSE 55782
// exit ;
55780: GO 55827
// for i in tmp do
55782: LD_ADDR_VAR 0 3
55786: PUSH
55787: LD_VAR 0 5
55791: PUSH
55792: FOR_IN
55793: IFFALSE 55825
// begin result := EnemyInRange ( i , 22 ) ;
55795: LD_ADDR_VAR 0 2
55799: PUSH
55800: LD_VAR 0 3
55804: PPUSH
55805: LD_INT 22
55807: PPUSH
55808: CALL 54063 0 2
55812: ST_TO_ADDR
// if result then
55813: LD_VAR 0 2
55817: IFFALSE 55823
// exit ;
55819: POP
55820: POP
55821: GO 55827
// end ;
55823: GO 55792
55825: POP
55826: POP
// end ;
55827: LD_VAR 0 2
55831: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55832: LD_INT 0
55834: PPUSH
55835: PPUSH
// if not units then
55836: LD_VAR 0 1
55840: NOT
55841: IFFALSE 55845
// exit ;
55843: GO 55915
// result := [ ] ;
55845: LD_ADDR_VAR 0 3
55849: PUSH
55850: EMPTY
55851: ST_TO_ADDR
// for i in units do
55852: LD_ADDR_VAR 0 4
55856: PUSH
55857: LD_VAR 0 1
55861: PUSH
55862: FOR_IN
55863: IFFALSE 55913
// if GetTag ( i ) = tag then
55865: LD_VAR 0 4
55869: PPUSH
55870: CALL_OW 110
55874: PUSH
55875: LD_VAR 0 2
55879: EQUAL
55880: IFFALSE 55911
// result := Insert ( result , result + 1 , i ) ;
55882: LD_ADDR_VAR 0 3
55886: PUSH
55887: LD_VAR 0 3
55891: PPUSH
55892: LD_VAR 0 3
55896: PUSH
55897: LD_INT 1
55899: PLUS
55900: PPUSH
55901: LD_VAR 0 4
55905: PPUSH
55906: CALL_OW 2
55910: ST_TO_ADDR
55911: GO 55862
55913: POP
55914: POP
// end ;
55915: LD_VAR 0 3
55919: RET
// export function IsDriver ( un ) ; begin
55920: LD_INT 0
55922: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55923: LD_ADDR_VAR 0 2
55927: PUSH
55928: LD_VAR 0 1
55932: PUSH
55933: LD_INT 55
55935: PUSH
55936: EMPTY
55937: LIST
55938: PPUSH
55939: CALL_OW 69
55943: IN
55944: ST_TO_ADDR
// end ;
55945: LD_VAR 0 2
55949: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55950: LD_INT 0
55952: PPUSH
55953: PPUSH
// list := [ ] ;
55954: LD_ADDR_VAR 0 5
55958: PUSH
55959: EMPTY
55960: ST_TO_ADDR
// case d of 0 :
55961: LD_VAR 0 3
55965: PUSH
55966: LD_INT 0
55968: DOUBLE
55969: EQUAL
55970: IFTRUE 55974
55972: GO 56107
55974: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55975: LD_ADDR_VAR 0 5
55979: PUSH
55980: LD_VAR 0 1
55984: PUSH
55985: LD_INT 4
55987: MINUS
55988: PUSH
55989: LD_VAR 0 2
55993: PUSH
55994: LD_INT 4
55996: MINUS
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: PUSH
56006: LD_VAR 0 1
56010: PUSH
56011: LD_INT 3
56013: MINUS
56014: PUSH
56015: LD_VAR 0 2
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: PUSH
56028: LD_VAR 0 1
56032: PUSH
56033: LD_INT 4
56035: PLUS
56036: PUSH
56037: LD_VAR 0 2
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: LIST
56049: PUSH
56050: LD_VAR 0 1
56054: PUSH
56055: LD_INT 3
56057: PLUS
56058: PUSH
56059: LD_VAR 0 2
56063: PUSH
56064: LD_INT 3
56066: PLUS
56067: PUSH
56068: LD_INT 5
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: PUSH
56076: LD_VAR 0 1
56080: PUSH
56081: LD_VAR 0 2
56085: PUSH
56086: LD_INT 4
56088: PLUS
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// end ; 1 :
56105: GO 56805
56107: LD_INT 1
56109: DOUBLE
56110: EQUAL
56111: IFTRUE 56115
56113: GO 56248
56115: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56116: LD_ADDR_VAR 0 5
56120: PUSH
56121: LD_VAR 0 1
56125: PUSH
56126: LD_VAR 0 2
56130: PUSH
56131: LD_INT 4
56133: MINUS
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: LIST
56142: PUSH
56143: LD_VAR 0 1
56147: PUSH
56148: LD_INT 3
56150: MINUS
56151: PUSH
56152: LD_VAR 0 2
56156: PUSH
56157: LD_INT 3
56159: MINUS
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: PUSH
56169: LD_VAR 0 1
56173: PUSH
56174: LD_INT 4
56176: MINUS
56177: PUSH
56178: LD_VAR 0 2
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: PUSH
56191: LD_VAR 0 1
56195: PUSH
56196: LD_VAR 0 2
56200: PUSH
56201: LD_INT 3
56203: PLUS
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: PUSH
56213: LD_VAR 0 1
56217: PUSH
56218: LD_INT 4
56220: PLUS
56221: PUSH
56222: LD_VAR 0 2
56226: PUSH
56227: LD_INT 4
56229: PLUS
56230: PUSH
56231: LD_INT 5
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// end ; 2 :
56246: GO 56805
56248: LD_INT 2
56250: DOUBLE
56251: EQUAL
56252: IFTRUE 56256
56254: GO 56385
56256: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56257: LD_ADDR_VAR 0 5
56261: PUSH
56262: LD_VAR 0 1
56266: PUSH
56267: LD_VAR 0 2
56271: PUSH
56272: LD_INT 3
56274: MINUS
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: PUSH
56284: LD_VAR 0 1
56288: PUSH
56289: LD_INT 4
56291: PLUS
56292: PUSH
56293: LD_VAR 0 2
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: LIST
56305: PUSH
56306: LD_VAR 0 1
56310: PUSH
56311: LD_VAR 0 2
56315: PUSH
56316: LD_INT 4
56318: PLUS
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: PUSH
56328: LD_VAR 0 1
56332: PUSH
56333: LD_INT 3
56335: MINUS
56336: PUSH
56337: LD_VAR 0 2
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: PUSH
56350: LD_VAR 0 1
56354: PUSH
56355: LD_INT 4
56357: MINUS
56358: PUSH
56359: LD_VAR 0 2
56363: PUSH
56364: LD_INT 4
56366: MINUS
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// end ; 3 :
56383: GO 56805
56385: LD_INT 3
56387: DOUBLE
56388: EQUAL
56389: IFTRUE 56393
56391: GO 56526
56393: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56394: LD_ADDR_VAR 0 5
56398: PUSH
56399: LD_VAR 0 1
56403: PUSH
56404: LD_INT 3
56406: PLUS
56407: PUSH
56408: LD_VAR 0 2
56412: PUSH
56413: LD_INT 4
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: PUSH
56421: LD_VAR 0 1
56425: PUSH
56426: LD_INT 4
56428: PLUS
56429: PUSH
56430: LD_VAR 0 2
56434: PUSH
56435: LD_INT 4
56437: PLUS
56438: PUSH
56439: LD_INT 5
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: PUSH
56447: LD_VAR 0 1
56451: PUSH
56452: LD_INT 4
56454: MINUS
56455: PUSH
56456: LD_VAR 0 2
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: PUSH
56469: LD_VAR 0 1
56473: PUSH
56474: LD_VAR 0 2
56478: PUSH
56479: LD_INT 4
56481: MINUS
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: LIST
56490: PUSH
56491: LD_VAR 0 1
56495: PUSH
56496: LD_INT 3
56498: MINUS
56499: PUSH
56500: LD_VAR 0 2
56504: PUSH
56505: LD_INT 3
56507: MINUS
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// end ; 4 :
56524: GO 56805
56526: LD_INT 4
56528: DOUBLE
56529: EQUAL
56530: IFTRUE 56534
56532: GO 56667
56534: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56535: LD_ADDR_VAR 0 5
56539: PUSH
56540: LD_VAR 0 1
56544: PUSH
56545: LD_VAR 0 2
56549: PUSH
56550: LD_INT 4
56552: PLUS
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: LIST
56561: PUSH
56562: LD_VAR 0 1
56566: PUSH
56567: LD_INT 3
56569: PLUS
56570: PUSH
56571: LD_VAR 0 2
56575: PUSH
56576: LD_INT 3
56578: PLUS
56579: PUSH
56580: LD_INT 5
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: PUSH
56588: LD_VAR 0 1
56592: PUSH
56593: LD_INT 4
56595: PLUS
56596: PUSH
56597: LD_VAR 0 2
56601: PUSH
56602: LD_INT 4
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: PUSH
56610: LD_VAR 0 1
56614: PUSH
56615: LD_VAR 0 2
56619: PUSH
56620: LD_INT 3
56622: MINUS
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: LIST
56631: PUSH
56632: LD_VAR 0 1
56636: PUSH
56637: LD_INT 4
56639: MINUS
56640: PUSH
56641: LD_VAR 0 2
56645: PUSH
56646: LD_INT 4
56648: MINUS
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: ST_TO_ADDR
// end ; 5 :
56665: GO 56805
56667: LD_INT 5
56669: DOUBLE
56670: EQUAL
56671: IFTRUE 56675
56673: GO 56804
56675: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56676: LD_ADDR_VAR 0 5
56680: PUSH
56681: LD_VAR 0 1
56685: PUSH
56686: LD_INT 4
56688: MINUS
56689: PUSH
56690: LD_VAR 0 2
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: PUSH
56703: LD_VAR 0 1
56707: PUSH
56708: LD_VAR 0 2
56712: PUSH
56713: LD_INT 4
56715: MINUS
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: PUSH
56725: LD_VAR 0 1
56729: PUSH
56730: LD_INT 4
56732: PLUS
56733: PUSH
56734: LD_VAR 0 2
56738: PUSH
56739: LD_INT 4
56741: PLUS
56742: PUSH
56743: LD_INT 5
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: PUSH
56751: LD_VAR 0 1
56755: PUSH
56756: LD_INT 3
56758: PLUS
56759: PUSH
56760: LD_VAR 0 2
56764: PUSH
56765: LD_INT 4
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: PUSH
56773: LD_VAR 0 1
56777: PUSH
56778: LD_VAR 0 2
56782: PUSH
56783: LD_INT 3
56785: PLUS
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// end ; end ;
56802: GO 56805
56804: POP
// result := list ;
56805: LD_ADDR_VAR 0 4
56809: PUSH
56810: LD_VAR 0 5
56814: ST_TO_ADDR
// end ;
56815: LD_VAR 0 4
56819: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56820: LD_INT 0
56822: PPUSH
56823: PPUSH
56824: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56825: LD_VAR 0 1
56829: NOT
56830: PUSH
56831: LD_VAR 0 2
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 3
56844: PUSH
56845: LD_INT 4
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: IN
56854: NOT
56855: OR
56856: IFFALSE 56860
// exit ;
56858: GO 56952
// tmp := [ ] ;
56860: LD_ADDR_VAR 0 5
56864: PUSH
56865: EMPTY
56866: ST_TO_ADDR
// for i in units do
56867: LD_ADDR_VAR 0 4
56871: PUSH
56872: LD_VAR 0 1
56876: PUSH
56877: FOR_IN
56878: IFFALSE 56921
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56880: LD_ADDR_VAR 0 5
56884: PUSH
56885: LD_VAR 0 5
56889: PPUSH
56890: LD_VAR 0 5
56894: PUSH
56895: LD_INT 1
56897: PLUS
56898: PPUSH
56899: LD_VAR 0 4
56903: PPUSH
56904: LD_VAR 0 2
56908: PPUSH
56909: CALL_OW 259
56913: PPUSH
56914: CALL_OW 2
56918: ST_TO_ADDR
56919: GO 56877
56921: POP
56922: POP
// if not tmp then
56923: LD_VAR 0 5
56927: NOT
56928: IFFALSE 56932
// exit ;
56930: GO 56952
// result := SortListByListDesc ( units , tmp ) ;
56932: LD_ADDR_VAR 0 3
56936: PUSH
56937: LD_VAR 0 1
56941: PPUSH
56942: LD_VAR 0 5
56946: PPUSH
56947: CALL_OW 77
56951: ST_TO_ADDR
// end ;
56952: LD_VAR 0 3
56956: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56957: LD_INT 0
56959: PPUSH
56960: PPUSH
56961: PPUSH
// result := false ;
56962: LD_ADDR_VAR 0 3
56966: PUSH
56967: LD_INT 0
56969: ST_TO_ADDR
// x := GetX ( building ) ;
56970: LD_ADDR_VAR 0 4
56974: PUSH
56975: LD_VAR 0 2
56979: PPUSH
56980: CALL_OW 250
56984: ST_TO_ADDR
// y := GetY ( building ) ;
56985: LD_ADDR_VAR 0 5
56989: PUSH
56990: LD_VAR 0 2
56994: PPUSH
56995: CALL_OW 251
56999: ST_TO_ADDR
// if not building or not x or not y then
57000: LD_VAR 0 2
57004: NOT
57005: PUSH
57006: LD_VAR 0 4
57010: NOT
57011: OR
57012: PUSH
57013: LD_VAR 0 5
57017: NOT
57018: OR
57019: IFFALSE 57023
// exit ;
57021: GO 57115
// if GetTaskList ( unit ) then
57023: LD_VAR 0 1
57027: PPUSH
57028: CALL_OW 437
57032: IFFALSE 57115
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57034: LD_STRING e
57036: PUSH
57037: LD_VAR 0 1
57041: PPUSH
57042: CALL_OW 437
57046: PUSH
57047: LD_INT 1
57049: ARRAY
57050: PUSH
57051: LD_INT 1
57053: ARRAY
57054: EQUAL
57055: PUSH
57056: LD_VAR 0 4
57060: PUSH
57061: LD_VAR 0 1
57065: PPUSH
57066: CALL_OW 437
57070: PUSH
57071: LD_INT 1
57073: ARRAY
57074: PUSH
57075: LD_INT 2
57077: ARRAY
57078: EQUAL
57079: AND
57080: PUSH
57081: LD_VAR 0 5
57085: PUSH
57086: LD_VAR 0 1
57090: PPUSH
57091: CALL_OW 437
57095: PUSH
57096: LD_INT 1
57098: ARRAY
57099: PUSH
57100: LD_INT 3
57102: ARRAY
57103: EQUAL
57104: AND
57105: IFFALSE 57115
// result := true end ;
57107: LD_ADDR_VAR 0 3
57111: PUSH
57112: LD_INT 1
57114: ST_TO_ADDR
// end ;
57115: LD_VAR 0 3
57119: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57120: LD_INT 0
57122: PPUSH
// result := false ;
57123: LD_ADDR_VAR 0 4
57127: PUSH
57128: LD_INT 0
57130: ST_TO_ADDR
// if GetTaskList ( unit ) then
57131: LD_VAR 0 1
57135: PPUSH
57136: CALL_OW 437
57140: IFFALSE 57223
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57142: LD_STRING M
57144: PUSH
57145: LD_VAR 0 1
57149: PPUSH
57150: CALL_OW 437
57154: PUSH
57155: LD_INT 1
57157: ARRAY
57158: PUSH
57159: LD_INT 1
57161: ARRAY
57162: EQUAL
57163: PUSH
57164: LD_VAR 0 2
57168: PUSH
57169: LD_VAR 0 1
57173: PPUSH
57174: CALL_OW 437
57178: PUSH
57179: LD_INT 1
57181: ARRAY
57182: PUSH
57183: LD_INT 2
57185: ARRAY
57186: EQUAL
57187: AND
57188: PUSH
57189: LD_VAR 0 3
57193: PUSH
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL_OW 437
57203: PUSH
57204: LD_INT 1
57206: ARRAY
57207: PUSH
57208: LD_INT 3
57210: ARRAY
57211: EQUAL
57212: AND
57213: IFFALSE 57223
// result := true ;
57215: LD_ADDR_VAR 0 4
57219: PUSH
57220: LD_INT 1
57222: ST_TO_ADDR
// end ; end ;
57223: LD_VAR 0 4
57227: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57228: LD_INT 0
57230: PPUSH
57231: PPUSH
57232: PPUSH
57233: PPUSH
// if not unit or not area then
57234: LD_VAR 0 1
57238: NOT
57239: PUSH
57240: LD_VAR 0 2
57244: NOT
57245: OR
57246: IFFALSE 57250
// exit ;
57248: GO 57414
// tmp := AreaToList ( area , i ) ;
57250: LD_ADDR_VAR 0 6
57254: PUSH
57255: LD_VAR 0 2
57259: PPUSH
57260: LD_VAR 0 5
57264: PPUSH
57265: CALL_OW 517
57269: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57270: LD_ADDR_VAR 0 5
57274: PUSH
57275: DOUBLE
57276: LD_INT 1
57278: DEC
57279: ST_TO_ADDR
57280: LD_VAR 0 6
57284: PUSH
57285: LD_INT 1
57287: ARRAY
57288: PUSH
57289: FOR_TO
57290: IFFALSE 57412
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57292: LD_ADDR_VAR 0 7
57296: PUSH
57297: LD_VAR 0 6
57301: PUSH
57302: LD_INT 1
57304: ARRAY
57305: PUSH
57306: LD_VAR 0 5
57310: ARRAY
57311: PUSH
57312: LD_VAR 0 6
57316: PUSH
57317: LD_INT 2
57319: ARRAY
57320: PUSH
57321: LD_VAR 0 5
57325: ARRAY
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57331: LD_VAR 0 7
57335: PUSH
57336: LD_INT 1
57338: ARRAY
57339: PPUSH
57340: LD_VAR 0 7
57344: PUSH
57345: LD_INT 2
57347: ARRAY
57348: PPUSH
57349: CALL_OW 428
57353: PUSH
57354: LD_INT 0
57356: EQUAL
57357: IFFALSE 57410
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57359: LD_VAR 0 1
57363: PPUSH
57364: LD_VAR 0 7
57368: PUSH
57369: LD_INT 1
57371: ARRAY
57372: PPUSH
57373: LD_VAR 0 7
57377: PUSH
57378: LD_INT 2
57380: ARRAY
57381: PPUSH
57382: LD_VAR 0 3
57386: PPUSH
57387: CALL_OW 48
// result := IsPlaced ( unit ) ;
57391: LD_ADDR_VAR 0 4
57395: PUSH
57396: LD_VAR 0 1
57400: PPUSH
57401: CALL_OW 305
57405: ST_TO_ADDR
// exit ;
57406: POP
57407: POP
57408: GO 57414
// end ; end ;
57410: GO 57289
57412: POP
57413: POP
// end ;
57414: LD_VAR 0 4
57418: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57419: LD_INT 0
57421: PPUSH
57422: PPUSH
57423: PPUSH
// if not side or side > 8 then
57424: LD_VAR 0 1
57428: NOT
57429: PUSH
57430: LD_VAR 0 1
57434: PUSH
57435: LD_INT 8
57437: GREATER
57438: OR
57439: IFFALSE 57443
// exit ;
57441: GO 57630
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57443: LD_ADDR_VAR 0 4
57447: PUSH
57448: LD_INT 22
57450: PUSH
57451: LD_VAR 0 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 21
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PPUSH
57474: CALL_OW 69
57478: ST_TO_ADDR
// if not tmp then
57479: LD_VAR 0 4
57483: NOT
57484: IFFALSE 57488
// exit ;
57486: GO 57630
// enable_addtolog := true ;
57488: LD_ADDR_OWVAR 81
57492: PUSH
57493: LD_INT 1
57495: ST_TO_ADDR
// AddToLog ( [ ) ;
57496: LD_STRING [
57498: PPUSH
57499: CALL_OW 561
// for i in tmp do
57503: LD_ADDR_VAR 0 3
57507: PUSH
57508: LD_VAR 0 4
57512: PUSH
57513: FOR_IN
57514: IFFALSE 57621
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57516: LD_STRING [
57518: PUSH
57519: LD_VAR 0 3
57523: PPUSH
57524: CALL_OW 266
57528: STR
57529: PUSH
57530: LD_STRING , 
57532: STR
57533: PUSH
57534: LD_VAR 0 3
57538: PPUSH
57539: CALL_OW 250
57543: STR
57544: PUSH
57545: LD_STRING , 
57547: STR
57548: PUSH
57549: LD_VAR 0 3
57553: PPUSH
57554: CALL_OW 251
57558: STR
57559: PUSH
57560: LD_STRING , 
57562: STR
57563: PUSH
57564: LD_VAR 0 3
57568: PPUSH
57569: CALL_OW 254
57573: STR
57574: PUSH
57575: LD_STRING , 
57577: STR
57578: PUSH
57579: LD_VAR 0 3
57583: PPUSH
57584: LD_INT 1
57586: PPUSH
57587: CALL_OW 268
57591: STR
57592: PUSH
57593: LD_STRING , 
57595: STR
57596: PUSH
57597: LD_VAR 0 3
57601: PPUSH
57602: LD_INT 2
57604: PPUSH
57605: CALL_OW 268
57609: STR
57610: PUSH
57611: LD_STRING ],
57613: STR
57614: PPUSH
57615: CALL_OW 561
// end ;
57619: GO 57513
57621: POP
57622: POP
// AddToLog ( ]; ) ;
57623: LD_STRING ];
57625: PPUSH
57626: CALL_OW 561
// end ;
57630: LD_VAR 0 2
57634: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57635: LD_INT 0
57637: PPUSH
57638: PPUSH
57639: PPUSH
57640: PPUSH
57641: PPUSH
// if not area or not rate or not max then
57642: LD_VAR 0 1
57646: NOT
57647: PUSH
57648: LD_VAR 0 2
57652: NOT
57653: OR
57654: PUSH
57655: LD_VAR 0 4
57659: NOT
57660: OR
57661: IFFALSE 57665
// exit ;
57663: GO 57857
// while 1 do
57665: LD_INT 1
57667: IFFALSE 57857
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57669: LD_ADDR_VAR 0 9
57673: PUSH
57674: LD_VAR 0 1
57678: PPUSH
57679: LD_INT 1
57681: PPUSH
57682: CALL_OW 287
57686: PUSH
57687: LD_INT 10
57689: MUL
57690: ST_TO_ADDR
// r := rate / 10 ;
57691: LD_ADDR_VAR 0 7
57695: PUSH
57696: LD_VAR 0 2
57700: PUSH
57701: LD_INT 10
57703: DIVREAL
57704: ST_TO_ADDR
// time := 1 1$00 ;
57705: LD_ADDR_VAR 0 8
57709: PUSH
57710: LD_INT 2100
57712: ST_TO_ADDR
// if amount < min then
57713: LD_VAR 0 9
57717: PUSH
57718: LD_VAR 0 3
57722: LESS
57723: IFFALSE 57741
// r := r * 2 else
57725: LD_ADDR_VAR 0 7
57729: PUSH
57730: LD_VAR 0 7
57734: PUSH
57735: LD_INT 2
57737: MUL
57738: ST_TO_ADDR
57739: GO 57767
// if amount > max then
57741: LD_VAR 0 9
57745: PUSH
57746: LD_VAR 0 4
57750: GREATER
57751: IFFALSE 57767
// r := r / 2 ;
57753: LD_ADDR_VAR 0 7
57757: PUSH
57758: LD_VAR 0 7
57762: PUSH
57763: LD_INT 2
57765: DIVREAL
57766: ST_TO_ADDR
// time := time / r ;
57767: LD_ADDR_VAR 0 8
57771: PUSH
57772: LD_VAR 0 8
57776: PUSH
57777: LD_VAR 0 7
57781: DIVREAL
57782: ST_TO_ADDR
// if time < 0 then
57783: LD_VAR 0 8
57787: PUSH
57788: LD_INT 0
57790: LESS
57791: IFFALSE 57808
// time := time * - 1 ;
57793: LD_ADDR_VAR 0 8
57797: PUSH
57798: LD_VAR 0 8
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: MUL
57807: ST_TO_ADDR
// wait ( time ) ;
57808: LD_VAR 0 8
57812: PPUSH
57813: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57817: LD_INT 35
57819: PPUSH
57820: LD_INT 875
57822: PPUSH
57823: CALL_OW 12
57827: PPUSH
57828: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57832: LD_INT 1
57834: PPUSH
57835: LD_INT 5
57837: PPUSH
57838: CALL_OW 12
57842: PPUSH
57843: LD_VAR 0 1
57847: PPUSH
57848: LD_INT 1
57850: PPUSH
57851: CALL_OW 55
// end ;
57855: GO 57665
// end ;
57857: LD_VAR 0 5
57861: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57862: LD_INT 0
57864: PPUSH
57865: PPUSH
57866: PPUSH
57867: PPUSH
57868: PPUSH
57869: PPUSH
57870: PPUSH
57871: PPUSH
// if not turrets or not factories then
57872: LD_VAR 0 1
57876: NOT
57877: PUSH
57878: LD_VAR 0 2
57882: NOT
57883: OR
57884: IFFALSE 57888
// exit ;
57886: GO 58195
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57888: LD_ADDR_VAR 0 10
57892: PUSH
57893: LD_INT 5
57895: PUSH
57896: LD_INT 6
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: LD_INT 5
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 24
57930: PUSH
57931: LD_INT 25
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 23
57940: PUSH
57941: LD_INT 27
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 42
57954: PUSH
57955: LD_INT 43
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 44
57964: PUSH
57965: LD_INT 46
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 45
57974: PUSH
57975: LD_INT 47
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: ST_TO_ADDR
// result := [ ] ;
57992: LD_ADDR_VAR 0 3
57996: PUSH
57997: EMPTY
57998: ST_TO_ADDR
// for i in turrets do
57999: LD_ADDR_VAR 0 4
58003: PUSH
58004: LD_VAR 0 1
58008: PUSH
58009: FOR_IN
58010: IFFALSE 58193
// begin nat := GetNation ( i ) ;
58012: LD_ADDR_VAR 0 7
58016: PUSH
58017: LD_VAR 0 4
58021: PPUSH
58022: CALL_OW 248
58026: ST_TO_ADDR
// weapon := 0 ;
58027: LD_ADDR_VAR 0 8
58031: PUSH
58032: LD_INT 0
58034: ST_TO_ADDR
// if not nat then
58035: LD_VAR 0 7
58039: NOT
58040: IFFALSE 58044
// continue ;
58042: GO 58009
// for j in list [ nat ] do
58044: LD_ADDR_VAR 0 5
58048: PUSH
58049: LD_VAR 0 10
58053: PUSH
58054: LD_VAR 0 7
58058: ARRAY
58059: PUSH
58060: FOR_IN
58061: IFFALSE 58102
// if GetBWeapon ( i ) = j [ 1 ] then
58063: LD_VAR 0 4
58067: PPUSH
58068: CALL_OW 269
58072: PUSH
58073: LD_VAR 0 5
58077: PUSH
58078: LD_INT 1
58080: ARRAY
58081: EQUAL
58082: IFFALSE 58100
// begin weapon := j [ 2 ] ;
58084: LD_ADDR_VAR 0 8
58088: PUSH
58089: LD_VAR 0 5
58093: PUSH
58094: LD_INT 2
58096: ARRAY
58097: ST_TO_ADDR
// break ;
58098: GO 58102
// end ;
58100: GO 58060
58102: POP
58103: POP
// if not weapon then
58104: LD_VAR 0 8
58108: NOT
58109: IFFALSE 58113
// continue ;
58111: GO 58009
// for k in factories do
58113: LD_ADDR_VAR 0 6
58117: PUSH
58118: LD_VAR 0 2
58122: PUSH
58123: FOR_IN
58124: IFFALSE 58189
// begin weapons := AvailableWeaponList ( k ) ;
58126: LD_ADDR_VAR 0 9
58130: PUSH
58131: LD_VAR 0 6
58135: PPUSH
58136: CALL_OW 478
58140: ST_TO_ADDR
// if not weapons then
58141: LD_VAR 0 9
58145: NOT
58146: IFFALSE 58150
// continue ;
58148: GO 58123
// if weapon in weapons then
58150: LD_VAR 0 8
58154: PUSH
58155: LD_VAR 0 9
58159: IN
58160: IFFALSE 58187
// begin result := [ i , weapon ] ;
58162: LD_ADDR_VAR 0 3
58166: PUSH
58167: LD_VAR 0 4
58171: PUSH
58172: LD_VAR 0 8
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// exit ;
58181: POP
58182: POP
58183: POP
58184: POP
58185: GO 58195
// end ; end ;
58187: GO 58123
58189: POP
58190: POP
// end ;
58191: GO 58009
58193: POP
58194: POP
// end ;
58195: LD_VAR 0 3
58199: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58200: LD_INT 0
58202: PPUSH
// if not side or side > 8 then
58203: LD_VAR 0 3
58207: NOT
58208: PUSH
58209: LD_VAR 0 3
58213: PUSH
58214: LD_INT 8
58216: GREATER
58217: OR
58218: IFFALSE 58222
// exit ;
58220: GO 58281
// if not range then
58222: LD_VAR 0 4
58226: NOT
58227: IFFALSE 58238
// range := - 12 ;
58229: LD_ADDR_VAR 0 4
58233: PUSH
58234: LD_INT 12
58236: NEG
58237: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58238: LD_VAR 0 1
58242: PPUSH
58243: LD_VAR 0 2
58247: PPUSH
58248: LD_VAR 0 3
58252: PPUSH
58253: LD_VAR 0 4
58257: PPUSH
58258: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58262: LD_VAR 0 1
58266: PPUSH
58267: LD_VAR 0 2
58271: PPUSH
58272: LD_VAR 0 3
58276: PPUSH
58277: CALL_OW 331
// end ;
58281: LD_VAR 0 5
58285: RET
// export function Video ( mode ) ; begin
58286: LD_INT 0
58288: PPUSH
// ingame_video = mode ;
58289: LD_ADDR_OWVAR 52
58293: PUSH
58294: LD_VAR 0 1
58298: ST_TO_ADDR
// interface_hidden = mode ;
58299: LD_ADDR_OWVAR 54
58303: PUSH
58304: LD_VAR 0 1
58308: ST_TO_ADDR
// end ;
58309: LD_VAR 0 2
58313: RET
// export function Join ( array , element ) ; begin
58314: LD_INT 0
58316: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58317: LD_ADDR_VAR 0 3
58321: PUSH
58322: LD_VAR 0 1
58326: PPUSH
58327: LD_VAR 0 1
58331: PUSH
58332: LD_INT 1
58334: PLUS
58335: PPUSH
58336: LD_VAR 0 2
58340: PPUSH
58341: CALL_OW 1
58345: ST_TO_ADDR
// end ;
58346: LD_VAR 0 3
58350: RET
// export function JoinUnion ( array , element ) ; begin
58351: LD_INT 0
58353: PPUSH
// result := array union element ;
58354: LD_ADDR_VAR 0 3
58358: PUSH
58359: LD_VAR 0 1
58363: PUSH
58364: LD_VAR 0 2
58368: UNION
58369: ST_TO_ADDR
// end ;
58370: LD_VAR 0 3
58374: RET
// export function GetBehemoths ( side ) ; begin
58375: LD_INT 0
58377: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58378: LD_ADDR_VAR 0 2
58382: PUSH
58383: LD_INT 22
58385: PUSH
58386: LD_VAR 0 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 31
58397: PUSH
58398: LD_INT 25
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PPUSH
58409: CALL_OW 69
58413: ST_TO_ADDR
// end ;
58414: LD_VAR 0 2
58418: RET
// export function Shuffle ( array ) ; var i , index ; begin
58419: LD_INT 0
58421: PPUSH
58422: PPUSH
58423: PPUSH
// result := [ ] ;
58424: LD_ADDR_VAR 0 2
58428: PUSH
58429: EMPTY
58430: ST_TO_ADDR
// if not array then
58431: LD_VAR 0 1
58435: NOT
58436: IFFALSE 58440
// exit ;
58438: GO 58539
// Randomize ;
58440: CALL_OW 10
// for i = array downto 1 do
58444: LD_ADDR_VAR 0 3
58448: PUSH
58449: DOUBLE
58450: LD_VAR 0 1
58454: INC
58455: ST_TO_ADDR
58456: LD_INT 1
58458: PUSH
58459: FOR_DOWNTO
58460: IFFALSE 58537
// begin index := rand ( 1 , array ) ;
58462: LD_ADDR_VAR 0 4
58466: PUSH
58467: LD_INT 1
58469: PPUSH
58470: LD_VAR 0 1
58474: PPUSH
58475: CALL_OW 12
58479: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58480: LD_ADDR_VAR 0 2
58484: PUSH
58485: LD_VAR 0 2
58489: PPUSH
58490: LD_VAR 0 2
58494: PUSH
58495: LD_INT 1
58497: PLUS
58498: PPUSH
58499: LD_VAR 0 1
58503: PUSH
58504: LD_VAR 0 4
58508: ARRAY
58509: PPUSH
58510: CALL_OW 2
58514: ST_TO_ADDR
// array := Delete ( array , index ) ;
58515: LD_ADDR_VAR 0 1
58519: PUSH
58520: LD_VAR 0 1
58524: PPUSH
58525: LD_VAR 0 4
58529: PPUSH
58530: CALL_OW 3
58534: ST_TO_ADDR
// end ;
58535: GO 58459
58537: POP
58538: POP
// end ;
58539: LD_VAR 0 2
58543: RET
// export function GetBaseMaterials ( base ) ; begin
58544: LD_INT 0
58546: PPUSH
// result := [ 0 , 0 , 0 ] ;
58547: LD_ADDR_VAR 0 2
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: ST_TO_ADDR
// if not base then
58566: LD_VAR 0 1
58570: NOT
58571: IFFALSE 58575
// exit ;
58573: GO 58624
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58575: LD_ADDR_VAR 0 2
58579: PUSH
58580: LD_VAR 0 1
58584: PPUSH
58585: LD_INT 1
58587: PPUSH
58588: CALL_OW 275
58592: PUSH
58593: LD_VAR 0 1
58597: PPUSH
58598: LD_INT 2
58600: PPUSH
58601: CALL_OW 275
58605: PUSH
58606: LD_VAR 0 1
58610: PPUSH
58611: LD_INT 3
58613: PPUSH
58614: CALL_OW 275
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: ST_TO_ADDR
// end ;
58624: LD_VAR 0 2
58628: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58629: LD_INT 0
58631: PPUSH
58632: PPUSH
// result := array ;
58633: LD_ADDR_VAR 0 3
58637: PUSH
58638: LD_VAR 0 1
58642: ST_TO_ADDR
// if size > 0 then
58643: LD_VAR 0 2
58647: PUSH
58648: LD_INT 0
58650: GREATER
58651: IFFALSE 58697
// for i := array downto size do
58653: LD_ADDR_VAR 0 4
58657: PUSH
58658: DOUBLE
58659: LD_VAR 0 1
58663: INC
58664: ST_TO_ADDR
58665: LD_VAR 0 2
58669: PUSH
58670: FOR_DOWNTO
58671: IFFALSE 58695
// result := Delete ( result , result ) ;
58673: LD_ADDR_VAR 0 3
58677: PUSH
58678: LD_VAR 0 3
58682: PPUSH
58683: LD_VAR 0 3
58687: PPUSH
58688: CALL_OW 3
58692: ST_TO_ADDR
58693: GO 58670
58695: POP
58696: POP
// end ;
58697: LD_VAR 0 3
58701: RET
// export function ComExit ( unit ) ; var tmp ; begin
58702: LD_INT 0
58704: PPUSH
58705: PPUSH
// if not IsInUnit ( unit ) then
58706: LD_VAR 0 1
58710: PPUSH
58711: CALL_OW 310
58715: NOT
58716: IFFALSE 58720
// exit ;
58718: GO 58780
// tmp := IsInUnit ( unit ) ;
58720: LD_ADDR_VAR 0 3
58724: PUSH
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL_OW 310
58734: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58735: LD_VAR 0 3
58739: PPUSH
58740: CALL_OW 247
58744: PUSH
58745: LD_INT 2
58747: EQUAL
58748: IFFALSE 58761
// ComExitVehicle ( unit ) else
58750: LD_VAR 0 1
58754: PPUSH
58755: CALL_OW 121
58759: GO 58770
// ComExitBuilding ( unit ) ;
58761: LD_VAR 0 1
58765: PPUSH
58766: CALL_OW 122
// result := tmp ;
58770: LD_ADDR_VAR 0 2
58774: PUSH
58775: LD_VAR 0 3
58779: ST_TO_ADDR
// end ;
58780: LD_VAR 0 2
58784: RET
// export function ComExitAll ( units ) ; var i ; begin
58785: LD_INT 0
58787: PPUSH
58788: PPUSH
// if not units then
58789: LD_VAR 0 1
58793: NOT
58794: IFFALSE 58798
// exit ;
58796: GO 58824
// for i in units do
58798: LD_ADDR_VAR 0 3
58802: PUSH
58803: LD_VAR 0 1
58807: PUSH
58808: FOR_IN
58809: IFFALSE 58822
// ComExit ( i ) ;
58811: LD_VAR 0 3
58815: PPUSH
58816: CALL 58702 0 1
58820: GO 58808
58822: POP
58823: POP
// end ;
58824: LD_VAR 0 2
58828: RET
// export function ResetHc ; begin
58829: LD_INT 0
58831: PPUSH
// InitHc ;
58832: CALL_OW 19
// hc_importance := 0 ;
58836: LD_ADDR_OWVAR 32
58840: PUSH
58841: LD_INT 0
58843: ST_TO_ADDR
// end ;
58844: LD_VAR 0 1
58848: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58849: LD_INT 0
58851: PPUSH
58852: PPUSH
58853: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58854: LD_ADDR_VAR 0 6
58858: PUSH
58859: LD_VAR 0 1
58863: PUSH
58864: LD_VAR 0 3
58868: PLUS
58869: PUSH
58870: LD_INT 2
58872: DIV
58873: ST_TO_ADDR
// if _x < 0 then
58874: LD_VAR 0 6
58878: PUSH
58879: LD_INT 0
58881: LESS
58882: IFFALSE 58899
// _x := _x * - 1 ;
58884: LD_ADDR_VAR 0 6
58888: PUSH
58889: LD_VAR 0 6
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: MUL
58898: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58899: LD_ADDR_VAR 0 7
58903: PUSH
58904: LD_VAR 0 2
58908: PUSH
58909: LD_VAR 0 4
58913: PLUS
58914: PUSH
58915: LD_INT 2
58917: DIV
58918: ST_TO_ADDR
// if _y < 0 then
58919: LD_VAR 0 7
58923: PUSH
58924: LD_INT 0
58926: LESS
58927: IFFALSE 58944
// _y := _y * - 1 ;
58929: LD_ADDR_VAR 0 7
58933: PUSH
58934: LD_VAR 0 7
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: MUL
58943: ST_TO_ADDR
// result := [ _x , _y ] ;
58944: LD_ADDR_VAR 0 5
58948: PUSH
58949: LD_VAR 0 6
58953: PUSH
58954: LD_VAR 0 7
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: ST_TO_ADDR
// end ;
58963: LD_VAR 0 5
58967: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58968: LD_INT 0
58970: PPUSH
58971: PPUSH
58972: PPUSH
58973: PPUSH
// task := GetTaskList ( unit ) ;
58974: LD_ADDR_VAR 0 7
58978: PUSH
58979: LD_VAR 0 1
58983: PPUSH
58984: CALL_OW 437
58988: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58989: LD_VAR 0 7
58993: NOT
58994: PUSH
58995: LD_VAR 0 1
58999: PPUSH
59000: LD_VAR 0 2
59004: PPUSH
59005: CALL_OW 308
59009: NOT
59010: AND
59011: IFFALSE 59015
// exit ;
59013: GO 59133
// if IsInArea ( unit , area ) then
59015: LD_VAR 0 1
59019: PPUSH
59020: LD_VAR 0 2
59024: PPUSH
59025: CALL_OW 308
59029: IFFALSE 59047
// begin ComMoveToArea ( unit , goAway ) ;
59031: LD_VAR 0 1
59035: PPUSH
59036: LD_VAR 0 3
59040: PPUSH
59041: CALL_OW 113
// exit ;
59045: GO 59133
// end ; if task [ 1 ] [ 1 ] <> M then
59047: LD_VAR 0 7
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PUSH
59056: LD_INT 1
59058: ARRAY
59059: PUSH
59060: LD_STRING M
59062: NONEQUAL
59063: IFFALSE 59067
// exit ;
59065: GO 59133
// x := task [ 1 ] [ 2 ] ;
59067: LD_ADDR_VAR 0 5
59071: PUSH
59072: LD_VAR 0 7
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PUSH
59081: LD_INT 2
59083: ARRAY
59084: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59085: LD_ADDR_VAR 0 6
59089: PUSH
59090: LD_VAR 0 7
59094: PUSH
59095: LD_INT 1
59097: ARRAY
59098: PUSH
59099: LD_INT 3
59101: ARRAY
59102: ST_TO_ADDR
// if InArea ( x , y , area ) then
59103: LD_VAR 0 5
59107: PPUSH
59108: LD_VAR 0 6
59112: PPUSH
59113: LD_VAR 0 2
59117: PPUSH
59118: CALL_OW 309
59122: IFFALSE 59133
// ComStop ( unit ) ;
59124: LD_VAR 0 1
59128: PPUSH
59129: CALL_OW 141
// end ;
59133: LD_VAR 0 4
59137: RET
// export function Abs ( value ) ; begin
59138: LD_INT 0
59140: PPUSH
// result := value ;
59141: LD_ADDR_VAR 0 2
59145: PUSH
59146: LD_VAR 0 1
59150: ST_TO_ADDR
// if value < 0 then
59151: LD_VAR 0 1
59155: PUSH
59156: LD_INT 0
59158: LESS
59159: IFFALSE 59176
// result := value * - 1 ;
59161: LD_ADDR_VAR 0 2
59165: PUSH
59166: LD_VAR 0 1
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: MUL
59175: ST_TO_ADDR
// end ;
59176: LD_VAR 0 2
59180: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59181: LD_INT 0
59183: PPUSH
59184: PPUSH
59185: PPUSH
59186: PPUSH
59187: PPUSH
59188: PPUSH
59189: PPUSH
59190: PPUSH
// if not unit or not building then
59191: LD_VAR 0 1
59195: NOT
59196: PUSH
59197: LD_VAR 0 2
59201: NOT
59202: OR
59203: IFFALSE 59207
// exit ;
59205: GO 59433
// x := GetX ( building ) ;
59207: LD_ADDR_VAR 0 4
59211: PUSH
59212: LD_VAR 0 2
59216: PPUSH
59217: CALL_OW 250
59221: ST_TO_ADDR
// y := GetY ( building ) ;
59222: LD_ADDR_VAR 0 6
59226: PUSH
59227: LD_VAR 0 2
59231: PPUSH
59232: CALL_OW 251
59236: ST_TO_ADDR
// d := GetDir ( building ) ;
59237: LD_ADDR_VAR 0 8
59241: PUSH
59242: LD_VAR 0 2
59246: PPUSH
59247: CALL_OW 254
59251: ST_TO_ADDR
// r := 4 ;
59252: LD_ADDR_VAR 0 9
59256: PUSH
59257: LD_INT 4
59259: ST_TO_ADDR
// for i := 1 to 5 do
59260: LD_ADDR_VAR 0 10
59264: PUSH
59265: DOUBLE
59266: LD_INT 1
59268: DEC
59269: ST_TO_ADDR
59270: LD_INT 5
59272: PUSH
59273: FOR_TO
59274: IFFALSE 59431
// begin _x := ShiftX ( x , d , r + i ) ;
59276: LD_ADDR_VAR 0 5
59280: PUSH
59281: LD_VAR 0 4
59285: PPUSH
59286: LD_VAR 0 8
59290: PPUSH
59291: LD_VAR 0 9
59295: PUSH
59296: LD_VAR 0 10
59300: PLUS
59301: PPUSH
59302: CALL_OW 272
59306: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59307: LD_ADDR_VAR 0 7
59311: PUSH
59312: LD_VAR 0 6
59316: PPUSH
59317: LD_VAR 0 8
59321: PPUSH
59322: LD_VAR 0 9
59326: PUSH
59327: LD_VAR 0 10
59331: PLUS
59332: PPUSH
59333: CALL_OW 273
59337: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59338: LD_VAR 0 5
59342: PPUSH
59343: LD_VAR 0 7
59347: PPUSH
59348: CALL_OW 488
59352: PUSH
59353: LD_VAR 0 5
59357: PPUSH
59358: LD_VAR 0 7
59362: PPUSH
59363: CALL_OW 428
59367: PPUSH
59368: CALL_OW 247
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: IN
59383: NOT
59384: AND
59385: IFFALSE 59429
// begin ComMoveXY ( unit , _x , _y ) ;
59387: LD_VAR 0 1
59391: PPUSH
59392: LD_VAR 0 5
59396: PPUSH
59397: LD_VAR 0 7
59401: PPUSH
59402: CALL_OW 111
// result := [ _x , _y ] ;
59406: LD_ADDR_VAR 0 3
59410: PUSH
59411: LD_VAR 0 5
59415: PUSH
59416: LD_VAR 0 7
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: ST_TO_ADDR
// exit ;
59425: POP
59426: POP
59427: GO 59433
// end ; end ;
59429: GO 59273
59431: POP
59432: POP
// end ;
59433: LD_VAR 0 3
59437: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59438: LD_INT 0
59440: PPUSH
59441: PPUSH
59442: PPUSH
// result := 0 ;
59443: LD_ADDR_VAR 0 3
59447: PUSH
59448: LD_INT 0
59450: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59451: LD_VAR 0 1
59455: PUSH
59456: LD_INT 0
59458: LESS
59459: PUSH
59460: LD_VAR 0 1
59464: PUSH
59465: LD_INT 8
59467: GREATER
59468: OR
59469: PUSH
59470: LD_VAR 0 2
59474: PUSH
59475: LD_INT 0
59477: LESS
59478: OR
59479: PUSH
59480: LD_VAR 0 2
59484: PUSH
59485: LD_INT 8
59487: GREATER
59488: OR
59489: IFFALSE 59493
// exit ;
59491: GO 59568
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59493: LD_ADDR_VAR 0 4
59497: PUSH
59498: LD_INT 22
59500: PUSH
59501: LD_VAR 0 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PPUSH
59510: CALL_OW 69
59514: PUSH
59515: FOR_IN
59516: IFFALSE 59566
// begin un := UnitShoot ( i ) ;
59518: LD_ADDR_VAR 0 5
59522: PUSH
59523: LD_VAR 0 4
59527: PPUSH
59528: CALL_OW 504
59532: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59533: LD_VAR 0 5
59537: PPUSH
59538: CALL_OW 255
59542: PUSH
59543: LD_VAR 0 1
59547: EQUAL
59548: IFFALSE 59564
// begin result := un ;
59550: LD_ADDR_VAR 0 3
59554: PUSH
59555: LD_VAR 0 5
59559: ST_TO_ADDR
// exit ;
59560: POP
59561: POP
59562: GO 59568
// end ; end ;
59564: GO 59515
59566: POP
59567: POP
// end ;
59568: LD_VAR 0 3
59572: RET
// export function GetCargoBay ( units ) ; begin
59573: LD_INT 0
59575: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59576: LD_ADDR_VAR 0 2
59580: PUSH
59581: LD_VAR 0 1
59585: PPUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 34
59591: PUSH
59592: LD_INT 12
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 34
59601: PUSH
59602: LD_INT 51
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 34
59611: PUSH
59612: LD_INT 32
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 34
59621: PUSH
59622: LD_EXP 8
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: PPUSH
59638: CALL_OW 72
59642: ST_TO_ADDR
// end ;
59643: LD_VAR 0 2
59647: RET
