// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 17998 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 18096 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 18104 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_miner := 81 ;
4669: LD_ADDR_EXP 14
4673: PUSH
4674: LD_INT 81
4676: ST_TO_ADDR
// ar_crane := 88 ;
4677: LD_ADDR_EXP 13
4681: PUSH
4682: LD_INT 88
4684: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4685: LD_ADDR_EXP 8
4689: PUSH
4690: LD_INT 89
4692: ST_TO_ADDR
// us_hack := 99 ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 99
4700: ST_TO_ADDR
// us_artillery := 97 ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 97
4708: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4709: LD_ADDR_EXP 11
4713: PUSH
4714: LD_INT 91
4716: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4717: LD_ADDR_EXP 12
4721: PUSH
4722: LD_INT 92
4724: ST_TO_ADDR
// ru_radar := 98 ;
4725: LD_ADDR_EXP 7
4729: PUSH
4730: LD_INT 98
4732: ST_TO_ADDR
// tech_Artillery := 80 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 80
4740: ST_TO_ADDR
// tech_RadMat := 81 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 81
4748: ST_TO_ADDR
// tech_BasicTools := 82 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 82
4756: ST_TO_ADDR
// tech_Cargo := 83 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 83
4764: ST_TO_ADDR
// tech_Track := 84 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 84
4772: ST_TO_ADDR
// tech_Crane := 85 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 85
4780: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 86
4788: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4789: LD_ADDR_EXP 22
4793: PUSH
4794: LD_INT 87
4796: ST_TO_ADDR
// class_mastodont := 31 ;
4797: LD_ADDR_EXP 23
4801: PUSH
4802: LD_INT 31
4804: ST_TO_ADDR
// class_horse := 21 ;
4805: LD_ADDR_EXP 24
4809: PUSH
4810: LD_INT 21
4812: ST_TO_ADDR
// end ;
4813: LD_VAR 0 1
4817: RET
// every 1 do
4818: GO 4820
4820: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4821: CALL 4666 0 0
4825: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4826: LD_INT 0
4828: PPUSH
// if p2 = 100 then
4829: LD_VAR 0 2
4833: PUSH
4834: LD_INT 100
4836: EQUAL
4837: IFFALSE 5786
// begin if not StreamModeActive then
4839: LD_EXP 25
4843: NOT
4844: IFFALSE 4854
// StreamModeActive := true ;
4846: LD_ADDR_EXP 25
4850: PUSH
4851: LD_INT 1
4853: ST_TO_ADDR
// if p3 = 0 then
4854: LD_VAR 0 3
4858: PUSH
4859: LD_INT 0
4861: EQUAL
4862: IFFALSE 4868
// InitStreamMode ;
4864: CALL 5946 0 0
// if p3 = 1 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: IFFALSE 4886
// sRocket := true ;
4878: LD_ADDR_EXP 30
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 2 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 2
4893: EQUAL
4894: IFFALSE 4904
// sSpeed := true ;
4896: LD_ADDR_EXP 29
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 3 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 3
4911: EQUAL
4912: IFFALSE 4922
// sEngine := true ;
4914: LD_ADDR_EXP 31
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 4 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 4
4929: EQUAL
4930: IFFALSE 4940
// sSpec := true ;
4932: LD_ADDR_EXP 28
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 5 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 5
4947: EQUAL
4948: IFFALSE 4958
// sLevel := true ;
4950: LD_ADDR_EXP 32
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 6 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 6
4965: EQUAL
4966: IFFALSE 4976
// sArmoury := true ;
4968: LD_ADDR_EXP 33
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 7 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 7
4983: EQUAL
4984: IFFALSE 4994
// sRadar := true ;
4986: LD_ADDR_EXP 34
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 8 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 8
5001: EQUAL
5002: IFFALSE 5012
// sBunker := true ;
5004: LD_ADDR_EXP 35
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 9 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 9
5019: EQUAL
5020: IFFALSE 5030
// sHack := true ;
5022: LD_ADDR_EXP 36
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 10 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 10
5037: EQUAL
5038: IFFALSE 5048
// sFire := true ;
5040: LD_ADDR_EXP 37
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 11 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 11
5055: EQUAL
5056: IFFALSE 5066
// sRefresh := true ;
5058: LD_ADDR_EXP 38
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 12 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 12
5073: EQUAL
5074: IFFALSE 5084
// sExp := true ;
5076: LD_ADDR_EXP 39
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 13 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 13
5091: EQUAL
5092: IFFALSE 5102
// sDepot := true ;
5094: LD_ADDR_EXP 40
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 14 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 14
5109: EQUAL
5110: IFFALSE 5120
// sFlag := true ;
5112: LD_ADDR_EXP 41
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 15 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 15
5127: EQUAL
5128: IFFALSE 5138
// sKamikadze := true ;
5130: LD_ADDR_EXP 49
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 16 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 16
5145: EQUAL
5146: IFFALSE 5156
// sTroll := true ;
5148: LD_ADDR_EXP 50
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 17 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 17
5163: EQUAL
5164: IFFALSE 5174
// sSlow := true ;
5166: LD_ADDR_EXP 51
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 18 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 18
5181: EQUAL
5182: IFFALSE 5192
// sLack := true ;
5184: LD_ADDR_EXP 52
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// if p3 = 19 then
5192: LD_VAR 0 3
5196: PUSH
5197: LD_INT 19
5199: EQUAL
5200: IFFALSE 5210
// sTank := true ;
5202: LD_ADDR_EXP 54
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// if p3 = 20 then
5210: LD_VAR 0 3
5214: PUSH
5215: LD_INT 20
5217: EQUAL
5218: IFFALSE 5228
// sRemote := true ;
5220: LD_ADDR_EXP 55
5224: PUSH
5225: LD_INT 1
5227: ST_TO_ADDR
// if p3 = 21 then
5228: LD_VAR 0 3
5232: PUSH
5233: LD_INT 21
5235: EQUAL
5236: IFFALSE 5246
// sPowell := true ;
5238: LD_ADDR_EXP 56
5242: PUSH
5243: LD_INT 1
5245: ST_TO_ADDR
// if p3 = 22 then
5246: LD_VAR 0 3
5250: PUSH
5251: LD_INT 22
5253: EQUAL
5254: IFFALSE 5264
// sTeleport := true ;
5256: LD_ADDR_EXP 59
5260: PUSH
5261: LD_INT 1
5263: ST_TO_ADDR
// if p3 = 23 then
5264: LD_VAR 0 3
5268: PUSH
5269: LD_INT 23
5271: EQUAL
5272: IFFALSE 5282
// sOilTower := true ;
5274: LD_ADDR_EXP 61
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// if p3 = 24 then
5282: LD_VAR 0 3
5286: PUSH
5287: LD_INT 24
5289: EQUAL
5290: IFFALSE 5300
// sShovel := true ;
5292: LD_ADDR_EXP 62
5296: PUSH
5297: LD_INT 1
5299: ST_TO_ADDR
// if p3 = 25 then
5300: LD_VAR 0 3
5304: PUSH
5305: LD_INT 25
5307: EQUAL
5308: IFFALSE 5318
// sSheik := true ;
5310: LD_ADDR_EXP 63
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// if p3 = 26 then
5318: LD_VAR 0 3
5322: PUSH
5323: LD_INT 26
5325: EQUAL
5326: IFFALSE 5336
// sEarthquake := true ;
5328: LD_ADDR_EXP 65
5332: PUSH
5333: LD_INT 1
5335: ST_TO_ADDR
// if p3 = 27 then
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 27
5343: EQUAL
5344: IFFALSE 5354
// sAI := true ;
5346: LD_ADDR_EXP 66
5350: PUSH
5351: LD_INT 1
5353: ST_TO_ADDR
// if p3 = 28 then
5354: LD_VAR 0 3
5358: PUSH
5359: LD_INT 28
5361: EQUAL
5362: IFFALSE 5372
// sCargo := true ;
5364: LD_ADDR_EXP 69
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// if p3 = 29 then
5372: LD_VAR 0 3
5376: PUSH
5377: LD_INT 29
5379: EQUAL
5380: IFFALSE 5390
// sDLaser := true ;
5382: LD_ADDR_EXP 70
5386: PUSH
5387: LD_INT 1
5389: ST_TO_ADDR
// if p3 = 30 then
5390: LD_VAR 0 3
5394: PUSH
5395: LD_INT 30
5397: EQUAL
5398: IFFALSE 5408
// sExchange := true ;
5400: LD_ADDR_EXP 71
5404: PUSH
5405: LD_INT 1
5407: ST_TO_ADDR
// if p3 = 31 then
5408: LD_VAR 0 3
5412: PUSH
5413: LD_INT 31
5415: EQUAL
5416: IFFALSE 5426
// sFac := true ;
5418: LD_ADDR_EXP 72
5422: PUSH
5423: LD_INT 1
5425: ST_TO_ADDR
// if p3 = 32 then
5426: LD_VAR 0 3
5430: PUSH
5431: LD_INT 32
5433: EQUAL
5434: IFFALSE 5444
// sPower := true ;
5436: LD_ADDR_EXP 73
5440: PUSH
5441: LD_INT 1
5443: ST_TO_ADDR
// if p3 = 33 then
5444: LD_VAR 0 3
5448: PUSH
5449: LD_INT 33
5451: EQUAL
5452: IFFALSE 5462
// sRandom := true ;
5454: LD_ADDR_EXP 74
5458: PUSH
5459: LD_INT 1
5461: ST_TO_ADDR
// if p3 = 34 then
5462: LD_VAR 0 3
5466: PUSH
5467: LD_INT 34
5469: EQUAL
5470: IFFALSE 5480
// sShield := true ;
5472: LD_ADDR_EXP 75
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// if p3 = 35 then
5480: LD_VAR 0 3
5484: PUSH
5485: LD_INT 35
5487: EQUAL
5488: IFFALSE 5498
// sTime := true ;
5490: LD_ADDR_EXP 76
5494: PUSH
5495: LD_INT 1
5497: ST_TO_ADDR
// if p3 = 36 then
5498: LD_VAR 0 3
5502: PUSH
5503: LD_INT 36
5505: EQUAL
5506: IFFALSE 5516
// sTools := true ;
5508: LD_ADDR_EXP 77
5512: PUSH
5513: LD_INT 1
5515: ST_TO_ADDR
// if p3 = 101 then
5516: LD_VAR 0 3
5520: PUSH
5521: LD_INT 101
5523: EQUAL
5524: IFFALSE 5534
// sSold := true ;
5526: LD_ADDR_EXP 42
5530: PUSH
5531: LD_INT 1
5533: ST_TO_ADDR
// if p3 = 102 then
5534: LD_VAR 0 3
5538: PUSH
5539: LD_INT 102
5541: EQUAL
5542: IFFALSE 5552
// sDiff := true ;
5544: LD_ADDR_EXP 43
5548: PUSH
5549: LD_INT 1
5551: ST_TO_ADDR
// if p3 = 103 then
5552: LD_VAR 0 3
5556: PUSH
5557: LD_INT 103
5559: EQUAL
5560: IFFALSE 5570
// sFog := true ;
5562: LD_ADDR_EXP 46
5566: PUSH
5567: LD_INT 1
5569: ST_TO_ADDR
// if p3 = 104 then
5570: LD_VAR 0 3
5574: PUSH
5575: LD_INT 104
5577: EQUAL
5578: IFFALSE 5588
// sReset := true ;
5580: LD_ADDR_EXP 47
5584: PUSH
5585: LD_INT 1
5587: ST_TO_ADDR
// if p3 = 105 then
5588: LD_VAR 0 3
5592: PUSH
5593: LD_INT 105
5595: EQUAL
5596: IFFALSE 5606
// sSun := true ;
5598: LD_ADDR_EXP 48
5602: PUSH
5603: LD_INT 1
5605: ST_TO_ADDR
// if p3 = 106 then
5606: LD_VAR 0 3
5610: PUSH
5611: LD_INT 106
5613: EQUAL
5614: IFFALSE 5624
// sTiger := true ;
5616: LD_ADDR_EXP 44
5620: PUSH
5621: LD_INT 1
5623: ST_TO_ADDR
// if p3 = 107 then
5624: LD_VAR 0 3
5628: PUSH
5629: LD_INT 107
5631: EQUAL
5632: IFFALSE 5642
// sBomb := true ;
5634: LD_ADDR_EXP 45
5638: PUSH
5639: LD_INT 1
5641: ST_TO_ADDR
// if p3 = 108 then
5642: LD_VAR 0 3
5646: PUSH
5647: LD_INT 108
5649: EQUAL
5650: IFFALSE 5660
// sWound := true ;
5652: LD_ADDR_EXP 53
5656: PUSH
5657: LD_INT 1
5659: ST_TO_ADDR
// if p3 = 109 then
5660: LD_VAR 0 3
5664: PUSH
5665: LD_INT 109
5667: EQUAL
5668: IFFALSE 5678
// sBetray := true ;
5670: LD_ADDR_EXP 57
5674: PUSH
5675: LD_INT 1
5677: ST_TO_ADDR
// if p3 = 110 then
5678: LD_VAR 0 3
5682: PUSH
5683: LD_INT 110
5685: EQUAL
5686: IFFALSE 5696
// sContamin := true ;
5688: LD_ADDR_EXP 58
5692: PUSH
5693: LD_INT 1
5695: ST_TO_ADDR
// if p3 = 111 then
5696: LD_VAR 0 3
5700: PUSH
5701: LD_INT 111
5703: EQUAL
5704: IFFALSE 5714
// sOil := true ;
5706: LD_ADDR_EXP 60
5710: PUSH
5711: LD_INT 1
5713: ST_TO_ADDR
// if p3 = 112 then
5714: LD_VAR 0 3
5718: PUSH
5719: LD_INT 112
5721: EQUAL
5722: IFFALSE 5732
// sStu := true ;
5724: LD_ADDR_EXP 64
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// if p3 = 113 then
5732: LD_VAR 0 3
5736: PUSH
5737: LD_INT 113
5739: EQUAL
5740: IFFALSE 5750
// sBazooka := true ;
5742: LD_ADDR_EXP 67
5746: PUSH
5747: LD_INT 1
5749: ST_TO_ADDR
// if p3 = 114 then
5750: LD_VAR 0 3
5754: PUSH
5755: LD_INT 114
5757: EQUAL
5758: IFFALSE 5768
// sMortar := true ;
5760: LD_ADDR_EXP 68
5764: PUSH
5765: LD_INT 1
5767: ST_TO_ADDR
// if p3 = 115 then
5768: LD_VAR 0 3
5772: PUSH
5773: LD_INT 115
5775: EQUAL
5776: IFFALSE 5786
// sRanger := true ;
5778: LD_ADDR_EXP 78
5782: PUSH
5783: LD_INT 1
5785: ST_TO_ADDR
// end ; if p2 = 101 then
5786: LD_VAR 0 2
5790: PUSH
5791: LD_INT 101
5793: EQUAL
5794: IFFALSE 5922
// begin case p3 of 1 :
5796: LD_VAR 0 3
5800: PUSH
5801: LD_INT 1
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5816
5809: POP
// hHackUnlimitedResources ; 2 :
5810: CALL 16959 0 0
5814: GO 5922
5816: LD_INT 2
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5831
5824: POP
// hHackSetLevel10 ; 3 :
5825: CALL 17092 0 0
5829: GO 5922
5831: LD_INT 3
5833: DOUBLE
5834: EQUAL
5835: IFTRUE 5839
5837: GO 5846
5839: POP
// hHackSetLevel10YourUnits ; 4 :
5840: CALL 17177 0 0
5844: GO 5922
5846: LD_INT 4
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5854
5852: GO 5861
5854: POP
// hHackInvincible ; 5 :
5855: CALL 17625 0 0
5859: GO 5922
5861: LD_INT 5
5863: DOUBLE
5864: EQUAL
5865: IFTRUE 5869
5867: GO 5876
5869: POP
// hHackInvisible ; 6 :
5870: CALL 17736 0 0
5874: GO 5922
5876: LD_INT 6
5878: DOUBLE
5879: EQUAL
5880: IFTRUE 5884
5882: GO 5891
5884: POP
// hHackChangeYourSide ; 7 :
5885: CALL 17793 0 0
5889: GO 5922
5891: LD_INT 7
5893: DOUBLE
5894: EQUAL
5895: IFTRUE 5899
5897: GO 5906
5899: POP
// hHackChangeUnitSide ; 8 :
5900: CALL 17835 0 0
5904: GO 5922
5906: LD_INT 8
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5914
5912: GO 5921
5914: POP
// hHackFog ; end ;
5915: CALL 17936 0 0
5919: GO 5922
5921: POP
// end ; end ;
5922: LD_VAR 0 7
5926: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5927: GO 5929
5929: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5930: LD_STRING initStreamRollete();
5932: PPUSH
5933: CALL_OW 559
// InitStreamMode ;
5937: CALL 5946 0 0
// DefineStreamItems ( ) ;
5941: CALL 6386 0 0
// end ;
5945: END
// function InitStreamMode ; begin
5946: LD_INT 0
5948: PPUSH
// streamModeActive := false ;
5949: LD_ADDR_EXP 25
5953: PUSH
5954: LD_INT 0
5956: ST_TO_ADDR
// normalCounter := 36 ;
5957: LD_ADDR_EXP 26
5961: PUSH
5962: LD_INT 36
5964: ST_TO_ADDR
// hardcoreCounter := 16 ;
5965: LD_ADDR_EXP 27
5969: PUSH
5970: LD_INT 16
5972: ST_TO_ADDR
// sRocket := false ;
5973: LD_ADDR_EXP 30
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// sSpeed := false ;
5981: LD_ADDR_EXP 29
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// sEngine := false ;
5989: LD_ADDR_EXP 31
5993: PUSH
5994: LD_INT 0
5996: ST_TO_ADDR
// sSpec := false ;
5997: LD_ADDR_EXP 28
6001: PUSH
6002: LD_INT 0
6004: ST_TO_ADDR
// sLevel := false ;
6005: LD_ADDR_EXP 32
6009: PUSH
6010: LD_INT 0
6012: ST_TO_ADDR
// sArmoury := false ;
6013: LD_ADDR_EXP 33
6017: PUSH
6018: LD_INT 0
6020: ST_TO_ADDR
// sRadar := false ;
6021: LD_ADDR_EXP 34
6025: PUSH
6026: LD_INT 0
6028: ST_TO_ADDR
// sBunker := false ;
6029: LD_ADDR_EXP 35
6033: PUSH
6034: LD_INT 0
6036: ST_TO_ADDR
// sHack := false ;
6037: LD_ADDR_EXP 36
6041: PUSH
6042: LD_INT 0
6044: ST_TO_ADDR
// sFire := false ;
6045: LD_ADDR_EXP 37
6049: PUSH
6050: LD_INT 0
6052: ST_TO_ADDR
// sRefresh := false ;
6053: LD_ADDR_EXP 38
6057: PUSH
6058: LD_INT 0
6060: ST_TO_ADDR
// sExp := false ;
6061: LD_ADDR_EXP 39
6065: PUSH
6066: LD_INT 0
6068: ST_TO_ADDR
// sDepot := false ;
6069: LD_ADDR_EXP 40
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// sFlag := false ;
6077: LD_ADDR_EXP 41
6081: PUSH
6082: LD_INT 0
6084: ST_TO_ADDR
// sKamikadze := false ;
6085: LD_ADDR_EXP 49
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
// sTroll := false ;
6093: LD_ADDR_EXP 50
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// sSlow := false ;
6101: LD_ADDR_EXP 51
6105: PUSH
6106: LD_INT 0
6108: ST_TO_ADDR
// sLack := false ;
6109: LD_ADDR_EXP 52
6113: PUSH
6114: LD_INT 0
6116: ST_TO_ADDR
// sTank := false ;
6117: LD_ADDR_EXP 54
6121: PUSH
6122: LD_INT 0
6124: ST_TO_ADDR
// sRemote := false ;
6125: LD_ADDR_EXP 55
6129: PUSH
6130: LD_INT 0
6132: ST_TO_ADDR
// sPowell := false ;
6133: LD_ADDR_EXP 56
6137: PUSH
6138: LD_INT 0
6140: ST_TO_ADDR
// sTeleport := false ;
6141: LD_ADDR_EXP 59
6145: PUSH
6146: LD_INT 0
6148: ST_TO_ADDR
// sOilTower := false ;
6149: LD_ADDR_EXP 61
6153: PUSH
6154: LD_INT 0
6156: ST_TO_ADDR
// sShovel := false ;
6157: LD_ADDR_EXP 62
6161: PUSH
6162: LD_INT 0
6164: ST_TO_ADDR
// sSheik := false ;
6165: LD_ADDR_EXP 63
6169: PUSH
6170: LD_INT 0
6172: ST_TO_ADDR
// sEarthquake := false ;
6173: LD_ADDR_EXP 65
6177: PUSH
6178: LD_INT 0
6180: ST_TO_ADDR
// sAI := false ;
6181: LD_ADDR_EXP 66
6185: PUSH
6186: LD_INT 0
6188: ST_TO_ADDR
// sCargo := false ;
6189: LD_ADDR_EXP 69
6193: PUSH
6194: LD_INT 0
6196: ST_TO_ADDR
// sDLaser := false ;
6197: LD_ADDR_EXP 70
6201: PUSH
6202: LD_INT 0
6204: ST_TO_ADDR
// sExchange := false ;
6205: LD_ADDR_EXP 71
6209: PUSH
6210: LD_INT 0
6212: ST_TO_ADDR
// sFac := false ;
6213: LD_ADDR_EXP 72
6217: PUSH
6218: LD_INT 0
6220: ST_TO_ADDR
// sPower := false ;
6221: LD_ADDR_EXP 73
6225: PUSH
6226: LD_INT 0
6228: ST_TO_ADDR
// sRandom := false ;
6229: LD_ADDR_EXP 74
6233: PUSH
6234: LD_INT 0
6236: ST_TO_ADDR
// sShield := false ;
6237: LD_ADDR_EXP 75
6241: PUSH
6242: LD_INT 0
6244: ST_TO_ADDR
// sTime := false ;
6245: LD_ADDR_EXP 76
6249: PUSH
6250: LD_INT 0
6252: ST_TO_ADDR
// sTools := false ;
6253: LD_ADDR_EXP 77
6257: PUSH
6258: LD_INT 0
6260: ST_TO_ADDR
// sSold := false ;
6261: LD_ADDR_EXP 42
6265: PUSH
6266: LD_INT 0
6268: ST_TO_ADDR
// sDiff := false ;
6269: LD_ADDR_EXP 43
6273: PUSH
6274: LD_INT 0
6276: ST_TO_ADDR
// sFog := false ;
6277: LD_ADDR_EXP 46
6281: PUSH
6282: LD_INT 0
6284: ST_TO_ADDR
// sReset := false ;
6285: LD_ADDR_EXP 47
6289: PUSH
6290: LD_INT 0
6292: ST_TO_ADDR
// sSun := false ;
6293: LD_ADDR_EXP 48
6297: PUSH
6298: LD_INT 0
6300: ST_TO_ADDR
// sTiger := false ;
6301: LD_ADDR_EXP 44
6305: PUSH
6306: LD_INT 0
6308: ST_TO_ADDR
// sBomb := false ;
6309: LD_ADDR_EXP 45
6313: PUSH
6314: LD_INT 0
6316: ST_TO_ADDR
// sWound := false ;
6317: LD_ADDR_EXP 53
6321: PUSH
6322: LD_INT 0
6324: ST_TO_ADDR
// sBetray := false ;
6325: LD_ADDR_EXP 57
6329: PUSH
6330: LD_INT 0
6332: ST_TO_ADDR
// sContamin := false ;
6333: LD_ADDR_EXP 58
6337: PUSH
6338: LD_INT 0
6340: ST_TO_ADDR
// sOil := false ;
6341: LD_ADDR_EXP 60
6345: PUSH
6346: LD_INT 0
6348: ST_TO_ADDR
// sStu := false ;
6349: LD_ADDR_EXP 64
6353: PUSH
6354: LD_INT 0
6356: ST_TO_ADDR
// sBazooka := false ;
6357: LD_ADDR_EXP 67
6361: PUSH
6362: LD_INT 0
6364: ST_TO_ADDR
// sMortar := false ;
6365: LD_ADDR_EXP 68
6369: PUSH
6370: LD_INT 0
6372: ST_TO_ADDR
// sRanger := false ;
6373: LD_ADDR_EXP 78
6377: PUSH
6378: LD_INT 0
6380: ST_TO_ADDR
// end ;
6381: LD_VAR 0 1
6385: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6386: LD_INT 0
6388: PPUSH
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
// result := [ ] ;
6393: LD_ADDR_VAR 0 1
6397: PUSH
6398: EMPTY
6399: ST_TO_ADDR
// if campaign_id = 1 then
6400: LD_OWVAR 69
6404: PUSH
6405: LD_INT 1
6407: EQUAL
6408: IFFALSE 9346
// begin case mission_number of 1 :
6410: LD_OWVAR 70
6414: PUSH
6415: LD_INT 1
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6487
6423: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6424: LD_ADDR_VAR 0 1
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 4
6434: PUSH
6435: LD_INT 11
6437: PUSH
6438: LD_INT 12
6440: PUSH
6441: LD_INT 15
6443: PUSH
6444: LD_INT 16
6446: PUSH
6447: LD_INT 22
6449: PUSH
6450: LD_INT 23
6452: PUSH
6453: LD_INT 26
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 101
6469: PUSH
6470: LD_INT 102
6472: PUSH
6473: LD_INT 106
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: ST_TO_ADDR
6485: GO 9344
6487: LD_INT 2
6489: DOUBLE
6490: EQUAL
6491: IFTRUE 6495
6493: GO 6567
6495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6496: LD_ADDR_VAR 0 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 4
6506: PUSH
6507: LD_INT 11
6509: PUSH
6510: LD_INT 12
6512: PUSH
6513: LD_INT 15
6515: PUSH
6516: LD_INT 16
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 23
6524: PUSH
6525: LD_INT 26
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 101
6541: PUSH
6542: LD_INT 102
6544: PUSH
6545: LD_INT 105
6547: PUSH
6548: LD_INT 106
6550: PUSH
6551: LD_INT 108
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: ST_TO_ADDR
6565: GO 9344
6567: LD_INT 3
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6651
6575: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: LD_INT 2
6583: PUSH
6584: LD_INT 4
6586: PUSH
6587: LD_INT 5
6589: PUSH
6590: LD_INT 11
6592: PUSH
6593: LD_INT 12
6595: PUSH
6596: LD_INT 15
6598: PUSH
6599: LD_INT 16
6601: PUSH
6602: LD_INT 22
6604: PUSH
6605: LD_INT 26
6607: PUSH
6608: LD_INT 36
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 101
6625: PUSH
6626: LD_INT 102
6628: PUSH
6629: LD_INT 105
6631: PUSH
6632: LD_INT 106
6634: PUSH
6635: LD_INT 108
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: ST_TO_ADDR
6649: GO 9344
6651: LD_INT 4
6653: DOUBLE
6654: EQUAL
6655: IFTRUE 6659
6657: GO 6743
6659: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6660: LD_ADDR_VAR 0 1
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 4
6670: PUSH
6671: LD_INT 5
6673: PUSH
6674: LD_INT 8
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: LD_INT 12
6682: PUSH
6683: LD_INT 15
6685: PUSH
6686: LD_INT 16
6688: PUSH
6689: LD_INT 22
6691: PUSH
6692: LD_INT 23
6694: PUSH
6695: LD_INT 26
6697: PUSH
6698: LD_INT 36
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 101
6717: PUSH
6718: LD_INT 102
6720: PUSH
6721: LD_INT 105
6723: PUSH
6724: LD_INT 106
6726: PUSH
6727: LD_INT 108
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: ST_TO_ADDR
6741: GO 9344
6743: LD_INT 5
6745: DOUBLE
6746: EQUAL
6747: IFTRUE 6751
6749: GO 6851
6751: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6752: LD_ADDR_VAR 0 1
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 4
6762: PUSH
6763: LD_INT 5
6765: PUSH
6766: LD_INT 6
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 22
6786: PUSH
6787: LD_INT 23
6789: PUSH
6790: LD_INT 25
6792: PUSH
6793: LD_INT 26
6795: PUSH
6796: LD_INT 36
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 101
6817: PUSH
6818: LD_INT 102
6820: PUSH
6821: LD_INT 105
6823: PUSH
6824: LD_INT 106
6826: PUSH
6827: LD_INT 108
6829: PUSH
6830: LD_INT 109
6832: PUSH
6833: LD_INT 112
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: ST_TO_ADDR
6849: GO 9344
6851: LD_INT 6
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6979
6859: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6860: LD_ADDR_VAR 0 1
6864: PUSH
6865: LD_INT 2
6867: PUSH
6868: LD_INT 4
6870: PUSH
6871: LD_INT 5
6873: PUSH
6874: LD_INT 6
6876: PUSH
6877: LD_INT 8
6879: PUSH
6880: LD_INT 11
6882: PUSH
6883: LD_INT 12
6885: PUSH
6886: LD_INT 15
6888: PUSH
6889: LD_INT 16
6891: PUSH
6892: LD_INT 20
6894: PUSH
6895: LD_INT 21
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 23
6903: PUSH
6904: LD_INT 25
6906: PUSH
6907: LD_INT 26
6909: PUSH
6910: LD_INT 30
6912: PUSH
6913: LD_INT 31
6915: PUSH
6916: LD_INT 32
6918: PUSH
6919: LD_INT 36
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 101
6945: PUSH
6946: LD_INT 102
6948: PUSH
6949: LD_INT 105
6951: PUSH
6952: LD_INT 106
6954: PUSH
6955: LD_INT 108
6957: PUSH
6958: LD_INT 109
6960: PUSH
6961: LD_INT 112
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: ST_TO_ADDR
6977: GO 9344
6979: LD_INT 7
6981: DOUBLE
6982: EQUAL
6983: IFTRUE 6987
6985: GO 7087
6987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 4
6998: PUSH
6999: LD_INT 5
7001: PUSH
7002: LD_INT 7
7004: PUSH
7005: LD_INT 11
7007: PUSH
7008: LD_INT 12
7010: PUSH
7011: LD_INT 15
7013: PUSH
7014: LD_INT 16
7016: PUSH
7017: LD_INT 20
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 22
7025: PUSH
7026: LD_INT 23
7028: PUSH
7029: LD_INT 25
7031: PUSH
7032: LD_INT 26
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 101
7053: PUSH
7054: LD_INT 102
7056: PUSH
7057: LD_INT 103
7059: PUSH
7060: LD_INT 105
7062: PUSH
7063: LD_INT 106
7065: PUSH
7066: LD_INT 108
7068: PUSH
7069: LD_INT 112
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
7085: GO 9344
7087: LD_INT 8
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7223
7095: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7096: LD_ADDR_VAR 0 1
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: LD_INT 6
7112: PUSH
7113: LD_INT 7
7115: PUSH
7116: LD_INT 8
7118: PUSH
7119: LD_INT 11
7121: PUSH
7122: LD_INT 12
7124: PUSH
7125: LD_INT 15
7127: PUSH
7128: LD_INT 16
7130: PUSH
7131: LD_INT 20
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 23
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 26
7148: PUSH
7149: LD_INT 30
7151: PUSH
7152: LD_INT 31
7154: PUSH
7155: LD_INT 32
7157: PUSH
7158: LD_INT 36
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 101
7185: PUSH
7186: LD_INT 102
7188: PUSH
7189: LD_INT 103
7191: PUSH
7192: LD_INT 105
7194: PUSH
7195: LD_INT 106
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 109
7203: PUSH
7204: LD_INT 112
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: ST_TO_ADDR
7221: GO 9344
7223: LD_INT 9
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7367
7231: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7232: LD_ADDR_VAR 0 1
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: LD_INT 6
7248: PUSH
7249: LD_INT 7
7251: PUSH
7252: LD_INT 8
7254: PUSH
7255: LD_INT 11
7257: PUSH
7258: LD_INT 12
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: LD_INT 16
7266: PUSH
7267: LD_INT 20
7269: PUSH
7270: LD_INT 21
7272: PUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 23
7278: PUSH
7279: LD_INT 25
7281: PUSH
7282: LD_INT 26
7284: PUSH
7285: LD_INT 28
7287: PUSH
7288: LD_INT 30
7290: PUSH
7291: LD_INT 31
7293: PUSH
7294: LD_INT 32
7296: PUSH
7297: LD_INT 36
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 101
7325: PUSH
7326: LD_INT 102
7328: PUSH
7329: LD_INT 103
7331: PUSH
7332: LD_INT 105
7334: PUSH
7335: LD_INT 106
7337: PUSH
7338: LD_INT 108
7340: PUSH
7341: LD_INT 109
7343: PUSH
7344: LD_INT 112
7346: PUSH
7347: LD_INT 114
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
7365: GO 9344
7367: LD_INT 10
7369: DOUBLE
7370: EQUAL
7371: IFTRUE 7375
7373: GO 7559
7375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_INT 2
7383: PUSH
7384: LD_INT 4
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: LD_INT 6
7392: PUSH
7393: LD_INT 7
7395: PUSH
7396: LD_INT 8
7398: PUSH
7399: LD_INT 9
7401: PUSH
7402: LD_INT 10
7404: PUSH
7405: LD_INT 11
7407: PUSH
7408: LD_INT 12
7410: PUSH
7411: LD_INT 13
7413: PUSH
7414: LD_INT 14
7416: PUSH
7417: LD_INT 15
7419: PUSH
7420: LD_INT 16
7422: PUSH
7423: LD_INT 17
7425: PUSH
7426: LD_INT 18
7428: PUSH
7429: LD_INT 19
7431: PUSH
7432: LD_INT 20
7434: PUSH
7435: LD_INT 21
7437: PUSH
7438: LD_INT 22
7440: PUSH
7441: LD_INT 23
7443: PUSH
7444: LD_INT 24
7446: PUSH
7447: LD_INT 25
7449: PUSH
7450: LD_INT 26
7452: PUSH
7453: LD_INT 28
7455: PUSH
7456: LD_INT 30
7458: PUSH
7459: LD_INT 31
7461: PUSH
7462: LD_INT 32
7464: PUSH
7465: LD_INT 36
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 101
7501: PUSH
7502: LD_INT 102
7504: PUSH
7505: LD_INT 103
7507: PUSH
7508: LD_INT 104
7510: PUSH
7511: LD_INT 105
7513: PUSH
7514: LD_INT 106
7516: PUSH
7517: LD_INT 107
7519: PUSH
7520: LD_INT 108
7522: PUSH
7523: LD_INT 109
7525: PUSH
7526: LD_INT 110
7528: PUSH
7529: LD_INT 111
7531: PUSH
7532: LD_INT 112
7534: PUSH
7535: LD_INT 114
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: ST_TO_ADDR
7557: GO 9344
7559: LD_INT 11
7561: DOUBLE
7562: EQUAL
7563: IFTRUE 7567
7565: GO 7759
7567: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7568: LD_ADDR_VAR 0 1
7572: PUSH
7573: LD_INT 2
7575: PUSH
7576: LD_INT 3
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: LD_INT 5
7584: PUSH
7585: LD_INT 6
7587: PUSH
7588: LD_INT 7
7590: PUSH
7591: LD_INT 8
7593: PUSH
7594: LD_INT 9
7596: PUSH
7597: LD_INT 10
7599: PUSH
7600: LD_INT 11
7602: PUSH
7603: LD_INT 12
7605: PUSH
7606: LD_INT 13
7608: PUSH
7609: LD_INT 14
7611: PUSH
7612: LD_INT 15
7614: PUSH
7615: LD_INT 16
7617: PUSH
7618: LD_INT 17
7620: PUSH
7621: LD_INT 18
7623: PUSH
7624: LD_INT 19
7626: PUSH
7627: LD_INT 20
7629: PUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 22
7635: PUSH
7636: LD_INT 23
7638: PUSH
7639: LD_INT 24
7641: PUSH
7642: LD_INT 25
7644: PUSH
7645: LD_INT 26
7647: PUSH
7648: LD_INT 28
7650: PUSH
7651: LD_INT 30
7653: PUSH
7654: LD_INT 31
7656: PUSH
7657: LD_INT 32
7659: PUSH
7660: LD_INT 34
7662: PUSH
7663: LD_INT 36
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 101
7701: PUSH
7702: LD_INT 102
7704: PUSH
7705: LD_INT 103
7707: PUSH
7708: LD_INT 104
7710: PUSH
7711: LD_INT 105
7713: PUSH
7714: LD_INT 106
7716: PUSH
7717: LD_INT 107
7719: PUSH
7720: LD_INT 108
7722: PUSH
7723: LD_INT 109
7725: PUSH
7726: LD_INT 110
7728: PUSH
7729: LD_INT 111
7731: PUSH
7732: LD_INT 112
7734: PUSH
7735: LD_INT 114
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: ST_TO_ADDR
7757: GO 9344
7759: LD_INT 12
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7975
7767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7768: LD_ADDR_VAR 0 1
7772: PUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: LD_INT 3
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: LD_INT 6
7790: PUSH
7791: LD_INT 7
7793: PUSH
7794: LD_INT 8
7796: PUSH
7797: LD_INT 9
7799: PUSH
7800: LD_INT 10
7802: PUSH
7803: LD_INT 11
7805: PUSH
7806: LD_INT 12
7808: PUSH
7809: LD_INT 13
7811: PUSH
7812: LD_INT 14
7814: PUSH
7815: LD_INT 15
7817: PUSH
7818: LD_INT 16
7820: PUSH
7821: LD_INT 17
7823: PUSH
7824: LD_INT 18
7826: PUSH
7827: LD_INT 19
7829: PUSH
7830: LD_INT 20
7832: PUSH
7833: LD_INT 21
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_INT 23
7841: PUSH
7842: LD_INT 24
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: LD_INT 27
7853: PUSH
7854: LD_INT 28
7856: PUSH
7857: LD_INT 30
7859: PUSH
7860: LD_INT 31
7862: PUSH
7863: LD_INT 32
7865: PUSH
7866: LD_INT 33
7868: PUSH
7869: LD_INT 34
7871: PUSH
7872: LD_INT 36
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 101
7913: PUSH
7914: LD_INT 102
7916: PUSH
7917: LD_INT 103
7919: PUSH
7920: LD_INT 104
7922: PUSH
7923: LD_INT 105
7925: PUSH
7926: LD_INT 106
7928: PUSH
7929: LD_INT 107
7931: PUSH
7932: LD_INT 108
7934: PUSH
7935: LD_INT 109
7937: PUSH
7938: LD_INT 110
7940: PUSH
7941: LD_INT 111
7943: PUSH
7944: LD_INT 112
7946: PUSH
7947: LD_INT 113
7949: PUSH
7950: LD_INT 114
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 9344
7975: LD_INT 13
7977: DOUBLE
7978: EQUAL
7979: IFTRUE 7983
7981: GO 8179
7983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7984: LD_ADDR_VAR 0 1
7988: PUSH
7989: LD_INT 1
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: LD_INT 3
7997: PUSH
7998: LD_INT 4
8000: PUSH
8001: LD_INT 5
8003: PUSH
8004: LD_INT 8
8006: PUSH
8007: LD_INT 9
8009: PUSH
8010: LD_INT 10
8012: PUSH
8013: LD_INT 11
8015: PUSH
8016: LD_INT 12
8018: PUSH
8019: LD_INT 14
8021: PUSH
8022: LD_INT 15
8024: PUSH
8025: LD_INT 16
8027: PUSH
8028: LD_INT 17
8030: PUSH
8031: LD_INT 18
8033: PUSH
8034: LD_INT 19
8036: PUSH
8037: LD_INT 20
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 22
8045: PUSH
8046: LD_INT 23
8048: PUSH
8049: LD_INT 24
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 27
8060: PUSH
8061: LD_INT 28
8063: PUSH
8064: LD_INT 30
8066: PUSH
8067: LD_INT 31
8069: PUSH
8070: LD_INT 32
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 34
8078: PUSH
8079: LD_INT 36
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 101
8117: PUSH
8118: LD_INT 102
8120: PUSH
8121: LD_INT 103
8123: PUSH
8124: LD_INT 104
8126: PUSH
8127: LD_INT 105
8129: PUSH
8130: LD_INT 106
8132: PUSH
8133: LD_INT 107
8135: PUSH
8136: LD_INT 108
8138: PUSH
8139: LD_INT 109
8141: PUSH
8142: LD_INT 110
8144: PUSH
8145: LD_INT 111
8147: PUSH
8148: LD_INT 112
8150: PUSH
8151: LD_INT 113
8153: PUSH
8154: LD_INT 114
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: ST_TO_ADDR
8177: GO 9344
8179: LD_INT 14
8181: DOUBLE
8182: EQUAL
8183: IFTRUE 8187
8185: GO 8399
8187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: LD_INT 6
8210: PUSH
8211: LD_INT 7
8213: PUSH
8214: LD_INT 8
8216: PUSH
8217: LD_INT 9
8219: PUSH
8220: LD_INT 10
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: LD_INT 12
8228: PUSH
8229: LD_INT 13
8231: PUSH
8232: LD_INT 14
8234: PUSH
8235: LD_INT 15
8237: PUSH
8238: LD_INT 16
8240: PUSH
8241: LD_INT 17
8243: PUSH
8244: LD_INT 18
8246: PUSH
8247: LD_INT 19
8249: PUSH
8250: LD_INT 20
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 22
8258: PUSH
8259: LD_INT 23
8261: PUSH
8262: LD_INT 24
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 26
8270: PUSH
8271: LD_INT 27
8273: PUSH
8274: LD_INT 28
8276: PUSH
8277: LD_INT 29
8279: PUSH
8280: LD_INT 30
8282: PUSH
8283: LD_INT 31
8285: PUSH
8286: LD_INT 32
8288: PUSH
8289: LD_INT 33
8291: PUSH
8292: LD_INT 34
8294: PUSH
8295: LD_INT 36
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 101
8337: PUSH
8338: LD_INT 102
8340: PUSH
8341: LD_INT 103
8343: PUSH
8344: LD_INT 104
8346: PUSH
8347: LD_INT 105
8349: PUSH
8350: LD_INT 106
8352: PUSH
8353: LD_INT 107
8355: PUSH
8356: LD_INT 108
8358: PUSH
8359: LD_INT 109
8361: PUSH
8362: LD_INT 110
8364: PUSH
8365: LD_INT 111
8367: PUSH
8368: LD_INT 112
8370: PUSH
8371: LD_INT 113
8373: PUSH
8374: LD_INT 114
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: ST_TO_ADDR
8397: GO 9344
8399: LD_INT 15
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8407
8405: GO 8619
8407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8408: LD_ADDR_VAR 0 1
8412: PUSH
8413: LD_INT 1
8415: PUSH
8416: LD_INT 2
8418: PUSH
8419: LD_INT 3
8421: PUSH
8422: LD_INT 4
8424: PUSH
8425: LD_INT 5
8427: PUSH
8428: LD_INT 6
8430: PUSH
8431: LD_INT 7
8433: PUSH
8434: LD_INT 8
8436: PUSH
8437: LD_INT 9
8439: PUSH
8440: LD_INT 10
8442: PUSH
8443: LD_INT 11
8445: PUSH
8446: LD_INT 12
8448: PUSH
8449: LD_INT 13
8451: PUSH
8452: LD_INT 14
8454: PUSH
8455: LD_INT 15
8457: PUSH
8458: LD_INT 16
8460: PUSH
8461: LD_INT 17
8463: PUSH
8464: LD_INT 18
8466: PUSH
8467: LD_INT 19
8469: PUSH
8470: LD_INT 20
8472: PUSH
8473: LD_INT 21
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_INT 23
8481: PUSH
8482: LD_INT 24
8484: PUSH
8485: LD_INT 25
8487: PUSH
8488: LD_INT 26
8490: PUSH
8491: LD_INT 27
8493: PUSH
8494: LD_INT 28
8496: PUSH
8497: LD_INT 29
8499: PUSH
8500: LD_INT 30
8502: PUSH
8503: LD_INT 31
8505: PUSH
8506: LD_INT 32
8508: PUSH
8509: LD_INT 33
8511: PUSH
8512: LD_INT 34
8514: PUSH
8515: LD_INT 36
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 101
8557: PUSH
8558: LD_INT 102
8560: PUSH
8561: LD_INT 103
8563: PUSH
8564: LD_INT 104
8566: PUSH
8567: LD_INT 105
8569: PUSH
8570: LD_INT 106
8572: PUSH
8573: LD_INT 107
8575: PUSH
8576: LD_INT 108
8578: PUSH
8579: LD_INT 109
8581: PUSH
8582: LD_INT 110
8584: PUSH
8585: LD_INT 111
8587: PUSH
8588: LD_INT 112
8590: PUSH
8591: LD_INT 113
8593: PUSH
8594: LD_INT 114
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: ST_TO_ADDR
8617: GO 9344
8619: LD_INT 16
8621: DOUBLE
8622: EQUAL
8623: IFTRUE 8627
8625: GO 8751
8627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8628: LD_ADDR_VAR 0 1
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: LD_INT 4
8638: PUSH
8639: LD_INT 5
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: LD_INT 11
8647: PUSH
8648: LD_INT 12
8650: PUSH
8651: LD_INT 15
8653: PUSH
8654: LD_INT 16
8656: PUSH
8657: LD_INT 20
8659: PUSH
8660: LD_INT 21
8662: PUSH
8663: LD_INT 22
8665: PUSH
8666: LD_INT 23
8668: PUSH
8669: LD_INT 25
8671: PUSH
8672: LD_INT 26
8674: PUSH
8675: LD_INT 30
8677: PUSH
8678: LD_INT 31
8680: PUSH
8681: LD_INT 32
8683: PUSH
8684: LD_INT 33
8686: PUSH
8687: LD_INT 34
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 101
8713: PUSH
8714: LD_INT 102
8716: PUSH
8717: LD_INT 103
8719: PUSH
8720: LD_INT 106
8722: PUSH
8723: LD_INT 108
8725: PUSH
8726: LD_INT 112
8728: PUSH
8729: LD_INT 113
8731: PUSH
8732: LD_INT 114
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9344
8751: LD_INT 17
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8971
8759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8760: LD_ADDR_VAR 0 1
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: LD_INT 4
8776: PUSH
8777: LD_INT 5
8779: PUSH
8780: LD_INT 6
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 8
8788: PUSH
8789: LD_INT 9
8791: PUSH
8792: LD_INT 10
8794: PUSH
8795: LD_INT 11
8797: PUSH
8798: LD_INT 12
8800: PUSH
8801: LD_INT 13
8803: PUSH
8804: LD_INT 14
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 16
8812: PUSH
8813: LD_INT 17
8815: PUSH
8816: LD_INT 18
8818: PUSH
8819: LD_INT 19
8821: PUSH
8822: LD_INT 20
8824: PUSH
8825: LD_INT 21
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: LD_INT 24
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 26
8842: PUSH
8843: LD_INT 27
8845: PUSH
8846: LD_INT 28
8848: PUSH
8849: LD_INT 29
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: LD_INT 32
8860: PUSH
8861: LD_INT 33
8863: PUSH
8864: LD_INT 34
8866: PUSH
8867: LD_INT 36
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 101
8909: PUSH
8910: LD_INT 102
8912: PUSH
8913: LD_INT 103
8915: PUSH
8916: LD_INT 104
8918: PUSH
8919: LD_INT 105
8921: PUSH
8922: LD_INT 106
8924: PUSH
8925: LD_INT 107
8927: PUSH
8928: LD_INT 108
8930: PUSH
8931: LD_INT 109
8933: PUSH
8934: LD_INT 110
8936: PUSH
8937: LD_INT 111
8939: PUSH
8940: LD_INT 112
8942: PUSH
8943: LD_INT 113
8945: PUSH
8946: LD_INT 114
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: ST_TO_ADDR
8969: GO 9344
8971: LD_INT 18
8973: DOUBLE
8974: EQUAL
8975: IFTRUE 8979
8977: GO 9115
8979: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8980: LD_ADDR_VAR 0 1
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: LD_INT 5
8993: PUSH
8994: LD_INT 7
8996: PUSH
8997: LD_INT 11
8999: PUSH
9000: LD_INT 12
9002: PUSH
9003: LD_INT 15
9005: PUSH
9006: LD_INT 16
9008: PUSH
9009: LD_INT 20
9011: PUSH
9012: LD_INT 21
9014: PUSH
9015: LD_INT 22
9017: PUSH
9018: LD_INT 23
9020: PUSH
9021: LD_INT 25
9023: PUSH
9024: LD_INT 26
9026: PUSH
9027: LD_INT 30
9029: PUSH
9030: LD_INT 31
9032: PUSH
9033: LD_INT 32
9035: PUSH
9036: LD_INT 33
9038: PUSH
9039: LD_INT 34
9041: PUSH
9042: LD_INT 35
9044: PUSH
9045: LD_INT 36
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 101
9073: PUSH
9074: LD_INT 102
9076: PUSH
9077: LD_INT 103
9079: PUSH
9080: LD_INT 106
9082: PUSH
9083: LD_INT 108
9085: PUSH
9086: LD_INT 112
9088: PUSH
9089: LD_INT 113
9091: PUSH
9092: LD_INT 114
9094: PUSH
9095: LD_INT 115
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: ST_TO_ADDR
9113: GO 9344
9115: LD_INT 19
9117: DOUBLE
9118: EQUAL
9119: IFTRUE 9123
9121: GO 9343
9123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9124: LD_ADDR_VAR 0 1
9128: PUSH
9129: LD_INT 1
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: LD_INT 3
9137: PUSH
9138: LD_INT 4
9140: PUSH
9141: LD_INT 5
9143: PUSH
9144: LD_INT 6
9146: PUSH
9147: LD_INT 7
9149: PUSH
9150: LD_INT 8
9152: PUSH
9153: LD_INT 9
9155: PUSH
9156: LD_INT 10
9158: PUSH
9159: LD_INT 11
9161: PUSH
9162: LD_INT 12
9164: PUSH
9165: LD_INT 13
9167: PUSH
9168: LD_INT 14
9170: PUSH
9171: LD_INT 15
9173: PUSH
9174: LD_INT 16
9176: PUSH
9177: LD_INT 17
9179: PUSH
9180: LD_INT 18
9182: PUSH
9183: LD_INT 19
9185: PUSH
9186: LD_INT 20
9188: PUSH
9189: LD_INT 21
9191: PUSH
9192: LD_INT 22
9194: PUSH
9195: LD_INT 23
9197: PUSH
9198: LD_INT 24
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 26
9206: PUSH
9207: LD_INT 27
9209: PUSH
9210: LD_INT 28
9212: PUSH
9213: LD_INT 29
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 31
9221: PUSH
9222: LD_INT 32
9224: PUSH
9225: LD_INT 33
9227: PUSH
9228: LD_INT 34
9230: PUSH
9231: LD_INT 35
9233: PUSH
9234: LD_INT 36
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 101
9277: PUSH
9278: LD_INT 102
9280: PUSH
9281: LD_INT 103
9283: PUSH
9284: LD_INT 104
9286: PUSH
9287: LD_INT 105
9289: PUSH
9290: LD_INT 106
9292: PUSH
9293: LD_INT 107
9295: PUSH
9296: LD_INT 108
9298: PUSH
9299: LD_INT 109
9301: PUSH
9302: LD_INT 110
9304: PUSH
9305: LD_INT 111
9307: PUSH
9308: LD_INT 112
9310: PUSH
9311: LD_INT 113
9313: PUSH
9314: LD_INT 114
9316: PUSH
9317: LD_INT 115
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: ST_TO_ADDR
9341: GO 9344
9343: POP
// end else
9344: GO 9563
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9346: LD_ADDR_VAR 0 1
9350: PUSH
9351: LD_INT 1
9353: PUSH
9354: LD_INT 2
9356: PUSH
9357: LD_INT 3
9359: PUSH
9360: LD_INT 4
9362: PUSH
9363: LD_INT 5
9365: PUSH
9366: LD_INT 6
9368: PUSH
9369: LD_INT 7
9371: PUSH
9372: LD_INT 8
9374: PUSH
9375: LD_INT 9
9377: PUSH
9378: LD_INT 10
9380: PUSH
9381: LD_INT 11
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 13
9389: PUSH
9390: LD_INT 14
9392: PUSH
9393: LD_INT 15
9395: PUSH
9396: LD_INT 16
9398: PUSH
9399: LD_INT 17
9401: PUSH
9402: LD_INT 18
9404: PUSH
9405: LD_INT 19
9407: PUSH
9408: LD_INT 20
9410: PUSH
9411: LD_INT 21
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 23
9419: PUSH
9420: LD_INT 24
9422: PUSH
9423: LD_INT 25
9425: PUSH
9426: LD_INT 26
9428: PUSH
9429: LD_INT 27
9431: PUSH
9432: LD_INT 28
9434: PUSH
9435: LD_INT 29
9437: PUSH
9438: LD_INT 30
9440: PUSH
9441: LD_INT 31
9443: PUSH
9444: LD_INT 32
9446: PUSH
9447: LD_INT 33
9449: PUSH
9450: LD_INT 34
9452: PUSH
9453: LD_INT 35
9455: PUSH
9456: LD_INT 36
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 101
9499: PUSH
9500: LD_INT 102
9502: PUSH
9503: LD_INT 103
9505: PUSH
9506: LD_INT 104
9508: PUSH
9509: LD_INT 105
9511: PUSH
9512: LD_INT 106
9514: PUSH
9515: LD_INT 107
9517: PUSH
9518: LD_INT 108
9520: PUSH
9521: LD_INT 109
9523: PUSH
9524: LD_INT 110
9526: PUSH
9527: LD_INT 111
9529: PUSH
9530: LD_INT 112
9532: PUSH
9533: LD_INT 113
9535: PUSH
9536: LD_INT 114
9538: PUSH
9539: LD_INT 115
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: ST_TO_ADDR
// if result then
9563: LD_VAR 0 1
9567: IFFALSE 9856
// begin normal :=  ;
9569: LD_ADDR_VAR 0 3
9573: PUSH
9574: LD_STRING 
9576: ST_TO_ADDR
// hardcore :=  ;
9577: LD_ADDR_VAR 0 4
9581: PUSH
9582: LD_STRING 
9584: ST_TO_ADDR
// for i = 1 to normalCounter do
9585: LD_ADDR_VAR 0 5
9589: PUSH
9590: DOUBLE
9591: LD_INT 1
9593: DEC
9594: ST_TO_ADDR
9595: LD_EXP 26
9599: PUSH
9600: FOR_TO
9601: IFFALSE 9702
// begin tmp := 0 ;
9603: LD_ADDR_VAR 0 2
9607: PUSH
9608: LD_STRING 0
9610: ST_TO_ADDR
// if result [ 1 ] then
9611: LD_VAR 0 1
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: IFFALSE 9684
// if result [ 1 ] [ 1 ] = i then
9621: LD_VAR 0 1
9625: PUSH
9626: LD_INT 1
9628: ARRAY
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PUSH
9634: LD_VAR 0 5
9638: EQUAL
9639: IFFALSE 9684
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9641: LD_ADDR_VAR 0 1
9645: PUSH
9646: LD_VAR 0 1
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_VAR 0 1
9658: PUSH
9659: LD_INT 1
9661: ARRAY
9662: PPUSH
9663: LD_INT 1
9665: PPUSH
9666: CALL_OW 3
9670: PPUSH
9671: CALL_OW 1
9675: ST_TO_ADDR
// tmp := 1 ;
9676: LD_ADDR_VAR 0 2
9680: PUSH
9681: LD_STRING 1
9683: ST_TO_ADDR
// end ; normal := normal & tmp ;
9684: LD_ADDR_VAR 0 3
9688: PUSH
9689: LD_VAR 0 3
9693: PUSH
9694: LD_VAR 0 2
9698: STR
9699: ST_TO_ADDR
// end ;
9700: GO 9600
9702: POP
9703: POP
// for i = 1 to hardcoreCounter do
9704: LD_ADDR_VAR 0 5
9708: PUSH
9709: DOUBLE
9710: LD_INT 1
9712: DEC
9713: ST_TO_ADDR
9714: LD_EXP 27
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9825
// begin tmp := 0 ;
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_STRING 0
9729: ST_TO_ADDR
// if result [ 2 ] then
9730: LD_VAR 0 1
9734: PUSH
9735: LD_INT 2
9737: ARRAY
9738: IFFALSE 9807
// if result [ 2 ] [ 1 ] = 100 + i then
9740: LD_VAR 0 1
9744: PUSH
9745: LD_INT 2
9747: ARRAY
9748: PUSH
9749: LD_INT 1
9751: ARRAY
9752: PUSH
9753: LD_INT 100
9755: PUSH
9756: LD_VAR 0 5
9760: PLUS
9761: EQUAL
9762: IFFALSE 9807
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_INT 2
9776: PPUSH
9777: LD_VAR 0 1
9781: PUSH
9782: LD_INT 2
9784: ARRAY
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 3
9793: PPUSH
9794: CALL_OW 1
9798: ST_TO_ADDR
// tmp := 1 ;
9799: LD_ADDR_VAR 0 2
9803: PUSH
9804: LD_STRING 1
9806: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9807: LD_ADDR_VAR 0 4
9811: PUSH
9812: LD_VAR 0 4
9816: PUSH
9817: LD_VAR 0 2
9821: STR
9822: ST_TO_ADDR
// end ;
9823: GO 9719
9825: POP
9826: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9827: LD_STRING getStreamItemsFromMission("
9829: PUSH
9830: LD_VAR 0 3
9834: STR
9835: PUSH
9836: LD_STRING ","
9838: STR
9839: PUSH
9840: LD_VAR 0 4
9844: STR
9845: PUSH
9846: LD_STRING ")
9848: STR
9849: PPUSH
9850: CALL_OW 559
// end else
9854: GO 9863
// ToLua ( getStreamItemsFromMission("","") ) ;
9856: LD_STRING getStreamItemsFromMission("","")
9858: PPUSH
9859: CALL_OW 559
// end ;
9863: LD_VAR 0 1
9867: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9868: LD_EXP 25
9872: PUSH
9873: LD_EXP 30
9877: AND
9878: IFFALSE 10002
9880: GO 9882
9882: DISABLE
9883: LD_INT 0
9885: PPUSH
9886: PPUSH
// begin enable ;
9887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9888: LD_ADDR_VAR 0 2
9892: PUSH
9893: LD_INT 22
9895: PUSH
9896: LD_OWVAR 2
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 2
9907: PUSH
9908: LD_INT 34
9910: PUSH
9911: LD_INT 7
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 34
9920: PUSH
9921: LD_INT 45
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 34
9930: PUSH
9931: LD_INT 28
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 34
9940: PUSH
9941: LD_INT 47
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PPUSH
9959: CALL_OW 69
9963: ST_TO_ADDR
// if not tmp then
9964: LD_VAR 0 2
9968: NOT
9969: IFFALSE 9973
// exit ;
9971: GO 10002
// for i in tmp do
9973: LD_ADDR_VAR 0 1
9977: PUSH
9978: LD_VAR 0 2
9982: PUSH
9983: FOR_IN
9984: IFFALSE 10000
// begin SetLives ( i , 0 ) ;
9986: LD_VAR 0 1
9990: PPUSH
9991: LD_INT 0
9993: PPUSH
9994: CALL_OW 234
// end ;
9998: GO 9983
10000: POP
10001: POP
// end ;
10002: PPOPN 2
10004: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10005: LD_EXP 25
10009: PUSH
10010: LD_EXP 31
10014: AND
10015: IFFALSE 10099
10017: GO 10019
10019: DISABLE
10020: LD_INT 0
10022: PPUSH
10023: PPUSH
// begin enable ;
10024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10025: LD_ADDR_VAR 0 2
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_OWVAR 2
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 32
10044: PUSH
10045: LD_INT 3
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: ST_TO_ADDR
// if not tmp then
10061: LD_VAR 0 2
10065: NOT
10066: IFFALSE 10070
// exit ;
10068: GO 10099
// for i in tmp do
10070: LD_ADDR_VAR 0 1
10074: PUSH
10075: LD_VAR 0 2
10079: PUSH
10080: FOR_IN
10081: IFFALSE 10097
// begin SetLives ( i , 0 ) ;
10083: LD_VAR 0 1
10087: PPUSH
10088: LD_INT 0
10090: PPUSH
10091: CALL_OW 234
// end ;
10095: GO 10080
10097: POP
10098: POP
// end ;
10099: PPOPN 2
10101: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10102: LD_EXP 25
10106: PUSH
10107: LD_EXP 28
10111: AND
10112: IFFALSE 10205
10114: GO 10116
10116: DISABLE
10117: LD_INT 0
10119: PPUSH
// begin enable ;
10120: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10121: LD_ADDR_VAR 0 1
10125: PUSH
10126: LD_INT 22
10128: PUSH
10129: LD_OWVAR 2
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: LD_INT 25
10143: PUSH
10144: LD_INT 5
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 25
10153: PUSH
10154: LD_INT 9
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 25
10163: PUSH
10164: LD_INT 8
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: PUSH
10186: FOR_IN
10187: IFFALSE 10203
// begin SetClass ( i , 1 ) ;
10189: LD_VAR 0 1
10193: PPUSH
10194: LD_INT 1
10196: PPUSH
10197: CALL_OW 336
// end ;
10201: GO 10186
10203: POP
10204: POP
// end ;
10205: PPOPN 1
10207: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10208: LD_EXP 25
10212: PUSH
10213: LD_EXP 29
10217: AND
10218: PUSH
10219: LD_OWVAR 65
10223: PUSH
10224: LD_INT 7
10226: LESS
10227: AND
10228: IFFALSE 10242
10230: GO 10232
10232: DISABLE
// begin enable ;
10233: ENABLE
// game_speed := 7 ;
10234: LD_ADDR_OWVAR 65
10238: PUSH
10239: LD_INT 7
10241: ST_TO_ADDR
// end ;
10242: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10243: LD_EXP 25
10247: PUSH
10248: LD_EXP 32
10252: AND
10253: IFFALSE 10455
10255: GO 10257
10257: DISABLE
10258: LD_INT 0
10260: PPUSH
10261: PPUSH
10262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10263: LD_ADDR_VAR 0 3
10267: PUSH
10268: LD_INT 81
10270: PUSH
10271: LD_OWVAR 2
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 21
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PPUSH
10294: CALL_OW 69
10298: ST_TO_ADDR
// if not tmp then
10299: LD_VAR 0 3
10303: NOT
10304: IFFALSE 10308
// exit ;
10306: GO 10455
// if tmp > 5 then
10308: LD_VAR 0 3
10312: PUSH
10313: LD_INT 5
10315: GREATER
10316: IFFALSE 10328
// k := 5 else
10318: LD_ADDR_VAR 0 2
10322: PUSH
10323: LD_INT 5
10325: ST_TO_ADDR
10326: GO 10338
// k := tmp ;
10328: LD_ADDR_VAR 0 2
10332: PUSH
10333: LD_VAR 0 3
10337: ST_TO_ADDR
// for i := 1 to k do
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: DOUBLE
10344: LD_INT 1
10346: DEC
10347: ST_TO_ADDR
10348: LD_VAR 0 2
10352: PUSH
10353: FOR_TO
10354: IFFALSE 10453
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_VAR 0 1
10365: ARRAY
10366: PPUSH
10367: LD_VAR 0 1
10371: PUSH
10372: LD_INT 4
10374: MOD
10375: PUSH
10376: LD_INT 1
10378: PLUS
10379: PPUSH
10380: CALL_OW 259
10384: PUSH
10385: LD_INT 10
10387: LESS
10388: IFFALSE 10451
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10390: LD_VAR 0 3
10394: PUSH
10395: LD_VAR 0 1
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 1
10405: PUSH
10406: LD_INT 4
10408: MOD
10409: PUSH
10410: LD_INT 1
10412: PLUS
10413: PPUSH
10414: LD_VAR 0 3
10418: PUSH
10419: LD_VAR 0 1
10423: ARRAY
10424: PPUSH
10425: LD_VAR 0 1
10429: PUSH
10430: LD_INT 4
10432: MOD
10433: PUSH
10434: LD_INT 1
10436: PLUS
10437: PPUSH
10438: CALL_OW 259
10442: PUSH
10443: LD_INT 1
10445: PLUS
10446: PPUSH
10447: CALL_OW 237
10451: GO 10353
10453: POP
10454: POP
// end ;
10455: PPOPN 3
10457: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10458: LD_EXP 25
10462: PUSH
10463: LD_EXP 33
10467: AND
10468: IFFALSE 10488
10470: GO 10472
10472: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10473: LD_INT 4
10475: PPUSH
10476: LD_OWVAR 2
10480: PPUSH
10481: LD_INT 0
10483: PPUSH
10484: CALL_OW 324
10488: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10489: LD_EXP 25
10493: PUSH
10494: LD_EXP 62
10498: AND
10499: IFFALSE 10519
10501: GO 10503
10503: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10504: LD_INT 19
10506: PPUSH
10507: LD_OWVAR 2
10511: PPUSH
10512: LD_INT 0
10514: PPUSH
10515: CALL_OW 324
10519: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10520: LD_EXP 25
10524: PUSH
10525: LD_EXP 34
10529: AND
10530: IFFALSE 10632
10532: GO 10534
10534: DISABLE
10535: LD_INT 0
10537: PPUSH
10538: PPUSH
// begin enable ;
10539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10540: LD_ADDR_VAR 0 2
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_OWVAR 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: LD_INT 34
10562: PUSH
10563: LD_INT 11
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 34
10572: PUSH
10573: LD_INT 30
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not tmp then
10594: LD_VAR 0 2
10598: NOT
10599: IFFALSE 10603
// exit ;
10601: GO 10632
// for i in tmp do
10603: LD_ADDR_VAR 0 1
10607: PUSH
10608: LD_VAR 0 2
10612: PUSH
10613: FOR_IN
10614: IFFALSE 10630
// begin SetLives ( i , 0 ) ;
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 0
10623: PPUSH
10624: CALL_OW 234
// end ;
10628: GO 10613
10630: POP
10631: POP
// end ;
10632: PPOPN 2
10634: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10635: LD_EXP 25
10639: PUSH
10640: LD_EXP 35
10644: AND
10645: IFFALSE 10665
10647: GO 10649
10649: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10650: LD_INT 32
10652: PPUSH
10653: LD_OWVAR 2
10657: PPUSH
10658: LD_INT 0
10660: PPUSH
10661: CALL_OW 324
10665: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10666: LD_EXP 25
10670: PUSH
10671: LD_EXP 36
10675: AND
10676: IFFALSE 10857
10678: GO 10680
10680: DISABLE
10681: LD_INT 0
10683: PPUSH
10684: PPUSH
10685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10686: LD_ADDR_VAR 0 2
10690: PUSH
10691: LD_INT 22
10693: PUSH
10694: LD_OWVAR 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 33
10705: PUSH
10706: LD_INT 3
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PPUSH
10717: CALL_OW 69
10721: ST_TO_ADDR
// if not tmp then
10722: LD_VAR 0 2
10726: NOT
10727: IFFALSE 10731
// exit ;
10729: GO 10857
// side := 0 ;
10731: LD_ADDR_VAR 0 3
10735: PUSH
10736: LD_INT 0
10738: ST_TO_ADDR
// for i := 1 to 8 do
10739: LD_ADDR_VAR 0 1
10743: PUSH
10744: DOUBLE
10745: LD_INT 1
10747: DEC
10748: ST_TO_ADDR
10749: LD_INT 8
10751: PUSH
10752: FOR_TO
10753: IFFALSE 10801
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10755: LD_OWVAR 2
10759: PUSH
10760: LD_VAR 0 1
10764: NONEQUAL
10765: PUSH
10766: LD_OWVAR 2
10770: PPUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 81
10780: PUSH
10781: LD_INT 2
10783: EQUAL
10784: AND
10785: IFFALSE 10799
// begin side := i ;
10787: LD_ADDR_VAR 0 3
10791: PUSH
10792: LD_VAR 0 1
10796: ST_TO_ADDR
// break ;
10797: GO 10801
// end ;
10799: GO 10752
10801: POP
10802: POP
// if not side then
10803: LD_VAR 0 3
10807: NOT
10808: IFFALSE 10812
// exit ;
10810: GO 10857
// for i := 1 to tmp do
10812: LD_ADDR_VAR 0 1
10816: PUSH
10817: DOUBLE
10818: LD_INT 1
10820: DEC
10821: ST_TO_ADDR
10822: LD_VAR 0 2
10826: PUSH
10827: FOR_TO
10828: IFFALSE 10855
// if Prob ( 60 ) then
10830: LD_INT 60
10832: PPUSH
10833: CALL_OW 13
10837: IFFALSE 10853
// SetSide ( i , side ) ;
10839: LD_VAR 0 1
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: CALL_OW 235
10853: GO 10827
10855: POP
10856: POP
// end ;
10857: PPOPN 3
10859: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10860: LD_EXP 25
10864: PUSH
10865: LD_EXP 38
10869: AND
10870: IFFALSE 10989
10872: GO 10874
10874: DISABLE
10875: LD_INT 0
10877: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10878: LD_ADDR_VAR 0 1
10882: PUSH
10883: LD_INT 22
10885: PUSH
10886: LD_OWVAR 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 21
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 3
10907: PUSH
10908: LD_INT 23
10910: PUSH
10911: LD_INT 0
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: PPUSH
10927: CALL_OW 69
10931: PUSH
10932: FOR_IN
10933: IFFALSE 10987
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10935: LD_VAR 0 1
10939: PPUSH
10940: CALL_OW 257
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 3
10953: PUSH
10954: LD_INT 4
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: IN
10963: IFFALSE 10985
// SetClass ( un , rand ( 1 , 4 ) ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: LD_INT 4
10975: PPUSH
10976: CALL_OW 12
10980: PPUSH
10981: CALL_OW 336
10985: GO 10932
10987: POP
10988: POP
// end ;
10989: PPOPN 1
10991: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10992: LD_EXP 25
10996: PUSH
10997: LD_EXP 37
11001: AND
11002: IFFALSE 11081
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_OWVAR 2
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 21
11029: PUSH
11030: LD_INT 3
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PPUSH
11041: CALL_OW 69
11045: ST_TO_ADDR
// if not tmp then
11046: LD_VAR 0 1
11050: NOT
11051: IFFALSE 11055
// exit ;
11053: GO 11081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11055: LD_VAR 0 1
11059: PUSH
11060: LD_INT 1
11062: PPUSH
11063: LD_VAR 0 1
11067: PPUSH
11068: CALL_OW 12
11072: ARRAY
11073: PPUSH
11074: LD_INT 100
11076: PPUSH
11077: CALL_OW 234
// end ;
11081: PPOPN 1
11083: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11084: LD_EXP 25
11088: PUSH
11089: LD_EXP 39
11093: AND
11094: IFFALSE 11192
11096: GO 11098
11098: DISABLE
11099: LD_INT 0
11101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11102: LD_ADDR_VAR 0 1
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_OWVAR 2
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 1
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PPUSH
11133: CALL_OW 69
11137: ST_TO_ADDR
// if not tmp then
11138: LD_VAR 0 1
11142: NOT
11143: IFFALSE 11147
// exit ;
11145: GO 11192
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11147: LD_VAR 0 1
11151: PUSH
11152: LD_INT 1
11154: PPUSH
11155: LD_VAR 0 1
11159: PPUSH
11160: CALL_OW 12
11164: ARRAY
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: LD_INT 4
11171: PPUSH
11172: CALL_OW 12
11176: PPUSH
11177: LD_INT 3000
11179: PPUSH
11180: LD_INT 9000
11182: PPUSH
11183: CALL_OW 12
11187: PPUSH
11188: CALL_OW 492
// end ;
11192: PPOPN 1
11194: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11195: LD_EXP 25
11199: PUSH
11200: LD_EXP 40
11204: AND
11205: IFFALSE 11225
11207: GO 11209
11209: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11210: LD_INT 1
11212: PPUSH
11213: LD_OWVAR 2
11217: PPUSH
11218: LD_INT 0
11220: PPUSH
11221: CALL_OW 324
11225: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11226: LD_EXP 25
11230: PUSH
11231: LD_EXP 41
11235: AND
11236: IFFALSE 11319
11238: GO 11240
11240: DISABLE
11241: LD_INT 0
11243: PPUSH
11244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11245: LD_ADDR_VAR 0 2
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: LD_OWVAR 2
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: ST_TO_ADDR
// if not tmp then
11281: LD_VAR 0 2
11285: NOT
11286: IFFALSE 11290
// exit ;
11288: GO 11319
// for i in tmp do
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: LD_VAR 0 2
11299: PUSH
11300: FOR_IN
11301: IFFALSE 11317
// SetBLevel ( i , 10 ) ;
11303: LD_VAR 0 1
11307: PPUSH
11308: LD_INT 10
11310: PPUSH
11311: CALL_OW 241
11315: GO 11300
11317: POP
11318: POP
// end ;
11319: PPOPN 2
11321: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11322: LD_EXP 25
11326: PUSH
11327: LD_EXP 42
11331: AND
11332: IFFALSE 11443
11334: GO 11336
11336: DISABLE
11337: LD_INT 0
11339: PPUSH
11340: PPUSH
11341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11342: LD_ADDR_VAR 0 3
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_OWVAR 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 25
11361: PUSH
11362: LD_INT 1
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PPUSH
11373: CALL_OW 69
11377: ST_TO_ADDR
// if not tmp then
11378: LD_VAR 0 3
11382: NOT
11383: IFFALSE 11387
// exit ;
11385: GO 11443
// un := tmp [ rand ( 1 , tmp ) ] ;
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: LD_VAR 0 3
11396: PUSH
11397: LD_INT 1
11399: PPUSH
11400: LD_VAR 0 3
11404: PPUSH
11405: CALL_OW 12
11409: ARRAY
11410: ST_TO_ADDR
// if Crawls ( un ) then
11411: LD_VAR 0 2
11415: PPUSH
11416: CALL_OW 318
11420: IFFALSE 11431
// ComWalk ( un ) ;
11422: LD_VAR 0 2
11426: PPUSH
11427: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11431: LD_VAR 0 2
11435: PPUSH
11436: LD_INT 5
11438: PPUSH
11439: CALL_OW 336
// end ;
11443: PPOPN 3
11445: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11446: LD_EXP 25
11450: PUSH
11451: LD_EXP 43
11455: AND
11456: PUSH
11457: LD_OWVAR 67
11461: PUSH
11462: LD_INT 3
11464: LESS
11465: AND
11466: IFFALSE 11485
11468: GO 11470
11470: DISABLE
// Difficulty := Difficulty + 1 ;
11471: LD_ADDR_OWVAR 67
11475: PUSH
11476: LD_OWVAR 67
11480: PUSH
11481: LD_INT 1
11483: PLUS
11484: ST_TO_ADDR
11485: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11486: LD_EXP 25
11490: PUSH
11491: LD_EXP 44
11495: AND
11496: IFFALSE 11599
11498: GO 11500
11500: DISABLE
11501: LD_INT 0
11503: PPUSH
// begin for i := 1 to 5 do
11504: LD_ADDR_VAR 0 1
11508: PUSH
11509: DOUBLE
11510: LD_INT 1
11512: DEC
11513: ST_TO_ADDR
11514: LD_INT 5
11516: PUSH
11517: FOR_TO
11518: IFFALSE 11597
// begin uc_nation := nation_nature ;
11520: LD_ADDR_OWVAR 21
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// uc_side := 0 ;
11528: LD_ADDR_OWVAR 20
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11536: LD_ADDR_OWVAR 29
11540: PUSH
11541: LD_INT 12
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: ST_TO_ADDR
// hc_agressivity := 20 ;
11551: LD_ADDR_OWVAR 35
11555: PUSH
11556: LD_INT 20
11558: ST_TO_ADDR
// hc_class := class_tiger ;
11559: LD_ADDR_OWVAR 28
11563: PUSH
11564: LD_INT 14
11566: ST_TO_ADDR
// hc_gallery :=  ;
11567: LD_ADDR_OWVAR 33
11571: PUSH
11572: LD_STRING 
11574: ST_TO_ADDR
// hc_name :=  ;
11575: LD_ADDR_OWVAR 26
11579: PUSH
11580: LD_STRING 
11582: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11583: CALL_OW 44
11587: PPUSH
11588: LD_INT 0
11590: PPUSH
11591: CALL_OW 51
// end ;
11595: GO 11517
11597: POP
11598: POP
// end ;
11599: PPOPN 1
11601: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11602: LD_EXP 25
11606: PUSH
11607: LD_EXP 45
11611: AND
11612: IFFALSE 11621
11614: GO 11616
11616: DISABLE
// StreamSibBomb ;
11617: CALL 11622 0 0
11621: END
// export function StreamSibBomb ; var i , x , y ; begin
11622: LD_INT 0
11624: PPUSH
11625: PPUSH
11626: PPUSH
11627: PPUSH
// result := false ;
11628: LD_ADDR_VAR 0 1
11632: PUSH
11633: LD_INT 0
11635: ST_TO_ADDR
// for i := 1 to 16 do
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: DOUBLE
11642: LD_INT 1
11644: DEC
11645: ST_TO_ADDR
11646: LD_INT 16
11648: PUSH
11649: FOR_TO
11650: IFFALSE 11849
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11652: LD_ADDR_VAR 0 3
11656: PUSH
11657: LD_INT 10
11659: PUSH
11660: LD_INT 20
11662: PUSH
11663: LD_INT 30
11665: PUSH
11666: LD_INT 40
11668: PUSH
11669: LD_INT 50
11671: PUSH
11672: LD_INT 60
11674: PUSH
11675: LD_INT 70
11677: PUSH
11678: LD_INT 80
11680: PUSH
11681: LD_INT 90
11683: PUSH
11684: LD_INT 100
11686: PUSH
11687: LD_INT 110
11689: PUSH
11690: LD_INT 120
11692: PUSH
11693: LD_INT 130
11695: PUSH
11696: LD_INT 140
11698: PUSH
11699: LD_INT 150
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 1
11721: PPUSH
11722: LD_INT 15
11724: PPUSH
11725: CALL_OW 12
11729: ARRAY
11730: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11731: LD_ADDR_VAR 0 4
11735: PUSH
11736: LD_INT 10
11738: PUSH
11739: LD_INT 20
11741: PUSH
11742: LD_INT 30
11744: PUSH
11745: LD_INT 40
11747: PUSH
11748: LD_INT 50
11750: PUSH
11751: LD_INT 60
11753: PUSH
11754: LD_INT 70
11756: PUSH
11757: LD_INT 80
11759: PUSH
11760: LD_INT 90
11762: PUSH
11763: LD_INT 100
11765: PUSH
11766: LD_INT 110
11768: PUSH
11769: LD_INT 120
11771: PUSH
11772: LD_INT 130
11774: PUSH
11775: LD_INT 140
11777: PUSH
11778: LD_INT 150
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_INT 15
11803: PPUSH
11804: CALL_OW 12
11808: ARRAY
11809: ST_TO_ADDR
// if ValidHex ( x , y ) then
11810: LD_VAR 0 3
11814: PPUSH
11815: LD_VAR 0 4
11819: PPUSH
11820: CALL_OW 488
11824: IFFALSE 11847
// begin result := [ x , y ] ;
11826: LD_ADDR_VAR 0 1
11830: PUSH
11831: LD_VAR 0 3
11835: PUSH
11836: LD_VAR 0 4
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: ST_TO_ADDR
// break ;
11845: GO 11849
// end ; end ;
11847: GO 11649
11849: POP
11850: POP
// if result then
11851: LD_VAR 0 1
11855: IFFALSE 11915
// begin ToLua ( playSibBomb() ) ;
11857: LD_STRING playSibBomb()
11859: PPUSH
11860: CALL_OW 559
// wait ( 0 0$14 ) ;
11864: LD_INT 490
11866: PPUSH
11867: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11871: LD_VAR 0 1
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: LD_VAR 0 1
11884: PUSH
11885: LD_INT 2
11887: ARRAY
11888: PPUSH
11889: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11893: LD_VAR 0 1
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: PPUSH
11902: LD_VAR 0 1
11906: PUSH
11907: LD_INT 2
11909: ARRAY
11910: PPUSH
11911: CALL_OW 429
// end ; end ;
11915: LD_VAR 0 1
11919: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11920: LD_EXP 25
11924: PUSH
11925: LD_EXP 47
11929: AND
11930: IFFALSE 11942
11932: GO 11934
11934: DISABLE
// YouLost (  ) ;
11935: LD_STRING 
11937: PPUSH
11938: CALL_OW 104
11942: END
// every 0 0$1 trigger StreamModeActive and sFog do
11943: LD_EXP 25
11947: PUSH
11948: LD_EXP 46
11952: AND
11953: IFFALSE 11967
11955: GO 11957
11957: DISABLE
// FogOff ( your_side ) ;
11958: LD_OWVAR 2
11962: PPUSH
11963: CALL_OW 344
11967: END
// every 0 0$1 trigger StreamModeActive and sSun do
11968: LD_EXP 25
11972: PUSH
11973: LD_EXP 48
11977: AND
11978: IFFALSE 12006
11980: GO 11982
11982: DISABLE
// begin solar_recharge_percent := 0 ;
11983: LD_ADDR_OWVAR 79
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11991: LD_INT 10500
11993: PPUSH
11994: CALL_OW 67
// solar_recharge_percent := 100 ;
11998: LD_ADDR_OWVAR 79
12002: PUSH
12003: LD_INT 100
12005: ST_TO_ADDR
// end ;
12006: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12007: LD_EXP 25
12011: PUSH
12012: LD_EXP 49
12016: AND
12017: IFFALSE 12256
12019: GO 12021
12021: DISABLE
12022: LD_INT 0
12024: PPUSH
12025: PPUSH
12026: PPUSH
// begin tmp := [ ] ;
12027: LD_ADDR_VAR 0 3
12031: PUSH
12032: EMPTY
12033: ST_TO_ADDR
// for i := 1 to 6 do
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: DOUBLE
12040: LD_INT 1
12042: DEC
12043: ST_TO_ADDR
12044: LD_INT 6
12046: PUSH
12047: FOR_TO
12048: IFFALSE 12153
// begin uc_nation := nation_nature ;
12050: LD_ADDR_OWVAR 21
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
// uc_side := 0 ;
12058: LD_ADDR_OWVAR 20
12062: PUSH
12063: LD_INT 0
12065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12066: LD_ADDR_OWVAR 29
12070: PUSH
12071: LD_INT 12
12073: PUSH
12074: LD_INT 12
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: ST_TO_ADDR
// hc_agressivity := 20 ;
12081: LD_ADDR_OWVAR 35
12085: PUSH
12086: LD_INT 20
12088: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12089: LD_ADDR_OWVAR 28
12093: PUSH
12094: LD_INT 17
12096: ST_TO_ADDR
// hc_gallery :=  ;
12097: LD_ADDR_OWVAR 33
12101: PUSH
12102: LD_STRING 
12104: ST_TO_ADDR
// hc_name :=  ;
12105: LD_ADDR_OWVAR 26
12109: PUSH
12110: LD_STRING 
12112: ST_TO_ADDR
// un := CreateHuman ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: CALL_OW 44
12122: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12123: LD_VAR 0 2
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 51
// tmp := tmp ^ un ;
12135: LD_ADDR_VAR 0 3
12139: PUSH
12140: LD_VAR 0 3
12144: PUSH
12145: LD_VAR 0 2
12149: ADD
12150: ST_TO_ADDR
// end ;
12151: GO 12047
12153: POP
12154: POP
// repeat wait ( 0 0$1 ) ;
12155: LD_INT 35
12157: PPUSH
12158: CALL_OW 67
// for un in tmp do
12162: LD_ADDR_VAR 0 2
12166: PUSH
12167: LD_VAR 0 3
12171: PUSH
12172: FOR_IN
12173: IFFALSE 12247
// begin if IsDead ( un ) then
12175: LD_VAR 0 2
12179: PPUSH
12180: CALL_OW 301
12184: IFFALSE 12204
// begin tmp := tmp diff un ;
12186: LD_ADDR_VAR 0 3
12190: PUSH
12191: LD_VAR 0 3
12195: PUSH
12196: LD_VAR 0 2
12200: DIFF
12201: ST_TO_ADDR
// continue ;
12202: GO 12172
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12204: LD_VAR 0 2
12208: PPUSH
12209: LD_INT 3
12211: PUSH
12212: LD_INT 22
12214: PUSH
12215: LD_INT 0
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 69
12230: PPUSH
12231: LD_VAR 0 2
12235: PPUSH
12236: CALL_OW 74
12240: PPUSH
12241: CALL_OW 115
// end ;
12245: GO 12172
12247: POP
12248: POP
// until not tmp ;
12249: LD_VAR 0 3
12253: NOT
12254: IFFALSE 12155
// end ;
12256: PPOPN 3
12258: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12259: LD_EXP 25
12263: PUSH
12264: LD_EXP 50
12268: AND
12269: IFFALSE 12323
12271: GO 12273
12273: DISABLE
// begin ToLua ( displayTroll(); ) ;
12274: LD_STRING displayTroll();
12276: PPUSH
12277: CALL_OW 559
// wait ( 3 3$00 ) ;
12281: LD_INT 6300
12283: PPUSH
12284: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12288: LD_STRING hideTroll();
12290: PPUSH
12291: CALL_OW 559
// wait ( 1 1$00 ) ;
12295: LD_INT 2100
12297: PPUSH
12298: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12302: LD_STRING displayTroll();
12304: PPUSH
12305: CALL_OW 559
// wait ( 1 1$00 ) ;
12309: LD_INT 2100
12311: PPUSH
12312: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12316: LD_STRING hideTroll();
12318: PPUSH
12319: CALL_OW 559
// end ;
12323: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12324: LD_EXP 25
12328: PUSH
12329: LD_EXP 51
12333: AND
12334: IFFALSE 12397
12336: GO 12338
12338: DISABLE
12339: LD_INT 0
12341: PPUSH
// begin p := 0 ;
12342: LD_ADDR_VAR 0 1
12346: PUSH
12347: LD_INT 0
12349: ST_TO_ADDR
// repeat game_speed := 1 ;
12350: LD_ADDR_OWVAR 65
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12358: LD_INT 35
12360: PPUSH
12361: CALL_OW 67
// p := p + 1 ;
12365: LD_ADDR_VAR 0 1
12369: PUSH
12370: LD_VAR 0 1
12374: PUSH
12375: LD_INT 1
12377: PLUS
12378: ST_TO_ADDR
// until p >= 60 ;
12379: LD_VAR 0 1
12383: PUSH
12384: LD_INT 60
12386: GREATEREQUAL
12387: IFFALSE 12350
// game_speed := 4 ;
12389: LD_ADDR_OWVAR 65
12393: PUSH
12394: LD_INT 4
12396: ST_TO_ADDR
// end ;
12397: PPOPN 1
12399: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12400: LD_EXP 25
12404: PUSH
12405: LD_EXP 52
12409: AND
12410: IFFALSE 12556
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12419: LD_ADDR_VAR 0 1
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_OWVAR 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 2
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: LD_INT 0
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 30
12451: PUSH
12452: LD_INT 1
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 69
12472: ST_TO_ADDR
// if not depot then
12473: LD_VAR 0 1
12477: NOT
12478: IFFALSE 12482
// exit ;
12480: GO 12556
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12482: LD_ADDR_VAR 0 2
12486: PUSH
12487: LD_VAR 0 1
12491: PUSH
12492: LD_INT 1
12494: PPUSH
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 12
12504: ARRAY
12505: PPUSH
12506: CALL_OW 274
12510: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12511: LD_VAR 0 2
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: LD_INT 0
12521: PPUSH
12522: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12526: LD_VAR 0 2
12530: PPUSH
12531: LD_INT 2
12533: PPUSH
12534: LD_INT 0
12536: PPUSH
12537: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12541: LD_VAR 0 2
12545: PPUSH
12546: LD_INT 3
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 277
// end ;
12556: PPOPN 2
12558: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12559: LD_EXP 25
12563: PUSH
12564: LD_EXP 53
12568: AND
12569: IFFALSE 12666
12571: GO 12573
12573: DISABLE
12574: LD_INT 0
12576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12577: LD_ADDR_VAR 0 1
12581: PUSH
12582: LD_INT 22
12584: PUSH
12585: LD_OWVAR 2
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 21
12596: PUSH
12597: LD_INT 1
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 3
12606: PUSH
12607: LD_INT 23
12609: PUSH
12610: LD_INT 0
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 69
12630: ST_TO_ADDR
// if not tmp then
12631: LD_VAR 0 1
12635: NOT
12636: IFFALSE 12640
// exit ;
12638: GO 12666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12640: LD_VAR 0 1
12644: PUSH
12645: LD_INT 1
12647: PPUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL_OW 12
12657: ARRAY
12658: PPUSH
12659: LD_INT 200
12661: PPUSH
12662: CALL_OW 234
// end ;
12666: PPOPN 1
12668: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12669: LD_EXP 25
12673: PUSH
12674: LD_EXP 54
12678: AND
12679: IFFALSE 12758
12681: GO 12683
12683: DISABLE
12684: LD_INT 0
12686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12687: LD_ADDR_VAR 0 1
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_OWVAR 2
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 69
12722: ST_TO_ADDR
// if not tmp then
12723: LD_VAR 0 1
12727: NOT
12728: IFFALSE 12732
// exit ;
12730: GO 12758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12732: LD_VAR 0 1
12736: PUSH
12737: LD_INT 1
12739: PPUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 12
12749: ARRAY
12750: PPUSH
12751: LD_INT 60
12753: PPUSH
12754: CALL_OW 234
// end ;
12758: PPOPN 1
12760: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12761: LD_EXP 25
12765: PUSH
12766: LD_EXP 55
12770: AND
12771: IFFALSE 12870
12773: GO 12775
12775: DISABLE
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
// begin enable ;
12780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12781: LD_ADDR_VAR 0 1
12785: PUSH
12786: LD_INT 22
12788: PUSH
12789: LD_OWVAR 2
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 61
12800: PUSH
12801: EMPTY
12802: LIST
12803: PUSH
12804: LD_INT 33
12806: PUSH
12807: LD_INT 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: ST_TO_ADDR
// if not tmp then
12824: LD_VAR 0 1
12828: NOT
12829: IFFALSE 12833
// exit ;
12831: GO 12870
// for i in tmp do
12833: LD_ADDR_VAR 0 2
12837: PUSH
12838: LD_VAR 0 1
12842: PUSH
12843: FOR_IN
12844: IFFALSE 12868
// if IsControledBy ( i ) then
12846: LD_VAR 0 2
12850: PPUSH
12851: CALL_OW 312
12855: IFFALSE 12866
// ComUnlink ( i ) ;
12857: LD_VAR 0 2
12861: PPUSH
12862: CALL_OW 136
12866: GO 12843
12868: POP
12869: POP
// end ;
12870: PPOPN 2
12872: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12873: LD_EXP 25
12877: PUSH
12878: LD_EXP 56
12882: AND
12883: IFFALSE 13023
12885: GO 12887
12887: DISABLE
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
// begin ToLua ( displayPowell(); ) ;
12892: LD_STRING displayPowell();
12894: PPUSH
12895: CALL_OW 559
// uc_side := 0 ;
12899: LD_ADDR_OWVAR 20
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// uc_nation := 2 ;
12907: LD_ADDR_OWVAR 21
12911: PUSH
12912: LD_INT 2
12914: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12915: LD_ADDR_OWVAR 37
12919: PUSH
12920: LD_INT 14
12922: ST_TO_ADDR
// vc_engine := engine_siberite ;
12923: LD_ADDR_OWVAR 39
12927: PUSH
12928: LD_INT 3
12930: ST_TO_ADDR
// vc_control := control_apeman ;
12931: LD_ADDR_OWVAR 38
12935: PUSH
12936: LD_INT 5
12938: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12939: LD_ADDR_OWVAR 40
12943: PUSH
12944: LD_INT 29
12946: ST_TO_ADDR
// un := CreateVehicle ;
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: CALL_OW 45
12956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12957: LD_VAR 0 2
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12969: LD_INT 35
12971: PPUSH
12972: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12976: LD_VAR 0 2
12980: PPUSH
12981: LD_INT 22
12983: PUSH
12984: LD_OWVAR 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PPUSH
12993: CALL_OW 69
12997: PPUSH
12998: LD_VAR 0 2
13002: PPUSH
13003: CALL_OW 74
13007: PPUSH
13008: CALL_OW 115
// until IsDead ( un ) ;
13012: LD_VAR 0 2
13016: PPUSH
13017: CALL_OW 301
13021: IFFALSE 12969
// end ;
13023: PPOPN 2
13025: END
// every 0 0$1 trigger StreamModeActive and sStu do
13026: LD_EXP 25
13030: PUSH
13031: LD_EXP 64
13035: AND
13036: IFFALSE 13052
13038: GO 13040
13040: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13041: LD_STRING displayStucuk();
13043: PPUSH
13044: CALL_OW 559
// ResetFog ;
13048: CALL_OW 335
// end ;
13052: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13053: LD_EXP 25
13057: PUSH
13058: LD_EXP 57
13062: AND
13063: IFFALSE 13204
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
13071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13072: LD_ADDR_VAR 0 2
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_OWVAR 2
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: ST_TO_ADDR
// if not tmp then
13108: LD_VAR 0 2
13112: NOT
13113: IFFALSE 13117
// exit ;
13115: GO 13204
// un := tmp [ rand ( 1 , tmp ) ] ;
13117: LD_ADDR_VAR 0 1
13121: PUSH
13122: LD_VAR 0 2
13126: PUSH
13127: LD_INT 1
13129: PPUSH
13130: LD_VAR 0 2
13134: PPUSH
13135: CALL_OW 12
13139: ARRAY
13140: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13141: LD_VAR 0 1
13145: PPUSH
13146: LD_INT 0
13148: PPUSH
13149: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13153: LD_VAR 0 1
13157: PPUSH
13158: LD_OWVAR 3
13162: PUSH
13163: LD_VAR 0 1
13167: DIFF
13168: PPUSH
13169: LD_VAR 0 1
13173: PPUSH
13174: CALL_OW 74
13178: PPUSH
13179: CALL_OW 115
// wait ( 0 0$20 ) ;
13183: LD_INT 700
13185: PPUSH
13186: CALL_OW 67
// SetSide ( un , your_side ) ;
13190: LD_VAR 0 1
13194: PPUSH
13195: LD_OWVAR 2
13199: PPUSH
13200: CALL_OW 235
// end ;
13204: PPOPN 2
13206: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13207: LD_EXP 25
13211: PUSH
13212: LD_EXP 58
13216: AND
13217: IFFALSE 13323
13219: GO 13221
13221: DISABLE
13222: LD_INT 0
13224: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13225: LD_ADDR_VAR 0 1
13229: PUSH
13230: LD_INT 22
13232: PUSH
13233: LD_OWVAR 2
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 30
13247: PUSH
13248: LD_INT 0
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 30
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PPUSH
13274: CALL_OW 69
13278: ST_TO_ADDR
// if not depot then
13279: LD_VAR 0 1
13283: NOT
13284: IFFALSE 13288
// exit ;
13286: GO 13323
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13288: LD_VAR 0 1
13292: PUSH
13293: LD_INT 1
13295: ARRAY
13296: PPUSH
13297: CALL_OW 250
13301: PPUSH
13302: LD_VAR 0 1
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: PPUSH
13311: CALL_OW 251
13315: PPUSH
13316: LD_INT 70
13318: PPUSH
13319: CALL_OW 495
// end ;
13323: PPOPN 1
13325: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13326: LD_EXP 25
13330: PUSH
13331: LD_EXP 59
13335: AND
13336: IFFALSE 13547
13338: GO 13340
13340: DISABLE
13341: LD_INT 0
13343: PPUSH
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13348: LD_ADDR_VAR 0 5
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_OWVAR 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 21
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: ST_TO_ADDR
// if not tmp then
13384: LD_VAR 0 5
13388: NOT
13389: IFFALSE 13393
// exit ;
13391: GO 13547
// for i in tmp do
13393: LD_ADDR_VAR 0 1
13397: PUSH
13398: LD_VAR 0 5
13402: PUSH
13403: FOR_IN
13404: IFFALSE 13545
// begin d := rand ( 0 , 5 ) ;
13406: LD_ADDR_VAR 0 4
13410: PUSH
13411: LD_INT 0
13413: PPUSH
13414: LD_INT 5
13416: PPUSH
13417: CALL_OW 12
13421: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: LD_VAR 0 1
13431: PPUSH
13432: CALL_OW 250
13436: PPUSH
13437: LD_VAR 0 4
13441: PPUSH
13442: LD_INT 3
13444: PPUSH
13445: LD_INT 12
13447: PPUSH
13448: CALL_OW 12
13452: PPUSH
13453: CALL_OW 272
13457: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13458: LD_ADDR_VAR 0 3
13462: PUSH
13463: LD_VAR 0 1
13467: PPUSH
13468: CALL_OW 251
13472: PPUSH
13473: LD_VAR 0 4
13477: PPUSH
13478: LD_INT 3
13480: PPUSH
13481: LD_INT 12
13483: PPUSH
13484: CALL_OW 12
13488: PPUSH
13489: CALL_OW 273
13493: ST_TO_ADDR
// if ValidHex ( x , y ) then
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: CALL_OW 488
13508: IFFALSE 13543
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13510: LD_VAR 0 1
13514: PPUSH
13515: LD_VAR 0 2
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 3
13527: PPUSH
13528: LD_INT 6
13530: PPUSH
13531: CALL_OW 12
13535: PPUSH
13536: LD_INT 1
13538: PPUSH
13539: CALL_OW 483
// end ;
13543: GO 13403
13545: POP
13546: POP
// end ;
13547: PPOPN 5
13549: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13550: LD_EXP 25
13554: PUSH
13555: LD_EXP 60
13559: AND
13560: IFFALSE 13654
13562: GO 13564
13564: DISABLE
13565: LD_INT 0
13567: PPUSH
13568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13569: LD_ADDR_VAR 0 2
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_OWVAR 2
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 32
13588: PUSH
13589: LD_INT 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 21
13598: PUSH
13599: LD_INT 2
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: ST_TO_ADDR
// if not tmp then
13616: LD_VAR 0 2
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 13654
// for i in tmp do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_VAR 0 2
13634: PUSH
13635: FOR_IN
13636: IFFALSE 13652
// SetFuel ( i , 0 ) ;
13638: LD_VAR 0 1
13642: PPUSH
13643: LD_INT 0
13645: PPUSH
13646: CALL_OW 240
13650: GO 13635
13652: POP
13653: POP
// end ;
13654: PPOPN 2
13656: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13657: LD_EXP 25
13661: PUSH
13662: LD_EXP 61
13666: AND
13667: IFFALSE 13733
13669: GO 13671
13671: DISABLE
13672: LD_INT 0
13674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13675: LD_ADDR_VAR 0 1
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_OWVAR 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 30
13694: PUSH
13695: LD_INT 29
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: ST_TO_ADDR
// if not tmp then
13711: LD_VAR 0 1
13715: NOT
13716: IFFALSE 13720
// exit ;
13718: GO 13733
// DestroyUnit ( tmp [ 1 ] ) ;
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 1
13727: ARRAY
13728: PPUSH
13729: CALL_OW 65
// end ;
13733: PPOPN 1
13735: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13736: LD_EXP 25
13740: PUSH
13741: LD_EXP 63
13745: AND
13746: IFFALSE 13875
13748: GO 13750
13750: DISABLE
13751: LD_INT 0
13753: PPUSH
// begin uc_side := 0 ;
13754: LD_ADDR_OWVAR 20
13758: PUSH
13759: LD_INT 0
13761: ST_TO_ADDR
// uc_nation := nation_arabian ;
13762: LD_ADDR_OWVAR 21
13766: PUSH
13767: LD_INT 2
13769: ST_TO_ADDR
// hc_gallery :=  ;
13770: LD_ADDR_OWVAR 33
13774: PUSH
13775: LD_STRING 
13777: ST_TO_ADDR
// hc_name :=  ;
13778: LD_ADDR_OWVAR 26
13782: PUSH
13783: LD_STRING 
13785: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13786: LD_INT 1
13788: PPUSH
13789: LD_INT 11
13791: PPUSH
13792: LD_INT 10
13794: PPUSH
13795: CALL_OW 380
// un := CreateHuman ;
13799: LD_ADDR_VAR 0 1
13803: PUSH
13804: CALL_OW 44
13808: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 1
13816: PPUSH
13817: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13821: LD_INT 35
13823: PPUSH
13824: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13828: LD_VAR 0 1
13832: PPUSH
13833: LD_INT 22
13835: PUSH
13836: LD_OWVAR 2
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 69
13849: PPUSH
13850: LD_VAR 0 1
13854: PPUSH
13855: CALL_OW 74
13859: PPUSH
13860: CALL_OW 115
// until IsDead ( un ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 301
13873: IFFALSE 13821
// end ;
13875: PPOPN 1
13877: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13878: LD_EXP 25
13882: PUSH
13883: LD_EXP 65
13887: AND
13888: IFFALSE 13900
13890: GO 13892
13892: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13893: LD_STRING earthquake(getX(game), 0, 32)
13895: PPUSH
13896: CALL_OW 559
13900: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13901: LD_EXP 25
13905: PUSH
13906: LD_EXP 66
13910: AND
13911: IFFALSE 14002
13913: GO 13915
13915: DISABLE
13916: LD_INT 0
13918: PPUSH
// begin enable ;
13919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13920: LD_ADDR_VAR 0 1
13924: PUSH
13925: LD_INT 22
13927: PUSH
13928: LD_OWVAR 2
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 21
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 33
13949: PUSH
13950: LD_INT 3
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: ST_TO_ADDR
// if not tmp then
13967: LD_VAR 0 1
13971: NOT
13972: IFFALSE 13976
// exit ;
13974: GO 14002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13976: LD_VAR 0 1
13980: PUSH
13981: LD_INT 1
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 12
13993: ARRAY
13994: PPUSH
13995: LD_INT 1
13997: PPUSH
13998: CALL_OW 234
// end ;
14002: PPOPN 1
14004: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14005: LD_EXP 25
14009: PUSH
14010: LD_EXP 67
14014: AND
14015: IFFALSE 14156
14017: GO 14019
14019: DISABLE
14020: LD_INT 0
14022: PPUSH
14023: PPUSH
14024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_OWVAR 2
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 25
14044: PUSH
14045: LD_INT 1
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PPUSH
14056: CALL_OW 69
14060: ST_TO_ADDR
// if not tmp then
14061: LD_VAR 0 3
14065: NOT
14066: IFFALSE 14070
// exit ;
14068: GO 14156
// un := tmp [ rand ( 1 , tmp ) ] ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_VAR 0 3
14079: PUSH
14080: LD_INT 1
14082: PPUSH
14083: LD_VAR 0 3
14087: PPUSH
14088: CALL_OW 12
14092: ARRAY
14093: ST_TO_ADDR
// if Crawls ( un ) then
14094: LD_VAR 0 2
14098: PPUSH
14099: CALL_OW 318
14103: IFFALSE 14114
// ComWalk ( un ) ;
14105: LD_VAR 0 2
14109: PPUSH
14110: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14114: LD_VAR 0 2
14118: PPUSH
14119: LD_INT 9
14121: PPUSH
14122: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14126: LD_INT 28
14128: PPUSH
14129: LD_OWVAR 2
14133: PPUSH
14134: LD_INT 2
14136: PPUSH
14137: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14141: LD_INT 29
14143: PPUSH
14144: LD_OWVAR 2
14148: PPUSH
14149: LD_INT 2
14151: PPUSH
14152: CALL_OW 322
// end ;
14156: PPOPN 3
14158: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14159: LD_EXP 25
14163: PUSH
14164: LD_EXP 68
14168: AND
14169: IFFALSE 14280
14171: GO 14173
14173: DISABLE
14174: LD_INT 0
14176: PPUSH
14177: PPUSH
14178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14179: LD_ADDR_VAR 0 3
14183: PUSH
14184: LD_INT 22
14186: PUSH
14187: LD_OWVAR 2
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 25
14198: PUSH
14199: LD_INT 1
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 69
14214: ST_TO_ADDR
// if not tmp then
14215: LD_VAR 0 3
14219: NOT
14220: IFFALSE 14224
// exit ;
14222: GO 14280
// un := tmp [ rand ( 1 , tmp ) ] ;
14224: LD_ADDR_VAR 0 2
14228: PUSH
14229: LD_VAR 0 3
14233: PUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: CALL_OW 12
14246: ARRAY
14247: ST_TO_ADDR
// if Crawls ( un ) then
14248: LD_VAR 0 2
14252: PPUSH
14253: CALL_OW 318
14257: IFFALSE 14268
// ComWalk ( un ) ;
14259: LD_VAR 0 2
14263: PPUSH
14264: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14268: LD_VAR 0 2
14272: PPUSH
14273: LD_INT 8
14275: PPUSH
14276: CALL_OW 336
// end ;
14280: PPOPN 3
14282: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14283: LD_EXP 25
14287: PUSH
14288: LD_EXP 69
14292: AND
14293: IFFALSE 14437
14295: GO 14297
14297: DISABLE
14298: LD_INT 0
14300: PPUSH
14301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14302: LD_ADDR_VAR 0 2
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_OWVAR 2
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 21
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 34
14334: PUSH
14335: LD_INT 12
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 34
14344: PUSH
14345: LD_INT 51
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 34
14354: PUSH
14355: LD_INT 32
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: PPUSH
14373: CALL_OW 69
14377: ST_TO_ADDR
// if not tmp then
14378: LD_VAR 0 2
14382: NOT
14383: IFFALSE 14387
// exit ;
14385: GO 14437
// for i in tmp do
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: LD_VAR 0 2
14396: PUSH
14397: FOR_IN
14398: IFFALSE 14435
// if GetCargo ( i , mat_artifact ) = 0 then
14400: LD_VAR 0 1
14404: PPUSH
14405: LD_INT 4
14407: PPUSH
14408: CALL_OW 289
14412: PUSH
14413: LD_INT 0
14415: EQUAL
14416: IFFALSE 14433
// SetCargo ( i , mat_siberit , 100 ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: LD_INT 3
14425: PPUSH
14426: LD_INT 100
14428: PPUSH
14429: CALL_OW 290
14433: GO 14397
14435: POP
14436: POP
// end ;
14437: PPOPN 2
14439: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14440: LD_EXP 25
14444: PUSH
14445: LD_EXP 70
14449: AND
14450: IFFALSE 14633
14452: GO 14454
14454: DISABLE
14455: LD_INT 0
14457: PPUSH
14458: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14459: LD_ADDR_VAR 0 2
14463: PUSH
14464: LD_INT 22
14466: PUSH
14467: LD_OWVAR 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if not tmp then
14481: LD_VAR 0 2
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14633
// for i := 1 to 2 do
14490: LD_ADDR_VAR 0 1
14494: PUSH
14495: DOUBLE
14496: LD_INT 1
14498: DEC
14499: ST_TO_ADDR
14500: LD_INT 2
14502: PUSH
14503: FOR_TO
14504: IFFALSE 14631
// begin uc_side := your_side ;
14506: LD_ADDR_OWVAR 20
14510: PUSH
14511: LD_OWVAR 2
14515: ST_TO_ADDR
// uc_nation := nation_american ;
14516: LD_ADDR_OWVAR 21
14520: PUSH
14521: LD_INT 1
14523: ST_TO_ADDR
// vc_chassis := us_morphling ;
14524: LD_ADDR_OWVAR 37
14528: PUSH
14529: LD_INT 5
14531: ST_TO_ADDR
// vc_engine := engine_siberite ;
14532: LD_ADDR_OWVAR 39
14536: PUSH
14537: LD_INT 3
14539: ST_TO_ADDR
// vc_control := control_computer ;
14540: LD_ADDR_OWVAR 38
14544: PUSH
14545: LD_INT 3
14547: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14548: LD_ADDR_OWVAR 40
14552: PUSH
14553: LD_INT 10
14555: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14556: LD_VAR 0 2
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: CALL_OW 310
14569: NOT
14570: IFFALSE 14617
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14572: CALL_OW 45
14576: PPUSH
14577: LD_VAR 0 2
14581: PUSH
14582: LD_INT 1
14584: ARRAY
14585: PPUSH
14586: CALL_OW 250
14590: PPUSH
14591: LD_VAR 0 2
14595: PUSH
14596: LD_INT 1
14598: ARRAY
14599: PPUSH
14600: CALL_OW 251
14604: PPUSH
14605: LD_INT 12
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: CALL_OW 50
14615: GO 14629
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14617: CALL_OW 45
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 51
// end ;
14629: GO 14503
14631: POP
14632: POP
// end ;
14633: PPOPN 2
14635: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14636: LD_EXP 25
14640: PUSH
14641: LD_EXP 71
14645: AND
14646: IFFALSE 14868
14648: GO 14650
14650: DISABLE
14651: LD_INT 0
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14659: LD_ADDR_VAR 0 6
14663: PUSH
14664: LD_INT 22
14666: PUSH
14667: LD_OWVAR 2
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 21
14678: PUSH
14679: LD_INT 1
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: LD_INT 23
14691: PUSH
14692: LD_INT 0
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: PPUSH
14708: CALL_OW 69
14712: ST_TO_ADDR
// if not tmp then
14713: LD_VAR 0 6
14717: NOT
14718: IFFALSE 14722
// exit ;
14720: GO 14868
// s1 := rand ( 1 , 4 ) ;
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 1
14729: PPUSH
14730: LD_INT 4
14732: PPUSH
14733: CALL_OW 12
14737: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14738: LD_ADDR_VAR 0 4
14742: PUSH
14743: LD_VAR 0 6
14747: PUSH
14748: LD_INT 1
14750: ARRAY
14751: PPUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 259
14761: ST_TO_ADDR
// if s1 = 1 then
14762: LD_VAR 0 2
14766: PUSH
14767: LD_INT 1
14769: EQUAL
14770: IFFALSE 14790
// s2 := rand ( 2 , 4 ) else
14772: LD_ADDR_VAR 0 3
14776: PUSH
14777: LD_INT 2
14779: PPUSH
14780: LD_INT 4
14782: PPUSH
14783: CALL_OW 12
14787: ST_TO_ADDR
14788: GO 14798
// s2 := 1 ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14798: LD_ADDR_VAR 0 5
14802: PUSH
14803: LD_VAR 0 6
14807: PUSH
14808: LD_INT 1
14810: ARRAY
14811: PPUSH
14812: LD_VAR 0 3
14816: PPUSH
14817: CALL_OW 259
14821: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14822: LD_VAR 0 6
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PPUSH
14831: LD_VAR 0 2
14835: PPUSH
14836: LD_VAR 0 5
14840: PPUSH
14841: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14845: LD_VAR 0 6
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PPUSH
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_VAR 0 4
14863: PPUSH
14864: CALL_OW 237
// end ;
14868: PPOPN 6
14870: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14871: LD_EXP 25
14875: PUSH
14876: LD_EXP 72
14880: AND
14881: IFFALSE 14960
14883: GO 14885
14885: DISABLE
14886: LD_INT 0
14888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14889: LD_ADDR_VAR 0 1
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_OWVAR 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 30
14908: PUSH
14909: LD_INT 3
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PPUSH
14920: CALL_OW 69
14924: ST_TO_ADDR
// if not tmp then
14925: LD_VAR 0 1
14929: NOT
14930: IFFALSE 14934
// exit ;
14932: GO 14960
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14934: LD_VAR 0 1
14938: PUSH
14939: LD_INT 1
14941: PPUSH
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 12
14951: ARRAY
14952: PPUSH
14953: LD_INT 1
14955: PPUSH
14956: CALL_OW 234
// end ;
14960: PPOPN 1
14962: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14963: LD_EXP 25
14967: PUSH
14968: LD_EXP 73
14972: AND
14973: IFFALSE 15085
14975: GO 14977
14977: DISABLE
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14982: LD_ADDR_VAR 0 2
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: LD_INT 30
15004: PUSH
15005: LD_INT 27
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 30
15014: PUSH
15015: LD_INT 26
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 30
15024: PUSH
15025: LD_INT 28
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PPUSH
15042: CALL_OW 69
15046: ST_TO_ADDR
// if not tmp then
15047: LD_VAR 0 2
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15085
// for i in tmp do
15056: LD_ADDR_VAR 0 1
15060: PUSH
15061: LD_VAR 0 2
15065: PUSH
15066: FOR_IN
15067: IFFALSE 15083
// SetLives ( i , 1 ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 234
15081: GO 15066
15083: POP
15084: POP
// end ;
15085: PPOPN 2
15087: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15088: LD_EXP 25
15092: PUSH
15093: LD_EXP 74
15097: AND
15098: IFFALSE 15372
15100: GO 15102
15102: DISABLE
15103: LD_INT 0
15105: PPUSH
15106: PPUSH
15107: PPUSH
// begin i := rand ( 1 , 7 ) ;
15108: LD_ADDR_VAR 0 1
15112: PUSH
15113: LD_INT 1
15115: PPUSH
15116: LD_INT 7
15118: PPUSH
15119: CALL_OW 12
15123: ST_TO_ADDR
// case i of 1 :
15124: LD_VAR 0 1
15128: PUSH
15129: LD_INT 1
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15147
15137: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15138: LD_STRING earthquake(getX(game), 0, 32)
15140: PPUSH
15141: CALL_OW 559
15145: GO 15372
15147: LD_INT 2
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15169
15155: POP
// begin ToLua ( displayStucuk(); ) ;
15156: LD_STRING displayStucuk();
15158: PPUSH
15159: CALL_OW 559
// ResetFog ;
15163: CALL_OW 335
// end ; 3 :
15167: GO 15372
15169: LD_INT 3
15171: DOUBLE
15172: EQUAL
15173: IFTRUE 15177
15175: GO 15281
15177: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 2
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 2
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15372
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 3
15227: PUSH
15228: LD_VAR 0 2
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 2
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 3
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 3
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 8
15274: PPUSH
15275: CALL_OW 336
// end ; 4 :
15279: GO 15372
15281: LD_INT 4
15283: DOUBLE
15284: EQUAL
15285: IFTRUE 15289
15287: GO 15350
15289: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15290: LD_ADDR_VAR 0 2
15294: PUSH
15295: LD_INT 22
15297: PUSH
15298: LD_OWVAR 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 30
15309: PUSH
15310: LD_INT 29
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PPUSH
15321: CALL_OW 69
15325: ST_TO_ADDR
// if not tmp then
15326: LD_VAR 0 2
15330: NOT
15331: IFFALSE 15335
// exit ;
15333: GO 15372
// DestroyUnit ( tmp [ 1 ] ) ;
15335: LD_VAR 0 2
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: PPUSH
15344: CALL_OW 65
// end ; 5 .. 7 :
15348: GO 15372
15350: LD_INT 5
15352: DOUBLE
15353: GREATEREQUAL
15354: IFFALSE 15362
15356: LD_INT 7
15358: DOUBLE
15359: LESSEQUAL
15360: IFTRUE 15364
15362: GO 15371
15364: POP
// StreamSibBomb ; end ;
15365: CALL 11622 0 0
15369: GO 15372
15371: POP
// end ;
15372: PPOPN 3
15374: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15375: LD_EXP 25
15379: PUSH
15380: LD_EXP 75
15384: AND
15385: IFFALSE 15541
15387: GO 15389
15389: DISABLE
15390: LD_INT 0
15392: PPUSH
15393: PPUSH
15394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 81
15402: PUSH
15403: LD_OWVAR 2
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 2
15414: PUSH
15415: LD_INT 21
15417: PUSH
15418: LD_INT 1
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 21
15427: PUSH
15428: LD_INT 2
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: ST_TO_ADDR
// if not tmp then
15449: LD_VAR 0 2
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15541
// p := 0 ;
15458: LD_ADDR_VAR 0 3
15462: PUSH
15463: LD_INT 0
15465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15466: LD_INT 35
15468: PPUSH
15469: CALL_OW 67
// p := p + 1 ;
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_VAR 0 3
15482: PUSH
15483: LD_INT 1
15485: PLUS
15486: ST_TO_ADDR
// for i in tmp do
15487: LD_ADDR_VAR 0 1
15491: PUSH
15492: LD_VAR 0 2
15496: PUSH
15497: FOR_IN
15498: IFFALSE 15529
// if GetLives ( i ) < 1000 then
15500: LD_VAR 0 1
15504: PPUSH
15505: CALL_OW 256
15509: PUSH
15510: LD_INT 1000
15512: LESS
15513: IFFALSE 15527
// SetLives ( i , 1000 ) ;
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_INT 1000
15522: PPUSH
15523: CALL_OW 234
15527: GO 15497
15529: POP
15530: POP
// until p > 20 ;
15531: LD_VAR 0 3
15535: PUSH
15536: LD_INT 20
15538: GREATER
15539: IFFALSE 15466
// end ;
15541: PPOPN 3
15543: END
// every 0 0$1 trigger StreamModeActive and sTime do
15544: LD_EXP 25
15548: PUSH
15549: LD_EXP 76
15553: AND
15554: IFFALSE 15589
15556: GO 15558
15558: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15559: LD_INT 28
15561: PPUSH
15562: LD_OWVAR 2
15566: PPUSH
15567: LD_INT 2
15569: PPUSH
15570: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15574: LD_INT 30
15576: PPUSH
15577: LD_OWVAR 2
15581: PPUSH
15582: LD_INT 2
15584: PPUSH
15585: CALL_OW 322
// end ;
15589: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15590: LD_EXP 25
15594: PUSH
15595: LD_EXP 77
15599: AND
15600: IFFALSE 15721
15602: GO 15604
15604: DISABLE
15605: LD_INT 0
15607: PPUSH
15608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15609: LD_ADDR_VAR 0 2
15613: PUSH
15614: LD_INT 22
15616: PUSH
15617: LD_OWVAR 2
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 21
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: LD_INT 23
15641: PUSH
15642: LD_INT 0
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: ST_TO_ADDR
// if not tmp then
15663: LD_VAR 0 2
15667: NOT
15668: IFFALSE 15672
// exit ;
15670: GO 15721
// for i in tmp do
15672: LD_ADDR_VAR 0 1
15676: PUSH
15677: LD_VAR 0 2
15681: PUSH
15682: FOR_IN
15683: IFFALSE 15719
// begin if Crawls ( i ) then
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 318
15694: IFFALSE 15705
// ComWalk ( i ) ;
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 138
// SetClass ( i , 2 ) ;
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 336
// end ;
15717: GO 15682
15719: POP
15720: POP
// end ;
15721: PPOPN 2
15723: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15724: LD_EXP 25
15728: PUSH
15729: LD_EXP 78
15733: AND
15734: IFFALSE 16015
15736: GO 15738
15738: DISABLE
15739: LD_INT 0
15741: PPUSH
15742: PPUSH
15743: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15744: LD_OWVAR 2
15748: PPUSH
15749: LD_INT 9
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: LD_INT 1
15757: PPUSH
15758: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15762: LD_INT 9
15764: PPUSH
15765: LD_OWVAR 2
15769: PPUSH
15770: CALL_OW 343
// uc_side := 9 ;
15774: LD_ADDR_OWVAR 20
15778: PUSH
15779: LD_INT 9
15781: ST_TO_ADDR
// uc_nation := 2 ;
15782: LD_ADDR_OWVAR 21
15786: PUSH
15787: LD_INT 2
15789: ST_TO_ADDR
// hc_name := Dark Warrior ;
15790: LD_ADDR_OWVAR 26
15794: PUSH
15795: LD_STRING Dark Warrior
15797: ST_TO_ADDR
// hc_gallery :=  ;
15798: LD_ADDR_OWVAR 33
15802: PUSH
15803: LD_STRING 
15805: ST_TO_ADDR
// hc_noskilllimit := true ;
15806: LD_ADDR_OWVAR 76
15810: PUSH
15811: LD_INT 1
15813: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15814: LD_ADDR_OWVAR 31
15818: PUSH
15819: LD_INT 30
15821: PUSH
15822: LD_INT 30
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: LD_INT 30
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// un := CreateHuman ;
15837: LD_ADDR_VAR 0 3
15841: PUSH
15842: CALL_OW 44
15846: ST_TO_ADDR
// hc_noskilllimit := false ;
15847: LD_ADDR_OWVAR 76
15851: PUSH
15852: LD_INT 0
15854: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15855: LD_VAR 0 3
15859: PPUSH
15860: LD_INT 1
15862: PPUSH
15863: CALL_OW 51
// p := 0 ;
15867: LD_ADDR_VAR 0 2
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15875: LD_INT 35
15877: PPUSH
15878: CALL_OW 67
// p := p + 1 ;
15882: LD_ADDR_VAR 0 2
15886: PUSH
15887: LD_VAR 0 2
15891: PUSH
15892: LD_INT 1
15894: PLUS
15895: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15896: LD_VAR 0 3
15900: PPUSH
15901: CALL_OW 256
15905: PUSH
15906: LD_INT 1000
15908: LESS
15909: IFFALSE 15923
// SetLives ( un , 1000 ) ;
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 1000
15918: PPUSH
15919: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15923: LD_VAR 0 3
15927: PPUSH
15928: LD_INT 81
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 91
15942: PUSH
15943: LD_VAR 0 3
15947: PUSH
15948: LD_INT 30
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 69
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: CALL_OW 74
15974: PPUSH
15975: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15979: LD_VAR 0 2
15983: PUSH
15984: LD_INT 60
15986: GREATER
15987: PUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: CALL_OW 301
15997: OR
15998: IFFALSE 15875
// if un then
16000: LD_VAR 0 3
16004: IFFALSE 16015
// RemoveUnit ( un ) ;
16006: LD_VAR 0 3
16010: PPUSH
16011: CALL_OW 64
// end ;
16015: PPOPN 3
16017: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16018: LD_INT 0
16020: PPUSH
// case cmd of 301 :
16021: LD_VAR 0 1
16025: PUSH
16026: LD_INT 301
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16066
16034: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16035: LD_VAR 0 6
16039: PPUSH
16040: LD_VAR 0 7
16044: PPUSH
16045: LD_VAR 0 8
16049: PPUSH
16050: LD_VAR 0 4
16054: PPUSH
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL 17267 0 5
16064: GO 16187
16066: LD_INT 302
16068: DOUBLE
16069: EQUAL
16070: IFTRUE 16074
16072: GO 16111
16074: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16075: LD_VAR 0 6
16079: PPUSH
16080: LD_VAR 0 7
16084: PPUSH
16085: LD_VAR 0 8
16089: PPUSH
16090: LD_VAR 0 9
16094: PPUSH
16095: LD_VAR 0 4
16099: PPUSH
16100: LD_VAR 0 5
16104: PPUSH
16105: CALL 17358 0 6
16109: GO 16187
16111: LD_INT 303
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16119
16117: GO 16156
16119: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16120: LD_VAR 0 6
16124: PPUSH
16125: LD_VAR 0 7
16129: PPUSH
16130: LD_VAR 0 8
16134: PPUSH
16135: LD_VAR 0 9
16139: PPUSH
16140: LD_VAR 0 4
16144: PPUSH
16145: LD_VAR 0 5
16149: PPUSH
16150: CALL 16192 0 6
16154: GO 16187
16156: LD_INT 304
16158: DOUBLE
16159: EQUAL
16160: IFTRUE 16164
16162: GO 16186
16164: POP
// hHackTeleport ( unit , x , y ) ; end ;
16165: LD_VAR 0 2
16169: PPUSH
16170: LD_VAR 0 4
16174: PPUSH
16175: LD_VAR 0 5
16179: PPUSH
16180: CALL 17951 0 3
16184: GO 16187
16186: POP
// end ;
16187: LD_VAR 0 12
16191: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16192: LD_INT 0
16194: PPUSH
16195: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16196: LD_VAR 0 1
16200: PUSH
16201: LD_INT 1
16203: LESS
16204: PUSH
16205: LD_VAR 0 1
16209: PUSH
16210: LD_INT 3
16212: GREATER
16213: OR
16214: PUSH
16215: LD_VAR 0 5
16219: PPUSH
16220: LD_VAR 0 6
16224: PPUSH
16225: CALL_OW 428
16229: OR
16230: IFFALSE 16234
// exit ;
16232: GO 16954
// uc_side := your_side ;
16234: LD_ADDR_OWVAR 20
16238: PUSH
16239: LD_OWVAR 2
16243: ST_TO_ADDR
// uc_nation := nation ;
16244: LD_ADDR_OWVAR 21
16248: PUSH
16249: LD_VAR 0 1
16253: ST_TO_ADDR
// bc_level = 1 ;
16254: LD_ADDR_OWVAR 43
16258: PUSH
16259: LD_INT 1
16261: ST_TO_ADDR
// case btype of 1 :
16262: LD_VAR 0 2
16266: PUSH
16267: LD_INT 1
16269: DOUBLE
16270: EQUAL
16271: IFTRUE 16275
16273: GO 16286
16275: POP
// bc_type := b_depot ; 2 :
16276: LD_ADDR_OWVAR 42
16280: PUSH
16281: LD_INT 0
16283: ST_TO_ADDR
16284: GO 16898
16286: LD_INT 2
16288: DOUBLE
16289: EQUAL
16290: IFTRUE 16294
16292: GO 16305
16294: POP
// bc_type := b_warehouse ; 3 :
16295: LD_ADDR_OWVAR 42
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
16303: GO 16898
16305: LD_INT 3
16307: DOUBLE
16308: EQUAL
16309: IFTRUE 16313
16311: GO 16324
16313: POP
// bc_type := b_lab ; 4 .. 9 :
16314: LD_ADDR_OWVAR 42
16318: PUSH
16319: LD_INT 6
16321: ST_TO_ADDR
16322: GO 16898
16324: LD_INT 4
16326: DOUBLE
16327: GREATEREQUAL
16328: IFFALSE 16336
16330: LD_INT 9
16332: DOUBLE
16333: LESSEQUAL
16334: IFTRUE 16338
16336: GO 16390
16338: POP
// begin bc_type := b_lab_half ;
16339: LD_ADDR_OWVAR 42
16343: PUSH
16344: LD_INT 7
16346: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16347: LD_ADDR_OWVAR 44
16351: PUSH
16352: LD_INT 10
16354: PUSH
16355: LD_INT 11
16357: PUSH
16358: LD_INT 12
16360: PUSH
16361: LD_INT 15
16363: PUSH
16364: LD_INT 14
16366: PUSH
16367: LD_INT 13
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: PUSH
16378: LD_VAR 0 2
16382: PUSH
16383: LD_INT 3
16385: MINUS
16386: ARRAY
16387: ST_TO_ADDR
// end ; 10 .. 13 :
16388: GO 16898
16390: LD_INT 10
16392: DOUBLE
16393: GREATEREQUAL
16394: IFFALSE 16402
16396: LD_INT 13
16398: DOUBLE
16399: LESSEQUAL
16400: IFTRUE 16404
16402: GO 16481
16404: POP
// begin bc_type := b_lab_full ;
16405: LD_ADDR_OWVAR 42
16409: PUSH
16410: LD_INT 8
16412: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16413: LD_ADDR_OWVAR 44
16417: PUSH
16418: LD_INT 10
16420: PUSH
16421: LD_INT 12
16423: PUSH
16424: LD_INT 14
16426: PUSH
16427: LD_INT 13
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: PUSH
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 9
16443: MINUS
16444: ARRAY
16445: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16446: LD_ADDR_OWVAR 45
16450: PUSH
16451: LD_INT 11
16453: PUSH
16454: LD_INT 15
16456: PUSH
16457: LD_INT 12
16459: PUSH
16460: LD_INT 15
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: LD_VAR 0 2
16473: PUSH
16474: LD_INT 9
16476: MINUS
16477: ARRAY
16478: ST_TO_ADDR
// end ; 14 :
16479: GO 16898
16481: LD_INT 14
16483: DOUBLE
16484: EQUAL
16485: IFTRUE 16489
16487: GO 16500
16489: POP
// bc_type := b_workshop ; 15 :
16490: LD_ADDR_OWVAR 42
16494: PUSH
16495: LD_INT 2
16497: ST_TO_ADDR
16498: GO 16898
16500: LD_INT 15
16502: DOUBLE
16503: EQUAL
16504: IFTRUE 16508
16506: GO 16519
16508: POP
// bc_type := b_factory ; 16 :
16509: LD_ADDR_OWVAR 42
16513: PUSH
16514: LD_INT 3
16516: ST_TO_ADDR
16517: GO 16898
16519: LD_INT 16
16521: DOUBLE
16522: EQUAL
16523: IFTRUE 16527
16525: GO 16538
16527: POP
// bc_type := b_ext_gun ; 17 :
16528: LD_ADDR_OWVAR 42
16532: PUSH
16533: LD_INT 17
16535: ST_TO_ADDR
16536: GO 16898
16538: LD_INT 17
16540: DOUBLE
16541: EQUAL
16542: IFTRUE 16546
16544: GO 16574
16546: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16547: LD_ADDR_OWVAR 42
16551: PUSH
16552: LD_INT 19
16554: PUSH
16555: LD_INT 23
16557: PUSH
16558: LD_INT 19
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: PUSH
16566: LD_VAR 0 1
16570: ARRAY
16571: ST_TO_ADDR
16572: GO 16898
16574: LD_INT 18
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16582
16580: GO 16593
16582: POP
// bc_type := b_ext_radar ; 19 :
16583: LD_ADDR_OWVAR 42
16587: PUSH
16588: LD_INT 20
16590: ST_TO_ADDR
16591: GO 16898
16593: LD_INT 19
16595: DOUBLE
16596: EQUAL
16597: IFTRUE 16601
16599: GO 16612
16601: POP
// bc_type := b_ext_radio ; 20 :
16602: LD_ADDR_OWVAR 42
16606: PUSH
16607: LD_INT 22
16609: ST_TO_ADDR
16610: GO 16898
16612: LD_INT 20
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16631
16620: POP
// bc_type := b_ext_siberium ; 21 :
16621: LD_ADDR_OWVAR 42
16625: PUSH
16626: LD_INT 21
16628: ST_TO_ADDR
16629: GO 16898
16631: LD_INT 21
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 16650
16639: POP
// bc_type := b_ext_computer ; 22 :
16640: LD_ADDR_OWVAR 42
16644: PUSH
16645: LD_INT 24
16647: ST_TO_ADDR
16648: GO 16898
16650: LD_INT 22
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16669
16658: POP
// bc_type := b_ext_track ; 23 :
16659: LD_ADDR_OWVAR 42
16663: PUSH
16664: LD_INT 16
16666: ST_TO_ADDR
16667: GO 16898
16669: LD_INT 23
16671: DOUBLE
16672: EQUAL
16673: IFTRUE 16677
16675: GO 16688
16677: POP
// bc_type := b_ext_laser ; 24 :
16678: LD_ADDR_OWVAR 42
16682: PUSH
16683: LD_INT 25
16685: ST_TO_ADDR
16686: GO 16898
16688: LD_INT 24
16690: DOUBLE
16691: EQUAL
16692: IFTRUE 16696
16694: GO 16707
16696: POP
// bc_type := b_control_tower ; 25 :
16697: LD_ADDR_OWVAR 42
16701: PUSH
16702: LD_INT 36
16704: ST_TO_ADDR
16705: GO 16898
16707: LD_INT 25
16709: DOUBLE
16710: EQUAL
16711: IFTRUE 16715
16713: GO 16726
16715: POP
// bc_type := b_breastwork ; 26 :
16716: LD_ADDR_OWVAR 42
16720: PUSH
16721: LD_INT 31
16723: ST_TO_ADDR
16724: GO 16898
16726: LD_INT 26
16728: DOUBLE
16729: EQUAL
16730: IFTRUE 16734
16732: GO 16745
16734: POP
// bc_type := b_bunker ; 27 :
16735: LD_ADDR_OWVAR 42
16739: PUSH
16740: LD_INT 32
16742: ST_TO_ADDR
16743: GO 16898
16745: LD_INT 27
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16764
16753: POP
// bc_type := b_turret ; 28 :
16754: LD_ADDR_OWVAR 42
16758: PUSH
16759: LD_INT 33
16761: ST_TO_ADDR
16762: GO 16898
16764: LD_INT 28
16766: DOUBLE
16767: EQUAL
16768: IFTRUE 16772
16770: GO 16783
16772: POP
// bc_type := b_armoury ; 29 :
16773: LD_ADDR_OWVAR 42
16777: PUSH
16778: LD_INT 4
16780: ST_TO_ADDR
16781: GO 16898
16783: LD_INT 29
16785: DOUBLE
16786: EQUAL
16787: IFTRUE 16791
16789: GO 16802
16791: POP
// bc_type := b_barracks ; 30 :
16792: LD_ADDR_OWVAR 42
16796: PUSH
16797: LD_INT 5
16799: ST_TO_ADDR
16800: GO 16898
16802: LD_INT 30
16804: DOUBLE
16805: EQUAL
16806: IFTRUE 16810
16808: GO 16821
16810: POP
// bc_type := b_solar_power ; 31 :
16811: LD_ADDR_OWVAR 42
16815: PUSH
16816: LD_INT 27
16818: ST_TO_ADDR
16819: GO 16898
16821: LD_INT 31
16823: DOUBLE
16824: EQUAL
16825: IFTRUE 16829
16827: GO 16840
16829: POP
// bc_type := b_oil_power ; 32 :
16830: LD_ADDR_OWVAR 42
16834: PUSH
16835: LD_INT 26
16837: ST_TO_ADDR
16838: GO 16898
16840: LD_INT 32
16842: DOUBLE
16843: EQUAL
16844: IFTRUE 16848
16846: GO 16859
16848: POP
// bc_type := b_siberite_power ; 33 :
16849: LD_ADDR_OWVAR 42
16853: PUSH
16854: LD_INT 28
16856: ST_TO_ADDR
16857: GO 16898
16859: LD_INT 33
16861: DOUBLE
16862: EQUAL
16863: IFTRUE 16867
16865: GO 16878
16867: POP
// bc_type := b_oil_mine ; 34 :
16868: LD_ADDR_OWVAR 42
16872: PUSH
16873: LD_INT 29
16875: ST_TO_ADDR
16876: GO 16898
16878: LD_INT 34
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16897
16886: POP
// bc_type := b_siberite_mine ; end ;
16887: LD_ADDR_OWVAR 42
16891: PUSH
16892: LD_INT 30
16894: ST_TO_ADDR
16895: GO 16898
16897: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16898: LD_ADDR_VAR 0 8
16902: PUSH
16903: LD_VAR 0 5
16907: PPUSH
16908: LD_VAR 0 6
16912: PPUSH
16913: LD_VAR 0 3
16917: PPUSH
16918: CALL_OW 47
16922: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16923: LD_OWVAR 42
16927: PUSH
16928: LD_INT 32
16930: PUSH
16931: LD_INT 33
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: IN
16938: IFFALSE 16954
// PlaceWeaponTurret ( b , weapon ) ;
16940: LD_VAR 0 8
16944: PPUSH
16945: LD_VAR 0 4
16949: PPUSH
16950: CALL_OW 431
// end ;
16954: LD_VAR 0 7
16958: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16959: LD_INT 0
16961: PPUSH
16962: PPUSH
16963: PPUSH
16964: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16965: LD_ADDR_VAR 0 4
16969: PUSH
16970: LD_INT 22
16972: PUSH
16973: LD_OWVAR 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: LD_INT 30
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 30
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: ST_TO_ADDR
// if not tmp then
17019: LD_VAR 0 4
17023: NOT
17024: IFFALSE 17028
// exit ;
17026: GO 17087
// for i in tmp do
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: LD_VAR 0 4
17037: PUSH
17038: FOR_IN
17039: IFFALSE 17085
// for j = 1 to 3 do
17041: LD_ADDR_VAR 0 3
17045: PUSH
17046: DOUBLE
17047: LD_INT 1
17049: DEC
17050: ST_TO_ADDR
17051: LD_INT 3
17053: PUSH
17054: FOR_TO
17055: IFFALSE 17081
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17057: LD_VAR 0 2
17061: PPUSH
17062: CALL_OW 274
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_INT 99999
17074: PPUSH
17075: CALL_OW 277
17079: GO 17054
17081: POP
17082: POP
17083: GO 17038
17085: POP
17086: POP
// end ;
17087: LD_VAR 0 1
17091: RET
// export function hHackSetLevel10 ; var i , j ; begin
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
17096: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17097: LD_ADDR_VAR 0 2
17101: PUSH
17102: LD_INT 21
17104: PUSH
17105: LD_INT 1
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17170
// if IsSelected ( i ) then
17120: LD_VAR 0 2
17124: PPUSH
17125: CALL_OW 306
17129: IFFALSE 17168
// begin for j := 1 to 4 do
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: DOUBLE
17137: LD_INT 1
17139: DEC
17140: ST_TO_ADDR
17141: LD_INT 4
17143: PUSH
17144: FOR_TO
17145: IFFALSE 17166
// SetSkill ( i , j , 10 ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 10
17159: PPUSH
17160: CALL_OW 237
17164: GO 17144
17166: POP
17167: POP
// end ;
17168: GO 17117
17170: POP
17171: POP
// end ;
17172: LD_VAR 0 1
17176: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17177: LD_INT 0
17179: PPUSH
17180: PPUSH
17181: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 21
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: PUSH
17218: FOR_IN
17219: IFFALSE 17260
// begin for j := 1 to 4 do
17221: LD_ADDR_VAR 0 3
17225: PUSH
17226: DOUBLE
17227: LD_INT 1
17229: DEC
17230: ST_TO_ADDR
17231: LD_INT 4
17233: PUSH
17234: FOR_TO
17235: IFFALSE 17256
// SetSkill ( i , j , 10 ) ;
17237: LD_VAR 0 2
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 10
17249: PPUSH
17250: CALL_OW 237
17254: GO 17234
17256: POP
17257: POP
// end ;
17258: GO 17218
17260: POP
17261: POP
// end ;
17262: LD_VAR 0 1
17266: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17267: LD_INT 0
17269: PPUSH
// uc_side := your_side ;
17270: LD_ADDR_OWVAR 20
17274: PUSH
17275: LD_OWVAR 2
17279: ST_TO_ADDR
// uc_nation := nation ;
17280: LD_ADDR_OWVAR 21
17284: PUSH
17285: LD_VAR 0 1
17289: ST_TO_ADDR
// InitHc ;
17290: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17294: LD_INT 0
17296: PPUSH
17297: LD_VAR 0 2
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17311: LD_VAR 0 4
17315: PPUSH
17316: LD_VAR 0 5
17320: PPUSH
17321: CALL_OW 428
17325: PUSH
17326: LD_INT 0
17328: EQUAL
17329: IFFALSE 17353
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17331: CALL_OW 44
17335: PPUSH
17336: LD_VAR 0 4
17340: PPUSH
17341: LD_VAR 0 5
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 48
// end ;
17353: LD_VAR 0 6
17357: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17358: LD_INT 0
17360: PPUSH
17361: PPUSH
// uc_side := your_side ;
17362: LD_ADDR_OWVAR 20
17366: PUSH
17367: LD_OWVAR 2
17371: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17372: LD_VAR 0 1
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: IN
17399: IFFALSE 17411
// uc_nation := nation_american else
17401: LD_ADDR_OWVAR 21
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
17409: GO 17454
// if chassis in [ 11 , 12 , 13 , 14 ] then
17411: LD_VAR 0 1
17415: PUSH
17416: LD_INT 11
17418: PUSH
17419: LD_INT 12
17421: PUSH
17422: LD_INT 13
17424: PUSH
17425: LD_INT 14
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: IN
17434: IFFALSE 17446
// uc_nation := nation_arabian else
17436: LD_ADDR_OWVAR 21
17440: PUSH
17441: LD_INT 2
17443: ST_TO_ADDR
17444: GO 17454
// uc_nation := nation_russian ;
17446: LD_ADDR_OWVAR 21
17450: PUSH
17451: LD_INT 3
17453: ST_TO_ADDR
// vc_chassis := chassis ;
17454: LD_ADDR_OWVAR 37
17458: PUSH
17459: LD_VAR 0 1
17463: ST_TO_ADDR
// vc_engine := engine ;
17464: LD_ADDR_OWVAR 39
17468: PUSH
17469: LD_VAR 0 2
17473: ST_TO_ADDR
// vc_control := control ;
17474: LD_ADDR_OWVAR 38
17478: PUSH
17479: LD_VAR 0 3
17483: ST_TO_ADDR
// vc_weapon := weapon ;
17484: LD_ADDR_OWVAR 40
17488: PUSH
17489: LD_VAR 0 4
17493: ST_TO_ADDR
// un := CreateVehicle ;
17494: LD_ADDR_VAR 0 8
17498: PUSH
17499: CALL_OW 45
17503: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17504: LD_VAR 0 8
17508: PPUSH
17509: LD_INT 0
17511: PPUSH
17512: LD_INT 5
17514: PPUSH
17515: CALL_OW 12
17519: PPUSH
17520: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17524: LD_VAR 0 8
17528: PPUSH
17529: LD_VAR 0 5
17533: PPUSH
17534: LD_VAR 0 6
17538: PPUSH
17539: LD_INT 1
17541: PPUSH
17542: CALL_OW 48
// end ;
17546: LD_VAR 0 7
17550: RET
// export hInvincible ; every 1 do
17551: GO 17553
17553: DISABLE
// hInvincible := [ ] ;
17554: LD_ADDR_EXP 79
17558: PUSH
17559: EMPTY
17560: ST_TO_ADDR
17561: END
// every 10 do var i ;
17562: GO 17564
17564: DISABLE
17565: LD_INT 0
17567: PPUSH
// begin enable ;
17568: ENABLE
// if not hInvincible then
17569: LD_EXP 79
17573: NOT
17574: IFFALSE 17578
// exit ;
17576: GO 17622
// for i in hInvincible do
17578: LD_ADDR_VAR 0 1
17582: PUSH
17583: LD_EXP 79
17587: PUSH
17588: FOR_IN
17589: IFFALSE 17620
// if GetLives ( i ) < 1000 then
17591: LD_VAR 0 1
17595: PPUSH
17596: CALL_OW 256
17600: PUSH
17601: LD_INT 1000
17603: LESS
17604: IFFALSE 17618
// SetLives ( i , 1000 ) ;
17606: LD_VAR 0 1
17610: PPUSH
17611: LD_INT 1000
17613: PPUSH
17614: CALL_OW 234
17618: GO 17588
17620: POP
17621: POP
// end ;
17622: PPOPN 1
17624: END
// export function hHackInvincible ; var i ; begin
17625: LD_INT 0
17627: PPUSH
17628: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17629: LD_ADDR_VAR 0 2
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: LD_INT 21
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 21
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: LIST
17661: PPUSH
17662: CALL_OW 69
17666: PUSH
17667: FOR_IN
17668: IFFALSE 17729
// if IsSelected ( i ) then
17670: LD_VAR 0 2
17674: PPUSH
17675: CALL_OW 306
17679: IFFALSE 17727
// begin if i in hInvincible then
17681: LD_VAR 0 2
17685: PUSH
17686: LD_EXP 79
17690: IN
17691: IFFALSE 17711
// hInvincible := hInvincible diff i else
17693: LD_ADDR_EXP 79
17697: PUSH
17698: LD_EXP 79
17702: PUSH
17703: LD_VAR 0 2
17707: DIFF
17708: ST_TO_ADDR
17709: GO 17727
// hInvincible := hInvincible union i ;
17711: LD_ADDR_EXP 79
17715: PUSH
17716: LD_EXP 79
17720: PUSH
17721: LD_VAR 0 2
17725: UNION
17726: ST_TO_ADDR
// end ;
17727: GO 17667
17729: POP
17730: POP
// end ;
17731: LD_VAR 0 1
17735: RET
// export function hHackInvisible ; var i , j ; begin
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 69
17760: PUSH
17761: FOR_IN
17762: IFFALSE 17786
// if IsSelected ( i ) then
17764: LD_VAR 0 2
17768: PPUSH
17769: CALL_OW 306
17773: IFFALSE 17784
// ComForceInvisible ( i ) ;
17775: LD_VAR 0 2
17779: PPUSH
17780: CALL_OW 496
17784: GO 17761
17786: POP
17787: POP
// end ;
17788: LD_VAR 0 1
17792: RET
// export function hHackChangeYourSide ; begin
17793: LD_INT 0
17795: PPUSH
// if your_side = 8 then
17796: LD_OWVAR 2
17800: PUSH
17801: LD_INT 8
17803: EQUAL
17804: IFFALSE 17816
// your_side := 0 else
17806: LD_ADDR_OWVAR 2
17810: PUSH
17811: LD_INT 0
17813: ST_TO_ADDR
17814: GO 17830
// your_side := your_side + 1 ;
17816: LD_ADDR_OWVAR 2
17820: PUSH
17821: LD_OWVAR 2
17825: PUSH
17826: LD_INT 1
17828: PLUS
17829: ST_TO_ADDR
// end ;
17830: LD_VAR 0 1
17834: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17835: LD_INT 0
17837: PPUSH
17838: PPUSH
17839: PPUSH
// for i in all_units do
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_OWVAR 3
17849: PUSH
17850: FOR_IN
17851: IFFALSE 17929
// if IsSelected ( i ) then
17853: LD_VAR 0 2
17857: PPUSH
17858: CALL_OW 306
17862: IFFALSE 17927
// begin j := GetSide ( i ) ;
17864: LD_ADDR_VAR 0 3
17868: PUSH
17869: LD_VAR 0 2
17873: PPUSH
17874: CALL_OW 255
17878: ST_TO_ADDR
// if j = 8 then
17879: LD_VAR 0 3
17883: PUSH
17884: LD_INT 8
17886: EQUAL
17887: IFFALSE 17899
// j := 0 else
17889: LD_ADDR_VAR 0 3
17893: PUSH
17894: LD_INT 0
17896: ST_TO_ADDR
17897: GO 17913
// j := j + 1 ;
17899: LD_ADDR_VAR 0 3
17903: PUSH
17904: LD_VAR 0 3
17908: PUSH
17909: LD_INT 1
17911: PLUS
17912: ST_TO_ADDR
// SetSide ( i , j ) ;
17913: LD_VAR 0 2
17917: PPUSH
17918: LD_VAR 0 3
17922: PPUSH
17923: CALL_OW 235
// end ;
17927: GO 17850
17929: POP
17930: POP
// end ;
17931: LD_VAR 0 1
17935: RET
// export function hHackFog ; begin
17936: LD_INT 0
17938: PPUSH
// FogOff ( true ) ;
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 344
// end ;
17946: LD_VAR 0 1
17950: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17951: LD_INT 0
17953: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17954: LD_VAR 0 1
17958: PPUSH
17959: LD_VAR 0 2
17963: PPUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 483
// CenterOnXY ( x , y ) ;
17979: LD_VAR 0 2
17983: PPUSH
17984: LD_VAR 0 3
17988: PPUSH
17989: CALL_OW 84
// end ; end_of_file
17993: LD_VAR 0 4
17997: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17998: LD_INT 0
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 264
18013: PUSH
18014: LD_EXP 11
18018: EQUAL
18019: IFFALSE 18091
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18021: LD_INT 68
18023: PPUSH
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 255
18033: PPUSH
18034: CALL_OW 321
18038: PUSH
18039: LD_INT 2
18041: EQUAL
18042: IFFALSE 18054
// eff := 70 else
18044: LD_ADDR_VAR 0 4
18048: PUSH
18049: LD_INT 70
18051: ST_TO_ADDR
18052: GO 18062
// eff := 30 ;
18054: LD_ADDR_VAR 0 4
18058: PUSH
18059: LD_INT 30
18061: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18062: LD_VAR 0 1
18066: PPUSH
18067: CALL_OW 250
18071: PPUSH
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 251
18081: PPUSH
18082: LD_VAR 0 4
18086: PPUSH
18087: CALL_OW 495
// end ; end ;
18091: LD_VAR 0 2
18095: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18096: LD_INT 0
18098: PPUSH
// end ;
18099: LD_VAR 0 4
18103: RET
// export function SOS_Command ( cmd ) ; begin
18104: LD_INT 0
18106: PPUSH
// end ;
18107: LD_VAR 0 2
18111: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18112: LD_INT 0
18114: PPUSH
// if cmd = 121 then
18115: LD_VAR 0 1
18119: PUSH
18120: LD_INT 121
18122: EQUAL
18123: IFFALSE 18125
// end ;
18125: LD_VAR 0 6
18129: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18130: LD_INT 0
18132: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_INT 250
18140: EQUAL
18141: PUSH
18142: LD_VAR 0 2
18146: PPUSH
18147: CALL_OW 264
18151: PUSH
18152: LD_EXP 14
18156: EQUAL
18157: AND
18158: IFFALSE 18179
// MinerPlaceMine ( unit , x , y ) ;
18160: LD_VAR 0 2
18164: PPUSH
18165: LD_VAR 0 4
18169: PPUSH
18170: LD_VAR 0 5
18174: PPUSH
18175: CALL 20528 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18179: LD_VAR 0 1
18183: PUSH
18184: LD_INT 251
18186: EQUAL
18187: PUSH
18188: LD_VAR 0 2
18192: PPUSH
18193: CALL_OW 264
18197: PUSH
18198: LD_EXP 14
18202: EQUAL
18203: AND
18204: IFFALSE 18225
// MinerDetonateMine ( unit , x , y ) ;
18206: LD_VAR 0 2
18210: PPUSH
18211: LD_VAR 0 4
18215: PPUSH
18216: LD_VAR 0 5
18220: PPUSH
18221: CALL 20805 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18225: LD_VAR 0 1
18229: PUSH
18230: LD_INT 252
18232: EQUAL
18233: PUSH
18234: LD_VAR 0 2
18238: PPUSH
18239: CALL_OW 264
18243: PUSH
18244: LD_EXP 14
18248: EQUAL
18249: AND
18250: IFFALSE 18271
// MinerCreateMinefield ( unit , x , y ) ;
18252: LD_VAR 0 2
18256: PPUSH
18257: LD_VAR 0 4
18261: PPUSH
18262: LD_VAR 0 5
18266: PPUSH
18267: CALL 21222 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18271: LD_VAR 0 1
18275: PUSH
18276: LD_INT 253
18278: EQUAL
18279: PUSH
18280: LD_VAR 0 2
18284: PPUSH
18285: CALL_OW 257
18289: PUSH
18290: LD_INT 5
18292: EQUAL
18293: AND
18294: IFFALSE 18315
// ComBinocular ( unit , x , y ) ;
18296: LD_VAR 0 2
18300: PPUSH
18301: LD_VAR 0 4
18305: PPUSH
18306: LD_VAR 0 5
18310: PPUSH
18311: CALL 21593 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18315: LD_VAR 0 1
18319: PUSH
18320: LD_INT 254
18322: EQUAL
18323: PUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 264
18333: PUSH
18334: LD_EXP 9
18338: EQUAL
18339: AND
18340: PUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: CALL_OW 263
18350: PUSH
18351: LD_INT 3
18353: EQUAL
18354: AND
18355: IFFALSE 18371
// HackDestroyVehicle ( unit , selectedUnit ) ;
18357: LD_VAR 0 2
18361: PPUSH
18362: LD_VAR 0 3
18366: PPUSH
18367: CALL 19888 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18371: LD_VAR 0 1
18375: PUSH
18376: LD_INT 255
18378: EQUAL
18379: PUSH
18380: LD_VAR 0 2
18384: PPUSH
18385: CALL_OW 264
18389: PUSH
18390: LD_INT 14
18392: PUSH
18393: LD_INT 53
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: IN
18400: AND
18401: PUSH
18402: LD_VAR 0 4
18406: PPUSH
18407: LD_VAR 0 5
18411: PPUSH
18412: CALL_OW 488
18416: AND
18417: IFFALSE 18441
// CutTreeXYR ( unit , x , y , 12 ) ;
18419: LD_VAR 0 2
18423: PPUSH
18424: LD_VAR 0 4
18428: PPUSH
18429: LD_VAR 0 5
18433: PPUSH
18434: LD_INT 12
18436: PPUSH
18437: CALL 18454 0 4
// end ;
18441: LD_VAR 0 6
18445: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18446: LD_INT 0
18448: PPUSH
// end ;
18449: LD_VAR 0 4
18453: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18454: LD_INT 0
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18465: LD_VAR 0 1
18469: NOT
18470: PUSH
18471: LD_VAR 0 2
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: CALL_OW 488
18485: NOT
18486: OR
18487: PUSH
18488: LD_VAR 0 4
18492: NOT
18493: OR
18494: IFFALSE 18498
// exit ;
18496: GO 18838
// list := [ ] ;
18498: LD_ADDR_VAR 0 13
18502: PUSH
18503: EMPTY
18504: ST_TO_ADDR
// if x - r < 0 then
18505: LD_VAR 0 2
18509: PUSH
18510: LD_VAR 0 4
18514: MINUS
18515: PUSH
18516: LD_INT 0
18518: LESS
18519: IFFALSE 18531
// min_x := 0 else
18521: LD_ADDR_VAR 0 7
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
18529: GO 18547
// min_x := x - r ;
18531: LD_ADDR_VAR 0 7
18535: PUSH
18536: LD_VAR 0 2
18540: PUSH
18541: LD_VAR 0 4
18545: MINUS
18546: ST_TO_ADDR
// if y - r < 0 then
18547: LD_VAR 0 3
18551: PUSH
18552: LD_VAR 0 4
18556: MINUS
18557: PUSH
18558: LD_INT 0
18560: LESS
18561: IFFALSE 18573
// min_y := 0 else
18563: LD_ADDR_VAR 0 8
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
18571: GO 18589
// min_y := y - r ;
18573: LD_ADDR_VAR 0 8
18577: PUSH
18578: LD_VAR 0 3
18582: PUSH
18583: LD_VAR 0 4
18587: MINUS
18588: ST_TO_ADDR
// max_x := x + r ;
18589: LD_ADDR_VAR 0 9
18593: PUSH
18594: LD_VAR 0 2
18598: PUSH
18599: LD_VAR 0 4
18603: PLUS
18604: ST_TO_ADDR
// max_y := y + r ;
18605: LD_ADDR_VAR 0 10
18609: PUSH
18610: LD_VAR 0 3
18614: PUSH
18615: LD_VAR 0 4
18619: PLUS
18620: ST_TO_ADDR
// for _x = min_x to max_x do
18621: LD_ADDR_VAR 0 11
18625: PUSH
18626: DOUBLE
18627: LD_VAR 0 7
18631: DEC
18632: ST_TO_ADDR
18633: LD_VAR 0 9
18637: PUSH
18638: FOR_TO
18639: IFFALSE 18756
// for _y = min_y to max_y do
18641: LD_ADDR_VAR 0 12
18645: PUSH
18646: DOUBLE
18647: LD_VAR 0 8
18651: DEC
18652: ST_TO_ADDR
18653: LD_VAR 0 10
18657: PUSH
18658: FOR_TO
18659: IFFALSE 18752
// begin if not ValidHex ( _x , _y ) then
18661: LD_VAR 0 11
18665: PPUSH
18666: LD_VAR 0 12
18670: PPUSH
18671: CALL_OW 488
18675: NOT
18676: IFFALSE 18680
// continue ;
18678: GO 18658
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18680: LD_VAR 0 11
18684: PPUSH
18685: LD_VAR 0 12
18689: PPUSH
18690: CALL_OW 351
18694: PUSH
18695: LD_VAR 0 11
18699: PPUSH
18700: LD_VAR 0 12
18704: PPUSH
18705: CALL_OW 554
18709: AND
18710: IFFALSE 18750
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18712: LD_ADDR_VAR 0 13
18716: PUSH
18717: LD_VAR 0 13
18721: PPUSH
18722: LD_VAR 0 13
18726: PUSH
18727: LD_INT 1
18729: PLUS
18730: PPUSH
18731: LD_VAR 0 11
18735: PUSH
18736: LD_VAR 0 12
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PPUSH
18745: CALL_OW 2
18749: ST_TO_ADDR
// end ;
18750: GO 18658
18752: POP
18753: POP
18754: GO 18638
18756: POP
18757: POP
// if not list then
18758: LD_VAR 0 13
18762: NOT
18763: IFFALSE 18767
// exit ;
18765: GO 18838
// for i in list do
18767: LD_ADDR_VAR 0 6
18771: PUSH
18772: LD_VAR 0 13
18776: PUSH
18777: FOR_IN
18778: IFFALSE 18836
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18780: LD_VAR 0 1
18784: PPUSH
18785: LD_STRING M
18787: PUSH
18788: LD_VAR 0 6
18792: PUSH
18793: LD_INT 1
18795: ARRAY
18796: PUSH
18797: LD_VAR 0 6
18801: PUSH
18802: LD_INT 2
18804: ARRAY
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: PPUSH
18830: CALL_OW 447
18834: GO 18777
18836: POP
18837: POP
// end ;
18838: LD_VAR 0 5
18842: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18843: LD_EXP 82
18847: NOT
18848: IFFALSE 18898
18850: GO 18852
18852: DISABLE
// begin initHack := true ;
18853: LD_ADDR_EXP 82
18857: PUSH
18858: LD_INT 1
18860: ST_TO_ADDR
// hackTanks := [ ] ;
18861: LD_ADDR_EXP 83
18865: PUSH
18866: EMPTY
18867: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18868: LD_ADDR_EXP 84
18872: PUSH
18873: EMPTY
18874: ST_TO_ADDR
// hackLimit := 3 ;
18875: LD_ADDR_EXP 85
18879: PUSH
18880: LD_INT 3
18882: ST_TO_ADDR
// hackDist := 12 ;
18883: LD_ADDR_EXP 86
18887: PUSH
18888: LD_INT 12
18890: ST_TO_ADDR
// hackCounter := [ ] ;
18891: LD_ADDR_EXP 87
18895: PUSH
18896: EMPTY
18897: ST_TO_ADDR
// end ;
18898: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18899: LD_EXP 82
18903: PUSH
18904: LD_INT 34
18906: PUSH
18907: LD_EXP 9
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PPUSH
18916: CALL_OW 69
18920: AND
18921: IFFALSE 19176
18923: GO 18925
18925: DISABLE
18926: LD_INT 0
18928: PPUSH
18929: PPUSH
// begin enable ;
18930: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18931: LD_ADDR_VAR 0 1
18935: PUSH
18936: LD_INT 34
18938: PUSH
18939: LD_EXP 9
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL_OW 69
18952: PUSH
18953: FOR_IN
18954: IFFALSE 19174
// begin if not i in hackTanks then
18956: LD_VAR 0 1
18960: PUSH
18961: LD_EXP 83
18965: IN
18966: NOT
18967: IFFALSE 19050
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18969: LD_ADDR_EXP 83
18973: PUSH
18974: LD_EXP 83
18978: PPUSH
18979: LD_EXP 83
18983: PUSH
18984: LD_INT 1
18986: PLUS
18987: PPUSH
18988: LD_VAR 0 1
18992: PPUSH
18993: CALL_OW 1
18997: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18998: LD_ADDR_EXP 84
19002: PUSH
19003: LD_EXP 84
19007: PPUSH
19008: LD_EXP 84
19012: PUSH
19013: LD_INT 1
19015: PLUS
19016: PPUSH
19017: EMPTY
19018: PPUSH
19019: CALL_OW 1
19023: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19024: LD_ADDR_EXP 87
19028: PUSH
19029: LD_EXP 87
19033: PPUSH
19034: LD_EXP 87
19038: PUSH
19039: LD_INT 1
19041: PLUS
19042: PPUSH
19043: EMPTY
19044: PPUSH
19045: CALL_OW 1
19049: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 302
19059: NOT
19060: IFFALSE 19073
// begin HackUnlinkAll ( i ) ;
19062: LD_VAR 0 1
19066: PPUSH
19067: CALL 19179 0 1
// continue ;
19071: GO 18953
// end ; HackCheckCapturedStatus ( i ) ;
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL 19622 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19082: LD_ADDR_VAR 0 2
19086: PUSH
19087: LD_INT 81
19089: PUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 255
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 33
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 91
19116: PUSH
19117: LD_VAR 0 1
19121: PUSH
19122: LD_EXP 86
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 50
19134: PUSH
19135: EMPTY
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: PPUSH
19144: CALL_OW 69
19148: ST_TO_ADDR
// if not tmp then
19149: LD_VAR 0 2
19153: NOT
19154: IFFALSE 19158
// continue ;
19156: GO 18953
// HackLink ( i , tmp ) ;
19158: LD_VAR 0 1
19162: PPUSH
19163: LD_VAR 0 2
19167: PPUSH
19168: CALL 19315 0 2
// end ;
19172: GO 18953
19174: POP
19175: POP
// end ;
19176: PPOPN 2
19178: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
19183: PPUSH
// if not hack in hackTanks then
19184: LD_VAR 0 1
19188: PUSH
19189: LD_EXP 83
19193: IN
19194: NOT
19195: IFFALSE 19199
// exit ;
19197: GO 19310
// index := GetElementIndex ( hackTanks , hack ) ;
19199: LD_ADDR_VAR 0 4
19203: PUSH
19204: LD_EXP 83
19208: PPUSH
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL 26744 0 2
19218: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19219: LD_EXP 84
19223: PUSH
19224: LD_VAR 0 4
19228: ARRAY
19229: IFFALSE 19310
// begin for i in hackTanksCaptured [ index ] do
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_EXP 84
19240: PUSH
19241: LD_VAR 0 4
19245: ARRAY
19246: PUSH
19247: FOR_IN
19248: IFFALSE 19274
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: PPUSH
19259: LD_VAR 0 3
19263: PUSH
19264: LD_INT 2
19266: ARRAY
19267: PPUSH
19268: CALL_OW 235
19272: GO 19247
19274: POP
19275: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19276: LD_ADDR_EXP 84
19280: PUSH
19281: LD_EXP 84
19285: PPUSH
19286: LD_VAR 0 4
19290: PPUSH
19291: EMPTY
19292: PPUSH
19293: CALL_OW 1
19297: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19298: LD_VAR 0 1
19302: PPUSH
19303: LD_INT 0
19305: PPUSH
19306: CALL_OW 505
// end ; end ;
19310: LD_VAR 0 2
19314: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19315: LD_INT 0
19317: PPUSH
19318: PPUSH
19319: PPUSH
// if not hack in hackTanks or not vehicles then
19320: LD_VAR 0 1
19324: PUSH
19325: LD_EXP 83
19329: IN
19330: NOT
19331: PUSH
19332: LD_VAR 0 2
19336: NOT
19337: OR
19338: IFFALSE 19342
// exit ;
19340: GO 19617
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19342: LD_ADDR_VAR 0 2
19346: PUSH
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_VAR 0 2
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: CALL 27394 0 4
19367: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19368: LD_ADDR_VAR 0 5
19372: PUSH
19373: LD_EXP 83
19377: PPUSH
19378: LD_VAR 0 1
19382: PPUSH
19383: CALL 26744 0 2
19387: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19388: LD_EXP 84
19392: PUSH
19393: LD_VAR 0 5
19397: ARRAY
19398: PUSH
19399: LD_EXP 85
19403: LESS
19404: IFFALSE 19593
// begin for i := 1 to vehicles do
19406: LD_ADDR_VAR 0 4
19410: PUSH
19411: DOUBLE
19412: LD_INT 1
19414: DEC
19415: ST_TO_ADDR
19416: LD_VAR 0 2
19420: PUSH
19421: FOR_TO
19422: IFFALSE 19591
// begin if hackTanksCaptured [ index ] = hackLimit then
19424: LD_EXP 84
19428: PUSH
19429: LD_VAR 0 5
19433: ARRAY
19434: PUSH
19435: LD_EXP 85
19439: EQUAL
19440: IFFALSE 19444
// break ;
19442: GO 19591
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19444: LD_ADDR_EXP 87
19448: PUSH
19449: LD_EXP 87
19453: PPUSH
19454: LD_VAR 0 5
19458: PPUSH
19459: LD_EXP 87
19463: PUSH
19464: LD_VAR 0 5
19468: ARRAY
19469: PUSH
19470: LD_INT 1
19472: PLUS
19473: PPUSH
19474: CALL_OW 1
19478: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19479: LD_ADDR_EXP 84
19483: PUSH
19484: LD_EXP 84
19488: PPUSH
19489: LD_VAR 0 5
19493: PUSH
19494: LD_EXP 84
19498: PUSH
19499: LD_VAR 0 5
19503: ARRAY
19504: PUSH
19505: LD_INT 1
19507: PLUS
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PPUSH
19513: LD_VAR 0 2
19517: PUSH
19518: LD_VAR 0 4
19522: ARRAY
19523: PUSH
19524: LD_VAR 0 2
19528: PUSH
19529: LD_VAR 0 4
19533: ARRAY
19534: PPUSH
19535: CALL_OW 255
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL 26959 0 3
19548: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19549: LD_VAR 0 2
19553: PUSH
19554: LD_VAR 0 4
19558: ARRAY
19559: PPUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 255
19569: PPUSH
19570: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19574: LD_VAR 0 2
19578: PUSH
19579: LD_VAR 0 4
19583: ARRAY
19584: PPUSH
19585: CALL_OW 141
// end ;
19589: GO 19421
19591: POP
19592: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_EXP 84
19602: PUSH
19603: LD_VAR 0 5
19607: ARRAY
19608: PUSH
19609: LD_INT 0
19611: PLUS
19612: PPUSH
19613: CALL_OW 505
// end ;
19617: LD_VAR 0 3
19621: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
19626: PPUSH
19627: PPUSH
// if not hack in hackTanks then
19628: LD_VAR 0 1
19632: PUSH
19633: LD_EXP 83
19637: IN
19638: NOT
19639: IFFALSE 19643
// exit ;
19641: GO 19883
// index := GetElementIndex ( hackTanks , hack ) ;
19643: LD_ADDR_VAR 0 4
19647: PUSH
19648: LD_EXP 83
19652: PPUSH
19653: LD_VAR 0 1
19657: PPUSH
19658: CALL 26744 0 2
19662: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19663: LD_ADDR_VAR 0 3
19667: PUSH
19668: DOUBLE
19669: LD_EXP 84
19673: PUSH
19674: LD_VAR 0 4
19678: ARRAY
19679: INC
19680: ST_TO_ADDR
19681: LD_INT 1
19683: PUSH
19684: FOR_DOWNTO
19685: IFFALSE 19857
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19687: LD_ADDR_VAR 0 5
19691: PUSH
19692: LD_EXP 84
19696: PUSH
19697: LD_VAR 0 4
19701: ARRAY
19702: PUSH
19703: LD_VAR 0 3
19707: ARRAY
19708: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19709: LD_VAR 0 5
19713: PUSH
19714: LD_INT 1
19716: ARRAY
19717: PPUSH
19718: CALL_OW 302
19722: NOT
19723: PUSH
19724: LD_VAR 0 5
19728: PUSH
19729: LD_INT 1
19731: ARRAY
19732: PPUSH
19733: CALL_OW 255
19737: PUSH
19738: LD_VAR 0 1
19742: PPUSH
19743: CALL_OW 255
19747: NONEQUAL
19748: OR
19749: IFFALSE 19855
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19751: LD_VAR 0 5
19755: PUSH
19756: LD_INT 1
19758: ARRAY
19759: PPUSH
19760: CALL_OW 305
19764: PUSH
19765: LD_VAR 0 5
19769: PUSH
19770: LD_INT 1
19772: ARRAY
19773: PPUSH
19774: CALL_OW 255
19778: PUSH
19779: LD_VAR 0 1
19783: PPUSH
19784: CALL_OW 255
19788: EQUAL
19789: AND
19790: IFFALSE 19814
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19792: LD_VAR 0 5
19796: PUSH
19797: LD_INT 1
19799: ARRAY
19800: PPUSH
19801: LD_VAR 0 5
19805: PUSH
19806: LD_INT 2
19808: ARRAY
19809: PPUSH
19810: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19814: LD_ADDR_EXP 84
19818: PUSH
19819: LD_EXP 84
19823: PPUSH
19824: LD_VAR 0 4
19828: PPUSH
19829: LD_EXP 84
19833: PUSH
19834: LD_VAR 0 4
19838: ARRAY
19839: PPUSH
19840: LD_VAR 0 3
19844: PPUSH
19845: CALL_OW 3
19849: PPUSH
19850: CALL_OW 1
19854: ST_TO_ADDR
// end ; end ;
19855: GO 19684
19857: POP
19858: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19859: LD_VAR 0 1
19863: PPUSH
19864: LD_EXP 84
19868: PUSH
19869: LD_VAR 0 4
19873: ARRAY
19874: PUSH
19875: LD_INT 0
19877: PLUS
19878: PPUSH
19879: CALL_OW 505
// end ;
19883: LD_VAR 0 2
19887: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19888: LD_INT 0
19890: PPUSH
19891: PPUSH
19892: PPUSH
19893: PPUSH
// if not hack in hackTanks then
19894: LD_VAR 0 1
19898: PUSH
19899: LD_EXP 83
19903: IN
19904: NOT
19905: IFFALSE 19909
// exit ;
19907: GO 19994
// index := GetElementIndex ( hackTanks , hack ) ;
19909: LD_ADDR_VAR 0 5
19913: PUSH
19914: LD_EXP 83
19918: PPUSH
19919: LD_VAR 0 1
19923: PPUSH
19924: CALL 26744 0 2
19928: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: DOUBLE
19935: LD_INT 1
19937: DEC
19938: ST_TO_ADDR
19939: LD_EXP 84
19943: PUSH
19944: LD_VAR 0 5
19948: ARRAY
19949: PUSH
19950: FOR_TO
19951: IFFALSE 19992
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19953: LD_EXP 84
19957: PUSH
19958: LD_VAR 0 5
19962: ARRAY
19963: PUSH
19964: LD_VAR 0 4
19968: ARRAY
19969: PUSH
19970: LD_INT 1
19972: ARRAY
19973: PUSH
19974: LD_VAR 0 2
19978: EQUAL
19979: IFFALSE 19990
// KillUnit ( vehicle ) ;
19981: LD_VAR 0 2
19985: PPUSH
19986: CALL_OW 66
19990: GO 19950
19992: POP
19993: POP
// end ;
19994: LD_VAR 0 3
19998: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19999: LD_EXP 88
20003: NOT
20004: IFFALSE 20039
20006: GO 20008
20008: DISABLE
// begin initMiner := true ;
20009: LD_ADDR_EXP 88
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
// minersList := [ ] ;
20017: LD_ADDR_EXP 89
20021: PUSH
20022: EMPTY
20023: ST_TO_ADDR
// minerMinesList := [ ] ;
20024: LD_ADDR_EXP 90
20028: PUSH
20029: EMPTY
20030: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20031: LD_ADDR_EXP 91
20035: PUSH
20036: LD_INT 5
20038: ST_TO_ADDR
// end ;
20039: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20040: LD_EXP 88
20044: PUSH
20045: LD_INT 34
20047: PUSH
20048: LD_EXP 14
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: AND
20062: IFFALSE 20525
20064: GO 20066
20066: DISABLE
20067: LD_INT 0
20069: PPUSH
20070: PPUSH
20071: PPUSH
20072: PPUSH
// begin enable ;
20073: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20074: LD_ADDR_VAR 0 1
20078: PUSH
20079: LD_INT 34
20081: PUSH
20082: LD_EXP 14
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 69
20095: PUSH
20096: FOR_IN
20097: IFFALSE 20169
// begin if not i in minersList then
20099: LD_VAR 0 1
20103: PUSH
20104: LD_EXP 89
20108: IN
20109: NOT
20110: IFFALSE 20167
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20112: LD_ADDR_EXP 89
20116: PUSH
20117: LD_EXP 89
20121: PPUSH
20122: LD_EXP 89
20126: PUSH
20127: LD_INT 1
20129: PLUS
20130: PPUSH
20131: LD_VAR 0 1
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20141: LD_ADDR_EXP 90
20145: PUSH
20146: LD_EXP 90
20150: PPUSH
20151: LD_EXP 90
20155: PUSH
20156: LD_INT 1
20158: PLUS
20159: PPUSH
20160: EMPTY
20161: PPUSH
20162: CALL_OW 1
20166: ST_TO_ADDR
// end end ;
20167: GO 20096
20169: POP
20170: POP
// for i := minerMinesList downto 1 do
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: DOUBLE
20177: LD_EXP 90
20181: INC
20182: ST_TO_ADDR
20183: LD_INT 1
20185: PUSH
20186: FOR_DOWNTO
20187: IFFALSE 20523
// begin if IsLive ( minersList [ i ] ) then
20189: LD_EXP 89
20193: PUSH
20194: LD_VAR 0 1
20198: ARRAY
20199: PPUSH
20200: CALL_OW 300
20204: IFFALSE 20232
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20206: LD_EXP 89
20210: PUSH
20211: LD_VAR 0 1
20215: ARRAY
20216: PPUSH
20217: LD_EXP 90
20221: PUSH
20222: LD_VAR 0 1
20226: ARRAY
20227: PPUSH
20228: CALL_OW 505
// if not minerMinesList [ i ] then
20232: LD_EXP 90
20236: PUSH
20237: LD_VAR 0 1
20241: ARRAY
20242: NOT
20243: IFFALSE 20247
// continue ;
20245: GO 20186
// for j := minerMinesList [ i ] downto 1 do
20247: LD_ADDR_VAR 0 2
20251: PUSH
20252: DOUBLE
20253: LD_EXP 90
20257: PUSH
20258: LD_VAR 0 1
20262: ARRAY
20263: INC
20264: ST_TO_ADDR
20265: LD_INT 1
20267: PUSH
20268: FOR_DOWNTO
20269: IFFALSE 20519
// begin side := GetSide ( minersList [ i ] ) ;
20271: LD_ADDR_VAR 0 3
20275: PUSH
20276: LD_EXP 89
20280: PUSH
20281: LD_VAR 0 1
20285: ARRAY
20286: PPUSH
20287: CALL_OW 255
20291: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20292: LD_ADDR_VAR 0 4
20296: PUSH
20297: LD_EXP 90
20301: PUSH
20302: LD_VAR 0 1
20306: ARRAY
20307: PUSH
20308: LD_VAR 0 2
20312: ARRAY
20313: PUSH
20314: LD_INT 1
20316: ARRAY
20317: PPUSH
20318: LD_EXP 90
20322: PUSH
20323: LD_VAR 0 1
20327: ARRAY
20328: PUSH
20329: LD_VAR 0 2
20333: ARRAY
20334: PUSH
20335: LD_INT 2
20337: ARRAY
20338: PPUSH
20339: CALL_OW 428
20343: ST_TO_ADDR
// if not tmp then
20344: LD_VAR 0 4
20348: NOT
20349: IFFALSE 20353
// continue ;
20351: GO 20268
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20353: LD_VAR 0 4
20357: PUSH
20358: LD_INT 81
20360: PUSH
20361: LD_VAR 0 3
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: IN
20375: PUSH
20376: LD_EXP 90
20380: PUSH
20381: LD_VAR 0 1
20385: ARRAY
20386: PUSH
20387: LD_VAR 0 2
20391: ARRAY
20392: PUSH
20393: LD_INT 1
20395: ARRAY
20396: PPUSH
20397: LD_EXP 90
20401: PUSH
20402: LD_VAR 0 1
20406: ARRAY
20407: PUSH
20408: LD_VAR 0 2
20412: ARRAY
20413: PUSH
20414: LD_INT 2
20416: ARRAY
20417: PPUSH
20418: CALL_OW 458
20422: AND
20423: IFFALSE 20517
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20425: LD_EXP 90
20429: PUSH
20430: LD_VAR 0 1
20434: ARRAY
20435: PUSH
20436: LD_VAR 0 2
20440: ARRAY
20441: PUSH
20442: LD_INT 1
20444: ARRAY
20445: PPUSH
20446: LD_EXP 90
20450: PUSH
20451: LD_VAR 0 1
20455: ARRAY
20456: PUSH
20457: LD_VAR 0 2
20461: ARRAY
20462: PUSH
20463: LD_INT 2
20465: ARRAY
20466: PPUSH
20467: LD_VAR 0 3
20471: PPUSH
20472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20476: LD_ADDR_EXP 90
20480: PUSH
20481: LD_EXP 90
20485: PPUSH
20486: LD_VAR 0 1
20490: PPUSH
20491: LD_EXP 90
20495: PUSH
20496: LD_VAR 0 1
20500: ARRAY
20501: PPUSH
20502: LD_VAR 0 2
20506: PPUSH
20507: CALL_OW 3
20511: PPUSH
20512: CALL_OW 1
20516: ST_TO_ADDR
// end ; end ;
20517: GO 20268
20519: POP
20520: POP
// end ;
20521: GO 20186
20523: POP
20524: POP
// end ;
20525: PPOPN 4
20527: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20528: LD_INT 0
20530: PPUSH
20531: PPUSH
// result := false ;
20532: LD_ADDR_VAR 0 4
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20540: LD_VAR 0 1
20544: PPUSH
20545: CALL_OW 264
20549: PUSH
20550: LD_EXP 14
20554: EQUAL
20555: NOT
20556: IFFALSE 20560
// exit ;
20558: GO 20800
// index := GetElementIndex ( minersList , unit ) ;
20560: LD_ADDR_VAR 0 5
20564: PUSH
20565: LD_EXP 89
20569: PPUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL 26744 0 2
20579: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20580: LD_EXP 90
20584: PUSH
20585: LD_VAR 0 5
20589: ARRAY
20590: PUSH
20591: LD_EXP 91
20595: GREATEREQUAL
20596: IFFALSE 20600
// exit ;
20598: GO 20800
// ComMoveXY ( unit , x , y ) ;
20600: LD_VAR 0 1
20604: PPUSH
20605: LD_VAR 0 2
20609: PPUSH
20610: LD_VAR 0 3
20614: PPUSH
20615: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20619: LD_INT 35
20621: PPUSH
20622: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20626: LD_VAR 0 1
20630: PPUSH
20631: LD_VAR 0 2
20635: PPUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: CALL 57141 0 3
20645: NOT
20646: PUSH
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL_OW 314
20656: AND
20657: IFFALSE 20661
// exit ;
20659: GO 20800
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20661: LD_VAR 0 2
20665: PPUSH
20666: LD_VAR 0 3
20670: PPUSH
20671: CALL_OW 428
20675: PUSH
20676: LD_VAR 0 1
20680: EQUAL
20681: PUSH
20682: LD_VAR 0 1
20686: PPUSH
20687: CALL_OW 314
20691: NOT
20692: AND
20693: IFFALSE 20619
// PlaySoundXY ( x , y , PlantMine ) ;
20695: LD_VAR 0 2
20699: PPUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_STRING PlantMine
20707: PPUSH
20708: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 255
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20739: LD_ADDR_EXP 90
20743: PUSH
20744: LD_EXP 90
20748: PPUSH
20749: LD_VAR 0 5
20753: PUSH
20754: LD_EXP 90
20758: PUSH
20759: LD_VAR 0 5
20763: ARRAY
20764: PUSH
20765: LD_INT 1
20767: PLUS
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PPUSH
20773: LD_VAR 0 2
20777: PUSH
20778: LD_VAR 0 3
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PPUSH
20787: CALL 26959 0 3
20791: ST_TO_ADDR
// result := true ;
20792: LD_ADDR_VAR 0 4
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// end ;
20800: LD_VAR 0 4
20804: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
20809: PPUSH
// if not unit in minersList then
20810: LD_VAR 0 1
20814: PUSH
20815: LD_EXP 89
20819: IN
20820: NOT
20821: IFFALSE 20825
// exit ;
20823: GO 21217
// index := GetElementIndex ( minersList , unit ) ;
20825: LD_ADDR_VAR 0 6
20829: PUSH
20830: LD_EXP 89
20834: PPUSH
20835: LD_VAR 0 1
20839: PPUSH
20840: CALL 26744 0 2
20844: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20845: LD_ADDR_VAR 0 5
20849: PUSH
20850: DOUBLE
20851: LD_EXP 90
20855: PUSH
20856: LD_VAR 0 6
20860: ARRAY
20861: INC
20862: ST_TO_ADDR
20863: LD_INT 1
20865: PUSH
20866: FOR_DOWNTO
20867: IFFALSE 21028
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20869: LD_EXP 90
20873: PUSH
20874: LD_VAR 0 6
20878: ARRAY
20879: PUSH
20880: LD_VAR 0 5
20884: ARRAY
20885: PUSH
20886: LD_INT 1
20888: ARRAY
20889: PUSH
20890: LD_VAR 0 2
20894: EQUAL
20895: PUSH
20896: LD_EXP 90
20900: PUSH
20901: LD_VAR 0 6
20905: ARRAY
20906: PUSH
20907: LD_VAR 0 5
20911: ARRAY
20912: PUSH
20913: LD_INT 2
20915: ARRAY
20916: PUSH
20917: LD_VAR 0 3
20921: EQUAL
20922: AND
20923: IFFALSE 21026
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20925: LD_EXP 90
20929: PUSH
20930: LD_VAR 0 6
20934: ARRAY
20935: PUSH
20936: LD_VAR 0 5
20940: ARRAY
20941: PUSH
20942: LD_INT 1
20944: ARRAY
20945: PPUSH
20946: LD_EXP 90
20950: PUSH
20951: LD_VAR 0 6
20955: ARRAY
20956: PUSH
20957: LD_VAR 0 5
20961: ARRAY
20962: PUSH
20963: LD_INT 2
20965: ARRAY
20966: PPUSH
20967: LD_VAR 0 1
20971: PPUSH
20972: CALL_OW 255
20976: PPUSH
20977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20981: LD_ADDR_EXP 90
20985: PUSH
20986: LD_EXP 90
20990: PPUSH
20991: LD_VAR 0 6
20995: PPUSH
20996: LD_EXP 90
21000: PUSH
21001: LD_VAR 0 6
21005: ARRAY
21006: PPUSH
21007: LD_VAR 0 5
21011: PPUSH
21012: CALL_OW 3
21016: PPUSH
21017: CALL_OW 1
21021: ST_TO_ADDR
// exit ;
21022: POP
21023: POP
21024: GO 21217
// end ; end ;
21026: GO 20866
21028: POP
21029: POP
// for i := minerMinesList [ index ] downto 1 do
21030: LD_ADDR_VAR 0 5
21034: PUSH
21035: DOUBLE
21036: LD_EXP 90
21040: PUSH
21041: LD_VAR 0 6
21045: ARRAY
21046: INC
21047: ST_TO_ADDR
21048: LD_INT 1
21050: PUSH
21051: FOR_DOWNTO
21052: IFFALSE 21215
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21054: LD_EXP 90
21058: PUSH
21059: LD_VAR 0 6
21063: ARRAY
21064: PUSH
21065: LD_VAR 0 5
21069: ARRAY
21070: PUSH
21071: LD_INT 1
21073: ARRAY
21074: PPUSH
21075: LD_EXP 90
21079: PUSH
21080: LD_VAR 0 6
21084: ARRAY
21085: PUSH
21086: LD_VAR 0 5
21090: ARRAY
21091: PUSH
21092: LD_INT 2
21094: ARRAY
21095: PPUSH
21096: LD_VAR 0 2
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: CALL_OW 298
21110: PUSH
21111: LD_INT 6
21113: LESS
21114: IFFALSE 21213
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21116: LD_EXP 90
21120: PUSH
21121: LD_VAR 0 6
21125: ARRAY
21126: PUSH
21127: LD_VAR 0 5
21131: ARRAY
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: PPUSH
21137: LD_EXP 90
21141: PUSH
21142: LD_VAR 0 6
21146: ARRAY
21147: PUSH
21148: LD_VAR 0 5
21152: ARRAY
21153: PUSH
21154: LD_INT 2
21156: ARRAY
21157: PPUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 255
21167: PPUSH
21168: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21172: LD_ADDR_EXP 90
21176: PUSH
21177: LD_EXP 90
21181: PPUSH
21182: LD_VAR 0 6
21186: PPUSH
21187: LD_EXP 90
21191: PUSH
21192: LD_VAR 0 6
21196: ARRAY
21197: PPUSH
21198: LD_VAR 0 5
21202: PPUSH
21203: CALL_OW 3
21207: PPUSH
21208: CALL_OW 1
21212: ST_TO_ADDR
// end ; end ;
21213: GO 21051
21215: POP
21216: POP
// end ;
21217: LD_VAR 0 4
21221: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21222: LD_INT 0
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 264
21242: PUSH
21243: LD_EXP 14
21247: EQUAL
21248: NOT
21249: PUSH
21250: LD_VAR 0 1
21254: PUSH
21255: LD_EXP 89
21259: IN
21260: NOT
21261: OR
21262: IFFALSE 21266
// exit ;
21264: GO 21588
// index := GetElementIndex ( minersList , unit ) ;
21266: LD_ADDR_VAR 0 6
21270: PUSH
21271: LD_EXP 89
21275: PPUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL 26744 0 2
21285: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21286: LD_ADDR_VAR 0 8
21290: PUSH
21291: LD_EXP 91
21295: PUSH
21296: LD_EXP 90
21300: PUSH
21301: LD_VAR 0 6
21305: ARRAY
21306: MINUS
21307: ST_TO_ADDR
// if not minesFreeAmount then
21308: LD_VAR 0 8
21312: NOT
21313: IFFALSE 21317
// exit ;
21315: GO 21588
// tmp := [ ] ;
21317: LD_ADDR_VAR 0 7
21321: PUSH
21322: EMPTY
21323: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21324: LD_ADDR_VAR 0 5
21328: PUSH
21329: DOUBLE
21330: LD_INT 1
21332: DEC
21333: ST_TO_ADDR
21334: LD_VAR 0 8
21338: PUSH
21339: FOR_TO
21340: IFFALSE 21535
// begin _d := rand ( 0 , 5 ) ;
21342: LD_ADDR_VAR 0 11
21346: PUSH
21347: LD_INT 0
21349: PPUSH
21350: LD_INT 5
21352: PPUSH
21353: CALL_OW 12
21357: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21358: LD_ADDR_VAR 0 12
21362: PUSH
21363: LD_INT 2
21365: PPUSH
21366: LD_INT 6
21368: PPUSH
21369: CALL_OW 12
21373: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21374: LD_ADDR_VAR 0 9
21378: PUSH
21379: LD_VAR 0 2
21383: PPUSH
21384: LD_VAR 0 11
21388: PPUSH
21389: LD_VAR 0 12
21393: PPUSH
21394: CALL_OW 272
21398: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21399: LD_ADDR_VAR 0 10
21403: PUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_VAR 0 11
21413: PPUSH
21414: LD_VAR 0 12
21418: PPUSH
21419: CALL_OW 273
21423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21424: LD_VAR 0 9
21428: PPUSH
21429: LD_VAR 0 10
21433: PPUSH
21434: CALL_OW 488
21438: PUSH
21439: LD_VAR 0 9
21443: PUSH
21444: LD_VAR 0 10
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_VAR 0 7
21457: IN
21458: NOT
21459: AND
21460: PUSH
21461: LD_VAR 0 9
21465: PPUSH
21466: LD_VAR 0 10
21470: PPUSH
21471: CALL_OW 458
21475: NOT
21476: AND
21477: IFFALSE 21519
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21479: LD_ADDR_VAR 0 7
21483: PUSH
21484: LD_VAR 0 7
21488: PPUSH
21489: LD_VAR 0 7
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: PPUSH
21498: LD_VAR 0 9
21502: PUSH
21503: LD_VAR 0 10
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 1
21516: ST_TO_ADDR
21517: GO 21533
// i := i - 1 ;
21519: LD_ADDR_VAR 0 5
21523: PUSH
21524: LD_VAR 0 5
21528: PUSH
21529: LD_INT 1
21531: MINUS
21532: ST_TO_ADDR
// end ;
21533: GO 21339
21535: POP
21536: POP
// for i in tmp do
21537: LD_ADDR_VAR 0 5
21541: PUSH
21542: LD_VAR 0 7
21546: PUSH
21547: FOR_IN
21548: IFFALSE 21586
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21550: LD_VAR 0 1
21554: PPUSH
21555: LD_VAR 0 5
21559: PUSH
21560: LD_INT 1
21562: ARRAY
21563: PPUSH
21564: LD_VAR 0 5
21568: PUSH
21569: LD_INT 2
21571: ARRAY
21572: PPUSH
21573: CALL 20528 0 3
21577: NOT
21578: IFFALSE 21584
// exit ;
21580: POP
21581: POP
21582: GO 21588
21584: GO 21547
21586: POP
21587: POP
// end ;
21588: LD_VAR 0 4
21592: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21593: LD_INT 0
21595: PPUSH
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
// if not GetClass ( unit ) = class_sniper then
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 257
21611: PUSH
21612: LD_INT 5
21614: EQUAL
21615: NOT
21616: IFFALSE 21620
// exit ;
21618: GO 22008
// dist := 8 ;
21620: LD_ADDR_VAR 0 5
21624: PUSH
21625: LD_INT 8
21627: ST_TO_ADDR
// viewRange := 12 ;
21628: LD_ADDR_VAR 0 7
21632: PUSH
21633: LD_INT 12
21635: ST_TO_ADDR
// side := GetSide ( unit ) ;
21636: LD_ADDR_VAR 0 6
21640: PUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 255
21650: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21651: LD_INT 61
21653: PPUSH
21654: LD_VAR 0 6
21658: PPUSH
21659: CALL_OW 321
21663: PUSH
21664: LD_INT 2
21666: EQUAL
21667: IFFALSE 21677
// viewRange := 16 ;
21669: LD_ADDR_VAR 0 7
21673: PUSH
21674: LD_INT 16
21676: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21677: LD_VAR 0 1
21681: PPUSH
21682: LD_VAR 0 2
21686: PPUSH
21687: LD_VAR 0 3
21691: PPUSH
21692: CALL_OW 297
21696: PUSH
21697: LD_VAR 0 5
21701: GREATER
21702: IFFALSE 21781
// begin ComMoveXY ( unit , x , y ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_VAR 0 2
21713: PPUSH
21714: LD_VAR 0 3
21718: PPUSH
21719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21723: LD_INT 35
21725: PPUSH
21726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21730: LD_VAR 0 1
21734: PPUSH
21735: LD_VAR 0 2
21739: PPUSH
21740: LD_VAR 0 3
21744: PPUSH
21745: CALL 57141 0 3
21749: NOT
21750: IFFALSE 21754
// exit ;
21752: GO 22008
// until GetDistUnitXY ( unit , x , y ) < dist ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_VAR 0 2
21763: PPUSH
21764: LD_VAR 0 3
21768: PPUSH
21769: CALL_OW 297
21773: PUSH
21774: LD_VAR 0 5
21778: LESS
21779: IFFALSE 21723
// end ; ComTurnXY ( unit , x , y ) ;
21781: LD_VAR 0 1
21785: PPUSH
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: CALL_OW 118
// wait ( 5 ) ;
21800: LD_INT 5
21802: PPUSH
21803: CALL_OW 67
// _d := GetDir ( unit ) ;
21807: LD_ADDR_VAR 0 10
21811: PUSH
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL_OW 254
21821: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21822: LD_ADDR_VAR 0 8
21826: PUSH
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 250
21836: PPUSH
21837: LD_VAR 0 10
21841: PPUSH
21842: LD_VAR 0 5
21846: PPUSH
21847: CALL_OW 272
21851: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21852: LD_ADDR_VAR 0 9
21856: PUSH
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 251
21866: PPUSH
21867: LD_VAR 0 10
21871: PPUSH
21872: LD_VAR 0 5
21876: PPUSH
21877: CALL_OW 273
21881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21882: LD_VAR 0 8
21886: PPUSH
21887: LD_VAR 0 9
21891: PPUSH
21892: CALL_OW 488
21896: NOT
21897: IFFALSE 21901
// exit ;
21899: GO 22008
// ComAnimCustom ( unit , 1 ) ;
21901: LD_VAR 0 1
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21913: LD_VAR 0 8
21917: PPUSH
21918: LD_VAR 0 9
21922: PPUSH
21923: LD_VAR 0 6
21927: PPUSH
21928: LD_VAR 0 7
21932: PPUSH
21933: CALL_OW 330
// repeat wait ( 1 ) ;
21937: LD_INT 1
21939: PPUSH
21940: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 316
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 314
21963: OR
21964: PUSH
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 302
21974: NOT
21975: OR
21976: PUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 301
21986: OR
21987: IFFALSE 21937
// RemoveSeeing ( _x , _y , side ) ;
21989: LD_VAR 0 8
21993: PPUSH
21994: LD_VAR 0 9
21998: PPUSH
21999: LD_VAR 0 6
22003: PPUSH
22004: CALL_OW 331
// end ; end_of_file
22008: LD_VAR 0 4
22012: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22013: LD_INT 0
22015: PPUSH
22016: PPUSH
// if exist_mode then
22017: LD_VAR 0 2
22021: IFFALSE 22046
// unit := CreateCharacter ( prefix & ident ) else
22023: LD_ADDR_VAR 0 5
22027: PUSH
22028: LD_VAR 0 3
22032: PUSH
22033: LD_VAR 0 1
22037: STR
22038: PPUSH
22039: CALL_OW 34
22043: ST_TO_ADDR
22044: GO 22061
// unit := NewCharacter ( ident ) ;
22046: LD_ADDR_VAR 0 5
22050: PUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 25
22060: ST_TO_ADDR
// result := unit ;
22061: LD_ADDR_VAR 0 4
22065: PUSH
22066: LD_VAR 0 5
22070: ST_TO_ADDR
// end ;
22071: LD_VAR 0 4
22075: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22076: LD_INT 0
22078: PPUSH
22079: PPUSH
// if not side or not nation then
22080: LD_VAR 0 1
22084: NOT
22085: PUSH
22086: LD_VAR 0 2
22090: NOT
22091: OR
22092: IFFALSE 22096
// exit ;
22094: GO 22860
// case nation of nation_american :
22096: LD_VAR 0 2
22100: PUSH
22101: LD_INT 1
22103: DOUBLE
22104: EQUAL
22105: IFTRUE 22109
22107: GO 22323
22109: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22110: LD_ADDR_VAR 0 4
22114: PUSH
22115: LD_INT 35
22117: PUSH
22118: LD_INT 45
22120: PUSH
22121: LD_INT 46
22123: PUSH
22124: LD_INT 47
22126: PUSH
22127: LD_INT 82
22129: PUSH
22130: LD_INT 83
22132: PUSH
22133: LD_INT 84
22135: PUSH
22136: LD_INT 85
22138: PUSH
22139: LD_INT 86
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: LD_INT 6
22150: PUSH
22151: LD_INT 15
22153: PUSH
22154: LD_INT 16
22156: PUSH
22157: LD_INT 7
22159: PUSH
22160: LD_INT 12
22162: PUSH
22163: LD_INT 13
22165: PUSH
22166: LD_INT 10
22168: PUSH
22169: LD_INT 14
22171: PUSH
22172: LD_INT 20
22174: PUSH
22175: LD_INT 21
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_INT 25
22183: PUSH
22184: LD_INT 32
22186: PUSH
22187: LD_INT 27
22189: PUSH
22190: LD_INT 36
22192: PUSH
22193: LD_INT 69
22195: PUSH
22196: LD_INT 39
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 40
22204: PUSH
22205: LD_INT 48
22207: PUSH
22208: LD_INT 49
22210: PUSH
22211: LD_INT 50
22213: PUSH
22214: LD_INT 51
22216: PUSH
22217: LD_INT 52
22219: PUSH
22220: LD_INT 53
22222: PUSH
22223: LD_INT 54
22225: PUSH
22226: LD_INT 55
22228: PUSH
22229: LD_INT 56
22231: PUSH
22232: LD_INT 57
22234: PUSH
22235: LD_INT 58
22237: PUSH
22238: LD_INT 59
22240: PUSH
22241: LD_INT 60
22243: PUSH
22244: LD_INT 61
22246: PUSH
22247: LD_INT 62
22249: PUSH
22250: LD_INT 80
22252: PUSH
22253: LD_INT 82
22255: PUSH
22256: LD_INT 83
22258: PUSH
22259: LD_INT 84
22261: PUSH
22262: LD_INT 85
22264: PUSH
22265: LD_INT 86
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 22784
22323: LD_INT 2
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22553
22331: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22332: LD_ADDR_VAR 0 4
22336: PUSH
22337: LD_INT 35
22339: PUSH
22340: LD_INT 45
22342: PUSH
22343: LD_INT 46
22345: PUSH
22346: LD_INT 47
22348: PUSH
22349: LD_INT 82
22351: PUSH
22352: LD_INT 83
22354: PUSH
22355: LD_INT 84
22357: PUSH
22358: LD_INT 85
22360: PUSH
22361: LD_INT 87
22363: PUSH
22364: LD_INT 70
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: LD_INT 11
22372: PUSH
22373: LD_INT 3
22375: PUSH
22376: LD_INT 4
22378: PUSH
22379: LD_INT 5
22381: PUSH
22382: LD_INT 6
22384: PUSH
22385: LD_INT 15
22387: PUSH
22388: LD_INT 18
22390: PUSH
22391: LD_INT 7
22393: PUSH
22394: LD_INT 17
22396: PUSH
22397: LD_INT 8
22399: PUSH
22400: LD_INT 20
22402: PUSH
22403: LD_INT 21
22405: PUSH
22406: LD_INT 22
22408: PUSH
22409: LD_INT 72
22411: PUSH
22412: LD_INT 26
22414: PUSH
22415: LD_INT 69
22417: PUSH
22418: LD_INT 39
22420: PUSH
22421: LD_INT 40
22423: PUSH
22424: LD_INT 41
22426: PUSH
22427: LD_INT 42
22429: PUSH
22430: LD_INT 43
22432: PUSH
22433: LD_INT 48
22435: PUSH
22436: LD_INT 49
22438: PUSH
22439: LD_INT 50
22441: PUSH
22442: LD_INT 51
22444: PUSH
22445: LD_INT 52
22447: PUSH
22448: LD_INT 53
22450: PUSH
22451: LD_INT 54
22453: PUSH
22454: LD_INT 55
22456: PUSH
22457: LD_INT 56
22459: PUSH
22460: LD_INT 60
22462: PUSH
22463: LD_INT 61
22465: PUSH
22466: LD_INT 62
22468: PUSH
22469: LD_INT 66
22471: PUSH
22472: LD_INT 67
22474: PUSH
22475: LD_INT 68
22477: PUSH
22478: LD_INT 81
22480: PUSH
22481: LD_INT 82
22483: PUSH
22484: LD_INT 83
22486: PUSH
22487: LD_INT 84
22489: PUSH
22490: LD_INT 85
22492: PUSH
22493: LD_INT 87
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: ST_TO_ADDR
22551: GO 22784
22553: LD_INT 3
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22783
22561: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22562: LD_ADDR_VAR 0 4
22566: PUSH
22567: LD_INT 46
22569: PUSH
22570: LD_INT 47
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: LD_INT 82
22581: PUSH
22582: LD_INT 83
22584: PUSH
22585: LD_INT 84
22587: PUSH
22588: LD_INT 85
22590: PUSH
22591: LD_INT 86
22593: PUSH
22594: LD_INT 11
22596: PUSH
22597: LD_INT 9
22599: PUSH
22600: LD_INT 20
22602: PUSH
22603: LD_INT 19
22605: PUSH
22606: LD_INT 21
22608: PUSH
22609: LD_INT 24
22611: PUSH
22612: LD_INT 22
22614: PUSH
22615: LD_INT 25
22617: PUSH
22618: LD_INT 28
22620: PUSH
22621: LD_INT 29
22623: PUSH
22624: LD_INT 30
22626: PUSH
22627: LD_INT 31
22629: PUSH
22630: LD_INT 37
22632: PUSH
22633: LD_INT 38
22635: PUSH
22636: LD_INT 32
22638: PUSH
22639: LD_INT 27
22641: PUSH
22642: LD_INT 33
22644: PUSH
22645: LD_INT 69
22647: PUSH
22648: LD_INT 39
22650: PUSH
22651: LD_INT 34
22653: PUSH
22654: LD_INT 40
22656: PUSH
22657: LD_INT 71
22659: PUSH
22660: LD_INT 23
22662: PUSH
22663: LD_INT 44
22665: PUSH
22666: LD_INT 48
22668: PUSH
22669: LD_INT 49
22671: PUSH
22672: LD_INT 50
22674: PUSH
22675: LD_INT 51
22677: PUSH
22678: LD_INT 52
22680: PUSH
22681: LD_INT 53
22683: PUSH
22684: LD_INT 54
22686: PUSH
22687: LD_INT 55
22689: PUSH
22690: LD_INT 56
22692: PUSH
22693: LD_INT 57
22695: PUSH
22696: LD_INT 58
22698: PUSH
22699: LD_INT 59
22701: PUSH
22702: LD_INT 63
22704: PUSH
22705: LD_INT 64
22707: PUSH
22708: LD_INT 65
22710: PUSH
22711: LD_INT 82
22713: PUSH
22714: LD_INT 83
22716: PUSH
22717: LD_INT 84
22719: PUSH
22720: LD_INT 85
22722: PUSH
22723: LD_INT 86
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 22784
22783: POP
// if state > - 1 and state < 3 then
22784: LD_VAR 0 3
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: GREATER
22793: PUSH
22794: LD_VAR 0 3
22798: PUSH
22799: LD_INT 3
22801: LESS
22802: AND
22803: IFFALSE 22860
// for i in result do
22805: LD_ADDR_VAR 0 5
22809: PUSH
22810: LD_VAR 0 4
22814: PUSH
22815: FOR_IN
22816: IFFALSE 22858
// if GetTech ( i , side ) <> state then
22818: LD_VAR 0 5
22822: PPUSH
22823: LD_VAR 0 1
22827: PPUSH
22828: CALL_OW 321
22832: PUSH
22833: LD_VAR 0 3
22837: NONEQUAL
22838: IFFALSE 22856
// result := result diff i ;
22840: LD_ADDR_VAR 0 4
22844: PUSH
22845: LD_VAR 0 4
22849: PUSH
22850: LD_VAR 0 5
22854: DIFF
22855: ST_TO_ADDR
22856: GO 22815
22858: POP
22859: POP
// end ;
22860: LD_VAR 0 4
22864: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
22869: PPUSH
// result := true ;
22870: LD_ADDR_VAR 0 3
22874: PUSH
22875: LD_INT 1
22877: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22878: LD_ADDR_VAR 0 5
22882: PUSH
22883: LD_VAR 0 2
22887: PPUSH
22888: CALL_OW 480
22892: ST_TO_ADDR
// if not tmp then
22893: LD_VAR 0 5
22897: NOT
22898: IFFALSE 22902
// exit ;
22900: GO 22951
// for i in tmp do
22902: LD_ADDR_VAR 0 4
22906: PUSH
22907: LD_VAR 0 5
22911: PUSH
22912: FOR_IN
22913: IFFALSE 22949
// if GetTech ( i , side ) <> state_researched then
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 321
22929: PUSH
22930: LD_INT 2
22932: NONEQUAL
22933: IFFALSE 22947
// begin result := false ;
22935: LD_ADDR_VAR 0 3
22939: PUSH
22940: LD_INT 0
22942: ST_TO_ADDR
// exit ;
22943: POP
22944: POP
22945: GO 22951
// end ;
22947: GO 22912
22949: POP
22950: POP
// end ;
22951: LD_VAR 0 3
22955: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22956: LD_INT 0
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22971: LD_VAR 0 1
22975: NOT
22976: PUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 257
22986: PUSH
22987: LD_INT 9
22989: NONEQUAL
22990: OR
22991: IFFALSE 22995
// exit ;
22993: GO 23568
// side := GetSide ( unit ) ;
22995: LD_ADDR_VAR 0 9
22999: PUSH
23000: LD_VAR 0 1
23004: PPUSH
23005: CALL_OW 255
23009: ST_TO_ADDR
// tech_space := tech_spacanom ;
23010: LD_ADDR_VAR 0 12
23014: PUSH
23015: LD_INT 29
23017: ST_TO_ADDR
// tech_time := tech_taurad ;
23018: LD_ADDR_VAR 0 13
23022: PUSH
23023: LD_INT 28
23025: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23026: LD_ADDR_VAR 0 11
23030: PUSH
23031: LD_VAR 0 1
23035: PPUSH
23036: CALL_OW 310
23040: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23041: LD_VAR 0 11
23045: PPUSH
23046: CALL_OW 247
23050: PUSH
23051: LD_INT 2
23053: EQUAL
23054: IFFALSE 23058
// exit ;
23056: GO 23568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23058: LD_ADDR_VAR 0 8
23062: PUSH
23063: LD_INT 81
23065: PUSH
23066: LD_VAR 0 9
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: LD_INT 21
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PPUSH
23096: CALL_OW 69
23100: ST_TO_ADDR
// if not tmp then
23101: LD_VAR 0 8
23105: NOT
23106: IFFALSE 23110
// exit ;
23108: GO 23568
// if in_unit then
23110: LD_VAR 0 11
23114: IFFALSE 23138
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23116: LD_ADDR_VAR 0 10
23120: PUSH
23121: LD_VAR 0 8
23125: PPUSH
23126: LD_VAR 0 11
23130: PPUSH
23131: CALL_OW 74
23135: ST_TO_ADDR
23136: GO 23158
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23138: LD_ADDR_VAR 0 10
23142: PUSH
23143: LD_VAR 0 8
23147: PPUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 74
23157: ST_TO_ADDR
// if not enemy then
23158: LD_VAR 0 10
23162: NOT
23163: IFFALSE 23167
// exit ;
23165: GO 23568
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23167: LD_VAR 0 11
23171: PUSH
23172: LD_VAR 0 11
23176: PPUSH
23177: LD_VAR 0 10
23181: PPUSH
23182: CALL_OW 296
23186: PUSH
23187: LD_INT 13
23189: GREATER
23190: AND
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: LD_VAR 0 10
23201: PPUSH
23202: CALL_OW 296
23206: PUSH
23207: LD_INT 12
23209: GREATER
23210: OR
23211: IFFALSE 23215
// exit ;
23213: GO 23568
// missile := [ 1 ] ;
23215: LD_ADDR_VAR 0 14
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23226: LD_VAR 0 9
23230: PPUSH
23231: LD_VAR 0 12
23235: PPUSH
23236: CALL_OW 325
23240: IFFALSE 23269
// missile := Insert ( missile , missile + 1 , 2 ) ;
23242: LD_ADDR_VAR 0 14
23246: PUSH
23247: LD_VAR 0 14
23251: PPUSH
23252: LD_VAR 0 14
23256: PUSH
23257: LD_INT 1
23259: PLUS
23260: PPUSH
23261: LD_INT 2
23263: PPUSH
23264: CALL_OW 2
23268: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23269: LD_VAR 0 9
23273: PPUSH
23274: LD_VAR 0 13
23278: PPUSH
23279: CALL_OW 325
23283: PUSH
23284: LD_VAR 0 10
23288: PPUSH
23289: CALL_OW 255
23293: PPUSH
23294: LD_VAR 0 13
23298: PPUSH
23299: CALL_OW 325
23303: NOT
23304: AND
23305: IFFALSE 23334
// missile := Insert ( missile , missile + 1 , 3 ) ;
23307: LD_ADDR_VAR 0 14
23311: PUSH
23312: LD_VAR 0 14
23316: PPUSH
23317: LD_VAR 0 14
23321: PUSH
23322: LD_INT 1
23324: PLUS
23325: PPUSH
23326: LD_INT 3
23328: PPUSH
23329: CALL_OW 2
23333: ST_TO_ADDR
// if missile < 2 then
23334: LD_VAR 0 14
23338: PUSH
23339: LD_INT 2
23341: LESS
23342: IFFALSE 23346
// exit ;
23344: GO 23568
// x := GetX ( enemy ) ;
23346: LD_ADDR_VAR 0 4
23350: PUSH
23351: LD_VAR 0 10
23355: PPUSH
23356: CALL_OW 250
23360: ST_TO_ADDR
// y := GetY ( enemy ) ;
23361: LD_ADDR_VAR 0 5
23365: PUSH
23366: LD_VAR 0 10
23370: PPUSH
23371: CALL_OW 251
23375: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23376: LD_ADDR_VAR 0 6
23380: PUSH
23381: LD_VAR 0 4
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PPUSH
23390: LD_INT 1
23392: PPUSH
23393: CALL_OW 12
23397: PLUS
23398: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23399: LD_ADDR_VAR 0 7
23403: PUSH
23404: LD_VAR 0 5
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PPUSH
23413: LD_INT 1
23415: PPUSH
23416: CALL_OW 12
23420: PLUS
23421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23422: LD_VAR 0 6
23426: PPUSH
23427: LD_VAR 0 7
23431: PPUSH
23432: CALL_OW 488
23436: NOT
23437: IFFALSE 23459
// begin _x := x ;
23439: LD_ADDR_VAR 0 6
23443: PUSH
23444: LD_VAR 0 4
23448: ST_TO_ADDR
// _y := y ;
23449: LD_ADDR_VAR 0 7
23453: PUSH
23454: LD_VAR 0 5
23458: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23459: LD_ADDR_VAR 0 3
23463: PUSH
23464: LD_INT 1
23466: PPUSH
23467: LD_VAR 0 14
23471: PPUSH
23472: CALL_OW 12
23476: ST_TO_ADDR
// case i of 1 :
23477: LD_VAR 0 3
23481: PUSH
23482: LD_INT 1
23484: DOUBLE
23485: EQUAL
23486: IFTRUE 23490
23488: GO 23507
23490: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23491: LD_VAR 0 1
23495: PPUSH
23496: LD_VAR 0 10
23500: PPUSH
23501: CALL_OW 115
23505: GO 23568
23507: LD_INT 2
23509: DOUBLE
23510: EQUAL
23511: IFTRUE 23515
23513: GO 23537
23515: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23516: LD_VAR 0 1
23520: PPUSH
23521: LD_VAR 0 6
23525: PPUSH
23526: LD_VAR 0 7
23530: PPUSH
23531: CALL_OW 153
23535: GO 23568
23537: LD_INT 3
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23567
23545: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23546: LD_VAR 0 1
23550: PPUSH
23551: LD_VAR 0 6
23555: PPUSH
23556: LD_VAR 0 7
23560: PPUSH
23561: CALL_OW 154
23565: GO 23568
23567: POP
// end ;
23568: LD_VAR 0 2
23572: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23573: LD_INT 0
23575: PPUSH
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
// if not unit or not building then
23581: LD_VAR 0 1
23585: NOT
23586: PUSH
23587: LD_VAR 0 2
23591: NOT
23592: OR
23593: IFFALSE 23597
// exit ;
23595: GO 23755
// x := GetX ( building ) ;
23597: LD_ADDR_VAR 0 5
23601: PUSH
23602: LD_VAR 0 2
23606: PPUSH
23607: CALL_OW 250
23611: ST_TO_ADDR
// y := GetY ( building ) ;
23612: LD_ADDR_VAR 0 6
23616: PUSH
23617: LD_VAR 0 2
23621: PPUSH
23622: CALL_OW 251
23626: ST_TO_ADDR
// for i = 0 to 5 do
23627: LD_ADDR_VAR 0 4
23631: PUSH
23632: DOUBLE
23633: LD_INT 0
23635: DEC
23636: ST_TO_ADDR
23637: LD_INT 5
23639: PUSH
23640: FOR_TO
23641: IFFALSE 23753
// begin _x := ShiftX ( x , i , 3 ) ;
23643: LD_ADDR_VAR 0 7
23647: PUSH
23648: LD_VAR 0 5
23652: PPUSH
23653: LD_VAR 0 4
23657: PPUSH
23658: LD_INT 3
23660: PPUSH
23661: CALL_OW 272
23665: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23666: LD_ADDR_VAR 0 8
23670: PUSH
23671: LD_VAR 0 6
23675: PPUSH
23676: LD_VAR 0 4
23680: PPUSH
23681: LD_INT 3
23683: PPUSH
23684: CALL_OW 273
23688: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23689: LD_VAR 0 7
23693: PPUSH
23694: LD_VAR 0 8
23698: PPUSH
23699: CALL_OW 488
23703: NOT
23704: IFFALSE 23708
// continue ;
23706: GO 23640
// if HexInfo ( _x , _y ) = 0 then
23708: LD_VAR 0 7
23712: PPUSH
23713: LD_VAR 0 8
23717: PPUSH
23718: CALL_OW 428
23722: PUSH
23723: LD_INT 0
23725: EQUAL
23726: IFFALSE 23751
// begin ComMoveXY ( unit , _x , _y ) ;
23728: LD_VAR 0 1
23732: PPUSH
23733: LD_VAR 0 7
23737: PPUSH
23738: LD_VAR 0 8
23742: PPUSH
23743: CALL_OW 111
// exit ;
23747: POP
23748: POP
23749: GO 23755
// end ; end ;
23751: GO 23640
23753: POP
23754: POP
// end ;
23755: LD_VAR 0 3
23759: RET
// export function ScanBase ( side , base_area ) ; begin
23760: LD_INT 0
23762: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23763: LD_ADDR_VAR 0 3
23767: PUSH
23768: LD_VAR 0 2
23772: PPUSH
23773: LD_INT 81
23775: PUSH
23776: LD_VAR 0 1
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 70
23789: ST_TO_ADDR
// end ;
23790: LD_VAR 0 3
23794: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23795: LD_INT 0
23797: PPUSH
23798: PPUSH
23799: PPUSH
23800: PPUSH
// result := false ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 0
23808: ST_TO_ADDR
// side := GetSide ( unit ) ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 255
23823: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23824: LD_ADDR_VAR 0 4
23828: PUSH
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 248
23838: ST_TO_ADDR
// case nat of 1 :
23839: LD_VAR 0 4
23843: PUSH
23844: LD_INT 1
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23863
23852: POP
// tech := tech_lassight ; 2 :
23853: LD_ADDR_VAR 0 5
23857: PUSH
23858: LD_INT 12
23860: ST_TO_ADDR
23861: GO 23902
23863: LD_INT 2
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23882
23871: POP
// tech := tech_mortar ; 3 :
23872: LD_ADDR_VAR 0 5
23876: PUSH
23877: LD_INT 41
23879: ST_TO_ADDR
23880: GO 23902
23882: LD_INT 3
23884: DOUBLE
23885: EQUAL
23886: IFTRUE 23890
23888: GO 23901
23890: POP
// tech := tech_bazooka ; end ;
23891: LD_ADDR_VAR 0 5
23895: PUSH
23896: LD_INT 44
23898: ST_TO_ADDR
23899: GO 23902
23901: POP
// if Researched ( side , tech ) then
23902: LD_VAR 0 3
23906: PPUSH
23907: LD_VAR 0 5
23911: PPUSH
23912: CALL_OW 325
23916: IFFALSE 23943
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23918: LD_ADDR_VAR 0 2
23922: PUSH
23923: LD_INT 5
23925: PUSH
23926: LD_INT 8
23928: PUSH
23929: LD_INT 9
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: PUSH
23937: LD_VAR 0 4
23941: ARRAY
23942: ST_TO_ADDR
// end ;
23943: LD_VAR 0 2
23947: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23948: LD_INT 0
23950: PPUSH
23951: PPUSH
23952: PPUSH
// if not mines then
23953: LD_VAR 0 2
23957: NOT
23958: IFFALSE 23962
// exit ;
23960: GO 24106
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23962: LD_ADDR_VAR 0 5
23966: PUSH
23967: LD_INT 81
23969: PUSH
23970: LD_VAR 0 1
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 3
23981: PUSH
23982: LD_INT 21
23984: PUSH
23985: LD_INT 3
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PPUSH
24000: CALL_OW 69
24004: ST_TO_ADDR
// for i in mines do
24005: LD_ADDR_VAR 0 4
24009: PUSH
24010: LD_VAR 0 2
24014: PUSH
24015: FOR_IN
24016: IFFALSE 24104
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24018: LD_VAR 0 4
24022: PUSH
24023: LD_INT 1
24025: ARRAY
24026: PPUSH
24027: LD_VAR 0 4
24031: PUSH
24032: LD_INT 2
24034: ARRAY
24035: PPUSH
24036: CALL_OW 458
24040: NOT
24041: IFFALSE 24045
// continue ;
24043: GO 24015
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24045: LD_VAR 0 4
24049: PUSH
24050: LD_INT 1
24052: ARRAY
24053: PPUSH
24054: LD_VAR 0 4
24058: PUSH
24059: LD_INT 2
24061: ARRAY
24062: PPUSH
24063: CALL_OW 428
24067: PUSH
24068: LD_VAR 0 5
24072: IN
24073: IFFALSE 24102
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24075: LD_VAR 0 4
24079: PUSH
24080: LD_INT 1
24082: ARRAY
24083: PPUSH
24084: LD_VAR 0 4
24088: PUSH
24089: LD_INT 2
24091: ARRAY
24092: PPUSH
24093: LD_VAR 0 1
24097: PPUSH
24098: CALL_OW 456
// end ;
24102: GO 24015
24104: POP
24105: POP
// end ;
24106: LD_VAR 0 3
24110: RET
// export function Count ( array ) ; var i ; begin
24111: LD_INT 0
24113: PPUSH
24114: PPUSH
// result := 0 ;
24115: LD_ADDR_VAR 0 2
24119: PUSH
24120: LD_INT 0
24122: ST_TO_ADDR
// for i in array do
24123: LD_ADDR_VAR 0 3
24127: PUSH
24128: LD_VAR 0 1
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24158
// if i then
24136: LD_VAR 0 3
24140: IFFALSE 24156
// result := result + 1 ;
24142: LD_ADDR_VAR 0 2
24146: PUSH
24147: LD_VAR 0 2
24151: PUSH
24152: LD_INT 1
24154: PLUS
24155: ST_TO_ADDR
24156: GO 24133
24158: POP
24159: POP
// end ;
24160: LD_VAR 0 2
24164: RET
// export function IsEmpty ( building ) ; begin
24165: LD_INT 0
24167: PPUSH
// if not building then
24168: LD_VAR 0 1
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24220
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24177: LD_ADDR_VAR 0 2
24181: PUSH
24182: LD_VAR 0 1
24186: PUSH
24187: LD_INT 22
24189: PUSH
24190: LD_VAR 0 1
24194: PPUSH
24195: CALL_OW 255
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 58
24206: PUSH
24207: EMPTY
24208: LIST
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PPUSH
24214: CALL_OW 69
24218: IN
24219: ST_TO_ADDR
// end ;
24220: LD_VAR 0 2
24224: RET
// export function IsNotFull ( building ) ; begin
24225: LD_INT 0
24227: PPUSH
// if not building then
24228: LD_VAR 0 1
24232: NOT
24233: IFFALSE 24237
// exit ;
24235: GO 24256
// result := UnitsInside ( building ) < 6 ;
24237: LD_ADDR_VAR 0 2
24241: PUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 313
24251: PUSH
24252: LD_INT 6
24254: LESS
24255: ST_TO_ADDR
// end ;
24256: LD_VAR 0 2
24260: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24261: LD_INT 0
24263: PPUSH
24264: PPUSH
24265: PPUSH
24266: PPUSH
// tmp := [ ] ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: EMPTY
24273: ST_TO_ADDR
// list := [ ] ;
24274: LD_ADDR_VAR 0 5
24278: PUSH
24279: EMPTY
24280: ST_TO_ADDR
// for i = 16 to 25 do
24281: LD_ADDR_VAR 0 4
24285: PUSH
24286: DOUBLE
24287: LD_INT 16
24289: DEC
24290: ST_TO_ADDR
24291: LD_INT 25
24293: PUSH
24294: FOR_TO
24295: IFFALSE 24368
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24297: LD_ADDR_VAR 0 3
24301: PUSH
24302: LD_VAR 0 3
24306: PUSH
24307: LD_INT 22
24309: PUSH
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 255
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 91
24326: PUSH
24327: LD_VAR 0 1
24331: PUSH
24332: LD_INT 6
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 30
24342: PUSH
24343: LD_VAR 0 4
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: LIST
24356: PUSH
24357: EMPTY
24358: LIST
24359: PPUSH
24360: CALL_OW 69
24364: ADD
24365: ST_TO_ADDR
24366: GO 24294
24368: POP
24369: POP
// for i = 1 to tmp do
24370: LD_ADDR_VAR 0 4
24374: PUSH
24375: DOUBLE
24376: LD_INT 1
24378: DEC
24379: ST_TO_ADDR
24380: LD_VAR 0 3
24384: PUSH
24385: FOR_TO
24386: IFFALSE 24474
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24388: LD_ADDR_VAR 0 5
24392: PUSH
24393: LD_VAR 0 5
24397: PUSH
24398: LD_VAR 0 3
24402: PUSH
24403: LD_VAR 0 4
24407: ARRAY
24408: PPUSH
24409: CALL_OW 266
24413: PUSH
24414: LD_VAR 0 3
24418: PUSH
24419: LD_VAR 0 4
24423: ARRAY
24424: PPUSH
24425: CALL_OW 250
24429: PUSH
24430: LD_VAR 0 3
24434: PUSH
24435: LD_VAR 0 4
24439: ARRAY
24440: PPUSH
24441: CALL_OW 251
24445: PUSH
24446: LD_VAR 0 3
24450: PUSH
24451: LD_VAR 0 4
24455: ARRAY
24456: PPUSH
24457: CALL_OW 254
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: ADD
24471: ST_TO_ADDR
24472: GO 24385
24474: POP
24475: POP
// result := list ;
24476: LD_ADDR_VAR 0 2
24480: PUSH
24481: LD_VAR 0 5
24485: ST_TO_ADDR
// end ;
24486: LD_VAR 0 2
24490: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
24496: PPUSH
24497: PPUSH
24498: PPUSH
24499: PPUSH
// if not factory then
24500: LD_VAR 0 1
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 25102
// if control = control_apeman then
24509: LD_VAR 0 4
24513: PUSH
24514: LD_INT 5
24516: EQUAL
24517: IFFALSE 24626
// begin tmp := UnitsInside ( factory ) ;
24519: LD_ADDR_VAR 0 8
24523: PUSH
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL_OW 313
24533: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24534: LD_VAR 0 8
24538: PPUSH
24539: LD_INT 25
24541: PUSH
24542: LD_INT 12
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PPUSH
24549: CALL_OW 72
24553: NOT
24554: IFFALSE 24564
// control := control_manual ;
24556: LD_ADDR_VAR 0 4
24560: PUSH
24561: LD_INT 1
24563: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24564: LD_ADDR_VAR 0 8
24568: PUSH
24569: LD_VAR 0 1
24573: PPUSH
24574: CALL 24261 0 1
24578: ST_TO_ADDR
// if tmp then
24579: LD_VAR 0 8
24583: IFFALSE 24626
// begin for i in tmp do
24585: LD_ADDR_VAR 0 7
24589: PUSH
24590: LD_VAR 0 8
24594: PUSH
24595: FOR_IN
24596: IFFALSE 24624
// if i [ 1 ] = b_ext_radio then
24598: LD_VAR 0 7
24602: PUSH
24603: LD_INT 1
24605: ARRAY
24606: PUSH
24607: LD_INT 22
24609: EQUAL
24610: IFFALSE 24622
// begin control := control_remote ;
24612: LD_ADDR_VAR 0 4
24616: PUSH
24617: LD_INT 2
24619: ST_TO_ADDR
// break ;
24620: GO 24624
// end ;
24622: GO 24595
24624: POP
24625: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24626: LD_VAR 0 1
24630: PPUSH
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_VAR 0 3
24640: PPUSH
24641: LD_VAR 0 4
24645: PPUSH
24646: LD_VAR 0 5
24650: PPUSH
24651: CALL_OW 448
24655: IFFALSE 24690
// begin result := [ chassis , engine , control , weapon ] ;
24657: LD_ADDR_VAR 0 6
24661: PUSH
24662: LD_VAR 0 2
24666: PUSH
24667: LD_VAR 0 3
24671: PUSH
24672: LD_VAR 0 4
24676: PUSH
24677: LD_VAR 0 5
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: ST_TO_ADDR
// exit ;
24688: GO 25102
// end ; _chassis := AvailableChassisList ( factory ) ;
24690: LD_ADDR_VAR 0 9
24694: PUSH
24695: LD_VAR 0 1
24699: PPUSH
24700: CALL_OW 475
24704: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24705: LD_ADDR_VAR 0 11
24709: PUSH
24710: LD_VAR 0 1
24714: PPUSH
24715: CALL_OW 476
24719: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24720: LD_ADDR_VAR 0 12
24724: PUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 477
24734: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24735: LD_ADDR_VAR 0 10
24739: PUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 478
24749: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24750: LD_VAR 0 9
24754: NOT
24755: PUSH
24756: LD_VAR 0 11
24760: NOT
24761: OR
24762: PUSH
24763: LD_VAR 0 12
24767: NOT
24768: OR
24769: PUSH
24770: LD_VAR 0 10
24774: NOT
24775: OR
24776: IFFALSE 24811
// begin result := [ chassis , engine , control , weapon ] ;
24778: LD_ADDR_VAR 0 6
24782: PUSH
24783: LD_VAR 0 2
24787: PUSH
24788: LD_VAR 0 3
24792: PUSH
24793: LD_VAR 0 4
24797: PUSH
24798: LD_VAR 0 5
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// exit ;
24809: GO 25102
// end ; if not chassis in _chassis then
24811: LD_VAR 0 2
24815: PUSH
24816: LD_VAR 0 9
24820: IN
24821: NOT
24822: IFFALSE 24848
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24824: LD_ADDR_VAR 0 2
24828: PUSH
24829: LD_VAR 0 9
24833: PUSH
24834: LD_INT 1
24836: PPUSH
24837: LD_VAR 0 9
24841: PPUSH
24842: CALL_OW 12
24846: ARRAY
24847: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_VAR 0 3
24857: PPUSH
24858: CALL 25107 0 2
24862: NOT
24863: IFFALSE 24922
// repeat engine := _engine [ 1 ] ;
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_VAR 0 11
24874: PUSH
24875: LD_INT 1
24877: ARRAY
24878: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24879: LD_ADDR_VAR 0 11
24883: PUSH
24884: LD_VAR 0 11
24888: PPUSH
24889: LD_INT 1
24891: PPUSH
24892: CALL_OW 3
24896: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24897: LD_VAR 0 2
24901: PPUSH
24902: LD_VAR 0 3
24906: PPUSH
24907: CALL 25107 0 2
24911: PUSH
24912: LD_VAR 0 11
24916: PUSH
24917: EMPTY
24918: EQUAL
24919: OR
24920: IFFALSE 24865
// if not control in _control then
24922: LD_VAR 0 4
24926: PUSH
24927: LD_VAR 0 12
24931: IN
24932: NOT
24933: IFFALSE 24959
// control := _control [ rand ( 1 , _control ) ] ;
24935: LD_ADDR_VAR 0 4
24939: PUSH
24940: LD_VAR 0 12
24944: PUSH
24945: LD_INT 1
24947: PPUSH
24948: LD_VAR 0 12
24952: PPUSH
24953: CALL_OW 12
24957: ARRAY
24958: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24959: LD_VAR 0 2
24963: PPUSH
24964: LD_VAR 0 5
24968: PPUSH
24969: CALL 25327 0 2
24973: NOT
24974: IFFALSE 25033
// repeat weapon := _weapon [ 1 ] ;
24976: LD_ADDR_VAR 0 5
24980: PUSH
24981: LD_VAR 0 10
24985: PUSH
24986: LD_INT 1
24988: ARRAY
24989: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24990: LD_ADDR_VAR 0 10
24994: PUSH
24995: LD_VAR 0 10
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: CALL_OW 3
25007: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25008: LD_VAR 0 2
25012: PPUSH
25013: LD_VAR 0 5
25017: PPUSH
25018: CALL 25327 0 2
25022: PUSH
25023: LD_VAR 0 10
25027: PUSH
25028: EMPTY
25029: EQUAL
25030: OR
25031: IFFALSE 24976
// result := [ ] ;
25033: LD_ADDR_VAR 0 6
25037: PUSH
25038: EMPTY
25039: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25040: LD_VAR 0 1
25044: PPUSH
25045: LD_VAR 0 2
25049: PPUSH
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_VAR 0 4
25059: PPUSH
25060: LD_VAR 0 5
25064: PPUSH
25065: CALL_OW 448
25069: IFFALSE 25102
// result := [ chassis , engine , control , weapon ] ;
25071: LD_ADDR_VAR 0 6
25075: PUSH
25076: LD_VAR 0 2
25080: PUSH
25081: LD_VAR 0 3
25085: PUSH
25086: LD_VAR 0 4
25090: PUSH
25091: LD_VAR 0 5
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// end ;
25102: LD_VAR 0 6
25106: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25107: LD_INT 0
25109: PPUSH
// if not chassis or not engine then
25110: LD_VAR 0 1
25114: NOT
25115: PUSH
25116: LD_VAR 0 2
25120: NOT
25121: OR
25122: IFFALSE 25126
// exit ;
25124: GO 25322
// case engine of engine_solar :
25126: LD_VAR 0 2
25130: PUSH
25131: LD_INT 2
25133: DOUBLE
25134: EQUAL
25135: IFTRUE 25139
25137: GO 25177
25139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25140: LD_ADDR_VAR 0 3
25144: PUSH
25145: LD_INT 11
25147: PUSH
25148: LD_INT 12
25150: PUSH
25151: LD_INT 13
25153: PUSH
25154: LD_INT 14
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: ST_TO_ADDR
25175: GO 25306
25177: LD_INT 1
25179: DOUBLE
25180: EQUAL
25181: IFTRUE 25185
25183: GO 25247
25185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25186: LD_ADDR_VAR 0 3
25190: PUSH
25191: LD_INT 11
25193: PUSH
25194: LD_INT 12
25196: PUSH
25197: LD_INT 13
25199: PUSH
25200: LD_INT 14
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: LD_INT 4
25214: PUSH
25215: LD_INT 5
25217: PUSH
25218: LD_INT 21
25220: PUSH
25221: LD_INT 23
25223: PUSH
25224: LD_INT 22
25226: PUSH
25227: LD_INT 24
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: ST_TO_ADDR
25245: GO 25306
25247: LD_INT 3
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25305
25255: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25256: LD_ADDR_VAR 0 3
25260: PUSH
25261: LD_INT 13
25263: PUSH
25264: LD_INT 14
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: LD_INT 4
25275: PUSH
25276: LD_INT 5
25278: PUSH
25279: LD_INT 21
25281: PUSH
25282: LD_INT 22
25284: PUSH
25285: LD_INT 23
25287: PUSH
25288: LD_INT 24
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25306
25305: POP
// result := ( chassis in result ) ;
25306: LD_ADDR_VAR 0 3
25310: PUSH
25311: LD_VAR 0 1
25315: PUSH
25316: LD_VAR 0 3
25320: IN
25321: ST_TO_ADDR
// end ;
25322: LD_VAR 0 3
25326: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25327: LD_INT 0
25329: PPUSH
// if not chassis or not weapon then
25330: LD_VAR 0 1
25334: NOT
25335: PUSH
25336: LD_VAR 0 2
25340: NOT
25341: OR
25342: IFFALSE 25346
// exit ;
25344: GO 26372
// case weapon of us_machine_gun :
25346: LD_VAR 0 2
25350: PUSH
25351: LD_INT 2
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25389
25359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25360: LD_ADDR_VAR 0 3
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 4
25376: PUSH
25377: LD_INT 5
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
25387: GO 26356
25389: LD_INT 3
25391: DOUBLE
25392: EQUAL
25393: IFTRUE 25397
25395: GO 25427
25397: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25398: LD_ADDR_VAR 0 3
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: LD_INT 4
25414: PUSH
25415: LD_INT 5
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: ST_TO_ADDR
25425: GO 26356
25427: LD_INT 11
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25465
25435: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25436: LD_ADDR_VAR 0 3
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: LD_INT 3
25449: PUSH
25450: LD_INT 4
25452: PUSH
25453: LD_INT 5
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: ST_TO_ADDR
25463: GO 26356
25465: LD_INT 4
25467: DOUBLE
25468: EQUAL
25469: IFTRUE 25473
25471: GO 25499
25473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25474: LD_ADDR_VAR 0 3
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: LD_INT 3
25484: PUSH
25485: LD_INT 4
25487: PUSH
25488: LD_INT 5
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: ST_TO_ADDR
25497: GO 26356
25499: LD_INT 5
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25533
25507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25508: LD_ADDR_VAR 0 3
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 3
25518: PUSH
25519: LD_INT 4
25521: PUSH
25522: LD_INT 5
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: ST_TO_ADDR
25531: GO 26356
25533: LD_INT 9
25535: DOUBLE
25536: EQUAL
25537: IFTRUE 25541
25539: GO 25567
25541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 3
25552: PUSH
25553: LD_INT 4
25555: PUSH
25556: LD_INT 5
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: ST_TO_ADDR
25565: GO 26356
25567: LD_INT 7
25569: DOUBLE
25570: EQUAL
25571: IFTRUE 25575
25573: GO 25601
25575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: LD_INT 4
25589: PUSH
25590: LD_INT 5
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
25599: GO 26356
25601: LD_INT 12
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25635
25609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_INT 2
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 4
25623: PUSH
25624: LD_INT 5
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: ST_TO_ADDR
25633: GO 26356
25635: LD_INT 13
25637: DOUBLE
25638: EQUAL
25639: IFTRUE 25643
25641: GO 25669
25643: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: LD_INT 4
25657: PUSH
25658: LD_INT 5
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: ST_TO_ADDR
25667: GO 26356
25669: LD_INT 14
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25695
25677: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 4
25685: PUSH
25686: LD_INT 5
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: ST_TO_ADDR
25693: GO 26356
25695: LD_INT 6
25697: DOUBLE
25698: EQUAL
25699: IFTRUE 25703
25701: GO 25721
25703: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25704: LD_ADDR_VAR 0 3
25708: PUSH
25709: LD_INT 4
25711: PUSH
25712: LD_INT 5
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: ST_TO_ADDR
25719: GO 26356
25721: LD_INT 10
25723: DOUBLE
25724: EQUAL
25725: IFTRUE 25729
25727: GO 25747
25729: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25730: LD_ADDR_VAR 0 3
25734: PUSH
25735: LD_INT 4
25737: PUSH
25738: LD_INT 5
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: ST_TO_ADDR
25745: GO 26356
25747: LD_INT 22
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25755
25753: GO 25781
25755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25756: LD_ADDR_VAR 0 3
25760: PUSH
25761: LD_INT 11
25763: PUSH
25764: LD_INT 12
25766: PUSH
25767: LD_INT 13
25769: PUSH
25770: LD_INT 14
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: ST_TO_ADDR
25779: GO 26356
25781: LD_INT 23
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 25815
25789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25790: LD_ADDR_VAR 0 3
25794: PUSH
25795: LD_INT 11
25797: PUSH
25798: LD_INT 12
25800: PUSH
25801: LD_INT 13
25803: PUSH
25804: LD_INT 14
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: ST_TO_ADDR
25813: GO 26356
25815: LD_INT 24
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25849
25823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 11
25831: PUSH
25832: LD_INT 12
25834: PUSH
25835: LD_INT 13
25837: PUSH
25838: LD_INT 14
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
25847: GO 26356
25849: LD_INT 30
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25883
25857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 11
25865: PUSH
25866: LD_INT 12
25868: PUSH
25869: LD_INT 13
25871: PUSH
25872: LD_INT 14
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
25881: GO 26356
25883: LD_INT 25
25885: DOUBLE
25886: EQUAL
25887: IFTRUE 25891
25889: GO 25909
25891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25892: LD_ADDR_VAR 0 3
25896: PUSH
25897: LD_INT 13
25899: PUSH
25900: LD_INT 14
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: ST_TO_ADDR
25907: GO 26356
25909: LD_INT 27
25911: DOUBLE
25912: EQUAL
25913: IFTRUE 25917
25915: GO 25935
25917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25918: LD_ADDR_VAR 0 3
25922: PUSH
25923: LD_INT 13
25925: PUSH
25926: LD_INT 14
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: ST_TO_ADDR
25933: GO 26356
25935: LD_INT 28
25937: DOUBLE
25938: EQUAL
25939: IFTRUE 25943
25941: GO 25961
25943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_INT 13
25951: PUSH
25952: LD_INT 14
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: ST_TO_ADDR
25959: GO 26356
25961: LD_INT 29
25963: DOUBLE
25964: EQUAL
25965: IFTRUE 25969
25967: GO 25987
25969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25970: LD_ADDR_VAR 0 3
25974: PUSH
25975: LD_INT 13
25977: PUSH
25978: LD_INT 14
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: ST_TO_ADDR
25985: GO 26356
25987: LD_INT 31
25989: DOUBLE
25990: EQUAL
25991: IFTRUE 25995
25993: GO 26013
25995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25996: LD_ADDR_VAR 0 3
26000: PUSH
26001: LD_INT 13
26003: PUSH
26004: LD_INT 14
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: ST_TO_ADDR
26011: GO 26356
26013: LD_INT 26
26015: DOUBLE
26016: EQUAL
26017: IFTRUE 26021
26019: GO 26039
26021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26022: LD_ADDR_VAR 0 3
26026: PUSH
26027: LD_INT 13
26029: PUSH
26030: LD_INT 14
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: ST_TO_ADDR
26037: GO 26356
26039: LD_INT 42
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26073
26047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_INT 21
26055: PUSH
26056: LD_INT 22
26058: PUSH
26059: LD_INT 23
26061: PUSH
26062: LD_INT 24
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: ST_TO_ADDR
26071: GO 26356
26073: LD_INT 43
26075: DOUBLE
26076: EQUAL
26077: IFTRUE 26081
26079: GO 26107
26081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_INT 21
26089: PUSH
26090: LD_INT 22
26092: PUSH
26093: LD_INT 23
26095: PUSH
26096: LD_INT 24
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
26105: GO 26356
26107: LD_INT 44
26109: DOUBLE
26110: EQUAL
26111: IFTRUE 26115
26113: GO 26141
26115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26116: LD_ADDR_VAR 0 3
26120: PUSH
26121: LD_INT 21
26123: PUSH
26124: LD_INT 22
26126: PUSH
26127: LD_INT 23
26129: PUSH
26130: LD_INT 24
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: ST_TO_ADDR
26139: GO 26356
26141: LD_INT 45
26143: DOUBLE
26144: EQUAL
26145: IFTRUE 26149
26147: GO 26175
26149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26150: LD_ADDR_VAR 0 3
26154: PUSH
26155: LD_INT 21
26157: PUSH
26158: LD_INT 22
26160: PUSH
26161: LD_INT 23
26163: PUSH
26164: LD_INT 24
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: ST_TO_ADDR
26173: GO 26356
26175: LD_INT 49
26177: DOUBLE
26178: EQUAL
26179: IFTRUE 26183
26181: GO 26209
26183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26184: LD_ADDR_VAR 0 3
26188: PUSH
26189: LD_INT 21
26191: PUSH
26192: LD_INT 22
26194: PUSH
26195: LD_INT 23
26197: PUSH
26198: LD_INT 24
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
26207: GO 26356
26209: LD_INT 51
26211: DOUBLE
26212: EQUAL
26213: IFTRUE 26217
26215: GO 26243
26217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26218: LD_ADDR_VAR 0 3
26222: PUSH
26223: LD_INT 21
26225: PUSH
26226: LD_INT 22
26228: PUSH
26229: LD_INT 23
26231: PUSH
26232: LD_INT 24
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: ST_TO_ADDR
26241: GO 26356
26243: LD_INT 52
26245: DOUBLE
26246: EQUAL
26247: IFTRUE 26251
26249: GO 26277
26251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26252: LD_ADDR_VAR 0 3
26256: PUSH
26257: LD_INT 21
26259: PUSH
26260: LD_INT 22
26262: PUSH
26263: LD_INT 23
26265: PUSH
26266: LD_INT 24
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: ST_TO_ADDR
26275: GO 26356
26277: LD_INT 53
26279: DOUBLE
26280: EQUAL
26281: IFTRUE 26285
26283: GO 26303
26285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26286: LD_ADDR_VAR 0 3
26290: PUSH
26291: LD_INT 23
26293: PUSH
26294: LD_INT 24
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: ST_TO_ADDR
26301: GO 26356
26303: LD_INT 46
26305: DOUBLE
26306: EQUAL
26307: IFTRUE 26311
26309: GO 26329
26311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26312: LD_ADDR_VAR 0 3
26316: PUSH
26317: LD_INT 23
26319: PUSH
26320: LD_INT 24
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: ST_TO_ADDR
26327: GO 26356
26329: LD_INT 47
26331: DOUBLE
26332: EQUAL
26333: IFTRUE 26337
26335: GO 26355
26337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26338: LD_ADDR_VAR 0 3
26342: PUSH
26343: LD_INT 23
26345: PUSH
26346: LD_INT 24
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: ST_TO_ADDR
26353: GO 26356
26355: POP
// result := ( chassis in result ) ;
26356: LD_ADDR_VAR 0 3
26360: PUSH
26361: LD_VAR 0 1
26365: PUSH
26366: LD_VAR 0 3
26370: IN
26371: ST_TO_ADDR
// end ;
26372: LD_VAR 0 3
26376: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26377: LD_INT 0
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
26384: PPUSH
26385: PPUSH
// result := array ;
26386: LD_ADDR_VAR 0 5
26390: PUSH
26391: LD_VAR 0 1
26395: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26396: LD_VAR 0 1
26400: NOT
26401: PUSH
26402: LD_VAR 0 2
26406: NOT
26407: OR
26408: PUSH
26409: LD_VAR 0 3
26413: NOT
26414: OR
26415: PUSH
26416: LD_VAR 0 2
26420: PUSH
26421: LD_VAR 0 1
26425: GREATER
26426: OR
26427: PUSH
26428: LD_VAR 0 3
26432: PUSH
26433: LD_VAR 0 1
26437: GREATER
26438: OR
26439: IFFALSE 26443
// exit ;
26441: GO 26739
// if direction then
26443: LD_VAR 0 4
26447: IFFALSE 26511
// begin d := 1 ;
26449: LD_ADDR_VAR 0 9
26453: PUSH
26454: LD_INT 1
26456: ST_TO_ADDR
// if i_from > i_to then
26457: LD_VAR 0 2
26461: PUSH
26462: LD_VAR 0 3
26466: GREATER
26467: IFFALSE 26493
// length := ( array - i_from ) + i_to else
26469: LD_ADDR_VAR 0 11
26473: PUSH
26474: LD_VAR 0 1
26478: PUSH
26479: LD_VAR 0 2
26483: MINUS
26484: PUSH
26485: LD_VAR 0 3
26489: PLUS
26490: ST_TO_ADDR
26491: GO 26509
// length := i_to - i_from ;
26493: LD_ADDR_VAR 0 11
26497: PUSH
26498: LD_VAR 0 3
26502: PUSH
26503: LD_VAR 0 2
26507: MINUS
26508: ST_TO_ADDR
// end else
26509: GO 26572
// begin d := - 1 ;
26511: LD_ADDR_VAR 0 9
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: ST_TO_ADDR
// if i_from > i_to then
26520: LD_VAR 0 2
26524: PUSH
26525: LD_VAR 0 3
26529: GREATER
26530: IFFALSE 26550
// length := i_from - i_to else
26532: LD_ADDR_VAR 0 11
26536: PUSH
26537: LD_VAR 0 2
26541: PUSH
26542: LD_VAR 0 3
26546: MINUS
26547: ST_TO_ADDR
26548: GO 26572
// length := ( array - i_to ) + i_from ;
26550: LD_ADDR_VAR 0 11
26554: PUSH
26555: LD_VAR 0 1
26559: PUSH
26560: LD_VAR 0 3
26564: MINUS
26565: PUSH
26566: LD_VAR 0 2
26570: PLUS
26571: ST_TO_ADDR
// end ; if not length then
26572: LD_VAR 0 11
26576: NOT
26577: IFFALSE 26581
// exit ;
26579: GO 26739
// tmp := array ;
26581: LD_ADDR_VAR 0 10
26585: PUSH
26586: LD_VAR 0 1
26590: ST_TO_ADDR
// for i = 1 to length do
26591: LD_ADDR_VAR 0 6
26595: PUSH
26596: DOUBLE
26597: LD_INT 1
26599: DEC
26600: ST_TO_ADDR
26601: LD_VAR 0 11
26605: PUSH
26606: FOR_TO
26607: IFFALSE 26727
// begin for j = 1 to array do
26609: LD_ADDR_VAR 0 7
26613: PUSH
26614: DOUBLE
26615: LD_INT 1
26617: DEC
26618: ST_TO_ADDR
26619: LD_VAR 0 1
26623: PUSH
26624: FOR_TO
26625: IFFALSE 26713
// begin k := j + d ;
26627: LD_ADDR_VAR 0 8
26631: PUSH
26632: LD_VAR 0 7
26636: PUSH
26637: LD_VAR 0 9
26641: PLUS
26642: ST_TO_ADDR
// if k > array then
26643: LD_VAR 0 8
26647: PUSH
26648: LD_VAR 0 1
26652: GREATER
26653: IFFALSE 26663
// k := 1 ;
26655: LD_ADDR_VAR 0 8
26659: PUSH
26660: LD_INT 1
26662: ST_TO_ADDR
// if not k then
26663: LD_VAR 0 8
26667: NOT
26668: IFFALSE 26680
// k := array ;
26670: LD_ADDR_VAR 0 8
26674: PUSH
26675: LD_VAR 0 1
26679: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26680: LD_ADDR_VAR 0 10
26684: PUSH
26685: LD_VAR 0 10
26689: PPUSH
26690: LD_VAR 0 8
26694: PPUSH
26695: LD_VAR 0 1
26699: PUSH
26700: LD_VAR 0 7
26704: ARRAY
26705: PPUSH
26706: CALL_OW 1
26710: ST_TO_ADDR
// end ;
26711: GO 26624
26713: POP
26714: POP
// array := tmp ;
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: LD_VAR 0 10
26724: ST_TO_ADDR
// end ;
26725: GO 26606
26727: POP
26728: POP
// result := array ;
26729: LD_ADDR_VAR 0 5
26733: PUSH
26734: LD_VAR 0 1
26738: ST_TO_ADDR
// end ;
26739: LD_VAR 0 5
26743: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26744: LD_INT 0
26746: PPUSH
26747: PPUSH
// result := 0 ;
26748: LD_ADDR_VAR 0 3
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// if not array or not value in array then
26756: LD_VAR 0 1
26760: NOT
26761: PUSH
26762: LD_VAR 0 2
26766: PUSH
26767: LD_VAR 0 1
26771: IN
26772: NOT
26773: OR
26774: IFFALSE 26778
// exit ;
26776: GO 26832
// for i = 1 to array do
26778: LD_ADDR_VAR 0 4
26782: PUSH
26783: DOUBLE
26784: LD_INT 1
26786: DEC
26787: ST_TO_ADDR
26788: LD_VAR 0 1
26792: PUSH
26793: FOR_TO
26794: IFFALSE 26830
// if value = array [ i ] then
26796: LD_VAR 0 2
26800: PUSH
26801: LD_VAR 0 1
26805: PUSH
26806: LD_VAR 0 4
26810: ARRAY
26811: EQUAL
26812: IFFALSE 26828
// begin result := i ;
26814: LD_ADDR_VAR 0 3
26818: PUSH
26819: LD_VAR 0 4
26823: ST_TO_ADDR
// exit ;
26824: POP
26825: POP
26826: GO 26832
// end ;
26828: GO 26793
26830: POP
26831: POP
// end ;
26832: LD_VAR 0 3
26836: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26837: LD_INT 0
26839: PPUSH
// vc_chassis := chassis ;
26840: LD_ADDR_OWVAR 37
26844: PUSH
26845: LD_VAR 0 1
26849: ST_TO_ADDR
// vc_engine := engine ;
26850: LD_ADDR_OWVAR 39
26854: PUSH
26855: LD_VAR 0 2
26859: ST_TO_ADDR
// vc_control := control ;
26860: LD_ADDR_OWVAR 38
26864: PUSH
26865: LD_VAR 0 3
26869: ST_TO_ADDR
// vc_weapon := weapon ;
26870: LD_ADDR_OWVAR 40
26874: PUSH
26875: LD_VAR 0 4
26879: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26880: LD_ADDR_OWVAR 41
26884: PUSH
26885: LD_VAR 0 5
26889: ST_TO_ADDR
// end ;
26890: LD_VAR 0 6
26894: RET
// export function WantPlant ( unit ) ; var task ; begin
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
// result := false ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 0
26906: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 437
26921: ST_TO_ADDR
// if task then
26922: LD_VAR 0 3
26926: IFFALSE 26954
// if task [ 1 ] [ 1 ] = p then
26928: LD_VAR 0 3
26932: PUSH
26933: LD_INT 1
26935: ARRAY
26936: PUSH
26937: LD_INT 1
26939: ARRAY
26940: PUSH
26941: LD_STRING p
26943: EQUAL
26944: IFFALSE 26954
// result := true ;
26946: LD_ADDR_VAR 0 2
26950: PUSH
26951: LD_INT 1
26953: ST_TO_ADDR
// end ;
26954: LD_VAR 0 2
26958: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26959: LD_INT 0
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
// if pos < 1 then
26965: LD_VAR 0 2
26969: PUSH
26970: LD_INT 1
26972: LESS
26973: IFFALSE 26977
// exit ;
26975: GO 27280
// if pos = 1 then
26977: LD_VAR 0 2
26981: PUSH
26982: LD_INT 1
26984: EQUAL
26985: IFFALSE 27018
// result := Replace ( arr , pos [ 1 ] , value ) else
26987: LD_ADDR_VAR 0 4
26991: PUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: LD_VAR 0 2
27001: PUSH
27002: LD_INT 1
27004: ARRAY
27005: PPUSH
27006: LD_VAR 0 3
27010: PPUSH
27011: CALL_OW 1
27015: ST_TO_ADDR
27016: GO 27280
// begin tmp := arr ;
27018: LD_ADDR_VAR 0 6
27022: PUSH
27023: LD_VAR 0 1
27027: ST_TO_ADDR
// s_arr := [ tmp ] ;
27028: LD_ADDR_VAR 0 7
27032: PUSH
27033: LD_VAR 0 6
27037: PUSH
27038: EMPTY
27039: LIST
27040: ST_TO_ADDR
// for i = 1 to pos - 1 do
27041: LD_ADDR_VAR 0 5
27045: PUSH
27046: DOUBLE
27047: LD_INT 1
27049: DEC
27050: ST_TO_ADDR
27051: LD_VAR 0 2
27055: PUSH
27056: LD_INT 1
27058: MINUS
27059: PUSH
27060: FOR_TO
27061: IFFALSE 27106
// begin tmp := tmp [ pos [ i ] ] ;
27063: LD_ADDR_VAR 0 6
27067: PUSH
27068: LD_VAR 0 6
27072: PUSH
27073: LD_VAR 0 2
27077: PUSH
27078: LD_VAR 0 5
27082: ARRAY
27083: ARRAY
27084: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27085: LD_ADDR_VAR 0 7
27089: PUSH
27090: LD_VAR 0 7
27094: PUSH
27095: LD_VAR 0 6
27099: PUSH
27100: EMPTY
27101: LIST
27102: ADD
27103: ST_TO_ADDR
// end ;
27104: GO 27060
27106: POP
27107: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27108: LD_ADDR_VAR 0 6
27112: PUSH
27113: LD_VAR 0 6
27117: PPUSH
27118: LD_VAR 0 2
27122: PUSH
27123: LD_VAR 0 2
27127: ARRAY
27128: PPUSH
27129: LD_VAR 0 3
27133: PPUSH
27134: CALL_OW 1
27138: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27139: LD_ADDR_VAR 0 7
27143: PUSH
27144: LD_VAR 0 7
27148: PPUSH
27149: LD_VAR 0 7
27153: PPUSH
27154: LD_VAR 0 6
27158: PPUSH
27159: CALL_OW 1
27163: ST_TO_ADDR
// for i = s_arr downto 2 do
27164: LD_ADDR_VAR 0 5
27168: PUSH
27169: DOUBLE
27170: LD_VAR 0 7
27174: INC
27175: ST_TO_ADDR
27176: LD_INT 2
27178: PUSH
27179: FOR_DOWNTO
27180: IFFALSE 27264
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27182: LD_ADDR_VAR 0 6
27186: PUSH
27187: LD_VAR 0 7
27191: PUSH
27192: LD_VAR 0 5
27196: PUSH
27197: LD_INT 1
27199: MINUS
27200: ARRAY
27201: PPUSH
27202: LD_VAR 0 2
27206: PUSH
27207: LD_VAR 0 5
27211: PUSH
27212: LD_INT 1
27214: MINUS
27215: ARRAY
27216: PPUSH
27217: LD_VAR 0 7
27221: PUSH
27222: LD_VAR 0 5
27226: ARRAY
27227: PPUSH
27228: CALL_OW 1
27232: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27233: LD_ADDR_VAR 0 7
27237: PUSH
27238: LD_VAR 0 7
27242: PPUSH
27243: LD_VAR 0 5
27247: PUSH
27248: LD_INT 1
27250: MINUS
27251: PPUSH
27252: LD_VAR 0 6
27256: PPUSH
27257: CALL_OW 1
27261: ST_TO_ADDR
// end ;
27262: GO 27179
27264: POP
27265: POP
// result := s_arr [ 1 ] ;
27266: LD_ADDR_VAR 0 4
27270: PUSH
27271: LD_VAR 0 7
27275: PUSH
27276: LD_INT 1
27278: ARRAY
27279: ST_TO_ADDR
// end ; end ;
27280: LD_VAR 0 4
27284: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27285: LD_INT 0
27287: PPUSH
27288: PPUSH
// if not list then
27289: LD_VAR 0 1
27293: NOT
27294: IFFALSE 27298
// exit ;
27296: GO 27389
// i := list [ pos1 ] ;
27298: LD_ADDR_VAR 0 5
27302: PUSH
27303: LD_VAR 0 1
27307: PUSH
27308: LD_VAR 0 2
27312: ARRAY
27313: ST_TO_ADDR
// if not i then
27314: LD_VAR 0 5
27318: NOT
27319: IFFALSE 27323
// exit ;
27321: GO 27389
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27323: LD_ADDR_VAR 0 1
27327: PUSH
27328: LD_VAR 0 1
27332: PPUSH
27333: LD_VAR 0 2
27337: PPUSH
27338: LD_VAR 0 1
27342: PUSH
27343: LD_VAR 0 3
27347: ARRAY
27348: PPUSH
27349: CALL_OW 1
27353: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: LD_VAR 0 1
27363: PPUSH
27364: LD_VAR 0 3
27368: PPUSH
27369: LD_VAR 0 5
27373: PPUSH
27374: CALL_OW 1
27378: ST_TO_ADDR
// result := list ;
27379: LD_ADDR_VAR 0 4
27383: PUSH
27384: LD_VAR 0 1
27388: ST_TO_ADDR
// end ;
27389: LD_VAR 0 4
27393: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27394: LD_INT 0
27396: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27397: LD_ADDR_VAR 0 5
27401: PUSH
27402: LD_VAR 0 1
27406: PPUSH
27407: CALL_OW 250
27411: PPUSH
27412: LD_VAR 0 1
27416: PPUSH
27417: CALL_OW 251
27421: PPUSH
27422: LD_VAR 0 2
27426: PPUSH
27427: LD_VAR 0 3
27431: PPUSH
27432: LD_VAR 0 4
27436: PPUSH
27437: CALL 27447 0 5
27441: ST_TO_ADDR
// end ;
27442: LD_VAR 0 5
27446: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27447: LD_INT 0
27449: PPUSH
27450: PPUSH
27451: PPUSH
27452: PPUSH
// if not list then
27453: LD_VAR 0 3
27457: NOT
27458: IFFALSE 27462
// exit ;
27460: GO 27850
// result := [ ] ;
27462: LD_ADDR_VAR 0 6
27466: PUSH
27467: EMPTY
27468: ST_TO_ADDR
// for i in list do
27469: LD_ADDR_VAR 0 7
27473: PUSH
27474: LD_VAR 0 3
27478: PUSH
27479: FOR_IN
27480: IFFALSE 27682
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27482: LD_ADDR_VAR 0 9
27486: PUSH
27487: LD_VAR 0 7
27491: PPUSH
27492: LD_VAR 0 1
27496: PPUSH
27497: LD_VAR 0 2
27501: PPUSH
27502: CALL_OW 297
27506: ST_TO_ADDR
// if not result then
27507: LD_VAR 0 6
27511: NOT
27512: IFFALSE 27538
// result := [ [ i , tmp ] ] else
27514: LD_ADDR_VAR 0 6
27518: PUSH
27519: LD_VAR 0 7
27523: PUSH
27524: LD_VAR 0 9
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: ST_TO_ADDR
27536: GO 27680
// begin if result [ result ] [ 2 ] < tmp then
27538: LD_VAR 0 6
27542: PUSH
27543: LD_VAR 0 6
27547: ARRAY
27548: PUSH
27549: LD_INT 2
27551: ARRAY
27552: PUSH
27553: LD_VAR 0 9
27557: LESS
27558: IFFALSE 27600
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27560: LD_ADDR_VAR 0 6
27564: PUSH
27565: LD_VAR 0 6
27569: PPUSH
27570: LD_VAR 0 6
27574: PUSH
27575: LD_INT 1
27577: PLUS
27578: PPUSH
27579: LD_VAR 0 7
27583: PUSH
27584: LD_VAR 0 9
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PPUSH
27593: CALL_OW 2
27597: ST_TO_ADDR
27598: GO 27680
// for j = 1 to result do
27600: LD_ADDR_VAR 0 8
27604: PUSH
27605: DOUBLE
27606: LD_INT 1
27608: DEC
27609: ST_TO_ADDR
27610: LD_VAR 0 6
27614: PUSH
27615: FOR_TO
27616: IFFALSE 27678
// begin if tmp < result [ j ] [ 2 ] then
27618: LD_VAR 0 9
27622: PUSH
27623: LD_VAR 0 6
27627: PUSH
27628: LD_VAR 0 8
27632: ARRAY
27633: PUSH
27634: LD_INT 2
27636: ARRAY
27637: LESS
27638: IFFALSE 27676
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27640: LD_ADDR_VAR 0 6
27644: PUSH
27645: LD_VAR 0 6
27649: PPUSH
27650: LD_VAR 0 8
27654: PPUSH
27655: LD_VAR 0 7
27659: PUSH
27660: LD_VAR 0 9
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PPUSH
27669: CALL_OW 2
27673: ST_TO_ADDR
// break ;
27674: GO 27678
// end ; end ;
27676: GO 27615
27678: POP
27679: POP
// end ; end ;
27680: GO 27479
27682: POP
27683: POP
// if result and not asc then
27684: LD_VAR 0 6
27688: PUSH
27689: LD_VAR 0 4
27693: NOT
27694: AND
27695: IFFALSE 27770
// begin tmp := result ;
27697: LD_ADDR_VAR 0 9
27701: PUSH
27702: LD_VAR 0 6
27706: ST_TO_ADDR
// for i = tmp downto 1 do
27707: LD_ADDR_VAR 0 7
27711: PUSH
27712: DOUBLE
27713: LD_VAR 0 9
27717: INC
27718: ST_TO_ADDR
27719: LD_INT 1
27721: PUSH
27722: FOR_DOWNTO
27723: IFFALSE 27768
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27725: LD_ADDR_VAR 0 6
27729: PUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: LD_VAR 0 9
27739: PUSH
27740: LD_VAR 0 7
27744: MINUS
27745: PUSH
27746: LD_INT 1
27748: PLUS
27749: PPUSH
27750: LD_VAR 0 9
27754: PUSH
27755: LD_VAR 0 7
27759: ARRAY
27760: PPUSH
27761: CALL_OW 1
27765: ST_TO_ADDR
27766: GO 27722
27768: POP
27769: POP
// end ; tmp := [ ] ;
27770: LD_ADDR_VAR 0 9
27774: PUSH
27775: EMPTY
27776: ST_TO_ADDR
// if mode then
27777: LD_VAR 0 5
27781: IFFALSE 27850
// begin for i = 1 to result do
27783: LD_ADDR_VAR 0 7
27787: PUSH
27788: DOUBLE
27789: LD_INT 1
27791: DEC
27792: ST_TO_ADDR
27793: LD_VAR 0 6
27797: PUSH
27798: FOR_TO
27799: IFFALSE 27838
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27801: LD_ADDR_VAR 0 9
27805: PUSH
27806: LD_VAR 0 9
27810: PPUSH
27811: LD_VAR 0 7
27815: PPUSH
27816: LD_VAR 0 6
27820: PUSH
27821: LD_VAR 0 7
27825: ARRAY
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: PPUSH
27831: CALL_OW 1
27835: ST_TO_ADDR
27836: GO 27798
27838: POP
27839: POP
// result := tmp ;
27840: LD_ADDR_VAR 0 6
27844: PUSH
27845: LD_VAR 0 9
27849: ST_TO_ADDR
// end ; end ;
27850: LD_VAR 0 6
27854: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27855: LD_INT 0
27857: PPUSH
27858: PPUSH
27859: PPUSH
27860: PPUSH
27861: PPUSH
27862: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27863: LD_ADDR_VAR 0 5
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: ST_TO_ADDR
// if not x or not y then
27885: LD_VAR 0 2
27889: NOT
27890: PUSH
27891: LD_VAR 0 3
27895: NOT
27896: OR
27897: IFFALSE 27901
// exit ;
27899: GO 29547
// if not range then
27901: LD_VAR 0 4
27905: NOT
27906: IFFALSE 27916
// range := 10 ;
27908: LD_ADDR_VAR 0 4
27912: PUSH
27913: LD_INT 10
27915: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27916: LD_ADDR_VAR 0 8
27920: PUSH
27921: LD_INT 81
27923: PUSH
27924: LD_VAR 0 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 92
27935: PUSH
27936: LD_VAR 0 2
27940: PUSH
27941: LD_VAR 0 3
27945: PUSH
27946: LD_VAR 0 4
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: PUSH
27960: LD_INT 21
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: PPUSH
27979: CALL_OW 69
27983: ST_TO_ADDR
// if not tmp then
27984: LD_VAR 0 8
27988: NOT
27989: IFFALSE 27993
// exit ;
27991: GO 29547
// for i in tmp do
27993: LD_ADDR_VAR 0 6
27997: PUSH
27998: LD_VAR 0 8
28002: PUSH
28003: FOR_IN
28004: IFFALSE 29522
// begin points := [ 0 , 0 , 0 ] ;
28006: LD_ADDR_VAR 0 9
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: LIST
28024: ST_TO_ADDR
// bpoints := 1 ;
28025: LD_ADDR_VAR 0 10
28029: PUSH
28030: LD_INT 1
28032: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28033: LD_VAR 0 6
28037: PPUSH
28038: CALL_OW 247
28042: PUSH
28043: LD_INT 1
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28629
28051: POP
// begin if GetClass ( i ) = 1 then
28052: LD_VAR 0 6
28056: PPUSH
28057: CALL_OW 257
28061: PUSH
28062: LD_INT 1
28064: EQUAL
28065: IFFALSE 28086
// points := [ 10 , 5 , 3 ] ;
28067: LD_ADDR_VAR 0 9
28071: PUSH
28072: LD_INT 10
28074: PUSH
28075: LD_INT 5
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: LIST
28085: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28086: LD_VAR 0 6
28090: PPUSH
28091: CALL_OW 257
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 3
28101: PUSH
28102: LD_INT 4
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: IN
28110: IFFALSE 28131
// points := [ 3 , 2 , 1 ] ;
28112: LD_ADDR_VAR 0 9
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: LD_INT 2
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28131: LD_VAR 0 6
28135: PPUSH
28136: CALL_OW 257
28140: PUSH
28141: LD_INT 5
28143: EQUAL
28144: IFFALSE 28165
// points := [ 130 , 5 , 2 ] ;
28146: LD_ADDR_VAR 0 9
28150: PUSH
28151: LD_INT 130
28153: PUSH
28154: LD_INT 5
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28165: LD_VAR 0 6
28169: PPUSH
28170: CALL_OW 257
28174: PUSH
28175: LD_INT 8
28177: EQUAL
28178: IFFALSE 28199
// points := [ 35 , 35 , 30 ] ;
28180: LD_ADDR_VAR 0 9
28184: PUSH
28185: LD_INT 35
28187: PUSH
28188: LD_INT 35
28190: PUSH
28191: LD_INT 30
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28199: LD_VAR 0 6
28203: PPUSH
28204: CALL_OW 257
28208: PUSH
28209: LD_INT 9
28211: EQUAL
28212: IFFALSE 28233
// points := [ 20 , 55 , 40 ] ;
28214: LD_ADDR_VAR 0 9
28218: PUSH
28219: LD_INT 20
28221: PUSH
28222: LD_INT 55
28224: PUSH
28225: LD_INT 40
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28233: LD_VAR 0 6
28237: PPUSH
28238: CALL_OW 257
28242: PUSH
28243: LD_INT 12
28245: PUSH
28246: LD_INT 16
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: IN
28253: IFFALSE 28274
// points := [ 5 , 3 , 2 ] ;
28255: LD_ADDR_VAR 0 9
28259: PUSH
28260: LD_INT 5
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28274: LD_VAR 0 6
28278: PPUSH
28279: CALL_OW 257
28283: PUSH
28284: LD_INT 17
28286: EQUAL
28287: IFFALSE 28308
// points := [ 100 , 50 , 75 ] ;
28289: LD_ADDR_VAR 0 9
28293: PUSH
28294: LD_INT 100
28296: PUSH
28297: LD_INT 50
28299: PUSH
28300: LD_INT 75
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28308: LD_VAR 0 6
28312: PPUSH
28313: CALL_OW 257
28317: PUSH
28318: LD_INT 15
28320: EQUAL
28321: IFFALSE 28342
// points := [ 10 , 5 , 3 ] ;
28323: LD_ADDR_VAR 0 9
28327: PUSH
28328: LD_INT 10
28330: PUSH
28331: LD_INT 5
28333: PUSH
28334: LD_INT 3
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28342: LD_VAR 0 6
28346: PPUSH
28347: CALL_OW 257
28351: PUSH
28352: LD_INT 14
28354: EQUAL
28355: IFFALSE 28376
// points := [ 10 , 0 , 0 ] ;
28357: LD_ADDR_VAR 0 9
28361: PUSH
28362: LD_INT 10
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28376: LD_VAR 0 6
28380: PPUSH
28381: CALL_OW 257
28385: PUSH
28386: LD_INT 11
28388: EQUAL
28389: IFFALSE 28410
// points := [ 30 , 10 , 5 ] ;
28391: LD_ADDR_VAR 0 9
28395: PUSH
28396: LD_INT 30
28398: PUSH
28399: LD_INT 10
28401: PUSH
28402: LD_INT 5
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28410: LD_VAR 0 1
28414: PPUSH
28415: LD_INT 5
28417: PPUSH
28418: CALL_OW 321
28422: PUSH
28423: LD_INT 2
28425: EQUAL
28426: IFFALSE 28443
// bpoints := bpoints * 1.8 ;
28428: LD_ADDR_VAR 0 10
28432: PUSH
28433: LD_VAR 0 10
28437: PUSH
28438: LD_REAL  1.80000000000000E+0000
28441: MUL
28442: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28443: LD_VAR 0 6
28447: PPUSH
28448: CALL_OW 257
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 3
28461: PUSH
28462: LD_INT 4
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: IN
28471: PUSH
28472: LD_VAR 0 1
28476: PPUSH
28477: LD_INT 51
28479: PPUSH
28480: CALL_OW 321
28484: PUSH
28485: LD_INT 2
28487: EQUAL
28488: AND
28489: IFFALSE 28506
// bpoints := bpoints * 1.2 ;
28491: LD_ADDR_VAR 0 10
28495: PUSH
28496: LD_VAR 0 10
28500: PUSH
28501: LD_REAL  1.20000000000000E+0000
28504: MUL
28505: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28506: LD_VAR 0 6
28510: PPUSH
28511: CALL_OW 257
28515: PUSH
28516: LD_INT 5
28518: PUSH
28519: LD_INT 7
28521: PUSH
28522: LD_INT 9
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: IN
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: LD_INT 52
28538: PPUSH
28539: CALL_OW 321
28543: PUSH
28544: LD_INT 2
28546: EQUAL
28547: AND
28548: IFFALSE 28565
// bpoints := bpoints * 1.5 ;
28550: LD_ADDR_VAR 0 10
28554: PUSH
28555: LD_VAR 0 10
28559: PUSH
28560: LD_REAL  1.50000000000000E+0000
28563: MUL
28564: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28565: LD_VAR 0 1
28569: PPUSH
28570: LD_INT 66
28572: PPUSH
28573: CALL_OW 321
28577: PUSH
28578: LD_INT 2
28580: EQUAL
28581: IFFALSE 28598
// bpoints := bpoints * 1.1 ;
28583: LD_ADDR_VAR 0 10
28587: PUSH
28588: LD_VAR 0 10
28592: PUSH
28593: LD_REAL  1.10000000000000E+0000
28596: MUL
28597: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28598: LD_ADDR_VAR 0 10
28602: PUSH
28603: LD_VAR 0 10
28607: PUSH
28608: LD_VAR 0 6
28612: PPUSH
28613: LD_INT 1
28615: PPUSH
28616: CALL_OW 259
28620: PUSH
28621: LD_REAL  1.15000000000000E+0000
28624: MUL
28625: MUL
28626: ST_TO_ADDR
// end ; unit_vehicle :
28627: GO 29451
28629: LD_INT 2
28631: DOUBLE
28632: EQUAL
28633: IFTRUE 28637
28635: GO 29439
28637: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28638: LD_VAR 0 6
28642: PPUSH
28643: CALL_OW 264
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 42
28653: PUSH
28654: LD_INT 24
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: IN
28662: IFFALSE 28683
// points := [ 25 , 5 , 3 ] ;
28664: LD_ADDR_VAR 0 9
28668: PUSH
28669: LD_INT 25
28671: PUSH
28672: LD_INT 5
28674: PUSH
28675: LD_INT 3
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28683: LD_VAR 0 6
28687: PPUSH
28688: CALL_OW 264
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: LD_INT 43
28698: PUSH
28699: LD_INT 25
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: IN
28707: IFFALSE 28728
// points := [ 40 , 15 , 5 ] ;
28709: LD_ADDR_VAR 0 9
28713: PUSH
28714: LD_INT 40
28716: PUSH
28717: LD_INT 15
28719: PUSH
28720: LD_INT 5
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28728: LD_VAR 0 6
28732: PPUSH
28733: CALL_OW 264
28737: PUSH
28738: LD_INT 3
28740: PUSH
28741: LD_INT 23
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: IN
28748: IFFALSE 28769
// points := [ 7 , 25 , 8 ] ;
28750: LD_ADDR_VAR 0 9
28754: PUSH
28755: LD_INT 7
28757: PUSH
28758: LD_INT 25
28760: PUSH
28761: LD_INT 8
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28769: LD_VAR 0 6
28773: PPUSH
28774: CALL_OW 264
28778: PUSH
28779: LD_INT 5
28781: PUSH
28782: LD_INT 27
28784: PUSH
28785: LD_INT 44
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: IN
28793: IFFALSE 28814
// points := [ 14 , 50 , 16 ] ;
28795: LD_ADDR_VAR 0 9
28799: PUSH
28800: LD_INT 14
28802: PUSH
28803: LD_INT 50
28805: PUSH
28806: LD_INT 16
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28814: LD_VAR 0 6
28818: PPUSH
28819: CALL_OW 264
28823: PUSH
28824: LD_INT 6
28826: PUSH
28827: LD_INT 46
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: IN
28834: IFFALSE 28855
// points := [ 32 , 120 , 70 ] ;
28836: LD_ADDR_VAR 0 9
28840: PUSH
28841: LD_INT 32
28843: PUSH
28844: LD_INT 120
28846: PUSH
28847: LD_INT 70
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28855: LD_VAR 0 6
28859: PPUSH
28860: CALL_OW 264
28864: PUSH
28865: LD_INT 7
28867: PUSH
28868: LD_INT 28
28870: PUSH
28871: LD_INT 45
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: IN
28879: IFFALSE 28900
// points := [ 35 , 20 , 45 ] ;
28881: LD_ADDR_VAR 0 9
28885: PUSH
28886: LD_INT 35
28888: PUSH
28889: LD_INT 20
28891: PUSH
28892: LD_INT 45
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28900: LD_VAR 0 6
28904: PPUSH
28905: CALL_OW 264
28909: PUSH
28910: LD_INT 47
28912: PUSH
28913: EMPTY
28914: LIST
28915: IN
28916: IFFALSE 28937
// points := [ 67 , 45 , 75 ] ;
28918: LD_ADDR_VAR 0 9
28922: PUSH
28923: LD_INT 67
28925: PUSH
28926: LD_INT 45
28928: PUSH
28929: LD_INT 75
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28937: LD_VAR 0 6
28941: PPUSH
28942: CALL_OW 264
28946: PUSH
28947: LD_INT 26
28949: PUSH
28950: EMPTY
28951: LIST
28952: IN
28953: IFFALSE 28974
// points := [ 120 , 30 , 80 ] ;
28955: LD_ADDR_VAR 0 9
28959: PUSH
28960: LD_INT 120
28962: PUSH
28963: LD_INT 30
28965: PUSH
28966: LD_INT 80
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28974: LD_VAR 0 6
28978: PPUSH
28979: CALL_OW 264
28983: PUSH
28984: LD_INT 22
28986: PUSH
28987: EMPTY
28988: LIST
28989: IN
28990: IFFALSE 29011
// points := [ 40 , 1 , 1 ] ;
28992: LD_ADDR_VAR 0 9
28996: PUSH
28997: LD_INT 40
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29011: LD_VAR 0 6
29015: PPUSH
29016: CALL_OW 264
29020: PUSH
29021: LD_INT 29
29023: PUSH
29024: EMPTY
29025: LIST
29026: IN
29027: IFFALSE 29048
// points := [ 70 , 200 , 400 ] ;
29029: LD_ADDR_VAR 0 9
29033: PUSH
29034: LD_INT 70
29036: PUSH
29037: LD_INT 200
29039: PUSH
29040: LD_INT 400
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29048: LD_VAR 0 6
29052: PPUSH
29053: CALL_OW 264
29057: PUSH
29058: LD_INT 14
29060: PUSH
29061: LD_INT 53
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: IN
29068: IFFALSE 29089
// points := [ 40 , 10 , 20 ] ;
29070: LD_ADDR_VAR 0 9
29074: PUSH
29075: LD_INT 40
29077: PUSH
29078: LD_INT 10
29080: PUSH
29081: LD_INT 20
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29089: LD_VAR 0 6
29093: PPUSH
29094: CALL_OW 264
29098: PUSH
29099: LD_INT 9
29101: PUSH
29102: EMPTY
29103: LIST
29104: IN
29105: IFFALSE 29126
// points := [ 5 , 70 , 20 ] ;
29107: LD_ADDR_VAR 0 9
29111: PUSH
29112: LD_INT 5
29114: PUSH
29115: LD_INT 70
29117: PUSH
29118: LD_INT 20
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29126: LD_VAR 0 6
29130: PPUSH
29131: CALL_OW 264
29135: PUSH
29136: LD_INT 10
29138: PUSH
29139: EMPTY
29140: LIST
29141: IN
29142: IFFALSE 29163
// points := [ 35 , 110 , 70 ] ;
29144: LD_ADDR_VAR 0 9
29148: PUSH
29149: LD_INT 35
29151: PUSH
29152: LD_INT 110
29154: PUSH
29155: LD_INT 70
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29163: LD_VAR 0 6
29167: PPUSH
29168: CALL_OW 265
29172: PUSH
29173: LD_INT 25
29175: EQUAL
29176: IFFALSE 29197
// points := [ 80 , 65 , 100 ] ;
29178: LD_ADDR_VAR 0 9
29182: PUSH
29183: LD_INT 80
29185: PUSH
29186: LD_INT 65
29188: PUSH
29189: LD_INT 100
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29197: LD_VAR 0 6
29201: PPUSH
29202: CALL_OW 263
29206: PUSH
29207: LD_INT 1
29209: EQUAL
29210: IFFALSE 29245
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29212: LD_ADDR_VAR 0 10
29216: PUSH
29217: LD_VAR 0 10
29221: PUSH
29222: LD_VAR 0 6
29226: PPUSH
29227: CALL_OW 311
29231: PPUSH
29232: LD_INT 3
29234: PPUSH
29235: CALL_OW 259
29239: PUSH
29240: LD_INT 4
29242: MUL
29243: MUL
29244: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29245: LD_VAR 0 6
29249: PPUSH
29250: CALL_OW 263
29254: PUSH
29255: LD_INT 2
29257: EQUAL
29258: IFFALSE 29309
// begin j := IsControledBy ( i ) ;
29260: LD_ADDR_VAR 0 7
29264: PUSH
29265: LD_VAR 0 6
29269: PPUSH
29270: CALL_OW 312
29274: ST_TO_ADDR
// if j then
29275: LD_VAR 0 7
29279: IFFALSE 29309
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29281: LD_ADDR_VAR 0 10
29285: PUSH
29286: LD_VAR 0 10
29290: PUSH
29291: LD_VAR 0 7
29295: PPUSH
29296: LD_INT 3
29298: PPUSH
29299: CALL_OW 259
29303: PUSH
29304: LD_INT 3
29306: MUL
29307: MUL
29308: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29309: LD_VAR 0 6
29313: PPUSH
29314: CALL_OW 264
29318: PUSH
29319: LD_INT 5
29321: PUSH
29322: LD_INT 6
29324: PUSH
29325: LD_INT 46
29327: PUSH
29328: LD_INT 44
29330: PUSH
29331: LD_INT 47
29333: PUSH
29334: LD_INT 45
29336: PUSH
29337: LD_INT 28
29339: PUSH
29340: LD_INT 7
29342: PUSH
29343: LD_INT 27
29345: PUSH
29346: LD_INT 29
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: IN
29361: PUSH
29362: LD_VAR 0 1
29366: PPUSH
29367: LD_INT 52
29369: PPUSH
29370: CALL_OW 321
29374: PUSH
29375: LD_INT 2
29377: EQUAL
29378: AND
29379: IFFALSE 29396
// bpoints := bpoints * 1.2 ;
29381: LD_ADDR_VAR 0 10
29385: PUSH
29386: LD_VAR 0 10
29390: PUSH
29391: LD_REAL  1.20000000000000E+0000
29394: MUL
29395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29396: LD_VAR 0 6
29400: PPUSH
29401: CALL_OW 264
29405: PUSH
29406: LD_INT 6
29408: PUSH
29409: LD_INT 46
29411: PUSH
29412: LD_INT 47
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: IN
29420: IFFALSE 29437
// bpoints := bpoints * 1.2 ;
29422: LD_ADDR_VAR 0 10
29426: PUSH
29427: LD_VAR 0 10
29431: PUSH
29432: LD_REAL  1.20000000000000E+0000
29435: MUL
29436: ST_TO_ADDR
// end ; unit_building :
29437: GO 29451
29439: LD_INT 3
29441: DOUBLE
29442: EQUAL
29443: IFTRUE 29447
29445: GO 29450
29447: POP
// ; end ;
29448: GO 29451
29450: POP
// for j = 1 to 3 do
29451: LD_ADDR_VAR 0 7
29455: PUSH
29456: DOUBLE
29457: LD_INT 1
29459: DEC
29460: ST_TO_ADDR
29461: LD_INT 3
29463: PUSH
29464: FOR_TO
29465: IFFALSE 29518
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_VAR 0 5
29476: PPUSH
29477: LD_VAR 0 7
29481: PPUSH
29482: LD_VAR 0 5
29486: PUSH
29487: LD_VAR 0 7
29491: ARRAY
29492: PUSH
29493: LD_VAR 0 9
29497: PUSH
29498: LD_VAR 0 7
29502: ARRAY
29503: PUSH
29504: LD_VAR 0 10
29508: MUL
29509: PLUS
29510: PPUSH
29511: CALL_OW 1
29515: ST_TO_ADDR
29516: GO 29464
29518: POP
29519: POP
// end ;
29520: GO 28003
29522: POP
29523: POP
// result := Replace ( result , 4 , tmp ) ;
29524: LD_ADDR_VAR 0 5
29528: PUSH
29529: LD_VAR 0 5
29533: PPUSH
29534: LD_INT 4
29536: PPUSH
29537: LD_VAR 0 8
29541: PPUSH
29542: CALL_OW 1
29546: ST_TO_ADDR
// end ;
29547: LD_VAR 0 5
29551: RET
// export function DangerAtRange ( unit , range ) ; begin
29552: LD_INT 0
29554: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29555: LD_ADDR_VAR 0 3
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 255
29569: PPUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL_OW 250
29579: PPUSH
29580: LD_VAR 0 1
29584: PPUSH
29585: CALL_OW 251
29589: PPUSH
29590: LD_VAR 0 2
29594: PPUSH
29595: CALL 27855 0 4
29599: ST_TO_ADDR
// end ;
29600: LD_VAR 0 3
29604: RET
// export function DangerInArea ( side , area ) ; begin
29605: LD_INT 0
29607: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29608: LD_ADDR_VAR 0 3
29612: PUSH
29613: LD_VAR 0 2
29617: PPUSH
29618: LD_INT 81
29620: PUSH
29621: LD_VAR 0 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PPUSH
29630: CALL_OW 70
29634: ST_TO_ADDR
// end ;
29635: LD_VAR 0 3
29639: RET
// export function IsExtension ( b ) ; begin
29640: LD_INT 0
29642: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29643: LD_ADDR_VAR 0 2
29647: PUSH
29648: LD_VAR 0 1
29652: PUSH
29653: LD_INT 23
29655: PUSH
29656: LD_INT 20
29658: PUSH
29659: LD_INT 22
29661: PUSH
29662: LD_INT 17
29664: PUSH
29665: LD_INT 24
29667: PUSH
29668: LD_INT 21
29670: PUSH
29671: LD_INT 19
29673: PUSH
29674: LD_INT 16
29676: PUSH
29677: LD_INT 25
29679: PUSH
29680: LD_INT 18
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: IN
29695: ST_TO_ADDR
// end ;
29696: LD_VAR 0 2
29700: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29701: LD_INT 0
29703: PPUSH
29704: PPUSH
29705: PPUSH
// result := [ ] ;
29706: LD_ADDR_VAR 0 4
29710: PUSH
29711: EMPTY
29712: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29713: LD_ADDR_VAR 0 5
29717: PUSH
29718: LD_VAR 0 2
29722: PPUSH
29723: LD_INT 21
29725: PUSH
29726: LD_INT 3
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PPUSH
29733: CALL_OW 70
29737: ST_TO_ADDR
// if not tmp then
29738: LD_VAR 0 5
29742: NOT
29743: IFFALSE 29747
// exit ;
29745: GO 29811
// if checkLink then
29747: LD_VAR 0 3
29751: IFFALSE 29801
// begin for i in tmp do
29753: LD_ADDR_VAR 0 6
29757: PUSH
29758: LD_VAR 0 5
29762: PUSH
29763: FOR_IN
29764: IFFALSE 29799
// if GetBase ( i ) <> base then
29766: LD_VAR 0 6
29770: PPUSH
29771: CALL_OW 274
29775: PUSH
29776: LD_VAR 0 1
29780: NONEQUAL
29781: IFFALSE 29797
// ComLinkToBase ( base , i ) ;
29783: LD_VAR 0 1
29787: PPUSH
29788: LD_VAR 0 6
29792: PPUSH
29793: CALL_OW 169
29797: GO 29763
29799: POP
29800: POP
// end ; result := tmp ;
29801: LD_ADDR_VAR 0 4
29805: PUSH
29806: LD_VAR 0 5
29810: ST_TO_ADDR
// end ;
29811: LD_VAR 0 4
29815: RET
// export function ComComplete ( units , b ) ; var i ; begin
29816: LD_INT 0
29818: PPUSH
29819: PPUSH
// if not units then
29820: LD_VAR 0 1
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 29919
// for i in units do
29829: LD_ADDR_VAR 0 4
29833: PUSH
29834: LD_VAR 0 1
29838: PUSH
29839: FOR_IN
29840: IFFALSE 29917
// if BuildingStatus ( b ) = bs_build then
29842: LD_VAR 0 2
29846: PPUSH
29847: CALL_OW 461
29851: PUSH
29852: LD_INT 1
29854: EQUAL
29855: IFFALSE 29915
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29857: LD_VAR 0 4
29861: PPUSH
29862: LD_STRING h
29864: PUSH
29865: LD_VAR 0 2
29869: PPUSH
29870: CALL_OW 250
29874: PUSH
29875: LD_VAR 0 2
29879: PPUSH
29880: CALL_OW 251
29884: PUSH
29885: LD_VAR 0 2
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: PPUSH
29911: CALL_OW 446
29915: GO 29839
29917: POP
29918: POP
// end ;
29919: LD_VAR 0 3
29923: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29924: LD_INT 0
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29932: LD_VAR 0 1
29936: NOT
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL_OW 263
29947: PUSH
29948: LD_INT 2
29950: EQUAL
29951: NOT
29952: OR
29953: IFFALSE 29957
// exit ;
29955: GO 30273
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29957: LD_ADDR_VAR 0 6
29961: PUSH
29962: LD_INT 22
29964: PUSH
29965: LD_VAR 0 1
29969: PPUSH
29970: CALL_OW 255
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 30
29984: PUSH
29985: LD_INT 36
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 34
29994: PUSH
29995: LD_INT 31
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PPUSH
30011: CALL_OW 69
30015: ST_TO_ADDR
// if not tmp then
30016: LD_VAR 0 6
30020: NOT
30021: IFFALSE 30025
// exit ;
30023: GO 30273
// result := [ ] ;
30025: LD_ADDR_VAR 0 2
30029: PUSH
30030: EMPTY
30031: ST_TO_ADDR
// for i in tmp do
30032: LD_ADDR_VAR 0 3
30036: PUSH
30037: LD_VAR 0 6
30041: PUSH
30042: FOR_IN
30043: IFFALSE 30114
// begin t := UnitsInside ( i ) ;
30045: LD_ADDR_VAR 0 4
30049: PUSH
30050: LD_VAR 0 3
30054: PPUSH
30055: CALL_OW 313
30059: ST_TO_ADDR
// if t then
30060: LD_VAR 0 4
30064: IFFALSE 30112
// for j in t do
30066: LD_ADDR_VAR 0 7
30070: PUSH
30071: LD_VAR 0 4
30075: PUSH
30076: FOR_IN
30077: IFFALSE 30110
// result := Insert ( result , result + 1 , j ) ;
30079: LD_ADDR_VAR 0 2
30083: PUSH
30084: LD_VAR 0 2
30088: PPUSH
30089: LD_VAR 0 2
30093: PUSH
30094: LD_INT 1
30096: PLUS
30097: PPUSH
30098: LD_VAR 0 7
30102: PPUSH
30103: CALL_OW 2
30107: ST_TO_ADDR
30108: GO 30076
30110: POP
30111: POP
// end ;
30112: GO 30042
30114: POP
30115: POP
// if not result then
30116: LD_VAR 0 2
30120: NOT
30121: IFFALSE 30125
// exit ;
30123: GO 30273
// mech := result [ 1 ] ;
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: LD_VAR 0 2
30134: PUSH
30135: LD_INT 1
30137: ARRAY
30138: ST_TO_ADDR
// if result > 1 then
30139: LD_VAR 0 2
30143: PUSH
30144: LD_INT 1
30146: GREATER
30147: IFFALSE 30259
// for i = 2 to result do
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: DOUBLE
30155: LD_INT 2
30157: DEC
30158: ST_TO_ADDR
30159: LD_VAR 0 2
30163: PUSH
30164: FOR_TO
30165: IFFALSE 30257
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30167: LD_ADDR_VAR 0 4
30171: PUSH
30172: LD_VAR 0 2
30176: PUSH
30177: LD_VAR 0 3
30181: ARRAY
30182: PPUSH
30183: LD_INT 3
30185: PPUSH
30186: CALL_OW 259
30190: PUSH
30191: LD_VAR 0 2
30195: PUSH
30196: LD_VAR 0 3
30200: ARRAY
30201: PPUSH
30202: CALL_OW 432
30206: MINUS
30207: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30208: LD_VAR 0 4
30212: PUSH
30213: LD_VAR 0 5
30217: PPUSH
30218: LD_INT 3
30220: PPUSH
30221: CALL_OW 259
30225: PUSH
30226: LD_VAR 0 5
30230: PPUSH
30231: CALL_OW 432
30235: MINUS
30236: GREATEREQUAL
30237: IFFALSE 30255
// mech := result [ i ] ;
30239: LD_ADDR_VAR 0 5
30243: PUSH
30244: LD_VAR 0 2
30248: PUSH
30249: LD_VAR 0 3
30253: ARRAY
30254: ST_TO_ADDR
// end ;
30255: GO 30164
30257: POP
30258: POP
// ComLinkTo ( vehicle , mech ) ;
30259: LD_VAR 0 1
30263: PPUSH
30264: LD_VAR 0 5
30268: PPUSH
30269: CALL_OW 135
// end ;
30273: LD_VAR 0 2
30277: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30278: LD_INT 0
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
// result := [ ] ;
30293: LD_ADDR_VAR 0 7
30297: PUSH
30298: EMPTY
30299: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 266
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: IN
30320: NOT
30321: IFFALSE 30325
// exit ;
30323: GO 31959
// if name then
30325: LD_VAR 0 3
30329: IFFALSE 30345
// SetBName ( base_dep , name ) ;
30331: LD_VAR 0 1
30335: PPUSH
30336: LD_VAR 0 3
30340: PPUSH
30341: CALL_OW 500
// base := GetBase ( base_dep ) ;
30345: LD_ADDR_VAR 0 15
30349: PUSH
30350: LD_VAR 0 1
30354: PPUSH
30355: CALL_OW 274
30359: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30360: LD_ADDR_VAR 0 16
30364: PUSH
30365: LD_VAR 0 1
30369: PPUSH
30370: CALL_OW 255
30374: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30375: LD_ADDR_VAR 0 17
30379: PUSH
30380: LD_VAR 0 1
30384: PPUSH
30385: CALL_OW 248
30389: ST_TO_ADDR
// if sources then
30390: LD_VAR 0 5
30394: IFFALSE 30441
// for i = 1 to 3 do
30396: LD_ADDR_VAR 0 8
30400: PUSH
30401: DOUBLE
30402: LD_INT 1
30404: DEC
30405: ST_TO_ADDR
30406: LD_INT 3
30408: PUSH
30409: FOR_TO
30410: IFFALSE 30439
// AddResourceType ( base , i , sources [ i ] ) ;
30412: LD_VAR 0 15
30416: PPUSH
30417: LD_VAR 0 8
30421: PPUSH
30422: LD_VAR 0 5
30426: PUSH
30427: LD_VAR 0 8
30431: ARRAY
30432: PPUSH
30433: CALL_OW 276
30437: GO 30409
30439: POP
30440: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30441: LD_ADDR_VAR 0 18
30445: PUSH
30446: LD_VAR 0 15
30450: PPUSH
30451: LD_VAR 0 2
30455: PPUSH
30456: LD_INT 1
30458: PPUSH
30459: CALL 29701 0 3
30463: ST_TO_ADDR
// InitHc ;
30464: CALL_OW 19
// InitUc ;
30468: CALL_OW 18
// uc_side := side ;
30472: LD_ADDR_OWVAR 20
30476: PUSH
30477: LD_VAR 0 16
30481: ST_TO_ADDR
// uc_nation := nation ;
30482: LD_ADDR_OWVAR 21
30486: PUSH
30487: LD_VAR 0 17
30491: ST_TO_ADDR
// if buildings then
30492: LD_VAR 0 18
30496: IFFALSE 31818
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30498: LD_ADDR_VAR 0 19
30502: PUSH
30503: LD_VAR 0 18
30507: PPUSH
30508: LD_INT 2
30510: PUSH
30511: LD_INT 30
30513: PUSH
30514: LD_INT 29
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 30
30523: PUSH
30524: LD_INT 30
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: PPUSH
30536: CALL_OW 72
30540: ST_TO_ADDR
// if tmp then
30541: LD_VAR 0 19
30545: IFFALSE 30593
// for i in tmp do
30547: LD_ADDR_VAR 0 8
30551: PUSH
30552: LD_VAR 0 19
30556: PUSH
30557: FOR_IN
30558: IFFALSE 30591
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30560: LD_VAR 0 8
30564: PPUSH
30565: CALL_OW 250
30569: PPUSH
30570: LD_VAR 0 8
30574: PPUSH
30575: CALL_OW 251
30579: PPUSH
30580: LD_VAR 0 16
30584: PPUSH
30585: CALL_OW 441
30589: GO 30557
30591: POP
30592: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30593: LD_VAR 0 18
30597: PPUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 30
30603: PUSH
30604: LD_INT 32
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 30
30613: PUSH
30614: LD_INT 33
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: LIST
30625: PPUSH
30626: CALL_OW 72
30630: IFFALSE 30718
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30632: LD_ADDR_VAR 0 8
30636: PUSH
30637: LD_VAR 0 18
30641: PPUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: LD_INT 32
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 30
30657: PUSH
30658: LD_INT 33
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: PPUSH
30670: CALL_OW 72
30674: PUSH
30675: FOR_IN
30676: IFFALSE 30716
// begin if not GetBWeapon ( i ) then
30678: LD_VAR 0 8
30682: PPUSH
30683: CALL_OW 269
30687: NOT
30688: IFFALSE 30714
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30690: LD_VAR 0 8
30694: PPUSH
30695: LD_VAR 0 8
30699: PPUSH
30700: LD_VAR 0 2
30704: PPUSH
30705: CALL 31964 0 2
30709: PPUSH
30710: CALL_OW 431
// end ;
30714: GO 30675
30716: POP
30717: POP
// end ; for i = 1 to personel do
30718: LD_ADDR_VAR 0 8
30722: PUSH
30723: DOUBLE
30724: LD_INT 1
30726: DEC
30727: ST_TO_ADDR
30728: LD_VAR 0 6
30732: PUSH
30733: FOR_TO
30734: IFFALSE 31798
// begin if i > 4 then
30736: LD_VAR 0 8
30740: PUSH
30741: LD_INT 4
30743: GREATER
30744: IFFALSE 30748
// break ;
30746: GO 31798
// case i of 1 :
30748: LD_VAR 0 8
30752: PUSH
30753: LD_INT 1
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30841
30761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30762: LD_ADDR_VAR 0 12
30766: PUSH
30767: LD_VAR 0 18
30771: PPUSH
30772: LD_INT 22
30774: PUSH
30775: LD_VAR 0 16
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 58
30786: PUSH
30787: EMPTY
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 30
30795: PUSH
30796: LD_INT 32
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 30
30805: PUSH
30806: LD_INT 4
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 30
30815: PUSH
30816: LD_INT 5
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: PPUSH
30834: CALL_OW 72
30838: ST_TO_ADDR
30839: GO 31063
30841: LD_INT 2
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30849
30847: GO 30911
30849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30850: LD_ADDR_VAR 0 12
30854: PUSH
30855: LD_VAR 0 18
30859: PPUSH
30860: LD_INT 22
30862: PUSH
30863: LD_VAR 0 16
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: LD_INT 30
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 30
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PPUSH
30904: CALL_OW 72
30908: ST_TO_ADDR
30909: GO 31063
30911: LD_INT 3
30913: DOUBLE
30914: EQUAL
30915: IFTRUE 30919
30917: GO 30981
30919: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30920: LD_ADDR_VAR 0 12
30924: PUSH
30925: LD_VAR 0 18
30929: PPUSH
30930: LD_INT 22
30932: PUSH
30933: LD_VAR 0 16
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: LD_INT 30
30947: PUSH
30948: LD_INT 2
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 30
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PPUSH
30974: CALL_OW 72
30978: ST_TO_ADDR
30979: GO 31063
30981: LD_INT 4
30983: DOUBLE
30984: EQUAL
30985: IFTRUE 30989
30987: GO 31062
30989: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30990: LD_ADDR_VAR 0 12
30994: PUSH
30995: LD_VAR 0 18
30999: PPUSH
31000: LD_INT 22
31002: PUSH
31003: LD_VAR 0 16
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: LD_INT 30
31017: PUSH
31018: LD_INT 6
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 30
31027: PUSH
31028: LD_INT 7
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 30
31037: PUSH
31038: LD_INT 8
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PPUSH
31055: CALL_OW 72
31059: ST_TO_ADDR
31060: GO 31063
31062: POP
// if i = 1 then
31063: LD_VAR 0 8
31067: PUSH
31068: LD_INT 1
31070: EQUAL
31071: IFFALSE 31182
// begin tmp := [ ] ;
31073: LD_ADDR_VAR 0 19
31077: PUSH
31078: EMPTY
31079: ST_TO_ADDR
// for j in f do
31080: LD_ADDR_VAR 0 9
31084: PUSH
31085: LD_VAR 0 12
31089: PUSH
31090: FOR_IN
31091: IFFALSE 31164
// if GetBType ( j ) = b_bunker then
31093: LD_VAR 0 9
31097: PPUSH
31098: CALL_OW 266
31102: PUSH
31103: LD_INT 32
31105: EQUAL
31106: IFFALSE 31133
// tmp := Insert ( tmp , 1 , j ) else
31108: LD_ADDR_VAR 0 19
31112: PUSH
31113: LD_VAR 0 19
31117: PPUSH
31118: LD_INT 1
31120: PPUSH
31121: LD_VAR 0 9
31125: PPUSH
31126: CALL_OW 2
31130: ST_TO_ADDR
31131: GO 31162
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31133: LD_ADDR_VAR 0 19
31137: PUSH
31138: LD_VAR 0 19
31142: PPUSH
31143: LD_VAR 0 19
31147: PUSH
31148: LD_INT 1
31150: PLUS
31151: PPUSH
31152: LD_VAR 0 9
31156: PPUSH
31157: CALL_OW 2
31161: ST_TO_ADDR
31162: GO 31090
31164: POP
31165: POP
// if tmp then
31166: LD_VAR 0 19
31170: IFFALSE 31182
// f := tmp ;
31172: LD_ADDR_VAR 0 12
31176: PUSH
31177: LD_VAR 0 19
31181: ST_TO_ADDR
// end ; x := personel [ i ] ;
31182: LD_ADDR_VAR 0 13
31186: PUSH
31187: LD_VAR 0 6
31191: PUSH
31192: LD_VAR 0 8
31196: ARRAY
31197: ST_TO_ADDR
// if x = - 1 then
31198: LD_VAR 0 13
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: EQUAL
31207: IFFALSE 31416
// begin for j in f do
31209: LD_ADDR_VAR 0 9
31213: PUSH
31214: LD_VAR 0 12
31218: PUSH
31219: FOR_IN
31220: IFFALSE 31412
// repeat InitHc ;
31222: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31226: LD_VAR 0 9
31230: PPUSH
31231: CALL_OW 266
31235: PUSH
31236: LD_INT 5
31238: EQUAL
31239: IFFALSE 31309
// begin if UnitsInside ( j ) < 3 then
31241: LD_VAR 0 9
31245: PPUSH
31246: CALL_OW 313
31250: PUSH
31251: LD_INT 3
31253: LESS
31254: IFFALSE 31290
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31256: LD_INT 0
31258: PPUSH
31259: LD_INT 5
31261: PUSH
31262: LD_INT 8
31264: PUSH
31265: LD_INT 9
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: PUSH
31273: LD_VAR 0 17
31277: ARRAY
31278: PPUSH
31279: LD_VAR 0 4
31283: PPUSH
31284: CALL_OW 380
31288: GO 31307
// PrepareHuman ( false , i , skill ) ;
31290: LD_INT 0
31292: PPUSH
31293: LD_VAR 0 8
31297: PPUSH
31298: LD_VAR 0 4
31302: PPUSH
31303: CALL_OW 380
// end else
31307: GO 31326
// PrepareHuman ( false , i , skill ) ;
31309: LD_INT 0
31311: PPUSH
31312: LD_VAR 0 8
31316: PPUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: CALL_OW 380
// un := CreateHuman ;
31326: LD_ADDR_VAR 0 14
31330: PUSH
31331: CALL_OW 44
31335: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31336: LD_ADDR_VAR 0 7
31340: PUSH
31341: LD_VAR 0 7
31345: PPUSH
31346: LD_INT 1
31348: PPUSH
31349: LD_VAR 0 14
31353: PPUSH
31354: CALL_OW 2
31358: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31359: LD_VAR 0 14
31363: PPUSH
31364: LD_VAR 0 9
31368: PPUSH
31369: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31373: LD_VAR 0 9
31377: PPUSH
31378: CALL_OW 313
31382: PUSH
31383: LD_INT 6
31385: EQUAL
31386: PUSH
31387: LD_VAR 0 9
31391: PPUSH
31392: CALL_OW 266
31396: PUSH
31397: LD_INT 32
31399: PUSH
31400: LD_INT 31
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: IN
31407: OR
31408: IFFALSE 31222
31410: GO 31219
31412: POP
31413: POP
// end else
31414: GO 31796
// for j = 1 to x do
31416: LD_ADDR_VAR 0 9
31420: PUSH
31421: DOUBLE
31422: LD_INT 1
31424: DEC
31425: ST_TO_ADDR
31426: LD_VAR 0 13
31430: PUSH
31431: FOR_TO
31432: IFFALSE 31794
// begin InitHc ;
31434: CALL_OW 19
// if not f then
31438: LD_VAR 0 12
31442: NOT
31443: IFFALSE 31532
// begin PrepareHuman ( false , i , skill ) ;
31445: LD_INT 0
31447: PPUSH
31448: LD_VAR 0 8
31452: PPUSH
31453: LD_VAR 0 4
31457: PPUSH
31458: CALL_OW 380
// un := CreateHuman ;
31462: LD_ADDR_VAR 0 14
31466: PUSH
31467: CALL_OW 44
31471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31472: LD_ADDR_VAR 0 7
31476: PUSH
31477: LD_VAR 0 7
31481: PPUSH
31482: LD_INT 1
31484: PPUSH
31485: LD_VAR 0 14
31489: PPUSH
31490: CALL_OW 2
31494: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31495: LD_VAR 0 14
31499: PPUSH
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 250
31509: PPUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 251
31519: PPUSH
31520: LD_INT 10
31522: PPUSH
31523: LD_INT 0
31525: PPUSH
31526: CALL_OW 50
// continue ;
31530: GO 31431
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31532: LD_VAR 0 12
31536: PUSH
31537: LD_INT 1
31539: ARRAY
31540: PPUSH
31541: CALL_OW 313
31545: PUSH
31546: LD_VAR 0 12
31550: PUSH
31551: LD_INT 1
31553: ARRAY
31554: PPUSH
31555: CALL_OW 266
31559: PUSH
31560: LD_INT 32
31562: PUSH
31563: LD_INT 31
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: IN
31570: AND
31571: PUSH
31572: LD_VAR 0 12
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: CALL_OW 313
31585: PUSH
31586: LD_INT 6
31588: EQUAL
31589: OR
31590: IFFALSE 31610
// f := Delete ( f , 1 ) ;
31592: LD_ADDR_VAR 0 12
31596: PUSH
31597: LD_VAR 0 12
31601: PPUSH
31602: LD_INT 1
31604: PPUSH
31605: CALL_OW 3
31609: ST_TO_ADDR
// if not f then
31610: LD_VAR 0 12
31614: NOT
31615: IFFALSE 31633
// begin x := x + 2 ;
31617: LD_ADDR_VAR 0 13
31621: PUSH
31622: LD_VAR 0 13
31626: PUSH
31627: LD_INT 2
31629: PLUS
31630: ST_TO_ADDR
// continue ;
31631: GO 31431
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31633: LD_VAR 0 12
31637: PUSH
31638: LD_INT 1
31640: ARRAY
31641: PPUSH
31642: CALL_OW 266
31646: PUSH
31647: LD_INT 5
31649: EQUAL
31650: IFFALSE 31724
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31652: LD_VAR 0 12
31656: PUSH
31657: LD_INT 1
31659: ARRAY
31660: PPUSH
31661: CALL_OW 313
31665: PUSH
31666: LD_INT 3
31668: LESS
31669: IFFALSE 31705
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31671: LD_INT 0
31673: PPUSH
31674: LD_INT 5
31676: PUSH
31677: LD_INT 8
31679: PUSH
31680: LD_INT 9
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: PUSH
31688: LD_VAR 0 17
31692: ARRAY
31693: PPUSH
31694: LD_VAR 0 4
31698: PPUSH
31699: CALL_OW 380
31703: GO 31722
// PrepareHuman ( false , i , skill ) ;
31705: LD_INT 0
31707: PPUSH
31708: LD_VAR 0 8
31712: PPUSH
31713: LD_VAR 0 4
31717: PPUSH
31718: CALL_OW 380
// end else
31722: GO 31741
// PrepareHuman ( false , i , skill ) ;
31724: LD_INT 0
31726: PPUSH
31727: LD_VAR 0 8
31731: PPUSH
31732: LD_VAR 0 4
31736: PPUSH
31737: CALL_OW 380
// un := CreateHuman ;
31741: LD_ADDR_VAR 0 14
31745: PUSH
31746: CALL_OW 44
31750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31751: LD_ADDR_VAR 0 7
31755: PUSH
31756: LD_VAR 0 7
31760: PPUSH
31761: LD_INT 1
31763: PPUSH
31764: LD_VAR 0 14
31768: PPUSH
31769: CALL_OW 2
31773: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31774: LD_VAR 0 14
31778: PPUSH
31779: LD_VAR 0 12
31783: PUSH
31784: LD_INT 1
31786: ARRAY
31787: PPUSH
31788: CALL_OW 52
// end ;
31792: GO 31431
31794: POP
31795: POP
// end ;
31796: GO 30733
31798: POP
31799: POP
// result := result ^ buildings ;
31800: LD_ADDR_VAR 0 7
31804: PUSH
31805: LD_VAR 0 7
31809: PUSH
31810: LD_VAR 0 18
31814: ADD
31815: ST_TO_ADDR
// end else
31816: GO 31959
// begin for i = 1 to personel do
31818: LD_ADDR_VAR 0 8
31822: PUSH
31823: DOUBLE
31824: LD_INT 1
31826: DEC
31827: ST_TO_ADDR
31828: LD_VAR 0 6
31832: PUSH
31833: FOR_TO
31834: IFFALSE 31957
// begin if i > 4 then
31836: LD_VAR 0 8
31840: PUSH
31841: LD_INT 4
31843: GREATER
31844: IFFALSE 31848
// break ;
31846: GO 31957
// x := personel [ i ] ;
31848: LD_ADDR_VAR 0 13
31852: PUSH
31853: LD_VAR 0 6
31857: PUSH
31858: LD_VAR 0 8
31862: ARRAY
31863: ST_TO_ADDR
// if x = - 1 then
31864: LD_VAR 0 13
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: EQUAL
31873: IFFALSE 31877
// continue ;
31875: GO 31833
// PrepareHuman ( false , i , skill ) ;
31877: LD_INT 0
31879: PPUSH
31880: LD_VAR 0 8
31884: PPUSH
31885: LD_VAR 0 4
31889: PPUSH
31890: CALL_OW 380
// un := CreateHuman ;
31894: LD_ADDR_VAR 0 14
31898: PUSH
31899: CALL_OW 44
31903: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31904: LD_VAR 0 14
31908: PPUSH
31909: LD_VAR 0 1
31913: PPUSH
31914: CALL_OW 250
31918: PPUSH
31919: LD_VAR 0 1
31923: PPUSH
31924: CALL_OW 251
31928: PPUSH
31929: LD_INT 10
31931: PPUSH
31932: LD_INT 0
31934: PPUSH
31935: CALL_OW 50
// result := result ^ un ;
31939: LD_ADDR_VAR 0 7
31943: PUSH
31944: LD_VAR 0 7
31948: PUSH
31949: LD_VAR 0 14
31953: ADD
31954: ST_TO_ADDR
// end ;
31955: GO 31833
31957: POP
31958: POP
// end ; end ;
31959: LD_VAR 0 7
31963: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
31974: PPUSH
31975: PPUSH
31976: PPUSH
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
// result := false ;
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 0
31989: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31990: LD_VAR 0 1
31994: NOT
31995: PUSH
31996: LD_VAR 0 1
32000: PPUSH
32001: CALL_OW 266
32005: PUSH
32006: LD_INT 32
32008: PUSH
32009: LD_INT 33
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: IN
32016: NOT
32017: OR
32018: IFFALSE 32022
// exit ;
32020: GO 33161
// nat := GetNation ( tower ) ;
32022: LD_ADDR_VAR 0 12
32026: PUSH
32027: LD_VAR 0 1
32031: PPUSH
32032: CALL_OW 248
32036: ST_TO_ADDR
// side := GetSide ( tower ) ;
32037: LD_ADDR_VAR 0 16
32041: PUSH
32042: LD_VAR 0 1
32046: PPUSH
32047: CALL_OW 255
32051: ST_TO_ADDR
// x := GetX ( tower ) ;
32052: LD_ADDR_VAR 0 10
32056: PUSH
32057: LD_VAR 0 1
32061: PPUSH
32062: CALL_OW 250
32066: ST_TO_ADDR
// y := GetY ( tower ) ;
32067: LD_ADDR_VAR 0 11
32071: PUSH
32072: LD_VAR 0 1
32076: PPUSH
32077: CALL_OW 251
32081: ST_TO_ADDR
// if not x or not y then
32082: LD_VAR 0 10
32086: NOT
32087: PUSH
32088: LD_VAR 0 11
32092: NOT
32093: OR
32094: IFFALSE 32098
// exit ;
32096: GO 33161
// weapon := 0 ;
32098: LD_ADDR_VAR 0 18
32102: PUSH
32103: LD_INT 0
32105: ST_TO_ADDR
// fac_list := [ ] ;
32106: LD_ADDR_VAR 0 17
32110: PUSH
32111: EMPTY
32112: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32113: LD_ADDR_VAR 0 6
32117: PUSH
32118: LD_VAR 0 1
32122: PPUSH
32123: CALL_OW 274
32127: PPUSH
32128: LD_VAR 0 2
32132: PPUSH
32133: LD_INT 0
32135: PPUSH
32136: CALL 29701 0 3
32140: PPUSH
32141: LD_INT 30
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PPUSH
32151: CALL_OW 72
32155: ST_TO_ADDR
// if not factories then
32156: LD_VAR 0 6
32160: NOT
32161: IFFALSE 32165
// exit ;
32163: GO 33161
// for i in factories do
32165: LD_ADDR_VAR 0 8
32169: PUSH
32170: LD_VAR 0 6
32174: PUSH
32175: FOR_IN
32176: IFFALSE 32201
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32178: LD_ADDR_VAR 0 17
32182: PUSH
32183: LD_VAR 0 17
32187: PUSH
32188: LD_VAR 0 8
32192: PPUSH
32193: CALL_OW 478
32197: UNION
32198: ST_TO_ADDR
32199: GO 32175
32201: POP
32202: POP
// if not fac_list then
32203: LD_VAR 0 17
32207: NOT
32208: IFFALSE 32212
// exit ;
32210: GO 33161
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32212: LD_ADDR_VAR 0 5
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 5
32222: PUSH
32223: LD_INT 9
32225: PUSH
32226: LD_INT 10
32228: PUSH
32229: LD_INT 6
32231: PUSH
32232: LD_INT 7
32234: PUSH
32235: LD_INT 11
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 27
32249: PUSH
32250: LD_INT 28
32252: PUSH
32253: LD_INT 26
32255: PUSH
32256: LD_INT 30
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 43
32267: PUSH
32268: LD_INT 44
32270: PUSH
32271: LD_INT 46
32273: PUSH
32274: LD_INT 45
32276: PUSH
32277: LD_INT 47
32279: PUSH
32280: LD_INT 49
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: PUSH
32296: LD_VAR 0 12
32300: ARRAY
32301: ST_TO_ADDR
// for i in list do
32302: LD_ADDR_VAR 0 8
32306: PUSH
32307: LD_VAR 0 5
32311: PUSH
32312: FOR_IN
32313: IFFALSE 32346
// if not i in fac_list then
32315: LD_VAR 0 8
32319: PUSH
32320: LD_VAR 0 17
32324: IN
32325: NOT
32326: IFFALSE 32344
// list := list diff i ;
32328: LD_ADDR_VAR 0 5
32332: PUSH
32333: LD_VAR 0 5
32337: PUSH
32338: LD_VAR 0 8
32342: DIFF
32343: ST_TO_ADDR
32344: GO 32312
32346: POP
32347: POP
// if not list then
32348: LD_VAR 0 5
32352: NOT
32353: IFFALSE 32357
// exit ;
32355: GO 33161
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32357: LD_VAR 0 12
32361: PUSH
32362: LD_INT 3
32364: EQUAL
32365: PUSH
32366: LD_INT 49
32368: PUSH
32369: LD_VAR 0 5
32373: IN
32374: AND
32375: PUSH
32376: LD_INT 31
32378: PPUSH
32379: LD_VAR 0 16
32383: PPUSH
32384: CALL_OW 321
32388: PUSH
32389: LD_INT 2
32391: EQUAL
32392: AND
32393: IFFALSE 32453
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32395: LD_INT 22
32397: PUSH
32398: LD_VAR 0 16
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 35
32409: PUSH
32410: LD_INT 49
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 91
32419: PUSH
32420: LD_VAR 0 1
32424: PUSH
32425: LD_INT 10
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: NOT
32443: IFFALSE 32453
// weapon := ru_time_lapser ;
32445: LD_ADDR_VAR 0 18
32449: PUSH
32450: LD_INT 49
32452: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32453: LD_VAR 0 12
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: IN
32468: PUSH
32469: LD_INT 11
32471: PUSH
32472: LD_VAR 0 5
32476: IN
32477: PUSH
32478: LD_INT 30
32480: PUSH
32481: LD_VAR 0 5
32485: IN
32486: OR
32487: AND
32488: PUSH
32489: LD_INT 6
32491: PPUSH
32492: LD_VAR 0 16
32496: PPUSH
32497: CALL_OW 321
32501: PUSH
32502: LD_INT 2
32504: EQUAL
32505: AND
32506: IFFALSE 32671
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32508: LD_INT 22
32510: PUSH
32511: LD_VAR 0 16
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: LD_INT 35
32525: PUSH
32526: LD_INT 11
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 35
32535: PUSH
32536: LD_INT 30
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 91
32550: PUSH
32551: LD_VAR 0 1
32555: PUSH
32556: LD_INT 18
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: PPUSH
32569: CALL_OW 69
32573: NOT
32574: PUSH
32575: LD_INT 22
32577: PUSH
32578: LD_VAR 0 16
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 30
32592: PUSH
32593: LD_INT 32
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 30
32602: PUSH
32603: LD_INT 33
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 91
32617: PUSH
32618: LD_VAR 0 1
32622: PUSH
32623: LD_INT 12
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: PUSH
32636: EMPTY
32637: LIST
32638: PPUSH
32639: CALL_OW 69
32643: PUSH
32644: LD_INT 2
32646: GREATER
32647: AND
32648: IFFALSE 32671
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32650: LD_ADDR_VAR 0 18
32654: PUSH
32655: LD_INT 11
32657: PUSH
32658: LD_INT 30
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_VAR 0 12
32669: ARRAY
32670: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32671: LD_VAR 0 18
32675: NOT
32676: PUSH
32677: LD_INT 40
32679: PPUSH
32680: LD_VAR 0 16
32684: PPUSH
32685: CALL_OW 321
32689: PUSH
32690: LD_INT 2
32692: EQUAL
32693: AND
32694: PUSH
32695: LD_INT 7
32697: PUSH
32698: LD_VAR 0 5
32702: IN
32703: PUSH
32704: LD_INT 28
32706: PUSH
32707: LD_VAR 0 5
32711: IN
32712: OR
32713: PUSH
32714: LD_INT 45
32716: PUSH
32717: LD_VAR 0 5
32721: IN
32722: OR
32723: AND
32724: IFFALSE 32978
// begin hex := GetHexInfo ( x , y ) ;
32726: LD_ADDR_VAR 0 4
32730: PUSH
32731: LD_VAR 0 10
32735: PPUSH
32736: LD_VAR 0 11
32740: PPUSH
32741: CALL_OW 546
32745: ST_TO_ADDR
// if hex [ 1 ] then
32746: LD_VAR 0 4
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: IFFALSE 32758
// exit ;
32756: GO 33161
// height := hex [ 2 ] ;
32758: LD_ADDR_VAR 0 15
32762: PUSH
32763: LD_VAR 0 4
32767: PUSH
32768: LD_INT 2
32770: ARRAY
32771: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32772: LD_ADDR_VAR 0 14
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: LD_INT 5
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
// for i in tmp do
32795: LD_ADDR_VAR 0 8
32799: PUSH
32800: LD_VAR 0 14
32804: PUSH
32805: FOR_IN
32806: IFFALSE 32976
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32808: LD_ADDR_VAR 0 9
32812: PUSH
32813: LD_VAR 0 10
32817: PPUSH
32818: LD_VAR 0 8
32822: PPUSH
32823: LD_INT 5
32825: PPUSH
32826: CALL_OW 272
32830: PUSH
32831: LD_VAR 0 11
32835: PPUSH
32836: LD_VAR 0 8
32840: PPUSH
32841: LD_INT 5
32843: PPUSH
32844: CALL_OW 273
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32853: LD_VAR 0 9
32857: PUSH
32858: LD_INT 1
32860: ARRAY
32861: PPUSH
32862: LD_VAR 0 9
32866: PUSH
32867: LD_INT 2
32869: ARRAY
32870: PPUSH
32871: CALL_OW 488
32875: IFFALSE 32974
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32877: LD_ADDR_VAR 0 4
32881: PUSH
32882: LD_VAR 0 9
32886: PUSH
32887: LD_INT 1
32889: ARRAY
32890: PPUSH
32891: LD_VAR 0 9
32895: PUSH
32896: LD_INT 2
32898: ARRAY
32899: PPUSH
32900: CALL_OW 546
32904: ST_TO_ADDR
// if hex [ 1 ] then
32905: LD_VAR 0 4
32909: PUSH
32910: LD_INT 1
32912: ARRAY
32913: IFFALSE 32917
// continue ;
32915: GO 32805
// h := hex [ 2 ] ;
32917: LD_ADDR_VAR 0 13
32921: PUSH
32922: LD_VAR 0 4
32926: PUSH
32927: LD_INT 2
32929: ARRAY
32930: ST_TO_ADDR
// if h + 7 < height then
32931: LD_VAR 0 13
32935: PUSH
32936: LD_INT 7
32938: PLUS
32939: PUSH
32940: LD_VAR 0 15
32944: LESS
32945: IFFALSE 32974
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32947: LD_ADDR_VAR 0 18
32951: PUSH
32952: LD_INT 7
32954: PUSH
32955: LD_INT 28
32957: PUSH
32958: LD_INT 45
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: PUSH
32966: LD_VAR 0 12
32970: ARRAY
32971: ST_TO_ADDR
// break ;
32972: GO 32976
// end ; end ; end ;
32974: GO 32805
32976: POP
32977: POP
// end ; if not weapon then
32978: LD_VAR 0 18
32982: NOT
32983: IFFALSE 33043
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32985: LD_ADDR_VAR 0 5
32989: PUSH
32990: LD_VAR 0 5
32994: PUSH
32995: LD_INT 11
32997: PUSH
32998: LD_INT 30
33000: PUSH
33001: LD_INT 49
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: DIFF
33009: ST_TO_ADDR
// if not list then
33010: LD_VAR 0 5
33014: NOT
33015: IFFALSE 33019
// exit ;
33017: GO 33161
// weapon := list [ rand ( 1 , list ) ] ;
33019: LD_ADDR_VAR 0 18
33023: PUSH
33024: LD_VAR 0 5
33028: PUSH
33029: LD_INT 1
33031: PPUSH
33032: LD_VAR 0 5
33036: PPUSH
33037: CALL_OW 12
33041: ARRAY
33042: ST_TO_ADDR
// end ; if weapon then
33043: LD_VAR 0 18
33047: IFFALSE 33161
// begin tmp := CostOfWeapon ( weapon ) ;
33049: LD_ADDR_VAR 0 14
33053: PUSH
33054: LD_VAR 0 18
33058: PPUSH
33059: CALL_OW 451
33063: ST_TO_ADDR
// j := GetBase ( tower ) ;
33064: LD_ADDR_VAR 0 9
33068: PUSH
33069: LD_VAR 0 1
33073: PPUSH
33074: CALL_OW 274
33078: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33079: LD_VAR 0 9
33083: PPUSH
33084: LD_INT 1
33086: PPUSH
33087: CALL_OW 275
33091: PUSH
33092: LD_VAR 0 14
33096: PUSH
33097: LD_INT 1
33099: ARRAY
33100: GREATEREQUAL
33101: PUSH
33102: LD_VAR 0 9
33106: PPUSH
33107: LD_INT 2
33109: PPUSH
33110: CALL_OW 275
33114: PUSH
33115: LD_VAR 0 14
33119: PUSH
33120: LD_INT 2
33122: ARRAY
33123: GREATEREQUAL
33124: AND
33125: PUSH
33126: LD_VAR 0 9
33130: PPUSH
33131: LD_INT 3
33133: PPUSH
33134: CALL_OW 275
33138: PUSH
33139: LD_VAR 0 14
33143: PUSH
33144: LD_INT 3
33146: ARRAY
33147: GREATEREQUAL
33148: AND
33149: IFFALSE 33161
// result := weapon ;
33151: LD_ADDR_VAR 0 3
33155: PUSH
33156: LD_VAR 0 18
33160: ST_TO_ADDR
// end ; end ;
33161: LD_VAR 0 3
33165: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
// result := true ;
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_INT 1
33177: ST_TO_ADDR
// if array1 = array2 then
33178: LD_VAR 0 1
33182: PUSH
33183: LD_VAR 0 2
33187: EQUAL
33188: IFFALSE 33248
// begin for i = 1 to array1 do
33190: LD_ADDR_VAR 0 4
33194: PUSH
33195: DOUBLE
33196: LD_INT 1
33198: DEC
33199: ST_TO_ADDR
33200: LD_VAR 0 1
33204: PUSH
33205: FOR_TO
33206: IFFALSE 33244
// if array1 [ i ] <> array2 [ i ] then
33208: LD_VAR 0 1
33212: PUSH
33213: LD_VAR 0 4
33217: ARRAY
33218: PUSH
33219: LD_VAR 0 2
33223: PUSH
33224: LD_VAR 0 4
33228: ARRAY
33229: NONEQUAL
33230: IFFALSE 33242
// begin result := false ;
33232: LD_ADDR_VAR 0 3
33236: PUSH
33237: LD_INT 0
33239: ST_TO_ADDR
// break ;
33240: GO 33244
// end ;
33242: GO 33205
33244: POP
33245: POP
// end else
33246: GO 33256
// result := false ;
33248: LD_ADDR_VAR 0 3
33252: PUSH
33253: LD_INT 0
33255: ST_TO_ADDR
// end ;
33256: LD_VAR 0 3
33260: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33261: LD_INT 0
33263: PPUSH
33264: PPUSH
// if not array1 or not array2 then
33265: LD_VAR 0 1
33269: NOT
33270: PUSH
33271: LD_VAR 0 2
33275: NOT
33276: OR
33277: IFFALSE 33281
// exit ;
33279: GO 33345
// result := true ;
33281: LD_ADDR_VAR 0 3
33285: PUSH
33286: LD_INT 1
33288: ST_TO_ADDR
// for i = 1 to array1 do
33289: LD_ADDR_VAR 0 4
33293: PUSH
33294: DOUBLE
33295: LD_INT 1
33297: DEC
33298: ST_TO_ADDR
33299: LD_VAR 0 1
33303: PUSH
33304: FOR_TO
33305: IFFALSE 33343
// if array1 [ i ] <> array2 [ i ] then
33307: LD_VAR 0 1
33311: PUSH
33312: LD_VAR 0 4
33316: ARRAY
33317: PUSH
33318: LD_VAR 0 2
33322: PUSH
33323: LD_VAR 0 4
33327: ARRAY
33328: NONEQUAL
33329: IFFALSE 33341
// begin result := false ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_INT 0
33338: ST_TO_ADDR
// break ;
33339: GO 33343
// end ;
33341: GO 33304
33343: POP
33344: POP
// end ;
33345: LD_VAR 0 3
33349: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33350: LD_INT 0
33352: PPUSH
33353: PPUSH
33354: PPUSH
// pom := GetBase ( fac ) ;
33355: LD_ADDR_VAR 0 5
33359: PUSH
33360: LD_VAR 0 1
33364: PPUSH
33365: CALL_OW 274
33369: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33370: LD_ADDR_VAR 0 4
33374: PUSH
33375: LD_VAR 0 2
33379: PUSH
33380: LD_INT 1
33382: ARRAY
33383: PPUSH
33384: LD_VAR 0 2
33388: PUSH
33389: LD_INT 2
33391: ARRAY
33392: PPUSH
33393: LD_VAR 0 2
33397: PUSH
33398: LD_INT 3
33400: ARRAY
33401: PPUSH
33402: LD_VAR 0 2
33406: PUSH
33407: LD_INT 4
33409: ARRAY
33410: PPUSH
33411: CALL_OW 449
33415: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33416: LD_ADDR_VAR 0 3
33420: PUSH
33421: LD_VAR 0 5
33425: PPUSH
33426: LD_INT 1
33428: PPUSH
33429: CALL_OW 275
33433: PUSH
33434: LD_VAR 0 4
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: GREATEREQUAL
33443: PUSH
33444: LD_VAR 0 5
33448: PPUSH
33449: LD_INT 2
33451: PPUSH
33452: CALL_OW 275
33456: PUSH
33457: LD_VAR 0 4
33461: PUSH
33462: LD_INT 2
33464: ARRAY
33465: GREATEREQUAL
33466: AND
33467: PUSH
33468: LD_VAR 0 5
33472: PPUSH
33473: LD_INT 3
33475: PPUSH
33476: CALL_OW 275
33480: PUSH
33481: LD_VAR 0 4
33485: PUSH
33486: LD_INT 3
33488: ARRAY
33489: GREATEREQUAL
33490: AND
33491: ST_TO_ADDR
// end ;
33492: LD_VAR 0 3
33496: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33497: LD_INT 0
33499: PPUSH
33500: PPUSH
33501: PPUSH
33502: PPUSH
// pom := GetBase ( building ) ;
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 274
33517: ST_TO_ADDR
// if not pom then
33518: LD_VAR 0 3
33522: NOT
33523: IFFALSE 33527
// exit ;
33525: GO 33697
// btype := GetBType ( building ) ;
33527: LD_ADDR_VAR 0 5
33531: PUSH
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 266
33541: ST_TO_ADDR
// if btype = b_armoury then
33542: LD_VAR 0 5
33546: PUSH
33547: LD_INT 4
33549: EQUAL
33550: IFFALSE 33560
// btype := b_barracks ;
33552: LD_ADDR_VAR 0 5
33556: PUSH
33557: LD_INT 5
33559: ST_TO_ADDR
// if btype = b_depot then
33560: LD_VAR 0 5
33564: PUSH
33565: LD_INT 0
33567: EQUAL
33568: IFFALSE 33578
// btype := b_warehouse ;
33570: LD_ADDR_VAR 0 5
33574: PUSH
33575: LD_INT 1
33577: ST_TO_ADDR
// if btype = b_workshop then
33578: LD_VAR 0 5
33582: PUSH
33583: LD_INT 2
33585: EQUAL
33586: IFFALSE 33596
// btype := b_factory ;
33588: LD_ADDR_VAR 0 5
33592: PUSH
33593: LD_INT 3
33595: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33596: LD_ADDR_VAR 0 4
33600: PUSH
33601: LD_VAR 0 5
33605: PPUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 248
33615: PPUSH
33616: CALL_OW 450
33620: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: LD_VAR 0 3
33630: PPUSH
33631: LD_INT 1
33633: PPUSH
33634: CALL_OW 275
33638: PUSH
33639: LD_VAR 0 4
33643: PUSH
33644: LD_INT 1
33646: ARRAY
33647: GREATEREQUAL
33648: PUSH
33649: LD_VAR 0 3
33653: PPUSH
33654: LD_INT 2
33656: PPUSH
33657: CALL_OW 275
33661: PUSH
33662: LD_VAR 0 4
33666: PUSH
33667: LD_INT 2
33669: ARRAY
33670: GREATEREQUAL
33671: AND
33672: PUSH
33673: LD_VAR 0 3
33677: PPUSH
33678: LD_INT 3
33680: PPUSH
33681: CALL_OW 275
33685: PUSH
33686: LD_VAR 0 4
33690: PUSH
33691: LD_INT 3
33693: ARRAY
33694: GREATEREQUAL
33695: AND
33696: ST_TO_ADDR
// end ;
33697: LD_VAR 0 2
33701: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33702: LD_INT 0
33704: PPUSH
33705: PPUSH
33706: PPUSH
// pom := GetBase ( building ) ;
33707: LD_ADDR_VAR 0 4
33711: PUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 274
33721: ST_TO_ADDR
// if not pom then
33722: LD_VAR 0 4
33726: NOT
33727: IFFALSE 33731
// exit ;
33729: GO 33832
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33731: LD_ADDR_VAR 0 5
33735: PUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 248
33750: PPUSH
33751: CALL_OW 450
33755: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33756: LD_ADDR_VAR 0 3
33760: PUSH
33761: LD_VAR 0 4
33765: PPUSH
33766: LD_INT 1
33768: PPUSH
33769: CALL_OW 275
33773: PUSH
33774: LD_VAR 0 5
33778: PUSH
33779: LD_INT 1
33781: ARRAY
33782: GREATEREQUAL
33783: PUSH
33784: LD_VAR 0 4
33788: PPUSH
33789: LD_INT 2
33791: PPUSH
33792: CALL_OW 275
33796: PUSH
33797: LD_VAR 0 5
33801: PUSH
33802: LD_INT 2
33804: ARRAY
33805: GREATEREQUAL
33806: AND
33807: PUSH
33808: LD_VAR 0 4
33812: PPUSH
33813: LD_INT 3
33815: PPUSH
33816: CALL_OW 275
33820: PUSH
33821: LD_VAR 0 5
33825: PUSH
33826: LD_INT 3
33828: ARRAY
33829: GREATEREQUAL
33830: AND
33831: ST_TO_ADDR
// end ;
33832: LD_VAR 0 3
33836: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33837: LD_INT 0
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
// result := false ;
33850: LD_ADDR_VAR 0 8
33854: PUSH
33855: LD_INT 0
33857: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33858: LD_VAR 0 5
33862: NOT
33863: PUSH
33864: LD_VAR 0 1
33868: NOT
33869: OR
33870: PUSH
33871: LD_VAR 0 2
33875: NOT
33876: OR
33877: PUSH
33878: LD_VAR 0 3
33882: NOT
33883: OR
33884: IFFALSE 33888
// exit ;
33886: GO 34702
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33888: LD_ADDR_VAR 0 14
33892: PUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: LD_VAR 0 2
33902: PPUSH
33903: LD_VAR 0 3
33907: PPUSH
33908: LD_VAR 0 4
33912: PPUSH
33913: LD_VAR 0 5
33917: PUSH
33918: LD_INT 1
33920: ARRAY
33921: PPUSH
33922: CALL_OW 248
33926: PPUSH
33927: LD_INT 0
33929: PPUSH
33930: CALL 35539 0 6
33934: ST_TO_ADDR
// if not hexes then
33935: LD_VAR 0 14
33939: NOT
33940: IFFALSE 33944
// exit ;
33942: GO 34702
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33944: LD_ADDR_VAR 0 17
33948: PUSH
33949: LD_VAR 0 5
33953: PPUSH
33954: LD_INT 22
33956: PUSH
33957: LD_VAR 0 13
33961: PPUSH
33962: CALL_OW 255
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 30
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PPUSH
34003: CALL_OW 72
34007: ST_TO_ADDR
// for i = 1 to hexes do
34008: LD_ADDR_VAR 0 9
34012: PUSH
34013: DOUBLE
34014: LD_INT 1
34016: DEC
34017: ST_TO_ADDR
34018: LD_VAR 0 14
34022: PUSH
34023: FOR_TO
34024: IFFALSE 34700
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34026: LD_ADDR_VAR 0 13
34030: PUSH
34031: LD_VAR 0 14
34035: PUSH
34036: LD_VAR 0 9
34040: ARRAY
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: LD_VAR 0 14
34050: PUSH
34051: LD_VAR 0 9
34055: ARRAY
34056: PUSH
34057: LD_INT 2
34059: ARRAY
34060: PPUSH
34061: CALL_OW 428
34065: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34066: LD_VAR 0 14
34070: PUSH
34071: LD_VAR 0 9
34075: ARRAY
34076: PUSH
34077: LD_INT 1
34079: ARRAY
34080: PPUSH
34081: LD_VAR 0 14
34085: PUSH
34086: LD_VAR 0 9
34090: ARRAY
34091: PUSH
34092: LD_INT 2
34094: ARRAY
34095: PPUSH
34096: CALL_OW 351
34100: PUSH
34101: LD_VAR 0 14
34105: PUSH
34106: LD_VAR 0 9
34110: ARRAY
34111: PUSH
34112: LD_INT 1
34114: ARRAY
34115: PPUSH
34116: LD_VAR 0 14
34120: PUSH
34121: LD_VAR 0 9
34125: ARRAY
34126: PUSH
34127: LD_INT 2
34129: ARRAY
34130: PPUSH
34131: CALL_OW 488
34135: NOT
34136: OR
34137: PUSH
34138: LD_VAR 0 13
34142: PPUSH
34143: CALL_OW 247
34147: PUSH
34148: LD_INT 3
34150: EQUAL
34151: OR
34152: IFFALSE 34158
// exit ;
34154: POP
34155: POP
34156: GO 34702
// if not tmp then
34158: LD_VAR 0 13
34162: NOT
34163: IFFALSE 34167
// continue ;
34165: GO 34023
// result := true ;
34167: LD_ADDR_VAR 0 8
34171: PUSH
34172: LD_INT 1
34174: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34175: LD_VAR 0 6
34179: PUSH
34180: LD_VAR 0 13
34184: PPUSH
34185: CALL_OW 247
34189: PUSH
34190: LD_INT 2
34192: EQUAL
34193: AND
34194: PUSH
34195: LD_VAR 0 13
34199: PPUSH
34200: CALL_OW 263
34204: PUSH
34205: LD_INT 1
34207: EQUAL
34208: AND
34209: IFFALSE 34373
// begin if IsDrivenBy ( tmp ) then
34211: LD_VAR 0 13
34215: PPUSH
34216: CALL_OW 311
34220: IFFALSE 34224
// continue ;
34222: GO 34023
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34224: LD_VAR 0 6
34228: PPUSH
34229: LD_INT 3
34231: PUSH
34232: LD_INT 60
34234: PUSH
34235: EMPTY
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 55
34247: PUSH
34248: EMPTY
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PPUSH
34259: CALL_OW 72
34263: IFFALSE 34371
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34265: LD_ADDR_VAR 0 18
34269: PUSH
34270: LD_VAR 0 6
34274: PPUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 60
34280: PUSH
34281: EMPTY
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 3
34290: PUSH
34291: LD_INT 55
34293: PUSH
34294: EMPTY
34295: LIST
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PPUSH
34305: CALL_OW 72
34309: PUSH
34310: LD_INT 1
34312: ARRAY
34313: ST_TO_ADDR
// if IsInUnit ( driver ) then
34314: LD_VAR 0 18
34318: PPUSH
34319: CALL_OW 310
34323: IFFALSE 34334
// ComExit ( driver ) ;
34325: LD_VAR 0 18
34329: PPUSH
34330: CALL 58723 0 1
// AddComEnterUnit ( driver , tmp ) ;
34334: LD_VAR 0 18
34338: PPUSH
34339: LD_VAR 0 13
34343: PPUSH
34344: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34348: LD_VAR 0 18
34352: PPUSH
34353: LD_VAR 0 7
34357: PPUSH
34358: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34362: LD_VAR 0 18
34366: PPUSH
34367: CALL_OW 181
// end ; continue ;
34371: GO 34023
// end ; if not cleaners or not tmp in cleaners then
34373: LD_VAR 0 6
34377: NOT
34378: PUSH
34379: LD_VAR 0 13
34383: PUSH
34384: LD_VAR 0 6
34388: IN
34389: NOT
34390: OR
34391: IFFALSE 34698
// begin if dep then
34393: LD_VAR 0 17
34397: IFFALSE 34533
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34399: LD_ADDR_VAR 0 16
34403: PUSH
34404: LD_VAR 0 17
34408: PUSH
34409: LD_INT 1
34411: ARRAY
34412: PPUSH
34413: CALL_OW 250
34417: PPUSH
34418: LD_VAR 0 17
34422: PUSH
34423: LD_INT 1
34425: ARRAY
34426: PPUSH
34427: CALL_OW 254
34431: PPUSH
34432: LD_INT 5
34434: PPUSH
34435: CALL_OW 272
34439: PUSH
34440: LD_VAR 0 17
34444: PUSH
34445: LD_INT 1
34447: ARRAY
34448: PPUSH
34449: CALL_OW 251
34453: PPUSH
34454: LD_VAR 0 17
34458: PUSH
34459: LD_INT 1
34461: ARRAY
34462: PPUSH
34463: CALL_OW 254
34467: PPUSH
34468: LD_INT 5
34470: PPUSH
34471: CALL_OW 273
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34480: LD_VAR 0 16
34484: PUSH
34485: LD_INT 1
34487: ARRAY
34488: PPUSH
34489: LD_VAR 0 16
34493: PUSH
34494: LD_INT 2
34496: ARRAY
34497: PPUSH
34498: CALL_OW 488
34502: IFFALSE 34533
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34504: LD_VAR 0 13
34508: PPUSH
34509: LD_VAR 0 16
34513: PUSH
34514: LD_INT 1
34516: ARRAY
34517: PPUSH
34518: LD_VAR 0 16
34522: PUSH
34523: LD_INT 2
34525: ARRAY
34526: PPUSH
34527: CALL_OW 111
// continue ;
34531: GO 34023
// end ; end ; r := GetDir ( tmp ) ;
34533: LD_ADDR_VAR 0 15
34537: PUSH
34538: LD_VAR 0 13
34542: PPUSH
34543: CALL_OW 254
34547: ST_TO_ADDR
// if r = 5 then
34548: LD_VAR 0 15
34552: PUSH
34553: LD_INT 5
34555: EQUAL
34556: IFFALSE 34566
// r := 0 ;
34558: LD_ADDR_VAR 0 15
34562: PUSH
34563: LD_INT 0
34565: ST_TO_ADDR
// for j = r to 5 do
34566: LD_ADDR_VAR 0 10
34570: PUSH
34571: DOUBLE
34572: LD_VAR 0 15
34576: DEC
34577: ST_TO_ADDR
34578: LD_INT 5
34580: PUSH
34581: FOR_TO
34582: IFFALSE 34696
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34584: LD_ADDR_VAR 0 11
34588: PUSH
34589: LD_VAR 0 13
34593: PPUSH
34594: CALL_OW 250
34598: PPUSH
34599: LD_VAR 0 10
34603: PPUSH
34604: LD_INT 2
34606: PPUSH
34607: CALL_OW 272
34611: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34612: LD_ADDR_VAR 0 12
34616: PUSH
34617: LD_VAR 0 13
34621: PPUSH
34622: CALL_OW 251
34626: PPUSH
34627: LD_VAR 0 10
34631: PPUSH
34632: LD_INT 2
34634: PPUSH
34635: CALL_OW 273
34639: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34640: LD_VAR 0 11
34644: PPUSH
34645: LD_VAR 0 12
34649: PPUSH
34650: CALL_OW 488
34654: PUSH
34655: LD_VAR 0 11
34659: PPUSH
34660: LD_VAR 0 12
34664: PPUSH
34665: CALL_OW 428
34669: NOT
34670: AND
34671: IFFALSE 34694
// begin ComMoveXY ( tmp , _x , _y ) ;
34673: LD_VAR 0 13
34677: PPUSH
34678: LD_VAR 0 11
34682: PPUSH
34683: LD_VAR 0 12
34687: PPUSH
34688: CALL_OW 111
// break ;
34692: GO 34696
// end ; end ;
34694: GO 34581
34696: POP
34697: POP
// end ; end ;
34698: GO 34023
34700: POP
34701: POP
// end ;
34702: LD_VAR 0 8
34706: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34707: LD_INT 0
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
// result := false ;
34719: LD_ADDR_VAR 0 6
34723: PUSH
34724: LD_INT 0
34726: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34727: LD_VAR 0 1
34731: NOT
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 266
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: IN
34753: NOT
34754: OR
34755: PUSH
34756: LD_VAR 0 2
34760: NOT
34761: OR
34762: PUSH
34763: LD_VAR 0 5
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: LD_INT 3
34779: PUSH
34780: LD_INT 4
34782: PUSH
34783: LD_INT 5
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: IN
34794: NOT
34795: OR
34796: PUSH
34797: LD_VAR 0 3
34801: PPUSH
34802: LD_VAR 0 4
34806: PPUSH
34807: CALL_OW 488
34811: NOT
34812: OR
34813: IFFALSE 34817
// exit ;
34815: GO 35534
// pom := GetBase ( depot ) ;
34817: LD_ADDR_VAR 0 10
34821: PUSH
34822: LD_VAR 0 1
34826: PPUSH
34827: CALL_OW 274
34831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34832: LD_ADDR_VAR 0 11
34836: PUSH
34837: LD_VAR 0 2
34841: PPUSH
34842: LD_VAR 0 1
34846: PPUSH
34847: CALL_OW 248
34851: PPUSH
34852: CALL_OW 450
34856: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34857: LD_VAR 0 10
34861: PPUSH
34862: LD_INT 1
34864: PPUSH
34865: CALL_OW 275
34869: PUSH
34870: LD_VAR 0 11
34874: PUSH
34875: LD_INT 1
34877: ARRAY
34878: GREATEREQUAL
34879: PUSH
34880: LD_VAR 0 10
34884: PPUSH
34885: LD_INT 2
34887: PPUSH
34888: CALL_OW 275
34892: PUSH
34893: LD_VAR 0 11
34897: PUSH
34898: LD_INT 2
34900: ARRAY
34901: GREATEREQUAL
34902: AND
34903: PUSH
34904: LD_VAR 0 10
34908: PPUSH
34909: LD_INT 3
34911: PPUSH
34912: CALL_OW 275
34916: PUSH
34917: LD_VAR 0 11
34921: PUSH
34922: LD_INT 3
34924: ARRAY
34925: GREATEREQUAL
34926: AND
34927: NOT
34928: IFFALSE 34932
// exit ;
34930: GO 35534
// if GetBType ( depot ) = b_depot then
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 266
34941: PUSH
34942: LD_INT 0
34944: EQUAL
34945: IFFALSE 34957
// dist := 28 else
34947: LD_ADDR_VAR 0 14
34951: PUSH
34952: LD_INT 28
34954: ST_TO_ADDR
34955: GO 34965
// dist := 36 ;
34957: LD_ADDR_VAR 0 14
34961: PUSH
34962: LD_INT 36
34964: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34965: LD_VAR 0 1
34969: PPUSH
34970: LD_VAR 0 3
34974: PPUSH
34975: LD_VAR 0 4
34979: PPUSH
34980: CALL_OW 297
34984: PUSH
34985: LD_VAR 0 14
34989: GREATER
34990: IFFALSE 34994
// exit ;
34992: GO 35534
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34994: LD_ADDR_VAR 0 12
34998: PUSH
34999: LD_VAR 0 2
35003: PPUSH
35004: LD_VAR 0 3
35008: PPUSH
35009: LD_VAR 0 4
35013: PPUSH
35014: LD_VAR 0 5
35018: PPUSH
35019: LD_VAR 0 1
35023: PPUSH
35024: CALL_OW 248
35028: PPUSH
35029: LD_INT 0
35031: PPUSH
35032: CALL 35539 0 6
35036: ST_TO_ADDR
// if not hexes then
35037: LD_VAR 0 12
35041: NOT
35042: IFFALSE 35046
// exit ;
35044: GO 35534
// hex := GetHexInfo ( x , y ) ;
35046: LD_ADDR_VAR 0 15
35050: PUSH
35051: LD_VAR 0 3
35055: PPUSH
35056: LD_VAR 0 4
35060: PPUSH
35061: CALL_OW 546
35065: ST_TO_ADDR
// if hex [ 1 ] then
35066: LD_VAR 0 15
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: IFFALSE 35078
// exit ;
35076: GO 35534
// height := hex [ 2 ] ;
35078: LD_ADDR_VAR 0 13
35082: PUSH
35083: LD_VAR 0 15
35087: PUSH
35088: LD_INT 2
35090: ARRAY
35091: ST_TO_ADDR
// for i = 1 to hexes do
35092: LD_ADDR_VAR 0 7
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 12
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35438
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35110: LD_VAR 0 12
35114: PUSH
35115: LD_VAR 0 7
35119: ARRAY
35120: PUSH
35121: LD_INT 1
35123: ARRAY
35124: PPUSH
35125: LD_VAR 0 12
35129: PUSH
35130: LD_VAR 0 7
35134: ARRAY
35135: PUSH
35136: LD_INT 2
35138: ARRAY
35139: PPUSH
35140: CALL_OW 488
35144: NOT
35145: PUSH
35146: LD_VAR 0 12
35150: PUSH
35151: LD_VAR 0 7
35155: ARRAY
35156: PUSH
35157: LD_INT 1
35159: ARRAY
35160: PPUSH
35161: LD_VAR 0 12
35165: PUSH
35166: LD_VAR 0 7
35170: ARRAY
35171: PUSH
35172: LD_INT 2
35174: ARRAY
35175: PPUSH
35176: CALL_OW 428
35180: PUSH
35181: LD_INT 0
35183: GREATER
35184: OR
35185: PUSH
35186: LD_VAR 0 12
35190: PUSH
35191: LD_VAR 0 7
35195: ARRAY
35196: PUSH
35197: LD_INT 1
35199: ARRAY
35200: PPUSH
35201: LD_VAR 0 12
35205: PUSH
35206: LD_VAR 0 7
35210: ARRAY
35211: PUSH
35212: LD_INT 2
35214: ARRAY
35215: PPUSH
35216: CALL_OW 351
35220: OR
35221: IFFALSE 35227
// exit ;
35223: POP
35224: POP
35225: GO 35534
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35227: LD_ADDR_VAR 0 8
35231: PUSH
35232: LD_VAR 0 12
35236: PUSH
35237: LD_VAR 0 7
35241: ARRAY
35242: PUSH
35243: LD_INT 1
35245: ARRAY
35246: PPUSH
35247: LD_VAR 0 12
35251: PUSH
35252: LD_VAR 0 7
35256: ARRAY
35257: PUSH
35258: LD_INT 2
35260: ARRAY
35261: PPUSH
35262: CALL_OW 546
35266: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35267: LD_VAR 0 8
35271: PUSH
35272: LD_INT 1
35274: ARRAY
35275: PUSH
35276: LD_VAR 0 8
35280: PUSH
35281: LD_INT 2
35283: ARRAY
35284: PUSH
35285: LD_VAR 0 13
35289: PUSH
35290: LD_INT 2
35292: PLUS
35293: GREATER
35294: OR
35295: PUSH
35296: LD_VAR 0 8
35300: PUSH
35301: LD_INT 2
35303: ARRAY
35304: PUSH
35305: LD_VAR 0 13
35309: PUSH
35310: LD_INT 2
35312: MINUS
35313: LESS
35314: OR
35315: PUSH
35316: LD_VAR 0 8
35320: PUSH
35321: LD_INT 3
35323: ARRAY
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 8
35330: PUSH
35331: LD_INT 9
35333: PUSH
35334: LD_INT 10
35336: PUSH
35337: LD_INT 11
35339: PUSH
35340: LD_INT 12
35342: PUSH
35343: LD_INT 13
35345: PUSH
35346: LD_INT 16
35348: PUSH
35349: LD_INT 17
35351: PUSH
35352: LD_INT 18
35354: PUSH
35355: LD_INT 19
35357: PUSH
35358: LD_INT 20
35360: PUSH
35361: LD_INT 21
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: IN
35379: NOT
35380: OR
35381: PUSH
35382: LD_VAR 0 8
35386: PUSH
35387: LD_INT 5
35389: ARRAY
35390: NOT
35391: OR
35392: PUSH
35393: LD_VAR 0 8
35397: PUSH
35398: LD_INT 6
35400: ARRAY
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 7
35410: PUSH
35411: LD_INT 9
35413: PUSH
35414: LD_INT 10
35416: PUSH
35417: LD_INT 11
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: IN
35428: NOT
35429: OR
35430: IFFALSE 35436
// exit ;
35432: POP
35433: POP
35434: GO 35534
// end ;
35436: GO 35107
35438: POP
35439: POP
// side := GetSide ( depot ) ;
35440: LD_ADDR_VAR 0 9
35444: PUSH
35445: LD_VAR 0 1
35449: PPUSH
35450: CALL_OW 255
35454: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35455: LD_VAR 0 9
35459: PPUSH
35460: LD_VAR 0 3
35464: PPUSH
35465: LD_VAR 0 4
35469: PPUSH
35470: LD_INT 20
35472: PPUSH
35473: CALL 27855 0 4
35477: PUSH
35478: LD_INT 4
35480: ARRAY
35481: IFFALSE 35485
// exit ;
35483: GO 35534
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35485: LD_VAR 0 2
35489: PUSH
35490: LD_INT 29
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: IN
35500: PUSH
35501: LD_VAR 0 3
35505: PPUSH
35506: LD_VAR 0 4
35510: PPUSH
35511: LD_VAR 0 9
35515: PPUSH
35516: CALL_OW 440
35520: NOT
35521: AND
35522: IFFALSE 35526
// exit ;
35524: GO 35534
// result := true ;
35526: LD_ADDR_VAR 0 6
35530: PUSH
35531: LD_INT 1
35533: ST_TO_ADDR
// end ;
35534: LD_VAR 0 6
35538: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
35551: PPUSH
35552: PPUSH
35553: PPUSH
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
35572: PPUSH
35573: PPUSH
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
35580: PPUSH
35581: PPUSH
35582: PPUSH
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
// result = [ ] ;
35599: LD_ADDR_VAR 0 7
35603: PUSH
35604: EMPTY
35605: ST_TO_ADDR
// temp_list = [ ] ;
35606: LD_ADDR_VAR 0 9
35610: PUSH
35611: EMPTY
35612: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35613: LD_VAR 0 4
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 3
35629: PUSH
35630: LD_INT 4
35632: PUSH
35633: LD_INT 5
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: IN
35644: NOT
35645: PUSH
35646: LD_VAR 0 1
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: IN
35661: PUSH
35662: LD_VAR 0 5
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 3
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: IN
35681: NOT
35682: AND
35683: OR
35684: IFFALSE 35688
// exit ;
35686: GO 54079
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35688: LD_VAR 0 1
35692: PUSH
35693: LD_INT 6
35695: PUSH
35696: LD_INT 7
35698: PUSH
35699: LD_INT 8
35701: PUSH
35702: LD_INT 13
35704: PUSH
35705: LD_INT 12
35707: PUSH
35708: LD_INT 15
35710: PUSH
35711: LD_INT 11
35713: PUSH
35714: LD_INT 14
35716: PUSH
35717: LD_INT 10
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: IN
35731: IFFALSE 35741
// btype = b_lab ;
35733: LD_ADDR_VAR 0 1
35737: PUSH
35738: LD_INT 6
35740: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35741: LD_VAR 0 6
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: IN
35760: NOT
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: LD_INT 3
35778: PUSH
35779: LD_INT 6
35781: PUSH
35782: LD_INT 36
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: LD_INT 5
35790: PUSH
35791: LD_INT 31
35793: PUSH
35794: LD_INT 32
35796: PUSH
35797: LD_INT 33
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: IN
35813: NOT
35814: PUSH
35815: LD_VAR 0 6
35819: PUSH
35820: LD_INT 1
35822: EQUAL
35823: AND
35824: OR
35825: PUSH
35826: LD_VAR 0 1
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: IN
35841: NOT
35842: PUSH
35843: LD_VAR 0 6
35847: PUSH
35848: LD_INT 2
35850: EQUAL
35851: AND
35852: OR
35853: IFFALSE 35863
// mode = 0 ;
35855: LD_ADDR_VAR 0 6
35859: PUSH
35860: LD_INT 0
35862: ST_TO_ADDR
// case mode of 0 :
35863: LD_VAR 0 6
35867: PUSH
35868: LD_INT 0
35870: DOUBLE
35871: EQUAL
35872: IFTRUE 35876
35874: GO 47329
35876: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35877: LD_ADDR_VAR 0 11
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 2
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 3
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36070: LD_ADDR_VAR 0 12
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: NEG
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 3
36227: NEG
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36266: LD_ADDR_VAR 0 13
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: LD_INT 3
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: NEG
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 3
36437: NEG
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36465: LD_ADDR_VAR 0 14
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: LD_INT 2
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 3
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 3
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36661: LD_ADDR_VAR 0 15
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36854: LD_ADDR_VAR 0 16
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 3
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 3
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37047: LD_ADDR_VAR 0 17
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: NEG
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 2
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37277: LD_ADDR_VAR 0 18
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: NEG
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37507: LD_ADDR_VAR 0 19
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: NEG
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37737: LD_ADDR_VAR 0 20
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37967: LD_ADDR_VAR 0 21
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 2
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: NEG
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: LD_INT 2
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38197: LD_ADDR_VAR 0 22
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 2
38384: NEG
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38427: LD_ADDR_VAR 0 23
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: NEG
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 3
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38707: LD_ADDR_VAR 0 24
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38983: LD_ADDR_VAR 0 25
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 2
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: NEG
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 3
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39257: LD_ADDR_VAR 0 26
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: NEG
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 3
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: LD_INT 3
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39533: LD_ADDR_VAR 0 27
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39813: LD_ADDR_VAR 0 28
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: LD_INT 2
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 3
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 3
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 3
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40095: LD_ADDR_VAR 0 29
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: NEG
40286: PUSH
40287: LD_INT 3
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40374: LD_ADDR_VAR 0 30
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 2
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 3
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 3
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: NEG
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 3
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40652: LD_ADDR_VAR 0 31
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 3
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 3
40895: NEG
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40930: LD_ADDR_VAR 0 32
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 3
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 3
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41208: LD_ADDR_VAR 0 33
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 3
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 3
41452: NEG
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41487: LD_ADDR_VAR 0 34
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 3
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41767: LD_ADDR_VAR 0 35
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41879: LD_ADDR_VAR 0 36
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41991: LD_ADDR_VAR 0 37
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42103: LD_ADDR_VAR 0 38
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42215: LD_ADDR_VAR 0 39
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42327: LD_ADDR_VAR 0 40
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42439: LD_ADDR_VAR 0 41
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 3
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 3
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42789: LD_ADDR_VAR 0 42
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: LD_INT 3
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 3
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 3
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 3
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43139: LD_ADDR_VAR 0 43
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 3
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43487: LD_ADDR_VAR 0 44
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43837: LD_ADDR_VAR 0 45
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 3
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 3
44134: NEG
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 3
44146: NEG
44147: PUSH
44148: LD_INT 3
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44187: LD_ADDR_VAR 0 46
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44535: LD_ADDR_VAR 0 47
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44686: LD_ADDR_VAR 0 48
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44833: LD_ADDR_VAR 0 49
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44977: LD_ADDR_VAR 0 50
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45121: LD_ADDR_VAR 0 51
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45268: LD_ADDR_VAR 0 52
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45419: LD_ADDR_VAR 0 53
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45649: LD_ADDR_VAR 0 54
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45879: LD_ADDR_VAR 0 55
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46109: LD_ADDR_VAR 0 56
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46339: LD_ADDR_VAR 0 57
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46569: LD_ADDR_VAR 0 58
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46799: LD_ADDR_VAR 0 59
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46887: LD_ADDR_VAR 0 60
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46975: LD_ADDR_VAR 0 61
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47063: LD_ADDR_VAR 0 62
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47151: LD_ADDR_VAR 0 63
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47239: LD_ADDR_VAR 0 64
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: ST_TO_ADDR
// end ; 1 :
47327: GO 53224
47329: LD_INT 1
47331: DOUBLE
47332: EQUAL
47333: IFTRUE 47337
47335: GO 49960
47337: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47338: LD_ADDR_VAR 0 11
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47382: LD_ADDR_VAR 0 12
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47423: LD_ADDR_VAR 0 13
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47463: LD_ADDR_VAR 0 14
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47504: LD_ADDR_VAR 0 15
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 3
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47548: LD_ADDR_VAR 0 16
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: NEG
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 3
47579: NEG
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47594: LD_ADDR_VAR 0 17
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 3
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47638: LD_ADDR_VAR 0 18
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47679: LD_ADDR_VAR 0 19
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47719: LD_ADDR_VAR 0 20
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47760: LD_ADDR_VAR 0 21
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 3
47778: NEG
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 3
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47804: LD_ADDR_VAR 0 22
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 3
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 3
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47850: LD_ADDR_VAR 0 23
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 4
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47894: LD_ADDR_VAR 0 24
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 4
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47935: LD_ADDR_VAR 0 25
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 4
47952: PUSH
47953: LD_INT 3
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47975: LD_ADDR_VAR 0 26
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 4
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48016: LD_ADDR_VAR 0 27
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 4
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: LIST
48059: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48060: LD_ADDR_VAR 0 28
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 3
48079: NEG
48080: PUSH
48081: LD_INT 4
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 4
48091: NEG
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48106: LD_ADDR_VAR 0 29
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 4
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 4
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 5
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 5
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 4
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 6
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 6
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 5
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48261: LD_ADDR_VAR 0 30
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 3
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 4
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 4
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 4
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 5
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 5
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 5
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 6
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 6
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48404: LD_ADDR_VAR 0 31
48408: PUSH
48409: LD_INT 3
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 4
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 4
48451: PUSH
48452: LD_INT 4
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: LD_INT 4
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 5
48471: PUSH
48472: LD_INT 4
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 5
48481: PUSH
48482: LD_INT 5
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 4
48491: PUSH
48492: LD_INT 5
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 6
48501: PUSH
48502: LD_INT 5
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 6
48511: PUSH
48512: LD_INT 6
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 5
48521: PUSH
48522: LD_INT 6
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48543: LD_ADDR_VAR 0 32
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 4
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 4
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 5
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 5
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 4
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 6
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 6
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 5
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48686: LD_ADDR_VAR 0 33
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 4
48749: NEG
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 4
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 5
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 5
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 5
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 6
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 6
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48841: LD_ADDR_VAR 0 34
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 3
48860: NEG
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: LD_INT 4
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 4
48896: NEG
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 4
48908: NEG
48909: PUSH
48910: LD_INT 4
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 4
48920: NEG
48921: PUSH
48922: LD_INT 5
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 5
48932: NEG
48933: PUSH
48934: LD_INT 4
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 5
48944: NEG
48945: PUSH
48946: LD_INT 5
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 5
48956: NEG
48957: PUSH
48958: LD_INT 6
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 6
48968: NEG
48969: PUSH
48970: LD_INT 5
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 6
48980: NEG
48981: PUSH
48982: LD_INT 6
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49004: LD_ADDR_VAR 0 41
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49048: LD_ADDR_VAR 0 42
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49089: LD_ADDR_VAR 0 43
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49129: LD_ADDR_VAR 0 44
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49170: LD_ADDR_VAR 0 45
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49214: LD_ADDR_VAR 0 46
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 3
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49260: LD_ADDR_VAR 0 47
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 3
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49293: LD_ADDR_VAR 0 48
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49324: LD_ADDR_VAR 0 49
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49353: LD_ADDR_VAR 0 50
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49382: LD_ADDR_VAR 0 51
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49413: LD_ADDR_VAR 0 52
49417: PUSH
49418: LD_INT 3
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: NEG
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49446: LD_ADDR_VAR 0 53
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49490: LD_ADDR_VAR 0 54
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49531: LD_ADDR_VAR 0 55
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 3
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 3
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49571: LD_ADDR_VAR 0 56
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 3
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 3
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49612: LD_ADDR_VAR 0 57
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49656: LD_ADDR_VAR 0 58
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 3
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49702: LD_ADDR_VAR 0 59
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49746: LD_ADDR_VAR 0 60
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49787: LD_ADDR_VAR 0 61
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49827: LD_ADDR_VAR 0 62
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49868: LD_ADDR_VAR 0 63
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49912: LD_ADDR_VAR 0 64
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// end ; 2 :
49958: GO 53224
49960: LD_INT 2
49962: DOUBLE
49963: EQUAL
49964: IFTRUE 49968
49966: GO 53223
49968: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49969: LD_ADDR_VAR 0 29
49973: PUSH
49974: LD_INT 4
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 5
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 5
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 4
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 5
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 4
50099: PUSH
50100: LD_INT 4
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: LD_INT 4
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 2
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 4
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 4
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 4
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 5
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 5
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 4
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 5
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 4
50308: NEG
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 4
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 4
50331: NEG
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 4
50354: NEG
50355: PUSH
50356: LD_INT 4
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 4
50366: NEG
50367: PUSH
50368: LD_INT 5
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 4
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: LD_INT 3
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: NEG
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 5
50414: NEG
50415: PUSH
50416: LD_INT 4
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 5
50426: NEG
50427: PUSH
50428: LD_INT 5
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: LD_INT 5
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 5
50450: NEG
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50507: LD_ADDR_VAR 0 30
50511: PUSH
50512: LD_INT 4
50514: PUSH
50515: LD_INT 4
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 4
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 5
50534: PUSH
50535: LD_INT 4
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 5
50544: PUSH
50545: LD_INT 5
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 4
50554: PUSH
50555: LD_INT 5
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: LD_INT 4
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 5
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 5
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 4
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 4
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 4
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 4
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 4
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 5
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 5
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 5
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: NEG
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 4
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 4
50859: NEG
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 4
50871: NEG
50872: PUSH
50873: LD_INT 4
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 4
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 4
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 4
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 5
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 4
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 4
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 5
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 3
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 5
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51054: LD_ADDR_VAR 0 31
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 4
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: LD_INT 4
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 5
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 5
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 4
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 4
51210: NEG
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 4
51233: NEG
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: LD_INT 4
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 4
51268: NEG
51269: PUSH
51270: LD_INT 5
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: LD_INT 4
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 4
51304: NEG
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 5
51316: NEG
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 5
51328: NEG
51329: PUSH
51330: LD_INT 5
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 5
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 5
51352: NEG
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 4
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: LD_INT 4
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 4
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 5
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 5
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 4
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 5
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51604: LD_ADDR_VAR 0 32
51608: PUSH
51609: LD_INT 4
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 4
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 4
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 5
51667: NEG
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 5
51678: NEG
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 5
51690: NEG
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 4
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 3
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 4
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 4
51785: NEG
51786: PUSH
51787: LD_INT 4
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 4
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 4
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 4
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 5
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 4
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 3
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 5
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 3
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: NEG
51912: PUSH
51913: LD_INT 5
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 4
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 4
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 4
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 4
52016: PUSH
52017: LD_INT 4
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 4
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 5
52036: PUSH
52037: LD_INT 4
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 5
52046: PUSH
52047: LD_INT 5
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 4
52056: PUSH
52057: LD_INT 5
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 5
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 5
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52151: LD_ADDR_VAR 0 33
52155: PUSH
52156: LD_INT 4
52158: NEG
52159: PUSH
52160: LD_INT 4
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 4
52170: NEG
52171: PUSH
52172: LD_INT 5
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: LD_INT 4
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 4
52206: NEG
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 5
52218: NEG
52219: PUSH
52220: LD_INT 4
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 5
52230: NEG
52231: PUSH
52232: LD_INT 5
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: LD_INT 5
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 5
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 4
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 4
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: LD_INT 4
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 4
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 4
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 5
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 5
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 4
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 3
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 5
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 4
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 4
52491: PUSH
52492: LD_INT 4
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: LD_INT 4
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 4
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: LD_INT 4
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 4
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 5
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 4
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 5
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52689: LD_ADDR_VAR 0 34
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 4
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 5
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 4
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 4
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 5
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: LD_INT 5
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 4
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 4
52891: PUSH
52892: LD_INT 4
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 4
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 5
52911: PUSH
52912: LD_INT 4
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 5
52921: PUSH
52922: LD_INT 5
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 4
52931: PUSH
52932: LD_INT 5
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 4
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 5
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 5
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 4
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 4
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 4
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 4
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 4
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 3
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 4
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 5
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 5
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 5
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: NEG
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// end ; end ;
53221: GO 53224
53223: POP
// case btype of b_depot , b_warehouse :
53224: LD_VAR 0 1
53228: PUSH
53229: LD_INT 0
53231: DOUBLE
53232: EQUAL
53233: IFTRUE 53243
53235: LD_INT 1
53237: DOUBLE
53238: EQUAL
53239: IFTRUE 53243
53241: GO 53444
53243: POP
// case nation of nation_american :
53244: LD_VAR 0 5
53248: PUSH
53249: LD_INT 1
53251: DOUBLE
53252: EQUAL
53253: IFTRUE 53257
53255: GO 53313
53257: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53258: LD_ADDR_VAR 0 9
53262: PUSH
53263: LD_VAR 0 11
53267: PUSH
53268: LD_VAR 0 12
53272: PUSH
53273: LD_VAR 0 13
53277: PUSH
53278: LD_VAR 0 14
53282: PUSH
53283: LD_VAR 0 15
53287: PUSH
53288: LD_VAR 0 16
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: PUSH
53301: LD_VAR 0 4
53305: PUSH
53306: LD_INT 1
53308: PLUS
53309: ARRAY
53310: ST_TO_ADDR
53311: GO 53442
53313: LD_INT 2
53315: DOUBLE
53316: EQUAL
53317: IFTRUE 53321
53319: GO 53377
53321: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53322: LD_ADDR_VAR 0 9
53326: PUSH
53327: LD_VAR 0 17
53331: PUSH
53332: LD_VAR 0 18
53336: PUSH
53337: LD_VAR 0 19
53341: PUSH
53342: LD_VAR 0 20
53346: PUSH
53347: LD_VAR 0 21
53351: PUSH
53352: LD_VAR 0 22
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: PUSH
53365: LD_VAR 0 4
53369: PUSH
53370: LD_INT 1
53372: PLUS
53373: ARRAY
53374: ST_TO_ADDR
53375: GO 53442
53377: LD_INT 3
53379: DOUBLE
53380: EQUAL
53381: IFTRUE 53385
53383: GO 53441
53385: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53386: LD_ADDR_VAR 0 9
53390: PUSH
53391: LD_VAR 0 23
53395: PUSH
53396: LD_VAR 0 24
53400: PUSH
53401: LD_VAR 0 25
53405: PUSH
53406: LD_VAR 0 26
53410: PUSH
53411: LD_VAR 0 27
53415: PUSH
53416: LD_VAR 0 28
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: PUSH
53429: LD_VAR 0 4
53433: PUSH
53434: LD_INT 1
53436: PLUS
53437: ARRAY
53438: ST_TO_ADDR
53439: GO 53442
53441: POP
53442: GO 53997
53444: LD_INT 2
53446: DOUBLE
53447: EQUAL
53448: IFTRUE 53458
53450: LD_INT 3
53452: DOUBLE
53453: EQUAL
53454: IFTRUE 53458
53456: GO 53514
53458: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53459: LD_ADDR_VAR 0 9
53463: PUSH
53464: LD_VAR 0 29
53468: PUSH
53469: LD_VAR 0 30
53473: PUSH
53474: LD_VAR 0 31
53478: PUSH
53479: LD_VAR 0 32
53483: PUSH
53484: LD_VAR 0 33
53488: PUSH
53489: LD_VAR 0 34
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: PUSH
53502: LD_VAR 0 4
53506: PUSH
53507: LD_INT 1
53509: PLUS
53510: ARRAY
53511: ST_TO_ADDR
53512: GO 53997
53514: LD_INT 16
53516: DOUBLE
53517: EQUAL
53518: IFTRUE 53576
53520: LD_INT 17
53522: DOUBLE
53523: EQUAL
53524: IFTRUE 53576
53526: LD_INT 18
53528: DOUBLE
53529: EQUAL
53530: IFTRUE 53576
53532: LD_INT 19
53534: DOUBLE
53535: EQUAL
53536: IFTRUE 53576
53538: LD_INT 22
53540: DOUBLE
53541: EQUAL
53542: IFTRUE 53576
53544: LD_INT 20
53546: DOUBLE
53547: EQUAL
53548: IFTRUE 53576
53550: LD_INT 21
53552: DOUBLE
53553: EQUAL
53554: IFTRUE 53576
53556: LD_INT 23
53558: DOUBLE
53559: EQUAL
53560: IFTRUE 53576
53562: LD_INT 24
53564: DOUBLE
53565: EQUAL
53566: IFTRUE 53576
53568: LD_INT 25
53570: DOUBLE
53571: EQUAL
53572: IFTRUE 53576
53574: GO 53632
53576: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53577: LD_ADDR_VAR 0 9
53581: PUSH
53582: LD_VAR 0 35
53586: PUSH
53587: LD_VAR 0 36
53591: PUSH
53592: LD_VAR 0 37
53596: PUSH
53597: LD_VAR 0 38
53601: PUSH
53602: LD_VAR 0 39
53606: PUSH
53607: LD_VAR 0 40
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: PUSH
53620: LD_VAR 0 4
53624: PUSH
53625: LD_INT 1
53627: PLUS
53628: ARRAY
53629: ST_TO_ADDR
53630: GO 53997
53632: LD_INT 6
53634: DOUBLE
53635: EQUAL
53636: IFTRUE 53688
53638: LD_INT 7
53640: DOUBLE
53641: EQUAL
53642: IFTRUE 53688
53644: LD_INT 8
53646: DOUBLE
53647: EQUAL
53648: IFTRUE 53688
53650: LD_INT 13
53652: DOUBLE
53653: EQUAL
53654: IFTRUE 53688
53656: LD_INT 12
53658: DOUBLE
53659: EQUAL
53660: IFTRUE 53688
53662: LD_INT 15
53664: DOUBLE
53665: EQUAL
53666: IFTRUE 53688
53668: LD_INT 11
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53688
53674: LD_INT 14
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53688
53680: LD_INT 10
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53688
53686: GO 53744
53688: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53689: LD_ADDR_VAR 0 9
53693: PUSH
53694: LD_VAR 0 41
53698: PUSH
53699: LD_VAR 0 42
53703: PUSH
53704: LD_VAR 0 43
53708: PUSH
53709: LD_VAR 0 44
53713: PUSH
53714: LD_VAR 0 45
53718: PUSH
53719: LD_VAR 0 46
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: PUSH
53732: LD_VAR 0 4
53736: PUSH
53737: LD_INT 1
53739: PLUS
53740: ARRAY
53741: ST_TO_ADDR
53742: GO 53997
53744: LD_INT 36
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53752
53750: GO 53808
53752: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53753: LD_ADDR_VAR 0 9
53757: PUSH
53758: LD_VAR 0 47
53762: PUSH
53763: LD_VAR 0 48
53767: PUSH
53768: LD_VAR 0 49
53772: PUSH
53773: LD_VAR 0 50
53777: PUSH
53778: LD_VAR 0 51
53782: PUSH
53783: LD_VAR 0 52
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: PUSH
53796: LD_VAR 0 4
53800: PUSH
53801: LD_INT 1
53803: PLUS
53804: ARRAY
53805: ST_TO_ADDR
53806: GO 53997
53808: LD_INT 4
53810: DOUBLE
53811: EQUAL
53812: IFTRUE 53834
53814: LD_INT 5
53816: DOUBLE
53817: EQUAL
53818: IFTRUE 53834
53820: LD_INT 34
53822: DOUBLE
53823: EQUAL
53824: IFTRUE 53834
53826: LD_INT 37
53828: DOUBLE
53829: EQUAL
53830: IFTRUE 53834
53832: GO 53890
53834: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53835: LD_ADDR_VAR 0 9
53839: PUSH
53840: LD_VAR 0 53
53844: PUSH
53845: LD_VAR 0 54
53849: PUSH
53850: LD_VAR 0 55
53854: PUSH
53855: LD_VAR 0 56
53859: PUSH
53860: LD_VAR 0 57
53864: PUSH
53865: LD_VAR 0 58
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: PUSH
53878: LD_VAR 0 4
53882: PUSH
53883: LD_INT 1
53885: PLUS
53886: ARRAY
53887: ST_TO_ADDR
53888: GO 53997
53890: LD_INT 31
53892: DOUBLE
53893: EQUAL
53894: IFTRUE 53940
53896: LD_INT 32
53898: DOUBLE
53899: EQUAL
53900: IFTRUE 53940
53902: LD_INT 33
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53940
53908: LD_INT 27
53910: DOUBLE
53911: EQUAL
53912: IFTRUE 53940
53914: LD_INT 26
53916: DOUBLE
53917: EQUAL
53918: IFTRUE 53940
53920: LD_INT 28
53922: DOUBLE
53923: EQUAL
53924: IFTRUE 53940
53926: LD_INT 29
53928: DOUBLE
53929: EQUAL
53930: IFTRUE 53940
53932: LD_INT 30
53934: DOUBLE
53935: EQUAL
53936: IFTRUE 53940
53938: GO 53996
53940: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53941: LD_ADDR_VAR 0 9
53945: PUSH
53946: LD_VAR 0 59
53950: PUSH
53951: LD_VAR 0 60
53955: PUSH
53956: LD_VAR 0 61
53960: PUSH
53961: LD_VAR 0 62
53965: PUSH
53966: LD_VAR 0 63
53970: PUSH
53971: LD_VAR 0 64
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: PUSH
53984: LD_VAR 0 4
53988: PUSH
53989: LD_INT 1
53991: PLUS
53992: ARRAY
53993: ST_TO_ADDR
53994: GO 53997
53996: POP
// temp_list2 = [ ] ;
53997: LD_ADDR_VAR 0 10
54001: PUSH
54002: EMPTY
54003: ST_TO_ADDR
// for i in temp_list do
54004: LD_ADDR_VAR 0 8
54008: PUSH
54009: LD_VAR 0 9
54013: PUSH
54014: FOR_IN
54015: IFFALSE 54067
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54017: LD_ADDR_VAR 0 10
54021: PUSH
54022: LD_VAR 0 10
54026: PUSH
54027: LD_VAR 0 8
54031: PUSH
54032: LD_INT 1
54034: ARRAY
54035: PUSH
54036: LD_VAR 0 2
54040: PLUS
54041: PUSH
54042: LD_VAR 0 8
54046: PUSH
54047: LD_INT 2
54049: ARRAY
54050: PUSH
54051: LD_VAR 0 3
54055: PLUS
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: ADD
54064: ST_TO_ADDR
54065: GO 54014
54067: POP
54068: POP
// result = temp_list2 ;
54069: LD_ADDR_VAR 0 7
54073: PUSH
54074: LD_VAR 0 10
54078: ST_TO_ADDR
// end ;
54079: LD_VAR 0 7
54083: RET
// export function EnemyInRange ( unit , dist ) ; begin
54084: LD_INT 0
54086: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54087: LD_ADDR_VAR 0 3
54091: PUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: CALL_OW 255
54101: PPUSH
54102: LD_VAR 0 1
54106: PPUSH
54107: CALL_OW 250
54111: PPUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: CALL_OW 251
54121: PPUSH
54122: LD_VAR 0 2
54126: PPUSH
54127: CALL 27855 0 4
54131: PUSH
54132: LD_INT 4
54134: ARRAY
54135: ST_TO_ADDR
// end ;
54136: LD_VAR 0 3
54140: RET
// export function PlayerSeeMe ( unit ) ; begin
54141: LD_INT 0
54143: PPUSH
// result := See ( your_side , unit ) ;
54144: LD_ADDR_VAR 0 2
54148: PUSH
54149: LD_OWVAR 2
54153: PPUSH
54154: LD_VAR 0 1
54158: PPUSH
54159: CALL_OW 292
54163: ST_TO_ADDR
// end ;
54164: LD_VAR 0 2
54168: RET
// export function ReverseDir ( unit ) ; begin
54169: LD_INT 0
54171: PPUSH
// if not unit then
54172: LD_VAR 0 1
54176: NOT
54177: IFFALSE 54181
// exit ;
54179: GO 54204
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54181: LD_ADDR_VAR 0 2
54185: PUSH
54186: LD_VAR 0 1
54190: PPUSH
54191: CALL_OW 254
54195: PUSH
54196: LD_INT 3
54198: PLUS
54199: PUSH
54200: LD_INT 6
54202: MOD
54203: ST_TO_ADDR
// end ;
54204: LD_VAR 0 2
54208: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54209: LD_INT 0
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
// if not hexes then
54216: LD_VAR 0 2
54220: NOT
54221: IFFALSE 54225
// exit ;
54223: GO 54373
// dist := 9999 ;
54225: LD_ADDR_VAR 0 5
54229: PUSH
54230: LD_INT 9999
54232: ST_TO_ADDR
// for i = 1 to hexes do
54233: LD_ADDR_VAR 0 4
54237: PUSH
54238: DOUBLE
54239: LD_INT 1
54241: DEC
54242: ST_TO_ADDR
54243: LD_VAR 0 2
54247: PUSH
54248: FOR_TO
54249: IFFALSE 54361
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54251: LD_VAR 0 1
54255: PPUSH
54256: LD_VAR 0 2
54260: PUSH
54261: LD_VAR 0 4
54265: ARRAY
54266: PUSH
54267: LD_INT 1
54269: ARRAY
54270: PPUSH
54271: LD_VAR 0 2
54275: PUSH
54276: LD_VAR 0 4
54280: ARRAY
54281: PUSH
54282: LD_INT 2
54284: ARRAY
54285: PPUSH
54286: CALL_OW 297
54290: PUSH
54291: LD_VAR 0 5
54295: LESS
54296: IFFALSE 54359
// begin hex := hexes [ i ] ;
54298: LD_ADDR_VAR 0 7
54302: PUSH
54303: LD_VAR 0 2
54307: PUSH
54308: LD_VAR 0 4
54312: ARRAY
54313: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54314: LD_ADDR_VAR 0 5
54318: PUSH
54319: LD_VAR 0 1
54323: PPUSH
54324: LD_VAR 0 2
54328: PUSH
54329: LD_VAR 0 4
54333: ARRAY
54334: PUSH
54335: LD_INT 1
54337: ARRAY
54338: PPUSH
54339: LD_VAR 0 2
54343: PUSH
54344: LD_VAR 0 4
54348: ARRAY
54349: PUSH
54350: LD_INT 2
54352: ARRAY
54353: PPUSH
54354: CALL_OW 297
54358: ST_TO_ADDR
// end ; end ;
54359: GO 54248
54361: POP
54362: POP
// result := hex ;
54363: LD_ADDR_VAR 0 3
54367: PUSH
54368: LD_VAR 0 7
54372: ST_TO_ADDR
// end ;
54373: LD_VAR 0 3
54377: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54378: LD_INT 0
54380: PPUSH
54381: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54382: LD_VAR 0 1
54386: NOT
54387: PUSH
54388: LD_VAR 0 1
54392: PUSH
54393: LD_INT 21
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 23
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PPUSH
54417: CALL_OW 69
54421: IN
54422: NOT
54423: OR
54424: IFFALSE 54428
// exit ;
54426: GO 54475
// for i = 1 to 3 do
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: DOUBLE
54434: LD_INT 1
54436: DEC
54437: ST_TO_ADDR
54438: LD_INT 3
54440: PUSH
54441: FOR_TO
54442: IFFALSE 54473
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54444: LD_VAR 0 1
54448: PPUSH
54449: CALL_OW 250
54453: PPUSH
54454: LD_VAR 0 1
54458: PPUSH
54459: CALL_OW 251
54463: PPUSH
54464: LD_INT 1
54466: PPUSH
54467: CALL_OW 453
54471: GO 54441
54473: POP
54474: POP
// end ;
54475: LD_VAR 0 2
54479: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54480: LD_INT 0
54482: PPUSH
54483: PPUSH
54484: PPUSH
54485: PPUSH
54486: PPUSH
54487: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54488: LD_VAR 0 1
54492: NOT
54493: PUSH
54494: LD_VAR 0 2
54498: NOT
54499: OR
54500: PUSH
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 314
54510: OR
54511: IFFALSE 54515
// exit ;
54513: GO 54956
// x := GetX ( enemy_unit ) ;
54515: LD_ADDR_VAR 0 7
54519: PUSH
54520: LD_VAR 0 2
54524: PPUSH
54525: CALL_OW 250
54529: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54530: LD_ADDR_VAR 0 8
54534: PUSH
54535: LD_VAR 0 2
54539: PPUSH
54540: CALL_OW 251
54544: ST_TO_ADDR
// if not x or not y then
54545: LD_VAR 0 7
54549: NOT
54550: PUSH
54551: LD_VAR 0 8
54555: NOT
54556: OR
54557: IFFALSE 54561
// exit ;
54559: GO 54956
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54561: LD_ADDR_VAR 0 6
54565: PUSH
54566: LD_VAR 0 7
54570: PPUSH
54571: LD_INT 0
54573: PPUSH
54574: LD_INT 4
54576: PPUSH
54577: CALL_OW 272
54581: PUSH
54582: LD_VAR 0 8
54586: PPUSH
54587: LD_INT 0
54589: PPUSH
54590: LD_INT 4
54592: PPUSH
54593: CALL_OW 273
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_VAR 0 7
54606: PPUSH
54607: LD_INT 1
54609: PPUSH
54610: LD_INT 4
54612: PPUSH
54613: CALL_OW 272
54617: PUSH
54618: LD_VAR 0 8
54622: PPUSH
54623: LD_INT 1
54625: PPUSH
54626: LD_INT 4
54628: PPUSH
54629: CALL_OW 273
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_VAR 0 7
54642: PPUSH
54643: LD_INT 2
54645: PPUSH
54646: LD_INT 4
54648: PPUSH
54649: CALL_OW 272
54653: PUSH
54654: LD_VAR 0 8
54658: PPUSH
54659: LD_INT 2
54661: PPUSH
54662: LD_INT 4
54664: PPUSH
54665: CALL_OW 273
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_VAR 0 7
54678: PPUSH
54679: LD_INT 3
54681: PPUSH
54682: LD_INT 4
54684: PPUSH
54685: CALL_OW 272
54689: PUSH
54690: LD_VAR 0 8
54694: PPUSH
54695: LD_INT 3
54697: PPUSH
54698: LD_INT 4
54700: PPUSH
54701: CALL_OW 273
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_VAR 0 7
54714: PPUSH
54715: LD_INT 4
54717: PPUSH
54718: LD_INT 4
54720: PPUSH
54721: CALL_OW 272
54725: PUSH
54726: LD_VAR 0 8
54730: PPUSH
54731: LD_INT 4
54733: PPUSH
54734: LD_INT 4
54736: PPUSH
54737: CALL_OW 273
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_VAR 0 7
54750: PPUSH
54751: LD_INT 5
54753: PPUSH
54754: LD_INT 4
54756: PPUSH
54757: CALL_OW 272
54761: PUSH
54762: LD_VAR 0 8
54766: PPUSH
54767: LD_INT 5
54769: PPUSH
54770: LD_INT 4
54772: PPUSH
54773: CALL_OW 273
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// for i = tmp downto 1 do
54790: LD_ADDR_VAR 0 4
54794: PUSH
54795: DOUBLE
54796: LD_VAR 0 6
54800: INC
54801: ST_TO_ADDR
54802: LD_INT 1
54804: PUSH
54805: FOR_DOWNTO
54806: IFFALSE 54907
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54808: LD_VAR 0 6
54812: PUSH
54813: LD_VAR 0 4
54817: ARRAY
54818: PUSH
54819: LD_INT 1
54821: ARRAY
54822: PPUSH
54823: LD_VAR 0 6
54827: PUSH
54828: LD_VAR 0 4
54832: ARRAY
54833: PUSH
54834: LD_INT 2
54836: ARRAY
54837: PPUSH
54838: CALL_OW 488
54842: NOT
54843: PUSH
54844: LD_VAR 0 6
54848: PUSH
54849: LD_VAR 0 4
54853: ARRAY
54854: PUSH
54855: LD_INT 1
54857: ARRAY
54858: PPUSH
54859: LD_VAR 0 6
54863: PUSH
54864: LD_VAR 0 4
54868: ARRAY
54869: PUSH
54870: LD_INT 2
54872: ARRAY
54873: PPUSH
54874: CALL_OW 428
54878: PUSH
54879: LD_INT 0
54881: NONEQUAL
54882: OR
54883: IFFALSE 54905
// tmp := Delete ( tmp , i ) ;
54885: LD_ADDR_VAR 0 6
54889: PUSH
54890: LD_VAR 0 6
54894: PPUSH
54895: LD_VAR 0 4
54899: PPUSH
54900: CALL_OW 3
54904: ST_TO_ADDR
54905: GO 54805
54907: POP
54908: POP
// j := GetClosestHex ( unit , tmp ) ;
54909: LD_ADDR_VAR 0 5
54913: PUSH
54914: LD_VAR 0 1
54918: PPUSH
54919: LD_VAR 0 6
54923: PPUSH
54924: CALL 54209 0 2
54928: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54929: LD_VAR 0 1
54933: PPUSH
54934: LD_VAR 0 5
54938: PUSH
54939: LD_INT 1
54941: ARRAY
54942: PPUSH
54943: LD_VAR 0 5
54947: PUSH
54948: LD_INT 2
54950: ARRAY
54951: PPUSH
54952: CALL_OW 111
// end ;
54956: LD_VAR 0 3
54960: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54961: LD_INT 0
54963: PPUSH
54964: PPUSH
54965: PPUSH
// uc_side = 0 ;
54966: LD_ADDR_OWVAR 20
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
// uc_nation = 0 ;
54974: LD_ADDR_OWVAR 21
54978: PUSH
54979: LD_INT 0
54981: ST_TO_ADDR
// InitHc_All ( ) ;
54982: CALL_OW 584
// InitVc ;
54986: CALL_OW 20
// if mastodonts then
54990: LD_VAR 0 6
54994: IFFALSE 55061
// for i = 1 to mastodonts do
54996: LD_ADDR_VAR 0 11
55000: PUSH
55001: DOUBLE
55002: LD_INT 1
55004: DEC
55005: ST_TO_ADDR
55006: LD_VAR 0 6
55010: PUSH
55011: FOR_TO
55012: IFFALSE 55059
// begin vc_chassis := 31 ;
55014: LD_ADDR_OWVAR 37
55018: PUSH
55019: LD_INT 31
55021: ST_TO_ADDR
// vc_control := control_rider ;
55022: LD_ADDR_OWVAR 38
55026: PUSH
55027: LD_INT 4
55029: ST_TO_ADDR
// animal := CreateVehicle ;
55030: LD_ADDR_VAR 0 12
55034: PUSH
55035: CALL_OW 45
55039: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55040: LD_VAR 0 12
55044: PPUSH
55045: LD_VAR 0 8
55049: PPUSH
55050: LD_INT 0
55052: PPUSH
55053: CALL 57249 0 3
// end ;
55057: GO 55011
55059: POP
55060: POP
// if horses then
55061: LD_VAR 0 5
55065: IFFALSE 55132
// for i = 1 to horses do
55067: LD_ADDR_VAR 0 11
55071: PUSH
55072: DOUBLE
55073: LD_INT 1
55075: DEC
55076: ST_TO_ADDR
55077: LD_VAR 0 5
55081: PUSH
55082: FOR_TO
55083: IFFALSE 55130
// begin hc_class := 21 ;
55085: LD_ADDR_OWVAR 28
55089: PUSH
55090: LD_INT 21
55092: ST_TO_ADDR
// hc_gallery :=  ;
55093: LD_ADDR_OWVAR 33
55097: PUSH
55098: LD_STRING 
55100: ST_TO_ADDR
// animal := CreateHuman ;
55101: LD_ADDR_VAR 0 12
55105: PUSH
55106: CALL_OW 44
55110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55111: LD_VAR 0 12
55115: PPUSH
55116: LD_VAR 0 8
55120: PPUSH
55121: LD_INT 0
55123: PPUSH
55124: CALL 57249 0 3
// end ;
55128: GO 55082
55130: POP
55131: POP
// if birds then
55132: LD_VAR 0 1
55136: IFFALSE 55203
// for i = 1 to birds do
55138: LD_ADDR_VAR 0 11
55142: PUSH
55143: DOUBLE
55144: LD_INT 1
55146: DEC
55147: ST_TO_ADDR
55148: LD_VAR 0 1
55152: PUSH
55153: FOR_TO
55154: IFFALSE 55201
// begin hc_class = 18 ;
55156: LD_ADDR_OWVAR 28
55160: PUSH
55161: LD_INT 18
55163: ST_TO_ADDR
// hc_gallery =  ;
55164: LD_ADDR_OWVAR 33
55168: PUSH
55169: LD_STRING 
55171: ST_TO_ADDR
// animal := CreateHuman ;
55172: LD_ADDR_VAR 0 12
55176: PUSH
55177: CALL_OW 44
55181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55182: LD_VAR 0 12
55186: PPUSH
55187: LD_VAR 0 8
55191: PPUSH
55192: LD_INT 0
55194: PPUSH
55195: CALL 57249 0 3
// end ;
55199: GO 55153
55201: POP
55202: POP
// if tigers then
55203: LD_VAR 0 2
55207: IFFALSE 55291
// for i = 1 to tigers do
55209: LD_ADDR_VAR 0 11
55213: PUSH
55214: DOUBLE
55215: LD_INT 1
55217: DEC
55218: ST_TO_ADDR
55219: LD_VAR 0 2
55223: PUSH
55224: FOR_TO
55225: IFFALSE 55289
// begin hc_class = class_tiger ;
55227: LD_ADDR_OWVAR 28
55231: PUSH
55232: LD_INT 14
55234: ST_TO_ADDR
// hc_gallery =  ;
55235: LD_ADDR_OWVAR 33
55239: PUSH
55240: LD_STRING 
55242: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55243: LD_ADDR_OWVAR 35
55247: PUSH
55248: LD_INT 7
55250: NEG
55251: PPUSH
55252: LD_INT 7
55254: PPUSH
55255: CALL_OW 12
55259: ST_TO_ADDR
// animal := CreateHuman ;
55260: LD_ADDR_VAR 0 12
55264: PUSH
55265: CALL_OW 44
55269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55270: LD_VAR 0 12
55274: PPUSH
55275: LD_VAR 0 8
55279: PPUSH
55280: LD_INT 0
55282: PPUSH
55283: CALL 57249 0 3
// end ;
55287: GO 55224
55289: POP
55290: POP
// if apemans then
55291: LD_VAR 0 3
55295: IFFALSE 55418
// for i = 1 to apemans do
55297: LD_ADDR_VAR 0 11
55301: PUSH
55302: DOUBLE
55303: LD_INT 1
55305: DEC
55306: ST_TO_ADDR
55307: LD_VAR 0 3
55311: PUSH
55312: FOR_TO
55313: IFFALSE 55416
// begin hc_class = class_apeman ;
55315: LD_ADDR_OWVAR 28
55319: PUSH
55320: LD_INT 12
55322: ST_TO_ADDR
// hc_gallery =  ;
55323: LD_ADDR_OWVAR 33
55327: PUSH
55328: LD_STRING 
55330: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55331: LD_ADDR_OWVAR 35
55335: PUSH
55336: LD_INT 5
55338: NEG
55339: PPUSH
55340: LD_INT 5
55342: PPUSH
55343: CALL_OW 12
55347: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55348: LD_ADDR_OWVAR 31
55352: PUSH
55353: LD_INT 1
55355: PPUSH
55356: LD_INT 3
55358: PPUSH
55359: CALL_OW 12
55363: PUSH
55364: LD_INT 1
55366: PPUSH
55367: LD_INT 3
55369: PPUSH
55370: CALL_OW 12
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// animal := CreateHuman ;
55387: LD_ADDR_VAR 0 12
55391: PUSH
55392: CALL_OW 44
55396: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55397: LD_VAR 0 12
55401: PPUSH
55402: LD_VAR 0 8
55406: PPUSH
55407: LD_INT 0
55409: PPUSH
55410: CALL 57249 0 3
// end ;
55414: GO 55312
55416: POP
55417: POP
// if enchidnas then
55418: LD_VAR 0 4
55422: IFFALSE 55489
// for i = 1 to enchidnas do
55424: LD_ADDR_VAR 0 11
55428: PUSH
55429: DOUBLE
55430: LD_INT 1
55432: DEC
55433: ST_TO_ADDR
55434: LD_VAR 0 4
55438: PUSH
55439: FOR_TO
55440: IFFALSE 55487
// begin hc_class = 13 ;
55442: LD_ADDR_OWVAR 28
55446: PUSH
55447: LD_INT 13
55449: ST_TO_ADDR
// hc_gallery =  ;
55450: LD_ADDR_OWVAR 33
55454: PUSH
55455: LD_STRING 
55457: ST_TO_ADDR
// animal := CreateHuman ;
55458: LD_ADDR_VAR 0 12
55462: PUSH
55463: CALL_OW 44
55467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55468: LD_VAR 0 12
55472: PPUSH
55473: LD_VAR 0 8
55477: PPUSH
55478: LD_INT 0
55480: PPUSH
55481: CALL 57249 0 3
// end ;
55485: GO 55439
55487: POP
55488: POP
// if fishes then
55489: LD_VAR 0 7
55493: IFFALSE 55560
// for i = 1 to fishes do
55495: LD_ADDR_VAR 0 11
55499: PUSH
55500: DOUBLE
55501: LD_INT 1
55503: DEC
55504: ST_TO_ADDR
55505: LD_VAR 0 7
55509: PUSH
55510: FOR_TO
55511: IFFALSE 55558
// begin hc_class = 20 ;
55513: LD_ADDR_OWVAR 28
55517: PUSH
55518: LD_INT 20
55520: ST_TO_ADDR
// hc_gallery =  ;
55521: LD_ADDR_OWVAR 33
55525: PUSH
55526: LD_STRING 
55528: ST_TO_ADDR
// animal := CreateHuman ;
55529: LD_ADDR_VAR 0 12
55533: PUSH
55534: CALL_OW 44
55538: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55539: LD_VAR 0 12
55543: PPUSH
55544: LD_VAR 0 9
55548: PPUSH
55549: LD_INT 0
55551: PPUSH
55552: CALL 57249 0 3
// end ;
55556: GO 55510
55558: POP
55559: POP
// end ;
55560: LD_VAR 0 10
55564: RET
// export function WantHeal ( sci , unit ) ; begin
55565: LD_INT 0
55567: PPUSH
// if GetTaskList ( sci ) > 0 then
55568: LD_VAR 0 1
55572: PPUSH
55573: CALL_OW 437
55577: PUSH
55578: LD_INT 0
55580: GREATER
55581: IFFALSE 55651
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55583: LD_VAR 0 1
55587: PPUSH
55588: CALL_OW 437
55592: PUSH
55593: LD_INT 1
55595: ARRAY
55596: PUSH
55597: LD_INT 1
55599: ARRAY
55600: PUSH
55601: LD_STRING l
55603: EQUAL
55604: PUSH
55605: LD_VAR 0 1
55609: PPUSH
55610: CALL_OW 437
55614: PUSH
55615: LD_INT 1
55617: ARRAY
55618: PUSH
55619: LD_INT 4
55621: ARRAY
55622: PUSH
55623: LD_VAR 0 2
55627: EQUAL
55628: AND
55629: IFFALSE 55641
// result := true else
55631: LD_ADDR_VAR 0 3
55635: PUSH
55636: LD_INT 1
55638: ST_TO_ADDR
55639: GO 55649
// result := false ;
55641: LD_ADDR_VAR 0 3
55645: PUSH
55646: LD_INT 0
55648: ST_TO_ADDR
// end else
55649: GO 55659
// result := false ;
55651: LD_ADDR_VAR 0 3
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
// end ;
55659: LD_VAR 0 3
55663: RET
// export function HealTarget ( sci ) ; begin
55664: LD_INT 0
55666: PPUSH
// if not sci then
55667: LD_VAR 0 1
55671: NOT
55672: IFFALSE 55676
// exit ;
55674: GO 55741
// result := 0 ;
55676: LD_ADDR_VAR 0 2
55680: PUSH
55681: LD_INT 0
55683: ST_TO_ADDR
// if GetTaskList ( sci ) then
55684: LD_VAR 0 1
55688: PPUSH
55689: CALL_OW 437
55693: IFFALSE 55741
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55695: LD_VAR 0 1
55699: PPUSH
55700: CALL_OW 437
55704: PUSH
55705: LD_INT 1
55707: ARRAY
55708: PUSH
55709: LD_INT 1
55711: ARRAY
55712: PUSH
55713: LD_STRING l
55715: EQUAL
55716: IFFALSE 55741
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55718: LD_ADDR_VAR 0 2
55722: PUSH
55723: LD_VAR 0 1
55727: PPUSH
55728: CALL_OW 437
55732: PUSH
55733: LD_INT 1
55735: ARRAY
55736: PUSH
55737: LD_INT 4
55739: ARRAY
55740: ST_TO_ADDR
// end ;
55741: LD_VAR 0 2
55745: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55746: LD_INT 0
55748: PPUSH
55749: PPUSH
55750: PPUSH
55751: PPUSH
// if not base_units then
55752: LD_VAR 0 1
55756: NOT
55757: IFFALSE 55761
// exit ;
55759: GO 55848
// result := false ;
55761: LD_ADDR_VAR 0 2
55765: PUSH
55766: LD_INT 0
55768: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55769: LD_ADDR_VAR 0 5
55773: PUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: LD_INT 21
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PPUSH
55789: CALL_OW 72
55793: ST_TO_ADDR
// if not tmp then
55794: LD_VAR 0 5
55798: NOT
55799: IFFALSE 55803
// exit ;
55801: GO 55848
// for i in tmp do
55803: LD_ADDR_VAR 0 3
55807: PUSH
55808: LD_VAR 0 5
55812: PUSH
55813: FOR_IN
55814: IFFALSE 55846
// begin result := EnemyInRange ( i , 22 ) ;
55816: LD_ADDR_VAR 0 2
55820: PUSH
55821: LD_VAR 0 3
55825: PPUSH
55826: LD_INT 22
55828: PPUSH
55829: CALL 54084 0 2
55833: ST_TO_ADDR
// if result then
55834: LD_VAR 0 2
55838: IFFALSE 55844
// exit ;
55840: POP
55841: POP
55842: GO 55848
// end ;
55844: GO 55813
55846: POP
55847: POP
// end ;
55848: LD_VAR 0 2
55852: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55853: LD_INT 0
55855: PPUSH
55856: PPUSH
// if not units then
55857: LD_VAR 0 1
55861: NOT
55862: IFFALSE 55866
// exit ;
55864: GO 55936
// result := [ ] ;
55866: LD_ADDR_VAR 0 3
55870: PUSH
55871: EMPTY
55872: ST_TO_ADDR
// for i in units do
55873: LD_ADDR_VAR 0 4
55877: PUSH
55878: LD_VAR 0 1
55882: PUSH
55883: FOR_IN
55884: IFFALSE 55934
// if GetTag ( i ) = tag then
55886: LD_VAR 0 4
55890: PPUSH
55891: CALL_OW 110
55895: PUSH
55896: LD_VAR 0 2
55900: EQUAL
55901: IFFALSE 55932
// result := Insert ( result , result + 1 , i ) ;
55903: LD_ADDR_VAR 0 3
55907: PUSH
55908: LD_VAR 0 3
55912: PPUSH
55913: LD_VAR 0 3
55917: PUSH
55918: LD_INT 1
55920: PLUS
55921: PPUSH
55922: LD_VAR 0 4
55926: PPUSH
55927: CALL_OW 2
55931: ST_TO_ADDR
55932: GO 55883
55934: POP
55935: POP
// end ;
55936: LD_VAR 0 3
55940: RET
// export function IsDriver ( un ) ; begin
55941: LD_INT 0
55943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55944: LD_ADDR_VAR 0 2
55948: PUSH
55949: LD_VAR 0 1
55953: PUSH
55954: LD_INT 55
55956: PUSH
55957: EMPTY
55958: LIST
55959: PPUSH
55960: CALL_OW 69
55964: IN
55965: ST_TO_ADDR
// end ;
55966: LD_VAR 0 2
55970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55971: LD_INT 0
55973: PPUSH
55974: PPUSH
// list := [ ] ;
55975: LD_ADDR_VAR 0 5
55979: PUSH
55980: EMPTY
55981: ST_TO_ADDR
// case d of 0 :
55982: LD_VAR 0 3
55986: PUSH
55987: LD_INT 0
55989: DOUBLE
55990: EQUAL
55991: IFTRUE 55995
55993: GO 56128
55995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55996: LD_ADDR_VAR 0 5
56000: PUSH
56001: LD_VAR 0 1
56005: PUSH
56006: LD_INT 4
56008: MINUS
56009: PUSH
56010: LD_VAR 0 2
56014: PUSH
56015: LD_INT 4
56017: MINUS
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: PUSH
56027: LD_VAR 0 1
56031: PUSH
56032: LD_INT 3
56034: MINUS
56035: PUSH
56036: LD_VAR 0 2
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: PUSH
56049: LD_VAR 0 1
56053: PUSH
56054: LD_INT 4
56056: PLUS
56057: PUSH
56058: LD_VAR 0 2
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: LIST
56070: PUSH
56071: LD_VAR 0 1
56075: PUSH
56076: LD_INT 3
56078: PLUS
56079: PUSH
56080: LD_VAR 0 2
56084: PUSH
56085: LD_INT 3
56087: PLUS
56088: PUSH
56089: LD_INT 5
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: PUSH
56097: LD_VAR 0 1
56101: PUSH
56102: LD_VAR 0 2
56106: PUSH
56107: LD_INT 4
56109: PLUS
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// end ; 1 :
56126: GO 56826
56128: LD_INT 1
56130: DOUBLE
56131: EQUAL
56132: IFTRUE 56136
56134: GO 56269
56136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56137: LD_ADDR_VAR 0 5
56141: PUSH
56142: LD_VAR 0 1
56146: PUSH
56147: LD_VAR 0 2
56151: PUSH
56152: LD_INT 4
56154: MINUS
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: PUSH
56164: LD_VAR 0 1
56168: PUSH
56169: LD_INT 3
56171: MINUS
56172: PUSH
56173: LD_VAR 0 2
56177: PUSH
56178: LD_INT 3
56180: MINUS
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: PUSH
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 4
56197: MINUS
56198: PUSH
56199: LD_VAR 0 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: PUSH
56212: LD_VAR 0 1
56216: PUSH
56217: LD_VAR 0 2
56221: PUSH
56222: LD_INT 3
56224: PLUS
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: LIST
56233: PUSH
56234: LD_VAR 0 1
56238: PUSH
56239: LD_INT 4
56241: PLUS
56242: PUSH
56243: LD_VAR 0 2
56247: PUSH
56248: LD_INT 4
56250: PLUS
56251: PUSH
56252: LD_INT 5
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// end ; 2 :
56267: GO 56826
56269: LD_INT 2
56271: DOUBLE
56272: EQUAL
56273: IFTRUE 56277
56275: GO 56406
56277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56278: LD_ADDR_VAR 0 5
56282: PUSH
56283: LD_VAR 0 1
56287: PUSH
56288: LD_VAR 0 2
56292: PUSH
56293: LD_INT 3
56295: MINUS
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: PUSH
56305: LD_VAR 0 1
56309: PUSH
56310: LD_INT 4
56312: PLUS
56313: PUSH
56314: LD_VAR 0 2
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: PUSH
56327: LD_VAR 0 1
56331: PUSH
56332: LD_VAR 0 2
56336: PUSH
56337: LD_INT 4
56339: PLUS
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: PUSH
56349: LD_VAR 0 1
56353: PUSH
56354: LD_INT 3
56356: MINUS
56357: PUSH
56358: LD_VAR 0 2
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: PUSH
56371: LD_VAR 0 1
56375: PUSH
56376: LD_INT 4
56378: MINUS
56379: PUSH
56380: LD_VAR 0 2
56384: PUSH
56385: LD_INT 4
56387: MINUS
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// end ; 3 :
56404: GO 56826
56406: LD_INT 3
56408: DOUBLE
56409: EQUAL
56410: IFTRUE 56414
56412: GO 56547
56414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56415: LD_ADDR_VAR 0 5
56419: PUSH
56420: LD_VAR 0 1
56424: PUSH
56425: LD_INT 3
56427: PLUS
56428: PUSH
56429: LD_VAR 0 2
56433: PUSH
56434: LD_INT 4
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: PUSH
56442: LD_VAR 0 1
56446: PUSH
56447: LD_INT 4
56449: PLUS
56450: PUSH
56451: LD_VAR 0 2
56455: PUSH
56456: LD_INT 4
56458: PLUS
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: PUSH
56468: LD_VAR 0 1
56472: PUSH
56473: LD_INT 4
56475: MINUS
56476: PUSH
56477: LD_VAR 0 2
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: PUSH
56490: LD_VAR 0 1
56494: PUSH
56495: LD_VAR 0 2
56499: PUSH
56500: LD_INT 4
56502: MINUS
56503: PUSH
56504: LD_INT 3
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: PUSH
56512: LD_VAR 0 1
56516: PUSH
56517: LD_INT 3
56519: MINUS
56520: PUSH
56521: LD_VAR 0 2
56525: PUSH
56526: LD_INT 3
56528: MINUS
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: ST_TO_ADDR
// end ; 4 :
56545: GO 56826
56547: LD_INT 4
56549: DOUBLE
56550: EQUAL
56551: IFTRUE 56555
56553: GO 56688
56555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56556: LD_ADDR_VAR 0 5
56560: PUSH
56561: LD_VAR 0 1
56565: PUSH
56566: LD_VAR 0 2
56570: PUSH
56571: LD_INT 4
56573: PLUS
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: LD_INT 3
56590: PLUS
56591: PUSH
56592: LD_VAR 0 2
56596: PUSH
56597: LD_INT 3
56599: PLUS
56600: PUSH
56601: LD_INT 5
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_VAR 0 1
56613: PUSH
56614: LD_INT 4
56616: PLUS
56617: PUSH
56618: LD_VAR 0 2
56622: PUSH
56623: LD_INT 4
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: LIST
56630: PUSH
56631: LD_VAR 0 1
56635: PUSH
56636: LD_VAR 0 2
56640: PUSH
56641: LD_INT 3
56643: MINUS
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: PUSH
56653: LD_VAR 0 1
56657: PUSH
56658: LD_INT 4
56660: MINUS
56661: PUSH
56662: LD_VAR 0 2
56666: PUSH
56667: LD_INT 4
56669: MINUS
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// end ; 5 :
56686: GO 56826
56688: LD_INT 5
56690: DOUBLE
56691: EQUAL
56692: IFTRUE 56696
56694: GO 56825
56696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56697: LD_ADDR_VAR 0 5
56701: PUSH
56702: LD_VAR 0 1
56706: PUSH
56707: LD_INT 4
56709: MINUS
56710: PUSH
56711: LD_VAR 0 2
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: PUSH
56724: LD_VAR 0 1
56728: PUSH
56729: LD_VAR 0 2
56733: PUSH
56734: LD_INT 4
56736: MINUS
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: PUSH
56746: LD_VAR 0 1
56750: PUSH
56751: LD_INT 4
56753: PLUS
56754: PUSH
56755: LD_VAR 0 2
56759: PUSH
56760: LD_INT 4
56762: PLUS
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: PUSH
56772: LD_VAR 0 1
56776: PUSH
56777: LD_INT 3
56779: PLUS
56780: PUSH
56781: LD_VAR 0 2
56785: PUSH
56786: LD_INT 4
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: PUSH
56794: LD_VAR 0 1
56798: PUSH
56799: LD_VAR 0 2
56803: PUSH
56804: LD_INT 3
56806: PLUS
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// end ; end ;
56823: GO 56826
56825: POP
// result := list ;
56826: LD_ADDR_VAR 0 4
56830: PUSH
56831: LD_VAR 0 5
56835: ST_TO_ADDR
// end ;
56836: LD_VAR 0 4
56840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56841: LD_INT 0
56843: PPUSH
56844: PPUSH
56845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56846: LD_VAR 0 1
56850: NOT
56851: PUSH
56852: LD_VAR 0 2
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: LD_INT 4
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: IN
56875: NOT
56876: OR
56877: IFFALSE 56881
// exit ;
56879: GO 56973
// tmp := [ ] ;
56881: LD_ADDR_VAR 0 5
56885: PUSH
56886: EMPTY
56887: ST_TO_ADDR
// for i in units do
56888: LD_ADDR_VAR 0 4
56892: PUSH
56893: LD_VAR 0 1
56897: PUSH
56898: FOR_IN
56899: IFFALSE 56942
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56901: LD_ADDR_VAR 0 5
56905: PUSH
56906: LD_VAR 0 5
56910: PPUSH
56911: LD_VAR 0 5
56915: PUSH
56916: LD_INT 1
56918: PLUS
56919: PPUSH
56920: LD_VAR 0 4
56924: PPUSH
56925: LD_VAR 0 2
56929: PPUSH
56930: CALL_OW 259
56934: PPUSH
56935: CALL_OW 2
56939: ST_TO_ADDR
56940: GO 56898
56942: POP
56943: POP
// if not tmp then
56944: LD_VAR 0 5
56948: NOT
56949: IFFALSE 56953
// exit ;
56951: GO 56973
// result := SortListByListDesc ( units , tmp ) ;
56953: LD_ADDR_VAR 0 3
56957: PUSH
56958: LD_VAR 0 1
56962: PPUSH
56963: LD_VAR 0 5
56967: PPUSH
56968: CALL_OW 77
56972: ST_TO_ADDR
// end ;
56973: LD_VAR 0 3
56977: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56978: LD_INT 0
56980: PPUSH
56981: PPUSH
56982: PPUSH
// result := false ;
56983: LD_ADDR_VAR 0 3
56987: PUSH
56988: LD_INT 0
56990: ST_TO_ADDR
// x := GetX ( building ) ;
56991: LD_ADDR_VAR 0 4
56995: PUSH
56996: LD_VAR 0 2
57000: PPUSH
57001: CALL_OW 250
57005: ST_TO_ADDR
// y := GetY ( building ) ;
57006: LD_ADDR_VAR 0 5
57010: PUSH
57011: LD_VAR 0 2
57015: PPUSH
57016: CALL_OW 251
57020: ST_TO_ADDR
// if not building or not x or not y then
57021: LD_VAR 0 2
57025: NOT
57026: PUSH
57027: LD_VAR 0 4
57031: NOT
57032: OR
57033: PUSH
57034: LD_VAR 0 5
57038: NOT
57039: OR
57040: IFFALSE 57044
// exit ;
57042: GO 57136
// if GetTaskList ( unit ) then
57044: LD_VAR 0 1
57048: PPUSH
57049: CALL_OW 437
57053: IFFALSE 57136
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57055: LD_STRING e
57057: PUSH
57058: LD_VAR 0 1
57062: PPUSH
57063: CALL_OW 437
57067: PUSH
57068: LD_INT 1
57070: ARRAY
57071: PUSH
57072: LD_INT 1
57074: ARRAY
57075: EQUAL
57076: PUSH
57077: LD_VAR 0 4
57081: PUSH
57082: LD_VAR 0 1
57086: PPUSH
57087: CALL_OW 437
57091: PUSH
57092: LD_INT 1
57094: ARRAY
57095: PUSH
57096: LD_INT 2
57098: ARRAY
57099: EQUAL
57100: AND
57101: PUSH
57102: LD_VAR 0 5
57106: PUSH
57107: LD_VAR 0 1
57111: PPUSH
57112: CALL_OW 437
57116: PUSH
57117: LD_INT 1
57119: ARRAY
57120: PUSH
57121: LD_INT 3
57123: ARRAY
57124: EQUAL
57125: AND
57126: IFFALSE 57136
// result := true end ;
57128: LD_ADDR_VAR 0 3
57132: PUSH
57133: LD_INT 1
57135: ST_TO_ADDR
// end ;
57136: LD_VAR 0 3
57140: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57141: LD_INT 0
57143: PPUSH
// result := false ;
57144: LD_ADDR_VAR 0 4
57148: PUSH
57149: LD_INT 0
57151: ST_TO_ADDR
// if GetTaskList ( unit ) then
57152: LD_VAR 0 1
57156: PPUSH
57157: CALL_OW 437
57161: IFFALSE 57244
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57163: LD_STRING M
57165: PUSH
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 437
57175: PUSH
57176: LD_INT 1
57178: ARRAY
57179: PUSH
57180: LD_INT 1
57182: ARRAY
57183: EQUAL
57184: PUSH
57185: LD_VAR 0 2
57189: PUSH
57190: LD_VAR 0 1
57194: PPUSH
57195: CALL_OW 437
57199: PUSH
57200: LD_INT 1
57202: ARRAY
57203: PUSH
57204: LD_INT 2
57206: ARRAY
57207: EQUAL
57208: AND
57209: PUSH
57210: LD_VAR 0 3
57214: PUSH
57215: LD_VAR 0 1
57219: PPUSH
57220: CALL_OW 437
57224: PUSH
57225: LD_INT 1
57227: ARRAY
57228: PUSH
57229: LD_INT 3
57231: ARRAY
57232: EQUAL
57233: AND
57234: IFFALSE 57244
// result := true ;
57236: LD_ADDR_VAR 0 4
57240: PUSH
57241: LD_INT 1
57243: ST_TO_ADDR
// end ; end ;
57244: LD_VAR 0 4
57248: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57249: LD_INT 0
57251: PPUSH
57252: PPUSH
57253: PPUSH
57254: PPUSH
// if not unit or not area then
57255: LD_VAR 0 1
57259: NOT
57260: PUSH
57261: LD_VAR 0 2
57265: NOT
57266: OR
57267: IFFALSE 57271
// exit ;
57269: GO 57435
// tmp := AreaToList ( area , i ) ;
57271: LD_ADDR_VAR 0 6
57275: PUSH
57276: LD_VAR 0 2
57280: PPUSH
57281: LD_VAR 0 5
57285: PPUSH
57286: CALL_OW 517
57290: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57291: LD_ADDR_VAR 0 5
57295: PUSH
57296: DOUBLE
57297: LD_INT 1
57299: DEC
57300: ST_TO_ADDR
57301: LD_VAR 0 6
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PUSH
57310: FOR_TO
57311: IFFALSE 57433
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57313: LD_ADDR_VAR 0 7
57317: PUSH
57318: LD_VAR 0 6
57322: PUSH
57323: LD_INT 1
57325: ARRAY
57326: PUSH
57327: LD_VAR 0 5
57331: ARRAY
57332: PUSH
57333: LD_VAR 0 6
57337: PUSH
57338: LD_INT 2
57340: ARRAY
57341: PUSH
57342: LD_VAR 0 5
57346: ARRAY
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57352: LD_VAR 0 7
57356: PUSH
57357: LD_INT 1
57359: ARRAY
57360: PPUSH
57361: LD_VAR 0 7
57365: PUSH
57366: LD_INT 2
57368: ARRAY
57369: PPUSH
57370: CALL_OW 428
57374: PUSH
57375: LD_INT 0
57377: EQUAL
57378: IFFALSE 57431
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57380: LD_VAR 0 1
57384: PPUSH
57385: LD_VAR 0 7
57389: PUSH
57390: LD_INT 1
57392: ARRAY
57393: PPUSH
57394: LD_VAR 0 7
57398: PUSH
57399: LD_INT 2
57401: ARRAY
57402: PPUSH
57403: LD_VAR 0 3
57407: PPUSH
57408: CALL_OW 48
// result := IsPlaced ( unit ) ;
57412: LD_ADDR_VAR 0 4
57416: PUSH
57417: LD_VAR 0 1
57421: PPUSH
57422: CALL_OW 305
57426: ST_TO_ADDR
// exit ;
57427: POP
57428: POP
57429: GO 57435
// end ; end ;
57431: GO 57310
57433: POP
57434: POP
// end ;
57435: LD_VAR 0 4
57439: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57440: LD_INT 0
57442: PPUSH
57443: PPUSH
57444: PPUSH
// if not side or side > 8 then
57445: LD_VAR 0 1
57449: NOT
57450: PUSH
57451: LD_VAR 0 1
57455: PUSH
57456: LD_INT 8
57458: GREATER
57459: OR
57460: IFFALSE 57464
// exit ;
57462: GO 57651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57464: LD_ADDR_VAR 0 4
57468: PUSH
57469: LD_INT 22
57471: PUSH
57472: LD_VAR 0 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 21
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: ST_TO_ADDR
// if not tmp then
57500: LD_VAR 0 4
57504: NOT
57505: IFFALSE 57509
// exit ;
57507: GO 57651
// enable_addtolog := true ;
57509: LD_ADDR_OWVAR 81
57513: PUSH
57514: LD_INT 1
57516: ST_TO_ADDR
// AddToLog ( [ ) ;
57517: LD_STRING [
57519: PPUSH
57520: CALL_OW 561
// for i in tmp do
57524: LD_ADDR_VAR 0 3
57528: PUSH
57529: LD_VAR 0 4
57533: PUSH
57534: FOR_IN
57535: IFFALSE 57642
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57537: LD_STRING [
57539: PUSH
57540: LD_VAR 0 3
57544: PPUSH
57545: CALL_OW 266
57549: STR
57550: PUSH
57551: LD_STRING , 
57553: STR
57554: PUSH
57555: LD_VAR 0 3
57559: PPUSH
57560: CALL_OW 250
57564: STR
57565: PUSH
57566: LD_STRING , 
57568: STR
57569: PUSH
57570: LD_VAR 0 3
57574: PPUSH
57575: CALL_OW 251
57579: STR
57580: PUSH
57581: LD_STRING , 
57583: STR
57584: PUSH
57585: LD_VAR 0 3
57589: PPUSH
57590: CALL_OW 254
57594: STR
57595: PUSH
57596: LD_STRING , 
57598: STR
57599: PUSH
57600: LD_VAR 0 3
57604: PPUSH
57605: LD_INT 1
57607: PPUSH
57608: CALL_OW 268
57612: STR
57613: PUSH
57614: LD_STRING , 
57616: STR
57617: PUSH
57618: LD_VAR 0 3
57622: PPUSH
57623: LD_INT 2
57625: PPUSH
57626: CALL_OW 268
57630: STR
57631: PUSH
57632: LD_STRING ],
57634: STR
57635: PPUSH
57636: CALL_OW 561
// end ;
57640: GO 57534
57642: POP
57643: POP
// AddToLog ( ]; ) ;
57644: LD_STRING ];
57646: PPUSH
57647: CALL_OW 561
// end ;
57651: LD_VAR 0 2
57655: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57656: LD_INT 0
57658: PPUSH
57659: PPUSH
57660: PPUSH
57661: PPUSH
57662: PPUSH
// if not area or not rate or not max then
57663: LD_VAR 0 1
57667: NOT
57668: PUSH
57669: LD_VAR 0 2
57673: NOT
57674: OR
57675: PUSH
57676: LD_VAR 0 4
57680: NOT
57681: OR
57682: IFFALSE 57686
// exit ;
57684: GO 57878
// while 1 do
57686: LD_INT 1
57688: IFFALSE 57878
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57690: LD_ADDR_VAR 0 9
57694: PUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_INT 1
57702: PPUSH
57703: CALL_OW 287
57707: PUSH
57708: LD_INT 10
57710: MUL
57711: ST_TO_ADDR
// r := rate / 10 ;
57712: LD_ADDR_VAR 0 7
57716: PUSH
57717: LD_VAR 0 2
57721: PUSH
57722: LD_INT 10
57724: DIVREAL
57725: ST_TO_ADDR
// time := 1 1$00 ;
57726: LD_ADDR_VAR 0 8
57730: PUSH
57731: LD_INT 2100
57733: ST_TO_ADDR
// if amount < min then
57734: LD_VAR 0 9
57738: PUSH
57739: LD_VAR 0 3
57743: LESS
57744: IFFALSE 57762
// r := r * 2 else
57746: LD_ADDR_VAR 0 7
57750: PUSH
57751: LD_VAR 0 7
57755: PUSH
57756: LD_INT 2
57758: MUL
57759: ST_TO_ADDR
57760: GO 57788
// if amount > max then
57762: LD_VAR 0 9
57766: PUSH
57767: LD_VAR 0 4
57771: GREATER
57772: IFFALSE 57788
// r := r / 2 ;
57774: LD_ADDR_VAR 0 7
57778: PUSH
57779: LD_VAR 0 7
57783: PUSH
57784: LD_INT 2
57786: DIVREAL
57787: ST_TO_ADDR
// time := time / r ;
57788: LD_ADDR_VAR 0 8
57792: PUSH
57793: LD_VAR 0 8
57797: PUSH
57798: LD_VAR 0 7
57802: DIVREAL
57803: ST_TO_ADDR
// if time < 0 then
57804: LD_VAR 0 8
57808: PUSH
57809: LD_INT 0
57811: LESS
57812: IFFALSE 57829
// time := time * - 1 ;
57814: LD_ADDR_VAR 0 8
57818: PUSH
57819: LD_VAR 0 8
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: MUL
57828: ST_TO_ADDR
// wait ( time ) ;
57829: LD_VAR 0 8
57833: PPUSH
57834: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57838: LD_INT 35
57840: PPUSH
57841: LD_INT 875
57843: PPUSH
57844: CALL_OW 12
57848: PPUSH
57849: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57853: LD_INT 1
57855: PPUSH
57856: LD_INT 5
57858: PPUSH
57859: CALL_OW 12
57863: PPUSH
57864: LD_VAR 0 1
57868: PPUSH
57869: LD_INT 1
57871: PPUSH
57872: CALL_OW 55
// end ;
57876: GO 57686
// end ;
57878: LD_VAR 0 5
57882: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57883: LD_INT 0
57885: PPUSH
57886: PPUSH
57887: PPUSH
57888: PPUSH
57889: PPUSH
57890: PPUSH
57891: PPUSH
57892: PPUSH
// if not turrets or not factories then
57893: LD_VAR 0 1
57897: NOT
57898: PUSH
57899: LD_VAR 0 2
57903: NOT
57904: OR
57905: IFFALSE 57909
// exit ;
57907: GO 58216
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57909: LD_ADDR_VAR 0 10
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: LD_INT 6
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 24
57951: PUSH
57952: LD_INT 25
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 23
57961: PUSH
57962: LD_INT 27
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 42
57975: PUSH
57976: LD_INT 43
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 44
57985: PUSH
57986: LD_INT 46
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 45
57995: PUSH
57996: LD_INT 47
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// result := [ ] ;
58013: LD_ADDR_VAR 0 3
58017: PUSH
58018: EMPTY
58019: ST_TO_ADDR
// for i in turrets do
58020: LD_ADDR_VAR 0 4
58024: PUSH
58025: LD_VAR 0 1
58029: PUSH
58030: FOR_IN
58031: IFFALSE 58214
// begin nat := GetNation ( i ) ;
58033: LD_ADDR_VAR 0 7
58037: PUSH
58038: LD_VAR 0 4
58042: PPUSH
58043: CALL_OW 248
58047: ST_TO_ADDR
// weapon := 0 ;
58048: LD_ADDR_VAR 0 8
58052: PUSH
58053: LD_INT 0
58055: ST_TO_ADDR
// if not nat then
58056: LD_VAR 0 7
58060: NOT
58061: IFFALSE 58065
// continue ;
58063: GO 58030
// for j in list [ nat ] do
58065: LD_ADDR_VAR 0 5
58069: PUSH
58070: LD_VAR 0 10
58074: PUSH
58075: LD_VAR 0 7
58079: ARRAY
58080: PUSH
58081: FOR_IN
58082: IFFALSE 58123
// if GetBWeapon ( i ) = j [ 1 ] then
58084: LD_VAR 0 4
58088: PPUSH
58089: CALL_OW 269
58093: PUSH
58094: LD_VAR 0 5
58098: PUSH
58099: LD_INT 1
58101: ARRAY
58102: EQUAL
58103: IFFALSE 58121
// begin weapon := j [ 2 ] ;
58105: LD_ADDR_VAR 0 8
58109: PUSH
58110: LD_VAR 0 5
58114: PUSH
58115: LD_INT 2
58117: ARRAY
58118: ST_TO_ADDR
// break ;
58119: GO 58123
// end ;
58121: GO 58081
58123: POP
58124: POP
// if not weapon then
58125: LD_VAR 0 8
58129: NOT
58130: IFFALSE 58134
// continue ;
58132: GO 58030
// for k in factories do
58134: LD_ADDR_VAR 0 6
58138: PUSH
58139: LD_VAR 0 2
58143: PUSH
58144: FOR_IN
58145: IFFALSE 58210
// begin weapons := AvailableWeaponList ( k ) ;
58147: LD_ADDR_VAR 0 9
58151: PUSH
58152: LD_VAR 0 6
58156: PPUSH
58157: CALL_OW 478
58161: ST_TO_ADDR
// if not weapons then
58162: LD_VAR 0 9
58166: NOT
58167: IFFALSE 58171
// continue ;
58169: GO 58144
// if weapon in weapons then
58171: LD_VAR 0 8
58175: PUSH
58176: LD_VAR 0 9
58180: IN
58181: IFFALSE 58208
// begin result := [ i , weapon ] ;
58183: LD_ADDR_VAR 0 3
58187: PUSH
58188: LD_VAR 0 4
58192: PUSH
58193: LD_VAR 0 8
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// exit ;
58202: POP
58203: POP
58204: POP
58205: POP
58206: GO 58216
// end ; end ;
58208: GO 58144
58210: POP
58211: POP
// end ;
58212: GO 58030
58214: POP
58215: POP
// end ;
58216: LD_VAR 0 3
58220: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58221: LD_INT 0
58223: PPUSH
// if not side or side > 8 then
58224: LD_VAR 0 3
58228: NOT
58229: PUSH
58230: LD_VAR 0 3
58234: PUSH
58235: LD_INT 8
58237: GREATER
58238: OR
58239: IFFALSE 58243
// exit ;
58241: GO 58302
// if not range then
58243: LD_VAR 0 4
58247: NOT
58248: IFFALSE 58259
// range := - 12 ;
58250: LD_ADDR_VAR 0 4
58254: PUSH
58255: LD_INT 12
58257: NEG
58258: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58259: LD_VAR 0 1
58263: PPUSH
58264: LD_VAR 0 2
58268: PPUSH
58269: LD_VAR 0 3
58273: PPUSH
58274: LD_VAR 0 4
58278: PPUSH
58279: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58283: LD_VAR 0 1
58287: PPUSH
58288: LD_VAR 0 2
58292: PPUSH
58293: LD_VAR 0 3
58297: PPUSH
58298: CALL_OW 331
// end ;
58302: LD_VAR 0 5
58306: RET
// export function Video ( mode ) ; begin
58307: LD_INT 0
58309: PPUSH
// ingame_video = mode ;
58310: LD_ADDR_OWVAR 52
58314: PUSH
58315: LD_VAR 0 1
58319: ST_TO_ADDR
// interface_hidden = mode ;
58320: LD_ADDR_OWVAR 54
58324: PUSH
58325: LD_VAR 0 1
58329: ST_TO_ADDR
// end ;
58330: LD_VAR 0 2
58334: RET
// export function Join ( array , element ) ; begin
58335: LD_INT 0
58337: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58338: LD_ADDR_VAR 0 3
58342: PUSH
58343: LD_VAR 0 1
58347: PPUSH
58348: LD_VAR 0 1
58352: PUSH
58353: LD_INT 1
58355: PLUS
58356: PPUSH
58357: LD_VAR 0 2
58361: PPUSH
58362: CALL_OW 1
58366: ST_TO_ADDR
// end ;
58367: LD_VAR 0 3
58371: RET
// export function JoinUnion ( array , element ) ; begin
58372: LD_INT 0
58374: PPUSH
// result := array union element ;
58375: LD_ADDR_VAR 0 3
58379: PUSH
58380: LD_VAR 0 1
58384: PUSH
58385: LD_VAR 0 2
58389: UNION
58390: ST_TO_ADDR
// end ;
58391: LD_VAR 0 3
58395: RET
// export function GetBehemoths ( side ) ; begin
58396: LD_INT 0
58398: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58399: LD_ADDR_VAR 0 2
58403: PUSH
58404: LD_INT 22
58406: PUSH
58407: LD_VAR 0 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 31
58418: PUSH
58419: LD_INT 25
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PPUSH
58430: CALL_OW 69
58434: ST_TO_ADDR
// end ;
58435: LD_VAR 0 2
58439: RET
// export function Shuffle ( array ) ; var i , index ; begin
58440: LD_INT 0
58442: PPUSH
58443: PPUSH
58444: PPUSH
// result := [ ] ;
58445: LD_ADDR_VAR 0 2
58449: PUSH
58450: EMPTY
58451: ST_TO_ADDR
// if not array then
58452: LD_VAR 0 1
58456: NOT
58457: IFFALSE 58461
// exit ;
58459: GO 58560
// Randomize ;
58461: CALL_OW 10
// for i = array downto 1 do
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: DOUBLE
58471: LD_VAR 0 1
58475: INC
58476: ST_TO_ADDR
58477: LD_INT 1
58479: PUSH
58480: FOR_DOWNTO
58481: IFFALSE 58558
// begin index := rand ( 1 , array ) ;
58483: LD_ADDR_VAR 0 4
58487: PUSH
58488: LD_INT 1
58490: PPUSH
58491: LD_VAR 0 1
58495: PPUSH
58496: CALL_OW 12
58500: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58501: LD_ADDR_VAR 0 2
58505: PUSH
58506: LD_VAR 0 2
58510: PPUSH
58511: LD_VAR 0 2
58515: PUSH
58516: LD_INT 1
58518: PLUS
58519: PPUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_VAR 0 4
58529: ARRAY
58530: PPUSH
58531: CALL_OW 2
58535: ST_TO_ADDR
// array := Delete ( array , index ) ;
58536: LD_ADDR_VAR 0 1
58540: PUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: LD_VAR 0 4
58550: PPUSH
58551: CALL_OW 3
58555: ST_TO_ADDR
// end ;
58556: GO 58480
58558: POP
58559: POP
// end ;
58560: LD_VAR 0 2
58564: RET
// export function GetBaseMaterials ( base ) ; begin
58565: LD_INT 0
58567: PPUSH
// result := [ 0 , 0 , 0 ] ;
58568: LD_ADDR_VAR 0 2
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: ST_TO_ADDR
// if not base then
58587: LD_VAR 0 1
58591: NOT
58592: IFFALSE 58596
// exit ;
58594: GO 58645
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58596: LD_ADDR_VAR 0 2
58600: PUSH
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_INT 1
58608: PPUSH
58609: CALL_OW 275
58613: PUSH
58614: LD_VAR 0 1
58618: PPUSH
58619: LD_INT 2
58621: PPUSH
58622: CALL_OW 275
58626: PUSH
58627: LD_VAR 0 1
58631: PPUSH
58632: LD_INT 3
58634: PPUSH
58635: CALL_OW 275
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// end ;
58645: LD_VAR 0 2
58649: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58650: LD_INT 0
58652: PPUSH
58653: PPUSH
// result := array ;
58654: LD_ADDR_VAR 0 3
58658: PUSH
58659: LD_VAR 0 1
58663: ST_TO_ADDR
// if size > 0 then
58664: LD_VAR 0 2
58668: PUSH
58669: LD_INT 0
58671: GREATER
58672: IFFALSE 58718
// for i := array downto size do
58674: LD_ADDR_VAR 0 4
58678: PUSH
58679: DOUBLE
58680: LD_VAR 0 1
58684: INC
58685: ST_TO_ADDR
58686: LD_VAR 0 2
58690: PUSH
58691: FOR_DOWNTO
58692: IFFALSE 58716
// result := Delete ( result , result ) ;
58694: LD_ADDR_VAR 0 3
58698: PUSH
58699: LD_VAR 0 3
58703: PPUSH
58704: LD_VAR 0 3
58708: PPUSH
58709: CALL_OW 3
58713: ST_TO_ADDR
58714: GO 58691
58716: POP
58717: POP
// end ;
58718: LD_VAR 0 3
58722: RET
// export function ComExit ( unit ) ; var tmp ; begin
58723: LD_INT 0
58725: PPUSH
58726: PPUSH
// if not IsInUnit ( unit ) then
58727: LD_VAR 0 1
58731: PPUSH
58732: CALL_OW 310
58736: NOT
58737: IFFALSE 58741
// exit ;
58739: GO 58801
// tmp := IsInUnit ( unit ) ;
58741: LD_ADDR_VAR 0 3
58745: PUSH
58746: LD_VAR 0 1
58750: PPUSH
58751: CALL_OW 310
58755: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58756: LD_VAR 0 3
58760: PPUSH
58761: CALL_OW 247
58765: PUSH
58766: LD_INT 2
58768: EQUAL
58769: IFFALSE 58782
// ComExitVehicle ( unit ) else
58771: LD_VAR 0 1
58775: PPUSH
58776: CALL_OW 121
58780: GO 58791
// ComExitBuilding ( unit ) ;
58782: LD_VAR 0 1
58786: PPUSH
58787: CALL_OW 122
// result := tmp ;
58791: LD_ADDR_VAR 0 2
58795: PUSH
58796: LD_VAR 0 3
58800: ST_TO_ADDR
// end ;
58801: LD_VAR 0 2
58805: RET
// export function ComExitAll ( units ) ; var i ; begin
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
// if not units then
58810: LD_VAR 0 1
58814: NOT
58815: IFFALSE 58819
// exit ;
58817: GO 58845
// for i in units do
58819: LD_ADDR_VAR 0 3
58823: PUSH
58824: LD_VAR 0 1
58828: PUSH
58829: FOR_IN
58830: IFFALSE 58843
// ComExit ( i ) ;
58832: LD_VAR 0 3
58836: PPUSH
58837: CALL 58723 0 1
58841: GO 58829
58843: POP
58844: POP
// end ;
58845: LD_VAR 0 2
58849: RET
// export function ResetHc ; begin
58850: LD_INT 0
58852: PPUSH
// InitHc ;
58853: CALL_OW 19
// hc_importance := 0 ;
58857: LD_ADDR_OWVAR 32
58861: PUSH
58862: LD_INT 0
58864: ST_TO_ADDR
// end ;
58865: LD_VAR 0 1
58869: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58870: LD_INT 0
58872: PPUSH
58873: PPUSH
58874: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58875: LD_ADDR_VAR 0 6
58879: PUSH
58880: LD_VAR 0 1
58884: PUSH
58885: LD_VAR 0 3
58889: PLUS
58890: PUSH
58891: LD_INT 2
58893: DIV
58894: ST_TO_ADDR
// if _x < 0 then
58895: LD_VAR 0 6
58899: PUSH
58900: LD_INT 0
58902: LESS
58903: IFFALSE 58920
// _x := _x * - 1 ;
58905: LD_ADDR_VAR 0 6
58909: PUSH
58910: LD_VAR 0 6
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: MUL
58919: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58920: LD_ADDR_VAR 0 7
58924: PUSH
58925: LD_VAR 0 2
58929: PUSH
58930: LD_VAR 0 4
58934: PLUS
58935: PUSH
58936: LD_INT 2
58938: DIV
58939: ST_TO_ADDR
// if _y < 0 then
58940: LD_VAR 0 7
58944: PUSH
58945: LD_INT 0
58947: LESS
58948: IFFALSE 58965
// _y := _y * - 1 ;
58950: LD_ADDR_VAR 0 7
58954: PUSH
58955: LD_VAR 0 7
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: MUL
58964: ST_TO_ADDR
// result := [ _x , _y ] ;
58965: LD_ADDR_VAR 0 5
58969: PUSH
58970: LD_VAR 0 6
58974: PUSH
58975: LD_VAR 0 7
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// end ;
58984: LD_VAR 0 5
58988: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58989: LD_INT 0
58991: PPUSH
58992: PPUSH
58993: PPUSH
58994: PPUSH
// task := GetTaskList ( unit ) ;
58995: LD_ADDR_VAR 0 7
58999: PUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: CALL_OW 437
59009: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59010: LD_VAR 0 7
59014: NOT
59015: PUSH
59016: LD_VAR 0 1
59020: PPUSH
59021: LD_VAR 0 2
59025: PPUSH
59026: CALL_OW 308
59030: NOT
59031: AND
59032: IFFALSE 59036
// exit ;
59034: GO 59154
// if IsInArea ( unit , area ) then
59036: LD_VAR 0 1
59040: PPUSH
59041: LD_VAR 0 2
59045: PPUSH
59046: CALL_OW 308
59050: IFFALSE 59068
// begin ComMoveToArea ( unit , goAway ) ;
59052: LD_VAR 0 1
59056: PPUSH
59057: LD_VAR 0 3
59061: PPUSH
59062: CALL_OW 113
// exit ;
59066: GO 59154
// end ; if task [ 1 ] [ 1 ] <> M then
59068: LD_VAR 0 7
59072: PUSH
59073: LD_INT 1
59075: ARRAY
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PUSH
59081: LD_STRING M
59083: NONEQUAL
59084: IFFALSE 59088
// exit ;
59086: GO 59154
// x := task [ 1 ] [ 2 ] ;
59088: LD_ADDR_VAR 0 5
59092: PUSH
59093: LD_VAR 0 7
59097: PUSH
59098: LD_INT 1
59100: ARRAY
59101: PUSH
59102: LD_INT 2
59104: ARRAY
59105: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59106: LD_ADDR_VAR 0 6
59110: PUSH
59111: LD_VAR 0 7
59115: PUSH
59116: LD_INT 1
59118: ARRAY
59119: PUSH
59120: LD_INT 3
59122: ARRAY
59123: ST_TO_ADDR
// if InArea ( x , y , area ) then
59124: LD_VAR 0 5
59128: PPUSH
59129: LD_VAR 0 6
59133: PPUSH
59134: LD_VAR 0 2
59138: PPUSH
59139: CALL_OW 309
59143: IFFALSE 59154
// ComStop ( unit ) ;
59145: LD_VAR 0 1
59149: PPUSH
59150: CALL_OW 141
// end ;
59154: LD_VAR 0 4
59158: RET
// export function Abs ( value ) ; begin
59159: LD_INT 0
59161: PPUSH
// result := value ;
59162: LD_ADDR_VAR 0 2
59166: PUSH
59167: LD_VAR 0 1
59171: ST_TO_ADDR
// if value < 0 then
59172: LD_VAR 0 1
59176: PUSH
59177: LD_INT 0
59179: LESS
59180: IFFALSE 59197
// result := value * - 1 ;
59182: LD_ADDR_VAR 0 2
59186: PUSH
59187: LD_VAR 0 1
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: MUL
59196: ST_TO_ADDR
// end ;
59197: LD_VAR 0 2
59201: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59202: LD_INT 0
59204: PPUSH
59205: PPUSH
59206: PPUSH
59207: PPUSH
59208: PPUSH
59209: PPUSH
59210: PPUSH
59211: PPUSH
// if not unit or not building then
59212: LD_VAR 0 1
59216: NOT
59217: PUSH
59218: LD_VAR 0 2
59222: NOT
59223: OR
59224: IFFALSE 59228
// exit ;
59226: GO 59454
// x := GetX ( building ) ;
59228: LD_ADDR_VAR 0 4
59232: PUSH
59233: LD_VAR 0 2
59237: PPUSH
59238: CALL_OW 250
59242: ST_TO_ADDR
// y := GetY ( building ) ;
59243: LD_ADDR_VAR 0 6
59247: PUSH
59248: LD_VAR 0 2
59252: PPUSH
59253: CALL_OW 251
59257: ST_TO_ADDR
// d := GetDir ( building ) ;
59258: LD_ADDR_VAR 0 8
59262: PUSH
59263: LD_VAR 0 2
59267: PPUSH
59268: CALL_OW 254
59272: ST_TO_ADDR
// r := 4 ;
59273: LD_ADDR_VAR 0 9
59277: PUSH
59278: LD_INT 4
59280: ST_TO_ADDR
// for i := 1 to 5 do
59281: LD_ADDR_VAR 0 10
59285: PUSH
59286: DOUBLE
59287: LD_INT 1
59289: DEC
59290: ST_TO_ADDR
59291: LD_INT 5
59293: PUSH
59294: FOR_TO
59295: IFFALSE 59452
// begin _x := ShiftX ( x , d , r + i ) ;
59297: LD_ADDR_VAR 0 5
59301: PUSH
59302: LD_VAR 0 4
59306: PPUSH
59307: LD_VAR 0 8
59311: PPUSH
59312: LD_VAR 0 9
59316: PUSH
59317: LD_VAR 0 10
59321: PLUS
59322: PPUSH
59323: CALL_OW 272
59327: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59328: LD_ADDR_VAR 0 7
59332: PUSH
59333: LD_VAR 0 6
59337: PPUSH
59338: LD_VAR 0 8
59342: PPUSH
59343: LD_VAR 0 9
59347: PUSH
59348: LD_VAR 0 10
59352: PLUS
59353: PPUSH
59354: CALL_OW 273
59358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59359: LD_VAR 0 5
59363: PPUSH
59364: LD_VAR 0 7
59368: PPUSH
59369: CALL_OW 488
59373: PUSH
59374: LD_VAR 0 5
59378: PPUSH
59379: LD_VAR 0 7
59383: PPUSH
59384: CALL_OW 428
59388: PPUSH
59389: CALL_OW 247
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: IN
59404: NOT
59405: AND
59406: IFFALSE 59450
// begin ComMoveXY ( unit , _x , _y ) ;
59408: LD_VAR 0 1
59412: PPUSH
59413: LD_VAR 0 5
59417: PPUSH
59418: LD_VAR 0 7
59422: PPUSH
59423: CALL_OW 111
// result := [ _x , _y ] ;
59427: LD_ADDR_VAR 0 3
59431: PUSH
59432: LD_VAR 0 5
59436: PUSH
59437: LD_VAR 0 7
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: ST_TO_ADDR
// exit ;
59446: POP
59447: POP
59448: GO 59454
// end ; end ;
59450: GO 59294
59452: POP
59453: POP
// end ;
59454: LD_VAR 0 3
59458: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59459: LD_INT 0
59461: PPUSH
59462: PPUSH
59463: PPUSH
// result := 0 ;
59464: LD_ADDR_VAR 0 3
59468: PUSH
59469: LD_INT 0
59471: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59472: LD_VAR 0 1
59476: PUSH
59477: LD_INT 0
59479: LESS
59480: PUSH
59481: LD_VAR 0 1
59485: PUSH
59486: LD_INT 8
59488: GREATER
59489: OR
59490: PUSH
59491: LD_VAR 0 2
59495: PUSH
59496: LD_INT 0
59498: LESS
59499: OR
59500: PUSH
59501: LD_VAR 0 2
59505: PUSH
59506: LD_INT 8
59508: GREATER
59509: OR
59510: IFFALSE 59514
// exit ;
59512: GO 59589
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59514: LD_ADDR_VAR 0 4
59518: PUSH
59519: LD_INT 22
59521: PUSH
59522: LD_VAR 0 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PPUSH
59531: CALL_OW 69
59535: PUSH
59536: FOR_IN
59537: IFFALSE 59587
// begin un := UnitShoot ( i ) ;
59539: LD_ADDR_VAR 0 5
59543: PUSH
59544: LD_VAR 0 4
59548: PPUSH
59549: CALL_OW 504
59553: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59554: LD_VAR 0 5
59558: PPUSH
59559: CALL_OW 255
59563: PUSH
59564: LD_VAR 0 1
59568: EQUAL
59569: IFFALSE 59585
// begin result := un ;
59571: LD_ADDR_VAR 0 3
59575: PUSH
59576: LD_VAR 0 5
59580: ST_TO_ADDR
// exit ;
59581: POP
59582: POP
59583: GO 59589
// end ; end ;
59585: GO 59536
59587: POP
59588: POP
// end ;
59589: LD_VAR 0 3
59593: RET
// export function GetCargoBay ( units ) ; begin
59594: LD_INT 0
59596: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59597: LD_ADDR_VAR 0 2
59601: PUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: LD_INT 2
59609: PUSH
59610: LD_INT 34
59612: PUSH
59613: LD_INT 12
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 34
59622: PUSH
59623: LD_INT 51
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 34
59632: PUSH
59633: LD_INT 32
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 34
59642: PUSH
59643: LD_EXP 8
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: PPUSH
59659: CALL_OW 72
59663: ST_TO_ADDR
// end ; end_of_file
59664: LD_VAR 0 2
59668: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59669: LD_VAR 0 1
59673: PUSH
59674: LD_INT 200
59676: DOUBLE
59677: GREATEREQUAL
59678: IFFALSE 59686
59680: LD_INT 299
59682: DOUBLE
59683: LESSEQUAL
59684: IFTRUE 59688
59686: GO 59720
59688: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59689: LD_VAR 0 1
59693: PPUSH
59694: LD_VAR 0 2
59698: PPUSH
59699: LD_VAR 0 3
59703: PPUSH
59704: LD_VAR 0 4
59708: PPUSH
59709: LD_VAR 0 5
59713: PPUSH
59714: CALL 18130 0 5
59718: GO 59797
59720: LD_INT 300
59722: DOUBLE
59723: GREATEREQUAL
59724: IFFALSE 59732
59726: LD_INT 399
59728: DOUBLE
59729: LESSEQUAL
59730: IFTRUE 59734
59732: GO 59796
59734: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59735: LD_VAR 0 1
59739: PPUSH
59740: LD_VAR 0 2
59744: PPUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: LD_VAR 0 4
59754: PPUSH
59755: LD_VAR 0 5
59759: PPUSH
59760: LD_VAR 0 6
59764: PPUSH
59765: LD_VAR 0 7
59769: PPUSH
59770: LD_VAR 0 8
59774: PPUSH
59775: LD_VAR 0 9
59779: PPUSH
59780: LD_VAR 0 10
59784: PPUSH
59785: LD_VAR 0 11
59789: PPUSH
59790: CALL 16018 0 11
59794: GO 59797
59796: POP
// end ;
59797: PPOPN 11
59799: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59800: LD_VAR 0 1
59804: PPUSH
59805: LD_VAR 0 2
59809: PPUSH
59810: LD_VAR 0 3
59814: PPUSH
59815: LD_VAR 0 4
59819: PPUSH
59820: LD_VAR 0 5
59824: PPUSH
59825: CALL 18112 0 5
// end ; end_of_file
59829: PPOPN 5
59831: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59832: LD_VAR 0 1
59836: PPUSH
59837: LD_VAR 0 2
59841: PPUSH
59842: LD_VAR 0 3
59846: PPUSH
59847: LD_VAR 0 4
59851: PPUSH
59852: LD_VAR 0 5
59856: PPUSH
59857: LD_VAR 0 6
59861: PPUSH
59862: CALL 4826 0 6
// end ;
59866: PPOPN 6
59868: END
