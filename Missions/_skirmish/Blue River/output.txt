// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
  11: LD_INT 0
  13: PPUSH
  14: LD_INT 0
  16: PPUSH
  17: LD_INT 7
  19: PPUSH
  20: LD_INT 37963
  22: NEG
  23: PPUSH
  24: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  28: LD_INT 0
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 7
  36: PPUSH
  37: CALL_OW 331
// PrepareBase ;
  41: CALL 514 0 0
// Action ;
  45: CALL 54 0 0
// SaveForQuickRestart ;
  49: CALL_OW 22
// end ;
  53: END
// function Action ; var un , f , i ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
// SetBName ( brave , brave ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_STRING brave
  65: PPUSH
  66: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL_OW 274
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_INT 6000
  96: PUSH
  97: LD_INT 4500
  99: PUSH
 100: LD_INT 3000
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PUSH
 108: LD_OWVAR 67
 112: ARRAY
 113: PPUSH
 114: CALL_OW 277
// InGameOn ;
 118: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 122: LD_INT 1
 124: PPUSH
 125: CALL_OW 87
// Say ( com , DJack1 ) ;
 129: LD_EXP 1
 133: PPUSH
 134: LD_STRING DJack1
 136: PPUSH
 137: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 141: LD_EXP 3
 145: PPUSH
 146: LD_STRING DUn1
 148: PPUSH
 149: CALL_OW 88
// Say ( com , DJack2 ) ;
 153: LD_EXP 1
 157: PPUSH
 158: LD_STRING DJack2
 160: PPUSH
 161: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 165: LD_EXP 3
 169: PPUSH
 170: LD_STRING DUn2
 172: PPUSH
 173: CALL_OW 88
// Say ( com , DJack3 ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_STRING DJack3
 184: PPUSH
 185: CALL_OW 88
// uc_side := 7 ;
 189: LD_ADDR_OWVAR 20
 193: PUSH
 194: LD_INT 7
 196: ST_TO_ADDR
// uc_nation := 1 ;
 197: LD_ADDR_OWVAR 21
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 205: LD_INT 1
 207: PPUSH
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 380
// hc_name :=  ;
 218: LD_ADDR_OWVAR 26
 222: PUSH
 223: LD_STRING 
 225: ST_TO_ADDR
// un := CreateHuman ;
 226: LD_ADDR_VAR 0 2
 230: PUSH
 231: CALL_OW 44
 235: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 236: LD_INT 105
 238: PPUSH
 239: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 243: LD_VAR 0 2
 247: PPUSH
 248: LD_STRING DRadio1
 250: PPUSH
 251: CALL_OW 94
// Say ( com , DJack4 ) ;
 255: LD_EXP 1
 259: PPUSH
 260: LD_STRING DJack4
 262: PPUSH
 263: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 267: LD_VAR 0 2
 271: PPUSH
 272: LD_STRING DRadio2
 274: PPUSH
 275: CALL_OW 94
// Wait ( 0 0$01 ) ;
 279: LD_INT 35
 281: PPUSH
 282: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_STRING DDoc1
 293: PPUSH
 294: CALL_OW 94
// Say ( com , DJack5 ) ;
 298: LD_EXP 1
 302: PPUSH
 303: LD_STRING DJack5
 305: PPUSH
 306: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 310: LD_EXP 2
 314: PPUSH
 315: LD_STRING DDoc2
 317: PPUSH
 318: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 322: LD_VAR 0 2
 326: PPUSH
 327: LD_STRING DRadio3
 329: PPUSH
 330: CALL_OW 94
// Say ( com , DJack6 ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_STRING DJack6
 341: PPUSH
 342: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 346: LD_ADDR_VAR 0 3
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 7
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: ST_TO_ADDR
// for i = 2 to f do
 380: LD_ADDR_VAR 0 4
 384: PUSH
 385: DOUBLE
 386: LD_INT 2
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 3
 394: PUSH
 395: FOR_TO
 396: IFFALSE 453
// begin ComExitBuilding ( f [ i ] ) ;
 398: LD_VAR 0 3
 402: PUSH
 403: LD_VAR 0 4
 407: ARRAY
 408: PPUSH
 409: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 413: LD_VAR 0 3
 417: PUSH
 418: LD_VAR 0 4
 422: ARRAY
 423: PPUSH
 424: LD_INT 7
 426: PPUSH
 427: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ARRAY
 441: PPUSH
 442: LD_EXP 1
 446: PPUSH
 447: CALL_OW 179
// end ;
 451: GO 395
 453: POP
 454: POP
// ComExitBuilding ( com ) ;
 455: LD_EXP 1
 459: PPUSH
 460: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 45
 471: PPUSH
 472: LD_INT 32
 474: PPUSH
 475: CALL_OW 178
// Wait ( 0 0$03 ) ;
 479: LD_INT 105
 481: PPUSH
 482: CALL_OW 67
// Say ( com , DJack7 ) ;
 486: LD_EXP 1
 490: PPUSH
 491: LD_STRING DJack7
 493: PPUSH
 494: CALL_OW 88
// InGameOff ;
 498: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 502: LD_STRING TDef
 504: PPUSH
 505: CALL_OW 337
// end ; end_of_file
 509: LD_VAR 0 1
 513: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 514: LD_INT 0
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 520: LD_INT 30
 522: PPUSH
 523: LD_INT 14
 525: PPUSH
 526: LD_INT 7
 528: PPUSH
 529: LD_INT 20
 531: PPUSH
 532: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 536: LD_INT 49
 538: PPUSH
 539: LD_INT 17
 541: PPUSH
 542: LD_INT 7
 544: PPUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 552: LD_INT 35
 554: PPUSH
 555: LD_INT 46
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 568: LD_INT 70
 570: PPUSH
 571: LD_INT 39
 573: PPUSH
 574: LD_INT 7
 576: PPUSH
 577: LD_INT 20
 579: PPUSH
 580: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 584: LD_INT 30
 586: PPUSH
 587: LD_INT 14
 589: PPUSH
 590: LD_INT 7
 592: PPUSH
 593: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 597: LD_INT 49
 599: PPUSH
 600: LD_INT 17
 602: PPUSH
 603: LD_INT 7
 605: PPUSH
 606: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 610: LD_INT 35
 612: PPUSH
 613: LD_INT 46
 615: PPUSH
 616: LD_INT 7
 618: PPUSH
 619: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 623: LD_INT 70
 625: PPUSH
 626: LD_INT 39
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: CALL_OW 331
// uc_side := 7 ;
 636: LD_ADDR_OWVAR 20
 640: PUSH
 641: LD_INT 7
 643: ST_TO_ADDR
// uc_nation := 1 ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// if Difficulty < 3 then
 652: LD_OWVAR 67
 656: PUSH
 657: LD_INT 3
 659: LESS
 660: IFFALSE 761
// begin for i = 1 to 2 do
 662: LD_ADDR_VAR 0 2
 666: PUSH
 667: DOUBLE
 668: LD_INT 1
 670: DEC
 671: ST_TO_ADDR
 672: LD_INT 2
 674: PUSH
 675: FOR_TO
 676: IFFALSE 757
// begin vc_chassis := us_heavy_tracked ;
 678: LD_ADDR_OWVAR 37
 682: PUSH
 683: LD_INT 4
 685: ST_TO_ADDR
// vc_engine := 3 ;
 686: LD_ADDR_OWVAR 39
 690: PUSH
 691: LD_INT 3
 693: ST_TO_ADDR
// vc_control := control_computer ;
 694: LD_ADDR_OWVAR 38
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 702: LD_ADDR_OWVAR 40
 706: PUSH
 707: LD_INT 10
 709: ST_TO_ADDR
// un := CreateVehicle ;
 710: LD_ADDR_VAR 0 3
 714: PUSH
 715: CALL_OW 45
 719: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 720: LD_VAR 0 3
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: LD_INT 5
 730: PPUSH
 731: CALL_OW 12
 735: PPUSH
 736: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 740: LD_VAR 0 3
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 675
 757: POP
 758: POP
// end else
 759: GO 850
// begin vc_chassis := us_medium_tracked ;
 761: LD_ADDR_OWVAR 37
 765: PUSH
 766: LD_INT 3
 768: ST_TO_ADDR
// vc_engine := engine_combustion ;
 769: LD_ADDR_OWVAR 39
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// vc_control := control_manual ;
 777: LD_ADDR_OWVAR 38
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 785: LD_ADDR_OWVAR 40
 789: PUSH
 790: LD_INT 4
 792: ST_TO_ADDR
// un := CreateVehicle ;
 793: LD_ADDR_VAR 0 3
 797: PUSH
 798: CALL_OW 45
 802: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 803: LD_VAR 0 3
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 5
 813: PPUSH
 814: CALL_OW 12
 818: PPUSH
 819: CALL_OW 233
// SetFuel ( un , 75 ) ;
 823: LD_VAR 0 3
 827: PPUSH
 828: LD_INT 75
 830: PPUSH
 831: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 835: LD_VAR 0 3
 839: PPUSH
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 850: LD_ADDR_VAR 0 4
 854: PUSH
 855: LD_INT 8
 857: PUSH
 858: LD_INT 7
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_OWVAR 67
 873: ARRAY
 874: ST_TO_ADDR
// hc_importance := 100 ;
 875: LD_ADDR_OWVAR 32
 879: PUSH
 880: LD_INT 100
 882: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_VAR 0 4
 893: PPUSH
 894: CALL_OW 380
// hc_name := Jack Collins ;
 898: LD_ADDR_OWVAR 26
 902: PUSH
 903: LD_STRING Jack Collins
 905: ST_TO_ADDR
// com := CreateHuman ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: CALL_OW 44
 915: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 916: LD_EXP 1
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL_OW 52
// hc_importance := 0 ;
 928: LD_ADDR_OWVAR 32
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// hc_gallery :=  ;
 936: LD_ADDR_OWVAR 33
 940: PUSH
 941: LD_STRING 
 943: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 4
 954: PPUSH
 955: CALL_OW 380
// hc_name := Thomas Jackson ;
 959: LD_ADDR_OWVAR 26
 963: PUSH
 964: LD_STRING Thomas Jackson
 966: ST_TO_ADDR
// k1 := CreateHuman ;
 967: LD_ADDR_EXP 3
 971: PUSH
 972: CALL_OW 44
 976: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
 977: LD_EXP 3
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 52
// hc_name :=  ;
 989: LD_ADDR_OWVAR 26
 993: PUSH
 994: LD_STRING 
 996: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: DOUBLE
1003: LD_INT 1
1005: DEC
1006: ST_TO_ADDR
1007: LD_INT 9
1009: PUSH
1010: LD_INT 8
1012: PUSH
1013: LD_INT 7
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: PUSH
1021: LD_OWVAR 67
1025: ARRAY
1026: PUSH
1027: FOR_TO
1028: IFFALSE 1199
// begin Randomize ;
1030: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 12
1059: ARRAY
1060: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1061: LD_INT 0
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_INT 4
1069: PPUSH
1070: CALL_OW 12
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 380
// un := CreateHuman ;
1084: LD_ADDR_VAR 0 3
1088: PUSH
1089: CALL_OW 44
1093: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1094: LD_VAR 0 3
1098: PPUSH
1099: CALL_OW 257
1103: PUSH
1104: LD_INT 1
1106: DOUBLE
1107: EQUAL
1108: IFTRUE 1112
1110: GO 1127
1112: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 21
1120: PPUSH
1121: CALL_OW 52
1125: GO 1197
1127: LD_INT 2
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1150
1135: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1136: LD_VAR 0 3
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL_OW 52
1148: GO 1197
1150: LD_INT 3
1152: DOUBLE
1153: EQUAL
1154: IFTRUE 1158
1156: GO 1173
1158: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_INT 38
1166: PPUSH
1167: CALL_OW 52
1171: GO 1197
1173: LD_INT 4
1175: DOUBLE
1176: EQUAL
1177: IFTRUE 1181
1179: GO 1196
1181: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 36
1189: PPUSH
1190: CALL_OW 52
1194: GO 1197
1196: POP
// end ;
1197: GO 1027
1199: POP
1200: POP
// uc_side := 2 ;
1201: LD_ADDR_OWVAR 20
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// hc_name := _ ;
1217: LD_ADDR_OWVAR 26
1221: PUSH
1222: LD_STRING _
1224: ST_TO_ADDR
// hc_gallery :=  ;
1225: LD_ADDR_OWVAR 33
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// hc_class := 4 ;
1233: LD_ADDR_OWVAR 28
1237: PUSH
1238: LD_INT 4
1240: ST_TO_ADDR
// hc_sex := sex_male ;
1241: LD_ADDR_OWVAR 27
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// doc := CreateHuman ;
1249: LD_ADDR_EXP 2
1253: PUSH
1254: CALL_OW 44
1258: ST_TO_ADDR
// end ; end_of_file
1259: LD_VAR 0 1
1263: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
// uc_side := 2 ;
1270: LD_ADDR_OWVAR 20
1274: PUSH
1275: LD_INT 2
1277: ST_TO_ADDR
// uc_nation := 2 ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_INT 2
1285: ST_TO_ADDR
// tmp := [ ] ;
1286: LD_ADDR_VAR 0 5
1290: PUSH
1291: EMPTY
1292: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1293: LD_ADDR_OWVAR 31
1297: PUSH
1298: LD_INT 3
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 10
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: LD_OWVAR 67
1316: ARRAY
1317: PUSH
1318: LD_INT 3
1320: PUSH
1321: LD_INT 6
1323: PUSH
1324: LD_INT 10
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: PUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 6
1343: PUSH
1344: LD_INT 10
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_OWVAR 67
1356: ARRAY
1357: PUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 10
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: LD_OWVAR 67
1376: ARRAY
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1384: LD_INT 4
1386: PPUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 7
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: IFFALSE 1442
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: LD_INT 4
1410: PPUSH
1411: LD_INT 22
1413: PUSH
1414: LD_INT 7
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1440
// RemoveUnit ( i ) ;
1429: LD_VAR 0 3
1433: PPUSH
1434: CALL_OW 64
1438: GO 1426
1440: POP
1441: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 22
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PPUSH
1455: CALL_OW 70
1459: IFFALSE 1500
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: LD_INT 5
1468: PPUSH
1469: LD_INT 22
1471: PUSH
1472: LD_INT 7
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 70
1483: PUSH
1484: FOR_IN
1485: IFFALSE 1498
// RemoveUnit ( i ) ;
1487: LD_VAR 0 3
1491: PPUSH
1492: CALL_OW 64
1496: GO 1484
1498: POP
1499: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 22
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: CALL_OW 70
1517: IFFALSE 1558
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: LD_INT 1
1526: PPUSH
1527: LD_INT 22
1529: PUSH
1530: LD_INT 7
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 70
1541: PUSH
1542: FOR_IN
1543: IFFALSE 1556
// RemoveUnit ( i ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: CALL_OW 64
1554: GO 1542
1556: POP
1557: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1558: LD_INT 2
1560: PPUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 70
1575: IFFALSE 1616
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1577: LD_ADDR_VAR 0 3
1581: PUSH
1582: LD_INT 2
1584: PPUSH
1585: LD_INT 22
1587: PUSH
1588: LD_INT 7
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 70
1599: PUSH
1600: FOR_IN
1601: IFFALSE 1614
// RemoveUnit ( i ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: CALL_OW 64
1612: GO 1600
1614: POP
1615: POP
// case num of 1 :
1616: LD_VAR 0 1
1620: PUSH
1621: LD_INT 1
1623: DOUBLE
1624: EQUAL
1625: IFTRUE 1629
1627: GO 1882
1629: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 5
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: LD_INT 6
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_OWVAR 67
1658: ARRAY
1659: PUSH
1660: FOR_TO
1661: IFFALSE 1753
// begin uc_nation := 0 ;
1663: LD_ADDR_OWVAR 21
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1671: LD_ADDR_OWVAR 28
1675: PUSH
1676: LD_INT 15
1678: ST_TO_ADDR
// hc_gallery :=  ;
1679: LD_ADDR_OWVAR 33
1683: PUSH
1684: LD_STRING 
1686: ST_TO_ADDR
// hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1695: LD_ADDR_OWVAR 29
1699: PUSH
1700: LD_INT 16
1702: PUSH
1703: LD_INT 12
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// un := CreateHuman ;
1710: LD_ADDR_VAR 0 4
1714: PUSH
1715: CALL_OW 44
1719: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// tmp := tmp ^ un ;
1735: LD_ADDR_VAR 0 5
1739: PUSH
1740: LD_VAR 0 5
1744: PUSH
1745: LD_VAR 0 4
1749: ADD
1750: ST_TO_ADDR
// end ;
1751: GO 1660
1753: POP
1754: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1755: LD_ADDR_VAR 0 3
1759: PUSH
1760: DOUBLE
1761: LD_INT 1
1763: DEC
1764: ST_TO_ADDR
1765: LD_INT 4
1767: PUSH
1768: LD_INT 5
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PUSH
1785: FOR_TO
1786: IFFALSE 1878
// begin uc_nation := 0 ;
1788: LD_ADDR_OWVAR 21
1792: PUSH
1793: LD_INT 0
1795: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1796: LD_ADDR_OWVAR 28
1800: PUSH
1801: LD_INT 15
1803: ST_TO_ADDR
// hc_gallery :=  ;
1804: LD_ADDR_OWVAR 33
1808: PUSH
1809: LD_STRING 
1811: ST_TO_ADDR
// hc_name :=  ;
1812: LD_ADDR_OWVAR 26
1816: PUSH
1817: LD_STRING 
1819: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1820: LD_ADDR_OWVAR 29
1824: PUSH
1825: LD_INT 16
1827: PUSH
1828: LD_INT 12
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: ST_TO_ADDR
// un := CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: CALL_OW 44
1844: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 5
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// tmp := tmp ^ un ;
1860: LD_ADDR_VAR 0 5
1864: PUSH
1865: LD_VAR 0 5
1869: PUSH
1870: LD_VAR 0 4
1874: ADD
1875: ST_TO_ADDR
// end ;
1876: GO 1785
1878: POP
1879: POP
// end ; 2 :
1880: GO 2660
1882: LD_INT 2
1884: DOUBLE
1885: EQUAL
1886: IFTRUE 1890
1888: GO 2018
1890: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: LD_INT 5
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: LD_OWVAR 67
1919: ARRAY
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2014
// begin uc_nation := 0 ;
1924: LD_ADDR_OWVAR 21
1928: PUSH
1929: LD_INT 0
1931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1932: LD_ADDR_OWVAR 28
1936: PUSH
1937: LD_INT 17
1939: ST_TO_ADDR
// hc_gallery :=  ;
1940: LD_ADDR_OWVAR 33
1944: PUSH
1945: LD_STRING 
1947: ST_TO_ADDR
// hc_name :=  ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING 
1955: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 12
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// un := CreateHuman ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
1981: LD_VAR 0 4
1985: PPUSH
1986: LD_INT 3
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// tmp := tmp ^ un ;
1996: LD_ADDR_VAR 0 5
2000: PUSH
2001: LD_VAR 0 5
2005: PUSH
2006: LD_VAR 0 4
2010: ADD
2011: ST_TO_ADDR
// end ;
2012: GO 1921
2014: POP
2015: POP
// end ; 3 :
2016: GO 2660
2018: LD_INT 3
2020: DOUBLE
2021: EQUAL
2022: IFTRUE 2026
2024: GO 2186
2026: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_INT 4
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 6
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_OWVAR 67
2055: ARRAY
2056: PUSH
2057: FOR_TO
2058: IFFALSE 2182
// begin uc_nation := 2 ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2068: LD_ADDR_OWVAR 37
2072: PUSH
2073: LD_INT 14
2075: ST_TO_ADDR
// vc_engine := 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control := control_apeman ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 5
2091: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 27
2099: PUSH
2100: LD_INT 28
2102: PUSH
2103: LD_INT 29
2105: PUSH
2106: LD_INT 91
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// un := CreateVehicle ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// tmp := tmp ^ un ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PUSH
2147: LD_VAR 0 4
2151: ADD
2152: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2165: LD_VAR 0 4
2169: PPUSH
2170: LD_INT 2
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// end ;
2180: GO 2057
2182: POP
2183: POP
// end ; 4 :
2184: GO 2660
2186: LD_INT 4
2188: DOUBLE
2189: EQUAL
2190: IFTRUE 2194
2192: GO 2362
2194: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 3
2207: PPUSH
2208: LD_INT 4
2210: PUSH
2211: LD_INT 5
2213: PUSH
2214: LD_INT 6
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: PUSH
2222: LD_OWVAR 67
2226: ARRAY
2227: PPUSH
2228: CALL_OW 12
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2358
// begin uc_nation := 2 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2244: LD_ADDR_OWVAR 37
2248: PUSH
2249: LD_INT 14
2251: ST_TO_ADDR
// vc_engine := 3 ;
2252: LD_ADDR_OWVAR 39
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// vc_control := control_apeman ;
2260: LD_ADDR_OWVAR 38
2264: PUSH
2265: LD_INT 5
2267: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2268: LD_ADDR_OWVAR 40
2272: PUSH
2273: LD_INT 27
2275: PUSH
2276: LD_INT 28
2278: PUSH
2279: LD_INT 29
2281: PUSH
2282: LD_INT 91
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 1
2293: PPUSH
2294: LD_INT 4
2296: PPUSH
2297: CALL_OW 12
2301: ARRAY
2302: ST_TO_ADDR
// un := CreateVehicle ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: CALL_OW 45
2312: ST_TO_ADDR
// tmp := tmp ^ un ;
2313: LD_ADDR_VAR 0 5
2317: PUSH
2318: LD_VAR 0 5
2322: PUSH
2323: LD_VAR 0 4
2327: ADD
2328: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2329: LD_VAR 0 4
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2341: LD_VAR 0 4
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 0
2351: PPUSH
2352: CALL_OW 49
// end ;
2356: GO 2233
2358: POP
2359: POP
// end ; 5 :
2360: GO 2660
2362: LD_INT 5
2364: DOUBLE
2365: EQUAL
2366: IFTRUE 2370
2368: GO 2530
2370: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 3
2383: PUSH
2384: LD_INT 4
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_OWVAR 67
2399: ARRAY
2400: PUSH
2401: FOR_TO
2402: IFFALSE 2526
// begin uc_nation := 2 ;
2404: LD_ADDR_OWVAR 21
2408: PUSH
2409: LD_INT 2
2411: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2412: LD_ADDR_OWVAR 37
2416: PUSH
2417: LD_INT 14
2419: ST_TO_ADDR
// vc_engine := 3 ;
2420: LD_ADDR_OWVAR 39
2424: PUSH
2425: LD_INT 3
2427: ST_TO_ADDR
// vc_control := control_apeman ;
2428: LD_ADDR_OWVAR 38
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2436: LD_ADDR_OWVAR 40
2440: PUSH
2441: LD_INT 27
2443: PUSH
2444: LD_INT 28
2446: PUSH
2447: LD_INT 29
2449: PUSH
2450: LD_INT 91
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 4
2464: PPUSH
2465: CALL_OW 12
2469: ARRAY
2470: ST_TO_ADDR
// un := CreateVehicle ;
2471: LD_ADDR_VAR 0 4
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// tmp := tmp ^ un ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: LD_VAR 0 4
2495: ADD
2496: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2509: LD_VAR 0 4
2513: PPUSH
2514: LD_INT 5
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: CALL_OW 49
// end ;
2524: GO 2401
2526: POP
2527: POP
// end ; 6 :
2528: GO 2660
2530: LD_INT 6
2532: DOUBLE
2533: EQUAL
2534: IFTRUE 2538
2536: GO 2659
2538: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: DOUBLE
2545: LD_INT 1
2547: DEC
2548: ST_TO_ADDR
2549: LD_INT 2
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: LD_INT 4
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: LD_OWVAR 67
2567: ARRAY
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2655
// begin uc_nation := 2 ;
2572: LD_ADDR_OWVAR 21
2576: PUSH
2577: LD_INT 2
2579: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2580: LD_ADDR_OWVAR 37
2584: PUSH
2585: LD_INT 11
2587: ST_TO_ADDR
// vc_engine := engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// vc_control := control_apeman ;
2596: LD_ADDR_OWVAR 38
2600: PUSH
2601: LD_INT 5
2603: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2604: LD_ADDR_OWVAR 40
2608: PUSH
2609: LD_INT 24
2611: ST_TO_ADDR
// un := CreateVehicle ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: CALL_OW 45
2621: ST_TO_ADDR
// tmp := tmp ^ un ;
2622: LD_ADDR_VAR 0 5
2626: PUSH
2627: LD_VAR 0 5
2631: PUSH
2632: LD_VAR 0 4
2636: ADD
2637: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2638: LD_VAR 0 4
2642: PPUSH
2643: LD_INT 8
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 49
// end ;
2653: GO 2569
2655: POP
2656: POP
// end ; end ;
2657: GO 2660
2659: POP
// result := tmp ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_VAR 0 5
2669: ST_TO_ADDR
// end ;
2670: LD_VAR 0 2
2674: RET
// export function ComitSib ; var un ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
// uc_side := 2 ;
2679: LD_ADDR_OWVAR 20
2683: PUSH
2684: LD_INT 2
2686: ST_TO_ADDR
// uc_nation := 2 ;
2687: LD_ADDR_OWVAR 21
2691: PUSH
2692: LD_INT 2
2694: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2695: LD_INT 0
2697: PPUSH
2698: LD_INT 4
2700: PPUSH
2701: LD_INT 7
2703: PPUSH
2704: CALL_OW 380
// un := CreateHuman ;
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: CALL_OW 44
2717: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2718: LD_VAR 0 2
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_INT 63
2740: PPUSH
2741: LD_INT 37
2743: PPUSH
2744: CALL_OW 158
// end ;
2748: LD_VAR 0 1
2752: RET
// export function DSay ; var i ; begin
2753: LD_INT 0
2755: PPUSH
2756: PPUSH
// Randomize ;
2757: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_INT 8
2771: PPUSH
2772: CALL_OW 12
2776: ST_TO_ADDR
// case i of 1 :
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: DOUBLE
2785: EQUAL
2786: IFTRUE 2790
2788: GO 2805
2790: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2791: LD_EXP 2
2795: PPUSH
2796: LD_STRING DDocA1
2798: PPUSH
2799: CALL_OW 94
2803: GO 2967
2805: LD_INT 2
2807: DOUBLE
2808: EQUAL
2809: IFTRUE 2813
2811: GO 2828
2813: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2814: LD_EXP 2
2818: PPUSH
2819: LD_STRING DDocA2
2821: PPUSH
2822: CALL_OW 94
2826: GO 2967
2828: LD_INT 3
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2851
2836: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2837: LD_EXP 2
2841: PPUSH
2842: LD_STRING DDocA3
2844: PPUSH
2845: CALL_OW 94
2849: GO 2967
2851: LD_INT 4
2853: DOUBLE
2854: EQUAL
2855: IFTRUE 2859
2857: GO 2874
2859: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2860: LD_EXP 2
2864: PPUSH
2865: LD_STRING DDocA4
2867: PPUSH
2868: CALL_OW 94
2872: GO 2967
2874: LD_INT 5
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2897
2882: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2883: LD_EXP 2
2887: PPUSH
2888: LD_STRING DDocA5
2890: PPUSH
2891: CALL_OW 94
2895: GO 2967
2897: LD_INT 6
2899: DOUBLE
2900: EQUAL
2901: IFTRUE 2905
2903: GO 2920
2905: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2906: LD_EXP 2
2910: PPUSH
2911: LD_STRING DDocA6
2913: PPUSH
2914: CALL_OW 94
2918: GO 2967
2920: LD_INT 7
2922: DOUBLE
2923: EQUAL
2924: IFTRUE 2928
2926: GO 2943
2928: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2929: LD_EXP 2
2933: PPUSH
2934: LD_STRING DDocA7
2936: PPUSH
2937: CALL_OW 94
2941: GO 2967
2943: LD_INT 8
2945: DOUBLE
2946: EQUAL
2947: IFTRUE 2951
2949: GO 2966
2951: POP
// SayRadio ( doc , DDocA8 ) ; end ;
2952: LD_EXP 2
2956: PPUSH
2957: LD_STRING DDocA8
2959: PPUSH
2960: CALL_OW 94
2964: GO 2967
2966: POP
// end ; end_of_file
2967: LD_VAR 0 1
2971: RET
// every 0 0$01 do
2972: GO 2974
2974: DISABLE
// begin display_strings := [ #tick , tick ] ;
2975: LD_ADDR_OWVAR 47
2979: PUSH
2980: LD_STRING #tick
2982: PUSH
2983: LD_OWVAR 1
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// enable ;
2992: ENABLE
// end ;
2993: END
// export pom , hover , attackN ; every 1 do
2994: GO 2996
2996: DISABLE
// begin pom := [ ] ;
2997: LD_ADDR_EXP 4
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// hover := [ ] ;
3004: LD_ADDR_EXP 5
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// attackN := 0 ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_INT 0
3018: ST_TO_ADDR
// end ;
3019: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3020: LD_EXP 4
3024: IFFALSE 3446
3026: GO 3028
3028: DISABLE
3029: LD_INT 0
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
// begin enable ;
3035: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: LD_INT 22
3043: PUSH
3044: LD_INT 7
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i = 1 to pom do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_EXP 4
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3130
// if not HasTask ( pom [ i ] ) then
3074: LD_EXP 4
3078: PUSH
3079: LD_VAR 0 1
3083: ARRAY
3084: PPUSH
3085: CALL_OW 314
3089: NOT
3090: IFFALSE 3128
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3092: LD_EXP 4
3096: PUSH
3097: LD_VAR 0 1
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 74
3123: PPUSH
3124: CALL_OW 115
3128: GO 3071
3130: POP
3131: POP
// if hover then
3132: LD_EXP 5
3136: IFFALSE 3446
// begin for i = 1 to hover do
3138: LD_ADDR_VAR 0 1
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 5
3152: PUSH
3153: FOR_TO
3154: IFFALSE 3444
// begin if GetLives ( hover [ i ] ) < 250 then
3156: LD_EXP 5
3160: PUSH
3161: LD_VAR 0 1
3165: ARRAY
3166: PPUSH
3167: CALL_OW 256
3171: PUSH
3172: LD_INT 250
3174: LESS
3175: IFFALSE 3242
// begin for z = 1 to 1 + Difficulty do
3177: LD_ADDR_VAR 0 3
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 1
3189: PUSH
3190: LD_OWVAR 67
3194: PLUS
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3240
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3199: LD_EXP 5
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 5
3219: PUSH
3220: LD_VAR 0 1
3224: ARRAY
3225: PPUSH
3226: CALL_OW 251
3230: PPUSH
3231: LD_INT 10
3233: PPUSH
3234: CALL_OW 453
3238: GO 3196
3240: POP
3241: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3242: LD_VAR 0 2
3246: PPUSH
3247: LD_INT 25
3249: PUSH
3250: LD_INT 2
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: LD_INT 54
3262: PUSH
3263: EMPTY
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 72
3278: PUSH
3279: LD_INT 0
3281: GREATER
3282: IFFALSE 3364
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3284: LD_ADDR_VAR 0 4
3288: PUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_INT 25
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 54
3309: PUSH
3310: EMPTY
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PPUSH
3321: CALL_OW 72
3325: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3326: LD_EXP 5
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_EXP 5
3346: PUSH
3347: LD_VAR 0 1
3351: ARRAY
3352: PPUSH
3353: CALL_OW 74
3357: PPUSH
3358: CALL_OW 115
// end else
3362: GO 3442
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3364: LD_ADDR_VAR 0 4
3368: PUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 54
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 72
3405: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3406: LD_EXP 5
3410: PUSH
3411: LD_VAR 0 1
3415: ARRAY
3416: PPUSH
3417: LD_VAR 0 4
3421: PPUSH
3422: LD_EXP 5
3426: PUSH
3427: LD_VAR 0 1
3431: ARRAY
3432: PPUSH
3433: CALL_OW 74
3437: PPUSH
3438: CALL_OW 115
// end ; end ;
3442: GO 3153
3444: POP
3445: POP
// end ; end ;
3446: PPOPN 4
3448: END
// every 3 3$10 do var i , un ;
3449: GO 3451
3451: DISABLE
3452: LD_INT 0
3454: PPUSH
3455: PPUSH
// begin uc_side := 7 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 7
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// for i = 1 to 2 do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 2
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3651
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3488: LD_INT 1
3490: PPUSH
3491: LD_INT 5
3493: PPUSH
3494: LD_INT 7
3496: PUSH
3497: LD_INT 6
3499: PUSH
3500: LD_INT 6
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PUSH
3508: LD_OWVAR 67
3512: ARRAY
3513: PPUSH
3514: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3518: LD_ADDR_OWVAR 37
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// vc_engine := engine_combustion ;
3526: LD_ADDR_OWVAR 39
3530: PUSH
3531: LD_INT 1
3533: ST_TO_ADDR
// vc_control := control_manual ;
3534: LD_ADDR_OWVAR 38
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3542: LD_ADDR_OWVAR 41
3546: PUSH
3547: LD_INT 66
3549: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3550: LD_ADDR_OWVAR 40
3554: PUSH
3555: LD_INT 2
3557: ST_TO_ADDR
// un := CreateVehicle ;
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: CALL_OW 45
3567: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3568: LD_VAR 0 2
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 48
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3598: CALL_OW 44
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3612: LD_VAR 0 2
3616: PPUSH
3617: LD_INT 49
3619: PPUSH
3620: LD_INT 17
3622: PPUSH
3623: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3627: LD_VAR 0 2
3631: PPUSH
3632: LD_INT 48
3634: PPUSH
3635: LD_INT 36
3637: PPUSH
3638: CALL_OW 171
// Wait ( 0 0$02 ) ;
3642: LD_INT 70
3644: PPUSH
3645: CALL_OW 67
// end ;
3649: GO 3485
3651: POP
3652: POP
// end ;
3653: PPOPN 2
3655: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3656: LD_EXP 6
3660: PUSH
3661: LD_INT 10
3663: PUSH
3664: LD_INT 12
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_OWVAR 67
3679: ARRAY
3680: LESS
3681: IFFALSE 4383
3683: GO 3685
3685: DISABLE
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// begin enable ;
3690: ENABLE
// Randomize ;
3691: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3695: LD_INT 35
3697: PPUSH
3698: LD_INT 6265
3700: PPUSH
3701: CALL_OW 12
3705: PPUSH
3706: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3710: LD_EXP 6
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: PUSH
3729: LD_OWVAR 67
3733: ARRAY
3734: LESS
3735: IFFALSE 3755
// c := Rand ( 1 , 2 ) else
3737: LD_ADDR_VAR 0 1
3741: PUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 12
3752: ST_TO_ADDR
3753: GO 3771
// c := Rand ( 1 , 3 ) ;
3755: LD_ADDR_VAR 0 1
3759: PUSH
3760: LD_INT 1
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: CALL_OW 12
3770: ST_TO_ADDR
// if attackN = 0 then
3771: LD_EXP 6
3775: PUSH
3776: LD_INT 0
3778: EQUAL
3779: IFFALSE 3795
// Say ( com , DJackAttack ) else
3781: LD_EXP 1
3785: PPUSH
3786: LD_STRING DJackAttack
3788: PPUSH
3789: CALL_OW 88
3793: GO 3799
// DSay ;
3795: CALL 2753 0 0
// case c of 1 :
3799: LD_VAR 0 1
3803: PUSH
3804: LD_INT 1
3806: DOUBLE
3807: EQUAL
3808: IFTRUE 3812
3810: GO 3994
3812: POP
// begin pom := pom ^ Attack ( 1 ) ;
3813: LD_ADDR_EXP 4
3817: PUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL 1264 0 1
3830: ADD
3831: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3832: LD_INT 420
3834: PPUSH
3835: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3839: LD_ADDR_EXP 4
3843: PUSH
3844: LD_EXP 4
3848: PUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL 1264 0 1
3856: ADD
3857: ST_TO_ADDR
// if Difficulty > 2 then
3858: LD_OWVAR 67
3862: PUSH
3863: LD_INT 2
3865: GREATER
3866: IFFALSE 3894
// begin Wait ( 0 0$46 ) ;
3868: LD_INT 1610
3870: PPUSH
3871: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3875: LD_ADDR_EXP 4
3879: PUSH
3880: LD_EXP 4
3884: PUSH
3885: LD_INT 4
3887: PPUSH
3888: CALL 1264 0 1
3892: ADD
3893: ST_TO_ADDR
// end ; if attackN > 4 then
3894: LD_EXP 6
3898: PUSH
3899: LD_INT 4
3901: GREATER
3902: IFFALSE 3930
// begin Wait ( 0 0$12 ) ;
3904: LD_INT 420
3906: PPUSH
3907: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3911: LD_ADDR_EXP 4
3915: PUSH
3916: LD_EXP 4
3920: PUSH
3921: LD_INT 3
3923: PPUSH
3924: CALL 1264 0 1
3928: ADD
3929: ST_TO_ADDR
// end ; if attackN > 8 then
3930: LD_EXP 6
3934: PUSH
3935: LD_INT 8
3937: GREATER
3938: IFFALSE 3992
// begin Wait ( 0 0$12 ) ;
3940: LD_INT 420
3942: PPUSH
3943: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3947: LD_ADDR_VAR 0 2
3951: PUSH
3952: LD_INT 0
3954: PPUSH
3955: LD_INT 100
3957: PPUSH
3958: CALL_OW 12
3962: ST_TO_ADDR
// if l < 45 then
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 45
3970: LESS
3971: IFFALSE 3992
// pom := pom ^ Attack ( 2 ) ;
3973: LD_ADDR_EXP 4
3977: PUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL 1264 0 1
3990: ADD
3991: ST_TO_ADDR
// end ; end ; 2 :
3992: GO 4281
3994: LD_INT 2
3996: DOUBLE
3997: EQUAL
3998: IFTRUE 4002
4000: GO 4150
4002: POP
// begin pom := pom ^ Attack ( 2 ) ;
4003: LD_ADDR_EXP 4
4007: PUSH
4008: LD_EXP 4
4012: PUSH
4013: LD_INT 2
4015: PPUSH
4016: CALL 1264 0 1
4020: ADD
4021: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4022: LD_ADDR_EXP 4
4026: PUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 3
4034: PPUSH
4035: CALL 1264 0 1
4039: ADD
4040: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: GREATER
4049: PUSH
4050: LD_INT 63
4052: PPUSH
4053: LD_INT 37
4055: PPUSH
4056: CALL_OW 428
4060: PPUSH
4061: CALL_OW 266
4065: PUSH
4066: LD_INT 30
4068: EQUAL
4069: AND
4070: IFFALSE 4076
// ComitSib ;
4072: CALL 2675 0 0
// if Difficulty > 2 then
4076: LD_OWVAR 67
4080: PUSH
4081: LD_INT 2
4083: GREATER
4084: IFFALSE 4112
// begin Wait ( 0 0$25 ) ;
4086: LD_INT 875
4088: PPUSH
4089: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PUSH
4103: LD_INT 4
4105: PPUSH
4106: CALL 1264 0 1
4110: ADD
4111: ST_TO_ADDR
// end ; if attackN > 7 then
4112: LD_EXP 6
4116: PUSH
4117: LD_INT 7
4119: GREATER
4120: IFFALSE 4148
// begin Wait ( 0 0$15 ) ;
4122: LD_INT 525
4124: PPUSH
4125: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4129: LD_ADDR_EXP 4
4133: PUSH
4134: LD_EXP 4
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL 1264 0 1
4146: ADD
4147: ST_TO_ADDR
// end ; end ; 3 :
4148: GO 4281
4150: LD_INT 3
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4280
4158: POP
// begin pom := pom ^ Attack ( 1 ) ;
4159: LD_ADDR_EXP 4
4163: PUSH
4164: LD_EXP 4
4168: PUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL 1264 0 1
4176: ADD
4177: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4178: LD_INT 70
4180: PPUSH
4181: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4185: LD_ADDR_EXP 4
4189: PUSH
4190: LD_EXP 4
4194: PUSH
4195: LD_INT 2
4197: PPUSH
4198: CALL 1264 0 1
4202: ADD
4203: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4204: LD_INT 2100
4206: PPUSH
4207: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4211: LD_ADDR_EXP 4
4215: PUSH
4216: LD_EXP 4
4220: PUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 1264 0 1
4228: ADD
4229: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4230: LD_ADDR_EXP 4
4234: PUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 5
4242: PPUSH
4243: CALL 1264 0 1
4247: ADD
4248: ST_TO_ADDR
// if attackN > 10 then
4249: LD_EXP 6
4253: PUSH
4254: LD_INT 10
4256: GREATER
4257: IFFALSE 4278
// pom := pom ^ Attack ( 2 ) ;
4259: LD_ADDR_EXP 4
4263: PUSH
4264: LD_EXP 4
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: CALL 1264 0 1
4276: ADD
4277: ST_TO_ADDR
// end ; end ;
4278: GO 4281
4280: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4281: LD_OWVAR 67
4285: PUSH
4286: LD_INT 1
4288: GREATER
4289: PUSH
4290: LD_EXP 6
4294: PUSH
4295: LD_INT 4
4297: MOD
4298: PUSH
4299: LD_INT 0
4301: EQUAL
4302: AND
4303: IFFALSE 4369
// begin Wait ( 1 1$45 ) ;
4305: LD_INT 3675
4307: PPUSH
4308: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4312: LD_ADDR_EXP 4
4316: PUSH
4317: LD_EXP 4
4321: PUSH
4322: LD_INT 3
4324: PPUSH
4325: CALL 1264 0 1
4329: ADD
4330: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4331: LD_ADDR_EXP 4
4335: PUSH
4336: LD_EXP 4
4340: PUSH
4341: LD_INT 4
4343: PPUSH
4344: CALL 1264 0 1
4348: ADD
4349: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4350: LD_ADDR_EXP 5
4354: PUSH
4355: LD_EXP 5
4359: PUSH
4360: LD_INT 6
4362: PPUSH
4363: CALL 1264 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4369: LD_ADDR_EXP 6
4373: PUSH
4374: LD_EXP 6
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: ST_TO_ADDR
// end ;
4383: PPOPN 2
4385: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4386: LD_EXP 6
4390: PUSH
4391: LD_INT 10
4393: PUSH
4394: LD_INT 12
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: PUSH
4405: LD_OWVAR 67
4409: ARRAY
4410: GREATEREQUAL
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: AND
4431: IFFALSE 4487
4433: GO 4435
4435: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4436: LD_EXP 2
4440: PPUSH
4441: LD_STRING DDocEnd
4443: PPUSH
4444: CALL_OW 94
// Wait ( 0 0$03 ) ;
4448: LD_INT 105
4450: PPUSH
4451: CALL_OW 67
// case Query ( QWin ) of 1 :
4455: LD_STRING QWin
4457: PPUSH
4458: CALL_OW 97
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4474
4471: POP
// ; end ;
4472: GO 4475
4474: POP
// music_nat := 5 ;
4475: LD_ADDR_OWVAR 71
4479: PUSH
4480: LD_INT 5
4482: ST_TO_ADDR
// YouWin ;
4483: CALL_OW 103
// end ; end_of_file
4487: END
// on UnitDestroyed ( un ) do begin if un = brave or un = com then
4488: LD_VAR 0 1
4492: PUSH
4493: LD_INT 1
4495: EQUAL
4496: PUSH
4497: LD_VAR 0 1
4501: PUSH
4502: LD_EXP 1
4506: EQUAL
4507: OR
4508: IFFALSE 4529
// begin SayRadio ( doc , DDocWin ) ;
4510: LD_EXP 2
4514: PPUSH
4515: LD_STRING DDocWin
4517: PPUSH
4518: CALL_OW 94
// YouLost (  ) ;
4522: LD_STRING 
4524: PPUSH
4525: CALL_OW 104
// end ; end ;
4529: PPOPN 1
4531: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_VAR 0 2
4541: PPUSH
4542: LD_VAR 0 3
4546: PPUSH
4547: CALL 15334 0 3
// end ;
4551: PPOPN 3
4553: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4554: LD_VAR 0 1
4558: PPUSH
4559: CALL 15432 0 1
// end ; end_of_file
4563: PPOPN 1
4565: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
4566: GO 4568
4568: DISABLE
// begin ru_radar := 98 ;
4569: LD_ADDR_EXP 7
4573: PUSH
4574: LD_INT 98
4576: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4577: LD_ADDR_EXP 8
4581: PUSH
4582: LD_INT 89
4584: ST_TO_ADDR
// us_hack := 99 ;
4585: LD_ADDR_EXP 9
4589: PUSH
4590: LD_INT 99
4592: ST_TO_ADDR
// us_artillery := 97 ;
4593: LD_ADDR_EXP 10
4597: PUSH
4598: LD_INT 97
4600: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4601: LD_ADDR_EXP 11
4605: PUSH
4606: LD_INT 91
4608: ST_TO_ADDR
// end ; end_of_file end_of_file
4609: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4610: GO 4612
4612: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4613: LD_STRING initStreamRollete();
4615: PPUSH
4616: CALL_OW 559
// InitStreamMode ;
4620: CALL 4629 0 0
// DefineStreamItems ( ) ;
4624: CALL 5069 0 0
// end ;
4628: END
// function InitStreamMode ; begin
4629: LD_INT 0
4631: PPUSH
// streamModeActive := false ;
4632: LD_ADDR_EXP 12
4636: PUSH
4637: LD_INT 0
4639: ST_TO_ADDR
// normalCounter := 26 ;
4640: LD_ADDR_EXP 13
4644: PUSH
4645: LD_INT 26
4647: ST_TO_ADDR
// hardcoreCounter := 12 ;
4648: LD_ADDR_EXP 14
4652: PUSH
4653: LD_INT 12
4655: ST_TO_ADDR
// sRocket := false ;
4656: LD_ADDR_EXP 17
4660: PUSH
4661: LD_INT 0
4663: ST_TO_ADDR
// sSpeed := false ;
4664: LD_ADDR_EXP 16
4668: PUSH
4669: LD_INT 0
4671: ST_TO_ADDR
// sEngine := false ;
4672: LD_ADDR_EXP 18
4676: PUSH
4677: LD_INT 0
4679: ST_TO_ADDR
// sSpec := false ;
4680: LD_ADDR_EXP 15
4684: PUSH
4685: LD_INT 0
4687: ST_TO_ADDR
// sLevel := false ;
4688: LD_ADDR_EXP 19
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// sArmoury := false ;
4696: LD_ADDR_EXP 20
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// sRadar := false ;
4704: LD_ADDR_EXP 21
4708: PUSH
4709: LD_INT 0
4711: ST_TO_ADDR
// sBunker := false ;
4712: LD_ADDR_EXP 22
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// sHack := false ;
4720: LD_ADDR_EXP 23
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// sFire := false ;
4728: LD_ADDR_EXP 24
4732: PUSH
4733: LD_INT 0
4735: ST_TO_ADDR
// sRefresh := false ;
4736: LD_ADDR_EXP 25
4740: PUSH
4741: LD_INT 0
4743: ST_TO_ADDR
// sExp := false ;
4744: LD_ADDR_EXP 26
4748: PUSH
4749: LD_INT 0
4751: ST_TO_ADDR
// sDepot := false ;
4752: LD_ADDR_EXP 27
4756: PUSH
4757: LD_INT 0
4759: ST_TO_ADDR
// sFlag := false ;
4760: LD_ADDR_EXP 28
4764: PUSH
4765: LD_INT 0
4767: ST_TO_ADDR
// sKamikadze := false ;
4768: LD_ADDR_EXP 36
4772: PUSH
4773: LD_INT 0
4775: ST_TO_ADDR
// sTroll := false ;
4776: LD_ADDR_EXP 37
4780: PUSH
4781: LD_INT 0
4783: ST_TO_ADDR
// sSlow := false ;
4784: LD_ADDR_EXP 38
4788: PUSH
4789: LD_INT 0
4791: ST_TO_ADDR
// sLack := false ;
4792: LD_ADDR_EXP 39
4796: PUSH
4797: LD_INT 0
4799: ST_TO_ADDR
// sTank := false ;
4800: LD_ADDR_EXP 41
4804: PUSH
4805: LD_INT 0
4807: ST_TO_ADDR
// sRemote := false ;
4808: LD_ADDR_EXP 42
4812: PUSH
4813: LD_INT 0
4815: ST_TO_ADDR
// sPowell := false ;
4816: LD_ADDR_EXP 43
4820: PUSH
4821: LD_INT 0
4823: ST_TO_ADDR
// sTeleport := false ;
4824: LD_ADDR_EXP 46
4828: PUSH
4829: LD_INT 0
4831: ST_TO_ADDR
// sOilTower := false ;
4832: LD_ADDR_EXP 48
4836: PUSH
4837: LD_INT 0
4839: ST_TO_ADDR
// sShovel := false ;
4840: LD_ADDR_EXP 49
4844: PUSH
4845: LD_INT 0
4847: ST_TO_ADDR
// sSheik := false ;
4848: LD_ADDR_EXP 50
4852: PUSH
4853: LD_INT 0
4855: ST_TO_ADDR
// sEarthquake := false ;
4856: LD_ADDR_EXP 52
4860: PUSH
4861: LD_INT 0
4863: ST_TO_ADDR
// sAI := false ;
4864: LD_ADDR_EXP 53
4868: PUSH
4869: LD_INT 0
4871: ST_TO_ADDR
// sCargo := false ;
4872: LD_ADDR_EXP 56
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// sDLaser := false ;
4880: LD_ADDR_EXP 57
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// sExchange := false ;
4888: LD_ADDR_EXP 58
4892: PUSH
4893: LD_INT 0
4895: ST_TO_ADDR
// sFac := false ;
4896: LD_ADDR_EXP 59
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// sPower := false ;
4904: LD_ADDR_EXP 60
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// sRandom := false ;
4912: LD_ADDR_EXP 61
4916: PUSH
4917: LD_INT 0
4919: ST_TO_ADDR
// sShield := false ;
4920: LD_ADDR_EXP 62
4924: PUSH
4925: LD_INT 0
4927: ST_TO_ADDR
// sTime := false ;
4928: LD_ADDR_EXP 63
4932: PUSH
4933: LD_INT 0
4935: ST_TO_ADDR
// sTools := false ;
4936: LD_ADDR_EXP 64
4940: PUSH
4941: LD_INT 0
4943: ST_TO_ADDR
// sSold := false ;
4944: LD_ADDR_EXP 29
4948: PUSH
4949: LD_INT 0
4951: ST_TO_ADDR
// sDiff := false ;
4952: LD_ADDR_EXP 30
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// sFog := false ;
4960: LD_ADDR_EXP 33
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// sReset := false ;
4968: LD_ADDR_EXP 34
4972: PUSH
4973: LD_INT 0
4975: ST_TO_ADDR
// sSun := false ;
4976: LD_ADDR_EXP 35
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// sTiger := false ;
4984: LD_ADDR_EXP 31
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// sBomb := false ;
4992: LD_ADDR_EXP 32
4996: PUSH
4997: LD_INT 0
4999: ST_TO_ADDR
// sWound := false ;
5000: LD_ADDR_EXP 40
5004: PUSH
5005: LD_INT 0
5007: ST_TO_ADDR
// sBetray := false ;
5008: LD_ADDR_EXP 44
5012: PUSH
5013: LD_INT 0
5015: ST_TO_ADDR
// sContamin := false ;
5016: LD_ADDR_EXP 45
5020: PUSH
5021: LD_INT 0
5023: ST_TO_ADDR
// sOil := false ;
5024: LD_ADDR_EXP 47
5028: PUSH
5029: LD_INT 0
5031: ST_TO_ADDR
// sStu := false ;
5032: LD_ADDR_EXP 51
5036: PUSH
5037: LD_INT 0
5039: ST_TO_ADDR
// sBazooka := false ;
5040: LD_ADDR_EXP 54
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// sMortar := false ;
5048: LD_ADDR_EXP 55
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// sRanger := false ;
5056: LD_ADDR_EXP 65
5060: PUSH
5061: LD_INT 0
5063: ST_TO_ADDR
// end ;
5064: LD_VAR 0 1
5068: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5069: LD_INT 0
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
5075: PPUSH
// result := [ ] ;
5076: LD_ADDR_VAR 0 1
5080: PUSH
5081: EMPTY
5082: ST_TO_ADDR
// if campaign_id = 1 then
5083: LD_OWVAR 69
5087: PUSH
5088: LD_INT 1
5090: EQUAL
5091: IFFALSE 8039
// begin case mission_number of 1 :
5093: LD_OWVAR 70
5097: PUSH
5098: LD_INT 1
5100: DOUBLE
5101: EQUAL
5102: IFTRUE 5106
5104: GO 5170
5106: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5107: LD_ADDR_VAR 0 1
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 4
5117: PUSH
5118: LD_INT 11
5120: PUSH
5121: LD_INT 12
5123: PUSH
5124: LD_INT 15
5126: PUSH
5127: LD_INT 16
5129: PUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 23
5135: PUSH
5136: LD_INT 26
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 101
5152: PUSH
5153: LD_INT 102
5155: PUSH
5156: LD_INT 106
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: ST_TO_ADDR
5168: GO 8039
5170: LD_INT 2
5172: DOUBLE
5173: EQUAL
5174: IFTRUE 5178
5176: GO 5250
5178: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5179: LD_ADDR_VAR 0 1
5183: PUSH
5184: LD_INT 2
5186: PUSH
5187: LD_INT 4
5189: PUSH
5190: LD_INT 11
5192: PUSH
5193: LD_INT 12
5195: PUSH
5196: LD_INT 15
5198: PUSH
5199: LD_INT 16
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 23
5207: PUSH
5208: LD_INT 26
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 101
5224: PUSH
5225: LD_INT 102
5227: PUSH
5228: LD_INT 105
5230: PUSH
5231: LD_INT 106
5233: PUSH
5234: LD_INT 108
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 8039
5250: LD_INT 3
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5334
5258: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5259: LD_ADDR_VAR 0 1
5263: PUSH
5264: LD_INT 2
5266: PUSH
5267: LD_INT 4
5269: PUSH
5270: LD_INT 5
5272: PUSH
5273: LD_INT 11
5275: PUSH
5276: LD_INT 12
5278: PUSH
5279: LD_INT 15
5281: PUSH
5282: LD_INT 16
5284: PUSH
5285: LD_INT 22
5287: PUSH
5288: LD_INT 26
5290: PUSH
5291: LD_INT 36
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 101
5308: PUSH
5309: LD_INT 102
5311: PUSH
5312: LD_INT 105
5314: PUSH
5315: LD_INT 106
5317: PUSH
5318: LD_INT 108
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: ST_TO_ADDR
5332: GO 8039
5334: LD_INT 4
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5342
5340: GO 5426
5342: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: LD_INT 4
5353: PUSH
5354: LD_INT 5
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 11
5362: PUSH
5363: LD_INT 12
5365: PUSH
5366: LD_INT 15
5368: PUSH
5369: LD_INT 16
5371: PUSH
5372: LD_INT 22
5374: PUSH
5375: LD_INT 23
5377: PUSH
5378: LD_INT 26
5380: PUSH
5381: LD_INT 36
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 101
5400: PUSH
5401: LD_INT 102
5403: PUSH
5404: LD_INT 105
5406: PUSH
5407: LD_INT 106
5409: PUSH
5410: LD_INT 108
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 8039
5426: LD_INT 5
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5534
5434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5435: LD_ADDR_VAR 0 1
5439: PUSH
5440: LD_INT 2
5442: PUSH
5443: LD_INT 4
5445: PUSH
5446: LD_INT 5
5448: PUSH
5449: LD_INT 6
5451: PUSH
5452: LD_INT 8
5454: PUSH
5455: LD_INT 11
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: LD_INT 15
5463: PUSH
5464: LD_INT 16
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 23
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 26
5478: PUSH
5479: LD_INT 36
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 101
5500: PUSH
5501: LD_INT 102
5503: PUSH
5504: LD_INT 105
5506: PUSH
5507: LD_INT 106
5509: PUSH
5510: LD_INT 108
5512: PUSH
5513: LD_INT 109
5515: PUSH
5516: LD_INT 112
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: ST_TO_ADDR
5532: GO 8039
5534: LD_INT 6
5536: DOUBLE
5537: EQUAL
5538: IFTRUE 5542
5540: GO 5662
5542: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5543: LD_ADDR_VAR 0 1
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: LD_INT 6
5559: PUSH
5560: LD_INT 8
5562: PUSH
5563: LD_INT 11
5565: PUSH
5566: LD_INT 12
5568: PUSH
5569: LD_INT 15
5571: PUSH
5572: LD_INT 16
5574: PUSH
5575: LD_INT 20
5577: PUSH
5578: LD_INT 21
5580: PUSH
5581: LD_INT 22
5583: PUSH
5584: LD_INT 23
5586: PUSH
5587: LD_INT 25
5589: PUSH
5590: LD_INT 26
5592: PUSH
5593: LD_INT 30
5595: PUSH
5596: LD_INT 31
5598: PUSH
5599: LD_INT 32
5601: PUSH
5602: LD_INT 36
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 101
5628: PUSH
5629: LD_INT 102
5631: PUSH
5632: LD_INT 105
5634: PUSH
5635: LD_INT 106
5637: PUSH
5638: LD_INT 108
5640: PUSH
5641: LD_INT 109
5643: PUSH
5644: LD_INT 112
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: ST_TO_ADDR
5660: GO 8039
5662: LD_INT 7
5664: DOUBLE
5665: EQUAL
5666: IFTRUE 5670
5668: GO 5770
5670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5671: LD_ADDR_VAR 0 1
5675: PUSH
5676: LD_INT 2
5678: PUSH
5679: LD_INT 4
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: LD_INT 7
5687: PUSH
5688: LD_INT 11
5690: PUSH
5691: LD_INT 12
5693: PUSH
5694: LD_INT 15
5696: PUSH
5697: LD_INT 16
5699: PUSH
5700: LD_INT 20
5702: PUSH
5703: LD_INT 21
5705: PUSH
5706: LD_INT 22
5708: PUSH
5709: LD_INT 23
5711: PUSH
5712: LD_INT 25
5714: PUSH
5715: LD_INT 26
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 101
5736: PUSH
5737: LD_INT 102
5739: PUSH
5740: LD_INT 103
5742: PUSH
5743: LD_INT 105
5745: PUSH
5746: LD_INT 106
5748: PUSH
5749: LD_INT 108
5751: PUSH
5752: LD_INT 112
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: ST_TO_ADDR
5768: GO 8039
5770: LD_INT 8
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5906
5778: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_INT 2
5786: PUSH
5787: LD_INT 4
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 6
5795: PUSH
5796: LD_INT 7
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: LD_INT 11
5804: PUSH
5805: LD_INT 12
5807: PUSH
5808: LD_INT 15
5810: PUSH
5811: LD_INT 16
5813: PUSH
5814: LD_INT 20
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 25
5828: PUSH
5829: LD_INT 26
5831: PUSH
5832: LD_INT 30
5834: PUSH
5835: LD_INT 31
5837: PUSH
5838: LD_INT 32
5840: PUSH
5841: LD_INT 36
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 101
5868: PUSH
5869: LD_INT 102
5871: PUSH
5872: LD_INT 103
5874: PUSH
5875: LD_INT 105
5877: PUSH
5878: LD_INT 106
5880: PUSH
5881: LD_INT 108
5883: PUSH
5884: LD_INT 109
5886: PUSH
5887: LD_INT 112
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: ST_TO_ADDR
5904: GO 8039
5906: LD_INT 9
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5914
5912: GO 6050
5914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5915: LD_ADDR_VAR 0 1
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: LD_INT 4
5925: PUSH
5926: LD_INT 5
5928: PUSH
5929: LD_INT 6
5931: PUSH
5932: LD_INT 7
5934: PUSH
5935: LD_INT 8
5937: PUSH
5938: LD_INT 11
5940: PUSH
5941: LD_INT 12
5943: PUSH
5944: LD_INT 15
5946: PUSH
5947: LD_INT 16
5949: PUSH
5950: LD_INT 20
5952: PUSH
5953: LD_INT 21
5955: PUSH
5956: LD_INT 22
5958: PUSH
5959: LD_INT 23
5961: PUSH
5962: LD_INT 25
5964: PUSH
5965: LD_INT 26
5967: PUSH
5968: LD_INT 28
5970: PUSH
5971: LD_INT 30
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: LD_INT 36
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 101
6008: PUSH
6009: LD_INT 102
6011: PUSH
6012: LD_INT 103
6014: PUSH
6015: LD_INT 105
6017: PUSH
6018: LD_INT 106
6020: PUSH
6021: LD_INT 108
6023: PUSH
6024: LD_INT 109
6026: PUSH
6027: LD_INT 112
6029: PUSH
6030: LD_INT 114
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: ST_TO_ADDR
6048: GO 8039
6050: LD_INT 10
6052: DOUBLE
6053: EQUAL
6054: IFTRUE 6058
6056: GO 6242
6058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6059: LD_ADDR_VAR 0 1
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: LD_INT 4
6069: PUSH
6070: LD_INT 5
6072: PUSH
6073: LD_INT 6
6075: PUSH
6076: LD_INT 7
6078: PUSH
6079: LD_INT 8
6081: PUSH
6082: LD_INT 9
6084: PUSH
6085: LD_INT 10
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 13
6096: PUSH
6097: LD_INT 14
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: LD_INT 16
6105: PUSH
6106: LD_INT 17
6108: PUSH
6109: LD_INT 18
6111: PUSH
6112: LD_INT 19
6114: PUSH
6115: LD_INT 20
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 22
6123: PUSH
6124: LD_INT 23
6126: PUSH
6127: LD_INT 24
6129: PUSH
6130: LD_INT 25
6132: PUSH
6133: LD_INT 26
6135: PUSH
6136: LD_INT 28
6138: PUSH
6139: LD_INT 30
6141: PUSH
6142: LD_INT 31
6144: PUSH
6145: LD_INT 32
6147: PUSH
6148: LD_INT 36
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 101
6184: PUSH
6185: LD_INT 102
6187: PUSH
6188: LD_INT 103
6190: PUSH
6191: LD_INT 104
6193: PUSH
6194: LD_INT 105
6196: PUSH
6197: LD_INT 106
6199: PUSH
6200: LD_INT 107
6202: PUSH
6203: LD_INT 108
6205: PUSH
6206: LD_INT 109
6208: PUSH
6209: LD_INT 110
6211: PUSH
6212: LD_INT 111
6214: PUSH
6215: LD_INT 112
6217: PUSH
6218: LD_INT 114
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: ST_TO_ADDR
6240: GO 8039
6242: LD_INT 11
6244: DOUBLE
6245: EQUAL
6246: IFTRUE 6250
6248: GO 6442
6250: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6251: LD_ADDR_VAR 0 1
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: LD_INT 5
6267: PUSH
6268: LD_INT 6
6270: PUSH
6271: LD_INT 7
6273: PUSH
6274: LD_INT 8
6276: PUSH
6277: LD_INT 9
6279: PUSH
6280: LD_INT 10
6282: PUSH
6283: LD_INT 11
6285: PUSH
6286: LD_INT 12
6288: PUSH
6289: LD_INT 13
6291: PUSH
6292: LD_INT 14
6294: PUSH
6295: LD_INT 15
6297: PUSH
6298: LD_INT 16
6300: PUSH
6301: LD_INT 17
6303: PUSH
6304: LD_INT 18
6306: PUSH
6307: LD_INT 19
6309: PUSH
6310: LD_INT 20
6312: PUSH
6313: LD_INT 21
6315: PUSH
6316: LD_INT 22
6318: PUSH
6319: LD_INT 23
6321: PUSH
6322: LD_INT 24
6324: PUSH
6325: LD_INT 25
6327: PUSH
6328: LD_INT 26
6330: PUSH
6331: LD_INT 28
6333: PUSH
6334: LD_INT 30
6336: PUSH
6337: LD_INT 31
6339: PUSH
6340: LD_INT 32
6342: PUSH
6343: LD_INT 34
6345: PUSH
6346: LD_INT 36
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 101
6384: PUSH
6385: LD_INT 102
6387: PUSH
6388: LD_INT 103
6390: PUSH
6391: LD_INT 104
6393: PUSH
6394: LD_INT 105
6396: PUSH
6397: LD_INT 106
6399: PUSH
6400: LD_INT 107
6402: PUSH
6403: LD_INT 108
6405: PUSH
6406: LD_INT 109
6408: PUSH
6409: LD_INT 110
6411: PUSH
6412: LD_INT 111
6414: PUSH
6415: LD_INT 112
6417: PUSH
6418: LD_INT 114
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: ST_TO_ADDR
6440: GO 8039
6442: LD_INT 12
6444: DOUBLE
6445: EQUAL
6446: IFTRUE 6450
6448: GO 6658
6450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_INT 1
6458: PUSH
6459: LD_INT 2
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: LD_INT 5
6470: PUSH
6471: LD_INT 6
6473: PUSH
6474: LD_INT 7
6476: PUSH
6477: LD_INT 8
6479: PUSH
6480: LD_INT 9
6482: PUSH
6483: LD_INT 10
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: LD_INT 13
6494: PUSH
6495: LD_INT 14
6497: PUSH
6498: LD_INT 15
6500: PUSH
6501: LD_INT 16
6503: PUSH
6504: LD_INT 17
6506: PUSH
6507: LD_INT 18
6509: PUSH
6510: LD_INT 19
6512: PUSH
6513: LD_INT 20
6515: PUSH
6516: LD_INT 21
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 23
6524: PUSH
6525: LD_INT 24
6527: PUSH
6528: LD_INT 25
6530: PUSH
6531: LD_INT 26
6533: PUSH
6534: LD_INT 27
6536: PUSH
6537: LD_INT 28
6539: PUSH
6540: LD_INT 30
6542: PUSH
6543: LD_INT 31
6545: PUSH
6546: LD_INT 32
6548: PUSH
6549: LD_INT 33
6551: PUSH
6552: LD_INT 34
6554: PUSH
6555: LD_INT 36
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 101
6596: PUSH
6597: LD_INT 102
6599: PUSH
6600: LD_INT 103
6602: PUSH
6603: LD_INT 104
6605: PUSH
6606: LD_INT 105
6608: PUSH
6609: LD_INT 106
6611: PUSH
6612: LD_INT 107
6614: PUSH
6615: LD_INT 108
6617: PUSH
6618: LD_INT 109
6620: PUSH
6621: LD_INT 110
6623: PUSH
6624: LD_INT 111
6626: PUSH
6627: LD_INT 112
6629: PUSH
6630: LD_INT 113
6632: PUSH
6633: LD_INT 114
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 8039
6658: LD_INT 13
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6874
6666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6667: LD_ADDR_VAR 0 1
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: LD_INT 2
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 4
6683: PUSH
6684: LD_INT 5
6686: PUSH
6687: LD_INT 6
6689: PUSH
6690: LD_INT 7
6692: PUSH
6693: LD_INT 8
6695: PUSH
6696: LD_INT 9
6698: PUSH
6699: LD_INT 10
6701: PUSH
6702: LD_INT 11
6704: PUSH
6705: LD_INT 12
6707: PUSH
6708: LD_INT 13
6710: PUSH
6711: LD_INT 14
6713: PUSH
6714: LD_INT 15
6716: PUSH
6717: LD_INT 16
6719: PUSH
6720: LD_INT 17
6722: PUSH
6723: LD_INT 18
6725: PUSH
6726: LD_INT 19
6728: PUSH
6729: LD_INT 20
6731: PUSH
6732: LD_INT 21
6734: PUSH
6735: LD_INT 22
6737: PUSH
6738: LD_INT 23
6740: PUSH
6741: LD_INT 24
6743: PUSH
6744: LD_INT 25
6746: PUSH
6747: LD_INT 26
6749: PUSH
6750: LD_INT 27
6752: PUSH
6753: LD_INT 28
6755: PUSH
6756: LD_INT 30
6758: PUSH
6759: LD_INT 31
6761: PUSH
6762: LD_INT 32
6764: PUSH
6765: LD_INT 33
6767: PUSH
6768: LD_INT 34
6770: PUSH
6771: LD_INT 36
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 101
6812: PUSH
6813: LD_INT 102
6815: PUSH
6816: LD_INT 103
6818: PUSH
6819: LD_INT 104
6821: PUSH
6822: LD_INT 105
6824: PUSH
6825: LD_INT 106
6827: PUSH
6828: LD_INT 107
6830: PUSH
6831: LD_INT 108
6833: PUSH
6834: LD_INT 109
6836: PUSH
6837: LD_INT 110
6839: PUSH
6840: LD_INT 111
6842: PUSH
6843: LD_INT 112
6845: PUSH
6846: LD_INT 113
6848: PUSH
6849: LD_INT 114
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: ST_TO_ADDR
6872: GO 8039
6874: LD_INT 14
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 7094
6882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6883: LD_ADDR_VAR 0 1
6887: PUSH
6888: LD_INT 1
6890: PUSH
6891: LD_INT 2
6893: PUSH
6894: LD_INT 3
6896: PUSH
6897: LD_INT 4
6899: PUSH
6900: LD_INT 5
6902: PUSH
6903: LD_INT 6
6905: PUSH
6906: LD_INT 7
6908: PUSH
6909: LD_INT 8
6911: PUSH
6912: LD_INT 9
6914: PUSH
6915: LD_INT 10
6917: PUSH
6918: LD_INT 11
6920: PUSH
6921: LD_INT 12
6923: PUSH
6924: LD_INT 13
6926: PUSH
6927: LD_INT 14
6929: PUSH
6930: LD_INT 15
6932: PUSH
6933: LD_INT 16
6935: PUSH
6936: LD_INT 17
6938: PUSH
6939: LD_INT 18
6941: PUSH
6942: LD_INT 19
6944: PUSH
6945: LD_INT 20
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_INT 23
6956: PUSH
6957: LD_INT 24
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 26
6965: PUSH
6966: LD_INT 27
6968: PUSH
6969: LD_INT 28
6971: PUSH
6972: LD_INT 29
6974: PUSH
6975: LD_INT 30
6977: PUSH
6978: LD_INT 31
6980: PUSH
6981: LD_INT 32
6983: PUSH
6984: LD_INT 33
6986: PUSH
6987: LD_INT 34
6989: PUSH
6990: LD_INT 36
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 101
7032: PUSH
7033: LD_INT 102
7035: PUSH
7036: LD_INT 103
7038: PUSH
7039: LD_INT 104
7041: PUSH
7042: LD_INT 105
7044: PUSH
7045: LD_INT 106
7047: PUSH
7048: LD_INT 107
7050: PUSH
7051: LD_INT 108
7053: PUSH
7054: LD_INT 109
7056: PUSH
7057: LD_INT 110
7059: PUSH
7060: LD_INT 111
7062: PUSH
7063: LD_INT 112
7065: PUSH
7066: LD_INT 113
7068: PUSH
7069: LD_INT 114
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 8039
7094: LD_INT 15
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7314
7102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7103: LD_ADDR_VAR 0 1
7107: PUSH
7108: LD_INT 1
7110: PUSH
7111: LD_INT 2
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: LD_INT 4
7119: PUSH
7120: LD_INT 5
7122: PUSH
7123: LD_INT 6
7125: PUSH
7126: LD_INT 7
7128: PUSH
7129: LD_INT 8
7131: PUSH
7132: LD_INT 9
7134: PUSH
7135: LD_INT 10
7137: PUSH
7138: LD_INT 11
7140: PUSH
7141: LD_INT 12
7143: PUSH
7144: LD_INT 13
7146: PUSH
7147: LD_INT 14
7149: PUSH
7150: LD_INT 15
7152: PUSH
7153: LD_INT 16
7155: PUSH
7156: LD_INT 17
7158: PUSH
7159: LD_INT 18
7161: PUSH
7162: LD_INT 19
7164: PUSH
7165: LD_INT 20
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 22
7173: PUSH
7174: LD_INT 23
7176: PUSH
7177: LD_INT 24
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 26
7185: PUSH
7186: LD_INT 27
7188: PUSH
7189: LD_INT 28
7191: PUSH
7192: LD_INT 29
7194: PUSH
7195: LD_INT 30
7197: PUSH
7198: LD_INT 31
7200: PUSH
7201: LD_INT 32
7203: PUSH
7204: LD_INT 33
7206: PUSH
7207: LD_INT 34
7209: PUSH
7210: LD_INT 36
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 101
7252: PUSH
7253: LD_INT 102
7255: PUSH
7256: LD_INT 103
7258: PUSH
7259: LD_INT 104
7261: PUSH
7262: LD_INT 105
7264: PUSH
7265: LD_INT 106
7267: PUSH
7268: LD_INT 107
7270: PUSH
7271: LD_INT 108
7273: PUSH
7274: LD_INT 109
7276: PUSH
7277: LD_INT 110
7279: PUSH
7280: LD_INT 111
7282: PUSH
7283: LD_INT 112
7285: PUSH
7286: LD_INT 113
7288: PUSH
7289: LD_INT 114
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: ST_TO_ADDR
7312: GO 8039
7314: LD_INT 16
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7446
7322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7323: LD_ADDR_VAR 0 1
7327: PUSH
7328: LD_INT 2
7330: PUSH
7331: LD_INT 4
7333: PUSH
7334: LD_INT 5
7336: PUSH
7337: LD_INT 7
7339: PUSH
7340: LD_INT 11
7342: PUSH
7343: LD_INT 12
7345: PUSH
7346: LD_INT 15
7348: PUSH
7349: LD_INT 16
7351: PUSH
7352: LD_INT 20
7354: PUSH
7355: LD_INT 21
7357: PUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 23
7363: PUSH
7364: LD_INT 25
7366: PUSH
7367: LD_INT 26
7369: PUSH
7370: LD_INT 30
7372: PUSH
7373: LD_INT 31
7375: PUSH
7376: LD_INT 32
7378: PUSH
7379: LD_INT 33
7381: PUSH
7382: LD_INT 34
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 101
7408: PUSH
7409: LD_INT 102
7411: PUSH
7412: LD_INT 103
7414: PUSH
7415: LD_INT 106
7417: PUSH
7418: LD_INT 108
7420: PUSH
7421: LD_INT 112
7423: PUSH
7424: LD_INT 113
7426: PUSH
7427: LD_INT 114
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: ST_TO_ADDR
7444: GO 8039
7446: LD_INT 17
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7666
7454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7455: LD_ADDR_VAR 0 1
7459: PUSH
7460: LD_INT 1
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: LD_INT 3
7468: PUSH
7469: LD_INT 4
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 6
7477: PUSH
7478: LD_INT 7
7480: PUSH
7481: LD_INT 8
7483: PUSH
7484: LD_INT 9
7486: PUSH
7487: LD_INT 10
7489: PUSH
7490: LD_INT 11
7492: PUSH
7493: LD_INT 12
7495: PUSH
7496: LD_INT 13
7498: PUSH
7499: LD_INT 14
7501: PUSH
7502: LD_INT 15
7504: PUSH
7505: LD_INT 16
7507: PUSH
7508: LD_INT 17
7510: PUSH
7511: LD_INT 18
7513: PUSH
7514: LD_INT 19
7516: PUSH
7517: LD_INT 20
7519: PUSH
7520: LD_INT 21
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 23
7528: PUSH
7529: LD_INT 24
7531: PUSH
7532: LD_INT 25
7534: PUSH
7535: LD_INT 26
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 28
7543: PUSH
7544: LD_INT 29
7546: PUSH
7547: LD_INT 30
7549: PUSH
7550: LD_INT 31
7552: PUSH
7553: LD_INT 32
7555: PUSH
7556: LD_INT 33
7558: PUSH
7559: LD_INT 34
7561: PUSH
7562: LD_INT 36
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 101
7604: PUSH
7605: LD_INT 102
7607: PUSH
7608: LD_INT 103
7610: PUSH
7611: LD_INT 104
7613: PUSH
7614: LD_INT 105
7616: PUSH
7617: LD_INT 106
7619: PUSH
7620: LD_INT 107
7622: PUSH
7623: LD_INT 108
7625: PUSH
7626: LD_INT 109
7628: PUSH
7629: LD_INT 110
7631: PUSH
7632: LD_INT 111
7634: PUSH
7635: LD_INT 112
7637: PUSH
7638: LD_INT 113
7640: PUSH
7641: LD_INT 114
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
7664: GO 8039
7666: LD_INT 18
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7810
7674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_INT 2
7682: PUSH
7683: LD_INT 4
7685: PUSH
7686: LD_INT 5
7688: PUSH
7689: LD_INT 7
7691: PUSH
7692: LD_INT 11
7694: PUSH
7695: LD_INT 12
7697: PUSH
7698: LD_INT 15
7700: PUSH
7701: LD_INT 16
7703: PUSH
7704: LD_INT 20
7706: PUSH
7707: LD_INT 21
7709: PUSH
7710: LD_INT 22
7712: PUSH
7713: LD_INT 23
7715: PUSH
7716: LD_INT 25
7718: PUSH
7719: LD_INT 26
7721: PUSH
7722: LD_INT 30
7724: PUSH
7725: LD_INT 31
7727: PUSH
7728: LD_INT 32
7730: PUSH
7731: LD_INT 33
7733: PUSH
7734: LD_INT 34
7736: PUSH
7737: LD_INT 35
7739: PUSH
7740: LD_INT 36
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 101
7768: PUSH
7769: LD_INT 102
7771: PUSH
7772: LD_INT 103
7774: PUSH
7775: LD_INT 106
7777: PUSH
7778: LD_INT 108
7780: PUSH
7781: LD_INT 112
7783: PUSH
7784: LD_INT 113
7786: PUSH
7787: LD_INT 114
7789: PUSH
7790: LD_INT 115
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: ST_TO_ADDR
7808: GO 8039
7810: LD_INT 19
7812: DOUBLE
7813: EQUAL
7814: IFTRUE 7818
7816: GO 8038
7818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7819: LD_ADDR_VAR 0 1
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: LD_INT 3
7832: PUSH
7833: LD_INT 4
7835: PUSH
7836: LD_INT 5
7838: PUSH
7839: LD_INT 6
7841: PUSH
7842: LD_INT 7
7844: PUSH
7845: LD_INT 8
7847: PUSH
7848: LD_INT 9
7850: PUSH
7851: LD_INT 10
7853: PUSH
7854: LD_INT 11
7856: PUSH
7857: LD_INT 12
7859: PUSH
7860: LD_INT 13
7862: PUSH
7863: LD_INT 14
7865: PUSH
7866: LD_INT 15
7868: PUSH
7869: LD_INT 16
7871: PUSH
7872: LD_INT 17
7874: PUSH
7875: LD_INT 18
7877: PUSH
7878: LD_INT 19
7880: PUSH
7881: LD_INT 20
7883: PUSH
7884: LD_INT 21
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_INT 23
7892: PUSH
7893: LD_INT 24
7895: PUSH
7896: LD_INT 25
7898: PUSH
7899: LD_INT 26
7901: PUSH
7902: LD_INT 27
7904: PUSH
7905: LD_INT 28
7907: PUSH
7908: LD_INT 29
7910: PUSH
7911: LD_INT 30
7913: PUSH
7914: LD_INT 31
7916: PUSH
7917: LD_INT 32
7919: PUSH
7920: LD_INT 33
7922: PUSH
7923: LD_INT 34
7925: PUSH
7926: LD_INT 35
7928: PUSH
7929: LD_INT 36
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 101
7972: PUSH
7973: LD_INT 102
7975: PUSH
7976: LD_INT 103
7978: PUSH
7979: LD_INT 104
7981: PUSH
7982: LD_INT 105
7984: PUSH
7985: LD_INT 106
7987: PUSH
7988: LD_INT 107
7990: PUSH
7991: LD_INT 108
7993: PUSH
7994: LD_INT 109
7996: PUSH
7997: LD_INT 110
7999: PUSH
8000: LD_INT 111
8002: PUSH
8003: LD_INT 112
8005: PUSH
8006: LD_INT 113
8008: PUSH
8009: LD_INT 114
8011: PUSH
8012: LD_INT 115
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: ST_TO_ADDR
8036: GO 8039
8038: POP
// end ; if result then
8039: LD_VAR 0 1
8043: IFFALSE 8332
// begin normal :=  ;
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_STRING 
8052: ST_TO_ADDR
// hardcore :=  ;
8053: LD_ADDR_VAR 0 4
8057: PUSH
8058: LD_STRING 
8060: ST_TO_ADDR
// for i = 1 to normalCounter do
8061: LD_ADDR_VAR 0 5
8065: PUSH
8066: DOUBLE
8067: LD_INT 1
8069: DEC
8070: ST_TO_ADDR
8071: LD_EXP 13
8075: PUSH
8076: FOR_TO
8077: IFFALSE 8178
// begin tmp := 0 ;
8079: LD_ADDR_VAR 0 2
8083: PUSH
8084: LD_STRING 0
8086: ST_TO_ADDR
// if result [ 1 ] then
8087: LD_VAR 0 1
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: IFFALSE 8160
// if result [ 1 ] [ 1 ] = i then
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 1
8104: ARRAY
8105: PUSH
8106: LD_INT 1
8108: ARRAY
8109: PUSH
8110: LD_VAR 0 5
8114: EQUAL
8115: IFFALSE 8160
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8117: LD_ADDR_VAR 0 1
8121: PUSH
8122: LD_VAR 0 1
8126: PPUSH
8127: LD_INT 1
8129: PPUSH
8130: LD_VAR 0 1
8134: PUSH
8135: LD_INT 1
8137: ARRAY
8138: PPUSH
8139: LD_INT 1
8141: PPUSH
8142: CALL_OW 3
8146: PPUSH
8147: CALL_OW 1
8151: ST_TO_ADDR
// tmp := 1 ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_STRING 1
8159: ST_TO_ADDR
// end ; normal := normal & tmp ;
8160: LD_ADDR_VAR 0 3
8164: PUSH
8165: LD_VAR 0 3
8169: PUSH
8170: LD_VAR 0 2
8174: STR
8175: ST_TO_ADDR
// end ;
8176: GO 8076
8178: POP
8179: POP
// for i = 1 to hardcoreCounter do
8180: LD_ADDR_VAR 0 5
8184: PUSH
8185: DOUBLE
8186: LD_INT 1
8188: DEC
8189: ST_TO_ADDR
8190: LD_EXP 14
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8301
// begin tmp := 0 ;
8198: LD_ADDR_VAR 0 2
8202: PUSH
8203: LD_STRING 0
8205: ST_TO_ADDR
// if result [ 2 ] then
8206: LD_VAR 0 1
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: IFFALSE 8283
// if result [ 2 ] [ 1 ] = 100 + i then
8216: LD_VAR 0 1
8220: PUSH
8221: LD_INT 2
8223: ARRAY
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PUSH
8229: LD_INT 100
8231: PUSH
8232: LD_VAR 0 5
8236: PLUS
8237: EQUAL
8238: IFFALSE 8283
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8240: LD_ADDR_VAR 0 1
8244: PUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_INT 2
8252: PPUSH
8253: LD_VAR 0 1
8257: PUSH
8258: LD_INT 2
8260: ARRAY
8261: PPUSH
8262: LD_INT 1
8264: PPUSH
8265: CALL_OW 3
8269: PPUSH
8270: CALL_OW 1
8274: ST_TO_ADDR
// tmp := 1 ;
8275: LD_ADDR_VAR 0 2
8279: PUSH
8280: LD_STRING 1
8282: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8283: LD_ADDR_VAR 0 4
8287: PUSH
8288: LD_VAR 0 4
8292: PUSH
8293: LD_VAR 0 2
8297: STR
8298: ST_TO_ADDR
// end ;
8299: GO 8195
8301: POP
8302: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8303: LD_STRING getStreamItemsFromMission("
8305: PUSH
8306: LD_VAR 0 3
8310: STR
8311: PUSH
8312: LD_STRING ","
8314: STR
8315: PUSH
8316: LD_VAR 0 4
8320: STR
8321: PUSH
8322: LD_STRING ")
8324: STR
8325: PPUSH
8326: CALL_OW 559
// end else
8330: GO 8339
// ToLua ( getStreamItemsFromMission("","") ) ;
8332: LD_STRING getStreamItemsFromMission("","")
8334: PPUSH
8335: CALL_OW 559
// end ;
8339: LD_VAR 0 1
8343: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8344: LD_VAR 0 2
8348: PUSH
8349: LD_INT 100
8351: EQUAL
8352: IFFALSE 9301
// begin if not StreamModeActive then
8354: LD_EXP 12
8358: NOT
8359: IFFALSE 8369
// StreamModeActive := true ;
8361: LD_ADDR_EXP 12
8365: PUSH
8366: LD_INT 1
8368: ST_TO_ADDR
// if p3 = 0 then
8369: LD_VAR 0 3
8373: PUSH
8374: LD_INT 0
8376: EQUAL
8377: IFFALSE 8383
// InitStreamMode ;
8379: CALL 4629 0 0
// if p3 = 1 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 1
8390: EQUAL
8391: IFFALSE 8401
// sRocket := true ;
8393: LD_ADDR_EXP 17
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 2 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 2
8408: EQUAL
8409: IFFALSE 8419
// sSpeed := true ;
8411: LD_ADDR_EXP 16
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 3 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 3
8426: EQUAL
8427: IFFALSE 8437
// sEngine := true ;
8429: LD_ADDR_EXP 18
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 4 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 4
8444: EQUAL
8445: IFFALSE 8455
// sSpec := true ;
8447: LD_ADDR_EXP 15
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 5 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 5
8462: EQUAL
8463: IFFALSE 8473
// sLevel := true ;
8465: LD_ADDR_EXP 19
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 6 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 6
8480: EQUAL
8481: IFFALSE 8491
// sArmoury := true ;
8483: LD_ADDR_EXP 20
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 7 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 7
8498: EQUAL
8499: IFFALSE 8509
// sRadar := true ;
8501: LD_ADDR_EXP 21
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 8 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 8
8516: EQUAL
8517: IFFALSE 8527
// sBunker := true ;
8519: LD_ADDR_EXP 22
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 9 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 9
8534: EQUAL
8535: IFFALSE 8545
// sHack := true ;
8537: LD_ADDR_EXP 23
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 10 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 10
8552: EQUAL
8553: IFFALSE 8563
// sFire := true ;
8555: LD_ADDR_EXP 24
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 11 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 11
8570: EQUAL
8571: IFFALSE 8581
// sRefresh := true ;
8573: LD_ADDR_EXP 25
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 12 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 12
8588: EQUAL
8589: IFFALSE 8599
// sExp := true ;
8591: LD_ADDR_EXP 26
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 13 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 13
8606: EQUAL
8607: IFFALSE 8617
// sDepot := true ;
8609: LD_ADDR_EXP 27
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 14 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 14
8624: EQUAL
8625: IFFALSE 8635
// sFlag := true ;
8627: LD_ADDR_EXP 28
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 15 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 15
8642: EQUAL
8643: IFFALSE 8653
// sKamikadze := true ;
8645: LD_ADDR_EXP 36
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 16 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 16
8660: EQUAL
8661: IFFALSE 8671
// sTroll := true ;
8663: LD_ADDR_EXP 37
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// if p3 = 17 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 17
8678: EQUAL
8679: IFFALSE 8689
// sSlow := true ;
8681: LD_ADDR_EXP 38
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 18 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 18
8696: EQUAL
8697: IFFALSE 8707
// sLack := true ;
8699: LD_ADDR_EXP 39
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 19 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 19
8714: EQUAL
8715: IFFALSE 8725
// sTank := true ;
8717: LD_ADDR_EXP 41
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 20 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 20
8732: EQUAL
8733: IFFALSE 8743
// sRemote := true ;
8735: LD_ADDR_EXP 42
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 21 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 21
8750: EQUAL
8751: IFFALSE 8761
// sPowell := true ;
8753: LD_ADDR_EXP 43
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 22 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 22
8768: EQUAL
8769: IFFALSE 8779
// sTeleport := true ;
8771: LD_ADDR_EXP 46
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// if p3 = 23 then
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 23
8786: EQUAL
8787: IFFALSE 8797
// sOilTower := true ;
8789: LD_ADDR_EXP 48
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// if p3 = 24 then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_INT 24
8804: EQUAL
8805: IFFALSE 8815
// sShovel := true ;
8807: LD_ADDR_EXP 49
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// if p3 = 25 then
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 25
8822: EQUAL
8823: IFFALSE 8833
// sSheik := true ;
8825: LD_ADDR_EXP 50
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if p3 = 26 then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 26
8840: EQUAL
8841: IFFALSE 8851
// sEarthquake := true ;
8843: LD_ADDR_EXP 52
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// if p3 = 27 then
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 27
8858: EQUAL
8859: IFFALSE 8869
// sAI := true ;
8861: LD_ADDR_EXP 53
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// if p3 = 28 then
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 28
8876: EQUAL
8877: IFFALSE 8887
// sCargo := true ;
8879: LD_ADDR_EXP 56
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if p3 = 29 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 29
8894: EQUAL
8895: IFFALSE 8905
// sDLaser := true ;
8897: LD_ADDR_EXP 57
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// if p3 = 30 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 30
8912: EQUAL
8913: IFFALSE 8923
// sExchange := true ;
8915: LD_ADDR_EXP 58
8919: PUSH
8920: LD_INT 1
8922: ST_TO_ADDR
// if p3 = 31 then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 31
8930: EQUAL
8931: IFFALSE 8941
// sFac := true ;
8933: LD_ADDR_EXP 59
8937: PUSH
8938: LD_INT 1
8940: ST_TO_ADDR
// if p3 = 32 then
8941: LD_VAR 0 3
8945: PUSH
8946: LD_INT 32
8948: EQUAL
8949: IFFALSE 8959
// sPower := true ;
8951: LD_ADDR_EXP 60
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
// if p3 = 33 then
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 33
8966: EQUAL
8967: IFFALSE 8977
// sRandom := true ;
8969: LD_ADDR_EXP 61
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// if p3 = 34 then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_INT 34
8984: EQUAL
8985: IFFALSE 8995
// sShield := true ;
8987: LD_ADDR_EXP 62
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// if p3 = 35 then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 35
9002: EQUAL
9003: IFFALSE 9013
// sTime := true ;
9005: LD_ADDR_EXP 63
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if p3 = 36 then
9013: LD_VAR 0 3
9017: PUSH
9018: LD_INT 36
9020: EQUAL
9021: IFFALSE 9031
// sTools := true ;
9023: LD_ADDR_EXP 64
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// if p3 = 101 then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 101
9038: EQUAL
9039: IFFALSE 9049
// sSold := true ;
9041: LD_ADDR_EXP 29
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// if p3 = 102 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 102
9056: EQUAL
9057: IFFALSE 9067
// sDiff := true ;
9059: LD_ADDR_EXP 30
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// if p3 = 103 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 103
9074: EQUAL
9075: IFFALSE 9085
// sFog := true ;
9077: LD_ADDR_EXP 33
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 104 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 104
9092: EQUAL
9093: IFFALSE 9103
// sReset := true ;
9095: LD_ADDR_EXP 34
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// if p3 = 105 then
9103: LD_VAR 0 3
9107: PUSH
9108: LD_INT 105
9110: EQUAL
9111: IFFALSE 9121
// sSun := true ;
9113: LD_ADDR_EXP 35
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// if p3 = 106 then
9121: LD_VAR 0 3
9125: PUSH
9126: LD_INT 106
9128: EQUAL
9129: IFFALSE 9139
// sTiger := true ;
9131: LD_ADDR_EXP 31
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// if p3 = 107 then
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 107
9146: EQUAL
9147: IFFALSE 9157
// sBomb := true ;
9149: LD_ADDR_EXP 32
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// if p3 = 108 then
9157: LD_VAR 0 3
9161: PUSH
9162: LD_INT 108
9164: EQUAL
9165: IFFALSE 9175
// sWound := true ;
9167: LD_ADDR_EXP 40
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// if p3 = 109 then
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 109
9182: EQUAL
9183: IFFALSE 9193
// sBetray := true ;
9185: LD_ADDR_EXP 44
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// if p3 = 110 then
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 110
9200: EQUAL
9201: IFFALSE 9211
// sContamin := true ;
9203: LD_ADDR_EXP 45
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// if p3 = 111 then
9211: LD_VAR 0 3
9215: PUSH
9216: LD_INT 111
9218: EQUAL
9219: IFFALSE 9229
// sOil := true ;
9221: LD_ADDR_EXP 47
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// if p3 = 112 then
9229: LD_VAR 0 3
9233: PUSH
9234: LD_INT 112
9236: EQUAL
9237: IFFALSE 9247
// sStu := true ;
9239: LD_ADDR_EXP 51
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// if p3 = 113 then
9247: LD_VAR 0 3
9251: PUSH
9252: LD_INT 113
9254: EQUAL
9255: IFFALSE 9265
// sBazooka := true ;
9257: LD_ADDR_EXP 54
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// if p3 = 114 then
9265: LD_VAR 0 3
9269: PUSH
9270: LD_INT 114
9272: EQUAL
9273: IFFALSE 9283
// sMortar := true ;
9275: LD_ADDR_EXP 55
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// if p3 = 115 then
9283: LD_VAR 0 3
9287: PUSH
9288: LD_INT 115
9290: EQUAL
9291: IFFALSE 9301
// sRanger := true ;
9293: LD_ADDR_EXP 65
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// end ; end ;
9301: PPOPN 6
9303: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9304: LD_EXP 12
9308: PUSH
9309: LD_EXP 17
9313: AND
9314: IFFALSE 9438
9316: GO 9318
9318: DISABLE
9319: LD_INT 0
9321: PPUSH
9322: PPUSH
// begin enable ;
9323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9324: LD_ADDR_VAR 0 2
9328: PUSH
9329: LD_INT 22
9331: PUSH
9332: LD_OWVAR 2
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 2
9343: PUSH
9344: LD_INT 34
9346: PUSH
9347: LD_INT 7
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 34
9356: PUSH
9357: LD_INT 45
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 34
9366: PUSH
9367: LD_INT 28
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 34
9376: PUSH
9377: LD_INT 47
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 69
9399: ST_TO_ADDR
// if not tmp then
9400: LD_VAR 0 2
9404: NOT
9405: IFFALSE 9409
// exit ;
9407: GO 9438
// for i in tmp do
9409: LD_ADDR_VAR 0 1
9413: PUSH
9414: LD_VAR 0 2
9418: PUSH
9419: FOR_IN
9420: IFFALSE 9436
// begin SetLives ( i , 0 ) ;
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_INT 0
9429: PPUSH
9430: CALL_OW 234
// end ;
9434: GO 9419
9436: POP
9437: POP
// end ;
9438: PPOPN 2
9440: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9441: LD_EXP 12
9445: PUSH
9446: LD_EXP 18
9450: AND
9451: IFFALSE 9535
9453: GO 9455
9455: DISABLE
9456: LD_INT 0
9458: PPUSH
9459: PPUSH
// begin enable ;
9460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: LD_INT 22
9468: PUSH
9469: LD_OWVAR 2
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 32
9480: PUSH
9481: LD_INT 3
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 69
9496: ST_TO_ADDR
// if not tmp then
9497: LD_VAR 0 2
9501: NOT
9502: IFFALSE 9506
// exit ;
9504: GO 9535
// for i in tmp do
9506: LD_ADDR_VAR 0 1
9510: PUSH
9511: LD_VAR 0 2
9515: PUSH
9516: FOR_IN
9517: IFFALSE 9533
// begin SetLives ( i , 0 ) ;
9519: LD_VAR 0 1
9523: PPUSH
9524: LD_INT 0
9526: PPUSH
9527: CALL_OW 234
// end ;
9531: GO 9516
9533: POP
9534: POP
// end ;
9535: PPOPN 2
9537: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9538: LD_EXP 12
9542: PUSH
9543: LD_EXP 15
9547: AND
9548: IFFALSE 9641
9550: GO 9552
9552: DISABLE
9553: LD_INT 0
9555: PPUSH
// begin enable ;
9556: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9557: LD_ADDR_VAR 0 1
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_OWVAR 2
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: LD_INT 25
9579: PUSH
9580: LD_INT 5
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 9
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: LD_INT 8
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PPUSH
9617: CALL_OW 69
9621: PUSH
9622: FOR_IN
9623: IFFALSE 9639
// begin SetClass ( i , 1 ) ;
9625: LD_VAR 0 1
9629: PPUSH
9630: LD_INT 1
9632: PPUSH
9633: CALL_OW 336
// end ;
9637: GO 9622
9639: POP
9640: POP
// end ;
9641: PPOPN 1
9643: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9644: LD_EXP 12
9648: PUSH
9649: LD_EXP 16
9653: AND
9654: PUSH
9655: LD_OWVAR 65
9659: PUSH
9660: LD_INT 7
9662: LESS
9663: AND
9664: IFFALSE 9678
9666: GO 9668
9668: DISABLE
// begin enable ;
9669: ENABLE
// game_speed := 7 ;
9670: LD_ADDR_OWVAR 65
9674: PUSH
9675: LD_INT 7
9677: ST_TO_ADDR
// end ;
9678: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9679: LD_EXP 12
9683: PUSH
9684: LD_EXP 19
9688: AND
9689: IFFALSE 9891
9691: GO 9693
9693: DISABLE
9694: LD_INT 0
9696: PPUSH
9697: PPUSH
9698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9699: LD_ADDR_VAR 0 3
9703: PUSH
9704: LD_INT 81
9706: PUSH
9707: LD_OWVAR 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 21
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: ST_TO_ADDR
// if not tmp then
9735: LD_VAR 0 3
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9891
// if tmp > 5 then
9744: LD_VAR 0 3
9748: PUSH
9749: LD_INT 5
9751: GREATER
9752: IFFALSE 9764
// k := 5 else
9754: LD_ADDR_VAR 0 2
9758: PUSH
9759: LD_INT 5
9761: ST_TO_ADDR
9762: GO 9774
// k := tmp ;
9764: LD_ADDR_VAR 0 2
9768: PUSH
9769: LD_VAR 0 3
9773: ST_TO_ADDR
// for i := 1 to k do
9774: LD_ADDR_VAR 0 1
9778: PUSH
9779: DOUBLE
9780: LD_INT 1
9782: DEC
9783: ST_TO_ADDR
9784: LD_VAR 0 2
9788: PUSH
9789: FOR_TO
9790: IFFALSE 9889
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9792: LD_VAR 0 3
9796: PUSH
9797: LD_VAR 0 1
9801: ARRAY
9802: PPUSH
9803: LD_VAR 0 1
9807: PUSH
9808: LD_INT 4
9810: MOD
9811: PUSH
9812: LD_INT 1
9814: PLUS
9815: PPUSH
9816: CALL_OW 259
9820: PUSH
9821: LD_INT 10
9823: LESS
9824: IFFALSE 9887
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9826: LD_VAR 0 3
9830: PUSH
9831: LD_VAR 0 1
9835: ARRAY
9836: PPUSH
9837: LD_VAR 0 1
9841: PUSH
9842: LD_INT 4
9844: MOD
9845: PUSH
9846: LD_INT 1
9848: PLUS
9849: PPUSH
9850: LD_VAR 0 3
9854: PUSH
9855: LD_VAR 0 1
9859: ARRAY
9860: PPUSH
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 4
9868: MOD
9869: PUSH
9870: LD_INT 1
9872: PLUS
9873: PPUSH
9874: CALL_OW 259
9878: PUSH
9879: LD_INT 1
9881: PLUS
9882: PPUSH
9883: CALL_OW 237
9887: GO 9789
9889: POP
9890: POP
// end ;
9891: PPOPN 3
9893: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9894: LD_EXP 12
9898: PUSH
9899: LD_EXP 20
9903: AND
9904: IFFALSE 9924
9906: GO 9908
9908: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9909: LD_INT 4
9911: PPUSH
9912: LD_OWVAR 2
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: CALL_OW 324
9924: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9925: LD_EXP 12
9929: PUSH
9930: LD_EXP 49
9934: AND
9935: IFFALSE 9955
9937: GO 9939
9939: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9940: LD_INT 19
9942: PPUSH
9943: LD_OWVAR 2
9947: PPUSH
9948: LD_INT 0
9950: PPUSH
9951: CALL_OW 324
9955: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9956: LD_EXP 12
9960: PUSH
9961: LD_EXP 21
9965: AND
9966: IFFALSE 10068
9968: GO 9970
9970: DISABLE
9971: LD_INT 0
9973: PPUSH
9974: PPUSH
// begin enable ;
9975: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 34
9998: PUSH
9999: LD_INT 11
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 34
10008: PUSH
10009: LD_INT 30
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PPUSH
10025: CALL_OW 69
10029: ST_TO_ADDR
// if not tmp then
10030: LD_VAR 0 2
10034: NOT
10035: IFFALSE 10039
// exit ;
10037: GO 10068
// for i in tmp do
10039: LD_ADDR_VAR 0 1
10043: PUSH
10044: LD_VAR 0 2
10048: PUSH
10049: FOR_IN
10050: IFFALSE 10066
// begin SetLives ( i , 0 ) ;
10052: LD_VAR 0 1
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: CALL_OW 234
// end ;
10064: GO 10049
10066: POP
10067: POP
// end ;
10068: PPOPN 2
10070: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10071: LD_EXP 12
10075: PUSH
10076: LD_EXP 22
10080: AND
10081: IFFALSE 10101
10083: GO 10085
10085: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10086: LD_INT 32
10088: PPUSH
10089: LD_OWVAR 2
10093: PPUSH
10094: LD_INT 0
10096: PPUSH
10097: CALL_OW 324
10101: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10102: LD_EXP 12
10106: PUSH
10107: LD_EXP 23
10111: AND
10112: IFFALSE 10293
10114: GO 10116
10116: DISABLE
10117: LD_INT 0
10119: PPUSH
10120: PPUSH
10121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10122: LD_ADDR_VAR 0 2
10126: PUSH
10127: LD_INT 22
10129: PUSH
10130: LD_OWVAR 2
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 33
10141: PUSH
10142: LD_INT 3
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL_OW 69
10157: ST_TO_ADDR
// if not tmp then
10158: LD_VAR 0 2
10162: NOT
10163: IFFALSE 10167
// exit ;
10165: GO 10293
// side := 0 ;
10167: LD_ADDR_VAR 0 3
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// for i := 1 to 8 do
10175: LD_ADDR_VAR 0 1
10179: PUSH
10180: DOUBLE
10181: LD_INT 1
10183: DEC
10184: ST_TO_ADDR
10185: LD_INT 8
10187: PUSH
10188: FOR_TO
10189: IFFALSE 10237
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10191: LD_OWVAR 2
10195: PUSH
10196: LD_VAR 0 1
10200: NONEQUAL
10201: PUSH
10202: LD_OWVAR 2
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 81
10216: PUSH
10217: LD_INT 2
10219: EQUAL
10220: AND
10221: IFFALSE 10235
// begin side := i ;
10223: LD_ADDR_VAR 0 3
10227: PUSH
10228: LD_VAR 0 1
10232: ST_TO_ADDR
// break ;
10233: GO 10237
// end ;
10235: GO 10188
10237: POP
10238: POP
// if not side then
10239: LD_VAR 0 3
10243: NOT
10244: IFFALSE 10248
// exit ;
10246: GO 10293
// for i := 1 to tmp do
10248: LD_ADDR_VAR 0 1
10252: PUSH
10253: DOUBLE
10254: LD_INT 1
10256: DEC
10257: ST_TO_ADDR
10258: LD_VAR 0 2
10262: PUSH
10263: FOR_TO
10264: IFFALSE 10291
// if Prob ( 30 ) then
10266: LD_INT 30
10268: PPUSH
10269: CALL_OW 13
10273: IFFALSE 10289
// SetSide ( i , side ) ;
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: CALL_OW 235
10289: GO 10263
10291: POP
10292: POP
// end ;
10293: PPOPN 3
10295: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10296: LD_EXP 12
10300: PUSH
10301: LD_EXP 25
10305: AND
10306: IFFALSE 10425
10308: GO 10310
10310: DISABLE
10311: LD_INT 0
10313: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10314: LD_ADDR_VAR 0 1
10318: PUSH
10319: LD_INT 22
10321: PUSH
10322: LD_OWVAR 2
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 21
10333: PUSH
10334: LD_INT 1
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: LD_INT 3
10343: PUSH
10344: LD_INT 23
10346: PUSH
10347: LD_INT 0
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: PPUSH
10363: CALL_OW 69
10367: PUSH
10368: FOR_IN
10369: IFFALSE 10423
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL_OW 257
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 3
10389: PUSH
10390: LD_INT 4
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: IN
10399: IFFALSE 10421
// SetClass ( un , rand ( 1 , 4 ) ) ;
10401: LD_VAR 0 1
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: LD_INT 4
10411: PPUSH
10412: CALL_OW 12
10416: PPUSH
10417: CALL_OW 336
10421: GO 10368
10423: POP
10424: POP
// end ;
10425: PPOPN 1
10427: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10428: LD_EXP 12
10432: PUSH
10433: LD_EXP 24
10437: AND
10438: IFFALSE 10517
10440: GO 10442
10442: DISABLE
10443: LD_INT 0
10445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10446: LD_ADDR_VAR 0 1
10450: PUSH
10451: LD_INT 22
10453: PUSH
10454: LD_OWVAR 2
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 3
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PPUSH
10477: CALL_OW 69
10481: ST_TO_ADDR
// if not tmp then
10482: LD_VAR 0 1
10486: NOT
10487: IFFALSE 10491
// exit ;
10489: GO 10517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10491: LD_VAR 0 1
10495: PUSH
10496: LD_INT 1
10498: PPUSH
10499: LD_VAR 0 1
10503: PPUSH
10504: CALL_OW 12
10508: ARRAY
10509: PPUSH
10510: LD_INT 100
10512: PPUSH
10513: CALL_OW 234
// end ;
10517: PPOPN 1
10519: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10520: LD_EXP 12
10524: PUSH
10525: LD_EXP 26
10529: AND
10530: IFFALSE 10628
10532: GO 10534
10534: DISABLE
10535: LD_INT 0
10537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10538: LD_ADDR_VAR 0 1
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_OWVAR 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 21
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PPUSH
10569: CALL_OW 69
10573: ST_TO_ADDR
// if not tmp then
10574: LD_VAR 0 1
10578: NOT
10579: IFFALSE 10583
// exit ;
10581: GO 10628
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10583: LD_VAR 0 1
10587: PUSH
10588: LD_INT 1
10590: PPUSH
10591: LD_VAR 0 1
10595: PPUSH
10596: CALL_OW 12
10600: ARRAY
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: LD_INT 4
10607: PPUSH
10608: CALL_OW 12
10612: PPUSH
10613: LD_INT 3000
10615: PPUSH
10616: LD_INT 9000
10618: PPUSH
10619: CALL_OW 12
10623: PPUSH
10624: CALL_OW 492
// end ;
10628: PPOPN 1
10630: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10631: LD_EXP 12
10635: PUSH
10636: LD_EXP 27
10640: AND
10641: IFFALSE 10661
10643: GO 10645
10645: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10646: LD_INT 1
10648: PPUSH
10649: LD_OWVAR 2
10653: PPUSH
10654: LD_INT 0
10656: PPUSH
10657: CALL_OW 324
10661: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10662: LD_EXP 12
10666: PUSH
10667: LD_EXP 28
10671: AND
10672: IFFALSE 10755
10674: GO 10676
10676: DISABLE
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_OWVAR 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 21
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PPUSH
10712: CALL_OW 69
10716: ST_TO_ADDR
// if not tmp then
10717: LD_VAR 0 2
10721: NOT
10722: IFFALSE 10726
// exit ;
10724: GO 10755
// for i in tmp do
10726: LD_ADDR_VAR 0 1
10730: PUSH
10731: LD_VAR 0 2
10735: PUSH
10736: FOR_IN
10737: IFFALSE 10753
// SetBLevel ( i , 10 ) ;
10739: LD_VAR 0 1
10743: PPUSH
10744: LD_INT 10
10746: PPUSH
10747: CALL_OW 241
10751: GO 10736
10753: POP
10754: POP
// end ;
10755: PPOPN 2
10757: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10758: LD_EXP 12
10762: PUSH
10763: LD_EXP 29
10767: AND
10768: IFFALSE 10879
10770: GO 10772
10772: DISABLE
10773: LD_INT 0
10775: PPUSH
10776: PPUSH
10777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10778: LD_ADDR_VAR 0 3
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_OWVAR 2
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 25
10797: PUSH
10798: LD_INT 1
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 69
10813: ST_TO_ADDR
// if not tmp then
10814: LD_VAR 0 3
10818: NOT
10819: IFFALSE 10823
// exit ;
10821: GO 10879
// un := tmp [ rand ( 1 , tmp ) ] ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_VAR 0 3
10832: PUSH
10833: LD_INT 1
10835: PPUSH
10836: LD_VAR 0 3
10840: PPUSH
10841: CALL_OW 12
10845: ARRAY
10846: ST_TO_ADDR
// if Crawls ( un ) then
10847: LD_VAR 0 2
10851: PPUSH
10852: CALL_OW 318
10856: IFFALSE 10867
// ComWalk ( un ) ;
10858: LD_VAR 0 2
10862: PPUSH
10863: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10867: LD_VAR 0 2
10871: PPUSH
10872: LD_INT 5
10874: PPUSH
10875: CALL_OW 336
// end ;
10879: PPOPN 3
10881: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10882: LD_EXP 12
10886: PUSH
10887: LD_EXP 30
10891: AND
10892: PUSH
10893: LD_OWVAR 67
10897: PUSH
10898: LD_INT 3
10900: LESS
10901: AND
10902: IFFALSE 10921
10904: GO 10906
10906: DISABLE
// Difficulty := Difficulty + 1 ;
10907: LD_ADDR_OWVAR 67
10911: PUSH
10912: LD_OWVAR 67
10916: PUSH
10917: LD_INT 1
10919: PLUS
10920: ST_TO_ADDR
10921: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10922: LD_EXP 12
10926: PUSH
10927: LD_EXP 31
10931: AND
10932: IFFALSE 11035
10934: GO 10936
10936: DISABLE
10937: LD_INT 0
10939: PPUSH
// begin for i := 1 to 5 do
10940: LD_ADDR_VAR 0 1
10944: PUSH
10945: DOUBLE
10946: LD_INT 1
10948: DEC
10949: ST_TO_ADDR
10950: LD_INT 5
10952: PUSH
10953: FOR_TO
10954: IFFALSE 11033
// begin uc_nation := nation_nature ;
10956: LD_ADDR_OWVAR 21
10960: PUSH
10961: LD_INT 0
10963: ST_TO_ADDR
// uc_side := 0 ;
10964: LD_ADDR_OWVAR 20
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10972: LD_ADDR_OWVAR 29
10976: PUSH
10977: LD_INT 12
10979: PUSH
10980: LD_INT 12
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: ST_TO_ADDR
// hc_agressivity := 20 ;
10987: LD_ADDR_OWVAR 35
10991: PUSH
10992: LD_INT 20
10994: ST_TO_ADDR
// hc_class := class_tiger ;
10995: LD_ADDR_OWVAR 28
10999: PUSH
11000: LD_INT 14
11002: ST_TO_ADDR
// hc_gallery :=  ;
11003: LD_ADDR_OWVAR 33
11007: PUSH
11008: LD_STRING 
11010: ST_TO_ADDR
// hc_name :=  ;
11011: LD_ADDR_OWVAR 26
11015: PUSH
11016: LD_STRING 
11018: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11019: CALL_OW 44
11023: PPUSH
11024: LD_INT 0
11026: PPUSH
11027: CALL_OW 51
// end ;
11031: GO 10953
11033: POP
11034: POP
// end ;
11035: PPOPN 1
11037: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11038: LD_EXP 12
11042: PUSH
11043: LD_EXP 32
11047: AND
11048: IFFALSE 11057
11050: GO 11052
11052: DISABLE
// StreamSibBomb ;
11053: CALL 11058 0 0
11057: END
// export function StreamSibBomb ; var i , x , y ; begin
11058: LD_INT 0
11060: PPUSH
11061: PPUSH
11062: PPUSH
11063: PPUSH
// result := false ;
11064: LD_ADDR_VAR 0 1
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// for i := 1 to 16 do
11072: LD_ADDR_VAR 0 2
11076: PUSH
11077: DOUBLE
11078: LD_INT 1
11080: DEC
11081: ST_TO_ADDR
11082: LD_INT 16
11084: PUSH
11085: FOR_TO
11086: IFFALSE 11285
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11088: LD_ADDR_VAR 0 3
11092: PUSH
11093: LD_INT 10
11095: PUSH
11096: LD_INT 20
11098: PUSH
11099: LD_INT 30
11101: PUSH
11102: LD_INT 40
11104: PUSH
11105: LD_INT 50
11107: PUSH
11108: LD_INT 60
11110: PUSH
11111: LD_INT 70
11113: PUSH
11114: LD_INT 80
11116: PUSH
11117: LD_INT 90
11119: PUSH
11120: LD_INT 100
11122: PUSH
11123: LD_INT 110
11125: PUSH
11126: LD_INT 120
11128: PUSH
11129: LD_INT 130
11131: PUSH
11132: LD_INT 140
11134: PUSH
11135: LD_INT 150
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 1
11157: PPUSH
11158: LD_INT 15
11160: PPUSH
11161: CALL_OW 12
11165: ARRAY
11166: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11167: LD_ADDR_VAR 0 4
11171: PUSH
11172: LD_INT 10
11174: PUSH
11175: LD_INT 20
11177: PUSH
11178: LD_INT 30
11180: PUSH
11181: LD_INT 40
11183: PUSH
11184: LD_INT 50
11186: PUSH
11187: LD_INT 60
11189: PUSH
11190: LD_INT 70
11192: PUSH
11193: LD_INT 80
11195: PUSH
11196: LD_INT 90
11198: PUSH
11199: LD_INT 100
11201: PUSH
11202: LD_INT 110
11204: PUSH
11205: LD_INT 120
11207: PUSH
11208: LD_INT 130
11210: PUSH
11211: LD_INT 140
11213: PUSH
11214: LD_INT 150
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 1
11236: PPUSH
11237: LD_INT 15
11239: PPUSH
11240: CALL_OW 12
11244: ARRAY
11245: ST_TO_ADDR
// if ValidHex ( x , y ) then
11246: LD_VAR 0 3
11250: PPUSH
11251: LD_VAR 0 4
11255: PPUSH
11256: CALL_OW 488
11260: IFFALSE 11283
// begin result := [ x , y ] ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_VAR 0 3
11271: PUSH
11272: LD_VAR 0 4
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: ST_TO_ADDR
// break ;
11281: GO 11285
// end ; end ;
11283: GO 11085
11285: POP
11286: POP
// if result then
11287: LD_VAR 0 1
11291: IFFALSE 11351
// begin ToLua ( playSibBomb() ) ;
11293: LD_STRING playSibBomb()
11295: PPUSH
11296: CALL_OW 559
// wait ( 0 0$14 ) ;
11300: LD_INT 490
11302: PPUSH
11303: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11307: LD_VAR 0 1
11311: PUSH
11312: LD_INT 1
11314: ARRAY
11315: PPUSH
11316: LD_VAR 0 1
11320: PUSH
11321: LD_INT 2
11323: ARRAY
11324: PPUSH
11325: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11329: LD_VAR 0 1
11333: PUSH
11334: LD_INT 1
11336: ARRAY
11337: PPUSH
11338: LD_VAR 0 1
11342: PUSH
11343: LD_INT 2
11345: ARRAY
11346: PPUSH
11347: CALL_OW 429
// end ; end ;
11351: LD_VAR 0 1
11355: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11356: LD_EXP 12
11360: PUSH
11361: LD_EXP 34
11365: AND
11366: IFFALSE 11378
11368: GO 11370
11370: DISABLE
// YouLost (  ) ;
11371: LD_STRING 
11373: PPUSH
11374: CALL_OW 104
11378: END
// every 0 0$1 trigger StreamModeActive and sFog do
11379: LD_EXP 12
11383: PUSH
11384: LD_EXP 33
11388: AND
11389: IFFALSE 11403
11391: GO 11393
11393: DISABLE
// FogOff ( your_side ) ;
11394: LD_OWVAR 2
11398: PPUSH
11399: CALL_OW 344
11403: END
// every 0 0$1 trigger StreamModeActive and sSun do
11404: LD_EXP 12
11408: PUSH
11409: LD_EXP 35
11413: AND
11414: IFFALSE 11442
11416: GO 11418
11418: DISABLE
// begin solar_recharge_percent := 0 ;
11419: LD_ADDR_OWVAR 79
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11427: LD_INT 10500
11429: PPUSH
11430: CALL_OW 67
// solar_recharge_percent := 100 ;
11434: LD_ADDR_OWVAR 79
11438: PUSH
11439: LD_INT 100
11441: ST_TO_ADDR
// end ;
11442: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11443: LD_EXP 12
11447: PUSH
11448: LD_EXP 36
11452: AND
11453: IFFALSE 11692
11455: GO 11457
11457: DISABLE
11458: LD_INT 0
11460: PPUSH
11461: PPUSH
11462: PPUSH
// begin tmp := [ ] ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: EMPTY
11469: ST_TO_ADDR
// for i := 1 to 6 do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 6
11482: PUSH
11483: FOR_TO
11484: IFFALSE 11589
// begin uc_nation := nation_nature ;
11486: LD_ADDR_OWVAR 21
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// uc_side := 0 ;
11494: LD_ADDR_OWVAR 20
11498: PUSH
11499: LD_INT 0
11501: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11502: LD_ADDR_OWVAR 29
11506: PUSH
11507: LD_INT 12
11509: PUSH
11510: LD_INT 12
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: ST_TO_ADDR
// hc_agressivity := 20 ;
11517: LD_ADDR_OWVAR 35
11521: PUSH
11522: LD_INT 20
11524: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11525: LD_ADDR_OWVAR 28
11529: PUSH
11530: LD_INT 17
11532: ST_TO_ADDR
// hc_gallery :=  ;
11533: LD_ADDR_OWVAR 33
11537: PUSH
11538: LD_STRING 
11540: ST_TO_ADDR
// hc_name :=  ;
11541: LD_ADDR_OWVAR 26
11545: PUSH
11546: LD_STRING 
11548: ST_TO_ADDR
// un := CreateHuman ;
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: CALL_OW 44
11558: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11559: LD_VAR 0 2
11563: PPUSH
11564: LD_INT 1
11566: PPUSH
11567: CALL_OW 51
// tmp := tmp ^ un ;
11571: LD_ADDR_VAR 0 3
11575: PUSH
11576: LD_VAR 0 3
11580: PUSH
11581: LD_VAR 0 2
11585: ADD
11586: ST_TO_ADDR
// end ;
11587: GO 11483
11589: POP
11590: POP
// repeat wait ( 0 0$1 ) ;
11591: LD_INT 35
11593: PPUSH
11594: CALL_OW 67
// for un in tmp do
11598: LD_ADDR_VAR 0 2
11602: PUSH
11603: LD_VAR 0 3
11607: PUSH
11608: FOR_IN
11609: IFFALSE 11683
// begin if IsDead ( un ) then
11611: LD_VAR 0 2
11615: PPUSH
11616: CALL_OW 301
11620: IFFALSE 11640
// begin tmp := tmp diff un ;
11622: LD_ADDR_VAR 0 3
11626: PUSH
11627: LD_VAR 0 3
11631: PUSH
11632: LD_VAR 0 2
11636: DIFF
11637: ST_TO_ADDR
// continue ;
11638: GO 11608
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11640: LD_VAR 0 2
11644: PPUSH
11645: LD_INT 3
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_INT 0
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: PPUSH
11667: LD_VAR 0 2
11671: PPUSH
11672: CALL_OW 74
11676: PPUSH
11677: CALL_OW 115
// end ;
11681: GO 11608
11683: POP
11684: POP
// until not tmp ;
11685: LD_VAR 0 3
11689: NOT
11690: IFFALSE 11591
// end ;
11692: PPOPN 3
11694: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11695: LD_EXP 12
11699: PUSH
11700: LD_EXP 37
11704: AND
11705: IFFALSE 11759
11707: GO 11709
11709: DISABLE
// begin ToLua ( displayTroll(); ) ;
11710: LD_STRING displayTroll();
11712: PPUSH
11713: CALL_OW 559
// wait ( 3 3$00 ) ;
11717: LD_INT 6300
11719: PPUSH
11720: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11724: LD_STRING hideTroll();
11726: PPUSH
11727: CALL_OW 559
// wait ( 1 1$00 ) ;
11731: LD_INT 2100
11733: PPUSH
11734: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11738: LD_STRING displayTroll();
11740: PPUSH
11741: CALL_OW 559
// wait ( 1 1$00 ) ;
11745: LD_INT 2100
11747: PPUSH
11748: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11752: LD_STRING hideTroll();
11754: PPUSH
11755: CALL_OW 559
// end ;
11759: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11760: LD_EXP 12
11764: PUSH
11765: LD_EXP 38
11769: AND
11770: IFFALSE 11833
11772: GO 11774
11774: DISABLE
11775: LD_INT 0
11777: PPUSH
// begin p := 0 ;
11778: LD_ADDR_VAR 0 1
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// repeat game_speed := 1 ;
11786: LD_ADDR_OWVAR 65
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11794: LD_INT 35
11796: PPUSH
11797: CALL_OW 67
// p := p + 1 ;
11801: LD_ADDR_VAR 0 1
11805: PUSH
11806: LD_VAR 0 1
11810: PUSH
11811: LD_INT 1
11813: PLUS
11814: ST_TO_ADDR
// until p >= 60 ;
11815: LD_VAR 0 1
11819: PUSH
11820: LD_INT 60
11822: GREATEREQUAL
11823: IFFALSE 11786
// game_speed := 4 ;
11825: LD_ADDR_OWVAR 65
11829: PUSH
11830: LD_INT 4
11832: ST_TO_ADDR
// end ;
11833: PPOPN 1
11835: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11836: LD_EXP 12
11840: PUSH
11841: LD_EXP 39
11845: AND
11846: IFFALSE 11992
11848: GO 11850
11850: DISABLE
11851: LD_INT 0
11853: PPUSH
11854: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11855: LD_ADDR_VAR 0 1
11859: PUSH
11860: LD_INT 22
11862: PUSH
11863: LD_OWVAR 2
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 2
11874: PUSH
11875: LD_INT 30
11877: PUSH
11878: LD_INT 0
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 30
11887: PUSH
11888: LD_INT 1
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 69
11908: ST_TO_ADDR
// if not depot then
11909: LD_VAR 0 1
11913: NOT
11914: IFFALSE 11918
// exit ;
11916: GO 11992
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11918: LD_ADDR_VAR 0 2
11922: PUSH
11923: LD_VAR 0 1
11927: PUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 12
11940: ARRAY
11941: PPUSH
11942: CALL_OW 274
11946: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11947: LD_VAR 0 2
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: LD_INT 0
11957: PPUSH
11958: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11962: LD_VAR 0 2
11966: PPUSH
11967: LD_INT 2
11969: PPUSH
11970: LD_INT 0
11972: PPUSH
11973: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11977: LD_VAR 0 2
11981: PPUSH
11982: LD_INT 3
11984: PPUSH
11985: LD_INT 0
11987: PPUSH
11988: CALL_OW 277
// end ;
11992: PPOPN 2
11994: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11995: LD_EXP 12
11999: PUSH
12000: LD_EXP 40
12004: AND
12005: IFFALSE 12102
12007: GO 12009
12009: DISABLE
12010: LD_INT 0
12012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: LD_INT 22
12020: PUSH
12021: LD_OWVAR 2
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 21
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 3
12042: PUSH
12043: LD_INT 23
12045: PUSH
12046: LD_INT 0
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: ST_TO_ADDR
// if not tmp then
12067: LD_VAR 0 1
12071: NOT
12072: IFFALSE 12076
// exit ;
12074: GO 12102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12076: LD_VAR 0 1
12080: PUSH
12081: LD_INT 1
12083: PPUSH
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 12
12093: ARRAY
12094: PPUSH
12095: LD_INT 200
12097: PPUSH
12098: CALL_OW 234
// end ;
12102: PPOPN 1
12104: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12105: LD_EXP 12
12109: PUSH
12110: LD_EXP 41
12114: AND
12115: IFFALSE 12194
12117: GO 12119
12119: DISABLE
12120: LD_INT 0
12122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12123: LD_ADDR_VAR 0 1
12127: PUSH
12128: LD_INT 22
12130: PUSH
12131: LD_OWVAR 2
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: ST_TO_ADDR
// if not tmp then
12159: LD_VAR 0 1
12163: NOT
12164: IFFALSE 12168
// exit ;
12166: GO 12194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12168: LD_VAR 0 1
12172: PUSH
12173: LD_INT 1
12175: PPUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 12
12185: ARRAY
12186: PPUSH
12187: LD_INT 60
12189: PPUSH
12190: CALL_OW 234
// end ;
12194: PPOPN 1
12196: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12197: LD_EXP 12
12201: PUSH
12202: LD_EXP 42
12206: AND
12207: IFFALSE 12306
12209: GO 12211
12211: DISABLE
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
// begin enable ;
12216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_OWVAR 2
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 61
12236: PUSH
12237: EMPTY
12238: LIST
12239: PUSH
12240: LD_INT 33
12242: PUSH
12243: LD_INT 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// if not tmp then
12260: LD_VAR 0 1
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 12306
// for i in tmp do
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 1
12278: PUSH
12279: FOR_IN
12280: IFFALSE 12304
// if IsControledBy ( i ) then
12282: LD_VAR 0 2
12286: PPUSH
12287: CALL_OW 312
12291: IFFALSE 12302
// ComUnlink ( i ) ;
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 136
12302: GO 12279
12304: POP
12305: POP
// end ;
12306: PPOPN 2
12308: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12309: LD_EXP 12
12313: PUSH
12314: LD_EXP 43
12318: AND
12319: IFFALSE 12453
12321: GO 12323
12323: DISABLE
12324: LD_INT 0
12326: PPUSH
12327: PPUSH
// begin ToLua ( displayPowell(); ) ;
12328: LD_STRING displayPowell();
12330: PPUSH
12331: CALL_OW 559
// uc_side := 0 ;
12335: LD_ADDR_OWVAR 20
12339: PUSH
12340: LD_INT 0
12342: ST_TO_ADDR
// uc_nation := 2 ;
12343: LD_ADDR_OWVAR 21
12347: PUSH
12348: LD_INT 2
12350: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12351: LD_ADDR_OWVAR 37
12355: PUSH
12356: LD_INT 14
12358: ST_TO_ADDR
// vc_engine := engine_siberite ;
12359: LD_ADDR_OWVAR 39
12363: PUSH
12364: LD_INT 3
12366: ST_TO_ADDR
// vc_control := control_apeman ;
12367: LD_ADDR_OWVAR 38
12371: PUSH
12372: LD_INT 5
12374: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12375: LD_ADDR_OWVAR 40
12379: PUSH
12380: LD_INT 29
12382: ST_TO_ADDR
// un := CreateVehicle ;
12383: LD_ADDR_VAR 0 2
12387: PUSH
12388: CALL_OW 45
12392: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12393: LD_VAR 0 2
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12405: LD_INT 35
12407: PPUSH
12408: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12412: LD_VAR 0 2
12416: PPUSH
12417: LD_OWVAR 3
12421: PUSH
12422: LD_VAR 0 2
12426: DIFF
12427: PPUSH
12428: LD_VAR 0 2
12432: PPUSH
12433: CALL_OW 74
12437: PPUSH
12438: CALL_OW 115
// until IsOk ( un ) ;
12442: LD_VAR 0 2
12446: PPUSH
12447: CALL_OW 302
12451: IFFALSE 12405
// end ;
12453: PPOPN 2
12455: END
// every 0 0$1 trigger StreamModeActive and sStu do
12456: LD_EXP 12
12460: PUSH
12461: LD_EXP 51
12465: AND
12466: IFFALSE 12478
12468: GO 12470
12470: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12471: LD_STRING displayStucuk();
12473: PPUSH
12474: CALL_OW 559
// end ;
12478: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12479: LD_EXP 12
12483: PUSH
12484: LD_EXP 44
12488: AND
12489: IFFALSE 12630
12491: GO 12493
12493: DISABLE
12494: LD_INT 0
12496: PPUSH
12497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12498: LD_ADDR_VAR 0 2
12502: PUSH
12503: LD_INT 22
12505: PUSH
12506: LD_OWVAR 2
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PPUSH
12529: CALL_OW 69
12533: ST_TO_ADDR
// if not tmp then
12534: LD_VAR 0 2
12538: NOT
12539: IFFALSE 12543
// exit ;
12541: GO 12630
// un := tmp [ rand ( 1 , tmp ) ] ;
12543: LD_ADDR_VAR 0 1
12547: PUSH
12548: LD_VAR 0 2
12552: PUSH
12553: LD_INT 1
12555: PPUSH
12556: LD_VAR 0 2
12560: PPUSH
12561: CALL_OW 12
12565: ARRAY
12566: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12567: LD_VAR 0 1
12571: PPUSH
12572: LD_INT 0
12574: PPUSH
12575: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12579: LD_VAR 0 1
12583: PPUSH
12584: LD_OWVAR 3
12588: PUSH
12589: LD_VAR 0 1
12593: DIFF
12594: PPUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 74
12604: PPUSH
12605: CALL_OW 115
// wait ( 0 0$20 ) ;
12609: LD_INT 700
12611: PPUSH
12612: CALL_OW 67
// SetSide ( un , your_side ) ;
12616: LD_VAR 0 1
12620: PPUSH
12621: LD_OWVAR 2
12625: PPUSH
12626: CALL_OW 235
// end ;
12630: PPOPN 2
12632: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12633: LD_EXP 12
12637: PUSH
12638: LD_EXP 45
12642: AND
12643: IFFALSE 12749
12645: GO 12647
12647: DISABLE
12648: LD_INT 0
12650: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12651: LD_ADDR_VAR 0 1
12655: PUSH
12656: LD_INT 22
12658: PUSH
12659: LD_OWVAR 2
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 2
12670: PUSH
12671: LD_INT 30
12673: PUSH
12674: LD_INT 0
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 30
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// if not depot then
12705: LD_VAR 0 1
12709: NOT
12710: IFFALSE 12714
// exit ;
12712: GO 12749
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12714: LD_VAR 0 1
12718: PUSH
12719: LD_INT 1
12721: ARRAY
12722: PPUSH
12723: CALL_OW 250
12727: PPUSH
12728: LD_VAR 0 1
12732: PUSH
12733: LD_INT 1
12735: ARRAY
12736: PPUSH
12737: CALL_OW 251
12741: PPUSH
12742: LD_INT 70
12744: PPUSH
12745: CALL_OW 495
// end ;
12749: PPOPN 1
12751: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12752: LD_EXP 12
12756: PUSH
12757: LD_EXP 46
12761: AND
12762: IFFALSE 12973
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
12771: PPUSH
12772: PPUSH
12773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12774: LD_ADDR_VAR 0 5
12778: PUSH
12779: LD_INT 22
12781: PUSH
12782: LD_OWVAR 2
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 21
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 69
12809: ST_TO_ADDR
// if not tmp then
12810: LD_VAR 0 5
12814: NOT
12815: IFFALSE 12819
// exit ;
12817: GO 12973
// for i in tmp do
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_VAR 0 5
12828: PUSH
12829: FOR_IN
12830: IFFALSE 12971
// begin d := rand ( 0 , 5 ) ;
12832: LD_ADDR_VAR 0 4
12836: PUSH
12837: LD_INT 0
12839: PPUSH
12840: LD_INT 5
12842: PPUSH
12843: CALL_OW 12
12847: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12848: LD_ADDR_VAR 0 2
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 250
12862: PPUSH
12863: LD_VAR 0 4
12867: PPUSH
12868: LD_INT 3
12870: PPUSH
12871: LD_INT 12
12873: PPUSH
12874: CALL_OW 12
12878: PPUSH
12879: CALL_OW 272
12883: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_VAR 0 1
12893: PPUSH
12894: CALL_OW 251
12898: PPUSH
12899: LD_VAR 0 4
12903: PPUSH
12904: LD_INT 3
12906: PPUSH
12907: LD_INT 12
12909: PPUSH
12910: CALL_OW 12
12914: PPUSH
12915: CALL_OW 273
12919: ST_TO_ADDR
// if ValidHex ( x , y ) then
12920: LD_VAR 0 2
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: CALL_OW 488
12934: IFFALSE 12969
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: LD_VAR 0 2
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: LD_INT 3
12953: PPUSH
12954: LD_INT 6
12956: PPUSH
12957: CALL_OW 12
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 483
// end ;
12969: GO 12829
12971: POP
12972: POP
// end ;
12973: PPOPN 5
12975: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12976: LD_EXP 12
12980: PUSH
12981: LD_EXP 47
12985: AND
12986: IFFALSE 13080
12988: GO 12990
12990: DISABLE
12991: LD_INT 0
12993: PPUSH
12994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_OWVAR 2
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 32
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 21
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: ST_TO_ADDR
// if not tmp then
13042: LD_VAR 0 2
13046: NOT
13047: IFFALSE 13051
// exit ;
13049: GO 13080
// for i in tmp do
13051: LD_ADDR_VAR 0 1
13055: PUSH
13056: LD_VAR 0 2
13060: PUSH
13061: FOR_IN
13062: IFFALSE 13078
// SetFuel ( i , 0 ) ;
13064: LD_VAR 0 1
13068: PPUSH
13069: LD_INT 0
13071: PPUSH
13072: CALL_OW 240
13076: GO 13061
13078: POP
13079: POP
// end ;
13080: PPOPN 2
13082: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13083: LD_EXP 12
13087: PUSH
13088: LD_EXP 48
13092: AND
13093: IFFALSE 13159
13095: GO 13097
13097: DISABLE
13098: LD_INT 0
13100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_OWVAR 2
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 30
13120: PUSH
13121: LD_INT 29
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PPUSH
13132: CALL_OW 69
13136: ST_TO_ADDR
// if not tmp then
13137: LD_VAR 0 1
13141: NOT
13142: IFFALSE 13146
// exit ;
13144: GO 13159
// DestroyUnit ( tmp [ 1 ] ) ;
13146: LD_VAR 0 1
13150: PUSH
13151: LD_INT 1
13153: ARRAY
13154: PPUSH
13155: CALL_OW 65
// end ;
13159: PPOPN 1
13161: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13162: LD_EXP 12
13166: PUSH
13167: LD_EXP 50
13171: AND
13172: IFFALSE 13301
13174: GO 13176
13176: DISABLE
13177: LD_INT 0
13179: PPUSH
// begin uc_side := 0 ;
13180: LD_ADDR_OWVAR 20
13184: PUSH
13185: LD_INT 0
13187: ST_TO_ADDR
// uc_nation := nation_arabian ;
13188: LD_ADDR_OWVAR 21
13192: PUSH
13193: LD_INT 2
13195: ST_TO_ADDR
// hc_gallery :=  ;
13196: LD_ADDR_OWVAR 33
13200: PUSH
13201: LD_STRING 
13203: ST_TO_ADDR
// hc_name :=  ;
13204: LD_ADDR_OWVAR 26
13208: PUSH
13209: LD_STRING 
13211: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13212: LD_INT 1
13214: PPUSH
13215: LD_INT 11
13217: PPUSH
13218: LD_INT 10
13220: PPUSH
13221: CALL_OW 380
// un := CreateHuman ;
13225: LD_ADDR_VAR 0 1
13229: PUSH
13230: CALL_OW 44
13234: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13247: LD_INT 35
13249: PPUSH
13250: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13254: LD_VAR 0 1
13258: PPUSH
13259: LD_INT 22
13261: PUSH
13262: LD_OWVAR 2
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: PPUSH
13276: LD_VAR 0 1
13280: PPUSH
13281: CALL_OW 74
13285: PPUSH
13286: CALL_OW 115
// until IsDead ( un ) ;
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 301
13299: IFFALSE 13247
// end ;
13301: PPOPN 1
13303: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13304: LD_EXP 12
13308: PUSH
13309: LD_EXP 52
13313: AND
13314: IFFALSE 13326
13316: GO 13318
13318: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13319: LD_STRING earthquake(getX(game), 0, 32)
13321: PPUSH
13322: CALL_OW 559
13326: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13327: LD_EXP 12
13331: PUSH
13332: LD_EXP 53
13336: AND
13337: IFFALSE 13428
13339: GO 13341
13341: DISABLE
13342: LD_INT 0
13344: PPUSH
// begin enable ;
13345: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13346: LD_ADDR_VAR 0 1
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_OWVAR 2
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 21
13365: PUSH
13366: LD_INT 2
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 33
13375: PUSH
13376: LD_INT 3
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: ST_TO_ADDR
// if not tmp then
13393: LD_VAR 0 1
13397: NOT
13398: IFFALSE 13402
// exit ;
13400: GO 13428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 1
13409: PPUSH
13410: LD_VAR 0 1
13414: PPUSH
13415: CALL_OW 12
13419: ARRAY
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 234
// end ;
13428: PPOPN 1
13430: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13431: LD_EXP 12
13435: PUSH
13436: LD_EXP 54
13440: AND
13441: IFFALSE 13582
13443: GO 13445
13445: DISABLE
13446: LD_INT 0
13448: PPUSH
13449: PPUSH
13450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 22
13458: PUSH
13459: LD_OWVAR 2
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: ST_TO_ADDR
// if not tmp then
13487: LD_VAR 0 3
13491: NOT
13492: IFFALSE 13496
// exit ;
13494: GO 13582
// un := tmp [ rand ( 1 , tmp ) ] ;
13496: LD_ADDR_VAR 0 2
13500: PUSH
13501: LD_VAR 0 3
13505: PUSH
13506: LD_INT 1
13508: PPUSH
13509: LD_VAR 0 3
13513: PPUSH
13514: CALL_OW 12
13518: ARRAY
13519: ST_TO_ADDR
// if Crawls ( un ) then
13520: LD_VAR 0 2
13524: PPUSH
13525: CALL_OW 318
13529: IFFALSE 13540
// ComWalk ( un ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_INT 9
13547: PPUSH
13548: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13552: LD_INT 28
13554: PPUSH
13555: LD_OWVAR 2
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13567: LD_INT 29
13569: PPUSH
13570: LD_OWVAR 2
13574: PPUSH
13575: LD_INT 2
13577: PPUSH
13578: CALL_OW 322
// end ;
13582: PPOPN 3
13584: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13585: LD_EXP 12
13589: PUSH
13590: LD_EXP 55
13594: AND
13595: IFFALSE 13706
13597: GO 13599
13599: DISABLE
13600: LD_INT 0
13602: PPUSH
13603: PPUSH
13604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13605: LD_ADDR_VAR 0 3
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_OWVAR 2
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 25
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PPUSH
13636: CALL_OW 69
13640: ST_TO_ADDR
// if not tmp then
13641: LD_VAR 0 3
13645: NOT
13646: IFFALSE 13650
// exit ;
13648: GO 13706
// un := tmp [ rand ( 1 , tmp ) ] ;
13650: LD_ADDR_VAR 0 2
13654: PUSH
13655: LD_VAR 0 3
13659: PUSH
13660: LD_INT 1
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: CALL_OW 12
13672: ARRAY
13673: ST_TO_ADDR
// if Crawls ( un ) then
13674: LD_VAR 0 2
13678: PPUSH
13679: CALL_OW 318
13683: IFFALSE 13694
// ComWalk ( un ) ;
13685: LD_VAR 0 2
13689: PPUSH
13690: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13694: LD_VAR 0 2
13698: PPUSH
13699: LD_INT 8
13701: PPUSH
13702: CALL_OW 336
// end ;
13706: PPOPN 3
13708: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13709: LD_EXP 12
13713: PUSH
13714: LD_EXP 56
13718: AND
13719: IFFALSE 13863
13721: GO 13723
13723: DISABLE
13724: LD_INT 0
13726: PPUSH
13727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_INT 22
13735: PUSH
13736: LD_OWVAR 2
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 34
13760: PUSH
13761: LD_INT 12
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 34
13770: PUSH
13771: LD_INT 51
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 34
13780: PUSH
13781: LD_INT 32
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: ST_TO_ADDR
// if not tmp then
13804: LD_VAR 0 2
13808: NOT
13809: IFFALSE 13813
// exit ;
13811: GO 13863
// for i in tmp do
13813: LD_ADDR_VAR 0 1
13817: PUSH
13818: LD_VAR 0 2
13822: PUSH
13823: FOR_IN
13824: IFFALSE 13861
// if GetCargo ( i , mat_artifact ) = 0 then
13826: LD_VAR 0 1
13830: PPUSH
13831: LD_INT 4
13833: PPUSH
13834: CALL_OW 289
13838: PUSH
13839: LD_INT 0
13841: EQUAL
13842: IFFALSE 13859
// SetCargo ( i , mat_siberit , 100 ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_INT 3
13851: PPUSH
13852: LD_INT 100
13854: PPUSH
13855: CALL_OW 290
13859: GO 13823
13861: POP
13862: POP
// end ;
13863: PPOPN 2
13865: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13866: LD_EXP 12
13870: PUSH
13871: LD_EXP 57
13875: AND
13876: IFFALSE 14029
13878: GO 13880
13880: DISABLE
13881: LD_INT 0
13883: PPUSH
13884: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_OWVAR 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 69
13906: ST_TO_ADDR
// if not tmp then
13907: LD_VAR 0 2
13911: NOT
13912: IFFALSE 13916
// exit ;
13914: GO 14029
// for i := 1 to 2 do
13916: LD_ADDR_VAR 0 1
13920: PUSH
13921: DOUBLE
13922: LD_INT 1
13924: DEC
13925: ST_TO_ADDR
13926: LD_INT 2
13928: PUSH
13929: FOR_TO
13930: IFFALSE 14027
// begin uc_side := your_side ;
13932: LD_ADDR_OWVAR 20
13936: PUSH
13937: LD_OWVAR 2
13941: ST_TO_ADDR
// uc_nation := nation_american ;
13942: LD_ADDR_OWVAR 21
13946: PUSH
13947: LD_INT 1
13949: ST_TO_ADDR
// vc_chassis := us_morphling ;
13950: LD_ADDR_OWVAR 37
13954: PUSH
13955: LD_INT 5
13957: ST_TO_ADDR
// vc_engine := engine_siberite ;
13958: LD_ADDR_OWVAR 39
13962: PUSH
13963: LD_INT 3
13965: ST_TO_ADDR
// vc_control := control_computer ;
13966: LD_ADDR_OWVAR 38
13970: PUSH
13971: LD_INT 3
13973: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13974: LD_ADDR_OWVAR 40
13978: PUSH
13979: LD_INT 10
13981: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13982: CALL_OW 45
13986: PPUSH
13987: LD_VAR 0 2
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: CALL_OW 250
14000: PPUSH
14001: LD_VAR 0 2
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PPUSH
14010: CALL_OW 251
14014: PPUSH
14015: LD_INT 12
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 50
// end ;
14025: GO 13929
14027: POP
14028: POP
// end ;
14029: PPOPN 2
14031: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14032: LD_EXP 12
14036: PUSH
14037: LD_EXP 58
14041: AND
14042: IFFALSE 14264
14044: GO 14046
14046: DISABLE
14047: LD_INT 0
14049: PPUSH
14050: PPUSH
14051: PPUSH
14052: PPUSH
14053: PPUSH
14054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14055: LD_ADDR_VAR 0 6
14059: PUSH
14060: LD_INT 22
14062: PUSH
14063: LD_OWVAR 2
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: LD_INT 23
14087: PUSH
14088: LD_INT 0
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: ST_TO_ADDR
// if not tmp then
14109: LD_VAR 0 6
14113: NOT
14114: IFFALSE 14118
// exit ;
14116: GO 14264
// s1 := rand ( 1 , 4 ) ;
14118: LD_ADDR_VAR 0 2
14122: PUSH
14123: LD_INT 1
14125: PPUSH
14126: LD_INT 4
14128: PPUSH
14129: CALL_OW 12
14133: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14134: LD_ADDR_VAR 0 4
14138: PUSH
14139: LD_VAR 0 6
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: LD_VAR 0 2
14152: PPUSH
14153: CALL_OW 259
14157: ST_TO_ADDR
// if s1 = 1 then
14158: LD_VAR 0 2
14162: PUSH
14163: LD_INT 1
14165: EQUAL
14166: IFFALSE 14186
// s2 := rand ( 2 , 4 ) else
14168: LD_ADDR_VAR 0 3
14172: PUSH
14173: LD_INT 2
14175: PPUSH
14176: LD_INT 4
14178: PPUSH
14179: CALL_OW 12
14183: ST_TO_ADDR
14184: GO 14194
// s2 := 1 ;
14186: LD_ADDR_VAR 0 3
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14194: LD_ADDR_VAR 0 5
14198: PUSH
14199: LD_VAR 0 6
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: PPUSH
14208: LD_VAR 0 3
14212: PPUSH
14213: CALL_OW 259
14217: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14218: LD_VAR 0 6
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PPUSH
14227: LD_VAR 0 2
14231: PPUSH
14232: LD_VAR 0 5
14236: PPUSH
14237: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14241: LD_VAR 0 6
14245: PUSH
14246: LD_INT 1
14248: ARRAY
14249: PPUSH
14250: LD_VAR 0 3
14254: PPUSH
14255: LD_VAR 0 4
14259: PPUSH
14260: CALL_OW 237
// end ;
14264: PPOPN 6
14266: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14267: LD_EXP 12
14271: PUSH
14272: LD_EXP 59
14276: AND
14277: IFFALSE 14356
14279: GO 14281
14281: DISABLE
14282: LD_INT 0
14284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14285: LD_ADDR_VAR 0 1
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_OWVAR 2
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 30
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: ST_TO_ADDR
// if not tmp then
14321: LD_VAR 0 1
14325: NOT
14326: IFFALSE 14330
// exit ;
14328: GO 14356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14330: LD_VAR 0 1
14334: PUSH
14335: LD_INT 1
14337: PPUSH
14338: LD_VAR 0 1
14342: PPUSH
14343: CALL_OW 12
14347: ARRAY
14348: PPUSH
14349: LD_INT 1
14351: PPUSH
14352: CALL_OW 234
// end ;
14356: PPOPN 1
14358: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14359: LD_EXP 12
14363: PUSH
14364: LD_EXP 60
14368: AND
14369: IFFALSE 14481
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_INT 22
14385: PUSH
14386: LD_OWVAR 2
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 27
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 30
14410: PUSH
14411: LD_INT 26
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 30
14420: PUSH
14421: LD_INT 28
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PPUSH
14438: CALL_OW 69
14442: ST_TO_ADDR
// if not tmp then
14443: LD_VAR 0 2
14447: NOT
14448: IFFALSE 14452
// exit ;
14450: GO 14481
// for i in tmp do
14452: LD_ADDR_VAR 0 1
14456: PUSH
14457: LD_VAR 0 2
14461: PUSH
14462: FOR_IN
14463: IFFALSE 14479
// SetLives ( i , 1 ) ;
14465: LD_VAR 0 1
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 234
14477: GO 14462
14479: POP
14480: POP
// end ;
14481: PPOPN 2
14483: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14484: LD_EXP 12
14488: PUSH
14489: LD_EXP 61
14493: AND
14494: IFFALSE 14764
14496: GO 14498
14498: DISABLE
14499: LD_INT 0
14501: PPUSH
14502: PPUSH
14503: PPUSH
// begin i := rand ( 1 , 7 ) ;
14504: LD_ADDR_VAR 0 1
14508: PUSH
14509: LD_INT 1
14511: PPUSH
14512: LD_INT 7
14514: PPUSH
14515: CALL_OW 12
14519: ST_TO_ADDR
// case i of 1 :
14520: LD_VAR 0 1
14524: PUSH
14525: LD_INT 1
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14543
14533: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14534: LD_STRING earthquake(getX(game), 0, 32)
14536: PPUSH
14537: CALL_OW 559
14541: GO 14764
14543: LD_INT 2
14545: DOUBLE
14546: EQUAL
14547: IFTRUE 14551
14549: GO 14561
14551: POP
// ToLua ( displayStucuk(); ) ; 3 :
14552: LD_STRING displayStucuk();
14554: PPUSH
14555: CALL_OW 559
14559: GO 14764
14561: LD_INT 3
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14673
14569: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: LD_INT 22
14577: PUSH
14578: LD_OWVAR 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 25
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 69
14605: ST_TO_ADDR
// if not tmp then
14606: LD_VAR 0 2
14610: NOT
14611: IFFALSE 14615
// exit ;
14613: GO 14764
// un := tmp [ rand ( 1 , tmp ) ] ;
14615: LD_ADDR_VAR 0 3
14619: PUSH
14620: LD_VAR 0 2
14624: PUSH
14625: LD_INT 1
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 12
14637: ARRAY
14638: ST_TO_ADDR
// if Crawls ( un ) then
14639: LD_VAR 0 3
14643: PPUSH
14644: CALL_OW 318
14648: IFFALSE 14659
// ComWalk ( un ) ;
14650: LD_VAR 0 3
14654: PPUSH
14655: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14659: LD_VAR 0 3
14663: PPUSH
14664: LD_INT 8
14666: PPUSH
14667: CALL_OW 336
// end ; 4 :
14671: GO 14764
14673: LD_INT 4
14675: DOUBLE
14676: EQUAL
14677: IFTRUE 14681
14679: GO 14742
14681: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14682: LD_ADDR_VAR 0 2
14686: PUSH
14687: LD_INT 22
14689: PUSH
14690: LD_OWVAR 2
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 30
14701: PUSH
14702: LD_INT 29
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: ST_TO_ADDR
// if not tmp then
14718: LD_VAR 0 2
14722: NOT
14723: IFFALSE 14727
// exit ;
14725: GO 14764
// DestroyUnit ( tmp [ 1 ] ) ;
14727: LD_VAR 0 2
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: PPUSH
14736: CALL_OW 65
// end ; 5 .. 7 :
14740: GO 14764
14742: LD_INT 5
14744: DOUBLE
14745: GREATEREQUAL
14746: IFFALSE 14754
14748: LD_INT 7
14750: DOUBLE
14751: LESSEQUAL
14752: IFTRUE 14756
14754: GO 14763
14756: POP
// StreamSibBomb ; end ;
14757: CALL 11058 0 0
14761: GO 14764
14763: POP
// end ;
14764: PPOPN 3
14766: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14767: LD_EXP 12
14771: PUSH
14772: LD_EXP 62
14776: AND
14777: IFFALSE 14933
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14787: LD_ADDR_VAR 0 2
14791: PUSH
14792: LD_INT 81
14794: PUSH
14795: LD_OWVAR 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 21
14809: PUSH
14810: LD_INT 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 21
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// if not tmp then
14841: LD_VAR 0 2
14845: NOT
14846: IFFALSE 14850
// exit ;
14848: GO 14933
// p := 0 ;
14850: LD_ADDR_VAR 0 3
14854: PUSH
14855: LD_INT 0
14857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14858: LD_INT 35
14860: PPUSH
14861: CALL_OW 67
// p := p + 1 ;
14865: LD_ADDR_VAR 0 3
14869: PUSH
14870: LD_VAR 0 3
14874: PUSH
14875: LD_INT 1
14877: PLUS
14878: ST_TO_ADDR
// for i in tmp do
14879: LD_ADDR_VAR 0 1
14883: PUSH
14884: LD_VAR 0 2
14888: PUSH
14889: FOR_IN
14890: IFFALSE 14921
// if GetLives ( i ) < 1000 then
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 256
14901: PUSH
14902: LD_INT 1000
14904: LESS
14905: IFFALSE 14919
// SetLives ( i , 1000 ) ;
14907: LD_VAR 0 1
14911: PPUSH
14912: LD_INT 1000
14914: PPUSH
14915: CALL_OW 234
14919: GO 14889
14921: POP
14922: POP
// until p > 20 ;
14923: LD_VAR 0 3
14927: PUSH
14928: LD_INT 20
14930: GREATER
14931: IFFALSE 14858
// end ;
14933: PPOPN 3
14935: END
// every 0 0$1 trigger StreamModeActive and sTime do
14936: LD_EXP 12
14940: PUSH
14941: LD_EXP 63
14945: AND
14946: IFFALSE 14981
14948: GO 14950
14950: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14951: LD_INT 28
14953: PPUSH
14954: LD_OWVAR 2
14958: PPUSH
14959: LD_INT 2
14961: PPUSH
14962: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14966: LD_INT 30
14968: PPUSH
14969: LD_OWVAR 2
14973: PPUSH
14974: LD_INT 2
14976: PPUSH
14977: CALL_OW 322
// end ;
14981: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14982: LD_EXP 12
14986: PUSH
14987: LD_EXP 64
14991: AND
14992: IFFALSE 15113
14994: GO 14996
14996: DISABLE
14997: LD_INT 0
14999: PPUSH
15000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: LD_INT 22
15008: PUSH
15009: LD_OWVAR 2
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 21
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 3
15030: PUSH
15031: LD_INT 23
15033: PUSH
15034: LD_INT 0
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: PPUSH
15050: CALL_OW 69
15054: ST_TO_ADDR
// if not tmp then
15055: LD_VAR 0 2
15059: NOT
15060: IFFALSE 15064
// exit ;
15062: GO 15113
// for i in tmp do
15064: LD_ADDR_VAR 0 1
15068: PUSH
15069: LD_VAR 0 2
15073: PUSH
15074: FOR_IN
15075: IFFALSE 15111
// begin if Crawls ( i ) then
15077: LD_VAR 0 1
15081: PPUSH
15082: CALL_OW 318
15086: IFFALSE 15097
// ComWalk ( i ) ;
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 138
// SetClass ( i , 2 ) ;
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_INT 2
15104: PPUSH
15105: CALL_OW 336
// end ;
15109: GO 15074
15111: POP
15112: POP
// end ;
15113: PPOPN 2
15115: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15116: LD_EXP 12
15120: PUSH
15121: LD_EXP 65
15125: AND
15126: IFFALSE 15331
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
15135: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15136: LD_OWVAR 2
15140: PPUSH
15141: LD_INT 9
15143: PPUSH
15144: LD_INT 1
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15154: LD_INT 9
15156: PPUSH
15157: LD_OWVAR 2
15161: PPUSH
15162: CALL_OW 343
// hc_name := Dark Warrior ;
15166: LD_ADDR_OWVAR 26
15170: PUSH
15171: LD_STRING Dark Warrior
15173: ST_TO_ADDR
// hc_gallery :=  ;
15174: LD_ADDR_OWVAR 33
15178: PUSH
15179: LD_STRING 
15181: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
15182: LD_INT 1
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: LD_INT 10
15190: PPUSH
15191: CALL_OW 380
// un := CreateHuman ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: CALL_OW 44
15204: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15205: LD_VAR 0 3
15209: PPUSH
15210: LD_INT 1
15212: PPUSH
15213: CALL_OW 51
// p := 0 ;
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_INT 0
15224: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15225: LD_INT 35
15227: PPUSH
15228: CALL_OW 67
// if GetLives ( un ) < 1000 then
15232: LD_VAR 0 3
15236: PPUSH
15237: CALL_OW 256
15241: PUSH
15242: LD_INT 1000
15244: LESS
15245: IFFALSE 15259
// SetLives ( un , 1000 ) ;
15247: LD_VAR 0 3
15251: PPUSH
15252: LD_INT 1000
15254: PPUSH
15255: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
15259: LD_VAR 0 3
15263: PPUSH
15264: LD_INT 81
15266: PUSH
15267: LD_OWVAR 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 69
15280: PPUSH
15281: LD_VAR 0 3
15285: PPUSH
15286: CALL_OW 74
15290: PPUSH
15291: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15295: LD_VAR 0 2
15299: PUSH
15300: LD_INT 60
15302: GREATER
15303: PUSH
15304: LD_VAR 0 3
15308: PPUSH
15309: CALL_OW 301
15313: OR
15314: IFFALSE 15225
// if un then
15316: LD_VAR 0 3
15320: IFFALSE 15331
// RemoveUnit ( un ) ;
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 64
// end ; end_of_file
15331: PPOPN 3
15333: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
15338: PPUSH
15339: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15340: LD_VAR 0 1
15344: PPUSH
15345: CALL_OW 264
15349: PUSH
15350: LD_EXP 11
15354: EQUAL
15355: IFFALSE 15427
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15357: LD_INT 68
15359: PPUSH
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 255
15369: PPUSH
15370: CALL_OW 321
15374: PUSH
15375: LD_INT 2
15377: EQUAL
15378: IFFALSE 15390
// eff := 70 else
15380: LD_ADDR_VAR 0 6
15384: PUSH
15385: LD_INT 70
15387: ST_TO_ADDR
15388: GO 15398
// eff := 30 ;
15390: LD_ADDR_VAR 0 6
15394: PUSH
15395: LD_INT 30
15397: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15398: LD_VAR 0 1
15402: PPUSH
15403: CALL_OW 250
15407: PPUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 251
15417: PPUSH
15418: LD_VAR 0 6
15422: PPUSH
15423: CALL_OW 495
// end ; end ;
15427: LD_VAR 0 4
15431: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
// if cmd = 124 then
15440: LD_VAR 0 1
15444: PUSH
15445: LD_INT 124
15447: EQUAL
15448: IFFALSE 15654
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
15450: LD_ADDR_VAR 0 5
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: LD_INT 34
15460: PUSH
15461: LD_INT 53
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 34
15470: PUSH
15471: LD_INT 14
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: ST_TO_ADDR
// if not tmp then
15488: LD_VAR 0 5
15492: NOT
15493: IFFALSE 15497
// exit ;
15495: GO 15654
// for i in tmp do
15497: LD_ADDR_VAR 0 3
15501: PUSH
15502: LD_VAR 0 5
15506: PUSH
15507: FOR_IN
15508: IFFALSE 15652
// begin taskList := GetTaskList ( i ) ;
15510: LD_ADDR_VAR 0 6
15514: PUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: CALL_OW 437
15524: ST_TO_ADDR
// if not taskList then
15525: LD_VAR 0 6
15529: NOT
15530: IFFALSE 15534
// continue ;
15532: GO 15507
// for j = 1 to taskList do
15534: LD_ADDR_VAR 0 4
15538: PUSH
15539: DOUBLE
15540: LD_INT 1
15542: DEC
15543: ST_TO_ADDR
15544: LD_VAR 0 6
15548: PUSH
15549: FOR_TO
15550: IFFALSE 15648
// if taskList [ j ] [ 1 ] = | then
15552: LD_VAR 0 6
15556: PUSH
15557: LD_VAR 0 4
15561: ARRAY
15562: PUSH
15563: LD_INT 1
15565: ARRAY
15566: PUSH
15567: LD_STRING |
15569: EQUAL
15570: IFFALSE 15646
// begin _taskList := Delete ( taskList , 1 ) ;
15572: LD_ADDR_VAR 0 7
15576: PUSH
15577: LD_VAR 0 6
15581: PPUSH
15582: LD_INT 1
15584: PPUSH
15585: CALL_OW 3
15589: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
15590: LD_VAR 0 3
15594: PPUSH
15595: LD_VAR 0 7
15599: PPUSH
15600: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_VAR 0 6
15613: PUSH
15614: LD_VAR 0 4
15618: ARRAY
15619: PUSH
15620: LD_INT 2
15622: ARRAY
15623: PPUSH
15624: LD_VAR 0 6
15628: PUSH
15629: LD_VAR 0 4
15633: ARRAY
15634: PUSH
15635: LD_INT 3
15637: ARRAY
15638: PPUSH
15639: LD_INT 8
15641: PPUSH
15642: CALL 15659 0 4
// end ;
15646: GO 15549
15648: POP
15649: POP
// end ;
15650: GO 15507
15652: POP
15653: POP
// end ; end ;
15654: LD_VAR 0 2
15658: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
15668: PPUSH
15669: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15670: LD_VAR 0 1
15674: NOT
15675: PUSH
15676: LD_VAR 0 2
15680: PPUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: CALL_OW 488
15690: NOT
15691: OR
15692: PUSH
15693: LD_VAR 0 4
15697: NOT
15698: OR
15699: IFFALSE 15703
// exit ;
15701: GO 16043
// list := [ ] ;
15703: LD_ADDR_VAR 0 13
15707: PUSH
15708: EMPTY
15709: ST_TO_ADDR
// if x - r < 0 then
15710: LD_VAR 0 2
15714: PUSH
15715: LD_VAR 0 4
15719: MINUS
15720: PUSH
15721: LD_INT 0
15723: LESS
15724: IFFALSE 15736
// min_x := 0 else
15726: LD_ADDR_VAR 0 7
15730: PUSH
15731: LD_INT 0
15733: ST_TO_ADDR
15734: GO 15752
// min_x := x - r ;
15736: LD_ADDR_VAR 0 7
15740: PUSH
15741: LD_VAR 0 2
15745: PUSH
15746: LD_VAR 0 4
15750: MINUS
15751: ST_TO_ADDR
// if y - r < 0 then
15752: LD_VAR 0 3
15756: PUSH
15757: LD_VAR 0 4
15761: MINUS
15762: PUSH
15763: LD_INT 0
15765: LESS
15766: IFFALSE 15778
// min_y := 0 else
15768: LD_ADDR_VAR 0 8
15772: PUSH
15773: LD_INT 0
15775: ST_TO_ADDR
15776: GO 15794
// min_y := y - r ;
15778: LD_ADDR_VAR 0 8
15782: PUSH
15783: LD_VAR 0 3
15787: PUSH
15788: LD_VAR 0 4
15792: MINUS
15793: ST_TO_ADDR
// max_x := x + r ;
15794: LD_ADDR_VAR 0 9
15798: PUSH
15799: LD_VAR 0 2
15803: PUSH
15804: LD_VAR 0 4
15808: PLUS
15809: ST_TO_ADDR
// max_y := y + r ;
15810: LD_ADDR_VAR 0 10
15814: PUSH
15815: LD_VAR 0 3
15819: PUSH
15820: LD_VAR 0 4
15824: PLUS
15825: ST_TO_ADDR
// for _x = min_x to max_x do
15826: LD_ADDR_VAR 0 11
15830: PUSH
15831: DOUBLE
15832: LD_VAR 0 7
15836: DEC
15837: ST_TO_ADDR
15838: LD_VAR 0 9
15842: PUSH
15843: FOR_TO
15844: IFFALSE 15961
// for _y = min_y to max_y do
15846: LD_ADDR_VAR 0 12
15850: PUSH
15851: DOUBLE
15852: LD_VAR 0 8
15856: DEC
15857: ST_TO_ADDR
15858: LD_VAR 0 10
15862: PUSH
15863: FOR_TO
15864: IFFALSE 15957
// begin if not ValidHex ( _x , _y ) then
15866: LD_VAR 0 11
15870: PPUSH
15871: LD_VAR 0 12
15875: PPUSH
15876: CALL_OW 488
15880: NOT
15881: IFFALSE 15885
// continue ;
15883: GO 15863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15885: LD_VAR 0 11
15889: PPUSH
15890: LD_VAR 0 12
15894: PPUSH
15895: CALL_OW 351
15899: PUSH
15900: LD_VAR 0 11
15904: PPUSH
15905: LD_VAR 0 12
15909: PPUSH
15910: CALL_OW 554
15914: AND
15915: IFFALSE 15955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15917: LD_ADDR_VAR 0 13
15921: PUSH
15922: LD_VAR 0 13
15926: PPUSH
15927: LD_VAR 0 13
15931: PUSH
15932: LD_INT 1
15934: PLUS
15935: PPUSH
15936: LD_VAR 0 11
15940: PUSH
15941: LD_VAR 0 12
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 2
15954: ST_TO_ADDR
// end ;
15955: GO 15863
15957: POP
15958: POP
15959: GO 15843
15961: POP
15962: POP
// if not list then
15963: LD_VAR 0 13
15967: NOT
15968: IFFALSE 15972
// exit ;
15970: GO 16043
// for i in list do
15972: LD_ADDR_VAR 0 6
15976: PUSH
15977: LD_VAR 0 13
15981: PUSH
15982: FOR_IN
15983: IFFALSE 16041
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15985: LD_VAR 0 1
15989: PPUSH
15990: LD_STRING M
15992: PUSH
15993: LD_VAR 0 6
15997: PUSH
15998: LD_INT 1
16000: ARRAY
16001: PUSH
16002: LD_VAR 0 6
16006: PUSH
16007: LD_INT 2
16009: ARRAY
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: LD_INT 0
16016: PUSH
16017: LD_INT 0
16019: PUSH
16020: LD_INT 0
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: PUSH
16032: EMPTY
16033: LIST
16034: PPUSH
16035: CALL_OW 447
16039: GO 15982
16041: POP
16042: POP
// end ;
16043: LD_VAR 0 5
16047: RET
