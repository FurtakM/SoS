// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 15845 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 15943 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 15951 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ru_radar := 98 ;
4669: LD_ADDR_EXP 7
4673: PUSH
4674: LD_INT 98
4676: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4677: LD_ADDR_EXP 8
4681: PUSH
4682: LD_INT 89
4684: ST_TO_ADDR
// us_hack := 99 ;
4685: LD_ADDR_EXP 9
4689: PUSH
4690: LD_INT 99
4692: ST_TO_ADDR
// us_artillery := 97 ;
4693: LD_ADDR_EXP 10
4697: PUSH
4698: LD_INT 97
4700: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4701: LD_ADDR_EXP 11
4705: PUSH
4706: LD_INT 91
4708: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4709: LD_ADDR_EXP 12
4713: PUSH
4714: LD_INT 92
4716: ST_TO_ADDR
// tech_Artillery := 80 ;
4717: LD_ADDR_EXP 13
4721: PUSH
4722: LD_INT 80
4724: ST_TO_ADDR
// tech_RadMat := 81 ;
4725: LD_ADDR_EXP 14
4729: PUSH
4730: LD_INT 81
4732: ST_TO_ADDR
// tech_BasicTools := 82 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 82
4740: ST_TO_ADDR
// tech_Cargo := 83 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 83
4748: ST_TO_ADDR
// tech_Track := 84 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 84
4756: ST_TO_ADDR
// tech_Crane := 85 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 85
4764: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 86
4772: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 87
4780: ST_TO_ADDR
// end ;
4781: LD_VAR 0 1
4785: RET
// every 1 do
4786: GO 4788
4788: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4789: CALL 4666 0 0
4793: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4794: GO 4796
4796: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4797: LD_STRING initStreamRollete();
4799: PPUSH
4800: CALL_OW 559
// InitStreamMode ;
4804: CALL 4813 0 0
// DefineStreamItems ( ) ;
4808: CALL 5253 0 0
// end ;
4812: END
// function InitStreamMode ; begin
4813: LD_INT 0
4815: PPUSH
// streamModeActive := false ;
4816: LD_ADDR_EXP 21
4820: PUSH
4821: LD_INT 0
4823: ST_TO_ADDR
// normalCounter := 36 ;
4824: LD_ADDR_EXP 22
4828: PUSH
4829: LD_INT 36
4831: ST_TO_ADDR
// hardcoreCounter := 16 ;
4832: LD_ADDR_EXP 23
4836: PUSH
4837: LD_INT 16
4839: ST_TO_ADDR
// sRocket := false ;
4840: LD_ADDR_EXP 26
4844: PUSH
4845: LD_INT 0
4847: ST_TO_ADDR
// sSpeed := false ;
4848: LD_ADDR_EXP 25
4852: PUSH
4853: LD_INT 0
4855: ST_TO_ADDR
// sEngine := false ;
4856: LD_ADDR_EXP 27
4860: PUSH
4861: LD_INT 0
4863: ST_TO_ADDR
// sSpec := false ;
4864: LD_ADDR_EXP 24
4868: PUSH
4869: LD_INT 0
4871: ST_TO_ADDR
// sLevel := false ;
4872: LD_ADDR_EXP 28
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// sArmoury := false ;
4880: LD_ADDR_EXP 29
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// sRadar := false ;
4888: LD_ADDR_EXP 30
4892: PUSH
4893: LD_INT 0
4895: ST_TO_ADDR
// sBunker := false ;
4896: LD_ADDR_EXP 31
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// sHack := false ;
4904: LD_ADDR_EXP 32
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// sFire := false ;
4912: LD_ADDR_EXP 33
4916: PUSH
4917: LD_INT 0
4919: ST_TO_ADDR
// sRefresh := false ;
4920: LD_ADDR_EXP 34
4924: PUSH
4925: LD_INT 0
4927: ST_TO_ADDR
// sExp := false ;
4928: LD_ADDR_EXP 35
4932: PUSH
4933: LD_INT 0
4935: ST_TO_ADDR
// sDepot := false ;
4936: LD_ADDR_EXP 36
4940: PUSH
4941: LD_INT 0
4943: ST_TO_ADDR
// sFlag := false ;
4944: LD_ADDR_EXP 37
4948: PUSH
4949: LD_INT 0
4951: ST_TO_ADDR
// sKamikadze := false ;
4952: LD_ADDR_EXP 45
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// sTroll := false ;
4960: LD_ADDR_EXP 46
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// sSlow := false ;
4968: LD_ADDR_EXP 47
4972: PUSH
4973: LD_INT 0
4975: ST_TO_ADDR
// sLack := false ;
4976: LD_ADDR_EXP 48
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// sTank := false ;
4984: LD_ADDR_EXP 50
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// sRemote := false ;
4992: LD_ADDR_EXP 51
4996: PUSH
4997: LD_INT 0
4999: ST_TO_ADDR
// sPowell := false ;
5000: LD_ADDR_EXP 52
5004: PUSH
5005: LD_INT 0
5007: ST_TO_ADDR
// sTeleport := false ;
5008: LD_ADDR_EXP 55
5012: PUSH
5013: LD_INT 0
5015: ST_TO_ADDR
// sOilTower := false ;
5016: LD_ADDR_EXP 57
5020: PUSH
5021: LD_INT 0
5023: ST_TO_ADDR
// sShovel := false ;
5024: LD_ADDR_EXP 58
5028: PUSH
5029: LD_INT 0
5031: ST_TO_ADDR
// sSheik := false ;
5032: LD_ADDR_EXP 59
5036: PUSH
5037: LD_INT 0
5039: ST_TO_ADDR
// sEarthquake := false ;
5040: LD_ADDR_EXP 61
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// sAI := false ;
5048: LD_ADDR_EXP 62
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// sCargo := false ;
5056: LD_ADDR_EXP 65
5060: PUSH
5061: LD_INT 0
5063: ST_TO_ADDR
// sDLaser := false ;
5064: LD_ADDR_EXP 66
5068: PUSH
5069: LD_INT 0
5071: ST_TO_ADDR
// sExchange := false ;
5072: LD_ADDR_EXP 67
5076: PUSH
5077: LD_INT 0
5079: ST_TO_ADDR
// sFac := false ;
5080: LD_ADDR_EXP 68
5084: PUSH
5085: LD_INT 0
5087: ST_TO_ADDR
// sPower := false ;
5088: LD_ADDR_EXP 69
5092: PUSH
5093: LD_INT 0
5095: ST_TO_ADDR
// sRandom := false ;
5096: LD_ADDR_EXP 70
5100: PUSH
5101: LD_INT 0
5103: ST_TO_ADDR
// sShield := false ;
5104: LD_ADDR_EXP 71
5108: PUSH
5109: LD_INT 0
5111: ST_TO_ADDR
// sTime := false ;
5112: LD_ADDR_EXP 72
5116: PUSH
5117: LD_INT 0
5119: ST_TO_ADDR
// sTools := false ;
5120: LD_ADDR_EXP 73
5124: PUSH
5125: LD_INT 0
5127: ST_TO_ADDR
// sSold := false ;
5128: LD_ADDR_EXP 38
5132: PUSH
5133: LD_INT 0
5135: ST_TO_ADDR
// sDiff := false ;
5136: LD_ADDR_EXP 39
5140: PUSH
5141: LD_INT 0
5143: ST_TO_ADDR
// sFog := false ;
5144: LD_ADDR_EXP 42
5148: PUSH
5149: LD_INT 0
5151: ST_TO_ADDR
// sReset := false ;
5152: LD_ADDR_EXP 43
5156: PUSH
5157: LD_INT 0
5159: ST_TO_ADDR
// sSun := false ;
5160: LD_ADDR_EXP 44
5164: PUSH
5165: LD_INT 0
5167: ST_TO_ADDR
// sTiger := false ;
5168: LD_ADDR_EXP 40
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// sBomb := false ;
5176: LD_ADDR_EXP 41
5180: PUSH
5181: LD_INT 0
5183: ST_TO_ADDR
// sWound := false ;
5184: LD_ADDR_EXP 49
5188: PUSH
5189: LD_INT 0
5191: ST_TO_ADDR
// sBetray := false ;
5192: LD_ADDR_EXP 53
5196: PUSH
5197: LD_INT 0
5199: ST_TO_ADDR
// sContamin := false ;
5200: LD_ADDR_EXP 54
5204: PUSH
5205: LD_INT 0
5207: ST_TO_ADDR
// sOil := false ;
5208: LD_ADDR_EXP 56
5212: PUSH
5213: LD_INT 0
5215: ST_TO_ADDR
// sStu := false ;
5216: LD_ADDR_EXP 60
5220: PUSH
5221: LD_INT 0
5223: ST_TO_ADDR
// sBazooka := false ;
5224: LD_ADDR_EXP 63
5228: PUSH
5229: LD_INT 0
5231: ST_TO_ADDR
// sMortar := false ;
5232: LD_ADDR_EXP 64
5236: PUSH
5237: LD_INT 0
5239: ST_TO_ADDR
// sRanger := false ;
5240: LD_ADDR_EXP 74
5244: PUSH
5245: LD_INT 0
5247: ST_TO_ADDR
// end ;
5248: LD_VAR 0 1
5252: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5253: LD_INT 0
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
// result := [ ] ;
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: EMPTY
5266: ST_TO_ADDR
// if campaign_id = 1 then
5267: LD_OWVAR 69
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: IFFALSE 8213
// begin case mission_number of 1 :
5277: LD_OWVAR 70
5281: PUSH
5282: LD_INT 1
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5354
5290: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5291: LD_ADDR_VAR 0 1
5295: PUSH
5296: LD_INT 2
5298: PUSH
5299: LD_INT 4
5301: PUSH
5302: LD_INT 11
5304: PUSH
5305: LD_INT 12
5307: PUSH
5308: LD_INT 15
5310: PUSH
5311: LD_INT 16
5313: PUSH
5314: LD_INT 22
5316: PUSH
5317: LD_INT 23
5319: PUSH
5320: LD_INT 26
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PUSH
5334: LD_INT 101
5336: PUSH
5337: LD_INT 102
5339: PUSH
5340: LD_INT 106
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: ST_TO_ADDR
5352: GO 8211
5354: LD_INT 2
5356: DOUBLE
5357: EQUAL
5358: IFTRUE 5362
5360: GO 5434
5362: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5363: LD_ADDR_VAR 0 1
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: LD_INT 4
5373: PUSH
5374: LD_INT 11
5376: PUSH
5377: LD_INT 12
5379: PUSH
5380: LD_INT 15
5382: PUSH
5383: LD_INT 16
5385: PUSH
5386: LD_INT 22
5388: PUSH
5389: LD_INT 23
5391: PUSH
5392: LD_INT 26
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: LD_INT 101
5408: PUSH
5409: LD_INT 102
5411: PUSH
5412: LD_INT 105
5414: PUSH
5415: LD_INT 106
5417: PUSH
5418: LD_INT 108
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: ST_TO_ADDR
5432: GO 8211
5434: LD_INT 3
5436: DOUBLE
5437: EQUAL
5438: IFTRUE 5442
5440: GO 5518
5442: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_INT 2
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: LD_INT 5
5456: PUSH
5457: LD_INT 11
5459: PUSH
5460: LD_INT 12
5462: PUSH
5463: LD_INT 15
5465: PUSH
5466: LD_INT 16
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 26
5474: PUSH
5475: LD_INT 36
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: LD_INT 101
5492: PUSH
5493: LD_INT 102
5495: PUSH
5496: LD_INT 105
5498: PUSH
5499: LD_INT 106
5501: PUSH
5502: LD_INT 108
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: ST_TO_ADDR
5516: GO 8211
5518: LD_INT 4
5520: DOUBLE
5521: EQUAL
5522: IFTRUE 5526
5524: GO 5610
5526: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5527: LD_ADDR_VAR 0 1
5531: PUSH
5532: LD_INT 2
5534: PUSH
5535: LD_INT 4
5537: PUSH
5538: LD_INT 5
5540: PUSH
5541: LD_INT 8
5543: PUSH
5544: LD_INT 11
5546: PUSH
5547: LD_INT 12
5549: PUSH
5550: LD_INT 15
5552: PUSH
5553: LD_INT 16
5555: PUSH
5556: LD_INT 22
5558: PUSH
5559: LD_INT 23
5561: PUSH
5562: LD_INT 26
5564: PUSH
5565: LD_INT 36
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 101
5584: PUSH
5585: LD_INT 102
5587: PUSH
5588: LD_INT 105
5590: PUSH
5591: LD_INT 106
5593: PUSH
5594: LD_INT 108
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: ST_TO_ADDR
5608: GO 8211
5610: LD_INT 5
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5618
5616: GO 5718
5618: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5619: LD_ADDR_VAR 0 1
5623: PUSH
5624: LD_INT 2
5626: PUSH
5627: LD_INT 4
5629: PUSH
5630: LD_INT 5
5632: PUSH
5633: LD_INT 6
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: LD_INT 11
5641: PUSH
5642: LD_INT 12
5644: PUSH
5645: LD_INT 15
5647: PUSH
5648: LD_INT 16
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 23
5656: PUSH
5657: LD_INT 25
5659: PUSH
5660: LD_INT 26
5662: PUSH
5663: LD_INT 36
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 101
5684: PUSH
5685: LD_INT 102
5687: PUSH
5688: LD_INT 105
5690: PUSH
5691: LD_INT 106
5693: PUSH
5694: LD_INT 108
5696: PUSH
5697: LD_INT 109
5699: PUSH
5700: LD_INT 112
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: ST_TO_ADDR
5716: GO 8211
5718: LD_INT 6
5720: DOUBLE
5721: EQUAL
5722: IFTRUE 5726
5724: GO 5846
5726: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5727: LD_ADDR_VAR 0 1
5731: PUSH
5732: LD_INT 2
5734: PUSH
5735: LD_INT 4
5737: PUSH
5738: LD_INT 5
5740: PUSH
5741: LD_INT 6
5743: PUSH
5744: LD_INT 8
5746: PUSH
5747: LD_INT 11
5749: PUSH
5750: LD_INT 12
5752: PUSH
5753: LD_INT 15
5755: PUSH
5756: LD_INT 16
5758: PUSH
5759: LD_INT 20
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 22
5767: PUSH
5768: LD_INT 23
5770: PUSH
5771: LD_INT 25
5773: PUSH
5774: LD_INT 26
5776: PUSH
5777: LD_INT 30
5779: PUSH
5780: LD_INT 31
5782: PUSH
5783: LD_INT 32
5785: PUSH
5786: LD_INT 36
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 101
5812: PUSH
5813: LD_INT 102
5815: PUSH
5816: LD_INT 105
5818: PUSH
5819: LD_INT 106
5821: PUSH
5822: LD_INT 108
5824: PUSH
5825: LD_INT 109
5827: PUSH
5828: LD_INT 112
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: ST_TO_ADDR
5844: GO 8211
5846: LD_INT 7
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5854
5852: GO 5954
5854: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_INT 2
5862: PUSH
5863: LD_INT 4
5865: PUSH
5866: LD_INT 5
5868: PUSH
5869: LD_INT 7
5871: PUSH
5872: LD_INT 11
5874: PUSH
5875: LD_INT 12
5877: PUSH
5878: LD_INT 15
5880: PUSH
5881: LD_INT 16
5883: PUSH
5884: LD_INT 20
5886: PUSH
5887: LD_INT 21
5889: PUSH
5890: LD_INT 22
5892: PUSH
5893: LD_INT 23
5895: PUSH
5896: LD_INT 25
5898: PUSH
5899: LD_INT 26
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: LD_INT 101
5920: PUSH
5921: LD_INT 102
5923: PUSH
5924: LD_INT 103
5926: PUSH
5927: LD_INT 105
5929: PUSH
5930: LD_INT 106
5932: PUSH
5933: LD_INT 108
5935: PUSH
5936: LD_INT 112
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: ST_TO_ADDR
5952: GO 8211
5954: LD_INT 8
5956: DOUBLE
5957: EQUAL
5958: IFTRUE 5962
5960: GO 6090
5962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5963: LD_ADDR_VAR 0 1
5967: PUSH
5968: LD_INT 2
5970: PUSH
5971: LD_INT 4
5973: PUSH
5974: LD_INT 5
5976: PUSH
5977: LD_INT 6
5979: PUSH
5980: LD_INT 7
5982: PUSH
5983: LD_INT 8
5985: PUSH
5986: LD_INT 11
5988: PUSH
5989: LD_INT 12
5991: PUSH
5992: LD_INT 15
5994: PUSH
5995: LD_INT 16
5997: PUSH
5998: LD_INT 20
6000: PUSH
6001: LD_INT 21
6003: PUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 23
6009: PUSH
6010: LD_INT 25
6012: PUSH
6013: LD_INT 26
6015: PUSH
6016: LD_INT 30
6018: PUSH
6019: LD_INT 31
6021: PUSH
6022: LD_INT 32
6024: PUSH
6025: LD_INT 36
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 101
6052: PUSH
6053: LD_INT 102
6055: PUSH
6056: LD_INT 103
6058: PUSH
6059: LD_INT 105
6061: PUSH
6062: LD_INT 106
6064: PUSH
6065: LD_INT 108
6067: PUSH
6068: LD_INT 109
6070: PUSH
6071: LD_INT 112
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: ST_TO_ADDR
6088: GO 8211
6090: LD_INT 9
6092: DOUBLE
6093: EQUAL
6094: IFTRUE 6098
6096: GO 6234
6098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6099: LD_ADDR_VAR 0 1
6103: PUSH
6104: LD_INT 2
6106: PUSH
6107: LD_INT 4
6109: PUSH
6110: LD_INT 5
6112: PUSH
6113: LD_INT 6
6115: PUSH
6116: LD_INT 7
6118: PUSH
6119: LD_INT 8
6121: PUSH
6122: LD_INT 11
6124: PUSH
6125: LD_INT 12
6127: PUSH
6128: LD_INT 15
6130: PUSH
6131: LD_INT 16
6133: PUSH
6134: LD_INT 20
6136: PUSH
6137: LD_INT 21
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 23
6145: PUSH
6146: LD_INT 25
6148: PUSH
6149: LD_INT 26
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 30
6157: PUSH
6158: LD_INT 31
6160: PUSH
6161: LD_INT 32
6163: PUSH
6164: LD_INT 36
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 101
6192: PUSH
6193: LD_INT 102
6195: PUSH
6196: LD_INT 103
6198: PUSH
6199: LD_INT 105
6201: PUSH
6202: LD_INT 106
6204: PUSH
6205: LD_INT 108
6207: PUSH
6208: LD_INT 109
6210: PUSH
6211: LD_INT 112
6213: PUSH
6214: LD_INT 114
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: ST_TO_ADDR
6232: GO 8211
6234: LD_INT 10
6236: DOUBLE
6237: EQUAL
6238: IFTRUE 6242
6240: GO 6426
6242: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6243: LD_ADDR_VAR 0 1
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: LD_INT 4
6253: PUSH
6254: LD_INT 5
6256: PUSH
6257: LD_INT 6
6259: PUSH
6260: LD_INT 7
6262: PUSH
6263: LD_INT 8
6265: PUSH
6266: LD_INT 9
6268: PUSH
6269: LD_INT 10
6271: PUSH
6272: LD_INT 11
6274: PUSH
6275: LD_INT 12
6277: PUSH
6278: LD_INT 13
6280: PUSH
6281: LD_INT 14
6283: PUSH
6284: LD_INT 15
6286: PUSH
6287: LD_INT 16
6289: PUSH
6290: LD_INT 17
6292: PUSH
6293: LD_INT 18
6295: PUSH
6296: LD_INT 19
6298: PUSH
6299: LD_INT 20
6301: PUSH
6302: LD_INT 21
6304: PUSH
6305: LD_INT 22
6307: PUSH
6308: LD_INT 23
6310: PUSH
6311: LD_INT 24
6313: PUSH
6314: LD_INT 25
6316: PUSH
6317: LD_INT 26
6319: PUSH
6320: LD_INT 28
6322: PUSH
6323: LD_INT 30
6325: PUSH
6326: LD_INT 31
6328: PUSH
6329: LD_INT 32
6331: PUSH
6332: LD_INT 36
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 101
6368: PUSH
6369: LD_INT 102
6371: PUSH
6372: LD_INT 103
6374: PUSH
6375: LD_INT 104
6377: PUSH
6378: LD_INT 105
6380: PUSH
6381: LD_INT 106
6383: PUSH
6384: LD_INT 107
6386: PUSH
6387: LD_INT 108
6389: PUSH
6390: LD_INT 109
6392: PUSH
6393: LD_INT 110
6395: PUSH
6396: LD_INT 111
6398: PUSH
6399: LD_INT 112
6401: PUSH
6402: LD_INT 114
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: ST_TO_ADDR
6424: GO 8211
6426: LD_INT 11
6428: DOUBLE
6429: EQUAL
6430: IFTRUE 6434
6432: GO 6626
6434: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6435: LD_ADDR_VAR 0 1
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: LD_INT 3
6445: PUSH
6446: LD_INT 4
6448: PUSH
6449: LD_INT 5
6451: PUSH
6452: LD_INT 6
6454: PUSH
6455: LD_INT 7
6457: PUSH
6458: LD_INT 8
6460: PUSH
6461: LD_INT 9
6463: PUSH
6464: LD_INT 10
6466: PUSH
6467: LD_INT 11
6469: PUSH
6470: LD_INT 12
6472: PUSH
6473: LD_INT 13
6475: PUSH
6476: LD_INT 14
6478: PUSH
6479: LD_INT 15
6481: PUSH
6482: LD_INT 16
6484: PUSH
6485: LD_INT 17
6487: PUSH
6488: LD_INT 18
6490: PUSH
6491: LD_INT 19
6493: PUSH
6494: LD_INT 20
6496: PUSH
6497: LD_INT 21
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 23
6505: PUSH
6506: LD_INT 24
6508: PUSH
6509: LD_INT 25
6511: PUSH
6512: LD_INT 26
6514: PUSH
6515: LD_INT 28
6517: PUSH
6518: LD_INT 30
6520: PUSH
6521: LD_INT 31
6523: PUSH
6524: LD_INT 32
6526: PUSH
6527: LD_INT 34
6529: PUSH
6530: LD_INT 36
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 101
6568: PUSH
6569: LD_INT 102
6571: PUSH
6572: LD_INT 103
6574: PUSH
6575: LD_INT 104
6577: PUSH
6578: LD_INT 105
6580: PUSH
6581: LD_INT 106
6583: PUSH
6584: LD_INT 107
6586: PUSH
6587: LD_INT 108
6589: PUSH
6590: LD_INT 109
6592: PUSH
6593: LD_INT 110
6595: PUSH
6596: LD_INT 111
6598: PUSH
6599: LD_INT 112
6601: PUSH
6602: LD_INT 114
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: ST_TO_ADDR
6624: GO 8211
6626: LD_INT 12
6628: DOUBLE
6629: EQUAL
6630: IFTRUE 6634
6632: GO 6842
6634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6635: LD_ADDR_VAR 0 1
6639: PUSH
6640: LD_INT 1
6642: PUSH
6643: LD_INT 2
6645: PUSH
6646: LD_INT 3
6648: PUSH
6649: LD_INT 4
6651: PUSH
6652: LD_INT 5
6654: PUSH
6655: LD_INT 6
6657: PUSH
6658: LD_INT 7
6660: PUSH
6661: LD_INT 8
6663: PUSH
6664: LD_INT 9
6666: PUSH
6667: LD_INT 10
6669: PUSH
6670: LD_INT 11
6672: PUSH
6673: LD_INT 12
6675: PUSH
6676: LD_INT 13
6678: PUSH
6679: LD_INT 14
6681: PUSH
6682: LD_INT 15
6684: PUSH
6685: LD_INT 16
6687: PUSH
6688: LD_INT 17
6690: PUSH
6691: LD_INT 18
6693: PUSH
6694: LD_INT 19
6696: PUSH
6697: LD_INT 20
6699: PUSH
6700: LD_INT 21
6702: PUSH
6703: LD_INT 22
6705: PUSH
6706: LD_INT 23
6708: PUSH
6709: LD_INT 24
6711: PUSH
6712: LD_INT 25
6714: PUSH
6715: LD_INT 26
6717: PUSH
6718: LD_INT 27
6720: PUSH
6721: LD_INT 28
6723: PUSH
6724: LD_INT 30
6726: PUSH
6727: LD_INT 31
6729: PUSH
6730: LD_INT 32
6732: PUSH
6733: LD_INT 33
6735: PUSH
6736: LD_INT 34
6738: PUSH
6739: LD_INT 36
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 101
6780: PUSH
6781: LD_INT 102
6783: PUSH
6784: LD_INT 103
6786: PUSH
6787: LD_INT 104
6789: PUSH
6790: LD_INT 105
6792: PUSH
6793: LD_INT 106
6795: PUSH
6796: LD_INT 107
6798: PUSH
6799: LD_INT 108
6801: PUSH
6802: LD_INT 109
6804: PUSH
6805: LD_INT 110
6807: PUSH
6808: LD_INT 111
6810: PUSH
6811: LD_INT 112
6813: PUSH
6814: LD_INT 113
6816: PUSH
6817: LD_INT 114
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: ST_TO_ADDR
6840: GO 8211
6842: LD_INT 13
6844: DOUBLE
6845: EQUAL
6846: IFTRUE 6850
6848: GO 7046
6850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6851: LD_ADDR_VAR 0 1
6855: PUSH
6856: LD_INT 1
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 4
6867: PUSH
6868: LD_INT 5
6870: PUSH
6871: LD_INT 8
6873: PUSH
6874: LD_INT 9
6876: PUSH
6877: LD_INT 10
6879: PUSH
6880: LD_INT 11
6882: PUSH
6883: LD_INT 12
6885: PUSH
6886: LD_INT 14
6888: PUSH
6889: LD_INT 15
6891: PUSH
6892: LD_INT 16
6894: PUSH
6895: LD_INT 17
6897: PUSH
6898: LD_INT 18
6900: PUSH
6901: LD_INT 19
6903: PUSH
6904: LD_INT 20
6906: PUSH
6907: LD_INT 21
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 23
6915: PUSH
6916: LD_INT 24
6918: PUSH
6919: LD_INT 25
6921: PUSH
6922: LD_INT 26
6924: PUSH
6925: LD_INT 27
6927: PUSH
6928: LD_INT 28
6930: PUSH
6931: LD_INT 30
6933: PUSH
6934: LD_INT 31
6936: PUSH
6937: LD_INT 32
6939: PUSH
6940: LD_INT 33
6942: PUSH
6943: LD_INT 34
6945: PUSH
6946: LD_INT 36
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 101
6984: PUSH
6985: LD_INT 102
6987: PUSH
6988: LD_INT 103
6990: PUSH
6991: LD_INT 104
6993: PUSH
6994: LD_INT 105
6996: PUSH
6997: LD_INT 106
6999: PUSH
7000: LD_INT 107
7002: PUSH
7003: LD_INT 108
7005: PUSH
7006: LD_INT 109
7008: PUSH
7009: LD_INT 110
7011: PUSH
7012: LD_INT 111
7014: PUSH
7015: LD_INT 112
7017: PUSH
7018: LD_INT 113
7020: PUSH
7021: LD_INT 114
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: ST_TO_ADDR
7044: GO 8211
7046: LD_INT 14
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7266
7054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7055: LD_ADDR_VAR 0 1
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: LD_INT 6
7077: PUSH
7078: LD_INT 7
7080: PUSH
7081: LD_INT 8
7083: PUSH
7084: LD_INT 9
7086: PUSH
7087: LD_INT 10
7089: PUSH
7090: LD_INT 11
7092: PUSH
7093: LD_INT 12
7095: PUSH
7096: LD_INT 13
7098: PUSH
7099: LD_INT 14
7101: PUSH
7102: LD_INT 15
7104: PUSH
7105: LD_INT 16
7107: PUSH
7108: LD_INT 17
7110: PUSH
7111: LD_INT 18
7113: PUSH
7114: LD_INT 19
7116: PUSH
7117: LD_INT 20
7119: PUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 22
7125: PUSH
7126: LD_INT 23
7128: PUSH
7129: LD_INT 24
7131: PUSH
7132: LD_INT 25
7134: PUSH
7135: LD_INT 26
7137: PUSH
7138: LD_INT 27
7140: PUSH
7141: LD_INT 28
7143: PUSH
7144: LD_INT 29
7146: PUSH
7147: LD_INT 30
7149: PUSH
7150: LD_INT 31
7152: PUSH
7153: LD_INT 32
7155: PUSH
7156: LD_INT 33
7158: PUSH
7159: LD_INT 34
7161: PUSH
7162: LD_INT 36
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 101
7204: PUSH
7205: LD_INT 102
7207: PUSH
7208: LD_INT 103
7210: PUSH
7211: LD_INT 104
7213: PUSH
7214: LD_INT 105
7216: PUSH
7217: LD_INT 106
7219: PUSH
7220: LD_INT 107
7222: PUSH
7223: LD_INT 108
7225: PUSH
7226: LD_INT 109
7228: PUSH
7229: LD_INT 110
7231: PUSH
7232: LD_INT 111
7234: PUSH
7235: LD_INT 112
7237: PUSH
7238: LD_INT 113
7240: PUSH
7241: LD_INT 114
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: ST_TO_ADDR
7264: GO 8211
7266: LD_INT 15
7268: DOUBLE
7269: EQUAL
7270: IFTRUE 7274
7272: GO 7486
7274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_INT 1
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: LD_INT 3
7288: PUSH
7289: LD_INT 4
7291: PUSH
7292: LD_INT 5
7294: PUSH
7295: LD_INT 6
7297: PUSH
7298: LD_INT 7
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: LD_INT 9
7306: PUSH
7307: LD_INT 10
7309: PUSH
7310: LD_INT 11
7312: PUSH
7313: LD_INT 12
7315: PUSH
7316: LD_INT 13
7318: PUSH
7319: LD_INT 14
7321: PUSH
7322: LD_INT 15
7324: PUSH
7325: LD_INT 16
7327: PUSH
7328: LD_INT 17
7330: PUSH
7331: LD_INT 18
7333: PUSH
7334: LD_INT 19
7336: PUSH
7337: LD_INT 20
7339: PUSH
7340: LD_INT 21
7342: PUSH
7343: LD_INT 22
7345: PUSH
7346: LD_INT 23
7348: PUSH
7349: LD_INT 24
7351: PUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 26
7357: PUSH
7358: LD_INT 27
7360: PUSH
7361: LD_INT 28
7363: PUSH
7364: LD_INT 29
7366: PUSH
7367: LD_INT 30
7369: PUSH
7370: LD_INT 31
7372: PUSH
7373: LD_INT 32
7375: PUSH
7376: LD_INT 33
7378: PUSH
7379: LD_INT 34
7381: PUSH
7382: LD_INT 36
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 101
7424: PUSH
7425: LD_INT 102
7427: PUSH
7428: LD_INT 103
7430: PUSH
7431: LD_INT 104
7433: PUSH
7434: LD_INT 105
7436: PUSH
7437: LD_INT 106
7439: PUSH
7440: LD_INT 107
7442: PUSH
7443: LD_INT 108
7445: PUSH
7446: LD_INT 109
7448: PUSH
7449: LD_INT 110
7451: PUSH
7452: LD_INT 111
7454: PUSH
7455: LD_INT 112
7457: PUSH
7458: LD_INT 113
7460: PUSH
7461: LD_INT 114
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 8211
7486: LD_INT 16
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7618
7494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 2
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: LD_INT 5
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: LD_INT 11
7514: PUSH
7515: LD_INT 12
7517: PUSH
7518: LD_INT 15
7520: PUSH
7521: LD_INT 16
7523: PUSH
7524: LD_INT 20
7526: PUSH
7527: LD_INT 21
7529: PUSH
7530: LD_INT 22
7532: PUSH
7533: LD_INT 23
7535: PUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 26
7541: PUSH
7542: LD_INT 30
7544: PUSH
7545: LD_INT 31
7547: PUSH
7548: LD_INT 32
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 34
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 101
7580: PUSH
7581: LD_INT 102
7583: PUSH
7584: LD_INT 103
7586: PUSH
7587: LD_INT 106
7589: PUSH
7590: LD_INT 108
7592: PUSH
7593: LD_INT 112
7595: PUSH
7596: LD_INT 113
7598: PUSH
7599: LD_INT 114
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: ST_TO_ADDR
7616: GO 8211
7618: LD_INT 17
7620: DOUBLE
7621: EQUAL
7622: IFTRUE 7626
7624: GO 7838
7626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_INT 1
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: LD_INT 3
7640: PUSH
7641: LD_INT 4
7643: PUSH
7644: LD_INT 5
7646: PUSH
7647: LD_INT 6
7649: PUSH
7650: LD_INT 7
7652: PUSH
7653: LD_INT 8
7655: PUSH
7656: LD_INT 9
7658: PUSH
7659: LD_INT 10
7661: PUSH
7662: LD_INT 11
7664: PUSH
7665: LD_INT 12
7667: PUSH
7668: LD_INT 13
7670: PUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: LD_INT 16
7679: PUSH
7680: LD_INT 17
7682: PUSH
7683: LD_INT 18
7685: PUSH
7686: LD_INT 19
7688: PUSH
7689: LD_INT 20
7691: PUSH
7692: LD_INT 21
7694: PUSH
7695: LD_INT 22
7697: PUSH
7698: LD_INT 23
7700: PUSH
7701: LD_INT 24
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 26
7709: PUSH
7710: LD_INT 27
7712: PUSH
7713: LD_INT 28
7715: PUSH
7716: LD_INT 29
7718: PUSH
7719: LD_INT 30
7721: PUSH
7722: LD_INT 31
7724: PUSH
7725: LD_INT 32
7727: PUSH
7728: LD_INT 33
7730: PUSH
7731: LD_INT 34
7733: PUSH
7734: LD_INT 36
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 101
7776: PUSH
7777: LD_INT 102
7779: PUSH
7780: LD_INT 103
7782: PUSH
7783: LD_INT 104
7785: PUSH
7786: LD_INT 105
7788: PUSH
7789: LD_INT 106
7791: PUSH
7792: LD_INT 107
7794: PUSH
7795: LD_INT 108
7797: PUSH
7798: LD_INT 109
7800: PUSH
7801: LD_INT 110
7803: PUSH
7804: LD_INT 111
7806: PUSH
7807: LD_INT 112
7809: PUSH
7810: LD_INT 113
7812: PUSH
7813: LD_INT 114
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: ST_TO_ADDR
7836: GO 8211
7838: LD_INT 18
7840: DOUBLE
7841: EQUAL
7842: IFTRUE 7846
7844: GO 7982
7846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7847: LD_ADDR_VAR 0 1
7851: PUSH
7852: LD_INT 2
7854: PUSH
7855: LD_INT 4
7857: PUSH
7858: LD_INT 5
7860: PUSH
7861: LD_INT 7
7863: PUSH
7864: LD_INT 11
7866: PUSH
7867: LD_INT 12
7869: PUSH
7870: LD_INT 15
7872: PUSH
7873: LD_INT 16
7875: PUSH
7876: LD_INT 20
7878: PUSH
7879: LD_INT 21
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_INT 23
7887: PUSH
7888: LD_INT 25
7890: PUSH
7891: LD_INT 26
7893: PUSH
7894: LD_INT 30
7896: PUSH
7897: LD_INT 31
7899: PUSH
7900: LD_INT 32
7902: PUSH
7903: LD_INT 33
7905: PUSH
7906: LD_INT 34
7908: PUSH
7909: LD_INT 35
7911: PUSH
7912: LD_INT 36
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 101
7940: PUSH
7941: LD_INT 102
7943: PUSH
7944: LD_INT 103
7946: PUSH
7947: LD_INT 106
7949: PUSH
7950: LD_INT 108
7952: PUSH
7953: LD_INT 112
7955: PUSH
7956: LD_INT 113
7958: PUSH
7959: LD_INT 114
7961: PUSH
7962: LD_INT 115
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 8211
7982: LD_INT 19
7984: DOUBLE
7985: EQUAL
7986: IFTRUE 7990
7988: GO 8210
7990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7991: LD_ADDR_VAR 0 1
7995: PUSH
7996: LD_INT 1
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: LD_INT 5
8010: PUSH
8011: LD_INT 6
8013: PUSH
8014: LD_INT 7
8016: PUSH
8017: LD_INT 8
8019: PUSH
8020: LD_INT 9
8022: PUSH
8023: LD_INT 10
8025: PUSH
8026: LD_INT 11
8028: PUSH
8029: LD_INT 12
8031: PUSH
8032: LD_INT 13
8034: PUSH
8035: LD_INT 14
8037: PUSH
8038: LD_INT 15
8040: PUSH
8041: LD_INT 16
8043: PUSH
8044: LD_INT 17
8046: PUSH
8047: LD_INT 18
8049: PUSH
8050: LD_INT 19
8052: PUSH
8053: LD_INT 20
8055: PUSH
8056: LD_INT 21
8058: PUSH
8059: LD_INT 22
8061: PUSH
8062: LD_INT 23
8064: PUSH
8065: LD_INT 24
8067: PUSH
8068: LD_INT 25
8070: PUSH
8071: LD_INT 26
8073: PUSH
8074: LD_INT 27
8076: PUSH
8077: LD_INT 28
8079: PUSH
8080: LD_INT 29
8082: PUSH
8083: LD_INT 30
8085: PUSH
8086: LD_INT 31
8088: PUSH
8089: LD_INT 32
8091: PUSH
8092: LD_INT 33
8094: PUSH
8095: LD_INT 34
8097: PUSH
8098: LD_INT 35
8100: PUSH
8101: LD_INT 36
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 101
8144: PUSH
8145: LD_INT 102
8147: PUSH
8148: LD_INT 103
8150: PUSH
8151: LD_INT 104
8153: PUSH
8154: LD_INT 105
8156: PUSH
8157: LD_INT 106
8159: PUSH
8160: LD_INT 107
8162: PUSH
8163: LD_INT 108
8165: PUSH
8166: LD_INT 109
8168: PUSH
8169: LD_INT 110
8171: PUSH
8172: LD_INT 111
8174: PUSH
8175: LD_INT 112
8177: PUSH
8178: LD_INT 113
8180: PUSH
8181: LD_INT 114
8183: PUSH
8184: LD_INT 115
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: ST_TO_ADDR
8208: GO 8211
8210: POP
// end else
8211: GO 8430
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_INT 1
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 4
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: LD_INT 6
8235: PUSH
8236: LD_INT 7
8238: PUSH
8239: LD_INT 8
8241: PUSH
8242: LD_INT 9
8244: PUSH
8245: LD_INT 10
8247: PUSH
8248: LD_INT 11
8250: PUSH
8251: LD_INT 12
8253: PUSH
8254: LD_INT 13
8256: PUSH
8257: LD_INT 14
8259: PUSH
8260: LD_INT 15
8262: PUSH
8263: LD_INT 16
8265: PUSH
8266: LD_INT 17
8268: PUSH
8269: LD_INT 18
8271: PUSH
8272: LD_INT 19
8274: PUSH
8275: LD_INT 20
8277: PUSH
8278: LD_INT 21
8280: PUSH
8281: LD_INT 22
8283: PUSH
8284: LD_INT 23
8286: PUSH
8287: LD_INT 24
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 26
8295: PUSH
8296: LD_INT 27
8298: PUSH
8299: LD_INT 28
8301: PUSH
8302: LD_INT 29
8304: PUSH
8305: LD_INT 30
8307: PUSH
8308: LD_INT 31
8310: PUSH
8311: LD_INT 32
8313: PUSH
8314: LD_INT 33
8316: PUSH
8317: LD_INT 34
8319: PUSH
8320: LD_INT 35
8322: PUSH
8323: LD_INT 36
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 101
8366: PUSH
8367: LD_INT 102
8369: PUSH
8370: LD_INT 103
8372: PUSH
8373: LD_INT 104
8375: PUSH
8376: LD_INT 105
8378: PUSH
8379: LD_INT 106
8381: PUSH
8382: LD_INT 107
8384: PUSH
8385: LD_INT 108
8387: PUSH
8388: LD_INT 109
8390: PUSH
8391: LD_INT 110
8393: PUSH
8394: LD_INT 111
8396: PUSH
8397: LD_INT 112
8399: PUSH
8400: LD_INT 113
8402: PUSH
8403: LD_INT 114
8405: PUSH
8406: LD_INT 115
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// if result then
8430: LD_VAR 0 1
8434: IFFALSE 8723
// begin normal :=  ;
8436: LD_ADDR_VAR 0 3
8440: PUSH
8441: LD_STRING 
8443: ST_TO_ADDR
// hardcore :=  ;
8444: LD_ADDR_VAR 0 4
8448: PUSH
8449: LD_STRING 
8451: ST_TO_ADDR
// for i = 1 to normalCounter do
8452: LD_ADDR_VAR 0 5
8456: PUSH
8457: DOUBLE
8458: LD_INT 1
8460: DEC
8461: ST_TO_ADDR
8462: LD_EXP 22
8466: PUSH
8467: FOR_TO
8468: IFFALSE 8569
// begin tmp := 0 ;
8470: LD_ADDR_VAR 0 2
8474: PUSH
8475: LD_STRING 0
8477: ST_TO_ADDR
// if result [ 1 ] then
8478: LD_VAR 0 1
8482: PUSH
8483: LD_INT 1
8485: ARRAY
8486: IFFALSE 8551
// if result [ 1 ] [ 1 ] = i then
8488: LD_VAR 0 1
8492: PUSH
8493: LD_INT 1
8495: ARRAY
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PUSH
8501: LD_VAR 0 5
8505: EQUAL
8506: IFFALSE 8551
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8508: LD_ADDR_VAR 0 1
8512: PUSH
8513: LD_VAR 0 1
8517: PPUSH
8518: LD_INT 1
8520: PPUSH
8521: LD_VAR 0 1
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_INT 1
8532: PPUSH
8533: CALL_OW 3
8537: PPUSH
8538: CALL_OW 1
8542: ST_TO_ADDR
// tmp := 1 ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_STRING 1
8550: ST_TO_ADDR
// end ; normal := normal & tmp ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_VAR 0 3
8560: PUSH
8561: LD_VAR 0 2
8565: STR
8566: ST_TO_ADDR
// end ;
8567: GO 8467
8569: POP
8570: POP
// for i = 1 to hardcoreCounter do
8571: LD_ADDR_VAR 0 5
8575: PUSH
8576: DOUBLE
8577: LD_INT 1
8579: DEC
8580: ST_TO_ADDR
8581: LD_EXP 23
8585: PUSH
8586: FOR_TO
8587: IFFALSE 8692
// begin tmp := 0 ;
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_STRING 0
8596: ST_TO_ADDR
// if result [ 2 ] then
8597: LD_VAR 0 1
8601: PUSH
8602: LD_INT 2
8604: ARRAY
8605: IFFALSE 8674
// if result [ 2 ] [ 1 ] = 100 + i then
8607: LD_VAR 0 1
8611: PUSH
8612: LD_INT 2
8614: ARRAY
8615: PUSH
8616: LD_INT 1
8618: ARRAY
8619: PUSH
8620: LD_INT 100
8622: PUSH
8623: LD_VAR 0 5
8627: PLUS
8628: EQUAL
8629: IFFALSE 8674
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8631: LD_ADDR_VAR 0 1
8635: PUSH
8636: LD_VAR 0 1
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: LD_VAR 0 1
8648: PUSH
8649: LD_INT 2
8651: ARRAY
8652: PPUSH
8653: LD_INT 1
8655: PPUSH
8656: CALL_OW 3
8660: PPUSH
8661: CALL_OW 1
8665: ST_TO_ADDR
// tmp := 1 ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_STRING 1
8673: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8674: LD_ADDR_VAR 0 4
8678: PUSH
8679: LD_VAR 0 4
8683: PUSH
8684: LD_VAR 0 2
8688: STR
8689: ST_TO_ADDR
// end ;
8690: GO 8586
8692: POP
8693: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8694: LD_STRING getStreamItemsFromMission("
8696: PUSH
8697: LD_VAR 0 3
8701: STR
8702: PUSH
8703: LD_STRING ","
8705: STR
8706: PUSH
8707: LD_VAR 0 4
8711: STR
8712: PUSH
8713: LD_STRING ")
8715: STR
8716: PPUSH
8717: CALL_OW 559
// end else
8721: GO 8730
// ToLua ( getStreamItemsFromMission("","") ) ;
8723: LD_STRING getStreamItemsFromMission("","")
8725: PPUSH
8726: CALL_OW 559
// end ;
8730: LD_VAR 0 1
8734: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8735: LD_VAR 0 2
8739: PUSH
8740: LD_INT 100
8742: EQUAL
8743: IFFALSE 9692
// begin if not StreamModeActive then
8745: LD_EXP 21
8749: NOT
8750: IFFALSE 8760
// StreamModeActive := true ;
8752: LD_ADDR_EXP 21
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// if p3 = 0 then
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 0
8767: EQUAL
8768: IFFALSE 8774
// InitStreamMode ;
8770: CALL 4813 0 0
// if p3 = 1 then
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 1
8781: EQUAL
8782: IFFALSE 8792
// sRocket := true ;
8784: LD_ADDR_EXP 26
8788: PUSH
8789: LD_INT 1
8791: ST_TO_ADDR
// if p3 = 2 then
8792: LD_VAR 0 3
8796: PUSH
8797: LD_INT 2
8799: EQUAL
8800: IFFALSE 8810
// sSpeed := true ;
8802: LD_ADDR_EXP 25
8806: PUSH
8807: LD_INT 1
8809: ST_TO_ADDR
// if p3 = 3 then
8810: LD_VAR 0 3
8814: PUSH
8815: LD_INT 3
8817: EQUAL
8818: IFFALSE 8828
// sEngine := true ;
8820: LD_ADDR_EXP 27
8824: PUSH
8825: LD_INT 1
8827: ST_TO_ADDR
// if p3 = 4 then
8828: LD_VAR 0 3
8832: PUSH
8833: LD_INT 4
8835: EQUAL
8836: IFFALSE 8846
// sSpec := true ;
8838: LD_ADDR_EXP 24
8842: PUSH
8843: LD_INT 1
8845: ST_TO_ADDR
// if p3 = 5 then
8846: LD_VAR 0 3
8850: PUSH
8851: LD_INT 5
8853: EQUAL
8854: IFFALSE 8864
// sLevel := true ;
8856: LD_ADDR_EXP 28
8860: PUSH
8861: LD_INT 1
8863: ST_TO_ADDR
// if p3 = 6 then
8864: LD_VAR 0 3
8868: PUSH
8869: LD_INT 6
8871: EQUAL
8872: IFFALSE 8882
// sArmoury := true ;
8874: LD_ADDR_EXP 29
8878: PUSH
8879: LD_INT 1
8881: ST_TO_ADDR
// if p3 = 7 then
8882: LD_VAR 0 3
8886: PUSH
8887: LD_INT 7
8889: EQUAL
8890: IFFALSE 8900
// sRadar := true ;
8892: LD_ADDR_EXP 30
8896: PUSH
8897: LD_INT 1
8899: ST_TO_ADDR
// if p3 = 8 then
8900: LD_VAR 0 3
8904: PUSH
8905: LD_INT 8
8907: EQUAL
8908: IFFALSE 8918
// sBunker := true ;
8910: LD_ADDR_EXP 31
8914: PUSH
8915: LD_INT 1
8917: ST_TO_ADDR
// if p3 = 9 then
8918: LD_VAR 0 3
8922: PUSH
8923: LD_INT 9
8925: EQUAL
8926: IFFALSE 8936
// sHack := true ;
8928: LD_ADDR_EXP 32
8932: PUSH
8933: LD_INT 1
8935: ST_TO_ADDR
// if p3 = 10 then
8936: LD_VAR 0 3
8940: PUSH
8941: LD_INT 10
8943: EQUAL
8944: IFFALSE 8954
// sFire := true ;
8946: LD_ADDR_EXP 33
8950: PUSH
8951: LD_INT 1
8953: ST_TO_ADDR
// if p3 = 11 then
8954: LD_VAR 0 3
8958: PUSH
8959: LD_INT 11
8961: EQUAL
8962: IFFALSE 8972
// sRefresh := true ;
8964: LD_ADDR_EXP 34
8968: PUSH
8969: LD_INT 1
8971: ST_TO_ADDR
// if p3 = 12 then
8972: LD_VAR 0 3
8976: PUSH
8977: LD_INT 12
8979: EQUAL
8980: IFFALSE 8990
// sExp := true ;
8982: LD_ADDR_EXP 35
8986: PUSH
8987: LD_INT 1
8989: ST_TO_ADDR
// if p3 = 13 then
8990: LD_VAR 0 3
8994: PUSH
8995: LD_INT 13
8997: EQUAL
8998: IFFALSE 9008
// sDepot := true ;
9000: LD_ADDR_EXP 36
9004: PUSH
9005: LD_INT 1
9007: ST_TO_ADDR
// if p3 = 14 then
9008: LD_VAR 0 3
9012: PUSH
9013: LD_INT 14
9015: EQUAL
9016: IFFALSE 9026
// sFlag := true ;
9018: LD_ADDR_EXP 37
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// if p3 = 15 then
9026: LD_VAR 0 3
9030: PUSH
9031: LD_INT 15
9033: EQUAL
9034: IFFALSE 9044
// sKamikadze := true ;
9036: LD_ADDR_EXP 45
9040: PUSH
9041: LD_INT 1
9043: ST_TO_ADDR
// if p3 = 16 then
9044: LD_VAR 0 3
9048: PUSH
9049: LD_INT 16
9051: EQUAL
9052: IFFALSE 9062
// sTroll := true ;
9054: LD_ADDR_EXP 46
9058: PUSH
9059: LD_INT 1
9061: ST_TO_ADDR
// if p3 = 17 then
9062: LD_VAR 0 3
9066: PUSH
9067: LD_INT 17
9069: EQUAL
9070: IFFALSE 9080
// sSlow := true ;
9072: LD_ADDR_EXP 47
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// if p3 = 18 then
9080: LD_VAR 0 3
9084: PUSH
9085: LD_INT 18
9087: EQUAL
9088: IFFALSE 9098
// sLack := true ;
9090: LD_ADDR_EXP 48
9094: PUSH
9095: LD_INT 1
9097: ST_TO_ADDR
// if p3 = 19 then
9098: LD_VAR 0 3
9102: PUSH
9103: LD_INT 19
9105: EQUAL
9106: IFFALSE 9116
// sTank := true ;
9108: LD_ADDR_EXP 50
9112: PUSH
9113: LD_INT 1
9115: ST_TO_ADDR
// if p3 = 20 then
9116: LD_VAR 0 3
9120: PUSH
9121: LD_INT 20
9123: EQUAL
9124: IFFALSE 9134
// sRemote := true ;
9126: LD_ADDR_EXP 51
9130: PUSH
9131: LD_INT 1
9133: ST_TO_ADDR
// if p3 = 21 then
9134: LD_VAR 0 3
9138: PUSH
9139: LD_INT 21
9141: EQUAL
9142: IFFALSE 9152
// sPowell := true ;
9144: LD_ADDR_EXP 52
9148: PUSH
9149: LD_INT 1
9151: ST_TO_ADDR
// if p3 = 22 then
9152: LD_VAR 0 3
9156: PUSH
9157: LD_INT 22
9159: EQUAL
9160: IFFALSE 9170
// sTeleport := true ;
9162: LD_ADDR_EXP 55
9166: PUSH
9167: LD_INT 1
9169: ST_TO_ADDR
// if p3 = 23 then
9170: LD_VAR 0 3
9174: PUSH
9175: LD_INT 23
9177: EQUAL
9178: IFFALSE 9188
// sOilTower := true ;
9180: LD_ADDR_EXP 57
9184: PUSH
9185: LD_INT 1
9187: ST_TO_ADDR
// if p3 = 24 then
9188: LD_VAR 0 3
9192: PUSH
9193: LD_INT 24
9195: EQUAL
9196: IFFALSE 9206
// sShovel := true ;
9198: LD_ADDR_EXP 58
9202: PUSH
9203: LD_INT 1
9205: ST_TO_ADDR
// if p3 = 25 then
9206: LD_VAR 0 3
9210: PUSH
9211: LD_INT 25
9213: EQUAL
9214: IFFALSE 9224
// sSheik := true ;
9216: LD_ADDR_EXP 59
9220: PUSH
9221: LD_INT 1
9223: ST_TO_ADDR
// if p3 = 26 then
9224: LD_VAR 0 3
9228: PUSH
9229: LD_INT 26
9231: EQUAL
9232: IFFALSE 9242
// sEarthquake := true ;
9234: LD_ADDR_EXP 61
9238: PUSH
9239: LD_INT 1
9241: ST_TO_ADDR
// if p3 = 27 then
9242: LD_VAR 0 3
9246: PUSH
9247: LD_INT 27
9249: EQUAL
9250: IFFALSE 9260
// sAI := true ;
9252: LD_ADDR_EXP 62
9256: PUSH
9257: LD_INT 1
9259: ST_TO_ADDR
// if p3 = 28 then
9260: LD_VAR 0 3
9264: PUSH
9265: LD_INT 28
9267: EQUAL
9268: IFFALSE 9278
// sCargo := true ;
9270: LD_ADDR_EXP 65
9274: PUSH
9275: LD_INT 1
9277: ST_TO_ADDR
// if p3 = 29 then
9278: LD_VAR 0 3
9282: PUSH
9283: LD_INT 29
9285: EQUAL
9286: IFFALSE 9296
// sDLaser := true ;
9288: LD_ADDR_EXP 66
9292: PUSH
9293: LD_INT 1
9295: ST_TO_ADDR
// if p3 = 30 then
9296: LD_VAR 0 3
9300: PUSH
9301: LD_INT 30
9303: EQUAL
9304: IFFALSE 9314
// sExchange := true ;
9306: LD_ADDR_EXP 67
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// if p3 = 31 then
9314: LD_VAR 0 3
9318: PUSH
9319: LD_INT 31
9321: EQUAL
9322: IFFALSE 9332
// sFac := true ;
9324: LD_ADDR_EXP 68
9328: PUSH
9329: LD_INT 1
9331: ST_TO_ADDR
// if p3 = 32 then
9332: LD_VAR 0 3
9336: PUSH
9337: LD_INT 32
9339: EQUAL
9340: IFFALSE 9350
// sPower := true ;
9342: LD_ADDR_EXP 69
9346: PUSH
9347: LD_INT 1
9349: ST_TO_ADDR
// if p3 = 33 then
9350: LD_VAR 0 3
9354: PUSH
9355: LD_INT 33
9357: EQUAL
9358: IFFALSE 9368
// sRandom := true ;
9360: LD_ADDR_EXP 70
9364: PUSH
9365: LD_INT 1
9367: ST_TO_ADDR
// if p3 = 34 then
9368: LD_VAR 0 3
9372: PUSH
9373: LD_INT 34
9375: EQUAL
9376: IFFALSE 9386
// sShield := true ;
9378: LD_ADDR_EXP 71
9382: PUSH
9383: LD_INT 1
9385: ST_TO_ADDR
// if p3 = 35 then
9386: LD_VAR 0 3
9390: PUSH
9391: LD_INT 35
9393: EQUAL
9394: IFFALSE 9404
// sTime := true ;
9396: LD_ADDR_EXP 72
9400: PUSH
9401: LD_INT 1
9403: ST_TO_ADDR
// if p3 = 36 then
9404: LD_VAR 0 3
9408: PUSH
9409: LD_INT 36
9411: EQUAL
9412: IFFALSE 9422
// sTools := true ;
9414: LD_ADDR_EXP 73
9418: PUSH
9419: LD_INT 1
9421: ST_TO_ADDR
// if p3 = 101 then
9422: LD_VAR 0 3
9426: PUSH
9427: LD_INT 101
9429: EQUAL
9430: IFFALSE 9440
// sSold := true ;
9432: LD_ADDR_EXP 38
9436: PUSH
9437: LD_INT 1
9439: ST_TO_ADDR
// if p3 = 102 then
9440: LD_VAR 0 3
9444: PUSH
9445: LD_INT 102
9447: EQUAL
9448: IFFALSE 9458
// sDiff := true ;
9450: LD_ADDR_EXP 39
9454: PUSH
9455: LD_INT 1
9457: ST_TO_ADDR
// if p3 = 103 then
9458: LD_VAR 0 3
9462: PUSH
9463: LD_INT 103
9465: EQUAL
9466: IFFALSE 9476
// sFog := true ;
9468: LD_ADDR_EXP 42
9472: PUSH
9473: LD_INT 1
9475: ST_TO_ADDR
// if p3 = 104 then
9476: LD_VAR 0 3
9480: PUSH
9481: LD_INT 104
9483: EQUAL
9484: IFFALSE 9494
// sReset := true ;
9486: LD_ADDR_EXP 43
9490: PUSH
9491: LD_INT 1
9493: ST_TO_ADDR
// if p3 = 105 then
9494: LD_VAR 0 3
9498: PUSH
9499: LD_INT 105
9501: EQUAL
9502: IFFALSE 9512
// sSun := true ;
9504: LD_ADDR_EXP 44
9508: PUSH
9509: LD_INT 1
9511: ST_TO_ADDR
// if p3 = 106 then
9512: LD_VAR 0 3
9516: PUSH
9517: LD_INT 106
9519: EQUAL
9520: IFFALSE 9530
// sTiger := true ;
9522: LD_ADDR_EXP 40
9526: PUSH
9527: LD_INT 1
9529: ST_TO_ADDR
// if p3 = 107 then
9530: LD_VAR 0 3
9534: PUSH
9535: LD_INT 107
9537: EQUAL
9538: IFFALSE 9548
// sBomb := true ;
9540: LD_ADDR_EXP 41
9544: PUSH
9545: LD_INT 1
9547: ST_TO_ADDR
// if p3 = 108 then
9548: LD_VAR 0 3
9552: PUSH
9553: LD_INT 108
9555: EQUAL
9556: IFFALSE 9566
// sWound := true ;
9558: LD_ADDR_EXP 49
9562: PUSH
9563: LD_INT 1
9565: ST_TO_ADDR
// if p3 = 109 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 109
9573: EQUAL
9574: IFFALSE 9584
// sBetray := true ;
9576: LD_ADDR_EXP 53
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// if p3 = 110 then
9584: LD_VAR 0 3
9588: PUSH
9589: LD_INT 110
9591: EQUAL
9592: IFFALSE 9602
// sContamin := true ;
9594: LD_ADDR_EXP 54
9598: PUSH
9599: LD_INT 1
9601: ST_TO_ADDR
// if p3 = 111 then
9602: LD_VAR 0 3
9606: PUSH
9607: LD_INT 111
9609: EQUAL
9610: IFFALSE 9620
// sOil := true ;
9612: LD_ADDR_EXP 56
9616: PUSH
9617: LD_INT 1
9619: ST_TO_ADDR
// if p3 = 112 then
9620: LD_VAR 0 3
9624: PUSH
9625: LD_INT 112
9627: EQUAL
9628: IFFALSE 9638
// sStu := true ;
9630: LD_ADDR_EXP 60
9634: PUSH
9635: LD_INT 1
9637: ST_TO_ADDR
// if p3 = 113 then
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 113
9645: EQUAL
9646: IFFALSE 9656
// sBazooka := true ;
9648: LD_ADDR_EXP 63
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// if p3 = 114 then
9656: LD_VAR 0 3
9660: PUSH
9661: LD_INT 114
9663: EQUAL
9664: IFFALSE 9674
// sMortar := true ;
9666: LD_ADDR_EXP 64
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// if p3 = 115 then
9674: LD_VAR 0 3
9678: PUSH
9679: LD_INT 115
9681: EQUAL
9682: IFFALSE 9692
// sRanger := true ;
9684: LD_ADDR_EXP 74
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
// end ; end ;
9692: PPOPN 6
9694: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9695: LD_EXP 21
9699: PUSH
9700: LD_EXP 26
9704: AND
9705: IFFALSE 9829
9707: GO 9709
9709: DISABLE
9710: LD_INT 0
9712: PPUSH
9713: PPUSH
// begin enable ;
9714: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9715: LD_ADDR_VAR 0 2
9719: PUSH
9720: LD_INT 22
9722: PUSH
9723: LD_OWVAR 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 2
9734: PUSH
9735: LD_INT 34
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 34
9747: PUSH
9748: LD_INT 45
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 34
9757: PUSH
9758: LD_INT 28
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 34
9767: PUSH
9768: LD_INT 47
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: ST_TO_ADDR
// if not tmp then
9791: LD_VAR 0 2
9795: NOT
9796: IFFALSE 9800
// exit ;
9798: GO 9829
// for i in tmp do
9800: LD_ADDR_VAR 0 1
9804: PUSH
9805: LD_VAR 0 2
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9827
// begin SetLives ( i , 0 ) ;
9813: LD_VAR 0 1
9817: PPUSH
9818: LD_INT 0
9820: PPUSH
9821: CALL_OW 234
// end ;
9825: GO 9810
9827: POP
9828: POP
// end ;
9829: PPOPN 2
9831: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9832: LD_EXP 21
9836: PUSH
9837: LD_EXP 27
9841: AND
9842: IFFALSE 9926
9844: GO 9846
9846: DISABLE
9847: LD_INT 0
9849: PPUSH
9850: PPUSH
// begin enable ;
9851: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9852: LD_ADDR_VAR 0 2
9856: PUSH
9857: LD_INT 22
9859: PUSH
9860: LD_OWVAR 2
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 32
9871: PUSH
9872: LD_INT 3
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 69
9887: ST_TO_ADDR
// if not tmp then
9888: LD_VAR 0 2
9892: NOT
9893: IFFALSE 9897
// exit ;
9895: GO 9926
// for i in tmp do
9897: LD_ADDR_VAR 0 1
9901: PUSH
9902: LD_VAR 0 2
9906: PUSH
9907: FOR_IN
9908: IFFALSE 9924
// begin SetLives ( i , 0 ) ;
9910: LD_VAR 0 1
9914: PPUSH
9915: LD_INT 0
9917: PPUSH
9918: CALL_OW 234
// end ;
9922: GO 9907
9924: POP
9925: POP
// end ;
9926: PPOPN 2
9928: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9929: LD_EXP 21
9933: PUSH
9934: LD_EXP 24
9938: AND
9939: IFFALSE 10032
9941: GO 9943
9943: DISABLE
9944: LD_INT 0
9946: PPUSH
// begin enable ;
9947: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9948: LD_ADDR_VAR 0 1
9952: PUSH
9953: LD_INT 22
9955: PUSH
9956: LD_OWVAR 2
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: LD_INT 2
9967: PUSH
9968: LD_INT 25
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 25
9980: PUSH
9981: LD_INT 9
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 25
9990: PUSH
9991: LD_INT 8
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 69
10012: PUSH
10013: FOR_IN
10014: IFFALSE 10030
// begin SetClass ( i , 1 ) ;
10016: LD_VAR 0 1
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL_OW 336
// end ;
10028: GO 10013
10030: POP
10031: POP
// end ;
10032: PPOPN 1
10034: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10035: LD_EXP 21
10039: PUSH
10040: LD_EXP 25
10044: AND
10045: PUSH
10046: LD_OWVAR 65
10050: PUSH
10051: LD_INT 7
10053: LESS
10054: AND
10055: IFFALSE 10069
10057: GO 10059
10059: DISABLE
// begin enable ;
10060: ENABLE
// game_speed := 7 ;
10061: LD_ADDR_OWVAR 65
10065: PUSH
10066: LD_INT 7
10068: ST_TO_ADDR
// end ;
10069: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10070: LD_EXP 21
10074: PUSH
10075: LD_EXP 28
10079: AND
10080: IFFALSE 10282
10082: GO 10084
10084: DISABLE
10085: LD_INT 0
10087: PPUSH
10088: PPUSH
10089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_INT 81
10097: PUSH
10098: LD_OWVAR 2
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: ST_TO_ADDR
// if not tmp then
10126: LD_VAR 0 3
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10282
// if tmp > 5 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 5
10142: GREATER
10143: IFFALSE 10155
// k := 5 else
10145: LD_ADDR_VAR 0 2
10149: PUSH
10150: LD_INT 5
10152: ST_TO_ADDR
10153: GO 10165
// k := tmp ;
10155: LD_ADDR_VAR 0 2
10159: PUSH
10160: LD_VAR 0 3
10164: ST_TO_ADDR
// for i := 1 to k do
10165: LD_ADDR_VAR 0 1
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_VAR 0 2
10179: PUSH
10180: FOR_TO
10181: IFFALSE 10280
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10183: LD_VAR 0 3
10187: PUSH
10188: LD_VAR 0 1
10192: ARRAY
10193: PPUSH
10194: LD_VAR 0 1
10198: PUSH
10199: LD_INT 4
10201: MOD
10202: PUSH
10203: LD_INT 1
10205: PLUS
10206: PPUSH
10207: CALL_OW 259
10211: PUSH
10212: LD_INT 10
10214: LESS
10215: IFFALSE 10278
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10217: LD_VAR 0 3
10221: PUSH
10222: LD_VAR 0 1
10226: ARRAY
10227: PPUSH
10228: LD_VAR 0 1
10232: PUSH
10233: LD_INT 4
10235: MOD
10236: PUSH
10237: LD_INT 1
10239: PLUS
10240: PPUSH
10241: LD_VAR 0 3
10245: PUSH
10246: LD_VAR 0 1
10250: ARRAY
10251: PPUSH
10252: LD_VAR 0 1
10256: PUSH
10257: LD_INT 4
10259: MOD
10260: PUSH
10261: LD_INT 1
10263: PLUS
10264: PPUSH
10265: CALL_OW 259
10269: PUSH
10270: LD_INT 1
10272: PLUS
10273: PPUSH
10274: CALL_OW 237
10278: GO 10180
10280: POP
10281: POP
// end ;
10282: PPOPN 3
10284: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10285: LD_EXP 21
10289: PUSH
10290: LD_EXP 29
10294: AND
10295: IFFALSE 10315
10297: GO 10299
10299: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10300: LD_INT 4
10302: PPUSH
10303: LD_OWVAR 2
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 324
10315: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10316: LD_EXP 21
10320: PUSH
10321: LD_EXP 58
10325: AND
10326: IFFALSE 10346
10328: GO 10330
10330: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10331: LD_INT 19
10333: PPUSH
10334: LD_OWVAR 2
10338: PPUSH
10339: LD_INT 0
10341: PPUSH
10342: CALL_OW 324
10346: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10347: LD_EXP 21
10351: PUSH
10352: LD_EXP 30
10356: AND
10357: IFFALSE 10459
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
// begin enable ;
10366: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: LD_INT 22
10374: PUSH
10375: LD_OWVAR 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 11
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 30
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PPUSH
10416: CALL_OW 69
10420: ST_TO_ADDR
// if not tmp then
10421: LD_VAR 0 2
10425: NOT
10426: IFFALSE 10430
// exit ;
10428: GO 10459
// for i in tmp do
10430: LD_ADDR_VAR 0 1
10434: PUSH
10435: LD_VAR 0 2
10439: PUSH
10440: FOR_IN
10441: IFFALSE 10457
// begin SetLives ( i , 0 ) ;
10443: LD_VAR 0 1
10447: PPUSH
10448: LD_INT 0
10450: PPUSH
10451: CALL_OW 234
// end ;
10455: GO 10440
10457: POP
10458: POP
// end ;
10459: PPOPN 2
10461: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10462: LD_EXP 21
10466: PUSH
10467: LD_EXP 31
10471: AND
10472: IFFALSE 10492
10474: GO 10476
10476: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10477: LD_INT 32
10479: PPUSH
10480: LD_OWVAR 2
10484: PPUSH
10485: LD_INT 0
10487: PPUSH
10488: CALL_OW 324
10492: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10493: LD_EXP 21
10497: PUSH
10498: LD_EXP 32
10502: AND
10503: IFFALSE 10684
10505: GO 10507
10507: DISABLE
10508: LD_INT 0
10510: PPUSH
10511: PPUSH
10512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10513: LD_ADDR_VAR 0 2
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_OWVAR 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 33
10532: PUSH
10533: LD_INT 3
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PPUSH
10544: CALL_OW 69
10548: ST_TO_ADDR
// if not tmp then
10549: LD_VAR 0 2
10553: NOT
10554: IFFALSE 10558
// exit ;
10556: GO 10684
// side := 0 ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// for i := 1 to 8 do
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: DOUBLE
10572: LD_INT 1
10574: DEC
10575: ST_TO_ADDR
10576: LD_INT 8
10578: PUSH
10579: FOR_TO
10580: IFFALSE 10628
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10582: LD_OWVAR 2
10586: PUSH
10587: LD_VAR 0 1
10591: NONEQUAL
10592: PUSH
10593: LD_OWVAR 2
10597: PPUSH
10598: LD_VAR 0 1
10602: PPUSH
10603: CALL_OW 81
10607: PUSH
10608: LD_INT 2
10610: EQUAL
10611: AND
10612: IFFALSE 10626
// begin side := i ;
10614: LD_ADDR_VAR 0 3
10618: PUSH
10619: LD_VAR 0 1
10623: ST_TO_ADDR
// break ;
10624: GO 10628
// end ;
10626: GO 10579
10628: POP
10629: POP
// if not side then
10630: LD_VAR 0 3
10634: NOT
10635: IFFALSE 10639
// exit ;
10637: GO 10684
// for i := 1 to tmp do
10639: LD_ADDR_VAR 0 1
10643: PUSH
10644: DOUBLE
10645: LD_INT 1
10647: DEC
10648: ST_TO_ADDR
10649: LD_VAR 0 2
10653: PUSH
10654: FOR_TO
10655: IFFALSE 10682
// if Prob ( 60 ) then
10657: LD_INT 60
10659: PPUSH
10660: CALL_OW 13
10664: IFFALSE 10680
// SetSide ( i , side ) ;
10666: LD_VAR 0 1
10670: PPUSH
10671: LD_VAR 0 3
10675: PPUSH
10676: CALL_OW 235
10680: GO 10654
10682: POP
10683: POP
// end ;
10684: PPOPN 3
10686: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10687: LD_EXP 21
10691: PUSH
10692: LD_EXP 34
10696: AND
10697: IFFALSE 10816
10699: GO 10701
10701: DISABLE
10702: LD_INT 0
10704: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10705: LD_ADDR_VAR 0 1
10709: PUSH
10710: LD_INT 22
10712: PUSH
10713: LD_OWVAR 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 21
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 3
10734: PUSH
10735: LD_INT 23
10737: PUSH
10738: LD_INT 0
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: PUSH
10759: FOR_IN
10760: IFFALSE 10814
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10762: LD_VAR 0 1
10766: PPUSH
10767: CALL_OW 257
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: LD_INT 3
10780: PUSH
10781: LD_INT 4
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: IN
10790: IFFALSE 10812
// SetClass ( un , rand ( 1 , 4 ) ) ;
10792: LD_VAR 0 1
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: LD_INT 4
10802: PPUSH
10803: CALL_OW 12
10807: PPUSH
10808: CALL_OW 336
10812: GO 10759
10814: POP
10815: POP
// end ;
10816: PPOPN 1
10818: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10819: LD_EXP 21
10823: PUSH
10824: LD_EXP 33
10828: AND
10829: IFFALSE 10908
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10837: LD_ADDR_VAR 0 1
10841: PUSH
10842: LD_INT 22
10844: PUSH
10845: LD_OWVAR 2
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 3
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: ST_TO_ADDR
// if not tmp then
10873: LD_VAR 0 1
10877: NOT
10878: IFFALSE 10882
// exit ;
10880: GO 10908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10882: LD_VAR 0 1
10886: PUSH
10887: LD_INT 1
10889: PPUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 12
10899: ARRAY
10900: PPUSH
10901: LD_INT 100
10903: PPUSH
10904: CALL_OW 234
// end ;
10908: PPOPN 1
10910: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10911: LD_EXP 21
10915: PUSH
10916: LD_EXP 35
10920: AND
10921: IFFALSE 11019
10923: GO 10925
10925: DISABLE
10926: LD_INT 0
10928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10929: LD_ADDR_VAR 0 1
10933: PUSH
10934: LD_INT 22
10936: PUSH
10937: LD_OWVAR 2
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 21
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PPUSH
10960: CALL_OW 69
10964: ST_TO_ADDR
// if not tmp then
10965: LD_VAR 0 1
10969: NOT
10970: IFFALSE 10974
// exit ;
10972: GO 11019
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10974: LD_VAR 0 1
10978: PUSH
10979: LD_INT 1
10981: PPUSH
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 12
10991: ARRAY
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: LD_INT 4
10998: PPUSH
10999: CALL_OW 12
11003: PPUSH
11004: LD_INT 3000
11006: PPUSH
11007: LD_INT 9000
11009: PPUSH
11010: CALL_OW 12
11014: PPUSH
11015: CALL_OW 492
// end ;
11019: PPOPN 1
11021: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11022: LD_EXP 21
11026: PUSH
11027: LD_EXP 36
11031: AND
11032: IFFALSE 11052
11034: GO 11036
11036: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11037: LD_INT 1
11039: PPUSH
11040: LD_OWVAR 2
11044: PPUSH
11045: LD_INT 0
11047: PPUSH
11048: CALL_OW 324
11052: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11053: LD_EXP 21
11057: PUSH
11058: LD_EXP 37
11062: AND
11063: IFFALSE 11146
11065: GO 11067
11067: DISABLE
11068: LD_INT 0
11070: PPUSH
11071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11072: LD_ADDR_VAR 0 2
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_OWVAR 2
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 21
11091: PUSH
11092: LD_INT 3
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: ST_TO_ADDR
// if not tmp then
11108: LD_VAR 0 2
11112: NOT
11113: IFFALSE 11117
// exit ;
11115: GO 11146
// for i in tmp do
11117: LD_ADDR_VAR 0 1
11121: PUSH
11122: LD_VAR 0 2
11126: PUSH
11127: FOR_IN
11128: IFFALSE 11144
// SetBLevel ( i , 10 ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_INT 10
11137: PPUSH
11138: CALL_OW 241
11142: GO 11127
11144: POP
11145: POP
// end ;
11146: PPOPN 2
11148: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11149: LD_EXP 21
11153: PUSH
11154: LD_EXP 38
11158: AND
11159: IFFALSE 11270
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
11168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11169: LD_ADDR_VAR 0 3
11173: PUSH
11174: LD_INT 22
11176: PUSH
11177: LD_OWVAR 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 25
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: ST_TO_ADDR
// if not tmp then
11205: LD_VAR 0 3
11209: NOT
11210: IFFALSE 11214
// exit ;
11212: GO 11270
// un := tmp [ rand ( 1 , tmp ) ] ;
11214: LD_ADDR_VAR 0 2
11218: PUSH
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 1
11226: PPUSH
11227: LD_VAR 0 3
11231: PPUSH
11232: CALL_OW 12
11236: ARRAY
11237: ST_TO_ADDR
// if Crawls ( un ) then
11238: LD_VAR 0 2
11242: PPUSH
11243: CALL_OW 318
11247: IFFALSE 11258
// ComWalk ( un ) ;
11249: LD_VAR 0 2
11253: PPUSH
11254: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_INT 5
11265: PPUSH
11266: CALL_OW 336
// end ;
11270: PPOPN 3
11272: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11273: LD_EXP 21
11277: PUSH
11278: LD_EXP 39
11282: AND
11283: PUSH
11284: LD_OWVAR 67
11288: PUSH
11289: LD_INT 3
11291: LESS
11292: AND
11293: IFFALSE 11312
11295: GO 11297
11297: DISABLE
// Difficulty := Difficulty + 1 ;
11298: LD_ADDR_OWVAR 67
11302: PUSH
11303: LD_OWVAR 67
11307: PUSH
11308: LD_INT 1
11310: PLUS
11311: ST_TO_ADDR
11312: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11313: LD_EXP 21
11317: PUSH
11318: LD_EXP 40
11322: AND
11323: IFFALSE 11426
11325: GO 11327
11327: DISABLE
11328: LD_INT 0
11330: PPUSH
// begin for i := 1 to 5 do
11331: LD_ADDR_VAR 0 1
11335: PUSH
11336: DOUBLE
11337: LD_INT 1
11339: DEC
11340: ST_TO_ADDR
11341: LD_INT 5
11343: PUSH
11344: FOR_TO
11345: IFFALSE 11424
// begin uc_nation := nation_nature ;
11347: LD_ADDR_OWVAR 21
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// uc_side := 0 ;
11355: LD_ADDR_OWVAR 20
11359: PUSH
11360: LD_INT 0
11362: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11363: LD_ADDR_OWVAR 29
11367: PUSH
11368: LD_INT 12
11370: PUSH
11371: LD_INT 12
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: ST_TO_ADDR
// hc_agressivity := 20 ;
11378: LD_ADDR_OWVAR 35
11382: PUSH
11383: LD_INT 20
11385: ST_TO_ADDR
// hc_class := class_tiger ;
11386: LD_ADDR_OWVAR 28
11390: PUSH
11391: LD_INT 14
11393: ST_TO_ADDR
// hc_gallery :=  ;
11394: LD_ADDR_OWVAR 33
11398: PUSH
11399: LD_STRING 
11401: ST_TO_ADDR
// hc_name :=  ;
11402: LD_ADDR_OWVAR 26
11406: PUSH
11407: LD_STRING 
11409: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11410: CALL_OW 44
11414: PPUSH
11415: LD_INT 0
11417: PPUSH
11418: CALL_OW 51
// end ;
11422: GO 11344
11424: POP
11425: POP
// end ;
11426: PPOPN 1
11428: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11429: LD_EXP 21
11433: PUSH
11434: LD_EXP 41
11438: AND
11439: IFFALSE 11448
11441: GO 11443
11443: DISABLE
// StreamSibBomb ;
11444: CALL 11449 0 0
11448: END
// export function StreamSibBomb ; var i , x , y ; begin
11449: LD_INT 0
11451: PPUSH
11452: PPUSH
11453: PPUSH
11454: PPUSH
// result := false ;
11455: LD_ADDR_VAR 0 1
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// for i := 1 to 16 do
11463: LD_ADDR_VAR 0 2
11467: PUSH
11468: DOUBLE
11469: LD_INT 1
11471: DEC
11472: ST_TO_ADDR
11473: LD_INT 16
11475: PUSH
11476: FOR_TO
11477: IFFALSE 11676
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 10
11486: PUSH
11487: LD_INT 20
11489: PUSH
11490: LD_INT 30
11492: PUSH
11493: LD_INT 40
11495: PUSH
11496: LD_INT 50
11498: PUSH
11499: LD_INT 60
11501: PUSH
11502: LD_INT 70
11504: PUSH
11505: LD_INT 80
11507: PUSH
11508: LD_INT 90
11510: PUSH
11511: LD_INT 100
11513: PUSH
11514: LD_INT 110
11516: PUSH
11517: LD_INT 120
11519: PUSH
11520: LD_INT 130
11522: PUSH
11523: LD_INT 140
11525: PUSH
11526: LD_INT 150
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 1
11548: PPUSH
11549: LD_INT 15
11551: PPUSH
11552: CALL_OW 12
11556: ARRAY
11557: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11558: LD_ADDR_VAR 0 4
11562: PUSH
11563: LD_INT 10
11565: PUSH
11566: LD_INT 20
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 40
11574: PUSH
11575: LD_INT 50
11577: PUSH
11578: LD_INT 60
11580: PUSH
11581: LD_INT 70
11583: PUSH
11584: LD_INT 80
11586: PUSH
11587: LD_INT 90
11589: PUSH
11590: LD_INT 100
11592: PUSH
11593: LD_INT 110
11595: PUSH
11596: LD_INT 120
11598: PUSH
11599: LD_INT 130
11601: PUSH
11602: LD_INT 140
11604: PUSH
11605: LD_INT 150
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 1
11627: PPUSH
11628: LD_INT 15
11630: PPUSH
11631: CALL_OW 12
11635: ARRAY
11636: ST_TO_ADDR
// if ValidHex ( x , y ) then
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_VAR 0 4
11646: PPUSH
11647: CALL_OW 488
11651: IFFALSE 11674
// begin result := [ x , y ] ;
11653: LD_ADDR_VAR 0 1
11657: PUSH
11658: LD_VAR 0 3
11662: PUSH
11663: LD_VAR 0 4
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: ST_TO_ADDR
// break ;
11672: GO 11676
// end ; end ;
11674: GO 11476
11676: POP
11677: POP
// if result then
11678: LD_VAR 0 1
11682: IFFALSE 11742
// begin ToLua ( playSibBomb() ) ;
11684: LD_STRING playSibBomb()
11686: PPUSH
11687: CALL_OW 559
// wait ( 0 0$14 ) ;
11691: LD_INT 490
11693: PPUSH
11694: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11698: LD_VAR 0 1
11702: PUSH
11703: LD_INT 1
11705: ARRAY
11706: PPUSH
11707: LD_VAR 0 1
11711: PUSH
11712: LD_INT 2
11714: ARRAY
11715: PPUSH
11716: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11720: LD_VAR 0 1
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: LD_VAR 0 1
11733: PUSH
11734: LD_INT 2
11736: ARRAY
11737: PPUSH
11738: CALL_OW 429
// end ; end ;
11742: LD_VAR 0 1
11746: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11747: LD_EXP 21
11751: PUSH
11752: LD_EXP 43
11756: AND
11757: IFFALSE 11769
11759: GO 11761
11761: DISABLE
// YouLost (  ) ;
11762: LD_STRING 
11764: PPUSH
11765: CALL_OW 104
11769: END
// every 0 0$1 trigger StreamModeActive and sFog do
11770: LD_EXP 21
11774: PUSH
11775: LD_EXP 42
11779: AND
11780: IFFALSE 11794
11782: GO 11784
11784: DISABLE
// FogOff ( your_side ) ;
11785: LD_OWVAR 2
11789: PPUSH
11790: CALL_OW 344
11794: END
// every 0 0$1 trigger StreamModeActive and sSun do
11795: LD_EXP 21
11799: PUSH
11800: LD_EXP 44
11804: AND
11805: IFFALSE 11833
11807: GO 11809
11809: DISABLE
// begin solar_recharge_percent := 0 ;
11810: LD_ADDR_OWVAR 79
11814: PUSH
11815: LD_INT 0
11817: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11818: LD_INT 10500
11820: PPUSH
11821: CALL_OW 67
// solar_recharge_percent := 100 ;
11825: LD_ADDR_OWVAR 79
11829: PUSH
11830: LD_INT 100
11832: ST_TO_ADDR
// end ;
11833: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11834: LD_EXP 21
11838: PUSH
11839: LD_EXP 45
11843: AND
11844: IFFALSE 12083
11846: GO 11848
11848: DISABLE
11849: LD_INT 0
11851: PPUSH
11852: PPUSH
11853: PPUSH
// begin tmp := [ ] ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: EMPTY
11860: ST_TO_ADDR
// for i := 1 to 6 do
11861: LD_ADDR_VAR 0 1
11865: PUSH
11866: DOUBLE
11867: LD_INT 1
11869: DEC
11870: ST_TO_ADDR
11871: LD_INT 6
11873: PUSH
11874: FOR_TO
11875: IFFALSE 11980
// begin uc_nation := nation_nature ;
11877: LD_ADDR_OWVAR 21
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// uc_side := 0 ;
11885: LD_ADDR_OWVAR 20
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11893: LD_ADDR_OWVAR 29
11897: PUSH
11898: LD_INT 12
11900: PUSH
11901: LD_INT 12
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: ST_TO_ADDR
// hc_agressivity := 20 ;
11908: LD_ADDR_OWVAR 35
11912: PUSH
11913: LD_INT 20
11915: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11916: LD_ADDR_OWVAR 28
11920: PUSH
11921: LD_INT 17
11923: ST_TO_ADDR
// hc_gallery :=  ;
11924: LD_ADDR_OWVAR 33
11928: PUSH
11929: LD_STRING 
11931: ST_TO_ADDR
// hc_name :=  ;
11932: LD_ADDR_OWVAR 26
11936: PUSH
11937: LD_STRING 
11939: ST_TO_ADDR
// un := CreateHuman ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: CALL_OW 44
11949: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11950: LD_VAR 0 2
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 51
// tmp := tmp ^ un ;
11962: LD_ADDR_VAR 0 3
11966: PUSH
11967: LD_VAR 0 3
11971: PUSH
11972: LD_VAR 0 2
11976: ADD
11977: ST_TO_ADDR
// end ;
11978: GO 11874
11980: POP
11981: POP
// repeat wait ( 0 0$1 ) ;
11982: LD_INT 35
11984: PPUSH
11985: CALL_OW 67
// for un in tmp do
11989: LD_ADDR_VAR 0 2
11993: PUSH
11994: LD_VAR 0 3
11998: PUSH
11999: FOR_IN
12000: IFFALSE 12074
// begin if IsDead ( un ) then
12002: LD_VAR 0 2
12006: PPUSH
12007: CALL_OW 301
12011: IFFALSE 12031
// begin tmp := tmp diff un ;
12013: LD_ADDR_VAR 0 3
12017: PUSH
12018: LD_VAR 0 3
12022: PUSH
12023: LD_VAR 0 2
12027: DIFF
12028: ST_TO_ADDR
// continue ;
12029: GO 11999
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12031: LD_VAR 0 2
12035: PPUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 22
12041: PUSH
12042: LD_INT 0
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: PPUSH
12058: LD_VAR 0 2
12062: PPUSH
12063: CALL_OW 74
12067: PPUSH
12068: CALL_OW 115
// end ;
12072: GO 11999
12074: POP
12075: POP
// until not tmp ;
12076: LD_VAR 0 3
12080: NOT
12081: IFFALSE 11982
// end ;
12083: PPOPN 3
12085: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12086: LD_EXP 21
12090: PUSH
12091: LD_EXP 46
12095: AND
12096: IFFALSE 12150
12098: GO 12100
12100: DISABLE
// begin ToLua ( displayTroll(); ) ;
12101: LD_STRING displayTroll();
12103: PPUSH
12104: CALL_OW 559
// wait ( 3 3$00 ) ;
12108: LD_INT 6300
12110: PPUSH
12111: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12115: LD_STRING hideTroll();
12117: PPUSH
12118: CALL_OW 559
// wait ( 1 1$00 ) ;
12122: LD_INT 2100
12124: PPUSH
12125: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12129: LD_STRING displayTroll();
12131: PPUSH
12132: CALL_OW 559
// wait ( 1 1$00 ) ;
12136: LD_INT 2100
12138: PPUSH
12139: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12143: LD_STRING hideTroll();
12145: PPUSH
12146: CALL_OW 559
// end ;
12150: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12151: LD_EXP 21
12155: PUSH
12156: LD_EXP 47
12160: AND
12161: IFFALSE 12224
12163: GO 12165
12165: DISABLE
12166: LD_INT 0
12168: PPUSH
// begin p := 0 ;
12169: LD_ADDR_VAR 0 1
12173: PUSH
12174: LD_INT 0
12176: ST_TO_ADDR
// repeat game_speed := 1 ;
12177: LD_ADDR_OWVAR 65
12181: PUSH
12182: LD_INT 1
12184: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12185: LD_INT 35
12187: PPUSH
12188: CALL_OW 67
// p := p + 1 ;
12192: LD_ADDR_VAR 0 1
12196: PUSH
12197: LD_VAR 0 1
12201: PUSH
12202: LD_INT 1
12204: PLUS
12205: ST_TO_ADDR
// until p >= 60 ;
12206: LD_VAR 0 1
12210: PUSH
12211: LD_INT 60
12213: GREATEREQUAL
12214: IFFALSE 12177
// game_speed := 4 ;
12216: LD_ADDR_OWVAR 65
12220: PUSH
12221: LD_INT 4
12223: ST_TO_ADDR
// end ;
12224: PPOPN 1
12226: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12227: LD_EXP 21
12231: PUSH
12232: LD_EXP 48
12236: AND
12237: IFFALSE 12383
12239: GO 12241
12241: DISABLE
12242: LD_INT 0
12244: PPUSH
12245: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12246: LD_ADDR_VAR 0 1
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_OWVAR 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 0
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 1
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: ST_TO_ADDR
// if not depot then
12300: LD_VAR 0 1
12304: NOT
12305: IFFALSE 12309
// exit ;
12307: GO 12383
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: LD_VAR 0 1
12318: PUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_VAR 0 1
12326: PPUSH
12327: CALL_OW 12
12331: ARRAY
12332: PPUSH
12333: CALL_OW 274
12337: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12338: LD_VAR 0 2
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: LD_INT 0
12348: PPUSH
12349: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12353: LD_VAR 0 2
12357: PPUSH
12358: LD_INT 2
12360: PPUSH
12361: LD_INT 0
12363: PPUSH
12364: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12368: LD_VAR 0 2
12372: PPUSH
12373: LD_INT 3
12375: PPUSH
12376: LD_INT 0
12378: PPUSH
12379: CALL_OW 277
// end ;
12383: PPOPN 2
12385: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12386: LD_EXP 21
12390: PUSH
12391: LD_EXP 49
12395: AND
12396: IFFALSE 12493
12398: GO 12400
12400: DISABLE
12401: LD_INT 0
12403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12404: LD_ADDR_VAR 0 1
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: LD_OWVAR 2
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 21
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: LD_INT 23
12436: PUSH
12437: LD_INT 0
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 69
12457: ST_TO_ADDR
// if not tmp then
12458: LD_VAR 0 1
12462: NOT
12463: IFFALSE 12467
// exit ;
12465: GO 12493
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12467: LD_VAR 0 1
12471: PUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 12
12484: ARRAY
12485: PPUSH
12486: LD_INT 200
12488: PPUSH
12489: CALL_OW 234
// end ;
12493: PPOPN 1
12495: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12496: LD_EXP 21
12500: PUSH
12501: LD_EXP 50
12505: AND
12506: IFFALSE 12585
12508: GO 12510
12510: DISABLE
12511: LD_INT 0
12513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12514: LD_ADDR_VAR 0 1
12518: PUSH
12519: LD_INT 22
12521: PUSH
12522: LD_OWVAR 2
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 21
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 69
12549: ST_TO_ADDR
// if not tmp then
12550: LD_VAR 0 1
12554: NOT
12555: IFFALSE 12559
// exit ;
12557: GO 12585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12559: LD_VAR 0 1
12563: PUSH
12564: LD_INT 1
12566: PPUSH
12567: LD_VAR 0 1
12571: PPUSH
12572: CALL_OW 12
12576: ARRAY
12577: PPUSH
12578: LD_INT 60
12580: PPUSH
12581: CALL_OW 234
// end ;
12585: PPOPN 1
12587: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12588: LD_EXP 21
12592: PUSH
12593: LD_EXP 51
12597: AND
12598: IFFALSE 12697
12600: GO 12602
12602: DISABLE
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
// begin enable ;
12607: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12608: LD_ADDR_VAR 0 1
12612: PUSH
12613: LD_INT 22
12615: PUSH
12616: LD_OWVAR 2
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 61
12627: PUSH
12628: EMPTY
12629: LIST
12630: PUSH
12631: LD_INT 33
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 69
12650: ST_TO_ADDR
// if not tmp then
12651: LD_VAR 0 1
12655: NOT
12656: IFFALSE 12660
// exit ;
12658: GO 12697
// for i in tmp do
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_VAR 0 1
12669: PUSH
12670: FOR_IN
12671: IFFALSE 12695
// if IsControledBy ( i ) then
12673: LD_VAR 0 2
12677: PPUSH
12678: CALL_OW 312
12682: IFFALSE 12693
// ComUnlink ( i ) ;
12684: LD_VAR 0 2
12688: PPUSH
12689: CALL_OW 136
12693: GO 12670
12695: POP
12696: POP
// end ;
12697: PPOPN 2
12699: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12700: LD_EXP 21
12704: PUSH
12705: LD_EXP 52
12709: AND
12710: IFFALSE 12850
12712: GO 12714
12714: DISABLE
12715: LD_INT 0
12717: PPUSH
12718: PPUSH
// begin ToLua ( displayPowell(); ) ;
12719: LD_STRING displayPowell();
12721: PPUSH
12722: CALL_OW 559
// uc_side := 0 ;
12726: LD_ADDR_OWVAR 20
12730: PUSH
12731: LD_INT 0
12733: ST_TO_ADDR
// uc_nation := 2 ;
12734: LD_ADDR_OWVAR 21
12738: PUSH
12739: LD_INT 2
12741: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12742: LD_ADDR_OWVAR 37
12746: PUSH
12747: LD_INT 14
12749: ST_TO_ADDR
// vc_engine := engine_siberite ;
12750: LD_ADDR_OWVAR 39
12754: PUSH
12755: LD_INT 3
12757: ST_TO_ADDR
// vc_control := control_apeman ;
12758: LD_ADDR_OWVAR 38
12762: PUSH
12763: LD_INT 5
12765: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12766: LD_ADDR_OWVAR 40
12770: PUSH
12771: LD_INT 29
12773: ST_TO_ADDR
// un := CreateVehicle ;
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: CALL_OW 45
12783: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12784: LD_VAR 0 2
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12796: LD_INT 35
12798: PPUSH
12799: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12803: LD_VAR 0 2
12807: PPUSH
12808: LD_INT 22
12810: PUSH
12811: LD_OWVAR 2
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 69
12824: PPUSH
12825: LD_VAR 0 2
12829: PPUSH
12830: CALL_OW 74
12834: PPUSH
12835: CALL_OW 115
// until IsDead ( un ) ;
12839: LD_VAR 0 2
12843: PPUSH
12844: CALL_OW 301
12848: IFFALSE 12796
// end ;
12850: PPOPN 2
12852: END
// every 0 0$1 trigger StreamModeActive and sStu do
12853: LD_EXP 21
12857: PUSH
12858: LD_EXP 60
12862: AND
12863: IFFALSE 12879
12865: GO 12867
12867: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12868: LD_STRING displayStucuk();
12870: PPUSH
12871: CALL_OW 559
// ResetFog ;
12875: CALL_OW 335
// end ;
12879: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12880: LD_EXP 21
12884: PUSH
12885: LD_EXP 53
12889: AND
12890: IFFALSE 13031
12892: GO 12894
12894: DISABLE
12895: LD_INT 0
12897: PPUSH
12898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12899: LD_ADDR_VAR 0 2
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_OWVAR 2
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 21
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PPUSH
12930: CALL_OW 69
12934: ST_TO_ADDR
// if not tmp then
12935: LD_VAR 0 2
12939: NOT
12940: IFFALSE 12944
// exit ;
12942: GO 13031
// un := tmp [ rand ( 1 , tmp ) ] ;
12944: LD_ADDR_VAR 0 1
12948: PUSH
12949: LD_VAR 0 2
12953: PUSH
12954: LD_INT 1
12956: PPUSH
12957: LD_VAR 0 2
12961: PPUSH
12962: CALL_OW 12
12966: ARRAY
12967: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12968: LD_VAR 0 1
12972: PPUSH
12973: LD_INT 0
12975: PPUSH
12976: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_OWVAR 3
12989: PUSH
12990: LD_VAR 0 1
12994: DIFF
12995: PPUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 74
13005: PPUSH
13006: CALL_OW 115
// wait ( 0 0$20 ) ;
13010: LD_INT 700
13012: PPUSH
13013: CALL_OW 67
// SetSide ( un , your_side ) ;
13017: LD_VAR 0 1
13021: PPUSH
13022: LD_OWVAR 2
13026: PPUSH
13027: CALL_OW 235
// end ;
13031: PPOPN 2
13033: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13034: LD_EXP 21
13038: PUSH
13039: LD_EXP 54
13043: AND
13044: IFFALSE 13150
13046: GO 13048
13048: DISABLE
13049: LD_INT 0
13051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13052: LD_ADDR_VAR 0 1
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_OWVAR 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 2
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 0
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 30
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PPUSH
13101: CALL_OW 69
13105: ST_TO_ADDR
// if not depot then
13106: LD_VAR 0 1
13110: NOT
13111: IFFALSE 13115
// exit ;
13113: GO 13150
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13115: LD_VAR 0 1
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: CALL_OW 250
13128: PPUSH
13129: LD_VAR 0 1
13133: PUSH
13134: LD_INT 1
13136: ARRAY
13137: PPUSH
13138: CALL_OW 251
13142: PPUSH
13143: LD_INT 70
13145: PPUSH
13146: CALL_OW 495
// end ;
13150: PPOPN 1
13152: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13153: LD_EXP 21
13157: PUSH
13158: LD_EXP 55
13162: AND
13163: IFFALSE 13374
13165: GO 13167
13167: DISABLE
13168: LD_INT 0
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
13174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13175: LD_ADDR_VAR 0 5
13179: PUSH
13180: LD_INT 22
13182: PUSH
13183: LD_OWVAR 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 21
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: ST_TO_ADDR
// if not tmp then
13211: LD_VAR 0 5
13215: NOT
13216: IFFALSE 13220
// exit ;
13218: GO 13374
// for i in tmp do
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: LD_VAR 0 5
13229: PUSH
13230: FOR_IN
13231: IFFALSE 13372
// begin d := rand ( 0 , 5 ) ;
13233: LD_ADDR_VAR 0 4
13237: PUSH
13238: LD_INT 0
13240: PPUSH
13241: LD_INT 5
13243: PPUSH
13244: CALL_OW 12
13248: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 250
13263: PPUSH
13264: LD_VAR 0 4
13268: PPUSH
13269: LD_INT 3
13271: PPUSH
13272: LD_INT 12
13274: PPUSH
13275: CALL_OW 12
13279: PPUSH
13280: CALL_OW 272
13284: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13285: LD_ADDR_VAR 0 3
13289: PUSH
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 251
13299: PPUSH
13300: LD_VAR 0 4
13304: PPUSH
13305: LD_INT 3
13307: PPUSH
13308: LD_INT 12
13310: PPUSH
13311: CALL_OW 12
13315: PPUSH
13316: CALL_OW 273
13320: ST_TO_ADDR
// if ValidHex ( x , y ) then
13321: LD_VAR 0 2
13325: PPUSH
13326: LD_VAR 0 3
13330: PPUSH
13331: CALL_OW 488
13335: IFFALSE 13370
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13337: LD_VAR 0 1
13341: PPUSH
13342: LD_VAR 0 2
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_INT 3
13354: PPUSH
13355: LD_INT 6
13357: PPUSH
13358: CALL_OW 12
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 483
// end ;
13370: GO 13230
13372: POP
13373: POP
// end ;
13374: PPOPN 5
13376: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13377: LD_EXP 21
13381: PUSH
13382: LD_EXP 56
13386: AND
13387: IFFALSE 13481
13389: GO 13391
13391: DISABLE
13392: LD_INT 0
13394: PPUSH
13395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13396: LD_ADDR_VAR 0 2
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_OWVAR 2
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 32
13415: PUSH
13416: LD_INT 1
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 21
13425: PUSH
13426: LD_INT 2
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: PPUSH
13438: CALL_OW 69
13442: ST_TO_ADDR
// if not tmp then
13443: LD_VAR 0 2
13447: NOT
13448: IFFALSE 13452
// exit ;
13450: GO 13481
// for i in tmp do
13452: LD_ADDR_VAR 0 1
13456: PUSH
13457: LD_VAR 0 2
13461: PUSH
13462: FOR_IN
13463: IFFALSE 13479
// SetFuel ( i , 0 ) ;
13465: LD_VAR 0 1
13469: PPUSH
13470: LD_INT 0
13472: PPUSH
13473: CALL_OW 240
13477: GO 13462
13479: POP
13480: POP
// end ;
13481: PPOPN 2
13483: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13484: LD_EXP 21
13488: PUSH
13489: LD_EXP 57
13493: AND
13494: IFFALSE 13560
13496: GO 13498
13498: DISABLE
13499: LD_INT 0
13501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13502: LD_ADDR_VAR 0 1
13506: PUSH
13507: LD_INT 22
13509: PUSH
13510: LD_OWVAR 2
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 30
13521: PUSH
13522: LD_INT 29
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PPUSH
13533: CALL_OW 69
13537: ST_TO_ADDR
// if not tmp then
13538: LD_VAR 0 1
13542: NOT
13543: IFFALSE 13547
// exit ;
13545: GO 13560
// DestroyUnit ( tmp [ 1 ] ) ;
13547: LD_VAR 0 1
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: CALL_OW 65
// end ;
13560: PPOPN 1
13562: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13563: LD_EXP 21
13567: PUSH
13568: LD_EXP 59
13572: AND
13573: IFFALSE 13702
13575: GO 13577
13577: DISABLE
13578: LD_INT 0
13580: PPUSH
// begin uc_side := 0 ;
13581: LD_ADDR_OWVAR 20
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// uc_nation := nation_arabian ;
13589: LD_ADDR_OWVAR 21
13593: PUSH
13594: LD_INT 2
13596: ST_TO_ADDR
// hc_gallery :=  ;
13597: LD_ADDR_OWVAR 33
13601: PUSH
13602: LD_STRING 
13604: ST_TO_ADDR
// hc_name :=  ;
13605: LD_ADDR_OWVAR 26
13609: PUSH
13610: LD_STRING 
13612: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13613: LD_INT 1
13615: PPUSH
13616: LD_INT 11
13618: PPUSH
13619: LD_INT 10
13621: PPUSH
13622: CALL_OW 380
// un := CreateHuman ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: CALL_OW 44
13635: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13648: LD_INT 35
13650: PPUSH
13651: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13655: LD_VAR 0 1
13659: PPUSH
13660: LD_INT 22
13662: PUSH
13663: LD_OWVAR 2
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PPUSH
13672: CALL_OW 69
13676: PPUSH
13677: LD_VAR 0 1
13681: PPUSH
13682: CALL_OW 74
13686: PPUSH
13687: CALL_OW 115
// until IsDead ( un ) ;
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 301
13700: IFFALSE 13648
// end ;
13702: PPOPN 1
13704: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13705: LD_EXP 21
13709: PUSH
13710: LD_EXP 61
13714: AND
13715: IFFALSE 13727
13717: GO 13719
13719: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13720: LD_STRING earthquake(getX(game), 0, 32)
13722: PPUSH
13723: CALL_OW 559
13727: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13728: LD_EXP 21
13732: PUSH
13733: LD_EXP 62
13737: AND
13738: IFFALSE 13829
13740: GO 13742
13742: DISABLE
13743: LD_INT 0
13745: PPUSH
// begin enable ;
13746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_INT 22
13754: PUSH
13755: LD_OWVAR 2
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 33
13776: PUSH
13777: LD_INT 3
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 69
13793: ST_TO_ADDR
// if not tmp then
13794: LD_VAR 0 1
13798: NOT
13799: IFFALSE 13803
// exit ;
13801: GO 13829
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13803: LD_VAR 0 1
13807: PUSH
13808: LD_INT 1
13810: PPUSH
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 12
13820: ARRAY
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 234
// end ;
13829: PPOPN 1
13831: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13832: LD_EXP 21
13836: PUSH
13837: LD_EXP 63
13841: AND
13842: IFFALSE 13983
13844: GO 13846
13846: DISABLE
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
13851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13852: LD_ADDR_VAR 0 3
13856: PUSH
13857: LD_INT 22
13859: PUSH
13860: LD_OWVAR 2
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 25
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: ST_TO_ADDR
// if not tmp then
13888: LD_VAR 0 3
13892: NOT
13893: IFFALSE 13897
// exit ;
13895: GO 13983
// un := tmp [ rand ( 1 , tmp ) ] ;
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: LD_VAR 0 3
13906: PUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: CALL_OW 12
13919: ARRAY
13920: ST_TO_ADDR
// if Crawls ( un ) then
13921: LD_VAR 0 2
13925: PPUSH
13926: CALL_OW 318
13930: IFFALSE 13941
// ComWalk ( un ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13941: LD_VAR 0 2
13945: PPUSH
13946: LD_INT 9
13948: PPUSH
13949: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13953: LD_INT 28
13955: PPUSH
13956: LD_OWVAR 2
13960: PPUSH
13961: LD_INT 2
13963: PPUSH
13964: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13968: LD_INT 29
13970: PPUSH
13971: LD_OWVAR 2
13975: PPUSH
13976: LD_INT 2
13978: PPUSH
13979: CALL_OW 322
// end ;
13983: PPOPN 3
13985: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13986: LD_EXP 21
13990: PUSH
13991: LD_EXP 64
13995: AND
13996: IFFALSE 14107
13998: GO 14000
14000: DISABLE
14001: LD_INT 0
14003: PPUSH
14004: PPUSH
14005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14006: LD_ADDR_VAR 0 3
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_OWVAR 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 1
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PPUSH
14037: CALL_OW 69
14041: ST_TO_ADDR
// if not tmp then
14042: LD_VAR 0 3
14046: NOT
14047: IFFALSE 14051
// exit ;
14049: GO 14107
// un := tmp [ rand ( 1 , tmp ) ] ;
14051: LD_ADDR_VAR 0 2
14055: PUSH
14056: LD_VAR 0 3
14060: PUSH
14061: LD_INT 1
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: CALL_OW 12
14073: ARRAY
14074: ST_TO_ADDR
// if Crawls ( un ) then
14075: LD_VAR 0 2
14079: PPUSH
14080: CALL_OW 318
14084: IFFALSE 14095
// ComWalk ( un ) ;
14086: LD_VAR 0 2
14090: PPUSH
14091: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14095: LD_VAR 0 2
14099: PPUSH
14100: LD_INT 8
14102: PPUSH
14103: CALL_OW 336
// end ;
14107: PPOPN 3
14109: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14110: LD_EXP 21
14114: PUSH
14115: LD_EXP 65
14119: AND
14120: IFFALSE 14264
14122: GO 14124
14124: DISABLE
14125: LD_INT 0
14127: PPUSH
14128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14129: LD_ADDR_VAR 0 2
14133: PUSH
14134: LD_INT 22
14136: PUSH
14137: LD_OWVAR 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 21
14148: PUSH
14149: LD_INT 2
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 2
14158: PUSH
14159: LD_INT 34
14161: PUSH
14162: LD_INT 12
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 34
14171: PUSH
14172: LD_INT 51
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 34
14181: PUSH
14182: LD_INT 32
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 69
14204: ST_TO_ADDR
// if not tmp then
14205: LD_VAR 0 2
14209: NOT
14210: IFFALSE 14214
// exit ;
14212: GO 14264
// for i in tmp do
14214: LD_ADDR_VAR 0 1
14218: PUSH
14219: LD_VAR 0 2
14223: PUSH
14224: FOR_IN
14225: IFFALSE 14262
// if GetCargo ( i , mat_artifact ) = 0 then
14227: LD_VAR 0 1
14231: PPUSH
14232: LD_INT 4
14234: PPUSH
14235: CALL_OW 289
14239: PUSH
14240: LD_INT 0
14242: EQUAL
14243: IFFALSE 14260
// SetCargo ( i , mat_siberit , 100 ) ;
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 3
14252: PPUSH
14253: LD_INT 100
14255: PPUSH
14256: CALL_OW 290
14260: GO 14224
14262: POP
14263: POP
// end ;
14264: PPOPN 2
14266: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14267: LD_EXP 21
14271: PUSH
14272: LD_EXP 66
14276: AND
14277: IFFALSE 14460
14279: GO 14281
14281: DISABLE
14282: LD_INT 0
14284: PPUSH
14285: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_OWVAR 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PPUSH
14303: CALL_OW 69
14307: ST_TO_ADDR
// if not tmp then
14308: LD_VAR 0 2
14312: NOT
14313: IFFALSE 14317
// exit ;
14315: GO 14460
// for i := 1 to 2 do
14317: LD_ADDR_VAR 0 1
14321: PUSH
14322: DOUBLE
14323: LD_INT 1
14325: DEC
14326: ST_TO_ADDR
14327: LD_INT 2
14329: PUSH
14330: FOR_TO
14331: IFFALSE 14458
// begin uc_side := your_side ;
14333: LD_ADDR_OWVAR 20
14337: PUSH
14338: LD_OWVAR 2
14342: ST_TO_ADDR
// uc_nation := nation_american ;
14343: LD_ADDR_OWVAR 21
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// vc_chassis := us_morphling ;
14351: LD_ADDR_OWVAR 37
14355: PUSH
14356: LD_INT 5
14358: ST_TO_ADDR
// vc_engine := engine_siberite ;
14359: LD_ADDR_OWVAR 39
14363: PUSH
14364: LD_INT 3
14366: ST_TO_ADDR
// vc_control := control_computer ;
14367: LD_ADDR_OWVAR 38
14371: PUSH
14372: LD_INT 3
14374: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14375: LD_ADDR_OWVAR 40
14379: PUSH
14380: LD_INT 10
14382: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14383: LD_VAR 0 2
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PPUSH
14392: CALL_OW 310
14396: NOT
14397: IFFALSE 14444
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14399: CALL_OW 45
14403: PPUSH
14404: LD_VAR 0 2
14408: PUSH
14409: LD_INT 1
14411: ARRAY
14412: PPUSH
14413: CALL_OW 250
14417: PPUSH
14418: LD_VAR 0 2
14422: PUSH
14423: LD_INT 1
14425: ARRAY
14426: PPUSH
14427: CALL_OW 251
14431: PPUSH
14432: LD_INT 12
14434: PPUSH
14435: LD_INT 1
14437: PPUSH
14438: CALL_OW 50
14442: GO 14456
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14444: CALL_OW 45
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 51
// end ;
14456: GO 14330
14458: POP
14459: POP
// end ;
14460: PPOPN 2
14462: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14463: LD_EXP 21
14467: PUSH
14468: LD_EXP 67
14472: AND
14473: IFFALSE 14695
14475: GO 14477
14477: DISABLE
14478: LD_INT 0
14480: PPUSH
14481: PPUSH
14482: PPUSH
14483: PPUSH
14484: PPUSH
14485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14486: LD_ADDR_VAR 0 6
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_OWVAR 2
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: LD_INT 23
14518: PUSH
14519: LD_INT 0
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: ST_TO_ADDR
// if not tmp then
14540: LD_VAR 0 6
14544: NOT
14545: IFFALSE 14549
// exit ;
14547: GO 14695
// s1 := rand ( 1 , 4 ) ;
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 4
14559: PPUSH
14560: CALL_OW 12
14564: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14565: LD_ADDR_VAR 0 4
14569: PUSH
14570: LD_VAR 0 6
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: PPUSH
14579: LD_VAR 0 2
14583: PPUSH
14584: CALL_OW 259
14588: ST_TO_ADDR
// if s1 = 1 then
14589: LD_VAR 0 2
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: IFFALSE 14617
// s2 := rand ( 2 , 4 ) else
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_INT 2
14606: PPUSH
14607: LD_INT 4
14609: PPUSH
14610: CALL_OW 12
14614: ST_TO_ADDR
14615: GO 14625
// s2 := 1 ;
14617: LD_ADDR_VAR 0 3
14621: PUSH
14622: LD_INT 1
14624: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14625: LD_ADDR_VAR 0 5
14629: PUSH
14630: LD_VAR 0 6
14634: PUSH
14635: LD_INT 1
14637: ARRAY
14638: PPUSH
14639: LD_VAR 0 3
14643: PPUSH
14644: CALL_OW 259
14648: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14649: LD_VAR 0 6
14653: PUSH
14654: LD_INT 1
14656: ARRAY
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: LD_VAR 0 5
14667: PPUSH
14668: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14672: LD_VAR 0 6
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: LD_VAR 0 3
14685: PPUSH
14686: LD_VAR 0 4
14690: PPUSH
14691: CALL_OW 237
// end ;
14695: PPOPN 6
14697: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14698: LD_EXP 21
14702: PUSH
14703: LD_EXP 68
14707: AND
14708: IFFALSE 14787
14710: GO 14712
14712: DISABLE
14713: LD_INT 0
14715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14716: LD_ADDR_VAR 0 1
14720: PUSH
14721: LD_INT 22
14723: PUSH
14724: LD_OWVAR 2
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 30
14735: PUSH
14736: LD_INT 3
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 69
14751: ST_TO_ADDR
// if not tmp then
14752: LD_VAR 0 1
14756: NOT
14757: IFFALSE 14761
// exit ;
14759: GO 14787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14761: LD_VAR 0 1
14765: PUSH
14766: LD_INT 1
14768: PPUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 12
14778: ARRAY
14779: PPUSH
14780: LD_INT 1
14782: PPUSH
14783: CALL_OW 234
// end ;
14787: PPOPN 1
14789: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14790: LD_EXP 21
14794: PUSH
14795: LD_EXP 69
14799: AND
14800: IFFALSE 14912
14802: GO 14804
14804: DISABLE
14805: LD_INT 0
14807: PPUSH
14808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 22
14816: PUSH
14817: LD_OWVAR 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 2
14828: PUSH
14829: LD_INT 30
14831: PUSH
14832: LD_INT 27
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 30
14841: PUSH
14842: LD_INT 26
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 30
14851: PUSH
14852: LD_INT 28
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PPUSH
14869: CALL_OW 69
14873: ST_TO_ADDR
// if not tmp then
14874: LD_VAR 0 2
14878: NOT
14879: IFFALSE 14883
// exit ;
14881: GO 14912
// for i in tmp do
14883: LD_ADDR_VAR 0 1
14887: PUSH
14888: LD_VAR 0 2
14892: PUSH
14893: FOR_IN
14894: IFFALSE 14910
// SetLives ( i , 1 ) ;
14896: LD_VAR 0 1
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 234
14908: GO 14893
14910: POP
14911: POP
// end ;
14912: PPOPN 2
14914: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14915: LD_EXP 21
14919: PUSH
14920: LD_EXP 70
14924: AND
14925: IFFALSE 15199
14927: GO 14929
14929: DISABLE
14930: LD_INT 0
14932: PPUSH
14933: PPUSH
14934: PPUSH
// begin i := rand ( 1 , 7 ) ;
14935: LD_ADDR_VAR 0 1
14939: PUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 7
14945: PPUSH
14946: CALL_OW 12
14950: ST_TO_ADDR
// case i of 1 :
14951: LD_VAR 0 1
14955: PUSH
14956: LD_INT 1
14958: DOUBLE
14959: EQUAL
14960: IFTRUE 14964
14962: GO 14974
14964: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14965: LD_STRING earthquake(getX(game), 0, 32)
14967: PPUSH
14968: CALL_OW 559
14972: GO 15199
14974: LD_INT 2
14976: DOUBLE
14977: EQUAL
14978: IFTRUE 14982
14980: GO 14996
14982: POP
// begin ToLua ( displayStucuk(); ) ;
14983: LD_STRING displayStucuk();
14985: PPUSH
14986: CALL_OW 559
// ResetFog ;
14990: CALL_OW 335
// end ; 3 :
14994: GO 15199
14996: LD_INT 3
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15108
15004: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15005: LD_ADDR_VAR 0 2
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_OWVAR 2
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 69
15040: ST_TO_ADDR
// if not tmp then
15041: LD_VAR 0 2
15045: NOT
15046: IFFALSE 15050
// exit ;
15048: GO 15199
// un := tmp [ rand ( 1 , tmp ) ] ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_VAR 0 2
15059: PUSH
15060: LD_INT 1
15062: PPUSH
15063: LD_VAR 0 2
15067: PPUSH
15068: CALL_OW 12
15072: ARRAY
15073: ST_TO_ADDR
// if Crawls ( un ) then
15074: LD_VAR 0 3
15078: PPUSH
15079: CALL_OW 318
15083: IFFALSE 15094
// ComWalk ( un ) ;
15085: LD_VAR 0 3
15089: PPUSH
15090: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15094: LD_VAR 0 3
15098: PPUSH
15099: LD_INT 8
15101: PPUSH
15102: CALL_OW 336
// end ; 4 :
15106: GO 15199
15108: LD_INT 4
15110: DOUBLE
15111: EQUAL
15112: IFTRUE 15116
15114: GO 15177
15116: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15117: LD_ADDR_VAR 0 2
15121: PUSH
15122: LD_INT 22
15124: PUSH
15125: LD_OWVAR 2
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 30
15136: PUSH
15137: LD_INT 29
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PPUSH
15148: CALL_OW 69
15152: ST_TO_ADDR
// if not tmp then
15153: LD_VAR 0 2
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15199
// DestroyUnit ( tmp [ 1 ] ) ;
15162: LD_VAR 0 2
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: CALL_OW 65
// end ; 5 .. 7 :
15175: GO 15199
15177: LD_INT 5
15179: DOUBLE
15180: GREATEREQUAL
15181: IFFALSE 15189
15183: LD_INT 7
15185: DOUBLE
15186: LESSEQUAL
15187: IFTRUE 15191
15189: GO 15198
15191: POP
// StreamSibBomb ; end ;
15192: CALL 11449 0 0
15196: GO 15199
15198: POP
// end ;
15199: PPOPN 3
15201: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15202: LD_EXP 21
15206: PUSH
15207: LD_EXP 71
15211: AND
15212: IFFALSE 15368
15214: GO 15216
15216: DISABLE
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
15221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15222: LD_ADDR_VAR 0 2
15226: PUSH
15227: LD_INT 81
15229: PUSH
15230: LD_OWVAR 2
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 21
15244: PUSH
15245: LD_INT 1
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 21
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 69
15275: ST_TO_ADDR
// if not tmp then
15276: LD_VAR 0 2
15280: NOT
15281: IFFALSE 15285
// exit ;
15283: GO 15368
// p := 0 ;
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_INT 0
15292: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15293: LD_INT 35
15295: PPUSH
15296: CALL_OW 67
// p := p + 1 ;
15300: LD_ADDR_VAR 0 3
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 1
15312: PLUS
15313: ST_TO_ADDR
// for i in tmp do
15314: LD_ADDR_VAR 0 1
15318: PUSH
15319: LD_VAR 0 2
15323: PUSH
15324: FOR_IN
15325: IFFALSE 15356
// if GetLives ( i ) < 1000 then
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 256
15336: PUSH
15337: LD_INT 1000
15339: LESS
15340: IFFALSE 15354
// SetLives ( i , 1000 ) ;
15342: LD_VAR 0 1
15346: PPUSH
15347: LD_INT 1000
15349: PPUSH
15350: CALL_OW 234
15354: GO 15324
15356: POP
15357: POP
// until p > 20 ;
15358: LD_VAR 0 3
15362: PUSH
15363: LD_INT 20
15365: GREATER
15366: IFFALSE 15293
// end ;
15368: PPOPN 3
15370: END
// every 0 0$1 trigger StreamModeActive and sTime do
15371: LD_EXP 21
15375: PUSH
15376: LD_EXP 72
15380: AND
15381: IFFALSE 15416
15383: GO 15385
15385: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15386: LD_INT 28
15388: PPUSH
15389: LD_OWVAR 2
15393: PPUSH
15394: LD_INT 2
15396: PPUSH
15397: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15401: LD_INT 30
15403: PPUSH
15404: LD_OWVAR 2
15408: PPUSH
15409: LD_INT 2
15411: PPUSH
15412: CALL_OW 322
// end ;
15416: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15417: LD_EXP 21
15421: PUSH
15422: LD_EXP 73
15426: AND
15427: IFFALSE 15548
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15436: LD_ADDR_VAR 0 2
15440: PUSH
15441: LD_INT 22
15443: PUSH
15444: LD_OWVAR 2
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 21
15455: PUSH
15456: LD_INT 1
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 3
15465: PUSH
15466: LD_INT 23
15468: PUSH
15469: LD_INT 0
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: PPUSH
15485: CALL_OW 69
15489: ST_TO_ADDR
// if not tmp then
15490: LD_VAR 0 2
15494: NOT
15495: IFFALSE 15499
// exit ;
15497: GO 15548
// for i in tmp do
15499: LD_ADDR_VAR 0 1
15503: PUSH
15504: LD_VAR 0 2
15508: PUSH
15509: FOR_IN
15510: IFFALSE 15546
// begin if Crawls ( i ) then
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 318
15521: IFFALSE 15532
// ComWalk ( i ) ;
15523: LD_VAR 0 1
15527: PPUSH
15528: CALL_OW 138
// SetClass ( i , 2 ) ;
15532: LD_VAR 0 1
15536: PPUSH
15537: LD_INT 2
15539: PPUSH
15540: CALL_OW 336
// end ;
15544: GO 15509
15546: POP
15547: POP
// end ;
15548: PPOPN 2
15550: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15551: LD_EXP 21
15555: PUSH
15556: LD_EXP 74
15560: AND
15561: IFFALSE 15842
15563: GO 15565
15565: DISABLE
15566: LD_INT 0
15568: PPUSH
15569: PPUSH
15570: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15571: LD_OWVAR 2
15575: PPUSH
15576: LD_INT 9
15578: PPUSH
15579: LD_INT 1
15581: PPUSH
15582: LD_INT 1
15584: PPUSH
15585: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15589: LD_INT 9
15591: PPUSH
15592: LD_OWVAR 2
15596: PPUSH
15597: CALL_OW 343
// uc_side := 9 ;
15601: LD_ADDR_OWVAR 20
15605: PUSH
15606: LD_INT 9
15608: ST_TO_ADDR
// uc_nation := 2 ;
15609: LD_ADDR_OWVAR 21
15613: PUSH
15614: LD_INT 2
15616: ST_TO_ADDR
// hc_name := Dark Warrior ;
15617: LD_ADDR_OWVAR 26
15621: PUSH
15622: LD_STRING Dark Warrior
15624: ST_TO_ADDR
// hc_gallery :=  ;
15625: LD_ADDR_OWVAR 33
15629: PUSH
15630: LD_STRING 
15632: ST_TO_ADDR
// hc_noskilllimit := true ;
15633: LD_ADDR_OWVAR 76
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15641: LD_ADDR_OWVAR 31
15645: PUSH
15646: LD_INT 30
15648: PUSH
15649: LD_INT 30
15651: PUSH
15652: LD_INT 30
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: ST_TO_ADDR
// un := CreateHuman ;
15664: LD_ADDR_VAR 0 3
15668: PUSH
15669: CALL_OW 44
15673: ST_TO_ADDR
// hc_noskilllimit := false ;
15674: LD_ADDR_OWVAR 76
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15682: LD_VAR 0 3
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 51
// p := 0 ;
15694: LD_ADDR_VAR 0 2
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15702: LD_INT 35
15704: PPUSH
15705: CALL_OW 67
// p := p + 1 ;
15709: LD_ADDR_VAR 0 2
15713: PUSH
15714: LD_VAR 0 2
15718: PUSH
15719: LD_INT 1
15721: PLUS
15722: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15723: LD_VAR 0 3
15727: PPUSH
15728: CALL_OW 256
15732: PUSH
15733: LD_INT 1000
15735: LESS
15736: IFFALSE 15750
// SetLives ( un , 1000 ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 1000
15745: PPUSH
15746: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15750: LD_VAR 0 3
15754: PPUSH
15755: LD_INT 81
15757: PUSH
15758: LD_OWVAR 2
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 91
15769: PUSH
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 30
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 69
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: CALL_OW 74
15801: PPUSH
15802: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15806: LD_VAR 0 2
15810: PUSH
15811: LD_INT 60
15813: GREATER
15814: PUSH
15815: LD_VAR 0 3
15819: PPUSH
15820: CALL_OW 301
15824: OR
15825: IFFALSE 15702
// if un then
15827: LD_VAR 0 3
15831: IFFALSE 15842
// RemoveUnit ( un ) ;
15833: LD_VAR 0 3
15837: PPUSH
15838: CALL_OW 64
// end ; end_of_file
15842: PPOPN 3
15844: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15845: LD_INT 0
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 264
15860: PUSH
15861: LD_EXP 11
15865: EQUAL
15866: IFFALSE 15938
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15868: LD_INT 68
15870: PPUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 255
15880: PPUSH
15881: CALL_OW 321
15885: PUSH
15886: LD_INT 2
15888: EQUAL
15889: IFFALSE 15901
// eff := 70 else
15891: LD_ADDR_VAR 0 4
15895: PUSH
15896: LD_INT 70
15898: ST_TO_ADDR
15899: GO 15909
// eff := 30 ;
15901: LD_ADDR_VAR 0 4
15905: PUSH
15906: LD_INT 30
15908: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15909: LD_VAR 0 1
15913: PPUSH
15914: CALL_OW 250
15918: PPUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 251
15928: PPUSH
15929: LD_VAR 0 4
15933: PPUSH
15934: CALL_OW 495
// end ; end ;
15938: LD_VAR 0 2
15942: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15943: LD_INT 0
15945: PPUSH
// end ;
15946: LD_VAR 0 4
15950: RET
// export function SOS_Command ( cmd ) ; begin
15951: LD_INT 0
15953: PPUSH
// end ;
15954: LD_VAR 0 2
15958: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15959: LD_VAR 0 1
15963: PUSH
15964: LD_INT 254
15966: EQUAL
15967: PUSH
15968: LD_VAR 0 2
15972: PPUSH
15973: CALL_OW 264
15977: PUSH
15978: LD_EXP 9
15982: EQUAL
15983: AND
15984: PUSH
15985: LD_VAR 0 3
15989: PPUSH
15990: CALL_OW 263
15994: PUSH
15995: LD_INT 3
15997: EQUAL
15998: AND
15999: IFFALSE 16010
// DestroyUnit ( selectedUnit ) ;
16001: LD_VAR 0 3
16005: PPUSH
16006: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16010: LD_VAR 0 1
16014: PUSH
16015: LD_INT 255
16017: EQUAL
16018: PUSH
16019: LD_VAR 0 2
16023: PPUSH
16024: CALL_OW 264
16028: PUSH
16029: LD_INT 14
16031: PUSH
16032: LD_INT 53
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: IN
16039: AND
16040: PUSH
16041: LD_VAR 0 4
16045: PPUSH
16046: LD_VAR 0 5
16050: PPUSH
16051: CALL_OW 488
16055: AND
16056: IFFALSE 16080
// CutTreeXYR ( unit , x , y , 12 ) ;
16058: LD_VAR 0 2
16062: PPUSH
16063: LD_VAR 0 4
16067: PPUSH
16068: LD_VAR 0 5
16072: PPUSH
16073: LD_INT 12
16075: PPUSH
16076: CALL 16083 0 4
// end ;
16080: PPOPN 5
16082: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16083: LD_INT 0
16085: PPUSH
16086: PPUSH
16087: PPUSH
16088: PPUSH
16089: PPUSH
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16094: LD_VAR 0 1
16098: NOT
16099: PUSH
16100: LD_VAR 0 2
16104: PPUSH
16105: LD_VAR 0 3
16109: PPUSH
16110: CALL_OW 488
16114: NOT
16115: OR
16116: PUSH
16117: LD_VAR 0 4
16121: NOT
16122: OR
16123: IFFALSE 16127
// exit ;
16125: GO 16467
// list := [ ] ;
16127: LD_ADDR_VAR 0 13
16131: PUSH
16132: EMPTY
16133: ST_TO_ADDR
// if x - r < 0 then
16134: LD_VAR 0 2
16138: PUSH
16139: LD_VAR 0 4
16143: MINUS
16144: PUSH
16145: LD_INT 0
16147: LESS
16148: IFFALSE 16160
// min_x := 0 else
16150: LD_ADDR_VAR 0 7
16154: PUSH
16155: LD_INT 0
16157: ST_TO_ADDR
16158: GO 16176
// min_x := x - r ;
16160: LD_ADDR_VAR 0 7
16164: PUSH
16165: LD_VAR 0 2
16169: PUSH
16170: LD_VAR 0 4
16174: MINUS
16175: ST_TO_ADDR
// if y - r < 0 then
16176: LD_VAR 0 3
16180: PUSH
16181: LD_VAR 0 4
16185: MINUS
16186: PUSH
16187: LD_INT 0
16189: LESS
16190: IFFALSE 16202
// min_y := 0 else
16192: LD_ADDR_VAR 0 8
16196: PUSH
16197: LD_INT 0
16199: ST_TO_ADDR
16200: GO 16218
// min_y := y - r ;
16202: LD_ADDR_VAR 0 8
16206: PUSH
16207: LD_VAR 0 3
16211: PUSH
16212: LD_VAR 0 4
16216: MINUS
16217: ST_TO_ADDR
// max_x := x + r ;
16218: LD_ADDR_VAR 0 9
16222: PUSH
16223: LD_VAR 0 2
16227: PUSH
16228: LD_VAR 0 4
16232: PLUS
16233: ST_TO_ADDR
// max_y := y + r ;
16234: LD_ADDR_VAR 0 10
16238: PUSH
16239: LD_VAR 0 3
16243: PUSH
16244: LD_VAR 0 4
16248: PLUS
16249: ST_TO_ADDR
// for _x = min_x to max_x do
16250: LD_ADDR_VAR 0 11
16254: PUSH
16255: DOUBLE
16256: LD_VAR 0 7
16260: DEC
16261: ST_TO_ADDR
16262: LD_VAR 0 9
16266: PUSH
16267: FOR_TO
16268: IFFALSE 16385
// for _y = min_y to max_y do
16270: LD_ADDR_VAR 0 12
16274: PUSH
16275: DOUBLE
16276: LD_VAR 0 8
16280: DEC
16281: ST_TO_ADDR
16282: LD_VAR 0 10
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16381
// begin if not ValidHex ( _x , _y ) then
16290: LD_VAR 0 11
16294: PPUSH
16295: LD_VAR 0 12
16299: PPUSH
16300: CALL_OW 488
16304: NOT
16305: IFFALSE 16309
// continue ;
16307: GO 16287
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16309: LD_VAR 0 11
16313: PPUSH
16314: LD_VAR 0 12
16318: PPUSH
16319: CALL_OW 351
16323: PUSH
16324: LD_VAR 0 11
16328: PPUSH
16329: LD_VAR 0 12
16333: PPUSH
16334: CALL_OW 554
16338: AND
16339: IFFALSE 16379
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16341: LD_ADDR_VAR 0 13
16345: PUSH
16346: LD_VAR 0 13
16350: PPUSH
16351: LD_VAR 0 13
16355: PUSH
16356: LD_INT 1
16358: PLUS
16359: PPUSH
16360: LD_VAR 0 11
16364: PUSH
16365: LD_VAR 0 12
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 2
16378: ST_TO_ADDR
// end ;
16379: GO 16287
16381: POP
16382: POP
16383: GO 16267
16385: POP
16386: POP
// if not list then
16387: LD_VAR 0 13
16391: NOT
16392: IFFALSE 16396
// exit ;
16394: GO 16467
// for i in list do
16396: LD_ADDR_VAR 0 6
16400: PUSH
16401: LD_VAR 0 13
16405: PUSH
16406: FOR_IN
16407: IFFALSE 16465
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16409: LD_VAR 0 1
16413: PPUSH
16414: LD_STRING M
16416: PUSH
16417: LD_VAR 0 6
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PUSH
16426: LD_VAR 0 6
16430: PUSH
16431: LD_INT 2
16433: ARRAY
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: LD_INT 0
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: PPUSH
16459: CALL_OW 447
16463: GO 16406
16465: POP
16466: POP
// end ;
16467: LD_VAR 0 5
16471: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
16472: LD_EXP 75
16476: NOT
16477: IFFALSE 16520
16479: GO 16481
16481: DISABLE
// begin initHack := true ;
16482: LD_ADDR_EXP 75
16486: PUSH
16487: LD_INT 1
16489: ST_TO_ADDR
// hackTanks := [ ] ;
16490: LD_ADDR_EXP 76
16494: PUSH
16495: EMPTY
16496: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16497: LD_ADDR_EXP 77
16501: PUSH
16502: EMPTY
16503: ST_TO_ADDR
// hackLimit := 3 ;
16504: LD_ADDR_EXP 78
16508: PUSH
16509: LD_INT 3
16511: ST_TO_ADDR
// hackDist := 12 ;
16512: LD_ADDR_EXP 79
16516: PUSH
16517: LD_INT 12
16519: ST_TO_ADDR
// end ;
16520: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16521: LD_EXP 75
16525: PUSH
16526: LD_INT 34
16528: PUSH
16529: LD_EXP 9
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: AND
16543: IFFALSE 16772
16545: GO 16547
16547: DISABLE
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
// begin enable ;
16552: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16553: LD_ADDR_VAR 0 1
16557: PUSH
16558: LD_INT 34
16560: PUSH
16561: LD_EXP 9
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PPUSH
16570: CALL_OW 69
16574: PUSH
16575: FOR_IN
16576: IFFALSE 16770
// begin if not i in hackTanks then
16578: LD_VAR 0 1
16582: PUSH
16583: LD_EXP 76
16587: IN
16588: NOT
16589: IFFALSE 16646
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16591: LD_ADDR_EXP 76
16595: PUSH
16596: LD_EXP 76
16600: PPUSH
16601: LD_EXP 76
16605: PUSH
16606: LD_INT 1
16608: PLUS
16609: PPUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL_OW 1
16619: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16620: LD_ADDR_EXP 77
16624: PUSH
16625: LD_EXP 77
16629: PPUSH
16630: LD_EXP 77
16634: PUSH
16635: LD_INT 1
16637: PLUS
16638: PPUSH
16639: EMPTY
16640: PPUSH
16641: CALL_OW 1
16645: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 302
16655: NOT
16656: IFFALSE 16669
// begin HackUnlinkAll ( i ) ;
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL 16775 0 1
// continue ;
16667: GO 16575
// end ; HackCheckCapturedStatus ( i ) ;
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL 17193 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16678: LD_ADDR_VAR 0 2
16682: PUSH
16683: LD_INT 81
16685: PUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 255
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 33
16702: PUSH
16703: LD_INT 3
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 91
16712: PUSH
16713: LD_VAR 0 1
16717: PUSH
16718: LD_EXP 79
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 50
16730: PUSH
16731: EMPTY
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: PPUSH
16740: CALL_OW 69
16744: ST_TO_ADDR
// if not tmp then
16745: LD_VAR 0 2
16749: NOT
16750: IFFALSE 16754
// continue ;
16752: GO 16575
// HackLink ( i , tmp ) ;
16754: LD_VAR 0 1
16758: PPUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL 16911 0 2
// end ;
16768: GO 16575
16770: POP
16771: POP
// end ;
16772: PPOPN 2
16774: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16775: LD_INT 0
16777: PPUSH
16778: PPUSH
16779: PPUSH
// if not hack in hackTanks then
16780: LD_VAR 0 1
16784: PUSH
16785: LD_EXP 76
16789: IN
16790: NOT
16791: IFFALSE 16795
// exit ;
16793: GO 16906
// index := GetElementIndex ( hackTanks , hack ) ;
16795: LD_ADDR_VAR 0 4
16799: PUSH
16800: LD_EXP 76
16804: PPUSH
16805: LD_VAR 0 1
16809: PPUSH
16810: CALL 22190 0 2
16814: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16815: LD_EXP 77
16819: PUSH
16820: LD_VAR 0 4
16824: ARRAY
16825: IFFALSE 16906
// begin for i in hackTanksCaptured [ index ] do
16827: LD_ADDR_VAR 0 3
16831: PUSH
16832: LD_EXP 77
16836: PUSH
16837: LD_VAR 0 4
16841: ARRAY
16842: PUSH
16843: FOR_IN
16844: IFFALSE 16870
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 1
16853: ARRAY
16854: PPUSH
16855: LD_VAR 0 3
16859: PUSH
16860: LD_INT 2
16862: ARRAY
16863: PPUSH
16864: CALL_OW 235
16868: GO 16843
16870: POP
16871: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16872: LD_ADDR_EXP 77
16876: PUSH
16877: LD_EXP 77
16881: PPUSH
16882: LD_VAR 0 4
16886: PPUSH
16887: EMPTY
16888: PPUSH
16889: CALL_OW 1
16893: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16894: LD_VAR 0 1
16898: PPUSH
16899: LD_INT 0
16901: PPUSH
16902: CALL_OW 505
// end ; end ;
16906: LD_VAR 0 2
16910: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16911: LD_INT 0
16913: PPUSH
16914: PPUSH
16915: PPUSH
// if not hack in hackTanks or not vehicles then
16916: LD_VAR 0 1
16920: PUSH
16921: LD_EXP 76
16925: IN
16926: NOT
16927: PUSH
16928: LD_VAR 0 2
16932: NOT
16933: OR
16934: IFFALSE 16938
// exit ;
16936: GO 17188
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: LD_VAR 0 2
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL 22840 0 4
16963: ST_TO_ADDR
// display_strings := vehicles ;
16964: LD_ADDR_OWVAR 47
16968: PUSH
16969: LD_VAR 0 2
16973: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16974: LD_ADDR_VAR 0 5
16978: PUSH
16979: LD_EXP 76
16983: PPUSH
16984: LD_VAR 0 1
16988: PPUSH
16989: CALL 22190 0 2
16993: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16994: LD_EXP 77
16998: PUSH
16999: LD_VAR 0 5
17003: ARRAY
17004: PUSH
17005: LD_EXP 78
17009: LESS
17010: IFFALSE 17164
// begin for i := 1 to vehicles do
17012: LD_ADDR_VAR 0 4
17016: PUSH
17017: DOUBLE
17018: LD_INT 1
17020: DEC
17021: ST_TO_ADDR
17022: LD_VAR 0 2
17026: PUSH
17027: FOR_TO
17028: IFFALSE 17162
// begin if hackTanksCaptured [ index ] = hackLimit then
17030: LD_EXP 77
17034: PUSH
17035: LD_VAR 0 5
17039: ARRAY
17040: PUSH
17041: LD_EXP 78
17045: EQUAL
17046: IFFALSE 17050
// break ;
17048: GO 17162
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17050: LD_ADDR_EXP 77
17054: PUSH
17055: LD_EXP 77
17059: PPUSH
17060: LD_VAR 0 5
17064: PUSH
17065: LD_EXP 77
17069: PUSH
17070: LD_VAR 0 5
17074: ARRAY
17075: PUSH
17076: LD_INT 1
17078: PLUS
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PPUSH
17084: LD_VAR 0 2
17088: PUSH
17089: LD_VAR 0 4
17093: ARRAY
17094: PUSH
17095: LD_VAR 0 2
17099: PUSH
17100: LD_VAR 0 4
17104: ARRAY
17105: PPUSH
17106: CALL_OW 255
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL 22405 0 3
17119: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17120: LD_VAR 0 2
17124: PUSH
17125: LD_VAR 0 4
17129: ARRAY
17130: PPUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 255
17140: PPUSH
17141: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17145: LD_VAR 0 2
17149: PUSH
17150: LD_VAR 0 4
17154: ARRAY
17155: PPUSH
17156: CALL_OW 141
// end ;
17160: GO 17027
17162: POP
17163: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17164: LD_VAR 0 1
17168: PPUSH
17169: LD_EXP 77
17173: PUSH
17174: LD_VAR 0 5
17178: ARRAY
17179: PUSH
17180: LD_INT 0
17182: PLUS
17183: PPUSH
17184: CALL_OW 505
// end ;
17188: LD_VAR 0 3
17192: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17193: LD_INT 0
17195: PPUSH
17196: PPUSH
17197: PPUSH
17198: PPUSH
// if not hack in hackTanks then
17199: LD_VAR 0 1
17203: PUSH
17204: LD_EXP 76
17208: IN
17209: NOT
17210: IFFALSE 17214
// exit ;
17212: GO 17454
// index := GetElementIndex ( hackTanks , hack ) ;
17214: LD_ADDR_VAR 0 4
17218: PUSH
17219: LD_EXP 76
17223: PPUSH
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL 22190 0 2
17233: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17234: LD_ADDR_VAR 0 3
17238: PUSH
17239: DOUBLE
17240: LD_EXP 77
17244: PUSH
17245: LD_VAR 0 4
17249: ARRAY
17250: INC
17251: ST_TO_ADDR
17252: LD_INT 1
17254: PUSH
17255: FOR_DOWNTO
17256: IFFALSE 17428
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17258: LD_ADDR_VAR 0 5
17262: PUSH
17263: LD_EXP 77
17267: PUSH
17268: LD_VAR 0 4
17272: ARRAY
17273: PUSH
17274: LD_VAR 0 3
17278: ARRAY
17279: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17280: LD_VAR 0 5
17284: PUSH
17285: LD_INT 1
17287: ARRAY
17288: PPUSH
17289: CALL_OW 302
17293: NOT
17294: PUSH
17295: LD_VAR 0 5
17299: PUSH
17300: LD_INT 1
17302: ARRAY
17303: PPUSH
17304: CALL_OW 255
17308: PUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 255
17318: NONEQUAL
17319: OR
17320: IFFALSE 17426
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17322: LD_VAR 0 5
17326: PUSH
17327: LD_INT 1
17329: ARRAY
17330: PPUSH
17331: CALL_OW 305
17335: PUSH
17336: LD_VAR 0 5
17340: PUSH
17341: LD_INT 1
17343: ARRAY
17344: PPUSH
17345: CALL_OW 255
17349: PUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 255
17359: EQUAL
17360: AND
17361: IFFALSE 17385
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17363: LD_VAR 0 5
17367: PUSH
17368: LD_INT 1
17370: ARRAY
17371: PPUSH
17372: LD_VAR 0 5
17376: PUSH
17377: LD_INT 2
17379: ARRAY
17380: PPUSH
17381: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17385: LD_ADDR_EXP 77
17389: PUSH
17390: LD_EXP 77
17394: PPUSH
17395: LD_VAR 0 4
17399: PPUSH
17400: LD_EXP 77
17404: PUSH
17405: LD_VAR 0 4
17409: ARRAY
17410: PPUSH
17411: LD_VAR 0 3
17415: PPUSH
17416: CALL_OW 3
17420: PPUSH
17421: CALL_OW 1
17425: ST_TO_ADDR
// end ; end ;
17426: GO 17255
17428: POP
17429: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_EXP 77
17439: PUSH
17440: LD_VAR 0 4
17444: ARRAY
17445: PUSH
17446: LD_INT 0
17448: PLUS
17449: PPUSH
17450: CALL_OW 505
// end ; end_of_file
17454: LD_VAR 0 2
17458: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17459: LD_INT 0
17461: PPUSH
17462: PPUSH
// if exist_mode then
17463: LD_VAR 0 2
17467: IFFALSE 17492
// unit := CreateCharacter ( prefix & ident ) else
17469: LD_ADDR_VAR 0 5
17473: PUSH
17474: LD_VAR 0 3
17478: PUSH
17479: LD_VAR 0 1
17483: STR
17484: PPUSH
17485: CALL_OW 34
17489: ST_TO_ADDR
17490: GO 17507
// unit := NewCharacter ( ident ) ;
17492: LD_ADDR_VAR 0 5
17496: PUSH
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 25
17506: ST_TO_ADDR
// result := unit ;
17507: LD_ADDR_VAR 0 4
17511: PUSH
17512: LD_VAR 0 5
17516: ST_TO_ADDR
// end ;
17517: LD_VAR 0 4
17521: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17522: LD_INT 0
17524: PPUSH
17525: PPUSH
// if not side or not nation then
17526: LD_VAR 0 1
17530: NOT
17531: PUSH
17532: LD_VAR 0 2
17536: NOT
17537: OR
17538: IFFALSE 17542
// exit ;
17540: GO 18306
// case nation of nation_american :
17542: LD_VAR 0 2
17546: PUSH
17547: LD_INT 1
17549: DOUBLE
17550: EQUAL
17551: IFTRUE 17555
17553: GO 17769
17555: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17556: LD_ADDR_VAR 0 4
17560: PUSH
17561: LD_INT 35
17563: PUSH
17564: LD_INT 45
17566: PUSH
17567: LD_INT 46
17569: PUSH
17570: LD_INT 47
17572: PUSH
17573: LD_INT 82
17575: PUSH
17576: LD_INT 83
17578: PUSH
17579: LD_INT 84
17581: PUSH
17582: LD_INT 85
17584: PUSH
17585: LD_INT 86
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: LD_INT 6
17596: PUSH
17597: LD_INT 15
17599: PUSH
17600: LD_INT 16
17602: PUSH
17603: LD_INT 7
17605: PUSH
17606: LD_INT 12
17608: PUSH
17609: LD_INT 13
17611: PUSH
17612: LD_INT 10
17614: PUSH
17615: LD_INT 14
17617: PUSH
17618: LD_INT 20
17620: PUSH
17621: LD_INT 21
17623: PUSH
17624: LD_INT 22
17626: PUSH
17627: LD_INT 25
17629: PUSH
17630: LD_INT 32
17632: PUSH
17633: LD_INT 27
17635: PUSH
17636: LD_INT 36
17638: PUSH
17639: LD_INT 69
17641: PUSH
17642: LD_INT 39
17644: PUSH
17645: LD_INT 34
17647: PUSH
17648: LD_INT 40
17650: PUSH
17651: LD_INT 48
17653: PUSH
17654: LD_INT 49
17656: PUSH
17657: LD_INT 50
17659: PUSH
17660: LD_INT 51
17662: PUSH
17663: LD_INT 52
17665: PUSH
17666: LD_INT 53
17668: PUSH
17669: LD_INT 54
17671: PUSH
17672: LD_INT 55
17674: PUSH
17675: LD_INT 56
17677: PUSH
17678: LD_INT 57
17680: PUSH
17681: LD_INT 58
17683: PUSH
17684: LD_INT 59
17686: PUSH
17687: LD_INT 60
17689: PUSH
17690: LD_INT 61
17692: PUSH
17693: LD_INT 62
17695: PUSH
17696: LD_INT 80
17698: PUSH
17699: LD_INT 82
17701: PUSH
17702: LD_INT 83
17704: PUSH
17705: LD_INT 84
17707: PUSH
17708: LD_INT 85
17710: PUSH
17711: LD_INT 86
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: ST_TO_ADDR
17767: GO 18230
17769: LD_INT 2
17771: DOUBLE
17772: EQUAL
17773: IFTRUE 17777
17775: GO 17999
17777: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
17778: LD_ADDR_VAR 0 4
17782: PUSH
17783: LD_INT 35
17785: PUSH
17786: LD_INT 45
17788: PUSH
17789: LD_INT 46
17791: PUSH
17792: LD_INT 47
17794: PUSH
17795: LD_INT 82
17797: PUSH
17798: LD_INT 83
17800: PUSH
17801: LD_INT 84
17803: PUSH
17804: LD_INT 85
17806: PUSH
17807: LD_INT 87
17809: PUSH
17810: LD_INT 70
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: LD_INT 11
17818: PUSH
17819: LD_INT 3
17821: PUSH
17822: LD_INT 4
17824: PUSH
17825: LD_INT 5
17827: PUSH
17828: LD_INT 6
17830: PUSH
17831: LD_INT 15
17833: PUSH
17834: LD_INT 18
17836: PUSH
17837: LD_INT 7
17839: PUSH
17840: LD_INT 17
17842: PUSH
17843: LD_INT 8
17845: PUSH
17846: LD_INT 20
17848: PUSH
17849: LD_INT 21
17851: PUSH
17852: LD_INT 22
17854: PUSH
17855: LD_INT 72
17857: PUSH
17858: LD_INT 26
17860: PUSH
17861: LD_INT 69
17863: PUSH
17864: LD_INT 39
17866: PUSH
17867: LD_INT 40
17869: PUSH
17870: LD_INT 41
17872: PUSH
17873: LD_INT 42
17875: PUSH
17876: LD_INT 43
17878: PUSH
17879: LD_INT 48
17881: PUSH
17882: LD_INT 49
17884: PUSH
17885: LD_INT 50
17887: PUSH
17888: LD_INT 51
17890: PUSH
17891: LD_INT 52
17893: PUSH
17894: LD_INT 53
17896: PUSH
17897: LD_INT 54
17899: PUSH
17900: LD_INT 55
17902: PUSH
17903: LD_INT 56
17905: PUSH
17906: LD_INT 60
17908: PUSH
17909: LD_INT 61
17911: PUSH
17912: LD_INT 62
17914: PUSH
17915: LD_INT 66
17917: PUSH
17918: LD_INT 67
17920: PUSH
17921: LD_INT 68
17923: PUSH
17924: LD_INT 81
17926: PUSH
17927: LD_INT 82
17929: PUSH
17930: LD_INT 83
17932: PUSH
17933: LD_INT 84
17935: PUSH
17936: LD_INT 85
17938: PUSH
17939: LD_INT 87
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: ST_TO_ADDR
17997: GO 18230
17999: LD_INT 3
18001: DOUBLE
18002: EQUAL
18003: IFTRUE 18007
18005: GO 18229
18007: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18008: LD_ADDR_VAR 0 4
18012: PUSH
18013: LD_INT 46
18015: PUSH
18016: LD_INT 47
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: LD_INT 82
18027: PUSH
18028: LD_INT 83
18030: PUSH
18031: LD_INT 84
18033: PUSH
18034: LD_INT 85
18036: PUSH
18037: LD_INT 86
18039: PUSH
18040: LD_INT 11
18042: PUSH
18043: LD_INT 9
18045: PUSH
18046: LD_INT 20
18048: PUSH
18049: LD_INT 19
18051: PUSH
18052: LD_INT 21
18054: PUSH
18055: LD_INT 24
18057: PUSH
18058: LD_INT 22
18060: PUSH
18061: LD_INT 25
18063: PUSH
18064: LD_INT 28
18066: PUSH
18067: LD_INT 29
18069: PUSH
18070: LD_INT 30
18072: PUSH
18073: LD_INT 31
18075: PUSH
18076: LD_INT 37
18078: PUSH
18079: LD_INT 38
18081: PUSH
18082: LD_INT 32
18084: PUSH
18085: LD_INT 27
18087: PUSH
18088: LD_INT 33
18090: PUSH
18091: LD_INT 69
18093: PUSH
18094: LD_INT 39
18096: PUSH
18097: LD_INT 34
18099: PUSH
18100: LD_INT 40
18102: PUSH
18103: LD_INT 71
18105: PUSH
18106: LD_INT 23
18108: PUSH
18109: LD_INT 44
18111: PUSH
18112: LD_INT 48
18114: PUSH
18115: LD_INT 49
18117: PUSH
18118: LD_INT 50
18120: PUSH
18121: LD_INT 51
18123: PUSH
18124: LD_INT 52
18126: PUSH
18127: LD_INT 53
18129: PUSH
18130: LD_INT 54
18132: PUSH
18133: LD_INT 55
18135: PUSH
18136: LD_INT 56
18138: PUSH
18139: LD_INT 57
18141: PUSH
18142: LD_INT 58
18144: PUSH
18145: LD_INT 59
18147: PUSH
18148: LD_INT 63
18150: PUSH
18151: LD_INT 64
18153: PUSH
18154: LD_INT 65
18156: PUSH
18157: LD_INT 82
18159: PUSH
18160: LD_INT 83
18162: PUSH
18163: LD_INT 84
18165: PUSH
18166: LD_INT 85
18168: PUSH
18169: LD_INT 86
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: ST_TO_ADDR
18227: GO 18230
18229: POP
// if state > - 1 and state < 3 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: GREATER
18239: PUSH
18240: LD_VAR 0 3
18244: PUSH
18245: LD_INT 3
18247: LESS
18248: AND
18249: IFFALSE 18306
// for i in result do
18251: LD_ADDR_VAR 0 5
18255: PUSH
18256: LD_VAR 0 4
18260: PUSH
18261: FOR_IN
18262: IFFALSE 18304
// if GetTech ( i , side ) <> state then
18264: LD_VAR 0 5
18268: PPUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: CALL_OW 321
18278: PUSH
18279: LD_VAR 0 3
18283: NONEQUAL
18284: IFFALSE 18302
// result := result diff i ;
18286: LD_ADDR_VAR 0 4
18290: PUSH
18291: LD_VAR 0 4
18295: PUSH
18296: LD_VAR 0 5
18300: DIFF
18301: ST_TO_ADDR
18302: GO 18261
18304: POP
18305: POP
// end ;
18306: LD_VAR 0 4
18310: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18311: LD_INT 0
18313: PPUSH
18314: PPUSH
18315: PPUSH
// result := true ;
18316: LD_ADDR_VAR 0 3
18320: PUSH
18321: LD_INT 1
18323: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18324: LD_ADDR_VAR 0 5
18328: PUSH
18329: LD_VAR 0 2
18333: PPUSH
18334: CALL_OW 480
18338: ST_TO_ADDR
// if not tmp then
18339: LD_VAR 0 5
18343: NOT
18344: IFFALSE 18348
// exit ;
18346: GO 18397
// for i in tmp do
18348: LD_ADDR_VAR 0 4
18352: PUSH
18353: LD_VAR 0 5
18357: PUSH
18358: FOR_IN
18359: IFFALSE 18395
// if GetTech ( i , side ) <> state_researched then
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 321
18375: PUSH
18376: LD_INT 2
18378: NONEQUAL
18379: IFFALSE 18393
// begin result := false ;
18381: LD_ADDR_VAR 0 3
18385: PUSH
18386: LD_INT 0
18388: ST_TO_ADDR
// exit ;
18389: POP
18390: POP
18391: GO 18397
// end ;
18393: GO 18358
18395: POP
18396: POP
// end ;
18397: LD_VAR 0 3
18401: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18402: LD_INT 0
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
18408: PPUSH
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18417: LD_VAR 0 1
18421: NOT
18422: PUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 257
18432: PUSH
18433: LD_INT 9
18435: NONEQUAL
18436: OR
18437: IFFALSE 18441
// exit ;
18439: GO 19014
// side := GetSide ( unit ) ;
18441: LD_ADDR_VAR 0 9
18445: PUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 255
18455: ST_TO_ADDR
// tech_space := tech_spacanom ;
18456: LD_ADDR_VAR 0 12
18460: PUSH
18461: LD_INT 29
18463: ST_TO_ADDR
// tech_time := tech_taurad ;
18464: LD_ADDR_VAR 0 13
18468: PUSH
18469: LD_INT 28
18471: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18472: LD_ADDR_VAR 0 11
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 310
18486: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18487: LD_VAR 0 11
18491: PPUSH
18492: CALL_OW 247
18496: PUSH
18497: LD_INT 2
18499: EQUAL
18500: IFFALSE 18504
// exit ;
18502: GO 19014
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18504: LD_ADDR_VAR 0 8
18508: PUSH
18509: LD_INT 81
18511: PUSH
18512: LD_VAR 0 9
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: LD_INT 21
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 8
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 19014
// if in_unit then
18556: LD_VAR 0 11
18560: IFFALSE 18584
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18562: LD_ADDR_VAR 0 10
18566: PUSH
18567: LD_VAR 0 8
18571: PPUSH
18572: LD_VAR 0 11
18576: PPUSH
18577: CALL_OW 74
18581: ST_TO_ADDR
18582: GO 18604
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18584: LD_ADDR_VAR 0 10
18588: PUSH
18589: LD_VAR 0 8
18593: PPUSH
18594: LD_VAR 0 1
18598: PPUSH
18599: CALL_OW 74
18603: ST_TO_ADDR
// if not enemy then
18604: LD_VAR 0 10
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 19014
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18613: LD_VAR 0 11
18617: PUSH
18618: LD_VAR 0 11
18622: PPUSH
18623: LD_VAR 0 10
18627: PPUSH
18628: CALL_OW 296
18632: PUSH
18633: LD_INT 13
18635: GREATER
18636: AND
18637: PUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: LD_VAR 0 10
18647: PPUSH
18648: CALL_OW 296
18652: PUSH
18653: LD_INT 12
18655: GREATER
18656: OR
18657: IFFALSE 18661
// exit ;
18659: GO 19014
// missile := [ 1 ] ;
18661: LD_ADDR_VAR 0 14
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18672: LD_VAR 0 9
18676: PPUSH
18677: LD_VAR 0 12
18681: PPUSH
18682: CALL_OW 325
18686: IFFALSE 18715
// missile := Insert ( missile , missile + 1 , 2 ) ;
18688: LD_ADDR_VAR 0 14
18692: PUSH
18693: LD_VAR 0 14
18697: PPUSH
18698: LD_VAR 0 14
18702: PUSH
18703: LD_INT 1
18705: PLUS
18706: PPUSH
18707: LD_INT 2
18709: PPUSH
18710: CALL_OW 2
18714: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18715: LD_VAR 0 9
18719: PPUSH
18720: LD_VAR 0 13
18724: PPUSH
18725: CALL_OW 325
18729: PUSH
18730: LD_VAR 0 10
18734: PPUSH
18735: CALL_OW 255
18739: PPUSH
18740: LD_VAR 0 13
18744: PPUSH
18745: CALL_OW 325
18749: NOT
18750: AND
18751: IFFALSE 18780
// missile := Insert ( missile , missile + 1 , 3 ) ;
18753: LD_ADDR_VAR 0 14
18757: PUSH
18758: LD_VAR 0 14
18762: PPUSH
18763: LD_VAR 0 14
18767: PUSH
18768: LD_INT 1
18770: PLUS
18771: PPUSH
18772: LD_INT 3
18774: PPUSH
18775: CALL_OW 2
18779: ST_TO_ADDR
// if missile < 2 then
18780: LD_VAR 0 14
18784: PUSH
18785: LD_INT 2
18787: LESS
18788: IFFALSE 18792
// exit ;
18790: GO 19014
// x := GetX ( enemy ) ;
18792: LD_ADDR_VAR 0 4
18796: PUSH
18797: LD_VAR 0 10
18801: PPUSH
18802: CALL_OW 250
18806: ST_TO_ADDR
// y := GetY ( enemy ) ;
18807: LD_ADDR_VAR 0 5
18811: PUSH
18812: LD_VAR 0 10
18816: PPUSH
18817: CALL_OW 251
18821: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18822: LD_ADDR_VAR 0 6
18826: PUSH
18827: LD_VAR 0 4
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PPUSH
18836: LD_INT 1
18838: PPUSH
18839: CALL_OW 12
18843: PLUS
18844: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18845: LD_ADDR_VAR 0 7
18849: PUSH
18850: LD_VAR 0 5
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PPUSH
18859: LD_INT 1
18861: PPUSH
18862: CALL_OW 12
18866: PLUS
18867: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18868: LD_VAR 0 6
18872: PPUSH
18873: LD_VAR 0 7
18877: PPUSH
18878: CALL_OW 488
18882: NOT
18883: IFFALSE 18905
// begin _x := x ;
18885: LD_ADDR_VAR 0 6
18889: PUSH
18890: LD_VAR 0 4
18894: ST_TO_ADDR
// _y := y ;
18895: LD_ADDR_VAR 0 7
18899: PUSH
18900: LD_VAR 0 5
18904: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18905: LD_ADDR_VAR 0 3
18909: PUSH
18910: LD_INT 1
18912: PPUSH
18913: LD_VAR 0 14
18917: PPUSH
18918: CALL_OW 12
18922: ST_TO_ADDR
// case i of 1 :
18923: LD_VAR 0 3
18927: PUSH
18928: LD_INT 1
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18953
18936: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18937: LD_VAR 0 1
18941: PPUSH
18942: LD_VAR 0 10
18946: PPUSH
18947: CALL_OW 115
18951: GO 19014
18953: LD_INT 2
18955: DOUBLE
18956: EQUAL
18957: IFTRUE 18961
18959: GO 18983
18961: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18962: LD_VAR 0 1
18966: PPUSH
18967: LD_VAR 0 6
18971: PPUSH
18972: LD_VAR 0 7
18976: PPUSH
18977: CALL_OW 153
18981: GO 19014
18983: LD_INT 3
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19013
18991: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_VAR 0 6
19001: PPUSH
19002: LD_VAR 0 7
19006: PPUSH
19007: CALL_OW 154
19011: GO 19014
19013: POP
// end ;
19014: LD_VAR 0 2
19018: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19019: LD_INT 0
19021: PPUSH
19022: PPUSH
19023: PPUSH
19024: PPUSH
19025: PPUSH
19026: PPUSH
// if not unit or not building then
19027: LD_VAR 0 1
19031: NOT
19032: PUSH
19033: LD_VAR 0 2
19037: NOT
19038: OR
19039: IFFALSE 19043
// exit ;
19041: GO 19201
// x := GetX ( building ) ;
19043: LD_ADDR_VAR 0 5
19047: PUSH
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 250
19057: ST_TO_ADDR
// y := GetY ( building ) ;
19058: LD_ADDR_VAR 0 6
19062: PUSH
19063: LD_VAR 0 2
19067: PPUSH
19068: CALL_OW 251
19072: ST_TO_ADDR
// for i = 0 to 5 do
19073: LD_ADDR_VAR 0 4
19077: PUSH
19078: DOUBLE
19079: LD_INT 0
19081: DEC
19082: ST_TO_ADDR
19083: LD_INT 5
19085: PUSH
19086: FOR_TO
19087: IFFALSE 19199
// begin _x := ShiftX ( x , i , 3 ) ;
19089: LD_ADDR_VAR 0 7
19093: PUSH
19094: LD_VAR 0 5
19098: PPUSH
19099: LD_VAR 0 4
19103: PPUSH
19104: LD_INT 3
19106: PPUSH
19107: CALL_OW 272
19111: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19112: LD_ADDR_VAR 0 8
19116: PUSH
19117: LD_VAR 0 6
19121: PPUSH
19122: LD_VAR 0 4
19126: PPUSH
19127: LD_INT 3
19129: PPUSH
19130: CALL_OW 273
19134: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19135: LD_VAR 0 7
19139: PPUSH
19140: LD_VAR 0 8
19144: PPUSH
19145: CALL_OW 488
19149: NOT
19150: IFFALSE 19154
// continue ;
19152: GO 19086
// if HexInfo ( _x , _y ) = 0 then
19154: LD_VAR 0 7
19158: PPUSH
19159: LD_VAR 0 8
19163: PPUSH
19164: CALL_OW 428
19168: PUSH
19169: LD_INT 0
19171: EQUAL
19172: IFFALSE 19197
// begin ComMoveXY ( unit , _x , _y ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_VAR 0 7
19183: PPUSH
19184: LD_VAR 0 8
19188: PPUSH
19189: CALL_OW 111
// exit ;
19193: POP
19194: POP
19195: GO 19201
// end ; end ;
19197: GO 19086
19199: POP
19200: POP
// end ;
19201: LD_VAR 0 3
19205: RET
// export function ScanBase ( side , base_area ) ; begin
19206: LD_INT 0
19208: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19209: LD_ADDR_VAR 0 3
19213: PUSH
19214: LD_VAR 0 2
19218: PPUSH
19219: LD_INT 81
19221: PUSH
19222: LD_VAR 0 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 70
19235: ST_TO_ADDR
// end ;
19236: LD_VAR 0 3
19240: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19241: LD_INT 0
19243: PPUSH
19244: PPUSH
19245: PPUSH
19246: PPUSH
// result := false ;
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// side := GetSide ( unit ) ;
19255: LD_ADDR_VAR 0 3
19259: PUSH
19260: LD_VAR 0 1
19264: PPUSH
19265: CALL_OW 255
19269: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19270: LD_ADDR_VAR 0 4
19274: PUSH
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL_OW 248
19284: ST_TO_ADDR
// case nat of 1 :
19285: LD_VAR 0 4
19289: PUSH
19290: LD_INT 1
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19309
19298: POP
// tech := tech_lassight ; 2 :
19299: LD_ADDR_VAR 0 5
19303: PUSH
19304: LD_INT 12
19306: ST_TO_ADDR
19307: GO 19348
19309: LD_INT 2
19311: DOUBLE
19312: EQUAL
19313: IFTRUE 19317
19315: GO 19328
19317: POP
// tech := tech_mortar ; 3 :
19318: LD_ADDR_VAR 0 5
19322: PUSH
19323: LD_INT 41
19325: ST_TO_ADDR
19326: GO 19348
19328: LD_INT 3
19330: DOUBLE
19331: EQUAL
19332: IFTRUE 19336
19334: GO 19347
19336: POP
// tech := tech_bazooka ; end ;
19337: LD_ADDR_VAR 0 5
19341: PUSH
19342: LD_INT 44
19344: ST_TO_ADDR
19345: GO 19348
19347: POP
// if Researched ( side , tech ) then
19348: LD_VAR 0 3
19352: PPUSH
19353: LD_VAR 0 5
19357: PPUSH
19358: CALL_OW 325
19362: IFFALSE 19389
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19364: LD_ADDR_VAR 0 2
19368: PUSH
19369: LD_INT 5
19371: PUSH
19372: LD_INT 8
19374: PUSH
19375: LD_INT 9
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: LD_VAR 0 4
19387: ARRAY
19388: ST_TO_ADDR
// end ;
19389: LD_VAR 0 2
19393: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
// if not mines then
19399: LD_VAR 0 2
19403: NOT
19404: IFFALSE 19408
// exit ;
19406: GO 19552
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19408: LD_ADDR_VAR 0 5
19412: PUSH
19413: LD_INT 81
19415: PUSH
19416: LD_VAR 0 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 3
19427: PUSH
19428: LD_INT 21
19430: PUSH
19431: LD_INT 3
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: ST_TO_ADDR
// for i in mines do
19451: LD_ADDR_VAR 0 4
19455: PUSH
19456: LD_VAR 0 2
19460: PUSH
19461: FOR_IN
19462: IFFALSE 19550
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19464: LD_VAR 0 4
19468: PUSH
19469: LD_INT 1
19471: ARRAY
19472: PPUSH
19473: LD_VAR 0 4
19477: PUSH
19478: LD_INT 2
19480: ARRAY
19481: PPUSH
19482: CALL_OW 458
19486: NOT
19487: IFFALSE 19491
// continue ;
19489: GO 19461
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19491: LD_VAR 0 4
19495: PUSH
19496: LD_INT 1
19498: ARRAY
19499: PPUSH
19500: LD_VAR 0 4
19504: PUSH
19505: LD_INT 2
19507: ARRAY
19508: PPUSH
19509: CALL_OW 428
19513: PUSH
19514: LD_VAR 0 5
19518: IN
19519: IFFALSE 19548
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19521: LD_VAR 0 4
19525: PUSH
19526: LD_INT 1
19528: ARRAY
19529: PPUSH
19530: LD_VAR 0 4
19534: PUSH
19535: LD_INT 2
19537: ARRAY
19538: PPUSH
19539: LD_VAR 0 1
19543: PPUSH
19544: CALL_OW 456
// end ;
19548: GO 19461
19550: POP
19551: POP
// end ;
19552: LD_VAR 0 3
19556: RET
// export function Count ( array ) ; var i ; begin
19557: LD_INT 0
19559: PPUSH
19560: PPUSH
// result := 0 ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: LD_INT 0
19568: ST_TO_ADDR
// for i in array do
19569: LD_ADDR_VAR 0 3
19573: PUSH
19574: LD_VAR 0 1
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19604
// if i then
19582: LD_VAR 0 3
19586: IFFALSE 19602
// result := result + 1 ;
19588: LD_ADDR_VAR 0 2
19592: PUSH
19593: LD_VAR 0 2
19597: PUSH
19598: LD_INT 1
19600: PLUS
19601: ST_TO_ADDR
19602: GO 19579
19604: POP
19605: POP
// end ;
19606: LD_VAR 0 2
19610: RET
// export function IsEmpty ( building ) ; begin
19611: LD_INT 0
19613: PPUSH
// if not building then
19614: LD_VAR 0 1
19618: NOT
19619: IFFALSE 19623
// exit ;
19621: GO 19666
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19623: LD_ADDR_VAR 0 2
19627: PUSH
19628: LD_VAR 0 1
19632: PUSH
19633: LD_INT 22
19635: PUSH
19636: LD_VAR 0 1
19640: PPUSH
19641: CALL_OW 255
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 58
19652: PUSH
19653: EMPTY
19654: LIST
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 69
19664: IN
19665: ST_TO_ADDR
// end ;
19666: LD_VAR 0 2
19670: RET
// export function IsNotFull ( building ) ; begin
19671: LD_INT 0
19673: PPUSH
// if not building then
19674: LD_VAR 0 1
19678: NOT
19679: IFFALSE 19683
// exit ;
19681: GO 19702
// result := UnitsInside ( building ) < 6 ;
19683: LD_ADDR_VAR 0 2
19687: PUSH
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 313
19697: PUSH
19698: LD_INT 6
19700: LESS
19701: ST_TO_ADDR
// end ;
19702: LD_VAR 0 2
19706: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19707: LD_INT 0
19709: PPUSH
19710: PPUSH
19711: PPUSH
19712: PPUSH
// tmp := [ ] ;
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: EMPTY
19719: ST_TO_ADDR
// list := [ ] ;
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: EMPTY
19726: ST_TO_ADDR
// for i = 16 to 25 do
19727: LD_ADDR_VAR 0 4
19731: PUSH
19732: DOUBLE
19733: LD_INT 16
19735: DEC
19736: ST_TO_ADDR
19737: LD_INT 25
19739: PUSH
19740: FOR_TO
19741: IFFALSE 19814
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: LD_VAR 0 3
19752: PUSH
19753: LD_INT 22
19755: PUSH
19756: LD_VAR 0 1
19760: PPUSH
19761: CALL_OW 255
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 91
19772: PUSH
19773: LD_VAR 0 1
19777: PUSH
19778: LD_INT 6
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 30
19788: PUSH
19789: LD_VAR 0 4
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: PPUSH
19806: CALL_OW 69
19810: ADD
19811: ST_TO_ADDR
19812: GO 19740
19814: POP
19815: POP
// for i = 1 to tmp do
19816: LD_ADDR_VAR 0 4
19820: PUSH
19821: DOUBLE
19822: LD_INT 1
19824: DEC
19825: ST_TO_ADDR
19826: LD_VAR 0 3
19830: PUSH
19831: FOR_TO
19832: IFFALSE 19920
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19834: LD_ADDR_VAR 0 5
19838: PUSH
19839: LD_VAR 0 5
19843: PUSH
19844: LD_VAR 0 3
19848: PUSH
19849: LD_VAR 0 4
19853: ARRAY
19854: PPUSH
19855: CALL_OW 266
19859: PUSH
19860: LD_VAR 0 3
19864: PUSH
19865: LD_VAR 0 4
19869: ARRAY
19870: PPUSH
19871: CALL_OW 250
19875: PUSH
19876: LD_VAR 0 3
19880: PUSH
19881: LD_VAR 0 4
19885: ARRAY
19886: PPUSH
19887: CALL_OW 251
19891: PUSH
19892: LD_VAR 0 3
19896: PUSH
19897: LD_VAR 0 4
19901: ARRAY
19902: PPUSH
19903: CALL_OW 254
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: ADD
19917: ST_TO_ADDR
19918: GO 19831
19920: POP
19921: POP
// result := list ;
19922: LD_ADDR_VAR 0 2
19926: PUSH
19927: LD_VAR 0 5
19931: ST_TO_ADDR
// end ;
19932: LD_VAR 0 2
19936: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19937: LD_INT 0
19939: PPUSH
19940: PPUSH
19941: PPUSH
19942: PPUSH
19943: PPUSH
19944: PPUSH
19945: PPUSH
// if not factory then
19946: LD_VAR 0 1
19950: NOT
19951: IFFALSE 19955
// exit ;
19953: GO 20548
// if control = control_apeman then
19955: LD_VAR 0 4
19959: PUSH
19960: LD_INT 5
19962: EQUAL
19963: IFFALSE 20072
// begin tmp := UnitsInside ( factory ) ;
19965: LD_ADDR_VAR 0 8
19969: PUSH
19970: LD_VAR 0 1
19974: PPUSH
19975: CALL_OW 313
19979: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19980: LD_VAR 0 8
19984: PPUSH
19985: LD_INT 25
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PPUSH
19995: CALL_OW 72
19999: NOT
20000: IFFALSE 20010
// control := control_manual ;
20002: LD_ADDR_VAR 0 4
20006: PUSH
20007: LD_INT 1
20009: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20010: LD_ADDR_VAR 0 8
20014: PUSH
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL 19707 0 1
20024: ST_TO_ADDR
// if tmp then
20025: LD_VAR 0 8
20029: IFFALSE 20072
// begin for i in tmp do
20031: LD_ADDR_VAR 0 7
20035: PUSH
20036: LD_VAR 0 8
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20070
// if i [ 1 ] = b_ext_radio then
20044: LD_VAR 0 7
20048: PUSH
20049: LD_INT 1
20051: ARRAY
20052: PUSH
20053: LD_INT 22
20055: EQUAL
20056: IFFALSE 20068
// begin control := control_remote ;
20058: LD_ADDR_VAR 0 4
20062: PUSH
20063: LD_INT 2
20065: ST_TO_ADDR
// break ;
20066: GO 20070
// end ;
20068: GO 20041
20070: POP
20071: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20072: LD_VAR 0 1
20076: PPUSH
20077: LD_VAR 0 2
20081: PPUSH
20082: LD_VAR 0 3
20086: PPUSH
20087: LD_VAR 0 4
20091: PPUSH
20092: LD_VAR 0 5
20096: PPUSH
20097: CALL_OW 448
20101: IFFALSE 20136
// begin result := [ chassis , engine , control , weapon ] ;
20103: LD_ADDR_VAR 0 6
20107: PUSH
20108: LD_VAR 0 2
20112: PUSH
20113: LD_VAR 0 3
20117: PUSH
20118: LD_VAR 0 4
20122: PUSH
20123: LD_VAR 0 5
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: ST_TO_ADDR
// exit ;
20134: GO 20548
// end ; _chassis := AvailableChassisList ( factory ) ;
20136: LD_ADDR_VAR 0 9
20140: PUSH
20141: LD_VAR 0 1
20145: PPUSH
20146: CALL_OW 475
20150: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20151: LD_ADDR_VAR 0 11
20155: PUSH
20156: LD_VAR 0 1
20160: PPUSH
20161: CALL_OW 476
20165: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20166: LD_ADDR_VAR 0 12
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 477
20180: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20181: LD_ADDR_VAR 0 10
20185: PUSH
20186: LD_VAR 0 1
20190: PPUSH
20191: CALL_OW 478
20195: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20196: LD_VAR 0 9
20200: NOT
20201: PUSH
20202: LD_VAR 0 11
20206: NOT
20207: OR
20208: PUSH
20209: LD_VAR 0 12
20213: NOT
20214: OR
20215: PUSH
20216: LD_VAR 0 10
20220: NOT
20221: OR
20222: IFFALSE 20257
// begin result := [ chassis , engine , control , weapon ] ;
20224: LD_ADDR_VAR 0 6
20228: PUSH
20229: LD_VAR 0 2
20233: PUSH
20234: LD_VAR 0 3
20238: PUSH
20239: LD_VAR 0 4
20243: PUSH
20244: LD_VAR 0 5
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: ST_TO_ADDR
// exit ;
20255: GO 20548
// end ; if not chassis in _chassis then
20257: LD_VAR 0 2
20261: PUSH
20262: LD_VAR 0 9
20266: IN
20267: NOT
20268: IFFALSE 20294
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20270: LD_ADDR_VAR 0 2
20274: PUSH
20275: LD_VAR 0 9
20279: PUSH
20280: LD_INT 1
20282: PPUSH
20283: LD_VAR 0 9
20287: PPUSH
20288: CALL_OW 12
20292: ARRAY
20293: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20294: LD_VAR 0 2
20298: PPUSH
20299: LD_VAR 0 3
20303: PPUSH
20304: CALL 20553 0 2
20308: NOT
20309: IFFALSE 20368
// repeat engine := _engine [ 1 ] ;
20311: LD_ADDR_VAR 0 3
20315: PUSH
20316: LD_VAR 0 11
20320: PUSH
20321: LD_INT 1
20323: ARRAY
20324: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20325: LD_ADDR_VAR 0 11
20329: PUSH
20330: LD_VAR 0 11
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 3
20342: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20343: LD_VAR 0 2
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: CALL 20553 0 2
20357: PUSH
20358: LD_VAR 0 11
20362: PUSH
20363: EMPTY
20364: EQUAL
20365: OR
20366: IFFALSE 20311
// if not control in _control then
20368: LD_VAR 0 4
20372: PUSH
20373: LD_VAR 0 12
20377: IN
20378: NOT
20379: IFFALSE 20405
// control := _control [ rand ( 1 , _control ) ] ;
20381: LD_ADDR_VAR 0 4
20385: PUSH
20386: LD_VAR 0 12
20390: PUSH
20391: LD_INT 1
20393: PPUSH
20394: LD_VAR 0 12
20398: PPUSH
20399: CALL_OW 12
20403: ARRAY
20404: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20405: LD_VAR 0 2
20409: PPUSH
20410: LD_VAR 0 5
20414: PPUSH
20415: CALL 20773 0 2
20419: NOT
20420: IFFALSE 20479
// repeat weapon := _weapon [ 1 ] ;
20422: LD_ADDR_VAR 0 5
20426: PUSH
20427: LD_VAR 0 10
20431: PUSH
20432: LD_INT 1
20434: ARRAY
20435: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20436: LD_ADDR_VAR 0 10
20440: PUSH
20441: LD_VAR 0 10
20445: PPUSH
20446: LD_INT 1
20448: PPUSH
20449: CALL_OW 3
20453: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20454: LD_VAR 0 2
20458: PPUSH
20459: LD_VAR 0 5
20463: PPUSH
20464: CALL 20773 0 2
20468: PUSH
20469: LD_VAR 0 10
20473: PUSH
20474: EMPTY
20475: EQUAL
20476: OR
20477: IFFALSE 20422
// result := [ ] ;
20479: LD_ADDR_VAR 0 6
20483: PUSH
20484: EMPTY
20485: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20486: LD_VAR 0 1
20490: PPUSH
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_VAR 0 4
20505: PPUSH
20506: LD_VAR 0 5
20510: PPUSH
20511: CALL_OW 448
20515: IFFALSE 20548
// result := [ chassis , engine , control , weapon ] ;
20517: LD_ADDR_VAR 0 6
20521: PUSH
20522: LD_VAR 0 2
20526: PUSH
20527: LD_VAR 0 3
20531: PUSH
20532: LD_VAR 0 4
20536: PUSH
20537: LD_VAR 0 5
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: ST_TO_ADDR
// end ;
20548: LD_VAR 0 6
20552: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20553: LD_INT 0
20555: PPUSH
// if not chassis or not engine then
20556: LD_VAR 0 1
20560: NOT
20561: PUSH
20562: LD_VAR 0 2
20566: NOT
20567: OR
20568: IFFALSE 20572
// exit ;
20570: GO 20768
// case engine of engine_solar :
20572: LD_VAR 0 2
20576: PUSH
20577: LD_INT 2
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 20623
20585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: LD_INT 11
20593: PUSH
20594: LD_INT 12
20596: PUSH
20597: LD_INT 13
20599: PUSH
20600: LD_INT 14
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 3
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 20752
20623: LD_INT 1
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20693
20631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20632: LD_ADDR_VAR 0 3
20636: PUSH
20637: LD_INT 11
20639: PUSH
20640: LD_INT 12
20642: PUSH
20643: LD_INT 13
20645: PUSH
20646: LD_INT 14
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: LD_INT 4
20660: PUSH
20661: LD_INT 5
20663: PUSH
20664: LD_INT 21
20666: PUSH
20667: LD_INT 23
20669: PUSH
20670: LD_INT 22
20672: PUSH
20673: LD_INT 24
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: ST_TO_ADDR
20691: GO 20752
20693: LD_INT 3
20695: DOUBLE
20696: EQUAL
20697: IFTRUE 20701
20699: GO 20751
20701: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: LD_INT 13
20709: PUSH
20710: LD_INT 14
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: LD_INT 3
20718: PUSH
20719: LD_INT 4
20721: PUSH
20722: LD_INT 5
20724: PUSH
20725: LD_INT 21
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 23
20733: PUSH
20734: LD_INT 24
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: ST_TO_ADDR
20749: GO 20752
20751: POP
// result := ( chassis in result ) ;
20752: LD_ADDR_VAR 0 3
20756: PUSH
20757: LD_VAR 0 1
20761: PUSH
20762: LD_VAR 0 3
20766: IN
20767: ST_TO_ADDR
// end ;
20768: LD_VAR 0 3
20772: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20773: LD_INT 0
20775: PPUSH
// if not chassis or not weapon then
20776: LD_VAR 0 1
20780: NOT
20781: PUSH
20782: LD_VAR 0 2
20786: NOT
20787: OR
20788: IFFALSE 20792
// exit ;
20790: GO 21818
// case weapon of us_machine_gun :
20792: LD_VAR 0 2
20796: PUSH
20797: LD_INT 2
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20835
20805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 3
20819: PUSH
20820: LD_INT 4
20822: PUSH
20823: LD_INT 5
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: ST_TO_ADDR
20833: GO 21802
20835: LD_INT 3
20837: DOUBLE
20838: EQUAL
20839: IFTRUE 20843
20841: GO 20873
20843: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20844: LD_ADDR_VAR 0 3
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 3
20857: PUSH
20858: LD_INT 4
20860: PUSH
20861: LD_INT 5
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: ST_TO_ADDR
20871: GO 21802
20873: LD_INT 11
20875: DOUBLE
20876: EQUAL
20877: IFTRUE 20881
20879: GO 20911
20881: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: LD_INT 4
20898: PUSH
20899: LD_INT 5
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: ST_TO_ADDR
20909: GO 21802
20911: LD_INT 4
20913: DOUBLE
20914: EQUAL
20915: IFTRUE 20919
20917: GO 20945
20919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20920: LD_ADDR_VAR 0 3
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: LD_INT 3
20930: PUSH
20931: LD_INT 4
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: ST_TO_ADDR
20943: GO 21802
20945: LD_INT 5
20947: DOUBLE
20948: EQUAL
20949: IFTRUE 20953
20951: GO 20979
20953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20954: LD_ADDR_VAR 0 3
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 3
20964: PUSH
20965: LD_INT 4
20967: PUSH
20968: LD_INT 5
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: ST_TO_ADDR
20977: GO 21802
20979: LD_INT 9
20981: DOUBLE
20982: EQUAL
20983: IFTRUE 20987
20985: GO 21013
20987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20988: LD_ADDR_VAR 0 3
20992: PUSH
20993: LD_INT 2
20995: PUSH
20996: LD_INT 3
20998: PUSH
20999: LD_INT 4
21001: PUSH
21002: LD_INT 5
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: ST_TO_ADDR
21011: GO 21802
21013: LD_INT 7
21015: DOUBLE
21016: EQUAL
21017: IFTRUE 21021
21019: GO 21047
21021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21022: LD_ADDR_VAR 0 3
21026: PUSH
21027: LD_INT 2
21029: PUSH
21030: LD_INT 3
21032: PUSH
21033: LD_INT 4
21035: PUSH
21036: LD_INT 5
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: ST_TO_ADDR
21045: GO 21802
21047: LD_INT 12
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21081
21055: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: LD_INT 3
21066: PUSH
21067: LD_INT 4
21069: PUSH
21070: LD_INT 5
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: ST_TO_ADDR
21079: GO 21802
21081: LD_INT 13
21083: DOUBLE
21084: EQUAL
21085: IFTRUE 21089
21087: GO 21115
21089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21090: LD_ADDR_VAR 0 3
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 3
21100: PUSH
21101: LD_INT 4
21103: PUSH
21104: LD_INT 5
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: ST_TO_ADDR
21113: GO 21802
21115: LD_INT 14
21117: DOUBLE
21118: EQUAL
21119: IFTRUE 21123
21121: GO 21141
21123: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21124: LD_ADDR_VAR 0 3
21128: PUSH
21129: LD_INT 4
21131: PUSH
21132: LD_INT 5
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: ST_TO_ADDR
21139: GO 21802
21141: LD_INT 6
21143: DOUBLE
21144: EQUAL
21145: IFTRUE 21149
21147: GO 21167
21149: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21150: LD_ADDR_VAR 0 3
21154: PUSH
21155: LD_INT 4
21157: PUSH
21158: LD_INT 5
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: ST_TO_ADDR
21165: GO 21802
21167: LD_INT 10
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21193
21175: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21176: LD_ADDR_VAR 0 3
21180: PUSH
21181: LD_INT 4
21183: PUSH
21184: LD_INT 5
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: ST_TO_ADDR
21191: GO 21802
21193: LD_INT 22
21195: DOUBLE
21196: EQUAL
21197: IFTRUE 21201
21199: GO 21227
21201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_INT 11
21209: PUSH
21210: LD_INT 12
21212: PUSH
21213: LD_INT 13
21215: PUSH
21216: LD_INT 14
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: ST_TO_ADDR
21225: GO 21802
21227: LD_INT 23
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21261
21235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21236: LD_ADDR_VAR 0 3
21240: PUSH
21241: LD_INT 11
21243: PUSH
21244: LD_INT 12
21246: PUSH
21247: LD_INT 13
21249: PUSH
21250: LD_INT 14
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: ST_TO_ADDR
21259: GO 21802
21261: LD_INT 24
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21295
21269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21270: LD_ADDR_VAR 0 3
21274: PUSH
21275: LD_INT 11
21277: PUSH
21278: LD_INT 12
21280: PUSH
21281: LD_INT 13
21283: PUSH
21284: LD_INT 14
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: ST_TO_ADDR
21293: GO 21802
21295: LD_INT 30
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21329
21303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21304: LD_ADDR_VAR 0 3
21308: PUSH
21309: LD_INT 11
21311: PUSH
21312: LD_INT 12
21314: PUSH
21315: LD_INT 13
21317: PUSH
21318: LD_INT 14
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: ST_TO_ADDR
21327: GO 21802
21329: LD_INT 25
21331: DOUBLE
21332: EQUAL
21333: IFTRUE 21337
21335: GO 21355
21337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21338: LD_ADDR_VAR 0 3
21342: PUSH
21343: LD_INT 13
21345: PUSH
21346: LD_INT 14
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: ST_TO_ADDR
21353: GO 21802
21355: LD_INT 27
21357: DOUBLE
21358: EQUAL
21359: IFTRUE 21363
21361: GO 21381
21363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21364: LD_ADDR_VAR 0 3
21368: PUSH
21369: LD_INT 13
21371: PUSH
21372: LD_INT 14
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: ST_TO_ADDR
21379: GO 21802
21381: LD_INT 28
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21407
21389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21390: LD_ADDR_VAR 0 3
21394: PUSH
21395: LD_INT 13
21397: PUSH
21398: LD_INT 14
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: ST_TO_ADDR
21405: GO 21802
21407: LD_INT 29
21409: DOUBLE
21410: EQUAL
21411: IFTRUE 21415
21413: GO 21433
21415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21416: LD_ADDR_VAR 0 3
21420: PUSH
21421: LD_INT 13
21423: PUSH
21424: LD_INT 14
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: ST_TO_ADDR
21431: GO 21802
21433: LD_INT 31
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21459
21441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_INT 13
21449: PUSH
21450: LD_INT 14
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: ST_TO_ADDR
21457: GO 21802
21459: LD_INT 26
21461: DOUBLE
21462: EQUAL
21463: IFTRUE 21467
21465: GO 21485
21467: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_INT 13
21475: PUSH
21476: LD_INT 14
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: ST_TO_ADDR
21483: GO 21802
21485: LD_INT 42
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21519
21493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21494: LD_ADDR_VAR 0 3
21498: PUSH
21499: LD_INT 21
21501: PUSH
21502: LD_INT 22
21504: PUSH
21505: LD_INT 23
21507: PUSH
21508: LD_INT 24
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: ST_TO_ADDR
21517: GO 21802
21519: LD_INT 43
21521: DOUBLE
21522: EQUAL
21523: IFTRUE 21527
21525: GO 21553
21527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21528: LD_ADDR_VAR 0 3
21532: PUSH
21533: LD_INT 21
21535: PUSH
21536: LD_INT 22
21538: PUSH
21539: LD_INT 23
21541: PUSH
21542: LD_INT 24
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: ST_TO_ADDR
21551: GO 21802
21553: LD_INT 44
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21561
21559: GO 21587
21561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: LD_INT 21
21569: PUSH
21570: LD_INT 22
21572: PUSH
21573: LD_INT 23
21575: PUSH
21576: LD_INT 24
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: ST_TO_ADDR
21585: GO 21802
21587: LD_INT 45
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21621
21595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21596: LD_ADDR_VAR 0 3
21600: PUSH
21601: LD_INT 21
21603: PUSH
21604: LD_INT 22
21606: PUSH
21607: LD_INT 23
21609: PUSH
21610: LD_INT 24
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: ST_TO_ADDR
21619: GO 21802
21621: LD_INT 49
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21655
21629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_INT 21
21637: PUSH
21638: LD_INT 22
21640: PUSH
21641: LD_INT 23
21643: PUSH
21644: LD_INT 24
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: ST_TO_ADDR
21653: GO 21802
21655: LD_INT 51
21657: DOUBLE
21658: EQUAL
21659: IFTRUE 21663
21661: GO 21689
21663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21664: LD_ADDR_VAR 0 3
21668: PUSH
21669: LD_INT 21
21671: PUSH
21672: LD_INT 22
21674: PUSH
21675: LD_INT 23
21677: PUSH
21678: LD_INT 24
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: ST_TO_ADDR
21687: GO 21802
21689: LD_INT 52
21691: DOUBLE
21692: EQUAL
21693: IFTRUE 21697
21695: GO 21723
21697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21698: LD_ADDR_VAR 0 3
21702: PUSH
21703: LD_INT 21
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_INT 23
21711: PUSH
21712: LD_INT 24
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: ST_TO_ADDR
21721: GO 21802
21723: LD_INT 53
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21749
21731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_INT 23
21739: PUSH
21740: LD_INT 24
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: ST_TO_ADDR
21747: GO 21802
21749: LD_INT 46
21751: DOUBLE
21752: EQUAL
21753: IFTRUE 21757
21755: GO 21775
21757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21758: LD_ADDR_VAR 0 3
21762: PUSH
21763: LD_INT 23
21765: PUSH
21766: LD_INT 24
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: ST_TO_ADDR
21773: GO 21802
21775: LD_INT 47
21777: DOUBLE
21778: EQUAL
21779: IFTRUE 21783
21781: GO 21801
21783: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21784: LD_ADDR_VAR 0 3
21788: PUSH
21789: LD_INT 23
21791: PUSH
21792: LD_INT 24
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: ST_TO_ADDR
21799: GO 21802
21801: POP
// result := ( chassis in result ) ;
21802: LD_ADDR_VAR 0 3
21806: PUSH
21807: LD_VAR 0 1
21811: PUSH
21812: LD_VAR 0 3
21816: IN
21817: ST_TO_ADDR
// end ;
21818: LD_VAR 0 3
21822: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21823: LD_INT 0
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
// result := array ;
21832: LD_ADDR_VAR 0 5
21836: PUSH
21837: LD_VAR 0 1
21841: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21842: LD_VAR 0 1
21846: NOT
21847: PUSH
21848: LD_VAR 0 2
21852: NOT
21853: OR
21854: PUSH
21855: LD_VAR 0 3
21859: NOT
21860: OR
21861: PUSH
21862: LD_VAR 0 2
21866: PUSH
21867: LD_VAR 0 1
21871: GREATER
21872: OR
21873: PUSH
21874: LD_VAR 0 3
21878: PUSH
21879: LD_VAR 0 1
21883: GREATER
21884: OR
21885: IFFALSE 21889
// exit ;
21887: GO 22185
// if direction then
21889: LD_VAR 0 4
21893: IFFALSE 21957
// begin d := 1 ;
21895: LD_ADDR_VAR 0 9
21899: PUSH
21900: LD_INT 1
21902: ST_TO_ADDR
// if i_from > i_to then
21903: LD_VAR 0 2
21907: PUSH
21908: LD_VAR 0 3
21912: GREATER
21913: IFFALSE 21939
// length := ( array - i_from ) + i_to else
21915: LD_ADDR_VAR 0 11
21919: PUSH
21920: LD_VAR 0 1
21924: PUSH
21925: LD_VAR 0 2
21929: MINUS
21930: PUSH
21931: LD_VAR 0 3
21935: PLUS
21936: ST_TO_ADDR
21937: GO 21955
// length := i_to - i_from ;
21939: LD_ADDR_VAR 0 11
21943: PUSH
21944: LD_VAR 0 3
21948: PUSH
21949: LD_VAR 0 2
21953: MINUS
21954: ST_TO_ADDR
// end else
21955: GO 22018
// begin d := - 1 ;
21957: LD_ADDR_VAR 0 9
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: ST_TO_ADDR
// if i_from > i_to then
21966: LD_VAR 0 2
21970: PUSH
21971: LD_VAR 0 3
21975: GREATER
21976: IFFALSE 21996
// length := i_from - i_to else
21978: LD_ADDR_VAR 0 11
21982: PUSH
21983: LD_VAR 0 2
21987: PUSH
21988: LD_VAR 0 3
21992: MINUS
21993: ST_TO_ADDR
21994: GO 22018
// length := ( array - i_to ) + i_from ;
21996: LD_ADDR_VAR 0 11
22000: PUSH
22001: LD_VAR 0 1
22005: PUSH
22006: LD_VAR 0 3
22010: MINUS
22011: PUSH
22012: LD_VAR 0 2
22016: PLUS
22017: ST_TO_ADDR
// end ; if not length then
22018: LD_VAR 0 11
22022: NOT
22023: IFFALSE 22027
// exit ;
22025: GO 22185
// tmp := array ;
22027: LD_ADDR_VAR 0 10
22031: PUSH
22032: LD_VAR 0 1
22036: ST_TO_ADDR
// for i = 1 to length do
22037: LD_ADDR_VAR 0 6
22041: PUSH
22042: DOUBLE
22043: LD_INT 1
22045: DEC
22046: ST_TO_ADDR
22047: LD_VAR 0 11
22051: PUSH
22052: FOR_TO
22053: IFFALSE 22173
// begin for j = 1 to array do
22055: LD_ADDR_VAR 0 7
22059: PUSH
22060: DOUBLE
22061: LD_INT 1
22063: DEC
22064: ST_TO_ADDR
22065: LD_VAR 0 1
22069: PUSH
22070: FOR_TO
22071: IFFALSE 22159
// begin k := j + d ;
22073: LD_ADDR_VAR 0 8
22077: PUSH
22078: LD_VAR 0 7
22082: PUSH
22083: LD_VAR 0 9
22087: PLUS
22088: ST_TO_ADDR
// if k > array then
22089: LD_VAR 0 8
22093: PUSH
22094: LD_VAR 0 1
22098: GREATER
22099: IFFALSE 22109
// k := 1 ;
22101: LD_ADDR_VAR 0 8
22105: PUSH
22106: LD_INT 1
22108: ST_TO_ADDR
// if not k then
22109: LD_VAR 0 8
22113: NOT
22114: IFFALSE 22126
// k := array ;
22116: LD_ADDR_VAR 0 8
22120: PUSH
22121: LD_VAR 0 1
22125: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22126: LD_ADDR_VAR 0 10
22130: PUSH
22131: LD_VAR 0 10
22135: PPUSH
22136: LD_VAR 0 8
22140: PPUSH
22141: LD_VAR 0 1
22145: PUSH
22146: LD_VAR 0 7
22150: ARRAY
22151: PPUSH
22152: CALL_OW 1
22156: ST_TO_ADDR
// end ;
22157: GO 22070
22159: POP
22160: POP
// array := tmp ;
22161: LD_ADDR_VAR 0 1
22165: PUSH
22166: LD_VAR 0 10
22170: ST_TO_ADDR
// end ;
22171: GO 22052
22173: POP
22174: POP
// result := array ;
22175: LD_ADDR_VAR 0 5
22179: PUSH
22180: LD_VAR 0 1
22184: ST_TO_ADDR
// end ;
22185: LD_VAR 0 5
22189: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22190: LD_INT 0
22192: PPUSH
22193: PPUSH
// result := 0 ;
22194: LD_ADDR_VAR 0 3
22198: PUSH
22199: LD_INT 0
22201: ST_TO_ADDR
// if not array or not value in array then
22202: LD_VAR 0 1
22206: NOT
22207: PUSH
22208: LD_VAR 0 2
22212: PUSH
22213: LD_VAR 0 1
22217: IN
22218: NOT
22219: OR
22220: IFFALSE 22224
// exit ;
22222: GO 22278
// for i = 1 to array do
22224: LD_ADDR_VAR 0 4
22228: PUSH
22229: DOUBLE
22230: LD_INT 1
22232: DEC
22233: ST_TO_ADDR
22234: LD_VAR 0 1
22238: PUSH
22239: FOR_TO
22240: IFFALSE 22276
// if value = array [ i ] then
22242: LD_VAR 0 2
22246: PUSH
22247: LD_VAR 0 1
22251: PUSH
22252: LD_VAR 0 4
22256: ARRAY
22257: EQUAL
22258: IFFALSE 22274
// begin result := i ;
22260: LD_ADDR_VAR 0 3
22264: PUSH
22265: LD_VAR 0 4
22269: ST_TO_ADDR
// exit ;
22270: POP
22271: POP
22272: GO 22278
// end ;
22274: GO 22239
22276: POP
22277: POP
// end ;
22278: LD_VAR 0 3
22282: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22283: LD_INT 0
22285: PPUSH
// vc_chassis := chassis ;
22286: LD_ADDR_OWVAR 37
22290: PUSH
22291: LD_VAR 0 1
22295: ST_TO_ADDR
// vc_engine := engine ;
22296: LD_ADDR_OWVAR 39
22300: PUSH
22301: LD_VAR 0 2
22305: ST_TO_ADDR
// vc_control := control ;
22306: LD_ADDR_OWVAR 38
22310: PUSH
22311: LD_VAR 0 3
22315: ST_TO_ADDR
// vc_weapon := weapon ;
22316: LD_ADDR_OWVAR 40
22320: PUSH
22321: LD_VAR 0 4
22325: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22326: LD_ADDR_OWVAR 41
22330: PUSH
22331: LD_VAR 0 5
22335: ST_TO_ADDR
// end ;
22336: LD_VAR 0 6
22340: RET
// export function WantPlant ( unit ) ; var task ; begin
22341: LD_INT 0
22343: PPUSH
22344: PPUSH
// result := false ;
22345: LD_ADDR_VAR 0 2
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22353: LD_ADDR_VAR 0 3
22357: PUSH
22358: LD_VAR 0 1
22362: PPUSH
22363: CALL_OW 437
22367: ST_TO_ADDR
// if task then
22368: LD_VAR 0 3
22372: IFFALSE 22400
// if task [ 1 ] [ 1 ] = p then
22374: LD_VAR 0 3
22378: PUSH
22379: LD_INT 1
22381: ARRAY
22382: PUSH
22383: LD_INT 1
22385: ARRAY
22386: PUSH
22387: LD_STRING p
22389: EQUAL
22390: IFFALSE 22400
// result := true ;
22392: LD_ADDR_VAR 0 2
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// end ;
22400: LD_VAR 0 2
22404: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22405: LD_INT 0
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
// if pos < 1 then
22411: LD_VAR 0 2
22415: PUSH
22416: LD_INT 1
22418: LESS
22419: IFFALSE 22423
// exit ;
22421: GO 22726
// if pos = 1 then
22423: LD_VAR 0 2
22427: PUSH
22428: LD_INT 1
22430: EQUAL
22431: IFFALSE 22464
// result := Replace ( arr , pos [ 1 ] , value ) else
22433: LD_ADDR_VAR 0 4
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: LD_VAR 0 2
22447: PUSH
22448: LD_INT 1
22450: ARRAY
22451: PPUSH
22452: LD_VAR 0 3
22456: PPUSH
22457: CALL_OW 1
22461: ST_TO_ADDR
22462: GO 22726
// begin tmp := arr ;
22464: LD_ADDR_VAR 0 6
22468: PUSH
22469: LD_VAR 0 1
22473: ST_TO_ADDR
// s_arr := [ tmp ] ;
22474: LD_ADDR_VAR 0 7
22478: PUSH
22479: LD_VAR 0 6
22483: PUSH
22484: EMPTY
22485: LIST
22486: ST_TO_ADDR
// for i = 1 to pos - 1 do
22487: LD_ADDR_VAR 0 5
22491: PUSH
22492: DOUBLE
22493: LD_INT 1
22495: DEC
22496: ST_TO_ADDR
22497: LD_VAR 0 2
22501: PUSH
22502: LD_INT 1
22504: MINUS
22505: PUSH
22506: FOR_TO
22507: IFFALSE 22552
// begin tmp := tmp [ pos [ i ] ] ;
22509: LD_ADDR_VAR 0 6
22513: PUSH
22514: LD_VAR 0 6
22518: PUSH
22519: LD_VAR 0 2
22523: PUSH
22524: LD_VAR 0 5
22528: ARRAY
22529: ARRAY
22530: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22531: LD_ADDR_VAR 0 7
22535: PUSH
22536: LD_VAR 0 7
22540: PUSH
22541: LD_VAR 0 6
22545: PUSH
22546: EMPTY
22547: LIST
22548: ADD
22549: ST_TO_ADDR
// end ;
22550: GO 22506
22552: POP
22553: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22554: LD_ADDR_VAR 0 6
22558: PUSH
22559: LD_VAR 0 6
22563: PPUSH
22564: LD_VAR 0 2
22568: PUSH
22569: LD_VAR 0 2
22573: ARRAY
22574: PPUSH
22575: LD_VAR 0 3
22579: PPUSH
22580: CALL_OW 1
22584: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22585: LD_ADDR_VAR 0 7
22589: PUSH
22590: LD_VAR 0 7
22594: PPUSH
22595: LD_VAR 0 7
22599: PPUSH
22600: LD_VAR 0 6
22604: PPUSH
22605: CALL_OW 1
22609: ST_TO_ADDR
// for i = s_arr downto 2 do
22610: LD_ADDR_VAR 0 5
22614: PUSH
22615: DOUBLE
22616: LD_VAR 0 7
22620: INC
22621: ST_TO_ADDR
22622: LD_INT 2
22624: PUSH
22625: FOR_DOWNTO
22626: IFFALSE 22710
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22628: LD_ADDR_VAR 0 6
22632: PUSH
22633: LD_VAR 0 7
22637: PUSH
22638: LD_VAR 0 5
22642: PUSH
22643: LD_INT 1
22645: MINUS
22646: ARRAY
22647: PPUSH
22648: LD_VAR 0 2
22652: PUSH
22653: LD_VAR 0 5
22657: PUSH
22658: LD_INT 1
22660: MINUS
22661: ARRAY
22662: PPUSH
22663: LD_VAR 0 7
22667: PUSH
22668: LD_VAR 0 5
22672: ARRAY
22673: PPUSH
22674: CALL_OW 1
22678: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22679: LD_ADDR_VAR 0 7
22683: PUSH
22684: LD_VAR 0 7
22688: PPUSH
22689: LD_VAR 0 5
22693: PUSH
22694: LD_INT 1
22696: MINUS
22697: PPUSH
22698: LD_VAR 0 6
22702: PPUSH
22703: CALL_OW 1
22707: ST_TO_ADDR
// end ;
22708: GO 22625
22710: POP
22711: POP
// result := s_arr [ 1 ] ;
22712: LD_ADDR_VAR 0 4
22716: PUSH
22717: LD_VAR 0 7
22721: PUSH
22722: LD_INT 1
22724: ARRAY
22725: ST_TO_ADDR
// end ; end ;
22726: LD_VAR 0 4
22730: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22731: LD_INT 0
22733: PPUSH
22734: PPUSH
// if not list then
22735: LD_VAR 0 1
22739: NOT
22740: IFFALSE 22744
// exit ;
22742: GO 22835
// i := list [ pos1 ] ;
22744: LD_ADDR_VAR 0 5
22748: PUSH
22749: LD_VAR 0 1
22753: PUSH
22754: LD_VAR 0 2
22758: ARRAY
22759: ST_TO_ADDR
// if not i then
22760: LD_VAR 0 5
22764: NOT
22765: IFFALSE 22769
// exit ;
22767: GO 22835
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22769: LD_ADDR_VAR 0 1
22773: PUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: LD_VAR 0 2
22783: PPUSH
22784: LD_VAR 0 1
22788: PUSH
22789: LD_VAR 0 3
22793: ARRAY
22794: PPUSH
22795: CALL_OW 1
22799: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22800: LD_ADDR_VAR 0 1
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: LD_VAR 0 5
22819: PPUSH
22820: CALL_OW 1
22824: ST_TO_ADDR
// result := list ;
22825: LD_ADDR_VAR 0 4
22829: PUSH
22830: LD_VAR 0 1
22834: ST_TO_ADDR
// end ;
22835: LD_VAR 0 4
22839: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22840: LD_INT 0
22842: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22843: LD_ADDR_VAR 0 5
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 250
22857: PPUSH
22858: LD_VAR 0 1
22862: PPUSH
22863: CALL_OW 251
22867: PPUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_VAR 0 4
22882: PPUSH
22883: CALL 22893 0 5
22887: ST_TO_ADDR
// end ;
22888: LD_VAR 0 5
22892: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22893: LD_INT 0
22895: PPUSH
22896: PPUSH
22897: PPUSH
22898: PPUSH
// if not list then
22899: LD_VAR 0 3
22903: NOT
22904: IFFALSE 22908
// exit ;
22906: GO 23296
// result := [ ] ;
22908: LD_ADDR_VAR 0 6
22912: PUSH
22913: EMPTY
22914: ST_TO_ADDR
// for i in list do
22915: LD_ADDR_VAR 0 7
22919: PUSH
22920: LD_VAR 0 3
22924: PUSH
22925: FOR_IN
22926: IFFALSE 23128
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22928: LD_ADDR_VAR 0 9
22932: PUSH
22933: LD_VAR 0 7
22937: PPUSH
22938: LD_VAR 0 1
22942: PPUSH
22943: LD_VAR 0 2
22947: PPUSH
22948: CALL_OW 297
22952: ST_TO_ADDR
// if not result then
22953: LD_VAR 0 6
22957: NOT
22958: IFFALSE 22984
// result := [ [ i , tmp ] ] else
22960: LD_ADDR_VAR 0 6
22964: PUSH
22965: LD_VAR 0 7
22969: PUSH
22970: LD_VAR 0 9
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: ST_TO_ADDR
22982: GO 23126
// begin if result [ result ] [ 2 ] < tmp then
22984: LD_VAR 0 6
22988: PUSH
22989: LD_VAR 0 6
22993: ARRAY
22994: PUSH
22995: LD_INT 2
22997: ARRAY
22998: PUSH
22999: LD_VAR 0 9
23003: LESS
23004: IFFALSE 23046
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23006: LD_ADDR_VAR 0 6
23010: PUSH
23011: LD_VAR 0 6
23015: PPUSH
23016: LD_VAR 0 6
23020: PUSH
23021: LD_INT 1
23023: PLUS
23024: PPUSH
23025: LD_VAR 0 7
23029: PUSH
23030: LD_VAR 0 9
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PPUSH
23039: CALL_OW 2
23043: ST_TO_ADDR
23044: GO 23126
// for j = 1 to result do
23046: LD_ADDR_VAR 0 8
23050: PUSH
23051: DOUBLE
23052: LD_INT 1
23054: DEC
23055: ST_TO_ADDR
23056: LD_VAR 0 6
23060: PUSH
23061: FOR_TO
23062: IFFALSE 23124
// begin if tmp < result [ j ] [ 2 ] then
23064: LD_VAR 0 9
23068: PUSH
23069: LD_VAR 0 6
23073: PUSH
23074: LD_VAR 0 8
23078: ARRAY
23079: PUSH
23080: LD_INT 2
23082: ARRAY
23083: LESS
23084: IFFALSE 23122
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23086: LD_ADDR_VAR 0 6
23090: PUSH
23091: LD_VAR 0 6
23095: PPUSH
23096: LD_VAR 0 8
23100: PPUSH
23101: LD_VAR 0 7
23105: PUSH
23106: LD_VAR 0 9
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PPUSH
23115: CALL_OW 2
23119: ST_TO_ADDR
// break ;
23120: GO 23124
// end ; end ;
23122: GO 23061
23124: POP
23125: POP
// end ; end ;
23126: GO 22925
23128: POP
23129: POP
// if result and not asc then
23130: LD_VAR 0 6
23134: PUSH
23135: LD_VAR 0 4
23139: NOT
23140: AND
23141: IFFALSE 23216
// begin tmp := result ;
23143: LD_ADDR_VAR 0 9
23147: PUSH
23148: LD_VAR 0 6
23152: ST_TO_ADDR
// for i = tmp downto 1 do
23153: LD_ADDR_VAR 0 7
23157: PUSH
23158: DOUBLE
23159: LD_VAR 0 9
23163: INC
23164: ST_TO_ADDR
23165: LD_INT 1
23167: PUSH
23168: FOR_DOWNTO
23169: IFFALSE 23214
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23171: LD_ADDR_VAR 0 6
23175: PUSH
23176: LD_VAR 0 6
23180: PPUSH
23181: LD_VAR 0 9
23185: PUSH
23186: LD_VAR 0 7
23190: MINUS
23191: PUSH
23192: LD_INT 1
23194: PLUS
23195: PPUSH
23196: LD_VAR 0 9
23200: PUSH
23201: LD_VAR 0 7
23205: ARRAY
23206: PPUSH
23207: CALL_OW 1
23211: ST_TO_ADDR
23212: GO 23168
23214: POP
23215: POP
// end ; tmp := [ ] ;
23216: LD_ADDR_VAR 0 9
23220: PUSH
23221: EMPTY
23222: ST_TO_ADDR
// if mode then
23223: LD_VAR 0 5
23227: IFFALSE 23296
// begin for i = 1 to result do
23229: LD_ADDR_VAR 0 7
23233: PUSH
23234: DOUBLE
23235: LD_INT 1
23237: DEC
23238: ST_TO_ADDR
23239: LD_VAR 0 6
23243: PUSH
23244: FOR_TO
23245: IFFALSE 23284
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23247: LD_ADDR_VAR 0 9
23251: PUSH
23252: LD_VAR 0 9
23256: PPUSH
23257: LD_VAR 0 7
23261: PPUSH
23262: LD_VAR 0 6
23266: PUSH
23267: LD_VAR 0 7
23271: ARRAY
23272: PUSH
23273: LD_INT 1
23275: ARRAY
23276: PPUSH
23277: CALL_OW 1
23281: ST_TO_ADDR
23282: GO 23244
23284: POP
23285: POP
// result := tmp ;
23286: LD_ADDR_VAR 0 6
23290: PUSH
23291: LD_VAR 0 9
23295: ST_TO_ADDR
// end ; end ;
23296: LD_VAR 0 6
23300: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23301: LD_INT 0
23303: PPUSH
23304: PPUSH
23305: PPUSH
23306: PPUSH
23307: PPUSH
23308: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23309: LD_ADDR_VAR 0 5
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// if not x or not y then
23331: LD_VAR 0 2
23335: NOT
23336: PUSH
23337: LD_VAR 0 3
23341: NOT
23342: OR
23343: IFFALSE 23347
// exit ;
23345: GO 24993
// if not range then
23347: LD_VAR 0 4
23351: NOT
23352: IFFALSE 23362
// range := 10 ;
23354: LD_ADDR_VAR 0 4
23358: PUSH
23359: LD_INT 10
23361: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23362: LD_ADDR_VAR 0 8
23366: PUSH
23367: LD_INT 81
23369: PUSH
23370: LD_VAR 0 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 92
23381: PUSH
23382: LD_VAR 0 2
23386: PUSH
23387: LD_VAR 0 3
23391: PUSH
23392: LD_VAR 0 4
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 3
23405: PUSH
23406: LD_INT 21
23408: PUSH
23409: LD_INT 3
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: PPUSH
23425: CALL_OW 69
23429: ST_TO_ADDR
// if not tmp then
23430: LD_VAR 0 8
23434: NOT
23435: IFFALSE 23439
// exit ;
23437: GO 24993
// for i in tmp do
23439: LD_ADDR_VAR 0 6
23443: PUSH
23444: LD_VAR 0 8
23448: PUSH
23449: FOR_IN
23450: IFFALSE 24968
// begin points := [ 0 , 0 , 0 ] ;
23452: LD_ADDR_VAR 0 9
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: ST_TO_ADDR
// bpoints := 1 ;
23471: LD_ADDR_VAR 0 10
23475: PUSH
23476: LD_INT 1
23478: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23479: LD_VAR 0 6
23483: PPUSH
23484: CALL_OW 247
23488: PUSH
23489: LD_INT 1
23491: DOUBLE
23492: EQUAL
23493: IFTRUE 23497
23495: GO 24075
23497: POP
// begin if GetClass ( i ) = 1 then
23498: LD_VAR 0 6
23502: PPUSH
23503: CALL_OW 257
23507: PUSH
23508: LD_INT 1
23510: EQUAL
23511: IFFALSE 23532
// points := [ 10 , 5 , 3 ] ;
23513: LD_ADDR_VAR 0 9
23517: PUSH
23518: LD_INT 10
23520: PUSH
23521: LD_INT 5
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23532: LD_VAR 0 6
23536: PPUSH
23537: CALL_OW 257
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: LD_INT 4
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: IN
23556: IFFALSE 23577
// points := [ 3 , 2 , 1 ] ;
23558: LD_ADDR_VAR 0 9
23562: PUSH
23563: LD_INT 3
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23577: LD_VAR 0 6
23581: PPUSH
23582: CALL_OW 257
23586: PUSH
23587: LD_INT 5
23589: EQUAL
23590: IFFALSE 23611
// points := [ 130 , 5 , 2 ] ;
23592: LD_ADDR_VAR 0 9
23596: PUSH
23597: LD_INT 130
23599: PUSH
23600: LD_INT 5
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: LIST
23610: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23611: LD_VAR 0 6
23615: PPUSH
23616: CALL_OW 257
23620: PUSH
23621: LD_INT 8
23623: EQUAL
23624: IFFALSE 23645
// points := [ 35 , 35 , 30 ] ;
23626: LD_ADDR_VAR 0 9
23630: PUSH
23631: LD_INT 35
23633: PUSH
23634: LD_INT 35
23636: PUSH
23637: LD_INT 30
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23645: LD_VAR 0 6
23649: PPUSH
23650: CALL_OW 257
23654: PUSH
23655: LD_INT 9
23657: EQUAL
23658: IFFALSE 23679
// points := [ 20 , 55 , 40 ] ;
23660: LD_ADDR_VAR 0 9
23664: PUSH
23665: LD_INT 20
23667: PUSH
23668: LD_INT 55
23670: PUSH
23671: LD_INT 40
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23679: LD_VAR 0 6
23683: PPUSH
23684: CALL_OW 257
23688: PUSH
23689: LD_INT 12
23691: PUSH
23692: LD_INT 16
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: IN
23699: IFFALSE 23720
// points := [ 5 , 3 , 2 ] ;
23701: LD_ADDR_VAR 0 9
23705: PUSH
23706: LD_INT 5
23708: PUSH
23709: LD_INT 3
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23720: LD_VAR 0 6
23724: PPUSH
23725: CALL_OW 257
23729: PUSH
23730: LD_INT 17
23732: EQUAL
23733: IFFALSE 23754
// points := [ 100 , 50 , 75 ] ;
23735: LD_ADDR_VAR 0 9
23739: PUSH
23740: LD_INT 100
23742: PUSH
23743: LD_INT 50
23745: PUSH
23746: LD_INT 75
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23754: LD_VAR 0 6
23758: PPUSH
23759: CALL_OW 257
23763: PUSH
23764: LD_INT 15
23766: EQUAL
23767: IFFALSE 23788
// points := [ 10 , 5 , 3 ] ;
23769: LD_ADDR_VAR 0 9
23773: PUSH
23774: LD_INT 10
23776: PUSH
23777: LD_INT 5
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23788: LD_VAR 0 6
23792: PPUSH
23793: CALL_OW 257
23797: PUSH
23798: LD_INT 14
23800: EQUAL
23801: IFFALSE 23822
// points := [ 10 , 0 , 0 ] ;
23803: LD_ADDR_VAR 0 9
23807: PUSH
23808: LD_INT 10
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23822: LD_VAR 0 6
23826: PPUSH
23827: CALL_OW 257
23831: PUSH
23832: LD_INT 11
23834: EQUAL
23835: IFFALSE 23856
// points := [ 30 , 10 , 5 ] ;
23837: LD_ADDR_VAR 0 9
23841: PUSH
23842: LD_INT 30
23844: PUSH
23845: LD_INT 10
23847: PUSH
23848: LD_INT 5
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23856: LD_VAR 0 1
23860: PPUSH
23861: LD_INT 5
23863: PPUSH
23864: CALL_OW 321
23868: PUSH
23869: LD_INT 2
23871: EQUAL
23872: IFFALSE 23889
// bpoints := bpoints * 1.8 ;
23874: LD_ADDR_VAR 0 10
23878: PUSH
23879: LD_VAR 0 10
23883: PUSH
23884: LD_REAL  1.80000000000000E+0000
23887: MUL
23888: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23889: LD_VAR 0 6
23893: PPUSH
23894: CALL_OW 257
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 3
23907: PUSH
23908: LD_INT 4
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: IN
23917: PUSH
23918: LD_VAR 0 1
23922: PPUSH
23923: LD_INT 51
23925: PPUSH
23926: CALL_OW 321
23930: PUSH
23931: LD_INT 2
23933: EQUAL
23934: AND
23935: IFFALSE 23952
// bpoints := bpoints * 1.2 ;
23937: LD_ADDR_VAR 0 10
23941: PUSH
23942: LD_VAR 0 10
23946: PUSH
23947: LD_REAL  1.20000000000000E+0000
23950: MUL
23951: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23952: LD_VAR 0 6
23956: PPUSH
23957: CALL_OW 257
23961: PUSH
23962: LD_INT 5
23964: PUSH
23965: LD_INT 7
23967: PUSH
23968: LD_INT 9
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: IN
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: LD_INT 52
23984: PPUSH
23985: CALL_OW 321
23989: PUSH
23990: LD_INT 2
23992: EQUAL
23993: AND
23994: IFFALSE 24011
// bpoints := bpoints * 1.5 ;
23996: LD_ADDR_VAR 0 10
24000: PUSH
24001: LD_VAR 0 10
24005: PUSH
24006: LD_REAL  1.50000000000000E+0000
24009: MUL
24010: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24011: LD_VAR 0 1
24015: PPUSH
24016: LD_INT 66
24018: PPUSH
24019: CALL_OW 321
24023: PUSH
24024: LD_INT 2
24026: EQUAL
24027: IFFALSE 24044
// bpoints := bpoints * 1.1 ;
24029: LD_ADDR_VAR 0 10
24033: PUSH
24034: LD_VAR 0 10
24038: PUSH
24039: LD_REAL  1.10000000000000E+0000
24042: MUL
24043: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24044: LD_ADDR_VAR 0 10
24048: PUSH
24049: LD_VAR 0 10
24053: PUSH
24054: LD_VAR 0 6
24058: PPUSH
24059: LD_INT 1
24061: PPUSH
24062: CALL_OW 259
24066: PUSH
24067: LD_REAL  1.15000000000000E+0000
24070: MUL
24071: MUL
24072: ST_TO_ADDR
// end ; unit_vehicle :
24073: GO 24897
24075: LD_INT 2
24077: DOUBLE
24078: EQUAL
24079: IFTRUE 24083
24081: GO 24885
24083: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24084: LD_VAR 0 6
24088: PPUSH
24089: CALL_OW 264
24093: PUSH
24094: LD_INT 2
24096: PUSH
24097: LD_INT 42
24099: PUSH
24100: LD_INT 24
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: IN
24108: IFFALSE 24129
// points := [ 25 , 5 , 3 ] ;
24110: LD_ADDR_VAR 0 9
24114: PUSH
24115: LD_INT 25
24117: PUSH
24118: LD_INT 5
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24129: LD_VAR 0 6
24133: PPUSH
24134: CALL_OW 264
24138: PUSH
24139: LD_INT 4
24141: PUSH
24142: LD_INT 43
24144: PUSH
24145: LD_INT 25
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: IN
24153: IFFALSE 24174
// points := [ 40 , 15 , 5 ] ;
24155: LD_ADDR_VAR 0 9
24159: PUSH
24160: LD_INT 40
24162: PUSH
24163: LD_INT 15
24165: PUSH
24166: LD_INT 5
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24174: LD_VAR 0 6
24178: PPUSH
24179: CALL_OW 264
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: LD_INT 23
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: IN
24194: IFFALSE 24215
// points := [ 7 , 25 , 8 ] ;
24196: LD_ADDR_VAR 0 9
24200: PUSH
24201: LD_INT 7
24203: PUSH
24204: LD_INT 25
24206: PUSH
24207: LD_INT 8
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24215: LD_VAR 0 6
24219: PPUSH
24220: CALL_OW 264
24224: PUSH
24225: LD_INT 5
24227: PUSH
24228: LD_INT 27
24230: PUSH
24231: LD_INT 44
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: IN
24239: IFFALSE 24260
// points := [ 14 , 50 , 16 ] ;
24241: LD_ADDR_VAR 0 9
24245: PUSH
24246: LD_INT 14
24248: PUSH
24249: LD_INT 50
24251: PUSH
24252: LD_INT 16
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24260: LD_VAR 0 6
24264: PPUSH
24265: CALL_OW 264
24269: PUSH
24270: LD_INT 6
24272: PUSH
24273: LD_INT 46
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: IN
24280: IFFALSE 24301
// points := [ 32 , 120 , 70 ] ;
24282: LD_ADDR_VAR 0 9
24286: PUSH
24287: LD_INT 32
24289: PUSH
24290: LD_INT 120
24292: PUSH
24293: LD_INT 70
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24301: LD_VAR 0 6
24305: PPUSH
24306: CALL_OW 264
24310: PUSH
24311: LD_INT 7
24313: PUSH
24314: LD_INT 28
24316: PUSH
24317: LD_INT 45
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: IN
24325: IFFALSE 24346
// points := [ 35 , 20 , 45 ] ;
24327: LD_ADDR_VAR 0 9
24331: PUSH
24332: LD_INT 35
24334: PUSH
24335: LD_INT 20
24337: PUSH
24338: LD_INT 45
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24346: LD_VAR 0 6
24350: PPUSH
24351: CALL_OW 264
24355: PUSH
24356: LD_INT 47
24358: PUSH
24359: EMPTY
24360: LIST
24361: IN
24362: IFFALSE 24383
// points := [ 67 , 45 , 75 ] ;
24364: LD_ADDR_VAR 0 9
24368: PUSH
24369: LD_INT 67
24371: PUSH
24372: LD_INT 45
24374: PUSH
24375: LD_INT 75
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: LIST
24382: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24383: LD_VAR 0 6
24387: PPUSH
24388: CALL_OW 264
24392: PUSH
24393: LD_INT 26
24395: PUSH
24396: EMPTY
24397: LIST
24398: IN
24399: IFFALSE 24420
// points := [ 120 , 30 , 80 ] ;
24401: LD_ADDR_VAR 0 9
24405: PUSH
24406: LD_INT 120
24408: PUSH
24409: LD_INT 30
24411: PUSH
24412: LD_INT 80
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24420: LD_VAR 0 6
24424: PPUSH
24425: CALL_OW 264
24429: PUSH
24430: LD_INT 22
24432: PUSH
24433: EMPTY
24434: LIST
24435: IN
24436: IFFALSE 24457
// points := [ 40 , 1 , 1 ] ;
24438: LD_ADDR_VAR 0 9
24442: PUSH
24443: LD_INT 40
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24457: LD_VAR 0 6
24461: PPUSH
24462: CALL_OW 264
24466: PUSH
24467: LD_INT 29
24469: PUSH
24470: EMPTY
24471: LIST
24472: IN
24473: IFFALSE 24494
// points := [ 70 , 200 , 400 ] ;
24475: LD_ADDR_VAR 0 9
24479: PUSH
24480: LD_INT 70
24482: PUSH
24483: LD_INT 200
24485: PUSH
24486: LD_INT 400
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24494: LD_VAR 0 6
24498: PPUSH
24499: CALL_OW 264
24503: PUSH
24504: LD_INT 14
24506: PUSH
24507: LD_INT 53
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: IN
24514: IFFALSE 24535
// points := [ 40 , 10 , 20 ] ;
24516: LD_ADDR_VAR 0 9
24520: PUSH
24521: LD_INT 40
24523: PUSH
24524: LD_INT 10
24526: PUSH
24527: LD_INT 20
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24535: LD_VAR 0 6
24539: PPUSH
24540: CALL_OW 264
24544: PUSH
24545: LD_INT 9
24547: PUSH
24548: EMPTY
24549: LIST
24550: IN
24551: IFFALSE 24572
// points := [ 5 , 70 , 20 ] ;
24553: LD_ADDR_VAR 0 9
24557: PUSH
24558: LD_INT 5
24560: PUSH
24561: LD_INT 70
24563: PUSH
24564: LD_INT 20
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: LIST
24571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24572: LD_VAR 0 6
24576: PPUSH
24577: CALL_OW 264
24581: PUSH
24582: LD_INT 10
24584: PUSH
24585: EMPTY
24586: LIST
24587: IN
24588: IFFALSE 24609
// points := [ 35 , 110 , 70 ] ;
24590: LD_ADDR_VAR 0 9
24594: PUSH
24595: LD_INT 35
24597: PUSH
24598: LD_INT 110
24600: PUSH
24601: LD_INT 70
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: LIST
24608: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24609: LD_VAR 0 6
24613: PPUSH
24614: CALL_OW 265
24618: PUSH
24619: LD_INT 25
24621: EQUAL
24622: IFFALSE 24643
// points := [ 80 , 65 , 100 ] ;
24624: LD_ADDR_VAR 0 9
24628: PUSH
24629: LD_INT 80
24631: PUSH
24632: LD_INT 65
24634: PUSH
24635: LD_INT 100
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24643: LD_VAR 0 6
24647: PPUSH
24648: CALL_OW 263
24652: PUSH
24653: LD_INT 1
24655: EQUAL
24656: IFFALSE 24691
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24658: LD_ADDR_VAR 0 10
24662: PUSH
24663: LD_VAR 0 10
24667: PUSH
24668: LD_VAR 0 6
24672: PPUSH
24673: CALL_OW 311
24677: PPUSH
24678: LD_INT 3
24680: PPUSH
24681: CALL_OW 259
24685: PUSH
24686: LD_INT 4
24688: MUL
24689: MUL
24690: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24691: LD_VAR 0 6
24695: PPUSH
24696: CALL_OW 263
24700: PUSH
24701: LD_INT 2
24703: EQUAL
24704: IFFALSE 24755
// begin j := IsControledBy ( i ) ;
24706: LD_ADDR_VAR 0 7
24710: PUSH
24711: LD_VAR 0 6
24715: PPUSH
24716: CALL_OW 312
24720: ST_TO_ADDR
// if j then
24721: LD_VAR 0 7
24725: IFFALSE 24755
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24727: LD_ADDR_VAR 0 10
24731: PUSH
24732: LD_VAR 0 10
24736: PUSH
24737: LD_VAR 0 7
24741: PPUSH
24742: LD_INT 3
24744: PPUSH
24745: CALL_OW 259
24749: PUSH
24750: LD_INT 3
24752: MUL
24753: MUL
24754: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24755: LD_VAR 0 6
24759: PPUSH
24760: CALL_OW 264
24764: PUSH
24765: LD_INT 5
24767: PUSH
24768: LD_INT 6
24770: PUSH
24771: LD_INT 46
24773: PUSH
24774: LD_INT 44
24776: PUSH
24777: LD_INT 47
24779: PUSH
24780: LD_INT 45
24782: PUSH
24783: LD_INT 28
24785: PUSH
24786: LD_INT 7
24788: PUSH
24789: LD_INT 27
24791: PUSH
24792: LD_INT 29
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: IN
24807: PUSH
24808: LD_VAR 0 1
24812: PPUSH
24813: LD_INT 52
24815: PPUSH
24816: CALL_OW 321
24820: PUSH
24821: LD_INT 2
24823: EQUAL
24824: AND
24825: IFFALSE 24842
// bpoints := bpoints * 1.2 ;
24827: LD_ADDR_VAR 0 10
24831: PUSH
24832: LD_VAR 0 10
24836: PUSH
24837: LD_REAL  1.20000000000000E+0000
24840: MUL
24841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24842: LD_VAR 0 6
24846: PPUSH
24847: CALL_OW 264
24851: PUSH
24852: LD_INT 6
24854: PUSH
24855: LD_INT 46
24857: PUSH
24858: LD_INT 47
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: IN
24866: IFFALSE 24883
// bpoints := bpoints * 1.2 ;
24868: LD_ADDR_VAR 0 10
24872: PUSH
24873: LD_VAR 0 10
24877: PUSH
24878: LD_REAL  1.20000000000000E+0000
24881: MUL
24882: ST_TO_ADDR
// end ; unit_building :
24883: GO 24897
24885: LD_INT 3
24887: DOUBLE
24888: EQUAL
24889: IFTRUE 24893
24891: GO 24896
24893: POP
// ; end ;
24894: GO 24897
24896: POP
// for j = 1 to 3 do
24897: LD_ADDR_VAR 0 7
24901: PUSH
24902: DOUBLE
24903: LD_INT 1
24905: DEC
24906: ST_TO_ADDR
24907: LD_INT 3
24909: PUSH
24910: FOR_TO
24911: IFFALSE 24964
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24913: LD_ADDR_VAR 0 5
24917: PUSH
24918: LD_VAR 0 5
24922: PPUSH
24923: LD_VAR 0 7
24927: PPUSH
24928: LD_VAR 0 5
24932: PUSH
24933: LD_VAR 0 7
24937: ARRAY
24938: PUSH
24939: LD_VAR 0 9
24943: PUSH
24944: LD_VAR 0 7
24948: ARRAY
24949: PUSH
24950: LD_VAR 0 10
24954: MUL
24955: PLUS
24956: PPUSH
24957: CALL_OW 1
24961: ST_TO_ADDR
24962: GO 24910
24964: POP
24965: POP
// end ;
24966: GO 23449
24968: POP
24969: POP
// result := Replace ( result , 4 , tmp ) ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_VAR 0 5
24979: PPUSH
24980: LD_INT 4
24982: PPUSH
24983: LD_VAR 0 8
24987: PPUSH
24988: CALL_OW 1
24992: ST_TO_ADDR
// end ;
24993: LD_VAR 0 5
24997: RET
// export function DangerAtRange ( unit , range ) ; begin
24998: LD_INT 0
25000: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL_OW 255
25015: PPUSH
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL_OW 250
25025: PPUSH
25026: LD_VAR 0 1
25030: PPUSH
25031: CALL_OW 251
25035: PPUSH
25036: LD_VAR 0 2
25040: PPUSH
25041: CALL 23301 0 4
25045: ST_TO_ADDR
// end ;
25046: LD_VAR 0 3
25050: RET
// export function DangerInArea ( side , area ) ; begin
25051: LD_INT 0
25053: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_VAR 0 2
25063: PPUSH
25064: LD_INT 81
25066: PUSH
25067: LD_VAR 0 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PPUSH
25076: CALL_OW 70
25080: ST_TO_ADDR
// end ;
25081: LD_VAR 0 3
25085: RET
// export function IsExtension ( b ) ; begin
25086: LD_INT 0
25088: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25089: LD_ADDR_VAR 0 2
25093: PUSH
25094: LD_VAR 0 1
25098: PUSH
25099: LD_INT 23
25101: PUSH
25102: LD_INT 20
25104: PUSH
25105: LD_INT 22
25107: PUSH
25108: LD_INT 17
25110: PUSH
25111: LD_INT 24
25113: PUSH
25114: LD_INT 21
25116: PUSH
25117: LD_INT 19
25119: PUSH
25120: LD_INT 16
25122: PUSH
25123: LD_INT 25
25125: PUSH
25126: LD_INT 18
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: IN
25141: ST_TO_ADDR
// end ;
25142: LD_VAR 0 2
25146: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
25151: PPUSH
// result := [ ] ;
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: EMPTY
25158: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_VAR 0 2
25168: PPUSH
25169: LD_INT 21
25171: PUSH
25172: LD_INT 3
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PPUSH
25179: CALL_OW 70
25183: ST_TO_ADDR
// if not tmp then
25184: LD_VAR 0 4
25188: NOT
25189: IFFALSE 25193
// exit ;
25191: GO 25251
// for i in tmp do
25193: LD_ADDR_VAR 0 5
25197: PUSH
25198: LD_VAR 0 4
25202: PUSH
25203: FOR_IN
25204: IFFALSE 25239
// if GetBase ( i ) <> base then
25206: LD_VAR 0 5
25210: PPUSH
25211: CALL_OW 274
25215: PUSH
25216: LD_VAR 0 1
25220: NONEQUAL
25221: IFFALSE 25237
// ComLinkToBase ( base , i ) ;
25223: LD_VAR 0 1
25227: PPUSH
25228: LD_VAR 0 5
25232: PPUSH
25233: CALL_OW 169
25237: GO 25203
25239: POP
25240: POP
// result := tmp ;
25241: LD_ADDR_VAR 0 3
25245: PUSH
25246: LD_VAR 0 4
25250: ST_TO_ADDR
// end ;
25251: LD_VAR 0 3
25255: RET
// export function ComComplete ( unit , b ) ; var i ; begin
25256: LD_INT 0
25258: PPUSH
25259: PPUSH
// if BuildingStatus ( b ) = bs_build then
25260: LD_VAR 0 2
25264: PPUSH
25265: CALL_OW 461
25269: PUSH
25270: LD_INT 1
25272: EQUAL
25273: IFFALSE 25333
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_STRING h
25282: PUSH
25283: LD_VAR 0 2
25287: PPUSH
25288: CALL_OW 250
25292: PUSH
25293: LD_VAR 0 2
25297: PPUSH
25298: CALL_OW 251
25302: PUSH
25303: LD_VAR 0 2
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: PPUSH
25329: CALL_OW 446
// end ;
25333: LD_VAR 0 3
25337: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25338: LD_INT 0
25340: PPUSH
25341: PPUSH
25342: PPUSH
25343: PPUSH
25344: PPUSH
25345: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25346: LD_VAR 0 1
25350: NOT
25351: PUSH
25352: LD_VAR 0 1
25356: PPUSH
25357: CALL_OW 263
25361: PUSH
25362: LD_INT 2
25364: EQUAL
25365: NOT
25366: OR
25367: IFFALSE 25371
// exit ;
25369: GO 25687
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25371: LD_ADDR_VAR 0 6
25375: PUSH
25376: LD_INT 22
25378: PUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 255
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: LD_INT 30
25398: PUSH
25399: LD_INT 36
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 34
25408: PUSH
25409: LD_INT 31
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PPUSH
25425: CALL_OW 69
25429: ST_TO_ADDR
// if not tmp then
25430: LD_VAR 0 6
25434: NOT
25435: IFFALSE 25439
// exit ;
25437: GO 25687
// result := [ ] ;
25439: LD_ADDR_VAR 0 2
25443: PUSH
25444: EMPTY
25445: ST_TO_ADDR
// for i in tmp do
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_VAR 0 6
25455: PUSH
25456: FOR_IN
25457: IFFALSE 25528
// begin t := UnitsInside ( i ) ;
25459: LD_ADDR_VAR 0 4
25463: PUSH
25464: LD_VAR 0 3
25468: PPUSH
25469: CALL_OW 313
25473: ST_TO_ADDR
// if t then
25474: LD_VAR 0 4
25478: IFFALSE 25526
// for j in t do
25480: LD_ADDR_VAR 0 7
25484: PUSH
25485: LD_VAR 0 4
25489: PUSH
25490: FOR_IN
25491: IFFALSE 25524
// result := Insert ( result , result + 1 , j ) ;
25493: LD_ADDR_VAR 0 2
25497: PUSH
25498: LD_VAR 0 2
25502: PPUSH
25503: LD_VAR 0 2
25507: PUSH
25508: LD_INT 1
25510: PLUS
25511: PPUSH
25512: LD_VAR 0 7
25516: PPUSH
25517: CALL_OW 2
25521: ST_TO_ADDR
25522: GO 25490
25524: POP
25525: POP
// end ;
25526: GO 25456
25528: POP
25529: POP
// if not result then
25530: LD_VAR 0 2
25534: NOT
25535: IFFALSE 25539
// exit ;
25537: GO 25687
// mech := result [ 1 ] ;
25539: LD_ADDR_VAR 0 5
25543: PUSH
25544: LD_VAR 0 2
25548: PUSH
25549: LD_INT 1
25551: ARRAY
25552: ST_TO_ADDR
// if result > 1 then
25553: LD_VAR 0 2
25557: PUSH
25558: LD_INT 1
25560: GREATER
25561: IFFALSE 25673
// for i = 2 to result do
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: DOUBLE
25569: LD_INT 2
25571: DEC
25572: ST_TO_ADDR
25573: LD_VAR 0 2
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25671
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25581: LD_ADDR_VAR 0 4
25585: PUSH
25586: LD_VAR 0 2
25590: PUSH
25591: LD_VAR 0 3
25595: ARRAY
25596: PPUSH
25597: LD_INT 3
25599: PPUSH
25600: CALL_OW 259
25604: PUSH
25605: LD_VAR 0 2
25609: PUSH
25610: LD_VAR 0 3
25614: ARRAY
25615: PPUSH
25616: CALL_OW 432
25620: MINUS
25621: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25622: LD_VAR 0 4
25626: PUSH
25627: LD_VAR 0 5
25631: PPUSH
25632: LD_INT 3
25634: PPUSH
25635: CALL_OW 259
25639: PUSH
25640: LD_VAR 0 5
25644: PPUSH
25645: CALL_OW 432
25649: MINUS
25650: GREATEREQUAL
25651: IFFALSE 25669
// mech := result [ i ] ;
25653: LD_ADDR_VAR 0 5
25657: PUSH
25658: LD_VAR 0 2
25662: PUSH
25663: LD_VAR 0 3
25667: ARRAY
25668: ST_TO_ADDR
// end ;
25669: GO 25578
25671: POP
25672: POP
// ComLinkTo ( vehicle , mech ) ;
25673: LD_VAR 0 1
25677: PPUSH
25678: LD_VAR 0 5
25682: PPUSH
25683: CALL_OW 135
// end ;
25687: LD_VAR 0 2
25691: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25692: LD_INT 0
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
// result := [ ] ;
25707: LD_ADDR_VAR 0 7
25711: PUSH
25712: EMPTY
25713: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25714: LD_VAR 0 1
25718: PPUSH
25719: CALL_OW 266
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: IN
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 27370
// if name then
25739: LD_VAR 0 3
25743: IFFALSE 25759
// SetBName ( base_dep , name ) ;
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: CALL_OW 500
// base := GetBase ( base_dep ) ;
25759: LD_ADDR_VAR 0 15
25763: PUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 274
25773: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25774: LD_ADDR_VAR 0 16
25778: PUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 255
25788: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25789: LD_ADDR_VAR 0 17
25793: PUSH
25794: LD_VAR 0 1
25798: PPUSH
25799: CALL_OW 248
25803: ST_TO_ADDR
// if sources then
25804: LD_VAR 0 5
25808: IFFALSE 25855
// for i = 1 to 3 do
25810: LD_ADDR_VAR 0 8
25814: PUSH
25815: DOUBLE
25816: LD_INT 1
25818: DEC
25819: ST_TO_ADDR
25820: LD_INT 3
25822: PUSH
25823: FOR_TO
25824: IFFALSE 25853
// AddResourceType ( base , i , sources [ i ] ) ;
25826: LD_VAR 0 15
25830: PPUSH
25831: LD_VAR 0 8
25835: PPUSH
25836: LD_VAR 0 5
25840: PUSH
25841: LD_VAR 0 8
25845: ARRAY
25846: PPUSH
25847: CALL_OW 276
25851: GO 25823
25853: POP
25854: POP
// buildings := GetBaseBuildings ( base , area ) ;
25855: LD_ADDR_VAR 0 18
25859: PUSH
25860: LD_VAR 0 15
25864: PPUSH
25865: LD_VAR 0 2
25869: PPUSH
25870: CALL 25147 0 2
25874: ST_TO_ADDR
// InitHc ;
25875: CALL_OW 19
// InitUc ;
25879: CALL_OW 18
// uc_side := side ;
25883: LD_ADDR_OWVAR 20
25887: PUSH
25888: LD_VAR 0 16
25892: ST_TO_ADDR
// uc_nation := nation ;
25893: LD_ADDR_OWVAR 21
25897: PUSH
25898: LD_VAR 0 17
25902: ST_TO_ADDR
// if buildings then
25903: LD_VAR 0 18
25907: IFFALSE 27229
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25909: LD_ADDR_VAR 0 19
25913: PUSH
25914: LD_VAR 0 18
25918: PPUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 30
25924: PUSH
25925: LD_INT 29
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 30
25934: PUSH
25935: LD_INT 30
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 72
25951: ST_TO_ADDR
// if tmp then
25952: LD_VAR 0 19
25956: IFFALSE 26004
// for i in tmp do
25958: LD_ADDR_VAR 0 8
25962: PUSH
25963: LD_VAR 0 19
25967: PUSH
25968: FOR_IN
25969: IFFALSE 26002
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25971: LD_VAR 0 8
25975: PPUSH
25976: CALL_OW 250
25980: PPUSH
25981: LD_VAR 0 8
25985: PPUSH
25986: CALL_OW 251
25990: PPUSH
25991: LD_VAR 0 16
25995: PPUSH
25996: CALL_OW 441
26000: GO 25968
26002: POP
26003: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26004: LD_VAR 0 18
26008: PPUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 30
26014: PUSH
26015: LD_INT 32
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 30
26024: PUSH
26025: LD_INT 33
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: LIST
26036: PPUSH
26037: CALL_OW 72
26041: IFFALSE 26129
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26043: LD_ADDR_VAR 0 8
26047: PUSH
26048: LD_VAR 0 18
26052: PPUSH
26053: LD_INT 2
26055: PUSH
26056: LD_INT 30
26058: PUSH
26059: LD_INT 32
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 30
26068: PUSH
26069: LD_INT 33
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: PPUSH
26081: CALL_OW 72
26085: PUSH
26086: FOR_IN
26087: IFFALSE 26127
// begin if not GetBWeapon ( i ) then
26089: LD_VAR 0 8
26093: PPUSH
26094: CALL_OW 269
26098: NOT
26099: IFFALSE 26125
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26101: LD_VAR 0 8
26105: PPUSH
26106: LD_VAR 0 8
26110: PPUSH
26111: LD_VAR 0 2
26115: PPUSH
26116: CALL 27375 0 2
26120: PPUSH
26121: CALL_OW 431
// end ;
26125: GO 26086
26127: POP
26128: POP
// end ; for i = 1 to personel do
26129: LD_ADDR_VAR 0 8
26133: PUSH
26134: DOUBLE
26135: LD_INT 1
26137: DEC
26138: ST_TO_ADDR
26139: LD_VAR 0 6
26143: PUSH
26144: FOR_TO
26145: IFFALSE 27209
// begin if i > 4 then
26147: LD_VAR 0 8
26151: PUSH
26152: LD_INT 4
26154: GREATER
26155: IFFALSE 26159
// break ;
26157: GO 27209
// case i of 1 :
26159: LD_VAR 0 8
26163: PUSH
26164: LD_INT 1
26166: DOUBLE
26167: EQUAL
26168: IFTRUE 26172
26170: GO 26252
26172: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26173: LD_ADDR_VAR 0 12
26177: PUSH
26178: LD_VAR 0 18
26182: PPUSH
26183: LD_INT 22
26185: PUSH
26186: LD_VAR 0 16
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 58
26197: PUSH
26198: EMPTY
26199: LIST
26200: PUSH
26201: LD_INT 2
26203: PUSH
26204: LD_INT 30
26206: PUSH
26207: LD_INT 32
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 30
26216: PUSH
26217: LD_INT 4
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 30
26226: PUSH
26227: LD_INT 5
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 72
26249: ST_TO_ADDR
26250: GO 26474
26252: LD_INT 2
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26260
26258: GO 26322
26260: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26261: LD_ADDR_VAR 0 12
26265: PUSH
26266: LD_VAR 0 18
26270: PPUSH
26271: LD_INT 22
26273: PUSH
26274: LD_VAR 0 16
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: LD_INT 30
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 30
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PPUSH
26315: CALL_OW 72
26319: ST_TO_ADDR
26320: GO 26474
26322: LD_INT 3
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 26392
26330: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26331: LD_ADDR_VAR 0 12
26335: PUSH
26336: LD_VAR 0 18
26340: PPUSH
26341: LD_INT 22
26343: PUSH
26344: LD_VAR 0 16
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: LD_INT 30
26358: PUSH
26359: LD_INT 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 30
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PPUSH
26385: CALL_OW 72
26389: ST_TO_ADDR
26390: GO 26474
26392: LD_INT 4
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26473
26400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26401: LD_ADDR_VAR 0 12
26405: PUSH
26406: LD_VAR 0 18
26410: PPUSH
26411: LD_INT 22
26413: PUSH
26414: LD_VAR 0 16
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: LD_INT 30
26428: PUSH
26429: LD_INT 6
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 30
26438: PUSH
26439: LD_INT 7
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 30
26448: PUSH
26449: LD_INT 8
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PPUSH
26466: CALL_OW 72
26470: ST_TO_ADDR
26471: GO 26474
26473: POP
// if i = 1 then
26474: LD_VAR 0 8
26478: PUSH
26479: LD_INT 1
26481: EQUAL
26482: IFFALSE 26593
// begin tmp := [ ] ;
26484: LD_ADDR_VAR 0 19
26488: PUSH
26489: EMPTY
26490: ST_TO_ADDR
// for j in f do
26491: LD_ADDR_VAR 0 9
26495: PUSH
26496: LD_VAR 0 12
26500: PUSH
26501: FOR_IN
26502: IFFALSE 26575
// if GetBType ( j ) = b_bunker then
26504: LD_VAR 0 9
26508: PPUSH
26509: CALL_OW 266
26513: PUSH
26514: LD_INT 32
26516: EQUAL
26517: IFFALSE 26544
// tmp := Insert ( tmp , 1 , j ) else
26519: LD_ADDR_VAR 0 19
26523: PUSH
26524: LD_VAR 0 19
26528: PPUSH
26529: LD_INT 1
26531: PPUSH
26532: LD_VAR 0 9
26536: PPUSH
26537: CALL_OW 2
26541: ST_TO_ADDR
26542: GO 26573
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26544: LD_ADDR_VAR 0 19
26548: PUSH
26549: LD_VAR 0 19
26553: PPUSH
26554: LD_VAR 0 19
26558: PUSH
26559: LD_INT 1
26561: PLUS
26562: PPUSH
26563: LD_VAR 0 9
26567: PPUSH
26568: CALL_OW 2
26572: ST_TO_ADDR
26573: GO 26501
26575: POP
26576: POP
// if tmp then
26577: LD_VAR 0 19
26581: IFFALSE 26593
// f := tmp ;
26583: LD_ADDR_VAR 0 12
26587: PUSH
26588: LD_VAR 0 19
26592: ST_TO_ADDR
// end ; x := personel [ i ] ;
26593: LD_ADDR_VAR 0 13
26597: PUSH
26598: LD_VAR 0 6
26602: PUSH
26603: LD_VAR 0 8
26607: ARRAY
26608: ST_TO_ADDR
// if x = - 1 then
26609: LD_VAR 0 13
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: EQUAL
26618: IFFALSE 26827
// begin for j in f do
26620: LD_ADDR_VAR 0 9
26624: PUSH
26625: LD_VAR 0 12
26629: PUSH
26630: FOR_IN
26631: IFFALSE 26823
// repeat InitHc ;
26633: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26637: LD_VAR 0 9
26641: PPUSH
26642: CALL_OW 266
26646: PUSH
26647: LD_INT 5
26649: EQUAL
26650: IFFALSE 26720
// begin if UnitsInside ( j ) < 3 then
26652: LD_VAR 0 9
26656: PPUSH
26657: CALL_OW 313
26661: PUSH
26662: LD_INT 3
26664: LESS
26665: IFFALSE 26701
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26667: LD_INT 0
26669: PPUSH
26670: LD_INT 5
26672: PUSH
26673: LD_INT 8
26675: PUSH
26676: LD_INT 9
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: PUSH
26684: LD_VAR 0 17
26688: ARRAY
26689: PPUSH
26690: LD_VAR 0 4
26694: PPUSH
26695: CALL_OW 380
26699: GO 26718
// PrepareHuman ( false , i , skill ) ;
26701: LD_INT 0
26703: PPUSH
26704: LD_VAR 0 8
26708: PPUSH
26709: LD_VAR 0 4
26713: PPUSH
26714: CALL_OW 380
// end else
26718: GO 26737
// PrepareHuman ( false , i , skill ) ;
26720: LD_INT 0
26722: PPUSH
26723: LD_VAR 0 8
26727: PPUSH
26728: LD_VAR 0 4
26732: PPUSH
26733: CALL_OW 380
// un := CreateHuman ;
26737: LD_ADDR_VAR 0 14
26741: PUSH
26742: CALL_OW 44
26746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26747: LD_ADDR_VAR 0 7
26751: PUSH
26752: LD_VAR 0 7
26756: PPUSH
26757: LD_INT 1
26759: PPUSH
26760: LD_VAR 0 14
26764: PPUSH
26765: CALL_OW 2
26769: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26770: LD_VAR 0 14
26774: PPUSH
26775: LD_VAR 0 9
26779: PPUSH
26780: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26784: LD_VAR 0 9
26788: PPUSH
26789: CALL_OW 313
26793: PUSH
26794: LD_INT 6
26796: EQUAL
26797: PUSH
26798: LD_VAR 0 9
26802: PPUSH
26803: CALL_OW 266
26807: PUSH
26808: LD_INT 32
26810: PUSH
26811: LD_INT 31
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: IN
26818: OR
26819: IFFALSE 26633
26821: GO 26630
26823: POP
26824: POP
// end else
26825: GO 27207
// for j = 1 to x do
26827: LD_ADDR_VAR 0 9
26831: PUSH
26832: DOUBLE
26833: LD_INT 1
26835: DEC
26836: ST_TO_ADDR
26837: LD_VAR 0 13
26841: PUSH
26842: FOR_TO
26843: IFFALSE 27205
// begin InitHc ;
26845: CALL_OW 19
// if not f then
26849: LD_VAR 0 12
26853: NOT
26854: IFFALSE 26943
// begin PrepareHuman ( false , i , skill ) ;
26856: LD_INT 0
26858: PPUSH
26859: LD_VAR 0 8
26863: PPUSH
26864: LD_VAR 0 4
26868: PPUSH
26869: CALL_OW 380
// un := CreateHuman ;
26873: LD_ADDR_VAR 0 14
26877: PUSH
26878: CALL_OW 44
26882: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26883: LD_ADDR_VAR 0 7
26887: PUSH
26888: LD_VAR 0 7
26892: PPUSH
26893: LD_INT 1
26895: PPUSH
26896: LD_VAR 0 14
26900: PPUSH
26901: CALL_OW 2
26905: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26906: LD_VAR 0 14
26910: PPUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 250
26920: PPUSH
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL_OW 251
26930: PPUSH
26931: LD_INT 10
26933: PPUSH
26934: LD_INT 0
26936: PPUSH
26937: CALL_OW 50
// continue ;
26941: GO 26842
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26943: LD_VAR 0 12
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: PPUSH
26952: CALL_OW 313
26956: PUSH
26957: LD_VAR 0 12
26961: PUSH
26962: LD_INT 1
26964: ARRAY
26965: PPUSH
26966: CALL_OW 266
26970: PUSH
26971: LD_INT 32
26973: PUSH
26974: LD_INT 31
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: IN
26981: AND
26982: PUSH
26983: LD_VAR 0 12
26987: PUSH
26988: LD_INT 1
26990: ARRAY
26991: PPUSH
26992: CALL_OW 313
26996: PUSH
26997: LD_INT 6
26999: EQUAL
27000: OR
27001: IFFALSE 27021
// f := Delete ( f , 1 ) ;
27003: LD_ADDR_VAR 0 12
27007: PUSH
27008: LD_VAR 0 12
27012: PPUSH
27013: LD_INT 1
27015: PPUSH
27016: CALL_OW 3
27020: ST_TO_ADDR
// if not f then
27021: LD_VAR 0 12
27025: NOT
27026: IFFALSE 27044
// begin x := x + 2 ;
27028: LD_ADDR_VAR 0 13
27032: PUSH
27033: LD_VAR 0 13
27037: PUSH
27038: LD_INT 2
27040: PLUS
27041: ST_TO_ADDR
// continue ;
27042: GO 26842
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27044: LD_VAR 0 12
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: CALL_OW 266
27057: PUSH
27058: LD_INT 5
27060: EQUAL
27061: IFFALSE 27135
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27063: LD_VAR 0 12
27067: PUSH
27068: LD_INT 1
27070: ARRAY
27071: PPUSH
27072: CALL_OW 313
27076: PUSH
27077: LD_INT 3
27079: LESS
27080: IFFALSE 27116
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27082: LD_INT 0
27084: PPUSH
27085: LD_INT 5
27087: PUSH
27088: LD_INT 8
27090: PUSH
27091: LD_INT 9
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: LIST
27098: PUSH
27099: LD_VAR 0 17
27103: ARRAY
27104: PPUSH
27105: LD_VAR 0 4
27109: PPUSH
27110: CALL_OW 380
27114: GO 27133
// PrepareHuman ( false , i , skill ) ;
27116: LD_INT 0
27118: PPUSH
27119: LD_VAR 0 8
27123: PPUSH
27124: LD_VAR 0 4
27128: PPUSH
27129: CALL_OW 380
// end else
27133: GO 27152
// PrepareHuman ( false , i , skill ) ;
27135: LD_INT 0
27137: PPUSH
27138: LD_VAR 0 8
27142: PPUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: CALL_OW 380
// un := CreateHuman ;
27152: LD_ADDR_VAR 0 14
27156: PUSH
27157: CALL_OW 44
27161: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27162: LD_ADDR_VAR 0 7
27166: PUSH
27167: LD_VAR 0 7
27171: PPUSH
27172: LD_INT 1
27174: PPUSH
27175: LD_VAR 0 14
27179: PPUSH
27180: CALL_OW 2
27184: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27185: LD_VAR 0 14
27189: PPUSH
27190: LD_VAR 0 12
27194: PUSH
27195: LD_INT 1
27197: ARRAY
27198: PPUSH
27199: CALL_OW 52
// end ;
27203: GO 26842
27205: POP
27206: POP
// end ;
27207: GO 26144
27209: POP
27210: POP
// result := result ^ buildings ;
27211: LD_ADDR_VAR 0 7
27215: PUSH
27216: LD_VAR 0 7
27220: PUSH
27221: LD_VAR 0 18
27225: ADD
27226: ST_TO_ADDR
// end else
27227: GO 27370
// begin for i = 1 to personel do
27229: LD_ADDR_VAR 0 8
27233: PUSH
27234: DOUBLE
27235: LD_INT 1
27237: DEC
27238: ST_TO_ADDR
27239: LD_VAR 0 6
27243: PUSH
27244: FOR_TO
27245: IFFALSE 27368
// begin if i > 4 then
27247: LD_VAR 0 8
27251: PUSH
27252: LD_INT 4
27254: GREATER
27255: IFFALSE 27259
// break ;
27257: GO 27368
// x := personel [ i ] ;
27259: LD_ADDR_VAR 0 13
27263: PUSH
27264: LD_VAR 0 6
27268: PUSH
27269: LD_VAR 0 8
27273: ARRAY
27274: ST_TO_ADDR
// if x = - 1 then
27275: LD_VAR 0 13
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: EQUAL
27284: IFFALSE 27288
// continue ;
27286: GO 27244
// PrepareHuman ( false , i , skill ) ;
27288: LD_INT 0
27290: PPUSH
27291: LD_VAR 0 8
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: CALL_OW 380
// un := CreateHuman ;
27305: LD_ADDR_VAR 0 14
27309: PUSH
27310: CALL_OW 44
27314: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27315: LD_VAR 0 14
27319: PPUSH
27320: LD_VAR 0 1
27324: PPUSH
27325: CALL_OW 250
27329: PPUSH
27330: LD_VAR 0 1
27334: PPUSH
27335: CALL_OW 251
27339: PPUSH
27340: LD_INT 10
27342: PPUSH
27343: LD_INT 0
27345: PPUSH
27346: CALL_OW 50
// result := result ^ un ;
27350: LD_ADDR_VAR 0 7
27354: PUSH
27355: LD_VAR 0 7
27359: PUSH
27360: LD_VAR 0 14
27364: ADD
27365: ST_TO_ADDR
// end ;
27366: GO 27244
27368: POP
27369: POP
// end ; end ;
27370: LD_VAR 0 7
27374: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27375: LD_INT 0
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
// result := false ;
27393: LD_ADDR_VAR 0 3
27397: PUSH
27398: LD_INT 0
27400: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27401: LD_VAR 0 1
27405: NOT
27406: PUSH
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 266
27416: PUSH
27417: LD_INT 32
27419: PUSH
27420: LD_INT 33
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: IN
27427: NOT
27428: OR
27429: IFFALSE 27433
// exit ;
27431: GO 28569
// nat := GetNation ( tower ) ;
27433: LD_ADDR_VAR 0 12
27437: PUSH
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 248
27447: ST_TO_ADDR
// side := GetSide ( tower ) ;
27448: LD_ADDR_VAR 0 16
27452: PUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: CALL_OW 255
27462: ST_TO_ADDR
// x := GetX ( tower ) ;
27463: LD_ADDR_VAR 0 10
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 250
27477: ST_TO_ADDR
// y := GetY ( tower ) ;
27478: LD_ADDR_VAR 0 11
27482: PUSH
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL_OW 251
27492: ST_TO_ADDR
// if not x or not y then
27493: LD_VAR 0 10
27497: NOT
27498: PUSH
27499: LD_VAR 0 11
27503: NOT
27504: OR
27505: IFFALSE 27509
// exit ;
27507: GO 28569
// weapon := 0 ;
27509: LD_ADDR_VAR 0 18
27513: PUSH
27514: LD_INT 0
27516: ST_TO_ADDR
// fac_list := [ ] ;
27517: LD_ADDR_VAR 0 17
27521: PUSH
27522: EMPTY
27523: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
27524: LD_ADDR_VAR 0 6
27528: PUSH
27529: LD_VAR 0 1
27533: PPUSH
27534: CALL_OW 274
27538: PPUSH
27539: LD_VAR 0 2
27543: PPUSH
27544: CALL 25147 0 2
27548: PPUSH
27549: LD_INT 30
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PPUSH
27559: CALL_OW 72
27563: ST_TO_ADDR
// if not factories then
27564: LD_VAR 0 6
27568: NOT
27569: IFFALSE 27573
// exit ;
27571: GO 28569
// for i in factories do
27573: LD_ADDR_VAR 0 8
27577: PUSH
27578: LD_VAR 0 6
27582: PUSH
27583: FOR_IN
27584: IFFALSE 27609
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27586: LD_ADDR_VAR 0 17
27590: PUSH
27591: LD_VAR 0 17
27595: PUSH
27596: LD_VAR 0 8
27600: PPUSH
27601: CALL_OW 478
27605: UNION
27606: ST_TO_ADDR
27607: GO 27583
27609: POP
27610: POP
// if not fac_list then
27611: LD_VAR 0 17
27615: NOT
27616: IFFALSE 27620
// exit ;
27618: GO 28569
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27620: LD_ADDR_VAR 0 5
27624: PUSH
27625: LD_INT 4
27627: PUSH
27628: LD_INT 5
27630: PUSH
27631: LD_INT 9
27633: PUSH
27634: LD_INT 10
27636: PUSH
27637: LD_INT 6
27639: PUSH
27640: LD_INT 7
27642: PUSH
27643: LD_INT 11
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 27
27657: PUSH
27658: LD_INT 28
27660: PUSH
27661: LD_INT 26
27663: PUSH
27664: LD_INT 30
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 43
27675: PUSH
27676: LD_INT 44
27678: PUSH
27679: LD_INT 46
27681: PUSH
27682: LD_INT 45
27684: PUSH
27685: LD_INT 47
27687: PUSH
27688: LD_INT 49
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: PUSH
27704: LD_VAR 0 12
27708: ARRAY
27709: ST_TO_ADDR
// for i in list do
27710: LD_ADDR_VAR 0 8
27714: PUSH
27715: LD_VAR 0 5
27719: PUSH
27720: FOR_IN
27721: IFFALSE 27754
// if not i in fac_list then
27723: LD_VAR 0 8
27727: PUSH
27728: LD_VAR 0 17
27732: IN
27733: NOT
27734: IFFALSE 27752
// list := list diff i ;
27736: LD_ADDR_VAR 0 5
27740: PUSH
27741: LD_VAR 0 5
27745: PUSH
27746: LD_VAR 0 8
27750: DIFF
27751: ST_TO_ADDR
27752: GO 27720
27754: POP
27755: POP
// if not list then
27756: LD_VAR 0 5
27760: NOT
27761: IFFALSE 27765
// exit ;
27763: GO 28569
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27765: LD_VAR 0 12
27769: PUSH
27770: LD_INT 3
27772: EQUAL
27773: PUSH
27774: LD_INT 49
27776: PUSH
27777: LD_VAR 0 5
27781: IN
27782: AND
27783: PUSH
27784: LD_INT 31
27786: PPUSH
27787: LD_VAR 0 16
27791: PPUSH
27792: CALL_OW 321
27796: PUSH
27797: LD_INT 2
27799: EQUAL
27800: AND
27801: IFFALSE 27861
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27803: LD_INT 22
27805: PUSH
27806: LD_VAR 0 16
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 35
27817: PUSH
27818: LD_INT 49
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 91
27827: PUSH
27828: LD_VAR 0 1
27832: PUSH
27833: LD_INT 10
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: PPUSH
27846: CALL_OW 69
27850: NOT
27851: IFFALSE 27861
// weapon := ru_time_lapser ;
27853: LD_ADDR_VAR 0 18
27857: PUSH
27858: LD_INT 49
27860: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27861: LD_VAR 0 12
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: IN
27876: PUSH
27877: LD_INT 11
27879: PUSH
27880: LD_VAR 0 5
27884: IN
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_VAR 0 5
27893: IN
27894: OR
27895: AND
27896: PUSH
27897: LD_INT 6
27899: PPUSH
27900: LD_VAR 0 16
27904: PPUSH
27905: CALL_OW 321
27909: PUSH
27910: LD_INT 2
27912: EQUAL
27913: AND
27914: IFFALSE 28079
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27916: LD_INT 22
27918: PUSH
27919: LD_VAR 0 16
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: LD_INT 35
27933: PUSH
27934: LD_INT 11
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 35
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 91
27958: PUSH
27959: LD_VAR 0 1
27963: PUSH
27964: LD_INT 18
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 69
27981: NOT
27982: PUSH
27983: LD_INT 22
27985: PUSH
27986: LD_VAR 0 16
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 2
27997: PUSH
27998: LD_INT 30
28000: PUSH
28001: LD_INT 32
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 30
28010: PUSH
28011: LD_INT 33
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 91
28025: PUSH
28026: LD_VAR 0 1
28030: PUSH
28031: LD_INT 12
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: PUSH
28052: LD_INT 2
28054: GREATER
28055: AND
28056: IFFALSE 28079
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28058: LD_ADDR_VAR 0 18
28062: PUSH
28063: LD_INT 11
28065: PUSH
28066: LD_INT 30
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_VAR 0 12
28077: ARRAY
28078: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28079: LD_VAR 0 18
28083: NOT
28084: PUSH
28085: LD_INT 40
28087: PPUSH
28088: LD_VAR 0 16
28092: PPUSH
28093: CALL_OW 321
28097: PUSH
28098: LD_INT 2
28100: EQUAL
28101: AND
28102: PUSH
28103: LD_INT 7
28105: PUSH
28106: LD_VAR 0 5
28110: IN
28111: PUSH
28112: LD_INT 28
28114: PUSH
28115: LD_VAR 0 5
28119: IN
28120: OR
28121: PUSH
28122: LD_INT 45
28124: PUSH
28125: LD_VAR 0 5
28129: IN
28130: OR
28131: AND
28132: IFFALSE 28386
// begin hex := GetHexInfo ( x , y ) ;
28134: LD_ADDR_VAR 0 4
28138: PUSH
28139: LD_VAR 0 10
28143: PPUSH
28144: LD_VAR 0 11
28148: PPUSH
28149: CALL_OW 546
28153: ST_TO_ADDR
// if hex [ 1 ] then
28154: LD_VAR 0 4
28158: PUSH
28159: LD_INT 1
28161: ARRAY
28162: IFFALSE 28166
// exit ;
28164: GO 28569
// height := hex [ 2 ] ;
28166: LD_ADDR_VAR 0 15
28170: PUSH
28171: LD_VAR 0 4
28175: PUSH
28176: LD_INT 2
28178: ARRAY
28179: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28180: LD_ADDR_VAR 0 14
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 3
28193: PUSH
28194: LD_INT 5
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
// for i in tmp do
28203: LD_ADDR_VAR 0 8
28207: PUSH
28208: LD_VAR 0 14
28212: PUSH
28213: FOR_IN
28214: IFFALSE 28384
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28216: LD_ADDR_VAR 0 9
28220: PUSH
28221: LD_VAR 0 10
28225: PPUSH
28226: LD_VAR 0 8
28230: PPUSH
28231: LD_INT 5
28233: PPUSH
28234: CALL_OW 272
28238: PUSH
28239: LD_VAR 0 11
28243: PPUSH
28244: LD_VAR 0 8
28248: PPUSH
28249: LD_INT 5
28251: PPUSH
28252: CALL_OW 273
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28261: LD_VAR 0 9
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PPUSH
28270: LD_VAR 0 9
28274: PUSH
28275: LD_INT 2
28277: ARRAY
28278: PPUSH
28279: CALL_OW 488
28283: IFFALSE 28382
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28285: LD_ADDR_VAR 0 4
28289: PUSH
28290: LD_VAR 0 9
28294: PUSH
28295: LD_INT 1
28297: ARRAY
28298: PPUSH
28299: LD_VAR 0 9
28303: PUSH
28304: LD_INT 2
28306: ARRAY
28307: PPUSH
28308: CALL_OW 546
28312: ST_TO_ADDR
// if hex [ 1 ] then
28313: LD_VAR 0 4
28317: PUSH
28318: LD_INT 1
28320: ARRAY
28321: IFFALSE 28325
// continue ;
28323: GO 28213
// h := hex [ 2 ] ;
28325: LD_ADDR_VAR 0 13
28329: PUSH
28330: LD_VAR 0 4
28334: PUSH
28335: LD_INT 2
28337: ARRAY
28338: ST_TO_ADDR
// if h + 7 < height then
28339: LD_VAR 0 13
28343: PUSH
28344: LD_INT 7
28346: PLUS
28347: PUSH
28348: LD_VAR 0 15
28352: LESS
28353: IFFALSE 28382
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28355: LD_ADDR_VAR 0 18
28359: PUSH
28360: LD_INT 7
28362: PUSH
28363: LD_INT 28
28365: PUSH
28366: LD_INT 45
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: PUSH
28374: LD_VAR 0 12
28378: ARRAY
28379: ST_TO_ADDR
// break ;
28380: GO 28384
// end ; end ; end ;
28382: GO 28213
28384: POP
28385: POP
// end ; if not weapon then
28386: LD_VAR 0 18
28390: NOT
28391: IFFALSE 28451
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28393: LD_ADDR_VAR 0 5
28397: PUSH
28398: LD_VAR 0 5
28402: PUSH
28403: LD_INT 11
28405: PUSH
28406: LD_INT 30
28408: PUSH
28409: LD_INT 49
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: DIFF
28417: ST_TO_ADDR
// if not list then
28418: LD_VAR 0 5
28422: NOT
28423: IFFALSE 28427
// exit ;
28425: GO 28569
// weapon := list [ rand ( 1 , list ) ] ;
28427: LD_ADDR_VAR 0 18
28431: PUSH
28432: LD_VAR 0 5
28436: PUSH
28437: LD_INT 1
28439: PPUSH
28440: LD_VAR 0 5
28444: PPUSH
28445: CALL_OW 12
28449: ARRAY
28450: ST_TO_ADDR
// end ; if weapon then
28451: LD_VAR 0 18
28455: IFFALSE 28569
// begin tmp := CostOfWeapon ( weapon ) ;
28457: LD_ADDR_VAR 0 14
28461: PUSH
28462: LD_VAR 0 18
28466: PPUSH
28467: CALL_OW 451
28471: ST_TO_ADDR
// j := GetBase ( tower ) ;
28472: LD_ADDR_VAR 0 9
28476: PUSH
28477: LD_VAR 0 1
28481: PPUSH
28482: CALL_OW 274
28486: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28487: LD_VAR 0 9
28491: PPUSH
28492: LD_INT 1
28494: PPUSH
28495: CALL_OW 275
28499: PUSH
28500: LD_VAR 0 14
28504: PUSH
28505: LD_INT 1
28507: ARRAY
28508: GREATEREQUAL
28509: PUSH
28510: LD_VAR 0 9
28514: PPUSH
28515: LD_INT 2
28517: PPUSH
28518: CALL_OW 275
28522: PUSH
28523: LD_VAR 0 14
28527: PUSH
28528: LD_INT 2
28530: ARRAY
28531: GREATEREQUAL
28532: AND
28533: PUSH
28534: LD_VAR 0 9
28538: PPUSH
28539: LD_INT 3
28541: PPUSH
28542: CALL_OW 275
28546: PUSH
28547: LD_VAR 0 14
28551: PUSH
28552: LD_INT 3
28554: ARRAY
28555: GREATEREQUAL
28556: AND
28557: IFFALSE 28569
// result := weapon ;
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_VAR 0 18
28568: ST_TO_ADDR
// end ; end ;
28569: LD_VAR 0 3
28573: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
// result := true ;
28578: LD_ADDR_VAR 0 3
28582: PUSH
28583: LD_INT 1
28585: ST_TO_ADDR
// if array1 = array2 then
28586: LD_VAR 0 1
28590: PUSH
28591: LD_VAR 0 2
28595: EQUAL
28596: IFFALSE 28656
// begin for i = 1 to array1 do
28598: LD_ADDR_VAR 0 4
28602: PUSH
28603: DOUBLE
28604: LD_INT 1
28606: DEC
28607: ST_TO_ADDR
28608: LD_VAR 0 1
28612: PUSH
28613: FOR_TO
28614: IFFALSE 28652
// if array1 [ i ] <> array2 [ i ] then
28616: LD_VAR 0 1
28620: PUSH
28621: LD_VAR 0 4
28625: ARRAY
28626: PUSH
28627: LD_VAR 0 2
28631: PUSH
28632: LD_VAR 0 4
28636: ARRAY
28637: NONEQUAL
28638: IFFALSE 28650
// begin result := false ;
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: LD_INT 0
28647: ST_TO_ADDR
// break ;
28648: GO 28652
// end ;
28650: GO 28613
28652: POP
28653: POP
// end else
28654: GO 28664
// result := false ;
28656: LD_ADDR_VAR 0 3
28660: PUSH
28661: LD_INT 0
28663: ST_TO_ADDR
// end ;
28664: LD_VAR 0 3
28668: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28669: LD_INT 0
28671: PPUSH
28672: PPUSH
28673: PPUSH
// pom := GetBase ( fac ) ;
28674: LD_ADDR_VAR 0 5
28678: PUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 274
28688: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28689: LD_ADDR_VAR 0 4
28693: PUSH
28694: LD_VAR 0 2
28698: PUSH
28699: LD_INT 1
28701: ARRAY
28702: PPUSH
28703: LD_VAR 0 2
28707: PUSH
28708: LD_INT 2
28710: ARRAY
28711: PPUSH
28712: LD_VAR 0 2
28716: PUSH
28717: LD_INT 3
28719: ARRAY
28720: PPUSH
28721: LD_VAR 0 2
28725: PUSH
28726: LD_INT 4
28728: ARRAY
28729: PPUSH
28730: CALL_OW 449
28734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: LD_VAR 0 5
28744: PPUSH
28745: LD_INT 1
28747: PPUSH
28748: CALL_OW 275
28752: PUSH
28753: LD_VAR 0 4
28757: PUSH
28758: LD_INT 1
28760: ARRAY
28761: GREATEREQUAL
28762: PUSH
28763: LD_VAR 0 5
28767: PPUSH
28768: LD_INT 2
28770: PPUSH
28771: CALL_OW 275
28775: PUSH
28776: LD_VAR 0 4
28780: PUSH
28781: LD_INT 2
28783: ARRAY
28784: GREATEREQUAL
28785: AND
28786: PUSH
28787: LD_VAR 0 5
28791: PPUSH
28792: LD_INT 3
28794: PPUSH
28795: CALL_OW 275
28799: PUSH
28800: LD_VAR 0 4
28804: PUSH
28805: LD_INT 3
28807: ARRAY
28808: GREATEREQUAL
28809: AND
28810: ST_TO_ADDR
// end ;
28811: LD_VAR 0 3
28815: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
// pom := GetBase ( building ) ;
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: CALL_OW 274
28836: ST_TO_ADDR
// if not pom then
28837: LD_VAR 0 3
28841: NOT
28842: IFFALSE 28846
// exit ;
28844: GO 29016
// btype := GetBType ( building ) ;
28846: LD_ADDR_VAR 0 5
28850: PUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 266
28860: ST_TO_ADDR
// if btype = b_armoury then
28861: LD_VAR 0 5
28865: PUSH
28866: LD_INT 4
28868: EQUAL
28869: IFFALSE 28879
// btype := b_barracks ;
28871: LD_ADDR_VAR 0 5
28875: PUSH
28876: LD_INT 5
28878: ST_TO_ADDR
// if btype = b_depot then
28879: LD_VAR 0 5
28883: PUSH
28884: LD_INT 0
28886: EQUAL
28887: IFFALSE 28897
// btype := b_warehouse ;
28889: LD_ADDR_VAR 0 5
28893: PUSH
28894: LD_INT 1
28896: ST_TO_ADDR
// if btype = b_workshop then
28897: LD_VAR 0 5
28901: PUSH
28902: LD_INT 2
28904: EQUAL
28905: IFFALSE 28915
// btype := b_factory ;
28907: LD_ADDR_VAR 0 5
28911: PUSH
28912: LD_INT 3
28914: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28915: LD_ADDR_VAR 0 4
28919: PUSH
28920: LD_VAR 0 5
28924: PPUSH
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 248
28934: PPUSH
28935: CALL_OW 450
28939: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28940: LD_ADDR_VAR 0 2
28944: PUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: LD_INT 1
28952: PPUSH
28953: CALL_OW 275
28957: PUSH
28958: LD_VAR 0 4
28962: PUSH
28963: LD_INT 1
28965: ARRAY
28966: GREATEREQUAL
28967: PUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: LD_INT 2
28975: PPUSH
28976: CALL_OW 275
28980: PUSH
28981: LD_VAR 0 4
28985: PUSH
28986: LD_INT 2
28988: ARRAY
28989: GREATEREQUAL
28990: AND
28991: PUSH
28992: LD_VAR 0 3
28996: PPUSH
28997: LD_INT 3
28999: PPUSH
29000: CALL_OW 275
29004: PUSH
29005: LD_VAR 0 4
29009: PUSH
29010: LD_INT 3
29012: ARRAY
29013: GREATEREQUAL
29014: AND
29015: ST_TO_ADDR
// end ;
29016: LD_VAR 0 2
29020: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29021: LD_INT 0
29023: PPUSH
29024: PPUSH
29025: PPUSH
// pom := GetBase ( building ) ;
29026: LD_ADDR_VAR 0 4
29030: PUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 274
29040: ST_TO_ADDR
// if not pom then
29041: LD_VAR 0 4
29045: NOT
29046: IFFALSE 29050
// exit ;
29048: GO 29151
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29050: LD_ADDR_VAR 0 5
29054: PUSH
29055: LD_VAR 0 2
29059: PPUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 248
29069: PPUSH
29070: CALL_OW 450
29074: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29075: LD_ADDR_VAR 0 3
29079: PUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: LD_INT 1
29087: PPUSH
29088: CALL_OW 275
29092: PUSH
29093: LD_VAR 0 5
29097: PUSH
29098: LD_INT 1
29100: ARRAY
29101: GREATEREQUAL
29102: PUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_INT 2
29110: PPUSH
29111: CALL_OW 275
29115: PUSH
29116: LD_VAR 0 5
29120: PUSH
29121: LD_INT 2
29123: ARRAY
29124: GREATEREQUAL
29125: AND
29126: PUSH
29127: LD_VAR 0 4
29131: PPUSH
29132: LD_INT 3
29134: PPUSH
29135: CALL_OW 275
29139: PUSH
29140: LD_VAR 0 5
29144: PUSH
29145: LD_INT 3
29147: ARRAY
29148: GREATEREQUAL
29149: AND
29150: ST_TO_ADDR
// end ;
29151: LD_VAR 0 3
29155: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
29156: LD_INT 0
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
// result := false ;
29168: LD_ADDR_VAR 0 6
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
// if not base or not btype or not x or not y then
29176: LD_VAR 0 1
29180: NOT
29181: PUSH
29182: LD_VAR 0 2
29186: NOT
29187: OR
29188: PUSH
29189: LD_VAR 0 3
29193: NOT
29194: OR
29195: PUSH
29196: LD_VAR 0 4
29200: NOT
29201: OR
29202: IFFALSE 29206
// exit ;
29204: GO 29815
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
29206: LD_ADDR_VAR 0 12
29210: PUSH
29211: LD_VAR 0 2
29215: PPUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: LD_VAR 0 5
29230: PPUSH
29231: LD_VAR 0 1
29235: PUSH
29236: LD_INT 1
29238: ARRAY
29239: PPUSH
29240: CALL_OW 248
29244: PPUSH
29245: LD_INT 0
29247: PPUSH
29248: CALL 30652 0 6
29252: ST_TO_ADDR
// if not hexes then
29253: LD_VAR 0 12
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 29815
// for i = 1 to hexes do
29262: LD_ADDR_VAR 0 7
29266: PUSH
29267: DOUBLE
29268: LD_INT 1
29270: DEC
29271: ST_TO_ADDR
29272: LD_VAR 0 12
29276: PUSH
29277: FOR_TO
29278: IFFALSE 29813
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29280: LD_ADDR_VAR 0 11
29284: PUSH
29285: LD_VAR 0 12
29289: PUSH
29290: LD_VAR 0 7
29294: ARRAY
29295: PUSH
29296: LD_INT 1
29298: ARRAY
29299: PPUSH
29300: LD_VAR 0 12
29304: PUSH
29305: LD_VAR 0 7
29309: ARRAY
29310: PUSH
29311: LD_INT 2
29313: ARRAY
29314: PPUSH
29315: CALL_OW 428
29319: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29320: LD_VAR 0 12
29324: PUSH
29325: LD_VAR 0 7
29329: ARRAY
29330: PUSH
29331: LD_INT 1
29333: ARRAY
29334: PPUSH
29335: LD_VAR 0 12
29339: PUSH
29340: LD_VAR 0 7
29344: ARRAY
29345: PUSH
29346: LD_INT 2
29348: ARRAY
29349: PPUSH
29350: CALL_OW 351
29354: PUSH
29355: LD_VAR 0 12
29359: PUSH
29360: LD_VAR 0 7
29364: ARRAY
29365: PUSH
29366: LD_INT 1
29368: ARRAY
29369: PPUSH
29370: LD_VAR 0 12
29374: PUSH
29375: LD_VAR 0 7
29379: ARRAY
29380: PUSH
29381: LD_INT 2
29383: ARRAY
29384: PPUSH
29385: CALL_OW 488
29389: NOT
29390: OR
29391: PUSH
29392: LD_VAR 0 11
29396: PPUSH
29397: CALL_OW 247
29401: PUSH
29402: LD_INT 3
29404: EQUAL
29405: OR
29406: IFFALSE 29412
// exit ;
29408: POP
29409: POP
29410: GO 29815
// if not tmp or not tmp in base then
29412: LD_VAR 0 11
29416: NOT
29417: PUSH
29418: LD_VAR 0 11
29422: PUSH
29423: LD_VAR 0 1
29427: IN
29428: NOT
29429: OR
29430: IFFALSE 29434
// continue ;
29432: GO 29277
// result := true ;
29434: LD_ADDR_VAR 0 6
29438: PUSH
29439: LD_INT 1
29441: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29442: LD_ADDR_VAR 0 15
29446: PUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: LD_INT 22
29454: PUSH
29455: LD_VAR 0 11
29459: PPUSH
29460: CALL_OW 255
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 30
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 30
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PPUSH
29501: CALL_OW 72
29505: ST_TO_ADDR
// if dep then
29506: LD_VAR 0 15
29510: IFFALSE 29646
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29512: LD_ADDR_VAR 0 14
29516: PUSH
29517: LD_VAR 0 15
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PPUSH
29526: CALL_OW 250
29530: PPUSH
29531: LD_VAR 0 15
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 254
29544: PPUSH
29545: LD_INT 5
29547: PPUSH
29548: CALL_OW 272
29552: PUSH
29553: LD_VAR 0 15
29557: PUSH
29558: LD_INT 1
29560: ARRAY
29561: PPUSH
29562: CALL_OW 251
29566: PPUSH
29567: LD_VAR 0 15
29571: PUSH
29572: LD_INT 1
29574: ARRAY
29575: PPUSH
29576: CALL_OW 254
29580: PPUSH
29581: LD_INT 5
29583: PPUSH
29584: CALL_OW 273
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29593: LD_VAR 0 14
29597: PUSH
29598: LD_INT 1
29600: ARRAY
29601: PPUSH
29602: LD_VAR 0 14
29606: PUSH
29607: LD_INT 2
29609: ARRAY
29610: PPUSH
29611: CALL_OW 488
29615: IFFALSE 29646
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29617: LD_VAR 0 11
29621: PPUSH
29622: LD_VAR 0 14
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PPUSH
29631: LD_VAR 0 14
29635: PUSH
29636: LD_INT 2
29638: ARRAY
29639: PPUSH
29640: CALL_OW 111
// continue ;
29644: GO 29277
// end ; end ; r := GetDir ( tmp ) ;
29646: LD_ADDR_VAR 0 13
29650: PUSH
29651: LD_VAR 0 11
29655: PPUSH
29656: CALL_OW 254
29660: ST_TO_ADDR
// if r = 5 then
29661: LD_VAR 0 13
29665: PUSH
29666: LD_INT 5
29668: EQUAL
29669: IFFALSE 29679
// r := 0 ;
29671: LD_ADDR_VAR 0 13
29675: PUSH
29676: LD_INT 0
29678: ST_TO_ADDR
// for j = r to 5 do
29679: LD_ADDR_VAR 0 8
29683: PUSH
29684: DOUBLE
29685: LD_VAR 0 13
29689: DEC
29690: ST_TO_ADDR
29691: LD_INT 5
29693: PUSH
29694: FOR_TO
29695: IFFALSE 29809
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29697: LD_ADDR_VAR 0 9
29701: PUSH
29702: LD_VAR 0 11
29706: PPUSH
29707: CALL_OW 250
29711: PPUSH
29712: LD_VAR 0 8
29716: PPUSH
29717: LD_INT 2
29719: PPUSH
29720: CALL_OW 272
29724: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29725: LD_ADDR_VAR 0 10
29729: PUSH
29730: LD_VAR 0 11
29734: PPUSH
29735: CALL_OW 251
29739: PPUSH
29740: LD_VAR 0 8
29744: PPUSH
29745: LD_INT 2
29747: PPUSH
29748: CALL_OW 273
29752: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29753: LD_VAR 0 9
29757: PPUSH
29758: LD_VAR 0 10
29762: PPUSH
29763: CALL_OW 488
29767: PUSH
29768: LD_VAR 0 9
29772: PPUSH
29773: LD_VAR 0 10
29777: PPUSH
29778: CALL_OW 428
29782: NOT
29783: AND
29784: IFFALSE 29807
// begin ComMoveXY ( tmp , _x , _y ) ;
29786: LD_VAR 0 11
29790: PPUSH
29791: LD_VAR 0 9
29795: PPUSH
29796: LD_VAR 0 10
29800: PPUSH
29801: CALL_OW 111
// break ;
29805: GO 29809
// end ; end ;
29807: GO 29694
29809: POP
29810: POP
// end ;
29811: GO 29277
29813: POP
29814: POP
// end ;
29815: LD_VAR 0 6
29819: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
29820: LD_INT 0
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
// result := false ;
29832: LD_ADDR_VAR 0 6
29836: PUSH
29837: LD_INT 0
29839: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29840: LD_VAR 0 1
29844: NOT
29845: PUSH
29846: LD_VAR 0 1
29850: PPUSH
29851: CALL_OW 266
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: IN
29866: NOT
29867: OR
29868: PUSH
29869: LD_VAR 0 2
29873: NOT
29874: OR
29875: PUSH
29876: LD_VAR 0 5
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 4
29895: PUSH
29896: LD_INT 5
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: IN
29907: NOT
29908: OR
29909: PUSH
29910: LD_VAR 0 3
29914: PPUSH
29915: LD_VAR 0 4
29919: PPUSH
29920: CALL_OW 488
29924: NOT
29925: OR
29926: IFFALSE 29930
// exit ;
29928: GO 30647
// pom := GetBase ( depot ) ;
29930: LD_ADDR_VAR 0 10
29934: PUSH
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL_OW 274
29944: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29945: LD_ADDR_VAR 0 11
29949: PUSH
29950: LD_VAR 0 2
29954: PPUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 248
29964: PPUSH
29965: CALL_OW 450
29969: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29970: LD_VAR 0 10
29974: PPUSH
29975: LD_INT 1
29977: PPUSH
29978: CALL_OW 275
29982: PUSH
29983: LD_VAR 0 11
29987: PUSH
29988: LD_INT 1
29990: ARRAY
29991: GREATEREQUAL
29992: PUSH
29993: LD_VAR 0 10
29997: PPUSH
29998: LD_INT 2
30000: PPUSH
30001: CALL_OW 275
30005: PUSH
30006: LD_VAR 0 11
30010: PUSH
30011: LD_INT 2
30013: ARRAY
30014: GREATEREQUAL
30015: AND
30016: PUSH
30017: LD_VAR 0 10
30021: PPUSH
30022: LD_INT 3
30024: PPUSH
30025: CALL_OW 275
30029: PUSH
30030: LD_VAR 0 11
30034: PUSH
30035: LD_INT 3
30037: ARRAY
30038: GREATEREQUAL
30039: AND
30040: NOT
30041: IFFALSE 30045
// exit ;
30043: GO 30647
// if GetBType ( depot ) = b_depot then
30045: LD_VAR 0 1
30049: PPUSH
30050: CALL_OW 266
30054: PUSH
30055: LD_INT 0
30057: EQUAL
30058: IFFALSE 30070
// dist := 28 else
30060: LD_ADDR_VAR 0 14
30064: PUSH
30065: LD_INT 28
30067: ST_TO_ADDR
30068: GO 30078
// dist := 36 ;
30070: LD_ADDR_VAR 0 14
30074: PUSH
30075: LD_INT 36
30077: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30078: LD_VAR 0 1
30082: PPUSH
30083: LD_VAR 0 3
30087: PPUSH
30088: LD_VAR 0 4
30092: PPUSH
30093: CALL_OW 297
30097: PUSH
30098: LD_VAR 0 14
30102: GREATER
30103: IFFALSE 30107
// exit ;
30105: GO 30647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30107: LD_ADDR_VAR 0 12
30111: PUSH
30112: LD_VAR 0 2
30116: PPUSH
30117: LD_VAR 0 3
30121: PPUSH
30122: LD_VAR 0 4
30126: PPUSH
30127: LD_VAR 0 5
30131: PPUSH
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 248
30141: PPUSH
30142: LD_INT 0
30144: PPUSH
30145: CALL 30652 0 6
30149: ST_TO_ADDR
// if not hexes then
30150: LD_VAR 0 12
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 30647
// hex := GetHexInfo ( x , y ) ;
30159: LD_ADDR_VAR 0 15
30163: PUSH
30164: LD_VAR 0 3
30168: PPUSH
30169: LD_VAR 0 4
30173: PPUSH
30174: CALL_OW 546
30178: ST_TO_ADDR
// if hex [ 1 ] then
30179: LD_VAR 0 15
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: IFFALSE 30191
// exit ;
30189: GO 30647
// height := hex [ 2 ] ;
30191: LD_ADDR_VAR 0 13
30195: PUSH
30196: LD_VAR 0 15
30200: PUSH
30201: LD_INT 2
30203: ARRAY
30204: ST_TO_ADDR
// for i = 1 to hexes do
30205: LD_ADDR_VAR 0 7
30209: PUSH
30210: DOUBLE
30211: LD_INT 1
30213: DEC
30214: ST_TO_ADDR
30215: LD_VAR 0 12
30219: PUSH
30220: FOR_TO
30221: IFFALSE 30551
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30223: LD_VAR 0 12
30227: PUSH
30228: LD_VAR 0 7
30232: ARRAY
30233: PUSH
30234: LD_INT 1
30236: ARRAY
30237: PPUSH
30238: LD_VAR 0 12
30242: PUSH
30243: LD_VAR 0 7
30247: ARRAY
30248: PUSH
30249: LD_INT 2
30251: ARRAY
30252: PPUSH
30253: CALL_OW 488
30257: NOT
30258: PUSH
30259: LD_VAR 0 12
30263: PUSH
30264: LD_VAR 0 7
30268: ARRAY
30269: PUSH
30270: LD_INT 1
30272: ARRAY
30273: PPUSH
30274: LD_VAR 0 12
30278: PUSH
30279: LD_VAR 0 7
30283: ARRAY
30284: PUSH
30285: LD_INT 2
30287: ARRAY
30288: PPUSH
30289: CALL_OW 428
30293: PUSH
30294: LD_INT 0
30296: GREATER
30297: OR
30298: PUSH
30299: LD_VAR 0 12
30303: PUSH
30304: LD_VAR 0 7
30308: ARRAY
30309: PUSH
30310: LD_INT 1
30312: ARRAY
30313: PPUSH
30314: LD_VAR 0 12
30318: PUSH
30319: LD_VAR 0 7
30323: ARRAY
30324: PUSH
30325: LD_INT 2
30327: ARRAY
30328: PPUSH
30329: CALL_OW 351
30333: OR
30334: IFFALSE 30340
// exit ;
30336: POP
30337: POP
30338: GO 30647
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30340: LD_ADDR_VAR 0 8
30344: PUSH
30345: LD_VAR 0 12
30349: PUSH
30350: LD_VAR 0 7
30354: ARRAY
30355: PUSH
30356: LD_INT 1
30358: ARRAY
30359: PPUSH
30360: LD_VAR 0 12
30364: PUSH
30365: LD_VAR 0 7
30369: ARRAY
30370: PUSH
30371: LD_INT 2
30373: ARRAY
30374: PPUSH
30375: CALL_OW 546
30379: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30380: LD_VAR 0 8
30384: PUSH
30385: LD_INT 1
30387: ARRAY
30388: PUSH
30389: LD_VAR 0 8
30393: PUSH
30394: LD_INT 2
30396: ARRAY
30397: PUSH
30398: LD_VAR 0 13
30402: PUSH
30403: LD_INT 2
30405: PLUS
30406: GREATER
30407: OR
30408: PUSH
30409: LD_VAR 0 8
30413: PUSH
30414: LD_INT 2
30416: ARRAY
30417: PUSH
30418: LD_VAR 0 13
30422: PUSH
30423: LD_INT 2
30425: MINUS
30426: LESS
30427: OR
30428: PUSH
30429: LD_VAR 0 8
30433: PUSH
30434: LD_INT 3
30436: ARRAY
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: LD_INT 8
30443: PUSH
30444: LD_INT 9
30446: PUSH
30447: LD_INT 10
30449: PUSH
30450: LD_INT 11
30452: PUSH
30453: LD_INT 12
30455: PUSH
30456: LD_INT 13
30458: PUSH
30459: LD_INT 16
30461: PUSH
30462: LD_INT 17
30464: PUSH
30465: LD_INT 18
30467: PUSH
30468: LD_INT 19
30470: PUSH
30471: LD_INT 20
30473: PUSH
30474: LD_INT 21
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: IN
30492: NOT
30493: OR
30494: PUSH
30495: LD_VAR 0 8
30499: PUSH
30500: LD_INT 5
30502: ARRAY
30503: NOT
30504: OR
30505: PUSH
30506: LD_VAR 0 8
30510: PUSH
30511: LD_INT 6
30513: ARRAY
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 7
30523: PUSH
30524: LD_INT 9
30526: PUSH
30527: LD_INT 10
30529: PUSH
30530: LD_INT 11
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: IN
30541: NOT
30542: OR
30543: IFFALSE 30549
// exit ;
30545: POP
30546: POP
30547: GO 30647
// end ;
30549: GO 30220
30551: POP
30552: POP
// side := GetSide ( depot ) ;
30553: LD_ADDR_VAR 0 9
30557: PUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 255
30567: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30568: LD_VAR 0 9
30572: PPUSH
30573: LD_VAR 0 3
30577: PPUSH
30578: LD_VAR 0 4
30582: PPUSH
30583: LD_INT 20
30585: PPUSH
30586: CALL 23301 0 4
30590: PUSH
30591: LD_INT 4
30593: ARRAY
30594: IFFALSE 30598
// exit ;
30596: GO 30647
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30598: LD_VAR 0 2
30602: PUSH
30603: LD_INT 29
30605: PUSH
30606: LD_INT 30
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: IN
30613: PUSH
30614: LD_VAR 0 3
30618: PPUSH
30619: LD_VAR 0 4
30623: PPUSH
30624: LD_VAR 0 9
30628: PPUSH
30629: CALL_OW 440
30633: NOT
30634: AND
30635: IFFALSE 30639
// exit ;
30637: GO 30647
// result := true ;
30639: LD_ADDR_VAR 0 6
30643: PUSH
30644: LD_INT 1
30646: ST_TO_ADDR
// end ;
30647: LD_VAR 0 6
30651: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
30652: LD_INT 0
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
30711: PPUSH
// result = [ ] ;
30712: LD_ADDR_VAR 0 7
30716: PUSH
30717: EMPTY
30718: ST_TO_ADDR
// temp_list = [ ] ;
30719: LD_ADDR_VAR 0 9
30723: PUSH
30724: EMPTY
30725: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30726: LD_VAR 0 4
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 3
30742: PUSH
30743: LD_INT 4
30745: PUSH
30746: LD_INT 5
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: IN
30757: NOT
30758: PUSH
30759: LD_VAR 0 1
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: IN
30774: PUSH
30775: LD_VAR 0 5
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: IN
30794: NOT
30795: AND
30796: OR
30797: IFFALSE 30801
// exit ;
30799: GO 49192
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30801: LD_VAR 0 1
30805: PUSH
30806: LD_INT 6
30808: PUSH
30809: LD_INT 7
30811: PUSH
30812: LD_INT 8
30814: PUSH
30815: LD_INT 13
30817: PUSH
30818: LD_INT 12
30820: PUSH
30821: LD_INT 15
30823: PUSH
30824: LD_INT 11
30826: PUSH
30827: LD_INT 14
30829: PUSH
30830: LD_INT 10
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: IN
30844: IFFALSE 30854
// btype = b_lab ;
30846: LD_ADDR_VAR 0 1
30850: PUSH
30851: LD_INT 6
30853: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30854: LD_VAR 0 6
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: IN
30873: NOT
30874: PUSH
30875: LD_VAR 0 1
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: LD_INT 2
30888: PUSH
30889: LD_INT 3
30891: PUSH
30892: LD_INT 6
30894: PUSH
30895: LD_INT 36
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: LD_INT 31
30906: PUSH
30907: LD_INT 32
30909: PUSH
30910: LD_INT 33
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: IN
30926: NOT
30927: PUSH
30928: LD_VAR 0 6
30932: PUSH
30933: LD_INT 1
30935: EQUAL
30936: AND
30937: OR
30938: PUSH
30939: LD_VAR 0 1
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: IN
30954: NOT
30955: PUSH
30956: LD_VAR 0 6
30960: PUSH
30961: LD_INT 2
30963: EQUAL
30964: AND
30965: OR
30966: IFFALSE 30976
// mode = 0 ;
30968: LD_ADDR_VAR 0 6
30972: PUSH
30973: LD_INT 0
30975: ST_TO_ADDR
// case mode of 0 :
30976: LD_VAR 0 6
30980: PUSH
30981: LD_INT 0
30983: DOUBLE
30984: EQUAL
30985: IFTRUE 30989
30987: GO 42442
30989: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30990: LD_ADDR_VAR 0 11
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 2
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31183: LD_ADDR_VAR 0 12
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: NEG
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 3
31340: NEG
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31379: LD_ADDR_VAR 0 13
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 3
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31578: LD_ADDR_VAR 0 14
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: LD_INT 3
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 3
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 2
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31774: LD_ADDR_VAR 0 15
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31967: LD_ADDR_VAR 0 16
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32160: LD_ADDR_VAR 0 17
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32390: LD_ADDR_VAR 0 18
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 0
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: NEG
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32620: LD_ADDR_VAR 0 19
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32850: LD_ADDR_VAR 0 20
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33080: LD_ADDR_VAR 0 21
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 2
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33310: LD_ADDR_VAR 0 22
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 0
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33540: LD_ADDR_VAR 0 23
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 3
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: LD_INT 3
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33820: LD_ADDR_VAR 0 24
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: LD_INT 2
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 2
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: NEG
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 2
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 3
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34096: LD_ADDR_VAR 0 25
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 2
34272: NEG
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 3
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34370: LD_ADDR_VAR 0 26
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 2
34557: NEG
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: NEG
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34646: LD_ADDR_VAR 0 27
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 2
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 2
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: NEG
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 3
34879: NEG
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 3
34891: NEG
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34926: LD_ADDR_VAR 0 28
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 3
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: LD_INT 3
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 3
35161: NEG
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 3
35173: NEG
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35208: LD_ADDR_VAR 0 29
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: LD_INT 2
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: LD_INT 3
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 3
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 3
35452: NEG
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35487: LD_ADDR_VAR 0 30
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 2
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35765: LD_ADDR_VAR 0 31
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: LD_INT 3
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 3
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 3
36008: NEG
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36043: LD_ADDR_VAR 0 32
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 2
36209: NEG
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 3
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 2
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 3
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36321: LD_ADDR_VAR 0 33
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: LD_INT 3
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 3
36565: NEG
36566: PUSH
36567: LD_INT 2
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36600: LD_ADDR_VAR 0 34
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 3
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 3
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36880: LD_ADDR_VAR 0 35
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36992: LD_ADDR_VAR 0 36
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37104: LD_ADDR_VAR 0 37
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37216: LD_ADDR_VAR 0 38
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37328: LD_ADDR_VAR 0 39
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37440: LD_ADDR_VAR 0 40
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37552: LD_ADDR_VAR 0 41
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 3
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 3
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 3
37795: PUSH
37796: LD_INT 3
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 3
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: NEG
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37902: LD_ADDR_VAR 0 42
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 3
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38252: LD_ADDR_VAR 0 43
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 3
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 3
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38600: LD_ADDR_VAR 0 44
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 3
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 3
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 3
38897: NEG
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: LD_INT 3
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38950: LD_ADDR_VAR 0 45
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: LD_INT 3
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 3
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: LD_INT 3
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 3
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 3
39247: NEG
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39300: LD_ADDR_VAR 0 46
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 3
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 3
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 3
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 3
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 3
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39648: LD_ADDR_VAR 0 47
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39799: LD_ADDR_VAR 0 48
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 0
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39946: LD_ADDR_VAR 0 49
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40090: LD_ADDR_VAR 0 50
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40234: LD_ADDR_VAR 0 51
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40381: LD_ADDR_VAR 0 52
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40532: LD_ADDR_VAR 0 53
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40762: LD_ADDR_VAR 0 54
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 2
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40992: LD_ADDR_VAR 0 55
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41222: LD_ADDR_VAR 0 56
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41452: LD_ADDR_VAR 0 57
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 2
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41682: LD_ADDR_VAR 0 58
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41912: LD_ADDR_VAR 0 59
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42000: LD_ADDR_VAR 0 60
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42088: LD_ADDR_VAR 0 61
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42176: LD_ADDR_VAR 0 62
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42264: LD_ADDR_VAR 0 63
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42352: LD_ADDR_VAR 0 64
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
// end ; 1 :
42440: GO 48337
42442: LD_INT 1
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42450
42448: GO 45073
42450: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42451: LD_ADDR_VAR 0 11
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 3
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42495: LD_ADDR_VAR 0 12
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 3
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42536: LD_ADDR_VAR 0 13
42540: PUSH
42541: LD_INT 3
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42576: LD_ADDR_VAR 0 14
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 2
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42617: LD_ADDR_VAR 0 15
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: NEG
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 3
42646: NEG
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42661: LD_ADDR_VAR 0 16
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: LD_INT 3
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 3
42680: NEG
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 3
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42707: LD_ADDR_VAR 0 17
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 3
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42751: LD_ADDR_VAR 0 18
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42792: LD_ADDR_VAR 0 19
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42832: LD_ADDR_VAR 0 20
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42873: LD_ADDR_VAR 0 21
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42917: LD_ADDR_VAR 0 22
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 3
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 3
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: LD_INT 3
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42963: LD_ADDR_VAR 0 23
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 3
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 4
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43007: LD_ADDR_VAR 0 24
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 4
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43048: LD_ADDR_VAR 0 25
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: LD_INT 4
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43088: LD_ADDR_VAR 0 26
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 3
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: LD_INT 4
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43129: LD_ADDR_VAR 0 27
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 3
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 4
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: LIST
43172: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43173: LD_ADDR_VAR 0 28
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: LD_INT 4
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 4
43204: NEG
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43219: LD_ADDR_VAR 0 29
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: LD_INT 3
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 4
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 4
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 3
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 5
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 5
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 4
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 6
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 6
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 5
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43374: LD_ADDR_VAR 0 30
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 3
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 4
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 4
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 5
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 5
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 5
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 6
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 6
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43517: LD_ADDR_VAR 0 31
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 4
43564: PUSH
43565: LD_INT 4
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 4
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 5
43584: PUSH
43585: LD_INT 4
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 5
43594: PUSH
43595: LD_INT 5
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 4
43604: PUSH
43605: LD_INT 5
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 6
43614: PUSH
43615: LD_INT 5
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 6
43624: PUSH
43625: LD_INT 6
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 5
43634: PUSH
43635: LD_INT 6
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43656: LD_ADDR_VAR 0 32
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 3
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 4
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 4
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 5
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 5
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 4
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 6
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 6
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 5
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43799: LD_ADDR_VAR 0 33
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 3
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 4
43851: NEG
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 4
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 4
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 5
43885: NEG
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 5
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 5
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 6
43919: NEG
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 6
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43954: LD_ADDR_VAR 0 34
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: LD_INT 3
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 3
43973: NEG
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: LD_INT 3
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 3
43997: NEG
43998: PUSH
43999: LD_INT 4
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 4
44009: NEG
44010: PUSH
44011: LD_INT 3
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 4
44021: NEG
44022: PUSH
44023: LD_INT 4
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 4
44033: NEG
44034: PUSH
44035: LD_INT 5
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 5
44045: NEG
44046: PUSH
44047: LD_INT 4
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 5
44057: NEG
44058: PUSH
44059: LD_INT 5
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 5
44069: NEG
44070: PUSH
44071: LD_INT 6
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 6
44081: NEG
44082: PUSH
44083: LD_INT 5
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 6
44093: NEG
44094: PUSH
44095: LD_INT 6
44097: NEG
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44117: LD_ADDR_VAR 0 41
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 3
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44161: LD_ADDR_VAR 0 42
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44202: LD_ADDR_VAR 0 43
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44242: LD_ADDR_VAR 0 44
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44283: LD_ADDR_VAR 0 45
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44327: LD_ADDR_VAR 0 46
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44373: LD_ADDR_VAR 0 47
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: LD_INT 3
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 3
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44406: LD_ADDR_VAR 0 48
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44437: LD_ADDR_VAR 0 49
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44466: LD_ADDR_VAR 0 50
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44495: LD_ADDR_VAR 0 51
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44526: LD_ADDR_VAR 0 52
44530: PUSH
44531: LD_INT 3
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44559: LD_ADDR_VAR 0 53
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 3
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44603: LD_ADDR_VAR 0 54
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44644: LD_ADDR_VAR 0 55
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44684: LD_ADDR_VAR 0 56
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44725: LD_ADDR_VAR 0 57
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44769: LD_ADDR_VAR 0 58
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 3
44788: NEG
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: LD_INT 3
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44815: LD_ADDR_VAR 0 59
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44859: LD_ADDR_VAR 0 60
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44900: LD_ADDR_VAR 0 61
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44940: LD_ADDR_VAR 0 62
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44981: LD_ADDR_VAR 0 63
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45025: LD_ADDR_VAR 0 64
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// end ; 2 :
45071: GO 48337
45073: LD_INT 2
45075: DOUBLE
45076: EQUAL
45077: IFTRUE 45081
45079: GO 48336
45081: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45082: LD_ADDR_VAR 0 29
45086: PUSH
45087: LD_INT 4
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 4
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 5
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 5
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 4
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 3
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 5
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 3
45182: PUSH
45183: LD_INT 3
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 4
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 4
45212: PUSH
45213: LD_INT 4
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: LD_INT 4
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: LD_INT 3
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 4
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 4
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 4
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 4
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 5
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 5
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 4
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 5
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 3
45376: NEG
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 3
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 4
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 4
45444: NEG
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: LD_INT 4
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 4
45479: NEG
45480: PUSH
45481: LD_INT 5
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: NEG
45492: PUSH
45493: LD_INT 4
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: LD_INT 3
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 4
45515: NEG
45516: PUSH
45517: LD_INT 3
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 5
45527: NEG
45528: PUSH
45529: LD_INT 4
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 5
45539: NEG
45540: PUSH
45541: LD_INT 5
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: NEG
45552: PUSH
45553: LD_INT 5
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 5
45563: NEG
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45620: LD_ADDR_VAR 0 30
45624: PUSH
45625: LD_INT 4
45627: PUSH
45628: LD_INT 4
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 4
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 5
45647: PUSH
45648: LD_INT 4
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 5
45657: PUSH
45658: LD_INT 5
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 4
45667: PUSH
45668: LD_INT 5
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 3
45677: PUSH
45678: LD_INT 4
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 3
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 5
45697: PUSH
45698: LD_INT 3
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: LD_INT 5
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 3
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 4
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 4
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 4
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 4
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 4
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 4
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 5
45866: NEG
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 5
45877: NEG
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 5
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: LD_INT 4
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 4
45972: NEG
45973: PUSH
45974: LD_INT 3
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 4
45984: NEG
45985: PUSH
45986: LD_INT 4
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 4
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 4
46008: NEG
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 4
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 5
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 4
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 5
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: NEG
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46167: LD_ADDR_VAR 0 31
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 4
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 4
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 5
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 5
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 4
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: LD_INT 5
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 3
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 4
46323: NEG
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 4
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 4
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: LD_INT 4
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 4
46381: NEG
46382: PUSH
46383: LD_INT 5
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: LD_INT 4
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 4
46417: NEG
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 5
46429: NEG
46430: PUSH
46431: LD_INT 4
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 5
46441: NEG
46442: PUSH
46443: LD_INT 5
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: LD_INT 5
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 5
46465: NEG
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 4
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: LD_INT 4
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 4
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 4
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 4
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 5
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 4
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 5
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46717: LD_ADDR_VAR 0 32
46721: PUSH
46722: LD_INT 4
46724: NEG
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 4
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 4
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 5
46780: NEG
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 5
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 5
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 3
46826: NEG
46827: PUSH
46828: LD_INT 3
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 4
46886: NEG
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 4
46898: NEG
46899: PUSH
46900: LD_INT 4
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 4
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 4
46922: NEG
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 4
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 5
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 4
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 4
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 5
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: LD_INT 5
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 4
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 4
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 4
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 4
47129: PUSH
47130: LD_INT 4
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 4
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 5
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 5
47159: PUSH
47160: LD_INT 5
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: LD_INT 5
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: LD_INT 4
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 5
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: LD_INT 5
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47264: LD_ADDR_VAR 0 33
47268: PUSH
47269: LD_INT 4
47271: NEG
47272: PUSH
47273: LD_INT 4
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 4
47283: NEG
47284: PUSH
47285: LD_INT 5
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: LD_INT 4
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 5
47331: NEG
47332: PUSH
47333: LD_INT 4
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 5
47343: NEG
47344: PUSH
47345: LD_INT 5
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: LD_INT 5
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 5
47367: NEG
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 3
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 4
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 4
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: LD_INT 4
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 4
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 4
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 5
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 5
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 4
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 4
47594: PUSH
47595: LD_INT 3
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 4
47604: PUSH
47605: LD_INT 4
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: PUSH
47615: LD_INT 4
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 4
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 4
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 4
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 5
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 5
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 4
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 5
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47802: LD_ADDR_VAR 0 34
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 4
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 5
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 4
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 4
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 5
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 5
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 4
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 4
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 4
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 4
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 4
48014: PUSH
48015: LD_INT 3
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 5
48024: PUSH
48025: LD_INT 4
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 5
48034: PUSH
48035: LD_INT 5
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 4
48044: PUSH
48045: LD_INT 5
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: PUSH
48055: LD_INT 4
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: LD_INT 3
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 5
48074: PUSH
48075: LD_INT 3
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: LD_INT 5
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 3
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 4
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 4
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 4
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 4
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 4
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 5
48243: NEG
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 5
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 5
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: ST_TO_ADDR
// end ; end ;
48334: GO 48337
48336: POP
// case btype of b_depot , b_warehouse :
48337: LD_VAR 0 1
48341: PUSH
48342: LD_INT 0
48344: DOUBLE
48345: EQUAL
48346: IFTRUE 48356
48348: LD_INT 1
48350: DOUBLE
48351: EQUAL
48352: IFTRUE 48356
48354: GO 48557
48356: POP
// case nation of nation_american :
48357: LD_VAR 0 5
48361: PUSH
48362: LD_INT 1
48364: DOUBLE
48365: EQUAL
48366: IFTRUE 48370
48368: GO 48426
48370: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
48371: LD_ADDR_VAR 0 9
48375: PUSH
48376: LD_VAR 0 11
48380: PUSH
48381: LD_VAR 0 12
48385: PUSH
48386: LD_VAR 0 13
48390: PUSH
48391: LD_VAR 0 14
48395: PUSH
48396: LD_VAR 0 15
48400: PUSH
48401: LD_VAR 0 16
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: PUSH
48414: LD_VAR 0 4
48418: PUSH
48419: LD_INT 1
48421: PLUS
48422: ARRAY
48423: ST_TO_ADDR
48424: GO 48555
48426: LD_INT 2
48428: DOUBLE
48429: EQUAL
48430: IFTRUE 48434
48432: GO 48490
48434: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
48435: LD_ADDR_VAR 0 9
48439: PUSH
48440: LD_VAR 0 17
48444: PUSH
48445: LD_VAR 0 18
48449: PUSH
48450: LD_VAR 0 19
48454: PUSH
48455: LD_VAR 0 20
48459: PUSH
48460: LD_VAR 0 21
48464: PUSH
48465: LD_VAR 0 22
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: PUSH
48478: LD_VAR 0 4
48482: PUSH
48483: LD_INT 1
48485: PLUS
48486: ARRAY
48487: ST_TO_ADDR
48488: GO 48555
48490: LD_INT 3
48492: DOUBLE
48493: EQUAL
48494: IFTRUE 48498
48496: GO 48554
48498: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48499: LD_ADDR_VAR 0 9
48503: PUSH
48504: LD_VAR 0 23
48508: PUSH
48509: LD_VAR 0 24
48513: PUSH
48514: LD_VAR 0 25
48518: PUSH
48519: LD_VAR 0 26
48523: PUSH
48524: LD_VAR 0 27
48528: PUSH
48529: LD_VAR 0 28
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: PUSH
48542: LD_VAR 0 4
48546: PUSH
48547: LD_INT 1
48549: PLUS
48550: ARRAY
48551: ST_TO_ADDR
48552: GO 48555
48554: POP
48555: GO 49110
48557: LD_INT 2
48559: DOUBLE
48560: EQUAL
48561: IFTRUE 48571
48563: LD_INT 3
48565: DOUBLE
48566: EQUAL
48567: IFTRUE 48571
48569: GO 48627
48571: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48572: LD_ADDR_VAR 0 9
48576: PUSH
48577: LD_VAR 0 29
48581: PUSH
48582: LD_VAR 0 30
48586: PUSH
48587: LD_VAR 0 31
48591: PUSH
48592: LD_VAR 0 32
48596: PUSH
48597: LD_VAR 0 33
48601: PUSH
48602: LD_VAR 0 34
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: PUSH
48615: LD_VAR 0 4
48619: PUSH
48620: LD_INT 1
48622: PLUS
48623: ARRAY
48624: ST_TO_ADDR
48625: GO 49110
48627: LD_INT 16
48629: DOUBLE
48630: EQUAL
48631: IFTRUE 48689
48633: LD_INT 17
48635: DOUBLE
48636: EQUAL
48637: IFTRUE 48689
48639: LD_INT 18
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48689
48645: LD_INT 19
48647: DOUBLE
48648: EQUAL
48649: IFTRUE 48689
48651: LD_INT 22
48653: DOUBLE
48654: EQUAL
48655: IFTRUE 48689
48657: LD_INT 20
48659: DOUBLE
48660: EQUAL
48661: IFTRUE 48689
48663: LD_INT 21
48665: DOUBLE
48666: EQUAL
48667: IFTRUE 48689
48669: LD_INT 23
48671: DOUBLE
48672: EQUAL
48673: IFTRUE 48689
48675: LD_INT 24
48677: DOUBLE
48678: EQUAL
48679: IFTRUE 48689
48681: LD_INT 25
48683: DOUBLE
48684: EQUAL
48685: IFTRUE 48689
48687: GO 48745
48689: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48690: LD_ADDR_VAR 0 9
48694: PUSH
48695: LD_VAR 0 35
48699: PUSH
48700: LD_VAR 0 36
48704: PUSH
48705: LD_VAR 0 37
48709: PUSH
48710: LD_VAR 0 38
48714: PUSH
48715: LD_VAR 0 39
48719: PUSH
48720: LD_VAR 0 40
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: PUSH
48733: LD_VAR 0 4
48737: PUSH
48738: LD_INT 1
48740: PLUS
48741: ARRAY
48742: ST_TO_ADDR
48743: GO 49110
48745: LD_INT 6
48747: DOUBLE
48748: EQUAL
48749: IFTRUE 48801
48751: LD_INT 7
48753: DOUBLE
48754: EQUAL
48755: IFTRUE 48801
48757: LD_INT 8
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48801
48763: LD_INT 13
48765: DOUBLE
48766: EQUAL
48767: IFTRUE 48801
48769: LD_INT 12
48771: DOUBLE
48772: EQUAL
48773: IFTRUE 48801
48775: LD_INT 15
48777: DOUBLE
48778: EQUAL
48779: IFTRUE 48801
48781: LD_INT 11
48783: DOUBLE
48784: EQUAL
48785: IFTRUE 48801
48787: LD_INT 14
48789: DOUBLE
48790: EQUAL
48791: IFTRUE 48801
48793: LD_INT 10
48795: DOUBLE
48796: EQUAL
48797: IFTRUE 48801
48799: GO 48857
48801: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
48802: LD_ADDR_VAR 0 9
48806: PUSH
48807: LD_VAR 0 41
48811: PUSH
48812: LD_VAR 0 42
48816: PUSH
48817: LD_VAR 0 43
48821: PUSH
48822: LD_VAR 0 44
48826: PUSH
48827: LD_VAR 0 45
48831: PUSH
48832: LD_VAR 0 46
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: PUSH
48845: LD_VAR 0 4
48849: PUSH
48850: LD_INT 1
48852: PLUS
48853: ARRAY
48854: ST_TO_ADDR
48855: GO 49110
48857: LD_INT 36
48859: DOUBLE
48860: EQUAL
48861: IFTRUE 48865
48863: GO 48921
48865: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_VAR 0 47
48875: PUSH
48876: LD_VAR 0 48
48880: PUSH
48881: LD_VAR 0 49
48885: PUSH
48886: LD_VAR 0 50
48890: PUSH
48891: LD_VAR 0 51
48895: PUSH
48896: LD_VAR 0 52
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: PUSH
48909: LD_VAR 0 4
48913: PUSH
48914: LD_INT 1
48916: PLUS
48917: ARRAY
48918: ST_TO_ADDR
48919: GO 49110
48921: LD_INT 4
48923: DOUBLE
48924: EQUAL
48925: IFTRUE 48947
48927: LD_INT 5
48929: DOUBLE
48930: EQUAL
48931: IFTRUE 48947
48933: LD_INT 34
48935: DOUBLE
48936: EQUAL
48937: IFTRUE 48947
48939: LD_INT 37
48941: DOUBLE
48942: EQUAL
48943: IFTRUE 48947
48945: GO 49003
48947: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48948: LD_ADDR_VAR 0 9
48952: PUSH
48953: LD_VAR 0 53
48957: PUSH
48958: LD_VAR 0 54
48962: PUSH
48963: LD_VAR 0 55
48967: PUSH
48968: LD_VAR 0 56
48972: PUSH
48973: LD_VAR 0 57
48977: PUSH
48978: LD_VAR 0 58
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: PUSH
48991: LD_VAR 0 4
48995: PUSH
48996: LD_INT 1
48998: PLUS
48999: ARRAY
49000: ST_TO_ADDR
49001: GO 49110
49003: LD_INT 31
49005: DOUBLE
49006: EQUAL
49007: IFTRUE 49053
49009: LD_INT 32
49011: DOUBLE
49012: EQUAL
49013: IFTRUE 49053
49015: LD_INT 33
49017: DOUBLE
49018: EQUAL
49019: IFTRUE 49053
49021: LD_INT 27
49023: DOUBLE
49024: EQUAL
49025: IFTRUE 49053
49027: LD_INT 26
49029: DOUBLE
49030: EQUAL
49031: IFTRUE 49053
49033: LD_INT 28
49035: DOUBLE
49036: EQUAL
49037: IFTRUE 49053
49039: LD_INT 29
49041: DOUBLE
49042: EQUAL
49043: IFTRUE 49053
49045: LD_INT 30
49047: DOUBLE
49048: EQUAL
49049: IFTRUE 49053
49051: GO 49109
49053: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
49054: LD_ADDR_VAR 0 9
49058: PUSH
49059: LD_VAR 0 59
49063: PUSH
49064: LD_VAR 0 60
49068: PUSH
49069: LD_VAR 0 61
49073: PUSH
49074: LD_VAR 0 62
49078: PUSH
49079: LD_VAR 0 63
49083: PUSH
49084: LD_VAR 0 64
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: PUSH
49097: LD_VAR 0 4
49101: PUSH
49102: LD_INT 1
49104: PLUS
49105: ARRAY
49106: ST_TO_ADDR
49107: GO 49110
49109: POP
// temp_list2 = [ ] ;
49110: LD_ADDR_VAR 0 10
49114: PUSH
49115: EMPTY
49116: ST_TO_ADDR
// for i in temp_list do
49117: LD_ADDR_VAR 0 8
49121: PUSH
49122: LD_VAR 0 9
49126: PUSH
49127: FOR_IN
49128: IFFALSE 49180
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49130: LD_ADDR_VAR 0 10
49134: PUSH
49135: LD_VAR 0 10
49139: PUSH
49140: LD_VAR 0 8
49144: PUSH
49145: LD_INT 1
49147: ARRAY
49148: PUSH
49149: LD_VAR 0 2
49153: PLUS
49154: PUSH
49155: LD_VAR 0 8
49159: PUSH
49160: LD_INT 2
49162: ARRAY
49163: PUSH
49164: LD_VAR 0 3
49168: PLUS
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: ADD
49177: ST_TO_ADDR
49178: GO 49127
49180: POP
49181: POP
// result = temp_list2 ;
49182: LD_ADDR_VAR 0 7
49186: PUSH
49187: LD_VAR 0 10
49191: ST_TO_ADDR
// end ;
49192: LD_VAR 0 7
49196: RET
// export function EnemyInRange ( unit , dist ) ; begin
49197: LD_INT 0
49199: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49200: LD_ADDR_VAR 0 3
49204: PUSH
49205: LD_VAR 0 1
49209: PPUSH
49210: CALL_OW 255
49214: PPUSH
49215: LD_VAR 0 1
49219: PPUSH
49220: CALL_OW 250
49224: PPUSH
49225: LD_VAR 0 1
49229: PPUSH
49230: CALL_OW 251
49234: PPUSH
49235: LD_VAR 0 2
49239: PPUSH
49240: CALL 23301 0 4
49244: PUSH
49245: LD_INT 4
49247: ARRAY
49248: ST_TO_ADDR
// end ;
49249: LD_VAR 0 3
49253: RET
// export function PlayerSeeMe ( unit ) ; begin
49254: LD_INT 0
49256: PPUSH
// result := See ( your_side , unit ) ;
49257: LD_ADDR_VAR 0 2
49261: PUSH
49262: LD_OWVAR 2
49266: PPUSH
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 292
49276: ST_TO_ADDR
// end ;
49277: LD_VAR 0 2
49281: RET
// export function ReverseDir ( unit ) ; begin
49282: LD_INT 0
49284: PPUSH
// if not unit then
49285: LD_VAR 0 1
49289: NOT
49290: IFFALSE 49294
// exit ;
49292: GO 49317
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49294: LD_ADDR_VAR 0 2
49298: PUSH
49299: LD_VAR 0 1
49303: PPUSH
49304: CALL_OW 254
49308: PUSH
49309: LD_INT 3
49311: PLUS
49312: PUSH
49313: LD_INT 6
49315: MOD
49316: ST_TO_ADDR
// end ;
49317: LD_VAR 0 2
49321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49322: LD_INT 0
49324: PPUSH
49325: PPUSH
49326: PPUSH
49327: PPUSH
49328: PPUSH
// if not hexes then
49329: LD_VAR 0 2
49333: NOT
49334: IFFALSE 49338
// exit ;
49336: GO 49486
// dist := 9999 ;
49338: LD_ADDR_VAR 0 5
49342: PUSH
49343: LD_INT 9999
49345: ST_TO_ADDR
// for i = 1 to hexes do
49346: LD_ADDR_VAR 0 4
49350: PUSH
49351: DOUBLE
49352: LD_INT 1
49354: DEC
49355: ST_TO_ADDR
49356: LD_VAR 0 2
49360: PUSH
49361: FOR_TO
49362: IFFALSE 49474
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49364: LD_VAR 0 1
49368: PPUSH
49369: LD_VAR 0 2
49373: PUSH
49374: LD_VAR 0 4
49378: ARRAY
49379: PUSH
49380: LD_INT 1
49382: ARRAY
49383: PPUSH
49384: LD_VAR 0 2
49388: PUSH
49389: LD_VAR 0 4
49393: ARRAY
49394: PUSH
49395: LD_INT 2
49397: ARRAY
49398: PPUSH
49399: CALL_OW 297
49403: PUSH
49404: LD_VAR 0 5
49408: LESS
49409: IFFALSE 49472
// begin hex := hexes [ i ] ;
49411: LD_ADDR_VAR 0 7
49415: PUSH
49416: LD_VAR 0 2
49420: PUSH
49421: LD_VAR 0 4
49425: ARRAY
49426: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49427: LD_ADDR_VAR 0 5
49431: PUSH
49432: LD_VAR 0 1
49436: PPUSH
49437: LD_VAR 0 2
49441: PUSH
49442: LD_VAR 0 4
49446: ARRAY
49447: PUSH
49448: LD_INT 1
49450: ARRAY
49451: PPUSH
49452: LD_VAR 0 2
49456: PUSH
49457: LD_VAR 0 4
49461: ARRAY
49462: PUSH
49463: LD_INT 2
49465: ARRAY
49466: PPUSH
49467: CALL_OW 297
49471: ST_TO_ADDR
// end ; end ;
49472: GO 49361
49474: POP
49475: POP
// result := hex ;
49476: LD_ADDR_VAR 0 3
49480: PUSH
49481: LD_VAR 0 7
49485: ST_TO_ADDR
// end ;
49486: LD_VAR 0 3
49490: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49491: LD_INT 0
49493: PPUSH
49494: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49495: LD_VAR 0 1
49499: NOT
49500: PUSH
49501: LD_VAR 0 1
49505: PUSH
49506: LD_INT 21
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 23
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PPUSH
49530: CALL_OW 69
49534: IN
49535: NOT
49536: OR
49537: IFFALSE 49541
// exit ;
49539: GO 49588
// for i = 1 to 3 do
49541: LD_ADDR_VAR 0 3
49545: PUSH
49546: DOUBLE
49547: LD_INT 1
49549: DEC
49550: ST_TO_ADDR
49551: LD_INT 3
49553: PUSH
49554: FOR_TO
49555: IFFALSE 49586
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49557: LD_VAR 0 1
49561: PPUSH
49562: CALL_OW 250
49566: PPUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: CALL_OW 251
49576: PPUSH
49577: LD_INT 1
49579: PPUSH
49580: CALL_OW 453
49584: GO 49554
49586: POP
49587: POP
// end ;
49588: LD_VAR 0 2
49592: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49593: LD_INT 0
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49601: LD_VAR 0 1
49605: NOT
49606: PUSH
49607: LD_VAR 0 2
49611: NOT
49612: OR
49613: PUSH
49614: LD_VAR 0 1
49618: PPUSH
49619: CALL_OW 314
49623: OR
49624: IFFALSE 49628
// exit ;
49626: GO 50069
// x := GetX ( enemy_unit ) ;
49628: LD_ADDR_VAR 0 7
49632: PUSH
49633: LD_VAR 0 2
49637: PPUSH
49638: CALL_OW 250
49642: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49643: LD_ADDR_VAR 0 8
49647: PUSH
49648: LD_VAR 0 2
49652: PPUSH
49653: CALL_OW 251
49657: ST_TO_ADDR
// if not x or not y then
49658: LD_VAR 0 7
49662: NOT
49663: PUSH
49664: LD_VAR 0 8
49668: NOT
49669: OR
49670: IFFALSE 49674
// exit ;
49672: GO 50069
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49674: LD_ADDR_VAR 0 6
49678: PUSH
49679: LD_VAR 0 7
49683: PPUSH
49684: LD_INT 0
49686: PPUSH
49687: LD_INT 4
49689: PPUSH
49690: CALL_OW 272
49694: PUSH
49695: LD_VAR 0 8
49699: PPUSH
49700: LD_INT 0
49702: PPUSH
49703: LD_INT 4
49705: PPUSH
49706: CALL_OW 273
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_VAR 0 7
49719: PPUSH
49720: LD_INT 1
49722: PPUSH
49723: LD_INT 4
49725: PPUSH
49726: CALL_OW 272
49730: PUSH
49731: LD_VAR 0 8
49735: PPUSH
49736: LD_INT 1
49738: PPUSH
49739: LD_INT 4
49741: PPUSH
49742: CALL_OW 273
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_VAR 0 7
49755: PPUSH
49756: LD_INT 2
49758: PPUSH
49759: LD_INT 4
49761: PPUSH
49762: CALL_OW 272
49766: PUSH
49767: LD_VAR 0 8
49771: PPUSH
49772: LD_INT 2
49774: PPUSH
49775: LD_INT 4
49777: PPUSH
49778: CALL_OW 273
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_VAR 0 7
49791: PPUSH
49792: LD_INT 3
49794: PPUSH
49795: LD_INT 4
49797: PPUSH
49798: CALL_OW 272
49802: PUSH
49803: LD_VAR 0 8
49807: PPUSH
49808: LD_INT 3
49810: PPUSH
49811: LD_INT 4
49813: PPUSH
49814: CALL_OW 273
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_VAR 0 7
49827: PPUSH
49828: LD_INT 4
49830: PPUSH
49831: LD_INT 4
49833: PPUSH
49834: CALL_OW 272
49838: PUSH
49839: LD_VAR 0 8
49843: PPUSH
49844: LD_INT 4
49846: PPUSH
49847: LD_INT 4
49849: PPUSH
49850: CALL_OW 273
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_VAR 0 7
49863: PPUSH
49864: LD_INT 5
49866: PPUSH
49867: LD_INT 4
49869: PPUSH
49870: CALL_OW 272
49874: PUSH
49875: LD_VAR 0 8
49879: PPUSH
49880: LD_INT 5
49882: PPUSH
49883: LD_INT 4
49885: PPUSH
49886: CALL_OW 273
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// for i = tmp downto 1 do
49903: LD_ADDR_VAR 0 4
49907: PUSH
49908: DOUBLE
49909: LD_VAR 0 6
49913: INC
49914: ST_TO_ADDR
49915: LD_INT 1
49917: PUSH
49918: FOR_DOWNTO
49919: IFFALSE 50020
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49921: LD_VAR 0 6
49925: PUSH
49926: LD_VAR 0 4
49930: ARRAY
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: PPUSH
49936: LD_VAR 0 6
49940: PUSH
49941: LD_VAR 0 4
49945: ARRAY
49946: PUSH
49947: LD_INT 2
49949: ARRAY
49950: PPUSH
49951: CALL_OW 488
49955: NOT
49956: PUSH
49957: LD_VAR 0 6
49961: PUSH
49962: LD_VAR 0 4
49966: ARRAY
49967: PUSH
49968: LD_INT 1
49970: ARRAY
49971: PPUSH
49972: LD_VAR 0 6
49976: PUSH
49977: LD_VAR 0 4
49981: ARRAY
49982: PUSH
49983: LD_INT 2
49985: ARRAY
49986: PPUSH
49987: CALL_OW 428
49991: PUSH
49992: LD_INT 0
49994: NONEQUAL
49995: OR
49996: IFFALSE 50018
// tmp := Delete ( tmp , i ) ;
49998: LD_ADDR_VAR 0 6
50002: PUSH
50003: LD_VAR 0 6
50007: PPUSH
50008: LD_VAR 0 4
50012: PPUSH
50013: CALL_OW 3
50017: ST_TO_ADDR
50018: GO 49918
50020: POP
50021: POP
// j := GetClosestHex ( unit , tmp ) ;
50022: LD_ADDR_VAR 0 5
50026: PUSH
50027: LD_VAR 0 1
50031: PPUSH
50032: LD_VAR 0 6
50036: PPUSH
50037: CALL 49322 0 2
50041: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50042: LD_VAR 0 1
50046: PPUSH
50047: LD_VAR 0 5
50051: PUSH
50052: LD_INT 1
50054: ARRAY
50055: PPUSH
50056: LD_VAR 0 5
50060: PUSH
50061: LD_INT 2
50063: ARRAY
50064: PPUSH
50065: CALL_OW 111
// end ;
50069: LD_VAR 0 3
50073: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50074: LD_INT 0
50076: PPUSH
50077: PPUSH
50078: PPUSH
// uc_side = 0 ;
50079: LD_ADDR_OWVAR 20
50083: PUSH
50084: LD_INT 0
50086: ST_TO_ADDR
// uc_nation = 0 ;
50087: LD_ADDR_OWVAR 21
50091: PUSH
50092: LD_INT 0
50094: ST_TO_ADDR
// InitHc ;
50095: CALL_OW 19
// InitVc ;
50099: CALL_OW 20
// if mastodonts then
50103: LD_VAR 0 6
50107: IFFALSE 50174
// for i = 1 to mastodonts do
50109: LD_ADDR_VAR 0 11
50113: PUSH
50114: DOUBLE
50115: LD_INT 1
50117: DEC
50118: ST_TO_ADDR
50119: LD_VAR 0 6
50123: PUSH
50124: FOR_TO
50125: IFFALSE 50172
// begin vc_chassis := 31 ;
50127: LD_ADDR_OWVAR 37
50131: PUSH
50132: LD_INT 31
50134: ST_TO_ADDR
// vc_control := control_rider ;
50135: LD_ADDR_OWVAR 38
50139: PUSH
50140: LD_INT 4
50142: ST_TO_ADDR
// animal := CreateVehicle ;
50143: LD_ADDR_VAR 0 12
50147: PUSH
50148: CALL_OW 45
50152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50153: LD_VAR 0 12
50157: PPUSH
50158: LD_VAR 0 8
50162: PPUSH
50163: LD_INT 0
50165: PPUSH
50166: CALL 52243 0 3
// end ;
50170: GO 50124
50172: POP
50173: POP
// if horses then
50174: LD_VAR 0 5
50178: IFFALSE 50245
// for i = 1 to horses do
50180: LD_ADDR_VAR 0 11
50184: PUSH
50185: DOUBLE
50186: LD_INT 1
50188: DEC
50189: ST_TO_ADDR
50190: LD_VAR 0 5
50194: PUSH
50195: FOR_TO
50196: IFFALSE 50243
// begin hc_class := 21 ;
50198: LD_ADDR_OWVAR 28
50202: PUSH
50203: LD_INT 21
50205: ST_TO_ADDR
// hc_gallery :=  ;
50206: LD_ADDR_OWVAR 33
50210: PUSH
50211: LD_STRING 
50213: ST_TO_ADDR
// animal := CreateHuman ;
50214: LD_ADDR_VAR 0 12
50218: PUSH
50219: CALL_OW 44
50223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50224: LD_VAR 0 12
50228: PPUSH
50229: LD_VAR 0 8
50233: PPUSH
50234: LD_INT 0
50236: PPUSH
50237: CALL 52243 0 3
// end ;
50241: GO 50195
50243: POP
50244: POP
// if birds then
50245: LD_VAR 0 1
50249: IFFALSE 50316
// for i = 1 to birds do
50251: LD_ADDR_VAR 0 11
50255: PUSH
50256: DOUBLE
50257: LD_INT 1
50259: DEC
50260: ST_TO_ADDR
50261: LD_VAR 0 1
50265: PUSH
50266: FOR_TO
50267: IFFALSE 50314
// begin hc_class = 18 ;
50269: LD_ADDR_OWVAR 28
50273: PUSH
50274: LD_INT 18
50276: ST_TO_ADDR
// hc_gallery =  ;
50277: LD_ADDR_OWVAR 33
50281: PUSH
50282: LD_STRING 
50284: ST_TO_ADDR
// animal := CreateHuman ;
50285: LD_ADDR_VAR 0 12
50289: PUSH
50290: CALL_OW 44
50294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50295: LD_VAR 0 12
50299: PPUSH
50300: LD_VAR 0 8
50304: PPUSH
50305: LD_INT 0
50307: PPUSH
50308: CALL 52243 0 3
// end ;
50312: GO 50266
50314: POP
50315: POP
// if tigers then
50316: LD_VAR 0 2
50320: IFFALSE 50404
// for i = 1 to tigers do
50322: LD_ADDR_VAR 0 11
50326: PUSH
50327: DOUBLE
50328: LD_INT 1
50330: DEC
50331: ST_TO_ADDR
50332: LD_VAR 0 2
50336: PUSH
50337: FOR_TO
50338: IFFALSE 50402
// begin hc_class = class_tiger ;
50340: LD_ADDR_OWVAR 28
50344: PUSH
50345: LD_INT 14
50347: ST_TO_ADDR
// hc_gallery =  ;
50348: LD_ADDR_OWVAR 33
50352: PUSH
50353: LD_STRING 
50355: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50356: LD_ADDR_OWVAR 35
50360: PUSH
50361: LD_INT 7
50363: NEG
50364: PPUSH
50365: LD_INT 7
50367: PPUSH
50368: CALL_OW 12
50372: ST_TO_ADDR
// animal := CreateHuman ;
50373: LD_ADDR_VAR 0 12
50377: PUSH
50378: CALL_OW 44
50382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50383: LD_VAR 0 12
50387: PPUSH
50388: LD_VAR 0 8
50392: PPUSH
50393: LD_INT 0
50395: PPUSH
50396: CALL 52243 0 3
// end ;
50400: GO 50337
50402: POP
50403: POP
// if apemans then
50404: LD_VAR 0 3
50408: IFFALSE 50531
// for i = 1 to apemans do
50410: LD_ADDR_VAR 0 11
50414: PUSH
50415: DOUBLE
50416: LD_INT 1
50418: DEC
50419: ST_TO_ADDR
50420: LD_VAR 0 3
50424: PUSH
50425: FOR_TO
50426: IFFALSE 50529
// begin hc_class = class_apeman ;
50428: LD_ADDR_OWVAR 28
50432: PUSH
50433: LD_INT 12
50435: ST_TO_ADDR
// hc_gallery =  ;
50436: LD_ADDR_OWVAR 33
50440: PUSH
50441: LD_STRING 
50443: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50444: LD_ADDR_OWVAR 35
50448: PUSH
50449: LD_INT 5
50451: NEG
50452: PPUSH
50453: LD_INT 5
50455: PPUSH
50456: CALL_OW 12
50460: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50461: LD_ADDR_OWVAR 31
50465: PUSH
50466: LD_INT 1
50468: PPUSH
50469: LD_INT 3
50471: PPUSH
50472: CALL_OW 12
50476: PUSH
50477: LD_INT 1
50479: PPUSH
50480: LD_INT 3
50482: PPUSH
50483: CALL_OW 12
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// animal := CreateHuman ;
50500: LD_ADDR_VAR 0 12
50504: PUSH
50505: CALL_OW 44
50509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50510: LD_VAR 0 12
50514: PPUSH
50515: LD_VAR 0 8
50519: PPUSH
50520: LD_INT 0
50522: PPUSH
50523: CALL 52243 0 3
// end ;
50527: GO 50425
50529: POP
50530: POP
// if enchidnas then
50531: LD_VAR 0 4
50535: IFFALSE 50602
// for i = 1 to enchidnas do
50537: LD_ADDR_VAR 0 11
50541: PUSH
50542: DOUBLE
50543: LD_INT 1
50545: DEC
50546: ST_TO_ADDR
50547: LD_VAR 0 4
50551: PUSH
50552: FOR_TO
50553: IFFALSE 50600
// begin hc_class = 13 ;
50555: LD_ADDR_OWVAR 28
50559: PUSH
50560: LD_INT 13
50562: ST_TO_ADDR
// hc_gallery =  ;
50563: LD_ADDR_OWVAR 33
50567: PUSH
50568: LD_STRING 
50570: ST_TO_ADDR
// animal := CreateHuman ;
50571: LD_ADDR_VAR 0 12
50575: PUSH
50576: CALL_OW 44
50580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50581: LD_VAR 0 12
50585: PPUSH
50586: LD_VAR 0 8
50590: PPUSH
50591: LD_INT 0
50593: PPUSH
50594: CALL 52243 0 3
// end ;
50598: GO 50552
50600: POP
50601: POP
// if fishes then
50602: LD_VAR 0 7
50606: IFFALSE 50673
// for i = 1 to fishes do
50608: LD_ADDR_VAR 0 11
50612: PUSH
50613: DOUBLE
50614: LD_INT 1
50616: DEC
50617: ST_TO_ADDR
50618: LD_VAR 0 7
50622: PUSH
50623: FOR_TO
50624: IFFALSE 50671
// begin hc_class = 20 ;
50626: LD_ADDR_OWVAR 28
50630: PUSH
50631: LD_INT 20
50633: ST_TO_ADDR
// hc_gallery =  ;
50634: LD_ADDR_OWVAR 33
50638: PUSH
50639: LD_STRING 
50641: ST_TO_ADDR
// animal := CreateHuman ;
50642: LD_ADDR_VAR 0 12
50646: PUSH
50647: CALL_OW 44
50651: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50652: LD_VAR 0 12
50656: PPUSH
50657: LD_VAR 0 9
50661: PPUSH
50662: LD_INT 0
50664: PPUSH
50665: CALL 52243 0 3
// end ;
50669: GO 50623
50671: POP
50672: POP
// end ;
50673: LD_VAR 0 10
50677: RET
// export function WantHeal ( sci , unit ) ; begin
50678: LD_INT 0
50680: PPUSH
// if GetTaskList ( sci ) > 0 then
50681: LD_VAR 0 1
50685: PPUSH
50686: CALL_OW 437
50690: PUSH
50691: LD_INT 0
50693: GREATER
50694: IFFALSE 50764
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50696: LD_VAR 0 1
50700: PPUSH
50701: CALL_OW 437
50705: PUSH
50706: LD_INT 1
50708: ARRAY
50709: PUSH
50710: LD_INT 1
50712: ARRAY
50713: PUSH
50714: LD_STRING l
50716: EQUAL
50717: PUSH
50718: LD_VAR 0 1
50722: PPUSH
50723: CALL_OW 437
50727: PUSH
50728: LD_INT 1
50730: ARRAY
50731: PUSH
50732: LD_INT 4
50734: ARRAY
50735: PUSH
50736: LD_VAR 0 2
50740: EQUAL
50741: AND
50742: IFFALSE 50754
// result := true else
50744: LD_ADDR_VAR 0 3
50748: PUSH
50749: LD_INT 1
50751: ST_TO_ADDR
50752: GO 50762
// result := false ;
50754: LD_ADDR_VAR 0 3
50758: PUSH
50759: LD_INT 0
50761: ST_TO_ADDR
// end else
50762: GO 50772
// result := false ;
50764: LD_ADDR_VAR 0 3
50768: PUSH
50769: LD_INT 0
50771: ST_TO_ADDR
// end ;
50772: LD_VAR 0 3
50776: RET
// export function HealTarget ( sci ) ; begin
50777: LD_INT 0
50779: PPUSH
// if not sci then
50780: LD_VAR 0 1
50784: NOT
50785: IFFALSE 50789
// exit ;
50787: GO 50854
// result := 0 ;
50789: LD_ADDR_VAR 0 2
50793: PUSH
50794: LD_INT 0
50796: ST_TO_ADDR
// if GetTaskList ( sci ) then
50797: LD_VAR 0 1
50801: PPUSH
50802: CALL_OW 437
50806: IFFALSE 50854
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50808: LD_VAR 0 1
50812: PPUSH
50813: CALL_OW 437
50817: PUSH
50818: LD_INT 1
50820: ARRAY
50821: PUSH
50822: LD_INT 1
50824: ARRAY
50825: PUSH
50826: LD_STRING l
50828: EQUAL
50829: IFFALSE 50854
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50831: LD_ADDR_VAR 0 2
50835: PUSH
50836: LD_VAR 0 1
50840: PPUSH
50841: CALL_OW 437
50845: PUSH
50846: LD_INT 1
50848: ARRAY
50849: PUSH
50850: LD_INT 4
50852: ARRAY
50853: ST_TO_ADDR
// end ;
50854: LD_VAR 0 2
50858: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50859: LD_INT 0
50861: PPUSH
50862: PPUSH
50863: PPUSH
50864: PPUSH
// if not base_units then
50865: LD_VAR 0 1
50869: NOT
50870: IFFALSE 50874
// exit ;
50872: GO 50961
// result := false ;
50874: LD_ADDR_VAR 0 2
50878: PUSH
50879: LD_INT 0
50881: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50882: LD_ADDR_VAR 0 5
50886: PUSH
50887: LD_VAR 0 1
50891: PPUSH
50892: LD_INT 21
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PPUSH
50902: CALL_OW 72
50906: ST_TO_ADDR
// if not tmp then
50907: LD_VAR 0 5
50911: NOT
50912: IFFALSE 50916
// exit ;
50914: GO 50961
// for i in tmp do
50916: LD_ADDR_VAR 0 3
50920: PUSH
50921: LD_VAR 0 5
50925: PUSH
50926: FOR_IN
50927: IFFALSE 50959
// begin result := EnemyInRange ( i , 22 ) ;
50929: LD_ADDR_VAR 0 2
50933: PUSH
50934: LD_VAR 0 3
50938: PPUSH
50939: LD_INT 22
50941: PPUSH
50942: CALL 49197 0 2
50946: ST_TO_ADDR
// if result then
50947: LD_VAR 0 2
50951: IFFALSE 50957
// exit ;
50953: POP
50954: POP
50955: GO 50961
// end ;
50957: GO 50926
50959: POP
50960: POP
// end ;
50961: LD_VAR 0 2
50965: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50966: LD_INT 0
50968: PPUSH
50969: PPUSH
// if not units then
50970: LD_VAR 0 1
50974: NOT
50975: IFFALSE 50979
// exit ;
50977: GO 51049
// result := [ ] ;
50979: LD_ADDR_VAR 0 3
50983: PUSH
50984: EMPTY
50985: ST_TO_ADDR
// for i in units do
50986: LD_ADDR_VAR 0 4
50990: PUSH
50991: LD_VAR 0 1
50995: PUSH
50996: FOR_IN
50997: IFFALSE 51047
// if GetTag ( i ) = tag then
50999: LD_VAR 0 4
51003: PPUSH
51004: CALL_OW 110
51008: PUSH
51009: LD_VAR 0 2
51013: EQUAL
51014: IFFALSE 51045
// result := Insert ( result , result + 1 , i ) ;
51016: LD_ADDR_VAR 0 3
51020: PUSH
51021: LD_VAR 0 3
51025: PPUSH
51026: LD_VAR 0 3
51030: PUSH
51031: LD_INT 1
51033: PLUS
51034: PPUSH
51035: LD_VAR 0 4
51039: PPUSH
51040: CALL_OW 2
51044: ST_TO_ADDR
51045: GO 50996
51047: POP
51048: POP
// end ;
51049: LD_VAR 0 3
51053: RET
// export function IsDriver ( un ) ; begin
51054: LD_INT 0
51056: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51057: LD_ADDR_VAR 0 2
51061: PUSH
51062: LD_VAR 0 1
51066: PUSH
51067: LD_INT 55
51069: PUSH
51070: EMPTY
51071: LIST
51072: PPUSH
51073: CALL_OW 69
51077: IN
51078: ST_TO_ADDR
// end ;
51079: LD_VAR 0 2
51083: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51084: LD_INT 0
51086: PPUSH
51087: PPUSH
// list := [ ] ;
51088: LD_ADDR_VAR 0 5
51092: PUSH
51093: EMPTY
51094: ST_TO_ADDR
// case d of 0 :
51095: LD_VAR 0 3
51099: PUSH
51100: LD_INT 0
51102: DOUBLE
51103: EQUAL
51104: IFTRUE 51108
51106: GO 51241
51108: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51109: LD_ADDR_VAR 0 5
51113: PUSH
51114: LD_VAR 0 1
51118: PUSH
51119: LD_INT 4
51121: MINUS
51122: PUSH
51123: LD_VAR 0 2
51127: PUSH
51128: LD_INT 4
51130: MINUS
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: PUSH
51140: LD_VAR 0 1
51144: PUSH
51145: LD_INT 3
51147: MINUS
51148: PUSH
51149: LD_VAR 0 2
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: PUSH
51162: LD_VAR 0 1
51166: PUSH
51167: LD_INT 4
51169: PLUS
51170: PUSH
51171: LD_VAR 0 2
51175: PUSH
51176: LD_INT 4
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: PUSH
51184: LD_VAR 0 1
51188: PUSH
51189: LD_INT 3
51191: PLUS
51192: PUSH
51193: LD_VAR 0 2
51197: PUSH
51198: LD_INT 3
51200: PLUS
51201: PUSH
51202: LD_INT 5
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: PUSH
51210: LD_VAR 0 1
51214: PUSH
51215: LD_VAR 0 2
51219: PUSH
51220: LD_INT 4
51222: PLUS
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: ST_TO_ADDR
// end ; 1 :
51239: GO 51939
51241: LD_INT 1
51243: DOUBLE
51244: EQUAL
51245: IFTRUE 51249
51247: GO 51382
51249: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51250: LD_ADDR_VAR 0 5
51254: PUSH
51255: LD_VAR 0 1
51259: PUSH
51260: LD_VAR 0 2
51264: PUSH
51265: LD_INT 4
51267: MINUS
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: PUSH
51277: LD_VAR 0 1
51281: PUSH
51282: LD_INT 3
51284: MINUS
51285: PUSH
51286: LD_VAR 0 2
51290: PUSH
51291: LD_INT 3
51293: MINUS
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: PUSH
51303: LD_VAR 0 1
51307: PUSH
51308: LD_INT 4
51310: MINUS
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_VAR 0 1
51329: PUSH
51330: LD_VAR 0 2
51334: PUSH
51335: LD_INT 3
51337: PLUS
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 1
51351: PUSH
51352: LD_INT 4
51354: PLUS
51355: PUSH
51356: LD_VAR 0 2
51360: PUSH
51361: LD_INT 4
51363: PLUS
51364: PUSH
51365: LD_INT 5
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: ST_TO_ADDR
// end ; 2 :
51380: GO 51939
51382: LD_INT 2
51384: DOUBLE
51385: EQUAL
51386: IFTRUE 51390
51388: GO 51519
51390: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51391: LD_ADDR_VAR 0 5
51395: PUSH
51396: LD_VAR 0 1
51400: PUSH
51401: LD_VAR 0 2
51405: PUSH
51406: LD_INT 3
51408: MINUS
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: PUSH
51418: LD_VAR 0 1
51422: PUSH
51423: LD_INT 4
51425: PLUS
51426: PUSH
51427: LD_VAR 0 2
51431: PUSH
51432: LD_INT 4
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: PUSH
51440: LD_VAR 0 1
51444: PUSH
51445: LD_VAR 0 2
51449: PUSH
51450: LD_INT 4
51452: PLUS
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: PUSH
51462: LD_VAR 0 1
51466: PUSH
51467: LD_INT 3
51469: MINUS
51470: PUSH
51471: LD_VAR 0 2
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: PUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_INT 4
51491: MINUS
51492: PUSH
51493: LD_VAR 0 2
51497: PUSH
51498: LD_INT 4
51500: MINUS
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: ST_TO_ADDR
// end ; 3 :
51517: GO 51939
51519: LD_INT 3
51521: DOUBLE
51522: EQUAL
51523: IFTRUE 51527
51525: GO 51660
51527: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51528: LD_ADDR_VAR 0 5
51532: PUSH
51533: LD_VAR 0 1
51537: PUSH
51538: LD_INT 3
51540: PLUS
51541: PUSH
51542: LD_VAR 0 2
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: PUSH
51555: LD_VAR 0 1
51559: PUSH
51560: LD_INT 4
51562: PLUS
51563: PUSH
51564: LD_VAR 0 2
51568: PUSH
51569: LD_INT 4
51571: PLUS
51572: PUSH
51573: LD_INT 5
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: PUSH
51581: LD_VAR 0 1
51585: PUSH
51586: LD_INT 4
51588: MINUS
51589: PUSH
51590: LD_VAR 0 2
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: PUSH
51603: LD_VAR 0 1
51607: PUSH
51608: LD_VAR 0 2
51612: PUSH
51613: LD_INT 4
51615: MINUS
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: LD_VAR 0 1
51629: PUSH
51630: LD_INT 3
51632: MINUS
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 3
51641: MINUS
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// end ; 4 :
51658: GO 51939
51660: LD_INT 4
51662: DOUBLE
51663: EQUAL
51664: IFTRUE 51668
51666: GO 51801
51668: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51669: LD_ADDR_VAR 0 5
51673: PUSH
51674: LD_VAR 0 1
51678: PUSH
51679: LD_VAR 0 2
51683: PUSH
51684: LD_INT 4
51686: PLUS
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: PUSH
51696: LD_VAR 0 1
51700: PUSH
51701: LD_INT 3
51703: PLUS
51704: PUSH
51705: LD_VAR 0 2
51709: PUSH
51710: LD_INT 3
51712: PLUS
51713: PUSH
51714: LD_INT 5
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: PUSH
51722: LD_VAR 0 1
51726: PUSH
51727: LD_INT 4
51729: PLUS
51730: PUSH
51731: LD_VAR 0 2
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: PUSH
51744: LD_VAR 0 1
51748: PUSH
51749: LD_VAR 0 2
51753: PUSH
51754: LD_INT 3
51756: MINUS
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: PUSH
51766: LD_VAR 0 1
51770: PUSH
51771: LD_INT 4
51773: MINUS
51774: PUSH
51775: LD_VAR 0 2
51779: PUSH
51780: LD_INT 4
51782: MINUS
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// end ; 5 :
51799: GO 51939
51801: LD_INT 5
51803: DOUBLE
51804: EQUAL
51805: IFTRUE 51809
51807: GO 51938
51809: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51810: LD_ADDR_VAR 0 5
51814: PUSH
51815: LD_VAR 0 1
51819: PUSH
51820: LD_INT 4
51822: MINUS
51823: PUSH
51824: LD_VAR 0 2
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: PUSH
51837: LD_VAR 0 1
51841: PUSH
51842: LD_VAR 0 2
51846: PUSH
51847: LD_INT 4
51849: MINUS
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: PUSH
51859: LD_VAR 0 1
51863: PUSH
51864: LD_INT 4
51866: PLUS
51867: PUSH
51868: LD_VAR 0 2
51872: PUSH
51873: LD_INT 4
51875: PLUS
51876: PUSH
51877: LD_INT 5
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: PUSH
51885: LD_VAR 0 1
51889: PUSH
51890: LD_INT 3
51892: PLUS
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: PUSH
51907: LD_VAR 0 1
51911: PUSH
51912: LD_VAR 0 2
51916: PUSH
51917: LD_INT 3
51919: PLUS
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// end ; end ;
51936: GO 51939
51938: POP
// result := list ;
51939: LD_ADDR_VAR 0 4
51943: PUSH
51944: LD_VAR 0 5
51948: ST_TO_ADDR
// end ;
51949: LD_VAR 0 4
51953: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51954: LD_INT 0
51956: PPUSH
51957: PPUSH
51958: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51959: LD_VAR 0 1
51963: NOT
51964: PUSH
51965: LD_VAR 0 2
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: LD_INT 4
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: IN
51988: NOT
51989: OR
51990: IFFALSE 51994
// exit ;
51992: GO 52086
// tmp := [ ] ;
51994: LD_ADDR_VAR 0 5
51998: PUSH
51999: EMPTY
52000: ST_TO_ADDR
// for i in units do
52001: LD_ADDR_VAR 0 4
52005: PUSH
52006: LD_VAR 0 1
52010: PUSH
52011: FOR_IN
52012: IFFALSE 52055
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52014: LD_ADDR_VAR 0 5
52018: PUSH
52019: LD_VAR 0 5
52023: PPUSH
52024: LD_VAR 0 5
52028: PUSH
52029: LD_INT 1
52031: PLUS
52032: PPUSH
52033: LD_VAR 0 4
52037: PPUSH
52038: LD_VAR 0 2
52042: PPUSH
52043: CALL_OW 259
52047: PPUSH
52048: CALL_OW 2
52052: ST_TO_ADDR
52053: GO 52011
52055: POP
52056: POP
// if not tmp then
52057: LD_VAR 0 5
52061: NOT
52062: IFFALSE 52066
// exit ;
52064: GO 52086
// result := SortListByListDesc ( units , tmp ) ;
52066: LD_ADDR_VAR 0 3
52070: PUSH
52071: LD_VAR 0 1
52075: PPUSH
52076: LD_VAR 0 5
52080: PPUSH
52081: CALL_OW 77
52085: ST_TO_ADDR
// end ;
52086: LD_VAR 0 3
52090: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52091: LD_INT 0
52093: PPUSH
52094: PPUSH
52095: PPUSH
// x := GetX ( building ) ;
52096: LD_ADDR_VAR 0 4
52100: PUSH
52101: LD_VAR 0 2
52105: PPUSH
52106: CALL_OW 250
52110: ST_TO_ADDR
// y := GetY ( building ) ;
52111: LD_ADDR_VAR 0 5
52115: PUSH
52116: LD_VAR 0 2
52120: PPUSH
52121: CALL_OW 251
52125: ST_TO_ADDR
// if GetTaskList ( unit ) then
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 437
52135: IFFALSE 52230
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52137: LD_STRING e
52139: PUSH
52140: LD_VAR 0 1
52144: PPUSH
52145: CALL_OW 437
52149: PUSH
52150: LD_INT 1
52152: ARRAY
52153: PUSH
52154: LD_INT 1
52156: ARRAY
52157: EQUAL
52158: PUSH
52159: LD_VAR 0 4
52163: PUSH
52164: LD_VAR 0 1
52168: PPUSH
52169: CALL_OW 437
52173: PUSH
52174: LD_INT 1
52176: ARRAY
52177: PUSH
52178: LD_INT 2
52180: ARRAY
52181: EQUAL
52182: AND
52183: PUSH
52184: LD_VAR 0 5
52188: PUSH
52189: LD_VAR 0 1
52193: PPUSH
52194: CALL_OW 437
52198: PUSH
52199: LD_INT 1
52201: ARRAY
52202: PUSH
52203: LD_INT 3
52205: ARRAY
52206: EQUAL
52207: AND
52208: IFFALSE 52220
// result := true else
52210: LD_ADDR_VAR 0 3
52214: PUSH
52215: LD_INT 1
52217: ST_TO_ADDR
52218: GO 52228
// result := false ;
52220: LD_ADDR_VAR 0 3
52224: PUSH
52225: LD_INT 0
52227: ST_TO_ADDR
// end else
52228: GO 52238
// result := false ;
52230: LD_ADDR_VAR 0 3
52234: PUSH
52235: LD_INT 0
52237: ST_TO_ADDR
// end ;
52238: LD_VAR 0 3
52242: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52243: LD_INT 0
52245: PPUSH
52246: PPUSH
52247: PPUSH
52248: PPUSH
// if not unit or not area then
52249: LD_VAR 0 1
52253: NOT
52254: PUSH
52255: LD_VAR 0 2
52259: NOT
52260: OR
52261: IFFALSE 52265
// exit ;
52263: GO 52429
// tmp := AreaToList ( area , i ) ;
52265: LD_ADDR_VAR 0 6
52269: PUSH
52270: LD_VAR 0 2
52274: PPUSH
52275: LD_VAR 0 5
52279: PPUSH
52280: CALL_OW 517
52284: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52285: LD_ADDR_VAR 0 5
52289: PUSH
52290: DOUBLE
52291: LD_INT 1
52293: DEC
52294: ST_TO_ADDR
52295: LD_VAR 0 6
52299: PUSH
52300: LD_INT 1
52302: ARRAY
52303: PUSH
52304: FOR_TO
52305: IFFALSE 52427
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52307: LD_ADDR_VAR 0 7
52311: PUSH
52312: LD_VAR 0 6
52316: PUSH
52317: LD_INT 1
52319: ARRAY
52320: PUSH
52321: LD_VAR 0 5
52325: ARRAY
52326: PUSH
52327: LD_VAR 0 6
52331: PUSH
52332: LD_INT 2
52334: ARRAY
52335: PUSH
52336: LD_VAR 0 5
52340: ARRAY
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52346: LD_VAR 0 7
52350: PUSH
52351: LD_INT 1
52353: ARRAY
52354: PPUSH
52355: LD_VAR 0 7
52359: PUSH
52360: LD_INT 2
52362: ARRAY
52363: PPUSH
52364: CALL_OW 428
52368: PUSH
52369: LD_INT 0
52371: EQUAL
52372: IFFALSE 52425
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52374: LD_VAR 0 1
52378: PPUSH
52379: LD_VAR 0 7
52383: PUSH
52384: LD_INT 1
52386: ARRAY
52387: PPUSH
52388: LD_VAR 0 7
52392: PUSH
52393: LD_INT 2
52395: ARRAY
52396: PPUSH
52397: LD_VAR 0 3
52401: PPUSH
52402: CALL_OW 48
// result := IsPlaced ( unit ) ;
52406: LD_ADDR_VAR 0 4
52410: PUSH
52411: LD_VAR 0 1
52415: PPUSH
52416: CALL_OW 305
52420: ST_TO_ADDR
// exit ;
52421: POP
52422: POP
52423: GO 52429
// end ; end ;
52425: GO 52304
52427: POP
52428: POP
// end ;
52429: LD_VAR 0 4
52433: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52434: LD_INT 0
52436: PPUSH
52437: PPUSH
52438: PPUSH
// if not side or side > 8 then
52439: LD_VAR 0 1
52443: NOT
52444: PUSH
52445: LD_VAR 0 1
52449: PUSH
52450: LD_INT 8
52452: GREATER
52453: OR
52454: IFFALSE 52458
// exit ;
52456: GO 52645
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52458: LD_ADDR_VAR 0 4
52462: PUSH
52463: LD_INT 22
52465: PUSH
52466: LD_VAR 0 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 21
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PPUSH
52489: CALL_OW 69
52493: ST_TO_ADDR
// if not tmp then
52494: LD_VAR 0 4
52498: NOT
52499: IFFALSE 52503
// exit ;
52501: GO 52645
// enable_addtolog := true ;
52503: LD_ADDR_OWVAR 81
52507: PUSH
52508: LD_INT 1
52510: ST_TO_ADDR
// AddToLog ( [ ) ;
52511: LD_STRING [
52513: PPUSH
52514: CALL_OW 561
// for i in tmp do
52518: LD_ADDR_VAR 0 3
52522: PUSH
52523: LD_VAR 0 4
52527: PUSH
52528: FOR_IN
52529: IFFALSE 52636
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52531: LD_STRING [
52533: PUSH
52534: LD_VAR 0 3
52538: PPUSH
52539: CALL_OW 266
52543: STR
52544: PUSH
52545: LD_STRING , 
52547: STR
52548: PUSH
52549: LD_VAR 0 3
52553: PPUSH
52554: CALL_OW 250
52558: STR
52559: PUSH
52560: LD_STRING , 
52562: STR
52563: PUSH
52564: LD_VAR 0 3
52568: PPUSH
52569: CALL_OW 251
52573: STR
52574: PUSH
52575: LD_STRING , 
52577: STR
52578: PUSH
52579: LD_VAR 0 3
52583: PPUSH
52584: CALL_OW 254
52588: STR
52589: PUSH
52590: LD_STRING , 
52592: STR
52593: PUSH
52594: LD_VAR 0 3
52598: PPUSH
52599: LD_INT 1
52601: PPUSH
52602: CALL_OW 268
52606: STR
52607: PUSH
52608: LD_STRING , 
52610: STR
52611: PUSH
52612: LD_VAR 0 3
52616: PPUSH
52617: LD_INT 2
52619: PPUSH
52620: CALL_OW 268
52624: STR
52625: PUSH
52626: LD_STRING ],
52628: STR
52629: PPUSH
52630: CALL_OW 561
// end ;
52634: GO 52528
52636: POP
52637: POP
// AddToLog ( ]; ) ;
52638: LD_STRING ];
52640: PPUSH
52641: CALL_OW 561
// end ;
52645: LD_VAR 0 2
52649: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52650: LD_INT 0
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
// if not area or not rate or not max then
52657: LD_VAR 0 1
52661: NOT
52662: PUSH
52663: LD_VAR 0 2
52667: NOT
52668: OR
52669: PUSH
52670: LD_VAR 0 4
52674: NOT
52675: OR
52676: IFFALSE 52680
// exit ;
52678: GO 52872
// while 1 do
52680: LD_INT 1
52682: IFFALSE 52872
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52684: LD_ADDR_VAR 0 9
52688: PUSH
52689: LD_VAR 0 1
52693: PPUSH
52694: LD_INT 1
52696: PPUSH
52697: CALL_OW 287
52701: PUSH
52702: LD_INT 10
52704: MUL
52705: ST_TO_ADDR
// r := rate / 10 ;
52706: LD_ADDR_VAR 0 7
52710: PUSH
52711: LD_VAR 0 2
52715: PUSH
52716: LD_INT 10
52718: DIVREAL
52719: ST_TO_ADDR
// time := 1 1$00 ;
52720: LD_ADDR_VAR 0 8
52724: PUSH
52725: LD_INT 2100
52727: ST_TO_ADDR
// if amount < min then
52728: LD_VAR 0 9
52732: PUSH
52733: LD_VAR 0 3
52737: LESS
52738: IFFALSE 52756
// r := r * 2 else
52740: LD_ADDR_VAR 0 7
52744: PUSH
52745: LD_VAR 0 7
52749: PUSH
52750: LD_INT 2
52752: MUL
52753: ST_TO_ADDR
52754: GO 52782
// if amount > max then
52756: LD_VAR 0 9
52760: PUSH
52761: LD_VAR 0 4
52765: GREATER
52766: IFFALSE 52782
// r := r / 2 ;
52768: LD_ADDR_VAR 0 7
52772: PUSH
52773: LD_VAR 0 7
52777: PUSH
52778: LD_INT 2
52780: DIVREAL
52781: ST_TO_ADDR
// time := time / r ;
52782: LD_ADDR_VAR 0 8
52786: PUSH
52787: LD_VAR 0 8
52791: PUSH
52792: LD_VAR 0 7
52796: DIVREAL
52797: ST_TO_ADDR
// if time < 0 then
52798: LD_VAR 0 8
52802: PUSH
52803: LD_INT 0
52805: LESS
52806: IFFALSE 52823
// time := time * - 1 ;
52808: LD_ADDR_VAR 0 8
52812: PUSH
52813: LD_VAR 0 8
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: MUL
52822: ST_TO_ADDR
// wait ( time ) ;
52823: LD_VAR 0 8
52827: PPUSH
52828: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52832: LD_INT 35
52834: PPUSH
52835: LD_INT 875
52837: PPUSH
52838: CALL_OW 12
52842: PPUSH
52843: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52847: LD_INT 1
52849: PPUSH
52850: LD_INT 5
52852: PPUSH
52853: CALL_OW 12
52857: PPUSH
52858: LD_VAR 0 1
52862: PPUSH
52863: LD_INT 1
52865: PPUSH
52866: CALL_OW 55
// end ;
52870: GO 52680
// end ;
52872: LD_VAR 0 5
52876: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52877: LD_INT 0
52879: PPUSH
52880: PPUSH
52881: PPUSH
52882: PPUSH
52883: PPUSH
52884: PPUSH
52885: PPUSH
52886: PPUSH
// if not turrets or not factories then
52887: LD_VAR 0 1
52891: NOT
52892: PUSH
52893: LD_VAR 0 2
52897: NOT
52898: OR
52899: IFFALSE 52903
// exit ;
52901: GO 53210
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52903: LD_ADDR_VAR 0 10
52907: PUSH
52908: LD_INT 5
52910: PUSH
52911: LD_INT 6
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 4
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 5
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 24
52945: PUSH
52946: LD_INT 25
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 23
52955: PUSH
52956: LD_INT 27
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 42
52969: PUSH
52970: LD_INT 43
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 44
52979: PUSH
52980: LD_INT 46
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 45
52989: PUSH
52990: LD_INT 47
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// result := [ ] ;
53007: LD_ADDR_VAR 0 3
53011: PUSH
53012: EMPTY
53013: ST_TO_ADDR
// for i in turrets do
53014: LD_ADDR_VAR 0 4
53018: PUSH
53019: LD_VAR 0 1
53023: PUSH
53024: FOR_IN
53025: IFFALSE 53208
// begin nat := GetNation ( i ) ;
53027: LD_ADDR_VAR 0 7
53031: PUSH
53032: LD_VAR 0 4
53036: PPUSH
53037: CALL_OW 248
53041: ST_TO_ADDR
// weapon := 0 ;
53042: LD_ADDR_VAR 0 8
53046: PUSH
53047: LD_INT 0
53049: ST_TO_ADDR
// if not nat then
53050: LD_VAR 0 7
53054: NOT
53055: IFFALSE 53059
// continue ;
53057: GO 53024
// for j in list [ nat ] do
53059: LD_ADDR_VAR 0 5
53063: PUSH
53064: LD_VAR 0 10
53068: PUSH
53069: LD_VAR 0 7
53073: ARRAY
53074: PUSH
53075: FOR_IN
53076: IFFALSE 53117
// if GetBWeapon ( i ) = j [ 1 ] then
53078: LD_VAR 0 4
53082: PPUSH
53083: CALL_OW 269
53087: PUSH
53088: LD_VAR 0 5
53092: PUSH
53093: LD_INT 1
53095: ARRAY
53096: EQUAL
53097: IFFALSE 53115
// begin weapon := j [ 2 ] ;
53099: LD_ADDR_VAR 0 8
53103: PUSH
53104: LD_VAR 0 5
53108: PUSH
53109: LD_INT 2
53111: ARRAY
53112: ST_TO_ADDR
// break ;
53113: GO 53117
// end ;
53115: GO 53075
53117: POP
53118: POP
// if not weapon then
53119: LD_VAR 0 8
53123: NOT
53124: IFFALSE 53128
// continue ;
53126: GO 53024
// for k in factories do
53128: LD_ADDR_VAR 0 6
53132: PUSH
53133: LD_VAR 0 2
53137: PUSH
53138: FOR_IN
53139: IFFALSE 53204
// begin weapons := AvailableWeaponList ( k ) ;
53141: LD_ADDR_VAR 0 9
53145: PUSH
53146: LD_VAR 0 6
53150: PPUSH
53151: CALL_OW 478
53155: ST_TO_ADDR
// if not weapons then
53156: LD_VAR 0 9
53160: NOT
53161: IFFALSE 53165
// continue ;
53163: GO 53138
// if weapon in weapons then
53165: LD_VAR 0 8
53169: PUSH
53170: LD_VAR 0 9
53174: IN
53175: IFFALSE 53202
// begin result := [ i , weapon ] ;
53177: LD_ADDR_VAR 0 3
53181: PUSH
53182: LD_VAR 0 4
53186: PUSH
53187: LD_VAR 0 8
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: ST_TO_ADDR
// exit ;
53196: POP
53197: POP
53198: POP
53199: POP
53200: GO 53210
// end ; end ;
53202: GO 53138
53204: POP
53205: POP
// end ;
53206: GO 53024
53208: POP
53209: POP
// end ;
53210: LD_VAR 0 3
53214: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53215: LD_INT 0
53217: PPUSH
// if not side or side > 8 then
53218: LD_VAR 0 3
53222: NOT
53223: PUSH
53224: LD_VAR 0 3
53228: PUSH
53229: LD_INT 8
53231: GREATER
53232: OR
53233: IFFALSE 53237
// exit ;
53235: GO 53296
// if not range then
53237: LD_VAR 0 4
53241: NOT
53242: IFFALSE 53253
// range := - 12 ;
53244: LD_ADDR_VAR 0 4
53248: PUSH
53249: LD_INT 12
53251: NEG
53252: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53253: LD_VAR 0 1
53257: PPUSH
53258: LD_VAR 0 2
53262: PPUSH
53263: LD_VAR 0 3
53267: PPUSH
53268: LD_VAR 0 4
53272: PPUSH
53273: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53277: LD_VAR 0 1
53281: PPUSH
53282: LD_VAR 0 2
53286: PPUSH
53287: LD_VAR 0 3
53291: PPUSH
53292: CALL_OW 331
// end ;
53296: LD_VAR 0 5
53300: RET
// export function Video ( mode ) ; begin
53301: LD_INT 0
53303: PPUSH
// ingame_video = mode ;
53304: LD_ADDR_OWVAR 52
53308: PUSH
53309: LD_VAR 0 1
53313: ST_TO_ADDR
// interface_hidden = mode ;
53314: LD_ADDR_OWVAR 54
53318: PUSH
53319: LD_VAR 0 1
53323: ST_TO_ADDR
// end ;
53324: LD_VAR 0 2
53328: RET
// export function Join ( array , element ) ; begin
53329: LD_INT 0
53331: PPUSH
// result := array ^ element ;
53332: LD_ADDR_VAR 0 3
53336: PUSH
53337: LD_VAR 0 1
53341: PUSH
53342: LD_VAR 0 2
53346: ADD
53347: ST_TO_ADDR
// end ;
53348: LD_VAR 0 3
53352: RET
// export function JoinUnion ( array , element ) ; begin
53353: LD_INT 0
53355: PPUSH
// result := array union element ;
53356: LD_ADDR_VAR 0 3
53360: PUSH
53361: LD_VAR 0 1
53365: PUSH
53366: LD_VAR 0 2
53370: UNION
53371: ST_TO_ADDR
// end ;
53372: LD_VAR 0 3
53376: RET
// export function GetBehemoths ( side ) ; begin
53377: LD_INT 0
53379: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53380: LD_ADDR_VAR 0 2
53384: PUSH
53385: LD_INT 22
53387: PUSH
53388: LD_VAR 0 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 31
53399: PUSH
53400: LD_INT 25
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PPUSH
53411: CALL_OW 69
53415: ST_TO_ADDR
// end ;
53416: LD_VAR 0 2
53420: RET
// export function Shuffle ( array ) ; var i , index ; begin
53421: LD_INT 0
53423: PPUSH
53424: PPUSH
53425: PPUSH
// result := [ ] ;
53426: LD_ADDR_VAR 0 2
53430: PUSH
53431: EMPTY
53432: ST_TO_ADDR
// if not array then
53433: LD_VAR 0 1
53437: NOT
53438: IFFALSE 53442
// exit ;
53440: GO 53541
// Randomize ;
53442: CALL_OW 10
// for i = array downto 1 do
53446: LD_ADDR_VAR 0 3
53450: PUSH
53451: DOUBLE
53452: LD_VAR 0 1
53456: INC
53457: ST_TO_ADDR
53458: LD_INT 1
53460: PUSH
53461: FOR_DOWNTO
53462: IFFALSE 53539
// begin index := rand ( 1 , array ) ;
53464: LD_ADDR_VAR 0 4
53468: PUSH
53469: LD_INT 1
53471: PPUSH
53472: LD_VAR 0 1
53476: PPUSH
53477: CALL_OW 12
53481: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53482: LD_ADDR_VAR 0 2
53486: PUSH
53487: LD_VAR 0 2
53491: PPUSH
53492: LD_VAR 0 2
53496: PUSH
53497: LD_INT 1
53499: PLUS
53500: PPUSH
53501: LD_VAR 0 1
53505: PUSH
53506: LD_VAR 0 4
53510: ARRAY
53511: PPUSH
53512: CALL_OW 2
53516: ST_TO_ADDR
// array := Delete ( array , index ) ;
53517: LD_ADDR_VAR 0 1
53521: PUSH
53522: LD_VAR 0 1
53526: PPUSH
53527: LD_VAR 0 4
53531: PPUSH
53532: CALL_OW 3
53536: ST_TO_ADDR
// end ;
53537: GO 53461
53539: POP
53540: POP
// end ;
53541: LD_VAR 0 2
53545: RET
// export function GetBaseMaterials ( base ) ; begin
53546: LD_INT 0
53548: PPUSH
// result := [ 0 , 0 , 0 ] ;
53549: LD_ADDR_VAR 0 2
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// if not base then
53568: LD_VAR 0 1
53572: NOT
53573: IFFALSE 53577
// exit ;
53575: GO 53626
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53577: LD_ADDR_VAR 0 2
53581: PUSH
53582: LD_VAR 0 1
53586: PPUSH
53587: LD_INT 1
53589: PPUSH
53590: CALL_OW 275
53594: PUSH
53595: LD_VAR 0 1
53599: PPUSH
53600: LD_INT 2
53602: PPUSH
53603: CALL_OW 275
53607: PUSH
53608: LD_VAR 0 1
53612: PPUSH
53613: LD_INT 3
53615: PPUSH
53616: CALL_OW 275
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// end ;
53626: LD_VAR 0 2
53630: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53631: LD_INT 0
53633: PPUSH
53634: PPUSH
// result := array ;
53635: LD_ADDR_VAR 0 3
53639: PUSH
53640: LD_VAR 0 1
53644: ST_TO_ADDR
// if size > 0 then
53645: LD_VAR 0 2
53649: PUSH
53650: LD_INT 0
53652: GREATER
53653: IFFALSE 53699
// for i := array downto size do
53655: LD_ADDR_VAR 0 4
53659: PUSH
53660: DOUBLE
53661: LD_VAR 0 1
53665: INC
53666: ST_TO_ADDR
53667: LD_VAR 0 2
53671: PUSH
53672: FOR_DOWNTO
53673: IFFALSE 53697
// result := Delete ( result , result ) ;
53675: LD_ADDR_VAR 0 3
53679: PUSH
53680: LD_VAR 0 3
53684: PPUSH
53685: LD_VAR 0 3
53689: PPUSH
53690: CALL_OW 3
53694: ST_TO_ADDR
53695: GO 53672
53697: POP
53698: POP
// end ;
53699: LD_VAR 0 3
53703: RET
// export function ComExit ( unit ) ; var tmp ; begin
53704: LD_INT 0
53706: PPUSH
53707: PPUSH
// if not IsInUnit ( unit ) then
53708: LD_VAR 0 1
53712: PPUSH
53713: CALL_OW 310
53717: NOT
53718: IFFALSE 53722
// exit ;
53720: GO 53782
// tmp := IsInUnit ( unit ) ;
53722: LD_ADDR_VAR 0 3
53726: PUSH
53727: LD_VAR 0 1
53731: PPUSH
53732: CALL_OW 310
53736: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53737: LD_VAR 0 3
53741: PPUSH
53742: CALL_OW 247
53746: PUSH
53747: LD_INT 2
53749: EQUAL
53750: IFFALSE 53763
// ComExitVehicle ( unit ) else
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 121
53761: GO 53772
// ComExitBuilding ( unit ) ;
53763: LD_VAR 0 1
53767: PPUSH
53768: CALL_OW 122
// result := tmp ;
53772: LD_ADDR_VAR 0 2
53776: PUSH
53777: LD_VAR 0 3
53781: ST_TO_ADDR
// end ;
53782: LD_VAR 0 2
53786: RET
// export function ResetHc ; begin
53787: LD_INT 0
53789: PPUSH
// InitHc ;
53790: CALL_OW 19
// hc_importance := 0 ;
53794: LD_ADDR_OWVAR 32
53798: PUSH
53799: LD_INT 0
53801: ST_TO_ADDR
// end ;
53802: LD_VAR 0 1
53806: RET
