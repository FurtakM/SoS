// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// export pom , hover , attackN ; every 1 do
3063: GO 3065
3065: DISABLE
// begin pom := [ ] ;
3066: LD_ADDR_EXP 4
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// hover := [ ] ;
3073: LD_ADDR_EXP 5
3077: PUSH
3078: EMPTY
3079: ST_TO_ADDR
// attackN := 0 ;
3080: LD_ADDR_EXP 6
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// end ;
3088: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3089: LD_EXP 4
3093: IFFALSE 3515
3095: GO 3097
3097: DISABLE
3098: LD_INT 0
3100: PPUSH
3101: PPUSH
3102: PPUSH
3103: PPUSH
// begin enable ;
3104: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 7
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 69
3124: ST_TO_ADDR
// for i = 1 to pom do
3125: LD_ADDR_VAR 0 1
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_EXP 4
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3199
// if not HasTask ( pom [ i ] ) then
3143: LD_EXP 4
3147: PUSH
3148: LD_VAR 0 1
3152: ARRAY
3153: PPUSH
3154: CALL_OW 314
3158: NOT
3159: IFFALSE 3197
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3161: LD_EXP 4
3165: PUSH
3166: LD_VAR 0 1
3170: ARRAY
3171: PPUSH
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_EXP 4
3181: PUSH
3182: LD_VAR 0 1
3186: ARRAY
3187: PPUSH
3188: CALL_OW 74
3192: PPUSH
3193: CALL_OW 115
3197: GO 3140
3199: POP
3200: POP
// if hover then
3201: LD_EXP 5
3205: IFFALSE 3515
// begin for i = 1 to hover do
3207: LD_ADDR_VAR 0 1
3211: PUSH
3212: DOUBLE
3213: LD_INT 1
3215: DEC
3216: ST_TO_ADDR
3217: LD_EXP 5
3221: PUSH
3222: FOR_TO
3223: IFFALSE 3513
// begin if GetLives ( hover [ i ] ) < 250 then
3225: LD_EXP 5
3229: PUSH
3230: LD_VAR 0 1
3234: ARRAY
3235: PPUSH
3236: CALL_OW 256
3240: PUSH
3241: LD_INT 250
3243: LESS
3244: IFFALSE 3311
// begin for z = 1 to 1 + Difficulty do
3246: LD_ADDR_VAR 0 3
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_INT 1
3258: PUSH
3259: LD_OWVAR 67
3263: PLUS
3264: PUSH
3265: FOR_TO
3266: IFFALSE 3309
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3268: LD_EXP 5
3272: PUSH
3273: LD_VAR 0 1
3277: ARRAY
3278: PPUSH
3279: CALL_OW 250
3283: PPUSH
3284: LD_EXP 5
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 251
3299: PPUSH
3300: LD_INT 10
3302: PPUSH
3303: CALL_OW 453
3307: GO 3265
3309: POP
3310: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3311: LD_VAR 0 2
3315: PPUSH
3316: LD_INT 25
3318: PUSH
3319: LD_INT 2
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: LD_INT 3
3328: PUSH
3329: LD_INT 54
3331: PUSH
3332: EMPTY
3333: LIST
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 72
3347: PUSH
3348: LD_INT 0
3350: GREATER
3351: IFFALSE 3433
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3353: LD_ADDR_VAR 0 4
3357: PUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: LD_INT 25
3365: PUSH
3366: LD_INT 2
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 3
3375: PUSH
3376: LD_INT 54
3378: PUSH
3379: EMPTY
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PPUSH
3390: CALL_OW 72
3394: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3395: LD_EXP 5
3399: PUSH
3400: LD_VAR 0 1
3404: ARRAY
3405: PPUSH
3406: LD_VAR 0 4
3410: PPUSH
3411: LD_EXP 5
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 74
3426: PPUSH
3427: CALL_OW 115
// end else
3431: GO 3511
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3433: LD_ADDR_VAR 0 4
3437: PUSH
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 3
3455: PUSH
3456: LD_INT 54
3458: PUSH
3459: EMPTY
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 72
3474: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3475: LD_EXP 5
3479: PUSH
3480: LD_VAR 0 1
3484: ARRAY
3485: PPUSH
3486: LD_VAR 0 4
3490: PPUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_VAR 0 1
3500: ARRAY
3501: PPUSH
3502: CALL_OW 74
3506: PPUSH
3507: CALL_OW 115
// end ; end ;
3511: GO 3222
3513: POP
3514: POP
// end ; end ;
3515: PPOPN 4
3517: END
// every 3 3$10 do var i , un ;
3518: GO 3520
3520: DISABLE
3521: LD_INT 0
3523: PPUSH
3524: PPUSH
// begin uc_side := 7 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 7
3532: ST_TO_ADDR
// uc_nation := 1 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 1
3540: ST_TO_ADDR
// for i = 1 to 2 do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_INT 2
3553: PUSH
3554: FOR_TO
3555: IFFALSE 3720
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: LD_INT 7
3565: PUSH
3566: LD_INT 6
3568: PUSH
3569: LD_INT 6
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_OWVAR 67
3581: ARRAY
3582: PPUSH
3583: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3587: LD_ADDR_OWVAR 37
3591: PUSH
3592: LD_INT 1
3594: ST_TO_ADDR
// vc_engine := engine_combustion ;
3595: LD_ADDR_OWVAR 39
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// vc_control := control_manual ;
3603: LD_ADDR_OWVAR 38
3607: PUSH
3608: LD_INT 1
3610: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3611: LD_ADDR_OWVAR 41
3615: PUSH
3616: LD_INT 66
3618: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3619: LD_ADDR_OWVAR 40
3623: PUSH
3624: LD_INT 2
3626: ST_TO_ADDR
// un := CreateVehicle ;
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: CALL_OW 45
3636: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3637: LD_VAR 0 2
3641: PPUSH
3642: LD_INT 3
3644: PPUSH
3645: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3649: LD_VAR 0 2
3653: PPUSH
3654: LD_INT 48
3656: PPUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_INT 0
3662: PPUSH
3663: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3667: CALL_OW 44
3671: PPUSH
3672: LD_VAR 0 2
3676: PPUSH
3677: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3681: LD_VAR 0 2
3685: PPUSH
3686: LD_INT 49
3688: PPUSH
3689: LD_INT 17
3691: PPUSH
3692: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 48
3703: PPUSH
3704: LD_INT 36
3706: PPUSH
3707: CALL_OW 171
// Wait ( 0 0$02 ) ;
3711: LD_INT 70
3713: PPUSH
3714: CALL_OW 67
// end ;
3718: GO 3554
3720: POP
3721: POP
// end ;
3722: PPOPN 2
3724: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3725: LD_EXP 6
3729: PUSH
3730: LD_INT 10
3732: PUSH
3733: LD_INT 12
3735: PUSH
3736: LD_INT 14
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: LESS
3750: IFFALSE 4452
3752: GO 3754
3754: DISABLE
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
// begin enable ;
3759: ENABLE
// Randomize ;
3760: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3764: LD_INT 35
3766: PPUSH
3767: LD_INT 6265
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3779: LD_EXP 6
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 4
3789: PUSH
3790: LD_INT 5
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: LESS
3804: IFFALSE 3824
// c := Rand ( 1 , 2 ) else
3806: LD_ADDR_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
3822: GO 3840
// c := Rand ( 1 , 3 ) ;
3824: LD_ADDR_VAR 0 1
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 3
3834: PPUSH
3835: CALL_OW 12
3839: ST_TO_ADDR
// if attackN = 0 then
3840: LD_EXP 6
3844: PUSH
3845: LD_INT 0
3847: EQUAL
3848: IFFALSE 3864
// Say ( com , DJackAttack ) else
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DJackAttack
3857: PPUSH
3858: CALL_OW 88
3862: GO 3868
// DSay ;
3864: CALL 2844 0 0
// case c of 1 :
3868: LD_VAR 0 1
3872: PUSH
3873: LD_INT 1
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 4063
3881: POP
// begin pom := pom ^ Attack ( 1 ) ;
3882: LD_ADDR_EXP 4
3886: PUSH
3887: LD_EXP 4
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: CALL 1355 0 1
3899: ADD
3900: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3901: LD_INT 420
3903: PPUSH
3904: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 2 then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 2
3934: GREATER
3935: IFFALSE 3963
// begin Wait ( 0 0$46 ) ;
3937: LD_INT 1610
3939: PPUSH
3940: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3944: LD_ADDR_EXP 4
3948: PUSH
3949: LD_EXP 4
3953: PUSH
3954: LD_INT 4
3956: PPUSH
3957: CALL 1355 0 1
3961: ADD
3962: ST_TO_ADDR
// end ; if attackN > 4 then
3963: LD_EXP 6
3967: PUSH
3968: LD_INT 4
3970: GREATER
3971: IFFALSE 3999
// begin Wait ( 0 0$12 ) ;
3973: LD_INT 420
3975: PPUSH
3976: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3980: LD_ADDR_EXP 4
3984: PUSH
3985: LD_EXP 4
3989: PUSH
3990: LD_INT 3
3992: PPUSH
3993: CALL 1355 0 1
3997: ADD
3998: ST_TO_ADDR
// end ; if attackN > 8 then
3999: LD_EXP 6
4003: PUSH
4004: LD_INT 8
4006: GREATER
4007: IFFALSE 4061
// begin Wait ( 0 0$12 ) ;
4009: LD_INT 420
4011: PPUSH
4012: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_INT 0
4023: PPUSH
4024: LD_INT 100
4026: PPUSH
4027: CALL_OW 12
4031: ST_TO_ADDR
// if l < 45 then
4032: LD_VAR 0 2
4036: PUSH
4037: LD_INT 45
4039: LESS
4040: IFFALSE 4061
// pom := pom ^ Attack ( 2 ) ;
4042: LD_ADDR_EXP 4
4046: PUSH
4047: LD_EXP 4
4051: PUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL 1355 0 1
4059: ADD
4060: ST_TO_ADDR
// end ; end ; 2 :
4061: GO 4350
4063: LD_INT 2
4065: DOUBLE
4066: EQUAL
4067: IFTRUE 4071
4069: GO 4219
4071: POP
// begin pom := pom ^ Attack ( 2 ) ;
4072: LD_ADDR_EXP 4
4076: PUSH
4077: LD_EXP 4
4081: PUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL 1355 0 1
4089: ADD
4090: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4091: LD_ADDR_EXP 4
4095: PUSH
4096: LD_EXP 4
4100: PUSH
4101: LD_INT 3
4103: PPUSH
4104: CALL 1355 0 1
4108: ADD
4109: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4110: LD_OWVAR 67
4114: PUSH
4115: LD_INT 1
4117: GREATER
4118: PUSH
4119: LD_INT 63
4121: PPUSH
4122: LD_INT 37
4124: PPUSH
4125: CALL_OW 428
4129: PPUSH
4130: CALL_OW 266
4134: PUSH
4135: LD_INT 30
4137: EQUAL
4138: AND
4139: IFFALSE 4145
// ComitSib ;
4141: CALL 2766 0 0
// if Difficulty > 2 then
4145: LD_OWVAR 67
4149: PUSH
4150: LD_INT 2
4152: GREATER
4153: IFFALSE 4181
// begin Wait ( 0 0$25 ) ;
4155: LD_INT 875
4157: PPUSH
4158: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4162: LD_ADDR_EXP 4
4166: PUSH
4167: LD_EXP 4
4171: PUSH
4172: LD_INT 4
4174: PPUSH
4175: CALL 1355 0 1
4179: ADD
4180: ST_TO_ADDR
// end ; if attackN > 7 then
4181: LD_EXP 6
4185: PUSH
4186: LD_INT 7
4188: GREATER
4189: IFFALSE 4217
// begin Wait ( 0 0$15 ) ;
4191: LD_INT 525
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 2
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// end ; end ; 3 :
4217: GO 4350
4219: LD_INT 3
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4349
4227: POP
// begin pom := pom ^ Attack ( 1 ) ;
4228: LD_ADDR_EXP 4
4232: PUSH
4233: LD_EXP 4
4237: PUSH
4238: LD_INT 1
4240: PPUSH
4241: CALL 1355 0 1
4245: ADD
4246: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4247: LD_INT 70
4249: PPUSH
4250: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4254: LD_ADDR_EXP 4
4258: PUSH
4259: LD_EXP 4
4263: PUSH
4264: LD_INT 2
4266: PPUSH
4267: CALL 1355 0 1
4271: ADD
4272: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4273: LD_INT 2100
4275: PPUSH
4276: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4280: LD_ADDR_EXP 4
4284: PUSH
4285: LD_EXP 4
4289: PUSH
4290: LD_INT 3
4292: PPUSH
4293: CALL 1355 0 1
4297: ADD
4298: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4299: LD_ADDR_EXP 4
4303: PUSH
4304: LD_EXP 4
4308: PUSH
4309: LD_INT 5
4311: PPUSH
4312: CALL 1355 0 1
4316: ADD
4317: ST_TO_ADDR
// if attackN > 10 then
4318: LD_EXP 6
4322: PUSH
4323: LD_INT 10
4325: GREATER
4326: IFFALSE 4347
// pom := pom ^ Attack ( 2 ) ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_EXP 4
4337: PUSH
4338: LD_INT 2
4340: PPUSH
4341: CALL 1355 0 1
4345: ADD
4346: ST_TO_ADDR
// end ; end ;
4347: GO 4350
4349: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4350: LD_OWVAR 67
4354: PUSH
4355: LD_INT 1
4357: GREATER
4358: PUSH
4359: LD_EXP 6
4363: PUSH
4364: LD_INT 4
4366: MOD
4367: PUSH
4368: LD_INT 0
4370: EQUAL
4371: AND
4372: IFFALSE 4438
// begin Wait ( 1 1$45 ) ;
4374: LD_INT 3675
4376: PPUSH
4377: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4381: LD_ADDR_EXP 4
4385: PUSH
4386: LD_EXP 4
4390: PUSH
4391: LD_INT 3
4393: PPUSH
4394: CALL 1355 0 1
4398: ADD
4399: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4400: LD_ADDR_EXP 4
4404: PUSH
4405: LD_EXP 4
4409: PUSH
4410: LD_INT 4
4412: PPUSH
4413: CALL 1355 0 1
4417: ADD
4418: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4419: LD_ADDR_EXP 5
4423: PUSH
4424: LD_EXP 5
4428: PUSH
4429: LD_INT 6
4431: PPUSH
4432: CALL 1355 0 1
4436: ADD
4437: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4438: LD_ADDR_EXP 6
4442: PUSH
4443: LD_EXP 6
4447: PUSH
4448: LD_INT 1
4450: PLUS
4451: ST_TO_ADDR
// end ;
4452: PPOPN 2
4454: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4455: LD_EXP 6
4459: PUSH
4460: LD_INT 10
4462: PUSH
4463: LD_INT 12
4465: PUSH
4466: LD_INT 14
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: PUSH
4474: LD_OWVAR 67
4478: ARRAY
4479: GREATEREQUAL
4480: PUSH
4481: LD_INT 22
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 69
4495: PUSH
4496: LD_INT 0
4498: EQUAL
4499: AND
4500: IFFALSE 4556
4502: GO 4504
4504: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4505: LD_EXP 2
4509: PPUSH
4510: LD_STRING DDocEnd
4512: PPUSH
4513: CALL_OW 94
// Wait ( 0 0$03 ) ;
4517: LD_INT 105
4519: PPUSH
4520: CALL_OW 67
// case Query ( QWin ) of 1 :
4524: LD_STRING QWin
4526: PPUSH
4527: CALL_OW 97
4531: PUSH
4532: LD_INT 1
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4543
4540: POP
// ; end ;
4541: GO 4544
4543: POP
// music_nat := 5 ;
4544: LD_ADDR_OWVAR 71
4548: PUSH
4549: LD_INT 5
4551: ST_TO_ADDR
// YouWin ;
4552: CALL_OW 103
// end ; end_of_file
4556: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4557: LD_VAR 0 1
4561: PPUSH
4562: CALL 20472 0 1
// if un = brave or un = com then
4566: LD_VAR 0 1
4570: PUSH
4571: LD_INT 1
4573: EQUAL
4574: PUSH
4575: LD_VAR 0 1
4579: PUSH
4580: LD_EXP 1
4584: EQUAL
4585: OR
4586: IFFALSE 4607
// begin SayRadio ( doc , DDocWin ) ;
4588: LD_EXP 2
4592: PPUSH
4593: LD_STRING DDocWin
4595: PPUSH
4596: CALL_OW 94
// YouLost (  ) ;
4600: LD_STRING 
4602: PPUSH
4603: CALL_OW 104
// end ; end ;
4607: PPOPN 1
4609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: CALL 20570 0 3
// end ;
4629: PPOPN 3
4631: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: CALL 20578 0 1
// end ;
4641: PPOPN 1
4643: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4644: LD_VAR 0 1
4648: PPUSH
4649: LD_VAR 0 2
4653: PPUSH
4654: CALL 20594 0 2
// end ; end_of_file
4658: PPOPN 2
4660: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
4661: LD_INT 0
4663: PPUSH
// ar_miner := 81 ;
4664: LD_ADDR_EXP 14
4668: PUSH
4669: LD_INT 81
4671: ST_TO_ADDR
// ar_crane := 88 ;
4672: LD_ADDR_EXP 13
4676: PUSH
4677: LD_INT 88
4679: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4680: LD_ADDR_EXP 8
4684: PUSH
4685: LD_INT 89
4687: ST_TO_ADDR
// us_hack := 99 ;
4688: LD_ADDR_EXP 9
4692: PUSH
4693: LD_INT 99
4695: ST_TO_ADDR
// us_artillery := 97 ;
4696: LD_ADDR_EXP 10
4700: PUSH
4701: LD_INT 97
4703: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4704: LD_ADDR_EXP 11
4708: PUSH
4709: LD_INT 91
4711: ST_TO_ADDR
// ar_mortar := 92 ;
4712: LD_ADDR_EXP 12
4716: PUSH
4717: LD_INT 92
4719: ST_TO_ADDR
// ru_flamethrower := 93 ;
4720: LD_ADDR_EXP 15
4724: PUSH
4725: LD_INT 93
4727: ST_TO_ADDR
// ru_radar := 98 ;
4728: LD_ADDR_EXP 7
4732: PUSH
4733: LD_INT 98
4735: ST_TO_ADDR
// tech_Artillery := 80 ;
4736: LD_ADDR_EXP 16
4740: PUSH
4741: LD_INT 80
4743: ST_TO_ADDR
// tech_RadMat := 81 ;
4744: LD_ADDR_EXP 17
4748: PUSH
4749: LD_INT 81
4751: ST_TO_ADDR
// tech_BasicTools := 82 ;
4752: LD_ADDR_EXP 18
4756: PUSH
4757: LD_INT 82
4759: ST_TO_ADDR
// tech_Cargo := 83 ;
4760: LD_ADDR_EXP 19
4764: PUSH
4765: LD_INT 83
4767: ST_TO_ADDR
// tech_Track := 84 ;
4768: LD_ADDR_EXP 20
4772: PUSH
4773: LD_INT 84
4775: ST_TO_ADDR
// tech_Crane := 85 ;
4776: LD_ADDR_EXP 21
4780: PUSH
4781: LD_INT 85
4783: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4784: LD_ADDR_EXP 22
4788: PUSH
4789: LD_INT 86
4791: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4792: LD_ADDR_EXP 23
4796: PUSH
4797: LD_INT 87
4799: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4800: LD_ADDR_EXP 24
4804: PUSH
4805: LD_INT 88
4807: ST_TO_ADDR
// end ;
4808: LD_VAR 0 1
4812: RET
// every 1 do
4813: GO 4815
4815: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4816: CALL 4661 0 0
4820: END
// every 0 0$1 do
4821: GO 4823
4823: DISABLE
// begin enable ;
4824: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4825: LD_STRING updateTimer(
4827: PUSH
4828: LD_OWVAR 1
4832: STR
4833: PUSH
4834: LD_STRING );
4836: STR
4837: PPUSH
4838: CALL_OW 559
// end ;
4842: END
// export function SOS_MapStart ( ) ; begin
4843: LD_INT 0
4845: PPUSH
// if streamModeActive then
4846: LD_EXP 25
4850: IFFALSE 4859
// DefineStreamItems ( true ) ;
4852: LD_INT 1
4854: PPUSH
4855: CALL 6513 0 1
// UpdateFactoryWaypoints ( ) ;
4859: CALL 19374 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4863: CALL 19631 0 0
// end ;
4867: LD_VAR 0 1
4871: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4872: LD_INT 0
4874: PPUSH
// if p2 = 100 then
4875: LD_VAR 0 2
4879: PUSH
4880: LD_INT 100
4882: EQUAL
4883: IFFALSE 5886
// begin if not StreamModeActive then
4885: LD_EXP 25
4889: NOT
4890: IFFALSE 4900
// StreamModeActive := true ;
4892: LD_ADDR_EXP 25
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// if p3 = 0 then
4900: LD_VAR 0 3
4904: PUSH
4905: LD_INT 0
4907: EQUAL
4908: IFFALSE 4914
// InitStreamMode ;
4910: CALL 6049 0 0
// if p3 = 1 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 1
4921: EQUAL
4922: IFFALSE 4932
// sRocket := true ;
4924: LD_ADDR_EXP 30
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 2 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 2
4939: EQUAL
4940: IFFALSE 4950
// sSpeed := true ;
4942: LD_ADDR_EXP 29
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 3 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 3
4957: EQUAL
4958: IFFALSE 4968
// sEngine := true ;
4960: LD_ADDR_EXP 31
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 4 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 4
4975: EQUAL
4976: IFFALSE 4986
// sSpec := true ;
4978: LD_ADDR_EXP 28
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 5 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 5
4993: EQUAL
4994: IFFALSE 5004
// sLevel := true ;
4996: LD_ADDR_EXP 32
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 6 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 6
5011: EQUAL
5012: IFFALSE 5022
// sArmoury := true ;
5014: LD_ADDR_EXP 33
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 7 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 7
5029: EQUAL
5030: IFFALSE 5040
// sRadar := true ;
5032: LD_ADDR_EXP 34
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 8 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 8
5047: EQUAL
5048: IFFALSE 5058
// sBunker := true ;
5050: LD_ADDR_EXP 35
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 9 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 9
5065: EQUAL
5066: IFFALSE 5076
// sHack := true ;
5068: LD_ADDR_EXP 36
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 10 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 10
5083: EQUAL
5084: IFFALSE 5094
// sFire := true ;
5086: LD_ADDR_EXP 37
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 11 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 11
5101: EQUAL
5102: IFFALSE 5112
// sRefresh := true ;
5104: LD_ADDR_EXP 38
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 12 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 12
5119: EQUAL
5120: IFFALSE 5130
// sExp := true ;
5122: LD_ADDR_EXP 39
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 13 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 13
5137: EQUAL
5138: IFFALSE 5148
// sDepot := true ;
5140: LD_ADDR_EXP 40
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 14 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 14
5155: EQUAL
5156: IFFALSE 5166
// sFlag := true ;
5158: LD_ADDR_EXP 41
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 15 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 15
5173: EQUAL
5174: IFFALSE 5184
// sKamikadze := true ;
5176: LD_ADDR_EXP 49
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 16 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 16
5191: EQUAL
5192: IFFALSE 5202
// sTroll := true ;
5194: LD_ADDR_EXP 50
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 17 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 17
5209: EQUAL
5210: IFFALSE 5220
// sSlow := true ;
5212: LD_ADDR_EXP 51
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 18 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 18
5227: EQUAL
5228: IFFALSE 5238
// sLack := true ;
5230: LD_ADDR_EXP 52
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 19 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 19
5245: EQUAL
5246: IFFALSE 5256
// sTank := true ;
5248: LD_ADDR_EXP 54
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 20 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 20
5263: EQUAL
5264: IFFALSE 5274
// sRemote := true ;
5266: LD_ADDR_EXP 55
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 21 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 21
5281: EQUAL
5282: IFFALSE 5292
// sPowell := true ;
5284: LD_ADDR_EXP 56
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 22 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 22
5299: EQUAL
5300: IFFALSE 5310
// sTeleport := true ;
5302: LD_ADDR_EXP 59
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 23 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 23
5317: EQUAL
5318: IFFALSE 5328
// sOilTower := true ;
5320: LD_ADDR_EXP 61
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 24 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 24
5335: EQUAL
5336: IFFALSE 5346
// sShovel := true ;
5338: LD_ADDR_EXP 62
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 25 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 25
5353: EQUAL
5354: IFFALSE 5364
// sSheik := true ;
5356: LD_ADDR_EXP 63
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 26 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 26
5371: EQUAL
5372: IFFALSE 5382
// sEarthquake := true ;
5374: LD_ADDR_EXP 65
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 27 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 27
5389: EQUAL
5390: IFFALSE 5400
// sAI := true ;
5392: LD_ADDR_EXP 66
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 28 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 28
5407: EQUAL
5408: IFFALSE 5418
// sCargo := true ;
5410: LD_ADDR_EXP 69
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 29 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 29
5425: EQUAL
5426: IFFALSE 5436
// sDLaser := true ;
5428: LD_ADDR_EXP 70
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 30 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 30
5443: EQUAL
5444: IFFALSE 5454
// sExchange := true ;
5446: LD_ADDR_EXP 71
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 31 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 31
5461: EQUAL
5462: IFFALSE 5472
// sFac := true ;
5464: LD_ADDR_EXP 72
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 32 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 32
5479: EQUAL
5480: IFFALSE 5490
// sPower := true ;
5482: LD_ADDR_EXP 73
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 33 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 33
5497: EQUAL
5498: IFFALSE 5508
// sRandom := true ;
5500: LD_ADDR_EXP 74
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 34 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 34
5515: EQUAL
5516: IFFALSE 5526
// sShield := true ;
5518: LD_ADDR_EXP 75
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 35 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 35
5533: EQUAL
5534: IFFALSE 5544
// sTime := true ;
5536: LD_ADDR_EXP 76
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 36 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 36
5551: EQUAL
5552: IFFALSE 5562
// sTools := true ;
5554: LD_ADDR_EXP 77
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 101 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 101
5569: EQUAL
5570: IFFALSE 5580
// sSold := true ;
5572: LD_ADDR_EXP 42
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 102 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 102
5587: EQUAL
5588: IFFALSE 5598
// sDiff := true ;
5590: LD_ADDR_EXP 43
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 103 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 103
5605: EQUAL
5606: IFFALSE 5616
// sFog := true ;
5608: LD_ADDR_EXP 46
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 104 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 104
5623: EQUAL
5624: IFFALSE 5634
// sReset := true ;
5626: LD_ADDR_EXP 47
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// if p3 = 105 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 105
5641: EQUAL
5642: IFFALSE 5652
// sSun := true ;
5644: LD_ADDR_EXP 48
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 106 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 106
5659: EQUAL
5660: IFFALSE 5670
// sTiger := true ;
5662: LD_ADDR_EXP 44
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 107 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 107
5677: EQUAL
5678: IFFALSE 5688
// sBomb := true ;
5680: LD_ADDR_EXP 45
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 108 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 108
5695: EQUAL
5696: IFFALSE 5706
// sWound := true ;
5698: LD_ADDR_EXP 53
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 109 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 109
5713: EQUAL
5714: IFFALSE 5724
// sBetray := true ;
5716: LD_ADDR_EXP 57
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// if p3 = 110 then
5724: LD_VAR 0 3
5728: PUSH
5729: LD_INT 110
5731: EQUAL
5732: IFFALSE 5742
// sContamin := true ;
5734: LD_ADDR_EXP 58
5738: PUSH
5739: LD_INT 1
5741: ST_TO_ADDR
// if p3 = 111 then
5742: LD_VAR 0 3
5746: PUSH
5747: LD_INT 111
5749: EQUAL
5750: IFFALSE 5760
// sOil := true ;
5752: LD_ADDR_EXP 60
5756: PUSH
5757: LD_INT 1
5759: ST_TO_ADDR
// if p3 = 112 then
5760: LD_VAR 0 3
5764: PUSH
5765: LD_INT 112
5767: EQUAL
5768: IFFALSE 5778
// sStu := true ;
5770: LD_ADDR_EXP 64
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// if p3 = 113 then
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 113
5785: EQUAL
5786: IFFALSE 5796
// sBazooka := true ;
5788: LD_ADDR_EXP 67
5792: PUSH
5793: LD_INT 1
5795: ST_TO_ADDR
// if p3 = 114 then
5796: LD_VAR 0 3
5800: PUSH
5801: LD_INT 114
5803: EQUAL
5804: IFFALSE 5814
// sMortar := true ;
5806: LD_ADDR_EXP 68
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// if p3 = 115 then
5814: LD_VAR 0 3
5818: PUSH
5819: LD_INT 115
5821: EQUAL
5822: IFFALSE 5832
// sRanger := true ;
5824: LD_ADDR_EXP 78
5828: PUSH
5829: LD_INT 1
5831: ST_TO_ADDR
// if p3 = 116 then
5832: LD_VAR 0 3
5836: PUSH
5837: LD_INT 116
5839: EQUAL
5840: IFFALSE 5850
// sComputer := true ;
5842: LD_ADDR_EXP 79
5846: PUSH
5847: LD_INT 1
5849: ST_TO_ADDR
// if p3 = 117 then
5850: LD_VAR 0 3
5854: PUSH
5855: LD_INT 117
5857: EQUAL
5858: IFFALSE 5868
// s30 := true ;
5860: LD_ADDR_EXP 80
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// if p3 = 118 then
5868: LD_VAR 0 3
5872: PUSH
5873: LD_INT 118
5875: EQUAL
5876: IFFALSE 5886
// s60 := true ;
5878: LD_ADDR_EXP 81
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// end ; if p2 = 101 then
5886: LD_VAR 0 2
5890: PUSH
5891: LD_INT 101
5893: EQUAL
5894: IFFALSE 6022
// begin case p3 of 1 :
5896: LD_VAR 0 3
5900: PUSH
5901: LD_INT 1
5903: DOUBLE
5904: EQUAL
5905: IFTRUE 5909
5907: GO 5916
5909: POP
// hHackUnlimitedResources ; 2 :
5910: CALL 18120 0 0
5914: GO 6022
5916: LD_INT 2
5918: DOUBLE
5919: EQUAL
5920: IFTRUE 5924
5922: GO 5931
5924: POP
// hHackSetLevel10 ; 3 :
5925: CALL 18253 0 0
5929: GO 6022
5931: LD_INT 3
5933: DOUBLE
5934: EQUAL
5935: IFTRUE 5939
5937: GO 5946
5939: POP
// hHackSetLevel10YourUnits ; 4 :
5940: CALL 18338 0 0
5944: GO 6022
5946: LD_INT 4
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5954
5952: GO 5961
5954: POP
// hHackInvincible ; 5 :
5955: CALL 18786 0 0
5959: GO 6022
5961: LD_INT 5
5963: DOUBLE
5964: EQUAL
5965: IFTRUE 5969
5967: GO 5976
5969: POP
// hHackInvisible ; 6 :
5970: CALL 18897 0 0
5974: GO 6022
5976: LD_INT 6
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5984
5982: GO 5991
5984: POP
// hHackChangeYourSide ; 7 :
5985: CALL 18954 0 0
5989: GO 6022
5991: LD_INT 7
5993: DOUBLE
5994: EQUAL
5995: IFTRUE 5999
5997: GO 6006
5999: POP
// hHackChangeUnitSide ; 8 :
6000: CALL 18996 0 0
6004: GO 6022
6006: LD_INT 8
6008: DOUBLE
6009: EQUAL
6010: IFTRUE 6014
6012: GO 6021
6014: POP
// hHackFog ; end ;
6015: CALL 19097 0 0
6019: GO 6022
6021: POP
// end ; end ;
6022: LD_VAR 0 7
6026: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6027: GO 6029
6029: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6030: LD_STRING initStreamRollete();
6032: PPUSH
6033: CALL_OW 559
// InitStreamMode ;
6037: CALL 6049 0 0
// DefineStreamItems ( false ) ;
6041: LD_INT 0
6043: PPUSH
6044: CALL 6513 0 1
// end ;
6048: END
// function InitStreamMode ; begin
6049: LD_INT 0
6051: PPUSH
// streamModeActive := false ;
6052: LD_ADDR_EXP 25
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// normalCounter := 36 ;
6060: LD_ADDR_EXP 26
6064: PUSH
6065: LD_INT 36
6067: ST_TO_ADDR
// hardcoreCounter := 18 ;
6068: LD_ADDR_EXP 27
6072: PUSH
6073: LD_INT 18
6075: ST_TO_ADDR
// sRocket := false ;
6076: LD_ADDR_EXP 30
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// sSpeed := false ;
6084: LD_ADDR_EXP 29
6088: PUSH
6089: LD_INT 0
6091: ST_TO_ADDR
// sEngine := false ;
6092: LD_ADDR_EXP 31
6096: PUSH
6097: LD_INT 0
6099: ST_TO_ADDR
// sSpec := false ;
6100: LD_ADDR_EXP 28
6104: PUSH
6105: LD_INT 0
6107: ST_TO_ADDR
// sLevel := false ;
6108: LD_ADDR_EXP 32
6112: PUSH
6113: LD_INT 0
6115: ST_TO_ADDR
// sArmoury := false ;
6116: LD_ADDR_EXP 33
6120: PUSH
6121: LD_INT 0
6123: ST_TO_ADDR
// sRadar := false ;
6124: LD_ADDR_EXP 34
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// sBunker := false ;
6132: LD_ADDR_EXP 35
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// sHack := false ;
6140: LD_ADDR_EXP 36
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// sFire := false ;
6148: LD_ADDR_EXP 37
6152: PUSH
6153: LD_INT 0
6155: ST_TO_ADDR
// sRefresh := false ;
6156: LD_ADDR_EXP 38
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// sExp := false ;
6164: LD_ADDR_EXP 39
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// sDepot := false ;
6172: LD_ADDR_EXP 40
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// sFlag := false ;
6180: LD_ADDR_EXP 41
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sKamikadze := false ;
6188: LD_ADDR_EXP 49
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sTroll := false ;
6196: LD_ADDR_EXP 50
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sSlow := false ;
6204: LD_ADDR_EXP 51
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sLack := false ;
6212: LD_ADDR_EXP 52
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sTank := false ;
6220: LD_ADDR_EXP 54
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sRemote := false ;
6228: LD_ADDR_EXP 55
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sPowell := false ;
6236: LD_ADDR_EXP 56
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sTeleport := false ;
6244: LD_ADDR_EXP 59
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sOilTower := false ;
6252: LD_ADDR_EXP 61
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sShovel := false ;
6260: LD_ADDR_EXP 62
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sSheik := false ;
6268: LD_ADDR_EXP 63
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sEarthquake := false ;
6276: LD_ADDR_EXP 65
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sAI := false ;
6284: LD_ADDR_EXP 66
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sCargo := false ;
6292: LD_ADDR_EXP 69
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sDLaser := false ;
6300: LD_ADDR_EXP 70
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sExchange := false ;
6308: LD_ADDR_EXP 71
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sFac := false ;
6316: LD_ADDR_EXP 72
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sPower := false ;
6324: LD_ADDR_EXP 73
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// sRandom := false ;
6332: LD_ADDR_EXP 74
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// sShield := false ;
6340: LD_ADDR_EXP 75
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// sTime := false ;
6348: LD_ADDR_EXP 76
6352: PUSH
6353: LD_INT 0
6355: ST_TO_ADDR
// sTools := false ;
6356: LD_ADDR_EXP 77
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// sSold := false ;
6364: LD_ADDR_EXP 42
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// sDiff := false ;
6372: LD_ADDR_EXP 43
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// sFog := false ;
6380: LD_ADDR_EXP 46
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// sReset := false ;
6388: LD_ADDR_EXP 47
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// sSun := false ;
6396: LD_ADDR_EXP 48
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// sTiger := false ;
6404: LD_ADDR_EXP 44
6408: PUSH
6409: LD_INT 0
6411: ST_TO_ADDR
// sBomb := false ;
6412: LD_ADDR_EXP 45
6416: PUSH
6417: LD_INT 0
6419: ST_TO_ADDR
// sWound := false ;
6420: LD_ADDR_EXP 53
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// sBetray := false ;
6428: LD_ADDR_EXP 57
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// sContamin := false ;
6436: LD_ADDR_EXP 58
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// sOil := false ;
6444: LD_ADDR_EXP 60
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// sStu := false ;
6452: LD_ADDR_EXP 64
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// sBazooka := false ;
6460: LD_ADDR_EXP 67
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// sMortar := false ;
6468: LD_ADDR_EXP 68
6472: PUSH
6473: LD_INT 0
6475: ST_TO_ADDR
// sRanger := false ;
6476: LD_ADDR_EXP 78
6480: PUSH
6481: LD_INT 0
6483: ST_TO_ADDR
// sComputer := false ;
6484: LD_ADDR_EXP 79
6488: PUSH
6489: LD_INT 0
6491: ST_TO_ADDR
// s30 := false ;
6492: LD_ADDR_EXP 80
6496: PUSH
6497: LD_INT 0
6499: ST_TO_ADDR
// s60 := false ;
6500: LD_ADDR_EXP 81
6504: PUSH
6505: LD_INT 0
6507: ST_TO_ADDR
// end ;
6508: LD_VAR 0 1
6512: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6513: LD_INT 0
6515: PPUSH
6516: PPUSH
6517: PPUSH
6518: PPUSH
6519: PPUSH
6520: PPUSH
6521: PPUSH
// result := [ ] ;
6522: LD_ADDR_VAR 0 2
6526: PUSH
6527: EMPTY
6528: ST_TO_ADDR
// if campaign_id = 1 then
6529: LD_OWVAR 69
6533: PUSH
6534: LD_INT 1
6536: EQUAL
6537: IFFALSE 9703
// begin case mission_number of 1 :
6539: LD_OWVAR 70
6543: PUSH
6544: LD_INT 1
6546: DOUBLE
6547: EQUAL
6548: IFTRUE 6552
6550: GO 6628
6552: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6553: LD_ADDR_VAR 0 2
6557: PUSH
6558: LD_INT 2
6560: PUSH
6561: LD_INT 4
6563: PUSH
6564: LD_INT 11
6566: PUSH
6567: LD_INT 12
6569: PUSH
6570: LD_INT 15
6572: PUSH
6573: LD_INT 16
6575: PUSH
6576: LD_INT 22
6578: PUSH
6579: LD_INT 23
6581: PUSH
6582: LD_INT 26
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 101
6598: PUSH
6599: LD_INT 102
6601: PUSH
6602: LD_INT 106
6604: PUSH
6605: LD_INT 116
6607: PUSH
6608: LD_INT 117
6610: PUSH
6611: LD_INT 118
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: ST_TO_ADDR
6626: GO 9701
6628: LD_INT 2
6630: DOUBLE
6631: EQUAL
6632: IFTRUE 6636
6634: GO 6720
6636: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6637: LD_ADDR_VAR 0 2
6641: PUSH
6642: LD_INT 2
6644: PUSH
6645: LD_INT 4
6647: PUSH
6648: LD_INT 11
6650: PUSH
6651: LD_INT 12
6653: PUSH
6654: LD_INT 15
6656: PUSH
6657: LD_INT 16
6659: PUSH
6660: LD_INT 22
6662: PUSH
6663: LD_INT 23
6665: PUSH
6666: LD_INT 26
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 101
6682: PUSH
6683: LD_INT 102
6685: PUSH
6686: LD_INT 105
6688: PUSH
6689: LD_INT 106
6691: PUSH
6692: LD_INT 108
6694: PUSH
6695: LD_INT 116
6697: PUSH
6698: LD_INT 117
6700: PUSH
6701: LD_INT 118
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: ST_TO_ADDR
6718: GO 9701
6720: LD_INT 3
6722: DOUBLE
6723: EQUAL
6724: IFTRUE 6728
6726: GO 6816
6728: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6729: LD_ADDR_VAR 0 2
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 4
6739: PUSH
6740: LD_INT 5
6742: PUSH
6743: LD_INT 11
6745: PUSH
6746: LD_INT 12
6748: PUSH
6749: LD_INT 15
6751: PUSH
6752: LD_INT 16
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 26
6760: PUSH
6761: LD_INT 36
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 101
6778: PUSH
6779: LD_INT 102
6781: PUSH
6782: LD_INT 105
6784: PUSH
6785: LD_INT 106
6787: PUSH
6788: LD_INT 108
6790: PUSH
6791: LD_INT 116
6793: PUSH
6794: LD_INT 117
6796: PUSH
6797: LD_INT 118
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: ST_TO_ADDR
6814: GO 9701
6816: LD_INT 4
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6920
6824: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6825: LD_ADDR_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: PUSH
6833: LD_INT 4
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: LD_INT 8
6841: PUSH
6842: LD_INT 11
6844: PUSH
6845: LD_INT 12
6847: PUSH
6848: LD_INT 15
6850: PUSH
6851: LD_INT 16
6853: PUSH
6854: LD_INT 22
6856: PUSH
6857: LD_INT 23
6859: PUSH
6860: LD_INT 26
6862: PUSH
6863: LD_INT 36
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 101
6882: PUSH
6883: LD_INT 102
6885: PUSH
6886: LD_INT 105
6888: PUSH
6889: LD_INT 106
6891: PUSH
6892: LD_INT 108
6894: PUSH
6895: LD_INT 116
6897: PUSH
6898: LD_INT 117
6900: PUSH
6901: LD_INT 118
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: ST_TO_ADDR
6918: GO 9701
6920: LD_INT 5
6922: DOUBLE
6923: EQUAL
6924: IFTRUE 6928
6926: GO 7040
6928: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6929: LD_ADDR_VAR 0 2
6933: PUSH
6934: LD_INT 2
6936: PUSH
6937: LD_INT 4
6939: PUSH
6940: LD_INT 5
6942: PUSH
6943: LD_INT 6
6945: PUSH
6946: LD_INT 8
6948: PUSH
6949: LD_INT 11
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: LD_INT 15
6957: PUSH
6958: LD_INT 16
6960: PUSH
6961: LD_INT 22
6963: PUSH
6964: LD_INT 23
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 26
6972: PUSH
6973: LD_INT 36
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 101
6994: PUSH
6995: LD_INT 102
6997: PUSH
6998: LD_INT 105
7000: PUSH
7001: LD_INT 106
7003: PUSH
7004: LD_INT 108
7006: PUSH
7007: LD_INT 109
7009: PUSH
7010: LD_INT 112
7012: PUSH
7013: LD_INT 116
7015: PUSH
7016: LD_INT 117
7018: PUSH
7019: LD_INT 118
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: ST_TO_ADDR
7038: GO 9701
7040: LD_INT 6
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7180
7048: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7049: LD_ADDR_VAR 0 2
7053: PUSH
7054: LD_INT 2
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: LD_INT 5
7062: PUSH
7063: LD_INT 6
7065: PUSH
7066: LD_INT 8
7068: PUSH
7069: LD_INT 11
7071: PUSH
7072: LD_INT 12
7074: PUSH
7075: LD_INT 15
7077: PUSH
7078: LD_INT 16
7080: PUSH
7081: LD_INT 20
7083: PUSH
7084: LD_INT 21
7086: PUSH
7087: LD_INT 22
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 26
7098: PUSH
7099: LD_INT 30
7101: PUSH
7102: LD_INT 31
7104: PUSH
7105: LD_INT 32
7107: PUSH
7108: LD_INT 36
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 101
7134: PUSH
7135: LD_INT 102
7137: PUSH
7138: LD_INT 105
7140: PUSH
7141: LD_INT 106
7143: PUSH
7144: LD_INT 108
7146: PUSH
7147: LD_INT 109
7149: PUSH
7150: LD_INT 112
7152: PUSH
7153: LD_INT 116
7155: PUSH
7156: LD_INT 117
7158: PUSH
7159: LD_INT 118
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: ST_TO_ADDR
7178: GO 9701
7180: LD_INT 7
7182: DOUBLE
7183: EQUAL
7184: IFTRUE 7188
7186: GO 7300
7188: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7189: LD_ADDR_VAR 0 2
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 4
7199: PUSH
7200: LD_INT 5
7202: PUSH
7203: LD_INT 7
7205: PUSH
7206: LD_INT 11
7208: PUSH
7209: LD_INT 12
7211: PUSH
7212: LD_INT 15
7214: PUSH
7215: LD_INT 16
7217: PUSH
7218: LD_INT 20
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 22
7226: PUSH
7227: LD_INT 23
7229: PUSH
7230: LD_INT 25
7232: PUSH
7233: LD_INT 26
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 101
7254: PUSH
7255: LD_INT 102
7257: PUSH
7258: LD_INT 103
7260: PUSH
7261: LD_INT 105
7263: PUSH
7264: LD_INT 106
7266: PUSH
7267: LD_INT 108
7269: PUSH
7270: LD_INT 112
7272: PUSH
7273: LD_INT 116
7275: PUSH
7276: LD_INT 117
7278: PUSH
7279: LD_INT 118
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: ST_TO_ADDR
7298: GO 9701
7300: LD_INT 8
7302: DOUBLE
7303: EQUAL
7304: IFTRUE 7308
7306: GO 7448
7308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7309: LD_ADDR_VAR 0 2
7313: PUSH
7314: LD_INT 2
7316: PUSH
7317: LD_INT 4
7319: PUSH
7320: LD_INT 5
7322: PUSH
7323: LD_INT 6
7325: PUSH
7326: LD_INT 7
7328: PUSH
7329: LD_INT 8
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 15
7340: PUSH
7341: LD_INT 16
7343: PUSH
7344: LD_INT 20
7346: PUSH
7347: LD_INT 21
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_INT 23
7355: PUSH
7356: LD_INT 25
7358: PUSH
7359: LD_INT 26
7361: PUSH
7362: LD_INT 30
7364: PUSH
7365: LD_INT 31
7367: PUSH
7368: LD_INT 32
7370: PUSH
7371: LD_INT 36
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 101
7398: PUSH
7399: LD_INT 102
7401: PUSH
7402: LD_INT 103
7404: PUSH
7405: LD_INT 105
7407: PUSH
7408: LD_INT 106
7410: PUSH
7411: LD_INT 108
7413: PUSH
7414: LD_INT 109
7416: PUSH
7417: LD_INT 112
7419: PUSH
7420: LD_INT 116
7422: PUSH
7423: LD_INT 117
7425: PUSH
7426: LD_INT 118
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: ST_TO_ADDR
7446: GO 9701
7448: LD_INT 9
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7604
7456: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 4
7467: PUSH
7468: LD_INT 5
7470: PUSH
7471: LD_INT 6
7473: PUSH
7474: LD_INT 7
7476: PUSH
7477: LD_INT 8
7479: PUSH
7480: LD_INT 11
7482: PUSH
7483: LD_INT 12
7485: PUSH
7486: LD_INT 15
7488: PUSH
7489: LD_INT 16
7491: PUSH
7492: LD_INT 20
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 22
7500: PUSH
7501: LD_INT 23
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 26
7509: PUSH
7510: LD_INT 28
7512: PUSH
7513: LD_INT 30
7515: PUSH
7516: LD_INT 31
7518: PUSH
7519: LD_INT 32
7521: PUSH
7522: LD_INT 36
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 101
7550: PUSH
7551: LD_INT 102
7553: PUSH
7554: LD_INT 103
7556: PUSH
7557: LD_INT 105
7559: PUSH
7560: LD_INT 106
7562: PUSH
7563: LD_INT 108
7565: PUSH
7566: LD_INT 109
7568: PUSH
7569: LD_INT 112
7571: PUSH
7572: LD_INT 114
7574: PUSH
7575: LD_INT 116
7577: PUSH
7578: LD_INT 117
7580: PUSH
7581: LD_INT 118
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: ST_TO_ADDR
7602: GO 9701
7604: LD_INT 10
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7808
7612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7613: LD_ADDR_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 4
7623: PUSH
7624: LD_INT 5
7626: PUSH
7627: LD_INT 6
7629: PUSH
7630: LD_INT 7
7632: PUSH
7633: LD_INT 8
7635: PUSH
7636: LD_INT 9
7638: PUSH
7639: LD_INT 10
7641: PUSH
7642: LD_INT 11
7644: PUSH
7645: LD_INT 12
7647: PUSH
7648: LD_INT 13
7650: PUSH
7651: LD_INT 14
7653: PUSH
7654: LD_INT 15
7656: PUSH
7657: LD_INT 16
7659: PUSH
7660: LD_INT 17
7662: PUSH
7663: LD_INT 18
7665: PUSH
7666: LD_INT 19
7668: PUSH
7669: LD_INT 20
7671: PUSH
7672: LD_INT 21
7674: PUSH
7675: LD_INT 22
7677: PUSH
7678: LD_INT 23
7680: PUSH
7681: LD_INT 24
7683: PUSH
7684: LD_INT 25
7686: PUSH
7687: LD_INT 26
7689: PUSH
7690: LD_INT 28
7692: PUSH
7693: LD_INT 30
7695: PUSH
7696: LD_INT 31
7698: PUSH
7699: LD_INT 32
7701: PUSH
7702: LD_INT 36
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 101
7738: PUSH
7739: LD_INT 102
7741: PUSH
7742: LD_INT 103
7744: PUSH
7745: LD_INT 104
7747: PUSH
7748: LD_INT 105
7750: PUSH
7751: LD_INT 106
7753: PUSH
7754: LD_INT 107
7756: PUSH
7757: LD_INT 108
7759: PUSH
7760: LD_INT 109
7762: PUSH
7763: LD_INT 110
7765: PUSH
7766: LD_INT 111
7768: PUSH
7769: LD_INT 112
7771: PUSH
7772: LD_INT 114
7774: PUSH
7775: LD_INT 116
7777: PUSH
7778: LD_INT 117
7780: PUSH
7781: LD_INT 118
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: ST_TO_ADDR
7806: GO 9701
7808: LD_INT 11
7810: DOUBLE
7811: EQUAL
7812: IFTRUE 7816
7814: GO 8020
7816: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7817: LD_ADDR_VAR 0 2
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 3
7827: PUSH
7828: LD_INT 4
7830: PUSH
7831: LD_INT 5
7833: PUSH
7834: LD_INT 6
7836: PUSH
7837: LD_INT 7
7839: PUSH
7840: LD_INT 8
7842: PUSH
7843: LD_INT 9
7845: PUSH
7846: LD_INT 10
7848: PUSH
7849: LD_INT 11
7851: PUSH
7852: LD_INT 12
7854: PUSH
7855: LD_INT 13
7857: PUSH
7858: LD_INT 14
7860: PUSH
7861: LD_INT 15
7863: PUSH
7864: LD_INT 16
7866: PUSH
7867: LD_INT 17
7869: PUSH
7870: LD_INT 18
7872: PUSH
7873: LD_INT 19
7875: PUSH
7876: LD_INT 20
7878: PUSH
7879: LD_INT 21
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_INT 23
7887: PUSH
7888: LD_INT 24
7890: PUSH
7891: LD_INT 25
7893: PUSH
7894: LD_INT 26
7896: PUSH
7897: LD_INT 28
7899: PUSH
7900: LD_INT 30
7902: PUSH
7903: LD_INT 31
7905: PUSH
7906: LD_INT 32
7908: PUSH
7909: LD_INT 34
7911: PUSH
7912: LD_INT 36
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 101
7950: PUSH
7951: LD_INT 102
7953: PUSH
7954: LD_INT 103
7956: PUSH
7957: LD_INT 104
7959: PUSH
7960: LD_INT 105
7962: PUSH
7963: LD_INT 106
7965: PUSH
7966: LD_INT 107
7968: PUSH
7969: LD_INT 108
7971: PUSH
7972: LD_INT 109
7974: PUSH
7975: LD_INT 110
7977: PUSH
7978: LD_INT 111
7980: PUSH
7981: LD_INT 112
7983: PUSH
7984: LD_INT 114
7986: PUSH
7987: LD_INT 116
7989: PUSH
7990: LD_INT 117
7992: PUSH
7993: LD_INT 118
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: ST_TO_ADDR
8018: GO 9701
8020: LD_INT 12
8022: DOUBLE
8023: EQUAL
8024: IFTRUE 8028
8026: GO 8248
8028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8029: LD_ADDR_VAR 0 2
8033: PUSH
8034: LD_INT 1
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 3
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: LD_INT 6
8051: PUSH
8052: LD_INT 7
8054: PUSH
8055: LD_INT 8
8057: PUSH
8058: LD_INT 9
8060: PUSH
8061: LD_INT 10
8063: PUSH
8064: LD_INT 11
8066: PUSH
8067: LD_INT 12
8069: PUSH
8070: LD_INT 13
8072: PUSH
8073: LD_INT 14
8075: PUSH
8076: LD_INT 15
8078: PUSH
8079: LD_INT 16
8081: PUSH
8082: LD_INT 17
8084: PUSH
8085: LD_INT 18
8087: PUSH
8088: LD_INT 19
8090: PUSH
8091: LD_INT 20
8093: PUSH
8094: LD_INT 21
8096: PUSH
8097: LD_INT 22
8099: PUSH
8100: LD_INT 23
8102: PUSH
8103: LD_INT 24
8105: PUSH
8106: LD_INT 25
8108: PUSH
8109: LD_INT 26
8111: PUSH
8112: LD_INT 27
8114: PUSH
8115: LD_INT 28
8117: PUSH
8118: LD_INT 30
8120: PUSH
8121: LD_INT 31
8123: PUSH
8124: LD_INT 32
8126: PUSH
8127: LD_INT 33
8129: PUSH
8130: LD_INT 34
8132: PUSH
8133: LD_INT 36
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 101
8174: PUSH
8175: LD_INT 102
8177: PUSH
8178: LD_INT 103
8180: PUSH
8181: LD_INT 104
8183: PUSH
8184: LD_INT 105
8186: PUSH
8187: LD_INT 106
8189: PUSH
8190: LD_INT 107
8192: PUSH
8193: LD_INT 108
8195: PUSH
8196: LD_INT 109
8198: PUSH
8199: LD_INT 110
8201: PUSH
8202: LD_INT 111
8204: PUSH
8205: LD_INT 112
8207: PUSH
8208: LD_INT 113
8210: PUSH
8211: LD_INT 114
8213: PUSH
8214: LD_INT 116
8216: PUSH
8217: LD_INT 117
8219: PUSH
8220: LD_INT 118
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: ST_TO_ADDR
8246: GO 9701
8248: LD_INT 13
8250: DOUBLE
8251: EQUAL
8252: IFTRUE 8256
8254: GO 8464
8256: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8257: LD_ADDR_VAR 0 2
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: LD_INT 4
8273: PUSH
8274: LD_INT 5
8276: PUSH
8277: LD_INT 8
8279: PUSH
8280: LD_INT 9
8282: PUSH
8283: LD_INT 10
8285: PUSH
8286: LD_INT 11
8288: PUSH
8289: LD_INT 12
8291: PUSH
8292: LD_INT 14
8294: PUSH
8295: LD_INT 15
8297: PUSH
8298: LD_INT 16
8300: PUSH
8301: LD_INT 17
8303: PUSH
8304: LD_INT 18
8306: PUSH
8307: LD_INT 19
8309: PUSH
8310: LD_INT 20
8312: PUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 22
8318: PUSH
8319: LD_INT 23
8321: PUSH
8322: LD_INT 24
8324: PUSH
8325: LD_INT 25
8327: PUSH
8328: LD_INT 26
8330: PUSH
8331: LD_INT 27
8333: PUSH
8334: LD_INT 28
8336: PUSH
8337: LD_INT 30
8339: PUSH
8340: LD_INT 31
8342: PUSH
8343: LD_INT 32
8345: PUSH
8346: LD_INT 33
8348: PUSH
8349: LD_INT 34
8351: PUSH
8352: LD_INT 36
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 101
8390: PUSH
8391: LD_INT 102
8393: PUSH
8394: LD_INT 103
8396: PUSH
8397: LD_INT 104
8399: PUSH
8400: LD_INT 105
8402: PUSH
8403: LD_INT 106
8405: PUSH
8406: LD_INT 107
8408: PUSH
8409: LD_INT 108
8411: PUSH
8412: LD_INT 109
8414: PUSH
8415: LD_INT 110
8417: PUSH
8418: LD_INT 111
8420: PUSH
8421: LD_INT 112
8423: PUSH
8424: LD_INT 113
8426: PUSH
8427: LD_INT 114
8429: PUSH
8430: LD_INT 116
8432: PUSH
8433: LD_INT 117
8435: PUSH
8436: LD_INT 118
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: ST_TO_ADDR
8462: GO 9701
8464: LD_INT 14
8466: DOUBLE
8467: EQUAL
8468: IFTRUE 8472
8470: GO 8696
8472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8473: LD_ADDR_VAR 0 2
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: LD_INT 2
8483: PUSH
8484: LD_INT 3
8486: PUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 6
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: LD_INT 8
8501: PUSH
8502: LD_INT 9
8504: PUSH
8505: LD_INT 10
8507: PUSH
8508: LD_INT 11
8510: PUSH
8511: LD_INT 12
8513: PUSH
8514: LD_INT 13
8516: PUSH
8517: LD_INT 14
8519: PUSH
8520: LD_INT 15
8522: PUSH
8523: LD_INT 16
8525: PUSH
8526: LD_INT 17
8528: PUSH
8529: LD_INT 18
8531: PUSH
8532: LD_INT 19
8534: PUSH
8535: LD_INT 20
8537: PUSH
8538: LD_INT 21
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 23
8546: PUSH
8547: LD_INT 24
8549: PUSH
8550: LD_INT 25
8552: PUSH
8553: LD_INT 26
8555: PUSH
8556: LD_INT 27
8558: PUSH
8559: LD_INT 28
8561: PUSH
8562: LD_INT 29
8564: PUSH
8565: LD_INT 30
8567: PUSH
8568: LD_INT 31
8570: PUSH
8571: LD_INT 32
8573: PUSH
8574: LD_INT 33
8576: PUSH
8577: LD_INT 34
8579: PUSH
8580: LD_INT 36
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 101
8622: PUSH
8623: LD_INT 102
8625: PUSH
8626: LD_INT 103
8628: PUSH
8629: LD_INT 104
8631: PUSH
8632: LD_INT 105
8634: PUSH
8635: LD_INT 106
8637: PUSH
8638: LD_INT 107
8640: PUSH
8641: LD_INT 108
8643: PUSH
8644: LD_INT 109
8646: PUSH
8647: LD_INT 110
8649: PUSH
8650: LD_INT 111
8652: PUSH
8653: LD_INT 112
8655: PUSH
8656: LD_INT 113
8658: PUSH
8659: LD_INT 114
8661: PUSH
8662: LD_INT 116
8664: PUSH
8665: LD_INT 117
8667: PUSH
8668: LD_INT 118
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: ST_TO_ADDR
8694: GO 9701
8696: LD_INT 15
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8928
8704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8705: LD_ADDR_VAR 0 2
8709: PUSH
8710: LD_INT 1
8712: PUSH
8713: LD_INT 2
8715: PUSH
8716: LD_INT 3
8718: PUSH
8719: LD_INT 4
8721: PUSH
8722: LD_INT 5
8724: PUSH
8725: LD_INT 6
8727: PUSH
8728: LD_INT 7
8730: PUSH
8731: LD_INT 8
8733: PUSH
8734: LD_INT 9
8736: PUSH
8737: LD_INT 10
8739: PUSH
8740: LD_INT 11
8742: PUSH
8743: LD_INT 12
8745: PUSH
8746: LD_INT 13
8748: PUSH
8749: LD_INT 14
8751: PUSH
8752: LD_INT 15
8754: PUSH
8755: LD_INT 16
8757: PUSH
8758: LD_INT 17
8760: PUSH
8761: LD_INT 18
8763: PUSH
8764: LD_INT 19
8766: PUSH
8767: LD_INT 20
8769: PUSH
8770: LD_INT 21
8772: PUSH
8773: LD_INT 22
8775: PUSH
8776: LD_INT 23
8778: PUSH
8779: LD_INT 24
8781: PUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 26
8787: PUSH
8788: LD_INT 27
8790: PUSH
8791: LD_INT 28
8793: PUSH
8794: LD_INT 29
8796: PUSH
8797: LD_INT 30
8799: PUSH
8800: LD_INT 31
8802: PUSH
8803: LD_INT 32
8805: PUSH
8806: LD_INT 33
8808: PUSH
8809: LD_INT 34
8811: PUSH
8812: LD_INT 36
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 101
8854: PUSH
8855: LD_INT 102
8857: PUSH
8858: LD_INT 103
8860: PUSH
8861: LD_INT 104
8863: PUSH
8864: LD_INT 105
8866: PUSH
8867: LD_INT 106
8869: PUSH
8870: LD_INT 107
8872: PUSH
8873: LD_INT 108
8875: PUSH
8876: LD_INT 109
8878: PUSH
8879: LD_INT 110
8881: PUSH
8882: LD_INT 111
8884: PUSH
8885: LD_INT 112
8887: PUSH
8888: LD_INT 113
8890: PUSH
8891: LD_INT 114
8893: PUSH
8894: LD_INT 116
8896: PUSH
8897: LD_INT 117
8899: PUSH
8900: LD_INT 118
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: ST_TO_ADDR
8926: GO 9701
8928: LD_INT 16
8930: DOUBLE
8931: EQUAL
8932: IFTRUE 8936
8934: GO 9072
8936: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 2
8944: PUSH
8945: LD_INT 4
8947: PUSH
8948: LD_INT 5
8950: PUSH
8951: LD_INT 7
8953: PUSH
8954: LD_INT 11
8956: PUSH
8957: LD_INT 12
8959: PUSH
8960: LD_INT 15
8962: PUSH
8963: LD_INT 16
8965: PUSH
8966: LD_INT 20
8968: PUSH
8969: LD_INT 21
8971: PUSH
8972: LD_INT 22
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 26
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 31
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 33
8995: PUSH
8996: LD_INT 34
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 101
9022: PUSH
9023: LD_INT 102
9025: PUSH
9026: LD_INT 103
9028: PUSH
9029: LD_INT 106
9031: PUSH
9032: LD_INT 108
9034: PUSH
9035: LD_INT 112
9037: PUSH
9038: LD_INT 113
9040: PUSH
9041: LD_INT 114
9043: PUSH
9044: LD_INT 116
9046: PUSH
9047: LD_INT 117
9049: PUSH
9050: LD_INT 118
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: ST_TO_ADDR
9070: GO 9701
9072: LD_INT 17
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9304
9080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: LD_INT 2
9091: PUSH
9092: LD_INT 3
9094: PUSH
9095: LD_INT 4
9097: PUSH
9098: LD_INT 5
9100: PUSH
9101: LD_INT 6
9103: PUSH
9104: LD_INT 7
9106: PUSH
9107: LD_INT 8
9109: PUSH
9110: LD_INT 9
9112: PUSH
9113: LD_INT 10
9115: PUSH
9116: LD_INT 11
9118: PUSH
9119: LD_INT 12
9121: PUSH
9122: LD_INT 13
9124: PUSH
9125: LD_INT 14
9127: PUSH
9128: LD_INT 15
9130: PUSH
9131: LD_INT 16
9133: PUSH
9134: LD_INT 17
9136: PUSH
9137: LD_INT 18
9139: PUSH
9140: LD_INT 19
9142: PUSH
9143: LD_INT 20
9145: PUSH
9146: LD_INT 21
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_INT 23
9154: PUSH
9155: LD_INT 24
9157: PUSH
9158: LD_INT 25
9160: PUSH
9161: LD_INT 26
9163: PUSH
9164: LD_INT 27
9166: PUSH
9167: LD_INT 28
9169: PUSH
9170: LD_INT 29
9172: PUSH
9173: LD_INT 30
9175: PUSH
9176: LD_INT 31
9178: PUSH
9179: LD_INT 32
9181: PUSH
9182: LD_INT 33
9184: PUSH
9185: LD_INT 34
9187: PUSH
9188: LD_INT 36
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 101
9230: PUSH
9231: LD_INT 102
9233: PUSH
9234: LD_INT 103
9236: PUSH
9237: LD_INT 104
9239: PUSH
9240: LD_INT 105
9242: PUSH
9243: LD_INT 106
9245: PUSH
9246: LD_INT 107
9248: PUSH
9249: LD_INT 108
9251: PUSH
9252: LD_INT 109
9254: PUSH
9255: LD_INT 110
9257: PUSH
9258: LD_INT 111
9260: PUSH
9261: LD_INT 112
9263: PUSH
9264: LD_INT 113
9266: PUSH
9267: LD_INT 114
9269: PUSH
9270: LD_INT 116
9272: PUSH
9273: LD_INT 117
9275: PUSH
9276: LD_INT 118
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: ST_TO_ADDR
9302: GO 9701
9304: LD_INT 18
9306: DOUBLE
9307: EQUAL
9308: IFTRUE 9312
9310: GO 9460
9312: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 2
9320: PUSH
9321: LD_INT 4
9323: PUSH
9324: LD_INT 5
9326: PUSH
9327: LD_INT 7
9329: PUSH
9330: LD_INT 11
9332: PUSH
9333: LD_INT 12
9335: PUSH
9336: LD_INT 15
9338: PUSH
9339: LD_INT 16
9341: PUSH
9342: LD_INT 20
9344: PUSH
9345: LD_INT 21
9347: PUSH
9348: LD_INT 22
9350: PUSH
9351: LD_INT 23
9353: PUSH
9354: LD_INT 25
9356: PUSH
9357: LD_INT 26
9359: PUSH
9360: LD_INT 30
9362: PUSH
9363: LD_INT 31
9365: PUSH
9366: LD_INT 32
9368: PUSH
9369: LD_INT 33
9371: PUSH
9372: LD_INT 34
9374: PUSH
9375: LD_INT 35
9377: PUSH
9378: LD_INT 36
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 101
9406: PUSH
9407: LD_INT 102
9409: PUSH
9410: LD_INT 103
9412: PUSH
9413: LD_INT 106
9415: PUSH
9416: LD_INT 108
9418: PUSH
9419: LD_INT 112
9421: PUSH
9422: LD_INT 113
9424: PUSH
9425: LD_INT 114
9427: PUSH
9428: LD_INT 115
9430: PUSH
9431: LD_INT 116
9433: PUSH
9434: LD_INT 117
9436: PUSH
9437: LD_INT 118
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: ST_TO_ADDR
9458: GO 9701
9460: LD_INT 19
9462: DOUBLE
9463: EQUAL
9464: IFTRUE 9468
9466: GO 9700
9468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9469: LD_ADDR_VAR 0 2
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: LD_INT 2
9479: PUSH
9480: LD_INT 3
9482: PUSH
9483: LD_INT 4
9485: PUSH
9486: LD_INT 5
9488: PUSH
9489: LD_INT 6
9491: PUSH
9492: LD_INT 7
9494: PUSH
9495: LD_INT 8
9497: PUSH
9498: LD_INT 9
9500: PUSH
9501: LD_INT 10
9503: PUSH
9504: LD_INT 11
9506: PUSH
9507: LD_INT 12
9509: PUSH
9510: LD_INT 13
9512: PUSH
9513: LD_INT 14
9515: PUSH
9516: LD_INT 15
9518: PUSH
9519: LD_INT 16
9521: PUSH
9522: LD_INT 17
9524: PUSH
9525: LD_INT 18
9527: PUSH
9528: LD_INT 19
9530: PUSH
9531: LD_INT 20
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 23
9542: PUSH
9543: LD_INT 24
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 26
9551: PUSH
9552: LD_INT 27
9554: PUSH
9555: LD_INT 28
9557: PUSH
9558: LD_INT 29
9560: PUSH
9561: LD_INT 30
9563: PUSH
9564: LD_INT 31
9566: PUSH
9567: LD_INT 32
9569: PUSH
9570: LD_INT 33
9572: PUSH
9573: LD_INT 34
9575: PUSH
9576: LD_INT 35
9578: PUSH
9579: LD_INT 36
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 104
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 107
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 109
9646: PUSH
9647: LD_INT 110
9649: PUSH
9650: LD_INT 111
9652: PUSH
9653: LD_INT 112
9655: PUSH
9656: LD_INT 113
9658: PUSH
9659: LD_INT 114
9661: PUSH
9662: LD_INT 115
9664: PUSH
9665: LD_INT 116
9667: PUSH
9668: LD_INT 117
9670: PUSH
9671: LD_INT 118
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: ST_TO_ADDR
9698: GO 9701
9700: POP
// end else
9701: GO 9932
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9703: LD_ADDR_VAR 0 2
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: LD_INT 2
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: LD_INT 4
9719: PUSH
9720: LD_INT 5
9722: PUSH
9723: LD_INT 6
9725: PUSH
9726: LD_INT 7
9728: PUSH
9729: LD_INT 8
9731: PUSH
9732: LD_INT 9
9734: PUSH
9735: LD_INT 10
9737: PUSH
9738: LD_INT 11
9740: PUSH
9741: LD_INT 12
9743: PUSH
9744: LD_INT 13
9746: PUSH
9747: LD_INT 14
9749: PUSH
9750: LD_INT 15
9752: PUSH
9753: LD_INT 16
9755: PUSH
9756: LD_INT 17
9758: PUSH
9759: LD_INT 18
9761: PUSH
9762: LD_INT 19
9764: PUSH
9765: LD_INT 20
9767: PUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 22
9773: PUSH
9774: LD_INT 23
9776: PUSH
9777: LD_INT 24
9779: PUSH
9780: LD_INT 25
9782: PUSH
9783: LD_INT 26
9785: PUSH
9786: LD_INT 27
9788: PUSH
9789: LD_INT 28
9791: PUSH
9792: LD_INT 29
9794: PUSH
9795: LD_INT 30
9797: PUSH
9798: LD_INT 31
9800: PUSH
9801: LD_INT 32
9803: PUSH
9804: LD_INT 33
9806: PUSH
9807: LD_INT 34
9809: PUSH
9810: LD_INT 35
9812: PUSH
9813: LD_INT 36
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 101
9856: PUSH
9857: LD_INT 102
9859: PUSH
9860: LD_INT 103
9862: PUSH
9863: LD_INT 104
9865: PUSH
9866: LD_INT 105
9868: PUSH
9869: LD_INT 106
9871: PUSH
9872: LD_INT 107
9874: PUSH
9875: LD_INT 108
9877: PUSH
9878: LD_INT 109
9880: PUSH
9881: LD_INT 110
9883: PUSH
9884: LD_INT 111
9886: PUSH
9887: LD_INT 112
9889: PUSH
9890: LD_INT 113
9892: PUSH
9893: LD_INT 114
9895: PUSH
9896: LD_INT 115
9898: PUSH
9899: LD_INT 116
9901: PUSH
9902: LD_INT 117
9904: PUSH
9905: LD_INT 118
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: ST_TO_ADDR
// if result then
9932: LD_VAR 0 2
9936: IFFALSE 10722
// begin normal :=  ;
9938: LD_ADDR_VAR 0 5
9942: PUSH
9943: LD_STRING 
9945: ST_TO_ADDR
// hardcore :=  ;
9946: LD_ADDR_VAR 0 6
9950: PUSH
9951: LD_STRING 
9953: ST_TO_ADDR
// active :=  ;
9954: LD_ADDR_VAR 0 7
9958: PUSH
9959: LD_STRING 
9961: ST_TO_ADDR
// for i = 1 to normalCounter do
9962: LD_ADDR_VAR 0 8
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_EXP 26
9976: PUSH
9977: FOR_TO
9978: IFFALSE 10079
// begin tmp := 0 ;
9980: LD_ADDR_VAR 0 3
9984: PUSH
9985: LD_STRING 0
9987: ST_TO_ADDR
// if result [ 1 ] then
9988: LD_VAR 0 2
9992: PUSH
9993: LD_INT 1
9995: ARRAY
9996: IFFALSE 10061
// if result [ 1 ] [ 1 ] = i then
9998: LD_VAR 0 2
10002: PUSH
10003: LD_INT 1
10005: ARRAY
10006: PUSH
10007: LD_INT 1
10009: ARRAY
10010: PUSH
10011: LD_VAR 0 8
10015: EQUAL
10016: IFFALSE 10061
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10018: LD_ADDR_VAR 0 2
10022: PUSH
10023: LD_VAR 0 2
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: LD_VAR 0 2
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: CALL_OW 3
10047: PPUSH
10048: CALL_OW 1
10052: ST_TO_ADDR
// tmp := 1 ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_STRING 1
10060: ST_TO_ADDR
// end ; normal := normal & tmp ;
10061: LD_ADDR_VAR 0 5
10065: PUSH
10066: LD_VAR 0 5
10070: PUSH
10071: LD_VAR 0 3
10075: STR
10076: ST_TO_ADDR
// end ;
10077: GO 9977
10079: POP
10080: POP
// for i = 1 to hardcoreCounter do
10081: LD_ADDR_VAR 0 8
10085: PUSH
10086: DOUBLE
10087: LD_INT 1
10089: DEC
10090: ST_TO_ADDR
10091: LD_EXP 27
10095: PUSH
10096: FOR_TO
10097: IFFALSE 10202
// begin tmp := 0 ;
10099: LD_ADDR_VAR 0 3
10103: PUSH
10104: LD_STRING 0
10106: ST_TO_ADDR
// if result [ 2 ] then
10107: LD_VAR 0 2
10111: PUSH
10112: LD_INT 2
10114: ARRAY
10115: IFFALSE 10184
// if result [ 2 ] [ 1 ] = 100 + i then
10117: LD_VAR 0 2
10121: PUSH
10122: LD_INT 2
10124: ARRAY
10125: PUSH
10126: LD_INT 1
10128: ARRAY
10129: PUSH
10130: LD_INT 100
10132: PUSH
10133: LD_VAR 0 8
10137: PLUS
10138: EQUAL
10139: IFFALSE 10184
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: LD_VAR 0 2
10150: PPUSH
10151: LD_INT 2
10153: PPUSH
10154: LD_VAR 0 2
10158: PUSH
10159: LD_INT 2
10161: ARRAY
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 3
10170: PPUSH
10171: CALL_OW 1
10175: ST_TO_ADDR
// tmp := 1 ;
10176: LD_ADDR_VAR 0 3
10180: PUSH
10181: LD_STRING 1
10183: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10184: LD_ADDR_VAR 0 6
10188: PUSH
10189: LD_VAR 0 6
10193: PUSH
10194: LD_VAR 0 3
10198: STR
10199: ST_TO_ADDR
// end ;
10200: GO 10096
10202: POP
10203: POP
// if isGameLoad then
10204: LD_VAR 0 1
10208: IFFALSE 10683
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10210: LD_ADDR_VAR 0 4
10214: PUSH
10215: LD_EXP 30
10219: PUSH
10220: LD_EXP 29
10224: PUSH
10225: LD_EXP 31
10229: PUSH
10230: LD_EXP 28
10234: PUSH
10235: LD_EXP 32
10239: PUSH
10240: LD_EXP 33
10244: PUSH
10245: LD_EXP 34
10249: PUSH
10250: LD_EXP 35
10254: PUSH
10255: LD_EXP 36
10259: PUSH
10260: LD_EXP 37
10264: PUSH
10265: LD_EXP 38
10269: PUSH
10270: LD_EXP 39
10274: PUSH
10275: LD_EXP 40
10279: PUSH
10280: LD_EXP 41
10284: PUSH
10285: LD_EXP 49
10289: PUSH
10290: LD_EXP 50
10294: PUSH
10295: LD_EXP 51
10299: PUSH
10300: LD_EXP 52
10304: PUSH
10305: LD_EXP 54
10309: PUSH
10310: LD_EXP 55
10314: PUSH
10315: LD_EXP 56
10319: PUSH
10320: LD_EXP 59
10324: PUSH
10325: LD_EXP 61
10329: PUSH
10330: LD_EXP 62
10334: PUSH
10335: LD_EXP 63
10339: PUSH
10340: LD_EXP 65
10344: PUSH
10345: LD_EXP 66
10349: PUSH
10350: LD_EXP 69
10354: PUSH
10355: LD_EXP 70
10359: PUSH
10360: LD_EXP 71
10364: PUSH
10365: LD_EXP 72
10369: PUSH
10370: LD_EXP 73
10374: PUSH
10375: LD_EXP 74
10379: PUSH
10380: LD_EXP 75
10384: PUSH
10385: LD_EXP 76
10389: PUSH
10390: LD_EXP 77
10394: PUSH
10395: LD_EXP 42
10399: PUSH
10400: LD_EXP 43
10404: PUSH
10405: LD_EXP 46
10409: PUSH
10410: LD_EXP 47
10414: PUSH
10415: LD_EXP 48
10419: PUSH
10420: LD_EXP 44
10424: PUSH
10425: LD_EXP 45
10429: PUSH
10430: LD_EXP 53
10434: PUSH
10435: LD_EXP 57
10439: PUSH
10440: LD_EXP 58
10444: PUSH
10445: LD_EXP 60
10449: PUSH
10450: LD_EXP 64
10454: PUSH
10455: LD_EXP 67
10459: PUSH
10460: LD_EXP 68
10464: PUSH
10465: LD_EXP 78
10469: PUSH
10470: LD_EXP 79
10474: PUSH
10475: LD_EXP 80
10479: PUSH
10480: LD_EXP 81
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: ST_TO_ADDR
// tmp :=  ;
10541: LD_ADDR_VAR 0 3
10545: PUSH
10546: LD_STRING 
10548: ST_TO_ADDR
// for i = 1 to normalCounter do
10549: LD_ADDR_VAR 0 8
10553: PUSH
10554: DOUBLE
10555: LD_INT 1
10557: DEC
10558: ST_TO_ADDR
10559: LD_EXP 26
10563: PUSH
10564: FOR_TO
10565: IFFALSE 10601
// begin if flags [ i ] then
10567: LD_VAR 0 4
10571: PUSH
10572: LD_VAR 0 8
10576: ARRAY
10577: IFFALSE 10599
// tmp := tmp & i & ; ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_VAR 0 3
10588: PUSH
10589: LD_VAR 0 8
10593: STR
10594: PUSH
10595: LD_STRING ;
10597: STR
10598: ST_TO_ADDR
// end ;
10599: GO 10564
10601: POP
10602: POP
// for i = 1 to hardcoreCounter do
10603: LD_ADDR_VAR 0 8
10607: PUSH
10608: DOUBLE
10609: LD_INT 1
10611: DEC
10612: ST_TO_ADDR
10613: LD_EXP 27
10617: PUSH
10618: FOR_TO
10619: IFFALSE 10665
// begin if flags [ normalCounter + i ] then
10621: LD_VAR 0 4
10625: PUSH
10626: LD_EXP 26
10630: PUSH
10631: LD_VAR 0 8
10635: PLUS
10636: ARRAY
10637: IFFALSE 10663
// tmp := tmp & ( 100 + i ) & ; ;
10639: LD_ADDR_VAR 0 3
10643: PUSH
10644: LD_VAR 0 3
10648: PUSH
10649: LD_INT 100
10651: PUSH
10652: LD_VAR 0 8
10656: PLUS
10657: STR
10658: PUSH
10659: LD_STRING ;
10661: STR
10662: ST_TO_ADDR
// end ;
10663: GO 10618
10665: POP
10666: POP
// if tmp then
10667: LD_VAR 0 3
10671: IFFALSE 10683
// active := tmp ;
10673: LD_ADDR_VAR 0 7
10677: PUSH
10678: LD_VAR 0 3
10682: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10683: LD_STRING getStreamItemsFromMission("
10685: PUSH
10686: LD_VAR 0 5
10690: STR
10691: PUSH
10692: LD_STRING ","
10694: STR
10695: PUSH
10696: LD_VAR 0 6
10700: STR
10701: PUSH
10702: LD_STRING ","
10704: STR
10705: PUSH
10706: LD_VAR 0 7
10710: STR
10711: PUSH
10712: LD_STRING ")
10714: STR
10715: PPUSH
10716: CALL_OW 559
// end else
10720: GO 10729
// ToLua ( getStreamItemsFromMission("","","") ) ;
10722: LD_STRING getStreamItemsFromMission("","","")
10724: PPUSH
10725: CALL_OW 559
// end ;
10729: LD_VAR 0 2
10733: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10734: LD_EXP 25
10738: PUSH
10739: LD_EXP 30
10743: AND
10744: IFFALSE 10868
10746: GO 10748
10748: DISABLE
10749: LD_INT 0
10751: PPUSH
10752: PPUSH
// begin enable ;
10753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10754: LD_ADDR_VAR 0 2
10758: PUSH
10759: LD_INT 22
10761: PUSH
10762: LD_OWVAR 2
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 34
10776: PUSH
10777: LD_INT 7
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 34
10786: PUSH
10787: LD_INT 45
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 34
10796: PUSH
10797: LD_INT 28
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 34
10806: PUSH
10807: LD_INT 47
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: ST_TO_ADDR
// if not tmp then
10830: LD_VAR 0 2
10834: NOT
10835: IFFALSE 10839
// exit ;
10837: GO 10868
// for i in tmp do
10839: LD_ADDR_VAR 0 1
10843: PUSH
10844: LD_VAR 0 2
10848: PUSH
10849: FOR_IN
10850: IFFALSE 10866
// begin SetLives ( i , 0 ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_INT 0
10859: PPUSH
10860: CALL_OW 234
// end ;
10864: GO 10849
10866: POP
10867: POP
// end ;
10868: PPOPN 2
10870: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10871: LD_EXP 25
10875: PUSH
10876: LD_EXP 31
10880: AND
10881: IFFALSE 10965
10883: GO 10885
10885: DISABLE
10886: LD_INT 0
10888: PPUSH
10889: PPUSH
// begin enable ;
10890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10891: LD_ADDR_VAR 0 2
10895: PUSH
10896: LD_INT 22
10898: PUSH
10899: LD_OWVAR 2
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 69
10926: ST_TO_ADDR
// if not tmp then
10927: LD_VAR 0 2
10931: NOT
10932: IFFALSE 10936
// exit ;
10934: GO 10965
// for i in tmp do
10936: LD_ADDR_VAR 0 1
10940: PUSH
10941: LD_VAR 0 2
10945: PUSH
10946: FOR_IN
10947: IFFALSE 10963
// begin SetLives ( i , 0 ) ;
10949: LD_VAR 0 1
10953: PPUSH
10954: LD_INT 0
10956: PPUSH
10957: CALL_OW 234
// end ;
10961: GO 10946
10963: POP
10964: POP
// end ;
10965: PPOPN 2
10967: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10968: LD_EXP 25
10972: PUSH
10973: LD_EXP 28
10977: AND
10978: IFFALSE 11071
10980: GO 10982
10982: DISABLE
10983: LD_INT 0
10985: PPUSH
// begin enable ;
10986: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10987: LD_ADDR_VAR 0 1
10991: PUSH
10992: LD_INT 22
10994: PUSH
10995: LD_OWVAR 2
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 2
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 9
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 8
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: PUSH
11052: FOR_IN
11053: IFFALSE 11069
// begin SetClass ( i , 1 ) ;
11055: LD_VAR 0 1
11059: PPUSH
11060: LD_INT 1
11062: PPUSH
11063: CALL_OW 336
// end ;
11067: GO 11052
11069: POP
11070: POP
// end ;
11071: PPOPN 1
11073: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11074: LD_EXP 25
11078: PUSH
11079: LD_EXP 29
11083: AND
11084: PUSH
11085: LD_OWVAR 65
11089: PUSH
11090: LD_INT 7
11092: LESS
11093: AND
11094: IFFALSE 11108
11096: GO 11098
11098: DISABLE
// begin enable ;
11099: ENABLE
// game_speed := 7 ;
11100: LD_ADDR_OWVAR 65
11104: PUSH
11105: LD_INT 7
11107: ST_TO_ADDR
// end ;
11108: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11109: LD_EXP 25
11113: PUSH
11114: LD_EXP 32
11118: AND
11119: IFFALSE 11321
11121: GO 11123
11123: DISABLE
11124: LD_INT 0
11126: PPUSH
11127: PPUSH
11128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11129: LD_ADDR_VAR 0 3
11133: PUSH
11134: LD_INT 81
11136: PUSH
11137: LD_OWVAR 2
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 21
11148: PUSH
11149: LD_INT 1
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PPUSH
11160: CALL_OW 69
11164: ST_TO_ADDR
// if not tmp then
11165: LD_VAR 0 3
11169: NOT
11170: IFFALSE 11174
// exit ;
11172: GO 11321
// if tmp > 5 then
11174: LD_VAR 0 3
11178: PUSH
11179: LD_INT 5
11181: GREATER
11182: IFFALSE 11194
// k := 5 else
11184: LD_ADDR_VAR 0 2
11188: PUSH
11189: LD_INT 5
11191: ST_TO_ADDR
11192: GO 11204
// k := tmp ;
11194: LD_ADDR_VAR 0 2
11198: PUSH
11199: LD_VAR 0 3
11203: ST_TO_ADDR
// for i := 1 to k do
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: DOUBLE
11210: LD_INT 1
11212: DEC
11213: ST_TO_ADDR
11214: LD_VAR 0 2
11218: PUSH
11219: FOR_TO
11220: IFFALSE 11319
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11222: LD_VAR 0 3
11226: PUSH
11227: LD_VAR 0 1
11231: ARRAY
11232: PPUSH
11233: LD_VAR 0 1
11237: PUSH
11238: LD_INT 4
11240: MOD
11241: PUSH
11242: LD_INT 1
11244: PLUS
11245: PPUSH
11246: CALL_OW 259
11250: PUSH
11251: LD_INT 10
11253: LESS
11254: IFFALSE 11317
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11256: LD_VAR 0 3
11260: PUSH
11261: LD_VAR 0 1
11265: ARRAY
11266: PPUSH
11267: LD_VAR 0 1
11271: PUSH
11272: LD_INT 4
11274: MOD
11275: PUSH
11276: LD_INT 1
11278: PLUS
11279: PPUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: LD_VAR 0 1
11295: PUSH
11296: LD_INT 4
11298: MOD
11299: PUSH
11300: LD_INT 1
11302: PLUS
11303: PPUSH
11304: CALL_OW 259
11308: PUSH
11309: LD_INT 1
11311: PLUS
11312: PPUSH
11313: CALL_OW 237
11317: GO 11219
11319: POP
11320: POP
// end ;
11321: PPOPN 3
11323: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11324: LD_EXP 25
11328: PUSH
11329: LD_EXP 33
11333: AND
11334: IFFALSE 11354
11336: GO 11338
11338: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11339: LD_INT 4
11341: PPUSH
11342: LD_OWVAR 2
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 324
11354: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11355: LD_EXP 25
11359: PUSH
11360: LD_EXP 62
11364: AND
11365: IFFALSE 11385
11367: GO 11369
11369: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11370: LD_INT 19
11372: PPUSH
11373: LD_OWVAR 2
11377: PPUSH
11378: LD_INT 0
11380: PPUSH
11381: CALL_OW 324
11385: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11386: LD_EXP 25
11390: PUSH
11391: LD_EXP 34
11395: AND
11396: IFFALSE 11498
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
11404: PPUSH
// begin enable ;
11405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11406: LD_ADDR_VAR 0 2
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_OWVAR 2
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 2
11425: PUSH
11426: LD_INT 34
11428: PUSH
11429: LD_INT 11
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 34
11438: PUSH
11439: LD_INT 30
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PPUSH
11455: CALL_OW 69
11459: ST_TO_ADDR
// if not tmp then
11460: LD_VAR 0 2
11464: NOT
11465: IFFALSE 11469
// exit ;
11467: GO 11498
// for i in tmp do
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_VAR 0 2
11478: PUSH
11479: FOR_IN
11480: IFFALSE 11496
// begin SetLives ( i , 0 ) ;
11482: LD_VAR 0 1
11486: PPUSH
11487: LD_INT 0
11489: PPUSH
11490: CALL_OW 234
// end ;
11494: GO 11479
11496: POP
11497: POP
// end ;
11498: PPOPN 2
11500: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11501: LD_EXP 25
11505: PUSH
11506: LD_EXP 35
11510: AND
11511: IFFALSE 11531
11513: GO 11515
11515: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11516: LD_INT 32
11518: PPUSH
11519: LD_OWVAR 2
11523: PPUSH
11524: LD_INT 0
11526: PPUSH
11527: CALL_OW 324
11531: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11532: LD_EXP 25
11536: PUSH
11537: LD_EXP 36
11541: AND
11542: IFFALSE 11723
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
11551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11552: LD_ADDR_VAR 0 2
11556: PUSH
11557: LD_INT 22
11559: PUSH
11560: LD_OWVAR 2
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 33
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: ST_TO_ADDR
// if not tmp then
11588: LD_VAR 0 2
11592: NOT
11593: IFFALSE 11597
// exit ;
11595: GO 11723
// side := 0 ;
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_INT 0
11604: ST_TO_ADDR
// for i := 1 to 8 do
11605: LD_ADDR_VAR 0 1
11609: PUSH
11610: DOUBLE
11611: LD_INT 1
11613: DEC
11614: ST_TO_ADDR
11615: LD_INT 8
11617: PUSH
11618: FOR_TO
11619: IFFALSE 11667
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11621: LD_OWVAR 2
11625: PUSH
11626: LD_VAR 0 1
11630: NONEQUAL
11631: PUSH
11632: LD_OWVAR 2
11636: PPUSH
11637: LD_VAR 0 1
11641: PPUSH
11642: CALL_OW 81
11646: PUSH
11647: LD_INT 2
11649: EQUAL
11650: AND
11651: IFFALSE 11665
// begin side := i ;
11653: LD_ADDR_VAR 0 3
11657: PUSH
11658: LD_VAR 0 1
11662: ST_TO_ADDR
// break ;
11663: GO 11667
// end ;
11665: GO 11618
11667: POP
11668: POP
// if not side then
11669: LD_VAR 0 3
11673: NOT
11674: IFFALSE 11678
// exit ;
11676: GO 11723
// for i := 1 to tmp do
11678: LD_ADDR_VAR 0 1
11682: PUSH
11683: DOUBLE
11684: LD_INT 1
11686: DEC
11687: ST_TO_ADDR
11688: LD_VAR 0 2
11692: PUSH
11693: FOR_TO
11694: IFFALSE 11721
// if Prob ( 60 ) then
11696: LD_INT 60
11698: PPUSH
11699: CALL_OW 13
11703: IFFALSE 11719
// SetSide ( i , side ) ;
11705: LD_VAR 0 1
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: CALL_OW 235
11719: GO 11693
11721: POP
11722: POP
// end ;
11723: PPOPN 3
11725: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11726: LD_EXP 25
11730: PUSH
11731: LD_EXP 38
11735: AND
11736: IFFALSE 11855
11738: GO 11740
11740: DISABLE
11741: LD_INT 0
11743: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11744: LD_ADDR_VAR 0 1
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_OWVAR 2
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 21
11763: PUSH
11764: LD_INT 1
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 3
11773: PUSH
11774: LD_INT 23
11776: PUSH
11777: LD_INT 0
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: LIST
11792: PPUSH
11793: CALL_OW 69
11797: PUSH
11798: FOR_IN
11799: IFFALSE 11853
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL_OW 257
11810: PUSH
11811: LD_INT 1
11813: PUSH
11814: LD_INT 2
11816: PUSH
11817: LD_INT 3
11819: PUSH
11820: LD_INT 4
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: IN
11829: IFFALSE 11851
// SetClass ( un , rand ( 1 , 4 ) ) ;
11831: LD_VAR 0 1
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: LD_INT 4
11841: PPUSH
11842: CALL_OW 12
11846: PPUSH
11847: CALL_OW 336
11851: GO 11798
11853: POP
11854: POP
// end ;
11855: PPOPN 1
11857: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11858: LD_EXP 25
11862: PUSH
11863: LD_EXP 37
11867: AND
11868: IFFALSE 11947
11870: GO 11872
11872: DISABLE
11873: LD_INT 0
11875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_OWVAR 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 3
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: ST_TO_ADDR
// if not tmp then
11912: LD_VAR 0 1
11916: NOT
11917: IFFALSE 11921
// exit ;
11919: GO 11947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11921: LD_VAR 0 1
11925: PUSH
11926: LD_INT 1
11928: PPUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 12
11938: ARRAY
11939: PPUSH
11940: LD_INT 100
11942: PPUSH
11943: CALL_OW 234
// end ;
11947: PPOPN 1
11949: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11950: LD_EXP 25
11954: PUSH
11955: LD_EXP 39
11959: AND
11960: IFFALSE 12058
11962: GO 11964
11964: DISABLE
11965: LD_INT 0
11967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11968: LD_ADDR_VAR 0 1
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_OWVAR 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 21
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: ST_TO_ADDR
// if not tmp then
12004: LD_VAR 0 1
12008: NOT
12009: IFFALSE 12013
// exit ;
12011: GO 12058
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12013: LD_VAR 0 1
12017: PUSH
12018: LD_INT 1
12020: PPUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 12
12030: ARRAY
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: LD_INT 4
12037: PPUSH
12038: CALL_OW 12
12042: PPUSH
12043: LD_INT 3000
12045: PPUSH
12046: LD_INT 9000
12048: PPUSH
12049: CALL_OW 12
12053: PPUSH
12054: CALL_OW 492
// end ;
12058: PPOPN 1
12060: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12061: LD_EXP 25
12065: PUSH
12066: LD_EXP 40
12070: AND
12071: IFFALSE 12091
12073: GO 12075
12075: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12076: LD_INT 1
12078: PPUSH
12079: LD_OWVAR 2
12083: PPUSH
12084: LD_INT 0
12086: PPUSH
12087: CALL_OW 324
12091: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12092: LD_EXP 25
12096: PUSH
12097: LD_EXP 41
12101: AND
12102: IFFALSE 12185
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12111: LD_ADDR_VAR 0 2
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 3
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if not tmp then
12147: LD_VAR 0 2
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12185
// for i in tmp do
12156: LD_ADDR_VAR 0 1
12160: PUSH
12161: LD_VAR 0 2
12165: PUSH
12166: FOR_IN
12167: IFFALSE 12183
// SetBLevel ( i , 10 ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_INT 10
12176: PPUSH
12177: CALL_OW 241
12181: GO 12166
12183: POP
12184: POP
// end ;
12185: PPOPN 2
12187: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12188: LD_EXP 25
12192: PUSH
12193: LD_EXP 42
12197: AND
12198: IFFALSE 12309
12200: GO 12202
12202: DISABLE
12203: LD_INT 0
12205: PPUSH
12206: PPUSH
12207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12208: LD_ADDR_VAR 0 3
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_OWVAR 2
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 25
12227: PUSH
12228: LD_INT 1
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 69
12243: ST_TO_ADDR
// if not tmp then
12244: LD_VAR 0 3
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 12309
// un := tmp [ rand ( 1 , tmp ) ] ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: LD_VAR 0 3
12262: PUSH
12263: LD_INT 1
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 12
12275: ARRAY
12276: ST_TO_ADDR
// if Crawls ( un ) then
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 318
12286: IFFALSE 12297
// ComWalk ( un ) ;
12288: LD_VAR 0 2
12292: PPUSH
12293: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12297: LD_VAR 0 2
12301: PPUSH
12302: LD_INT 5
12304: PPUSH
12305: CALL_OW 336
// end ;
12309: PPOPN 3
12311: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12312: LD_EXP 25
12316: PUSH
12317: LD_EXP 43
12321: AND
12322: PUSH
12323: LD_OWVAR 67
12327: PUSH
12328: LD_INT 4
12330: LESS
12331: AND
12332: IFFALSE 12351
12334: GO 12336
12336: DISABLE
// begin Difficulty := Difficulty + 1 ;
12337: LD_ADDR_OWVAR 67
12341: PUSH
12342: LD_OWVAR 67
12346: PUSH
12347: LD_INT 1
12349: PLUS
12350: ST_TO_ADDR
// end ;
12351: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12352: LD_EXP 25
12356: PUSH
12357: LD_EXP 44
12361: AND
12362: IFFALSE 12465
12364: GO 12366
12366: DISABLE
12367: LD_INT 0
12369: PPUSH
// begin for i := 1 to 5 do
12370: LD_ADDR_VAR 0 1
12374: PUSH
12375: DOUBLE
12376: LD_INT 1
12378: DEC
12379: ST_TO_ADDR
12380: LD_INT 5
12382: PUSH
12383: FOR_TO
12384: IFFALSE 12463
// begin uc_nation := nation_nature ;
12386: LD_ADDR_OWVAR 21
12390: PUSH
12391: LD_INT 0
12393: ST_TO_ADDR
// uc_side := 0 ;
12394: LD_ADDR_OWVAR 20
12398: PUSH
12399: LD_INT 0
12401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12402: LD_ADDR_OWVAR 29
12406: PUSH
12407: LD_INT 12
12409: PUSH
12410: LD_INT 12
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: ST_TO_ADDR
// hc_agressivity := 20 ;
12417: LD_ADDR_OWVAR 35
12421: PUSH
12422: LD_INT 20
12424: ST_TO_ADDR
// hc_class := class_tiger ;
12425: LD_ADDR_OWVAR 28
12429: PUSH
12430: LD_INT 14
12432: ST_TO_ADDR
// hc_gallery :=  ;
12433: LD_ADDR_OWVAR 33
12437: PUSH
12438: LD_STRING 
12440: ST_TO_ADDR
// hc_name :=  ;
12441: LD_ADDR_OWVAR 26
12445: PUSH
12446: LD_STRING 
12448: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12449: CALL_OW 44
12453: PPUSH
12454: LD_INT 0
12456: PPUSH
12457: CALL_OW 51
// end ;
12461: GO 12383
12463: POP
12464: POP
// end ;
12465: PPOPN 1
12467: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12468: LD_EXP 25
12472: PUSH
12473: LD_EXP 45
12477: AND
12478: IFFALSE 12487
12480: GO 12482
12482: DISABLE
// StreamSibBomb ;
12483: CALL 12488 0 0
12487: END
// export function StreamSibBomb ; var i , x , y ; begin
12488: LD_INT 0
12490: PPUSH
12491: PPUSH
12492: PPUSH
12493: PPUSH
// result := false ;
12494: LD_ADDR_VAR 0 1
12498: PUSH
12499: LD_INT 0
12501: ST_TO_ADDR
// for i := 1 to 16 do
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: DOUBLE
12508: LD_INT 1
12510: DEC
12511: ST_TO_ADDR
12512: LD_INT 16
12514: PUSH
12515: FOR_TO
12516: IFFALSE 12715
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12518: LD_ADDR_VAR 0 3
12522: PUSH
12523: LD_INT 10
12525: PUSH
12526: LD_INT 20
12528: PUSH
12529: LD_INT 30
12531: PUSH
12532: LD_INT 40
12534: PUSH
12535: LD_INT 50
12537: PUSH
12538: LD_INT 60
12540: PUSH
12541: LD_INT 70
12543: PUSH
12544: LD_INT 80
12546: PUSH
12547: LD_INT 90
12549: PUSH
12550: LD_INT 100
12552: PUSH
12553: LD_INT 110
12555: PUSH
12556: LD_INT 120
12558: PUSH
12559: LD_INT 130
12561: PUSH
12562: LD_INT 140
12564: PUSH
12565: LD_INT 150
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 1
12587: PPUSH
12588: LD_INT 15
12590: PPUSH
12591: CALL_OW 12
12595: ARRAY
12596: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12597: LD_ADDR_VAR 0 4
12601: PUSH
12602: LD_INT 10
12604: PUSH
12605: LD_INT 20
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: LD_INT 40
12613: PUSH
12614: LD_INT 50
12616: PUSH
12617: LD_INT 60
12619: PUSH
12620: LD_INT 70
12622: PUSH
12623: LD_INT 80
12625: PUSH
12626: LD_INT 90
12628: PUSH
12629: LD_INT 100
12631: PUSH
12632: LD_INT 110
12634: PUSH
12635: LD_INT 120
12637: PUSH
12638: LD_INT 130
12640: PUSH
12641: LD_INT 140
12643: PUSH
12644: LD_INT 150
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: PUSH
12664: LD_INT 1
12666: PPUSH
12667: LD_INT 15
12669: PPUSH
12670: CALL_OW 12
12674: ARRAY
12675: ST_TO_ADDR
// if ValidHex ( x , y ) then
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_VAR 0 4
12685: PPUSH
12686: CALL_OW 488
12690: IFFALSE 12713
// begin result := [ x , y ] ;
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: LD_VAR 0 3
12701: PUSH
12702: LD_VAR 0 4
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: ST_TO_ADDR
// break ;
12711: GO 12715
// end ; end ;
12713: GO 12515
12715: POP
12716: POP
// if result then
12717: LD_VAR 0 1
12721: IFFALSE 12781
// begin ToLua ( playSibBomb() ) ;
12723: LD_STRING playSibBomb()
12725: PPUSH
12726: CALL_OW 559
// wait ( 0 0$14 ) ;
12730: LD_INT 490
12732: PPUSH
12733: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12737: LD_VAR 0 1
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: LD_VAR 0 1
12750: PUSH
12751: LD_INT 2
12753: ARRAY
12754: PPUSH
12755: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12759: LD_VAR 0 1
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: LD_VAR 0 1
12772: PUSH
12773: LD_INT 2
12775: ARRAY
12776: PPUSH
12777: CALL_OW 429
// end ; end ;
12781: LD_VAR 0 1
12785: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12786: LD_EXP 25
12790: PUSH
12791: LD_EXP 47
12795: AND
12796: IFFALSE 12808
12798: GO 12800
12800: DISABLE
// YouLost (  ) ;
12801: LD_STRING 
12803: PPUSH
12804: CALL_OW 104
12808: END
// every 0 0$1 trigger StreamModeActive and sFog do
12809: LD_EXP 25
12813: PUSH
12814: LD_EXP 46
12818: AND
12819: IFFALSE 12833
12821: GO 12823
12823: DISABLE
// FogOff ( your_side ) ;
12824: LD_OWVAR 2
12828: PPUSH
12829: CALL_OW 344
12833: END
// every 0 0$1 trigger StreamModeActive and sSun do
12834: LD_EXP 25
12838: PUSH
12839: LD_EXP 48
12843: AND
12844: IFFALSE 12872
12846: GO 12848
12848: DISABLE
// begin solar_recharge_percent := 0 ;
12849: LD_ADDR_OWVAR 79
12853: PUSH
12854: LD_INT 0
12856: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12857: LD_INT 10500
12859: PPUSH
12860: CALL_OW 67
// solar_recharge_percent := 100 ;
12864: LD_ADDR_OWVAR 79
12868: PUSH
12869: LD_INT 100
12871: ST_TO_ADDR
// end ;
12872: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12873: LD_EXP 25
12877: PUSH
12878: LD_EXP 49
12882: AND
12883: IFFALSE 13122
12885: GO 12887
12887: DISABLE
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
12892: PPUSH
// begin tmp := [ ] ;
12893: LD_ADDR_VAR 0 3
12897: PUSH
12898: EMPTY
12899: ST_TO_ADDR
// for i := 1 to 6 do
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: DOUBLE
12906: LD_INT 1
12908: DEC
12909: ST_TO_ADDR
12910: LD_INT 6
12912: PUSH
12913: FOR_TO
12914: IFFALSE 13019
// begin uc_nation := nation_nature ;
12916: LD_ADDR_OWVAR 21
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// uc_side := 0 ;
12924: LD_ADDR_OWVAR 20
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12932: LD_ADDR_OWVAR 29
12936: PUSH
12937: LD_INT 12
12939: PUSH
12940: LD_INT 12
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: ST_TO_ADDR
// hc_agressivity := 20 ;
12947: LD_ADDR_OWVAR 35
12951: PUSH
12952: LD_INT 20
12954: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12955: LD_ADDR_OWVAR 28
12959: PUSH
12960: LD_INT 17
12962: ST_TO_ADDR
// hc_gallery :=  ;
12963: LD_ADDR_OWVAR 33
12967: PUSH
12968: LD_STRING 
12970: ST_TO_ADDR
// hc_name :=  ;
12971: LD_ADDR_OWVAR 26
12975: PUSH
12976: LD_STRING 
12978: ST_TO_ADDR
// un := CreateHuman ;
12979: LD_ADDR_VAR 0 2
12983: PUSH
12984: CALL_OW 44
12988: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12989: LD_VAR 0 2
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 51
// tmp := tmp ^ un ;
13001: LD_ADDR_VAR 0 3
13005: PUSH
13006: LD_VAR 0 3
13010: PUSH
13011: LD_VAR 0 2
13015: ADD
13016: ST_TO_ADDR
// end ;
13017: GO 12913
13019: POP
13020: POP
// repeat wait ( 0 0$1 ) ;
13021: LD_INT 35
13023: PPUSH
13024: CALL_OW 67
// for un in tmp do
13028: LD_ADDR_VAR 0 2
13032: PUSH
13033: LD_VAR 0 3
13037: PUSH
13038: FOR_IN
13039: IFFALSE 13113
// begin if IsDead ( un ) then
13041: LD_VAR 0 2
13045: PPUSH
13046: CALL_OW 301
13050: IFFALSE 13070
// begin tmp := tmp diff un ;
13052: LD_ADDR_VAR 0 3
13056: PUSH
13057: LD_VAR 0 3
13061: PUSH
13062: LD_VAR 0 2
13066: DIFF
13067: ST_TO_ADDR
// continue ;
13068: GO 13038
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13070: LD_VAR 0 2
13074: PPUSH
13075: LD_INT 3
13077: PUSH
13078: LD_INT 22
13080: PUSH
13081: LD_INT 0
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 69
13096: PPUSH
13097: LD_VAR 0 2
13101: PPUSH
13102: CALL_OW 74
13106: PPUSH
13107: CALL_OW 115
// end ;
13111: GO 13038
13113: POP
13114: POP
// until not tmp ;
13115: LD_VAR 0 3
13119: NOT
13120: IFFALSE 13021
// end ;
13122: PPOPN 3
13124: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13125: LD_EXP 25
13129: PUSH
13130: LD_EXP 50
13134: AND
13135: IFFALSE 13189
13137: GO 13139
13139: DISABLE
// begin ToLua ( displayTroll(); ) ;
13140: LD_STRING displayTroll();
13142: PPUSH
13143: CALL_OW 559
// wait ( 3 3$00 ) ;
13147: LD_INT 6300
13149: PPUSH
13150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13154: LD_STRING hideTroll();
13156: PPUSH
13157: CALL_OW 559
// wait ( 1 1$00 ) ;
13161: LD_INT 2100
13163: PPUSH
13164: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13168: LD_STRING displayTroll();
13170: PPUSH
13171: CALL_OW 559
// wait ( 1 1$00 ) ;
13175: LD_INT 2100
13177: PPUSH
13178: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13182: LD_STRING hideTroll();
13184: PPUSH
13185: CALL_OW 559
// end ;
13189: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13190: LD_EXP 25
13194: PUSH
13195: LD_EXP 51
13199: AND
13200: IFFALSE 13263
13202: GO 13204
13204: DISABLE
13205: LD_INT 0
13207: PPUSH
// begin p := 0 ;
13208: LD_ADDR_VAR 0 1
13212: PUSH
13213: LD_INT 0
13215: ST_TO_ADDR
// repeat game_speed := 1 ;
13216: LD_ADDR_OWVAR 65
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13224: LD_INT 35
13226: PPUSH
13227: CALL_OW 67
// p := p + 1 ;
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: LD_VAR 0 1
13240: PUSH
13241: LD_INT 1
13243: PLUS
13244: ST_TO_ADDR
// until p >= 60 ;
13245: LD_VAR 0 1
13249: PUSH
13250: LD_INT 60
13252: GREATEREQUAL
13253: IFFALSE 13216
// game_speed := 4 ;
13255: LD_ADDR_OWVAR 65
13259: PUSH
13260: LD_INT 4
13262: ST_TO_ADDR
// end ;
13263: PPOPN 1
13265: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13266: LD_EXP 25
13270: PUSH
13271: LD_EXP 52
13275: AND
13276: IFFALSE 13422
13278: GO 13280
13280: DISABLE
13281: LD_INT 0
13283: PPUSH
13284: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13285: LD_ADDR_VAR 0 1
13289: PUSH
13290: LD_INT 22
13292: PUSH
13293: LD_OWVAR 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 2
13304: PUSH
13305: LD_INT 30
13307: PUSH
13308: LD_INT 0
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 30
13317: PUSH
13318: LD_INT 1
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: ST_TO_ADDR
// if not depot then
13339: LD_VAR 0 1
13343: NOT
13344: IFFALSE 13348
// exit ;
13346: GO 13422
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13348: LD_ADDR_VAR 0 2
13352: PUSH
13353: LD_VAR 0 1
13357: PUSH
13358: LD_INT 1
13360: PPUSH
13361: LD_VAR 0 1
13365: PPUSH
13366: CALL_OW 12
13370: ARRAY
13371: PPUSH
13372: CALL_OW 274
13376: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13377: LD_VAR 0 2
13381: PPUSH
13382: LD_INT 1
13384: PPUSH
13385: LD_INT 0
13387: PPUSH
13388: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13392: LD_VAR 0 2
13396: PPUSH
13397: LD_INT 2
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13407: LD_VAR 0 2
13411: PPUSH
13412: LD_INT 3
13414: PPUSH
13415: LD_INT 0
13417: PPUSH
13418: CALL_OW 277
// end ;
13422: PPOPN 2
13424: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13425: LD_EXP 25
13429: PUSH
13430: LD_EXP 53
13434: AND
13435: IFFALSE 13532
13437: GO 13439
13439: DISABLE
13440: LD_INT 0
13442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13443: LD_ADDR_VAR 0 1
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_OWVAR 2
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 21
13462: PUSH
13463: LD_INT 1
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 3
13472: PUSH
13473: LD_INT 23
13475: PUSH
13476: LD_INT 0
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 69
13496: ST_TO_ADDR
// if not tmp then
13497: LD_VAR 0 1
13501: NOT
13502: IFFALSE 13506
// exit ;
13504: GO 13532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13506: LD_VAR 0 1
13510: PUSH
13511: LD_INT 1
13513: PPUSH
13514: LD_VAR 0 1
13518: PPUSH
13519: CALL_OW 12
13523: ARRAY
13524: PPUSH
13525: LD_INT 200
13527: PPUSH
13528: CALL_OW 234
// end ;
13532: PPOPN 1
13534: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13535: LD_EXP 25
13539: PUSH
13540: LD_EXP 54
13544: AND
13545: IFFALSE 13624
13547: GO 13549
13549: DISABLE
13550: LD_INT 0
13552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13553: LD_ADDR_VAR 0 1
13557: PUSH
13558: LD_INT 22
13560: PUSH
13561: LD_OWVAR 2
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 69
13588: ST_TO_ADDR
// if not tmp then
13589: LD_VAR 0 1
13593: NOT
13594: IFFALSE 13598
// exit ;
13596: GO 13624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13598: LD_VAR 0 1
13602: PUSH
13603: LD_INT 1
13605: PPUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 12
13615: ARRAY
13616: PPUSH
13617: LD_INT 60
13619: PPUSH
13620: CALL_OW 234
// end ;
13624: PPOPN 1
13626: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13627: LD_EXP 25
13631: PUSH
13632: LD_EXP 55
13636: AND
13637: IFFALSE 13736
13639: GO 13641
13641: DISABLE
13642: LD_INT 0
13644: PPUSH
13645: PPUSH
// begin enable ;
13646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13647: LD_ADDR_VAR 0 1
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_OWVAR 2
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 61
13666: PUSH
13667: EMPTY
13668: LIST
13669: PUSH
13670: LD_INT 33
13672: PUSH
13673: LD_INT 2
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 1
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13736
// for i in tmp do
13699: LD_ADDR_VAR 0 2
13703: PUSH
13704: LD_VAR 0 1
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13734
// if IsControledBy ( i ) then
13712: LD_VAR 0 2
13716: PPUSH
13717: CALL_OW 312
13721: IFFALSE 13732
// ComUnlink ( i ) ;
13723: LD_VAR 0 2
13727: PPUSH
13728: CALL_OW 136
13732: GO 13709
13734: POP
13735: POP
// end ;
13736: PPOPN 2
13738: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13739: LD_EXP 25
13743: PUSH
13744: LD_EXP 56
13748: AND
13749: IFFALSE 13889
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
13757: PPUSH
// begin ToLua ( displayPowell(); ) ;
13758: LD_STRING displayPowell();
13760: PPUSH
13761: CALL_OW 559
// uc_side := 0 ;
13765: LD_ADDR_OWVAR 20
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// uc_nation := 2 ;
13773: LD_ADDR_OWVAR 21
13777: PUSH
13778: LD_INT 2
13780: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13781: LD_ADDR_OWVAR 37
13785: PUSH
13786: LD_INT 14
13788: ST_TO_ADDR
// vc_engine := engine_siberite ;
13789: LD_ADDR_OWVAR 39
13793: PUSH
13794: LD_INT 3
13796: ST_TO_ADDR
// vc_control := control_apeman ;
13797: LD_ADDR_OWVAR 38
13801: PUSH
13802: LD_INT 5
13804: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13805: LD_ADDR_OWVAR 40
13809: PUSH
13810: LD_INT 29
13812: ST_TO_ADDR
// un := CreateVehicle ;
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: CALL_OW 45
13822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13823: LD_VAR 0 2
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13835: LD_INT 35
13837: PPUSH
13838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13842: LD_VAR 0 2
13846: PPUSH
13847: LD_INT 22
13849: PUSH
13850: LD_OWVAR 2
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PPUSH
13859: CALL_OW 69
13863: PPUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: CALL_OW 74
13873: PPUSH
13874: CALL_OW 115
// until IsDead ( un ) ;
13878: LD_VAR 0 2
13882: PPUSH
13883: CALL_OW 301
13887: IFFALSE 13835
// end ;
13889: PPOPN 2
13891: END
// every 0 0$1 trigger StreamModeActive and sStu do
13892: LD_EXP 25
13896: PUSH
13897: LD_EXP 64
13901: AND
13902: IFFALSE 13918
13904: GO 13906
13906: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13907: LD_STRING displayStucuk();
13909: PPUSH
13910: CALL_OW 559
// ResetFog ;
13914: CALL_OW 335
// end ;
13918: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13919: LD_EXP 25
13923: PUSH
13924: LD_EXP 57
13928: AND
13929: IFFALSE 14070
13931: GO 13933
13933: DISABLE
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_OWVAR 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 21
13957: PUSH
13958: LD_INT 1
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 69
13973: ST_TO_ADDR
// if not tmp then
13974: LD_VAR 0 2
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14070
// un := tmp [ rand ( 1 , tmp ) ] ;
13983: LD_ADDR_VAR 0 1
13987: PUSH
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: PPUSH
13996: LD_VAR 0 2
14000: PPUSH
14001: CALL_OW 12
14005: ARRAY
14006: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 0
14014: PPUSH
14015: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14019: LD_VAR 0 1
14023: PPUSH
14024: LD_OWVAR 3
14028: PUSH
14029: LD_VAR 0 1
14033: DIFF
14034: PPUSH
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 74
14044: PPUSH
14045: CALL_OW 115
// wait ( 0 0$20 ) ;
14049: LD_INT 700
14051: PPUSH
14052: CALL_OW 67
// SetSide ( un , your_side ) ;
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_OWVAR 2
14065: PPUSH
14066: CALL_OW 235
// end ;
14070: PPOPN 2
14072: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14073: LD_EXP 25
14077: PUSH
14078: LD_EXP 58
14082: AND
14083: IFFALSE 14189
14085: GO 14087
14087: DISABLE
14088: LD_INT 0
14090: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14091: LD_ADDR_VAR 0 1
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_OWVAR 2
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 2
14110: PUSH
14111: LD_INT 30
14113: PUSH
14114: LD_INT 0
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: ST_TO_ADDR
// if not depot then
14145: LD_VAR 0 1
14149: NOT
14150: IFFALSE 14154
// exit ;
14152: GO 14189
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14154: LD_VAR 0 1
14158: PUSH
14159: LD_INT 1
14161: ARRAY
14162: PPUSH
14163: CALL_OW 250
14167: PPUSH
14168: LD_VAR 0 1
14172: PUSH
14173: LD_INT 1
14175: ARRAY
14176: PPUSH
14177: CALL_OW 251
14181: PPUSH
14182: LD_INT 70
14184: PPUSH
14185: CALL_OW 495
// end ;
14189: PPOPN 1
14191: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14192: LD_EXP 25
14196: PUSH
14197: LD_EXP 59
14201: AND
14202: IFFALSE 14413
14204: GO 14206
14206: DISABLE
14207: LD_INT 0
14209: PPUSH
14210: PPUSH
14211: PPUSH
14212: PPUSH
14213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14214: LD_ADDR_VAR 0 5
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_OWVAR 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PPUSH
14245: CALL_OW 69
14249: ST_TO_ADDR
// if not tmp then
14250: LD_VAR 0 5
14254: NOT
14255: IFFALSE 14259
// exit ;
14257: GO 14413
// for i in tmp do
14259: LD_ADDR_VAR 0 1
14263: PUSH
14264: LD_VAR 0 5
14268: PUSH
14269: FOR_IN
14270: IFFALSE 14411
// begin d := rand ( 0 , 5 ) ;
14272: LD_ADDR_VAR 0 4
14276: PUSH
14277: LD_INT 0
14279: PPUSH
14280: LD_INT 5
14282: PPUSH
14283: CALL_OW 12
14287: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14288: LD_ADDR_VAR 0 2
14292: PUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 250
14302: PPUSH
14303: LD_VAR 0 4
14307: PPUSH
14308: LD_INT 3
14310: PPUSH
14311: LD_INT 12
14313: PPUSH
14314: CALL_OW 12
14318: PPUSH
14319: CALL_OW 272
14323: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14324: LD_ADDR_VAR 0 3
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 251
14338: PPUSH
14339: LD_VAR 0 4
14343: PPUSH
14344: LD_INT 3
14346: PPUSH
14347: LD_INT 12
14349: PPUSH
14350: CALL_OW 12
14354: PPUSH
14355: CALL_OW 273
14359: ST_TO_ADDR
// if ValidHex ( x , y ) then
14360: LD_VAR 0 2
14364: PPUSH
14365: LD_VAR 0 3
14369: PPUSH
14370: CALL_OW 488
14374: IFFALSE 14409
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14376: LD_VAR 0 1
14380: PPUSH
14381: LD_VAR 0 2
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 3
14393: PPUSH
14394: LD_INT 6
14396: PPUSH
14397: CALL_OW 12
14401: PPUSH
14402: LD_INT 1
14404: PPUSH
14405: CALL_OW 483
// end ;
14409: GO 14269
14411: POP
14412: POP
// end ;
14413: PPOPN 5
14415: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14416: LD_EXP 25
14420: PUSH
14421: LD_EXP 60
14425: AND
14426: IFFALSE 14520
14428: GO 14430
14430: DISABLE
14431: LD_INT 0
14433: PPUSH
14434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14435: LD_ADDR_VAR 0 2
14439: PUSH
14440: LD_INT 22
14442: PUSH
14443: LD_OWVAR 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 32
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 21
14464: PUSH
14465: LD_INT 2
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 69
14481: ST_TO_ADDR
// if not tmp then
14482: LD_VAR 0 2
14486: NOT
14487: IFFALSE 14491
// exit ;
14489: GO 14520
// for i in tmp do
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_VAR 0 2
14500: PUSH
14501: FOR_IN
14502: IFFALSE 14518
// SetFuel ( i , 0 ) ;
14504: LD_VAR 0 1
14508: PPUSH
14509: LD_INT 0
14511: PPUSH
14512: CALL_OW 240
14516: GO 14501
14518: POP
14519: POP
// end ;
14520: PPOPN 2
14522: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14523: LD_EXP 25
14527: PUSH
14528: LD_EXP 61
14532: AND
14533: IFFALSE 14599
14535: GO 14537
14537: DISABLE
14538: LD_INT 0
14540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14541: LD_ADDR_VAR 0 1
14545: PUSH
14546: LD_INT 22
14548: PUSH
14549: LD_OWVAR 2
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 29
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: ST_TO_ADDR
// if not tmp then
14577: LD_VAR 0 1
14581: NOT
14582: IFFALSE 14586
// exit ;
14584: GO 14599
// DestroyUnit ( tmp [ 1 ] ) ;
14586: LD_VAR 0 1
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: CALL_OW 65
// end ;
14599: PPOPN 1
14601: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14602: LD_EXP 25
14606: PUSH
14607: LD_EXP 63
14611: AND
14612: IFFALSE 14741
14614: GO 14616
14616: DISABLE
14617: LD_INT 0
14619: PPUSH
// begin uc_side := 0 ;
14620: LD_ADDR_OWVAR 20
14624: PUSH
14625: LD_INT 0
14627: ST_TO_ADDR
// uc_nation := nation_arabian ;
14628: LD_ADDR_OWVAR 21
14632: PUSH
14633: LD_INT 2
14635: ST_TO_ADDR
// hc_gallery :=  ;
14636: LD_ADDR_OWVAR 33
14640: PUSH
14641: LD_STRING 
14643: ST_TO_ADDR
// hc_name :=  ;
14644: LD_ADDR_OWVAR 26
14648: PUSH
14649: LD_STRING 
14651: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14652: LD_INT 1
14654: PPUSH
14655: LD_INT 11
14657: PPUSH
14658: LD_INT 10
14660: PPUSH
14661: CALL_OW 380
// un := CreateHuman ;
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: CALL_OW 44
14674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14675: LD_VAR 0 1
14679: PPUSH
14680: LD_INT 1
14682: PPUSH
14683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14687: LD_INT 35
14689: PPUSH
14690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14694: LD_VAR 0 1
14698: PPUSH
14699: LD_INT 22
14701: PUSH
14702: LD_OWVAR 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 74
14725: PPUSH
14726: CALL_OW 115
// until IsDead ( un ) ;
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 301
14739: IFFALSE 14687
// end ;
14741: PPOPN 1
14743: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14744: LD_EXP 25
14748: PUSH
14749: LD_EXP 65
14753: AND
14754: IFFALSE 14766
14756: GO 14758
14758: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14759: LD_STRING earthquake(getX(game), 0, 32)
14761: PPUSH
14762: CALL_OW 559
14766: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14767: LD_EXP 25
14771: PUSH
14772: LD_EXP 66
14776: AND
14777: IFFALSE 14868
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
// begin enable ;
14785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14786: LD_ADDR_VAR 0 1
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_OWVAR 2
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 21
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 33
14815: PUSH
14816: LD_INT 3
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 69
14832: ST_TO_ADDR
// if not tmp then
14833: LD_VAR 0 1
14837: NOT
14838: IFFALSE 14842
// exit ;
14840: GO 14868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14842: LD_VAR 0 1
14846: PUSH
14847: LD_INT 1
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 12
14859: ARRAY
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: CALL_OW 234
// end ;
14868: PPOPN 1
14870: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14871: LD_EXP 25
14875: PUSH
14876: LD_EXP 67
14880: AND
14881: IFFALSE 15022
14883: GO 14885
14885: DISABLE
14886: LD_INT 0
14888: PPUSH
14889: PPUSH
14890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14891: LD_ADDR_VAR 0 3
14895: PUSH
14896: LD_INT 22
14898: PUSH
14899: LD_OWVAR 2
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 25
14910: PUSH
14911: LD_INT 1
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL_OW 69
14926: ST_TO_ADDR
// if not tmp then
14927: LD_VAR 0 3
14931: NOT
14932: IFFALSE 14936
// exit ;
14934: GO 15022
// un := tmp [ rand ( 1 , tmp ) ] ;
14936: LD_ADDR_VAR 0 2
14940: PUSH
14941: LD_VAR 0 3
14945: PUSH
14946: LD_INT 1
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: CALL_OW 12
14958: ARRAY
14959: ST_TO_ADDR
// if Crawls ( un ) then
14960: LD_VAR 0 2
14964: PPUSH
14965: CALL_OW 318
14969: IFFALSE 14980
// ComWalk ( un ) ;
14971: LD_VAR 0 2
14975: PPUSH
14976: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14980: LD_VAR 0 2
14984: PPUSH
14985: LD_INT 9
14987: PPUSH
14988: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14992: LD_INT 28
14994: PPUSH
14995: LD_OWVAR 2
14999: PPUSH
15000: LD_INT 2
15002: PPUSH
15003: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15007: LD_INT 29
15009: PPUSH
15010: LD_OWVAR 2
15014: PPUSH
15015: LD_INT 2
15017: PPUSH
15018: CALL_OW 322
// end ;
15022: PPOPN 3
15024: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15025: LD_EXP 25
15029: PUSH
15030: LD_EXP 68
15034: AND
15035: IFFALSE 15146
15037: GO 15039
15039: DISABLE
15040: LD_INT 0
15042: PPUSH
15043: PPUSH
15044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_OWVAR 2
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 25
15064: PUSH
15065: LD_INT 1
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PPUSH
15076: CALL_OW 69
15080: ST_TO_ADDR
// if not tmp then
15081: LD_VAR 0 3
15085: NOT
15086: IFFALSE 15090
// exit ;
15088: GO 15146
// un := tmp [ rand ( 1 , tmp ) ] ;
15090: LD_ADDR_VAR 0 2
15094: PUSH
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 1
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: CALL_OW 12
15112: ARRAY
15113: ST_TO_ADDR
// if Crawls ( un ) then
15114: LD_VAR 0 2
15118: PPUSH
15119: CALL_OW 318
15123: IFFALSE 15134
// ComWalk ( un ) ;
15125: LD_VAR 0 2
15129: PPUSH
15130: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15134: LD_VAR 0 2
15138: PPUSH
15139: LD_INT 8
15141: PPUSH
15142: CALL_OW 336
// end ;
15146: PPOPN 3
15148: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15149: LD_EXP 25
15153: PUSH
15154: LD_EXP 69
15158: AND
15159: IFFALSE 15303
15161: GO 15163
15163: DISABLE
15164: LD_INT 0
15166: PPUSH
15167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_INT 22
15175: PUSH
15176: LD_OWVAR 2
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 21
15187: PUSH
15188: LD_INT 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: LD_INT 34
15200: PUSH
15201: LD_INT 12
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 34
15210: PUSH
15211: LD_INT 51
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 34
15220: PUSH
15221: LD_INT 32
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: PPUSH
15239: CALL_OW 69
15243: ST_TO_ADDR
// if not tmp then
15244: LD_VAR 0 2
15248: NOT
15249: IFFALSE 15253
// exit ;
15251: GO 15303
// for i in tmp do
15253: LD_ADDR_VAR 0 1
15257: PUSH
15258: LD_VAR 0 2
15262: PUSH
15263: FOR_IN
15264: IFFALSE 15301
// if GetCargo ( i , mat_artifact ) = 0 then
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 4
15273: PPUSH
15274: CALL_OW 289
15278: PUSH
15279: LD_INT 0
15281: EQUAL
15282: IFFALSE 15299
// SetCargo ( i , mat_siberit , 100 ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 3
15291: PPUSH
15292: LD_INT 100
15294: PPUSH
15295: CALL_OW 290
15299: GO 15263
15301: POP
15302: POP
// end ;
15303: PPOPN 2
15305: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15306: LD_EXP 25
15310: PUSH
15311: LD_EXP 70
15315: AND
15316: IFFALSE 15499
15318: GO 15320
15320: DISABLE
15321: LD_INT 0
15323: PPUSH
15324: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_INT 22
15332: PUSH
15333: LD_OWVAR 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 69
15346: ST_TO_ADDR
// if not tmp then
15347: LD_VAR 0 2
15351: NOT
15352: IFFALSE 15356
// exit ;
15354: GO 15499
// for i := 1 to 2 do
15356: LD_ADDR_VAR 0 1
15360: PUSH
15361: DOUBLE
15362: LD_INT 1
15364: DEC
15365: ST_TO_ADDR
15366: LD_INT 2
15368: PUSH
15369: FOR_TO
15370: IFFALSE 15497
// begin uc_side := your_side ;
15372: LD_ADDR_OWVAR 20
15376: PUSH
15377: LD_OWVAR 2
15381: ST_TO_ADDR
// uc_nation := nation_american ;
15382: LD_ADDR_OWVAR 21
15386: PUSH
15387: LD_INT 1
15389: ST_TO_ADDR
// vc_chassis := us_morphling ;
15390: LD_ADDR_OWVAR 37
15394: PUSH
15395: LD_INT 5
15397: ST_TO_ADDR
// vc_engine := engine_siberite ;
15398: LD_ADDR_OWVAR 39
15402: PUSH
15403: LD_INT 3
15405: ST_TO_ADDR
// vc_control := control_computer ;
15406: LD_ADDR_OWVAR 38
15410: PUSH
15411: LD_INT 3
15413: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15414: LD_ADDR_OWVAR 40
15418: PUSH
15419: LD_INT 10
15421: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15422: LD_VAR 0 2
15426: PUSH
15427: LD_INT 1
15429: ARRAY
15430: PPUSH
15431: CALL_OW 310
15435: NOT
15436: IFFALSE 15483
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15438: CALL_OW 45
15442: PPUSH
15443: LD_VAR 0 2
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: PPUSH
15452: CALL_OW 250
15456: PPUSH
15457: LD_VAR 0 2
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: CALL_OW 251
15470: PPUSH
15471: LD_INT 12
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 50
15481: GO 15495
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15483: CALL_OW 45
15487: PPUSH
15488: LD_INT 1
15490: PPUSH
15491: CALL_OW 51
// end ;
15495: GO 15369
15497: POP
15498: POP
// end ;
15499: PPOPN 2
15501: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15502: LD_EXP 25
15506: PUSH
15507: LD_EXP 71
15511: AND
15512: IFFALSE 15734
15514: GO 15516
15516: DISABLE
15517: LD_INT 0
15519: PPUSH
15520: PPUSH
15521: PPUSH
15522: PPUSH
15523: PPUSH
15524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15525: LD_ADDR_VAR 0 6
15529: PUSH
15530: LD_INT 22
15532: PUSH
15533: LD_OWVAR 2
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 3
15554: PUSH
15555: LD_INT 23
15557: PUSH
15558: LD_INT 0
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: PPUSH
15574: CALL_OW 69
15578: ST_TO_ADDR
// if not tmp then
15579: LD_VAR 0 6
15583: NOT
15584: IFFALSE 15588
// exit ;
15586: GO 15734
// s1 := rand ( 1 , 4 ) ;
15588: LD_ADDR_VAR 0 2
15592: PUSH
15593: LD_INT 1
15595: PPUSH
15596: LD_INT 4
15598: PPUSH
15599: CALL_OW 12
15603: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15604: LD_ADDR_VAR 0 4
15608: PUSH
15609: LD_VAR 0 6
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 259
15627: ST_TO_ADDR
// if s1 = 1 then
15628: LD_VAR 0 2
15632: PUSH
15633: LD_INT 1
15635: EQUAL
15636: IFFALSE 15656
// s2 := rand ( 2 , 4 ) else
15638: LD_ADDR_VAR 0 3
15642: PUSH
15643: LD_INT 2
15645: PPUSH
15646: LD_INT 4
15648: PPUSH
15649: CALL_OW 12
15653: ST_TO_ADDR
15654: GO 15664
// s2 := 1 ;
15656: LD_ADDR_VAR 0 3
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15664: LD_ADDR_VAR 0 5
15668: PUSH
15669: LD_VAR 0 6
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: CALL_OW 259
15687: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15688: LD_VAR 0 6
15692: PUSH
15693: LD_INT 1
15695: ARRAY
15696: PPUSH
15697: LD_VAR 0 2
15701: PPUSH
15702: LD_VAR 0 5
15706: PPUSH
15707: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15711: LD_VAR 0 6
15715: PUSH
15716: LD_INT 1
15718: ARRAY
15719: PPUSH
15720: LD_VAR 0 3
15724: PPUSH
15725: LD_VAR 0 4
15729: PPUSH
15730: CALL_OW 237
// end ;
15734: PPOPN 6
15736: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15737: LD_EXP 25
15741: PUSH
15742: LD_EXP 72
15746: AND
15747: IFFALSE 15826
15749: GO 15751
15751: DISABLE
15752: LD_INT 0
15754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15755: LD_ADDR_VAR 0 1
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_OWVAR 2
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 30
15774: PUSH
15775: LD_INT 3
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PPUSH
15786: CALL_OW 69
15790: ST_TO_ADDR
// if not tmp then
15791: LD_VAR 0 1
15795: NOT
15796: IFFALSE 15800
// exit ;
15798: GO 15826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15800: LD_VAR 0 1
15804: PUSH
15805: LD_INT 1
15807: PPUSH
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL_OW 12
15817: ARRAY
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 234
// end ;
15826: PPOPN 1
15828: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15829: LD_EXP 25
15833: PUSH
15834: LD_EXP 73
15838: AND
15839: IFFALSE 15951
15841: GO 15843
15843: DISABLE
15844: LD_INT 0
15846: PPUSH
15847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_INT 22
15855: PUSH
15856: LD_OWVAR 2
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 2
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 27
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 30
15880: PUSH
15881: LD_INT 26
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_INT 28
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: ST_TO_ADDR
// if not tmp then
15913: LD_VAR 0 2
15917: NOT
15918: IFFALSE 15922
// exit ;
15920: GO 15951
// for i in tmp do
15922: LD_ADDR_VAR 0 1
15926: PUSH
15927: LD_VAR 0 2
15931: PUSH
15932: FOR_IN
15933: IFFALSE 15949
// SetLives ( i , 1 ) ;
15935: LD_VAR 0 1
15939: PPUSH
15940: LD_INT 1
15942: PPUSH
15943: CALL_OW 234
15947: GO 15932
15949: POP
15950: POP
// end ;
15951: PPOPN 2
15953: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15954: LD_EXP 25
15958: PUSH
15959: LD_EXP 74
15963: AND
15964: IFFALSE 16251
15966: GO 15968
15968: DISABLE
15969: LD_INT 0
15971: PPUSH
15972: PPUSH
15973: PPUSH
// begin i := rand ( 1 , 7 ) ;
15974: LD_ADDR_VAR 0 1
15978: PUSH
15979: LD_INT 1
15981: PPUSH
15982: LD_INT 7
15984: PPUSH
15985: CALL_OW 12
15989: ST_TO_ADDR
// case i of 1 :
15990: LD_VAR 0 1
15994: PUSH
15995: LD_INT 1
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16013
16003: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16004: LD_STRING earthquake(getX(game), 0, 32)
16006: PPUSH
16007: CALL_OW 559
16011: GO 16251
16013: LD_INT 2
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16035
16021: POP
// begin ToLua ( displayStucuk(); ) ;
16022: LD_STRING displayStucuk();
16024: PPUSH
16025: CALL_OW 559
// ResetFog ;
16029: CALL_OW 335
// end ; 3 :
16033: GO 16251
16035: LD_INT 3
16037: DOUBLE
16038: EQUAL
16039: IFTRUE 16043
16041: GO 16147
16043: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_INT 22
16051: PUSH
16052: LD_OWVAR 2
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 25
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PPUSH
16075: CALL_OW 69
16079: ST_TO_ADDR
// if not tmp then
16080: LD_VAR 0 2
16084: NOT
16085: IFFALSE 16089
// exit ;
16087: GO 16251
// un := tmp [ rand ( 1 , tmp ) ] ;
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_VAR 0 2
16098: PUSH
16099: LD_INT 1
16101: PPUSH
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 12
16111: ARRAY
16112: ST_TO_ADDR
// if Crawls ( un ) then
16113: LD_VAR 0 3
16117: PPUSH
16118: CALL_OW 318
16122: IFFALSE 16133
// ComWalk ( un ) ;
16124: LD_VAR 0 3
16128: PPUSH
16129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16133: LD_VAR 0 3
16137: PPUSH
16138: LD_INT 8
16140: PPUSH
16141: CALL_OW 336
// end ; 4 :
16145: GO 16251
16147: LD_INT 4
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16229
16155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16156: LD_ADDR_VAR 0 2
16160: PUSH
16161: LD_INT 22
16163: PUSH
16164: LD_OWVAR 2
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 30
16175: PUSH
16176: LD_INT 29
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PPUSH
16187: CALL_OW 69
16191: ST_TO_ADDR
// if not tmp then
16192: LD_VAR 0 2
16196: NOT
16197: IFFALSE 16201
// exit ;
16199: GO 16251
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16201: LD_VAR 0 2
16205: PUSH
16206: LD_INT 1
16208: ARRAY
16209: PPUSH
16210: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16214: LD_VAR 0 2
16218: PUSH
16219: LD_INT 1
16221: ARRAY
16222: PPUSH
16223: CALL_OW 65
// end ; 5 .. 7 :
16227: GO 16251
16229: LD_INT 5
16231: DOUBLE
16232: GREATEREQUAL
16233: IFFALSE 16241
16235: LD_INT 7
16237: DOUBLE
16238: LESSEQUAL
16239: IFTRUE 16243
16241: GO 16250
16243: POP
// StreamSibBomb ; end ;
16244: CALL 12488 0 0
16248: GO 16251
16250: POP
// end ;
16251: PPOPN 3
16253: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16254: LD_EXP 25
16258: PUSH
16259: LD_EXP 75
16263: AND
16264: IFFALSE 16420
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
16273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16274: LD_ADDR_VAR 0 2
16278: PUSH
16279: LD_INT 81
16281: PUSH
16282: LD_OWVAR 2
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: LD_INT 21
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 21
16306: PUSH
16307: LD_INT 2
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: ST_TO_ADDR
// if not tmp then
16328: LD_VAR 0 2
16332: NOT
16333: IFFALSE 16337
// exit ;
16335: GO 16420
// p := 0 ;
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16345: LD_INT 35
16347: PPUSH
16348: CALL_OW 67
// p := p + 1 ;
16352: LD_ADDR_VAR 0 3
16356: PUSH
16357: LD_VAR 0 3
16361: PUSH
16362: LD_INT 1
16364: PLUS
16365: ST_TO_ADDR
// for i in tmp do
16366: LD_ADDR_VAR 0 1
16370: PUSH
16371: LD_VAR 0 2
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16408
// if GetLives ( i ) < 1000 then
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 256
16388: PUSH
16389: LD_INT 1000
16391: LESS
16392: IFFALSE 16406
// SetLives ( i , 1000 ) ;
16394: LD_VAR 0 1
16398: PPUSH
16399: LD_INT 1000
16401: PPUSH
16402: CALL_OW 234
16406: GO 16376
16408: POP
16409: POP
// until p > 20 ;
16410: LD_VAR 0 3
16414: PUSH
16415: LD_INT 20
16417: GREATER
16418: IFFALSE 16345
// end ;
16420: PPOPN 3
16422: END
// every 0 0$1 trigger StreamModeActive and sTime do
16423: LD_EXP 25
16427: PUSH
16428: LD_EXP 76
16432: AND
16433: IFFALSE 16468
16435: GO 16437
16437: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16438: LD_INT 28
16440: PPUSH
16441: LD_OWVAR 2
16445: PPUSH
16446: LD_INT 2
16448: PPUSH
16449: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16453: LD_INT 30
16455: PPUSH
16456: LD_OWVAR 2
16460: PPUSH
16461: LD_INT 2
16463: PPUSH
16464: CALL_OW 322
// end ;
16468: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16469: LD_EXP 25
16473: PUSH
16474: LD_EXP 77
16478: AND
16479: IFFALSE 16600
16481: GO 16483
16483: DISABLE
16484: LD_INT 0
16486: PPUSH
16487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16488: LD_ADDR_VAR 0 2
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_OWVAR 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 21
16507: PUSH
16508: LD_INT 1
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 3
16517: PUSH
16518: LD_INT 23
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if not tmp then
16542: LD_VAR 0 2
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16600
// for i in tmp do
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: LD_VAR 0 2
16560: PUSH
16561: FOR_IN
16562: IFFALSE 16598
// begin if Crawls ( i ) then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 318
16573: IFFALSE 16584
// ComWalk ( i ) ;
16575: LD_VAR 0 1
16579: PPUSH
16580: CALL_OW 138
// SetClass ( i , 2 ) ;
16584: LD_VAR 0 1
16588: PPUSH
16589: LD_INT 2
16591: PPUSH
16592: CALL_OW 336
// end ;
16596: GO 16561
16598: POP
16599: POP
// end ;
16600: PPOPN 2
16602: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16603: LD_EXP 25
16607: PUSH
16608: LD_EXP 78
16612: AND
16613: IFFALSE 16901
16615: GO 16617
16617: DISABLE
16618: LD_INT 0
16620: PPUSH
16621: PPUSH
16622: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16623: LD_OWVAR 2
16627: PPUSH
16628: LD_INT 9
16630: PPUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16641: LD_INT 9
16643: PPUSH
16644: LD_OWVAR 2
16648: PPUSH
16649: CALL_OW 343
// uc_side := 9 ;
16653: LD_ADDR_OWVAR 20
16657: PUSH
16658: LD_INT 9
16660: ST_TO_ADDR
// uc_nation := 2 ;
16661: LD_ADDR_OWVAR 21
16665: PUSH
16666: LD_INT 2
16668: ST_TO_ADDR
// hc_name := Dark Warrior ;
16669: LD_ADDR_OWVAR 26
16673: PUSH
16674: LD_STRING Dark Warrior
16676: ST_TO_ADDR
// hc_gallery :=  ;
16677: LD_ADDR_OWVAR 33
16681: PUSH
16682: LD_STRING 
16684: ST_TO_ADDR
// hc_noskilllimit := true ;
16685: LD_ADDR_OWVAR 76
16689: PUSH
16690: LD_INT 1
16692: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16693: LD_ADDR_OWVAR 31
16697: PUSH
16698: LD_INT 30
16700: PUSH
16701: LD_INT 30
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: LD_INT 30
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: ST_TO_ADDR
// un := CreateHuman ;
16716: LD_ADDR_VAR 0 3
16720: PUSH
16721: CALL_OW 44
16725: ST_TO_ADDR
// hc_noskilllimit := false ;
16726: LD_ADDR_OWVAR 76
16730: PUSH
16731: LD_INT 0
16733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16734: LD_VAR 0 3
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL_OW 51
// ToLua ( playRanger() ) ;
16746: LD_STRING playRanger()
16748: PPUSH
16749: CALL_OW 559
// p := 0 ;
16753: LD_ADDR_VAR 0 2
16757: PUSH
16758: LD_INT 0
16760: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16761: LD_INT 35
16763: PPUSH
16764: CALL_OW 67
// p := p + 1 ;
16768: LD_ADDR_VAR 0 2
16772: PUSH
16773: LD_VAR 0 2
16777: PUSH
16778: LD_INT 1
16780: PLUS
16781: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16782: LD_VAR 0 3
16786: PPUSH
16787: CALL_OW 256
16791: PUSH
16792: LD_INT 1000
16794: LESS
16795: IFFALSE 16809
// SetLives ( un , 1000 ) ;
16797: LD_VAR 0 3
16801: PPUSH
16802: LD_INT 1000
16804: PPUSH
16805: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_INT 81
16816: PUSH
16817: LD_OWVAR 2
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 91
16828: PUSH
16829: LD_VAR 0 3
16833: PUSH
16834: LD_INT 30
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: PPUSH
16851: LD_VAR 0 3
16855: PPUSH
16856: CALL_OW 74
16860: PPUSH
16861: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16865: LD_VAR 0 2
16869: PUSH
16870: LD_INT 80
16872: GREATER
16873: PUSH
16874: LD_VAR 0 3
16878: PPUSH
16879: CALL_OW 301
16883: OR
16884: IFFALSE 16761
// if un then
16886: LD_VAR 0 3
16890: IFFALSE 16901
// RemoveUnit ( un ) ;
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 64
// end ;
16901: PPOPN 3
16903: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16904: LD_EXP 79
16908: IFFALSE 17024
16910: GO 16912
16912: DISABLE
16913: LD_INT 0
16915: PPUSH
16916: PPUSH
16917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16918: LD_ADDR_VAR 0 2
16922: PUSH
16923: LD_INT 81
16925: PUSH
16926: LD_OWVAR 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 21
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16954: LD_STRING playComputer()
16956: PPUSH
16957: CALL_OW 559
// if not tmp then
16961: LD_VAR 0 2
16965: NOT
16966: IFFALSE 16970
// exit ;
16968: GO 17024
// for i in tmp do
16970: LD_ADDR_VAR 0 1
16974: PUSH
16975: LD_VAR 0 2
16979: PUSH
16980: FOR_IN
16981: IFFALSE 17022
// for j := 1 to 4 do
16983: LD_ADDR_VAR 0 3
16987: PUSH
16988: DOUBLE
16989: LD_INT 1
16991: DEC
16992: ST_TO_ADDR
16993: LD_INT 4
16995: PUSH
16996: FOR_TO
16997: IFFALSE 17018
// SetSkill ( i , j , 10 ) ;
16999: LD_VAR 0 1
17003: PPUSH
17004: LD_VAR 0 3
17008: PPUSH
17009: LD_INT 10
17011: PPUSH
17012: CALL_OW 237
17016: GO 16996
17018: POP
17019: POP
17020: GO 16980
17022: POP
17023: POP
// end ;
17024: PPOPN 3
17026: END
// every 0 0$1 trigger s30 do var i , tmp ;
17027: LD_EXP 80
17031: IFFALSE 17100
17033: GO 17035
17035: DISABLE
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 22
17047: PUSH
17048: LD_OWVAR 2
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PPUSH
17057: CALL_OW 69
17061: ST_TO_ADDR
// if not tmp then
17062: LD_VAR 0 2
17066: NOT
17067: IFFALSE 17071
// exit ;
17069: GO 17100
// for i in tmp do
17071: LD_ADDR_VAR 0 1
17075: PUSH
17076: LD_VAR 0 2
17080: PUSH
17081: FOR_IN
17082: IFFALSE 17098
// SetLives ( i , 300 ) ;
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 300
17091: PPUSH
17092: CALL_OW 234
17096: GO 17081
17098: POP
17099: POP
// end ;
17100: PPOPN 2
17102: END
// every 0 0$1 trigger s60 do var i , tmp ;
17103: LD_EXP 81
17107: IFFALSE 17176
17109: GO 17111
17111: DISABLE
17112: LD_INT 0
17114: PPUSH
17115: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17116: LD_ADDR_VAR 0 2
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_OWVAR 2
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PPUSH
17133: CALL_OW 69
17137: ST_TO_ADDR
// if not tmp then
17138: LD_VAR 0 2
17142: NOT
17143: IFFALSE 17147
// exit ;
17145: GO 17176
// for i in tmp do
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_VAR 0 2
17156: PUSH
17157: FOR_IN
17158: IFFALSE 17174
// SetLives ( i , 600 ) ;
17160: LD_VAR 0 1
17164: PPUSH
17165: LD_INT 600
17167: PPUSH
17168: CALL_OW 234
17172: GO 17157
17174: POP
17175: POP
// end ;
17176: PPOPN 2
17178: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17179: LD_INT 0
17181: PPUSH
// case cmd of 301 :
17182: LD_VAR 0 1
17186: PUSH
17187: LD_INT 301
17189: DOUBLE
17190: EQUAL
17191: IFTRUE 17195
17193: GO 17227
17195: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17196: LD_VAR 0 6
17200: PPUSH
17201: LD_VAR 0 7
17205: PPUSH
17206: LD_VAR 0 8
17210: PPUSH
17211: LD_VAR 0 4
17215: PPUSH
17216: LD_VAR 0 5
17220: PPUSH
17221: CALL 18428 0 5
17225: GO 17348
17227: LD_INT 302
17229: DOUBLE
17230: EQUAL
17231: IFTRUE 17235
17233: GO 17272
17235: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17236: LD_VAR 0 6
17240: PPUSH
17241: LD_VAR 0 7
17245: PPUSH
17246: LD_VAR 0 8
17250: PPUSH
17251: LD_VAR 0 9
17255: PPUSH
17256: LD_VAR 0 4
17260: PPUSH
17261: LD_VAR 0 5
17265: PPUSH
17266: CALL 18519 0 6
17270: GO 17348
17272: LD_INT 303
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17317
17280: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17281: LD_VAR 0 6
17285: PPUSH
17286: LD_VAR 0 7
17290: PPUSH
17291: LD_VAR 0 8
17295: PPUSH
17296: LD_VAR 0 9
17300: PPUSH
17301: LD_VAR 0 4
17305: PPUSH
17306: LD_VAR 0 5
17310: PPUSH
17311: CALL 17353 0 6
17315: GO 17348
17317: LD_INT 304
17319: DOUBLE
17320: EQUAL
17321: IFTRUE 17325
17323: GO 17347
17325: POP
// hHackTeleport ( unit , x , y ) ; end ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_VAR 0 4
17335: PPUSH
17336: LD_VAR 0 5
17340: PPUSH
17341: CALL 19112 0 3
17345: GO 17348
17347: POP
// end ;
17348: LD_VAR 0 12
17352: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17353: LD_INT 0
17355: PPUSH
17356: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17357: LD_VAR 0 1
17361: PUSH
17362: LD_INT 1
17364: LESS
17365: PUSH
17366: LD_VAR 0 1
17370: PUSH
17371: LD_INT 3
17373: GREATER
17374: OR
17375: PUSH
17376: LD_VAR 0 5
17380: PPUSH
17381: LD_VAR 0 6
17385: PPUSH
17386: CALL_OW 428
17390: OR
17391: IFFALSE 17395
// exit ;
17393: GO 18115
// uc_side := your_side ;
17395: LD_ADDR_OWVAR 20
17399: PUSH
17400: LD_OWVAR 2
17404: ST_TO_ADDR
// uc_nation := nation ;
17405: LD_ADDR_OWVAR 21
17409: PUSH
17410: LD_VAR 0 1
17414: ST_TO_ADDR
// bc_level = 1 ;
17415: LD_ADDR_OWVAR 43
17419: PUSH
17420: LD_INT 1
17422: ST_TO_ADDR
// case btype of 1 :
17423: LD_VAR 0 2
17427: PUSH
17428: LD_INT 1
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17447
17436: POP
// bc_type := b_depot ; 2 :
17437: LD_ADDR_OWVAR 42
17441: PUSH
17442: LD_INT 0
17444: ST_TO_ADDR
17445: GO 18059
17447: LD_INT 2
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17466
17455: POP
// bc_type := b_warehouse ; 3 :
17456: LD_ADDR_OWVAR 42
17460: PUSH
17461: LD_INT 1
17463: ST_TO_ADDR
17464: GO 18059
17466: LD_INT 3
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17485
17474: POP
// bc_type := b_lab ; 4 .. 9 :
17475: LD_ADDR_OWVAR 42
17479: PUSH
17480: LD_INT 6
17482: ST_TO_ADDR
17483: GO 18059
17485: LD_INT 4
17487: DOUBLE
17488: GREATEREQUAL
17489: IFFALSE 17497
17491: LD_INT 9
17493: DOUBLE
17494: LESSEQUAL
17495: IFTRUE 17499
17497: GO 17551
17499: POP
// begin bc_type := b_lab_half ;
17500: LD_ADDR_OWVAR 42
17504: PUSH
17505: LD_INT 7
17507: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17508: LD_ADDR_OWVAR 44
17512: PUSH
17513: LD_INT 10
17515: PUSH
17516: LD_INT 11
17518: PUSH
17519: LD_INT 12
17521: PUSH
17522: LD_INT 15
17524: PUSH
17525: LD_INT 14
17527: PUSH
17528: LD_INT 13
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: PUSH
17539: LD_VAR 0 2
17543: PUSH
17544: LD_INT 3
17546: MINUS
17547: ARRAY
17548: ST_TO_ADDR
// end ; 10 .. 13 :
17549: GO 18059
17551: LD_INT 10
17553: DOUBLE
17554: GREATEREQUAL
17555: IFFALSE 17563
17557: LD_INT 13
17559: DOUBLE
17560: LESSEQUAL
17561: IFTRUE 17565
17563: GO 17642
17565: POP
// begin bc_type := b_lab_full ;
17566: LD_ADDR_OWVAR 42
17570: PUSH
17571: LD_INT 8
17573: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17574: LD_ADDR_OWVAR 44
17578: PUSH
17579: LD_INT 10
17581: PUSH
17582: LD_INT 12
17584: PUSH
17585: LD_INT 14
17587: PUSH
17588: LD_INT 13
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: LD_VAR 0 2
17601: PUSH
17602: LD_INT 9
17604: MINUS
17605: ARRAY
17606: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17607: LD_ADDR_OWVAR 45
17611: PUSH
17612: LD_INT 11
17614: PUSH
17615: LD_INT 15
17617: PUSH
17618: LD_INT 12
17620: PUSH
17621: LD_INT 15
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: LD_VAR 0 2
17634: PUSH
17635: LD_INT 9
17637: MINUS
17638: ARRAY
17639: ST_TO_ADDR
// end ; 14 :
17640: GO 18059
17642: LD_INT 14
17644: DOUBLE
17645: EQUAL
17646: IFTRUE 17650
17648: GO 17661
17650: POP
// bc_type := b_workshop ; 15 :
17651: LD_ADDR_OWVAR 42
17655: PUSH
17656: LD_INT 2
17658: ST_TO_ADDR
17659: GO 18059
17661: LD_INT 15
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17680
17669: POP
// bc_type := b_factory ; 16 :
17670: LD_ADDR_OWVAR 42
17674: PUSH
17675: LD_INT 3
17677: ST_TO_ADDR
17678: GO 18059
17680: LD_INT 16
17682: DOUBLE
17683: EQUAL
17684: IFTRUE 17688
17686: GO 17699
17688: POP
// bc_type := b_ext_gun ; 17 :
17689: LD_ADDR_OWVAR 42
17693: PUSH
17694: LD_INT 17
17696: ST_TO_ADDR
17697: GO 18059
17699: LD_INT 17
17701: DOUBLE
17702: EQUAL
17703: IFTRUE 17707
17705: GO 17735
17707: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17708: LD_ADDR_OWVAR 42
17712: PUSH
17713: LD_INT 19
17715: PUSH
17716: LD_INT 23
17718: PUSH
17719: LD_INT 19
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_VAR 0 1
17731: ARRAY
17732: ST_TO_ADDR
17733: GO 18059
17735: LD_INT 18
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17754
17743: POP
// bc_type := b_ext_radar ; 19 :
17744: LD_ADDR_OWVAR 42
17748: PUSH
17749: LD_INT 20
17751: ST_TO_ADDR
17752: GO 18059
17754: LD_INT 19
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17773
17762: POP
// bc_type := b_ext_radio ; 20 :
17763: LD_ADDR_OWVAR 42
17767: PUSH
17768: LD_INT 22
17770: ST_TO_ADDR
17771: GO 18059
17773: LD_INT 20
17775: DOUBLE
17776: EQUAL
17777: IFTRUE 17781
17779: GO 17792
17781: POP
// bc_type := b_ext_siberium ; 21 :
17782: LD_ADDR_OWVAR 42
17786: PUSH
17787: LD_INT 21
17789: ST_TO_ADDR
17790: GO 18059
17792: LD_INT 21
17794: DOUBLE
17795: EQUAL
17796: IFTRUE 17800
17798: GO 17811
17800: POP
// bc_type := b_ext_computer ; 22 :
17801: LD_ADDR_OWVAR 42
17805: PUSH
17806: LD_INT 24
17808: ST_TO_ADDR
17809: GO 18059
17811: LD_INT 22
17813: DOUBLE
17814: EQUAL
17815: IFTRUE 17819
17817: GO 17830
17819: POP
// bc_type := b_ext_track ; 23 :
17820: LD_ADDR_OWVAR 42
17824: PUSH
17825: LD_INT 16
17827: ST_TO_ADDR
17828: GO 18059
17830: LD_INT 23
17832: DOUBLE
17833: EQUAL
17834: IFTRUE 17838
17836: GO 17849
17838: POP
// bc_type := b_ext_laser ; 24 :
17839: LD_ADDR_OWVAR 42
17843: PUSH
17844: LD_INT 25
17846: ST_TO_ADDR
17847: GO 18059
17849: LD_INT 24
17851: DOUBLE
17852: EQUAL
17853: IFTRUE 17857
17855: GO 17868
17857: POP
// bc_type := b_control_tower ; 25 :
17858: LD_ADDR_OWVAR 42
17862: PUSH
17863: LD_INT 36
17865: ST_TO_ADDR
17866: GO 18059
17868: LD_INT 25
17870: DOUBLE
17871: EQUAL
17872: IFTRUE 17876
17874: GO 17887
17876: POP
// bc_type := b_breastwork ; 26 :
17877: LD_ADDR_OWVAR 42
17881: PUSH
17882: LD_INT 31
17884: ST_TO_ADDR
17885: GO 18059
17887: LD_INT 26
17889: DOUBLE
17890: EQUAL
17891: IFTRUE 17895
17893: GO 17906
17895: POP
// bc_type := b_bunker ; 27 :
17896: LD_ADDR_OWVAR 42
17900: PUSH
17901: LD_INT 32
17903: ST_TO_ADDR
17904: GO 18059
17906: LD_INT 27
17908: DOUBLE
17909: EQUAL
17910: IFTRUE 17914
17912: GO 17925
17914: POP
// bc_type := b_turret ; 28 :
17915: LD_ADDR_OWVAR 42
17919: PUSH
17920: LD_INT 33
17922: ST_TO_ADDR
17923: GO 18059
17925: LD_INT 28
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 17944
17933: POP
// bc_type := b_armoury ; 29 :
17934: LD_ADDR_OWVAR 42
17938: PUSH
17939: LD_INT 4
17941: ST_TO_ADDR
17942: GO 18059
17944: LD_INT 29
17946: DOUBLE
17947: EQUAL
17948: IFTRUE 17952
17950: GO 17963
17952: POP
// bc_type := b_barracks ; 30 :
17953: LD_ADDR_OWVAR 42
17957: PUSH
17958: LD_INT 5
17960: ST_TO_ADDR
17961: GO 18059
17963: LD_INT 30
17965: DOUBLE
17966: EQUAL
17967: IFTRUE 17971
17969: GO 17982
17971: POP
// bc_type := b_solar_power ; 31 :
17972: LD_ADDR_OWVAR 42
17976: PUSH
17977: LD_INT 27
17979: ST_TO_ADDR
17980: GO 18059
17982: LD_INT 31
17984: DOUBLE
17985: EQUAL
17986: IFTRUE 17990
17988: GO 18001
17990: POP
// bc_type := b_oil_power ; 32 :
17991: LD_ADDR_OWVAR 42
17995: PUSH
17996: LD_INT 26
17998: ST_TO_ADDR
17999: GO 18059
18001: LD_INT 32
18003: DOUBLE
18004: EQUAL
18005: IFTRUE 18009
18007: GO 18020
18009: POP
// bc_type := b_siberite_power ; 33 :
18010: LD_ADDR_OWVAR 42
18014: PUSH
18015: LD_INT 28
18017: ST_TO_ADDR
18018: GO 18059
18020: LD_INT 33
18022: DOUBLE
18023: EQUAL
18024: IFTRUE 18028
18026: GO 18039
18028: POP
// bc_type := b_oil_mine ; 34 :
18029: LD_ADDR_OWVAR 42
18033: PUSH
18034: LD_INT 29
18036: ST_TO_ADDR
18037: GO 18059
18039: LD_INT 34
18041: DOUBLE
18042: EQUAL
18043: IFTRUE 18047
18045: GO 18058
18047: POP
// bc_type := b_siberite_mine ; end ;
18048: LD_ADDR_OWVAR 42
18052: PUSH
18053: LD_INT 30
18055: ST_TO_ADDR
18056: GO 18059
18058: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18059: LD_ADDR_VAR 0 8
18063: PUSH
18064: LD_VAR 0 5
18068: PPUSH
18069: LD_VAR 0 6
18073: PPUSH
18074: LD_VAR 0 3
18078: PPUSH
18079: CALL_OW 47
18083: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18084: LD_OWVAR 42
18088: PUSH
18089: LD_INT 32
18091: PUSH
18092: LD_INT 33
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: IN
18099: IFFALSE 18115
// PlaceWeaponTurret ( b , weapon ) ;
18101: LD_VAR 0 8
18105: PPUSH
18106: LD_VAR 0 4
18110: PPUSH
18111: CALL_OW 431
// end ;
18115: LD_VAR 0 7
18119: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18120: LD_INT 0
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18126: LD_ADDR_VAR 0 4
18130: PUSH
18131: LD_INT 22
18133: PUSH
18134: LD_OWVAR 2
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: LD_INT 30
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 30
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 69
18179: ST_TO_ADDR
// if not tmp then
18180: LD_VAR 0 4
18184: NOT
18185: IFFALSE 18189
// exit ;
18187: GO 18248
// for i in tmp do
18189: LD_ADDR_VAR 0 2
18193: PUSH
18194: LD_VAR 0 4
18198: PUSH
18199: FOR_IN
18200: IFFALSE 18246
// for j = 1 to 3 do
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: DOUBLE
18208: LD_INT 1
18210: DEC
18211: ST_TO_ADDR
18212: LD_INT 3
18214: PUSH
18215: FOR_TO
18216: IFFALSE 18242
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 274
18227: PPUSH
18228: LD_VAR 0 3
18232: PPUSH
18233: LD_INT 99999
18235: PPUSH
18236: CALL_OW 277
18240: GO 18215
18242: POP
18243: POP
18244: GO 18199
18246: POP
18247: POP
// end ;
18248: LD_VAR 0 1
18252: RET
// export function hHackSetLevel10 ; var i , j ; begin
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
18257: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18258: LD_ADDR_VAR 0 2
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 69
18277: PUSH
18278: FOR_IN
18279: IFFALSE 18331
// if IsSelected ( i ) then
18281: LD_VAR 0 2
18285: PPUSH
18286: CALL_OW 306
18290: IFFALSE 18329
// begin for j := 1 to 4 do
18292: LD_ADDR_VAR 0 3
18296: PUSH
18297: DOUBLE
18298: LD_INT 1
18300: DEC
18301: ST_TO_ADDR
18302: LD_INT 4
18304: PUSH
18305: FOR_TO
18306: IFFALSE 18327
// SetSkill ( i , j , 10 ) ;
18308: LD_VAR 0 2
18312: PPUSH
18313: LD_VAR 0 3
18317: PPUSH
18318: LD_INT 10
18320: PPUSH
18321: CALL_OW 237
18325: GO 18305
18327: POP
18328: POP
// end ;
18329: GO 18278
18331: POP
18332: POP
// end ;
18333: LD_VAR 0 1
18337: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18338: LD_INT 0
18340: PPUSH
18341: PPUSH
18342: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18343: LD_ADDR_VAR 0 2
18347: PUSH
18348: LD_INT 22
18350: PUSH
18351: LD_OWVAR 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 21
18362: PUSH
18363: LD_INT 1
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PPUSH
18374: CALL_OW 69
18378: PUSH
18379: FOR_IN
18380: IFFALSE 18421
// begin for j := 1 to 4 do
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: DOUBLE
18388: LD_INT 1
18390: DEC
18391: ST_TO_ADDR
18392: LD_INT 4
18394: PUSH
18395: FOR_TO
18396: IFFALSE 18417
// SetSkill ( i , j , 10 ) ;
18398: LD_VAR 0 2
18402: PPUSH
18403: LD_VAR 0 3
18407: PPUSH
18408: LD_INT 10
18410: PPUSH
18411: CALL_OW 237
18415: GO 18395
18417: POP
18418: POP
// end ;
18419: GO 18379
18421: POP
18422: POP
// end ;
18423: LD_VAR 0 1
18427: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18428: LD_INT 0
18430: PPUSH
// uc_side := your_side ;
18431: LD_ADDR_OWVAR 20
18435: PUSH
18436: LD_OWVAR 2
18440: ST_TO_ADDR
// uc_nation := nation ;
18441: LD_ADDR_OWVAR 21
18445: PUSH
18446: LD_VAR 0 1
18450: ST_TO_ADDR
// InitHc ;
18451: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18455: LD_INT 0
18457: PPUSH
18458: LD_VAR 0 2
18462: PPUSH
18463: LD_VAR 0 3
18467: PPUSH
18468: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18472: LD_VAR 0 4
18476: PPUSH
18477: LD_VAR 0 5
18481: PPUSH
18482: CALL_OW 428
18486: PUSH
18487: LD_INT 0
18489: EQUAL
18490: IFFALSE 18514
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18492: CALL_OW 44
18496: PPUSH
18497: LD_VAR 0 4
18501: PPUSH
18502: LD_VAR 0 5
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL_OW 48
// end ;
18514: LD_VAR 0 6
18518: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18519: LD_INT 0
18521: PPUSH
18522: PPUSH
// uc_side := your_side ;
18523: LD_ADDR_OWVAR 20
18527: PUSH
18528: LD_OWVAR 2
18532: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18533: LD_VAR 0 1
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: LD_INT 4
18549: PUSH
18550: LD_INT 5
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: IN
18560: IFFALSE 18572
// uc_nation := nation_american else
18562: LD_ADDR_OWVAR 21
18566: PUSH
18567: LD_INT 1
18569: ST_TO_ADDR
18570: GO 18615
// if chassis in [ 11 , 12 , 13 , 14 ] then
18572: LD_VAR 0 1
18576: PUSH
18577: LD_INT 11
18579: PUSH
18580: LD_INT 12
18582: PUSH
18583: LD_INT 13
18585: PUSH
18586: LD_INT 14
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: IN
18595: IFFALSE 18607
// uc_nation := nation_arabian else
18597: LD_ADDR_OWVAR 21
18601: PUSH
18602: LD_INT 2
18604: ST_TO_ADDR
18605: GO 18615
// uc_nation := nation_russian ;
18607: LD_ADDR_OWVAR 21
18611: PUSH
18612: LD_INT 3
18614: ST_TO_ADDR
// vc_chassis := chassis ;
18615: LD_ADDR_OWVAR 37
18619: PUSH
18620: LD_VAR 0 1
18624: ST_TO_ADDR
// vc_engine := engine ;
18625: LD_ADDR_OWVAR 39
18629: PUSH
18630: LD_VAR 0 2
18634: ST_TO_ADDR
// vc_control := control ;
18635: LD_ADDR_OWVAR 38
18639: PUSH
18640: LD_VAR 0 3
18644: ST_TO_ADDR
// vc_weapon := weapon ;
18645: LD_ADDR_OWVAR 40
18649: PUSH
18650: LD_VAR 0 4
18654: ST_TO_ADDR
// un := CreateVehicle ;
18655: LD_ADDR_VAR 0 8
18659: PUSH
18660: CALL_OW 45
18664: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18665: LD_VAR 0 8
18669: PPUSH
18670: LD_INT 0
18672: PPUSH
18673: LD_INT 5
18675: PPUSH
18676: CALL_OW 12
18680: PPUSH
18681: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18685: LD_VAR 0 8
18689: PPUSH
18690: LD_VAR 0 5
18694: PPUSH
18695: LD_VAR 0 6
18699: PPUSH
18700: LD_INT 1
18702: PPUSH
18703: CALL_OW 48
// end ;
18707: LD_VAR 0 7
18711: RET
// export hInvincible ; every 1 do
18712: GO 18714
18714: DISABLE
// hInvincible := [ ] ;
18715: LD_ADDR_EXP 82
18719: PUSH
18720: EMPTY
18721: ST_TO_ADDR
18722: END
// every 10 do var i ;
18723: GO 18725
18725: DISABLE
18726: LD_INT 0
18728: PPUSH
// begin enable ;
18729: ENABLE
// if not hInvincible then
18730: LD_EXP 82
18734: NOT
18735: IFFALSE 18739
// exit ;
18737: GO 18783
// for i in hInvincible do
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_EXP 82
18748: PUSH
18749: FOR_IN
18750: IFFALSE 18781
// if GetLives ( i ) < 1000 then
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 256
18761: PUSH
18762: LD_INT 1000
18764: LESS
18765: IFFALSE 18779
// SetLives ( i , 1000 ) ;
18767: LD_VAR 0 1
18771: PPUSH
18772: LD_INT 1000
18774: PPUSH
18775: CALL_OW 234
18779: GO 18749
18781: POP
18782: POP
// end ;
18783: PPOPN 1
18785: END
// export function hHackInvincible ; var i ; begin
18786: LD_INT 0
18788: PPUSH
18789: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: LD_INT 2
18797: PUSH
18798: LD_INT 21
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 21
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: PPUSH
18823: CALL_OW 69
18827: PUSH
18828: FOR_IN
18829: IFFALSE 18890
// if IsSelected ( i ) then
18831: LD_VAR 0 2
18835: PPUSH
18836: CALL_OW 306
18840: IFFALSE 18888
// begin if i in hInvincible then
18842: LD_VAR 0 2
18846: PUSH
18847: LD_EXP 82
18851: IN
18852: IFFALSE 18872
// hInvincible := hInvincible diff i else
18854: LD_ADDR_EXP 82
18858: PUSH
18859: LD_EXP 82
18863: PUSH
18864: LD_VAR 0 2
18868: DIFF
18869: ST_TO_ADDR
18870: GO 18888
// hInvincible := hInvincible union i ;
18872: LD_ADDR_EXP 82
18876: PUSH
18877: LD_EXP 82
18881: PUSH
18882: LD_VAR 0 2
18886: UNION
18887: ST_TO_ADDR
// end ;
18888: GO 18828
18890: POP
18891: POP
// end ;
18892: LD_VAR 0 1
18896: RET
// export function hHackInvisible ; var i , j ; begin
18897: LD_INT 0
18899: PPUSH
18900: PPUSH
18901: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL_OW 69
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18947
// if IsSelected ( i ) then
18925: LD_VAR 0 2
18929: PPUSH
18930: CALL_OW 306
18934: IFFALSE 18945
// ComForceInvisible ( i ) ;
18936: LD_VAR 0 2
18940: PPUSH
18941: CALL_OW 496
18945: GO 18922
18947: POP
18948: POP
// end ;
18949: LD_VAR 0 1
18953: RET
// export function hHackChangeYourSide ; begin
18954: LD_INT 0
18956: PPUSH
// if your_side = 8 then
18957: LD_OWVAR 2
18961: PUSH
18962: LD_INT 8
18964: EQUAL
18965: IFFALSE 18977
// your_side := 0 else
18967: LD_ADDR_OWVAR 2
18971: PUSH
18972: LD_INT 0
18974: ST_TO_ADDR
18975: GO 18991
// your_side := your_side + 1 ;
18977: LD_ADDR_OWVAR 2
18981: PUSH
18982: LD_OWVAR 2
18986: PUSH
18987: LD_INT 1
18989: PLUS
18990: ST_TO_ADDR
// end ;
18991: LD_VAR 0 1
18995: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
// for i in all_units do
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: LD_OWVAR 3
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19090
// if IsSelected ( i ) then
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 306
19023: IFFALSE 19088
// begin j := GetSide ( i ) ;
19025: LD_ADDR_VAR 0 3
19029: PUSH
19030: LD_VAR 0 2
19034: PPUSH
19035: CALL_OW 255
19039: ST_TO_ADDR
// if j = 8 then
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 8
19047: EQUAL
19048: IFFALSE 19060
// j := 0 else
19050: LD_ADDR_VAR 0 3
19054: PUSH
19055: LD_INT 0
19057: ST_TO_ADDR
19058: GO 19074
// j := j + 1 ;
19060: LD_ADDR_VAR 0 3
19064: PUSH
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 1
19072: PLUS
19073: ST_TO_ADDR
// SetSide ( i , j ) ;
19074: LD_VAR 0 2
19078: PPUSH
19079: LD_VAR 0 3
19083: PPUSH
19084: CALL_OW 235
// end ;
19088: GO 19011
19090: POP
19091: POP
// end ;
19092: LD_VAR 0 1
19096: RET
// export function hHackFog ; begin
19097: LD_INT 0
19099: PPUSH
// FogOff ( true ) ;
19100: LD_INT 1
19102: PPUSH
19103: CALL_OW 344
// end ;
19107: LD_VAR 0 1
19111: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19112: LD_INT 0
19114: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19115: LD_VAR 0 1
19119: PPUSH
19120: LD_VAR 0 2
19124: PPUSH
19125: LD_VAR 0 3
19129: PPUSH
19130: LD_INT 1
19132: PPUSH
19133: LD_INT 1
19135: PPUSH
19136: CALL_OW 483
// CenterOnXY ( x , y ) ;
19140: LD_VAR 0 2
19144: PPUSH
19145: LD_VAR 0 3
19149: PPUSH
19150: CALL_OW 84
// end ;
19154: LD_VAR 0 4
19158: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19159: LD_INT 0
19161: PPUSH
19162: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19163: LD_VAR 0 1
19167: NOT
19168: PUSH
19169: LD_VAR 0 2
19173: PPUSH
19174: LD_VAR 0 3
19178: PPUSH
19179: CALL_OW 488
19183: NOT
19184: OR
19185: PUSH
19186: LD_VAR 0 1
19190: PPUSH
19191: CALL_OW 266
19195: PUSH
19196: LD_INT 3
19198: NONEQUAL
19199: PUSH
19200: LD_VAR 0 1
19204: PPUSH
19205: CALL_OW 247
19209: PUSH
19210: LD_INT 1
19212: EQUAL
19213: NOT
19214: AND
19215: OR
19216: IFFALSE 19220
// exit ;
19218: GO 19369
// if GetType ( factory ) = unit_human then
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 247
19229: PUSH
19230: LD_INT 1
19232: EQUAL
19233: IFFALSE 19250
// factory := IsInUnit ( factory ) ;
19235: LD_ADDR_VAR 0 1
19239: PUSH
19240: LD_VAR 0 1
19244: PPUSH
19245: CALL_OW 310
19249: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19250: LD_VAR 0 1
19254: PPUSH
19255: CALL_OW 266
19259: PUSH
19260: LD_INT 3
19262: NONEQUAL
19263: IFFALSE 19267
// exit ;
19265: GO 19369
// if HexInfo ( x , y ) = factory then
19267: LD_VAR 0 2
19271: PPUSH
19272: LD_VAR 0 3
19276: PPUSH
19277: CALL_OW 428
19281: PUSH
19282: LD_VAR 0 1
19286: EQUAL
19287: IFFALSE 19314
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19289: LD_ADDR_EXP 83
19293: PUSH
19294: LD_EXP 83
19298: PPUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_INT 0
19306: PPUSH
19307: CALL_OW 1
19311: ST_TO_ADDR
19312: GO 19365
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19314: LD_ADDR_EXP 83
19318: PUSH
19319: LD_EXP 83
19323: PPUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL_OW 255
19338: PUSH
19339: LD_VAR 0 1
19343: PUSH
19344: LD_VAR 0 2
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 1
19364: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19365: CALL 19374 0 0
// end ;
19369: LD_VAR 0 4
19373: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
19378: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19379: LD_STRING resetFactoryWaypoint();
19381: PPUSH
19382: CALL_OW 559
// if factoryWaypoints then
19386: LD_EXP 83
19390: IFFALSE 19516
// begin list := PrepareArray ( factoryWaypoints ) ;
19392: LD_ADDR_VAR 0 3
19396: PUSH
19397: LD_EXP 83
19401: PPUSH
19402: CALL 65948 0 1
19406: ST_TO_ADDR
// for i := 1 to list do
19407: LD_ADDR_VAR 0 2
19411: PUSH
19412: DOUBLE
19413: LD_INT 1
19415: DEC
19416: ST_TO_ADDR
19417: LD_VAR 0 3
19421: PUSH
19422: FOR_TO
19423: IFFALSE 19514
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19425: LD_STRING setFactoryWaypointXY(
19427: PUSH
19428: LD_VAR 0 3
19432: PUSH
19433: LD_VAR 0 2
19437: ARRAY
19438: PUSH
19439: LD_INT 1
19441: ARRAY
19442: STR
19443: PUSH
19444: LD_STRING ,
19446: STR
19447: PUSH
19448: LD_VAR 0 3
19452: PUSH
19453: LD_VAR 0 2
19457: ARRAY
19458: PUSH
19459: LD_INT 2
19461: ARRAY
19462: STR
19463: PUSH
19464: LD_STRING ,
19466: STR
19467: PUSH
19468: LD_VAR 0 3
19472: PUSH
19473: LD_VAR 0 2
19477: ARRAY
19478: PUSH
19479: LD_INT 3
19481: ARRAY
19482: STR
19483: PUSH
19484: LD_STRING ,
19486: STR
19487: PUSH
19488: LD_VAR 0 3
19492: PUSH
19493: LD_VAR 0 2
19497: ARRAY
19498: PUSH
19499: LD_INT 4
19501: ARRAY
19502: STR
19503: PUSH
19504: LD_STRING )
19506: STR
19507: PPUSH
19508: CALL_OW 559
19512: GO 19422
19514: POP
19515: POP
// end ; end ;
19516: LD_VAR 0 1
19520: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19521: LD_INT 0
19523: PPUSH
// if HexInfo ( x , y ) = warehouse then
19524: LD_VAR 0 2
19528: PPUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 428
19538: PUSH
19539: LD_VAR 0 1
19543: EQUAL
19544: IFFALSE 19571
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19546: LD_ADDR_EXP 84
19550: PUSH
19551: LD_EXP 84
19555: PPUSH
19556: LD_VAR 0 1
19560: PPUSH
19561: LD_INT 0
19563: PPUSH
19564: CALL_OW 1
19568: ST_TO_ADDR
19569: GO 19622
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19571: LD_ADDR_EXP 84
19575: PUSH
19576: LD_EXP 84
19580: PPUSH
19581: LD_VAR 0 1
19585: PPUSH
19586: LD_VAR 0 1
19590: PPUSH
19591: CALL_OW 255
19595: PUSH
19596: LD_VAR 0 1
19600: PUSH
19601: LD_VAR 0 2
19605: PUSH
19606: LD_VAR 0 3
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: PPUSH
19617: CALL_OW 1
19621: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19622: CALL 19631 0 0
// end ;
19626: LD_VAR 0 4
19630: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19631: LD_INT 0
19633: PPUSH
19634: PPUSH
19635: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19636: LD_STRING resetWarehouseGatheringPoints();
19638: PPUSH
19639: CALL_OW 559
// if warehouseGatheringPoints then
19643: LD_EXP 84
19647: IFFALSE 19773
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: LD_EXP 84
19658: PPUSH
19659: CALL 65948 0 1
19663: ST_TO_ADDR
// for i := 1 to list do
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: DOUBLE
19670: LD_INT 1
19672: DEC
19673: ST_TO_ADDR
19674: LD_VAR 0 3
19678: PUSH
19679: FOR_TO
19680: IFFALSE 19771
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19682: LD_STRING setWarehouseGatheringPointXY(
19684: PUSH
19685: LD_VAR 0 3
19689: PUSH
19690: LD_VAR 0 2
19694: ARRAY
19695: PUSH
19696: LD_INT 1
19698: ARRAY
19699: STR
19700: PUSH
19701: LD_STRING ,
19703: STR
19704: PUSH
19705: LD_VAR 0 3
19709: PUSH
19710: LD_VAR 0 2
19714: ARRAY
19715: PUSH
19716: LD_INT 2
19718: ARRAY
19719: STR
19720: PUSH
19721: LD_STRING ,
19723: STR
19724: PUSH
19725: LD_VAR 0 3
19729: PUSH
19730: LD_VAR 0 2
19734: ARRAY
19735: PUSH
19736: LD_INT 3
19738: ARRAY
19739: STR
19740: PUSH
19741: LD_STRING ,
19743: STR
19744: PUSH
19745: LD_VAR 0 3
19749: PUSH
19750: LD_VAR 0 2
19754: ARRAY
19755: PUSH
19756: LD_INT 4
19758: ARRAY
19759: STR
19760: PUSH
19761: LD_STRING )
19763: STR
19764: PPUSH
19765: CALL_OW 559
19769: GO 19679
19771: POP
19772: POP
// end ; end ;
19773: LD_VAR 0 1
19777: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19778: LD_EXP 84
19782: IFFALSE 20469
19784: GO 19786
19786: DISABLE
19787: LD_INT 0
19789: PPUSH
19790: PPUSH
19791: PPUSH
19792: PPUSH
19793: PPUSH
19794: PPUSH
19795: PPUSH
19796: PPUSH
19797: PPUSH
// begin enable ;
19798: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19799: LD_ADDR_VAR 0 3
19803: PUSH
19804: LD_EXP 84
19808: PPUSH
19809: CALL 65948 0 1
19813: ST_TO_ADDR
// if not list then
19814: LD_VAR 0 3
19818: NOT
19819: IFFALSE 19823
// exit ;
19821: GO 20469
// for i := 1 to list do
19823: LD_ADDR_VAR 0 1
19827: PUSH
19828: DOUBLE
19829: LD_INT 1
19831: DEC
19832: ST_TO_ADDR
19833: LD_VAR 0 3
19837: PUSH
19838: FOR_TO
19839: IFFALSE 20467
// begin depot := list [ i ] [ 2 ] ;
19841: LD_ADDR_VAR 0 8
19845: PUSH
19846: LD_VAR 0 3
19850: PUSH
19851: LD_VAR 0 1
19855: ARRAY
19856: PUSH
19857: LD_INT 2
19859: ARRAY
19860: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19861: LD_ADDR_VAR 0 5
19865: PUSH
19866: LD_VAR 0 3
19870: PUSH
19871: LD_VAR 0 1
19875: ARRAY
19876: PUSH
19877: LD_INT 1
19879: ARRAY
19880: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19881: LD_VAR 0 8
19885: PPUSH
19886: CALL_OW 301
19890: PUSH
19891: LD_VAR 0 5
19895: PUSH
19896: LD_VAR 0 8
19900: PPUSH
19901: CALL_OW 255
19905: NONEQUAL
19906: OR
19907: IFFALSE 19936
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19909: LD_ADDR_EXP 84
19913: PUSH
19914: LD_EXP 84
19918: PPUSH
19919: LD_VAR 0 8
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: CALL_OW 1
19931: ST_TO_ADDR
// exit ;
19932: POP
19933: POP
19934: GO 20469
// end ; x := list [ i ] [ 3 ] ;
19936: LD_ADDR_VAR 0 6
19940: PUSH
19941: LD_VAR 0 3
19945: PUSH
19946: LD_VAR 0 1
19950: ARRAY
19951: PUSH
19952: LD_INT 3
19954: ARRAY
19955: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19956: LD_ADDR_VAR 0 7
19960: PUSH
19961: LD_VAR 0 3
19965: PUSH
19966: LD_VAR 0 1
19970: ARRAY
19971: PUSH
19972: LD_INT 4
19974: ARRAY
19975: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19976: LD_ADDR_VAR 0 9
19980: PUSH
19981: LD_VAR 0 6
19985: PPUSH
19986: LD_VAR 0 7
19990: PPUSH
19991: LD_INT 16
19993: PPUSH
19994: CALL 64532 0 3
19998: ST_TO_ADDR
// if not cratesNearbyPoint then
19999: LD_VAR 0 9
20003: NOT
20004: IFFALSE 20010
// exit ;
20006: POP
20007: POP
20008: GO 20469
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20010: LD_ADDR_VAR 0 4
20014: PUSH
20015: LD_INT 22
20017: PUSH
20018: LD_VAR 0 5
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 3
20029: PUSH
20030: LD_INT 60
20032: PUSH
20033: EMPTY
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 91
20042: PUSH
20043: LD_VAR 0 8
20047: PUSH
20048: LD_INT 6
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 25
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 25
20071: PUSH
20072: LD_INT 16
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: PPUSH
20090: CALL_OW 69
20094: PUSH
20095: LD_VAR 0 8
20099: PPUSH
20100: CALL_OW 313
20104: PPUSH
20105: LD_INT 3
20107: PUSH
20108: LD_INT 60
20110: PUSH
20111: EMPTY
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 25
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 25
20133: PUSH
20134: LD_INT 16
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PPUSH
20150: CALL_OW 72
20154: UNION
20155: ST_TO_ADDR
// if tmp then
20156: LD_VAR 0 4
20160: IFFALSE 20240
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20162: LD_ADDR_VAR 0 4
20166: PUSH
20167: LD_VAR 0 4
20171: PPUSH
20172: LD_INT 3
20174: PPUSH
20175: CALL 62499 0 2
20179: ST_TO_ADDR
// for j in tmp do
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_VAR 0 4
20189: PUSH
20190: FOR_IN
20191: IFFALSE 20234
// begin if IsInUnit ( j ) then
20193: LD_VAR 0 2
20197: PPUSH
20198: CALL_OW 310
20202: IFFALSE 20213
// ComExit ( j ) ;
20204: LD_VAR 0 2
20208: PPUSH
20209: CALL 62582 0 1
// AddComCollect ( j , x , y ) ;
20213: LD_VAR 0 2
20217: PPUSH
20218: LD_VAR 0 6
20222: PPUSH
20223: LD_VAR 0 7
20227: PPUSH
20228: CALL_OW 177
// end ;
20232: GO 20190
20234: POP
20235: POP
// exit ;
20236: POP
20237: POP
20238: GO 20469
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20240: LD_ADDR_VAR 0 4
20244: PUSH
20245: LD_INT 22
20247: PUSH
20248: LD_VAR 0 5
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 91
20259: PUSH
20260: LD_VAR 0 8
20264: PUSH
20265: LD_INT 8
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 34
20278: PUSH
20279: LD_INT 12
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 34
20288: PUSH
20289: LD_INT 51
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 34
20298: PUSH
20299: LD_INT 32
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 34
20308: PUSH
20309: LD_EXP 8
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 69
20334: ST_TO_ADDR
// if tmp then
20335: LD_VAR 0 4
20339: IFFALSE 20465
// begin for j in tmp do
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: LD_VAR 0 4
20350: PUSH
20351: FOR_IN
20352: IFFALSE 20463
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20354: LD_VAR 0 2
20358: PPUSH
20359: CALL_OW 262
20363: PUSH
20364: LD_INT 3
20366: EQUAL
20367: PUSH
20368: LD_VAR 0 2
20372: PPUSH
20373: CALL_OW 261
20377: PUSH
20378: LD_INT 20
20380: GREATER
20381: OR
20382: PUSH
20383: LD_VAR 0 2
20387: PPUSH
20388: CALL_OW 314
20392: NOT
20393: AND
20394: PUSH
20395: LD_VAR 0 2
20399: PPUSH
20400: CALL_OW 263
20404: PUSH
20405: LD_INT 1
20407: NONEQUAL
20408: PUSH
20409: LD_VAR 0 2
20413: PPUSH
20414: CALL_OW 311
20418: OR
20419: AND
20420: IFFALSE 20461
// begin ComCollect ( j , x , y ) ;
20422: LD_VAR 0 2
20426: PPUSH
20427: LD_VAR 0 6
20431: PPUSH
20432: LD_VAR 0 7
20436: PPUSH
20437: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20441: LD_VAR 0 2
20445: PPUSH
20446: LD_VAR 0 8
20450: PPUSH
20451: CALL_OW 172
// exit ;
20455: POP
20456: POP
20457: POP
20458: POP
20459: GO 20469
// end ;
20461: GO 20351
20463: POP
20464: POP
// end ; end ;
20465: GO 19838
20467: POP
20468: POP
// end ; end_of_file
20469: PPOPN 9
20471: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
20477: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 264
20487: PUSH
20488: LD_EXP 11
20492: EQUAL
20493: IFFALSE 20565
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20495: LD_INT 68
20497: PPUSH
20498: LD_VAR 0 1
20502: PPUSH
20503: CALL_OW 255
20507: PPUSH
20508: CALL_OW 321
20512: PUSH
20513: LD_INT 2
20515: EQUAL
20516: IFFALSE 20528
// eff := 70 else
20518: LD_ADDR_VAR 0 4
20522: PUSH
20523: LD_INT 70
20525: ST_TO_ADDR
20526: GO 20536
// eff := 30 ;
20528: LD_ADDR_VAR 0 4
20532: PUSH
20533: LD_INT 30
20535: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 250
20545: PPUSH
20546: LD_VAR 0 1
20550: PPUSH
20551: CALL_OW 251
20555: PPUSH
20556: LD_VAR 0 4
20560: PPUSH
20561: CALL_OW 495
// end ; end ;
20565: LD_VAR 0 2
20569: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20570: LD_INT 0
20572: PPUSH
// end ;
20573: LD_VAR 0 4
20577: RET
// export function SOS_Command ( cmd ) ; begin
20578: LD_INT 0
20580: PPUSH
// end ;
20581: LD_VAR 0 2
20585: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20586: LD_INT 0
20588: PPUSH
// end ;
20589: LD_VAR 0 6
20593: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20594: LD_INT 0
20596: PPUSH
20597: PPUSH
// if not vehicle or not factory then
20598: LD_VAR 0 1
20602: NOT
20603: PUSH
20604: LD_VAR 0 2
20608: NOT
20609: OR
20610: IFFALSE 20614
// exit ;
20612: GO 20845
// if factoryWaypoints >= factory then
20614: LD_EXP 83
20618: PUSH
20619: LD_VAR 0 2
20623: GREATEREQUAL
20624: IFFALSE 20845
// if factoryWaypoints [ factory ] then
20626: LD_EXP 83
20630: PUSH
20631: LD_VAR 0 2
20635: ARRAY
20636: IFFALSE 20845
// begin if GetControl ( vehicle ) = control_manual then
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 263
20647: PUSH
20648: LD_INT 1
20650: EQUAL
20651: IFFALSE 20732
// begin driver := IsDrivenBy ( vehicle ) ;
20653: LD_ADDR_VAR 0 4
20657: PUSH
20658: LD_VAR 0 1
20662: PPUSH
20663: CALL_OW 311
20667: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20668: LD_VAR 0 4
20672: PPUSH
20673: LD_EXP 83
20677: PUSH
20678: LD_VAR 0 2
20682: ARRAY
20683: PUSH
20684: LD_INT 3
20686: ARRAY
20687: PPUSH
20688: LD_EXP 83
20692: PUSH
20693: LD_VAR 0 2
20697: ARRAY
20698: PUSH
20699: LD_INT 4
20701: ARRAY
20702: PPUSH
20703: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20707: LD_VAR 0 4
20711: PPUSH
20712: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20716: LD_VAR 0 4
20720: PPUSH
20721: LD_VAR 0 2
20725: PPUSH
20726: CALL_OW 180
// end else
20730: GO 20845
// if GetControl ( vehicle ) = control_remote then
20732: LD_VAR 0 1
20736: PPUSH
20737: CALL_OW 263
20741: PUSH
20742: LD_INT 2
20744: EQUAL
20745: IFFALSE 20806
// begin wait ( 0 0$2 ) ;
20747: LD_INT 70
20749: PPUSH
20750: CALL_OW 67
// if Connect ( vehicle ) then
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL 32893 0 1
20763: IFFALSE 20804
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: LD_EXP 83
20774: PUSH
20775: LD_VAR 0 2
20779: ARRAY
20780: PUSH
20781: LD_INT 3
20783: ARRAY
20784: PPUSH
20785: LD_EXP 83
20789: PUSH
20790: LD_VAR 0 2
20794: ARRAY
20795: PUSH
20796: LD_INT 4
20798: ARRAY
20799: PPUSH
20800: CALL_OW 171
// end else
20804: GO 20845
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20806: LD_VAR 0 1
20810: PPUSH
20811: LD_EXP 83
20815: PUSH
20816: LD_VAR 0 2
20820: ARRAY
20821: PUSH
20822: LD_INT 3
20824: ARRAY
20825: PPUSH
20826: LD_EXP 83
20830: PUSH
20831: LD_VAR 0 2
20835: ARRAY
20836: PUSH
20837: LD_INT 4
20839: ARRAY
20840: PPUSH
20841: CALL_OW 171
// end ; end ;
20845: LD_VAR 0 3
20849: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20850: LD_INT 0
20852: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20853: LD_VAR 0 1
20857: PUSH
20858: LD_INT 250
20860: EQUAL
20861: PUSH
20862: LD_VAR 0 2
20866: PPUSH
20867: CALL_OW 264
20871: PUSH
20872: LD_EXP 14
20876: EQUAL
20877: AND
20878: IFFALSE 20899
// MinerPlaceMine ( unit , x , y ) ;
20880: LD_VAR 0 2
20884: PPUSH
20885: LD_VAR 0 4
20889: PPUSH
20890: LD_VAR 0 5
20894: PPUSH
20895: CALL 23298 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20899: LD_VAR 0 1
20903: PUSH
20904: LD_INT 251
20906: EQUAL
20907: PUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: CALL_OW 264
20917: PUSH
20918: LD_EXP 14
20922: EQUAL
20923: AND
20924: IFFALSE 20945
// MinerDetonateMine ( unit , x , y ) ;
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_VAR 0 4
20935: PPUSH
20936: LD_VAR 0 5
20940: PPUSH
20941: CALL 23575 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20945: LD_VAR 0 1
20949: PUSH
20950: LD_INT 252
20952: EQUAL
20953: PUSH
20954: LD_VAR 0 2
20958: PPUSH
20959: CALL_OW 264
20963: PUSH
20964: LD_EXP 14
20968: EQUAL
20969: AND
20970: IFFALSE 20991
// MinerCreateMinefield ( unit , x , y ) ;
20972: LD_VAR 0 2
20976: PPUSH
20977: LD_VAR 0 4
20981: PPUSH
20982: LD_VAR 0 5
20986: PPUSH
20987: CALL 23992 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20991: LD_VAR 0 1
20995: PUSH
20996: LD_INT 253
20998: EQUAL
20999: PUSH
21000: LD_VAR 0 2
21004: PPUSH
21005: CALL_OW 257
21009: PUSH
21010: LD_INT 5
21012: EQUAL
21013: AND
21014: IFFALSE 21035
// ComBinocular ( unit , x , y ) ;
21016: LD_VAR 0 2
21020: PPUSH
21021: LD_VAR 0 4
21025: PPUSH
21026: LD_VAR 0 5
21030: PPUSH
21031: CALL 24363 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21035: LD_VAR 0 1
21039: PUSH
21040: LD_INT 254
21042: EQUAL
21043: PUSH
21044: LD_VAR 0 2
21048: PPUSH
21049: CALL_OW 264
21053: PUSH
21054: LD_EXP 9
21058: EQUAL
21059: AND
21060: PUSH
21061: LD_VAR 0 3
21065: PPUSH
21066: CALL_OW 263
21070: PUSH
21071: LD_INT 3
21073: EQUAL
21074: AND
21075: IFFALSE 21091
// HackDestroyVehicle ( unit , selectedUnit ) ;
21077: LD_VAR 0 2
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL 22658 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21091: LD_VAR 0 1
21095: PUSH
21096: LD_INT 255
21098: EQUAL
21099: PUSH
21100: LD_VAR 0 2
21104: PPUSH
21105: CALL_OW 264
21109: PUSH
21110: LD_INT 14
21112: PUSH
21113: LD_INT 53
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: IN
21120: AND
21121: PUSH
21122: LD_VAR 0 4
21126: PPUSH
21127: LD_VAR 0 5
21131: PPUSH
21132: CALL_OW 488
21136: AND
21137: IFFALSE 21161
// CutTreeXYR ( unit , x , y , 12 ) ;
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_VAR 0 4
21148: PPUSH
21149: LD_VAR 0 5
21153: PPUSH
21154: LD_INT 12
21156: PPUSH
21157: CALL 21224 0 4
// if cmd = 256 then
21161: LD_VAR 0 1
21165: PUSH
21166: LD_INT 256
21168: EQUAL
21169: IFFALSE 21190
// SetFactoryWaypoint ( unit , x , y ) ;
21171: LD_VAR 0 2
21175: PPUSH
21176: LD_VAR 0 4
21180: PPUSH
21181: LD_VAR 0 5
21185: PPUSH
21186: CALL 19159 0 3
// if cmd = 257 then
21190: LD_VAR 0 1
21194: PUSH
21195: LD_INT 257
21197: EQUAL
21198: IFFALSE 21219
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21200: LD_VAR 0 2
21204: PPUSH
21205: LD_VAR 0 4
21209: PPUSH
21210: LD_VAR 0 5
21214: PPUSH
21215: CALL 19521 0 3
// end ;
21219: LD_VAR 0 6
21223: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
21234: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21235: LD_VAR 0 1
21239: NOT
21240: PUSH
21241: LD_VAR 0 2
21245: PPUSH
21246: LD_VAR 0 3
21250: PPUSH
21251: CALL_OW 488
21255: NOT
21256: OR
21257: PUSH
21258: LD_VAR 0 4
21262: NOT
21263: OR
21264: IFFALSE 21268
// exit ;
21266: GO 21608
// list := [ ] ;
21268: LD_ADDR_VAR 0 13
21272: PUSH
21273: EMPTY
21274: ST_TO_ADDR
// if x - r < 0 then
21275: LD_VAR 0 2
21279: PUSH
21280: LD_VAR 0 4
21284: MINUS
21285: PUSH
21286: LD_INT 0
21288: LESS
21289: IFFALSE 21301
// min_x := 0 else
21291: LD_ADDR_VAR 0 7
21295: PUSH
21296: LD_INT 0
21298: ST_TO_ADDR
21299: GO 21317
// min_x := x - r ;
21301: LD_ADDR_VAR 0 7
21305: PUSH
21306: LD_VAR 0 2
21310: PUSH
21311: LD_VAR 0 4
21315: MINUS
21316: ST_TO_ADDR
// if y - r < 0 then
21317: LD_VAR 0 3
21321: PUSH
21322: LD_VAR 0 4
21326: MINUS
21327: PUSH
21328: LD_INT 0
21330: LESS
21331: IFFALSE 21343
// min_y := 0 else
21333: LD_ADDR_VAR 0 8
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
21341: GO 21359
// min_y := y - r ;
21343: LD_ADDR_VAR 0 8
21347: PUSH
21348: LD_VAR 0 3
21352: PUSH
21353: LD_VAR 0 4
21357: MINUS
21358: ST_TO_ADDR
// max_x := x + r ;
21359: LD_ADDR_VAR 0 9
21363: PUSH
21364: LD_VAR 0 2
21368: PUSH
21369: LD_VAR 0 4
21373: PLUS
21374: ST_TO_ADDR
// max_y := y + r ;
21375: LD_ADDR_VAR 0 10
21379: PUSH
21380: LD_VAR 0 3
21384: PUSH
21385: LD_VAR 0 4
21389: PLUS
21390: ST_TO_ADDR
// for _x = min_x to max_x do
21391: LD_ADDR_VAR 0 11
21395: PUSH
21396: DOUBLE
21397: LD_VAR 0 7
21401: DEC
21402: ST_TO_ADDR
21403: LD_VAR 0 9
21407: PUSH
21408: FOR_TO
21409: IFFALSE 21526
// for _y = min_y to max_y do
21411: LD_ADDR_VAR 0 12
21415: PUSH
21416: DOUBLE
21417: LD_VAR 0 8
21421: DEC
21422: ST_TO_ADDR
21423: LD_VAR 0 10
21427: PUSH
21428: FOR_TO
21429: IFFALSE 21522
// begin if not ValidHex ( _x , _y ) then
21431: LD_VAR 0 11
21435: PPUSH
21436: LD_VAR 0 12
21440: PPUSH
21441: CALL_OW 488
21445: NOT
21446: IFFALSE 21450
// continue ;
21448: GO 21428
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21450: LD_VAR 0 11
21454: PPUSH
21455: LD_VAR 0 12
21459: PPUSH
21460: CALL_OW 351
21464: PUSH
21465: LD_VAR 0 11
21469: PPUSH
21470: LD_VAR 0 12
21474: PPUSH
21475: CALL_OW 554
21479: AND
21480: IFFALSE 21520
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21482: LD_ADDR_VAR 0 13
21486: PUSH
21487: LD_VAR 0 13
21491: PPUSH
21492: LD_VAR 0 13
21496: PUSH
21497: LD_INT 1
21499: PLUS
21500: PPUSH
21501: LD_VAR 0 11
21505: PUSH
21506: LD_VAR 0 12
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL_OW 2
21519: ST_TO_ADDR
// end ;
21520: GO 21428
21522: POP
21523: POP
21524: GO 21408
21526: POP
21527: POP
// if not list then
21528: LD_VAR 0 13
21532: NOT
21533: IFFALSE 21537
// exit ;
21535: GO 21608
// for i in list do
21537: LD_ADDR_VAR 0 6
21541: PUSH
21542: LD_VAR 0 13
21546: PUSH
21547: FOR_IN
21548: IFFALSE 21606
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21550: LD_VAR 0 1
21554: PPUSH
21555: LD_STRING M
21557: PUSH
21558: LD_VAR 0 6
21562: PUSH
21563: LD_INT 1
21565: ARRAY
21566: PUSH
21567: LD_VAR 0 6
21571: PUSH
21572: LD_INT 2
21574: ARRAY
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: LD_INT 0
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: PPUSH
21600: CALL_OW 447
21604: GO 21547
21606: POP
21607: POP
// end ;
21608: LD_VAR 0 5
21612: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21613: LD_EXP 86
21617: NOT
21618: IFFALSE 21668
21620: GO 21622
21622: DISABLE
// begin initHack := true ;
21623: LD_ADDR_EXP 86
21627: PUSH
21628: LD_INT 1
21630: ST_TO_ADDR
// hackTanks := [ ] ;
21631: LD_ADDR_EXP 87
21635: PUSH
21636: EMPTY
21637: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21638: LD_ADDR_EXP 88
21642: PUSH
21643: EMPTY
21644: ST_TO_ADDR
// hackLimit := 3 ;
21645: LD_ADDR_EXP 89
21649: PUSH
21650: LD_INT 3
21652: ST_TO_ADDR
// hackDist := 12 ;
21653: LD_ADDR_EXP 90
21657: PUSH
21658: LD_INT 12
21660: ST_TO_ADDR
// hackCounter := [ ] ;
21661: LD_ADDR_EXP 91
21665: PUSH
21666: EMPTY
21667: ST_TO_ADDR
// end ;
21668: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21669: LD_EXP 86
21673: PUSH
21674: LD_INT 34
21676: PUSH
21677: LD_EXP 9
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PPUSH
21686: CALL_OW 69
21690: AND
21691: IFFALSE 21946
21693: GO 21695
21695: DISABLE
21696: LD_INT 0
21698: PPUSH
21699: PPUSH
// begin enable ;
21700: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21701: LD_ADDR_VAR 0 1
21705: PUSH
21706: LD_INT 34
21708: PUSH
21709: LD_EXP 9
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: PUSH
21723: FOR_IN
21724: IFFALSE 21944
// begin if not i in hackTanks then
21726: LD_VAR 0 1
21730: PUSH
21731: LD_EXP 87
21735: IN
21736: NOT
21737: IFFALSE 21820
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21739: LD_ADDR_EXP 87
21743: PUSH
21744: LD_EXP 87
21748: PPUSH
21749: LD_EXP 87
21753: PUSH
21754: LD_INT 1
21756: PLUS
21757: PPUSH
21758: LD_VAR 0 1
21762: PPUSH
21763: CALL_OW 1
21767: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21768: LD_ADDR_EXP 88
21772: PUSH
21773: LD_EXP 88
21777: PPUSH
21778: LD_EXP 88
21782: PUSH
21783: LD_INT 1
21785: PLUS
21786: PPUSH
21787: EMPTY
21788: PPUSH
21789: CALL_OW 1
21793: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21794: LD_ADDR_EXP 91
21798: PUSH
21799: LD_EXP 91
21803: PPUSH
21804: LD_EXP 91
21808: PUSH
21809: LD_INT 1
21811: PLUS
21812: PPUSH
21813: EMPTY
21814: PPUSH
21815: CALL_OW 1
21819: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21820: LD_VAR 0 1
21824: PPUSH
21825: CALL_OW 302
21829: NOT
21830: IFFALSE 21843
// begin HackUnlinkAll ( i ) ;
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL 21949 0 1
// continue ;
21841: GO 21723
// end ; HackCheckCapturedStatus ( i ) ;
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL 22392 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21852: LD_ADDR_VAR 0 2
21856: PUSH
21857: LD_INT 81
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 255
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 33
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 91
21886: PUSH
21887: LD_VAR 0 1
21891: PUSH
21892: LD_EXP 90
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 50
21904: PUSH
21905: EMPTY
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 69
21918: ST_TO_ADDR
// if not tmp then
21919: LD_VAR 0 2
21923: NOT
21924: IFFALSE 21928
// continue ;
21926: GO 21723
// HackLink ( i , tmp ) ;
21928: LD_VAR 0 1
21932: PPUSH
21933: LD_VAR 0 2
21937: PPUSH
21938: CALL 22085 0 2
// end ;
21942: GO 21723
21944: POP
21945: POP
// end ;
21946: PPOPN 2
21948: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
21953: PPUSH
// if not hack in hackTanks then
21954: LD_VAR 0 1
21958: PUSH
21959: LD_EXP 87
21963: IN
21964: NOT
21965: IFFALSE 21969
// exit ;
21967: GO 22080
// index := GetElementIndex ( hackTanks , hack ) ;
21969: LD_ADDR_VAR 0 4
21973: PUSH
21974: LD_EXP 87
21978: PPUSH
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL 29707 0 2
21988: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21989: LD_EXP 88
21993: PUSH
21994: LD_VAR 0 4
21998: ARRAY
21999: IFFALSE 22080
// begin for i in hackTanksCaptured [ index ] do
22001: LD_ADDR_VAR 0 3
22005: PUSH
22006: LD_EXP 88
22010: PUSH
22011: LD_VAR 0 4
22015: ARRAY
22016: PUSH
22017: FOR_IN
22018: IFFALSE 22044
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22020: LD_VAR 0 3
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: PPUSH
22029: LD_VAR 0 3
22033: PUSH
22034: LD_INT 2
22036: ARRAY
22037: PPUSH
22038: CALL_OW 235
22042: GO 22017
22044: POP
22045: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22046: LD_ADDR_EXP 88
22050: PUSH
22051: LD_EXP 88
22055: PPUSH
22056: LD_VAR 0 4
22060: PPUSH
22061: EMPTY
22062: PPUSH
22063: CALL_OW 1
22067: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22068: LD_VAR 0 1
22072: PPUSH
22073: LD_INT 0
22075: PPUSH
22076: CALL_OW 505
// end ; end ;
22080: LD_VAR 0 2
22084: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22085: LD_INT 0
22087: PPUSH
22088: PPUSH
22089: PPUSH
// if not hack in hackTanks or not vehicles then
22090: LD_VAR 0 1
22094: PUSH
22095: LD_EXP 87
22099: IN
22100: NOT
22101: PUSH
22102: LD_VAR 0 2
22106: NOT
22107: OR
22108: IFFALSE 22112
// exit ;
22110: GO 22387
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: LD_VAR 0 2
22126: PPUSH
22127: LD_INT 1
22129: PPUSH
22130: LD_INT 1
22132: PPUSH
22133: CALL 30357 0 4
22137: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22138: LD_ADDR_VAR 0 5
22142: PUSH
22143: LD_EXP 87
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL 29707 0 2
22157: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22158: LD_EXP 88
22162: PUSH
22163: LD_VAR 0 5
22167: ARRAY
22168: PUSH
22169: LD_EXP 89
22173: LESS
22174: IFFALSE 22363
// begin for i := 1 to vehicles do
22176: LD_ADDR_VAR 0 4
22180: PUSH
22181: DOUBLE
22182: LD_INT 1
22184: DEC
22185: ST_TO_ADDR
22186: LD_VAR 0 2
22190: PUSH
22191: FOR_TO
22192: IFFALSE 22361
// begin if hackTanksCaptured [ index ] = hackLimit then
22194: LD_EXP 88
22198: PUSH
22199: LD_VAR 0 5
22203: ARRAY
22204: PUSH
22205: LD_EXP 89
22209: EQUAL
22210: IFFALSE 22214
// break ;
22212: GO 22361
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22214: LD_ADDR_EXP 91
22218: PUSH
22219: LD_EXP 91
22223: PPUSH
22224: LD_VAR 0 5
22228: PPUSH
22229: LD_EXP 91
22233: PUSH
22234: LD_VAR 0 5
22238: ARRAY
22239: PUSH
22240: LD_INT 1
22242: PLUS
22243: PPUSH
22244: CALL_OW 1
22248: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22249: LD_ADDR_EXP 88
22253: PUSH
22254: LD_EXP 88
22258: PPUSH
22259: LD_VAR 0 5
22263: PUSH
22264: LD_EXP 88
22268: PUSH
22269: LD_VAR 0 5
22273: ARRAY
22274: PUSH
22275: LD_INT 1
22277: PLUS
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PPUSH
22283: LD_VAR 0 2
22287: PUSH
22288: LD_VAR 0 4
22292: ARRAY
22293: PUSH
22294: LD_VAR 0 2
22298: PUSH
22299: LD_VAR 0 4
22303: ARRAY
22304: PPUSH
22305: CALL_OW 255
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL 29922 0 3
22318: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22319: LD_VAR 0 2
22323: PUSH
22324: LD_VAR 0 4
22328: ARRAY
22329: PPUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 255
22339: PPUSH
22340: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22344: LD_VAR 0 2
22348: PUSH
22349: LD_VAR 0 4
22353: ARRAY
22354: PPUSH
22355: CALL_OW 141
// end ;
22359: GO 22191
22361: POP
22362: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22363: LD_VAR 0 1
22367: PPUSH
22368: LD_EXP 88
22372: PUSH
22373: LD_VAR 0 5
22377: ARRAY
22378: PUSH
22379: LD_INT 0
22381: PLUS
22382: PPUSH
22383: CALL_OW 505
// end ;
22387: LD_VAR 0 3
22391: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
// if not hack in hackTanks then
22398: LD_VAR 0 1
22402: PUSH
22403: LD_EXP 87
22407: IN
22408: NOT
22409: IFFALSE 22413
// exit ;
22411: GO 22653
// index := GetElementIndex ( hackTanks , hack ) ;
22413: LD_ADDR_VAR 0 4
22417: PUSH
22418: LD_EXP 87
22422: PPUSH
22423: LD_VAR 0 1
22427: PPUSH
22428: CALL 29707 0 2
22432: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22433: LD_ADDR_VAR 0 3
22437: PUSH
22438: DOUBLE
22439: LD_EXP 88
22443: PUSH
22444: LD_VAR 0 4
22448: ARRAY
22449: INC
22450: ST_TO_ADDR
22451: LD_INT 1
22453: PUSH
22454: FOR_DOWNTO
22455: IFFALSE 22627
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22457: LD_ADDR_VAR 0 5
22461: PUSH
22462: LD_EXP 88
22466: PUSH
22467: LD_VAR 0 4
22471: ARRAY
22472: PUSH
22473: LD_VAR 0 3
22477: ARRAY
22478: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22479: LD_VAR 0 5
22483: PUSH
22484: LD_INT 1
22486: ARRAY
22487: PPUSH
22488: CALL_OW 302
22492: NOT
22493: PUSH
22494: LD_VAR 0 5
22498: PUSH
22499: LD_INT 1
22501: ARRAY
22502: PPUSH
22503: CALL_OW 255
22507: PUSH
22508: LD_VAR 0 1
22512: PPUSH
22513: CALL_OW 255
22517: NONEQUAL
22518: OR
22519: IFFALSE 22625
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22521: LD_VAR 0 5
22525: PUSH
22526: LD_INT 1
22528: ARRAY
22529: PPUSH
22530: CALL_OW 305
22534: PUSH
22535: LD_VAR 0 5
22539: PUSH
22540: LD_INT 1
22542: ARRAY
22543: PPUSH
22544: CALL_OW 255
22548: PUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 255
22558: EQUAL
22559: AND
22560: IFFALSE 22584
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22562: LD_VAR 0 5
22566: PUSH
22567: LD_INT 1
22569: ARRAY
22570: PPUSH
22571: LD_VAR 0 5
22575: PUSH
22576: LD_INT 2
22578: ARRAY
22579: PPUSH
22580: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22584: LD_ADDR_EXP 88
22588: PUSH
22589: LD_EXP 88
22593: PPUSH
22594: LD_VAR 0 4
22598: PPUSH
22599: LD_EXP 88
22603: PUSH
22604: LD_VAR 0 4
22608: ARRAY
22609: PPUSH
22610: LD_VAR 0 3
22614: PPUSH
22615: CALL_OW 3
22619: PPUSH
22620: CALL_OW 1
22624: ST_TO_ADDR
// end ; end ;
22625: GO 22454
22627: POP
22628: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22629: LD_VAR 0 1
22633: PPUSH
22634: LD_EXP 88
22638: PUSH
22639: LD_VAR 0 4
22643: ARRAY
22644: PUSH
22645: LD_INT 0
22647: PLUS
22648: PPUSH
22649: CALL_OW 505
// end ;
22653: LD_VAR 0 2
22657: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22658: LD_INT 0
22660: PPUSH
22661: PPUSH
22662: PPUSH
22663: PPUSH
// if not hack in hackTanks then
22664: LD_VAR 0 1
22668: PUSH
22669: LD_EXP 87
22673: IN
22674: NOT
22675: IFFALSE 22679
// exit ;
22677: GO 22764
// index := GetElementIndex ( hackTanks , hack ) ;
22679: LD_ADDR_VAR 0 5
22683: PUSH
22684: LD_EXP 87
22688: PPUSH
22689: LD_VAR 0 1
22693: PPUSH
22694: CALL 29707 0 2
22698: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22699: LD_ADDR_VAR 0 4
22703: PUSH
22704: DOUBLE
22705: LD_INT 1
22707: DEC
22708: ST_TO_ADDR
22709: LD_EXP 88
22713: PUSH
22714: LD_VAR 0 5
22718: ARRAY
22719: PUSH
22720: FOR_TO
22721: IFFALSE 22762
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22723: LD_EXP 88
22727: PUSH
22728: LD_VAR 0 5
22732: ARRAY
22733: PUSH
22734: LD_VAR 0 4
22738: ARRAY
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PUSH
22744: LD_VAR 0 2
22748: EQUAL
22749: IFFALSE 22760
// KillUnit ( vehicle ) ;
22751: LD_VAR 0 2
22755: PPUSH
22756: CALL_OW 66
22760: GO 22720
22762: POP
22763: POP
// end ;
22764: LD_VAR 0 3
22768: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22769: LD_EXP 92
22773: NOT
22774: IFFALSE 22809
22776: GO 22778
22778: DISABLE
// begin initMiner := true ;
22779: LD_ADDR_EXP 92
22783: PUSH
22784: LD_INT 1
22786: ST_TO_ADDR
// minersList := [ ] ;
22787: LD_ADDR_EXP 93
22791: PUSH
22792: EMPTY
22793: ST_TO_ADDR
// minerMinesList := [ ] ;
22794: LD_ADDR_EXP 94
22798: PUSH
22799: EMPTY
22800: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22801: LD_ADDR_EXP 95
22805: PUSH
22806: LD_INT 5
22808: ST_TO_ADDR
// end ;
22809: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22810: LD_EXP 92
22814: PUSH
22815: LD_INT 34
22817: PUSH
22818: LD_EXP 14
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PPUSH
22827: CALL_OW 69
22831: AND
22832: IFFALSE 23295
22834: GO 22836
22836: DISABLE
22837: LD_INT 0
22839: PPUSH
22840: PPUSH
22841: PPUSH
22842: PPUSH
// begin enable ;
22843: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22844: LD_ADDR_VAR 0 1
22848: PUSH
22849: LD_INT 34
22851: PUSH
22852: LD_EXP 14
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: PUSH
22866: FOR_IN
22867: IFFALSE 22939
// begin if not i in minersList then
22869: LD_VAR 0 1
22873: PUSH
22874: LD_EXP 93
22878: IN
22879: NOT
22880: IFFALSE 22937
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22882: LD_ADDR_EXP 93
22886: PUSH
22887: LD_EXP 93
22891: PPUSH
22892: LD_EXP 93
22896: PUSH
22897: LD_INT 1
22899: PLUS
22900: PPUSH
22901: LD_VAR 0 1
22905: PPUSH
22906: CALL_OW 1
22910: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22911: LD_ADDR_EXP 94
22915: PUSH
22916: LD_EXP 94
22920: PPUSH
22921: LD_EXP 94
22925: PUSH
22926: LD_INT 1
22928: PLUS
22929: PPUSH
22930: EMPTY
22931: PPUSH
22932: CALL_OW 1
22936: ST_TO_ADDR
// end end ;
22937: GO 22866
22939: POP
22940: POP
// for i := minerMinesList downto 1 do
22941: LD_ADDR_VAR 0 1
22945: PUSH
22946: DOUBLE
22947: LD_EXP 94
22951: INC
22952: ST_TO_ADDR
22953: LD_INT 1
22955: PUSH
22956: FOR_DOWNTO
22957: IFFALSE 23293
// begin if IsLive ( minersList [ i ] ) then
22959: LD_EXP 93
22963: PUSH
22964: LD_VAR 0 1
22968: ARRAY
22969: PPUSH
22970: CALL_OW 300
22974: IFFALSE 23002
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22976: LD_EXP 93
22980: PUSH
22981: LD_VAR 0 1
22985: ARRAY
22986: PPUSH
22987: LD_EXP 94
22991: PUSH
22992: LD_VAR 0 1
22996: ARRAY
22997: PPUSH
22998: CALL_OW 505
// if not minerMinesList [ i ] then
23002: LD_EXP 94
23006: PUSH
23007: LD_VAR 0 1
23011: ARRAY
23012: NOT
23013: IFFALSE 23017
// continue ;
23015: GO 22956
// for j := minerMinesList [ i ] downto 1 do
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: DOUBLE
23023: LD_EXP 94
23027: PUSH
23028: LD_VAR 0 1
23032: ARRAY
23033: INC
23034: ST_TO_ADDR
23035: LD_INT 1
23037: PUSH
23038: FOR_DOWNTO
23039: IFFALSE 23289
// begin side := GetSide ( minersList [ i ] ) ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: LD_EXP 93
23050: PUSH
23051: LD_VAR 0 1
23055: ARRAY
23056: PPUSH
23057: CALL_OW 255
23061: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23062: LD_ADDR_VAR 0 4
23066: PUSH
23067: LD_EXP 94
23071: PUSH
23072: LD_VAR 0 1
23076: ARRAY
23077: PUSH
23078: LD_VAR 0 2
23082: ARRAY
23083: PUSH
23084: LD_INT 1
23086: ARRAY
23087: PPUSH
23088: LD_EXP 94
23092: PUSH
23093: LD_VAR 0 1
23097: ARRAY
23098: PUSH
23099: LD_VAR 0 2
23103: ARRAY
23104: PUSH
23105: LD_INT 2
23107: ARRAY
23108: PPUSH
23109: CALL_OW 428
23113: ST_TO_ADDR
// if not tmp then
23114: LD_VAR 0 4
23118: NOT
23119: IFFALSE 23123
// continue ;
23121: GO 23038
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23123: LD_VAR 0 4
23127: PUSH
23128: LD_INT 81
23130: PUSH
23131: LD_VAR 0 3
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PPUSH
23140: CALL_OW 69
23144: IN
23145: PUSH
23146: LD_EXP 94
23150: PUSH
23151: LD_VAR 0 1
23155: ARRAY
23156: PUSH
23157: LD_VAR 0 2
23161: ARRAY
23162: PUSH
23163: LD_INT 1
23165: ARRAY
23166: PPUSH
23167: LD_EXP 94
23171: PUSH
23172: LD_VAR 0 1
23176: ARRAY
23177: PUSH
23178: LD_VAR 0 2
23182: ARRAY
23183: PUSH
23184: LD_INT 2
23186: ARRAY
23187: PPUSH
23188: CALL_OW 458
23192: AND
23193: IFFALSE 23287
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23195: LD_EXP 94
23199: PUSH
23200: LD_VAR 0 1
23204: ARRAY
23205: PUSH
23206: LD_VAR 0 2
23210: ARRAY
23211: PUSH
23212: LD_INT 1
23214: ARRAY
23215: PPUSH
23216: LD_EXP 94
23220: PUSH
23221: LD_VAR 0 1
23225: ARRAY
23226: PUSH
23227: LD_VAR 0 2
23231: ARRAY
23232: PUSH
23233: LD_INT 2
23235: ARRAY
23236: PPUSH
23237: LD_VAR 0 3
23241: PPUSH
23242: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23246: LD_ADDR_EXP 94
23250: PUSH
23251: LD_EXP 94
23255: PPUSH
23256: LD_VAR 0 1
23260: PPUSH
23261: LD_EXP 94
23265: PUSH
23266: LD_VAR 0 1
23270: ARRAY
23271: PPUSH
23272: LD_VAR 0 2
23276: PPUSH
23277: CALL_OW 3
23281: PPUSH
23282: CALL_OW 1
23286: ST_TO_ADDR
// end ; end ;
23287: GO 23038
23289: POP
23290: POP
// end ;
23291: GO 22956
23293: POP
23294: POP
// end ;
23295: PPOPN 4
23297: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23298: LD_INT 0
23300: PPUSH
23301: PPUSH
// result := false ;
23302: LD_ADDR_VAR 0 4
23306: PUSH
23307: LD_INT 0
23309: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23310: LD_VAR 0 1
23314: PPUSH
23315: CALL_OW 264
23319: PUSH
23320: LD_EXP 14
23324: EQUAL
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23570
// index := GetElementIndex ( minersList , unit ) ;
23330: LD_ADDR_VAR 0 5
23334: PUSH
23335: LD_EXP 93
23339: PPUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL 29707 0 2
23349: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23350: LD_EXP 94
23354: PUSH
23355: LD_VAR 0 5
23359: ARRAY
23360: PUSH
23361: LD_EXP 95
23365: GREATEREQUAL
23366: IFFALSE 23370
// exit ;
23368: GO 23570
// ComMoveXY ( unit , x , y ) ;
23370: LD_VAR 0 1
23374: PPUSH
23375: LD_VAR 0 2
23379: PPUSH
23380: LD_VAR 0 3
23384: PPUSH
23385: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23389: LD_INT 35
23391: PPUSH
23392: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_VAR 0 2
23405: PPUSH
23406: LD_VAR 0 3
23410: PPUSH
23411: CALL 60993 0 3
23415: NOT
23416: PUSH
23417: LD_VAR 0 1
23421: PPUSH
23422: CALL_OW 314
23426: AND
23427: IFFALSE 23431
// exit ;
23429: GO 23570
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23431: LD_VAR 0 2
23435: PPUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: CALL_OW 428
23445: PUSH
23446: LD_VAR 0 1
23450: EQUAL
23451: PUSH
23452: LD_VAR 0 1
23456: PPUSH
23457: CALL_OW 314
23461: NOT
23462: AND
23463: IFFALSE 23389
// PlaySoundXY ( x , y , PlantMine ) ;
23465: LD_VAR 0 2
23469: PPUSH
23470: LD_VAR 0 3
23474: PPUSH
23475: LD_STRING PlantMine
23477: PPUSH
23478: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23482: LD_VAR 0 2
23486: PPUSH
23487: LD_VAR 0 3
23491: PPUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL_OW 255
23501: PPUSH
23502: LD_INT 0
23504: PPUSH
23505: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23509: LD_ADDR_EXP 94
23513: PUSH
23514: LD_EXP 94
23518: PPUSH
23519: LD_VAR 0 5
23523: PUSH
23524: LD_EXP 94
23528: PUSH
23529: LD_VAR 0 5
23533: ARRAY
23534: PUSH
23535: LD_INT 1
23537: PLUS
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PPUSH
23543: LD_VAR 0 2
23547: PUSH
23548: LD_VAR 0 3
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL 29922 0 3
23561: ST_TO_ADDR
// result := true ;
23562: LD_ADDR_VAR 0 4
23566: PUSH
23567: LD_INT 1
23569: ST_TO_ADDR
// end ;
23570: LD_VAR 0 4
23574: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
23579: PPUSH
// if not unit in minersList then
23580: LD_VAR 0 1
23584: PUSH
23585: LD_EXP 93
23589: IN
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 23987
// index := GetElementIndex ( minersList , unit ) ;
23595: LD_ADDR_VAR 0 6
23599: PUSH
23600: LD_EXP 93
23604: PPUSH
23605: LD_VAR 0 1
23609: PPUSH
23610: CALL 29707 0 2
23614: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23615: LD_ADDR_VAR 0 5
23619: PUSH
23620: DOUBLE
23621: LD_EXP 94
23625: PUSH
23626: LD_VAR 0 6
23630: ARRAY
23631: INC
23632: ST_TO_ADDR
23633: LD_INT 1
23635: PUSH
23636: FOR_DOWNTO
23637: IFFALSE 23798
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23639: LD_EXP 94
23643: PUSH
23644: LD_VAR 0 6
23648: ARRAY
23649: PUSH
23650: LD_VAR 0 5
23654: ARRAY
23655: PUSH
23656: LD_INT 1
23658: ARRAY
23659: PUSH
23660: LD_VAR 0 2
23664: EQUAL
23665: PUSH
23666: LD_EXP 94
23670: PUSH
23671: LD_VAR 0 6
23675: ARRAY
23676: PUSH
23677: LD_VAR 0 5
23681: ARRAY
23682: PUSH
23683: LD_INT 2
23685: ARRAY
23686: PUSH
23687: LD_VAR 0 3
23691: EQUAL
23692: AND
23693: IFFALSE 23796
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23695: LD_EXP 94
23699: PUSH
23700: LD_VAR 0 6
23704: ARRAY
23705: PUSH
23706: LD_VAR 0 5
23710: ARRAY
23711: PUSH
23712: LD_INT 1
23714: ARRAY
23715: PPUSH
23716: LD_EXP 94
23720: PUSH
23721: LD_VAR 0 6
23725: ARRAY
23726: PUSH
23727: LD_VAR 0 5
23731: ARRAY
23732: PUSH
23733: LD_INT 2
23735: ARRAY
23736: PPUSH
23737: LD_VAR 0 1
23741: PPUSH
23742: CALL_OW 255
23746: PPUSH
23747: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23751: LD_ADDR_EXP 94
23755: PUSH
23756: LD_EXP 94
23760: PPUSH
23761: LD_VAR 0 6
23765: PPUSH
23766: LD_EXP 94
23770: PUSH
23771: LD_VAR 0 6
23775: ARRAY
23776: PPUSH
23777: LD_VAR 0 5
23781: PPUSH
23782: CALL_OW 3
23786: PPUSH
23787: CALL_OW 1
23791: ST_TO_ADDR
// exit ;
23792: POP
23793: POP
23794: GO 23987
// end ; end ;
23796: GO 23636
23798: POP
23799: POP
// for i := minerMinesList [ index ] downto 1 do
23800: LD_ADDR_VAR 0 5
23804: PUSH
23805: DOUBLE
23806: LD_EXP 94
23810: PUSH
23811: LD_VAR 0 6
23815: ARRAY
23816: INC
23817: ST_TO_ADDR
23818: LD_INT 1
23820: PUSH
23821: FOR_DOWNTO
23822: IFFALSE 23985
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23824: LD_EXP 94
23828: PUSH
23829: LD_VAR 0 6
23833: ARRAY
23834: PUSH
23835: LD_VAR 0 5
23839: ARRAY
23840: PUSH
23841: LD_INT 1
23843: ARRAY
23844: PPUSH
23845: LD_EXP 94
23849: PUSH
23850: LD_VAR 0 6
23854: ARRAY
23855: PUSH
23856: LD_VAR 0 5
23860: ARRAY
23861: PUSH
23862: LD_INT 2
23864: ARRAY
23865: PPUSH
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: CALL_OW 298
23880: PUSH
23881: LD_INT 6
23883: LESS
23884: IFFALSE 23983
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23886: LD_EXP 94
23890: PUSH
23891: LD_VAR 0 6
23895: ARRAY
23896: PUSH
23897: LD_VAR 0 5
23901: ARRAY
23902: PUSH
23903: LD_INT 1
23905: ARRAY
23906: PPUSH
23907: LD_EXP 94
23911: PUSH
23912: LD_VAR 0 6
23916: ARRAY
23917: PUSH
23918: LD_VAR 0 5
23922: ARRAY
23923: PUSH
23924: LD_INT 2
23926: ARRAY
23927: PPUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 255
23937: PPUSH
23938: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23942: LD_ADDR_EXP 94
23946: PUSH
23947: LD_EXP 94
23951: PPUSH
23952: LD_VAR 0 6
23956: PPUSH
23957: LD_EXP 94
23961: PUSH
23962: LD_VAR 0 6
23966: ARRAY
23967: PPUSH
23968: LD_VAR 0 5
23972: PPUSH
23973: CALL_OW 3
23977: PPUSH
23978: CALL_OW 1
23982: ST_TO_ADDR
// end ; end ;
23983: GO 23821
23985: POP
23986: POP
// end ;
23987: LD_VAR 0 4
23991: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
23999: PPUSH
24000: PPUSH
24001: PPUSH
24002: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24003: LD_VAR 0 1
24007: PPUSH
24008: CALL_OW 264
24012: PUSH
24013: LD_EXP 14
24017: EQUAL
24018: NOT
24019: PUSH
24020: LD_VAR 0 1
24024: PUSH
24025: LD_EXP 93
24029: IN
24030: NOT
24031: OR
24032: IFFALSE 24036
// exit ;
24034: GO 24358
// index := GetElementIndex ( minersList , unit ) ;
24036: LD_ADDR_VAR 0 6
24040: PUSH
24041: LD_EXP 93
24045: PPUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL 29707 0 2
24055: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24056: LD_ADDR_VAR 0 8
24060: PUSH
24061: LD_EXP 95
24065: PUSH
24066: LD_EXP 94
24070: PUSH
24071: LD_VAR 0 6
24075: ARRAY
24076: MINUS
24077: ST_TO_ADDR
// if not minesFreeAmount then
24078: LD_VAR 0 8
24082: NOT
24083: IFFALSE 24087
// exit ;
24085: GO 24358
// tmp := [ ] ;
24087: LD_ADDR_VAR 0 7
24091: PUSH
24092: EMPTY
24093: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24094: LD_ADDR_VAR 0 5
24098: PUSH
24099: DOUBLE
24100: LD_INT 1
24102: DEC
24103: ST_TO_ADDR
24104: LD_VAR 0 8
24108: PUSH
24109: FOR_TO
24110: IFFALSE 24305
// begin _d := rand ( 0 , 5 ) ;
24112: LD_ADDR_VAR 0 11
24116: PUSH
24117: LD_INT 0
24119: PPUSH
24120: LD_INT 5
24122: PPUSH
24123: CALL_OW 12
24127: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24128: LD_ADDR_VAR 0 12
24132: PUSH
24133: LD_INT 2
24135: PPUSH
24136: LD_INT 6
24138: PPUSH
24139: CALL_OW 12
24143: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24144: LD_ADDR_VAR 0 9
24148: PUSH
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_VAR 0 11
24158: PPUSH
24159: LD_VAR 0 12
24163: PPUSH
24164: CALL_OW 272
24168: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24169: LD_ADDR_VAR 0 10
24173: PUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: LD_VAR 0 11
24183: PPUSH
24184: LD_VAR 0 12
24188: PPUSH
24189: CALL_OW 273
24193: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24194: LD_VAR 0 9
24198: PPUSH
24199: LD_VAR 0 10
24203: PPUSH
24204: CALL_OW 488
24208: PUSH
24209: LD_VAR 0 9
24213: PUSH
24214: LD_VAR 0 10
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_VAR 0 7
24227: IN
24228: NOT
24229: AND
24230: PUSH
24231: LD_VAR 0 9
24235: PPUSH
24236: LD_VAR 0 10
24240: PPUSH
24241: CALL_OW 458
24245: NOT
24246: AND
24247: IFFALSE 24289
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24249: LD_ADDR_VAR 0 7
24253: PUSH
24254: LD_VAR 0 7
24258: PPUSH
24259: LD_VAR 0 7
24263: PUSH
24264: LD_INT 1
24266: PLUS
24267: PPUSH
24268: LD_VAR 0 9
24272: PUSH
24273: LD_VAR 0 10
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 1
24286: ST_TO_ADDR
24287: GO 24303
// i := i - 1 ;
24289: LD_ADDR_VAR 0 5
24293: PUSH
24294: LD_VAR 0 5
24298: PUSH
24299: LD_INT 1
24301: MINUS
24302: ST_TO_ADDR
// end ;
24303: GO 24109
24305: POP
24306: POP
// for i in tmp do
24307: LD_ADDR_VAR 0 5
24311: PUSH
24312: LD_VAR 0 7
24316: PUSH
24317: FOR_IN
24318: IFFALSE 24356
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24320: LD_VAR 0 1
24324: PPUSH
24325: LD_VAR 0 5
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: PPUSH
24334: LD_VAR 0 5
24338: PUSH
24339: LD_INT 2
24341: ARRAY
24342: PPUSH
24343: CALL 23298 0 3
24347: NOT
24348: IFFALSE 24354
// exit ;
24350: POP
24351: POP
24352: GO 24358
24354: GO 24317
24356: POP
24357: POP
// end ;
24358: LD_VAR 0 4
24362: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24363: LD_INT 0
24365: PPUSH
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
24370: PPUSH
24371: PPUSH
// if not GetClass ( unit ) = class_sniper then
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 257
24381: PUSH
24382: LD_INT 5
24384: EQUAL
24385: NOT
24386: IFFALSE 24390
// exit ;
24388: GO 24778
// dist := 8 ;
24390: LD_ADDR_VAR 0 5
24394: PUSH
24395: LD_INT 8
24397: ST_TO_ADDR
// viewRange := 12 ;
24398: LD_ADDR_VAR 0 7
24402: PUSH
24403: LD_INT 12
24405: ST_TO_ADDR
// side := GetSide ( unit ) ;
24406: LD_ADDR_VAR 0 6
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 255
24420: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24421: LD_INT 61
24423: PPUSH
24424: LD_VAR 0 6
24428: PPUSH
24429: CALL_OW 321
24433: PUSH
24434: LD_INT 2
24436: EQUAL
24437: IFFALSE 24447
// viewRange := 16 ;
24439: LD_ADDR_VAR 0 7
24443: PUSH
24444: LD_INT 16
24446: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24447: LD_VAR 0 1
24451: PPUSH
24452: LD_VAR 0 2
24456: PPUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: CALL_OW 297
24466: PUSH
24467: LD_VAR 0 5
24471: GREATER
24472: IFFALSE 24551
// begin ComMoveXY ( unit , x , y ) ;
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_VAR 0 2
24483: PPUSH
24484: LD_VAR 0 3
24488: PPUSH
24489: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24493: LD_INT 35
24495: PPUSH
24496: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24500: LD_VAR 0 1
24504: PPUSH
24505: LD_VAR 0 2
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: CALL 60993 0 3
24519: NOT
24520: IFFALSE 24524
// exit ;
24522: GO 24778
// until GetDistUnitXY ( unit , x , y ) < dist ;
24524: LD_VAR 0 1
24528: PPUSH
24529: LD_VAR 0 2
24533: PPUSH
24534: LD_VAR 0 3
24538: PPUSH
24539: CALL_OW 297
24543: PUSH
24544: LD_VAR 0 5
24548: LESS
24549: IFFALSE 24493
// end ; ComTurnXY ( unit , x , y ) ;
24551: LD_VAR 0 1
24555: PPUSH
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: CALL_OW 118
// wait ( 5 ) ;
24570: LD_INT 5
24572: PPUSH
24573: CALL_OW 67
// _d := GetDir ( unit ) ;
24577: LD_ADDR_VAR 0 10
24581: PUSH
24582: LD_VAR 0 1
24586: PPUSH
24587: CALL_OW 254
24591: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24592: LD_ADDR_VAR 0 8
24596: PUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 250
24606: PPUSH
24607: LD_VAR 0 10
24611: PPUSH
24612: LD_VAR 0 5
24616: PPUSH
24617: CALL_OW 272
24621: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24622: LD_ADDR_VAR 0 9
24626: PUSH
24627: LD_VAR 0 1
24631: PPUSH
24632: CALL_OW 251
24636: PPUSH
24637: LD_VAR 0 10
24641: PPUSH
24642: LD_VAR 0 5
24646: PPUSH
24647: CALL_OW 273
24651: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24652: LD_VAR 0 8
24656: PPUSH
24657: LD_VAR 0 9
24661: PPUSH
24662: CALL_OW 488
24666: NOT
24667: IFFALSE 24671
// exit ;
24669: GO 24778
// ComAnimCustom ( unit , 1 ) ;
24671: LD_VAR 0 1
24675: PPUSH
24676: LD_INT 1
24678: PPUSH
24679: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24683: LD_VAR 0 8
24687: PPUSH
24688: LD_VAR 0 9
24692: PPUSH
24693: LD_VAR 0 6
24697: PPUSH
24698: LD_VAR 0 7
24702: PPUSH
24703: CALL_OW 330
// repeat wait ( 1 ) ;
24707: LD_INT 1
24709: PPUSH
24710: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24714: LD_VAR 0 1
24718: PPUSH
24719: CALL_OW 316
24723: PUSH
24724: LD_VAR 0 1
24728: PPUSH
24729: CALL_OW 314
24733: OR
24734: PUSH
24735: LD_VAR 0 1
24739: PPUSH
24740: CALL_OW 302
24744: NOT
24745: OR
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 301
24756: OR
24757: IFFALSE 24707
// RemoveSeeing ( _x , _y , side ) ;
24759: LD_VAR 0 8
24763: PPUSH
24764: LD_VAR 0 9
24768: PPUSH
24769: LD_VAR 0 6
24773: PPUSH
24774: CALL_OW 331
// end ; end_of_file
24778: LD_VAR 0 4
24782: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24783: LD_INT 0
24785: PPUSH
24786: PPUSH
// if exist_mode then
24787: LD_VAR 0 2
24791: IFFALSE 24816
// unit := CreateCharacter ( prefix & ident ) else
24793: LD_ADDR_VAR 0 5
24797: PUSH
24798: LD_VAR 0 3
24802: PUSH
24803: LD_VAR 0 1
24807: STR
24808: PPUSH
24809: CALL_OW 34
24813: ST_TO_ADDR
24814: GO 24831
// unit := NewCharacter ( ident ) ;
24816: LD_ADDR_VAR 0 5
24820: PUSH
24821: LD_VAR 0 1
24825: PPUSH
24826: CALL_OW 25
24830: ST_TO_ADDR
// result := unit ;
24831: LD_ADDR_VAR 0 4
24835: PUSH
24836: LD_VAR 0 5
24840: ST_TO_ADDR
// end ;
24841: LD_VAR 0 4
24845: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24846: LD_INT 0
24848: PPUSH
24849: PPUSH
// if not side or not nation then
24850: LD_VAR 0 1
24854: NOT
24855: PUSH
24856: LD_VAR 0 2
24860: NOT
24861: OR
24862: IFFALSE 24866
// exit ;
24864: GO 25634
// case nation of nation_american :
24866: LD_VAR 0 2
24870: PUSH
24871: LD_INT 1
24873: DOUBLE
24874: EQUAL
24875: IFTRUE 24879
24877: GO 25093
24879: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24880: LD_ADDR_VAR 0 4
24884: PUSH
24885: LD_INT 35
24887: PUSH
24888: LD_INT 45
24890: PUSH
24891: LD_INT 46
24893: PUSH
24894: LD_INT 47
24896: PUSH
24897: LD_INT 82
24899: PUSH
24900: LD_INT 83
24902: PUSH
24903: LD_INT 84
24905: PUSH
24906: LD_INT 85
24908: PUSH
24909: LD_INT 86
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: LD_INT 6
24920: PUSH
24921: LD_INT 15
24923: PUSH
24924: LD_INT 16
24926: PUSH
24927: LD_INT 7
24929: PUSH
24930: LD_INT 12
24932: PUSH
24933: LD_INT 13
24935: PUSH
24936: LD_INT 10
24938: PUSH
24939: LD_INT 14
24941: PUSH
24942: LD_INT 20
24944: PUSH
24945: LD_INT 21
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_INT 25
24953: PUSH
24954: LD_INT 32
24956: PUSH
24957: LD_INT 27
24959: PUSH
24960: LD_INT 36
24962: PUSH
24963: LD_INT 69
24965: PUSH
24966: LD_INT 39
24968: PUSH
24969: LD_INT 34
24971: PUSH
24972: LD_INT 40
24974: PUSH
24975: LD_INT 48
24977: PUSH
24978: LD_INT 49
24980: PUSH
24981: LD_INT 50
24983: PUSH
24984: LD_INT 51
24986: PUSH
24987: LD_INT 52
24989: PUSH
24990: LD_INT 53
24992: PUSH
24993: LD_INT 54
24995: PUSH
24996: LD_INT 55
24998: PUSH
24999: LD_INT 56
25001: PUSH
25002: LD_INT 57
25004: PUSH
25005: LD_INT 58
25007: PUSH
25008: LD_INT 59
25010: PUSH
25011: LD_INT 60
25013: PUSH
25014: LD_INT 61
25016: PUSH
25017: LD_INT 62
25019: PUSH
25020: LD_INT 80
25022: PUSH
25023: LD_INT 82
25025: PUSH
25026: LD_INT 83
25028: PUSH
25029: LD_INT 84
25031: PUSH
25032: LD_INT 85
25034: PUSH
25035: LD_INT 86
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: ST_TO_ADDR
25091: GO 25558
25093: LD_INT 2
25095: DOUBLE
25096: EQUAL
25097: IFTRUE 25101
25099: GO 25327
25101: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25102: LD_ADDR_VAR 0 4
25106: PUSH
25107: LD_INT 35
25109: PUSH
25110: LD_INT 45
25112: PUSH
25113: LD_INT 46
25115: PUSH
25116: LD_INT 47
25118: PUSH
25119: LD_INT 82
25121: PUSH
25122: LD_INT 83
25124: PUSH
25125: LD_INT 84
25127: PUSH
25128: LD_INT 85
25130: PUSH
25131: LD_INT 87
25133: PUSH
25134: LD_INT 70
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: LD_INT 11
25142: PUSH
25143: LD_INT 3
25145: PUSH
25146: LD_INT 4
25148: PUSH
25149: LD_INT 5
25151: PUSH
25152: LD_INT 6
25154: PUSH
25155: LD_INT 15
25157: PUSH
25158: LD_INT 18
25160: PUSH
25161: LD_INT 7
25163: PUSH
25164: LD_INT 17
25166: PUSH
25167: LD_INT 8
25169: PUSH
25170: LD_INT 20
25172: PUSH
25173: LD_INT 21
25175: PUSH
25176: LD_INT 22
25178: PUSH
25179: LD_INT 72
25181: PUSH
25182: LD_INT 26
25184: PUSH
25185: LD_INT 69
25187: PUSH
25188: LD_INT 39
25190: PUSH
25191: LD_INT 40
25193: PUSH
25194: LD_INT 41
25196: PUSH
25197: LD_INT 42
25199: PUSH
25200: LD_INT 43
25202: PUSH
25203: LD_INT 48
25205: PUSH
25206: LD_INT 49
25208: PUSH
25209: LD_INT 50
25211: PUSH
25212: LD_INT 51
25214: PUSH
25215: LD_INT 52
25217: PUSH
25218: LD_INT 53
25220: PUSH
25221: LD_INT 54
25223: PUSH
25224: LD_INT 55
25226: PUSH
25227: LD_INT 56
25229: PUSH
25230: LD_INT 60
25232: PUSH
25233: LD_INT 61
25235: PUSH
25236: LD_INT 62
25238: PUSH
25239: LD_INT 66
25241: PUSH
25242: LD_INT 67
25244: PUSH
25245: LD_INT 68
25247: PUSH
25248: LD_INT 81
25250: PUSH
25251: LD_INT 82
25253: PUSH
25254: LD_INT 83
25256: PUSH
25257: LD_INT 84
25259: PUSH
25260: LD_INT 85
25262: PUSH
25263: LD_INT 87
25265: PUSH
25266: LD_INT 88
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 25558
25327: LD_INT 3
25329: DOUBLE
25330: EQUAL
25331: IFTRUE 25335
25333: GO 25557
25335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25336: LD_ADDR_VAR 0 4
25340: PUSH
25341: LD_INT 46
25343: PUSH
25344: LD_INT 47
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 82
25355: PUSH
25356: LD_INT 83
25358: PUSH
25359: LD_INT 84
25361: PUSH
25362: LD_INT 85
25364: PUSH
25365: LD_INT 86
25367: PUSH
25368: LD_INT 11
25370: PUSH
25371: LD_INT 9
25373: PUSH
25374: LD_INT 20
25376: PUSH
25377: LD_INT 19
25379: PUSH
25380: LD_INT 21
25382: PUSH
25383: LD_INT 24
25385: PUSH
25386: LD_INT 22
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 28
25394: PUSH
25395: LD_INT 29
25397: PUSH
25398: LD_INT 30
25400: PUSH
25401: LD_INT 31
25403: PUSH
25404: LD_INT 37
25406: PUSH
25407: LD_INT 38
25409: PUSH
25410: LD_INT 32
25412: PUSH
25413: LD_INT 27
25415: PUSH
25416: LD_INT 33
25418: PUSH
25419: LD_INT 69
25421: PUSH
25422: LD_INT 39
25424: PUSH
25425: LD_INT 34
25427: PUSH
25428: LD_INT 40
25430: PUSH
25431: LD_INT 71
25433: PUSH
25434: LD_INT 23
25436: PUSH
25437: LD_INT 44
25439: PUSH
25440: LD_INT 48
25442: PUSH
25443: LD_INT 49
25445: PUSH
25446: LD_INT 50
25448: PUSH
25449: LD_INT 51
25451: PUSH
25452: LD_INT 52
25454: PUSH
25455: LD_INT 53
25457: PUSH
25458: LD_INT 54
25460: PUSH
25461: LD_INT 55
25463: PUSH
25464: LD_INT 56
25466: PUSH
25467: LD_INT 57
25469: PUSH
25470: LD_INT 58
25472: PUSH
25473: LD_INT 59
25475: PUSH
25476: LD_INT 63
25478: PUSH
25479: LD_INT 64
25481: PUSH
25482: LD_INT 65
25484: PUSH
25485: LD_INT 82
25487: PUSH
25488: LD_INT 83
25490: PUSH
25491: LD_INT 84
25493: PUSH
25494: LD_INT 85
25496: PUSH
25497: LD_INT 86
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: ST_TO_ADDR
25555: GO 25558
25557: POP
// if state > - 1 and state < 3 then
25558: LD_VAR 0 3
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: GREATER
25567: PUSH
25568: LD_VAR 0 3
25572: PUSH
25573: LD_INT 3
25575: LESS
25576: AND
25577: IFFALSE 25634
// for i in result do
25579: LD_ADDR_VAR 0 5
25583: PUSH
25584: LD_VAR 0 4
25588: PUSH
25589: FOR_IN
25590: IFFALSE 25632
// if GetTech ( i , side ) <> state then
25592: LD_VAR 0 5
25596: PPUSH
25597: LD_VAR 0 1
25601: PPUSH
25602: CALL_OW 321
25606: PUSH
25607: LD_VAR 0 3
25611: NONEQUAL
25612: IFFALSE 25630
// result := result diff i ;
25614: LD_ADDR_VAR 0 4
25618: PUSH
25619: LD_VAR 0 4
25623: PUSH
25624: LD_VAR 0 5
25628: DIFF
25629: ST_TO_ADDR
25630: GO 25589
25632: POP
25633: POP
// end ;
25634: LD_VAR 0 4
25638: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
25643: PPUSH
// result := true ;
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_INT 1
25651: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25652: LD_ADDR_VAR 0 5
25656: PUSH
25657: LD_VAR 0 2
25661: PPUSH
25662: CALL_OW 480
25666: ST_TO_ADDR
// if not tmp then
25667: LD_VAR 0 5
25671: NOT
25672: IFFALSE 25676
// exit ;
25674: GO 25725
// for i in tmp do
25676: LD_ADDR_VAR 0 4
25680: PUSH
25681: LD_VAR 0 5
25685: PUSH
25686: FOR_IN
25687: IFFALSE 25723
// if GetTech ( i , side ) <> state_researched then
25689: LD_VAR 0 4
25693: PPUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 321
25703: PUSH
25704: LD_INT 2
25706: NONEQUAL
25707: IFFALSE 25721
// begin result := false ;
25709: LD_ADDR_VAR 0 3
25713: PUSH
25714: LD_INT 0
25716: ST_TO_ADDR
// exit ;
25717: POP
25718: POP
25719: GO 25725
// end ;
25721: GO 25686
25723: POP
25724: POP
// end ;
25725: LD_VAR 0 3
25729: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25730: LD_INT 0
25732: PPUSH
25733: PPUSH
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25745: LD_VAR 0 1
25749: NOT
25750: PUSH
25751: LD_VAR 0 1
25755: PPUSH
25756: CALL_OW 257
25760: PUSH
25761: LD_INT 9
25763: NONEQUAL
25764: OR
25765: IFFALSE 25769
// exit ;
25767: GO 26342
// side := GetSide ( unit ) ;
25769: LD_ADDR_VAR 0 9
25773: PUSH
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 255
25783: ST_TO_ADDR
// tech_space := tech_spacanom ;
25784: LD_ADDR_VAR 0 12
25788: PUSH
25789: LD_INT 29
25791: ST_TO_ADDR
// tech_time := tech_taurad ;
25792: LD_ADDR_VAR 0 13
25796: PUSH
25797: LD_INT 28
25799: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25800: LD_ADDR_VAR 0 11
25804: PUSH
25805: LD_VAR 0 1
25809: PPUSH
25810: CALL_OW 310
25814: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25815: LD_VAR 0 11
25819: PPUSH
25820: CALL_OW 247
25824: PUSH
25825: LD_INT 2
25827: EQUAL
25828: IFFALSE 25832
// exit ;
25830: GO 26342
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25832: LD_ADDR_VAR 0 8
25836: PUSH
25837: LD_INT 81
25839: PUSH
25840: LD_VAR 0 9
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: LD_INT 21
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PPUSH
25870: CALL_OW 69
25874: ST_TO_ADDR
// if not tmp then
25875: LD_VAR 0 8
25879: NOT
25880: IFFALSE 25884
// exit ;
25882: GO 26342
// if in_unit then
25884: LD_VAR 0 11
25888: IFFALSE 25912
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25890: LD_ADDR_VAR 0 10
25894: PUSH
25895: LD_VAR 0 8
25899: PPUSH
25900: LD_VAR 0 11
25904: PPUSH
25905: CALL_OW 74
25909: ST_TO_ADDR
25910: GO 25932
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25912: LD_ADDR_VAR 0 10
25916: PUSH
25917: LD_VAR 0 8
25921: PPUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 74
25931: ST_TO_ADDR
// if not enemy then
25932: LD_VAR 0 10
25936: NOT
25937: IFFALSE 25941
// exit ;
25939: GO 26342
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25941: LD_VAR 0 11
25945: PUSH
25946: LD_VAR 0 11
25950: PPUSH
25951: LD_VAR 0 10
25955: PPUSH
25956: CALL_OW 296
25960: PUSH
25961: LD_INT 13
25963: GREATER
25964: AND
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: LD_VAR 0 10
25975: PPUSH
25976: CALL_OW 296
25980: PUSH
25981: LD_INT 12
25983: GREATER
25984: OR
25985: IFFALSE 25989
// exit ;
25987: GO 26342
// missile := [ 1 ] ;
25989: LD_ADDR_VAR 0 14
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: EMPTY
25998: LIST
25999: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26000: LD_VAR 0 9
26004: PPUSH
26005: LD_VAR 0 12
26009: PPUSH
26010: CALL_OW 325
26014: IFFALSE 26043
// missile := Replace ( missile , missile + 1 , 2 ) ;
26016: LD_ADDR_VAR 0 14
26020: PUSH
26021: LD_VAR 0 14
26025: PPUSH
26026: LD_VAR 0 14
26030: PUSH
26031: LD_INT 1
26033: PLUS
26034: PPUSH
26035: LD_INT 2
26037: PPUSH
26038: CALL_OW 1
26042: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26043: LD_VAR 0 9
26047: PPUSH
26048: LD_VAR 0 13
26052: PPUSH
26053: CALL_OW 325
26057: PUSH
26058: LD_VAR 0 10
26062: PPUSH
26063: CALL_OW 255
26067: PPUSH
26068: LD_VAR 0 13
26072: PPUSH
26073: CALL_OW 325
26077: NOT
26078: AND
26079: IFFALSE 26108
// missile := Replace ( missile , missile + 1 , 3 ) ;
26081: LD_ADDR_VAR 0 14
26085: PUSH
26086: LD_VAR 0 14
26090: PPUSH
26091: LD_VAR 0 14
26095: PUSH
26096: LD_INT 1
26098: PLUS
26099: PPUSH
26100: LD_INT 3
26102: PPUSH
26103: CALL_OW 1
26107: ST_TO_ADDR
// if missile < 2 then
26108: LD_VAR 0 14
26112: PUSH
26113: LD_INT 2
26115: LESS
26116: IFFALSE 26120
// exit ;
26118: GO 26342
// x := GetX ( enemy ) ;
26120: LD_ADDR_VAR 0 4
26124: PUSH
26125: LD_VAR 0 10
26129: PPUSH
26130: CALL_OW 250
26134: ST_TO_ADDR
// y := GetY ( enemy ) ;
26135: LD_ADDR_VAR 0 5
26139: PUSH
26140: LD_VAR 0 10
26144: PPUSH
26145: CALL_OW 251
26149: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26150: LD_ADDR_VAR 0 6
26154: PUSH
26155: LD_VAR 0 4
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: CALL_OW 12
26171: PLUS
26172: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26173: LD_ADDR_VAR 0 7
26177: PUSH
26178: LD_VAR 0 5
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PPUSH
26187: LD_INT 1
26189: PPUSH
26190: CALL_OW 12
26194: PLUS
26195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26196: LD_VAR 0 6
26200: PPUSH
26201: LD_VAR 0 7
26205: PPUSH
26206: CALL_OW 488
26210: NOT
26211: IFFALSE 26233
// begin _x := x ;
26213: LD_ADDR_VAR 0 6
26217: PUSH
26218: LD_VAR 0 4
26222: ST_TO_ADDR
// _y := y ;
26223: LD_ADDR_VAR 0 7
26227: PUSH
26228: LD_VAR 0 5
26232: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26233: LD_ADDR_VAR 0 3
26237: PUSH
26238: LD_INT 1
26240: PPUSH
26241: LD_VAR 0 14
26245: PPUSH
26246: CALL_OW 12
26250: ST_TO_ADDR
// case i of 1 :
26251: LD_VAR 0 3
26255: PUSH
26256: LD_INT 1
26258: DOUBLE
26259: EQUAL
26260: IFTRUE 26264
26262: GO 26281
26264: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26265: LD_VAR 0 1
26269: PPUSH
26270: LD_VAR 0 10
26274: PPUSH
26275: CALL_OW 115
26279: GO 26342
26281: LD_INT 2
26283: DOUBLE
26284: EQUAL
26285: IFTRUE 26289
26287: GO 26311
26289: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26290: LD_VAR 0 1
26294: PPUSH
26295: LD_VAR 0 6
26299: PPUSH
26300: LD_VAR 0 7
26304: PPUSH
26305: CALL_OW 153
26309: GO 26342
26311: LD_INT 3
26313: DOUBLE
26314: EQUAL
26315: IFTRUE 26319
26317: GO 26341
26319: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26320: LD_VAR 0 1
26324: PPUSH
26325: LD_VAR 0 6
26329: PPUSH
26330: LD_VAR 0 7
26334: PPUSH
26335: CALL_OW 154
26339: GO 26342
26341: POP
// end ;
26342: LD_VAR 0 2
26346: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
// if not unit or not building then
26355: LD_VAR 0 1
26359: NOT
26360: PUSH
26361: LD_VAR 0 2
26365: NOT
26366: OR
26367: IFFALSE 26371
// exit ;
26369: GO 26529
// x := GetX ( building ) ;
26371: LD_ADDR_VAR 0 5
26375: PUSH
26376: LD_VAR 0 2
26380: PPUSH
26381: CALL_OW 250
26385: ST_TO_ADDR
// y := GetY ( building ) ;
26386: LD_ADDR_VAR 0 6
26390: PUSH
26391: LD_VAR 0 2
26395: PPUSH
26396: CALL_OW 251
26400: ST_TO_ADDR
// for i = 0 to 5 do
26401: LD_ADDR_VAR 0 4
26405: PUSH
26406: DOUBLE
26407: LD_INT 0
26409: DEC
26410: ST_TO_ADDR
26411: LD_INT 5
26413: PUSH
26414: FOR_TO
26415: IFFALSE 26527
// begin _x := ShiftX ( x , i , 3 ) ;
26417: LD_ADDR_VAR 0 7
26421: PUSH
26422: LD_VAR 0 5
26426: PPUSH
26427: LD_VAR 0 4
26431: PPUSH
26432: LD_INT 3
26434: PPUSH
26435: CALL_OW 272
26439: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26440: LD_ADDR_VAR 0 8
26444: PUSH
26445: LD_VAR 0 6
26449: PPUSH
26450: LD_VAR 0 4
26454: PPUSH
26455: LD_INT 3
26457: PPUSH
26458: CALL_OW 273
26462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26463: LD_VAR 0 7
26467: PPUSH
26468: LD_VAR 0 8
26472: PPUSH
26473: CALL_OW 488
26477: NOT
26478: IFFALSE 26482
// continue ;
26480: GO 26414
// if HexInfo ( _x , _y ) = 0 then
26482: LD_VAR 0 7
26486: PPUSH
26487: LD_VAR 0 8
26491: PPUSH
26492: CALL_OW 428
26496: PUSH
26497: LD_INT 0
26499: EQUAL
26500: IFFALSE 26525
// begin ComMoveXY ( unit , _x , _y ) ;
26502: LD_VAR 0 1
26506: PPUSH
26507: LD_VAR 0 7
26511: PPUSH
26512: LD_VAR 0 8
26516: PPUSH
26517: CALL_OW 111
// exit ;
26521: POP
26522: POP
26523: GO 26529
// end ; end ;
26525: GO 26414
26527: POP
26528: POP
// end ;
26529: LD_VAR 0 3
26533: RET
// export function ScanBase ( side , base_area ) ; begin
26534: LD_INT 0
26536: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26537: LD_ADDR_VAR 0 3
26541: PUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: LD_INT 81
26549: PUSH
26550: LD_VAR 0 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PPUSH
26559: CALL_OW 70
26563: ST_TO_ADDR
// end ;
26564: LD_VAR 0 3
26568: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
26573: PPUSH
26574: PPUSH
// result := false ;
26575: LD_ADDR_VAR 0 2
26579: PUSH
26580: LD_INT 0
26582: ST_TO_ADDR
// side := GetSide ( unit ) ;
26583: LD_ADDR_VAR 0 3
26587: PUSH
26588: LD_VAR 0 1
26592: PPUSH
26593: CALL_OW 255
26597: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26598: LD_ADDR_VAR 0 4
26602: PUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: CALL_OW 248
26612: ST_TO_ADDR
// case nat of 1 :
26613: LD_VAR 0 4
26617: PUSH
26618: LD_INT 1
26620: DOUBLE
26621: EQUAL
26622: IFTRUE 26626
26624: GO 26637
26626: POP
// tech := tech_lassight ; 2 :
26627: LD_ADDR_VAR 0 5
26631: PUSH
26632: LD_INT 12
26634: ST_TO_ADDR
26635: GO 26676
26637: LD_INT 2
26639: DOUBLE
26640: EQUAL
26641: IFTRUE 26645
26643: GO 26656
26645: POP
// tech := tech_mortar ; 3 :
26646: LD_ADDR_VAR 0 5
26650: PUSH
26651: LD_INT 41
26653: ST_TO_ADDR
26654: GO 26676
26656: LD_INT 3
26658: DOUBLE
26659: EQUAL
26660: IFTRUE 26664
26662: GO 26675
26664: POP
// tech := tech_bazooka ; end ;
26665: LD_ADDR_VAR 0 5
26669: PUSH
26670: LD_INT 44
26672: ST_TO_ADDR
26673: GO 26676
26675: POP
// if Researched ( side , tech ) then
26676: LD_VAR 0 3
26680: PPUSH
26681: LD_VAR 0 5
26685: PPUSH
26686: CALL_OW 325
26690: IFFALSE 26717
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26692: LD_ADDR_VAR 0 2
26696: PUSH
26697: LD_INT 5
26699: PUSH
26700: LD_INT 8
26702: PUSH
26703: LD_INT 9
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: PUSH
26711: LD_VAR 0 4
26715: ARRAY
26716: ST_TO_ADDR
// end ;
26717: LD_VAR 0 2
26721: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26722: LD_INT 0
26724: PPUSH
26725: PPUSH
26726: PPUSH
// if not mines then
26727: LD_VAR 0 2
26731: NOT
26732: IFFALSE 26736
// exit ;
26734: GO 26880
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26736: LD_ADDR_VAR 0 5
26740: PUSH
26741: LD_INT 81
26743: PUSH
26744: LD_VAR 0 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: LD_INT 21
26758: PUSH
26759: LD_INT 3
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PPUSH
26774: CALL_OW 69
26778: ST_TO_ADDR
// for i in mines do
26779: LD_ADDR_VAR 0 4
26783: PUSH
26784: LD_VAR 0 2
26788: PUSH
26789: FOR_IN
26790: IFFALSE 26878
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26792: LD_VAR 0 4
26796: PUSH
26797: LD_INT 1
26799: ARRAY
26800: PPUSH
26801: LD_VAR 0 4
26805: PUSH
26806: LD_INT 2
26808: ARRAY
26809: PPUSH
26810: CALL_OW 458
26814: NOT
26815: IFFALSE 26819
// continue ;
26817: GO 26789
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26819: LD_VAR 0 4
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: PPUSH
26828: LD_VAR 0 4
26832: PUSH
26833: LD_INT 2
26835: ARRAY
26836: PPUSH
26837: CALL_OW 428
26841: PUSH
26842: LD_VAR 0 5
26846: IN
26847: IFFALSE 26876
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26849: LD_VAR 0 4
26853: PUSH
26854: LD_INT 1
26856: ARRAY
26857: PPUSH
26858: LD_VAR 0 4
26862: PUSH
26863: LD_INT 2
26865: ARRAY
26866: PPUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 456
// end ;
26876: GO 26789
26878: POP
26879: POP
// end ;
26880: LD_VAR 0 3
26884: RET
// export function Count ( array ) ; var i ; begin
26885: LD_INT 0
26887: PPUSH
26888: PPUSH
// result := 0 ;
26889: LD_ADDR_VAR 0 2
26893: PUSH
26894: LD_INT 0
26896: ST_TO_ADDR
// for i in array do
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_VAR 0 1
26906: PUSH
26907: FOR_IN
26908: IFFALSE 26932
// if i then
26910: LD_VAR 0 3
26914: IFFALSE 26930
// result := result + 1 ;
26916: LD_ADDR_VAR 0 2
26920: PUSH
26921: LD_VAR 0 2
26925: PUSH
26926: LD_INT 1
26928: PLUS
26929: ST_TO_ADDR
26930: GO 26907
26932: POP
26933: POP
// end ;
26934: LD_VAR 0 2
26938: RET
// export function IsEmpty ( building ) ; begin
26939: LD_INT 0
26941: PPUSH
// if not building then
26942: LD_VAR 0 1
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 26994
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26951: LD_ADDR_VAR 0 2
26955: PUSH
26956: LD_VAR 0 1
26960: PUSH
26961: LD_INT 22
26963: PUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 255
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 58
26980: PUSH
26981: EMPTY
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 69
26992: IN
26993: ST_TO_ADDR
// end ;
26994: LD_VAR 0 2
26998: RET
// export function IsNotFull ( building ) ; var places ; begin
26999: LD_INT 0
27001: PPUSH
27002: PPUSH
// if not building then
27003: LD_VAR 0 1
27007: NOT
27008: IFFALSE 27012
// exit ;
27010: GO 27183
// result := false ;
27012: LD_ADDR_VAR 0 2
27016: PUSH
27017: LD_INT 0
27019: ST_TO_ADDR
// places := 0 ;
27020: LD_ADDR_VAR 0 3
27024: PUSH
27025: LD_INT 0
27027: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27028: LD_VAR 0 1
27032: PPUSH
27033: CALL_OW 266
27037: PUSH
27038: LD_INT 0
27040: DOUBLE
27041: EQUAL
27042: IFTRUE 27100
27044: LD_INT 1
27046: DOUBLE
27047: EQUAL
27048: IFTRUE 27100
27050: LD_INT 6
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27100
27056: LD_INT 7
27058: DOUBLE
27059: EQUAL
27060: IFTRUE 27100
27062: LD_INT 8
27064: DOUBLE
27065: EQUAL
27066: IFTRUE 27100
27068: LD_INT 4
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27100
27074: LD_INT 5
27076: DOUBLE
27077: EQUAL
27078: IFTRUE 27100
27080: LD_INT 2
27082: DOUBLE
27083: EQUAL
27084: IFTRUE 27100
27086: LD_INT 3
27088: DOUBLE
27089: EQUAL
27090: IFTRUE 27100
27092: LD_INT 35
27094: DOUBLE
27095: EQUAL
27096: IFTRUE 27100
27098: GO 27111
27100: POP
// places := 6 ; b_bunker , b_breastwork :
27101: LD_ADDR_VAR 0 3
27105: PUSH
27106: LD_INT 6
27108: ST_TO_ADDR
27109: GO 27156
27111: LD_INT 32
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27125
27117: LD_INT 31
27119: DOUBLE
27120: EQUAL
27121: IFTRUE 27125
27123: GO 27136
27125: POP
// places := 1 ; b_control_tower :
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_INT 1
27133: ST_TO_ADDR
27134: GO 27156
27136: LD_INT 36
27138: DOUBLE
27139: EQUAL
27140: IFTRUE 27144
27142: GO 27155
27144: POP
// places := 3 ; end ;
27145: LD_ADDR_VAR 0 3
27149: PUSH
27150: LD_INT 3
27152: ST_TO_ADDR
27153: GO 27156
27155: POP
// if places then
27156: LD_VAR 0 3
27160: IFFALSE 27183
// result := UnitsInside ( building ) < places ;
27162: LD_ADDR_VAR 0 2
27166: PUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: CALL_OW 313
27176: PUSH
27177: LD_VAR 0 3
27181: LESS
27182: ST_TO_ADDR
// end ;
27183: LD_VAR 0 2
27187: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27188: LD_INT 0
27190: PPUSH
27191: PPUSH
27192: PPUSH
27193: PPUSH
// tmp := [ ] ;
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: EMPTY
27200: ST_TO_ADDR
// list := [ ] ;
27201: LD_ADDR_VAR 0 5
27205: PUSH
27206: EMPTY
27207: ST_TO_ADDR
// for i = 16 to 25 do
27208: LD_ADDR_VAR 0 4
27212: PUSH
27213: DOUBLE
27214: LD_INT 16
27216: DEC
27217: ST_TO_ADDR
27218: LD_INT 25
27220: PUSH
27221: FOR_TO
27222: IFFALSE 27295
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27224: LD_ADDR_VAR 0 3
27228: PUSH
27229: LD_VAR 0 3
27233: PUSH
27234: LD_INT 22
27236: PUSH
27237: LD_VAR 0 1
27241: PPUSH
27242: CALL_OW 255
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 91
27253: PUSH
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 6
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 30
27269: PUSH
27270: LD_VAR 0 4
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: PPUSH
27287: CALL_OW 69
27291: ADD
27292: ST_TO_ADDR
27293: GO 27221
27295: POP
27296: POP
// for i = 1 to tmp do
27297: LD_ADDR_VAR 0 4
27301: PUSH
27302: DOUBLE
27303: LD_INT 1
27305: DEC
27306: ST_TO_ADDR
27307: LD_VAR 0 3
27311: PUSH
27312: FOR_TO
27313: IFFALSE 27401
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27315: LD_ADDR_VAR 0 5
27319: PUSH
27320: LD_VAR 0 5
27324: PUSH
27325: LD_VAR 0 3
27329: PUSH
27330: LD_VAR 0 4
27334: ARRAY
27335: PPUSH
27336: CALL_OW 266
27340: PUSH
27341: LD_VAR 0 3
27345: PUSH
27346: LD_VAR 0 4
27350: ARRAY
27351: PPUSH
27352: CALL_OW 250
27356: PUSH
27357: LD_VAR 0 3
27361: PUSH
27362: LD_VAR 0 4
27366: ARRAY
27367: PPUSH
27368: CALL_OW 251
27372: PUSH
27373: LD_VAR 0 3
27377: PUSH
27378: LD_VAR 0 4
27382: ARRAY
27383: PPUSH
27384: CALL_OW 254
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: ADD
27398: ST_TO_ADDR
27399: GO 27312
27401: POP
27402: POP
// result := list ;
27403: LD_ADDR_VAR 0 2
27407: PUSH
27408: LD_VAR 0 5
27412: ST_TO_ADDR
// end ;
27413: LD_VAR 0 2
27417: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27418: LD_INT 0
27420: PPUSH
27421: PPUSH
27422: PPUSH
27423: PPUSH
27424: PPUSH
27425: PPUSH
27426: PPUSH
// if not factory then
27427: LD_VAR 0 1
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 28029
// if control = control_apeman then
27436: LD_VAR 0 4
27440: PUSH
27441: LD_INT 5
27443: EQUAL
27444: IFFALSE 27553
// begin tmp := UnitsInside ( factory ) ;
27446: LD_ADDR_VAR 0 8
27450: PUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 313
27460: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27461: LD_VAR 0 8
27465: PPUSH
27466: LD_INT 25
27468: PUSH
27469: LD_INT 12
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PPUSH
27476: CALL_OW 72
27480: NOT
27481: IFFALSE 27491
// control := control_manual ;
27483: LD_ADDR_VAR 0 4
27487: PUSH
27488: LD_INT 1
27490: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27491: LD_ADDR_VAR 0 8
27495: PUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL 27188 0 1
27505: ST_TO_ADDR
// if tmp then
27506: LD_VAR 0 8
27510: IFFALSE 27553
// begin for i in tmp do
27512: LD_ADDR_VAR 0 7
27516: PUSH
27517: LD_VAR 0 8
27521: PUSH
27522: FOR_IN
27523: IFFALSE 27551
// if i [ 1 ] = b_ext_radio then
27525: LD_VAR 0 7
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: PUSH
27534: LD_INT 22
27536: EQUAL
27537: IFFALSE 27549
// begin control := control_remote ;
27539: LD_ADDR_VAR 0 4
27543: PUSH
27544: LD_INT 2
27546: ST_TO_ADDR
// break ;
27547: GO 27551
// end ;
27549: GO 27522
27551: POP
27552: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27553: LD_VAR 0 1
27557: PPUSH
27558: LD_VAR 0 2
27562: PPUSH
27563: LD_VAR 0 3
27567: PPUSH
27568: LD_VAR 0 4
27572: PPUSH
27573: LD_VAR 0 5
27577: PPUSH
27578: CALL_OW 448
27582: IFFALSE 27617
// begin result := [ chassis , engine , control , weapon ] ;
27584: LD_ADDR_VAR 0 6
27588: PUSH
27589: LD_VAR 0 2
27593: PUSH
27594: LD_VAR 0 3
27598: PUSH
27599: LD_VAR 0 4
27603: PUSH
27604: LD_VAR 0 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
// exit ;
27615: GO 28029
// end ; _chassis := AvailableChassisList ( factory ) ;
27617: LD_ADDR_VAR 0 9
27621: PUSH
27622: LD_VAR 0 1
27626: PPUSH
27627: CALL_OW 475
27631: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27632: LD_ADDR_VAR 0 11
27636: PUSH
27637: LD_VAR 0 1
27641: PPUSH
27642: CALL_OW 476
27646: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27647: LD_ADDR_VAR 0 12
27651: PUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 477
27661: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27662: LD_ADDR_VAR 0 10
27666: PUSH
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL_OW 478
27676: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27677: LD_VAR 0 9
27681: NOT
27682: PUSH
27683: LD_VAR 0 11
27687: NOT
27688: OR
27689: PUSH
27690: LD_VAR 0 12
27694: NOT
27695: OR
27696: PUSH
27697: LD_VAR 0 10
27701: NOT
27702: OR
27703: IFFALSE 27738
// begin result := [ chassis , engine , control , weapon ] ;
27705: LD_ADDR_VAR 0 6
27709: PUSH
27710: LD_VAR 0 2
27714: PUSH
27715: LD_VAR 0 3
27719: PUSH
27720: LD_VAR 0 4
27724: PUSH
27725: LD_VAR 0 5
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: ST_TO_ADDR
// exit ;
27736: GO 28029
// end ; if not chassis in _chassis then
27738: LD_VAR 0 2
27742: PUSH
27743: LD_VAR 0 9
27747: IN
27748: NOT
27749: IFFALSE 27775
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27751: LD_ADDR_VAR 0 2
27755: PUSH
27756: LD_VAR 0 9
27760: PUSH
27761: LD_INT 1
27763: PPUSH
27764: LD_VAR 0 9
27768: PPUSH
27769: CALL_OW 12
27773: ARRAY
27774: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27775: LD_VAR 0 2
27779: PPUSH
27780: LD_VAR 0 3
27784: PPUSH
27785: CALL 28034 0 2
27789: NOT
27790: IFFALSE 27849
// repeat engine := _engine [ 1 ] ;
27792: LD_ADDR_VAR 0 3
27796: PUSH
27797: LD_VAR 0 11
27801: PUSH
27802: LD_INT 1
27804: ARRAY
27805: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27806: LD_ADDR_VAR 0 11
27810: PUSH
27811: LD_VAR 0 11
27815: PPUSH
27816: LD_INT 1
27818: PPUSH
27819: CALL_OW 3
27823: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27824: LD_VAR 0 2
27828: PPUSH
27829: LD_VAR 0 3
27833: PPUSH
27834: CALL 28034 0 2
27838: PUSH
27839: LD_VAR 0 11
27843: PUSH
27844: EMPTY
27845: EQUAL
27846: OR
27847: IFFALSE 27792
// if not control in _control then
27849: LD_VAR 0 4
27853: PUSH
27854: LD_VAR 0 12
27858: IN
27859: NOT
27860: IFFALSE 27886
// control := _control [ rand ( 1 , _control ) ] ;
27862: LD_ADDR_VAR 0 4
27866: PUSH
27867: LD_VAR 0 12
27871: PUSH
27872: LD_INT 1
27874: PPUSH
27875: LD_VAR 0 12
27879: PPUSH
27880: CALL_OW 12
27884: ARRAY
27885: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27886: LD_VAR 0 2
27890: PPUSH
27891: LD_VAR 0 5
27895: PPUSH
27896: CALL 28254 0 2
27900: NOT
27901: IFFALSE 27960
// repeat weapon := _weapon [ 1 ] ;
27903: LD_ADDR_VAR 0 5
27907: PUSH
27908: LD_VAR 0 10
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27917: LD_ADDR_VAR 0 10
27921: PUSH
27922: LD_VAR 0 10
27926: PPUSH
27927: LD_INT 1
27929: PPUSH
27930: CALL_OW 3
27934: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27935: LD_VAR 0 2
27939: PPUSH
27940: LD_VAR 0 5
27944: PPUSH
27945: CALL 28254 0 2
27949: PUSH
27950: LD_VAR 0 10
27954: PUSH
27955: EMPTY
27956: EQUAL
27957: OR
27958: IFFALSE 27903
// result := [ ] ;
27960: LD_ADDR_VAR 0 6
27964: PUSH
27965: EMPTY
27966: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27967: LD_VAR 0 1
27971: PPUSH
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 3
27981: PPUSH
27982: LD_VAR 0 4
27986: PPUSH
27987: LD_VAR 0 5
27991: PPUSH
27992: CALL_OW 448
27996: IFFALSE 28029
// result := [ chassis , engine , control , weapon ] ;
27998: LD_ADDR_VAR 0 6
28002: PUSH
28003: LD_VAR 0 2
28007: PUSH
28008: LD_VAR 0 3
28012: PUSH
28013: LD_VAR 0 4
28017: PUSH
28018: LD_VAR 0 5
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// end ;
28029: LD_VAR 0 6
28033: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28034: LD_INT 0
28036: PPUSH
// if not chassis or not engine then
28037: LD_VAR 0 1
28041: NOT
28042: PUSH
28043: LD_VAR 0 2
28047: NOT
28048: OR
28049: IFFALSE 28053
// exit ;
28051: GO 28249
// case engine of engine_solar :
28053: LD_VAR 0 2
28057: PUSH
28058: LD_INT 2
28060: DOUBLE
28061: EQUAL
28062: IFTRUE 28066
28064: GO 28104
28066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: LD_INT 11
28074: PUSH
28075: LD_INT 12
28077: PUSH
28078: LD_INT 13
28080: PUSH
28081: LD_INT 14
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: LD_INT 3
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
28102: GO 28233
28104: LD_INT 1
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28174
28112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_INT 11
28120: PUSH
28121: LD_INT 12
28123: PUSH
28124: LD_INT 13
28126: PUSH
28127: LD_INT 14
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 3
28138: PUSH
28139: LD_INT 4
28141: PUSH
28142: LD_INT 5
28144: PUSH
28145: LD_INT 21
28147: PUSH
28148: LD_INT 23
28150: PUSH
28151: LD_INT 22
28153: PUSH
28154: LD_INT 24
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: ST_TO_ADDR
28172: GO 28233
28174: LD_INT 3
28176: DOUBLE
28177: EQUAL
28178: IFTRUE 28182
28180: GO 28232
28182: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28183: LD_ADDR_VAR 0 3
28187: PUSH
28188: LD_INT 13
28190: PUSH
28191: LD_INT 14
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 3
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: LD_INT 5
28205: PUSH
28206: LD_INT 21
28208: PUSH
28209: LD_INT 22
28211: PUSH
28212: LD_INT 23
28214: PUSH
28215: LD_INT 24
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
28230: GO 28233
28232: POP
// result := ( chassis in result ) ;
28233: LD_ADDR_VAR 0 3
28237: PUSH
28238: LD_VAR 0 1
28242: PUSH
28243: LD_VAR 0 3
28247: IN
28248: ST_TO_ADDR
// end ;
28249: LD_VAR 0 3
28253: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28254: LD_INT 0
28256: PPUSH
// if not chassis or not weapon then
28257: LD_VAR 0 1
28261: NOT
28262: PUSH
28263: LD_VAR 0 2
28267: NOT
28268: OR
28269: IFFALSE 28273
// exit ;
28271: GO 29335
// case weapon of us_machine_gun :
28273: LD_VAR 0 2
28277: PUSH
28278: LD_INT 2
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28286
28284: GO 28316
28286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 4
28303: PUSH
28304: LD_INT 5
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: ST_TO_ADDR
28314: GO 29319
28316: LD_INT 3
28318: DOUBLE
28319: EQUAL
28320: IFTRUE 28324
28322: GO 28354
28324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: LD_INT 4
28341: PUSH
28342: LD_INT 5
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
28352: GO 29319
28354: LD_INT 11
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28392
28362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: LD_INT 3
28376: PUSH
28377: LD_INT 4
28379: PUSH
28380: LD_INT 5
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
28390: GO 29319
28392: LD_INT 4
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28400
28398: GO 28426
28400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28401: LD_ADDR_VAR 0 3
28405: PUSH
28406: LD_INT 2
28408: PUSH
28409: LD_INT 3
28411: PUSH
28412: LD_INT 4
28414: PUSH
28415: LD_INT 5
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: ST_TO_ADDR
28424: GO 29319
28426: LD_INT 5
28428: DOUBLE
28429: EQUAL
28430: IFTRUE 28434
28432: GO 28460
28434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28435: LD_ADDR_VAR 0 3
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: LD_INT 4
28448: PUSH
28449: LD_INT 5
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: ST_TO_ADDR
28458: GO 29319
28460: LD_INT 9
28462: DOUBLE
28463: EQUAL
28464: IFTRUE 28468
28466: GO 28494
28468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28469: LD_ADDR_VAR 0 3
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: LD_INT 4
28482: PUSH
28483: LD_INT 5
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
28492: GO 29319
28494: LD_INT 7
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28528
28502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 2
28510: PUSH
28511: LD_INT 3
28513: PUSH
28514: LD_INT 4
28516: PUSH
28517: LD_INT 5
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
28526: GO 29319
28528: LD_INT 12
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28562
28536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: LD_INT 3
28547: PUSH
28548: LD_INT 4
28550: PUSH
28551: LD_INT 5
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
28560: GO 29319
28562: LD_INT 13
28564: DOUBLE
28565: EQUAL
28566: IFTRUE 28570
28568: GO 28596
28570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: LD_INT 3
28581: PUSH
28582: LD_INT 4
28584: PUSH
28585: LD_INT 5
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
28594: GO 29319
28596: LD_INT 14
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28622
28604: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 4
28612: PUSH
28613: LD_INT 5
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: ST_TO_ADDR
28620: GO 29319
28622: LD_INT 6
28624: DOUBLE
28625: EQUAL
28626: IFTRUE 28630
28628: GO 28648
28630: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_INT 4
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: ST_TO_ADDR
28646: GO 29319
28648: LD_INT 10
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28674
28656: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_INT 4
28664: PUSH
28665: LD_INT 5
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: ST_TO_ADDR
28672: GO 29319
28674: LD_INT 22
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28708
28682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 11
28690: PUSH
28691: LD_INT 12
28693: PUSH
28694: LD_INT 13
28696: PUSH
28697: LD_INT 14
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: ST_TO_ADDR
28706: GO 29319
28708: LD_INT 23
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28742
28716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 11
28724: PUSH
28725: LD_INT 12
28727: PUSH
28728: LD_INT 13
28730: PUSH
28731: LD_INT 14
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
28740: GO 29319
28742: LD_INT 24
28744: DOUBLE
28745: EQUAL
28746: IFTRUE 28750
28748: GO 28776
28750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28751: LD_ADDR_VAR 0 3
28755: PUSH
28756: LD_INT 11
28758: PUSH
28759: LD_INT 12
28761: PUSH
28762: LD_INT 13
28764: PUSH
28765: LD_INT 14
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
28774: GO 29319
28776: LD_INT 30
28778: DOUBLE
28779: EQUAL
28780: IFTRUE 28784
28782: GO 28810
28784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28785: LD_ADDR_VAR 0 3
28789: PUSH
28790: LD_INT 11
28792: PUSH
28793: LD_INT 12
28795: PUSH
28796: LD_INT 13
28798: PUSH
28799: LD_INT 14
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: ST_TO_ADDR
28808: GO 29319
28810: LD_INT 25
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 28836
28818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28819: LD_ADDR_VAR 0 3
28823: PUSH
28824: LD_INT 13
28826: PUSH
28827: LD_INT 14
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: ST_TO_ADDR
28834: GO 29319
28836: LD_INT 27
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28862
28844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_INT 13
28852: PUSH
28853: LD_INT 14
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: ST_TO_ADDR
28860: GO 29319
28862: LD_EXP 12
28866: DOUBLE
28867: EQUAL
28868: IFTRUE 28872
28870: GO 28898
28872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28873: LD_ADDR_VAR 0 3
28877: PUSH
28878: LD_INT 11
28880: PUSH
28881: LD_INT 12
28883: PUSH
28884: LD_INT 13
28886: PUSH
28887: LD_INT 14
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
28896: GO 29319
28898: LD_INT 28
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28906
28904: GO 28924
28906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: LD_INT 13
28914: PUSH
28915: LD_INT 14
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: ST_TO_ADDR
28922: GO 29319
28924: LD_INT 29
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28932
28930: GO 28950
28932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28933: LD_ADDR_VAR 0 3
28937: PUSH
28938: LD_INT 13
28940: PUSH
28941: LD_INT 14
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: ST_TO_ADDR
28948: GO 29319
28950: LD_INT 31
28952: DOUBLE
28953: EQUAL
28954: IFTRUE 28958
28956: GO 28976
28958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: LD_INT 13
28966: PUSH
28967: LD_INT 14
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: ST_TO_ADDR
28974: GO 29319
28976: LD_INT 26
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 29002
28984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_INT 13
28992: PUSH
28993: LD_INT 14
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: ST_TO_ADDR
29000: GO 29319
29002: LD_INT 42
29004: DOUBLE
29005: EQUAL
29006: IFTRUE 29010
29008: GO 29036
29010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29011: LD_ADDR_VAR 0 3
29015: PUSH
29016: LD_INT 21
29018: PUSH
29019: LD_INT 22
29021: PUSH
29022: LD_INT 23
29024: PUSH
29025: LD_INT 24
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: ST_TO_ADDR
29034: GO 29319
29036: LD_INT 43
29038: DOUBLE
29039: EQUAL
29040: IFTRUE 29044
29042: GO 29070
29044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29045: LD_ADDR_VAR 0 3
29049: PUSH
29050: LD_INT 21
29052: PUSH
29053: LD_INT 22
29055: PUSH
29056: LD_INT 23
29058: PUSH
29059: LD_INT 24
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: ST_TO_ADDR
29068: GO 29319
29070: LD_INT 44
29072: DOUBLE
29073: EQUAL
29074: IFTRUE 29078
29076: GO 29104
29078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29079: LD_ADDR_VAR 0 3
29083: PUSH
29084: LD_INT 21
29086: PUSH
29087: LD_INT 22
29089: PUSH
29090: LD_INT 23
29092: PUSH
29093: LD_INT 24
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: ST_TO_ADDR
29102: GO 29319
29104: LD_INT 45
29106: DOUBLE
29107: EQUAL
29108: IFTRUE 29112
29110: GO 29138
29112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_INT 21
29120: PUSH
29121: LD_INT 22
29123: PUSH
29124: LD_INT 23
29126: PUSH
29127: LD_INT 24
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: ST_TO_ADDR
29136: GO 29319
29138: LD_INT 49
29140: DOUBLE
29141: EQUAL
29142: IFTRUE 29146
29144: GO 29172
29146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29147: LD_ADDR_VAR 0 3
29151: PUSH
29152: LD_INT 21
29154: PUSH
29155: LD_INT 22
29157: PUSH
29158: LD_INT 23
29160: PUSH
29161: LD_INT 24
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: ST_TO_ADDR
29170: GO 29319
29172: LD_INT 51
29174: DOUBLE
29175: EQUAL
29176: IFTRUE 29180
29178: GO 29206
29180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_INT 21
29188: PUSH
29189: LD_INT 22
29191: PUSH
29192: LD_INT 23
29194: PUSH
29195: LD_INT 24
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: ST_TO_ADDR
29204: GO 29319
29206: LD_INT 52
29208: DOUBLE
29209: EQUAL
29210: IFTRUE 29214
29212: GO 29240
29214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29215: LD_ADDR_VAR 0 3
29219: PUSH
29220: LD_INT 21
29222: PUSH
29223: LD_INT 22
29225: PUSH
29226: LD_INT 23
29228: PUSH
29229: LD_INT 24
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: ST_TO_ADDR
29238: GO 29319
29240: LD_INT 53
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29266
29248: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29249: LD_ADDR_VAR 0 3
29253: PUSH
29254: LD_INT 23
29256: PUSH
29257: LD_INT 24
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: ST_TO_ADDR
29264: GO 29319
29266: LD_INT 46
29268: DOUBLE
29269: EQUAL
29270: IFTRUE 29274
29272: GO 29292
29274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: LD_INT 23
29282: PUSH
29283: LD_INT 24
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: ST_TO_ADDR
29290: GO 29319
29292: LD_INT 47
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 29318
29300: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_INT 23
29308: PUSH
29309: LD_INT 24
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: ST_TO_ADDR
29316: GO 29319
29318: POP
// result := ( chassis in result ) ;
29319: LD_ADDR_VAR 0 3
29323: PUSH
29324: LD_VAR 0 1
29328: PUSH
29329: LD_VAR 0 3
29333: IN
29334: ST_TO_ADDR
// end ;
29335: LD_VAR 0 3
29339: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29340: LD_INT 0
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// result := array ;
29349: LD_ADDR_VAR 0 5
29353: PUSH
29354: LD_VAR 0 1
29358: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29359: LD_VAR 0 1
29363: NOT
29364: PUSH
29365: LD_VAR 0 2
29369: NOT
29370: OR
29371: PUSH
29372: LD_VAR 0 3
29376: NOT
29377: OR
29378: PUSH
29379: LD_VAR 0 2
29383: PUSH
29384: LD_VAR 0 1
29388: GREATER
29389: OR
29390: PUSH
29391: LD_VAR 0 3
29395: PUSH
29396: LD_VAR 0 1
29400: GREATER
29401: OR
29402: IFFALSE 29406
// exit ;
29404: GO 29702
// if direction then
29406: LD_VAR 0 4
29410: IFFALSE 29474
// begin d := 1 ;
29412: LD_ADDR_VAR 0 9
29416: PUSH
29417: LD_INT 1
29419: ST_TO_ADDR
// if i_from > i_to then
29420: LD_VAR 0 2
29424: PUSH
29425: LD_VAR 0 3
29429: GREATER
29430: IFFALSE 29456
// length := ( array - i_from ) + i_to else
29432: LD_ADDR_VAR 0 11
29436: PUSH
29437: LD_VAR 0 1
29441: PUSH
29442: LD_VAR 0 2
29446: MINUS
29447: PUSH
29448: LD_VAR 0 3
29452: PLUS
29453: ST_TO_ADDR
29454: GO 29472
// length := i_to - i_from ;
29456: LD_ADDR_VAR 0 11
29460: PUSH
29461: LD_VAR 0 3
29465: PUSH
29466: LD_VAR 0 2
29470: MINUS
29471: ST_TO_ADDR
// end else
29472: GO 29535
// begin d := - 1 ;
29474: LD_ADDR_VAR 0 9
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: ST_TO_ADDR
// if i_from > i_to then
29483: LD_VAR 0 2
29487: PUSH
29488: LD_VAR 0 3
29492: GREATER
29493: IFFALSE 29513
// length := i_from - i_to else
29495: LD_ADDR_VAR 0 11
29499: PUSH
29500: LD_VAR 0 2
29504: PUSH
29505: LD_VAR 0 3
29509: MINUS
29510: ST_TO_ADDR
29511: GO 29535
// length := ( array - i_to ) + i_from ;
29513: LD_ADDR_VAR 0 11
29517: PUSH
29518: LD_VAR 0 1
29522: PUSH
29523: LD_VAR 0 3
29527: MINUS
29528: PUSH
29529: LD_VAR 0 2
29533: PLUS
29534: ST_TO_ADDR
// end ; if not length then
29535: LD_VAR 0 11
29539: NOT
29540: IFFALSE 29544
// exit ;
29542: GO 29702
// tmp := array ;
29544: LD_ADDR_VAR 0 10
29548: PUSH
29549: LD_VAR 0 1
29553: ST_TO_ADDR
// for i = 1 to length do
29554: LD_ADDR_VAR 0 6
29558: PUSH
29559: DOUBLE
29560: LD_INT 1
29562: DEC
29563: ST_TO_ADDR
29564: LD_VAR 0 11
29568: PUSH
29569: FOR_TO
29570: IFFALSE 29690
// begin for j = 1 to array do
29572: LD_ADDR_VAR 0 7
29576: PUSH
29577: DOUBLE
29578: LD_INT 1
29580: DEC
29581: ST_TO_ADDR
29582: LD_VAR 0 1
29586: PUSH
29587: FOR_TO
29588: IFFALSE 29676
// begin k := j + d ;
29590: LD_ADDR_VAR 0 8
29594: PUSH
29595: LD_VAR 0 7
29599: PUSH
29600: LD_VAR 0 9
29604: PLUS
29605: ST_TO_ADDR
// if k > array then
29606: LD_VAR 0 8
29610: PUSH
29611: LD_VAR 0 1
29615: GREATER
29616: IFFALSE 29626
// k := 1 ;
29618: LD_ADDR_VAR 0 8
29622: PUSH
29623: LD_INT 1
29625: ST_TO_ADDR
// if not k then
29626: LD_VAR 0 8
29630: NOT
29631: IFFALSE 29643
// k := array ;
29633: LD_ADDR_VAR 0 8
29637: PUSH
29638: LD_VAR 0 1
29642: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29643: LD_ADDR_VAR 0 10
29647: PUSH
29648: LD_VAR 0 10
29652: PPUSH
29653: LD_VAR 0 8
29657: PPUSH
29658: LD_VAR 0 1
29662: PUSH
29663: LD_VAR 0 7
29667: ARRAY
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
// end ;
29674: GO 29587
29676: POP
29677: POP
// array := tmp ;
29678: LD_ADDR_VAR 0 1
29682: PUSH
29683: LD_VAR 0 10
29687: ST_TO_ADDR
// end ;
29688: GO 29569
29690: POP
29691: POP
// result := array ;
29692: LD_ADDR_VAR 0 5
29696: PUSH
29697: LD_VAR 0 1
29701: ST_TO_ADDR
// end ;
29702: LD_VAR 0 5
29706: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
// result := 0 ;
29711: LD_ADDR_VAR 0 3
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// if not array or not value in array then
29719: LD_VAR 0 1
29723: NOT
29724: PUSH
29725: LD_VAR 0 2
29729: PUSH
29730: LD_VAR 0 1
29734: IN
29735: NOT
29736: OR
29737: IFFALSE 29741
// exit ;
29739: GO 29795
// for i = 1 to array do
29741: LD_ADDR_VAR 0 4
29745: PUSH
29746: DOUBLE
29747: LD_INT 1
29749: DEC
29750: ST_TO_ADDR
29751: LD_VAR 0 1
29755: PUSH
29756: FOR_TO
29757: IFFALSE 29793
// if value = array [ i ] then
29759: LD_VAR 0 2
29763: PUSH
29764: LD_VAR 0 1
29768: PUSH
29769: LD_VAR 0 4
29773: ARRAY
29774: EQUAL
29775: IFFALSE 29791
// begin result := i ;
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_VAR 0 4
29786: ST_TO_ADDR
// exit ;
29787: POP
29788: POP
29789: GO 29795
// end ;
29791: GO 29756
29793: POP
29794: POP
// end ;
29795: LD_VAR 0 3
29799: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29800: LD_INT 0
29802: PPUSH
// vc_chassis := chassis ;
29803: LD_ADDR_OWVAR 37
29807: PUSH
29808: LD_VAR 0 1
29812: ST_TO_ADDR
// vc_engine := engine ;
29813: LD_ADDR_OWVAR 39
29817: PUSH
29818: LD_VAR 0 2
29822: ST_TO_ADDR
// vc_control := control ;
29823: LD_ADDR_OWVAR 38
29827: PUSH
29828: LD_VAR 0 3
29832: ST_TO_ADDR
// vc_weapon := weapon ;
29833: LD_ADDR_OWVAR 40
29837: PUSH
29838: LD_VAR 0 4
29842: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29843: LD_ADDR_OWVAR 41
29847: PUSH
29848: LD_VAR 0 5
29852: ST_TO_ADDR
// end ;
29853: LD_VAR 0 6
29857: RET
// export function WantPlant ( unit ) ; var task ; begin
29858: LD_INT 0
29860: PPUSH
29861: PPUSH
// result := false ;
29862: LD_ADDR_VAR 0 2
29866: PUSH
29867: LD_INT 0
29869: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29870: LD_ADDR_VAR 0 3
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 437
29884: ST_TO_ADDR
// if task then
29885: LD_VAR 0 3
29889: IFFALSE 29917
// if task [ 1 ] [ 1 ] = p then
29891: LD_VAR 0 3
29895: PUSH
29896: LD_INT 1
29898: ARRAY
29899: PUSH
29900: LD_INT 1
29902: ARRAY
29903: PUSH
29904: LD_STRING p
29906: EQUAL
29907: IFFALSE 29917
// result := true ;
29909: LD_ADDR_VAR 0 2
29913: PUSH
29914: LD_INT 1
29916: ST_TO_ADDR
// end ;
29917: LD_VAR 0 2
29921: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29922: LD_INT 0
29924: PPUSH
29925: PPUSH
29926: PPUSH
29927: PPUSH
// if pos < 1 then
29928: LD_VAR 0 2
29932: PUSH
29933: LD_INT 1
29935: LESS
29936: IFFALSE 29940
// exit ;
29938: GO 30243
// if pos = 1 then
29940: LD_VAR 0 2
29944: PUSH
29945: LD_INT 1
29947: EQUAL
29948: IFFALSE 29981
// result := Replace ( arr , pos [ 1 ] , value ) else
29950: LD_ADDR_VAR 0 4
29954: PUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: LD_VAR 0 2
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: PPUSH
29969: LD_VAR 0 3
29973: PPUSH
29974: CALL_OW 1
29978: ST_TO_ADDR
29979: GO 30243
// begin tmp := arr ;
29981: LD_ADDR_VAR 0 6
29985: PUSH
29986: LD_VAR 0 1
29990: ST_TO_ADDR
// s_arr := [ tmp ] ;
29991: LD_ADDR_VAR 0 7
29995: PUSH
29996: LD_VAR 0 6
30000: PUSH
30001: EMPTY
30002: LIST
30003: ST_TO_ADDR
// for i = 1 to pos - 1 do
30004: LD_ADDR_VAR 0 5
30008: PUSH
30009: DOUBLE
30010: LD_INT 1
30012: DEC
30013: ST_TO_ADDR
30014: LD_VAR 0 2
30018: PUSH
30019: LD_INT 1
30021: MINUS
30022: PUSH
30023: FOR_TO
30024: IFFALSE 30069
// begin tmp := tmp [ pos [ i ] ] ;
30026: LD_ADDR_VAR 0 6
30030: PUSH
30031: LD_VAR 0 6
30035: PUSH
30036: LD_VAR 0 2
30040: PUSH
30041: LD_VAR 0 5
30045: ARRAY
30046: ARRAY
30047: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30048: LD_ADDR_VAR 0 7
30052: PUSH
30053: LD_VAR 0 7
30057: PUSH
30058: LD_VAR 0 6
30062: PUSH
30063: EMPTY
30064: LIST
30065: ADD
30066: ST_TO_ADDR
// end ;
30067: GO 30023
30069: POP
30070: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30071: LD_ADDR_VAR 0 6
30075: PUSH
30076: LD_VAR 0 6
30080: PPUSH
30081: LD_VAR 0 2
30085: PUSH
30086: LD_VAR 0 2
30090: ARRAY
30091: PPUSH
30092: LD_VAR 0 3
30096: PPUSH
30097: CALL_OW 1
30101: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30102: LD_ADDR_VAR 0 7
30106: PUSH
30107: LD_VAR 0 7
30111: PPUSH
30112: LD_VAR 0 7
30116: PPUSH
30117: LD_VAR 0 6
30121: PPUSH
30122: CALL_OW 1
30126: ST_TO_ADDR
// for i = s_arr downto 2 do
30127: LD_ADDR_VAR 0 5
30131: PUSH
30132: DOUBLE
30133: LD_VAR 0 7
30137: INC
30138: ST_TO_ADDR
30139: LD_INT 2
30141: PUSH
30142: FOR_DOWNTO
30143: IFFALSE 30227
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30145: LD_ADDR_VAR 0 6
30149: PUSH
30150: LD_VAR 0 7
30154: PUSH
30155: LD_VAR 0 5
30159: PUSH
30160: LD_INT 1
30162: MINUS
30163: ARRAY
30164: PPUSH
30165: LD_VAR 0 2
30169: PUSH
30170: LD_VAR 0 5
30174: PUSH
30175: LD_INT 1
30177: MINUS
30178: ARRAY
30179: PPUSH
30180: LD_VAR 0 7
30184: PUSH
30185: LD_VAR 0 5
30189: ARRAY
30190: PPUSH
30191: CALL_OW 1
30195: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30196: LD_ADDR_VAR 0 7
30200: PUSH
30201: LD_VAR 0 7
30205: PPUSH
30206: LD_VAR 0 5
30210: PUSH
30211: LD_INT 1
30213: MINUS
30214: PPUSH
30215: LD_VAR 0 6
30219: PPUSH
30220: CALL_OW 1
30224: ST_TO_ADDR
// end ;
30225: GO 30142
30227: POP
30228: POP
// result := s_arr [ 1 ] ;
30229: LD_ADDR_VAR 0 4
30233: PUSH
30234: LD_VAR 0 7
30238: PUSH
30239: LD_INT 1
30241: ARRAY
30242: ST_TO_ADDR
// end ; end ;
30243: LD_VAR 0 4
30247: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
// if not list then
30252: LD_VAR 0 1
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30352
// i := list [ pos1 ] ;
30261: LD_ADDR_VAR 0 5
30265: PUSH
30266: LD_VAR 0 1
30270: PUSH
30271: LD_VAR 0 2
30275: ARRAY
30276: ST_TO_ADDR
// if not i then
30277: LD_VAR 0 5
30281: NOT
30282: IFFALSE 30286
// exit ;
30284: GO 30352
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30286: LD_ADDR_VAR 0 1
30290: PUSH
30291: LD_VAR 0 1
30295: PPUSH
30296: LD_VAR 0 2
30300: PPUSH
30301: LD_VAR 0 1
30305: PUSH
30306: LD_VAR 0 3
30310: ARRAY
30311: PPUSH
30312: CALL_OW 1
30316: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30317: LD_ADDR_VAR 0 1
30321: PUSH
30322: LD_VAR 0 1
30326: PPUSH
30327: LD_VAR 0 3
30331: PPUSH
30332: LD_VAR 0 5
30336: PPUSH
30337: CALL_OW 1
30341: ST_TO_ADDR
// result := list ;
30342: LD_ADDR_VAR 0 4
30346: PUSH
30347: LD_VAR 0 1
30351: ST_TO_ADDR
// end ;
30352: LD_VAR 0 4
30356: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30357: LD_INT 0
30359: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30360: LD_ADDR_VAR 0 5
30364: PUSH
30365: LD_VAR 0 1
30369: PPUSH
30370: CALL_OW 250
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 251
30384: PPUSH
30385: LD_VAR 0 2
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: CALL 30410 0 5
30404: ST_TO_ADDR
// end ;
30405: LD_VAR 0 5
30409: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30410: LD_INT 0
30412: PPUSH
30413: PPUSH
30414: PPUSH
30415: PPUSH
// if not list then
30416: LD_VAR 0 3
30420: NOT
30421: IFFALSE 30425
// exit ;
30423: GO 30813
// result := [ ] ;
30425: LD_ADDR_VAR 0 6
30429: PUSH
30430: EMPTY
30431: ST_TO_ADDR
// for i in list do
30432: LD_ADDR_VAR 0 7
30436: PUSH
30437: LD_VAR 0 3
30441: PUSH
30442: FOR_IN
30443: IFFALSE 30645
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30445: LD_ADDR_VAR 0 9
30449: PUSH
30450: LD_VAR 0 7
30454: PPUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: LD_VAR 0 2
30464: PPUSH
30465: CALL_OW 297
30469: ST_TO_ADDR
// if not result then
30470: LD_VAR 0 6
30474: NOT
30475: IFFALSE 30501
// result := [ [ i , tmp ] ] else
30477: LD_ADDR_VAR 0 6
30481: PUSH
30482: LD_VAR 0 7
30486: PUSH
30487: LD_VAR 0 9
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: ST_TO_ADDR
30499: GO 30643
// begin if result [ result ] [ 2 ] < tmp then
30501: LD_VAR 0 6
30505: PUSH
30506: LD_VAR 0 6
30510: ARRAY
30511: PUSH
30512: LD_INT 2
30514: ARRAY
30515: PUSH
30516: LD_VAR 0 9
30520: LESS
30521: IFFALSE 30563
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30523: LD_ADDR_VAR 0 6
30527: PUSH
30528: LD_VAR 0 6
30532: PPUSH
30533: LD_VAR 0 6
30537: PUSH
30538: LD_INT 1
30540: PLUS
30541: PPUSH
30542: LD_VAR 0 7
30546: PUSH
30547: LD_VAR 0 9
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PPUSH
30556: CALL_OW 2
30560: ST_TO_ADDR
30561: GO 30643
// for j = 1 to result do
30563: LD_ADDR_VAR 0 8
30567: PUSH
30568: DOUBLE
30569: LD_INT 1
30571: DEC
30572: ST_TO_ADDR
30573: LD_VAR 0 6
30577: PUSH
30578: FOR_TO
30579: IFFALSE 30641
// begin if tmp < result [ j ] [ 2 ] then
30581: LD_VAR 0 9
30585: PUSH
30586: LD_VAR 0 6
30590: PUSH
30591: LD_VAR 0 8
30595: ARRAY
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: LESS
30601: IFFALSE 30639
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30603: LD_ADDR_VAR 0 6
30607: PUSH
30608: LD_VAR 0 6
30612: PPUSH
30613: LD_VAR 0 8
30617: PPUSH
30618: LD_VAR 0 7
30622: PUSH
30623: LD_VAR 0 9
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 2
30636: ST_TO_ADDR
// break ;
30637: GO 30641
// end ; end ;
30639: GO 30578
30641: POP
30642: POP
// end ; end ;
30643: GO 30442
30645: POP
30646: POP
// if result and not asc then
30647: LD_VAR 0 6
30651: PUSH
30652: LD_VAR 0 4
30656: NOT
30657: AND
30658: IFFALSE 30733
// begin tmp := result ;
30660: LD_ADDR_VAR 0 9
30664: PUSH
30665: LD_VAR 0 6
30669: ST_TO_ADDR
// for i = tmp downto 1 do
30670: LD_ADDR_VAR 0 7
30674: PUSH
30675: DOUBLE
30676: LD_VAR 0 9
30680: INC
30681: ST_TO_ADDR
30682: LD_INT 1
30684: PUSH
30685: FOR_DOWNTO
30686: IFFALSE 30731
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30688: LD_ADDR_VAR 0 6
30692: PUSH
30693: LD_VAR 0 6
30697: PPUSH
30698: LD_VAR 0 9
30702: PUSH
30703: LD_VAR 0 7
30707: MINUS
30708: PUSH
30709: LD_INT 1
30711: PLUS
30712: PPUSH
30713: LD_VAR 0 9
30717: PUSH
30718: LD_VAR 0 7
30722: ARRAY
30723: PPUSH
30724: CALL_OW 1
30728: ST_TO_ADDR
30729: GO 30685
30731: POP
30732: POP
// end ; tmp := [ ] ;
30733: LD_ADDR_VAR 0 9
30737: PUSH
30738: EMPTY
30739: ST_TO_ADDR
// if mode then
30740: LD_VAR 0 5
30744: IFFALSE 30813
// begin for i = 1 to result do
30746: LD_ADDR_VAR 0 7
30750: PUSH
30751: DOUBLE
30752: LD_INT 1
30754: DEC
30755: ST_TO_ADDR
30756: LD_VAR 0 6
30760: PUSH
30761: FOR_TO
30762: IFFALSE 30801
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30764: LD_ADDR_VAR 0 9
30768: PUSH
30769: LD_VAR 0 9
30773: PPUSH
30774: LD_VAR 0 7
30778: PPUSH
30779: LD_VAR 0 6
30783: PUSH
30784: LD_VAR 0 7
30788: ARRAY
30789: PUSH
30790: LD_INT 1
30792: ARRAY
30793: PPUSH
30794: CALL_OW 1
30798: ST_TO_ADDR
30799: GO 30761
30801: POP
30802: POP
// result := tmp ;
30803: LD_ADDR_VAR 0 6
30807: PUSH
30808: LD_VAR 0 9
30812: ST_TO_ADDR
// end ; end ;
30813: LD_VAR 0 6
30817: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30826: LD_ADDR_VAR 0 5
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// if not x or not y then
30848: LD_VAR 0 2
30852: NOT
30853: PUSH
30854: LD_VAR 0 3
30858: NOT
30859: OR
30860: IFFALSE 30864
// exit ;
30862: GO 32516
// if not range then
30864: LD_VAR 0 4
30868: NOT
30869: IFFALSE 30879
// range := 10 ;
30871: LD_ADDR_VAR 0 4
30875: PUSH
30876: LD_INT 10
30878: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30879: LD_ADDR_VAR 0 8
30883: PUSH
30884: LD_INT 81
30886: PUSH
30887: LD_VAR 0 1
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 92
30898: PUSH
30899: LD_VAR 0 2
30903: PUSH
30904: LD_VAR 0 3
30908: PUSH
30909: LD_VAR 0 4
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: PUSH
30923: LD_INT 21
30925: PUSH
30926: LD_INT 3
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: PPUSH
30942: CALL_OW 69
30946: ST_TO_ADDR
// if not tmp then
30947: LD_VAR 0 8
30951: NOT
30952: IFFALSE 30956
// exit ;
30954: GO 32516
// for i in tmp do
30956: LD_ADDR_VAR 0 6
30960: PUSH
30961: LD_VAR 0 8
30965: PUSH
30966: FOR_IN
30967: IFFALSE 32491
// begin points := [ 0 , 0 , 0 ] ;
30969: LD_ADDR_VAR 0 9
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// bpoints := 1 ;
30988: LD_ADDR_VAR 0 10
30992: PUSH
30993: LD_INT 1
30995: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30996: LD_VAR 0 6
31000: PPUSH
31001: CALL_OW 247
31005: PUSH
31006: LD_INT 1
31008: DOUBLE
31009: EQUAL
31010: IFTRUE 31014
31012: GO 31592
31014: POP
// begin if GetClass ( i ) = 1 then
31015: LD_VAR 0 6
31019: PPUSH
31020: CALL_OW 257
31024: PUSH
31025: LD_INT 1
31027: EQUAL
31028: IFFALSE 31049
// points := [ 10 , 5 , 3 ] ;
31030: LD_ADDR_VAR 0 9
31034: PUSH
31035: LD_INT 10
31037: PUSH
31038: LD_INT 5
31040: PUSH
31041: LD_INT 3
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31049: LD_VAR 0 6
31053: PPUSH
31054: CALL_OW 257
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: LD_INT 4
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: IN
31073: IFFALSE 31094
// points := [ 3 , 2 , 1 ] ;
31075: LD_ADDR_VAR 0 9
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31094: LD_VAR 0 6
31098: PPUSH
31099: CALL_OW 257
31103: PUSH
31104: LD_INT 5
31106: EQUAL
31107: IFFALSE 31128
// points := [ 130 , 5 , 2 ] ;
31109: LD_ADDR_VAR 0 9
31113: PUSH
31114: LD_INT 130
31116: PUSH
31117: LD_INT 5
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31128: LD_VAR 0 6
31132: PPUSH
31133: CALL_OW 257
31137: PUSH
31138: LD_INT 8
31140: EQUAL
31141: IFFALSE 31162
// points := [ 35 , 35 , 30 ] ;
31143: LD_ADDR_VAR 0 9
31147: PUSH
31148: LD_INT 35
31150: PUSH
31151: LD_INT 35
31153: PUSH
31154: LD_INT 30
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31162: LD_VAR 0 6
31166: PPUSH
31167: CALL_OW 257
31171: PUSH
31172: LD_INT 9
31174: EQUAL
31175: IFFALSE 31196
// points := [ 20 , 55 , 40 ] ;
31177: LD_ADDR_VAR 0 9
31181: PUSH
31182: LD_INT 20
31184: PUSH
31185: LD_INT 55
31187: PUSH
31188: LD_INT 40
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31196: LD_VAR 0 6
31200: PPUSH
31201: CALL_OW 257
31205: PUSH
31206: LD_INT 12
31208: PUSH
31209: LD_INT 16
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: IN
31216: IFFALSE 31237
// points := [ 5 , 3 , 2 ] ;
31218: LD_ADDR_VAR 0 9
31222: PUSH
31223: LD_INT 5
31225: PUSH
31226: LD_INT 3
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31237: LD_VAR 0 6
31241: PPUSH
31242: CALL_OW 257
31246: PUSH
31247: LD_INT 17
31249: EQUAL
31250: IFFALSE 31271
// points := [ 100 , 50 , 75 ] ;
31252: LD_ADDR_VAR 0 9
31256: PUSH
31257: LD_INT 100
31259: PUSH
31260: LD_INT 50
31262: PUSH
31263: LD_INT 75
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31271: LD_VAR 0 6
31275: PPUSH
31276: CALL_OW 257
31280: PUSH
31281: LD_INT 15
31283: EQUAL
31284: IFFALSE 31305
// points := [ 10 , 5 , 3 ] ;
31286: LD_ADDR_VAR 0 9
31290: PUSH
31291: LD_INT 10
31293: PUSH
31294: LD_INT 5
31296: PUSH
31297: LD_INT 3
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31305: LD_VAR 0 6
31309: PPUSH
31310: CALL_OW 257
31314: PUSH
31315: LD_INT 14
31317: EQUAL
31318: IFFALSE 31339
// points := [ 10 , 0 , 0 ] ;
31320: LD_ADDR_VAR 0 9
31324: PUSH
31325: LD_INT 10
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31339: LD_VAR 0 6
31343: PPUSH
31344: CALL_OW 257
31348: PUSH
31349: LD_INT 11
31351: EQUAL
31352: IFFALSE 31373
// points := [ 30 , 10 , 5 ] ;
31354: LD_ADDR_VAR 0 9
31358: PUSH
31359: LD_INT 30
31361: PUSH
31362: LD_INT 10
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_INT 5
31380: PPUSH
31381: CALL_OW 321
31385: PUSH
31386: LD_INT 2
31388: EQUAL
31389: IFFALSE 31406
// bpoints := bpoints * 1.8 ;
31391: LD_ADDR_VAR 0 10
31395: PUSH
31396: LD_VAR 0 10
31400: PUSH
31401: LD_REAL  1.80000000000000E+0000
31404: MUL
31405: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31406: LD_VAR 0 6
31410: PPUSH
31411: CALL_OW 257
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: LD_INT 2
31421: PUSH
31422: LD_INT 3
31424: PUSH
31425: LD_INT 4
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: IN
31434: PUSH
31435: LD_VAR 0 1
31439: PPUSH
31440: LD_INT 51
31442: PPUSH
31443: CALL_OW 321
31447: PUSH
31448: LD_INT 2
31450: EQUAL
31451: AND
31452: IFFALSE 31469
// bpoints := bpoints * 1.2 ;
31454: LD_ADDR_VAR 0 10
31458: PUSH
31459: LD_VAR 0 10
31463: PUSH
31464: LD_REAL  1.20000000000000E+0000
31467: MUL
31468: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31469: LD_VAR 0 6
31473: PPUSH
31474: CALL_OW 257
31478: PUSH
31479: LD_INT 5
31481: PUSH
31482: LD_INT 7
31484: PUSH
31485: LD_INT 9
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: IN
31493: PUSH
31494: LD_VAR 0 1
31498: PPUSH
31499: LD_INT 52
31501: PPUSH
31502: CALL_OW 321
31506: PUSH
31507: LD_INT 2
31509: EQUAL
31510: AND
31511: IFFALSE 31528
// bpoints := bpoints * 1.5 ;
31513: LD_ADDR_VAR 0 10
31517: PUSH
31518: LD_VAR 0 10
31522: PUSH
31523: LD_REAL  1.50000000000000E+0000
31526: MUL
31527: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31528: LD_VAR 0 1
31532: PPUSH
31533: LD_INT 66
31535: PPUSH
31536: CALL_OW 321
31540: PUSH
31541: LD_INT 2
31543: EQUAL
31544: IFFALSE 31561
// bpoints := bpoints * 1.1 ;
31546: LD_ADDR_VAR 0 10
31550: PUSH
31551: LD_VAR 0 10
31555: PUSH
31556: LD_REAL  1.10000000000000E+0000
31559: MUL
31560: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31561: LD_ADDR_VAR 0 10
31565: PUSH
31566: LD_VAR 0 10
31570: PUSH
31571: LD_VAR 0 6
31575: PPUSH
31576: LD_INT 1
31578: PPUSH
31579: CALL_OW 259
31583: PUSH
31584: LD_REAL  1.15000000000000E+0000
31587: MUL
31588: MUL
31589: ST_TO_ADDR
// end ; unit_vehicle :
31590: GO 32420
31592: LD_INT 2
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 32408
31600: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31601: LD_VAR 0 6
31605: PPUSH
31606: CALL_OW 264
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 42
31616: PUSH
31617: LD_INT 24
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: IN
31625: IFFALSE 31646
// points := [ 25 , 5 , 3 ] ;
31627: LD_ADDR_VAR 0 9
31631: PUSH
31632: LD_INT 25
31634: PUSH
31635: LD_INT 5
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31646: LD_VAR 0 6
31650: PPUSH
31651: CALL_OW 264
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: LD_INT 43
31661: PUSH
31662: LD_INT 25
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: IN
31670: IFFALSE 31691
// points := [ 40 , 15 , 5 ] ;
31672: LD_ADDR_VAR 0 9
31676: PUSH
31677: LD_INT 40
31679: PUSH
31680: LD_INT 15
31682: PUSH
31683: LD_INT 5
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31691: LD_VAR 0 6
31695: PPUSH
31696: CALL_OW 264
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: LD_INT 23
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: IN
31711: IFFALSE 31732
// points := [ 7 , 25 , 8 ] ;
31713: LD_ADDR_VAR 0 9
31717: PUSH
31718: LD_INT 7
31720: PUSH
31721: LD_INT 25
31723: PUSH
31724: LD_INT 8
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31732: LD_VAR 0 6
31736: PPUSH
31737: CALL_OW 264
31741: PUSH
31742: LD_INT 5
31744: PUSH
31745: LD_INT 27
31747: PUSH
31748: LD_INT 44
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: IN
31756: IFFALSE 31777
// points := [ 14 , 50 , 16 ] ;
31758: LD_ADDR_VAR 0 9
31762: PUSH
31763: LD_INT 14
31765: PUSH
31766: LD_INT 50
31768: PUSH
31769: LD_INT 16
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31777: LD_VAR 0 6
31781: PPUSH
31782: CALL_OW 264
31786: PUSH
31787: LD_INT 6
31789: PUSH
31790: LD_INT 46
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: IN
31797: IFFALSE 31818
// points := [ 32 , 120 , 70 ] ;
31799: LD_ADDR_VAR 0 9
31803: PUSH
31804: LD_INT 32
31806: PUSH
31807: LD_INT 120
31809: PUSH
31810: LD_INT 70
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31818: LD_VAR 0 6
31822: PPUSH
31823: CALL_OW 264
31827: PUSH
31828: LD_INT 7
31830: PUSH
31831: LD_INT 28
31833: PUSH
31834: LD_INT 45
31836: PUSH
31837: LD_EXP 12
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: IN
31848: IFFALSE 31869
// points := [ 35 , 20 , 45 ] ;
31850: LD_ADDR_VAR 0 9
31854: PUSH
31855: LD_INT 35
31857: PUSH
31858: LD_INT 20
31860: PUSH
31861: LD_INT 45
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31869: LD_VAR 0 6
31873: PPUSH
31874: CALL_OW 264
31878: PUSH
31879: LD_INT 47
31881: PUSH
31882: EMPTY
31883: LIST
31884: IN
31885: IFFALSE 31906
// points := [ 67 , 45 , 75 ] ;
31887: LD_ADDR_VAR 0 9
31891: PUSH
31892: LD_INT 67
31894: PUSH
31895: LD_INT 45
31897: PUSH
31898: LD_INT 75
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31906: LD_VAR 0 6
31910: PPUSH
31911: CALL_OW 264
31915: PUSH
31916: LD_INT 26
31918: PUSH
31919: EMPTY
31920: LIST
31921: IN
31922: IFFALSE 31943
// points := [ 120 , 30 , 80 ] ;
31924: LD_ADDR_VAR 0 9
31928: PUSH
31929: LD_INT 120
31931: PUSH
31932: LD_INT 30
31934: PUSH
31935: LD_INT 80
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31943: LD_VAR 0 6
31947: PPUSH
31948: CALL_OW 264
31952: PUSH
31953: LD_INT 22
31955: PUSH
31956: EMPTY
31957: LIST
31958: IN
31959: IFFALSE 31980
// points := [ 40 , 1 , 1 ] ;
31961: LD_ADDR_VAR 0 9
31965: PUSH
31966: LD_INT 40
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: LIST
31979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31980: LD_VAR 0 6
31984: PPUSH
31985: CALL_OW 264
31989: PUSH
31990: LD_INT 29
31992: PUSH
31993: EMPTY
31994: LIST
31995: IN
31996: IFFALSE 32017
// points := [ 70 , 200 , 400 ] ;
31998: LD_ADDR_VAR 0 9
32002: PUSH
32003: LD_INT 70
32005: PUSH
32006: LD_INT 200
32008: PUSH
32009: LD_INT 400
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32017: LD_VAR 0 6
32021: PPUSH
32022: CALL_OW 264
32026: PUSH
32027: LD_INT 14
32029: PUSH
32030: LD_INT 53
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: IN
32037: IFFALSE 32058
// points := [ 40 , 10 , 20 ] ;
32039: LD_ADDR_VAR 0 9
32043: PUSH
32044: LD_INT 40
32046: PUSH
32047: LD_INT 10
32049: PUSH
32050: LD_INT 20
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32058: LD_VAR 0 6
32062: PPUSH
32063: CALL_OW 264
32067: PUSH
32068: LD_INT 9
32070: PUSH
32071: EMPTY
32072: LIST
32073: IN
32074: IFFALSE 32095
// points := [ 5 , 70 , 20 ] ;
32076: LD_ADDR_VAR 0 9
32080: PUSH
32081: LD_INT 5
32083: PUSH
32084: LD_INT 70
32086: PUSH
32087: LD_INT 20
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32095: LD_VAR 0 6
32099: PPUSH
32100: CALL_OW 264
32104: PUSH
32105: LD_INT 10
32107: PUSH
32108: EMPTY
32109: LIST
32110: IN
32111: IFFALSE 32132
// points := [ 35 , 110 , 70 ] ;
32113: LD_ADDR_VAR 0 9
32117: PUSH
32118: LD_INT 35
32120: PUSH
32121: LD_INT 110
32123: PUSH
32124: LD_INT 70
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32132: LD_VAR 0 6
32136: PPUSH
32137: CALL_OW 265
32141: PUSH
32142: LD_INT 25
32144: EQUAL
32145: IFFALSE 32166
// points := [ 80 , 65 , 100 ] ;
32147: LD_ADDR_VAR 0 9
32151: PUSH
32152: LD_INT 80
32154: PUSH
32155: LD_INT 65
32157: PUSH
32158: LD_INT 100
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32166: LD_VAR 0 6
32170: PPUSH
32171: CALL_OW 263
32175: PUSH
32176: LD_INT 1
32178: EQUAL
32179: IFFALSE 32214
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32181: LD_ADDR_VAR 0 10
32185: PUSH
32186: LD_VAR 0 10
32190: PUSH
32191: LD_VAR 0 6
32195: PPUSH
32196: CALL_OW 311
32200: PPUSH
32201: LD_INT 3
32203: PPUSH
32204: CALL_OW 259
32208: PUSH
32209: LD_INT 4
32211: MUL
32212: MUL
32213: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32214: LD_VAR 0 6
32218: PPUSH
32219: CALL_OW 263
32223: PUSH
32224: LD_INT 2
32226: EQUAL
32227: IFFALSE 32278
// begin j := IsControledBy ( i ) ;
32229: LD_ADDR_VAR 0 7
32233: PUSH
32234: LD_VAR 0 6
32238: PPUSH
32239: CALL_OW 312
32243: ST_TO_ADDR
// if j then
32244: LD_VAR 0 7
32248: IFFALSE 32278
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32250: LD_ADDR_VAR 0 10
32254: PUSH
32255: LD_VAR 0 10
32259: PUSH
32260: LD_VAR 0 7
32264: PPUSH
32265: LD_INT 3
32267: PPUSH
32268: CALL_OW 259
32272: PUSH
32273: LD_INT 3
32275: MUL
32276: MUL
32277: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32278: LD_VAR 0 6
32282: PPUSH
32283: CALL_OW 264
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: LD_INT 6
32293: PUSH
32294: LD_INT 46
32296: PUSH
32297: LD_INT 44
32299: PUSH
32300: LD_INT 47
32302: PUSH
32303: LD_INT 45
32305: PUSH
32306: LD_INT 28
32308: PUSH
32309: LD_INT 7
32311: PUSH
32312: LD_INT 27
32314: PUSH
32315: LD_INT 29
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: IN
32330: PUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: LD_INT 52
32338: PPUSH
32339: CALL_OW 321
32343: PUSH
32344: LD_INT 2
32346: EQUAL
32347: AND
32348: IFFALSE 32365
// bpoints := bpoints * 1.2 ;
32350: LD_ADDR_VAR 0 10
32354: PUSH
32355: LD_VAR 0 10
32359: PUSH
32360: LD_REAL  1.20000000000000E+0000
32363: MUL
32364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32365: LD_VAR 0 6
32369: PPUSH
32370: CALL_OW 264
32374: PUSH
32375: LD_INT 6
32377: PUSH
32378: LD_INT 46
32380: PUSH
32381: LD_INT 47
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: IN
32389: IFFALSE 32406
// bpoints := bpoints * 1.2 ;
32391: LD_ADDR_VAR 0 10
32395: PUSH
32396: LD_VAR 0 10
32400: PUSH
32401: LD_REAL  1.20000000000000E+0000
32404: MUL
32405: ST_TO_ADDR
// end ; unit_building :
32406: GO 32420
32408: LD_INT 3
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32419
32416: POP
// ; end ;
32417: GO 32420
32419: POP
// for j = 1 to 3 do
32420: LD_ADDR_VAR 0 7
32424: PUSH
32425: DOUBLE
32426: LD_INT 1
32428: DEC
32429: ST_TO_ADDR
32430: LD_INT 3
32432: PUSH
32433: FOR_TO
32434: IFFALSE 32487
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32436: LD_ADDR_VAR 0 5
32440: PUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: LD_VAR 0 7
32450: PPUSH
32451: LD_VAR 0 5
32455: PUSH
32456: LD_VAR 0 7
32460: ARRAY
32461: PUSH
32462: LD_VAR 0 9
32466: PUSH
32467: LD_VAR 0 7
32471: ARRAY
32472: PUSH
32473: LD_VAR 0 10
32477: MUL
32478: PLUS
32479: PPUSH
32480: CALL_OW 1
32484: ST_TO_ADDR
32485: GO 32433
32487: POP
32488: POP
// end ;
32489: GO 30966
32491: POP
32492: POP
// result := Replace ( result , 4 , tmp ) ;
32493: LD_ADDR_VAR 0 5
32497: PUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: LD_INT 4
32505: PPUSH
32506: LD_VAR 0 8
32510: PPUSH
32511: CALL_OW 1
32515: ST_TO_ADDR
// end ;
32516: LD_VAR 0 5
32520: RET
// export function DangerAtRange ( unit , range ) ; begin
32521: LD_INT 0
32523: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32524: LD_ADDR_VAR 0 3
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 255
32538: PPUSH
32539: LD_VAR 0 1
32543: PPUSH
32544: CALL_OW 250
32548: PPUSH
32549: LD_VAR 0 1
32553: PPUSH
32554: CALL_OW 251
32558: PPUSH
32559: LD_VAR 0 2
32563: PPUSH
32564: CALL 30818 0 4
32568: ST_TO_ADDR
// end ;
32569: LD_VAR 0 3
32573: RET
// export function DangerInArea ( side , area ) ; begin
32574: LD_INT 0
32576: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_VAR 0 2
32586: PPUSH
32587: LD_INT 81
32589: PUSH
32590: LD_VAR 0 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: CALL_OW 70
32603: ST_TO_ADDR
// end ;
32604: LD_VAR 0 3
32608: RET
// export function IsExtension ( b ) ; begin
32609: LD_INT 0
32611: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32612: LD_ADDR_VAR 0 2
32616: PUSH
32617: LD_VAR 0 1
32621: PUSH
32622: LD_INT 23
32624: PUSH
32625: LD_INT 20
32627: PUSH
32628: LD_INT 22
32630: PUSH
32631: LD_INT 17
32633: PUSH
32634: LD_INT 24
32636: PUSH
32637: LD_INT 21
32639: PUSH
32640: LD_INT 19
32642: PUSH
32643: LD_INT 16
32645: PUSH
32646: LD_INT 25
32648: PUSH
32649: LD_INT 18
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: IN
32664: ST_TO_ADDR
// end ;
32665: LD_VAR 0 2
32669: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32670: LD_INT 0
32672: PPUSH
32673: PPUSH
32674: PPUSH
// result := [ ] ;
32675: LD_ADDR_VAR 0 4
32679: PUSH
32680: EMPTY
32681: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32682: LD_ADDR_VAR 0 5
32686: PUSH
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_INT 21
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PPUSH
32702: CALL_OW 70
32706: ST_TO_ADDR
// if not tmp then
32707: LD_VAR 0 5
32711: NOT
32712: IFFALSE 32716
// exit ;
32714: GO 32780
// if checkLink then
32716: LD_VAR 0 3
32720: IFFALSE 32770
// begin for i in tmp do
32722: LD_ADDR_VAR 0 6
32726: PUSH
32727: LD_VAR 0 5
32731: PUSH
32732: FOR_IN
32733: IFFALSE 32768
// if GetBase ( i ) <> base then
32735: LD_VAR 0 6
32739: PPUSH
32740: CALL_OW 274
32744: PUSH
32745: LD_VAR 0 1
32749: NONEQUAL
32750: IFFALSE 32766
// ComLinkToBase ( base , i ) ;
32752: LD_VAR 0 1
32756: PPUSH
32757: LD_VAR 0 6
32761: PPUSH
32762: CALL_OW 169
32766: GO 32732
32768: POP
32769: POP
// end ; result := tmp ;
32770: LD_ADDR_VAR 0 4
32774: PUSH
32775: LD_VAR 0 5
32779: ST_TO_ADDR
// end ;
32780: LD_VAR 0 4
32784: RET
// export function ComComplete ( units , b ) ; var i ; begin
32785: LD_INT 0
32787: PPUSH
32788: PPUSH
// if not units then
32789: LD_VAR 0 1
32793: NOT
32794: IFFALSE 32798
// exit ;
32796: GO 32888
// for i in units do
32798: LD_ADDR_VAR 0 4
32802: PUSH
32803: LD_VAR 0 1
32807: PUSH
32808: FOR_IN
32809: IFFALSE 32886
// if BuildingStatus ( b ) = bs_build then
32811: LD_VAR 0 2
32815: PPUSH
32816: CALL_OW 461
32820: PUSH
32821: LD_INT 1
32823: EQUAL
32824: IFFALSE 32884
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32826: LD_VAR 0 4
32830: PPUSH
32831: LD_STRING h
32833: PUSH
32834: LD_VAR 0 2
32838: PPUSH
32839: CALL_OW 250
32843: PUSH
32844: LD_VAR 0 2
32848: PPUSH
32849: CALL_OW 251
32853: PUSH
32854: LD_VAR 0 2
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: PPUSH
32880: CALL_OW 446
32884: GO 32808
32886: POP
32887: POP
// end ;
32888: LD_VAR 0 3
32892: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32893: LD_INT 0
32895: PPUSH
32896: PPUSH
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32901: LD_VAR 0 1
32905: NOT
32906: PUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 263
32916: PUSH
32917: LD_INT 2
32919: NONEQUAL
32920: OR
32921: IFFALSE 32925
// exit ;
32923: GO 33241
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32925: LD_ADDR_VAR 0 6
32929: PUSH
32930: LD_INT 22
32932: PUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: CALL_OW 255
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: LD_INT 30
32952: PUSH
32953: LD_INT 36
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 34
32962: PUSH
32963: LD_INT 31
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PPUSH
32979: CALL_OW 69
32983: ST_TO_ADDR
// if not tmp then
32984: LD_VAR 0 6
32988: NOT
32989: IFFALSE 32993
// exit ;
32991: GO 33241
// result := [ ] ;
32993: LD_ADDR_VAR 0 2
32997: PUSH
32998: EMPTY
32999: ST_TO_ADDR
// for i in tmp do
33000: LD_ADDR_VAR 0 3
33004: PUSH
33005: LD_VAR 0 6
33009: PUSH
33010: FOR_IN
33011: IFFALSE 33082
// begin t := UnitsInside ( i ) ;
33013: LD_ADDR_VAR 0 4
33017: PUSH
33018: LD_VAR 0 3
33022: PPUSH
33023: CALL_OW 313
33027: ST_TO_ADDR
// if t then
33028: LD_VAR 0 4
33032: IFFALSE 33080
// for j in t do
33034: LD_ADDR_VAR 0 7
33038: PUSH
33039: LD_VAR 0 4
33043: PUSH
33044: FOR_IN
33045: IFFALSE 33078
// result := Replace ( result , result + 1 , j ) ;
33047: LD_ADDR_VAR 0 2
33051: PUSH
33052: LD_VAR 0 2
33056: PPUSH
33057: LD_VAR 0 2
33061: PUSH
33062: LD_INT 1
33064: PLUS
33065: PPUSH
33066: LD_VAR 0 7
33070: PPUSH
33071: CALL_OW 1
33075: ST_TO_ADDR
33076: GO 33044
33078: POP
33079: POP
// end ;
33080: GO 33010
33082: POP
33083: POP
// if not result then
33084: LD_VAR 0 2
33088: NOT
33089: IFFALSE 33093
// exit ;
33091: GO 33241
// mech := result [ 1 ] ;
33093: LD_ADDR_VAR 0 5
33097: PUSH
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: ST_TO_ADDR
// if result > 1 then
33107: LD_VAR 0 2
33111: PUSH
33112: LD_INT 1
33114: GREATER
33115: IFFALSE 33227
// begin for i = 2 to result do
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: DOUBLE
33123: LD_INT 2
33125: DEC
33126: ST_TO_ADDR
33127: LD_VAR 0 2
33131: PUSH
33132: FOR_TO
33133: IFFALSE 33225
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: LD_VAR 0 2
33144: PUSH
33145: LD_VAR 0 3
33149: ARRAY
33150: PPUSH
33151: LD_INT 3
33153: PPUSH
33154: CALL_OW 259
33158: PUSH
33159: LD_VAR 0 2
33163: PUSH
33164: LD_VAR 0 3
33168: ARRAY
33169: PPUSH
33170: CALL_OW 432
33174: MINUS
33175: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33176: LD_VAR 0 4
33180: PUSH
33181: LD_VAR 0 5
33185: PPUSH
33186: LD_INT 3
33188: PPUSH
33189: CALL_OW 259
33193: PUSH
33194: LD_VAR 0 5
33198: PPUSH
33199: CALL_OW 432
33203: MINUS
33204: GREATEREQUAL
33205: IFFALSE 33223
// mech := result [ i ] ;
33207: LD_ADDR_VAR 0 5
33211: PUSH
33212: LD_VAR 0 2
33216: PUSH
33217: LD_VAR 0 3
33221: ARRAY
33222: ST_TO_ADDR
// end ;
33223: GO 33132
33225: POP
33226: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33227: LD_VAR 0 1
33231: PPUSH
33232: LD_VAR 0 5
33236: PPUSH
33237: CALL_OW 135
// end ;
33241: LD_VAR 0 2
33245: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33246: LD_INT 0
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
// result := [ ] ;
33261: LD_ADDR_VAR 0 7
33265: PUSH
33266: EMPTY
33267: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33268: LD_VAR 0 1
33272: PPUSH
33273: CALL_OW 266
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: IN
33288: NOT
33289: IFFALSE 33293
// exit ;
33291: GO 34927
// if name then
33293: LD_VAR 0 3
33297: IFFALSE 33313
// SetBName ( base_dep , name ) ;
33299: LD_VAR 0 1
33303: PPUSH
33304: LD_VAR 0 3
33308: PPUSH
33309: CALL_OW 500
// base := GetBase ( base_dep ) ;
33313: LD_ADDR_VAR 0 15
33317: PUSH
33318: LD_VAR 0 1
33322: PPUSH
33323: CALL_OW 274
33327: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33328: LD_ADDR_VAR 0 16
33332: PUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 255
33342: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33343: LD_ADDR_VAR 0 17
33347: PUSH
33348: LD_VAR 0 1
33352: PPUSH
33353: CALL_OW 248
33357: ST_TO_ADDR
// if sources then
33358: LD_VAR 0 5
33362: IFFALSE 33409
// for i = 1 to 3 do
33364: LD_ADDR_VAR 0 8
33368: PUSH
33369: DOUBLE
33370: LD_INT 1
33372: DEC
33373: ST_TO_ADDR
33374: LD_INT 3
33376: PUSH
33377: FOR_TO
33378: IFFALSE 33407
// AddResourceType ( base , i , sources [ i ] ) ;
33380: LD_VAR 0 15
33384: PPUSH
33385: LD_VAR 0 8
33389: PPUSH
33390: LD_VAR 0 5
33394: PUSH
33395: LD_VAR 0 8
33399: ARRAY
33400: PPUSH
33401: CALL_OW 276
33405: GO 33377
33407: POP
33408: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33409: LD_ADDR_VAR 0 18
33413: PUSH
33414: LD_VAR 0 15
33418: PPUSH
33419: LD_VAR 0 2
33423: PPUSH
33424: LD_INT 1
33426: PPUSH
33427: CALL 32670 0 3
33431: ST_TO_ADDR
// InitHc ;
33432: CALL_OW 19
// InitUc ;
33436: CALL_OW 18
// uc_side := side ;
33440: LD_ADDR_OWVAR 20
33444: PUSH
33445: LD_VAR 0 16
33449: ST_TO_ADDR
// uc_nation := nation ;
33450: LD_ADDR_OWVAR 21
33454: PUSH
33455: LD_VAR 0 17
33459: ST_TO_ADDR
// if buildings then
33460: LD_VAR 0 18
33464: IFFALSE 34786
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33466: LD_ADDR_VAR 0 19
33470: PUSH
33471: LD_VAR 0 18
33475: PPUSH
33476: LD_INT 2
33478: PUSH
33479: LD_INT 30
33481: PUSH
33482: LD_INT 29
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 30
33491: PUSH
33492: LD_INT 30
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 72
33508: ST_TO_ADDR
// if tmp then
33509: LD_VAR 0 19
33513: IFFALSE 33561
// for i in tmp do
33515: LD_ADDR_VAR 0 8
33519: PUSH
33520: LD_VAR 0 19
33524: PUSH
33525: FOR_IN
33526: IFFALSE 33559
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33528: LD_VAR 0 8
33532: PPUSH
33533: CALL_OW 250
33537: PPUSH
33538: LD_VAR 0 8
33542: PPUSH
33543: CALL_OW 251
33547: PPUSH
33548: LD_VAR 0 16
33552: PPUSH
33553: CALL_OW 441
33557: GO 33525
33559: POP
33560: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33561: LD_VAR 0 18
33565: PPUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 30
33571: PUSH
33572: LD_INT 32
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 30
33581: PUSH
33582: LD_INT 33
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: PPUSH
33594: CALL_OW 72
33598: IFFALSE 33686
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33600: LD_ADDR_VAR 0 8
33604: PUSH
33605: LD_VAR 0 18
33609: PPUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 30
33615: PUSH
33616: LD_INT 32
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 30
33625: PUSH
33626: LD_INT 33
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PPUSH
33638: CALL_OW 72
33642: PUSH
33643: FOR_IN
33644: IFFALSE 33684
// begin if not GetBWeapon ( i ) then
33646: LD_VAR 0 8
33650: PPUSH
33651: CALL_OW 269
33655: NOT
33656: IFFALSE 33682
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33658: LD_VAR 0 8
33662: PPUSH
33663: LD_VAR 0 8
33667: PPUSH
33668: LD_VAR 0 2
33672: PPUSH
33673: CALL 34932 0 2
33677: PPUSH
33678: CALL_OW 431
// end ;
33682: GO 33643
33684: POP
33685: POP
// end ; for i = 1 to personel do
33686: LD_ADDR_VAR 0 8
33690: PUSH
33691: DOUBLE
33692: LD_INT 1
33694: DEC
33695: ST_TO_ADDR
33696: LD_VAR 0 6
33700: PUSH
33701: FOR_TO
33702: IFFALSE 34766
// begin if i > 4 then
33704: LD_VAR 0 8
33708: PUSH
33709: LD_INT 4
33711: GREATER
33712: IFFALSE 33716
// break ;
33714: GO 34766
// case i of 1 :
33716: LD_VAR 0 8
33720: PUSH
33721: LD_INT 1
33723: DOUBLE
33724: EQUAL
33725: IFTRUE 33729
33727: GO 33809
33729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33730: LD_ADDR_VAR 0 12
33734: PUSH
33735: LD_VAR 0 18
33739: PPUSH
33740: LD_INT 22
33742: PUSH
33743: LD_VAR 0 16
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 58
33754: PUSH
33755: EMPTY
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 30
33763: PUSH
33764: LD_INT 32
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 30
33773: PUSH
33774: LD_INT 4
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 30
33783: PUSH
33784: LD_INT 5
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: PPUSH
33802: CALL_OW 72
33806: ST_TO_ADDR
33807: GO 34031
33809: LD_INT 2
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33817
33815: GO 33879
33817: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33818: LD_ADDR_VAR 0 12
33822: PUSH
33823: LD_VAR 0 18
33827: PPUSH
33828: LD_INT 22
33830: PUSH
33831: LD_VAR 0 16
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 30
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 30
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PPUSH
33872: CALL_OW 72
33876: ST_TO_ADDR
33877: GO 34031
33879: LD_INT 3
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33887
33885: GO 33949
33887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33888: LD_ADDR_VAR 0 12
33892: PUSH
33893: LD_VAR 0 18
33897: PPUSH
33898: LD_INT 22
33900: PUSH
33901: LD_VAR 0 16
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: LD_INT 30
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 30
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PPUSH
33942: CALL_OW 72
33946: ST_TO_ADDR
33947: GO 34031
33949: LD_INT 4
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 34030
33957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33958: LD_ADDR_VAR 0 12
33962: PUSH
33963: LD_VAR 0 18
33967: PPUSH
33968: LD_INT 22
33970: PUSH
33971: LD_VAR 0 16
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: PUSH
33983: LD_INT 30
33985: PUSH
33986: LD_INT 6
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 30
33995: PUSH
33996: LD_INT 7
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 30
34005: PUSH
34006: LD_INT 8
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PPUSH
34023: CALL_OW 72
34027: ST_TO_ADDR
34028: GO 34031
34030: POP
// if i = 1 then
34031: LD_VAR 0 8
34035: PUSH
34036: LD_INT 1
34038: EQUAL
34039: IFFALSE 34150
// begin tmp := [ ] ;
34041: LD_ADDR_VAR 0 19
34045: PUSH
34046: EMPTY
34047: ST_TO_ADDR
// for j in f do
34048: LD_ADDR_VAR 0 9
34052: PUSH
34053: LD_VAR 0 12
34057: PUSH
34058: FOR_IN
34059: IFFALSE 34132
// if GetBType ( j ) = b_bunker then
34061: LD_VAR 0 9
34065: PPUSH
34066: CALL_OW 266
34070: PUSH
34071: LD_INT 32
34073: EQUAL
34074: IFFALSE 34101
// tmp := Insert ( tmp , 1 , j ) else
34076: LD_ADDR_VAR 0 19
34080: PUSH
34081: LD_VAR 0 19
34085: PPUSH
34086: LD_INT 1
34088: PPUSH
34089: LD_VAR 0 9
34093: PPUSH
34094: CALL_OW 2
34098: ST_TO_ADDR
34099: GO 34130
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34101: LD_ADDR_VAR 0 19
34105: PUSH
34106: LD_VAR 0 19
34110: PPUSH
34111: LD_VAR 0 19
34115: PUSH
34116: LD_INT 1
34118: PLUS
34119: PPUSH
34120: LD_VAR 0 9
34124: PPUSH
34125: CALL_OW 2
34129: ST_TO_ADDR
34130: GO 34058
34132: POP
34133: POP
// if tmp then
34134: LD_VAR 0 19
34138: IFFALSE 34150
// f := tmp ;
34140: LD_ADDR_VAR 0 12
34144: PUSH
34145: LD_VAR 0 19
34149: ST_TO_ADDR
// end ; x := personel [ i ] ;
34150: LD_ADDR_VAR 0 13
34154: PUSH
34155: LD_VAR 0 6
34159: PUSH
34160: LD_VAR 0 8
34164: ARRAY
34165: ST_TO_ADDR
// if x = - 1 then
34166: LD_VAR 0 13
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: EQUAL
34175: IFFALSE 34384
// begin for j in f do
34177: LD_ADDR_VAR 0 9
34181: PUSH
34182: LD_VAR 0 12
34186: PUSH
34187: FOR_IN
34188: IFFALSE 34380
// repeat InitHc ;
34190: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34194: LD_VAR 0 9
34198: PPUSH
34199: CALL_OW 266
34203: PUSH
34204: LD_INT 5
34206: EQUAL
34207: IFFALSE 34277
// begin if UnitsInside ( j ) < 3 then
34209: LD_VAR 0 9
34213: PPUSH
34214: CALL_OW 313
34218: PUSH
34219: LD_INT 3
34221: LESS
34222: IFFALSE 34258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34224: LD_INT 0
34226: PPUSH
34227: LD_INT 5
34229: PUSH
34230: LD_INT 8
34232: PUSH
34233: LD_INT 9
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: PUSH
34241: LD_VAR 0 17
34245: ARRAY
34246: PPUSH
34247: LD_VAR 0 4
34251: PPUSH
34252: CALL_OW 380
34256: GO 34275
// PrepareHuman ( false , i , skill ) ;
34258: LD_INT 0
34260: PPUSH
34261: LD_VAR 0 8
34265: PPUSH
34266: LD_VAR 0 4
34270: PPUSH
34271: CALL_OW 380
// end else
34275: GO 34294
// PrepareHuman ( false , i , skill ) ;
34277: LD_INT 0
34279: PPUSH
34280: LD_VAR 0 8
34284: PPUSH
34285: LD_VAR 0 4
34289: PPUSH
34290: CALL_OW 380
// un := CreateHuman ;
34294: LD_ADDR_VAR 0 14
34298: PUSH
34299: CALL_OW 44
34303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34304: LD_ADDR_VAR 0 7
34308: PUSH
34309: LD_VAR 0 7
34313: PPUSH
34314: LD_INT 1
34316: PPUSH
34317: LD_VAR 0 14
34321: PPUSH
34322: CALL_OW 2
34326: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34327: LD_VAR 0 14
34331: PPUSH
34332: LD_VAR 0 9
34336: PPUSH
34337: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34341: LD_VAR 0 9
34345: PPUSH
34346: CALL_OW 313
34350: PUSH
34351: LD_INT 6
34353: EQUAL
34354: PUSH
34355: LD_VAR 0 9
34359: PPUSH
34360: CALL_OW 266
34364: PUSH
34365: LD_INT 32
34367: PUSH
34368: LD_INT 31
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: IN
34375: OR
34376: IFFALSE 34190
34378: GO 34187
34380: POP
34381: POP
// end else
34382: GO 34764
// for j = 1 to x do
34384: LD_ADDR_VAR 0 9
34388: PUSH
34389: DOUBLE
34390: LD_INT 1
34392: DEC
34393: ST_TO_ADDR
34394: LD_VAR 0 13
34398: PUSH
34399: FOR_TO
34400: IFFALSE 34762
// begin InitHc ;
34402: CALL_OW 19
// if not f then
34406: LD_VAR 0 12
34410: NOT
34411: IFFALSE 34500
// begin PrepareHuman ( false , i , skill ) ;
34413: LD_INT 0
34415: PPUSH
34416: LD_VAR 0 8
34420: PPUSH
34421: LD_VAR 0 4
34425: PPUSH
34426: CALL_OW 380
// un := CreateHuman ;
34430: LD_ADDR_VAR 0 14
34434: PUSH
34435: CALL_OW 44
34439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34440: LD_ADDR_VAR 0 7
34444: PUSH
34445: LD_VAR 0 7
34449: PPUSH
34450: LD_INT 1
34452: PPUSH
34453: LD_VAR 0 14
34457: PPUSH
34458: CALL_OW 2
34462: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34463: LD_VAR 0 14
34467: PPUSH
34468: LD_VAR 0 1
34472: PPUSH
34473: CALL_OW 250
34477: PPUSH
34478: LD_VAR 0 1
34482: PPUSH
34483: CALL_OW 251
34487: PPUSH
34488: LD_INT 10
34490: PPUSH
34491: LD_INT 0
34493: PPUSH
34494: CALL_OW 50
// continue ;
34498: GO 34399
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34500: LD_VAR 0 12
34504: PUSH
34505: LD_INT 1
34507: ARRAY
34508: PPUSH
34509: CALL_OW 313
34513: PUSH
34514: LD_VAR 0 12
34518: PUSH
34519: LD_INT 1
34521: ARRAY
34522: PPUSH
34523: CALL_OW 266
34527: PUSH
34528: LD_INT 32
34530: PUSH
34531: LD_INT 31
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: IN
34538: AND
34539: PUSH
34540: LD_VAR 0 12
34544: PUSH
34545: LD_INT 1
34547: ARRAY
34548: PPUSH
34549: CALL_OW 313
34553: PUSH
34554: LD_INT 6
34556: EQUAL
34557: OR
34558: IFFALSE 34578
// f := Delete ( f , 1 ) ;
34560: LD_ADDR_VAR 0 12
34564: PUSH
34565: LD_VAR 0 12
34569: PPUSH
34570: LD_INT 1
34572: PPUSH
34573: CALL_OW 3
34577: ST_TO_ADDR
// if not f then
34578: LD_VAR 0 12
34582: NOT
34583: IFFALSE 34601
// begin x := x + 2 ;
34585: LD_ADDR_VAR 0 13
34589: PUSH
34590: LD_VAR 0 13
34594: PUSH
34595: LD_INT 2
34597: PLUS
34598: ST_TO_ADDR
// continue ;
34599: GO 34399
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34601: LD_VAR 0 12
34605: PUSH
34606: LD_INT 1
34608: ARRAY
34609: PPUSH
34610: CALL_OW 266
34614: PUSH
34615: LD_INT 5
34617: EQUAL
34618: IFFALSE 34692
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34620: LD_VAR 0 12
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PPUSH
34629: CALL_OW 313
34633: PUSH
34634: LD_INT 3
34636: LESS
34637: IFFALSE 34673
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34639: LD_INT 0
34641: PPUSH
34642: LD_INT 5
34644: PUSH
34645: LD_INT 8
34647: PUSH
34648: LD_INT 9
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_VAR 0 17
34660: ARRAY
34661: PPUSH
34662: LD_VAR 0 4
34666: PPUSH
34667: CALL_OW 380
34671: GO 34690
// PrepareHuman ( false , i , skill ) ;
34673: LD_INT 0
34675: PPUSH
34676: LD_VAR 0 8
34680: PPUSH
34681: LD_VAR 0 4
34685: PPUSH
34686: CALL_OW 380
// end else
34690: GO 34709
// PrepareHuman ( false , i , skill ) ;
34692: LD_INT 0
34694: PPUSH
34695: LD_VAR 0 8
34699: PPUSH
34700: LD_VAR 0 4
34704: PPUSH
34705: CALL_OW 380
// un := CreateHuman ;
34709: LD_ADDR_VAR 0 14
34713: PUSH
34714: CALL_OW 44
34718: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34719: LD_ADDR_VAR 0 7
34723: PUSH
34724: LD_VAR 0 7
34728: PPUSH
34729: LD_INT 1
34731: PPUSH
34732: LD_VAR 0 14
34736: PPUSH
34737: CALL_OW 2
34741: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34742: LD_VAR 0 14
34746: PPUSH
34747: LD_VAR 0 12
34751: PUSH
34752: LD_INT 1
34754: ARRAY
34755: PPUSH
34756: CALL_OW 52
// end ;
34760: GO 34399
34762: POP
34763: POP
// end ;
34764: GO 33701
34766: POP
34767: POP
// result := result ^ buildings ;
34768: LD_ADDR_VAR 0 7
34772: PUSH
34773: LD_VAR 0 7
34777: PUSH
34778: LD_VAR 0 18
34782: ADD
34783: ST_TO_ADDR
// end else
34784: GO 34927
// begin for i = 1 to personel do
34786: LD_ADDR_VAR 0 8
34790: PUSH
34791: DOUBLE
34792: LD_INT 1
34794: DEC
34795: ST_TO_ADDR
34796: LD_VAR 0 6
34800: PUSH
34801: FOR_TO
34802: IFFALSE 34925
// begin if i > 4 then
34804: LD_VAR 0 8
34808: PUSH
34809: LD_INT 4
34811: GREATER
34812: IFFALSE 34816
// break ;
34814: GO 34925
// x := personel [ i ] ;
34816: LD_ADDR_VAR 0 13
34820: PUSH
34821: LD_VAR 0 6
34825: PUSH
34826: LD_VAR 0 8
34830: ARRAY
34831: ST_TO_ADDR
// if x = - 1 then
34832: LD_VAR 0 13
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: EQUAL
34841: IFFALSE 34845
// continue ;
34843: GO 34801
// PrepareHuman ( false , i , skill ) ;
34845: LD_INT 0
34847: PPUSH
34848: LD_VAR 0 8
34852: PPUSH
34853: LD_VAR 0 4
34857: PPUSH
34858: CALL_OW 380
// un := CreateHuman ;
34862: LD_ADDR_VAR 0 14
34866: PUSH
34867: CALL_OW 44
34871: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34872: LD_VAR 0 14
34876: PPUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL_OW 250
34886: PPUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL_OW 251
34896: PPUSH
34897: LD_INT 10
34899: PPUSH
34900: LD_INT 0
34902: PPUSH
34903: CALL_OW 50
// result := result ^ un ;
34907: LD_ADDR_VAR 0 7
34911: PUSH
34912: LD_VAR 0 7
34916: PUSH
34917: LD_VAR 0 14
34921: ADD
34922: ST_TO_ADDR
// end ;
34923: GO 34801
34925: POP
34926: POP
// end ; end ;
34927: LD_VAR 0 7
34931: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34932: LD_INT 0
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
// result := false ;
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_INT 0
34957: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34958: LD_VAR 0 1
34962: NOT
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 266
34973: PUSH
34974: LD_INT 32
34976: PUSH
34977: LD_INT 33
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: IN
34984: NOT
34985: OR
34986: IFFALSE 34990
// exit ;
34988: GO 36099
// nat := GetNation ( tower ) ;
34990: LD_ADDR_VAR 0 12
34994: PUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 248
35004: ST_TO_ADDR
// side := GetSide ( tower ) ;
35005: LD_ADDR_VAR 0 16
35009: PUSH
35010: LD_VAR 0 1
35014: PPUSH
35015: CALL_OW 255
35019: ST_TO_ADDR
// x := GetX ( tower ) ;
35020: LD_ADDR_VAR 0 10
35024: PUSH
35025: LD_VAR 0 1
35029: PPUSH
35030: CALL_OW 250
35034: ST_TO_ADDR
// y := GetY ( tower ) ;
35035: LD_ADDR_VAR 0 11
35039: PUSH
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL_OW 251
35049: ST_TO_ADDR
// if not x or not y then
35050: LD_VAR 0 10
35054: NOT
35055: PUSH
35056: LD_VAR 0 11
35060: NOT
35061: OR
35062: IFFALSE 35066
// exit ;
35064: GO 36099
// weapon := 0 ;
35066: LD_ADDR_VAR 0 18
35070: PUSH
35071: LD_INT 0
35073: ST_TO_ADDR
// fac_list := [ ] ;
35074: LD_ADDR_VAR 0 17
35078: PUSH
35079: EMPTY
35080: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35081: LD_ADDR_VAR 0 6
35085: PUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 274
35095: PPUSH
35096: LD_VAR 0 2
35100: PPUSH
35101: LD_INT 0
35103: PPUSH
35104: CALL 32670 0 3
35108: PPUSH
35109: LD_INT 30
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PPUSH
35119: CALL_OW 72
35123: ST_TO_ADDR
// if not factories then
35124: LD_VAR 0 6
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 36099
// for i in factories do
35133: LD_ADDR_VAR 0 8
35137: PUSH
35138: LD_VAR 0 6
35142: PUSH
35143: FOR_IN
35144: IFFALSE 35169
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35146: LD_ADDR_VAR 0 17
35150: PUSH
35151: LD_VAR 0 17
35155: PUSH
35156: LD_VAR 0 8
35160: PPUSH
35161: CALL_OW 478
35165: UNION
35166: ST_TO_ADDR
35167: GO 35143
35169: POP
35170: POP
// if not fac_list then
35171: LD_VAR 0 17
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 36099
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35180: LD_ADDR_VAR 0 5
35184: PUSH
35185: LD_INT 4
35187: PUSH
35188: LD_INT 5
35190: PUSH
35191: LD_INT 9
35193: PUSH
35194: LD_INT 10
35196: PUSH
35197: LD_INT 6
35199: PUSH
35200: LD_INT 7
35202: PUSH
35203: LD_INT 11
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 27
35217: PUSH
35218: LD_INT 28
35220: PUSH
35221: LD_INT 26
35223: PUSH
35224: LD_INT 30
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 43
35235: PUSH
35236: LD_INT 44
35238: PUSH
35239: LD_INT 46
35241: PUSH
35242: LD_INT 45
35244: PUSH
35245: LD_INT 47
35247: PUSH
35248: LD_INT 49
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: PUSH
35264: LD_VAR 0 12
35268: ARRAY
35269: ST_TO_ADDR
// list := list isect fac_list ;
35270: LD_ADDR_VAR 0 5
35274: PUSH
35275: LD_VAR 0 5
35279: PUSH
35280: LD_VAR 0 17
35284: ISECT
35285: ST_TO_ADDR
// if not list then
35286: LD_VAR 0 5
35290: NOT
35291: IFFALSE 35295
// exit ;
35293: GO 36099
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35295: LD_VAR 0 12
35299: PUSH
35300: LD_INT 3
35302: EQUAL
35303: PUSH
35304: LD_INT 49
35306: PUSH
35307: LD_VAR 0 5
35311: IN
35312: AND
35313: PUSH
35314: LD_INT 31
35316: PPUSH
35317: LD_VAR 0 16
35321: PPUSH
35322: CALL_OW 321
35326: PUSH
35327: LD_INT 2
35329: EQUAL
35330: AND
35331: IFFALSE 35391
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35333: LD_INT 22
35335: PUSH
35336: LD_VAR 0 16
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 35
35347: PUSH
35348: LD_INT 49
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 91
35357: PUSH
35358: LD_VAR 0 1
35362: PUSH
35363: LD_INT 10
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: PPUSH
35376: CALL_OW 69
35380: NOT
35381: IFFALSE 35391
// weapon := ru_time_lapser ;
35383: LD_ADDR_VAR 0 18
35387: PUSH
35388: LD_INT 49
35390: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35391: LD_VAR 0 12
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: IN
35406: PUSH
35407: LD_INT 11
35409: PUSH
35410: LD_VAR 0 5
35414: IN
35415: PUSH
35416: LD_INT 30
35418: PUSH
35419: LD_VAR 0 5
35423: IN
35424: OR
35425: AND
35426: PUSH
35427: LD_INT 6
35429: PPUSH
35430: LD_VAR 0 16
35434: PPUSH
35435: CALL_OW 321
35439: PUSH
35440: LD_INT 2
35442: EQUAL
35443: AND
35444: IFFALSE 35609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35446: LD_INT 22
35448: PUSH
35449: LD_VAR 0 16
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 35
35463: PUSH
35464: LD_INT 11
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 35
35473: PUSH
35474: LD_INT 30
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 91
35488: PUSH
35489: LD_VAR 0 1
35493: PUSH
35494: LD_INT 18
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: PPUSH
35507: CALL_OW 69
35511: NOT
35512: PUSH
35513: LD_INT 22
35515: PUSH
35516: LD_VAR 0 16
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 30
35530: PUSH
35531: LD_INT 32
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 30
35540: PUSH
35541: LD_INT 33
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 91
35555: PUSH
35556: LD_VAR 0 1
35560: PUSH
35561: LD_INT 12
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: PUSH
35574: EMPTY
35575: LIST
35576: PPUSH
35577: CALL_OW 69
35581: PUSH
35582: LD_INT 2
35584: GREATER
35585: AND
35586: IFFALSE 35609
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35588: LD_ADDR_VAR 0 18
35592: PUSH
35593: LD_INT 11
35595: PUSH
35596: LD_INT 30
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_VAR 0 12
35607: ARRAY
35608: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35609: LD_VAR 0 18
35613: NOT
35614: PUSH
35615: LD_INT 40
35617: PPUSH
35618: LD_VAR 0 16
35622: PPUSH
35623: CALL_OW 321
35627: PUSH
35628: LD_INT 2
35630: EQUAL
35631: AND
35632: PUSH
35633: LD_INT 7
35635: PUSH
35636: LD_VAR 0 5
35640: IN
35641: PUSH
35642: LD_INT 28
35644: PUSH
35645: LD_VAR 0 5
35649: IN
35650: OR
35651: PUSH
35652: LD_INT 45
35654: PUSH
35655: LD_VAR 0 5
35659: IN
35660: OR
35661: AND
35662: IFFALSE 35916
// begin hex := GetHexInfo ( x , y ) ;
35664: LD_ADDR_VAR 0 4
35668: PUSH
35669: LD_VAR 0 10
35673: PPUSH
35674: LD_VAR 0 11
35678: PPUSH
35679: CALL_OW 546
35683: ST_TO_ADDR
// if hex [ 1 ] then
35684: LD_VAR 0 4
35688: PUSH
35689: LD_INT 1
35691: ARRAY
35692: IFFALSE 35696
// exit ;
35694: GO 36099
// height := hex [ 2 ] ;
35696: LD_ADDR_VAR 0 15
35700: PUSH
35701: LD_VAR 0 4
35705: PUSH
35706: LD_INT 2
35708: ARRAY
35709: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35710: LD_ADDR_VAR 0 14
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 3
35723: PUSH
35724: LD_INT 5
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// for i in tmp do
35733: LD_ADDR_VAR 0 8
35737: PUSH
35738: LD_VAR 0 14
35742: PUSH
35743: FOR_IN
35744: IFFALSE 35914
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35746: LD_ADDR_VAR 0 9
35750: PUSH
35751: LD_VAR 0 10
35755: PPUSH
35756: LD_VAR 0 8
35760: PPUSH
35761: LD_INT 5
35763: PPUSH
35764: CALL_OW 272
35768: PUSH
35769: LD_VAR 0 11
35773: PPUSH
35774: LD_VAR 0 8
35778: PPUSH
35779: LD_INT 5
35781: PPUSH
35782: CALL_OW 273
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35791: LD_VAR 0 9
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: LD_VAR 0 9
35804: PUSH
35805: LD_INT 2
35807: ARRAY
35808: PPUSH
35809: CALL_OW 488
35813: IFFALSE 35912
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35815: LD_ADDR_VAR 0 4
35819: PUSH
35820: LD_VAR 0 9
35824: PUSH
35825: LD_INT 1
35827: ARRAY
35828: PPUSH
35829: LD_VAR 0 9
35833: PUSH
35834: LD_INT 2
35836: ARRAY
35837: PPUSH
35838: CALL_OW 546
35842: ST_TO_ADDR
// if hex [ 1 ] then
35843: LD_VAR 0 4
35847: PUSH
35848: LD_INT 1
35850: ARRAY
35851: IFFALSE 35855
// continue ;
35853: GO 35743
// h := hex [ 2 ] ;
35855: LD_ADDR_VAR 0 13
35859: PUSH
35860: LD_VAR 0 4
35864: PUSH
35865: LD_INT 2
35867: ARRAY
35868: ST_TO_ADDR
// if h + 7 < height then
35869: LD_VAR 0 13
35873: PUSH
35874: LD_INT 7
35876: PLUS
35877: PUSH
35878: LD_VAR 0 15
35882: LESS
35883: IFFALSE 35912
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35885: LD_ADDR_VAR 0 18
35889: PUSH
35890: LD_INT 7
35892: PUSH
35893: LD_INT 28
35895: PUSH
35896: LD_INT 45
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_VAR 0 12
35908: ARRAY
35909: ST_TO_ADDR
// break ;
35910: GO 35914
// end ; end ; end ;
35912: GO 35743
35914: POP
35915: POP
// end ; if not weapon then
35916: LD_VAR 0 18
35920: NOT
35921: IFFALSE 35981
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35923: LD_ADDR_VAR 0 5
35927: PUSH
35928: LD_VAR 0 5
35932: PUSH
35933: LD_INT 11
35935: PUSH
35936: LD_INT 30
35938: PUSH
35939: LD_INT 49
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: DIFF
35947: ST_TO_ADDR
// if not list then
35948: LD_VAR 0 5
35952: NOT
35953: IFFALSE 35957
// exit ;
35955: GO 36099
// weapon := list [ rand ( 1 , list ) ] ;
35957: LD_ADDR_VAR 0 18
35961: PUSH
35962: LD_VAR 0 5
35966: PUSH
35967: LD_INT 1
35969: PPUSH
35970: LD_VAR 0 5
35974: PPUSH
35975: CALL_OW 12
35979: ARRAY
35980: ST_TO_ADDR
// end ; if weapon then
35981: LD_VAR 0 18
35985: IFFALSE 36099
// begin tmp := CostOfWeapon ( weapon ) ;
35987: LD_ADDR_VAR 0 14
35991: PUSH
35992: LD_VAR 0 18
35996: PPUSH
35997: CALL_OW 451
36001: ST_TO_ADDR
// j := GetBase ( tower ) ;
36002: LD_ADDR_VAR 0 9
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 274
36016: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36017: LD_VAR 0 9
36021: PPUSH
36022: LD_INT 1
36024: PPUSH
36025: CALL_OW 275
36029: PUSH
36030: LD_VAR 0 14
36034: PUSH
36035: LD_INT 1
36037: ARRAY
36038: GREATEREQUAL
36039: PUSH
36040: LD_VAR 0 9
36044: PPUSH
36045: LD_INT 2
36047: PPUSH
36048: CALL_OW 275
36052: PUSH
36053: LD_VAR 0 14
36057: PUSH
36058: LD_INT 2
36060: ARRAY
36061: GREATEREQUAL
36062: AND
36063: PUSH
36064: LD_VAR 0 9
36068: PPUSH
36069: LD_INT 3
36071: PPUSH
36072: CALL_OW 275
36076: PUSH
36077: LD_VAR 0 14
36081: PUSH
36082: LD_INT 3
36084: ARRAY
36085: GREATEREQUAL
36086: AND
36087: IFFALSE 36099
// result := weapon ;
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_VAR 0 18
36098: ST_TO_ADDR
// end ; end ;
36099: LD_VAR 0 3
36103: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36104: LD_INT 0
36106: PPUSH
36107: PPUSH
// result := true ;
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_INT 1
36115: ST_TO_ADDR
// if array1 = array2 then
36116: LD_VAR 0 1
36120: PUSH
36121: LD_VAR 0 2
36125: EQUAL
36126: IFFALSE 36186
// begin for i = 1 to array1 do
36128: LD_ADDR_VAR 0 4
36132: PUSH
36133: DOUBLE
36134: LD_INT 1
36136: DEC
36137: ST_TO_ADDR
36138: LD_VAR 0 1
36142: PUSH
36143: FOR_TO
36144: IFFALSE 36182
// if array1 [ i ] <> array2 [ i ] then
36146: LD_VAR 0 1
36150: PUSH
36151: LD_VAR 0 4
36155: ARRAY
36156: PUSH
36157: LD_VAR 0 2
36161: PUSH
36162: LD_VAR 0 4
36166: ARRAY
36167: NONEQUAL
36168: IFFALSE 36180
// begin result := false ;
36170: LD_ADDR_VAR 0 3
36174: PUSH
36175: LD_INT 0
36177: ST_TO_ADDR
// break ;
36178: GO 36182
// end ;
36180: GO 36143
36182: POP
36183: POP
// end else
36184: GO 36194
// result := false ;
36186: LD_ADDR_VAR 0 3
36190: PUSH
36191: LD_INT 0
36193: ST_TO_ADDR
// end ;
36194: LD_VAR 0 3
36198: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36199: LD_INT 0
36201: PPUSH
36202: PPUSH
// if not array1 or not array2 then
36203: LD_VAR 0 1
36207: NOT
36208: PUSH
36209: LD_VAR 0 2
36213: NOT
36214: OR
36215: IFFALSE 36219
// exit ;
36217: GO 36283
// result := true ;
36219: LD_ADDR_VAR 0 3
36223: PUSH
36224: LD_INT 1
36226: ST_TO_ADDR
// for i = 1 to array1 do
36227: LD_ADDR_VAR 0 4
36231: PUSH
36232: DOUBLE
36233: LD_INT 1
36235: DEC
36236: ST_TO_ADDR
36237: LD_VAR 0 1
36241: PUSH
36242: FOR_TO
36243: IFFALSE 36281
// if array1 [ i ] <> array2 [ i ] then
36245: LD_VAR 0 1
36249: PUSH
36250: LD_VAR 0 4
36254: ARRAY
36255: PUSH
36256: LD_VAR 0 2
36260: PUSH
36261: LD_VAR 0 4
36265: ARRAY
36266: NONEQUAL
36267: IFFALSE 36279
// begin result := false ;
36269: LD_ADDR_VAR 0 3
36273: PUSH
36274: LD_INT 0
36276: ST_TO_ADDR
// break ;
36277: GO 36281
// end ;
36279: GO 36242
36281: POP
36282: POP
// end ;
36283: LD_VAR 0 3
36287: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36288: LD_INT 0
36290: PPUSH
36291: PPUSH
36292: PPUSH
// pom := GetBase ( fac ) ;
36293: LD_ADDR_VAR 0 5
36297: PUSH
36298: LD_VAR 0 1
36302: PPUSH
36303: CALL_OW 274
36307: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36308: LD_ADDR_VAR 0 4
36312: PUSH
36313: LD_VAR 0 2
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 2
36326: PUSH
36327: LD_INT 2
36329: ARRAY
36330: PPUSH
36331: LD_VAR 0 2
36335: PUSH
36336: LD_INT 3
36338: ARRAY
36339: PPUSH
36340: LD_VAR 0 2
36344: PUSH
36345: LD_INT 4
36347: ARRAY
36348: PPUSH
36349: CALL_OW 449
36353: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: LD_VAR 0 5
36363: PPUSH
36364: LD_INT 1
36366: PPUSH
36367: CALL_OW 275
36371: PUSH
36372: LD_VAR 0 4
36376: PUSH
36377: LD_INT 1
36379: ARRAY
36380: GREATEREQUAL
36381: PUSH
36382: LD_VAR 0 5
36386: PPUSH
36387: LD_INT 2
36389: PPUSH
36390: CALL_OW 275
36394: PUSH
36395: LD_VAR 0 4
36399: PUSH
36400: LD_INT 2
36402: ARRAY
36403: GREATEREQUAL
36404: AND
36405: PUSH
36406: LD_VAR 0 5
36410: PPUSH
36411: LD_INT 3
36413: PPUSH
36414: CALL_OW 275
36418: PUSH
36419: LD_VAR 0 4
36423: PUSH
36424: LD_INT 3
36426: ARRAY
36427: GREATEREQUAL
36428: AND
36429: ST_TO_ADDR
// end ;
36430: LD_VAR 0 3
36434: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36435: LD_INT 0
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
// pom := GetBase ( building ) ;
36441: LD_ADDR_VAR 0 3
36445: PUSH
36446: LD_VAR 0 1
36450: PPUSH
36451: CALL_OW 274
36455: ST_TO_ADDR
// if not pom then
36456: LD_VAR 0 3
36460: NOT
36461: IFFALSE 36465
// exit ;
36463: GO 36635
// btype := GetBType ( building ) ;
36465: LD_ADDR_VAR 0 5
36469: PUSH
36470: LD_VAR 0 1
36474: PPUSH
36475: CALL_OW 266
36479: ST_TO_ADDR
// if btype = b_armoury then
36480: LD_VAR 0 5
36484: PUSH
36485: LD_INT 4
36487: EQUAL
36488: IFFALSE 36498
// btype := b_barracks ;
36490: LD_ADDR_VAR 0 5
36494: PUSH
36495: LD_INT 5
36497: ST_TO_ADDR
// if btype = b_depot then
36498: LD_VAR 0 5
36502: PUSH
36503: LD_INT 0
36505: EQUAL
36506: IFFALSE 36516
// btype := b_warehouse ;
36508: LD_ADDR_VAR 0 5
36512: PUSH
36513: LD_INT 1
36515: ST_TO_ADDR
// if btype = b_workshop then
36516: LD_VAR 0 5
36520: PUSH
36521: LD_INT 2
36523: EQUAL
36524: IFFALSE 36534
// btype := b_factory ;
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: LD_INT 3
36533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36534: LD_ADDR_VAR 0 4
36538: PUSH
36539: LD_VAR 0 5
36543: PPUSH
36544: LD_VAR 0 1
36548: PPUSH
36549: CALL_OW 248
36553: PPUSH
36554: CALL_OW 450
36558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36559: LD_ADDR_VAR 0 2
36563: PUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: LD_INT 1
36571: PPUSH
36572: CALL_OW 275
36576: PUSH
36577: LD_VAR 0 4
36581: PUSH
36582: LD_INT 1
36584: ARRAY
36585: GREATEREQUAL
36586: PUSH
36587: LD_VAR 0 3
36591: PPUSH
36592: LD_INT 2
36594: PPUSH
36595: CALL_OW 275
36599: PUSH
36600: LD_VAR 0 4
36604: PUSH
36605: LD_INT 2
36607: ARRAY
36608: GREATEREQUAL
36609: AND
36610: PUSH
36611: LD_VAR 0 3
36615: PPUSH
36616: LD_INT 3
36618: PPUSH
36619: CALL_OW 275
36623: PUSH
36624: LD_VAR 0 4
36628: PUSH
36629: LD_INT 3
36631: ARRAY
36632: GREATEREQUAL
36633: AND
36634: ST_TO_ADDR
// end ;
36635: LD_VAR 0 2
36639: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36640: LD_INT 0
36642: PPUSH
36643: PPUSH
36644: PPUSH
// pom := GetBase ( building ) ;
36645: LD_ADDR_VAR 0 4
36649: PUSH
36650: LD_VAR 0 1
36654: PPUSH
36655: CALL_OW 274
36659: ST_TO_ADDR
// if not pom then
36660: LD_VAR 0 4
36664: NOT
36665: IFFALSE 36669
// exit ;
36667: GO 36770
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36669: LD_ADDR_VAR 0 5
36673: PUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: LD_VAR 0 1
36683: PPUSH
36684: CALL_OW 248
36688: PPUSH
36689: CALL_OW 450
36693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36694: LD_ADDR_VAR 0 3
36698: PUSH
36699: LD_VAR 0 4
36703: PPUSH
36704: LD_INT 1
36706: PPUSH
36707: CALL_OW 275
36711: PUSH
36712: LD_VAR 0 5
36716: PUSH
36717: LD_INT 1
36719: ARRAY
36720: GREATEREQUAL
36721: PUSH
36722: LD_VAR 0 4
36726: PPUSH
36727: LD_INT 2
36729: PPUSH
36730: CALL_OW 275
36734: PUSH
36735: LD_VAR 0 5
36739: PUSH
36740: LD_INT 2
36742: ARRAY
36743: GREATEREQUAL
36744: AND
36745: PUSH
36746: LD_VAR 0 4
36750: PPUSH
36751: LD_INT 3
36753: PPUSH
36754: CALL_OW 275
36758: PUSH
36759: LD_VAR 0 5
36763: PUSH
36764: LD_INT 3
36766: ARRAY
36767: GREATEREQUAL
36768: AND
36769: ST_TO_ADDR
// end ;
36770: LD_VAR 0 3
36774: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36775: LD_INT 0
36777: PPUSH
36778: PPUSH
36779: PPUSH
36780: PPUSH
36781: PPUSH
36782: PPUSH
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
36787: PPUSH
// result := false ;
36788: LD_ADDR_VAR 0 8
36792: PUSH
36793: LD_INT 0
36795: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36796: LD_VAR 0 5
36800: NOT
36801: PUSH
36802: LD_VAR 0 1
36806: NOT
36807: OR
36808: PUSH
36809: LD_VAR 0 2
36813: NOT
36814: OR
36815: PUSH
36816: LD_VAR 0 3
36820: NOT
36821: OR
36822: IFFALSE 36826
// exit ;
36824: GO 37640
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36826: LD_ADDR_VAR 0 14
36830: PUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: LD_VAR 0 2
36840: PPUSH
36841: LD_VAR 0 3
36845: PPUSH
36846: LD_VAR 0 4
36850: PPUSH
36851: LD_VAR 0 5
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: CALL_OW 248
36864: PPUSH
36865: LD_INT 0
36867: PPUSH
36868: CALL 38877 0 6
36872: ST_TO_ADDR
// if not hexes then
36873: LD_VAR 0 14
36877: NOT
36878: IFFALSE 36882
// exit ;
36880: GO 37640
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36882: LD_ADDR_VAR 0 17
36886: PUSH
36887: LD_VAR 0 5
36891: PPUSH
36892: LD_INT 22
36894: PUSH
36895: LD_VAR 0 13
36899: PPUSH
36900: CALL_OW 255
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 30
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 30
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PPUSH
36941: CALL_OW 72
36945: ST_TO_ADDR
// for i = 1 to hexes do
36946: LD_ADDR_VAR 0 9
36950: PUSH
36951: DOUBLE
36952: LD_INT 1
36954: DEC
36955: ST_TO_ADDR
36956: LD_VAR 0 14
36960: PUSH
36961: FOR_TO
36962: IFFALSE 37638
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36964: LD_ADDR_VAR 0 13
36968: PUSH
36969: LD_VAR 0 14
36973: PUSH
36974: LD_VAR 0 9
36978: ARRAY
36979: PUSH
36980: LD_INT 1
36982: ARRAY
36983: PPUSH
36984: LD_VAR 0 14
36988: PUSH
36989: LD_VAR 0 9
36993: ARRAY
36994: PUSH
36995: LD_INT 2
36997: ARRAY
36998: PPUSH
36999: CALL_OW 428
37003: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37004: LD_VAR 0 14
37008: PUSH
37009: LD_VAR 0 9
37013: ARRAY
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: PPUSH
37019: LD_VAR 0 14
37023: PUSH
37024: LD_VAR 0 9
37028: ARRAY
37029: PUSH
37030: LD_INT 2
37032: ARRAY
37033: PPUSH
37034: CALL_OW 351
37038: PUSH
37039: LD_VAR 0 14
37043: PUSH
37044: LD_VAR 0 9
37048: ARRAY
37049: PUSH
37050: LD_INT 1
37052: ARRAY
37053: PPUSH
37054: LD_VAR 0 14
37058: PUSH
37059: LD_VAR 0 9
37063: ARRAY
37064: PUSH
37065: LD_INT 2
37067: ARRAY
37068: PPUSH
37069: CALL_OW 488
37073: NOT
37074: OR
37075: PUSH
37076: LD_VAR 0 13
37080: PPUSH
37081: CALL_OW 247
37085: PUSH
37086: LD_INT 3
37088: EQUAL
37089: OR
37090: IFFALSE 37096
// exit ;
37092: POP
37093: POP
37094: GO 37640
// if not tmp then
37096: LD_VAR 0 13
37100: NOT
37101: IFFALSE 37105
// continue ;
37103: GO 36961
// result := true ;
37105: LD_ADDR_VAR 0 8
37109: PUSH
37110: LD_INT 1
37112: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37113: LD_VAR 0 6
37117: PUSH
37118: LD_VAR 0 13
37122: PPUSH
37123: CALL_OW 247
37127: PUSH
37128: LD_INT 2
37130: EQUAL
37131: AND
37132: PUSH
37133: LD_VAR 0 13
37137: PPUSH
37138: CALL_OW 263
37142: PUSH
37143: LD_INT 1
37145: EQUAL
37146: AND
37147: IFFALSE 37311
// begin if IsDrivenBy ( tmp ) then
37149: LD_VAR 0 13
37153: PPUSH
37154: CALL_OW 311
37158: IFFALSE 37162
// continue ;
37160: GO 36961
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37162: LD_VAR 0 6
37166: PPUSH
37167: LD_INT 3
37169: PUSH
37170: LD_INT 60
37172: PUSH
37173: EMPTY
37174: LIST
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: LD_INT 55
37185: PUSH
37186: EMPTY
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PPUSH
37197: CALL_OW 72
37201: IFFALSE 37309
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37203: LD_ADDR_VAR 0 18
37207: PUSH
37208: LD_VAR 0 6
37212: PPUSH
37213: LD_INT 3
37215: PUSH
37216: LD_INT 60
37218: PUSH
37219: EMPTY
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: LD_INT 55
37231: PUSH
37232: EMPTY
37233: LIST
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PPUSH
37243: CALL_OW 72
37247: PUSH
37248: LD_INT 1
37250: ARRAY
37251: ST_TO_ADDR
// if IsInUnit ( driver ) then
37252: LD_VAR 0 18
37256: PPUSH
37257: CALL_OW 310
37261: IFFALSE 37272
// ComExit ( driver ) ;
37263: LD_VAR 0 18
37267: PPUSH
37268: CALL 62582 0 1
// AddComEnterUnit ( driver , tmp ) ;
37272: LD_VAR 0 18
37276: PPUSH
37277: LD_VAR 0 13
37281: PPUSH
37282: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37286: LD_VAR 0 18
37290: PPUSH
37291: LD_VAR 0 7
37295: PPUSH
37296: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37300: LD_VAR 0 18
37304: PPUSH
37305: CALL_OW 181
// end ; continue ;
37309: GO 36961
// end ; if not cleaners or not tmp in cleaners then
37311: LD_VAR 0 6
37315: NOT
37316: PUSH
37317: LD_VAR 0 13
37321: PUSH
37322: LD_VAR 0 6
37326: IN
37327: NOT
37328: OR
37329: IFFALSE 37636
// begin if dep then
37331: LD_VAR 0 17
37335: IFFALSE 37471
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37337: LD_ADDR_VAR 0 16
37341: PUSH
37342: LD_VAR 0 17
37346: PUSH
37347: LD_INT 1
37349: ARRAY
37350: PPUSH
37351: CALL_OW 250
37355: PPUSH
37356: LD_VAR 0 17
37360: PUSH
37361: LD_INT 1
37363: ARRAY
37364: PPUSH
37365: CALL_OW 254
37369: PPUSH
37370: LD_INT 5
37372: PPUSH
37373: CALL_OW 272
37377: PUSH
37378: LD_VAR 0 17
37382: PUSH
37383: LD_INT 1
37385: ARRAY
37386: PPUSH
37387: CALL_OW 251
37391: PPUSH
37392: LD_VAR 0 17
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PPUSH
37401: CALL_OW 254
37405: PPUSH
37406: LD_INT 5
37408: PPUSH
37409: CALL_OW 273
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37418: LD_VAR 0 16
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PPUSH
37427: LD_VAR 0 16
37431: PUSH
37432: LD_INT 2
37434: ARRAY
37435: PPUSH
37436: CALL_OW 488
37440: IFFALSE 37471
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37442: LD_VAR 0 13
37446: PPUSH
37447: LD_VAR 0 16
37451: PUSH
37452: LD_INT 1
37454: ARRAY
37455: PPUSH
37456: LD_VAR 0 16
37460: PUSH
37461: LD_INT 2
37463: ARRAY
37464: PPUSH
37465: CALL_OW 111
// continue ;
37469: GO 36961
// end ; end ; r := GetDir ( tmp ) ;
37471: LD_ADDR_VAR 0 15
37475: PUSH
37476: LD_VAR 0 13
37480: PPUSH
37481: CALL_OW 254
37485: ST_TO_ADDR
// if r = 5 then
37486: LD_VAR 0 15
37490: PUSH
37491: LD_INT 5
37493: EQUAL
37494: IFFALSE 37504
// r := 0 ;
37496: LD_ADDR_VAR 0 15
37500: PUSH
37501: LD_INT 0
37503: ST_TO_ADDR
// for j = r to 5 do
37504: LD_ADDR_VAR 0 10
37508: PUSH
37509: DOUBLE
37510: LD_VAR 0 15
37514: DEC
37515: ST_TO_ADDR
37516: LD_INT 5
37518: PUSH
37519: FOR_TO
37520: IFFALSE 37634
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37522: LD_ADDR_VAR 0 11
37526: PUSH
37527: LD_VAR 0 13
37531: PPUSH
37532: CALL_OW 250
37536: PPUSH
37537: LD_VAR 0 10
37541: PPUSH
37542: LD_INT 2
37544: PPUSH
37545: CALL_OW 272
37549: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37550: LD_ADDR_VAR 0 12
37554: PUSH
37555: LD_VAR 0 13
37559: PPUSH
37560: CALL_OW 251
37564: PPUSH
37565: LD_VAR 0 10
37569: PPUSH
37570: LD_INT 2
37572: PPUSH
37573: CALL_OW 273
37577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37578: LD_VAR 0 11
37582: PPUSH
37583: LD_VAR 0 12
37587: PPUSH
37588: CALL_OW 488
37592: PUSH
37593: LD_VAR 0 11
37597: PPUSH
37598: LD_VAR 0 12
37602: PPUSH
37603: CALL_OW 428
37607: NOT
37608: AND
37609: IFFALSE 37632
// begin ComMoveXY ( tmp , _x , _y ) ;
37611: LD_VAR 0 13
37615: PPUSH
37616: LD_VAR 0 11
37620: PPUSH
37621: LD_VAR 0 12
37625: PPUSH
37626: CALL_OW 111
// break ;
37630: GO 37634
// end ; end ;
37632: GO 37519
37634: POP
37635: POP
// end ; end ;
37636: GO 36961
37638: POP
37639: POP
// end ;
37640: LD_VAR 0 8
37644: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37645: LD_INT 0
37647: PPUSH
// result := true ;
37648: LD_ADDR_VAR 0 3
37652: PUSH
37653: LD_INT 1
37655: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37656: LD_VAR 0 2
37660: PUSH
37661: LD_INT 24
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37675
37667: LD_INT 33
37669: DOUBLE
37670: EQUAL
37671: IFTRUE 37675
37673: GO 37700
37675: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37676: LD_ADDR_VAR 0 3
37680: PUSH
37681: LD_INT 32
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 321
37693: PUSH
37694: LD_INT 2
37696: EQUAL
37697: ST_TO_ADDR
37698: GO 38020
37700: LD_INT 20
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37708
37706: GO 37733
37708: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_INT 6
37716: PPUSH
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 321
37726: PUSH
37727: LD_INT 2
37729: EQUAL
37730: ST_TO_ADDR
37731: GO 38020
37733: LD_INT 22
37735: DOUBLE
37736: EQUAL
37737: IFTRUE 37747
37739: LD_INT 36
37741: DOUBLE
37742: EQUAL
37743: IFTRUE 37747
37745: GO 37772
37747: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_INT 15
37755: PPUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 321
37765: PUSH
37766: LD_INT 2
37768: EQUAL
37769: ST_TO_ADDR
37770: GO 38020
37772: LD_INT 30
37774: DOUBLE
37775: EQUAL
37776: IFTRUE 37780
37778: GO 37805
37780: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37781: LD_ADDR_VAR 0 3
37785: PUSH
37786: LD_INT 20
37788: PPUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 321
37798: PUSH
37799: LD_INT 2
37801: EQUAL
37802: ST_TO_ADDR
37803: GO 38020
37805: LD_INT 28
37807: DOUBLE
37808: EQUAL
37809: IFTRUE 37819
37811: LD_INT 21
37813: DOUBLE
37814: EQUAL
37815: IFTRUE 37819
37817: GO 37844
37819: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37820: LD_ADDR_VAR 0 3
37824: PUSH
37825: LD_INT 21
37827: PPUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 321
37837: PUSH
37838: LD_INT 2
37840: EQUAL
37841: ST_TO_ADDR
37842: GO 38020
37844: LD_INT 16
37846: DOUBLE
37847: EQUAL
37848: IFTRUE 37852
37850: GO 37879
37852: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37853: LD_ADDR_VAR 0 3
37857: PUSH
37858: LD_EXP 20
37862: PPUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 321
37872: PUSH
37873: LD_INT 2
37875: EQUAL
37876: ST_TO_ADDR
37877: GO 38020
37879: LD_INT 19
37881: DOUBLE
37882: EQUAL
37883: IFTRUE 37893
37885: LD_INT 23
37887: DOUBLE
37888: EQUAL
37889: IFTRUE 37893
37891: GO 37920
37893: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37894: LD_ADDR_VAR 0 3
37898: PUSH
37899: LD_EXP 19
37903: PPUSH
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 321
37913: PUSH
37914: LD_INT 2
37916: EQUAL
37917: ST_TO_ADDR
37918: GO 38020
37920: LD_INT 17
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37928
37926: GO 37953
37928: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37929: LD_ADDR_VAR 0 3
37933: PUSH
37934: LD_INT 39
37936: PPUSH
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL_OW 321
37946: PUSH
37947: LD_INT 2
37949: EQUAL
37950: ST_TO_ADDR
37951: GO 38020
37953: LD_INT 18
37955: DOUBLE
37956: EQUAL
37957: IFTRUE 37961
37959: GO 37986
37961: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37962: LD_ADDR_VAR 0 3
37966: PUSH
37967: LD_INT 40
37969: PPUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 321
37979: PUSH
37980: LD_INT 2
37982: EQUAL
37983: ST_TO_ADDR
37984: GO 38020
37986: LD_INT 27
37988: DOUBLE
37989: EQUAL
37990: IFTRUE 37994
37992: GO 38019
37994: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37995: LD_ADDR_VAR 0 3
37999: PUSH
38000: LD_INT 35
38002: PPUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 321
38012: PUSH
38013: LD_INT 2
38015: EQUAL
38016: ST_TO_ADDR
38017: GO 38020
38019: POP
// end ;
38020: LD_VAR 0 3
38024: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
// result := false ;
38038: LD_ADDR_VAR 0 6
38042: PUSH
38043: LD_INT 0
38045: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38046: LD_VAR 0 1
38050: NOT
38051: PUSH
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 266
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: IN
38072: NOT
38073: OR
38074: PUSH
38075: LD_VAR 0 2
38079: NOT
38080: OR
38081: PUSH
38082: LD_VAR 0 5
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: IN
38113: NOT
38114: OR
38115: PUSH
38116: LD_VAR 0 3
38120: PPUSH
38121: LD_VAR 0 4
38125: PPUSH
38126: CALL_OW 488
38130: NOT
38131: OR
38132: IFFALSE 38136
// exit ;
38134: GO 38872
// side := GetSide ( depot ) ;
38136: LD_ADDR_VAR 0 9
38140: PUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 255
38150: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38151: LD_VAR 0 9
38155: PPUSH
38156: LD_VAR 0 2
38160: PPUSH
38161: CALL 37645 0 2
38165: NOT
38166: IFFALSE 38170
// exit ;
38168: GO 38872
// pom := GetBase ( depot ) ;
38170: LD_ADDR_VAR 0 10
38174: PUSH
38175: LD_VAR 0 1
38179: PPUSH
38180: CALL_OW 274
38184: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38185: LD_ADDR_VAR 0 11
38189: PUSH
38190: LD_VAR 0 2
38194: PPUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: CALL_OW 248
38204: PPUSH
38205: CALL_OW 450
38209: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38210: LD_VAR 0 10
38214: PPUSH
38215: LD_INT 1
38217: PPUSH
38218: CALL_OW 275
38222: PUSH
38223: LD_VAR 0 11
38227: PUSH
38228: LD_INT 1
38230: ARRAY
38231: GREATEREQUAL
38232: PUSH
38233: LD_VAR 0 10
38237: PPUSH
38238: LD_INT 2
38240: PPUSH
38241: CALL_OW 275
38245: PUSH
38246: LD_VAR 0 11
38250: PUSH
38251: LD_INT 2
38253: ARRAY
38254: GREATEREQUAL
38255: AND
38256: PUSH
38257: LD_VAR 0 10
38261: PPUSH
38262: LD_INT 3
38264: PPUSH
38265: CALL_OW 275
38269: PUSH
38270: LD_VAR 0 11
38274: PUSH
38275: LD_INT 3
38277: ARRAY
38278: GREATEREQUAL
38279: AND
38280: NOT
38281: IFFALSE 38285
// exit ;
38283: GO 38872
// if GetBType ( depot ) = b_depot then
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 266
38294: PUSH
38295: LD_INT 0
38297: EQUAL
38298: IFFALSE 38310
// dist := 28 else
38300: LD_ADDR_VAR 0 14
38304: PUSH
38305: LD_INT 28
38307: ST_TO_ADDR
38308: GO 38318
// dist := 36 ;
38310: LD_ADDR_VAR 0 14
38314: PUSH
38315: LD_INT 36
38317: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38318: LD_VAR 0 1
38322: PPUSH
38323: LD_VAR 0 3
38327: PPUSH
38328: LD_VAR 0 4
38332: PPUSH
38333: CALL_OW 297
38337: PUSH
38338: LD_VAR 0 14
38342: GREATER
38343: IFFALSE 38347
// exit ;
38345: GO 38872
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38347: LD_ADDR_VAR 0 12
38351: PUSH
38352: LD_VAR 0 2
38356: PPUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: LD_VAR 0 4
38366: PPUSH
38367: LD_VAR 0 5
38371: PPUSH
38372: LD_VAR 0 1
38376: PPUSH
38377: CALL_OW 248
38381: PPUSH
38382: LD_INT 0
38384: PPUSH
38385: CALL 38877 0 6
38389: ST_TO_ADDR
// if not hexes then
38390: LD_VAR 0 12
38394: NOT
38395: IFFALSE 38399
// exit ;
38397: GO 38872
// hex := GetHexInfo ( x , y ) ;
38399: LD_ADDR_VAR 0 15
38403: PUSH
38404: LD_VAR 0 3
38408: PPUSH
38409: LD_VAR 0 4
38413: PPUSH
38414: CALL_OW 546
38418: ST_TO_ADDR
// if hex [ 1 ] then
38419: LD_VAR 0 15
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: IFFALSE 38431
// exit ;
38429: GO 38872
// height := hex [ 2 ] ;
38431: LD_ADDR_VAR 0 13
38435: PUSH
38436: LD_VAR 0 15
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: ST_TO_ADDR
// for i = 1 to hexes do
38445: LD_ADDR_VAR 0 7
38449: PUSH
38450: DOUBLE
38451: LD_INT 1
38453: DEC
38454: ST_TO_ADDR
38455: LD_VAR 0 12
38459: PUSH
38460: FOR_TO
38461: IFFALSE 38791
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38463: LD_VAR 0 12
38467: PUSH
38468: LD_VAR 0 7
38472: ARRAY
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PPUSH
38478: LD_VAR 0 12
38482: PUSH
38483: LD_VAR 0 7
38487: ARRAY
38488: PUSH
38489: LD_INT 2
38491: ARRAY
38492: PPUSH
38493: CALL_OW 488
38497: NOT
38498: PUSH
38499: LD_VAR 0 12
38503: PUSH
38504: LD_VAR 0 7
38508: ARRAY
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: PPUSH
38514: LD_VAR 0 12
38518: PUSH
38519: LD_VAR 0 7
38523: ARRAY
38524: PUSH
38525: LD_INT 2
38527: ARRAY
38528: PPUSH
38529: CALL_OW 428
38533: PUSH
38534: LD_INT 0
38536: GREATER
38537: OR
38538: PUSH
38539: LD_VAR 0 12
38543: PUSH
38544: LD_VAR 0 7
38548: ARRAY
38549: PUSH
38550: LD_INT 1
38552: ARRAY
38553: PPUSH
38554: LD_VAR 0 12
38558: PUSH
38559: LD_VAR 0 7
38563: ARRAY
38564: PUSH
38565: LD_INT 2
38567: ARRAY
38568: PPUSH
38569: CALL_OW 351
38573: OR
38574: IFFALSE 38580
// exit ;
38576: POP
38577: POP
38578: GO 38872
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38580: LD_ADDR_VAR 0 8
38584: PUSH
38585: LD_VAR 0 12
38589: PUSH
38590: LD_VAR 0 7
38594: ARRAY
38595: PUSH
38596: LD_INT 1
38598: ARRAY
38599: PPUSH
38600: LD_VAR 0 12
38604: PUSH
38605: LD_VAR 0 7
38609: ARRAY
38610: PUSH
38611: LD_INT 2
38613: ARRAY
38614: PPUSH
38615: CALL_OW 546
38619: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38620: LD_VAR 0 8
38624: PUSH
38625: LD_INT 1
38627: ARRAY
38628: PUSH
38629: LD_VAR 0 8
38633: PUSH
38634: LD_INT 2
38636: ARRAY
38637: PUSH
38638: LD_VAR 0 13
38642: PUSH
38643: LD_INT 2
38645: PLUS
38646: GREATER
38647: OR
38648: PUSH
38649: LD_VAR 0 8
38653: PUSH
38654: LD_INT 2
38656: ARRAY
38657: PUSH
38658: LD_VAR 0 13
38662: PUSH
38663: LD_INT 2
38665: MINUS
38666: LESS
38667: OR
38668: PUSH
38669: LD_VAR 0 8
38673: PUSH
38674: LD_INT 3
38676: ARRAY
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 8
38683: PUSH
38684: LD_INT 9
38686: PUSH
38687: LD_INT 10
38689: PUSH
38690: LD_INT 11
38692: PUSH
38693: LD_INT 12
38695: PUSH
38696: LD_INT 13
38698: PUSH
38699: LD_INT 16
38701: PUSH
38702: LD_INT 17
38704: PUSH
38705: LD_INT 18
38707: PUSH
38708: LD_INT 19
38710: PUSH
38711: LD_INT 20
38713: PUSH
38714: LD_INT 21
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: IN
38732: NOT
38733: OR
38734: PUSH
38735: LD_VAR 0 8
38739: PUSH
38740: LD_INT 5
38742: ARRAY
38743: NOT
38744: OR
38745: PUSH
38746: LD_VAR 0 8
38750: PUSH
38751: LD_INT 6
38753: ARRAY
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 7
38763: PUSH
38764: LD_INT 9
38766: PUSH
38767: LD_INT 10
38769: PUSH
38770: LD_INT 11
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: IN
38781: NOT
38782: OR
38783: IFFALSE 38789
// exit ;
38785: POP
38786: POP
38787: GO 38872
// end ;
38789: GO 38460
38791: POP
38792: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38793: LD_VAR 0 9
38797: PPUSH
38798: LD_VAR 0 3
38802: PPUSH
38803: LD_VAR 0 4
38807: PPUSH
38808: LD_INT 20
38810: PPUSH
38811: CALL 30818 0 4
38815: PUSH
38816: LD_INT 4
38818: ARRAY
38819: IFFALSE 38823
// exit ;
38821: GO 38872
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38823: LD_VAR 0 2
38827: PUSH
38828: LD_INT 29
38830: PUSH
38831: LD_INT 30
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: IN
38838: PUSH
38839: LD_VAR 0 3
38843: PPUSH
38844: LD_VAR 0 4
38848: PPUSH
38849: LD_VAR 0 9
38853: PPUSH
38854: CALL_OW 440
38858: NOT
38859: AND
38860: IFFALSE 38864
// exit ;
38862: GO 38872
// result := true ;
38864: LD_ADDR_VAR 0 6
38868: PUSH
38869: LD_INT 1
38871: ST_TO_ADDR
// end ;
38872: LD_VAR 0 6
38876: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38877: LD_INT 0
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
// result = [ ] ;
38937: LD_ADDR_VAR 0 7
38941: PUSH
38942: EMPTY
38943: ST_TO_ADDR
// temp_list = [ ] ;
38944: LD_ADDR_VAR 0 9
38948: PUSH
38949: EMPTY
38950: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38951: LD_VAR 0 4
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: LD_INT 3
38967: PUSH
38968: LD_INT 4
38970: PUSH
38971: LD_INT 5
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: IN
38982: NOT
38983: PUSH
38984: LD_VAR 0 1
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: IN
38999: PUSH
39000: LD_VAR 0 5
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: IN
39019: NOT
39020: AND
39021: OR
39022: IFFALSE 39026
// exit ;
39024: GO 57417
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39026: LD_VAR 0 1
39030: PUSH
39031: LD_INT 6
39033: PUSH
39034: LD_INT 7
39036: PUSH
39037: LD_INT 8
39039: PUSH
39040: LD_INT 13
39042: PUSH
39043: LD_INT 12
39045: PUSH
39046: LD_INT 15
39048: PUSH
39049: LD_INT 11
39051: PUSH
39052: LD_INT 14
39054: PUSH
39055: LD_INT 10
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: IN
39069: IFFALSE 39079
// btype = b_lab ;
39071: LD_ADDR_VAR 0 1
39075: PUSH
39076: LD_INT 6
39078: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39079: LD_VAR 0 6
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: IN
39098: NOT
39099: PUSH
39100: LD_VAR 0 1
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: LD_INT 6
39119: PUSH
39120: LD_INT 36
39122: PUSH
39123: LD_INT 4
39125: PUSH
39126: LD_INT 5
39128: PUSH
39129: LD_INT 31
39131: PUSH
39132: LD_INT 32
39134: PUSH
39135: LD_INT 33
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: IN
39151: NOT
39152: PUSH
39153: LD_VAR 0 6
39157: PUSH
39158: LD_INT 1
39160: EQUAL
39161: AND
39162: OR
39163: PUSH
39164: LD_VAR 0 1
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: IN
39179: NOT
39180: PUSH
39181: LD_VAR 0 6
39185: PUSH
39186: LD_INT 2
39188: EQUAL
39189: AND
39190: OR
39191: IFFALSE 39201
// mode = 0 ;
39193: LD_ADDR_VAR 0 6
39197: PUSH
39198: LD_INT 0
39200: ST_TO_ADDR
// case mode of 0 :
39201: LD_VAR 0 6
39205: PUSH
39206: LD_INT 0
39208: DOUBLE
39209: EQUAL
39210: IFTRUE 39214
39212: GO 50667
39214: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39215: LD_ADDR_VAR 0 11
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 3
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39408: LD_ADDR_VAR 0 12
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 3
39565: NEG
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39604: LD_ADDR_VAR 0 13
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: LD_INT 3
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: LD_INT 3
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39803: LD_ADDR_VAR 0 14
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 3
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 3
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39999: LD_ADDR_VAR 0 15
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40192: LD_ADDR_VAR 0 16
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40385: LD_ADDR_VAR 0 17
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40615: LD_ADDR_VAR 0 18
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40845: LD_ADDR_VAR 0 19
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41075: LD_ADDR_VAR 0 20
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41305: LD_ADDR_VAR 0 21
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41535: LD_ADDR_VAR 0 22
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: NEG
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41765: LD_ADDR_VAR 0 23
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 3
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42045: LD_ADDR_VAR 0 24
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42321: LD_ADDR_VAR 0 25
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 3
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42595: LD_ADDR_VAR 0 26
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42871: LD_ADDR_VAR 0 27
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 3
43116: NEG
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43151: LD_ADDR_VAR 0 28
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: NEG
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43433: LD_ADDR_VAR 0 29
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 3
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 3
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 3
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 3
43677: NEG
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43712: LD_ADDR_VAR 0 30
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 3
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 3
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43990: LD_ADDR_VAR 0 31
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: NEG
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44268: LD_ADDR_VAR 0 32
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 3
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 3
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 3
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44546: LD_ADDR_VAR 0 33
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 3
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 3
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 3
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44825: LD_ADDR_VAR 0 34
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 3
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45105: LD_ADDR_VAR 0 35
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45217: LD_ADDR_VAR 0 36
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45329: LD_ADDR_VAR 0 37
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45441: LD_ADDR_VAR 0 38
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45553: LD_ADDR_VAR 0 39
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45665: LD_ADDR_VAR 0 40
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45777: LD_ADDR_VAR 0 41
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 3
46051: NEG
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46127: LD_ADDR_VAR 0 42
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 3
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46477: LD_ADDR_VAR 0 43
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 3
46784: NEG
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46825: LD_ADDR_VAR 0 44
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 3
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47175: LD_ADDR_VAR 0 45
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 3
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47525: LD_ADDR_VAR 0 46
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: NEG
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47873: LD_ADDR_VAR 0 47
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48024: LD_ADDR_VAR 0 48
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48171: LD_ADDR_VAR 0 49
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48315: LD_ADDR_VAR 0 50
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48459: LD_ADDR_VAR 0 51
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48606: LD_ADDR_VAR 0 52
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48757: LD_ADDR_VAR 0 53
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48987: LD_ADDR_VAR 0 54
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49217: LD_ADDR_VAR 0 55
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49447: LD_ADDR_VAR 0 56
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49677: LD_ADDR_VAR 0 57
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49907: LD_ADDR_VAR 0 58
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50137: LD_ADDR_VAR 0 59
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50225: LD_ADDR_VAR 0 60
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50313: LD_ADDR_VAR 0 61
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50401: LD_ADDR_VAR 0 62
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50489: LD_ADDR_VAR 0 63
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50577: LD_ADDR_VAR 0 64
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// end ; 1 :
50665: GO 56562
50667: LD_INT 1
50669: DOUBLE
50670: EQUAL
50671: IFTRUE 50675
50673: GO 53298
50675: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50676: LD_ADDR_VAR 0 11
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 3
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50720: LD_ADDR_VAR 0 12
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50761: LD_ADDR_VAR 0 13
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50801: LD_ADDR_VAR 0 14
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50842: LD_ADDR_VAR 0 15
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 3
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 3
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50886: LD_ADDR_VAR 0 16
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50932: LD_ADDR_VAR 0 17
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 3
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50976: LD_ADDR_VAR 0 18
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51017: LD_ADDR_VAR 0 19
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51057: LD_ADDR_VAR 0 20
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51098: LD_ADDR_VAR 0 21
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51142: LD_ADDR_VAR 0 22
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: LD_INT 3
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51188: LD_ADDR_VAR 0 23
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 4
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51232: LD_ADDR_VAR 0 24
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 4
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51273: LD_ADDR_VAR 0 25
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: LIST
51312: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51313: LD_ADDR_VAR 0 26
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51354: LD_ADDR_VAR 0 27
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 4
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51398: LD_ADDR_VAR 0 28
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: LD_INT 4
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: LIST
51443: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51444: LD_ADDR_VAR 0 29
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 4
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 5
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 5
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 6
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 6
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 5
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51599: LD_ADDR_VAR 0 30
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 5
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 5
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 5
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 6
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 6
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51742: LD_ADDR_VAR 0 31
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 4
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 4
51789: PUSH
51790: LD_INT 4
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: LD_INT 4
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: LD_INT 5
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 6
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 6
51849: PUSH
51850: LD_INT 6
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 5
51859: PUSH
51860: LD_INT 6
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51881: LD_ADDR_VAR 0 32
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 4
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 5
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 5
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 6
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 6
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 5
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52024: LD_ADDR_VAR 0 33
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 4
52076: NEG
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 4
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 5
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 5
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 5
52133: NEG
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 6
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 6
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52179: LD_ADDR_VAR 0 34
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: NEG
52223: PUSH
52224: LD_INT 4
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 4
52246: NEG
52247: PUSH
52248: LD_INT 4
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 4
52258: NEG
52259: PUSH
52260: LD_INT 5
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 5
52270: NEG
52271: PUSH
52272: LD_INT 4
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 5
52282: NEG
52283: PUSH
52284: LD_INT 5
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 5
52294: NEG
52295: PUSH
52296: LD_INT 6
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 6
52306: NEG
52307: PUSH
52308: LD_INT 5
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 6
52318: NEG
52319: PUSH
52320: LD_INT 6
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52342: LD_ADDR_VAR 0 41
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52386: LD_ADDR_VAR 0 42
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52427: LD_ADDR_VAR 0 43
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 3
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52467: LD_ADDR_VAR 0 44
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52508: LD_ADDR_VAR 0 45
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52552: LD_ADDR_VAR 0 46
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: LD_INT 2
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52598: LD_ADDR_VAR 0 47
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52631: LD_ADDR_VAR 0 48
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52662: LD_ADDR_VAR 0 49
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52691: LD_ADDR_VAR 0 50
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52720: LD_ADDR_VAR 0 51
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52751: LD_ADDR_VAR 0 52
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52784: LD_ADDR_VAR 0 53
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52828: LD_ADDR_VAR 0 54
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52869: LD_ADDR_VAR 0 55
52873: PUSH
52874: LD_INT 3
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52909: LD_ADDR_VAR 0 56
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52950: LD_ADDR_VAR 0 57
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52994: LD_ADDR_VAR 0 58
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53040: LD_ADDR_VAR 0 59
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53084: LD_ADDR_VAR 0 60
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53125: LD_ADDR_VAR 0 61
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53165: LD_ADDR_VAR 0 62
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53206: LD_ADDR_VAR 0 63
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53250: LD_ADDR_VAR 0 64
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// end ; 2 :
53296: GO 56562
53298: LD_INT 2
53300: DOUBLE
53301: EQUAL
53302: IFTRUE 53306
53304: GO 56561
53306: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53307: LD_ADDR_VAR 0 29
53311: PUSH
53312: LD_INT 4
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 4
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 5
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 5
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 4
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 3
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 5
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 4
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 4
53437: PUSH
53438: LD_INT 4
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 4
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 4
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 4
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 5
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 5
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 4
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 5
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 4
53646: NEG
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 4
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 4
53669: NEG
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: LD_INT 4
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 4
53704: NEG
53705: PUSH
53706: LD_INT 5
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 3
53716: NEG
53717: PUSH
53718: LD_INT 4
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 5
53752: NEG
53753: PUSH
53754: LD_INT 4
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 5
53764: NEG
53765: PUSH
53766: LD_INT 5
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: LD_INT 5
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 5
53788: NEG
53789: PUSH
53790: LD_INT 3
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53845: LD_ADDR_VAR 0 30
53849: PUSH
53850: LD_INT 4
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 4
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 5
53872: PUSH
53873: LD_INT 4
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 5
53882: PUSH
53883: LD_INT 5
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: LD_INT 5
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 3
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 5
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 5
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 3
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 4
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 4
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 4
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 4
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 5
54091: NEG
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 5
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 5
54114: NEG
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: NEG
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 4
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: LD_INT 3
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 4
54197: NEG
54198: PUSH
54199: LD_INT 3
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 4
54209: NEG
54210: PUSH
54211: LD_INT 4
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 4
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 4
54233: NEG
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 4
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 5
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 3
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 3
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 4
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 5
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 3
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 5
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54392: LD_ADDR_VAR 0 31
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 4
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 4
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 5
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 5
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 4
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 5
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 4
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 4
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 4
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: LD_INT 5
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: LD_INT 4
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: LD_INT 3
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 5
54654: NEG
54655: PUSH
54656: LD_INT 4
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 5
54666: NEG
54667: PUSH
54668: LD_INT 5
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 5
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 5
54690: NEG
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 4
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 3
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 4
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 4
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 5
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54942: LD_ADDR_VAR 0 32
54946: PUSH
54947: LD_INT 4
54949: NEG
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 4
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 5
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 5
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 5
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: NEG
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: LD_INT 4
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: LD_INT 4
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 4
55147: NEG
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 4
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 5
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 4
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 4
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 5
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 5
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 3
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 4
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 4
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 4
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 5
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 5
55384: PUSH
55385: LD_INT 5
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 4
55394: PUSH
55395: LD_INT 5
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: LD_INT 4
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 5
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: LD_INT 5
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55489: LD_ADDR_VAR 0 33
55493: PUSH
55494: LD_INT 4
55496: NEG
55497: PUSH
55498: LD_INT 4
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: NEG
55509: PUSH
55510: LD_INT 5
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: LD_INT 4
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 4
55544: NEG
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 5
55556: NEG
55557: PUSH
55558: LD_INT 4
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 5
55568: NEG
55569: PUSH
55570: LD_INT 5
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: LD_INT 5
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 5
55592: NEG
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 4
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 4
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: LD_INT 4
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 4
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 4
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 5
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 5
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 3
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 4
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 4
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 4
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 5
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 5
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: LD_INT 5
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56027: LD_ADDR_VAR 0 34
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 4
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 5
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 3
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 4
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 5
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 5
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 4
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 4
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: LD_INT 4
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 3
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: LD_INT 5
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 4
56269: PUSH
56270: LD_INT 5
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 4
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 5
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 5
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 4
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 4
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 4
56412: NEG
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: NEG
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 5
56468: NEG
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 5
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 5
56491: NEG
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: ST_TO_ADDR
// end ; end ;
56559: GO 56562
56561: POP
// case btype of b_depot , b_warehouse :
56562: LD_VAR 0 1
56566: PUSH
56567: LD_INT 0
56569: DOUBLE
56570: EQUAL
56571: IFTRUE 56581
56573: LD_INT 1
56575: DOUBLE
56576: EQUAL
56577: IFTRUE 56581
56579: GO 56782
56581: POP
// case nation of nation_american :
56582: LD_VAR 0 5
56586: PUSH
56587: LD_INT 1
56589: DOUBLE
56590: EQUAL
56591: IFTRUE 56595
56593: GO 56651
56595: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56596: LD_ADDR_VAR 0 9
56600: PUSH
56601: LD_VAR 0 11
56605: PUSH
56606: LD_VAR 0 12
56610: PUSH
56611: LD_VAR 0 13
56615: PUSH
56616: LD_VAR 0 14
56620: PUSH
56621: LD_VAR 0 15
56625: PUSH
56626: LD_VAR 0 16
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: PUSH
56639: LD_VAR 0 4
56643: PUSH
56644: LD_INT 1
56646: PLUS
56647: ARRAY
56648: ST_TO_ADDR
56649: GO 56780
56651: LD_INT 2
56653: DOUBLE
56654: EQUAL
56655: IFTRUE 56659
56657: GO 56715
56659: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56660: LD_ADDR_VAR 0 9
56664: PUSH
56665: LD_VAR 0 17
56669: PUSH
56670: LD_VAR 0 18
56674: PUSH
56675: LD_VAR 0 19
56679: PUSH
56680: LD_VAR 0 20
56684: PUSH
56685: LD_VAR 0 21
56689: PUSH
56690: LD_VAR 0 22
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: PUSH
56703: LD_VAR 0 4
56707: PUSH
56708: LD_INT 1
56710: PLUS
56711: ARRAY
56712: ST_TO_ADDR
56713: GO 56780
56715: LD_INT 3
56717: DOUBLE
56718: EQUAL
56719: IFTRUE 56723
56721: GO 56779
56723: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56724: LD_ADDR_VAR 0 9
56728: PUSH
56729: LD_VAR 0 23
56733: PUSH
56734: LD_VAR 0 24
56738: PUSH
56739: LD_VAR 0 25
56743: PUSH
56744: LD_VAR 0 26
56748: PUSH
56749: LD_VAR 0 27
56753: PUSH
56754: LD_VAR 0 28
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: PUSH
56767: LD_VAR 0 4
56771: PUSH
56772: LD_INT 1
56774: PLUS
56775: ARRAY
56776: ST_TO_ADDR
56777: GO 56780
56779: POP
56780: GO 57335
56782: LD_INT 2
56784: DOUBLE
56785: EQUAL
56786: IFTRUE 56796
56788: LD_INT 3
56790: DOUBLE
56791: EQUAL
56792: IFTRUE 56796
56794: GO 56852
56796: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56797: LD_ADDR_VAR 0 9
56801: PUSH
56802: LD_VAR 0 29
56806: PUSH
56807: LD_VAR 0 30
56811: PUSH
56812: LD_VAR 0 31
56816: PUSH
56817: LD_VAR 0 32
56821: PUSH
56822: LD_VAR 0 33
56826: PUSH
56827: LD_VAR 0 34
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: PUSH
56840: LD_VAR 0 4
56844: PUSH
56845: LD_INT 1
56847: PLUS
56848: ARRAY
56849: ST_TO_ADDR
56850: GO 57335
56852: LD_INT 16
56854: DOUBLE
56855: EQUAL
56856: IFTRUE 56914
56858: LD_INT 17
56860: DOUBLE
56861: EQUAL
56862: IFTRUE 56914
56864: LD_INT 18
56866: DOUBLE
56867: EQUAL
56868: IFTRUE 56914
56870: LD_INT 19
56872: DOUBLE
56873: EQUAL
56874: IFTRUE 56914
56876: LD_INT 22
56878: DOUBLE
56879: EQUAL
56880: IFTRUE 56914
56882: LD_INT 20
56884: DOUBLE
56885: EQUAL
56886: IFTRUE 56914
56888: LD_INT 21
56890: DOUBLE
56891: EQUAL
56892: IFTRUE 56914
56894: LD_INT 23
56896: DOUBLE
56897: EQUAL
56898: IFTRUE 56914
56900: LD_INT 24
56902: DOUBLE
56903: EQUAL
56904: IFTRUE 56914
56906: LD_INT 25
56908: DOUBLE
56909: EQUAL
56910: IFTRUE 56914
56912: GO 56970
56914: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56915: LD_ADDR_VAR 0 9
56919: PUSH
56920: LD_VAR 0 35
56924: PUSH
56925: LD_VAR 0 36
56929: PUSH
56930: LD_VAR 0 37
56934: PUSH
56935: LD_VAR 0 38
56939: PUSH
56940: LD_VAR 0 39
56944: PUSH
56945: LD_VAR 0 40
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: PUSH
56958: LD_VAR 0 4
56962: PUSH
56963: LD_INT 1
56965: PLUS
56966: ARRAY
56967: ST_TO_ADDR
56968: GO 57335
56970: LD_INT 6
56972: DOUBLE
56973: EQUAL
56974: IFTRUE 57026
56976: LD_INT 7
56978: DOUBLE
56979: EQUAL
56980: IFTRUE 57026
56982: LD_INT 8
56984: DOUBLE
56985: EQUAL
56986: IFTRUE 57026
56988: LD_INT 13
56990: DOUBLE
56991: EQUAL
56992: IFTRUE 57026
56994: LD_INT 12
56996: DOUBLE
56997: EQUAL
56998: IFTRUE 57026
57000: LD_INT 15
57002: DOUBLE
57003: EQUAL
57004: IFTRUE 57026
57006: LD_INT 11
57008: DOUBLE
57009: EQUAL
57010: IFTRUE 57026
57012: LD_INT 14
57014: DOUBLE
57015: EQUAL
57016: IFTRUE 57026
57018: LD_INT 10
57020: DOUBLE
57021: EQUAL
57022: IFTRUE 57026
57024: GO 57082
57026: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57027: LD_ADDR_VAR 0 9
57031: PUSH
57032: LD_VAR 0 41
57036: PUSH
57037: LD_VAR 0 42
57041: PUSH
57042: LD_VAR 0 43
57046: PUSH
57047: LD_VAR 0 44
57051: PUSH
57052: LD_VAR 0 45
57056: PUSH
57057: LD_VAR 0 46
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: PUSH
57070: LD_VAR 0 4
57074: PUSH
57075: LD_INT 1
57077: PLUS
57078: ARRAY
57079: ST_TO_ADDR
57080: GO 57335
57082: LD_INT 36
57084: DOUBLE
57085: EQUAL
57086: IFTRUE 57090
57088: GO 57146
57090: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57091: LD_ADDR_VAR 0 9
57095: PUSH
57096: LD_VAR 0 47
57100: PUSH
57101: LD_VAR 0 48
57105: PUSH
57106: LD_VAR 0 49
57110: PUSH
57111: LD_VAR 0 50
57115: PUSH
57116: LD_VAR 0 51
57120: PUSH
57121: LD_VAR 0 52
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: PUSH
57134: LD_VAR 0 4
57138: PUSH
57139: LD_INT 1
57141: PLUS
57142: ARRAY
57143: ST_TO_ADDR
57144: GO 57335
57146: LD_INT 4
57148: DOUBLE
57149: EQUAL
57150: IFTRUE 57172
57152: LD_INT 5
57154: DOUBLE
57155: EQUAL
57156: IFTRUE 57172
57158: LD_INT 34
57160: DOUBLE
57161: EQUAL
57162: IFTRUE 57172
57164: LD_INT 37
57166: DOUBLE
57167: EQUAL
57168: IFTRUE 57172
57170: GO 57228
57172: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57173: LD_ADDR_VAR 0 9
57177: PUSH
57178: LD_VAR 0 53
57182: PUSH
57183: LD_VAR 0 54
57187: PUSH
57188: LD_VAR 0 55
57192: PUSH
57193: LD_VAR 0 56
57197: PUSH
57198: LD_VAR 0 57
57202: PUSH
57203: LD_VAR 0 58
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: PUSH
57216: LD_VAR 0 4
57220: PUSH
57221: LD_INT 1
57223: PLUS
57224: ARRAY
57225: ST_TO_ADDR
57226: GO 57335
57228: LD_INT 31
57230: DOUBLE
57231: EQUAL
57232: IFTRUE 57278
57234: LD_INT 32
57236: DOUBLE
57237: EQUAL
57238: IFTRUE 57278
57240: LD_INT 33
57242: DOUBLE
57243: EQUAL
57244: IFTRUE 57278
57246: LD_INT 27
57248: DOUBLE
57249: EQUAL
57250: IFTRUE 57278
57252: LD_INT 26
57254: DOUBLE
57255: EQUAL
57256: IFTRUE 57278
57258: LD_INT 28
57260: DOUBLE
57261: EQUAL
57262: IFTRUE 57278
57264: LD_INT 29
57266: DOUBLE
57267: EQUAL
57268: IFTRUE 57278
57270: LD_INT 30
57272: DOUBLE
57273: EQUAL
57274: IFTRUE 57278
57276: GO 57334
57278: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57279: LD_ADDR_VAR 0 9
57283: PUSH
57284: LD_VAR 0 59
57288: PUSH
57289: LD_VAR 0 60
57293: PUSH
57294: LD_VAR 0 61
57298: PUSH
57299: LD_VAR 0 62
57303: PUSH
57304: LD_VAR 0 63
57308: PUSH
57309: LD_VAR 0 64
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: PUSH
57322: LD_VAR 0 4
57326: PUSH
57327: LD_INT 1
57329: PLUS
57330: ARRAY
57331: ST_TO_ADDR
57332: GO 57335
57334: POP
// temp_list2 = [ ] ;
57335: LD_ADDR_VAR 0 10
57339: PUSH
57340: EMPTY
57341: ST_TO_ADDR
// for i in temp_list do
57342: LD_ADDR_VAR 0 8
57346: PUSH
57347: LD_VAR 0 9
57351: PUSH
57352: FOR_IN
57353: IFFALSE 57405
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57355: LD_ADDR_VAR 0 10
57359: PUSH
57360: LD_VAR 0 10
57364: PUSH
57365: LD_VAR 0 8
57369: PUSH
57370: LD_INT 1
57372: ARRAY
57373: PUSH
57374: LD_VAR 0 2
57378: PLUS
57379: PUSH
57380: LD_VAR 0 8
57384: PUSH
57385: LD_INT 2
57387: ARRAY
57388: PUSH
57389: LD_VAR 0 3
57393: PLUS
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: ADD
57402: ST_TO_ADDR
57403: GO 57352
57405: POP
57406: POP
// result = temp_list2 ;
57407: LD_ADDR_VAR 0 7
57411: PUSH
57412: LD_VAR 0 10
57416: ST_TO_ADDR
// end ;
57417: LD_VAR 0 7
57421: RET
// export function EnemyInRange ( unit , dist ) ; begin
57422: LD_INT 0
57424: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57425: LD_ADDR_VAR 0 3
57429: PUSH
57430: LD_VAR 0 1
57434: PPUSH
57435: CALL_OW 255
57439: PPUSH
57440: LD_VAR 0 1
57444: PPUSH
57445: CALL_OW 250
57449: PPUSH
57450: LD_VAR 0 1
57454: PPUSH
57455: CALL_OW 251
57459: PPUSH
57460: LD_VAR 0 2
57464: PPUSH
57465: CALL 30818 0 4
57469: PUSH
57470: LD_INT 4
57472: ARRAY
57473: ST_TO_ADDR
// end ;
57474: LD_VAR 0 3
57478: RET
// export function PlayerSeeMe ( unit ) ; begin
57479: LD_INT 0
57481: PPUSH
// result := See ( your_side , unit ) ;
57482: LD_ADDR_VAR 0 2
57486: PUSH
57487: LD_OWVAR 2
57491: PPUSH
57492: LD_VAR 0 1
57496: PPUSH
57497: CALL_OW 292
57501: ST_TO_ADDR
// end ;
57502: LD_VAR 0 2
57506: RET
// export function ReverseDir ( unit ) ; begin
57507: LD_INT 0
57509: PPUSH
// if not unit then
57510: LD_VAR 0 1
57514: NOT
57515: IFFALSE 57519
// exit ;
57517: GO 57542
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57519: LD_ADDR_VAR 0 2
57523: PUSH
57524: LD_VAR 0 1
57528: PPUSH
57529: CALL_OW 254
57533: PUSH
57534: LD_INT 3
57536: PLUS
57537: PUSH
57538: LD_INT 6
57540: MOD
57541: ST_TO_ADDR
// end ;
57542: LD_VAR 0 2
57546: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57547: LD_INT 0
57549: PPUSH
57550: PPUSH
57551: PPUSH
57552: PPUSH
57553: PPUSH
// if not hexes then
57554: LD_VAR 0 2
57558: NOT
57559: IFFALSE 57563
// exit ;
57561: GO 57711
// dist := 9999 ;
57563: LD_ADDR_VAR 0 5
57567: PUSH
57568: LD_INT 9999
57570: ST_TO_ADDR
// for i = 1 to hexes do
57571: LD_ADDR_VAR 0 4
57575: PUSH
57576: DOUBLE
57577: LD_INT 1
57579: DEC
57580: ST_TO_ADDR
57581: LD_VAR 0 2
57585: PUSH
57586: FOR_TO
57587: IFFALSE 57699
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57589: LD_VAR 0 1
57593: PPUSH
57594: LD_VAR 0 2
57598: PUSH
57599: LD_VAR 0 4
57603: ARRAY
57604: PUSH
57605: LD_INT 1
57607: ARRAY
57608: PPUSH
57609: LD_VAR 0 2
57613: PUSH
57614: LD_VAR 0 4
57618: ARRAY
57619: PUSH
57620: LD_INT 2
57622: ARRAY
57623: PPUSH
57624: CALL_OW 297
57628: PUSH
57629: LD_VAR 0 5
57633: LESS
57634: IFFALSE 57697
// begin hex := hexes [ i ] ;
57636: LD_ADDR_VAR 0 7
57640: PUSH
57641: LD_VAR 0 2
57645: PUSH
57646: LD_VAR 0 4
57650: ARRAY
57651: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57652: LD_ADDR_VAR 0 5
57656: PUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: LD_VAR 0 2
57666: PUSH
57667: LD_VAR 0 4
57671: ARRAY
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: PPUSH
57677: LD_VAR 0 2
57681: PUSH
57682: LD_VAR 0 4
57686: ARRAY
57687: PUSH
57688: LD_INT 2
57690: ARRAY
57691: PPUSH
57692: CALL_OW 297
57696: ST_TO_ADDR
// end ; end ;
57697: GO 57586
57699: POP
57700: POP
// result := hex ;
57701: LD_ADDR_VAR 0 3
57705: PUSH
57706: LD_VAR 0 7
57710: ST_TO_ADDR
// end ;
57711: LD_VAR 0 3
57715: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57716: LD_INT 0
57718: PPUSH
57719: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57720: LD_VAR 0 1
57724: NOT
57725: PUSH
57726: LD_VAR 0 1
57730: PUSH
57731: LD_INT 21
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 23
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PPUSH
57755: CALL_OW 69
57759: IN
57760: NOT
57761: OR
57762: IFFALSE 57766
// exit ;
57764: GO 57813
// for i = 1 to 3 do
57766: LD_ADDR_VAR 0 3
57770: PUSH
57771: DOUBLE
57772: LD_INT 1
57774: DEC
57775: ST_TO_ADDR
57776: LD_INT 3
57778: PUSH
57779: FOR_TO
57780: IFFALSE 57811
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57782: LD_VAR 0 1
57786: PPUSH
57787: CALL_OW 250
57791: PPUSH
57792: LD_VAR 0 1
57796: PPUSH
57797: CALL_OW 251
57801: PPUSH
57802: LD_INT 1
57804: PPUSH
57805: CALL_OW 453
57809: GO 57779
57811: POP
57812: POP
// end ;
57813: LD_VAR 0 2
57817: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57818: LD_INT 0
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57826: LD_VAR 0 1
57830: NOT
57831: PUSH
57832: LD_VAR 0 2
57836: NOT
57837: OR
57838: PUSH
57839: LD_VAR 0 1
57843: PPUSH
57844: CALL_OW 314
57848: OR
57849: IFFALSE 57853
// exit ;
57851: GO 58294
// x := GetX ( enemy_unit ) ;
57853: LD_ADDR_VAR 0 7
57857: PUSH
57858: LD_VAR 0 2
57862: PPUSH
57863: CALL_OW 250
57867: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57868: LD_ADDR_VAR 0 8
57872: PUSH
57873: LD_VAR 0 2
57877: PPUSH
57878: CALL_OW 251
57882: ST_TO_ADDR
// if not x or not y then
57883: LD_VAR 0 7
57887: NOT
57888: PUSH
57889: LD_VAR 0 8
57893: NOT
57894: OR
57895: IFFALSE 57899
// exit ;
57897: GO 58294
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57899: LD_ADDR_VAR 0 6
57903: PUSH
57904: LD_VAR 0 7
57908: PPUSH
57909: LD_INT 0
57911: PPUSH
57912: LD_INT 4
57914: PPUSH
57915: CALL_OW 272
57919: PUSH
57920: LD_VAR 0 8
57924: PPUSH
57925: LD_INT 0
57927: PPUSH
57928: LD_INT 4
57930: PPUSH
57931: CALL_OW 273
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_VAR 0 7
57944: PPUSH
57945: LD_INT 1
57947: PPUSH
57948: LD_INT 4
57950: PPUSH
57951: CALL_OW 272
57955: PUSH
57956: LD_VAR 0 8
57960: PPUSH
57961: LD_INT 1
57963: PPUSH
57964: LD_INT 4
57966: PPUSH
57967: CALL_OW 273
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_VAR 0 7
57980: PPUSH
57981: LD_INT 2
57983: PPUSH
57984: LD_INT 4
57986: PPUSH
57987: CALL_OW 272
57991: PUSH
57992: LD_VAR 0 8
57996: PPUSH
57997: LD_INT 2
57999: PPUSH
58000: LD_INT 4
58002: PPUSH
58003: CALL_OW 273
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_VAR 0 7
58016: PPUSH
58017: LD_INT 3
58019: PPUSH
58020: LD_INT 4
58022: PPUSH
58023: CALL_OW 272
58027: PUSH
58028: LD_VAR 0 8
58032: PPUSH
58033: LD_INT 3
58035: PPUSH
58036: LD_INT 4
58038: PPUSH
58039: CALL_OW 273
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_VAR 0 7
58052: PPUSH
58053: LD_INT 4
58055: PPUSH
58056: LD_INT 4
58058: PPUSH
58059: CALL_OW 272
58063: PUSH
58064: LD_VAR 0 8
58068: PPUSH
58069: LD_INT 4
58071: PPUSH
58072: LD_INT 4
58074: PPUSH
58075: CALL_OW 273
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_VAR 0 7
58088: PPUSH
58089: LD_INT 5
58091: PPUSH
58092: LD_INT 4
58094: PPUSH
58095: CALL_OW 272
58099: PUSH
58100: LD_VAR 0 8
58104: PPUSH
58105: LD_INT 5
58107: PPUSH
58108: LD_INT 4
58110: PPUSH
58111: CALL_OW 273
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// for i = tmp downto 1 do
58128: LD_ADDR_VAR 0 4
58132: PUSH
58133: DOUBLE
58134: LD_VAR 0 6
58138: INC
58139: ST_TO_ADDR
58140: LD_INT 1
58142: PUSH
58143: FOR_DOWNTO
58144: IFFALSE 58245
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58146: LD_VAR 0 6
58150: PUSH
58151: LD_VAR 0 4
58155: ARRAY
58156: PUSH
58157: LD_INT 1
58159: ARRAY
58160: PPUSH
58161: LD_VAR 0 6
58165: PUSH
58166: LD_VAR 0 4
58170: ARRAY
58171: PUSH
58172: LD_INT 2
58174: ARRAY
58175: PPUSH
58176: CALL_OW 488
58180: NOT
58181: PUSH
58182: LD_VAR 0 6
58186: PUSH
58187: LD_VAR 0 4
58191: ARRAY
58192: PUSH
58193: LD_INT 1
58195: ARRAY
58196: PPUSH
58197: LD_VAR 0 6
58201: PUSH
58202: LD_VAR 0 4
58206: ARRAY
58207: PUSH
58208: LD_INT 2
58210: ARRAY
58211: PPUSH
58212: CALL_OW 428
58216: PUSH
58217: LD_INT 0
58219: NONEQUAL
58220: OR
58221: IFFALSE 58243
// tmp := Delete ( tmp , i ) ;
58223: LD_ADDR_VAR 0 6
58227: PUSH
58228: LD_VAR 0 6
58232: PPUSH
58233: LD_VAR 0 4
58237: PPUSH
58238: CALL_OW 3
58242: ST_TO_ADDR
58243: GO 58143
58245: POP
58246: POP
// j := GetClosestHex ( unit , tmp ) ;
58247: LD_ADDR_VAR 0 5
58251: PUSH
58252: LD_VAR 0 1
58256: PPUSH
58257: LD_VAR 0 6
58261: PPUSH
58262: CALL 57547 0 2
58266: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58267: LD_VAR 0 1
58271: PPUSH
58272: LD_VAR 0 5
58276: PUSH
58277: LD_INT 1
58279: ARRAY
58280: PPUSH
58281: LD_VAR 0 5
58285: PUSH
58286: LD_INT 2
58288: ARRAY
58289: PPUSH
58290: CALL_OW 111
// end ;
58294: LD_VAR 0 3
58298: RET
// export function PrepareApemanSoldier ( ) ; begin
58299: LD_INT 0
58301: PPUSH
// uc_nation := 0 ;
58302: LD_ADDR_OWVAR 21
58306: PUSH
58307: LD_INT 0
58309: ST_TO_ADDR
// hc_sex := sex_male ;
58310: LD_ADDR_OWVAR 27
58314: PUSH
58315: LD_INT 1
58317: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58318: LD_ADDR_OWVAR 28
58322: PUSH
58323: LD_INT 15
58325: ST_TO_ADDR
// hc_gallery :=  ;
58326: LD_ADDR_OWVAR 33
58330: PUSH
58331: LD_STRING 
58333: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58334: LD_ADDR_OWVAR 31
58338: PUSH
58339: LD_INT 0
58341: PPUSH
58342: LD_INT 3
58344: PPUSH
58345: CALL_OW 12
58349: PUSH
58350: LD_INT 0
58352: PPUSH
58353: LD_INT 3
58355: PPUSH
58356: CALL_OW 12
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// end ;
58373: LD_VAR 0 1
58377: RET
// export function PrepareApemanEngineer ( ) ; begin
58378: LD_INT 0
58380: PPUSH
// uc_nation := 0 ;
58381: LD_ADDR_OWVAR 21
58385: PUSH
58386: LD_INT 0
58388: ST_TO_ADDR
// hc_sex := sex_male ;
58389: LD_ADDR_OWVAR 27
58393: PUSH
58394: LD_INT 1
58396: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58397: LD_ADDR_OWVAR 28
58401: PUSH
58402: LD_INT 16
58404: ST_TO_ADDR
// hc_gallery :=  ;
58405: LD_ADDR_OWVAR 33
58409: PUSH
58410: LD_STRING 
58412: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58413: LD_ADDR_OWVAR 31
58417: PUSH
58418: LD_INT 0
58420: PPUSH
58421: LD_INT 3
58423: PPUSH
58424: CALL_OW 12
58428: PUSH
58429: LD_INT 0
58431: PPUSH
58432: LD_INT 3
58434: PPUSH
58435: CALL_OW 12
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: ST_TO_ADDR
// end ;
58452: LD_VAR 0 1
58456: RET
// export function PrepareApeman ( agressivity ) ; begin
58457: LD_INT 0
58459: PPUSH
// uc_side := 0 ;
58460: LD_ADDR_OWVAR 20
58464: PUSH
58465: LD_INT 0
58467: ST_TO_ADDR
// uc_nation := 0 ;
58468: LD_ADDR_OWVAR 21
58472: PUSH
58473: LD_INT 0
58475: ST_TO_ADDR
// hc_sex := sex_male ;
58476: LD_ADDR_OWVAR 27
58480: PUSH
58481: LD_INT 1
58483: ST_TO_ADDR
// hc_class := class_apeman ;
58484: LD_ADDR_OWVAR 28
58488: PUSH
58489: LD_INT 12
58491: ST_TO_ADDR
// hc_gallery :=  ;
58492: LD_ADDR_OWVAR 33
58496: PUSH
58497: LD_STRING 
58499: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58500: LD_ADDR_OWVAR 35
58504: PUSH
58505: LD_VAR 0 1
58509: NEG
58510: PPUSH
58511: LD_VAR 0 1
58515: PPUSH
58516: CALL_OW 12
58520: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58521: LD_ADDR_OWVAR 31
58525: PUSH
58526: LD_INT 0
58528: PPUSH
58529: LD_INT 3
58531: PPUSH
58532: CALL_OW 12
58536: PUSH
58537: LD_INT 0
58539: PPUSH
58540: LD_INT 3
58542: PPUSH
58543: CALL_OW 12
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// end ;
58560: LD_VAR 0 2
58564: RET
// export function PrepareTiger ( agressivity ) ; begin
58565: LD_INT 0
58567: PPUSH
// uc_side := 0 ;
58568: LD_ADDR_OWVAR 20
58572: PUSH
58573: LD_INT 0
58575: ST_TO_ADDR
// uc_nation := 0 ;
58576: LD_ADDR_OWVAR 21
58580: PUSH
58581: LD_INT 0
58583: ST_TO_ADDR
// hc_class := class_tiger ;
58584: LD_ADDR_OWVAR 28
58588: PUSH
58589: LD_INT 14
58591: ST_TO_ADDR
// hc_gallery :=  ;
58592: LD_ADDR_OWVAR 33
58596: PUSH
58597: LD_STRING 
58599: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58600: LD_ADDR_OWVAR 35
58604: PUSH
58605: LD_VAR 0 1
58609: NEG
58610: PPUSH
58611: LD_VAR 0 1
58615: PPUSH
58616: CALL_OW 12
58620: ST_TO_ADDR
// end ;
58621: LD_VAR 0 2
58625: RET
// export function PrepareEnchidna ( ) ; begin
58626: LD_INT 0
58628: PPUSH
// uc_side := 0 ;
58629: LD_ADDR_OWVAR 20
58633: PUSH
58634: LD_INT 0
58636: ST_TO_ADDR
// uc_nation := 0 ;
58637: LD_ADDR_OWVAR 21
58641: PUSH
58642: LD_INT 0
58644: ST_TO_ADDR
// hc_class := class_baggie ;
58645: LD_ADDR_OWVAR 28
58649: PUSH
58650: LD_INT 13
58652: ST_TO_ADDR
// hc_gallery :=  ;
58653: LD_ADDR_OWVAR 33
58657: PUSH
58658: LD_STRING 
58660: ST_TO_ADDR
// end ;
58661: LD_VAR 0 1
58665: RET
// export function PrepareFrog ( ) ; begin
58666: LD_INT 0
58668: PPUSH
// uc_side := 0 ;
58669: LD_ADDR_OWVAR 20
58673: PUSH
58674: LD_INT 0
58676: ST_TO_ADDR
// uc_nation := 0 ;
58677: LD_ADDR_OWVAR 21
58681: PUSH
58682: LD_INT 0
58684: ST_TO_ADDR
// hc_class := class_frog ;
58685: LD_ADDR_OWVAR 28
58689: PUSH
58690: LD_INT 19
58692: ST_TO_ADDR
// hc_gallery :=  ;
58693: LD_ADDR_OWVAR 33
58697: PUSH
58698: LD_STRING 
58700: ST_TO_ADDR
// end ;
58701: LD_VAR 0 1
58705: RET
// export function PrepareFish ( ) ; begin
58706: LD_INT 0
58708: PPUSH
// uc_side := 0 ;
58709: LD_ADDR_OWVAR 20
58713: PUSH
58714: LD_INT 0
58716: ST_TO_ADDR
// uc_nation := 0 ;
58717: LD_ADDR_OWVAR 21
58721: PUSH
58722: LD_INT 0
58724: ST_TO_ADDR
// hc_class := class_fish ;
58725: LD_ADDR_OWVAR 28
58729: PUSH
58730: LD_INT 20
58732: ST_TO_ADDR
// hc_gallery :=  ;
58733: LD_ADDR_OWVAR 33
58737: PUSH
58738: LD_STRING 
58740: ST_TO_ADDR
// end ;
58741: LD_VAR 0 1
58745: RET
// export function PrepareBird ( ) ; begin
58746: LD_INT 0
58748: PPUSH
// uc_side := 0 ;
58749: LD_ADDR_OWVAR 20
58753: PUSH
58754: LD_INT 0
58756: ST_TO_ADDR
// uc_nation := 0 ;
58757: LD_ADDR_OWVAR 21
58761: PUSH
58762: LD_INT 0
58764: ST_TO_ADDR
// hc_class := class_phororhacos ;
58765: LD_ADDR_OWVAR 28
58769: PUSH
58770: LD_INT 18
58772: ST_TO_ADDR
// hc_gallery :=  ;
58773: LD_ADDR_OWVAR 33
58777: PUSH
58778: LD_STRING 
58780: ST_TO_ADDR
// end ;
58781: LD_VAR 0 1
58785: RET
// export function PrepareHorse ( ) ; begin
58786: LD_INT 0
58788: PPUSH
// uc_side := 0 ;
58789: LD_ADDR_OWVAR 20
58793: PUSH
58794: LD_INT 0
58796: ST_TO_ADDR
// uc_nation := 0 ;
58797: LD_ADDR_OWVAR 21
58801: PUSH
58802: LD_INT 0
58804: ST_TO_ADDR
// hc_class := class_horse ;
58805: LD_ADDR_OWVAR 28
58809: PUSH
58810: LD_INT 21
58812: ST_TO_ADDR
// hc_gallery :=  ;
58813: LD_ADDR_OWVAR 33
58817: PUSH
58818: LD_STRING 
58820: ST_TO_ADDR
// end ;
58821: LD_VAR 0 1
58825: RET
// export function PrepareMastodont ( ) ; begin
58826: LD_INT 0
58828: PPUSH
// uc_side := 0 ;
58829: LD_ADDR_OWVAR 20
58833: PUSH
58834: LD_INT 0
58836: ST_TO_ADDR
// uc_nation := 0 ;
58837: LD_ADDR_OWVAR 21
58841: PUSH
58842: LD_INT 0
58844: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58845: LD_ADDR_OWVAR 37
58849: PUSH
58850: LD_INT 31
58852: ST_TO_ADDR
// vc_control := control_rider ;
58853: LD_ADDR_OWVAR 38
58857: PUSH
58858: LD_INT 4
58860: ST_TO_ADDR
// end ;
58861: LD_VAR 0 1
58865: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58866: LD_INT 0
58868: PPUSH
58869: PPUSH
58870: PPUSH
// uc_side = 0 ;
58871: LD_ADDR_OWVAR 20
58875: PUSH
58876: LD_INT 0
58878: ST_TO_ADDR
// uc_nation = 0 ;
58879: LD_ADDR_OWVAR 21
58883: PUSH
58884: LD_INT 0
58886: ST_TO_ADDR
// InitHc_All ( ) ;
58887: CALL_OW 584
// InitVc ;
58891: CALL_OW 20
// if mastodonts then
58895: LD_VAR 0 6
58899: IFFALSE 58966
// for i = 1 to mastodonts do
58901: LD_ADDR_VAR 0 11
58905: PUSH
58906: DOUBLE
58907: LD_INT 1
58909: DEC
58910: ST_TO_ADDR
58911: LD_VAR 0 6
58915: PUSH
58916: FOR_TO
58917: IFFALSE 58964
// begin vc_chassis := 31 ;
58919: LD_ADDR_OWVAR 37
58923: PUSH
58924: LD_INT 31
58926: ST_TO_ADDR
// vc_control := control_rider ;
58927: LD_ADDR_OWVAR 38
58931: PUSH
58932: LD_INT 4
58934: ST_TO_ADDR
// animal := CreateVehicle ;
58935: LD_ADDR_VAR 0 12
58939: PUSH
58940: CALL_OW 45
58944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58945: LD_VAR 0 12
58949: PPUSH
58950: LD_VAR 0 8
58954: PPUSH
58955: LD_INT 0
58957: PPUSH
58958: CALL 61101 0 3
// end ;
58962: GO 58916
58964: POP
58965: POP
// if horses then
58966: LD_VAR 0 5
58970: IFFALSE 59037
// for i = 1 to horses do
58972: LD_ADDR_VAR 0 11
58976: PUSH
58977: DOUBLE
58978: LD_INT 1
58980: DEC
58981: ST_TO_ADDR
58982: LD_VAR 0 5
58986: PUSH
58987: FOR_TO
58988: IFFALSE 59035
// begin hc_class := 21 ;
58990: LD_ADDR_OWVAR 28
58994: PUSH
58995: LD_INT 21
58997: ST_TO_ADDR
// hc_gallery :=  ;
58998: LD_ADDR_OWVAR 33
59002: PUSH
59003: LD_STRING 
59005: ST_TO_ADDR
// animal := CreateHuman ;
59006: LD_ADDR_VAR 0 12
59010: PUSH
59011: CALL_OW 44
59015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59016: LD_VAR 0 12
59020: PPUSH
59021: LD_VAR 0 8
59025: PPUSH
59026: LD_INT 0
59028: PPUSH
59029: CALL 61101 0 3
// end ;
59033: GO 58987
59035: POP
59036: POP
// if birds then
59037: LD_VAR 0 1
59041: IFFALSE 59108
// for i = 1 to birds do
59043: LD_ADDR_VAR 0 11
59047: PUSH
59048: DOUBLE
59049: LD_INT 1
59051: DEC
59052: ST_TO_ADDR
59053: LD_VAR 0 1
59057: PUSH
59058: FOR_TO
59059: IFFALSE 59106
// begin hc_class = 18 ;
59061: LD_ADDR_OWVAR 28
59065: PUSH
59066: LD_INT 18
59068: ST_TO_ADDR
// hc_gallery =  ;
59069: LD_ADDR_OWVAR 33
59073: PUSH
59074: LD_STRING 
59076: ST_TO_ADDR
// animal := CreateHuman ;
59077: LD_ADDR_VAR 0 12
59081: PUSH
59082: CALL_OW 44
59086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59087: LD_VAR 0 12
59091: PPUSH
59092: LD_VAR 0 8
59096: PPUSH
59097: LD_INT 0
59099: PPUSH
59100: CALL 61101 0 3
// end ;
59104: GO 59058
59106: POP
59107: POP
// if tigers then
59108: LD_VAR 0 2
59112: IFFALSE 59196
// for i = 1 to tigers do
59114: LD_ADDR_VAR 0 11
59118: PUSH
59119: DOUBLE
59120: LD_INT 1
59122: DEC
59123: ST_TO_ADDR
59124: LD_VAR 0 2
59128: PUSH
59129: FOR_TO
59130: IFFALSE 59194
// begin hc_class = class_tiger ;
59132: LD_ADDR_OWVAR 28
59136: PUSH
59137: LD_INT 14
59139: ST_TO_ADDR
// hc_gallery =  ;
59140: LD_ADDR_OWVAR 33
59144: PUSH
59145: LD_STRING 
59147: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59148: LD_ADDR_OWVAR 35
59152: PUSH
59153: LD_INT 7
59155: NEG
59156: PPUSH
59157: LD_INT 7
59159: PPUSH
59160: CALL_OW 12
59164: ST_TO_ADDR
// animal := CreateHuman ;
59165: LD_ADDR_VAR 0 12
59169: PUSH
59170: CALL_OW 44
59174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59175: LD_VAR 0 12
59179: PPUSH
59180: LD_VAR 0 8
59184: PPUSH
59185: LD_INT 0
59187: PPUSH
59188: CALL 61101 0 3
// end ;
59192: GO 59129
59194: POP
59195: POP
// if apemans then
59196: LD_VAR 0 3
59200: IFFALSE 59323
// for i = 1 to apemans do
59202: LD_ADDR_VAR 0 11
59206: PUSH
59207: DOUBLE
59208: LD_INT 1
59210: DEC
59211: ST_TO_ADDR
59212: LD_VAR 0 3
59216: PUSH
59217: FOR_TO
59218: IFFALSE 59321
// begin hc_class = class_apeman ;
59220: LD_ADDR_OWVAR 28
59224: PUSH
59225: LD_INT 12
59227: ST_TO_ADDR
// hc_gallery =  ;
59228: LD_ADDR_OWVAR 33
59232: PUSH
59233: LD_STRING 
59235: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59236: LD_ADDR_OWVAR 35
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PPUSH
59245: LD_INT 2
59247: PPUSH
59248: CALL_OW 12
59252: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59253: LD_ADDR_OWVAR 31
59257: PUSH
59258: LD_INT 1
59260: PPUSH
59261: LD_INT 3
59263: PPUSH
59264: CALL_OW 12
59268: PUSH
59269: LD_INT 1
59271: PPUSH
59272: LD_INT 3
59274: PPUSH
59275: CALL_OW 12
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// animal := CreateHuman ;
59292: LD_ADDR_VAR 0 12
59296: PUSH
59297: CALL_OW 44
59301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59302: LD_VAR 0 12
59306: PPUSH
59307: LD_VAR 0 8
59311: PPUSH
59312: LD_INT 0
59314: PPUSH
59315: CALL 61101 0 3
// end ;
59319: GO 59217
59321: POP
59322: POP
// if enchidnas then
59323: LD_VAR 0 4
59327: IFFALSE 59394
// for i = 1 to enchidnas do
59329: LD_ADDR_VAR 0 11
59333: PUSH
59334: DOUBLE
59335: LD_INT 1
59337: DEC
59338: ST_TO_ADDR
59339: LD_VAR 0 4
59343: PUSH
59344: FOR_TO
59345: IFFALSE 59392
// begin hc_class = 13 ;
59347: LD_ADDR_OWVAR 28
59351: PUSH
59352: LD_INT 13
59354: ST_TO_ADDR
// hc_gallery =  ;
59355: LD_ADDR_OWVAR 33
59359: PUSH
59360: LD_STRING 
59362: ST_TO_ADDR
// animal := CreateHuman ;
59363: LD_ADDR_VAR 0 12
59367: PUSH
59368: CALL_OW 44
59372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59373: LD_VAR 0 12
59377: PPUSH
59378: LD_VAR 0 8
59382: PPUSH
59383: LD_INT 0
59385: PPUSH
59386: CALL 61101 0 3
// end ;
59390: GO 59344
59392: POP
59393: POP
// if fishes then
59394: LD_VAR 0 7
59398: IFFALSE 59465
// for i = 1 to fishes do
59400: LD_ADDR_VAR 0 11
59404: PUSH
59405: DOUBLE
59406: LD_INT 1
59408: DEC
59409: ST_TO_ADDR
59410: LD_VAR 0 7
59414: PUSH
59415: FOR_TO
59416: IFFALSE 59463
// begin hc_class = 20 ;
59418: LD_ADDR_OWVAR 28
59422: PUSH
59423: LD_INT 20
59425: ST_TO_ADDR
// hc_gallery =  ;
59426: LD_ADDR_OWVAR 33
59430: PUSH
59431: LD_STRING 
59433: ST_TO_ADDR
// animal := CreateHuman ;
59434: LD_ADDR_VAR 0 12
59438: PUSH
59439: CALL_OW 44
59443: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59444: LD_VAR 0 12
59448: PPUSH
59449: LD_VAR 0 9
59453: PPUSH
59454: LD_INT 0
59456: PPUSH
59457: CALL 61101 0 3
// end ;
59461: GO 59415
59463: POP
59464: POP
// end ;
59465: LD_VAR 0 10
59469: RET
// export function WantHeal ( sci , unit ) ; begin
59470: LD_INT 0
59472: PPUSH
// if GetTaskList ( sci ) > 0 then
59473: LD_VAR 0 1
59477: PPUSH
59478: CALL_OW 437
59482: PUSH
59483: LD_INT 0
59485: GREATER
59486: IFFALSE 59556
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59488: LD_VAR 0 1
59492: PPUSH
59493: CALL_OW 437
59497: PUSH
59498: LD_INT 1
59500: ARRAY
59501: PUSH
59502: LD_INT 1
59504: ARRAY
59505: PUSH
59506: LD_STRING l
59508: EQUAL
59509: PUSH
59510: LD_VAR 0 1
59514: PPUSH
59515: CALL_OW 437
59519: PUSH
59520: LD_INT 1
59522: ARRAY
59523: PUSH
59524: LD_INT 4
59526: ARRAY
59527: PUSH
59528: LD_VAR 0 2
59532: EQUAL
59533: AND
59534: IFFALSE 59546
// result := true else
59536: LD_ADDR_VAR 0 3
59540: PUSH
59541: LD_INT 1
59543: ST_TO_ADDR
59544: GO 59554
// result := false ;
59546: LD_ADDR_VAR 0 3
59550: PUSH
59551: LD_INT 0
59553: ST_TO_ADDR
// end else
59554: GO 59564
// result := false ;
59556: LD_ADDR_VAR 0 3
59560: PUSH
59561: LD_INT 0
59563: ST_TO_ADDR
// end ;
59564: LD_VAR 0 3
59568: RET
// export function HealTarget ( sci ) ; begin
59569: LD_INT 0
59571: PPUSH
// if not sci then
59572: LD_VAR 0 1
59576: NOT
59577: IFFALSE 59581
// exit ;
59579: GO 59646
// result := 0 ;
59581: LD_ADDR_VAR 0 2
59585: PUSH
59586: LD_INT 0
59588: ST_TO_ADDR
// if GetTaskList ( sci ) then
59589: LD_VAR 0 1
59593: PPUSH
59594: CALL_OW 437
59598: IFFALSE 59646
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59600: LD_VAR 0 1
59604: PPUSH
59605: CALL_OW 437
59609: PUSH
59610: LD_INT 1
59612: ARRAY
59613: PUSH
59614: LD_INT 1
59616: ARRAY
59617: PUSH
59618: LD_STRING l
59620: EQUAL
59621: IFFALSE 59646
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59623: LD_ADDR_VAR 0 2
59627: PUSH
59628: LD_VAR 0 1
59632: PPUSH
59633: CALL_OW 437
59637: PUSH
59638: LD_INT 1
59640: ARRAY
59641: PUSH
59642: LD_INT 4
59644: ARRAY
59645: ST_TO_ADDR
// end ;
59646: LD_VAR 0 2
59650: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59651: LD_INT 0
59653: PPUSH
59654: PPUSH
59655: PPUSH
59656: PPUSH
// if not base_units then
59657: LD_VAR 0 1
59661: NOT
59662: IFFALSE 59666
// exit ;
59664: GO 59753
// result := false ;
59666: LD_ADDR_VAR 0 2
59670: PUSH
59671: LD_INT 0
59673: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59674: LD_ADDR_VAR 0 5
59678: PUSH
59679: LD_VAR 0 1
59683: PPUSH
59684: LD_INT 21
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PPUSH
59694: CALL_OW 72
59698: ST_TO_ADDR
// if not tmp then
59699: LD_VAR 0 5
59703: NOT
59704: IFFALSE 59708
// exit ;
59706: GO 59753
// for i in tmp do
59708: LD_ADDR_VAR 0 3
59712: PUSH
59713: LD_VAR 0 5
59717: PUSH
59718: FOR_IN
59719: IFFALSE 59751
// begin result := EnemyInRange ( i , 22 ) ;
59721: LD_ADDR_VAR 0 2
59725: PUSH
59726: LD_VAR 0 3
59730: PPUSH
59731: LD_INT 22
59733: PPUSH
59734: CALL 57422 0 2
59738: ST_TO_ADDR
// if result then
59739: LD_VAR 0 2
59743: IFFALSE 59749
// exit ;
59745: POP
59746: POP
59747: GO 59753
// end ;
59749: GO 59718
59751: POP
59752: POP
// end ;
59753: LD_VAR 0 2
59757: RET
// export function FilterByTag ( units , tag ) ; begin
59758: LD_INT 0
59760: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59761: LD_ADDR_VAR 0 3
59765: PUSH
59766: LD_VAR 0 1
59770: PPUSH
59771: LD_INT 120
59773: PUSH
59774: LD_VAR 0 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PPUSH
59783: CALL_OW 72
59787: ST_TO_ADDR
// end ;
59788: LD_VAR 0 3
59792: RET
// export function IsDriver ( un ) ; begin
59793: LD_INT 0
59795: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59796: LD_ADDR_VAR 0 2
59800: PUSH
59801: LD_VAR 0 1
59805: PUSH
59806: LD_INT 55
59808: PUSH
59809: EMPTY
59810: LIST
59811: PPUSH
59812: CALL_OW 69
59816: IN
59817: ST_TO_ADDR
// end ;
59818: LD_VAR 0 2
59822: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59823: LD_INT 0
59825: PPUSH
59826: PPUSH
// list := [ ] ;
59827: LD_ADDR_VAR 0 5
59831: PUSH
59832: EMPTY
59833: ST_TO_ADDR
// case d of 0 :
59834: LD_VAR 0 3
59838: PUSH
59839: LD_INT 0
59841: DOUBLE
59842: EQUAL
59843: IFTRUE 59847
59845: GO 59980
59847: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59848: LD_ADDR_VAR 0 5
59852: PUSH
59853: LD_VAR 0 1
59857: PUSH
59858: LD_INT 4
59860: MINUS
59861: PUSH
59862: LD_VAR 0 2
59866: PUSH
59867: LD_INT 4
59869: MINUS
59870: PUSH
59871: LD_INT 2
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: PUSH
59879: LD_VAR 0 1
59883: PUSH
59884: LD_INT 3
59886: MINUS
59887: PUSH
59888: LD_VAR 0 2
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: PUSH
59901: LD_VAR 0 1
59905: PUSH
59906: LD_INT 4
59908: PLUS
59909: PUSH
59910: LD_VAR 0 2
59914: PUSH
59915: LD_INT 4
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: PUSH
59923: LD_VAR 0 1
59927: PUSH
59928: LD_INT 3
59930: PLUS
59931: PUSH
59932: LD_VAR 0 2
59936: PUSH
59937: LD_INT 3
59939: PLUS
59940: PUSH
59941: LD_INT 5
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: PUSH
59949: LD_VAR 0 1
59953: PUSH
59954: LD_VAR 0 2
59958: PUSH
59959: LD_INT 4
59961: PLUS
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// end ; 1 :
59978: GO 60678
59980: LD_INT 1
59982: DOUBLE
59983: EQUAL
59984: IFTRUE 59988
59986: GO 60121
59988: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59989: LD_ADDR_VAR 0 5
59993: PUSH
59994: LD_VAR 0 1
59998: PUSH
59999: LD_VAR 0 2
60003: PUSH
60004: LD_INT 4
60006: MINUS
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: LIST
60015: PUSH
60016: LD_VAR 0 1
60020: PUSH
60021: LD_INT 3
60023: MINUS
60024: PUSH
60025: LD_VAR 0 2
60029: PUSH
60030: LD_INT 3
60032: MINUS
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: LIST
60041: PUSH
60042: LD_VAR 0 1
60046: PUSH
60047: LD_INT 4
60049: MINUS
60050: PUSH
60051: LD_VAR 0 2
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: LIST
60063: PUSH
60064: LD_VAR 0 1
60068: PUSH
60069: LD_VAR 0 2
60073: PUSH
60074: LD_INT 3
60076: PLUS
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: PUSH
60086: LD_VAR 0 1
60090: PUSH
60091: LD_INT 4
60093: PLUS
60094: PUSH
60095: LD_VAR 0 2
60099: PUSH
60100: LD_INT 4
60102: PLUS
60103: PUSH
60104: LD_INT 5
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: ST_TO_ADDR
// end ; 2 :
60119: GO 60678
60121: LD_INT 2
60123: DOUBLE
60124: EQUAL
60125: IFTRUE 60129
60127: GO 60258
60129: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60130: LD_ADDR_VAR 0 5
60134: PUSH
60135: LD_VAR 0 1
60139: PUSH
60140: LD_VAR 0 2
60144: PUSH
60145: LD_INT 3
60147: MINUS
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: LIST
60156: PUSH
60157: LD_VAR 0 1
60161: PUSH
60162: LD_INT 4
60164: PLUS
60165: PUSH
60166: LD_VAR 0 2
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: PUSH
60179: LD_VAR 0 1
60183: PUSH
60184: LD_VAR 0 2
60188: PUSH
60189: LD_INT 4
60191: PLUS
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: PUSH
60201: LD_VAR 0 1
60205: PUSH
60206: LD_INT 3
60208: MINUS
60209: PUSH
60210: LD_VAR 0 2
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: PUSH
60223: LD_VAR 0 1
60227: PUSH
60228: LD_INT 4
60230: MINUS
60231: PUSH
60232: LD_VAR 0 2
60236: PUSH
60237: LD_INT 4
60239: MINUS
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// end ; 3 :
60256: GO 60678
60258: LD_INT 3
60260: DOUBLE
60261: EQUAL
60262: IFTRUE 60266
60264: GO 60399
60266: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60267: LD_ADDR_VAR 0 5
60271: PUSH
60272: LD_VAR 0 1
60276: PUSH
60277: LD_INT 3
60279: PLUS
60280: PUSH
60281: LD_VAR 0 2
60285: PUSH
60286: LD_INT 4
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: LIST
60293: PUSH
60294: LD_VAR 0 1
60298: PUSH
60299: LD_INT 4
60301: PLUS
60302: PUSH
60303: LD_VAR 0 2
60307: PUSH
60308: LD_INT 4
60310: PLUS
60311: PUSH
60312: LD_INT 5
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: PUSH
60320: LD_VAR 0 1
60324: PUSH
60325: LD_INT 4
60327: MINUS
60328: PUSH
60329: LD_VAR 0 2
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: PUSH
60342: LD_VAR 0 1
60346: PUSH
60347: LD_VAR 0 2
60351: PUSH
60352: LD_INT 4
60354: MINUS
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: PUSH
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 3
60371: MINUS
60372: PUSH
60373: LD_VAR 0 2
60377: PUSH
60378: LD_INT 3
60380: MINUS
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// end ; 4 :
60397: GO 60678
60399: LD_INT 4
60401: DOUBLE
60402: EQUAL
60403: IFTRUE 60407
60405: GO 60540
60407: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60408: LD_ADDR_VAR 0 5
60412: PUSH
60413: LD_VAR 0 1
60417: PUSH
60418: LD_VAR 0 2
60422: PUSH
60423: LD_INT 4
60425: PLUS
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: PUSH
60435: LD_VAR 0 1
60439: PUSH
60440: LD_INT 3
60442: PLUS
60443: PUSH
60444: LD_VAR 0 2
60448: PUSH
60449: LD_INT 3
60451: PLUS
60452: PUSH
60453: LD_INT 5
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: PUSH
60461: LD_VAR 0 1
60465: PUSH
60466: LD_INT 4
60468: PLUS
60469: PUSH
60470: LD_VAR 0 2
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: PUSH
60483: LD_VAR 0 1
60487: PUSH
60488: LD_VAR 0 2
60492: PUSH
60493: LD_INT 3
60495: MINUS
60496: PUSH
60497: LD_INT 3
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: PUSH
60505: LD_VAR 0 1
60509: PUSH
60510: LD_INT 4
60512: MINUS
60513: PUSH
60514: LD_VAR 0 2
60518: PUSH
60519: LD_INT 4
60521: MINUS
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// end ; 5 :
60538: GO 60678
60540: LD_INT 5
60542: DOUBLE
60543: EQUAL
60544: IFTRUE 60548
60546: GO 60677
60548: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60549: LD_ADDR_VAR 0 5
60553: PUSH
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 4
60561: MINUS
60562: PUSH
60563: LD_VAR 0 2
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: LIST
60575: PUSH
60576: LD_VAR 0 1
60580: PUSH
60581: LD_VAR 0 2
60585: PUSH
60586: LD_INT 4
60588: MINUS
60589: PUSH
60590: LD_INT 3
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 1
60602: PUSH
60603: LD_INT 4
60605: PLUS
60606: PUSH
60607: LD_VAR 0 2
60611: PUSH
60612: LD_INT 4
60614: PLUS
60615: PUSH
60616: LD_INT 5
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: LIST
60623: PUSH
60624: LD_VAR 0 1
60628: PUSH
60629: LD_INT 3
60631: PLUS
60632: PUSH
60633: LD_VAR 0 2
60637: PUSH
60638: LD_INT 4
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: PUSH
60646: LD_VAR 0 1
60650: PUSH
60651: LD_VAR 0 2
60655: PUSH
60656: LD_INT 3
60658: PLUS
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// end ; end ;
60675: GO 60678
60677: POP
// result := list ;
60678: LD_ADDR_VAR 0 4
60682: PUSH
60683: LD_VAR 0 5
60687: ST_TO_ADDR
// end ;
60688: LD_VAR 0 4
60692: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60693: LD_INT 0
60695: PPUSH
60696: PPUSH
60697: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60698: LD_VAR 0 1
60702: NOT
60703: PUSH
60704: LD_VAR 0 2
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: LD_INT 4
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: IN
60727: NOT
60728: OR
60729: IFFALSE 60733
// exit ;
60731: GO 60825
// tmp := [ ] ;
60733: LD_ADDR_VAR 0 5
60737: PUSH
60738: EMPTY
60739: ST_TO_ADDR
// for i in units do
60740: LD_ADDR_VAR 0 4
60744: PUSH
60745: LD_VAR 0 1
60749: PUSH
60750: FOR_IN
60751: IFFALSE 60794
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60753: LD_ADDR_VAR 0 5
60757: PUSH
60758: LD_VAR 0 5
60762: PPUSH
60763: LD_VAR 0 5
60767: PUSH
60768: LD_INT 1
60770: PLUS
60771: PPUSH
60772: LD_VAR 0 4
60776: PPUSH
60777: LD_VAR 0 2
60781: PPUSH
60782: CALL_OW 259
60786: PPUSH
60787: CALL_OW 2
60791: ST_TO_ADDR
60792: GO 60750
60794: POP
60795: POP
// if not tmp then
60796: LD_VAR 0 5
60800: NOT
60801: IFFALSE 60805
// exit ;
60803: GO 60825
// result := SortListByListDesc ( units , tmp ) ;
60805: LD_ADDR_VAR 0 3
60809: PUSH
60810: LD_VAR 0 1
60814: PPUSH
60815: LD_VAR 0 5
60819: PPUSH
60820: CALL_OW 77
60824: ST_TO_ADDR
// end ;
60825: LD_VAR 0 3
60829: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60830: LD_INT 0
60832: PPUSH
60833: PPUSH
60834: PPUSH
// result := false ;
60835: LD_ADDR_VAR 0 3
60839: PUSH
60840: LD_INT 0
60842: ST_TO_ADDR
// x := GetX ( building ) ;
60843: LD_ADDR_VAR 0 4
60847: PUSH
60848: LD_VAR 0 2
60852: PPUSH
60853: CALL_OW 250
60857: ST_TO_ADDR
// y := GetY ( building ) ;
60858: LD_ADDR_VAR 0 5
60862: PUSH
60863: LD_VAR 0 2
60867: PPUSH
60868: CALL_OW 251
60872: ST_TO_ADDR
// if not building or not x or not y then
60873: LD_VAR 0 2
60877: NOT
60878: PUSH
60879: LD_VAR 0 4
60883: NOT
60884: OR
60885: PUSH
60886: LD_VAR 0 5
60890: NOT
60891: OR
60892: IFFALSE 60896
// exit ;
60894: GO 60988
// if GetTaskList ( unit ) then
60896: LD_VAR 0 1
60900: PPUSH
60901: CALL_OW 437
60905: IFFALSE 60988
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60907: LD_STRING e
60909: PUSH
60910: LD_VAR 0 1
60914: PPUSH
60915: CALL_OW 437
60919: PUSH
60920: LD_INT 1
60922: ARRAY
60923: PUSH
60924: LD_INT 1
60926: ARRAY
60927: EQUAL
60928: PUSH
60929: LD_VAR 0 4
60933: PUSH
60934: LD_VAR 0 1
60938: PPUSH
60939: CALL_OW 437
60943: PUSH
60944: LD_INT 1
60946: ARRAY
60947: PUSH
60948: LD_INT 2
60950: ARRAY
60951: EQUAL
60952: AND
60953: PUSH
60954: LD_VAR 0 5
60958: PUSH
60959: LD_VAR 0 1
60963: PPUSH
60964: CALL_OW 437
60968: PUSH
60969: LD_INT 1
60971: ARRAY
60972: PUSH
60973: LD_INT 3
60975: ARRAY
60976: EQUAL
60977: AND
60978: IFFALSE 60988
// result := true end ;
60980: LD_ADDR_VAR 0 3
60984: PUSH
60985: LD_INT 1
60987: ST_TO_ADDR
// end ;
60988: LD_VAR 0 3
60992: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60993: LD_INT 0
60995: PPUSH
// result := false ;
60996: LD_ADDR_VAR 0 4
61000: PUSH
61001: LD_INT 0
61003: ST_TO_ADDR
// if GetTaskList ( unit ) then
61004: LD_VAR 0 1
61008: PPUSH
61009: CALL_OW 437
61013: IFFALSE 61096
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61015: LD_STRING M
61017: PUSH
61018: LD_VAR 0 1
61022: PPUSH
61023: CALL_OW 437
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: PUSH
61032: LD_INT 1
61034: ARRAY
61035: EQUAL
61036: PUSH
61037: LD_VAR 0 2
61041: PUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL_OW 437
61051: PUSH
61052: LD_INT 1
61054: ARRAY
61055: PUSH
61056: LD_INT 2
61058: ARRAY
61059: EQUAL
61060: AND
61061: PUSH
61062: LD_VAR 0 3
61066: PUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 437
61076: PUSH
61077: LD_INT 1
61079: ARRAY
61080: PUSH
61081: LD_INT 3
61083: ARRAY
61084: EQUAL
61085: AND
61086: IFFALSE 61096
// result := true ;
61088: LD_ADDR_VAR 0 4
61092: PUSH
61093: LD_INT 1
61095: ST_TO_ADDR
// end ; end ;
61096: LD_VAR 0 4
61100: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61101: LD_INT 0
61103: PPUSH
61104: PPUSH
61105: PPUSH
61106: PPUSH
// if not unit or not area then
61107: LD_VAR 0 1
61111: NOT
61112: PUSH
61113: LD_VAR 0 2
61117: NOT
61118: OR
61119: IFFALSE 61123
// exit ;
61121: GO 61287
// tmp := AreaToList ( area , i ) ;
61123: LD_ADDR_VAR 0 6
61127: PUSH
61128: LD_VAR 0 2
61132: PPUSH
61133: LD_VAR 0 5
61137: PPUSH
61138: CALL_OW 517
61142: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61143: LD_ADDR_VAR 0 5
61147: PUSH
61148: DOUBLE
61149: LD_INT 1
61151: DEC
61152: ST_TO_ADDR
61153: LD_VAR 0 6
61157: PUSH
61158: LD_INT 1
61160: ARRAY
61161: PUSH
61162: FOR_TO
61163: IFFALSE 61285
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61165: LD_ADDR_VAR 0 7
61169: PUSH
61170: LD_VAR 0 6
61174: PUSH
61175: LD_INT 1
61177: ARRAY
61178: PUSH
61179: LD_VAR 0 5
61183: ARRAY
61184: PUSH
61185: LD_VAR 0 6
61189: PUSH
61190: LD_INT 2
61192: ARRAY
61193: PUSH
61194: LD_VAR 0 5
61198: ARRAY
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61204: LD_VAR 0 7
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: PPUSH
61213: LD_VAR 0 7
61217: PUSH
61218: LD_INT 2
61220: ARRAY
61221: PPUSH
61222: CALL_OW 428
61226: PUSH
61227: LD_INT 0
61229: EQUAL
61230: IFFALSE 61283
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61232: LD_VAR 0 1
61236: PPUSH
61237: LD_VAR 0 7
61241: PUSH
61242: LD_INT 1
61244: ARRAY
61245: PPUSH
61246: LD_VAR 0 7
61250: PUSH
61251: LD_INT 2
61253: ARRAY
61254: PPUSH
61255: LD_VAR 0 3
61259: PPUSH
61260: CALL_OW 48
// result := IsPlaced ( unit ) ;
61264: LD_ADDR_VAR 0 4
61268: PUSH
61269: LD_VAR 0 1
61273: PPUSH
61274: CALL_OW 305
61278: ST_TO_ADDR
// exit ;
61279: POP
61280: POP
61281: GO 61287
// end ; end ;
61283: GO 61162
61285: POP
61286: POP
// end ;
61287: LD_VAR 0 4
61291: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61292: LD_INT 0
61294: PPUSH
61295: PPUSH
61296: PPUSH
// if not side or side > 8 then
61297: LD_VAR 0 1
61301: NOT
61302: PUSH
61303: LD_VAR 0 1
61307: PUSH
61308: LD_INT 8
61310: GREATER
61311: OR
61312: IFFALSE 61316
// exit ;
61314: GO 61503
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61316: LD_ADDR_VAR 0 4
61320: PUSH
61321: LD_INT 22
61323: PUSH
61324: LD_VAR 0 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 21
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PPUSH
61347: CALL_OW 69
61351: ST_TO_ADDR
// if not tmp then
61352: LD_VAR 0 4
61356: NOT
61357: IFFALSE 61361
// exit ;
61359: GO 61503
// enable_addtolog := true ;
61361: LD_ADDR_OWVAR 81
61365: PUSH
61366: LD_INT 1
61368: ST_TO_ADDR
// AddToLog ( [ ) ;
61369: LD_STRING [
61371: PPUSH
61372: CALL_OW 561
// for i in tmp do
61376: LD_ADDR_VAR 0 3
61380: PUSH
61381: LD_VAR 0 4
61385: PUSH
61386: FOR_IN
61387: IFFALSE 61494
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61389: LD_STRING [
61391: PUSH
61392: LD_VAR 0 3
61396: PPUSH
61397: CALL_OW 266
61401: STR
61402: PUSH
61403: LD_STRING , 
61405: STR
61406: PUSH
61407: LD_VAR 0 3
61411: PPUSH
61412: CALL_OW 250
61416: STR
61417: PUSH
61418: LD_STRING , 
61420: STR
61421: PUSH
61422: LD_VAR 0 3
61426: PPUSH
61427: CALL_OW 251
61431: STR
61432: PUSH
61433: LD_STRING , 
61435: STR
61436: PUSH
61437: LD_VAR 0 3
61441: PPUSH
61442: CALL_OW 254
61446: STR
61447: PUSH
61448: LD_STRING , 
61450: STR
61451: PUSH
61452: LD_VAR 0 3
61456: PPUSH
61457: LD_INT 1
61459: PPUSH
61460: CALL_OW 268
61464: STR
61465: PUSH
61466: LD_STRING , 
61468: STR
61469: PUSH
61470: LD_VAR 0 3
61474: PPUSH
61475: LD_INT 2
61477: PPUSH
61478: CALL_OW 268
61482: STR
61483: PUSH
61484: LD_STRING ],
61486: STR
61487: PPUSH
61488: CALL_OW 561
// end ;
61492: GO 61386
61494: POP
61495: POP
// AddToLog ( ]; ) ;
61496: LD_STRING ];
61498: PPUSH
61499: CALL_OW 561
// end ;
61503: LD_VAR 0 2
61507: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61508: LD_INT 0
61510: PPUSH
61511: PPUSH
61512: PPUSH
61513: PPUSH
61514: PPUSH
// if not area or not rate or not max then
61515: LD_VAR 0 1
61519: NOT
61520: PUSH
61521: LD_VAR 0 2
61525: NOT
61526: OR
61527: PUSH
61528: LD_VAR 0 4
61532: NOT
61533: OR
61534: IFFALSE 61538
// exit ;
61536: GO 61727
// while 1 do
61538: LD_INT 1
61540: IFFALSE 61727
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61542: LD_ADDR_VAR 0 9
61546: PUSH
61547: LD_VAR 0 1
61551: PPUSH
61552: LD_INT 1
61554: PPUSH
61555: CALL_OW 287
61559: PUSH
61560: LD_INT 10
61562: MUL
61563: ST_TO_ADDR
// r := rate / 10 ;
61564: LD_ADDR_VAR 0 7
61568: PUSH
61569: LD_VAR 0 2
61573: PUSH
61574: LD_INT 10
61576: DIVREAL
61577: ST_TO_ADDR
// time := 1 1$00 ;
61578: LD_ADDR_VAR 0 8
61582: PUSH
61583: LD_INT 2100
61585: ST_TO_ADDR
// if amount < min then
61586: LD_VAR 0 9
61590: PUSH
61591: LD_VAR 0 3
61595: LESS
61596: IFFALSE 61614
// r := r * 2 else
61598: LD_ADDR_VAR 0 7
61602: PUSH
61603: LD_VAR 0 7
61607: PUSH
61608: LD_INT 2
61610: MUL
61611: ST_TO_ADDR
61612: GO 61640
// if amount > max then
61614: LD_VAR 0 9
61618: PUSH
61619: LD_VAR 0 4
61623: GREATER
61624: IFFALSE 61640
// r := r / 2 ;
61626: LD_ADDR_VAR 0 7
61630: PUSH
61631: LD_VAR 0 7
61635: PUSH
61636: LD_INT 2
61638: DIVREAL
61639: ST_TO_ADDR
// time := time / r ;
61640: LD_ADDR_VAR 0 8
61644: PUSH
61645: LD_VAR 0 8
61649: PUSH
61650: LD_VAR 0 7
61654: DIVREAL
61655: ST_TO_ADDR
// if time < 0 then
61656: LD_VAR 0 8
61660: PUSH
61661: LD_INT 0
61663: LESS
61664: IFFALSE 61681
// time := time * - 1 ;
61666: LD_ADDR_VAR 0 8
61670: PUSH
61671: LD_VAR 0 8
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: MUL
61680: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61681: LD_VAR 0 8
61685: PUSH
61686: LD_INT 35
61688: PPUSH
61689: LD_INT 875
61691: PPUSH
61692: CALL_OW 12
61696: PLUS
61697: PPUSH
61698: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61702: LD_INT 1
61704: PPUSH
61705: LD_INT 5
61707: PPUSH
61708: CALL_OW 12
61712: PPUSH
61713: LD_VAR 0 1
61717: PPUSH
61718: LD_INT 1
61720: PPUSH
61721: CALL_OW 55
// end ;
61725: GO 61538
// end ;
61727: LD_VAR 0 5
61731: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61732: LD_INT 0
61734: PPUSH
61735: PPUSH
61736: PPUSH
61737: PPUSH
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
// if not turrets or not factories then
61742: LD_VAR 0 1
61746: NOT
61747: PUSH
61748: LD_VAR 0 2
61752: NOT
61753: OR
61754: IFFALSE 61758
// exit ;
61756: GO 62065
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61758: LD_ADDR_VAR 0 10
61762: PUSH
61763: LD_INT 5
61765: PUSH
61766: LD_INT 6
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 4
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: LD_INT 5
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 24
61800: PUSH
61801: LD_INT 25
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 23
61810: PUSH
61811: LD_INT 27
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 42
61824: PUSH
61825: LD_INT 43
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 44
61834: PUSH
61835: LD_INT 46
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 45
61844: PUSH
61845: LD_INT 47
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// result := [ ] ;
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: EMPTY
61868: ST_TO_ADDR
// for i in turrets do
61869: LD_ADDR_VAR 0 4
61873: PUSH
61874: LD_VAR 0 1
61878: PUSH
61879: FOR_IN
61880: IFFALSE 62063
// begin nat := GetNation ( i ) ;
61882: LD_ADDR_VAR 0 7
61886: PUSH
61887: LD_VAR 0 4
61891: PPUSH
61892: CALL_OW 248
61896: ST_TO_ADDR
// weapon := 0 ;
61897: LD_ADDR_VAR 0 8
61901: PUSH
61902: LD_INT 0
61904: ST_TO_ADDR
// if not nat then
61905: LD_VAR 0 7
61909: NOT
61910: IFFALSE 61914
// continue ;
61912: GO 61879
// for j in list [ nat ] do
61914: LD_ADDR_VAR 0 5
61918: PUSH
61919: LD_VAR 0 10
61923: PUSH
61924: LD_VAR 0 7
61928: ARRAY
61929: PUSH
61930: FOR_IN
61931: IFFALSE 61972
// if GetBWeapon ( i ) = j [ 1 ] then
61933: LD_VAR 0 4
61937: PPUSH
61938: CALL_OW 269
61942: PUSH
61943: LD_VAR 0 5
61947: PUSH
61948: LD_INT 1
61950: ARRAY
61951: EQUAL
61952: IFFALSE 61970
// begin weapon := j [ 2 ] ;
61954: LD_ADDR_VAR 0 8
61958: PUSH
61959: LD_VAR 0 5
61963: PUSH
61964: LD_INT 2
61966: ARRAY
61967: ST_TO_ADDR
// break ;
61968: GO 61972
// end ;
61970: GO 61930
61972: POP
61973: POP
// if not weapon then
61974: LD_VAR 0 8
61978: NOT
61979: IFFALSE 61983
// continue ;
61981: GO 61879
// for k in factories do
61983: LD_ADDR_VAR 0 6
61987: PUSH
61988: LD_VAR 0 2
61992: PUSH
61993: FOR_IN
61994: IFFALSE 62059
// begin weapons := AvailableWeaponList ( k ) ;
61996: LD_ADDR_VAR 0 9
62000: PUSH
62001: LD_VAR 0 6
62005: PPUSH
62006: CALL_OW 478
62010: ST_TO_ADDR
// if not weapons then
62011: LD_VAR 0 9
62015: NOT
62016: IFFALSE 62020
// continue ;
62018: GO 61993
// if weapon in weapons then
62020: LD_VAR 0 8
62024: PUSH
62025: LD_VAR 0 9
62029: IN
62030: IFFALSE 62057
// begin result := [ i , weapon ] ;
62032: LD_ADDR_VAR 0 3
62036: PUSH
62037: LD_VAR 0 4
62041: PUSH
62042: LD_VAR 0 8
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// exit ;
62051: POP
62052: POP
62053: POP
62054: POP
62055: GO 62065
// end ; end ;
62057: GO 61993
62059: POP
62060: POP
// end ;
62061: GO 61879
62063: POP
62064: POP
// end ;
62065: LD_VAR 0 3
62069: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62070: LD_INT 0
62072: PPUSH
// if not side or side > 8 then
62073: LD_VAR 0 3
62077: NOT
62078: PUSH
62079: LD_VAR 0 3
62083: PUSH
62084: LD_INT 8
62086: GREATER
62087: OR
62088: IFFALSE 62092
// exit ;
62090: GO 62151
// if not range then
62092: LD_VAR 0 4
62096: NOT
62097: IFFALSE 62108
// range := - 12 ;
62099: LD_ADDR_VAR 0 4
62103: PUSH
62104: LD_INT 12
62106: NEG
62107: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62108: LD_VAR 0 1
62112: PPUSH
62113: LD_VAR 0 2
62117: PPUSH
62118: LD_VAR 0 3
62122: PPUSH
62123: LD_VAR 0 4
62127: PPUSH
62128: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62132: LD_VAR 0 1
62136: PPUSH
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: CALL_OW 331
// end ;
62151: LD_VAR 0 5
62155: RET
// export function Video ( mode ) ; begin
62156: LD_INT 0
62158: PPUSH
// ingame_video = mode ;
62159: LD_ADDR_OWVAR 52
62163: PUSH
62164: LD_VAR 0 1
62168: ST_TO_ADDR
// interface_hidden = mode ;
62169: LD_ADDR_OWVAR 54
62173: PUSH
62174: LD_VAR 0 1
62178: ST_TO_ADDR
// end ;
62179: LD_VAR 0 2
62183: RET
// export function Join ( array , element ) ; begin
62184: LD_INT 0
62186: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62187: LD_ADDR_VAR 0 3
62191: PUSH
62192: LD_VAR 0 1
62196: PPUSH
62197: LD_VAR 0 1
62201: PUSH
62202: LD_INT 1
62204: PLUS
62205: PPUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: CALL_OW 1
62215: ST_TO_ADDR
// end ;
62216: LD_VAR 0 3
62220: RET
// export function JoinUnion ( array , element ) ; begin
62221: LD_INT 0
62223: PPUSH
// result := array union element ;
62224: LD_ADDR_VAR 0 3
62228: PUSH
62229: LD_VAR 0 1
62233: PUSH
62234: LD_VAR 0 2
62238: UNION
62239: ST_TO_ADDR
// end ;
62240: LD_VAR 0 3
62244: RET
// export function GetBehemoths ( side ) ; begin
62245: LD_INT 0
62247: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62248: LD_ADDR_VAR 0 2
62252: PUSH
62253: LD_INT 22
62255: PUSH
62256: LD_VAR 0 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 31
62267: PUSH
62268: LD_INT 25
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PPUSH
62279: CALL_OW 69
62283: ST_TO_ADDR
// end ;
62284: LD_VAR 0 2
62288: RET
// export function Shuffle ( array ) ; var i , index ; begin
62289: LD_INT 0
62291: PPUSH
62292: PPUSH
62293: PPUSH
// result := [ ] ;
62294: LD_ADDR_VAR 0 2
62298: PUSH
62299: EMPTY
62300: ST_TO_ADDR
// if not array then
62301: LD_VAR 0 1
62305: NOT
62306: IFFALSE 62310
// exit ;
62308: GO 62409
// Randomize ;
62310: CALL_OW 10
// for i = array downto 1 do
62314: LD_ADDR_VAR 0 3
62318: PUSH
62319: DOUBLE
62320: LD_VAR 0 1
62324: INC
62325: ST_TO_ADDR
62326: LD_INT 1
62328: PUSH
62329: FOR_DOWNTO
62330: IFFALSE 62407
// begin index := rand ( 1 , array ) ;
62332: LD_ADDR_VAR 0 4
62336: PUSH
62337: LD_INT 1
62339: PPUSH
62340: LD_VAR 0 1
62344: PPUSH
62345: CALL_OW 12
62349: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62350: LD_ADDR_VAR 0 2
62354: PUSH
62355: LD_VAR 0 2
62359: PPUSH
62360: LD_VAR 0 2
62364: PUSH
62365: LD_INT 1
62367: PLUS
62368: PPUSH
62369: LD_VAR 0 1
62373: PUSH
62374: LD_VAR 0 4
62378: ARRAY
62379: PPUSH
62380: CALL_OW 2
62384: ST_TO_ADDR
// array := Delete ( array , index ) ;
62385: LD_ADDR_VAR 0 1
62389: PUSH
62390: LD_VAR 0 1
62394: PPUSH
62395: LD_VAR 0 4
62399: PPUSH
62400: CALL_OW 3
62404: ST_TO_ADDR
// end ;
62405: GO 62329
62407: POP
62408: POP
// end ;
62409: LD_VAR 0 2
62413: RET
// export function GetBaseMaterials ( base ) ; begin
62414: LD_INT 0
62416: PPUSH
// result := [ 0 , 0 , 0 ] ;
62417: LD_ADDR_VAR 0 2
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: ST_TO_ADDR
// if not base then
62436: LD_VAR 0 1
62440: NOT
62441: IFFALSE 62445
// exit ;
62443: GO 62494
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62445: LD_ADDR_VAR 0 2
62449: PUSH
62450: LD_VAR 0 1
62454: PPUSH
62455: LD_INT 1
62457: PPUSH
62458: CALL_OW 275
62462: PUSH
62463: LD_VAR 0 1
62467: PPUSH
62468: LD_INT 2
62470: PPUSH
62471: CALL_OW 275
62475: PUSH
62476: LD_VAR 0 1
62480: PPUSH
62481: LD_INT 3
62483: PPUSH
62484: CALL_OW 275
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// end ;
62494: LD_VAR 0 2
62498: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62499: LD_INT 0
62501: PPUSH
62502: PPUSH
// result := array ;
62503: LD_ADDR_VAR 0 3
62507: PUSH
62508: LD_VAR 0 1
62512: ST_TO_ADDR
// if size >= result then
62513: LD_VAR 0 2
62517: PUSH
62518: LD_VAR 0 3
62522: GREATEREQUAL
62523: IFFALSE 62527
// exit ;
62525: GO 62577
// if size then
62527: LD_VAR 0 2
62531: IFFALSE 62577
// for i := array downto size do
62533: LD_ADDR_VAR 0 4
62537: PUSH
62538: DOUBLE
62539: LD_VAR 0 1
62543: INC
62544: ST_TO_ADDR
62545: LD_VAR 0 2
62549: PUSH
62550: FOR_DOWNTO
62551: IFFALSE 62575
// result := Delete ( result , result ) ;
62553: LD_ADDR_VAR 0 3
62557: PUSH
62558: LD_VAR 0 3
62562: PPUSH
62563: LD_VAR 0 3
62567: PPUSH
62568: CALL_OW 3
62572: ST_TO_ADDR
62573: GO 62550
62575: POP
62576: POP
// end ;
62577: LD_VAR 0 3
62581: RET
// export function ComExit ( unit ) ; var tmp ; begin
62582: LD_INT 0
62584: PPUSH
62585: PPUSH
// if not IsInUnit ( unit ) then
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL_OW 310
62595: NOT
62596: IFFALSE 62600
// exit ;
62598: GO 62660
// tmp := IsInUnit ( unit ) ;
62600: LD_ADDR_VAR 0 3
62604: PUSH
62605: LD_VAR 0 1
62609: PPUSH
62610: CALL_OW 310
62614: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62615: LD_VAR 0 3
62619: PPUSH
62620: CALL_OW 247
62624: PUSH
62625: LD_INT 2
62627: EQUAL
62628: IFFALSE 62641
// ComExitVehicle ( unit ) else
62630: LD_VAR 0 1
62634: PPUSH
62635: CALL_OW 121
62639: GO 62650
// ComExitBuilding ( unit ) ;
62641: LD_VAR 0 1
62645: PPUSH
62646: CALL_OW 122
// result := tmp ;
62650: LD_ADDR_VAR 0 2
62654: PUSH
62655: LD_VAR 0 3
62659: ST_TO_ADDR
// end ;
62660: LD_VAR 0 2
62664: RET
// export function ComExitAll ( units ) ; var i ; begin
62665: LD_INT 0
62667: PPUSH
62668: PPUSH
// if not units then
62669: LD_VAR 0 1
62673: NOT
62674: IFFALSE 62678
// exit ;
62676: GO 62704
// for i in units do
62678: LD_ADDR_VAR 0 3
62682: PUSH
62683: LD_VAR 0 1
62687: PUSH
62688: FOR_IN
62689: IFFALSE 62702
// ComExit ( i ) ;
62691: LD_VAR 0 3
62695: PPUSH
62696: CALL 62582 0 1
62700: GO 62688
62702: POP
62703: POP
// end ;
62704: LD_VAR 0 2
62708: RET
// export function ResetHc ; begin
62709: LD_INT 0
62711: PPUSH
// InitHc ;
62712: CALL_OW 19
// hc_importance := 0 ;
62716: LD_ADDR_OWVAR 32
62720: PUSH
62721: LD_INT 0
62723: ST_TO_ADDR
// end ;
62724: LD_VAR 0 1
62728: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62729: LD_INT 0
62731: PPUSH
62732: PPUSH
62733: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62734: LD_ADDR_VAR 0 6
62738: PUSH
62739: LD_VAR 0 1
62743: PUSH
62744: LD_VAR 0 3
62748: PLUS
62749: PUSH
62750: LD_INT 2
62752: DIV
62753: ST_TO_ADDR
// if _x < 0 then
62754: LD_VAR 0 6
62758: PUSH
62759: LD_INT 0
62761: LESS
62762: IFFALSE 62779
// _x := _x * - 1 ;
62764: LD_ADDR_VAR 0 6
62768: PUSH
62769: LD_VAR 0 6
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: MUL
62778: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62779: LD_ADDR_VAR 0 7
62783: PUSH
62784: LD_VAR 0 2
62788: PUSH
62789: LD_VAR 0 4
62793: PLUS
62794: PUSH
62795: LD_INT 2
62797: DIV
62798: ST_TO_ADDR
// if _y < 0 then
62799: LD_VAR 0 7
62803: PUSH
62804: LD_INT 0
62806: LESS
62807: IFFALSE 62824
// _y := _y * - 1 ;
62809: LD_ADDR_VAR 0 7
62813: PUSH
62814: LD_VAR 0 7
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: MUL
62823: ST_TO_ADDR
// result := [ _x , _y ] ;
62824: LD_ADDR_VAR 0 5
62828: PUSH
62829: LD_VAR 0 6
62833: PUSH
62834: LD_VAR 0 7
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: ST_TO_ADDR
// end ;
62843: LD_VAR 0 5
62847: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
62852: PPUSH
62853: PPUSH
// task := GetTaskList ( unit ) ;
62854: LD_ADDR_VAR 0 7
62858: PUSH
62859: LD_VAR 0 1
62863: PPUSH
62864: CALL_OW 437
62868: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62869: LD_VAR 0 7
62873: NOT
62874: PUSH
62875: LD_VAR 0 1
62879: PPUSH
62880: LD_VAR 0 2
62884: PPUSH
62885: CALL_OW 308
62889: NOT
62890: AND
62891: IFFALSE 62895
// exit ;
62893: GO 63013
// if IsInArea ( unit , area ) then
62895: LD_VAR 0 1
62899: PPUSH
62900: LD_VAR 0 2
62904: PPUSH
62905: CALL_OW 308
62909: IFFALSE 62927
// begin ComMoveToArea ( unit , goAway ) ;
62911: LD_VAR 0 1
62915: PPUSH
62916: LD_VAR 0 3
62920: PPUSH
62921: CALL_OW 113
// exit ;
62925: GO 63013
// end ; if task [ 1 ] [ 1 ] <> M then
62927: LD_VAR 0 7
62931: PUSH
62932: LD_INT 1
62934: ARRAY
62935: PUSH
62936: LD_INT 1
62938: ARRAY
62939: PUSH
62940: LD_STRING M
62942: NONEQUAL
62943: IFFALSE 62947
// exit ;
62945: GO 63013
// x := task [ 1 ] [ 2 ] ;
62947: LD_ADDR_VAR 0 5
62951: PUSH
62952: LD_VAR 0 7
62956: PUSH
62957: LD_INT 1
62959: ARRAY
62960: PUSH
62961: LD_INT 2
62963: ARRAY
62964: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62965: LD_ADDR_VAR 0 6
62969: PUSH
62970: LD_VAR 0 7
62974: PUSH
62975: LD_INT 1
62977: ARRAY
62978: PUSH
62979: LD_INT 3
62981: ARRAY
62982: ST_TO_ADDR
// if InArea ( x , y , area ) then
62983: LD_VAR 0 5
62987: PPUSH
62988: LD_VAR 0 6
62992: PPUSH
62993: LD_VAR 0 2
62997: PPUSH
62998: CALL_OW 309
63002: IFFALSE 63013
// ComStop ( unit ) ;
63004: LD_VAR 0 1
63008: PPUSH
63009: CALL_OW 141
// end ;
63013: LD_VAR 0 4
63017: RET
// export function Abs ( value ) ; begin
63018: LD_INT 0
63020: PPUSH
// result := value ;
63021: LD_ADDR_VAR 0 2
63025: PUSH
63026: LD_VAR 0 1
63030: ST_TO_ADDR
// if value < 0 then
63031: LD_VAR 0 1
63035: PUSH
63036: LD_INT 0
63038: LESS
63039: IFFALSE 63056
// result := value * - 1 ;
63041: LD_ADDR_VAR 0 2
63045: PUSH
63046: LD_VAR 0 1
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: MUL
63055: ST_TO_ADDR
// end ;
63056: LD_VAR 0 2
63060: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63061: LD_INT 0
63063: PPUSH
63064: PPUSH
63065: PPUSH
63066: PPUSH
63067: PPUSH
63068: PPUSH
63069: PPUSH
63070: PPUSH
// if not unit or not building then
63071: LD_VAR 0 1
63075: NOT
63076: PUSH
63077: LD_VAR 0 2
63081: NOT
63082: OR
63083: IFFALSE 63087
// exit ;
63085: GO 63313
// x := GetX ( building ) ;
63087: LD_ADDR_VAR 0 4
63091: PUSH
63092: LD_VAR 0 2
63096: PPUSH
63097: CALL_OW 250
63101: ST_TO_ADDR
// y := GetY ( building ) ;
63102: LD_ADDR_VAR 0 6
63106: PUSH
63107: LD_VAR 0 2
63111: PPUSH
63112: CALL_OW 251
63116: ST_TO_ADDR
// d := GetDir ( building ) ;
63117: LD_ADDR_VAR 0 8
63121: PUSH
63122: LD_VAR 0 2
63126: PPUSH
63127: CALL_OW 254
63131: ST_TO_ADDR
// r := 4 ;
63132: LD_ADDR_VAR 0 9
63136: PUSH
63137: LD_INT 4
63139: ST_TO_ADDR
// for i := 1 to 5 do
63140: LD_ADDR_VAR 0 10
63144: PUSH
63145: DOUBLE
63146: LD_INT 1
63148: DEC
63149: ST_TO_ADDR
63150: LD_INT 5
63152: PUSH
63153: FOR_TO
63154: IFFALSE 63311
// begin _x := ShiftX ( x , d , r + i ) ;
63156: LD_ADDR_VAR 0 5
63160: PUSH
63161: LD_VAR 0 4
63165: PPUSH
63166: LD_VAR 0 8
63170: PPUSH
63171: LD_VAR 0 9
63175: PUSH
63176: LD_VAR 0 10
63180: PLUS
63181: PPUSH
63182: CALL_OW 272
63186: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63187: LD_ADDR_VAR 0 7
63191: PUSH
63192: LD_VAR 0 6
63196: PPUSH
63197: LD_VAR 0 8
63201: PPUSH
63202: LD_VAR 0 9
63206: PUSH
63207: LD_VAR 0 10
63211: PLUS
63212: PPUSH
63213: CALL_OW 273
63217: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63218: LD_VAR 0 5
63222: PPUSH
63223: LD_VAR 0 7
63227: PPUSH
63228: CALL_OW 488
63232: PUSH
63233: LD_VAR 0 5
63237: PPUSH
63238: LD_VAR 0 7
63242: PPUSH
63243: CALL_OW 428
63247: PPUSH
63248: CALL_OW 247
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: IN
63263: NOT
63264: AND
63265: IFFALSE 63309
// begin ComMoveXY ( unit , _x , _y ) ;
63267: LD_VAR 0 1
63271: PPUSH
63272: LD_VAR 0 5
63276: PPUSH
63277: LD_VAR 0 7
63281: PPUSH
63282: CALL_OW 111
// result := [ _x , _y ] ;
63286: LD_ADDR_VAR 0 3
63290: PUSH
63291: LD_VAR 0 5
63295: PUSH
63296: LD_VAR 0 7
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// exit ;
63305: POP
63306: POP
63307: GO 63313
// end ; end ;
63309: GO 63153
63311: POP
63312: POP
// end ;
63313: LD_VAR 0 3
63317: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63318: LD_INT 0
63320: PPUSH
63321: PPUSH
63322: PPUSH
// result := 0 ;
63323: LD_ADDR_VAR 0 3
63327: PUSH
63328: LD_INT 0
63330: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63331: LD_VAR 0 1
63335: PUSH
63336: LD_INT 0
63338: LESS
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_INT 8
63347: GREATER
63348: OR
63349: PUSH
63350: LD_VAR 0 2
63354: PUSH
63355: LD_INT 0
63357: LESS
63358: OR
63359: PUSH
63360: LD_VAR 0 2
63364: PUSH
63365: LD_INT 8
63367: GREATER
63368: OR
63369: IFFALSE 63373
// exit ;
63371: GO 63448
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63373: LD_ADDR_VAR 0 4
63377: PUSH
63378: LD_INT 22
63380: PUSH
63381: LD_VAR 0 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PPUSH
63390: CALL_OW 69
63394: PUSH
63395: FOR_IN
63396: IFFALSE 63446
// begin un := UnitShoot ( i ) ;
63398: LD_ADDR_VAR 0 5
63402: PUSH
63403: LD_VAR 0 4
63407: PPUSH
63408: CALL_OW 504
63412: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63413: LD_VAR 0 5
63417: PPUSH
63418: CALL_OW 255
63422: PUSH
63423: LD_VAR 0 1
63427: EQUAL
63428: IFFALSE 63444
// begin result := un ;
63430: LD_ADDR_VAR 0 3
63434: PUSH
63435: LD_VAR 0 5
63439: ST_TO_ADDR
// exit ;
63440: POP
63441: POP
63442: GO 63448
// end ; end ;
63444: GO 63395
63446: POP
63447: POP
// end ;
63448: LD_VAR 0 3
63452: RET
// export function GetCargoBay ( units ) ; begin
63453: LD_INT 0
63455: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63456: LD_ADDR_VAR 0 2
63460: PUSH
63461: LD_VAR 0 1
63465: PPUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 34
63471: PUSH
63472: LD_INT 12
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 34
63481: PUSH
63482: LD_INT 51
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 34
63491: PUSH
63492: LD_INT 32
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 34
63501: PUSH
63502: LD_EXP 8
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: PPUSH
63518: CALL_OW 72
63522: ST_TO_ADDR
// end ;
63523: LD_VAR 0 2
63527: RET
// export function Negate ( value ) ; begin
63528: LD_INT 0
63530: PPUSH
// result := not value ;
63531: LD_ADDR_VAR 0 2
63535: PUSH
63536: LD_VAR 0 1
63540: NOT
63541: ST_TO_ADDR
// end ;
63542: LD_VAR 0 2
63546: RET
// export function Inc ( value ) ; begin
63547: LD_INT 0
63549: PPUSH
// result := value + 1 ;
63550: LD_ADDR_VAR 0 2
63554: PUSH
63555: LD_VAR 0 1
63559: PUSH
63560: LD_INT 1
63562: PLUS
63563: ST_TO_ADDR
// end ;
63564: LD_VAR 0 2
63568: RET
// export function Dec ( value ) ; begin
63569: LD_INT 0
63571: PPUSH
// result := value - 1 ;
63572: LD_ADDR_VAR 0 2
63576: PUSH
63577: LD_VAR 0 1
63581: PUSH
63582: LD_INT 1
63584: MINUS
63585: ST_TO_ADDR
// end ;
63586: LD_VAR 0 2
63590: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
63595: PPUSH
63596: PPUSH
63597: PPUSH
63598: PPUSH
63599: PPUSH
63600: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63601: LD_VAR 0 1
63605: PPUSH
63606: LD_VAR 0 2
63610: PPUSH
63611: CALL_OW 488
63615: NOT
63616: PUSH
63617: LD_VAR 0 3
63621: PPUSH
63622: LD_VAR 0 4
63626: PPUSH
63627: CALL_OW 488
63631: NOT
63632: OR
63633: IFFALSE 63646
// begin result := - 1 ;
63635: LD_ADDR_VAR 0 5
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: ST_TO_ADDR
// exit ;
63644: GO 63881
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63646: LD_ADDR_VAR 0 12
63650: PUSH
63651: LD_VAR 0 1
63655: PPUSH
63656: LD_VAR 0 2
63660: PPUSH
63661: LD_VAR 0 3
63665: PPUSH
63666: LD_VAR 0 4
63670: PPUSH
63671: CALL 62729 0 4
63675: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63676: LD_ADDR_VAR 0 11
63680: PUSH
63681: LD_VAR 0 1
63685: PPUSH
63686: LD_VAR 0 2
63690: PPUSH
63691: LD_VAR 0 12
63695: PUSH
63696: LD_INT 1
63698: ARRAY
63699: PPUSH
63700: LD_VAR 0 12
63704: PUSH
63705: LD_INT 2
63707: ARRAY
63708: PPUSH
63709: CALL_OW 298
63713: ST_TO_ADDR
// distance := 9999 ;
63714: LD_ADDR_VAR 0 10
63718: PUSH
63719: LD_INT 9999
63721: ST_TO_ADDR
// for i := 0 to 5 do
63722: LD_ADDR_VAR 0 6
63726: PUSH
63727: DOUBLE
63728: LD_INT 0
63730: DEC
63731: ST_TO_ADDR
63732: LD_INT 5
63734: PUSH
63735: FOR_TO
63736: IFFALSE 63879
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63738: LD_ADDR_VAR 0 7
63742: PUSH
63743: LD_VAR 0 1
63747: PPUSH
63748: LD_VAR 0 6
63752: PPUSH
63753: LD_VAR 0 11
63757: PPUSH
63758: CALL_OW 272
63762: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63763: LD_ADDR_VAR 0 8
63767: PUSH
63768: LD_VAR 0 2
63772: PPUSH
63773: LD_VAR 0 6
63777: PPUSH
63778: LD_VAR 0 11
63782: PPUSH
63783: CALL_OW 273
63787: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63788: LD_VAR 0 7
63792: PPUSH
63793: LD_VAR 0 8
63797: PPUSH
63798: CALL_OW 488
63802: NOT
63803: IFFALSE 63807
// continue ;
63805: GO 63735
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63807: LD_ADDR_VAR 0 9
63811: PUSH
63812: LD_VAR 0 12
63816: PUSH
63817: LD_INT 1
63819: ARRAY
63820: PPUSH
63821: LD_VAR 0 12
63825: PUSH
63826: LD_INT 2
63828: ARRAY
63829: PPUSH
63830: LD_VAR 0 7
63834: PPUSH
63835: LD_VAR 0 8
63839: PPUSH
63840: CALL_OW 298
63844: ST_TO_ADDR
// if tmp < distance then
63845: LD_VAR 0 9
63849: PUSH
63850: LD_VAR 0 10
63854: LESS
63855: IFFALSE 63877
// begin result := i ;
63857: LD_ADDR_VAR 0 5
63861: PUSH
63862: LD_VAR 0 6
63866: ST_TO_ADDR
// distance := tmp ;
63867: LD_ADDR_VAR 0 10
63871: PUSH
63872: LD_VAR 0 9
63876: ST_TO_ADDR
// end ; end ;
63877: GO 63735
63879: POP
63880: POP
// end ;
63881: LD_VAR 0 5
63885: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63886: LD_INT 0
63888: PPUSH
63889: PPUSH
// if not driver or not IsInUnit ( driver ) then
63890: LD_VAR 0 1
63894: NOT
63895: PUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: CALL_OW 310
63905: NOT
63906: OR
63907: IFFALSE 63911
// exit ;
63909: GO 64001
// vehicle := IsInUnit ( driver ) ;
63911: LD_ADDR_VAR 0 3
63915: PUSH
63916: LD_VAR 0 1
63920: PPUSH
63921: CALL_OW 310
63925: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63926: LD_VAR 0 1
63930: PPUSH
63931: LD_STRING \
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: LD_STRING E
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: LD_VAR 0 3
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PPUSH
63997: CALL_OW 446
// end ;
64001: LD_VAR 0 2
64005: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64006: LD_INT 0
64008: PPUSH
64009: PPUSH
// if not driver or not IsInUnit ( driver ) then
64010: LD_VAR 0 1
64014: NOT
64015: PUSH
64016: LD_VAR 0 1
64020: PPUSH
64021: CALL_OW 310
64025: NOT
64026: OR
64027: IFFALSE 64031
// exit ;
64029: GO 64121
// vehicle := IsInUnit ( driver ) ;
64031: LD_ADDR_VAR 0 3
64035: PUSH
64036: LD_VAR 0 1
64040: PPUSH
64041: CALL_OW 310
64045: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64046: LD_VAR 0 1
64050: PPUSH
64051: LD_STRING \
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_STRING E
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_VAR 0 3
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PPUSH
64117: CALL_OW 447
// end ;
64121: LD_VAR 0 2
64125: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64126: LD_INT 0
64128: PPUSH
64129: PPUSH
64130: PPUSH
// tmp := [ ] ;
64131: LD_ADDR_VAR 0 5
64135: PUSH
64136: EMPTY
64137: ST_TO_ADDR
// for i in units do
64138: LD_ADDR_VAR 0 4
64142: PUSH
64143: LD_VAR 0 1
64147: PUSH
64148: FOR_IN
64149: IFFALSE 64187
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64151: LD_ADDR_VAR 0 5
64155: PUSH
64156: LD_VAR 0 5
64160: PPUSH
64161: LD_VAR 0 5
64165: PUSH
64166: LD_INT 1
64168: PLUS
64169: PPUSH
64170: LD_VAR 0 4
64174: PPUSH
64175: CALL_OW 256
64179: PPUSH
64180: CALL_OW 2
64184: ST_TO_ADDR
64185: GO 64148
64187: POP
64188: POP
// if not tmp then
64189: LD_VAR 0 5
64193: NOT
64194: IFFALSE 64198
// exit ;
64196: GO 64246
// if asc then
64198: LD_VAR 0 2
64202: IFFALSE 64226
// result := SortListByListAsc ( units , tmp ) else
64204: LD_ADDR_VAR 0 3
64208: PUSH
64209: LD_VAR 0 1
64213: PPUSH
64214: LD_VAR 0 5
64218: PPUSH
64219: CALL_OW 76
64223: ST_TO_ADDR
64224: GO 64246
// result := SortListByListDesc ( units , tmp ) ;
64226: LD_ADDR_VAR 0 3
64230: PUSH
64231: LD_VAR 0 1
64235: PPUSH
64236: LD_VAR 0 5
64240: PPUSH
64241: CALL_OW 77
64245: ST_TO_ADDR
// end ;
64246: LD_VAR 0 3
64250: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64251: LD_INT 0
64253: PPUSH
64254: PPUSH
// task := GetTaskList ( mech ) ;
64255: LD_ADDR_VAR 0 4
64259: PUSH
64260: LD_VAR 0 1
64264: PPUSH
64265: CALL_OW 437
64269: ST_TO_ADDR
// if not task then
64270: LD_VAR 0 4
64274: NOT
64275: IFFALSE 64279
// exit ;
64277: GO 64321
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64279: LD_ADDR_VAR 0 3
64283: PUSH
64284: LD_VAR 0 4
64288: PUSH
64289: LD_INT 1
64291: ARRAY
64292: PUSH
64293: LD_INT 1
64295: ARRAY
64296: PUSH
64297: LD_STRING r
64299: EQUAL
64300: PUSH
64301: LD_VAR 0 4
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PUSH
64310: LD_INT 4
64312: ARRAY
64313: PUSH
64314: LD_VAR 0 2
64318: EQUAL
64319: AND
64320: ST_TO_ADDR
// end ;
64321: LD_VAR 0 3
64325: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64326: LD_INT 0
64328: PPUSH
// SetDir ( unit , d ) ;
64329: LD_VAR 0 1
64333: PPUSH
64334: LD_VAR 0 4
64338: PPUSH
64339: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64343: LD_VAR 0 1
64347: PPUSH
64348: LD_VAR 0 2
64352: PPUSH
64353: LD_VAR 0 3
64357: PPUSH
64358: LD_VAR 0 5
64362: PPUSH
64363: CALL_OW 48
// end ;
64367: LD_VAR 0 6
64371: RET
// export function ToNaturalNumber ( number ) ; begin
64372: LD_INT 0
64374: PPUSH
// result := number div 1 ;
64375: LD_ADDR_VAR 0 2
64379: PUSH
64380: LD_VAR 0 1
64384: PUSH
64385: LD_INT 1
64387: DIV
64388: ST_TO_ADDR
// if number < 0 then
64389: LD_VAR 0 1
64393: PUSH
64394: LD_INT 0
64396: LESS
64397: IFFALSE 64407
// result := 0 ;
64399: LD_ADDR_VAR 0 2
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
// end ;
64407: LD_VAR 0 2
64411: RET
// export function SortByClass ( units , class ) ; var un ; begin
64412: LD_INT 0
64414: PPUSH
64415: PPUSH
// if not units or not class then
64416: LD_VAR 0 1
64420: NOT
64421: PUSH
64422: LD_VAR 0 2
64426: NOT
64427: OR
64428: IFFALSE 64432
// exit ;
64430: GO 64527
// result := [ ] ;
64432: LD_ADDR_VAR 0 3
64436: PUSH
64437: EMPTY
64438: ST_TO_ADDR
// for un in units do
64439: LD_ADDR_VAR 0 4
64443: PUSH
64444: LD_VAR 0 1
64448: PUSH
64449: FOR_IN
64450: IFFALSE 64525
// if GetClass ( un ) = class then
64452: LD_VAR 0 4
64456: PPUSH
64457: CALL_OW 257
64461: PUSH
64462: LD_VAR 0 2
64466: EQUAL
64467: IFFALSE 64494
// result := Insert ( result , 1 , un ) else
64469: LD_ADDR_VAR 0 3
64473: PUSH
64474: LD_VAR 0 3
64478: PPUSH
64479: LD_INT 1
64481: PPUSH
64482: LD_VAR 0 4
64486: PPUSH
64487: CALL_OW 2
64491: ST_TO_ADDR
64492: GO 64523
// result := Replace ( result , result + 1 , un ) ;
64494: LD_ADDR_VAR 0 3
64498: PUSH
64499: LD_VAR 0 3
64503: PPUSH
64504: LD_VAR 0 3
64508: PUSH
64509: LD_INT 1
64511: PLUS
64512: PPUSH
64513: LD_VAR 0 4
64517: PPUSH
64518: CALL_OW 1
64522: ST_TO_ADDR
64523: GO 64449
64525: POP
64526: POP
// end ;
64527: LD_VAR 0 3
64531: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64532: LD_INT 0
64534: PPUSH
64535: PPUSH
64536: PPUSH
64537: PPUSH
64538: PPUSH
64539: PPUSH
64540: PPUSH
// result := [ ] ;
64541: LD_ADDR_VAR 0 4
64545: PUSH
64546: EMPTY
64547: ST_TO_ADDR
// if x - r < 0 then
64548: LD_VAR 0 1
64552: PUSH
64553: LD_VAR 0 3
64557: MINUS
64558: PUSH
64559: LD_INT 0
64561: LESS
64562: IFFALSE 64574
// min_x := 0 else
64564: LD_ADDR_VAR 0 8
64568: PUSH
64569: LD_INT 0
64571: ST_TO_ADDR
64572: GO 64590
// min_x := x - r ;
64574: LD_ADDR_VAR 0 8
64578: PUSH
64579: LD_VAR 0 1
64583: PUSH
64584: LD_VAR 0 3
64588: MINUS
64589: ST_TO_ADDR
// if y - r < 0 then
64590: LD_VAR 0 2
64594: PUSH
64595: LD_VAR 0 3
64599: MINUS
64600: PUSH
64601: LD_INT 0
64603: LESS
64604: IFFALSE 64616
// min_y := 0 else
64606: LD_ADDR_VAR 0 7
64610: PUSH
64611: LD_INT 0
64613: ST_TO_ADDR
64614: GO 64632
// min_y := y - r ;
64616: LD_ADDR_VAR 0 7
64620: PUSH
64621: LD_VAR 0 2
64625: PUSH
64626: LD_VAR 0 3
64630: MINUS
64631: ST_TO_ADDR
// max_x := x + r ;
64632: LD_ADDR_VAR 0 9
64636: PUSH
64637: LD_VAR 0 1
64641: PUSH
64642: LD_VAR 0 3
64646: PLUS
64647: ST_TO_ADDR
// max_y := y + r ;
64648: LD_ADDR_VAR 0 10
64652: PUSH
64653: LD_VAR 0 2
64657: PUSH
64658: LD_VAR 0 3
64662: PLUS
64663: ST_TO_ADDR
// for _x = min_x to max_x do
64664: LD_ADDR_VAR 0 5
64668: PUSH
64669: DOUBLE
64670: LD_VAR 0 8
64674: DEC
64675: ST_TO_ADDR
64676: LD_VAR 0 9
64680: PUSH
64681: FOR_TO
64682: IFFALSE 64783
// for _y = min_y to max_y do
64684: LD_ADDR_VAR 0 6
64688: PUSH
64689: DOUBLE
64690: LD_VAR 0 7
64694: DEC
64695: ST_TO_ADDR
64696: LD_VAR 0 10
64700: PUSH
64701: FOR_TO
64702: IFFALSE 64779
// begin if not ValidHex ( _x , _y ) then
64704: LD_VAR 0 5
64708: PPUSH
64709: LD_VAR 0 6
64713: PPUSH
64714: CALL_OW 488
64718: NOT
64719: IFFALSE 64723
// continue ;
64721: GO 64701
// if GetResourceTypeXY ( _x , _y ) then
64723: LD_VAR 0 5
64727: PPUSH
64728: LD_VAR 0 6
64732: PPUSH
64733: CALL_OW 283
64737: IFFALSE 64777
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64739: LD_ADDR_VAR 0 4
64743: PUSH
64744: LD_VAR 0 4
64748: PPUSH
64749: LD_VAR 0 4
64753: PUSH
64754: LD_INT 1
64756: PLUS
64757: PPUSH
64758: LD_VAR 0 5
64762: PUSH
64763: LD_VAR 0 6
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PPUSH
64772: CALL_OW 1
64776: ST_TO_ADDR
// end ;
64777: GO 64701
64779: POP
64780: POP
64781: GO 64681
64783: POP
64784: POP
// end ;
64785: LD_VAR 0 4
64789: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64790: LD_INT 0
64792: PPUSH
64793: PPUSH
64794: PPUSH
64795: PPUSH
64796: PPUSH
64797: PPUSH
64798: PPUSH
64799: PPUSH
// if not units then
64800: LD_VAR 0 1
64804: NOT
64805: IFFALSE 64809
// exit ;
64807: GO 65335
// result := UnitFilter ( units , [ f_ok ] ) ;
64809: LD_ADDR_VAR 0 3
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_INT 50
64821: PUSH
64822: EMPTY
64823: LIST
64824: PPUSH
64825: CALL_OW 72
64829: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64830: LD_ADDR_VAR 0 8
64834: PUSH
64835: LD_VAR 0 1
64839: PUSH
64840: LD_INT 1
64842: ARRAY
64843: PPUSH
64844: CALL_OW 255
64848: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64849: LD_ADDR_VAR 0 10
64853: PUSH
64854: LD_INT 29
64856: PUSH
64857: LD_EXP 11
64861: PUSH
64862: LD_INT 49
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: ST_TO_ADDR
// if not result then
64870: LD_VAR 0 3
64874: NOT
64875: IFFALSE 64879
// exit ;
64877: GO 65335
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64879: LD_ADDR_VAR 0 5
64883: PUSH
64884: LD_INT 81
64886: PUSH
64887: LD_VAR 0 8
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PPUSH
64896: CALL_OW 69
64900: ST_TO_ADDR
// for i in result do
64901: LD_ADDR_VAR 0 4
64905: PUSH
64906: LD_VAR 0 3
64910: PUSH
64911: FOR_IN
64912: IFFALSE 65333
// begin tag := GetTag ( i ) + 1 ;
64914: LD_ADDR_VAR 0 9
64918: PUSH
64919: LD_VAR 0 4
64923: PPUSH
64924: CALL_OW 110
64928: PUSH
64929: LD_INT 1
64931: PLUS
64932: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64933: LD_ADDR_VAR 0 7
64937: PUSH
64938: LD_VAR 0 4
64942: PPUSH
64943: CALL_OW 250
64947: PPUSH
64948: LD_VAR 0 4
64952: PPUSH
64953: CALL_OW 251
64957: PPUSH
64958: LD_INT 6
64960: PPUSH
64961: CALL 64532 0 3
64965: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64966: LD_VAR 0 4
64970: PPUSH
64971: CALL_OW 247
64975: PUSH
64976: LD_INT 2
64978: EQUAL
64979: PUSH
64980: LD_VAR 0 7
64984: AND
64985: PUSH
64986: LD_VAR 0 4
64990: PPUSH
64991: CALL_OW 264
64995: PUSH
64996: LD_VAR 0 10
65000: IN
65001: NOT
65002: AND
65003: IFFALSE 65042
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65005: LD_VAR 0 4
65009: PPUSH
65010: LD_VAR 0 7
65014: PUSH
65015: LD_INT 1
65017: ARRAY
65018: PUSH
65019: LD_INT 1
65021: ARRAY
65022: PPUSH
65023: LD_VAR 0 7
65027: PUSH
65028: LD_INT 1
65030: ARRAY
65031: PUSH
65032: LD_INT 2
65034: ARRAY
65035: PPUSH
65036: CALL_OW 116
65040: GO 65331
// if path > tag then
65042: LD_VAR 0 2
65046: PUSH
65047: LD_VAR 0 9
65051: GREATER
65052: IFFALSE 65260
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65054: LD_ADDR_VAR 0 6
65058: PUSH
65059: LD_VAR 0 5
65063: PPUSH
65064: LD_INT 91
65066: PUSH
65067: LD_VAR 0 4
65071: PUSH
65072: LD_INT 8
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: PPUSH
65080: CALL_OW 72
65084: ST_TO_ADDR
// if nearEnemy then
65085: LD_VAR 0 6
65089: IFFALSE 65158
// begin if GetWeapon ( i ) = ru_time_lapser then
65091: LD_VAR 0 4
65095: PPUSH
65096: CALL_OW 264
65100: PUSH
65101: LD_INT 49
65103: EQUAL
65104: IFFALSE 65132
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65106: LD_VAR 0 4
65110: PPUSH
65111: LD_VAR 0 6
65115: PPUSH
65116: LD_VAR 0 4
65120: PPUSH
65121: CALL_OW 74
65125: PPUSH
65126: CALL_OW 112
65130: GO 65156
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65132: LD_VAR 0 4
65136: PPUSH
65137: LD_VAR 0 6
65141: PPUSH
65142: LD_VAR 0 4
65146: PPUSH
65147: CALL_OW 74
65151: PPUSH
65152: CALL_OW 115
// end else
65156: GO 65258
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65158: LD_VAR 0 4
65162: PPUSH
65163: LD_VAR 0 2
65167: PUSH
65168: LD_VAR 0 9
65172: ARRAY
65173: PUSH
65174: LD_INT 1
65176: ARRAY
65177: PPUSH
65178: LD_VAR 0 2
65182: PUSH
65183: LD_VAR 0 9
65187: ARRAY
65188: PUSH
65189: LD_INT 2
65191: ARRAY
65192: PPUSH
65193: CALL_OW 297
65197: PUSH
65198: LD_INT 6
65200: GREATER
65201: IFFALSE 65244
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65203: LD_VAR 0 4
65207: PPUSH
65208: LD_VAR 0 2
65212: PUSH
65213: LD_VAR 0 9
65217: ARRAY
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PPUSH
65223: LD_VAR 0 2
65227: PUSH
65228: LD_VAR 0 9
65232: ARRAY
65233: PUSH
65234: LD_INT 2
65236: ARRAY
65237: PPUSH
65238: CALL_OW 114
65242: GO 65258
// SetTag ( i , tag ) ;
65244: LD_VAR 0 4
65248: PPUSH
65249: LD_VAR 0 9
65253: PPUSH
65254: CALL_OW 109
// end else
65258: GO 65331
// if enemy then
65260: LD_VAR 0 5
65264: IFFALSE 65331
// begin if GetWeapon ( i ) = ru_time_lapser then
65266: LD_VAR 0 4
65270: PPUSH
65271: CALL_OW 264
65275: PUSH
65276: LD_INT 49
65278: EQUAL
65279: IFFALSE 65307
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65281: LD_VAR 0 4
65285: PPUSH
65286: LD_VAR 0 5
65290: PPUSH
65291: LD_VAR 0 4
65295: PPUSH
65296: CALL_OW 74
65300: PPUSH
65301: CALL_OW 112
65305: GO 65331
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65307: LD_VAR 0 4
65311: PPUSH
65312: LD_VAR 0 5
65316: PPUSH
65317: LD_VAR 0 4
65321: PPUSH
65322: CALL_OW 74
65326: PPUSH
65327: CALL_OW 115
// end ; end ;
65331: GO 64911
65333: POP
65334: POP
// end ;
65335: LD_VAR 0 3
65339: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65340: LD_INT 0
65342: PPUSH
65343: PPUSH
65344: PPUSH
// if not unit or IsInUnit ( unit ) then
65345: LD_VAR 0 1
65349: NOT
65350: PUSH
65351: LD_VAR 0 1
65355: PPUSH
65356: CALL_OW 310
65360: OR
65361: IFFALSE 65365
// exit ;
65363: GO 65456
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65365: LD_ADDR_VAR 0 4
65369: PUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 250
65379: PPUSH
65380: LD_VAR 0 2
65384: PPUSH
65385: LD_INT 1
65387: PPUSH
65388: CALL_OW 272
65392: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65393: LD_ADDR_VAR 0 5
65397: PUSH
65398: LD_VAR 0 1
65402: PPUSH
65403: CALL_OW 251
65407: PPUSH
65408: LD_VAR 0 2
65412: PPUSH
65413: LD_INT 1
65415: PPUSH
65416: CALL_OW 273
65420: ST_TO_ADDR
// if ValidHex ( x , y ) then
65421: LD_VAR 0 4
65425: PPUSH
65426: LD_VAR 0 5
65430: PPUSH
65431: CALL_OW 488
65435: IFFALSE 65456
// ComTurnXY ( unit , x , y ) ;
65437: LD_VAR 0 1
65441: PPUSH
65442: LD_VAR 0 4
65446: PPUSH
65447: LD_VAR 0 5
65451: PPUSH
65452: CALL_OW 118
// end ;
65456: LD_VAR 0 3
65460: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65461: LD_INT 0
65463: PPUSH
65464: PPUSH
// result := false ;
65465: LD_ADDR_VAR 0 3
65469: PUSH
65470: LD_INT 0
65472: ST_TO_ADDR
// if not units then
65473: LD_VAR 0 2
65477: NOT
65478: IFFALSE 65482
// exit ;
65480: GO 65527
// for i in units do
65482: LD_ADDR_VAR 0 4
65486: PUSH
65487: LD_VAR 0 2
65491: PUSH
65492: FOR_IN
65493: IFFALSE 65525
// if See ( side , i ) then
65495: LD_VAR 0 1
65499: PPUSH
65500: LD_VAR 0 4
65504: PPUSH
65505: CALL_OW 292
65509: IFFALSE 65523
// begin result := true ;
65511: LD_ADDR_VAR 0 3
65515: PUSH
65516: LD_INT 1
65518: ST_TO_ADDR
// exit ;
65519: POP
65520: POP
65521: GO 65527
// end ;
65523: GO 65492
65525: POP
65526: POP
// end ;
65527: LD_VAR 0 3
65531: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65532: LD_INT 0
65534: PPUSH
65535: PPUSH
65536: PPUSH
65537: PPUSH
// if not unit or not points then
65538: LD_VAR 0 1
65542: NOT
65543: PUSH
65544: LD_VAR 0 2
65548: NOT
65549: OR
65550: IFFALSE 65554
// exit ;
65552: GO 65644
// dist := 99999 ;
65554: LD_ADDR_VAR 0 5
65558: PUSH
65559: LD_INT 99999
65561: ST_TO_ADDR
// for i in points do
65562: LD_ADDR_VAR 0 4
65566: PUSH
65567: LD_VAR 0 2
65571: PUSH
65572: FOR_IN
65573: IFFALSE 65642
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65575: LD_ADDR_VAR 0 6
65579: PUSH
65580: LD_VAR 0 1
65584: PPUSH
65585: LD_VAR 0 4
65589: PUSH
65590: LD_INT 1
65592: ARRAY
65593: PPUSH
65594: LD_VAR 0 4
65598: PUSH
65599: LD_INT 2
65601: ARRAY
65602: PPUSH
65603: CALL_OW 297
65607: ST_TO_ADDR
// if tmpDist < dist then
65608: LD_VAR 0 6
65612: PUSH
65613: LD_VAR 0 5
65617: LESS
65618: IFFALSE 65640
// begin result := i ;
65620: LD_ADDR_VAR 0 3
65624: PUSH
65625: LD_VAR 0 4
65629: ST_TO_ADDR
// dist := tmpDist ;
65630: LD_ADDR_VAR 0 5
65634: PUSH
65635: LD_VAR 0 6
65639: ST_TO_ADDR
// end ; end ;
65640: GO 65572
65642: POP
65643: POP
// end ;
65644: LD_VAR 0 3
65648: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65649: LD_INT 0
65651: PPUSH
// uc_side := side ;
65652: LD_ADDR_OWVAR 20
65656: PUSH
65657: LD_VAR 0 1
65661: ST_TO_ADDR
// uc_nation := 3 ;
65662: LD_ADDR_OWVAR 21
65666: PUSH
65667: LD_INT 3
65669: ST_TO_ADDR
// vc_chassis := 25 ;
65670: LD_ADDR_OWVAR 37
65674: PUSH
65675: LD_INT 25
65677: ST_TO_ADDR
// vc_engine := engine_siberite ;
65678: LD_ADDR_OWVAR 39
65682: PUSH
65683: LD_INT 3
65685: ST_TO_ADDR
// vc_control := control_computer ;
65686: LD_ADDR_OWVAR 38
65690: PUSH
65691: LD_INT 3
65693: ST_TO_ADDR
// vc_weapon := 59 ;
65694: LD_ADDR_OWVAR 40
65698: PUSH
65699: LD_INT 59
65701: ST_TO_ADDR
// result := CreateVehicle ;
65702: LD_ADDR_VAR 0 5
65706: PUSH
65707: CALL_OW 45
65711: ST_TO_ADDR
// SetDir ( result , d ) ;
65712: LD_VAR 0 5
65716: PPUSH
65717: LD_VAR 0 4
65721: PPUSH
65722: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65726: LD_VAR 0 5
65730: PPUSH
65731: LD_VAR 0 2
65735: PPUSH
65736: LD_VAR 0 3
65740: PPUSH
65741: LD_INT 0
65743: PPUSH
65744: CALL_OW 48
// end ;
65748: LD_VAR 0 5
65752: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65753: LD_INT 0
65755: PPUSH
65756: PPUSH
65757: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65758: LD_ADDR_VAR 0 2
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65781: LD_VAR 0 1
65785: NOT
65786: PUSH
65787: LD_VAR 0 1
65791: PPUSH
65792: CALL_OW 264
65796: PUSH
65797: LD_INT 12
65799: PUSH
65800: LD_INT 51
65802: PUSH
65803: LD_INT 32
65805: PUSH
65806: LD_EXP 8
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: IN
65817: NOT
65818: OR
65819: IFFALSE 65823
// exit ;
65821: GO 65921
// for i := 1 to 3 do
65823: LD_ADDR_VAR 0 3
65827: PUSH
65828: DOUBLE
65829: LD_INT 1
65831: DEC
65832: ST_TO_ADDR
65833: LD_INT 3
65835: PUSH
65836: FOR_TO
65837: IFFALSE 65919
// begin tmp := GetCargo ( cargo , i ) ;
65839: LD_ADDR_VAR 0 4
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: LD_VAR 0 3
65853: PPUSH
65854: CALL_OW 289
65858: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65859: LD_ADDR_VAR 0 2
65863: PUSH
65864: LD_VAR 0 2
65868: PPUSH
65869: LD_VAR 0 3
65873: PPUSH
65874: LD_VAR 0 4
65878: PPUSH
65879: CALL_OW 1
65883: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65884: LD_ADDR_VAR 0 2
65888: PUSH
65889: LD_VAR 0 2
65893: PPUSH
65894: LD_INT 4
65896: PPUSH
65897: LD_VAR 0 2
65901: PUSH
65902: LD_INT 4
65904: ARRAY
65905: PUSH
65906: LD_VAR 0 4
65910: PLUS
65911: PPUSH
65912: CALL_OW 1
65916: ST_TO_ADDR
// end ;
65917: GO 65836
65919: POP
65920: POP
// end ;
65921: LD_VAR 0 2
65925: RET
// export function Length ( array ) ; begin
65926: LD_INT 0
65928: PPUSH
// result := array + 0 ;
65929: LD_ADDR_VAR 0 2
65933: PUSH
65934: LD_VAR 0 1
65938: PUSH
65939: LD_INT 0
65941: PLUS
65942: ST_TO_ADDR
// end ;
65943: LD_VAR 0 2
65947: RET
// export function PrepareArray ( array ) ; begin
65948: LD_INT 0
65950: PPUSH
// result := array diff 0 ;
65951: LD_ADDR_VAR 0 2
65955: PUSH
65956: LD_VAR 0 1
65960: PUSH
65961: LD_INT 0
65963: DIFF
65964: ST_TO_ADDR
// if not result [ 1 ] then
65965: LD_VAR 0 2
65969: PUSH
65970: LD_INT 1
65972: ARRAY
65973: NOT
65974: IFFALSE 65994
// result := Delete ( result , 1 ) ;
65976: LD_ADDR_VAR 0 2
65980: PUSH
65981: LD_VAR 0 2
65985: PPUSH
65986: LD_INT 1
65988: PPUSH
65989: CALL_OW 3
65993: ST_TO_ADDR
// end ; end_of_file
65994: LD_VAR 0 2
65998: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65999: LD_VAR 0 1
66003: PUSH
66004: LD_INT 200
66006: DOUBLE
66007: GREATEREQUAL
66008: IFFALSE 66016
66010: LD_INT 299
66012: DOUBLE
66013: LESSEQUAL
66014: IFTRUE 66018
66016: GO 66050
66018: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66019: LD_VAR 0 1
66023: PPUSH
66024: LD_VAR 0 2
66028: PPUSH
66029: LD_VAR 0 3
66033: PPUSH
66034: LD_VAR 0 4
66038: PPUSH
66039: LD_VAR 0 5
66043: PPUSH
66044: CALL 20850 0 5
66048: GO 66127
66050: LD_INT 300
66052: DOUBLE
66053: GREATEREQUAL
66054: IFFALSE 66062
66056: LD_INT 399
66058: DOUBLE
66059: LESSEQUAL
66060: IFTRUE 66064
66062: GO 66126
66064: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66065: LD_VAR 0 1
66069: PPUSH
66070: LD_VAR 0 2
66074: PPUSH
66075: LD_VAR 0 3
66079: PPUSH
66080: LD_VAR 0 4
66084: PPUSH
66085: LD_VAR 0 5
66089: PPUSH
66090: LD_VAR 0 6
66094: PPUSH
66095: LD_VAR 0 7
66099: PPUSH
66100: LD_VAR 0 8
66104: PPUSH
66105: LD_VAR 0 9
66109: PPUSH
66110: LD_VAR 0 10
66114: PPUSH
66115: LD_VAR 0 11
66119: PPUSH
66120: CALL 17179 0 11
66124: GO 66127
66126: POP
// end ;
66127: PPOPN 11
66129: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66130: LD_VAR 0 1
66134: PPUSH
66135: LD_VAR 0 2
66139: PPUSH
66140: LD_VAR 0 3
66144: PPUSH
66145: LD_VAR 0 4
66149: PPUSH
66150: LD_VAR 0 5
66154: PPUSH
66155: CALL 20586 0 5
// end ; end_of_file
66159: PPOPN 5
66161: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66162: LD_VAR 0 1
66166: PPUSH
66167: LD_VAR 0 2
66171: PPUSH
66172: LD_VAR 0 3
66176: PPUSH
66177: LD_VAR 0 4
66181: PPUSH
66182: LD_VAR 0 5
66186: PPUSH
66187: LD_VAR 0 6
66191: PPUSH
66192: CALL 4872 0 6
// end ;
66196: PPOPN 6
66198: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66199: LD_INT 0
66201: PPUSH
// begin if not units then
66202: LD_VAR 0 1
66206: NOT
66207: IFFALSE 66211
// exit ;
66209: GO 66211
// end ;
66211: PPOPN 7
66213: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66214: CALL 4843 0 0
// end ;
66218: PPOPN 1
66220: END
