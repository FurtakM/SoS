// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4269
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4167
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4036
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: PUSH
3936: LD_INT 63
3938: PPUSH
3939: LD_INT 37
3941: PPUSH
3942: CALL_OW 428
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 30
3954: EQUAL
3955: AND
3956: IFFALSE 3962
// ComitSib ;
3958: CALL 2766 0 0
// if Difficulty > 2 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 2
3969: GREATER
3970: IFFALSE 3998
// begin Wait ( 0 0$25 ) ;
3972: LD_INT 875
3974: PPUSH
3975: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PUSH
3989: LD_INT 4
3991: PPUSH
3992: CALL 1355 0 1
3996: ADD
3997: ST_TO_ADDR
// end ; if attackN > 7 then
3998: LD_EXP 6
4002: PUSH
4003: LD_INT 7
4005: GREATER
4006: IFFALSE 4034
// begin Wait ( 0 0$15 ) ;
4008: LD_INT 525
4010: PPUSH
4011: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL 1355 0 1
4032: ADD
4033: ST_TO_ADDR
// end ; end ; 3 :
4034: GO 4167
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4166
4044: POP
// begin pom := pom ^ Attack ( 1 ) ;
4045: LD_ADDR_EXP 4
4049: PUSH
4050: LD_EXP 4
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL 1355 0 1
4062: ADD
4063: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4064: LD_INT 70
4066: PPUSH
4067: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4071: LD_ADDR_EXP 4
4075: PUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL 1355 0 1
4088: ADD
4089: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4090: LD_INT 2100
4092: PPUSH
4093: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4097: LD_ADDR_EXP 4
4101: PUSH
4102: LD_EXP 4
4106: PUSH
4107: LD_INT 3
4109: PPUSH
4110: CALL 1355 0 1
4114: ADD
4115: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4116: LD_ADDR_EXP 4
4120: PUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 5
4128: PPUSH
4129: CALL 1355 0 1
4133: ADD
4134: ST_TO_ADDR
// if attackN > 10 then
4135: LD_EXP 6
4139: PUSH
4140: LD_INT 10
4142: GREATER
4143: IFFALSE 4164
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1355 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ;
4164: GO 4167
4166: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 1
4174: GREATER
4175: PUSH
4176: LD_EXP 6
4180: PUSH
4181: LD_INT 4
4183: MOD
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: AND
4189: IFFALSE 4255
// begin Wait ( 1 1$45 ) ;
4191: LD_INT 3675
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4217: LD_ADDR_EXP 4
4221: PUSH
4222: LD_EXP 4
4226: PUSH
4227: LD_INT 4
4229: PPUSH
4230: CALL 1355 0 1
4234: ADD
4235: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4236: LD_ADDR_EXP 5
4240: PUSH
4241: LD_EXP 5
4245: PUSH
4246: LD_INT 6
4248: PPUSH
4249: CALL 1355 0 1
4253: ADD
4254: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4255: LD_ADDR_EXP 6
4259: PUSH
4260: LD_EXP 6
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: PPOPN 2
4271: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4272: LD_EXP 6
4276: PUSH
4277: LD_INT 10
4279: PUSH
4280: LD_INT 12
4282: PUSH
4283: LD_INT 14
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: GREATEREQUAL
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PUSH
4313: LD_INT 0
4315: EQUAL
4316: AND
4317: IFFALSE 4360
4319: GO 4321
4321: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4322: LD_EXP 2
4326: PPUSH
4327: LD_STRING DDocEnd
4329: PPUSH
4330: CALL_OW 586
// wait ( 0 0$03 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// Query ( QWin ) ;
4341: LD_STRING QWin
4343: PPUSH
4344: CALL_OW 97
// music_nat := 5 ;
4348: LD_ADDR_OWVAR 71
4352: PUSH
4353: LD_INT 5
4355: ST_TO_ADDR
// YouWin ;
4356: CALL_OW 103
// end ; end_of_file
4360: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL 20264 0 1
// if un = brave or un = com then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 1
4377: EQUAL
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: LD_EXP 1
4388: EQUAL
4389: OR
4390: IFFALSE 4411
// begin SayRadioNoFace ( doc , DDocWin ) ;
4392: LD_EXP 2
4396: PPUSH
4397: LD_STRING DDocWin
4399: PPUSH
4400: CALL_OW 586
// YouLost (  ) ;
4404: LD_STRING 
4406: PPUSH
4407: CALL_OW 104
// end ; end ;
4411: PPOPN 1
4413: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL 20360 0 3
// end ;
4433: PPOPN 3
4435: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4436: LD_VAR 0 1
4440: PPUSH
4441: CALL 20368 0 1
// end ;
4445: PPOPN 1
4447: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL 20384 0 2
// end ; end_of_file end_of_file
4462: PPOPN 2
4464: END
// every 0 0$1 do
4465: GO 4467
4467: DISABLE
// begin enable ;
4468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4469: LD_STRING updateTimer(
4471: PUSH
4472: LD_OWVAR 1
4476: STR
4477: PUSH
4478: LD_STRING );
4480: STR
4481: PPUSH
4482: CALL_OW 559
// end ;
4486: END
// export function SOS_MapStart ( ) ; begin
4487: LD_INT 0
4489: PPUSH
// if streamModeActive then
4490: LD_EXP 8
4494: IFFALSE 4503
// DefineStreamItems ( true ) ;
4496: LD_INT 1
4498: PPUSH
4499: CALL 6307 0 1
// UpdateLuaVariables ( ) ;
4503: CALL 4520 0 0
// UpdateFactoryWaypoints ( ) ;
4507: CALL 19168 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4511: CALL 19425 0 0
// end ;
4515: LD_VAR 0 1
4519: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
4520: LD_INT 0
4522: PPUSH
// if not globalGameSaveCounter then
4523: LD_EXP 7
4527: NOT
4528: IFFALSE 4539
// ToLua ( setGameSaveCounter(0) ) else
4530: LD_STRING setGameSaveCounter(0)
4532: PPUSH
4533: CALL_OW 559
4537: GO 4571
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4539: LD_ADDR_EXP 7
4543: PUSH
4544: LD_EXP 7
4548: PPUSH
4549: CALL 63382 0 1
4553: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4554: LD_STRING setGameSaveCounter(
4556: PUSH
4557: LD_EXP 7
4561: STR
4562: PUSH
4563: LD_STRING )
4565: STR
4566: PPUSH
4567: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4571: LD_STRING setGameDifficulty(
4573: PUSH
4574: LD_OWVAR 67
4578: STR
4579: PUSH
4580: LD_STRING )
4582: STR
4583: PPUSH
4584: CALL_OW 559
// end ;
4588: LD_VAR 0 1
4592: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4593: LD_INT 0
4595: PPUSH
// if p2 = stream_mode then
4596: LD_VAR 0 2
4600: PUSH
4601: LD_INT 100
4603: EQUAL
4604: IFFALSE 5607
// begin if not StreamModeActive then
4606: LD_EXP 8
4610: NOT
4611: IFFALSE 4621
// StreamModeActive := true ;
4613: LD_ADDR_EXP 8
4617: PUSH
4618: LD_INT 1
4620: ST_TO_ADDR
// if p3 = 0 then
4621: LD_VAR 0 3
4625: PUSH
4626: LD_INT 0
4628: EQUAL
4629: IFFALSE 4635
// InitStreamMode ;
4631: CALL 5843 0 0
// if p3 = 1 then
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 1
4642: EQUAL
4643: IFFALSE 4653
// sRocket := true ;
4645: LD_ADDR_EXP 13
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// if p3 = 2 then
4653: LD_VAR 0 3
4657: PUSH
4658: LD_INT 2
4660: EQUAL
4661: IFFALSE 4671
// sSpeed := true ;
4663: LD_ADDR_EXP 12
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// if p3 = 3 then
4671: LD_VAR 0 3
4675: PUSH
4676: LD_INT 3
4678: EQUAL
4679: IFFALSE 4689
// sEngine := true ;
4681: LD_ADDR_EXP 14
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// if p3 = 4 then
4689: LD_VAR 0 3
4693: PUSH
4694: LD_INT 4
4696: EQUAL
4697: IFFALSE 4707
// sSpec := true ;
4699: LD_ADDR_EXP 11
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// if p3 = 5 then
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 5
4714: EQUAL
4715: IFFALSE 4725
// sLevel := true ;
4717: LD_ADDR_EXP 15
4721: PUSH
4722: LD_INT 1
4724: ST_TO_ADDR
// if p3 = 6 then
4725: LD_VAR 0 3
4729: PUSH
4730: LD_INT 6
4732: EQUAL
4733: IFFALSE 4743
// sArmoury := true ;
4735: LD_ADDR_EXP 16
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// if p3 = 7 then
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 7
4750: EQUAL
4751: IFFALSE 4761
// sRadar := true ;
4753: LD_ADDR_EXP 17
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// if p3 = 8 then
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 8
4768: EQUAL
4769: IFFALSE 4779
// sBunker := true ;
4771: LD_ADDR_EXP 18
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// if p3 = 9 then
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 9
4786: EQUAL
4787: IFFALSE 4797
// sHack := true ;
4789: LD_ADDR_EXP 19
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if p3 = 10 then
4797: LD_VAR 0 3
4801: PUSH
4802: LD_INT 10
4804: EQUAL
4805: IFFALSE 4815
// sFire := true ;
4807: LD_ADDR_EXP 20
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// if p3 = 11 then
4815: LD_VAR 0 3
4819: PUSH
4820: LD_INT 11
4822: EQUAL
4823: IFFALSE 4833
// sRefresh := true ;
4825: LD_ADDR_EXP 21
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// if p3 = 12 then
4833: LD_VAR 0 3
4837: PUSH
4838: LD_INT 12
4840: EQUAL
4841: IFFALSE 4851
// sExp := true ;
4843: LD_ADDR_EXP 22
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if p3 = 13 then
4851: LD_VAR 0 3
4855: PUSH
4856: LD_INT 13
4858: EQUAL
4859: IFFALSE 4869
// sDepot := true ;
4861: LD_ADDR_EXP 23
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// if p3 = 14 then
4869: LD_VAR 0 3
4873: PUSH
4874: LD_INT 14
4876: EQUAL
4877: IFFALSE 4887
// sFlag := true ;
4879: LD_ADDR_EXP 24
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// if p3 = 15 then
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 15
4894: EQUAL
4895: IFFALSE 4905
// sKamikadze := true ;
4897: LD_ADDR_EXP 32
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// if p3 = 16 then
4905: LD_VAR 0 3
4909: PUSH
4910: LD_INT 16
4912: EQUAL
4913: IFFALSE 4923
// sTroll := true ;
4915: LD_ADDR_EXP 33
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// if p3 = 17 then
4923: LD_VAR 0 3
4927: PUSH
4928: LD_INT 17
4930: EQUAL
4931: IFFALSE 4941
// sSlow := true ;
4933: LD_ADDR_EXP 34
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// if p3 = 18 then
4941: LD_VAR 0 3
4945: PUSH
4946: LD_INT 18
4948: EQUAL
4949: IFFALSE 4959
// sLack := true ;
4951: LD_ADDR_EXP 35
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// if p3 = 19 then
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 19
4966: EQUAL
4967: IFFALSE 4977
// sTank := true ;
4969: LD_ADDR_EXP 37
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if p3 = 20 then
4977: LD_VAR 0 3
4981: PUSH
4982: LD_INT 20
4984: EQUAL
4985: IFFALSE 4995
// sRemote := true ;
4987: LD_ADDR_EXP 38
4991: PUSH
4992: LD_INT 1
4994: ST_TO_ADDR
// if p3 = 21 then
4995: LD_VAR 0 3
4999: PUSH
5000: LD_INT 21
5002: EQUAL
5003: IFFALSE 5013
// sPowell := true ;
5005: LD_ADDR_EXP 39
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// if p3 = 22 then
5013: LD_VAR 0 3
5017: PUSH
5018: LD_INT 22
5020: EQUAL
5021: IFFALSE 5031
// sTeleport := true ;
5023: LD_ADDR_EXP 42
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// if p3 = 23 then
5031: LD_VAR 0 3
5035: PUSH
5036: LD_INT 23
5038: EQUAL
5039: IFFALSE 5049
// sOilTower := true ;
5041: LD_ADDR_EXP 44
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if p3 = 24 then
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 24
5056: EQUAL
5057: IFFALSE 5067
// sShovel := true ;
5059: LD_ADDR_EXP 45
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// if p3 = 25 then
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 25
5074: EQUAL
5075: IFFALSE 5085
// sSheik := true ;
5077: LD_ADDR_EXP 46
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// if p3 = 26 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 26
5092: EQUAL
5093: IFFALSE 5103
// sEarthquake := true ;
5095: LD_ADDR_EXP 48
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// if p3 = 27 then
5103: LD_VAR 0 3
5107: PUSH
5108: LD_INT 27
5110: EQUAL
5111: IFFALSE 5121
// sAI := true ;
5113: LD_ADDR_EXP 49
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if p3 = 28 then
5121: LD_VAR 0 3
5125: PUSH
5126: LD_INT 28
5128: EQUAL
5129: IFFALSE 5139
// sCargo := true ;
5131: LD_ADDR_EXP 52
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// if p3 = 29 then
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 29
5146: EQUAL
5147: IFFALSE 5157
// sDLaser := true ;
5149: LD_ADDR_EXP 53
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// if p3 = 30 then
5157: LD_VAR 0 3
5161: PUSH
5162: LD_INT 30
5164: EQUAL
5165: IFFALSE 5175
// sExchange := true ;
5167: LD_ADDR_EXP 54
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if p3 = 31 then
5175: LD_VAR 0 3
5179: PUSH
5180: LD_INT 31
5182: EQUAL
5183: IFFALSE 5193
// sFac := true ;
5185: LD_ADDR_EXP 55
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// if p3 = 32 then
5193: LD_VAR 0 3
5197: PUSH
5198: LD_INT 32
5200: EQUAL
5201: IFFALSE 5211
// sPower := true ;
5203: LD_ADDR_EXP 56
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// if p3 = 33 then
5211: LD_VAR 0 3
5215: PUSH
5216: LD_INT 33
5218: EQUAL
5219: IFFALSE 5229
// sRandom := true ;
5221: LD_ADDR_EXP 57
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// if p3 = 34 then
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 34
5236: EQUAL
5237: IFFALSE 5247
// sShield := true ;
5239: LD_ADDR_EXP 58
5243: PUSH
5244: LD_INT 1
5246: ST_TO_ADDR
// if p3 = 35 then
5247: LD_VAR 0 3
5251: PUSH
5252: LD_INT 35
5254: EQUAL
5255: IFFALSE 5265
// sTime := true ;
5257: LD_ADDR_EXP 59
5261: PUSH
5262: LD_INT 1
5264: ST_TO_ADDR
// if p3 = 36 then
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 36
5272: EQUAL
5273: IFFALSE 5283
// sTools := true ;
5275: LD_ADDR_EXP 60
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// if p3 = 101 then
5283: LD_VAR 0 3
5287: PUSH
5288: LD_INT 101
5290: EQUAL
5291: IFFALSE 5301
// sSold := true ;
5293: LD_ADDR_EXP 25
5297: PUSH
5298: LD_INT 1
5300: ST_TO_ADDR
// if p3 = 102 then
5301: LD_VAR 0 3
5305: PUSH
5306: LD_INT 102
5308: EQUAL
5309: IFFALSE 5319
// sDiff := true ;
5311: LD_ADDR_EXP 26
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// if p3 = 103 then
5319: LD_VAR 0 3
5323: PUSH
5324: LD_INT 103
5326: EQUAL
5327: IFFALSE 5337
// sFog := true ;
5329: LD_ADDR_EXP 29
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// if p3 = 104 then
5337: LD_VAR 0 3
5341: PUSH
5342: LD_INT 104
5344: EQUAL
5345: IFFALSE 5355
// sReset := true ;
5347: LD_ADDR_EXP 30
5351: PUSH
5352: LD_INT 1
5354: ST_TO_ADDR
// if p3 = 105 then
5355: LD_VAR 0 3
5359: PUSH
5360: LD_INT 105
5362: EQUAL
5363: IFFALSE 5373
// sSun := true ;
5365: LD_ADDR_EXP 31
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// if p3 = 106 then
5373: LD_VAR 0 3
5377: PUSH
5378: LD_INT 106
5380: EQUAL
5381: IFFALSE 5391
// sTiger := true ;
5383: LD_ADDR_EXP 27
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// if p3 = 107 then
5391: LD_VAR 0 3
5395: PUSH
5396: LD_INT 107
5398: EQUAL
5399: IFFALSE 5409
// sBomb := true ;
5401: LD_ADDR_EXP 28
5405: PUSH
5406: LD_INT 1
5408: ST_TO_ADDR
// if p3 = 108 then
5409: LD_VAR 0 3
5413: PUSH
5414: LD_INT 108
5416: EQUAL
5417: IFFALSE 5427
// sWound := true ;
5419: LD_ADDR_EXP 36
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// if p3 = 109 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_INT 109
5434: EQUAL
5435: IFFALSE 5445
// sBetray := true ;
5437: LD_ADDR_EXP 40
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
// if p3 = 110 then
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 110
5452: EQUAL
5453: IFFALSE 5463
// sContamin := true ;
5455: LD_ADDR_EXP 41
5459: PUSH
5460: LD_INT 1
5462: ST_TO_ADDR
// if p3 = 111 then
5463: LD_VAR 0 3
5467: PUSH
5468: LD_INT 111
5470: EQUAL
5471: IFFALSE 5481
// sOil := true ;
5473: LD_ADDR_EXP 43
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// if p3 = 112 then
5481: LD_VAR 0 3
5485: PUSH
5486: LD_INT 112
5488: EQUAL
5489: IFFALSE 5499
// sStu := true ;
5491: LD_ADDR_EXP 47
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// if p3 = 113 then
5499: LD_VAR 0 3
5503: PUSH
5504: LD_INT 113
5506: EQUAL
5507: IFFALSE 5517
// sBazooka := true ;
5509: LD_ADDR_EXP 50
5513: PUSH
5514: LD_INT 1
5516: ST_TO_ADDR
// if p3 = 114 then
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 114
5524: EQUAL
5525: IFFALSE 5535
// sMortar := true ;
5527: LD_ADDR_EXP 51
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// if p3 = 115 then
5535: LD_VAR 0 3
5539: PUSH
5540: LD_INT 115
5542: EQUAL
5543: IFFALSE 5553
// sRanger := true ;
5545: LD_ADDR_EXP 61
5549: PUSH
5550: LD_INT 1
5552: ST_TO_ADDR
// if p3 = 116 then
5553: LD_VAR 0 3
5557: PUSH
5558: LD_INT 116
5560: EQUAL
5561: IFFALSE 5571
// sComputer := true ;
5563: LD_ADDR_EXP 62
5567: PUSH
5568: LD_INT 1
5570: ST_TO_ADDR
// if p3 = 117 then
5571: LD_VAR 0 3
5575: PUSH
5576: LD_INT 117
5578: EQUAL
5579: IFFALSE 5589
// s30 := true ;
5581: LD_ADDR_EXP 63
5585: PUSH
5586: LD_INT 1
5588: ST_TO_ADDR
// if p3 = 118 then
5589: LD_VAR 0 3
5593: PUSH
5594: LD_INT 118
5596: EQUAL
5597: IFFALSE 5607
// s60 := true ;
5599: LD_ADDR_EXP 64
5603: PUSH
5604: LD_INT 1
5606: ST_TO_ADDR
// end ; if p2 = hack_mode then
5607: LD_VAR 0 2
5611: PUSH
5612: LD_INT 101
5614: EQUAL
5615: IFFALSE 5743
// begin case p3 of 1 :
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 1
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5630
5628: GO 5637
5630: POP
// hHackUnlimitedResources ; 2 :
5631: CALL 17914 0 0
5635: GO 5743
5637: LD_INT 2
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5645
5643: GO 5652
5645: POP
// hHackSetLevel10 ; 3 :
5646: CALL 18047 0 0
5650: GO 5743
5652: LD_INT 3
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5667
5660: POP
// hHackSetLevel10YourUnits ; 4 :
5661: CALL 18132 0 0
5665: GO 5743
5667: LD_INT 4
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5682
5675: POP
// hHackInvincible ; 5 :
5676: CALL 18580 0 0
5680: GO 5743
5682: LD_INT 5
5684: DOUBLE
5685: EQUAL
5686: IFTRUE 5690
5688: GO 5697
5690: POP
// hHackInvisible ; 6 :
5691: CALL 18691 0 0
5695: GO 5743
5697: LD_INT 6
5699: DOUBLE
5700: EQUAL
5701: IFTRUE 5705
5703: GO 5712
5705: POP
// hHackChangeYourSide ; 7 :
5706: CALL 18748 0 0
5710: GO 5743
5712: LD_INT 7
5714: DOUBLE
5715: EQUAL
5716: IFTRUE 5720
5718: GO 5727
5720: POP
// hHackChangeUnitSide ; 8 :
5721: CALL 18790 0 0
5725: GO 5743
5727: LD_INT 8
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5742
5735: POP
// hHackFog ; end ;
5736: CALL 18891 0 0
5740: GO 5743
5742: POP
// end ; if p2 = game_save_mode then
5743: LD_VAR 0 2
5747: PUSH
5748: LD_INT 102
5750: EQUAL
5751: IFFALSE 5816
// begin if p3 = 1 then
5753: LD_VAR 0 3
5757: PUSH
5758: LD_INT 1
5760: EQUAL
5761: IFFALSE 5773
// globalGameSaveCounter := p4 ;
5763: LD_ADDR_EXP 7
5767: PUSH
5768: LD_VAR 0 4
5772: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5773: LD_VAR 0 3
5777: PUSH
5778: LD_INT 2
5780: EQUAL
5781: PUSH
5782: LD_EXP 7
5786: AND
5787: IFFALSE 5806
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5789: LD_STRING setGameSaveCounter(
5791: PUSH
5792: LD_EXP 7
5796: STR
5797: PUSH
5798: LD_STRING )
5800: STR
5801: PPUSH
5802: CALL_OW 559
// display_strings := globalGameSaveCounter ;
5806: LD_ADDR_OWVAR 47
5810: PUSH
5811: LD_EXP 7
5815: ST_TO_ADDR
// end ; end ;
5816: LD_VAR 0 7
5820: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5821: GO 5823
5823: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5824: LD_STRING initStreamRollete();
5826: PPUSH
5827: CALL_OW 559
// InitStreamMode ;
5831: CALL 5843 0 0
// DefineStreamItems ( false ) ;
5835: LD_INT 0
5837: PPUSH
5838: CALL 6307 0 1
// end ;
5842: END
// function InitStreamMode ; begin
5843: LD_INT 0
5845: PPUSH
// streamModeActive := false ;
5846: LD_ADDR_EXP 8
5850: PUSH
5851: LD_INT 0
5853: ST_TO_ADDR
// normalCounter := 36 ;
5854: LD_ADDR_EXP 9
5858: PUSH
5859: LD_INT 36
5861: ST_TO_ADDR
// hardcoreCounter := 18 ;
5862: LD_ADDR_EXP 10
5866: PUSH
5867: LD_INT 18
5869: ST_TO_ADDR
// sRocket := false ;
5870: LD_ADDR_EXP 13
5874: PUSH
5875: LD_INT 0
5877: ST_TO_ADDR
// sSpeed := false ;
5878: LD_ADDR_EXP 12
5882: PUSH
5883: LD_INT 0
5885: ST_TO_ADDR
// sEngine := false ;
5886: LD_ADDR_EXP 14
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// sSpec := false ;
5894: LD_ADDR_EXP 11
5898: PUSH
5899: LD_INT 0
5901: ST_TO_ADDR
// sLevel := false ;
5902: LD_ADDR_EXP 15
5906: PUSH
5907: LD_INT 0
5909: ST_TO_ADDR
// sArmoury := false ;
5910: LD_ADDR_EXP 16
5914: PUSH
5915: LD_INT 0
5917: ST_TO_ADDR
// sRadar := false ;
5918: LD_ADDR_EXP 17
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// sBunker := false ;
5926: LD_ADDR_EXP 18
5930: PUSH
5931: LD_INT 0
5933: ST_TO_ADDR
// sHack := false ;
5934: LD_ADDR_EXP 19
5938: PUSH
5939: LD_INT 0
5941: ST_TO_ADDR
// sFire := false ;
5942: LD_ADDR_EXP 20
5946: PUSH
5947: LD_INT 0
5949: ST_TO_ADDR
// sRefresh := false ;
5950: LD_ADDR_EXP 21
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// sExp := false ;
5958: LD_ADDR_EXP 22
5962: PUSH
5963: LD_INT 0
5965: ST_TO_ADDR
// sDepot := false ;
5966: LD_ADDR_EXP 23
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// sFlag := false ;
5974: LD_ADDR_EXP 24
5978: PUSH
5979: LD_INT 0
5981: ST_TO_ADDR
// sKamikadze := false ;
5982: LD_ADDR_EXP 32
5986: PUSH
5987: LD_INT 0
5989: ST_TO_ADDR
// sTroll := false ;
5990: LD_ADDR_EXP 33
5994: PUSH
5995: LD_INT 0
5997: ST_TO_ADDR
// sSlow := false ;
5998: LD_ADDR_EXP 34
6002: PUSH
6003: LD_INT 0
6005: ST_TO_ADDR
// sLack := false ;
6006: LD_ADDR_EXP 35
6010: PUSH
6011: LD_INT 0
6013: ST_TO_ADDR
// sTank := false ;
6014: LD_ADDR_EXP 37
6018: PUSH
6019: LD_INT 0
6021: ST_TO_ADDR
// sRemote := false ;
6022: LD_ADDR_EXP 38
6026: PUSH
6027: LD_INT 0
6029: ST_TO_ADDR
// sPowell := false ;
6030: LD_ADDR_EXP 39
6034: PUSH
6035: LD_INT 0
6037: ST_TO_ADDR
// sTeleport := false ;
6038: LD_ADDR_EXP 42
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// sOilTower := false ;
6046: LD_ADDR_EXP 44
6050: PUSH
6051: LD_INT 0
6053: ST_TO_ADDR
// sShovel := false ;
6054: LD_ADDR_EXP 45
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// sSheik := false ;
6062: LD_ADDR_EXP 46
6066: PUSH
6067: LD_INT 0
6069: ST_TO_ADDR
// sEarthquake := false ;
6070: LD_ADDR_EXP 48
6074: PUSH
6075: LD_INT 0
6077: ST_TO_ADDR
// sAI := false ;
6078: LD_ADDR_EXP 49
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// sCargo := false ;
6086: LD_ADDR_EXP 52
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// sDLaser := false ;
6094: LD_ADDR_EXP 53
6098: PUSH
6099: LD_INT 0
6101: ST_TO_ADDR
// sExchange := false ;
6102: LD_ADDR_EXP 54
6106: PUSH
6107: LD_INT 0
6109: ST_TO_ADDR
// sFac := false ;
6110: LD_ADDR_EXP 55
6114: PUSH
6115: LD_INT 0
6117: ST_TO_ADDR
// sPower := false ;
6118: LD_ADDR_EXP 56
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// sRandom := false ;
6126: LD_ADDR_EXP 57
6130: PUSH
6131: LD_INT 0
6133: ST_TO_ADDR
// sShield := false ;
6134: LD_ADDR_EXP 58
6138: PUSH
6139: LD_INT 0
6141: ST_TO_ADDR
// sTime := false ;
6142: LD_ADDR_EXP 59
6146: PUSH
6147: LD_INT 0
6149: ST_TO_ADDR
// sTools := false ;
6150: LD_ADDR_EXP 60
6154: PUSH
6155: LD_INT 0
6157: ST_TO_ADDR
// sSold := false ;
6158: LD_ADDR_EXP 25
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// sDiff := false ;
6166: LD_ADDR_EXP 26
6170: PUSH
6171: LD_INT 0
6173: ST_TO_ADDR
// sFog := false ;
6174: LD_ADDR_EXP 29
6178: PUSH
6179: LD_INT 0
6181: ST_TO_ADDR
// sReset := false ;
6182: LD_ADDR_EXP 30
6186: PUSH
6187: LD_INT 0
6189: ST_TO_ADDR
// sSun := false ;
6190: LD_ADDR_EXP 31
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// sTiger := false ;
6198: LD_ADDR_EXP 27
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// sBomb := false ;
6206: LD_ADDR_EXP 28
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// sWound := false ;
6214: LD_ADDR_EXP 36
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// sBetray := false ;
6222: LD_ADDR_EXP 40
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sContamin := false ;
6230: LD_ADDR_EXP 41
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sOil := false ;
6238: LD_ADDR_EXP 43
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sStu := false ;
6246: LD_ADDR_EXP 47
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sBazooka := false ;
6254: LD_ADDR_EXP 50
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sMortar := false ;
6262: LD_ADDR_EXP 51
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sRanger := false ;
6270: LD_ADDR_EXP 61
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sComputer := false ;
6278: LD_ADDR_EXP 62
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// s30 := false ;
6286: LD_ADDR_EXP 63
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// s60 := false ;
6294: LD_ADDR_EXP 64
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// end ;
6302: LD_VAR 0 1
6306: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6307: LD_INT 0
6309: PPUSH
6310: PPUSH
6311: PPUSH
6312: PPUSH
6313: PPUSH
6314: PPUSH
6315: PPUSH
// result := [ ] ;
6316: LD_ADDR_VAR 0 2
6320: PUSH
6321: EMPTY
6322: ST_TO_ADDR
// if campaign_id = 1 then
6323: LD_OWVAR 69
6327: PUSH
6328: LD_INT 1
6330: EQUAL
6331: IFFALSE 9497
// begin case mission_number of 1 :
6333: LD_OWVAR 70
6337: PUSH
6338: LD_INT 1
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6422
6346: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 11
6360: PUSH
6361: LD_INT 12
6363: PUSH
6364: LD_INT 15
6366: PUSH
6367: LD_INT 16
6369: PUSH
6370: LD_INT 22
6372: PUSH
6373: LD_INT 23
6375: PUSH
6376: LD_INT 26
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 101
6392: PUSH
6393: LD_INT 102
6395: PUSH
6396: LD_INT 106
6398: PUSH
6399: LD_INT 116
6401: PUSH
6402: LD_INT 117
6404: PUSH
6405: LD_INT 118
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: ST_TO_ADDR
6420: GO 9495
6422: LD_INT 2
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6514
6430: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6431: LD_ADDR_VAR 0 2
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 11
6444: PUSH
6445: LD_INT 12
6447: PUSH
6448: LD_INT 15
6450: PUSH
6451: LD_INT 16
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 23
6459: PUSH
6460: LD_INT 26
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 101
6476: PUSH
6477: LD_INT 102
6479: PUSH
6480: LD_INT 105
6482: PUSH
6483: LD_INT 106
6485: PUSH
6486: LD_INT 108
6488: PUSH
6489: LD_INT 116
6491: PUSH
6492: LD_INT 117
6494: PUSH
6495: LD_INT 118
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: ST_TO_ADDR
6512: GO 9495
6514: LD_INT 3
6516: DOUBLE
6517: EQUAL
6518: IFTRUE 6522
6520: GO 6610
6522: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6523: LD_ADDR_VAR 0 2
6527: PUSH
6528: LD_INT 2
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 11
6539: PUSH
6540: LD_INT 12
6542: PUSH
6543: LD_INT 15
6545: PUSH
6546: LD_INT 16
6548: PUSH
6549: LD_INT 22
6551: PUSH
6552: LD_INT 26
6554: PUSH
6555: LD_INT 36
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 101
6572: PUSH
6573: LD_INT 102
6575: PUSH
6576: LD_INT 105
6578: PUSH
6579: LD_INT 106
6581: PUSH
6582: LD_INT 108
6584: PUSH
6585: LD_INT 116
6587: PUSH
6588: LD_INT 117
6590: PUSH
6591: LD_INT 118
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: ST_TO_ADDR
6608: GO 9495
6610: LD_INT 4
6612: DOUBLE
6613: EQUAL
6614: IFTRUE 6618
6616: GO 6714
6618: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6619: LD_ADDR_VAR 0 2
6623: PUSH
6624: LD_INT 2
6626: PUSH
6627: LD_INT 4
6629: PUSH
6630: LD_INT 5
6632: PUSH
6633: LD_INT 8
6635: PUSH
6636: LD_INT 11
6638: PUSH
6639: LD_INT 12
6641: PUSH
6642: LD_INT 15
6644: PUSH
6645: LD_INT 16
6647: PUSH
6648: LD_INT 22
6650: PUSH
6651: LD_INT 23
6653: PUSH
6654: LD_INT 26
6656: PUSH
6657: LD_INT 36
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 101
6676: PUSH
6677: LD_INT 102
6679: PUSH
6680: LD_INT 105
6682: PUSH
6683: LD_INT 106
6685: PUSH
6686: LD_INT 108
6688: PUSH
6689: LD_INT 116
6691: PUSH
6692: LD_INT 117
6694: PUSH
6695: LD_INT 118
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: ST_TO_ADDR
6712: GO 9495
6714: LD_INT 5
6716: DOUBLE
6717: EQUAL
6718: IFTRUE 6722
6720: GO 6834
6722: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_INT 2
6730: PUSH
6731: LD_INT 4
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: LD_INT 6
6739: PUSH
6740: LD_INT 8
6742: PUSH
6743: LD_INT 11
6745: PUSH
6746: LD_INT 12
6748: PUSH
6749: LD_INT 15
6751: PUSH
6752: LD_INT 16
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_INT 23
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: LD_INT 26
6766: PUSH
6767: LD_INT 36
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 101
6788: PUSH
6789: LD_INT 102
6791: PUSH
6792: LD_INT 105
6794: PUSH
6795: LD_INT 106
6797: PUSH
6798: LD_INT 108
6800: PUSH
6801: LD_INT 109
6803: PUSH
6804: LD_INT 112
6806: PUSH
6807: LD_INT 116
6809: PUSH
6810: LD_INT 117
6812: PUSH
6813: LD_INT 118
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: ST_TO_ADDR
6832: GO 9495
6834: LD_INT 6
6836: DOUBLE
6837: EQUAL
6838: IFTRUE 6842
6840: GO 6974
6842: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6843: LD_ADDR_VAR 0 2
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: LD_INT 4
6853: PUSH
6854: LD_INT 5
6856: PUSH
6857: LD_INT 6
6859: PUSH
6860: LD_INT 8
6862: PUSH
6863: LD_INT 11
6865: PUSH
6866: LD_INT 12
6868: PUSH
6869: LD_INT 15
6871: PUSH
6872: LD_INT 16
6874: PUSH
6875: LD_INT 20
6877: PUSH
6878: LD_INT 21
6880: PUSH
6881: LD_INT 22
6883: PUSH
6884: LD_INT 23
6886: PUSH
6887: LD_INT 25
6889: PUSH
6890: LD_INT 26
6892: PUSH
6893: LD_INT 30
6895: PUSH
6896: LD_INT 31
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: LD_INT 36
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 101
6928: PUSH
6929: LD_INT 102
6931: PUSH
6932: LD_INT 105
6934: PUSH
6935: LD_INT 106
6937: PUSH
6938: LD_INT 108
6940: PUSH
6941: LD_INT 109
6943: PUSH
6944: LD_INT 112
6946: PUSH
6947: LD_INT 116
6949: PUSH
6950: LD_INT 117
6952: PUSH
6953: LD_INT 118
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: ST_TO_ADDR
6972: GO 9495
6974: LD_INT 7
6976: DOUBLE
6977: EQUAL
6978: IFTRUE 6982
6980: GO 7094
6982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6983: LD_ADDR_VAR 0 2
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 4
6993: PUSH
6994: LD_INT 5
6996: PUSH
6997: LD_INT 7
6999: PUSH
7000: LD_INT 11
7002: PUSH
7003: LD_INT 12
7005: PUSH
7006: LD_INT 15
7008: PUSH
7009: LD_INT 16
7011: PUSH
7012: LD_INT 20
7014: PUSH
7015: LD_INT 21
7017: PUSH
7018: LD_INT 22
7020: PUSH
7021: LD_INT 23
7023: PUSH
7024: LD_INT 25
7026: PUSH
7027: LD_INT 26
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 101
7048: PUSH
7049: LD_INT 102
7051: PUSH
7052: LD_INT 103
7054: PUSH
7055: LD_INT 105
7057: PUSH
7058: LD_INT 106
7060: PUSH
7061: LD_INT 108
7063: PUSH
7064: LD_INT 112
7066: PUSH
7067: LD_INT 116
7069: PUSH
7070: LD_INT 117
7072: PUSH
7073: LD_INT 118
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
7092: GO 9495
7094: LD_INT 8
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7242
7102: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7103: LD_ADDR_VAR 0 2
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 4
7113: PUSH
7114: LD_INT 5
7116: PUSH
7117: LD_INT 6
7119: PUSH
7120: LD_INT 7
7122: PUSH
7123: LD_INT 8
7125: PUSH
7126: LD_INT 11
7128: PUSH
7129: LD_INT 12
7131: PUSH
7132: LD_INT 15
7134: PUSH
7135: LD_INT 16
7137: PUSH
7138: LD_INT 20
7140: PUSH
7141: LD_INT 21
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_INT 23
7149: PUSH
7150: LD_INT 25
7152: PUSH
7153: LD_INT 26
7155: PUSH
7156: LD_INT 30
7158: PUSH
7159: LD_INT 31
7161: PUSH
7162: LD_INT 32
7164: PUSH
7165: LD_INT 36
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 101
7192: PUSH
7193: LD_INT 102
7195: PUSH
7196: LD_INT 103
7198: PUSH
7199: LD_INT 105
7201: PUSH
7202: LD_INT 106
7204: PUSH
7205: LD_INT 108
7207: PUSH
7208: LD_INT 109
7210: PUSH
7211: LD_INT 112
7213: PUSH
7214: LD_INT 116
7216: PUSH
7217: LD_INT 117
7219: PUSH
7220: LD_INT 118
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: ST_TO_ADDR
7240: GO 9495
7242: LD_INT 9
7244: DOUBLE
7245: EQUAL
7246: IFTRUE 7250
7248: GO 7398
7250: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: LD_INT 6
7267: PUSH
7268: LD_INT 7
7270: PUSH
7271: LD_INT 8
7273: PUSH
7274: LD_INT 11
7276: PUSH
7277: LD_INT 12
7279: PUSH
7280: LD_INT 15
7282: PUSH
7283: LD_INT 16
7285: PUSH
7286: LD_INT 20
7288: PUSH
7289: LD_INT 21
7291: PUSH
7292: LD_INT 22
7294: PUSH
7295: LD_INT 23
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 26
7303: PUSH
7304: LD_INT 28
7306: PUSH
7307: LD_INT 30
7309: PUSH
7310: LD_INT 31
7312: PUSH
7313: LD_INT 32
7315: PUSH
7316: LD_INT 36
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 101
7344: PUSH
7345: LD_INT 102
7347: PUSH
7348: LD_INT 103
7350: PUSH
7351: LD_INT 105
7353: PUSH
7354: LD_INT 106
7356: PUSH
7357: LD_INT 108
7359: PUSH
7360: LD_INT 109
7362: PUSH
7363: LD_INT 112
7365: PUSH
7366: LD_INT 114
7368: PUSH
7369: LD_INT 116
7371: PUSH
7372: LD_INT 117
7374: PUSH
7375: LD_INT 118
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: ST_TO_ADDR
7396: GO 9495
7398: LD_INT 10
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7602
7406: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7407: LD_ADDR_VAR 0 2
7411: PUSH
7412: LD_INT 2
7414: PUSH
7415: LD_INT 4
7417: PUSH
7418: LD_INT 5
7420: PUSH
7421: LD_INT 6
7423: PUSH
7424: LD_INT 7
7426: PUSH
7427: LD_INT 8
7429: PUSH
7430: LD_INT 9
7432: PUSH
7433: LD_INT 10
7435: PUSH
7436: LD_INT 11
7438: PUSH
7439: LD_INT 12
7441: PUSH
7442: LD_INT 13
7444: PUSH
7445: LD_INT 14
7447: PUSH
7448: LD_INT 15
7450: PUSH
7451: LD_INT 16
7453: PUSH
7454: LD_INT 17
7456: PUSH
7457: LD_INT 18
7459: PUSH
7460: LD_INT 19
7462: PUSH
7463: LD_INT 20
7465: PUSH
7466: LD_INT 21
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_INT 23
7474: PUSH
7475: LD_INT 24
7477: PUSH
7478: LD_INT 25
7480: PUSH
7481: LD_INT 26
7483: PUSH
7484: LD_INT 28
7486: PUSH
7487: LD_INT 30
7489: PUSH
7490: LD_INT 31
7492: PUSH
7493: LD_INT 32
7495: PUSH
7496: LD_INT 36
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 101
7532: PUSH
7533: LD_INT 102
7535: PUSH
7536: LD_INT 103
7538: PUSH
7539: LD_INT 104
7541: PUSH
7542: LD_INT 105
7544: PUSH
7545: LD_INT 106
7547: PUSH
7548: LD_INT 107
7550: PUSH
7551: LD_INT 108
7553: PUSH
7554: LD_INT 109
7556: PUSH
7557: LD_INT 110
7559: PUSH
7560: LD_INT 111
7562: PUSH
7563: LD_INT 112
7565: PUSH
7566: LD_INT 114
7568: PUSH
7569: LD_INT 116
7571: PUSH
7572: LD_INT 117
7574: PUSH
7575: LD_INT 118
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: ST_TO_ADDR
7600: GO 9495
7602: LD_INT 11
7604: DOUBLE
7605: EQUAL
7606: IFTRUE 7610
7608: GO 7814
7610: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7611: LD_ADDR_VAR 0 2
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 4
7624: PUSH
7625: LD_INT 5
7627: PUSH
7628: LD_INT 6
7630: PUSH
7631: LD_INT 7
7633: PUSH
7634: LD_INT 8
7636: PUSH
7637: LD_INT 9
7639: PUSH
7640: LD_INT 10
7642: PUSH
7643: LD_INT 11
7645: PUSH
7646: LD_INT 12
7648: PUSH
7649: LD_INT 13
7651: PUSH
7652: LD_INT 14
7654: PUSH
7655: LD_INT 15
7657: PUSH
7658: LD_INT 16
7660: PUSH
7661: LD_INT 17
7663: PUSH
7664: LD_INT 18
7666: PUSH
7667: LD_INT 19
7669: PUSH
7670: LD_INT 20
7672: PUSH
7673: LD_INT 21
7675: PUSH
7676: LD_INT 22
7678: PUSH
7679: LD_INT 23
7681: PUSH
7682: LD_INT 24
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 26
7690: PUSH
7691: LD_INT 28
7693: PUSH
7694: LD_INT 30
7696: PUSH
7697: LD_INT 31
7699: PUSH
7700: LD_INT 32
7702: PUSH
7703: LD_INT 34
7705: PUSH
7706: LD_INT 36
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 101
7744: PUSH
7745: LD_INT 102
7747: PUSH
7748: LD_INT 103
7750: PUSH
7751: LD_INT 104
7753: PUSH
7754: LD_INT 105
7756: PUSH
7757: LD_INT 106
7759: PUSH
7760: LD_INT 107
7762: PUSH
7763: LD_INT 108
7765: PUSH
7766: LD_INT 109
7768: PUSH
7769: LD_INT 110
7771: PUSH
7772: LD_INT 111
7774: PUSH
7775: LD_INT 112
7777: PUSH
7778: LD_INT 114
7780: PUSH
7781: LD_INT 116
7783: PUSH
7784: LD_INT 117
7786: PUSH
7787: LD_INT 118
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: ST_TO_ADDR
7812: GO 9495
7814: LD_INT 12
7816: DOUBLE
7817: EQUAL
7818: IFTRUE 7822
7820: GO 8042
7822: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7823: LD_ADDR_VAR 0 2
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: LD_INT 2
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: LD_INT 4
7839: PUSH
7840: LD_INT 5
7842: PUSH
7843: LD_INT 6
7845: PUSH
7846: LD_INT 7
7848: PUSH
7849: LD_INT 8
7851: PUSH
7852: LD_INT 9
7854: PUSH
7855: LD_INT 10
7857: PUSH
7858: LD_INT 11
7860: PUSH
7861: LD_INT 12
7863: PUSH
7864: LD_INT 13
7866: PUSH
7867: LD_INT 14
7869: PUSH
7870: LD_INT 15
7872: PUSH
7873: LD_INT 16
7875: PUSH
7876: LD_INT 17
7878: PUSH
7879: LD_INT 18
7881: PUSH
7882: LD_INT 19
7884: PUSH
7885: LD_INT 20
7887: PUSH
7888: LD_INT 21
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 23
7896: PUSH
7897: LD_INT 24
7899: PUSH
7900: LD_INT 25
7902: PUSH
7903: LD_INT 26
7905: PUSH
7906: LD_INT 27
7908: PUSH
7909: LD_INT 28
7911: PUSH
7912: LD_INT 30
7914: PUSH
7915: LD_INT 31
7917: PUSH
7918: LD_INT 32
7920: PUSH
7921: LD_INT 33
7923: PUSH
7924: LD_INT 34
7926: PUSH
7927: LD_INT 36
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 101
7968: PUSH
7969: LD_INT 102
7971: PUSH
7972: LD_INT 103
7974: PUSH
7975: LD_INT 104
7977: PUSH
7978: LD_INT 105
7980: PUSH
7981: LD_INT 106
7983: PUSH
7984: LD_INT 107
7986: PUSH
7987: LD_INT 108
7989: PUSH
7990: LD_INT 109
7992: PUSH
7993: LD_INT 110
7995: PUSH
7996: LD_INT 111
7998: PUSH
7999: LD_INT 112
8001: PUSH
8002: LD_INT 113
8004: PUSH
8005: LD_INT 114
8007: PUSH
8008: LD_INT 116
8010: PUSH
8011: LD_INT 117
8013: PUSH
8014: LD_INT 118
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: ST_TO_ADDR
8040: GO 9495
8042: LD_INT 13
8044: DOUBLE
8045: EQUAL
8046: IFTRUE 8050
8048: GO 8258
8050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8051: LD_ADDR_VAR 0 2
8055: PUSH
8056: LD_INT 1
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 3
8064: PUSH
8065: LD_INT 4
8067: PUSH
8068: LD_INT 5
8070: PUSH
8071: LD_INT 8
8073: PUSH
8074: LD_INT 9
8076: PUSH
8077: LD_INT 10
8079: PUSH
8080: LD_INT 11
8082: PUSH
8083: LD_INT 12
8085: PUSH
8086: LD_INT 14
8088: PUSH
8089: LD_INT 15
8091: PUSH
8092: LD_INT 16
8094: PUSH
8095: LD_INT 17
8097: PUSH
8098: LD_INT 18
8100: PUSH
8101: LD_INT 19
8103: PUSH
8104: LD_INT 20
8106: PUSH
8107: LD_INT 21
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 24
8118: PUSH
8119: LD_INT 25
8121: PUSH
8122: LD_INT 26
8124: PUSH
8125: LD_INT 27
8127: PUSH
8128: LD_INT 28
8130: PUSH
8131: LD_INT 30
8133: PUSH
8134: LD_INT 31
8136: PUSH
8137: LD_INT 32
8139: PUSH
8140: LD_INT 33
8142: PUSH
8143: LD_INT 34
8145: PUSH
8146: LD_INT 36
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 101
8184: PUSH
8185: LD_INT 102
8187: PUSH
8188: LD_INT 103
8190: PUSH
8191: LD_INT 104
8193: PUSH
8194: LD_INT 105
8196: PUSH
8197: LD_INT 106
8199: PUSH
8200: LD_INT 107
8202: PUSH
8203: LD_INT 108
8205: PUSH
8206: LD_INT 109
8208: PUSH
8209: LD_INT 110
8211: PUSH
8212: LD_INT 111
8214: PUSH
8215: LD_INT 112
8217: PUSH
8218: LD_INT 113
8220: PUSH
8221: LD_INT 114
8223: PUSH
8224: LD_INT 116
8226: PUSH
8227: LD_INT 117
8229: PUSH
8230: LD_INT 118
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: ST_TO_ADDR
8256: GO 9495
8258: LD_INT 14
8260: DOUBLE
8261: EQUAL
8262: IFTRUE 8266
8264: GO 8490
8266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8267: LD_ADDR_VAR 0 2
8271: PUSH
8272: LD_INT 1
8274: PUSH
8275: LD_INT 2
8277: PUSH
8278: LD_INT 3
8280: PUSH
8281: LD_INT 4
8283: PUSH
8284: LD_INT 5
8286: PUSH
8287: LD_INT 6
8289: PUSH
8290: LD_INT 7
8292: PUSH
8293: LD_INT 8
8295: PUSH
8296: LD_INT 9
8298: PUSH
8299: LD_INT 10
8301: PUSH
8302: LD_INT 11
8304: PUSH
8305: LD_INT 12
8307: PUSH
8308: LD_INT 13
8310: PUSH
8311: LD_INT 14
8313: PUSH
8314: LD_INT 15
8316: PUSH
8317: LD_INT 16
8319: PUSH
8320: LD_INT 17
8322: PUSH
8323: LD_INT 18
8325: PUSH
8326: LD_INT 19
8328: PUSH
8329: LD_INT 20
8331: PUSH
8332: LD_INT 21
8334: PUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 23
8340: PUSH
8341: LD_INT 24
8343: PUSH
8344: LD_INT 25
8346: PUSH
8347: LD_INT 26
8349: PUSH
8350: LD_INT 27
8352: PUSH
8353: LD_INT 28
8355: PUSH
8356: LD_INT 29
8358: PUSH
8359: LD_INT 30
8361: PUSH
8362: LD_INT 31
8364: PUSH
8365: LD_INT 32
8367: PUSH
8368: LD_INT 33
8370: PUSH
8371: LD_INT 34
8373: PUSH
8374: LD_INT 36
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 101
8416: PUSH
8417: LD_INT 102
8419: PUSH
8420: LD_INT 103
8422: PUSH
8423: LD_INT 104
8425: PUSH
8426: LD_INT 105
8428: PUSH
8429: LD_INT 106
8431: PUSH
8432: LD_INT 107
8434: PUSH
8435: LD_INT 108
8437: PUSH
8438: LD_INT 109
8440: PUSH
8441: LD_INT 110
8443: PUSH
8444: LD_INT 111
8446: PUSH
8447: LD_INT 112
8449: PUSH
8450: LD_INT 113
8452: PUSH
8453: LD_INT 114
8455: PUSH
8456: LD_INT 116
8458: PUSH
8459: LD_INT 117
8461: PUSH
8462: LD_INT 118
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: ST_TO_ADDR
8488: GO 9495
8490: LD_INT 15
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8722
8498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8499: LD_ADDR_VAR 0 2
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: LD_INT 3
8512: PUSH
8513: LD_INT 4
8515: PUSH
8516: LD_INT 5
8518: PUSH
8519: LD_INT 6
8521: PUSH
8522: LD_INT 7
8524: PUSH
8525: LD_INT 8
8527: PUSH
8528: LD_INT 9
8530: PUSH
8531: LD_INT 10
8533: PUSH
8534: LD_INT 11
8536: PUSH
8537: LD_INT 12
8539: PUSH
8540: LD_INT 13
8542: PUSH
8543: LD_INT 14
8545: PUSH
8546: LD_INT 15
8548: PUSH
8549: LD_INT 16
8551: PUSH
8552: LD_INT 17
8554: PUSH
8555: LD_INT 18
8557: PUSH
8558: LD_INT 19
8560: PUSH
8561: LD_INT 20
8563: PUSH
8564: LD_INT 21
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 23
8572: PUSH
8573: LD_INT 24
8575: PUSH
8576: LD_INT 25
8578: PUSH
8579: LD_INT 26
8581: PUSH
8582: LD_INT 27
8584: PUSH
8585: LD_INT 28
8587: PUSH
8588: LD_INT 29
8590: PUSH
8591: LD_INT 30
8593: PUSH
8594: LD_INT 31
8596: PUSH
8597: LD_INT 32
8599: PUSH
8600: LD_INT 33
8602: PUSH
8603: LD_INT 34
8605: PUSH
8606: LD_INT 36
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 101
8648: PUSH
8649: LD_INT 102
8651: PUSH
8652: LD_INT 103
8654: PUSH
8655: LD_INT 104
8657: PUSH
8658: LD_INT 105
8660: PUSH
8661: LD_INT 106
8663: PUSH
8664: LD_INT 107
8666: PUSH
8667: LD_INT 108
8669: PUSH
8670: LD_INT 109
8672: PUSH
8673: LD_INT 110
8675: PUSH
8676: LD_INT 111
8678: PUSH
8679: LD_INT 112
8681: PUSH
8682: LD_INT 113
8684: PUSH
8685: LD_INT 114
8687: PUSH
8688: LD_INT 116
8690: PUSH
8691: LD_INT 117
8693: PUSH
8694: LD_INT 118
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: ST_TO_ADDR
8720: GO 9495
8722: LD_INT 16
8724: DOUBLE
8725: EQUAL
8726: IFTRUE 8730
8728: GO 8866
8730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: LD_INT 2
8738: PUSH
8739: LD_INT 4
8741: PUSH
8742: LD_INT 5
8744: PUSH
8745: LD_INT 7
8747: PUSH
8748: LD_INT 11
8750: PUSH
8751: LD_INT 12
8753: PUSH
8754: LD_INT 15
8756: PUSH
8757: LD_INT 16
8759: PUSH
8760: LD_INT 20
8762: PUSH
8763: LD_INT 21
8765: PUSH
8766: LD_INT 22
8768: PUSH
8769: LD_INT 23
8771: PUSH
8772: LD_INT 25
8774: PUSH
8775: LD_INT 26
8777: PUSH
8778: LD_INT 30
8780: PUSH
8781: LD_INT 31
8783: PUSH
8784: LD_INT 32
8786: PUSH
8787: LD_INT 33
8789: PUSH
8790: LD_INT 34
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 101
8816: PUSH
8817: LD_INT 102
8819: PUSH
8820: LD_INT 103
8822: PUSH
8823: LD_INT 106
8825: PUSH
8826: LD_INT 108
8828: PUSH
8829: LD_INT 112
8831: PUSH
8832: LD_INT 113
8834: PUSH
8835: LD_INT 114
8837: PUSH
8838: LD_INT 116
8840: PUSH
8841: LD_INT 117
8843: PUSH
8844: LD_INT 118
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: ST_TO_ADDR
8864: GO 9495
8866: LD_INT 17
8868: DOUBLE
8869: EQUAL
8870: IFTRUE 8874
8872: GO 9098
8874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8875: LD_ADDR_VAR 0 2
8879: PUSH
8880: LD_INT 1
8882: PUSH
8883: LD_INT 2
8885: PUSH
8886: LD_INT 3
8888: PUSH
8889: LD_INT 4
8891: PUSH
8892: LD_INT 5
8894: PUSH
8895: LD_INT 6
8897: PUSH
8898: LD_INT 7
8900: PUSH
8901: LD_INT 8
8903: PUSH
8904: LD_INT 9
8906: PUSH
8907: LD_INT 10
8909: PUSH
8910: LD_INT 11
8912: PUSH
8913: LD_INT 12
8915: PUSH
8916: LD_INT 13
8918: PUSH
8919: LD_INT 14
8921: PUSH
8922: LD_INT 15
8924: PUSH
8925: LD_INT 16
8927: PUSH
8928: LD_INT 17
8930: PUSH
8931: LD_INT 18
8933: PUSH
8934: LD_INT 19
8936: PUSH
8937: LD_INT 20
8939: PUSH
8940: LD_INT 21
8942: PUSH
8943: LD_INT 22
8945: PUSH
8946: LD_INT 23
8948: PUSH
8949: LD_INT 24
8951: PUSH
8952: LD_INT 25
8954: PUSH
8955: LD_INT 26
8957: PUSH
8958: LD_INT 27
8960: PUSH
8961: LD_INT 28
8963: PUSH
8964: LD_INT 29
8966: PUSH
8967: LD_INT 30
8969: PUSH
8970: LD_INT 31
8972: PUSH
8973: LD_INT 32
8975: PUSH
8976: LD_INT 33
8978: PUSH
8979: LD_INT 34
8981: PUSH
8982: LD_INT 36
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 101
9024: PUSH
9025: LD_INT 102
9027: PUSH
9028: LD_INT 103
9030: PUSH
9031: LD_INT 104
9033: PUSH
9034: LD_INT 105
9036: PUSH
9037: LD_INT 106
9039: PUSH
9040: LD_INT 107
9042: PUSH
9043: LD_INT 108
9045: PUSH
9046: LD_INT 109
9048: PUSH
9049: LD_INT 110
9051: PUSH
9052: LD_INT 111
9054: PUSH
9055: LD_INT 112
9057: PUSH
9058: LD_INT 113
9060: PUSH
9061: LD_INT 114
9063: PUSH
9064: LD_INT 116
9066: PUSH
9067: LD_INT 117
9069: PUSH
9070: LD_INT 118
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: ST_TO_ADDR
9096: GO 9495
9098: LD_INT 18
9100: DOUBLE
9101: EQUAL
9102: IFTRUE 9106
9104: GO 9254
9106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: LD_INT 2
9114: PUSH
9115: LD_INT 4
9117: PUSH
9118: LD_INT 5
9120: PUSH
9121: LD_INT 7
9123: PUSH
9124: LD_INT 11
9126: PUSH
9127: LD_INT 12
9129: PUSH
9130: LD_INT 15
9132: PUSH
9133: LD_INT 16
9135: PUSH
9136: LD_INT 20
9138: PUSH
9139: LD_INT 21
9141: PUSH
9142: LD_INT 22
9144: PUSH
9145: LD_INT 23
9147: PUSH
9148: LD_INT 25
9150: PUSH
9151: LD_INT 26
9153: PUSH
9154: LD_INT 30
9156: PUSH
9157: LD_INT 31
9159: PUSH
9160: LD_INT 32
9162: PUSH
9163: LD_INT 33
9165: PUSH
9166: LD_INT 34
9168: PUSH
9169: LD_INT 35
9171: PUSH
9172: LD_INT 36
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 101
9200: PUSH
9201: LD_INT 102
9203: PUSH
9204: LD_INT 103
9206: PUSH
9207: LD_INT 106
9209: PUSH
9210: LD_INT 108
9212: PUSH
9213: LD_INT 112
9215: PUSH
9216: LD_INT 113
9218: PUSH
9219: LD_INT 114
9221: PUSH
9222: LD_INT 115
9224: PUSH
9225: LD_INT 116
9227: PUSH
9228: LD_INT 117
9230: PUSH
9231: LD_INT 118
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 9495
9254: LD_INT 19
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9494
9262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 3
9276: PUSH
9277: LD_INT 4
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: LD_INT 9
9294: PUSH
9295: LD_INT 10
9297: PUSH
9298: LD_INT 11
9300: PUSH
9301: LD_INT 12
9303: PUSH
9304: LD_INT 13
9306: PUSH
9307: LD_INT 14
9309: PUSH
9310: LD_INT 15
9312: PUSH
9313: LD_INT 16
9315: PUSH
9316: LD_INT 17
9318: PUSH
9319: LD_INT 18
9321: PUSH
9322: LD_INT 19
9324: PUSH
9325: LD_INT 20
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_INT 23
9336: PUSH
9337: LD_INT 24
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 26
9345: PUSH
9346: LD_INT 27
9348: PUSH
9349: LD_INT 28
9351: PUSH
9352: LD_INT 29
9354: PUSH
9355: LD_INT 30
9357: PUSH
9358: LD_INT 31
9360: PUSH
9361: LD_INT 32
9363: PUSH
9364: LD_INT 33
9366: PUSH
9367: LD_INT 34
9369: PUSH
9370: LD_INT 35
9372: PUSH
9373: LD_INT 36
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 101
9416: PUSH
9417: LD_INT 102
9419: PUSH
9420: LD_INT 103
9422: PUSH
9423: LD_INT 104
9425: PUSH
9426: LD_INT 105
9428: PUSH
9429: LD_INT 106
9431: PUSH
9432: LD_INT 107
9434: PUSH
9435: LD_INT 108
9437: PUSH
9438: LD_INT 109
9440: PUSH
9441: LD_INT 110
9443: PUSH
9444: LD_INT 111
9446: PUSH
9447: LD_INT 112
9449: PUSH
9450: LD_INT 113
9452: PUSH
9453: LD_INT 114
9455: PUSH
9456: LD_INT 115
9458: PUSH
9459: LD_INT 116
9461: PUSH
9462: LD_INT 117
9464: PUSH
9465: LD_INT 118
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: ST_TO_ADDR
9492: GO 9495
9494: POP
// end else
9495: GO 9726
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9497: LD_ADDR_VAR 0 2
9501: PUSH
9502: LD_INT 1
9504: PUSH
9505: LD_INT 2
9507: PUSH
9508: LD_INT 3
9510: PUSH
9511: LD_INT 4
9513: PUSH
9514: LD_INT 5
9516: PUSH
9517: LD_INT 6
9519: PUSH
9520: LD_INT 7
9522: PUSH
9523: LD_INT 8
9525: PUSH
9526: LD_INT 9
9528: PUSH
9529: LD_INT 10
9531: PUSH
9532: LD_INT 11
9534: PUSH
9535: LD_INT 12
9537: PUSH
9538: LD_INT 13
9540: PUSH
9541: LD_INT 14
9543: PUSH
9544: LD_INT 15
9546: PUSH
9547: LD_INT 16
9549: PUSH
9550: LD_INT 17
9552: PUSH
9553: LD_INT 18
9555: PUSH
9556: LD_INT 19
9558: PUSH
9559: LD_INT 20
9561: PUSH
9562: LD_INT 21
9564: PUSH
9565: LD_INT 22
9567: PUSH
9568: LD_INT 23
9570: PUSH
9571: LD_INT 24
9573: PUSH
9574: LD_INT 25
9576: PUSH
9577: LD_INT 26
9579: PUSH
9580: LD_INT 27
9582: PUSH
9583: LD_INT 28
9585: PUSH
9586: LD_INT 29
9588: PUSH
9589: LD_INT 30
9591: PUSH
9592: LD_INT 31
9594: PUSH
9595: LD_INT 32
9597: PUSH
9598: LD_INT 33
9600: PUSH
9601: LD_INT 34
9603: PUSH
9604: LD_INT 35
9606: PUSH
9607: LD_INT 36
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 101
9650: PUSH
9651: LD_INT 102
9653: PUSH
9654: LD_INT 103
9656: PUSH
9657: LD_INT 104
9659: PUSH
9660: LD_INT 105
9662: PUSH
9663: LD_INT 106
9665: PUSH
9666: LD_INT 107
9668: PUSH
9669: LD_INT 108
9671: PUSH
9672: LD_INT 109
9674: PUSH
9675: LD_INT 110
9677: PUSH
9678: LD_INT 111
9680: PUSH
9681: LD_INT 112
9683: PUSH
9684: LD_INT 113
9686: PUSH
9687: LD_INT 114
9689: PUSH
9690: LD_INT 115
9692: PUSH
9693: LD_INT 116
9695: PUSH
9696: LD_INT 117
9698: PUSH
9699: LD_INT 118
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// if result then
9726: LD_VAR 0 2
9730: IFFALSE 10516
// begin normal :=  ;
9732: LD_ADDR_VAR 0 5
9736: PUSH
9737: LD_STRING 
9739: ST_TO_ADDR
// hardcore :=  ;
9740: LD_ADDR_VAR 0 6
9744: PUSH
9745: LD_STRING 
9747: ST_TO_ADDR
// active :=  ;
9748: LD_ADDR_VAR 0 7
9752: PUSH
9753: LD_STRING 
9755: ST_TO_ADDR
// for i = 1 to normalCounter do
9756: LD_ADDR_VAR 0 8
9760: PUSH
9761: DOUBLE
9762: LD_INT 1
9764: DEC
9765: ST_TO_ADDR
9766: LD_EXP 9
9770: PUSH
9771: FOR_TO
9772: IFFALSE 9873
// begin tmp := 0 ;
9774: LD_ADDR_VAR 0 3
9778: PUSH
9779: LD_STRING 0
9781: ST_TO_ADDR
// if result [ 1 ] then
9782: LD_VAR 0 2
9786: PUSH
9787: LD_INT 1
9789: ARRAY
9790: IFFALSE 9855
// if result [ 1 ] [ 1 ] = i then
9792: LD_VAR 0 2
9796: PUSH
9797: LD_INT 1
9799: ARRAY
9800: PUSH
9801: LD_INT 1
9803: ARRAY
9804: PUSH
9805: LD_VAR 0 8
9809: EQUAL
9810: IFFALSE 9855
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_VAR 0 2
9821: PPUSH
9822: LD_INT 1
9824: PPUSH
9825: LD_VAR 0 2
9829: PUSH
9830: LD_INT 1
9832: ARRAY
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 3
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// tmp := 1 ;
9847: LD_ADDR_VAR 0 3
9851: PUSH
9852: LD_STRING 1
9854: ST_TO_ADDR
// end ; normal := normal & tmp ;
9855: LD_ADDR_VAR 0 5
9859: PUSH
9860: LD_VAR 0 5
9864: PUSH
9865: LD_VAR 0 3
9869: STR
9870: ST_TO_ADDR
// end ;
9871: GO 9771
9873: POP
9874: POP
// for i = 1 to hardcoreCounter do
9875: LD_ADDR_VAR 0 8
9879: PUSH
9880: DOUBLE
9881: LD_INT 1
9883: DEC
9884: ST_TO_ADDR
9885: LD_EXP 10
9889: PUSH
9890: FOR_TO
9891: IFFALSE 9996
// begin tmp := 0 ;
9893: LD_ADDR_VAR 0 3
9897: PUSH
9898: LD_STRING 0
9900: ST_TO_ADDR
// if result [ 2 ] then
9901: LD_VAR 0 2
9905: PUSH
9906: LD_INT 2
9908: ARRAY
9909: IFFALSE 9978
// if result [ 2 ] [ 1 ] = 100 + i then
9911: LD_VAR 0 2
9915: PUSH
9916: LD_INT 2
9918: ARRAY
9919: PUSH
9920: LD_INT 1
9922: ARRAY
9923: PUSH
9924: LD_INT 100
9926: PUSH
9927: LD_VAR 0 8
9931: PLUS
9932: EQUAL
9933: IFFALSE 9978
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: LD_VAR 0 2
9944: PPUSH
9945: LD_INT 2
9947: PPUSH
9948: LD_VAR 0 2
9952: PUSH
9953: LD_INT 2
9955: ARRAY
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 3
9964: PPUSH
9965: CALL_OW 1
9969: ST_TO_ADDR
// tmp := 1 ;
9970: LD_ADDR_VAR 0 3
9974: PUSH
9975: LD_STRING 1
9977: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9978: LD_ADDR_VAR 0 6
9982: PUSH
9983: LD_VAR 0 6
9987: PUSH
9988: LD_VAR 0 3
9992: STR
9993: ST_TO_ADDR
// end ;
9994: GO 9890
9996: POP
9997: POP
// if isGameLoad then
9998: LD_VAR 0 1
10002: IFFALSE 10477
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10004: LD_ADDR_VAR 0 4
10008: PUSH
10009: LD_EXP 13
10013: PUSH
10014: LD_EXP 12
10018: PUSH
10019: LD_EXP 14
10023: PUSH
10024: LD_EXP 11
10028: PUSH
10029: LD_EXP 15
10033: PUSH
10034: LD_EXP 16
10038: PUSH
10039: LD_EXP 17
10043: PUSH
10044: LD_EXP 18
10048: PUSH
10049: LD_EXP 19
10053: PUSH
10054: LD_EXP 20
10058: PUSH
10059: LD_EXP 21
10063: PUSH
10064: LD_EXP 22
10068: PUSH
10069: LD_EXP 23
10073: PUSH
10074: LD_EXP 24
10078: PUSH
10079: LD_EXP 32
10083: PUSH
10084: LD_EXP 33
10088: PUSH
10089: LD_EXP 34
10093: PUSH
10094: LD_EXP 35
10098: PUSH
10099: LD_EXP 37
10103: PUSH
10104: LD_EXP 38
10108: PUSH
10109: LD_EXP 39
10113: PUSH
10114: LD_EXP 42
10118: PUSH
10119: LD_EXP 44
10123: PUSH
10124: LD_EXP 45
10128: PUSH
10129: LD_EXP 46
10133: PUSH
10134: LD_EXP 48
10138: PUSH
10139: LD_EXP 49
10143: PUSH
10144: LD_EXP 52
10148: PUSH
10149: LD_EXP 53
10153: PUSH
10154: LD_EXP 54
10158: PUSH
10159: LD_EXP 55
10163: PUSH
10164: LD_EXP 56
10168: PUSH
10169: LD_EXP 57
10173: PUSH
10174: LD_EXP 58
10178: PUSH
10179: LD_EXP 59
10183: PUSH
10184: LD_EXP 60
10188: PUSH
10189: LD_EXP 25
10193: PUSH
10194: LD_EXP 26
10198: PUSH
10199: LD_EXP 29
10203: PUSH
10204: LD_EXP 30
10208: PUSH
10209: LD_EXP 31
10213: PUSH
10214: LD_EXP 27
10218: PUSH
10219: LD_EXP 28
10223: PUSH
10224: LD_EXP 36
10228: PUSH
10229: LD_EXP 40
10233: PUSH
10234: LD_EXP 41
10238: PUSH
10239: LD_EXP 43
10243: PUSH
10244: LD_EXP 47
10248: PUSH
10249: LD_EXP 50
10253: PUSH
10254: LD_EXP 51
10258: PUSH
10259: LD_EXP 61
10263: PUSH
10264: LD_EXP 62
10268: PUSH
10269: LD_EXP 63
10273: PUSH
10274: LD_EXP 64
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: ST_TO_ADDR
// tmp :=  ;
10335: LD_ADDR_VAR 0 3
10339: PUSH
10340: LD_STRING 
10342: ST_TO_ADDR
// for i = 1 to normalCounter do
10343: LD_ADDR_VAR 0 8
10347: PUSH
10348: DOUBLE
10349: LD_INT 1
10351: DEC
10352: ST_TO_ADDR
10353: LD_EXP 9
10357: PUSH
10358: FOR_TO
10359: IFFALSE 10395
// begin if flags [ i ] then
10361: LD_VAR 0 4
10365: PUSH
10366: LD_VAR 0 8
10370: ARRAY
10371: IFFALSE 10393
// tmp := tmp & i & ; ;
10373: LD_ADDR_VAR 0 3
10377: PUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_VAR 0 8
10387: STR
10388: PUSH
10389: LD_STRING ;
10391: STR
10392: ST_TO_ADDR
// end ;
10393: GO 10358
10395: POP
10396: POP
// for i = 1 to hardcoreCounter do
10397: LD_ADDR_VAR 0 8
10401: PUSH
10402: DOUBLE
10403: LD_INT 1
10405: DEC
10406: ST_TO_ADDR
10407: LD_EXP 10
10411: PUSH
10412: FOR_TO
10413: IFFALSE 10459
// begin if flags [ normalCounter + i ] then
10415: LD_VAR 0 4
10419: PUSH
10420: LD_EXP 9
10424: PUSH
10425: LD_VAR 0 8
10429: PLUS
10430: ARRAY
10431: IFFALSE 10457
// tmp := tmp & ( 100 + i ) & ; ;
10433: LD_ADDR_VAR 0 3
10437: PUSH
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 100
10445: PUSH
10446: LD_VAR 0 8
10450: PLUS
10451: STR
10452: PUSH
10453: LD_STRING ;
10455: STR
10456: ST_TO_ADDR
// end ;
10457: GO 10412
10459: POP
10460: POP
// if tmp then
10461: LD_VAR 0 3
10465: IFFALSE 10477
// active := tmp ;
10467: LD_ADDR_VAR 0 7
10471: PUSH
10472: LD_VAR 0 3
10476: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10477: LD_STRING getStreamItemsFromMission("
10479: PUSH
10480: LD_VAR 0 5
10484: STR
10485: PUSH
10486: LD_STRING ","
10488: STR
10489: PUSH
10490: LD_VAR 0 6
10494: STR
10495: PUSH
10496: LD_STRING ","
10498: STR
10499: PUSH
10500: LD_VAR 0 7
10504: STR
10505: PUSH
10506: LD_STRING ")
10508: STR
10509: PPUSH
10510: CALL_OW 559
// end else
10514: GO 10523
// ToLua ( getStreamItemsFromMission("","","") ) ;
10516: LD_STRING getStreamItemsFromMission("","","")
10518: PPUSH
10519: CALL_OW 559
// end ;
10523: LD_VAR 0 2
10527: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10528: LD_EXP 8
10532: PUSH
10533: LD_EXP 13
10537: AND
10538: IFFALSE 10662
10540: GO 10542
10542: DISABLE
10543: LD_INT 0
10545: PPUSH
10546: PPUSH
// begin enable ;
10547: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10548: LD_ADDR_VAR 0 2
10552: PUSH
10553: LD_INT 22
10555: PUSH
10556: LD_OWVAR 2
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: LD_INT 34
10570: PUSH
10571: LD_INT 7
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 34
10580: PUSH
10581: LD_INT 45
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 34
10590: PUSH
10591: LD_INT 28
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 34
10600: PUSH
10601: LD_INT 47
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: ST_TO_ADDR
// if not tmp then
10624: LD_VAR 0 2
10628: NOT
10629: IFFALSE 10633
// exit ;
10631: GO 10662
// for i in tmp do
10633: LD_ADDR_VAR 0 1
10637: PUSH
10638: LD_VAR 0 2
10642: PUSH
10643: FOR_IN
10644: IFFALSE 10660
// begin SetLives ( i , 0 ) ;
10646: LD_VAR 0 1
10650: PPUSH
10651: LD_INT 0
10653: PPUSH
10654: CALL_OW 234
// end ;
10658: GO 10643
10660: POP
10661: POP
// end ;
10662: PPOPN 2
10664: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10665: LD_EXP 8
10669: PUSH
10670: LD_EXP 14
10674: AND
10675: IFFALSE 10759
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
10683: PPUSH
// begin enable ;
10684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10685: LD_ADDR_VAR 0 2
10689: PUSH
10690: LD_INT 22
10692: PUSH
10693: LD_OWVAR 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 32
10704: PUSH
10705: LD_INT 3
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PPUSH
10716: CALL_OW 69
10720: ST_TO_ADDR
// if not tmp then
10721: LD_VAR 0 2
10725: NOT
10726: IFFALSE 10730
// exit ;
10728: GO 10759
// for i in tmp do
10730: LD_ADDR_VAR 0 1
10734: PUSH
10735: LD_VAR 0 2
10739: PUSH
10740: FOR_IN
10741: IFFALSE 10757
// begin SetLives ( i , 0 ) ;
10743: LD_VAR 0 1
10747: PPUSH
10748: LD_INT 0
10750: PPUSH
10751: CALL_OW 234
// end ;
10755: GO 10740
10757: POP
10758: POP
// end ;
10759: PPOPN 2
10761: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10762: LD_EXP 8
10766: PUSH
10767: LD_EXP 11
10771: AND
10772: IFFALSE 10865
10774: GO 10776
10776: DISABLE
10777: LD_INT 0
10779: PPUSH
// begin enable ;
10780: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10781: LD_ADDR_VAR 0 1
10785: PUSH
10786: LD_INT 22
10788: PUSH
10789: LD_OWVAR 2
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 2
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 5
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 9
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 8
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 69
10845: PUSH
10846: FOR_IN
10847: IFFALSE 10863
// begin SetClass ( i , 1 ) ;
10849: LD_VAR 0 1
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 336
// end ;
10861: GO 10846
10863: POP
10864: POP
// end ;
10865: PPOPN 1
10867: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10868: LD_EXP 8
10872: PUSH
10873: LD_EXP 12
10877: AND
10878: PUSH
10879: LD_OWVAR 65
10883: PUSH
10884: LD_INT 7
10886: LESS
10887: AND
10888: IFFALSE 10902
10890: GO 10892
10892: DISABLE
// begin enable ;
10893: ENABLE
// game_speed := 7 ;
10894: LD_ADDR_OWVAR 65
10898: PUSH
10899: LD_INT 7
10901: ST_TO_ADDR
// end ;
10902: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10903: LD_EXP 8
10907: PUSH
10908: LD_EXP 15
10912: AND
10913: IFFALSE 11115
10915: GO 10917
10917: DISABLE
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_INT 81
10930: PUSH
10931: LD_OWVAR 2
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 21
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: ST_TO_ADDR
// if not tmp then
10959: LD_VAR 0 3
10963: NOT
10964: IFFALSE 10968
// exit ;
10966: GO 11115
// if tmp > 5 then
10968: LD_VAR 0 3
10972: PUSH
10973: LD_INT 5
10975: GREATER
10976: IFFALSE 10988
// k := 5 else
10978: LD_ADDR_VAR 0 2
10982: PUSH
10983: LD_INT 5
10985: ST_TO_ADDR
10986: GO 10998
// k := tmp ;
10988: LD_ADDR_VAR 0 2
10992: PUSH
10993: LD_VAR 0 3
10997: ST_TO_ADDR
// for i := 1 to k do
10998: LD_ADDR_VAR 0 1
11002: PUSH
11003: DOUBLE
11004: LD_INT 1
11006: DEC
11007: ST_TO_ADDR
11008: LD_VAR 0 2
11012: PUSH
11013: FOR_TO
11014: IFFALSE 11113
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_VAR 0 1
11025: ARRAY
11026: PPUSH
11027: LD_VAR 0 1
11031: PUSH
11032: LD_INT 4
11034: MOD
11035: PUSH
11036: LD_INT 1
11038: PLUS
11039: PPUSH
11040: CALL_OW 259
11044: PUSH
11045: LD_INT 10
11047: LESS
11048: IFFALSE 11111
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11050: LD_VAR 0 3
11054: PUSH
11055: LD_VAR 0 1
11059: ARRAY
11060: PPUSH
11061: LD_VAR 0 1
11065: PUSH
11066: LD_INT 4
11068: MOD
11069: PUSH
11070: LD_INT 1
11072: PLUS
11073: PPUSH
11074: LD_VAR 0 3
11078: PUSH
11079: LD_VAR 0 1
11083: ARRAY
11084: PPUSH
11085: LD_VAR 0 1
11089: PUSH
11090: LD_INT 4
11092: MOD
11093: PUSH
11094: LD_INT 1
11096: PLUS
11097: PPUSH
11098: CALL_OW 259
11102: PUSH
11103: LD_INT 1
11105: PLUS
11106: PPUSH
11107: CALL_OW 237
11111: GO 11013
11113: POP
11114: POP
// end ;
11115: PPOPN 3
11117: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11118: LD_EXP 8
11122: PUSH
11123: LD_EXP 16
11127: AND
11128: IFFALSE 11148
11130: GO 11132
11132: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11133: LD_INT 4
11135: PPUSH
11136: LD_OWVAR 2
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: CALL_OW 324
11148: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11149: LD_EXP 8
11153: PUSH
11154: LD_EXP 45
11158: AND
11159: IFFALSE 11179
11161: GO 11163
11163: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11164: LD_INT 19
11166: PPUSH
11167: LD_OWVAR 2
11171: PPUSH
11172: LD_INT 0
11174: PPUSH
11175: CALL_OW 324
11179: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11180: LD_EXP 8
11184: PUSH
11185: LD_EXP 17
11189: AND
11190: IFFALSE 11292
11192: GO 11194
11194: DISABLE
11195: LD_INT 0
11197: PPUSH
11198: PPUSH
// begin enable ;
11199: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11200: LD_ADDR_VAR 0 2
11204: PUSH
11205: LD_INT 22
11207: PUSH
11208: LD_OWVAR 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 2
11219: PUSH
11220: LD_INT 34
11222: PUSH
11223: LD_INT 11
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 34
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PPUSH
11249: CALL_OW 69
11253: ST_TO_ADDR
// if not tmp then
11254: LD_VAR 0 2
11258: NOT
11259: IFFALSE 11263
// exit ;
11261: GO 11292
// for i in tmp do
11263: LD_ADDR_VAR 0 1
11267: PUSH
11268: LD_VAR 0 2
11272: PUSH
11273: FOR_IN
11274: IFFALSE 11290
// begin SetLives ( i , 0 ) ;
11276: LD_VAR 0 1
11280: PPUSH
11281: LD_INT 0
11283: PPUSH
11284: CALL_OW 234
// end ;
11288: GO 11273
11290: POP
11291: POP
// end ;
11292: PPOPN 2
11294: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11295: LD_EXP 8
11299: PUSH
11300: LD_EXP 18
11304: AND
11305: IFFALSE 11325
11307: GO 11309
11309: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11310: LD_INT 32
11312: PPUSH
11313: LD_OWVAR 2
11317: PPUSH
11318: LD_INT 0
11320: PPUSH
11321: CALL_OW 324
11325: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11326: LD_EXP 8
11330: PUSH
11331: LD_EXP 19
11335: AND
11336: IFFALSE 11517
11338: GO 11340
11340: DISABLE
11341: LD_INT 0
11343: PPUSH
11344: PPUSH
11345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11346: LD_ADDR_VAR 0 2
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_OWVAR 2
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 33
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: ST_TO_ADDR
// if not tmp then
11382: LD_VAR 0 2
11386: NOT
11387: IFFALSE 11391
// exit ;
11389: GO 11517
// side := 0 ;
11391: LD_ADDR_VAR 0 3
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// for i := 1 to 8 do
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: DOUBLE
11405: LD_INT 1
11407: DEC
11408: ST_TO_ADDR
11409: LD_INT 8
11411: PUSH
11412: FOR_TO
11413: IFFALSE 11461
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11415: LD_OWVAR 2
11419: PUSH
11420: LD_VAR 0 1
11424: NONEQUAL
11425: PUSH
11426: LD_OWVAR 2
11430: PPUSH
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL_OW 81
11440: PUSH
11441: LD_INT 2
11443: EQUAL
11444: AND
11445: IFFALSE 11459
// begin side := i ;
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_VAR 0 1
11456: ST_TO_ADDR
// break ;
11457: GO 11461
// end ;
11459: GO 11412
11461: POP
11462: POP
// if not side then
11463: LD_VAR 0 3
11467: NOT
11468: IFFALSE 11472
// exit ;
11470: GO 11517
// for i := 1 to tmp do
11472: LD_ADDR_VAR 0 1
11476: PUSH
11477: DOUBLE
11478: LD_INT 1
11480: DEC
11481: ST_TO_ADDR
11482: LD_VAR 0 2
11486: PUSH
11487: FOR_TO
11488: IFFALSE 11515
// if Prob ( 60 ) then
11490: LD_INT 60
11492: PPUSH
11493: CALL_OW 13
11497: IFFALSE 11513
// SetSide ( i , side ) ;
11499: LD_VAR 0 1
11503: PPUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: CALL_OW 235
11513: GO 11487
11515: POP
11516: POP
// end ;
11517: PPOPN 3
11519: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11520: LD_EXP 8
11524: PUSH
11525: LD_EXP 21
11529: AND
11530: IFFALSE 11649
11532: GO 11534
11534: DISABLE
11535: LD_INT 0
11537: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_INT 22
11545: PUSH
11546: LD_OWVAR 2
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 21
11557: PUSH
11558: LD_INT 1
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 3
11567: PUSH
11568: LD_INT 23
11570: PUSH
11571: LD_INT 0
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11647
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11595: LD_VAR 0 1
11599: PPUSH
11600: CALL_OW 257
11604: PUSH
11605: LD_INT 1
11607: PUSH
11608: LD_INT 2
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 4
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: IN
11623: IFFALSE 11645
// SetClass ( un , rand ( 1 , 4 ) ) ;
11625: LD_VAR 0 1
11629: PPUSH
11630: LD_INT 1
11632: PPUSH
11633: LD_INT 4
11635: PPUSH
11636: CALL_OW 12
11640: PPUSH
11641: CALL_OW 336
11645: GO 11592
11647: POP
11648: POP
// end ;
11649: PPOPN 1
11651: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11652: LD_EXP 8
11656: PUSH
11657: LD_EXP 20
11661: AND
11662: IFFALSE 11741
11664: GO 11666
11666: DISABLE
11667: LD_INT 0
11669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11670: LD_ADDR_VAR 0 1
11674: PUSH
11675: LD_INT 22
11677: PUSH
11678: LD_OWVAR 2
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 21
11689: PUSH
11690: LD_INT 3
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// if not tmp then
11706: LD_VAR 0 1
11710: NOT
11711: IFFALSE 11715
// exit ;
11713: GO 11741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11715: LD_VAR 0 1
11719: PUSH
11720: LD_INT 1
11722: PPUSH
11723: LD_VAR 0 1
11727: PPUSH
11728: CALL_OW 12
11732: ARRAY
11733: PPUSH
11734: LD_INT 100
11736: PPUSH
11737: CALL_OW 234
// end ;
11741: PPOPN 1
11743: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11744: LD_EXP 8
11748: PUSH
11749: LD_EXP 22
11753: AND
11754: IFFALSE 11852
11756: GO 11758
11758: DISABLE
11759: LD_INT 0
11761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11762: LD_ADDR_VAR 0 1
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_OWVAR 2
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 21
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PPUSH
11793: CALL_OW 69
11797: ST_TO_ADDR
// if not tmp then
11798: LD_VAR 0 1
11802: NOT
11803: IFFALSE 11807
// exit ;
11805: GO 11852
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11807: LD_VAR 0 1
11811: PUSH
11812: LD_INT 1
11814: PPUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL_OW 12
11824: ARRAY
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: LD_INT 4
11831: PPUSH
11832: CALL_OW 12
11836: PPUSH
11837: LD_INT 3000
11839: PPUSH
11840: LD_INT 9000
11842: PPUSH
11843: CALL_OW 12
11847: PPUSH
11848: CALL_OW 492
// end ;
11852: PPOPN 1
11854: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11855: LD_EXP 8
11859: PUSH
11860: LD_EXP 23
11864: AND
11865: IFFALSE 11885
11867: GO 11869
11869: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11870: LD_INT 1
11872: PPUSH
11873: LD_OWVAR 2
11877: PPUSH
11878: LD_INT 0
11880: PPUSH
11881: CALL_OW 324
11885: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11886: LD_EXP 8
11890: PUSH
11891: LD_EXP 24
11895: AND
11896: IFFALSE 11979
11898: GO 11900
11900: DISABLE
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11905: LD_ADDR_VAR 0 2
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_OWVAR 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL_OW 69
11940: ST_TO_ADDR
// if not tmp then
11941: LD_VAR 0 2
11945: NOT
11946: IFFALSE 11950
// exit ;
11948: GO 11979
// for i in tmp do
11950: LD_ADDR_VAR 0 1
11954: PUSH
11955: LD_VAR 0 2
11959: PUSH
11960: FOR_IN
11961: IFFALSE 11977
// SetBLevel ( i , 10 ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: LD_INT 10
11970: PPUSH
11971: CALL_OW 241
11975: GO 11960
11977: POP
11978: POP
// end ;
11979: PPOPN 2
11981: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11982: LD_EXP 8
11986: PUSH
11987: LD_EXP 25
11991: AND
11992: IFFALSE 12103
11994: GO 11996
11996: DISABLE
11997: LD_INT 0
11999: PPUSH
12000: PPUSH
12001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12002: LD_ADDR_VAR 0 3
12006: PUSH
12007: LD_INT 22
12009: PUSH
12010: LD_OWVAR 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 25
12021: PUSH
12022: LD_INT 1
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: ST_TO_ADDR
// if not tmp then
12038: LD_VAR 0 3
12042: NOT
12043: IFFALSE 12047
// exit ;
12045: GO 12103
// un := tmp [ rand ( 1 , tmp ) ] ;
12047: LD_ADDR_VAR 0 2
12051: PUSH
12052: LD_VAR 0 3
12056: PUSH
12057: LD_INT 1
12059: PPUSH
12060: LD_VAR 0 3
12064: PPUSH
12065: CALL_OW 12
12069: ARRAY
12070: ST_TO_ADDR
// if Crawls ( un ) then
12071: LD_VAR 0 2
12075: PPUSH
12076: CALL_OW 318
12080: IFFALSE 12091
// ComWalk ( un ) ;
12082: LD_VAR 0 2
12086: PPUSH
12087: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12091: LD_VAR 0 2
12095: PPUSH
12096: LD_INT 5
12098: PPUSH
12099: CALL_OW 336
// end ;
12103: PPOPN 3
12105: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12106: LD_EXP 8
12110: PUSH
12111: LD_EXP 26
12115: AND
12116: PUSH
12117: LD_OWVAR 67
12121: PUSH
12122: LD_INT 4
12124: LESS
12125: AND
12126: IFFALSE 12145
12128: GO 12130
12130: DISABLE
// begin Difficulty := Difficulty + 1 ;
12131: LD_ADDR_OWVAR 67
12135: PUSH
12136: LD_OWVAR 67
12140: PUSH
12141: LD_INT 1
12143: PLUS
12144: ST_TO_ADDR
// end ;
12145: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12146: LD_EXP 8
12150: PUSH
12151: LD_EXP 27
12155: AND
12156: IFFALSE 12259
12158: GO 12160
12160: DISABLE
12161: LD_INT 0
12163: PPUSH
// begin for i := 1 to 5 do
12164: LD_ADDR_VAR 0 1
12168: PUSH
12169: DOUBLE
12170: LD_INT 1
12172: DEC
12173: ST_TO_ADDR
12174: LD_INT 5
12176: PUSH
12177: FOR_TO
12178: IFFALSE 12257
// begin uc_nation := nation_nature ;
12180: LD_ADDR_OWVAR 21
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// uc_side := 0 ;
12188: LD_ADDR_OWVAR 20
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12196: LD_ADDR_OWVAR 29
12200: PUSH
12201: LD_INT 12
12203: PUSH
12204: LD_INT 12
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: ST_TO_ADDR
// hc_agressivity := 20 ;
12211: LD_ADDR_OWVAR 35
12215: PUSH
12216: LD_INT 20
12218: ST_TO_ADDR
// hc_class := class_tiger ;
12219: LD_ADDR_OWVAR 28
12223: PUSH
12224: LD_INT 14
12226: ST_TO_ADDR
// hc_gallery :=  ;
12227: LD_ADDR_OWVAR 33
12231: PUSH
12232: LD_STRING 
12234: ST_TO_ADDR
// hc_name :=  ;
12235: LD_ADDR_OWVAR 26
12239: PUSH
12240: LD_STRING 
12242: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12243: CALL_OW 44
12247: PPUSH
12248: LD_INT 0
12250: PPUSH
12251: CALL_OW 51
// end ;
12255: GO 12177
12257: POP
12258: POP
// end ;
12259: PPOPN 1
12261: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12262: LD_EXP 8
12266: PUSH
12267: LD_EXP 28
12271: AND
12272: IFFALSE 12281
12274: GO 12276
12276: DISABLE
// StreamSibBomb ;
12277: CALL 12282 0 0
12281: END
// export function StreamSibBomb ; var i , x , y ; begin
12282: LD_INT 0
12284: PPUSH
12285: PPUSH
12286: PPUSH
12287: PPUSH
// result := false ;
12288: LD_ADDR_VAR 0 1
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// for i := 1 to 16 do
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: DOUBLE
12302: LD_INT 1
12304: DEC
12305: ST_TO_ADDR
12306: LD_INT 16
12308: PUSH
12309: FOR_TO
12310: IFFALSE 12509
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_INT 10
12319: PUSH
12320: LD_INT 20
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 40
12328: PUSH
12329: LD_INT 50
12331: PUSH
12332: LD_INT 60
12334: PUSH
12335: LD_INT 70
12337: PUSH
12338: LD_INT 80
12340: PUSH
12341: LD_INT 90
12343: PUSH
12344: LD_INT 100
12346: PUSH
12347: LD_INT 110
12349: PUSH
12350: LD_INT 120
12352: PUSH
12353: LD_INT 130
12355: PUSH
12356: LD_INT 140
12358: PUSH
12359: LD_INT 150
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 15
12384: PPUSH
12385: CALL_OW 12
12389: ARRAY
12390: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12391: LD_ADDR_VAR 0 4
12395: PUSH
12396: LD_INT 10
12398: PUSH
12399: LD_INT 20
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 40
12407: PUSH
12408: LD_INT 50
12410: PUSH
12411: LD_INT 60
12413: PUSH
12414: LD_INT 70
12416: PUSH
12417: LD_INT 80
12419: PUSH
12420: LD_INT 90
12422: PUSH
12423: LD_INT 100
12425: PUSH
12426: LD_INT 110
12428: PUSH
12429: LD_INT 120
12431: PUSH
12432: LD_INT 130
12434: PUSH
12435: LD_INT 140
12437: PUSH
12438: LD_INT 150
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 15
12463: PPUSH
12464: CALL_OW 12
12468: ARRAY
12469: ST_TO_ADDR
// if ValidHex ( x , y ) then
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_VAR 0 4
12479: PPUSH
12480: CALL_OW 488
12484: IFFALSE 12507
// begin result := [ x , y ] ;
12486: LD_ADDR_VAR 0 1
12490: PUSH
12491: LD_VAR 0 3
12495: PUSH
12496: LD_VAR 0 4
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
// break ;
12505: GO 12509
// end ; end ;
12507: GO 12309
12509: POP
12510: POP
// if result then
12511: LD_VAR 0 1
12515: IFFALSE 12575
// begin ToLua ( playSibBomb() ) ;
12517: LD_STRING playSibBomb()
12519: PPUSH
12520: CALL_OW 559
// wait ( 0 0$14 ) ;
12524: LD_INT 490
12526: PPUSH
12527: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12531: LD_VAR 0 1
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 2
12547: ARRAY
12548: PPUSH
12549: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12553: LD_VAR 0 1
12557: PUSH
12558: LD_INT 1
12560: ARRAY
12561: PPUSH
12562: LD_VAR 0 1
12566: PUSH
12567: LD_INT 2
12569: ARRAY
12570: PPUSH
12571: CALL_OW 429
// end ; end ;
12575: LD_VAR 0 1
12579: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12580: LD_EXP 8
12584: PUSH
12585: LD_EXP 30
12589: AND
12590: IFFALSE 12602
12592: GO 12594
12594: DISABLE
// YouLost (  ) ;
12595: LD_STRING 
12597: PPUSH
12598: CALL_OW 104
12602: END
// every 0 0$1 trigger StreamModeActive and sFog do
12603: LD_EXP 8
12607: PUSH
12608: LD_EXP 29
12612: AND
12613: IFFALSE 12627
12615: GO 12617
12617: DISABLE
// FogOff ( your_side ) ;
12618: LD_OWVAR 2
12622: PPUSH
12623: CALL_OW 344
12627: END
// every 0 0$1 trigger StreamModeActive and sSun do
12628: LD_EXP 8
12632: PUSH
12633: LD_EXP 31
12637: AND
12638: IFFALSE 12666
12640: GO 12642
12642: DISABLE
// begin solar_recharge_percent := 0 ;
12643: LD_ADDR_OWVAR 79
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12651: LD_INT 10500
12653: PPUSH
12654: CALL_OW 67
// solar_recharge_percent := 100 ;
12658: LD_ADDR_OWVAR 79
12662: PUSH
12663: LD_INT 100
12665: ST_TO_ADDR
// end ;
12666: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12667: LD_EXP 8
12671: PUSH
12672: LD_EXP 32
12676: AND
12677: IFFALSE 12916
12679: GO 12681
12681: DISABLE
12682: LD_INT 0
12684: PPUSH
12685: PPUSH
12686: PPUSH
// begin tmp := [ ] ;
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: EMPTY
12693: ST_TO_ADDR
// for i := 1 to 6 do
12694: LD_ADDR_VAR 0 1
12698: PUSH
12699: DOUBLE
12700: LD_INT 1
12702: DEC
12703: ST_TO_ADDR
12704: LD_INT 6
12706: PUSH
12707: FOR_TO
12708: IFFALSE 12813
// begin uc_nation := nation_nature ;
12710: LD_ADDR_OWVAR 21
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// uc_side := 0 ;
12718: LD_ADDR_OWVAR 20
12722: PUSH
12723: LD_INT 0
12725: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12726: LD_ADDR_OWVAR 29
12730: PUSH
12731: LD_INT 12
12733: PUSH
12734: LD_INT 12
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
// hc_agressivity := 20 ;
12741: LD_ADDR_OWVAR 35
12745: PUSH
12746: LD_INT 20
12748: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12749: LD_ADDR_OWVAR 28
12753: PUSH
12754: LD_INT 17
12756: ST_TO_ADDR
// hc_gallery :=  ;
12757: LD_ADDR_OWVAR 33
12761: PUSH
12762: LD_STRING 
12764: ST_TO_ADDR
// hc_name :=  ;
12765: LD_ADDR_OWVAR 26
12769: PUSH
12770: LD_STRING 
12772: ST_TO_ADDR
// un := CreateHuman ;
12773: LD_ADDR_VAR 0 2
12777: PUSH
12778: CALL_OW 44
12782: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12783: LD_VAR 0 2
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 51
// tmp := tmp ^ un ;
12795: LD_ADDR_VAR 0 3
12799: PUSH
12800: LD_VAR 0 3
12804: PUSH
12805: LD_VAR 0 2
12809: ADD
12810: ST_TO_ADDR
// end ;
12811: GO 12707
12813: POP
12814: POP
// repeat wait ( 0 0$1 ) ;
12815: LD_INT 35
12817: PPUSH
12818: CALL_OW 67
// for un in tmp do
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_VAR 0 3
12831: PUSH
12832: FOR_IN
12833: IFFALSE 12907
// begin if IsDead ( un ) then
12835: LD_VAR 0 2
12839: PPUSH
12840: CALL_OW 301
12844: IFFALSE 12864
// begin tmp := tmp diff un ;
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: LD_VAR 0 3
12855: PUSH
12856: LD_VAR 0 2
12860: DIFF
12861: ST_TO_ADDR
// continue ;
12862: GO 12832
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12864: LD_VAR 0 2
12868: PPUSH
12869: LD_INT 3
12871: PUSH
12872: LD_INT 22
12874: PUSH
12875: LD_INT 0
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 69
12890: PPUSH
12891: LD_VAR 0 2
12895: PPUSH
12896: CALL_OW 74
12900: PPUSH
12901: CALL_OW 115
// end ;
12905: GO 12832
12907: POP
12908: POP
// until not tmp ;
12909: LD_VAR 0 3
12913: NOT
12914: IFFALSE 12815
// end ;
12916: PPOPN 3
12918: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12919: LD_EXP 8
12923: PUSH
12924: LD_EXP 33
12928: AND
12929: IFFALSE 12983
12931: GO 12933
12933: DISABLE
// begin ToLua ( displayTroll(); ) ;
12934: LD_STRING displayTroll();
12936: PPUSH
12937: CALL_OW 559
// wait ( 3 3$00 ) ;
12941: LD_INT 6300
12943: PPUSH
12944: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12948: LD_STRING hideTroll();
12950: PPUSH
12951: CALL_OW 559
// wait ( 1 1$00 ) ;
12955: LD_INT 2100
12957: PPUSH
12958: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12962: LD_STRING displayTroll();
12964: PPUSH
12965: CALL_OW 559
// wait ( 1 1$00 ) ;
12969: LD_INT 2100
12971: PPUSH
12972: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12976: LD_STRING hideTroll();
12978: PPUSH
12979: CALL_OW 559
// end ;
12983: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12984: LD_EXP 8
12988: PUSH
12989: LD_EXP 34
12993: AND
12994: IFFALSE 13057
12996: GO 12998
12998: DISABLE
12999: LD_INT 0
13001: PPUSH
// begin p := 0 ;
13002: LD_ADDR_VAR 0 1
13006: PUSH
13007: LD_INT 0
13009: ST_TO_ADDR
// repeat game_speed := 1 ;
13010: LD_ADDR_OWVAR 65
13014: PUSH
13015: LD_INT 1
13017: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13018: LD_INT 35
13020: PPUSH
13021: CALL_OW 67
// p := p + 1 ;
13025: LD_ADDR_VAR 0 1
13029: PUSH
13030: LD_VAR 0 1
13034: PUSH
13035: LD_INT 1
13037: PLUS
13038: ST_TO_ADDR
// until p >= 60 ;
13039: LD_VAR 0 1
13043: PUSH
13044: LD_INT 60
13046: GREATEREQUAL
13047: IFFALSE 13010
// game_speed := 4 ;
13049: LD_ADDR_OWVAR 65
13053: PUSH
13054: LD_INT 4
13056: ST_TO_ADDR
// end ;
13057: PPOPN 1
13059: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13060: LD_EXP 8
13064: PUSH
13065: LD_EXP 35
13069: AND
13070: IFFALSE 13216
13072: GO 13074
13074: DISABLE
13075: LD_INT 0
13077: PPUSH
13078: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13079: LD_ADDR_VAR 0 1
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_OWVAR 2
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 30
13101: PUSH
13102: LD_INT 0
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 1
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 69
13132: ST_TO_ADDR
// if not depot then
13133: LD_VAR 0 1
13137: NOT
13138: IFFALSE 13142
// exit ;
13140: GO 13216
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: LD_VAR 0 1
13151: PUSH
13152: LD_INT 1
13154: PPUSH
13155: LD_VAR 0 1
13159: PPUSH
13160: CALL_OW 12
13164: ARRAY
13165: PPUSH
13166: CALL_OW 274
13170: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13171: LD_VAR 0 2
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13186: LD_VAR 0 2
13190: PPUSH
13191: LD_INT 2
13193: PPUSH
13194: LD_INT 0
13196: PPUSH
13197: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13201: LD_VAR 0 2
13205: PPUSH
13206: LD_INT 3
13208: PPUSH
13209: LD_INT 0
13211: PPUSH
13212: CALL_OW 277
// end ;
13216: PPOPN 2
13218: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13219: LD_EXP 8
13223: PUSH
13224: LD_EXP 36
13228: AND
13229: IFFALSE 13326
13231: GO 13233
13233: DISABLE
13234: LD_INT 0
13236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13237: LD_ADDR_VAR 0 1
13241: PUSH
13242: LD_INT 22
13244: PUSH
13245: LD_OWVAR 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 3
13266: PUSH
13267: LD_INT 23
13269: PUSH
13270: LD_INT 0
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 69
13290: ST_TO_ADDR
// if not tmp then
13291: LD_VAR 0 1
13295: NOT
13296: IFFALSE 13300
// exit ;
13298: GO 13326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13300: LD_VAR 0 1
13304: PUSH
13305: LD_INT 1
13307: PPUSH
13308: LD_VAR 0 1
13312: PPUSH
13313: CALL_OW 12
13317: ARRAY
13318: PPUSH
13319: LD_INT 200
13321: PPUSH
13322: CALL_OW 234
// end ;
13326: PPOPN 1
13328: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13329: LD_EXP 8
13333: PUSH
13334: LD_EXP 37
13338: AND
13339: IFFALSE 13418
13341: GO 13343
13343: DISABLE
13344: LD_INT 0
13346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13347: LD_ADDR_VAR 0 1
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_OWVAR 2
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 21
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PPUSH
13378: CALL_OW 69
13382: ST_TO_ADDR
// if not tmp then
13383: LD_VAR 0 1
13387: NOT
13388: IFFALSE 13392
// exit ;
13390: GO 13418
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13392: LD_VAR 0 1
13396: PUSH
13397: LD_INT 1
13399: PPUSH
13400: LD_VAR 0 1
13404: PPUSH
13405: CALL_OW 12
13409: ARRAY
13410: PPUSH
13411: LD_INT 60
13413: PPUSH
13414: CALL_OW 234
// end ;
13418: PPOPN 1
13420: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13421: LD_EXP 8
13425: PUSH
13426: LD_EXP 38
13430: AND
13431: IFFALSE 13530
13433: GO 13435
13435: DISABLE
13436: LD_INT 0
13438: PPUSH
13439: PPUSH
// begin enable ;
13440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_OWVAR 2
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 61
13460: PUSH
13461: EMPTY
13462: LIST
13463: PUSH
13464: LD_INT 33
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: PPUSH
13479: CALL_OW 69
13483: ST_TO_ADDR
// if not tmp then
13484: LD_VAR 0 1
13488: NOT
13489: IFFALSE 13493
// exit ;
13491: GO 13530
// for i in tmp do
13493: LD_ADDR_VAR 0 2
13497: PUSH
13498: LD_VAR 0 1
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13528
// if IsControledBy ( i ) then
13506: LD_VAR 0 2
13510: PPUSH
13511: CALL_OW 312
13515: IFFALSE 13526
// ComUnlink ( i ) ;
13517: LD_VAR 0 2
13521: PPUSH
13522: CALL_OW 136
13526: GO 13503
13528: POP
13529: POP
// end ;
13530: PPOPN 2
13532: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13533: LD_EXP 8
13537: PUSH
13538: LD_EXP 39
13542: AND
13543: IFFALSE 13683
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
// begin ToLua ( displayPowell(); ) ;
13552: LD_STRING displayPowell();
13554: PPUSH
13555: CALL_OW 559
// uc_side := 0 ;
13559: LD_ADDR_OWVAR 20
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// uc_nation := 2 ;
13567: LD_ADDR_OWVAR 21
13571: PUSH
13572: LD_INT 2
13574: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13575: LD_ADDR_OWVAR 37
13579: PUSH
13580: LD_INT 14
13582: ST_TO_ADDR
// vc_engine := engine_siberite ;
13583: LD_ADDR_OWVAR 39
13587: PUSH
13588: LD_INT 3
13590: ST_TO_ADDR
// vc_control := control_apeman ;
13591: LD_ADDR_OWVAR 38
13595: PUSH
13596: LD_INT 5
13598: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13599: LD_ADDR_OWVAR 40
13603: PUSH
13604: LD_INT 29
13606: ST_TO_ADDR
// un := CreateVehicle ;
13607: LD_ADDR_VAR 0 2
13611: PUSH
13612: CALL_OW 45
13616: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13617: LD_VAR 0 2
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13629: LD_INT 35
13631: PPUSH
13632: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13636: LD_VAR 0 2
13640: PPUSH
13641: LD_INT 22
13643: PUSH
13644: LD_OWVAR 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PPUSH
13653: CALL_OW 69
13657: PPUSH
13658: LD_VAR 0 2
13662: PPUSH
13663: CALL_OW 74
13667: PPUSH
13668: CALL_OW 115
// until IsDead ( un ) ;
13672: LD_VAR 0 2
13676: PPUSH
13677: CALL_OW 301
13681: IFFALSE 13629
// end ;
13683: PPOPN 2
13685: END
// every 0 0$1 trigger StreamModeActive and sStu do
13686: LD_EXP 8
13690: PUSH
13691: LD_EXP 47
13695: AND
13696: IFFALSE 13712
13698: GO 13700
13700: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13701: LD_STRING displayStucuk();
13703: PPUSH
13704: CALL_OW 559
// ResetFog ;
13708: CALL_OW 335
// end ;
13712: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13713: LD_EXP 8
13717: PUSH
13718: LD_EXP 40
13722: AND
13723: IFFALSE 13864
13725: GO 13727
13727: DISABLE
13728: LD_INT 0
13730: PPUSH
13731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13732: LD_ADDR_VAR 0 2
13736: PUSH
13737: LD_INT 22
13739: PUSH
13740: LD_OWVAR 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 21
13751: PUSH
13752: LD_INT 1
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 69
13767: ST_TO_ADDR
// if not tmp then
13768: LD_VAR 0 2
13772: NOT
13773: IFFALSE 13777
// exit ;
13775: GO 13864
// un := tmp [ rand ( 1 , tmp ) ] ;
13777: LD_ADDR_VAR 0 1
13781: PUSH
13782: LD_VAR 0 2
13786: PUSH
13787: LD_INT 1
13789: PPUSH
13790: LD_VAR 0 2
13794: PPUSH
13795: CALL_OW 12
13799: ARRAY
13800: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 0
13808: PPUSH
13809: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_OWVAR 3
13822: PUSH
13823: LD_VAR 0 1
13827: DIFF
13828: PPUSH
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 74
13838: PPUSH
13839: CALL_OW 115
// wait ( 0 0$20 ) ;
13843: LD_INT 700
13845: PPUSH
13846: CALL_OW 67
// SetSide ( un , your_side ) ;
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_OWVAR 2
13859: PPUSH
13860: CALL_OW 235
// end ;
13864: PPOPN 2
13866: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13867: LD_EXP 8
13871: PUSH
13872: LD_EXP 41
13876: AND
13877: IFFALSE 13983
13879: GO 13881
13881: DISABLE
13882: LD_INT 0
13884: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13885: LD_ADDR_VAR 0 1
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_OWVAR 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: LD_INT 30
13907: PUSH
13908: LD_INT 0
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 30
13917: PUSH
13918: LD_INT 1
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: ST_TO_ADDR
// if not depot then
13939: LD_VAR 0 1
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 13983
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13948: LD_VAR 0 1
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: CALL_OW 250
13961: PPUSH
13962: LD_VAR 0 1
13966: PUSH
13967: LD_INT 1
13969: ARRAY
13970: PPUSH
13971: CALL_OW 251
13975: PPUSH
13976: LD_INT 70
13978: PPUSH
13979: CALL_OW 495
// end ;
13983: PPOPN 1
13985: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13986: LD_EXP 8
13990: PUSH
13991: LD_EXP 42
13995: AND
13996: IFFALSE 14207
13998: GO 14000
14000: DISABLE
14001: LD_INT 0
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
14007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14008: LD_ADDR_VAR 0 5
14012: PUSH
14013: LD_INT 22
14015: PUSH
14016: LD_OWVAR 2
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 21
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: ST_TO_ADDR
// if not tmp then
14044: LD_VAR 0 5
14048: NOT
14049: IFFALSE 14053
// exit ;
14051: GO 14207
// for i in tmp do
14053: LD_ADDR_VAR 0 1
14057: PUSH
14058: LD_VAR 0 5
14062: PUSH
14063: FOR_IN
14064: IFFALSE 14205
// begin d := rand ( 0 , 5 ) ;
14066: LD_ADDR_VAR 0 4
14070: PUSH
14071: LD_INT 0
14073: PPUSH
14074: LD_INT 5
14076: PPUSH
14077: CALL_OW 12
14081: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14082: LD_ADDR_VAR 0 2
14086: PUSH
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 250
14096: PPUSH
14097: LD_VAR 0 4
14101: PPUSH
14102: LD_INT 3
14104: PPUSH
14105: LD_INT 12
14107: PPUSH
14108: CALL_OW 12
14112: PPUSH
14113: CALL_OW 272
14117: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 251
14132: PPUSH
14133: LD_VAR 0 4
14137: PPUSH
14138: LD_INT 3
14140: PPUSH
14141: LD_INT 12
14143: PPUSH
14144: CALL_OW 12
14148: PPUSH
14149: CALL_OW 273
14153: ST_TO_ADDR
// if ValidHex ( x , y ) then
14154: LD_VAR 0 2
14158: PPUSH
14159: LD_VAR 0 3
14163: PPUSH
14164: CALL_OW 488
14168: IFFALSE 14203
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: LD_INT 3
14187: PPUSH
14188: LD_INT 6
14190: PPUSH
14191: CALL_OW 12
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 483
// end ;
14203: GO 14063
14205: POP
14206: POP
// end ;
14207: PPOPN 5
14209: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14210: LD_EXP 8
14214: PUSH
14215: LD_EXP 43
14219: AND
14220: IFFALSE 14314
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
14228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_OWVAR 2
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 32
14248: PUSH
14249: LD_INT 1
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 2
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: PPUSH
14271: CALL_OW 69
14275: ST_TO_ADDR
// if not tmp then
14276: LD_VAR 0 2
14280: NOT
14281: IFFALSE 14285
// exit ;
14283: GO 14314
// for i in tmp do
14285: LD_ADDR_VAR 0 1
14289: PUSH
14290: LD_VAR 0 2
14294: PUSH
14295: FOR_IN
14296: IFFALSE 14312
// SetFuel ( i , 0 ) ;
14298: LD_VAR 0 1
14302: PPUSH
14303: LD_INT 0
14305: PPUSH
14306: CALL_OW 240
14310: GO 14295
14312: POP
14313: POP
// end ;
14314: PPOPN 2
14316: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14317: LD_EXP 8
14321: PUSH
14322: LD_EXP 44
14326: AND
14327: IFFALSE 14393
14329: GO 14331
14331: DISABLE
14332: LD_INT 0
14334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14335: LD_ADDR_VAR 0 1
14339: PUSH
14340: LD_INT 22
14342: PUSH
14343: LD_OWVAR 2
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 30
14354: PUSH
14355: LD_INT 29
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 69
14370: ST_TO_ADDR
// if not tmp then
14371: LD_VAR 0 1
14375: NOT
14376: IFFALSE 14380
// exit ;
14378: GO 14393
// DestroyUnit ( tmp [ 1 ] ) ;
14380: LD_VAR 0 1
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PPUSH
14389: CALL_OW 65
// end ;
14393: PPOPN 1
14395: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14396: LD_EXP 8
14400: PUSH
14401: LD_EXP 46
14405: AND
14406: IFFALSE 14535
14408: GO 14410
14410: DISABLE
14411: LD_INT 0
14413: PPUSH
// begin uc_side := 0 ;
14414: LD_ADDR_OWVAR 20
14418: PUSH
14419: LD_INT 0
14421: ST_TO_ADDR
// uc_nation := nation_arabian ;
14422: LD_ADDR_OWVAR 21
14426: PUSH
14427: LD_INT 2
14429: ST_TO_ADDR
// hc_gallery :=  ;
14430: LD_ADDR_OWVAR 33
14434: PUSH
14435: LD_STRING 
14437: ST_TO_ADDR
// hc_name :=  ;
14438: LD_ADDR_OWVAR 26
14442: PUSH
14443: LD_STRING 
14445: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14446: LD_INT 1
14448: PPUSH
14449: LD_INT 11
14451: PPUSH
14452: LD_INT 10
14454: PPUSH
14455: CALL_OW 380
// un := CreateHuman ;
14459: LD_ADDR_VAR 0 1
14463: PUSH
14464: CALL_OW 44
14468: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14481: LD_INT 35
14483: PPUSH
14484: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14488: LD_VAR 0 1
14492: PPUSH
14493: LD_INT 22
14495: PUSH
14496: LD_OWVAR 2
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: PPUSH
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 74
14519: PPUSH
14520: CALL_OW 115
// until IsDead ( un ) ;
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 301
14533: IFFALSE 14481
// end ;
14535: PPOPN 1
14537: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14538: LD_EXP 8
14542: PUSH
14543: LD_EXP 48
14547: AND
14548: IFFALSE 14560
14550: GO 14552
14552: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14553: LD_STRING earthquake(getX(game), 0, 32)
14555: PPUSH
14556: CALL_OW 559
14560: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14561: LD_EXP 8
14565: PUSH
14566: LD_EXP 49
14570: AND
14571: IFFALSE 14662
14573: GO 14575
14575: DISABLE
14576: LD_INT 0
14578: PPUSH
// begin enable ;
14579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_OWVAR 2
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 21
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 33
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 69
14626: ST_TO_ADDR
// if not tmp then
14627: LD_VAR 0 1
14631: NOT
14632: IFFALSE 14636
// exit ;
14634: GO 14662
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14636: LD_VAR 0 1
14640: PUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 1
14648: PPUSH
14649: CALL_OW 12
14653: ARRAY
14654: PPUSH
14655: LD_INT 1
14657: PPUSH
14658: CALL_OW 234
// end ;
14662: PPOPN 1
14664: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14665: LD_EXP 8
14669: PUSH
14670: LD_EXP 50
14674: AND
14675: IFFALSE 14816
14677: GO 14679
14679: DISABLE
14680: LD_INT 0
14682: PPUSH
14683: PPUSH
14684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_OWVAR 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 25
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 69
14720: ST_TO_ADDR
// if not tmp then
14721: LD_VAR 0 3
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14816
// un := tmp [ rand ( 1 , tmp ) ] ;
14730: LD_ADDR_VAR 0 2
14734: PUSH
14735: LD_VAR 0 3
14739: PUSH
14740: LD_INT 1
14742: PPUSH
14743: LD_VAR 0 3
14747: PPUSH
14748: CALL_OW 12
14752: ARRAY
14753: ST_TO_ADDR
// if Crawls ( un ) then
14754: LD_VAR 0 2
14758: PPUSH
14759: CALL_OW 318
14763: IFFALSE 14774
// ComWalk ( un ) ;
14765: LD_VAR 0 2
14769: PPUSH
14770: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14774: LD_VAR 0 2
14778: PPUSH
14779: LD_INT 9
14781: PPUSH
14782: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14786: LD_INT 28
14788: PPUSH
14789: LD_OWVAR 2
14793: PPUSH
14794: LD_INT 2
14796: PPUSH
14797: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14801: LD_INT 29
14803: PPUSH
14804: LD_OWVAR 2
14808: PPUSH
14809: LD_INT 2
14811: PPUSH
14812: CALL_OW 322
// end ;
14816: PPOPN 3
14818: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14819: LD_EXP 8
14823: PUSH
14824: LD_EXP 51
14828: AND
14829: IFFALSE 14940
14831: GO 14833
14833: DISABLE
14834: LD_INT 0
14836: PPUSH
14837: PPUSH
14838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14839: LD_ADDR_VAR 0 3
14843: PUSH
14844: LD_INT 22
14846: PUSH
14847: LD_OWVAR 2
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if not tmp then
14875: LD_VAR 0 3
14879: NOT
14880: IFFALSE 14884
// exit ;
14882: GO 14940
// un := tmp [ rand ( 1 , tmp ) ] ;
14884: LD_ADDR_VAR 0 2
14888: PUSH
14889: LD_VAR 0 3
14893: PUSH
14894: LD_INT 1
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: CALL_OW 12
14906: ARRAY
14907: ST_TO_ADDR
// if Crawls ( un ) then
14908: LD_VAR 0 2
14912: PPUSH
14913: CALL_OW 318
14917: IFFALSE 14928
// ComWalk ( un ) ;
14919: LD_VAR 0 2
14923: PPUSH
14924: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14928: LD_VAR 0 2
14932: PPUSH
14933: LD_INT 8
14935: PPUSH
14936: CALL_OW 336
// end ;
14940: PPOPN 3
14942: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14943: LD_EXP 8
14947: PUSH
14948: LD_EXP 52
14952: AND
14953: IFFALSE 15097
14955: GO 14957
14957: DISABLE
14958: LD_INT 0
14960: PPUSH
14961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_OWVAR 2
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: LD_INT 34
14994: PUSH
14995: LD_INT 12
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 34
15004: PUSH
15005: LD_INT 51
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 34
15014: PUSH
15015: LD_INT 32
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 69
15037: ST_TO_ADDR
// if not tmp then
15038: LD_VAR 0 2
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15097
// for i in tmp do
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_VAR 0 2
15056: PUSH
15057: FOR_IN
15058: IFFALSE 15095
// if GetCargo ( i , mat_artifact ) = 0 then
15060: LD_VAR 0 1
15064: PPUSH
15065: LD_INT 4
15067: PPUSH
15068: CALL_OW 289
15072: PUSH
15073: LD_INT 0
15075: EQUAL
15076: IFFALSE 15093
// SetCargo ( i , mat_siberit , 100 ) ;
15078: LD_VAR 0 1
15082: PPUSH
15083: LD_INT 3
15085: PPUSH
15086: LD_INT 100
15088: PPUSH
15089: CALL_OW 290
15093: GO 15057
15095: POP
15096: POP
// end ;
15097: PPOPN 2
15099: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15100: LD_EXP 8
15104: PUSH
15105: LD_EXP 53
15109: AND
15110: IFFALSE 15293
15112: GO 15114
15114: DISABLE
15115: LD_INT 0
15117: PPUSH
15118: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: LD_OWVAR 2
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: ST_TO_ADDR
// if not tmp then
15141: LD_VAR 0 2
15145: NOT
15146: IFFALSE 15150
// exit ;
15148: GO 15293
// for i := 1 to 2 do
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: DOUBLE
15156: LD_INT 1
15158: DEC
15159: ST_TO_ADDR
15160: LD_INT 2
15162: PUSH
15163: FOR_TO
15164: IFFALSE 15291
// begin uc_side := your_side ;
15166: LD_ADDR_OWVAR 20
15170: PUSH
15171: LD_OWVAR 2
15175: ST_TO_ADDR
// uc_nation := nation_american ;
15176: LD_ADDR_OWVAR 21
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// vc_chassis := us_morphling ;
15184: LD_ADDR_OWVAR 37
15188: PUSH
15189: LD_INT 5
15191: ST_TO_ADDR
// vc_engine := engine_siberite ;
15192: LD_ADDR_OWVAR 39
15196: PUSH
15197: LD_INT 3
15199: ST_TO_ADDR
// vc_control := control_computer ;
15200: LD_ADDR_OWVAR 38
15204: PUSH
15205: LD_INT 3
15207: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15208: LD_ADDR_OWVAR 40
15212: PUSH
15213: LD_INT 10
15215: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15216: LD_VAR 0 2
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: CALL_OW 310
15229: NOT
15230: IFFALSE 15277
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15232: CALL_OW 45
15236: PPUSH
15237: LD_VAR 0 2
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: PPUSH
15246: CALL_OW 250
15250: PPUSH
15251: LD_VAR 0 2
15255: PUSH
15256: LD_INT 1
15258: ARRAY
15259: PPUSH
15260: CALL_OW 251
15264: PPUSH
15265: LD_INT 12
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 50
15275: GO 15289
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15277: CALL_OW 45
15281: PPUSH
15282: LD_INT 1
15284: PPUSH
15285: CALL_OW 51
// end ;
15289: GO 15163
15291: POP
15292: POP
// end ;
15293: PPOPN 2
15295: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15296: LD_EXP 8
15300: PUSH
15301: LD_EXP 54
15305: AND
15306: IFFALSE 15528
15308: GO 15310
15310: DISABLE
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
15317: PPUSH
15318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15319: LD_ADDR_VAR 0 6
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_OWVAR 2
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 21
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 3
15348: PUSH
15349: LD_INT 23
15351: PUSH
15352: LD_INT 0
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: ST_TO_ADDR
// if not tmp then
15373: LD_VAR 0 6
15377: NOT
15378: IFFALSE 15382
// exit ;
15380: GO 15528
// s1 := rand ( 1 , 4 ) ;
15382: LD_ADDR_VAR 0 2
15386: PUSH
15387: LD_INT 1
15389: PPUSH
15390: LD_INT 4
15392: PPUSH
15393: CALL_OW 12
15397: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15398: LD_ADDR_VAR 0 4
15402: PUSH
15403: LD_VAR 0 6
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: LD_VAR 0 2
15416: PPUSH
15417: CALL_OW 259
15421: ST_TO_ADDR
// if s1 = 1 then
15422: LD_VAR 0 2
15426: PUSH
15427: LD_INT 1
15429: EQUAL
15430: IFFALSE 15450
// s2 := rand ( 2 , 4 ) else
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_INT 2
15439: PPUSH
15440: LD_INT 4
15442: PPUSH
15443: CALL_OW 12
15447: ST_TO_ADDR
15448: GO 15458
// s2 := 1 ;
15450: LD_ADDR_VAR 0 3
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15458: LD_ADDR_VAR 0 5
15462: PUSH
15463: LD_VAR 0 6
15467: PUSH
15468: LD_INT 1
15470: ARRAY
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 259
15481: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15482: LD_VAR 0 6
15486: PUSH
15487: LD_INT 1
15489: ARRAY
15490: PPUSH
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_VAR 0 5
15500: PPUSH
15501: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15505: LD_VAR 0 6
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 3
15518: PPUSH
15519: LD_VAR 0 4
15523: PPUSH
15524: CALL_OW 237
// end ;
15528: PPOPN 6
15530: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15531: LD_EXP 8
15535: PUSH
15536: LD_EXP 55
15540: AND
15541: IFFALSE 15620
15543: GO 15545
15545: DISABLE
15546: LD_INT 0
15548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15549: LD_ADDR_VAR 0 1
15553: PUSH
15554: LD_INT 22
15556: PUSH
15557: LD_OWVAR 2
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 30
15568: PUSH
15569: LD_INT 3
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 69
15584: ST_TO_ADDR
// if not tmp then
15585: LD_VAR 0 1
15589: NOT
15590: IFFALSE 15594
// exit ;
15592: GO 15620
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15594: LD_VAR 0 1
15598: PUSH
15599: LD_INT 1
15601: PPUSH
15602: LD_VAR 0 1
15606: PPUSH
15607: CALL_OW 12
15611: ARRAY
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 234
// end ;
15620: PPOPN 1
15622: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15623: LD_EXP 8
15627: PUSH
15628: LD_EXP 56
15632: AND
15633: IFFALSE 15745
15635: GO 15637
15637: DISABLE
15638: LD_INT 0
15640: PPUSH
15641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15642: LD_ADDR_VAR 0 2
15646: PUSH
15647: LD_INT 22
15649: PUSH
15650: LD_OWVAR 2
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 2
15661: PUSH
15662: LD_INT 30
15664: PUSH
15665: LD_INT 27
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 30
15674: PUSH
15675: LD_INT 26
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 28
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 69
15706: ST_TO_ADDR
// if not tmp then
15707: LD_VAR 0 2
15711: NOT
15712: IFFALSE 15716
// exit ;
15714: GO 15745
// for i in tmp do
15716: LD_ADDR_VAR 0 1
15720: PUSH
15721: LD_VAR 0 2
15725: PUSH
15726: FOR_IN
15727: IFFALSE 15743
// SetLives ( i , 1 ) ;
15729: LD_VAR 0 1
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 234
15741: GO 15726
15743: POP
15744: POP
// end ;
15745: PPOPN 2
15747: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15748: LD_EXP 8
15752: PUSH
15753: LD_EXP 57
15757: AND
15758: IFFALSE 16045
15760: GO 15762
15762: DISABLE
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
15767: PPUSH
// begin i := rand ( 1 , 7 ) ;
15768: LD_ADDR_VAR 0 1
15772: PUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 7
15778: PPUSH
15779: CALL_OW 12
15783: ST_TO_ADDR
// case i of 1 :
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: DOUBLE
15792: EQUAL
15793: IFTRUE 15797
15795: GO 15807
15797: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15798: LD_STRING earthquake(getX(game), 0, 32)
15800: PPUSH
15801: CALL_OW 559
15805: GO 16045
15807: LD_INT 2
15809: DOUBLE
15810: EQUAL
15811: IFTRUE 15815
15813: GO 15829
15815: POP
// begin ToLua ( displayStucuk(); ) ;
15816: LD_STRING displayStucuk();
15818: PPUSH
15819: CALL_OW 559
// ResetFog ;
15823: CALL_OW 335
// end ; 3 :
15827: GO 16045
15829: LD_INT 3
15831: DOUBLE
15832: EQUAL
15833: IFTRUE 15837
15835: GO 15941
15837: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15838: LD_ADDR_VAR 0 2
15842: PUSH
15843: LD_INT 22
15845: PUSH
15846: LD_OWVAR 2
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 25
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 69
15873: ST_TO_ADDR
// if not tmp then
15874: LD_VAR 0 2
15878: NOT
15879: IFFALSE 15883
// exit ;
15881: GO 16045
// un := tmp [ rand ( 1 , tmp ) ] ;
15883: LD_ADDR_VAR 0 3
15887: PUSH
15888: LD_VAR 0 2
15892: PUSH
15893: LD_INT 1
15895: PPUSH
15896: LD_VAR 0 2
15900: PPUSH
15901: CALL_OW 12
15905: ARRAY
15906: ST_TO_ADDR
// if Crawls ( un ) then
15907: LD_VAR 0 3
15911: PPUSH
15912: CALL_OW 318
15916: IFFALSE 15927
// ComWalk ( un ) ;
15918: LD_VAR 0 3
15922: PPUSH
15923: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 8
15934: PPUSH
15935: CALL_OW 336
// end ; 4 :
15939: GO 16045
15941: LD_INT 4
15943: DOUBLE
15944: EQUAL
15945: IFTRUE 15949
15947: GO 16023
15949: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15950: LD_ADDR_VAR 0 2
15954: PUSH
15955: LD_INT 22
15957: PUSH
15958: LD_OWVAR 2
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: LD_INT 29
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: ST_TO_ADDR
// if not tmp then
15986: LD_VAR 0 2
15990: NOT
15991: IFFALSE 15995
// exit ;
15993: GO 16045
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15995: LD_VAR 0 2
15999: PUSH
16000: LD_INT 1
16002: ARRAY
16003: PPUSH
16004: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16008: LD_VAR 0 2
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PPUSH
16017: CALL_OW 65
// end ; 5 .. 7 :
16021: GO 16045
16023: LD_INT 5
16025: DOUBLE
16026: GREATEREQUAL
16027: IFFALSE 16035
16029: LD_INT 7
16031: DOUBLE
16032: LESSEQUAL
16033: IFTRUE 16037
16035: GO 16044
16037: POP
// StreamSibBomb ; end ;
16038: CALL 12282 0 0
16042: GO 16045
16044: POP
// end ;
16045: PPOPN 3
16047: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16048: LD_EXP 8
16052: PUSH
16053: LD_EXP 58
16057: AND
16058: IFFALSE 16214
16060: GO 16062
16062: DISABLE
16063: LD_INT 0
16065: PPUSH
16066: PPUSH
16067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 81
16075: PUSH
16076: LD_OWVAR 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: LD_INT 21
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 2
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16214
// p := 0 ;
16131: LD_ADDR_VAR 0 3
16135: PUSH
16136: LD_INT 0
16138: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16139: LD_INT 35
16141: PPUSH
16142: CALL_OW 67
// p := p + 1 ;
16146: LD_ADDR_VAR 0 3
16150: PUSH
16151: LD_VAR 0 3
16155: PUSH
16156: LD_INT 1
16158: PLUS
16159: ST_TO_ADDR
// for i in tmp do
16160: LD_ADDR_VAR 0 1
16164: PUSH
16165: LD_VAR 0 2
16169: PUSH
16170: FOR_IN
16171: IFFALSE 16202
// if GetLives ( i ) < 1000 then
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 256
16182: PUSH
16183: LD_INT 1000
16185: LESS
16186: IFFALSE 16200
// SetLives ( i , 1000 ) ;
16188: LD_VAR 0 1
16192: PPUSH
16193: LD_INT 1000
16195: PPUSH
16196: CALL_OW 234
16200: GO 16170
16202: POP
16203: POP
// until p > 20 ;
16204: LD_VAR 0 3
16208: PUSH
16209: LD_INT 20
16211: GREATER
16212: IFFALSE 16139
// end ;
16214: PPOPN 3
16216: END
// every 0 0$1 trigger StreamModeActive and sTime do
16217: LD_EXP 8
16221: PUSH
16222: LD_EXP 59
16226: AND
16227: IFFALSE 16262
16229: GO 16231
16231: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16232: LD_INT 28
16234: PPUSH
16235: LD_OWVAR 2
16239: PPUSH
16240: LD_INT 2
16242: PPUSH
16243: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16247: LD_INT 30
16249: PPUSH
16250: LD_OWVAR 2
16254: PPUSH
16255: LD_INT 2
16257: PPUSH
16258: CALL_OW 322
// end ;
16262: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16263: LD_EXP 8
16267: PUSH
16268: LD_EXP 60
16272: AND
16273: IFFALSE 16394
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16282: LD_ADDR_VAR 0 2
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_OWVAR 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 21
16301: PUSH
16302: LD_INT 1
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 3
16311: PUSH
16312: LD_INT 23
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: PPUSH
16331: CALL_OW 69
16335: ST_TO_ADDR
// if not tmp then
16336: LD_VAR 0 2
16340: NOT
16341: IFFALSE 16345
// exit ;
16343: GO 16394
// for i in tmp do
16345: LD_ADDR_VAR 0 1
16349: PUSH
16350: LD_VAR 0 2
16354: PUSH
16355: FOR_IN
16356: IFFALSE 16392
// begin if Crawls ( i ) then
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 318
16367: IFFALSE 16378
// ComWalk ( i ) ;
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 138
// SetClass ( i , 2 ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_INT 2
16385: PPUSH
16386: CALL_OW 336
// end ;
16390: GO 16355
16392: POP
16393: POP
// end ;
16394: PPOPN 2
16396: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16397: LD_EXP 8
16401: PUSH
16402: LD_EXP 61
16406: AND
16407: IFFALSE 16695
16409: GO 16411
16411: DISABLE
16412: LD_INT 0
16414: PPUSH
16415: PPUSH
16416: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16417: LD_OWVAR 2
16421: PPUSH
16422: LD_INT 9
16424: PPUSH
16425: LD_INT 1
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16435: LD_INT 9
16437: PPUSH
16438: LD_OWVAR 2
16442: PPUSH
16443: CALL_OW 343
// uc_side := 9 ;
16447: LD_ADDR_OWVAR 20
16451: PUSH
16452: LD_INT 9
16454: ST_TO_ADDR
// uc_nation := 2 ;
16455: LD_ADDR_OWVAR 21
16459: PUSH
16460: LD_INT 2
16462: ST_TO_ADDR
// hc_name := Dark Warrior ;
16463: LD_ADDR_OWVAR 26
16467: PUSH
16468: LD_STRING Dark Warrior
16470: ST_TO_ADDR
// hc_gallery :=  ;
16471: LD_ADDR_OWVAR 33
16475: PUSH
16476: LD_STRING 
16478: ST_TO_ADDR
// hc_noskilllimit := true ;
16479: LD_ADDR_OWVAR 76
16483: PUSH
16484: LD_INT 1
16486: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16487: LD_ADDR_OWVAR 31
16491: PUSH
16492: LD_INT 30
16494: PUSH
16495: LD_INT 30
16497: PUSH
16498: LD_INT 30
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: ST_TO_ADDR
// un := CreateHuman ;
16510: LD_ADDR_VAR 0 3
16514: PUSH
16515: CALL_OW 44
16519: ST_TO_ADDR
// hc_noskilllimit := false ;
16520: LD_ADDR_OWVAR 76
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16528: LD_VAR 0 3
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 51
// ToLua ( playRanger() ) ;
16540: LD_STRING playRanger()
16542: PPUSH
16543: CALL_OW 559
// p := 0 ;
16547: LD_ADDR_VAR 0 2
16551: PUSH
16552: LD_INT 0
16554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16555: LD_INT 35
16557: PPUSH
16558: CALL_OW 67
// p := p + 1 ;
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: LD_VAR 0 2
16571: PUSH
16572: LD_INT 1
16574: PLUS
16575: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16576: LD_VAR 0 3
16580: PPUSH
16581: CALL_OW 256
16585: PUSH
16586: LD_INT 1000
16588: LESS
16589: IFFALSE 16603
// SetLives ( un , 1000 ) ;
16591: LD_VAR 0 3
16595: PPUSH
16596: LD_INT 1000
16598: PPUSH
16599: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16603: LD_VAR 0 3
16607: PPUSH
16608: LD_INT 81
16610: PUSH
16611: LD_OWVAR 2
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 91
16622: PUSH
16623: LD_VAR 0 3
16627: PUSH
16628: LD_INT 30
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PPUSH
16640: CALL_OW 69
16644: PPUSH
16645: LD_VAR 0 3
16649: PPUSH
16650: CALL_OW 74
16654: PPUSH
16655: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16659: LD_VAR 0 2
16663: PUSH
16664: LD_INT 80
16666: GREATER
16667: PUSH
16668: LD_VAR 0 3
16672: PPUSH
16673: CALL_OW 301
16677: OR
16678: IFFALSE 16555
// if un then
16680: LD_VAR 0 3
16684: IFFALSE 16695
// RemoveUnit ( un ) ;
16686: LD_VAR 0 3
16690: PPUSH
16691: CALL_OW 64
// end ;
16695: PPOPN 3
16697: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16698: LD_EXP 62
16702: IFFALSE 16818
16704: GO 16706
16706: DISABLE
16707: LD_INT 0
16709: PPUSH
16710: PPUSH
16711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: LD_INT 81
16719: PUSH
16720: LD_OWVAR 2
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 21
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PPUSH
16743: CALL_OW 69
16747: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16748: LD_STRING playComputer()
16750: PPUSH
16751: CALL_OW 559
// if not tmp then
16755: LD_VAR 0 2
16759: NOT
16760: IFFALSE 16764
// exit ;
16762: GO 16818
// for i in tmp do
16764: LD_ADDR_VAR 0 1
16768: PUSH
16769: LD_VAR 0 2
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16816
// for j := 1 to 4 do
16777: LD_ADDR_VAR 0 3
16781: PUSH
16782: DOUBLE
16783: LD_INT 1
16785: DEC
16786: ST_TO_ADDR
16787: LD_INT 4
16789: PUSH
16790: FOR_TO
16791: IFFALSE 16812
// SetSkill ( i , j , 10 ) ;
16793: LD_VAR 0 1
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 10
16805: PPUSH
16806: CALL_OW 237
16810: GO 16790
16812: POP
16813: POP
16814: GO 16774
16816: POP
16817: POP
// end ;
16818: PPOPN 3
16820: END
// every 0 0$1 trigger s30 do var i , tmp ;
16821: LD_EXP 63
16825: IFFALSE 16894
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16834: LD_ADDR_VAR 0 2
16838: PUSH
16839: LD_INT 22
16841: PUSH
16842: LD_OWVAR 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 69
16855: ST_TO_ADDR
// if not tmp then
16856: LD_VAR 0 2
16860: NOT
16861: IFFALSE 16865
// exit ;
16863: GO 16894
// for i in tmp do
16865: LD_ADDR_VAR 0 1
16869: PUSH
16870: LD_VAR 0 2
16874: PUSH
16875: FOR_IN
16876: IFFALSE 16892
// SetLives ( i , 300 ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_INT 300
16885: PPUSH
16886: CALL_OW 234
16890: GO 16875
16892: POP
16893: POP
// end ;
16894: PPOPN 2
16896: END
// every 0 0$1 trigger s60 do var i , tmp ;
16897: LD_EXP 64
16901: IFFALSE 16970
16903: GO 16905
16905: DISABLE
16906: LD_INT 0
16908: PPUSH
16909: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16910: LD_ADDR_VAR 0 2
16914: PUSH
16915: LD_INT 22
16917: PUSH
16918: LD_OWVAR 2
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PPUSH
16927: CALL_OW 69
16931: ST_TO_ADDR
// if not tmp then
16932: LD_VAR 0 2
16936: NOT
16937: IFFALSE 16941
// exit ;
16939: GO 16970
// for i in tmp do
16941: LD_ADDR_VAR 0 1
16945: PUSH
16946: LD_VAR 0 2
16950: PUSH
16951: FOR_IN
16952: IFFALSE 16968
// SetLives ( i , 600 ) ;
16954: LD_VAR 0 1
16958: PPUSH
16959: LD_INT 600
16961: PPUSH
16962: CALL_OW 234
16966: GO 16951
16968: POP
16969: POP
// end ;
16970: PPOPN 2
16972: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16973: LD_INT 0
16975: PPUSH
// case cmd of 301 :
16976: LD_VAR 0 1
16980: PUSH
16981: LD_INT 301
16983: DOUBLE
16984: EQUAL
16985: IFTRUE 16989
16987: GO 17021
16989: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16990: LD_VAR 0 6
16994: PPUSH
16995: LD_VAR 0 7
16999: PPUSH
17000: LD_VAR 0 8
17004: PPUSH
17005: LD_VAR 0 4
17009: PPUSH
17010: LD_VAR 0 5
17014: PPUSH
17015: CALL 18222 0 5
17019: GO 17142
17021: LD_INT 302
17023: DOUBLE
17024: EQUAL
17025: IFTRUE 17029
17027: GO 17066
17029: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17030: LD_VAR 0 6
17034: PPUSH
17035: LD_VAR 0 7
17039: PPUSH
17040: LD_VAR 0 8
17044: PPUSH
17045: LD_VAR 0 9
17049: PPUSH
17050: LD_VAR 0 4
17054: PPUSH
17055: LD_VAR 0 5
17059: PPUSH
17060: CALL 18313 0 6
17064: GO 17142
17066: LD_INT 303
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17111
17074: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17075: LD_VAR 0 6
17079: PPUSH
17080: LD_VAR 0 7
17084: PPUSH
17085: LD_VAR 0 8
17089: PPUSH
17090: LD_VAR 0 9
17094: PPUSH
17095: LD_VAR 0 4
17099: PPUSH
17100: LD_VAR 0 5
17104: PPUSH
17105: CALL 17147 0 6
17109: GO 17142
17111: LD_INT 304
17113: DOUBLE
17114: EQUAL
17115: IFTRUE 17119
17117: GO 17141
17119: POP
// hHackTeleport ( unit , x , y ) ; end ;
17120: LD_VAR 0 2
17124: PPUSH
17125: LD_VAR 0 4
17129: PPUSH
17130: LD_VAR 0 5
17134: PPUSH
17135: CALL 18906 0 3
17139: GO 17142
17141: POP
// end ;
17142: LD_VAR 0 12
17146: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17151: LD_VAR 0 1
17155: PUSH
17156: LD_INT 1
17158: LESS
17159: PUSH
17160: LD_VAR 0 1
17164: PUSH
17165: LD_INT 3
17167: GREATER
17168: OR
17169: PUSH
17170: LD_VAR 0 5
17174: PPUSH
17175: LD_VAR 0 6
17179: PPUSH
17180: CALL_OW 428
17184: OR
17185: IFFALSE 17189
// exit ;
17187: GO 17909
// uc_side := your_side ;
17189: LD_ADDR_OWVAR 20
17193: PUSH
17194: LD_OWVAR 2
17198: ST_TO_ADDR
// uc_nation := nation ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_VAR 0 1
17208: ST_TO_ADDR
// bc_level = 1 ;
17209: LD_ADDR_OWVAR 43
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// case btype of 1 :
17217: LD_VAR 0 2
17221: PUSH
17222: LD_INT 1
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 17241
17230: POP
// bc_type := b_depot ; 2 :
17231: LD_ADDR_OWVAR 42
17235: PUSH
17236: LD_INT 0
17238: ST_TO_ADDR
17239: GO 17853
17241: LD_INT 2
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17260
17249: POP
// bc_type := b_warehouse ; 3 :
17250: LD_ADDR_OWVAR 42
17254: PUSH
17255: LD_INT 1
17257: ST_TO_ADDR
17258: GO 17853
17260: LD_INT 3
17262: DOUBLE
17263: EQUAL
17264: IFTRUE 17268
17266: GO 17279
17268: POP
// bc_type := b_lab ; 4 .. 9 :
17269: LD_ADDR_OWVAR 42
17273: PUSH
17274: LD_INT 6
17276: ST_TO_ADDR
17277: GO 17853
17279: LD_INT 4
17281: DOUBLE
17282: GREATEREQUAL
17283: IFFALSE 17291
17285: LD_INT 9
17287: DOUBLE
17288: LESSEQUAL
17289: IFTRUE 17293
17291: GO 17345
17293: POP
// begin bc_type := b_lab_half ;
17294: LD_ADDR_OWVAR 42
17298: PUSH
17299: LD_INT 7
17301: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17302: LD_ADDR_OWVAR 44
17306: PUSH
17307: LD_INT 10
17309: PUSH
17310: LD_INT 11
17312: PUSH
17313: LD_INT 12
17315: PUSH
17316: LD_INT 15
17318: PUSH
17319: LD_INT 14
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: LD_VAR 0 2
17337: PUSH
17338: LD_INT 3
17340: MINUS
17341: ARRAY
17342: ST_TO_ADDR
// end ; 10 .. 13 :
17343: GO 17853
17345: LD_INT 10
17347: DOUBLE
17348: GREATEREQUAL
17349: IFFALSE 17357
17351: LD_INT 13
17353: DOUBLE
17354: LESSEQUAL
17355: IFTRUE 17359
17357: GO 17436
17359: POP
// begin bc_type := b_lab_full ;
17360: LD_ADDR_OWVAR 42
17364: PUSH
17365: LD_INT 8
17367: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17368: LD_ADDR_OWVAR 44
17372: PUSH
17373: LD_INT 10
17375: PUSH
17376: LD_INT 12
17378: PUSH
17379: LD_INT 14
17381: PUSH
17382: LD_INT 13
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: PUSH
17391: LD_VAR 0 2
17395: PUSH
17396: LD_INT 9
17398: MINUS
17399: ARRAY
17400: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17401: LD_ADDR_OWVAR 45
17405: PUSH
17406: LD_INT 11
17408: PUSH
17409: LD_INT 15
17411: PUSH
17412: LD_INT 12
17414: PUSH
17415: LD_INT 15
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: LD_VAR 0 2
17428: PUSH
17429: LD_INT 9
17431: MINUS
17432: ARRAY
17433: ST_TO_ADDR
// end ; 14 :
17434: GO 17853
17436: LD_INT 14
17438: DOUBLE
17439: EQUAL
17440: IFTRUE 17444
17442: GO 17455
17444: POP
// bc_type := b_workshop ; 15 :
17445: LD_ADDR_OWVAR 42
17449: PUSH
17450: LD_INT 2
17452: ST_TO_ADDR
17453: GO 17853
17455: LD_INT 15
17457: DOUBLE
17458: EQUAL
17459: IFTRUE 17463
17461: GO 17474
17463: POP
// bc_type := b_factory ; 16 :
17464: LD_ADDR_OWVAR 42
17468: PUSH
17469: LD_INT 3
17471: ST_TO_ADDR
17472: GO 17853
17474: LD_INT 16
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17493
17482: POP
// bc_type := b_ext_gun ; 17 :
17483: LD_ADDR_OWVAR 42
17487: PUSH
17488: LD_INT 17
17490: ST_TO_ADDR
17491: GO 17853
17493: LD_INT 17
17495: DOUBLE
17496: EQUAL
17497: IFTRUE 17501
17499: GO 17529
17501: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17502: LD_ADDR_OWVAR 42
17506: PUSH
17507: LD_INT 19
17509: PUSH
17510: LD_INT 23
17512: PUSH
17513: LD_INT 19
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: LD_VAR 0 1
17525: ARRAY
17526: ST_TO_ADDR
17527: GO 17853
17529: LD_INT 18
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 17548
17537: POP
// bc_type := b_ext_radar ; 19 :
17538: LD_ADDR_OWVAR 42
17542: PUSH
17543: LD_INT 20
17545: ST_TO_ADDR
17546: GO 17853
17548: LD_INT 19
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17567
17556: POP
// bc_type := b_ext_radio ; 20 :
17557: LD_ADDR_OWVAR 42
17561: PUSH
17562: LD_INT 22
17564: ST_TO_ADDR
17565: GO 17853
17567: LD_INT 20
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17586
17575: POP
// bc_type := b_ext_siberium ; 21 :
17576: LD_ADDR_OWVAR 42
17580: PUSH
17581: LD_INT 21
17583: ST_TO_ADDR
17584: GO 17853
17586: LD_INT 21
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17605
17594: POP
// bc_type := b_ext_computer ; 22 :
17595: LD_ADDR_OWVAR 42
17599: PUSH
17600: LD_INT 24
17602: ST_TO_ADDR
17603: GO 17853
17605: LD_INT 22
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17624
17613: POP
// bc_type := b_ext_track ; 23 :
17614: LD_ADDR_OWVAR 42
17618: PUSH
17619: LD_INT 16
17621: ST_TO_ADDR
17622: GO 17853
17624: LD_INT 23
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17643
17632: POP
// bc_type := b_ext_laser ; 24 :
17633: LD_ADDR_OWVAR 42
17637: PUSH
17638: LD_INT 25
17640: ST_TO_ADDR
17641: GO 17853
17643: LD_INT 24
17645: DOUBLE
17646: EQUAL
17647: IFTRUE 17651
17649: GO 17662
17651: POP
// bc_type := b_control_tower ; 25 :
17652: LD_ADDR_OWVAR 42
17656: PUSH
17657: LD_INT 36
17659: ST_TO_ADDR
17660: GO 17853
17662: LD_INT 25
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17681
17670: POP
// bc_type := b_breastwork ; 26 :
17671: LD_ADDR_OWVAR 42
17675: PUSH
17676: LD_INT 31
17678: ST_TO_ADDR
17679: GO 17853
17681: LD_INT 26
17683: DOUBLE
17684: EQUAL
17685: IFTRUE 17689
17687: GO 17700
17689: POP
// bc_type := b_bunker ; 27 :
17690: LD_ADDR_OWVAR 42
17694: PUSH
17695: LD_INT 32
17697: ST_TO_ADDR
17698: GO 17853
17700: LD_INT 27
17702: DOUBLE
17703: EQUAL
17704: IFTRUE 17708
17706: GO 17719
17708: POP
// bc_type := b_turret ; 28 :
17709: LD_ADDR_OWVAR 42
17713: PUSH
17714: LD_INT 33
17716: ST_TO_ADDR
17717: GO 17853
17719: LD_INT 28
17721: DOUBLE
17722: EQUAL
17723: IFTRUE 17727
17725: GO 17738
17727: POP
// bc_type := b_armoury ; 29 :
17728: LD_ADDR_OWVAR 42
17732: PUSH
17733: LD_INT 4
17735: ST_TO_ADDR
17736: GO 17853
17738: LD_INT 29
17740: DOUBLE
17741: EQUAL
17742: IFTRUE 17746
17744: GO 17757
17746: POP
// bc_type := b_barracks ; 30 :
17747: LD_ADDR_OWVAR 42
17751: PUSH
17752: LD_INT 5
17754: ST_TO_ADDR
17755: GO 17853
17757: LD_INT 30
17759: DOUBLE
17760: EQUAL
17761: IFTRUE 17765
17763: GO 17776
17765: POP
// bc_type := b_solar_power ; 31 :
17766: LD_ADDR_OWVAR 42
17770: PUSH
17771: LD_INT 27
17773: ST_TO_ADDR
17774: GO 17853
17776: LD_INT 31
17778: DOUBLE
17779: EQUAL
17780: IFTRUE 17784
17782: GO 17795
17784: POP
// bc_type := b_oil_power ; 32 :
17785: LD_ADDR_OWVAR 42
17789: PUSH
17790: LD_INT 26
17792: ST_TO_ADDR
17793: GO 17853
17795: LD_INT 32
17797: DOUBLE
17798: EQUAL
17799: IFTRUE 17803
17801: GO 17814
17803: POP
// bc_type := b_siberite_power ; 33 :
17804: LD_ADDR_OWVAR 42
17808: PUSH
17809: LD_INT 28
17811: ST_TO_ADDR
17812: GO 17853
17814: LD_INT 33
17816: DOUBLE
17817: EQUAL
17818: IFTRUE 17822
17820: GO 17833
17822: POP
// bc_type := b_oil_mine ; 34 :
17823: LD_ADDR_OWVAR 42
17827: PUSH
17828: LD_INT 29
17830: ST_TO_ADDR
17831: GO 17853
17833: LD_INT 34
17835: DOUBLE
17836: EQUAL
17837: IFTRUE 17841
17839: GO 17852
17841: POP
// bc_type := b_siberite_mine ; end ;
17842: LD_ADDR_OWVAR 42
17846: PUSH
17847: LD_INT 30
17849: ST_TO_ADDR
17850: GO 17853
17852: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17853: LD_ADDR_VAR 0 8
17857: PUSH
17858: LD_VAR 0 5
17862: PPUSH
17863: LD_VAR 0 6
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: CALL_OW 47
17877: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17878: LD_OWVAR 42
17882: PUSH
17883: LD_INT 32
17885: PUSH
17886: LD_INT 33
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: IN
17893: IFFALSE 17909
// PlaceWeaponTurret ( b , weapon ) ;
17895: LD_VAR 0 8
17899: PPUSH
17900: LD_VAR 0 4
17904: PPUSH
17905: CALL_OW 431
// end ;
17909: LD_VAR 0 7
17913: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17914: LD_INT 0
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17920: LD_ADDR_VAR 0 4
17924: PUSH
17925: LD_INT 22
17927: PUSH
17928: LD_OWVAR 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: LD_INT 30
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 30
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 4
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18042
// for i in tmp do
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 4
17992: PUSH
17993: FOR_IN
17994: IFFALSE 18040
// for j = 1 to 3 do
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: DOUBLE
18002: LD_INT 1
18004: DEC
18005: ST_TO_ADDR
18006: LD_INT 3
18008: PUSH
18009: FOR_TO
18010: IFFALSE 18036
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18012: LD_VAR 0 2
18016: PPUSH
18017: CALL_OW 274
18021: PPUSH
18022: LD_VAR 0 3
18026: PPUSH
18027: LD_INT 99999
18029: PPUSH
18030: CALL_OW 277
18034: GO 18009
18036: POP
18037: POP
18038: GO 17993
18040: POP
18041: POP
// end ;
18042: LD_VAR 0 1
18046: RET
// export function hHackSetLevel10 ; var i , j ; begin
18047: LD_INT 0
18049: PPUSH
18050: PPUSH
18051: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18052: LD_ADDR_VAR 0 2
18056: PUSH
18057: LD_INT 21
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 69
18071: PUSH
18072: FOR_IN
18073: IFFALSE 18125
// if IsSelected ( i ) then
18075: LD_VAR 0 2
18079: PPUSH
18080: CALL_OW 306
18084: IFFALSE 18123
// begin for j := 1 to 4 do
18086: LD_ADDR_VAR 0 3
18090: PUSH
18091: DOUBLE
18092: LD_INT 1
18094: DEC
18095: ST_TO_ADDR
18096: LD_INT 4
18098: PUSH
18099: FOR_TO
18100: IFFALSE 18121
// SetSkill ( i , j , 10 ) ;
18102: LD_VAR 0 2
18106: PPUSH
18107: LD_VAR 0 3
18111: PPUSH
18112: LD_INT 10
18114: PPUSH
18115: CALL_OW 237
18119: GO 18099
18121: POP
18122: POP
// end ;
18123: GO 18072
18125: POP
18126: POP
// end ;
18127: LD_VAR 0 1
18131: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18132: LD_INT 0
18134: PPUSH
18135: PPUSH
18136: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18137: LD_ADDR_VAR 0 2
18141: PUSH
18142: LD_INT 22
18144: PUSH
18145: LD_OWVAR 2
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PUSH
18173: FOR_IN
18174: IFFALSE 18215
// begin for j := 1 to 4 do
18176: LD_ADDR_VAR 0 3
18180: PUSH
18181: DOUBLE
18182: LD_INT 1
18184: DEC
18185: ST_TO_ADDR
18186: LD_INT 4
18188: PUSH
18189: FOR_TO
18190: IFFALSE 18211
// SetSkill ( i , j , 10 ) ;
18192: LD_VAR 0 2
18196: PPUSH
18197: LD_VAR 0 3
18201: PPUSH
18202: LD_INT 10
18204: PPUSH
18205: CALL_OW 237
18209: GO 18189
18211: POP
18212: POP
// end ;
18213: GO 18173
18215: POP
18216: POP
// end ;
18217: LD_VAR 0 1
18221: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18222: LD_INT 0
18224: PPUSH
// uc_side := your_side ;
18225: LD_ADDR_OWVAR 20
18229: PUSH
18230: LD_OWVAR 2
18234: ST_TO_ADDR
// uc_nation := nation ;
18235: LD_ADDR_OWVAR 21
18239: PUSH
18240: LD_VAR 0 1
18244: ST_TO_ADDR
// InitHc ;
18245: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18249: LD_INT 0
18251: PPUSH
18252: LD_VAR 0 2
18256: PPUSH
18257: LD_VAR 0 3
18261: PPUSH
18262: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18266: LD_VAR 0 4
18270: PPUSH
18271: LD_VAR 0 5
18275: PPUSH
18276: CALL_OW 428
18280: PUSH
18281: LD_INT 0
18283: EQUAL
18284: IFFALSE 18308
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18286: CALL_OW 44
18290: PPUSH
18291: LD_VAR 0 4
18295: PPUSH
18296: LD_VAR 0 5
18300: PPUSH
18301: LD_INT 1
18303: PPUSH
18304: CALL_OW 48
// end ;
18308: LD_VAR 0 6
18312: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18313: LD_INT 0
18315: PPUSH
18316: PPUSH
// uc_side := your_side ;
18317: LD_ADDR_OWVAR 20
18321: PUSH
18322: LD_OWVAR 2
18326: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18327: LD_VAR 0 1
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 3
18340: PUSH
18341: LD_INT 4
18343: PUSH
18344: LD_INT 5
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: IN
18354: IFFALSE 18366
// uc_nation := nation_american else
18356: LD_ADDR_OWVAR 21
18360: PUSH
18361: LD_INT 1
18363: ST_TO_ADDR
18364: GO 18409
// if chassis in [ 11 , 12 , 13 , 14 ] then
18366: LD_VAR 0 1
18370: PUSH
18371: LD_INT 11
18373: PUSH
18374: LD_INT 12
18376: PUSH
18377: LD_INT 13
18379: PUSH
18380: LD_INT 14
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: IN
18389: IFFALSE 18401
// uc_nation := nation_arabian else
18391: LD_ADDR_OWVAR 21
18395: PUSH
18396: LD_INT 2
18398: ST_TO_ADDR
18399: GO 18409
// uc_nation := nation_russian ;
18401: LD_ADDR_OWVAR 21
18405: PUSH
18406: LD_INT 3
18408: ST_TO_ADDR
// vc_chassis := chassis ;
18409: LD_ADDR_OWVAR 37
18413: PUSH
18414: LD_VAR 0 1
18418: ST_TO_ADDR
// vc_engine := engine ;
18419: LD_ADDR_OWVAR 39
18423: PUSH
18424: LD_VAR 0 2
18428: ST_TO_ADDR
// vc_control := control ;
18429: LD_ADDR_OWVAR 38
18433: PUSH
18434: LD_VAR 0 3
18438: ST_TO_ADDR
// vc_weapon := weapon ;
18439: LD_ADDR_OWVAR 40
18443: PUSH
18444: LD_VAR 0 4
18448: ST_TO_ADDR
// un := CreateVehicle ;
18449: LD_ADDR_VAR 0 8
18453: PUSH
18454: CALL_OW 45
18458: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18459: LD_VAR 0 8
18463: PPUSH
18464: LD_INT 0
18466: PPUSH
18467: LD_INT 5
18469: PPUSH
18470: CALL_OW 12
18474: PPUSH
18475: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18479: LD_VAR 0 8
18483: PPUSH
18484: LD_VAR 0 5
18488: PPUSH
18489: LD_VAR 0 6
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: CALL_OW 48
// end ;
18501: LD_VAR 0 7
18505: RET
// export hInvincible ; every 1 do
18506: GO 18508
18508: DISABLE
// hInvincible := [ ] ;
18509: LD_ADDR_EXP 65
18513: PUSH
18514: EMPTY
18515: ST_TO_ADDR
18516: END
// every 10 do var i ;
18517: GO 18519
18519: DISABLE
18520: LD_INT 0
18522: PPUSH
// begin enable ;
18523: ENABLE
// if not hInvincible then
18524: LD_EXP 65
18528: NOT
18529: IFFALSE 18533
// exit ;
18531: GO 18577
// for i in hInvincible do
18533: LD_ADDR_VAR 0 1
18537: PUSH
18538: LD_EXP 65
18542: PUSH
18543: FOR_IN
18544: IFFALSE 18575
// if GetLives ( i ) < 1000 then
18546: LD_VAR 0 1
18550: PPUSH
18551: CALL_OW 256
18555: PUSH
18556: LD_INT 1000
18558: LESS
18559: IFFALSE 18573
// SetLives ( i , 1000 ) ;
18561: LD_VAR 0 1
18565: PPUSH
18566: LD_INT 1000
18568: PPUSH
18569: CALL_OW 234
18573: GO 18543
18575: POP
18576: POP
// end ;
18577: PPOPN 1
18579: END
// export function hHackInvincible ; var i ; begin
18580: LD_INT 0
18582: PPUSH
18583: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18584: LD_ADDR_VAR 0 2
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 21
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 21
18604: PUSH
18605: LD_INT 2
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: PPUSH
18617: CALL_OW 69
18621: PUSH
18622: FOR_IN
18623: IFFALSE 18684
// if IsSelected ( i ) then
18625: LD_VAR 0 2
18629: PPUSH
18630: CALL_OW 306
18634: IFFALSE 18682
// begin if i in hInvincible then
18636: LD_VAR 0 2
18640: PUSH
18641: LD_EXP 65
18645: IN
18646: IFFALSE 18666
// hInvincible := hInvincible diff i else
18648: LD_ADDR_EXP 65
18652: PUSH
18653: LD_EXP 65
18657: PUSH
18658: LD_VAR 0 2
18662: DIFF
18663: ST_TO_ADDR
18664: GO 18682
// hInvincible := hInvincible union i ;
18666: LD_ADDR_EXP 65
18670: PUSH
18671: LD_EXP 65
18675: PUSH
18676: LD_VAR 0 2
18680: UNION
18681: ST_TO_ADDR
// end ;
18682: GO 18622
18684: POP
18685: POP
// end ;
18686: LD_VAR 0 1
18690: RET
// export function hHackInvisible ; var i , j ; begin
18691: LD_INT 0
18693: PPUSH
18694: PPUSH
18695: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18696: LD_ADDR_VAR 0 2
18700: PUSH
18701: LD_INT 21
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PPUSH
18711: CALL_OW 69
18715: PUSH
18716: FOR_IN
18717: IFFALSE 18741
// if IsSelected ( i ) then
18719: LD_VAR 0 2
18723: PPUSH
18724: CALL_OW 306
18728: IFFALSE 18739
// ComForceInvisible ( i ) ;
18730: LD_VAR 0 2
18734: PPUSH
18735: CALL_OW 496
18739: GO 18716
18741: POP
18742: POP
// end ;
18743: LD_VAR 0 1
18747: RET
// export function hHackChangeYourSide ; begin
18748: LD_INT 0
18750: PPUSH
// if your_side = 8 then
18751: LD_OWVAR 2
18755: PUSH
18756: LD_INT 8
18758: EQUAL
18759: IFFALSE 18771
// your_side := 0 else
18761: LD_ADDR_OWVAR 2
18765: PUSH
18766: LD_INT 0
18768: ST_TO_ADDR
18769: GO 18785
// your_side := your_side + 1 ;
18771: LD_ADDR_OWVAR 2
18775: PUSH
18776: LD_OWVAR 2
18780: PUSH
18781: LD_INT 1
18783: PLUS
18784: ST_TO_ADDR
// end ;
18785: LD_VAR 0 1
18789: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18790: LD_INT 0
18792: PPUSH
18793: PPUSH
18794: PPUSH
// for i in all_units do
18795: LD_ADDR_VAR 0 2
18799: PUSH
18800: LD_OWVAR 3
18804: PUSH
18805: FOR_IN
18806: IFFALSE 18884
// if IsSelected ( i ) then
18808: LD_VAR 0 2
18812: PPUSH
18813: CALL_OW 306
18817: IFFALSE 18882
// begin j := GetSide ( i ) ;
18819: LD_ADDR_VAR 0 3
18823: PUSH
18824: LD_VAR 0 2
18828: PPUSH
18829: CALL_OW 255
18833: ST_TO_ADDR
// if j = 8 then
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 8
18841: EQUAL
18842: IFFALSE 18854
// j := 0 else
18844: LD_ADDR_VAR 0 3
18848: PUSH
18849: LD_INT 0
18851: ST_TO_ADDR
18852: GO 18868
// j := j + 1 ;
18854: LD_ADDR_VAR 0 3
18858: PUSH
18859: LD_VAR 0 3
18863: PUSH
18864: LD_INT 1
18866: PLUS
18867: ST_TO_ADDR
// SetSide ( i , j ) ;
18868: LD_VAR 0 2
18872: PPUSH
18873: LD_VAR 0 3
18877: PPUSH
18878: CALL_OW 235
// end ;
18882: GO 18805
18884: POP
18885: POP
// end ;
18886: LD_VAR 0 1
18890: RET
// export function hHackFog ; begin
18891: LD_INT 0
18893: PPUSH
// FogOff ( true ) ;
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 344
// end ;
18901: LD_VAR 0 1
18905: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18906: LD_INT 0
18908: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 483
// CenterOnXY ( x , y ) ;
18934: LD_VAR 0 2
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: CALL_OW 84
// end ;
18948: LD_VAR 0 4
18952: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18953: LD_INT 0
18955: PPUSH
18956: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18957: LD_VAR 0 1
18961: NOT
18962: PUSH
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_VAR 0 3
18972: PPUSH
18973: CALL_OW 488
18977: NOT
18978: OR
18979: PUSH
18980: LD_VAR 0 1
18984: PPUSH
18985: CALL_OW 266
18989: PUSH
18990: LD_INT 3
18992: NONEQUAL
18993: PUSH
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL_OW 247
19003: PUSH
19004: LD_INT 1
19006: EQUAL
19007: NOT
19008: AND
19009: OR
19010: IFFALSE 19014
// exit ;
19012: GO 19163
// if GetType ( factory ) = unit_human then
19014: LD_VAR 0 1
19018: PPUSH
19019: CALL_OW 247
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: IFFALSE 19044
// factory := IsInUnit ( factory ) ;
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 310
19043: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19044: LD_VAR 0 1
19048: PPUSH
19049: CALL_OW 266
19053: PUSH
19054: LD_INT 3
19056: NONEQUAL
19057: IFFALSE 19061
// exit ;
19059: GO 19163
// if HexInfo ( x , y ) = factory then
19061: LD_VAR 0 2
19065: PPUSH
19066: LD_VAR 0 3
19070: PPUSH
19071: CALL_OW 428
19075: PUSH
19076: LD_VAR 0 1
19080: EQUAL
19081: IFFALSE 19108
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19083: LD_ADDR_EXP 66
19087: PUSH
19088: LD_EXP 66
19092: PPUSH
19093: LD_VAR 0 1
19097: PPUSH
19098: LD_INT 0
19100: PPUSH
19101: CALL_OW 1
19105: ST_TO_ADDR
19106: GO 19159
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19108: LD_ADDR_EXP 66
19112: PUSH
19113: LD_EXP 66
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: LD_VAR 0 1
19127: PPUSH
19128: CALL_OW 255
19132: PUSH
19133: LD_VAR 0 1
19137: PUSH
19138: LD_VAR 0 2
19142: PUSH
19143: LD_VAR 0 3
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PPUSH
19154: CALL_OW 1
19158: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19159: CALL 19168 0 0
// end ;
19163: LD_VAR 0 4
19167: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19168: LD_INT 0
19170: PPUSH
19171: PPUSH
19172: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19173: LD_STRING resetFactoryWaypoint();
19175: PPUSH
19176: CALL_OW 559
// if factoryWaypoints then
19180: LD_EXP 66
19184: IFFALSE 19310
// begin list := PrepareArray ( factoryWaypoints ) ;
19186: LD_ADDR_VAR 0 3
19190: PUSH
19191: LD_EXP 66
19195: PPUSH
19196: CALL 65779 0 1
19200: ST_TO_ADDR
// for i := 1 to list do
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: DOUBLE
19207: LD_INT 1
19209: DEC
19210: ST_TO_ADDR
19211: LD_VAR 0 3
19215: PUSH
19216: FOR_TO
19217: IFFALSE 19308
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19219: LD_STRING setFactoryWaypointXY(
19221: PUSH
19222: LD_VAR 0 3
19226: PUSH
19227: LD_VAR 0 2
19231: ARRAY
19232: PUSH
19233: LD_INT 1
19235: ARRAY
19236: STR
19237: PUSH
19238: LD_STRING ,
19240: STR
19241: PUSH
19242: LD_VAR 0 3
19246: PUSH
19247: LD_VAR 0 2
19251: ARRAY
19252: PUSH
19253: LD_INT 2
19255: ARRAY
19256: STR
19257: PUSH
19258: LD_STRING ,
19260: STR
19261: PUSH
19262: LD_VAR 0 3
19266: PUSH
19267: LD_VAR 0 2
19271: ARRAY
19272: PUSH
19273: LD_INT 3
19275: ARRAY
19276: STR
19277: PUSH
19278: LD_STRING ,
19280: STR
19281: PUSH
19282: LD_VAR 0 3
19286: PUSH
19287: LD_VAR 0 2
19291: ARRAY
19292: PUSH
19293: LD_INT 4
19295: ARRAY
19296: STR
19297: PUSH
19298: LD_STRING )
19300: STR
19301: PPUSH
19302: CALL_OW 559
19306: GO 19216
19308: POP
19309: POP
// end ; end ;
19310: LD_VAR 0 1
19314: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19315: LD_INT 0
19317: PPUSH
// if HexInfo ( x , y ) = warehouse then
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 3
19327: PPUSH
19328: CALL_OW 428
19332: PUSH
19333: LD_VAR 0 1
19337: EQUAL
19338: IFFALSE 19365
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19340: LD_ADDR_EXP 67
19344: PUSH
19345: LD_EXP 67
19349: PPUSH
19350: LD_VAR 0 1
19354: PPUSH
19355: LD_INT 0
19357: PPUSH
19358: CALL_OW 1
19362: ST_TO_ADDR
19363: GO 19416
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19365: LD_ADDR_EXP 67
19369: PUSH
19370: LD_EXP 67
19374: PPUSH
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL_OW 255
19389: PUSH
19390: LD_VAR 0 1
19394: PUSH
19395: LD_VAR 0 2
19399: PUSH
19400: LD_VAR 0 3
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: PPUSH
19411: CALL_OW 1
19415: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19416: CALL 19425 0 0
// end ;
19420: LD_VAR 0 4
19424: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19425: LD_INT 0
19427: PPUSH
19428: PPUSH
19429: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19430: LD_STRING resetWarehouseGatheringPoints();
19432: PPUSH
19433: CALL_OW 559
// if warehouseGatheringPoints then
19437: LD_EXP 67
19441: IFFALSE 19567
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_EXP 67
19452: PPUSH
19453: CALL 65779 0 1
19457: ST_TO_ADDR
// for i := 1 to list do
19458: LD_ADDR_VAR 0 2
19462: PUSH
19463: DOUBLE
19464: LD_INT 1
19466: DEC
19467: ST_TO_ADDR
19468: LD_VAR 0 3
19472: PUSH
19473: FOR_TO
19474: IFFALSE 19565
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19476: LD_STRING setWarehouseGatheringPointXY(
19478: PUSH
19479: LD_VAR 0 3
19483: PUSH
19484: LD_VAR 0 2
19488: ARRAY
19489: PUSH
19490: LD_INT 1
19492: ARRAY
19493: STR
19494: PUSH
19495: LD_STRING ,
19497: STR
19498: PUSH
19499: LD_VAR 0 3
19503: PUSH
19504: LD_VAR 0 2
19508: ARRAY
19509: PUSH
19510: LD_INT 2
19512: ARRAY
19513: STR
19514: PUSH
19515: LD_STRING ,
19517: STR
19518: PUSH
19519: LD_VAR 0 3
19523: PUSH
19524: LD_VAR 0 2
19528: ARRAY
19529: PUSH
19530: LD_INT 3
19532: ARRAY
19533: STR
19534: PUSH
19535: LD_STRING ,
19537: STR
19538: PUSH
19539: LD_VAR 0 3
19543: PUSH
19544: LD_VAR 0 2
19548: ARRAY
19549: PUSH
19550: LD_INT 4
19552: ARRAY
19553: STR
19554: PUSH
19555: LD_STRING )
19557: STR
19558: PPUSH
19559: CALL_OW 559
19563: GO 19473
19565: POP
19566: POP
// end ; end ;
19567: LD_VAR 0 1
19571: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19572: LD_EXP 67
19576: IFFALSE 20261
19578: GO 19580
19580: DISABLE
19581: LD_INT 0
19583: PPUSH
19584: PPUSH
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
19591: PPUSH
// begin enable ;
19592: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19593: LD_ADDR_VAR 0 3
19597: PUSH
19598: LD_EXP 67
19602: PPUSH
19603: CALL 65779 0 1
19607: ST_TO_ADDR
// if not list then
19608: LD_VAR 0 3
19612: NOT
19613: IFFALSE 19617
// exit ;
19615: GO 20261
// for i := 1 to list do
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: DOUBLE
19623: LD_INT 1
19625: DEC
19626: ST_TO_ADDR
19627: LD_VAR 0 3
19631: PUSH
19632: FOR_TO
19633: IFFALSE 20259
// begin depot := list [ i ] [ 2 ] ;
19635: LD_ADDR_VAR 0 8
19639: PUSH
19640: LD_VAR 0 3
19644: PUSH
19645: LD_VAR 0 1
19649: ARRAY
19650: PUSH
19651: LD_INT 2
19653: ARRAY
19654: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19655: LD_ADDR_VAR 0 5
19659: PUSH
19660: LD_VAR 0 3
19664: PUSH
19665: LD_VAR 0 1
19669: ARRAY
19670: PUSH
19671: LD_INT 1
19673: ARRAY
19674: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19675: LD_VAR 0 8
19679: PPUSH
19680: CALL_OW 301
19684: PUSH
19685: LD_VAR 0 5
19689: PUSH
19690: LD_VAR 0 8
19694: PPUSH
19695: CALL_OW 255
19699: NONEQUAL
19700: OR
19701: IFFALSE 19730
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19703: LD_ADDR_EXP 67
19707: PUSH
19708: LD_EXP 67
19712: PPUSH
19713: LD_VAR 0 8
19717: PPUSH
19718: LD_INT 0
19720: PPUSH
19721: CALL_OW 1
19725: ST_TO_ADDR
// exit ;
19726: POP
19727: POP
19728: GO 20261
// end ; x := list [ i ] [ 3 ] ;
19730: LD_ADDR_VAR 0 6
19734: PUSH
19735: LD_VAR 0 3
19739: PUSH
19740: LD_VAR 0 1
19744: ARRAY
19745: PUSH
19746: LD_INT 3
19748: ARRAY
19749: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19750: LD_ADDR_VAR 0 7
19754: PUSH
19755: LD_VAR 0 3
19759: PUSH
19760: LD_VAR 0 1
19764: ARRAY
19765: PUSH
19766: LD_INT 4
19768: ARRAY
19769: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19770: LD_ADDR_VAR 0 9
19774: PUSH
19775: LD_VAR 0 6
19779: PPUSH
19780: LD_VAR 0 7
19784: PPUSH
19785: LD_INT 16
19787: PPUSH
19788: CALL 64367 0 3
19792: ST_TO_ADDR
// if not cratesNearbyPoint then
19793: LD_VAR 0 9
19797: NOT
19798: IFFALSE 19804
// exit ;
19800: POP
19801: POP
19802: GO 20261
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19804: LD_ADDR_VAR 0 4
19808: PUSH
19809: LD_INT 22
19811: PUSH
19812: LD_VAR 0 5
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: LD_INT 60
19826: PUSH
19827: EMPTY
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 91
19836: PUSH
19837: LD_VAR 0 8
19841: PUSH
19842: LD_INT 6
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: LD_INT 25
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 16
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 69
19888: PUSH
19889: LD_VAR 0 8
19893: PPUSH
19894: CALL_OW 313
19898: PPUSH
19899: LD_INT 3
19901: PUSH
19902: LD_INT 60
19904: PUSH
19905: EMPTY
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 25
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 25
19927: PUSH
19928: LD_INT 16
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PPUSH
19944: CALL_OW 72
19948: UNION
19949: ST_TO_ADDR
// if tmp then
19950: LD_VAR 0 4
19954: IFFALSE 20034
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19956: LD_ADDR_VAR 0 4
19960: PUSH
19961: LD_VAR 0 4
19965: PPUSH
19966: LD_INT 3
19968: PPUSH
19969: CALL 62336 0 2
19973: ST_TO_ADDR
// for j in tmp do
19974: LD_ADDR_VAR 0 2
19978: PUSH
19979: LD_VAR 0 4
19983: PUSH
19984: FOR_IN
19985: IFFALSE 20028
// begin if IsInUnit ( j ) then
19987: LD_VAR 0 2
19991: PPUSH
19992: CALL_OW 310
19996: IFFALSE 20007
// ComExit ( j ) ;
19998: LD_VAR 0 2
20002: PPUSH
20003: CALL 62419 0 1
// AddComCollect ( j , x , y ) ;
20007: LD_VAR 0 2
20011: PPUSH
20012: LD_VAR 0 6
20016: PPUSH
20017: LD_VAR 0 7
20021: PPUSH
20022: CALL_OW 177
// end ;
20026: GO 19984
20028: POP
20029: POP
// exit ;
20030: POP
20031: POP
20032: GO 20261
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20034: LD_ADDR_VAR 0 4
20038: PUSH
20039: LD_INT 22
20041: PUSH
20042: LD_VAR 0 5
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 91
20053: PUSH
20054: LD_VAR 0 8
20058: PUSH
20059: LD_INT 8
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 2
20069: PUSH
20070: LD_INT 34
20072: PUSH
20073: LD_INT 12
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 34
20082: PUSH
20083: LD_INT 51
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 34
20092: PUSH
20093: LD_INT 32
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 34
20102: PUSH
20103: LD_INT 89
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: PPUSH
20122: CALL_OW 69
20126: ST_TO_ADDR
// if tmp then
20127: LD_VAR 0 4
20131: IFFALSE 20257
// begin for j in tmp do
20133: LD_ADDR_VAR 0 2
20137: PUSH
20138: LD_VAR 0 4
20142: PUSH
20143: FOR_IN
20144: IFFALSE 20255
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20146: LD_VAR 0 2
20150: PPUSH
20151: CALL_OW 262
20155: PUSH
20156: LD_INT 3
20158: EQUAL
20159: PUSH
20160: LD_VAR 0 2
20164: PPUSH
20165: CALL_OW 261
20169: PUSH
20170: LD_INT 20
20172: GREATER
20173: OR
20174: PUSH
20175: LD_VAR 0 2
20179: PPUSH
20180: CALL_OW 314
20184: NOT
20185: AND
20186: PUSH
20187: LD_VAR 0 2
20191: PPUSH
20192: CALL_OW 263
20196: PUSH
20197: LD_INT 1
20199: NONEQUAL
20200: PUSH
20201: LD_VAR 0 2
20205: PPUSH
20206: CALL_OW 311
20210: OR
20211: AND
20212: IFFALSE 20253
// begin ComCollect ( j , x , y ) ;
20214: LD_VAR 0 2
20218: PPUSH
20219: LD_VAR 0 6
20223: PPUSH
20224: LD_VAR 0 7
20228: PPUSH
20229: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20233: LD_VAR 0 2
20237: PPUSH
20238: LD_VAR 0 8
20242: PPUSH
20243: CALL_OW 172
// exit ;
20247: POP
20248: POP
20249: POP
20250: POP
20251: GO 20261
// end ;
20253: GO 20143
20255: POP
20256: POP
// end ; end ;
20257: GO 19632
20259: POP
20260: POP
// end ; end_of_file
20261: PPOPN 9
20263: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20264: LD_INT 0
20266: PPUSH
20267: PPUSH
20268: PPUSH
20269: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 264
20279: PUSH
20280: LD_INT 91
20282: EQUAL
20283: IFFALSE 20355
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20285: LD_INT 68
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 255
20297: PPUSH
20298: CALL_OW 321
20302: PUSH
20303: LD_INT 2
20305: EQUAL
20306: IFFALSE 20318
// eff := 70 else
20308: LD_ADDR_VAR 0 4
20312: PUSH
20313: LD_INT 70
20315: ST_TO_ADDR
20316: GO 20326
// eff := 30 ;
20318: LD_ADDR_VAR 0 4
20322: PUSH
20323: LD_INT 30
20325: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20326: LD_VAR 0 1
20330: PPUSH
20331: CALL_OW 250
20335: PPUSH
20336: LD_VAR 0 1
20340: PPUSH
20341: CALL_OW 251
20345: PPUSH
20346: LD_VAR 0 4
20350: PPUSH
20351: CALL_OW 495
// end ; end ;
20355: LD_VAR 0 2
20359: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20360: LD_INT 0
20362: PPUSH
// end ;
20363: LD_VAR 0 4
20367: RET
// export function SOS_Command ( cmd ) ; begin
20368: LD_INT 0
20370: PPUSH
// end ;
20371: LD_VAR 0 2
20375: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20376: LD_INT 0
20378: PPUSH
// end ;
20379: LD_VAR 0 6
20383: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20384: LD_INT 0
20386: PPUSH
20387: PPUSH
// if not vehicle or not factory then
20388: LD_VAR 0 1
20392: NOT
20393: PUSH
20394: LD_VAR 0 2
20398: NOT
20399: OR
20400: IFFALSE 20404
// exit ;
20402: GO 20635
// if factoryWaypoints >= factory then
20404: LD_EXP 66
20408: PUSH
20409: LD_VAR 0 2
20413: GREATEREQUAL
20414: IFFALSE 20635
// if factoryWaypoints [ factory ] then
20416: LD_EXP 66
20420: PUSH
20421: LD_VAR 0 2
20425: ARRAY
20426: IFFALSE 20635
// begin if GetControl ( vehicle ) = control_manual then
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 263
20437: PUSH
20438: LD_INT 1
20440: EQUAL
20441: IFFALSE 20522
// begin driver := IsDrivenBy ( vehicle ) ;
20443: LD_ADDR_VAR 0 4
20447: PUSH
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 311
20457: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20458: LD_VAR 0 4
20462: PPUSH
20463: LD_EXP 66
20467: PUSH
20468: LD_VAR 0 2
20472: ARRAY
20473: PUSH
20474: LD_INT 3
20476: ARRAY
20477: PPUSH
20478: LD_EXP 66
20482: PUSH
20483: LD_VAR 0 2
20487: ARRAY
20488: PUSH
20489: LD_INT 4
20491: ARRAY
20492: PPUSH
20493: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20497: LD_VAR 0 4
20501: PPUSH
20502: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20506: LD_VAR 0 4
20510: PPUSH
20511: LD_VAR 0 2
20515: PPUSH
20516: CALL_OW 180
// end else
20520: GO 20635
// if GetControl ( vehicle ) = control_remote then
20522: LD_VAR 0 1
20526: PPUSH
20527: CALL_OW 263
20531: PUSH
20532: LD_INT 2
20534: EQUAL
20535: IFFALSE 20596
// begin wait ( 0 0$2 ) ;
20537: LD_INT 70
20539: PPUSH
20540: CALL_OW 67
// if Connect ( vehicle ) then
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL 32659 0 1
20553: IFFALSE 20594
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20555: LD_VAR 0 1
20559: PPUSH
20560: LD_EXP 66
20564: PUSH
20565: LD_VAR 0 2
20569: ARRAY
20570: PUSH
20571: LD_INT 3
20573: ARRAY
20574: PPUSH
20575: LD_EXP 66
20579: PUSH
20580: LD_VAR 0 2
20584: ARRAY
20585: PUSH
20586: LD_INT 4
20588: ARRAY
20589: PPUSH
20590: CALL_OW 171
// end else
20594: GO 20635
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20596: LD_VAR 0 1
20600: PPUSH
20601: LD_EXP 66
20605: PUSH
20606: LD_VAR 0 2
20610: ARRAY
20611: PUSH
20612: LD_INT 3
20614: ARRAY
20615: PPUSH
20616: LD_EXP 66
20620: PUSH
20621: LD_VAR 0 2
20625: ARRAY
20626: PUSH
20627: LD_INT 4
20629: ARRAY
20630: PPUSH
20631: CALL_OW 171
// end ; end ;
20635: LD_VAR 0 3
20639: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20640: LD_INT 0
20642: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20643: LD_VAR 0 1
20647: PUSH
20648: LD_INT 250
20650: EQUAL
20651: PUSH
20652: LD_VAR 0 2
20656: PPUSH
20657: CALL_OW 264
20661: PUSH
20662: LD_INT 81
20664: EQUAL
20665: AND
20666: IFFALSE 20687
// MinerPlaceMine ( unit , x , y ) ;
20668: LD_VAR 0 2
20672: PPUSH
20673: LD_VAR 0 4
20677: PPUSH
20678: LD_VAR 0 5
20682: PPUSH
20683: CALL 23072 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20687: LD_VAR 0 1
20691: PUSH
20692: LD_INT 251
20694: EQUAL
20695: PUSH
20696: LD_VAR 0 2
20700: PPUSH
20701: CALL_OW 264
20705: PUSH
20706: LD_INT 81
20708: EQUAL
20709: AND
20710: IFFALSE 20731
// MinerDetonateMine ( unit , x , y ) ;
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_VAR 0 4
20721: PPUSH
20722: LD_VAR 0 5
20726: PPUSH
20727: CALL 23347 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20731: LD_VAR 0 1
20735: PUSH
20736: LD_INT 252
20738: EQUAL
20739: PUSH
20740: LD_VAR 0 2
20744: PPUSH
20745: CALL_OW 264
20749: PUSH
20750: LD_INT 81
20752: EQUAL
20753: AND
20754: IFFALSE 20775
// MinerCreateMinefield ( unit , x , y ) ;
20756: LD_VAR 0 2
20760: PPUSH
20761: LD_VAR 0 4
20765: PPUSH
20766: LD_VAR 0 5
20770: PPUSH
20771: CALL 23764 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20775: LD_VAR 0 1
20779: PUSH
20780: LD_INT 253
20782: EQUAL
20783: PUSH
20784: LD_VAR 0 2
20788: PPUSH
20789: CALL_OW 257
20793: PUSH
20794: LD_INT 5
20796: EQUAL
20797: AND
20798: IFFALSE 20819
// ComBinocular ( unit , x , y ) ;
20800: LD_VAR 0 2
20804: PPUSH
20805: LD_VAR 0 4
20809: PPUSH
20810: LD_VAR 0 5
20814: PPUSH
20815: CALL 24133 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20819: LD_VAR 0 1
20823: PUSH
20824: LD_INT 254
20826: EQUAL
20827: PUSH
20828: LD_VAR 0 2
20832: PPUSH
20833: CALL_OW 264
20837: PUSH
20838: LD_INT 99
20840: EQUAL
20841: AND
20842: PUSH
20843: LD_VAR 0 3
20847: PPUSH
20848: CALL_OW 263
20852: PUSH
20853: LD_INT 3
20855: EQUAL
20856: AND
20857: IFFALSE 20873
// HackDestroyVehicle ( unit , selectedUnit ) ;
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 3
20868: PPUSH
20869: CALL 22436 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20873: LD_VAR 0 1
20877: PUSH
20878: LD_INT 255
20880: EQUAL
20881: PUSH
20882: LD_VAR 0 2
20886: PPUSH
20887: CALL_OW 264
20891: PUSH
20892: LD_INT 14
20894: PUSH
20895: LD_INT 53
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: IN
20902: AND
20903: PUSH
20904: LD_VAR 0 4
20908: PPUSH
20909: LD_VAR 0 5
20913: PPUSH
20914: CALL_OW 488
20918: AND
20919: IFFALSE 20943
// CutTreeXYR ( unit , x , y , 12 ) ;
20921: LD_VAR 0 2
20925: PPUSH
20926: LD_VAR 0 4
20930: PPUSH
20931: LD_VAR 0 5
20935: PPUSH
20936: LD_INT 12
20938: PPUSH
20939: CALL 21006 0 4
// if cmd = 256 then
20943: LD_VAR 0 1
20947: PUSH
20948: LD_INT 256
20950: EQUAL
20951: IFFALSE 20972
// SetFactoryWaypoint ( unit , x , y ) ;
20953: LD_VAR 0 2
20957: PPUSH
20958: LD_VAR 0 4
20962: PPUSH
20963: LD_VAR 0 5
20967: PPUSH
20968: CALL 18953 0 3
// if cmd = 257 then
20972: LD_VAR 0 1
20976: PUSH
20977: LD_INT 257
20979: EQUAL
20980: IFFALSE 21001
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20982: LD_VAR 0 2
20986: PPUSH
20987: LD_VAR 0 4
20991: PPUSH
20992: LD_VAR 0 5
20996: PPUSH
20997: CALL 19315 0 3
// end ;
21001: LD_VAR 0 6
21005: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21006: LD_INT 0
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21017: LD_VAR 0 1
21021: NOT
21022: PUSH
21023: LD_VAR 0 2
21027: PPUSH
21028: LD_VAR 0 3
21032: PPUSH
21033: CALL_OW 488
21037: NOT
21038: OR
21039: PUSH
21040: LD_VAR 0 4
21044: NOT
21045: OR
21046: IFFALSE 21050
// exit ;
21048: GO 21390
// list := [ ] ;
21050: LD_ADDR_VAR 0 13
21054: PUSH
21055: EMPTY
21056: ST_TO_ADDR
// if x - r < 0 then
21057: LD_VAR 0 2
21061: PUSH
21062: LD_VAR 0 4
21066: MINUS
21067: PUSH
21068: LD_INT 0
21070: LESS
21071: IFFALSE 21083
// min_x := 0 else
21073: LD_ADDR_VAR 0 7
21077: PUSH
21078: LD_INT 0
21080: ST_TO_ADDR
21081: GO 21099
// min_x := x - r ;
21083: LD_ADDR_VAR 0 7
21087: PUSH
21088: LD_VAR 0 2
21092: PUSH
21093: LD_VAR 0 4
21097: MINUS
21098: ST_TO_ADDR
// if y - r < 0 then
21099: LD_VAR 0 3
21103: PUSH
21104: LD_VAR 0 4
21108: MINUS
21109: PUSH
21110: LD_INT 0
21112: LESS
21113: IFFALSE 21125
// min_y := 0 else
21115: LD_ADDR_VAR 0 8
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
21123: GO 21141
// min_y := y - r ;
21125: LD_ADDR_VAR 0 8
21129: PUSH
21130: LD_VAR 0 3
21134: PUSH
21135: LD_VAR 0 4
21139: MINUS
21140: ST_TO_ADDR
// max_x := x + r ;
21141: LD_ADDR_VAR 0 9
21145: PUSH
21146: LD_VAR 0 2
21150: PUSH
21151: LD_VAR 0 4
21155: PLUS
21156: ST_TO_ADDR
// max_y := y + r ;
21157: LD_ADDR_VAR 0 10
21161: PUSH
21162: LD_VAR 0 3
21166: PUSH
21167: LD_VAR 0 4
21171: PLUS
21172: ST_TO_ADDR
// for _x = min_x to max_x do
21173: LD_ADDR_VAR 0 11
21177: PUSH
21178: DOUBLE
21179: LD_VAR 0 7
21183: DEC
21184: ST_TO_ADDR
21185: LD_VAR 0 9
21189: PUSH
21190: FOR_TO
21191: IFFALSE 21308
// for _y = min_y to max_y do
21193: LD_ADDR_VAR 0 12
21197: PUSH
21198: DOUBLE
21199: LD_VAR 0 8
21203: DEC
21204: ST_TO_ADDR
21205: LD_VAR 0 10
21209: PUSH
21210: FOR_TO
21211: IFFALSE 21304
// begin if not ValidHex ( _x , _y ) then
21213: LD_VAR 0 11
21217: PPUSH
21218: LD_VAR 0 12
21222: PPUSH
21223: CALL_OW 488
21227: NOT
21228: IFFALSE 21232
// continue ;
21230: GO 21210
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21232: LD_VAR 0 11
21236: PPUSH
21237: LD_VAR 0 12
21241: PPUSH
21242: CALL_OW 351
21246: PUSH
21247: LD_VAR 0 11
21251: PPUSH
21252: LD_VAR 0 12
21256: PPUSH
21257: CALL_OW 554
21261: AND
21262: IFFALSE 21302
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21264: LD_ADDR_VAR 0 13
21268: PUSH
21269: LD_VAR 0 13
21273: PPUSH
21274: LD_VAR 0 13
21278: PUSH
21279: LD_INT 1
21281: PLUS
21282: PPUSH
21283: LD_VAR 0 11
21287: PUSH
21288: LD_VAR 0 12
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PPUSH
21297: CALL_OW 2
21301: ST_TO_ADDR
// end ;
21302: GO 21210
21304: POP
21305: POP
21306: GO 21190
21308: POP
21309: POP
// if not list then
21310: LD_VAR 0 13
21314: NOT
21315: IFFALSE 21319
// exit ;
21317: GO 21390
// for i in list do
21319: LD_ADDR_VAR 0 6
21323: PUSH
21324: LD_VAR 0 13
21328: PUSH
21329: FOR_IN
21330: IFFALSE 21388
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21332: LD_VAR 0 1
21336: PPUSH
21337: LD_STRING M
21339: PUSH
21340: LD_VAR 0 6
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PUSH
21349: LD_VAR 0 6
21353: PUSH
21354: LD_INT 2
21356: ARRAY
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: PPUSH
21382: CALL_OW 447
21386: GO 21329
21388: POP
21389: POP
// end ;
21390: LD_VAR 0 5
21394: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21395: LD_EXP 69
21399: NOT
21400: IFFALSE 21450
21402: GO 21404
21404: DISABLE
// begin initHack := true ;
21405: LD_ADDR_EXP 69
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// hackTanks := [ ] ;
21413: LD_ADDR_EXP 70
21417: PUSH
21418: EMPTY
21419: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21420: LD_ADDR_EXP 71
21424: PUSH
21425: EMPTY
21426: ST_TO_ADDR
// hackLimit := 3 ;
21427: LD_ADDR_EXP 72
21431: PUSH
21432: LD_INT 3
21434: ST_TO_ADDR
// hackDist := 12 ;
21435: LD_ADDR_EXP 73
21439: PUSH
21440: LD_INT 12
21442: ST_TO_ADDR
// hackCounter := [ ] ;
21443: LD_ADDR_EXP 74
21447: PUSH
21448: EMPTY
21449: ST_TO_ADDR
// end ;
21450: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21451: LD_EXP 69
21455: PUSH
21456: LD_INT 34
21458: PUSH
21459: LD_INT 99
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: AND
21471: IFFALSE 21724
21473: GO 21475
21475: DISABLE
21476: LD_INT 0
21478: PPUSH
21479: PPUSH
// begin enable ;
21480: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21481: LD_ADDR_VAR 0 1
21485: PUSH
21486: LD_INT 34
21488: PUSH
21489: LD_INT 99
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PPUSH
21496: CALL_OW 69
21500: PUSH
21501: FOR_IN
21502: IFFALSE 21722
// begin if not i in hackTanks then
21504: LD_VAR 0 1
21508: PUSH
21509: LD_EXP 70
21513: IN
21514: NOT
21515: IFFALSE 21598
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21517: LD_ADDR_EXP 70
21521: PUSH
21522: LD_EXP 70
21526: PPUSH
21527: LD_EXP 70
21531: PUSH
21532: LD_INT 1
21534: PLUS
21535: PPUSH
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 1
21545: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21546: LD_ADDR_EXP 71
21550: PUSH
21551: LD_EXP 71
21555: PPUSH
21556: LD_EXP 71
21560: PUSH
21561: LD_INT 1
21563: PLUS
21564: PPUSH
21565: EMPTY
21566: PPUSH
21567: CALL_OW 1
21571: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21572: LD_ADDR_EXP 74
21576: PUSH
21577: LD_EXP 74
21581: PPUSH
21582: LD_EXP 74
21586: PUSH
21587: LD_INT 1
21589: PLUS
21590: PPUSH
21591: EMPTY
21592: PPUSH
21593: CALL_OW 1
21597: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21598: LD_VAR 0 1
21602: PPUSH
21603: CALL_OW 302
21607: NOT
21608: IFFALSE 21621
// begin HackUnlinkAll ( i ) ;
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL 21727 0 1
// continue ;
21619: GO 21501
// end ; HackCheckCapturedStatus ( i ) ;
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL 22170 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: LD_INT 81
21637: PUSH
21638: LD_VAR 0 1
21642: PPUSH
21643: CALL_OW 255
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 33
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 91
21664: PUSH
21665: LD_VAR 0 1
21669: PUSH
21670: LD_EXP 73
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 50
21682: PUSH
21683: EMPTY
21684: LIST
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: PPUSH
21692: CALL_OW 69
21696: ST_TO_ADDR
// if not tmp then
21697: LD_VAR 0 2
21701: NOT
21702: IFFALSE 21706
// continue ;
21704: GO 21501
// HackLink ( i , tmp ) ;
21706: LD_VAR 0 1
21710: PPUSH
21711: LD_VAR 0 2
21715: PPUSH
21716: CALL 21863 0 2
// end ;
21720: GO 21501
21722: POP
21723: POP
// end ;
21724: PPOPN 2
21726: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21727: LD_INT 0
21729: PPUSH
21730: PPUSH
21731: PPUSH
// if not hack in hackTanks then
21732: LD_VAR 0 1
21736: PUSH
21737: LD_EXP 70
21741: IN
21742: NOT
21743: IFFALSE 21747
// exit ;
21745: GO 21858
// index := GetElementIndex ( hackTanks , hack ) ;
21747: LD_ADDR_VAR 0 4
21751: PUSH
21752: LD_EXP 70
21756: PPUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL 29475 0 2
21766: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21767: LD_EXP 71
21771: PUSH
21772: LD_VAR 0 4
21776: ARRAY
21777: IFFALSE 21858
// begin for i in hackTanksCaptured [ index ] do
21779: LD_ADDR_VAR 0 3
21783: PUSH
21784: LD_EXP 71
21788: PUSH
21789: LD_VAR 0 4
21793: ARRAY
21794: PUSH
21795: FOR_IN
21796: IFFALSE 21822
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21798: LD_VAR 0 3
21802: PUSH
21803: LD_INT 1
21805: ARRAY
21806: PPUSH
21807: LD_VAR 0 3
21811: PUSH
21812: LD_INT 2
21814: ARRAY
21815: PPUSH
21816: CALL_OW 235
21820: GO 21795
21822: POP
21823: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21824: LD_ADDR_EXP 71
21828: PUSH
21829: LD_EXP 71
21833: PPUSH
21834: LD_VAR 0 4
21838: PPUSH
21839: EMPTY
21840: PPUSH
21841: CALL_OW 1
21845: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: LD_INT 0
21853: PPUSH
21854: CALL_OW 505
// end ; end ;
21858: LD_VAR 0 2
21862: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
21867: PPUSH
// if not hack in hackTanks or not vehicles then
21868: LD_VAR 0 1
21872: PUSH
21873: LD_EXP 70
21877: IN
21878: NOT
21879: PUSH
21880: LD_VAR 0 2
21884: NOT
21885: OR
21886: IFFALSE 21890
// exit ;
21888: GO 22165
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21890: LD_ADDR_VAR 0 2
21894: PUSH
21895: LD_VAR 0 1
21899: PPUSH
21900: LD_VAR 0 2
21904: PPUSH
21905: LD_INT 1
21907: PPUSH
21908: LD_INT 1
21910: PPUSH
21911: CALL 30125 0 4
21915: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21916: LD_ADDR_VAR 0 5
21920: PUSH
21921: LD_EXP 70
21925: PPUSH
21926: LD_VAR 0 1
21930: PPUSH
21931: CALL 29475 0 2
21935: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21936: LD_EXP 71
21940: PUSH
21941: LD_VAR 0 5
21945: ARRAY
21946: PUSH
21947: LD_EXP 72
21951: LESS
21952: IFFALSE 22141
// begin for i := 1 to vehicles do
21954: LD_ADDR_VAR 0 4
21958: PUSH
21959: DOUBLE
21960: LD_INT 1
21962: DEC
21963: ST_TO_ADDR
21964: LD_VAR 0 2
21968: PUSH
21969: FOR_TO
21970: IFFALSE 22139
// begin if hackTanksCaptured [ index ] = hackLimit then
21972: LD_EXP 71
21976: PUSH
21977: LD_VAR 0 5
21981: ARRAY
21982: PUSH
21983: LD_EXP 72
21987: EQUAL
21988: IFFALSE 21992
// break ;
21990: GO 22139
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21992: LD_ADDR_EXP 74
21996: PUSH
21997: LD_EXP 74
22001: PPUSH
22002: LD_VAR 0 5
22006: PPUSH
22007: LD_EXP 74
22011: PUSH
22012: LD_VAR 0 5
22016: ARRAY
22017: PUSH
22018: LD_INT 1
22020: PLUS
22021: PPUSH
22022: CALL_OW 1
22026: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22027: LD_ADDR_EXP 71
22031: PUSH
22032: LD_EXP 71
22036: PPUSH
22037: LD_VAR 0 5
22041: PUSH
22042: LD_EXP 71
22046: PUSH
22047: LD_VAR 0 5
22051: ARRAY
22052: PUSH
22053: LD_INT 1
22055: PLUS
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PPUSH
22061: LD_VAR 0 2
22065: PUSH
22066: LD_VAR 0 4
22070: ARRAY
22071: PUSH
22072: LD_VAR 0 2
22076: PUSH
22077: LD_VAR 0 4
22081: ARRAY
22082: PPUSH
22083: CALL_OW 255
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PPUSH
22092: CALL 29690 0 3
22096: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22097: LD_VAR 0 2
22101: PUSH
22102: LD_VAR 0 4
22106: ARRAY
22107: PPUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 255
22117: PPUSH
22118: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22122: LD_VAR 0 2
22126: PUSH
22127: LD_VAR 0 4
22131: ARRAY
22132: PPUSH
22133: CALL_OW 141
// end ;
22137: GO 21969
22139: POP
22140: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22141: LD_VAR 0 1
22145: PPUSH
22146: LD_EXP 71
22150: PUSH
22151: LD_VAR 0 5
22155: ARRAY
22156: PUSH
22157: LD_INT 0
22159: PLUS
22160: PPUSH
22161: CALL_OW 505
// end ;
22165: LD_VAR 0 3
22169: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22170: LD_INT 0
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
// if not hack in hackTanks then
22176: LD_VAR 0 1
22180: PUSH
22181: LD_EXP 70
22185: IN
22186: NOT
22187: IFFALSE 22191
// exit ;
22189: GO 22431
// index := GetElementIndex ( hackTanks , hack ) ;
22191: LD_ADDR_VAR 0 4
22195: PUSH
22196: LD_EXP 70
22200: PPUSH
22201: LD_VAR 0 1
22205: PPUSH
22206: CALL 29475 0 2
22210: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22211: LD_ADDR_VAR 0 3
22215: PUSH
22216: DOUBLE
22217: LD_EXP 71
22221: PUSH
22222: LD_VAR 0 4
22226: ARRAY
22227: INC
22228: ST_TO_ADDR
22229: LD_INT 1
22231: PUSH
22232: FOR_DOWNTO
22233: IFFALSE 22405
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22235: LD_ADDR_VAR 0 5
22239: PUSH
22240: LD_EXP 71
22244: PUSH
22245: LD_VAR 0 4
22249: ARRAY
22250: PUSH
22251: LD_VAR 0 3
22255: ARRAY
22256: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22257: LD_VAR 0 5
22261: PUSH
22262: LD_INT 1
22264: ARRAY
22265: PPUSH
22266: CALL_OW 302
22270: NOT
22271: PUSH
22272: LD_VAR 0 5
22276: PUSH
22277: LD_INT 1
22279: ARRAY
22280: PPUSH
22281: CALL_OW 255
22285: PUSH
22286: LD_VAR 0 1
22290: PPUSH
22291: CALL_OW 255
22295: NONEQUAL
22296: OR
22297: IFFALSE 22403
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22299: LD_VAR 0 5
22303: PUSH
22304: LD_INT 1
22306: ARRAY
22307: PPUSH
22308: CALL_OW 305
22312: PUSH
22313: LD_VAR 0 5
22317: PUSH
22318: LD_INT 1
22320: ARRAY
22321: PPUSH
22322: CALL_OW 255
22326: PUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 255
22336: EQUAL
22337: AND
22338: IFFALSE 22362
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22340: LD_VAR 0 5
22344: PUSH
22345: LD_INT 1
22347: ARRAY
22348: PPUSH
22349: LD_VAR 0 5
22353: PUSH
22354: LD_INT 2
22356: ARRAY
22357: PPUSH
22358: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22362: LD_ADDR_EXP 71
22366: PUSH
22367: LD_EXP 71
22371: PPUSH
22372: LD_VAR 0 4
22376: PPUSH
22377: LD_EXP 71
22381: PUSH
22382: LD_VAR 0 4
22386: ARRAY
22387: PPUSH
22388: LD_VAR 0 3
22392: PPUSH
22393: CALL_OW 3
22397: PPUSH
22398: CALL_OW 1
22402: ST_TO_ADDR
// end ; end ;
22403: GO 22232
22405: POP
22406: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_EXP 71
22416: PUSH
22417: LD_VAR 0 4
22421: ARRAY
22422: PUSH
22423: LD_INT 0
22425: PLUS
22426: PPUSH
22427: CALL_OW 505
// end ;
22431: LD_VAR 0 2
22435: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22436: LD_INT 0
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
// if not hack in hackTanks then
22442: LD_VAR 0 1
22446: PUSH
22447: LD_EXP 70
22451: IN
22452: NOT
22453: IFFALSE 22457
// exit ;
22455: GO 22542
// index := GetElementIndex ( hackTanks , hack ) ;
22457: LD_ADDR_VAR 0 5
22461: PUSH
22462: LD_EXP 70
22466: PPUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: CALL 29475 0 2
22476: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22477: LD_ADDR_VAR 0 4
22481: PUSH
22482: DOUBLE
22483: LD_INT 1
22485: DEC
22486: ST_TO_ADDR
22487: LD_EXP 71
22491: PUSH
22492: LD_VAR 0 5
22496: ARRAY
22497: PUSH
22498: FOR_TO
22499: IFFALSE 22540
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22501: LD_EXP 71
22505: PUSH
22506: LD_VAR 0 5
22510: ARRAY
22511: PUSH
22512: LD_VAR 0 4
22516: ARRAY
22517: PUSH
22518: LD_INT 1
22520: ARRAY
22521: PUSH
22522: LD_VAR 0 2
22526: EQUAL
22527: IFFALSE 22538
// KillUnit ( vehicle ) ;
22529: LD_VAR 0 2
22533: PPUSH
22534: CALL_OW 66
22538: GO 22498
22540: POP
22541: POP
// end ;
22542: LD_VAR 0 3
22546: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22547: LD_EXP 75
22551: NOT
22552: IFFALSE 22587
22554: GO 22556
22556: DISABLE
// begin initMiner := true ;
22557: LD_ADDR_EXP 75
22561: PUSH
22562: LD_INT 1
22564: ST_TO_ADDR
// minersList := [ ] ;
22565: LD_ADDR_EXP 76
22569: PUSH
22570: EMPTY
22571: ST_TO_ADDR
// minerMinesList := [ ] ;
22572: LD_ADDR_EXP 77
22576: PUSH
22577: EMPTY
22578: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22579: LD_ADDR_EXP 78
22583: PUSH
22584: LD_INT 5
22586: ST_TO_ADDR
// end ;
22587: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22588: LD_EXP 75
22592: PUSH
22593: LD_INT 34
22595: PUSH
22596: LD_INT 81
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 69
22607: AND
22608: IFFALSE 23069
22610: GO 22612
22612: DISABLE
22613: LD_INT 0
22615: PPUSH
22616: PPUSH
22617: PPUSH
22618: PPUSH
// begin enable ;
22619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22620: LD_ADDR_VAR 0 1
22624: PUSH
22625: LD_INT 34
22627: PUSH
22628: LD_INT 81
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PPUSH
22635: CALL_OW 69
22639: PUSH
22640: FOR_IN
22641: IFFALSE 22713
// begin if not i in minersList then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 76
22652: IN
22653: NOT
22654: IFFALSE 22711
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22656: LD_ADDR_EXP 76
22660: PUSH
22661: LD_EXP 76
22665: PPUSH
22666: LD_EXP 76
22670: PUSH
22671: LD_INT 1
22673: PLUS
22674: PPUSH
22675: LD_VAR 0 1
22679: PPUSH
22680: CALL_OW 1
22684: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22685: LD_ADDR_EXP 77
22689: PUSH
22690: LD_EXP 77
22694: PPUSH
22695: LD_EXP 77
22699: PUSH
22700: LD_INT 1
22702: PLUS
22703: PPUSH
22704: EMPTY
22705: PPUSH
22706: CALL_OW 1
22710: ST_TO_ADDR
// end end ;
22711: GO 22640
22713: POP
22714: POP
// for i := minerMinesList downto 1 do
22715: LD_ADDR_VAR 0 1
22719: PUSH
22720: DOUBLE
22721: LD_EXP 77
22725: INC
22726: ST_TO_ADDR
22727: LD_INT 1
22729: PUSH
22730: FOR_DOWNTO
22731: IFFALSE 23067
// begin if IsLive ( minersList [ i ] ) then
22733: LD_EXP 76
22737: PUSH
22738: LD_VAR 0 1
22742: ARRAY
22743: PPUSH
22744: CALL_OW 300
22748: IFFALSE 22776
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22750: LD_EXP 76
22754: PUSH
22755: LD_VAR 0 1
22759: ARRAY
22760: PPUSH
22761: LD_EXP 77
22765: PUSH
22766: LD_VAR 0 1
22770: ARRAY
22771: PPUSH
22772: CALL_OW 505
// if not minerMinesList [ i ] then
22776: LD_EXP 77
22780: PUSH
22781: LD_VAR 0 1
22785: ARRAY
22786: NOT
22787: IFFALSE 22791
// continue ;
22789: GO 22730
// for j := minerMinesList [ i ] downto 1 do
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: DOUBLE
22797: LD_EXP 77
22801: PUSH
22802: LD_VAR 0 1
22806: ARRAY
22807: INC
22808: ST_TO_ADDR
22809: LD_INT 1
22811: PUSH
22812: FOR_DOWNTO
22813: IFFALSE 23063
// begin side := GetSide ( minersList [ i ] ) ;
22815: LD_ADDR_VAR 0 3
22819: PUSH
22820: LD_EXP 76
22824: PUSH
22825: LD_VAR 0 1
22829: ARRAY
22830: PPUSH
22831: CALL_OW 255
22835: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22836: LD_ADDR_VAR 0 4
22840: PUSH
22841: LD_EXP 77
22845: PUSH
22846: LD_VAR 0 1
22850: ARRAY
22851: PUSH
22852: LD_VAR 0 2
22856: ARRAY
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: PPUSH
22862: LD_EXP 77
22866: PUSH
22867: LD_VAR 0 1
22871: ARRAY
22872: PUSH
22873: LD_VAR 0 2
22877: ARRAY
22878: PUSH
22879: LD_INT 2
22881: ARRAY
22882: PPUSH
22883: CALL_OW 428
22887: ST_TO_ADDR
// if not tmp then
22888: LD_VAR 0 4
22892: NOT
22893: IFFALSE 22897
// continue ;
22895: GO 22812
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22897: LD_VAR 0 4
22901: PUSH
22902: LD_INT 81
22904: PUSH
22905: LD_VAR 0 3
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 69
22918: IN
22919: PUSH
22920: LD_EXP 77
22924: PUSH
22925: LD_VAR 0 1
22929: ARRAY
22930: PUSH
22931: LD_VAR 0 2
22935: ARRAY
22936: PUSH
22937: LD_INT 1
22939: ARRAY
22940: PPUSH
22941: LD_EXP 77
22945: PUSH
22946: LD_VAR 0 1
22950: ARRAY
22951: PUSH
22952: LD_VAR 0 2
22956: ARRAY
22957: PUSH
22958: LD_INT 2
22960: ARRAY
22961: PPUSH
22962: CALL_OW 458
22966: AND
22967: IFFALSE 23061
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22969: LD_EXP 77
22973: PUSH
22974: LD_VAR 0 1
22978: ARRAY
22979: PUSH
22980: LD_VAR 0 2
22984: ARRAY
22985: PUSH
22986: LD_INT 1
22988: ARRAY
22989: PPUSH
22990: LD_EXP 77
22994: PUSH
22995: LD_VAR 0 1
22999: ARRAY
23000: PUSH
23001: LD_VAR 0 2
23005: ARRAY
23006: PUSH
23007: LD_INT 2
23009: ARRAY
23010: PPUSH
23011: LD_VAR 0 3
23015: PPUSH
23016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23020: LD_ADDR_EXP 77
23024: PUSH
23025: LD_EXP 77
23029: PPUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_EXP 77
23039: PUSH
23040: LD_VAR 0 1
23044: ARRAY
23045: PPUSH
23046: LD_VAR 0 2
23050: PPUSH
23051: CALL_OW 3
23055: PPUSH
23056: CALL_OW 1
23060: ST_TO_ADDR
// end ; end ;
23061: GO 22812
23063: POP
23064: POP
// end ;
23065: GO 22730
23067: POP
23068: POP
// end ;
23069: PPOPN 4
23071: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23072: LD_INT 0
23074: PPUSH
23075: PPUSH
// result := false ;
23076: LD_ADDR_VAR 0 4
23080: PUSH
23081: LD_INT 0
23083: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23084: LD_VAR 0 1
23088: PPUSH
23089: CALL_OW 264
23093: PUSH
23094: LD_INT 81
23096: EQUAL
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23342
// index := GetElementIndex ( minersList , unit ) ;
23102: LD_ADDR_VAR 0 5
23106: PUSH
23107: LD_EXP 76
23111: PPUSH
23112: LD_VAR 0 1
23116: PPUSH
23117: CALL 29475 0 2
23121: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23122: LD_EXP 77
23126: PUSH
23127: LD_VAR 0 5
23131: ARRAY
23132: PUSH
23133: LD_EXP 78
23137: GREATEREQUAL
23138: IFFALSE 23142
// exit ;
23140: GO 23342
// ComMoveXY ( unit , x , y ) ;
23142: LD_VAR 0 1
23146: PPUSH
23147: LD_VAR 0 2
23151: PPUSH
23152: LD_VAR 0 3
23156: PPUSH
23157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23161: LD_INT 35
23163: PPUSH
23164: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23168: LD_VAR 0 1
23172: PPUSH
23173: LD_VAR 0 2
23177: PPUSH
23178: LD_VAR 0 3
23182: PPUSH
23183: CALL 60830 0 3
23187: NOT
23188: PUSH
23189: LD_VAR 0 1
23193: PPUSH
23194: CALL_OW 314
23198: AND
23199: IFFALSE 23203
// exit ;
23201: GO 23342
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23203: LD_VAR 0 2
23207: PPUSH
23208: LD_VAR 0 3
23212: PPUSH
23213: CALL_OW 428
23217: PUSH
23218: LD_VAR 0 1
23222: EQUAL
23223: PUSH
23224: LD_VAR 0 1
23228: PPUSH
23229: CALL_OW 314
23233: NOT
23234: AND
23235: IFFALSE 23161
// PlaySoundXY ( x , y , PlantMine ) ;
23237: LD_VAR 0 2
23241: PPUSH
23242: LD_VAR 0 3
23246: PPUSH
23247: LD_STRING PlantMine
23249: PPUSH
23250: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23254: LD_VAR 0 2
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 255
23273: PPUSH
23274: LD_INT 0
23276: PPUSH
23277: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23281: LD_ADDR_EXP 77
23285: PUSH
23286: LD_EXP 77
23290: PPUSH
23291: LD_VAR 0 5
23295: PUSH
23296: LD_EXP 77
23300: PUSH
23301: LD_VAR 0 5
23305: ARRAY
23306: PUSH
23307: LD_INT 1
23309: PLUS
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PPUSH
23315: LD_VAR 0 2
23319: PUSH
23320: LD_VAR 0 3
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL 29690 0 3
23333: ST_TO_ADDR
// result := true ;
23334: LD_ADDR_VAR 0 4
23338: PUSH
23339: LD_INT 1
23341: ST_TO_ADDR
// end ;
23342: LD_VAR 0 4
23346: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23347: LD_INT 0
23349: PPUSH
23350: PPUSH
23351: PPUSH
// if not unit in minersList then
23352: LD_VAR 0 1
23356: PUSH
23357: LD_EXP 76
23361: IN
23362: NOT
23363: IFFALSE 23367
// exit ;
23365: GO 23759
// index := GetElementIndex ( minersList , unit ) ;
23367: LD_ADDR_VAR 0 6
23371: PUSH
23372: LD_EXP 76
23376: PPUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL 29475 0 2
23386: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23387: LD_ADDR_VAR 0 5
23391: PUSH
23392: DOUBLE
23393: LD_EXP 77
23397: PUSH
23398: LD_VAR 0 6
23402: ARRAY
23403: INC
23404: ST_TO_ADDR
23405: LD_INT 1
23407: PUSH
23408: FOR_DOWNTO
23409: IFFALSE 23570
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23411: LD_EXP 77
23415: PUSH
23416: LD_VAR 0 6
23420: ARRAY
23421: PUSH
23422: LD_VAR 0 5
23426: ARRAY
23427: PUSH
23428: LD_INT 1
23430: ARRAY
23431: PUSH
23432: LD_VAR 0 2
23436: EQUAL
23437: PUSH
23438: LD_EXP 77
23442: PUSH
23443: LD_VAR 0 6
23447: ARRAY
23448: PUSH
23449: LD_VAR 0 5
23453: ARRAY
23454: PUSH
23455: LD_INT 2
23457: ARRAY
23458: PUSH
23459: LD_VAR 0 3
23463: EQUAL
23464: AND
23465: IFFALSE 23568
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23467: LD_EXP 77
23471: PUSH
23472: LD_VAR 0 6
23476: ARRAY
23477: PUSH
23478: LD_VAR 0 5
23482: ARRAY
23483: PUSH
23484: LD_INT 1
23486: ARRAY
23487: PPUSH
23488: LD_EXP 77
23492: PUSH
23493: LD_VAR 0 6
23497: ARRAY
23498: PUSH
23499: LD_VAR 0 5
23503: ARRAY
23504: PUSH
23505: LD_INT 2
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 1
23513: PPUSH
23514: CALL_OW 255
23518: PPUSH
23519: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23523: LD_ADDR_EXP 77
23527: PUSH
23528: LD_EXP 77
23532: PPUSH
23533: LD_VAR 0 6
23537: PPUSH
23538: LD_EXP 77
23542: PUSH
23543: LD_VAR 0 6
23547: ARRAY
23548: PPUSH
23549: LD_VAR 0 5
23553: PPUSH
23554: CALL_OW 3
23558: PPUSH
23559: CALL_OW 1
23563: ST_TO_ADDR
// exit ;
23564: POP
23565: POP
23566: GO 23759
// end ; end ;
23568: GO 23408
23570: POP
23571: POP
// for i := minerMinesList [ index ] downto 1 do
23572: LD_ADDR_VAR 0 5
23576: PUSH
23577: DOUBLE
23578: LD_EXP 77
23582: PUSH
23583: LD_VAR 0 6
23587: ARRAY
23588: INC
23589: ST_TO_ADDR
23590: LD_INT 1
23592: PUSH
23593: FOR_DOWNTO
23594: IFFALSE 23757
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23596: LD_EXP 77
23600: PUSH
23601: LD_VAR 0 6
23605: ARRAY
23606: PUSH
23607: LD_VAR 0 5
23611: ARRAY
23612: PUSH
23613: LD_INT 1
23615: ARRAY
23616: PPUSH
23617: LD_EXP 77
23621: PUSH
23622: LD_VAR 0 6
23626: ARRAY
23627: PUSH
23628: LD_VAR 0 5
23632: ARRAY
23633: PUSH
23634: LD_INT 2
23636: ARRAY
23637: PPUSH
23638: LD_VAR 0 2
23642: PPUSH
23643: LD_VAR 0 3
23647: PPUSH
23648: CALL_OW 298
23652: PUSH
23653: LD_INT 6
23655: LESS
23656: IFFALSE 23755
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23658: LD_EXP 77
23662: PUSH
23663: LD_VAR 0 6
23667: ARRAY
23668: PUSH
23669: LD_VAR 0 5
23673: ARRAY
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PPUSH
23679: LD_EXP 77
23683: PUSH
23684: LD_VAR 0 6
23688: ARRAY
23689: PUSH
23690: LD_VAR 0 5
23694: ARRAY
23695: PUSH
23696: LD_INT 2
23698: ARRAY
23699: PPUSH
23700: LD_VAR 0 1
23704: PPUSH
23705: CALL_OW 255
23709: PPUSH
23710: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23714: LD_ADDR_EXP 77
23718: PUSH
23719: LD_EXP 77
23723: PPUSH
23724: LD_VAR 0 6
23728: PPUSH
23729: LD_EXP 77
23733: PUSH
23734: LD_VAR 0 6
23738: ARRAY
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: CALL_OW 3
23749: PPUSH
23750: CALL_OW 1
23754: ST_TO_ADDR
// end ; end ;
23755: GO 23593
23757: POP
23758: POP
// end ;
23759: LD_VAR 0 4
23763: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23764: LD_INT 0
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 264
23784: PUSH
23785: LD_INT 81
23787: EQUAL
23788: NOT
23789: PUSH
23790: LD_VAR 0 1
23794: PUSH
23795: LD_EXP 76
23799: IN
23800: NOT
23801: OR
23802: IFFALSE 23806
// exit ;
23804: GO 24128
// index := GetElementIndex ( minersList , unit ) ;
23806: LD_ADDR_VAR 0 6
23810: PUSH
23811: LD_EXP 76
23815: PPUSH
23816: LD_VAR 0 1
23820: PPUSH
23821: CALL 29475 0 2
23825: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23826: LD_ADDR_VAR 0 8
23830: PUSH
23831: LD_EXP 78
23835: PUSH
23836: LD_EXP 77
23840: PUSH
23841: LD_VAR 0 6
23845: ARRAY
23846: MINUS
23847: ST_TO_ADDR
// if not minesFreeAmount then
23848: LD_VAR 0 8
23852: NOT
23853: IFFALSE 23857
// exit ;
23855: GO 24128
// tmp := [ ] ;
23857: LD_ADDR_VAR 0 7
23861: PUSH
23862: EMPTY
23863: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23864: LD_ADDR_VAR 0 5
23868: PUSH
23869: DOUBLE
23870: LD_INT 1
23872: DEC
23873: ST_TO_ADDR
23874: LD_VAR 0 8
23878: PUSH
23879: FOR_TO
23880: IFFALSE 24075
// begin _d := rand ( 0 , 5 ) ;
23882: LD_ADDR_VAR 0 11
23886: PUSH
23887: LD_INT 0
23889: PPUSH
23890: LD_INT 5
23892: PPUSH
23893: CALL_OW 12
23897: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23898: LD_ADDR_VAR 0 12
23902: PUSH
23903: LD_INT 2
23905: PPUSH
23906: LD_INT 6
23908: PPUSH
23909: CALL_OW 12
23913: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23914: LD_ADDR_VAR 0 9
23918: PUSH
23919: LD_VAR 0 2
23923: PPUSH
23924: LD_VAR 0 11
23928: PPUSH
23929: LD_VAR 0 12
23933: PPUSH
23934: CALL_OW 272
23938: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23939: LD_ADDR_VAR 0 10
23943: PUSH
23944: LD_VAR 0 3
23948: PPUSH
23949: LD_VAR 0 11
23953: PPUSH
23954: LD_VAR 0 12
23958: PPUSH
23959: CALL_OW 273
23963: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23964: LD_VAR 0 9
23968: PPUSH
23969: LD_VAR 0 10
23973: PPUSH
23974: CALL_OW 488
23978: PUSH
23979: LD_VAR 0 9
23983: PUSH
23984: LD_VAR 0 10
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_VAR 0 7
23997: IN
23998: NOT
23999: AND
24000: PUSH
24001: LD_VAR 0 9
24005: PPUSH
24006: LD_VAR 0 10
24010: PPUSH
24011: CALL_OW 458
24015: NOT
24016: AND
24017: IFFALSE 24059
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24019: LD_ADDR_VAR 0 7
24023: PUSH
24024: LD_VAR 0 7
24028: PPUSH
24029: LD_VAR 0 7
24033: PUSH
24034: LD_INT 1
24036: PLUS
24037: PPUSH
24038: LD_VAR 0 9
24042: PUSH
24043: LD_VAR 0 10
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PPUSH
24052: CALL_OW 1
24056: ST_TO_ADDR
24057: GO 24073
// i := i - 1 ;
24059: LD_ADDR_VAR 0 5
24063: PUSH
24064: LD_VAR 0 5
24068: PUSH
24069: LD_INT 1
24071: MINUS
24072: ST_TO_ADDR
// end ;
24073: GO 23879
24075: POP
24076: POP
// for i in tmp do
24077: LD_ADDR_VAR 0 5
24081: PUSH
24082: LD_VAR 0 7
24086: PUSH
24087: FOR_IN
24088: IFFALSE 24126
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 5
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: LD_VAR 0 5
24108: PUSH
24109: LD_INT 2
24111: ARRAY
24112: PPUSH
24113: CALL 23072 0 3
24117: NOT
24118: IFFALSE 24124
// exit ;
24120: POP
24121: POP
24122: GO 24128
24124: GO 24087
24126: POP
24127: POP
// end ;
24128: LD_VAR 0 4
24132: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
// if not GetClass ( unit ) = class_sniper then
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 257
24151: PUSH
24152: LD_INT 5
24154: EQUAL
24155: NOT
24156: IFFALSE 24160
// exit ;
24158: GO 24548
// dist := 8 ;
24160: LD_ADDR_VAR 0 5
24164: PUSH
24165: LD_INT 8
24167: ST_TO_ADDR
// viewRange := 12 ;
24168: LD_ADDR_VAR 0 7
24172: PUSH
24173: LD_INT 12
24175: ST_TO_ADDR
// side := GetSide ( unit ) ;
24176: LD_ADDR_VAR 0 6
24180: PUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 255
24190: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24191: LD_INT 61
24193: PPUSH
24194: LD_VAR 0 6
24198: PPUSH
24199: CALL_OW 321
24203: PUSH
24204: LD_INT 2
24206: EQUAL
24207: IFFALSE 24217
// viewRange := 16 ;
24209: LD_ADDR_VAR 0 7
24213: PUSH
24214: LD_INT 16
24216: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24217: LD_VAR 0 1
24221: PPUSH
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: CALL_OW 297
24236: PUSH
24237: LD_VAR 0 5
24241: GREATER
24242: IFFALSE 24321
// begin ComMoveXY ( unit , x , y ) ;
24244: LD_VAR 0 1
24248: PPUSH
24249: LD_VAR 0 2
24253: PPUSH
24254: LD_VAR 0 3
24258: PPUSH
24259: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24263: LD_INT 35
24265: PPUSH
24266: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24270: LD_VAR 0 1
24274: PPUSH
24275: LD_VAR 0 2
24279: PPUSH
24280: LD_VAR 0 3
24284: PPUSH
24285: CALL 60830 0 3
24289: NOT
24290: IFFALSE 24294
// exit ;
24292: GO 24548
// until GetDistUnitXY ( unit , x , y ) < dist ;
24294: LD_VAR 0 1
24298: PPUSH
24299: LD_VAR 0 2
24303: PPUSH
24304: LD_VAR 0 3
24308: PPUSH
24309: CALL_OW 297
24313: PUSH
24314: LD_VAR 0 5
24318: LESS
24319: IFFALSE 24263
// end ; ComTurnXY ( unit , x , y ) ;
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_VAR 0 2
24330: PPUSH
24331: LD_VAR 0 3
24335: PPUSH
24336: CALL_OW 118
// wait ( 5 ) ;
24340: LD_INT 5
24342: PPUSH
24343: CALL_OW 67
// _d := GetDir ( unit ) ;
24347: LD_ADDR_VAR 0 10
24351: PUSH
24352: LD_VAR 0 1
24356: PPUSH
24357: CALL_OW 254
24361: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24362: LD_ADDR_VAR 0 8
24366: PUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 250
24376: PPUSH
24377: LD_VAR 0 10
24381: PPUSH
24382: LD_VAR 0 5
24386: PPUSH
24387: CALL_OW 272
24391: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24392: LD_ADDR_VAR 0 9
24396: PUSH
24397: LD_VAR 0 1
24401: PPUSH
24402: CALL_OW 251
24406: PPUSH
24407: LD_VAR 0 10
24411: PPUSH
24412: LD_VAR 0 5
24416: PPUSH
24417: CALL_OW 273
24421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24422: LD_VAR 0 8
24426: PPUSH
24427: LD_VAR 0 9
24431: PPUSH
24432: CALL_OW 488
24436: NOT
24437: IFFALSE 24441
// exit ;
24439: GO 24548
// ComAnimCustom ( unit , 1 ) ;
24441: LD_VAR 0 1
24445: PPUSH
24446: LD_INT 1
24448: PPUSH
24449: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24453: LD_VAR 0 8
24457: PPUSH
24458: LD_VAR 0 9
24462: PPUSH
24463: LD_VAR 0 6
24467: PPUSH
24468: LD_VAR 0 7
24472: PPUSH
24473: CALL_OW 330
// repeat wait ( 1 ) ;
24477: LD_INT 1
24479: PPUSH
24480: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 316
24493: PUSH
24494: LD_VAR 0 1
24498: PPUSH
24499: CALL_OW 314
24503: OR
24504: PUSH
24505: LD_VAR 0 1
24509: PPUSH
24510: CALL_OW 302
24514: NOT
24515: OR
24516: PUSH
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 301
24526: OR
24527: IFFALSE 24477
// RemoveSeeing ( _x , _y , side ) ;
24529: LD_VAR 0 8
24533: PPUSH
24534: LD_VAR 0 9
24538: PPUSH
24539: LD_VAR 0 6
24543: PPUSH
24544: CALL_OW 331
// end ; end_of_file
24548: LD_VAR 0 4
24552: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24553: LD_INT 0
24555: PPUSH
24556: PPUSH
// if exist_mode then
24557: LD_VAR 0 2
24561: IFFALSE 24586
// unit := CreateCharacter ( prefix & ident ) else
24563: LD_ADDR_VAR 0 5
24567: PUSH
24568: LD_VAR 0 3
24572: PUSH
24573: LD_VAR 0 1
24577: STR
24578: PPUSH
24579: CALL_OW 34
24583: ST_TO_ADDR
24584: GO 24601
// unit := NewCharacter ( ident ) ;
24586: LD_ADDR_VAR 0 5
24590: PUSH
24591: LD_VAR 0 1
24595: PPUSH
24596: CALL_OW 25
24600: ST_TO_ADDR
// result := unit ;
24601: LD_ADDR_VAR 0 4
24605: PUSH
24606: LD_VAR 0 5
24610: ST_TO_ADDR
// end ;
24611: LD_VAR 0 4
24615: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24616: LD_INT 0
24618: PPUSH
24619: PPUSH
// if not side or not nation then
24620: LD_VAR 0 1
24624: NOT
24625: PUSH
24626: LD_VAR 0 2
24630: NOT
24631: OR
24632: IFFALSE 24636
// exit ;
24634: GO 25404
// case nation of nation_american :
24636: LD_VAR 0 2
24640: PUSH
24641: LD_INT 1
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24863
24649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24650: LD_ADDR_VAR 0 4
24654: PUSH
24655: LD_INT 35
24657: PUSH
24658: LD_INT 45
24660: PUSH
24661: LD_INT 46
24663: PUSH
24664: LD_INT 47
24666: PUSH
24667: LD_INT 82
24669: PUSH
24670: LD_INT 83
24672: PUSH
24673: LD_INT 84
24675: PUSH
24676: LD_INT 85
24678: PUSH
24679: LD_INT 86
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 6
24690: PUSH
24691: LD_INT 15
24693: PUSH
24694: LD_INT 16
24696: PUSH
24697: LD_INT 7
24699: PUSH
24700: LD_INT 12
24702: PUSH
24703: LD_INT 13
24705: PUSH
24706: LD_INT 10
24708: PUSH
24709: LD_INT 14
24711: PUSH
24712: LD_INT 20
24714: PUSH
24715: LD_INT 21
24717: PUSH
24718: LD_INT 22
24720: PUSH
24721: LD_INT 25
24723: PUSH
24724: LD_INT 32
24726: PUSH
24727: LD_INT 27
24729: PUSH
24730: LD_INT 36
24732: PUSH
24733: LD_INT 69
24735: PUSH
24736: LD_INT 39
24738: PUSH
24739: LD_INT 34
24741: PUSH
24742: LD_INT 40
24744: PUSH
24745: LD_INT 48
24747: PUSH
24748: LD_INT 49
24750: PUSH
24751: LD_INT 50
24753: PUSH
24754: LD_INT 51
24756: PUSH
24757: LD_INT 52
24759: PUSH
24760: LD_INT 53
24762: PUSH
24763: LD_INT 54
24765: PUSH
24766: LD_INT 55
24768: PUSH
24769: LD_INT 56
24771: PUSH
24772: LD_INT 57
24774: PUSH
24775: LD_INT 58
24777: PUSH
24778: LD_INT 59
24780: PUSH
24781: LD_INT 60
24783: PUSH
24784: LD_INT 61
24786: PUSH
24787: LD_INT 62
24789: PUSH
24790: LD_INT 80
24792: PUSH
24793: LD_INT 82
24795: PUSH
24796: LD_INT 83
24798: PUSH
24799: LD_INT 84
24801: PUSH
24802: LD_INT 85
24804: PUSH
24805: LD_INT 86
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
24861: GO 25328
24863: LD_INT 2
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 25097
24871: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24872: LD_ADDR_VAR 0 4
24876: PUSH
24877: LD_INT 35
24879: PUSH
24880: LD_INT 45
24882: PUSH
24883: LD_INT 46
24885: PUSH
24886: LD_INT 47
24888: PUSH
24889: LD_INT 82
24891: PUSH
24892: LD_INT 83
24894: PUSH
24895: LD_INT 84
24897: PUSH
24898: LD_INT 85
24900: PUSH
24901: LD_INT 87
24903: PUSH
24904: LD_INT 70
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 4
24918: PUSH
24919: LD_INT 5
24921: PUSH
24922: LD_INT 6
24924: PUSH
24925: LD_INT 15
24927: PUSH
24928: LD_INT 18
24930: PUSH
24931: LD_INT 7
24933: PUSH
24934: LD_INT 17
24936: PUSH
24937: LD_INT 8
24939: PUSH
24940: LD_INT 20
24942: PUSH
24943: LD_INT 21
24945: PUSH
24946: LD_INT 22
24948: PUSH
24949: LD_INT 72
24951: PUSH
24952: LD_INT 26
24954: PUSH
24955: LD_INT 69
24957: PUSH
24958: LD_INT 39
24960: PUSH
24961: LD_INT 40
24963: PUSH
24964: LD_INT 41
24966: PUSH
24967: LD_INT 42
24969: PUSH
24970: LD_INT 43
24972: PUSH
24973: LD_INT 48
24975: PUSH
24976: LD_INT 49
24978: PUSH
24979: LD_INT 50
24981: PUSH
24982: LD_INT 51
24984: PUSH
24985: LD_INT 52
24987: PUSH
24988: LD_INT 53
24990: PUSH
24991: LD_INT 54
24993: PUSH
24994: LD_INT 55
24996: PUSH
24997: LD_INT 56
24999: PUSH
25000: LD_INT 60
25002: PUSH
25003: LD_INT 61
25005: PUSH
25006: LD_INT 62
25008: PUSH
25009: LD_INT 66
25011: PUSH
25012: LD_INT 67
25014: PUSH
25015: LD_INT 68
25017: PUSH
25018: LD_INT 81
25020: PUSH
25021: LD_INT 82
25023: PUSH
25024: LD_INT 83
25026: PUSH
25027: LD_INT 84
25029: PUSH
25030: LD_INT 85
25032: PUSH
25033: LD_INT 87
25035: PUSH
25036: LD_INT 88
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: ST_TO_ADDR
25095: GO 25328
25097: LD_INT 3
25099: DOUBLE
25100: EQUAL
25101: IFTRUE 25105
25103: GO 25327
25105: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25106: LD_ADDR_VAR 0 4
25110: PUSH
25111: LD_INT 46
25113: PUSH
25114: LD_INT 47
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 82
25125: PUSH
25126: LD_INT 83
25128: PUSH
25129: LD_INT 84
25131: PUSH
25132: LD_INT 85
25134: PUSH
25135: LD_INT 86
25137: PUSH
25138: LD_INT 11
25140: PUSH
25141: LD_INT 9
25143: PUSH
25144: LD_INT 20
25146: PUSH
25147: LD_INT 19
25149: PUSH
25150: LD_INT 21
25152: PUSH
25153: LD_INT 24
25155: PUSH
25156: LD_INT 22
25158: PUSH
25159: LD_INT 25
25161: PUSH
25162: LD_INT 28
25164: PUSH
25165: LD_INT 29
25167: PUSH
25168: LD_INT 30
25170: PUSH
25171: LD_INT 31
25173: PUSH
25174: LD_INT 37
25176: PUSH
25177: LD_INT 38
25179: PUSH
25180: LD_INT 32
25182: PUSH
25183: LD_INT 27
25185: PUSH
25186: LD_INT 33
25188: PUSH
25189: LD_INT 69
25191: PUSH
25192: LD_INT 39
25194: PUSH
25195: LD_INT 34
25197: PUSH
25198: LD_INT 40
25200: PUSH
25201: LD_INT 71
25203: PUSH
25204: LD_INT 23
25206: PUSH
25207: LD_INT 44
25209: PUSH
25210: LD_INT 48
25212: PUSH
25213: LD_INT 49
25215: PUSH
25216: LD_INT 50
25218: PUSH
25219: LD_INT 51
25221: PUSH
25222: LD_INT 52
25224: PUSH
25225: LD_INT 53
25227: PUSH
25228: LD_INT 54
25230: PUSH
25231: LD_INT 55
25233: PUSH
25234: LD_INT 56
25236: PUSH
25237: LD_INT 57
25239: PUSH
25240: LD_INT 58
25242: PUSH
25243: LD_INT 59
25245: PUSH
25246: LD_INT 63
25248: PUSH
25249: LD_INT 64
25251: PUSH
25252: LD_INT 65
25254: PUSH
25255: LD_INT 82
25257: PUSH
25258: LD_INT 83
25260: PUSH
25261: LD_INT 84
25263: PUSH
25264: LD_INT 85
25266: PUSH
25267: LD_INT 86
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 25328
25327: POP
// if state > - 1 and state < 3 then
25328: LD_VAR 0 3
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: GREATER
25337: PUSH
25338: LD_VAR 0 3
25342: PUSH
25343: LD_INT 3
25345: LESS
25346: AND
25347: IFFALSE 25404
// for i in result do
25349: LD_ADDR_VAR 0 5
25353: PUSH
25354: LD_VAR 0 4
25358: PUSH
25359: FOR_IN
25360: IFFALSE 25402
// if GetTech ( i , side ) <> state then
25362: LD_VAR 0 5
25366: PPUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL_OW 321
25376: PUSH
25377: LD_VAR 0 3
25381: NONEQUAL
25382: IFFALSE 25400
// result := result diff i ;
25384: LD_ADDR_VAR 0 4
25388: PUSH
25389: LD_VAR 0 4
25393: PUSH
25394: LD_VAR 0 5
25398: DIFF
25399: ST_TO_ADDR
25400: GO 25359
25402: POP
25403: POP
// end ;
25404: LD_VAR 0 4
25408: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25409: LD_INT 0
25411: PPUSH
25412: PPUSH
25413: PPUSH
// result := true ;
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_INT 1
25421: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25422: LD_ADDR_VAR 0 5
25426: PUSH
25427: LD_VAR 0 2
25431: PPUSH
25432: CALL_OW 480
25436: ST_TO_ADDR
// if not tmp then
25437: LD_VAR 0 5
25441: NOT
25442: IFFALSE 25446
// exit ;
25444: GO 25495
// for i in tmp do
25446: LD_ADDR_VAR 0 4
25450: PUSH
25451: LD_VAR 0 5
25455: PUSH
25456: FOR_IN
25457: IFFALSE 25493
// if GetTech ( i , side ) <> state_researched then
25459: LD_VAR 0 4
25463: PPUSH
25464: LD_VAR 0 1
25468: PPUSH
25469: CALL_OW 321
25473: PUSH
25474: LD_INT 2
25476: NONEQUAL
25477: IFFALSE 25491
// begin result := false ;
25479: LD_ADDR_VAR 0 3
25483: PUSH
25484: LD_INT 0
25486: ST_TO_ADDR
// exit ;
25487: POP
25488: POP
25489: GO 25495
// end ;
25491: GO 25456
25493: POP
25494: POP
// end ;
25495: LD_VAR 0 3
25499: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25500: LD_INT 0
25502: PPUSH
25503: PPUSH
25504: PPUSH
25505: PPUSH
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
25510: PPUSH
25511: PPUSH
25512: PPUSH
25513: PPUSH
25514: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25515: LD_VAR 0 1
25519: NOT
25520: PUSH
25521: LD_VAR 0 1
25525: PPUSH
25526: CALL_OW 257
25530: PUSH
25531: LD_INT 9
25533: NONEQUAL
25534: OR
25535: IFFALSE 25539
// exit ;
25537: GO 26112
// side := GetSide ( unit ) ;
25539: LD_ADDR_VAR 0 9
25543: PUSH
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 255
25553: ST_TO_ADDR
// tech_space := tech_spacanom ;
25554: LD_ADDR_VAR 0 12
25558: PUSH
25559: LD_INT 29
25561: ST_TO_ADDR
// tech_time := tech_taurad ;
25562: LD_ADDR_VAR 0 13
25566: PUSH
25567: LD_INT 28
25569: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25570: LD_ADDR_VAR 0 11
25574: PUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 310
25584: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25585: LD_VAR 0 11
25589: PPUSH
25590: CALL_OW 247
25594: PUSH
25595: LD_INT 2
25597: EQUAL
25598: IFFALSE 25602
// exit ;
25600: GO 26112
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25602: LD_ADDR_VAR 0 8
25606: PUSH
25607: LD_INT 81
25609: PUSH
25610: LD_VAR 0 9
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 21
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PPUSH
25640: CALL_OW 69
25644: ST_TO_ADDR
// if not tmp then
25645: LD_VAR 0 8
25649: NOT
25650: IFFALSE 25654
// exit ;
25652: GO 26112
// if in_unit then
25654: LD_VAR 0 11
25658: IFFALSE 25682
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25660: LD_ADDR_VAR 0 10
25664: PUSH
25665: LD_VAR 0 8
25669: PPUSH
25670: LD_VAR 0 11
25674: PPUSH
25675: CALL_OW 74
25679: ST_TO_ADDR
25680: GO 25702
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25682: LD_ADDR_VAR 0 10
25686: PUSH
25687: LD_VAR 0 8
25691: PPUSH
25692: LD_VAR 0 1
25696: PPUSH
25697: CALL_OW 74
25701: ST_TO_ADDR
// if not enemy then
25702: LD_VAR 0 10
25706: NOT
25707: IFFALSE 25711
// exit ;
25709: GO 26112
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25711: LD_VAR 0 11
25715: PUSH
25716: LD_VAR 0 11
25720: PPUSH
25721: LD_VAR 0 10
25725: PPUSH
25726: CALL_OW 296
25730: PUSH
25731: LD_INT 13
25733: GREATER
25734: AND
25735: PUSH
25736: LD_VAR 0 1
25740: PPUSH
25741: LD_VAR 0 10
25745: PPUSH
25746: CALL_OW 296
25750: PUSH
25751: LD_INT 12
25753: GREATER
25754: OR
25755: IFFALSE 25759
// exit ;
25757: GO 26112
// missile := [ 1 ] ;
25759: LD_ADDR_VAR 0 14
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25770: LD_VAR 0 9
25774: PPUSH
25775: LD_VAR 0 12
25779: PPUSH
25780: CALL_OW 325
25784: IFFALSE 25813
// missile := Replace ( missile , missile + 1 , 2 ) ;
25786: LD_ADDR_VAR 0 14
25790: PUSH
25791: LD_VAR 0 14
25795: PPUSH
25796: LD_VAR 0 14
25800: PUSH
25801: LD_INT 1
25803: PLUS
25804: PPUSH
25805: LD_INT 2
25807: PPUSH
25808: CALL_OW 1
25812: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25813: LD_VAR 0 9
25817: PPUSH
25818: LD_VAR 0 13
25822: PPUSH
25823: CALL_OW 325
25827: PUSH
25828: LD_VAR 0 10
25832: PPUSH
25833: CALL_OW 255
25837: PPUSH
25838: LD_VAR 0 13
25842: PPUSH
25843: CALL_OW 325
25847: NOT
25848: AND
25849: IFFALSE 25878
// missile := Replace ( missile , missile + 1 , 3 ) ;
25851: LD_ADDR_VAR 0 14
25855: PUSH
25856: LD_VAR 0 14
25860: PPUSH
25861: LD_VAR 0 14
25865: PUSH
25866: LD_INT 1
25868: PLUS
25869: PPUSH
25870: LD_INT 3
25872: PPUSH
25873: CALL_OW 1
25877: ST_TO_ADDR
// if missile < 2 then
25878: LD_VAR 0 14
25882: PUSH
25883: LD_INT 2
25885: LESS
25886: IFFALSE 25890
// exit ;
25888: GO 26112
// x := GetX ( enemy ) ;
25890: LD_ADDR_VAR 0 4
25894: PUSH
25895: LD_VAR 0 10
25899: PPUSH
25900: CALL_OW 250
25904: ST_TO_ADDR
// y := GetY ( enemy ) ;
25905: LD_ADDR_VAR 0 5
25909: PUSH
25910: LD_VAR 0 10
25914: PPUSH
25915: CALL_OW 251
25919: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25920: LD_ADDR_VAR 0 6
25924: PUSH
25925: LD_VAR 0 4
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PPUSH
25934: LD_INT 1
25936: PPUSH
25937: CALL_OW 12
25941: PLUS
25942: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25943: LD_ADDR_VAR 0 7
25947: PUSH
25948: LD_VAR 0 5
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PPUSH
25957: LD_INT 1
25959: PPUSH
25960: CALL_OW 12
25964: PLUS
25965: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25966: LD_VAR 0 6
25970: PPUSH
25971: LD_VAR 0 7
25975: PPUSH
25976: CALL_OW 488
25980: NOT
25981: IFFALSE 26003
// begin _x := x ;
25983: LD_ADDR_VAR 0 6
25987: PUSH
25988: LD_VAR 0 4
25992: ST_TO_ADDR
// _y := y ;
25993: LD_ADDR_VAR 0 7
25997: PUSH
25998: LD_VAR 0 5
26002: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26003: LD_ADDR_VAR 0 3
26007: PUSH
26008: LD_INT 1
26010: PPUSH
26011: LD_VAR 0 14
26015: PPUSH
26016: CALL_OW 12
26020: ST_TO_ADDR
// case i of 1 :
26021: LD_VAR 0 3
26025: PUSH
26026: LD_INT 1
26028: DOUBLE
26029: EQUAL
26030: IFTRUE 26034
26032: GO 26051
26034: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26035: LD_VAR 0 1
26039: PPUSH
26040: LD_VAR 0 10
26044: PPUSH
26045: CALL_OW 115
26049: GO 26112
26051: LD_INT 2
26053: DOUBLE
26054: EQUAL
26055: IFTRUE 26059
26057: GO 26081
26059: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26060: LD_VAR 0 1
26064: PPUSH
26065: LD_VAR 0 6
26069: PPUSH
26070: LD_VAR 0 7
26074: PPUSH
26075: CALL_OW 153
26079: GO 26112
26081: LD_INT 3
26083: DOUBLE
26084: EQUAL
26085: IFTRUE 26089
26087: GO 26111
26089: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26090: LD_VAR 0 1
26094: PPUSH
26095: LD_VAR 0 6
26099: PPUSH
26100: LD_VAR 0 7
26104: PPUSH
26105: CALL_OW 154
26109: GO 26112
26111: POP
// end ;
26112: LD_VAR 0 2
26116: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26117: LD_INT 0
26119: PPUSH
26120: PPUSH
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
// if not unit or not building then
26125: LD_VAR 0 1
26129: NOT
26130: PUSH
26131: LD_VAR 0 2
26135: NOT
26136: OR
26137: IFFALSE 26141
// exit ;
26139: GO 26299
// x := GetX ( building ) ;
26141: LD_ADDR_VAR 0 5
26145: PUSH
26146: LD_VAR 0 2
26150: PPUSH
26151: CALL_OW 250
26155: ST_TO_ADDR
// y := GetY ( building ) ;
26156: LD_ADDR_VAR 0 6
26160: PUSH
26161: LD_VAR 0 2
26165: PPUSH
26166: CALL_OW 251
26170: ST_TO_ADDR
// for i = 0 to 5 do
26171: LD_ADDR_VAR 0 4
26175: PUSH
26176: DOUBLE
26177: LD_INT 0
26179: DEC
26180: ST_TO_ADDR
26181: LD_INT 5
26183: PUSH
26184: FOR_TO
26185: IFFALSE 26297
// begin _x := ShiftX ( x , i , 3 ) ;
26187: LD_ADDR_VAR 0 7
26191: PUSH
26192: LD_VAR 0 5
26196: PPUSH
26197: LD_VAR 0 4
26201: PPUSH
26202: LD_INT 3
26204: PPUSH
26205: CALL_OW 272
26209: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26210: LD_ADDR_VAR 0 8
26214: PUSH
26215: LD_VAR 0 6
26219: PPUSH
26220: LD_VAR 0 4
26224: PPUSH
26225: LD_INT 3
26227: PPUSH
26228: CALL_OW 273
26232: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26233: LD_VAR 0 7
26237: PPUSH
26238: LD_VAR 0 8
26242: PPUSH
26243: CALL_OW 488
26247: NOT
26248: IFFALSE 26252
// continue ;
26250: GO 26184
// if HexInfo ( _x , _y ) = 0 then
26252: LD_VAR 0 7
26256: PPUSH
26257: LD_VAR 0 8
26261: PPUSH
26262: CALL_OW 428
26266: PUSH
26267: LD_INT 0
26269: EQUAL
26270: IFFALSE 26295
// begin ComMoveXY ( unit , _x , _y ) ;
26272: LD_VAR 0 1
26276: PPUSH
26277: LD_VAR 0 7
26281: PPUSH
26282: LD_VAR 0 8
26286: PPUSH
26287: CALL_OW 111
// exit ;
26291: POP
26292: POP
26293: GO 26299
// end ; end ;
26295: GO 26184
26297: POP
26298: POP
// end ;
26299: LD_VAR 0 3
26303: RET
// export function ScanBase ( side , base_area ) ; begin
26304: LD_INT 0
26306: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26307: LD_ADDR_VAR 0 3
26311: PUSH
26312: LD_VAR 0 2
26316: PPUSH
26317: LD_INT 81
26319: PUSH
26320: LD_VAR 0 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PPUSH
26329: CALL_OW 70
26333: ST_TO_ADDR
// end ;
26334: LD_VAR 0 3
26338: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26339: LD_INT 0
26341: PPUSH
26342: PPUSH
26343: PPUSH
26344: PPUSH
// result := false ;
26345: LD_ADDR_VAR 0 2
26349: PUSH
26350: LD_INT 0
26352: ST_TO_ADDR
// side := GetSide ( unit ) ;
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_VAR 0 1
26362: PPUSH
26363: CALL_OW 255
26367: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26368: LD_ADDR_VAR 0 4
26372: PUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: CALL_OW 248
26382: ST_TO_ADDR
// case nat of 1 :
26383: LD_VAR 0 4
26387: PUSH
26388: LD_INT 1
26390: DOUBLE
26391: EQUAL
26392: IFTRUE 26396
26394: GO 26407
26396: POP
// tech := tech_lassight ; 2 :
26397: LD_ADDR_VAR 0 5
26401: PUSH
26402: LD_INT 12
26404: ST_TO_ADDR
26405: GO 26446
26407: LD_INT 2
26409: DOUBLE
26410: EQUAL
26411: IFTRUE 26415
26413: GO 26426
26415: POP
// tech := tech_mortar ; 3 :
26416: LD_ADDR_VAR 0 5
26420: PUSH
26421: LD_INT 41
26423: ST_TO_ADDR
26424: GO 26446
26426: LD_INT 3
26428: DOUBLE
26429: EQUAL
26430: IFTRUE 26434
26432: GO 26445
26434: POP
// tech := tech_bazooka ; end ;
26435: LD_ADDR_VAR 0 5
26439: PUSH
26440: LD_INT 44
26442: ST_TO_ADDR
26443: GO 26446
26445: POP
// if Researched ( side , tech ) then
26446: LD_VAR 0 3
26450: PPUSH
26451: LD_VAR 0 5
26455: PPUSH
26456: CALL_OW 325
26460: IFFALSE 26487
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26462: LD_ADDR_VAR 0 2
26466: PUSH
26467: LD_INT 5
26469: PUSH
26470: LD_INT 8
26472: PUSH
26473: LD_INT 9
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: PUSH
26481: LD_VAR 0 4
26485: ARRAY
26486: ST_TO_ADDR
// end ;
26487: LD_VAR 0 2
26491: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26492: LD_INT 0
26494: PPUSH
26495: PPUSH
26496: PPUSH
// if not mines then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26650
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26506: LD_ADDR_VAR 0 5
26510: PUSH
26511: LD_INT 81
26513: PUSH
26514: LD_VAR 0 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 21
26528: PUSH
26529: LD_INT 3
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 69
26548: ST_TO_ADDR
// for i in mines do
26549: LD_ADDR_VAR 0 4
26553: PUSH
26554: LD_VAR 0 2
26558: PUSH
26559: FOR_IN
26560: IFFALSE 26648
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26562: LD_VAR 0 4
26566: PUSH
26567: LD_INT 1
26569: ARRAY
26570: PPUSH
26571: LD_VAR 0 4
26575: PUSH
26576: LD_INT 2
26578: ARRAY
26579: PPUSH
26580: CALL_OW 458
26584: NOT
26585: IFFALSE 26589
// continue ;
26587: GO 26559
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26589: LD_VAR 0 4
26593: PUSH
26594: LD_INT 1
26596: ARRAY
26597: PPUSH
26598: LD_VAR 0 4
26602: PUSH
26603: LD_INT 2
26605: ARRAY
26606: PPUSH
26607: CALL_OW 428
26611: PUSH
26612: LD_VAR 0 5
26616: IN
26617: IFFALSE 26646
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26619: LD_VAR 0 4
26623: PUSH
26624: LD_INT 1
26626: ARRAY
26627: PPUSH
26628: LD_VAR 0 4
26632: PUSH
26633: LD_INT 2
26635: ARRAY
26636: PPUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 456
// end ;
26646: GO 26559
26648: POP
26649: POP
// end ;
26650: LD_VAR 0 3
26654: RET
// export function Count ( array ) ; var i ; begin
26655: LD_INT 0
26657: PPUSH
26658: PPUSH
// result := 0 ;
26659: LD_ADDR_VAR 0 2
26663: PUSH
26664: LD_INT 0
26666: ST_TO_ADDR
// for i in array do
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_VAR 0 1
26676: PUSH
26677: FOR_IN
26678: IFFALSE 26702
// if i then
26680: LD_VAR 0 3
26684: IFFALSE 26700
// result := result + 1 ;
26686: LD_ADDR_VAR 0 2
26690: PUSH
26691: LD_VAR 0 2
26695: PUSH
26696: LD_INT 1
26698: PLUS
26699: ST_TO_ADDR
26700: GO 26677
26702: POP
26703: POP
// end ;
26704: LD_VAR 0 2
26708: RET
// export function IsEmpty ( building ) ; begin
26709: LD_INT 0
26711: PPUSH
// if not building then
26712: LD_VAR 0 1
26716: NOT
26717: IFFALSE 26721
// exit ;
26719: GO 26764
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26721: LD_ADDR_VAR 0 2
26725: PUSH
26726: LD_VAR 0 1
26730: PUSH
26731: LD_INT 22
26733: PUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 255
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 58
26750: PUSH
26751: EMPTY
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PPUSH
26758: CALL_OW 69
26762: IN
26763: ST_TO_ADDR
// end ;
26764: LD_VAR 0 2
26768: RET
// export function IsNotFull ( building ) ; var places ; begin
26769: LD_INT 0
26771: PPUSH
26772: PPUSH
// if not building then
26773: LD_VAR 0 1
26777: NOT
26778: IFFALSE 26782
// exit ;
26780: GO 26953
// result := false ;
26782: LD_ADDR_VAR 0 2
26786: PUSH
26787: LD_INT 0
26789: ST_TO_ADDR
// places := 0 ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_INT 0
26797: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 266
26807: PUSH
26808: LD_INT 0
26810: DOUBLE
26811: EQUAL
26812: IFTRUE 26870
26814: LD_INT 1
26816: DOUBLE
26817: EQUAL
26818: IFTRUE 26870
26820: LD_INT 6
26822: DOUBLE
26823: EQUAL
26824: IFTRUE 26870
26826: LD_INT 7
26828: DOUBLE
26829: EQUAL
26830: IFTRUE 26870
26832: LD_INT 8
26834: DOUBLE
26835: EQUAL
26836: IFTRUE 26870
26838: LD_INT 4
26840: DOUBLE
26841: EQUAL
26842: IFTRUE 26870
26844: LD_INT 5
26846: DOUBLE
26847: EQUAL
26848: IFTRUE 26870
26850: LD_INT 2
26852: DOUBLE
26853: EQUAL
26854: IFTRUE 26870
26856: LD_INT 3
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26870
26862: LD_INT 35
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 26881
26870: POP
// places := 6 ; b_bunker , b_breastwork :
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_INT 6
26878: ST_TO_ADDR
26879: GO 26926
26881: LD_INT 32
26883: DOUBLE
26884: EQUAL
26885: IFTRUE 26895
26887: LD_INT 31
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26906
26895: POP
// places := 1 ; b_control_tower :
26896: LD_ADDR_VAR 0 3
26900: PUSH
26901: LD_INT 1
26903: ST_TO_ADDR
26904: GO 26926
26906: LD_INT 36
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 26925
26914: POP
// places := 3 ; end ;
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: LD_INT 3
26922: ST_TO_ADDR
26923: GO 26926
26925: POP
// if places then
26926: LD_VAR 0 3
26930: IFFALSE 26953
// result := UnitsInside ( building ) < places ;
26932: LD_ADDR_VAR 0 2
26936: PUSH
26937: LD_VAR 0 1
26941: PPUSH
26942: CALL_OW 313
26946: PUSH
26947: LD_VAR 0 3
26951: LESS
26952: ST_TO_ADDR
// end ;
26953: LD_VAR 0 2
26957: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26958: LD_INT 0
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
// tmp := [ ] ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: EMPTY
26970: ST_TO_ADDR
// list := [ ] ;
26971: LD_ADDR_VAR 0 5
26975: PUSH
26976: EMPTY
26977: ST_TO_ADDR
// for i = 16 to 25 do
26978: LD_ADDR_VAR 0 4
26982: PUSH
26983: DOUBLE
26984: LD_INT 16
26986: DEC
26987: ST_TO_ADDR
26988: LD_INT 25
26990: PUSH
26991: FOR_TO
26992: IFFALSE 27065
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26994: LD_ADDR_VAR 0 3
26998: PUSH
26999: LD_VAR 0 3
27003: PUSH
27004: LD_INT 22
27006: PUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL_OW 255
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 91
27023: PUSH
27024: LD_VAR 0 1
27028: PUSH
27029: LD_INT 6
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 30
27039: PUSH
27040: LD_VAR 0 4
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: PPUSH
27057: CALL_OW 69
27061: ADD
27062: ST_TO_ADDR
27063: GO 26991
27065: POP
27066: POP
// for i = 1 to tmp do
27067: LD_ADDR_VAR 0 4
27071: PUSH
27072: DOUBLE
27073: LD_INT 1
27075: DEC
27076: ST_TO_ADDR
27077: LD_VAR 0 3
27081: PUSH
27082: FOR_TO
27083: IFFALSE 27171
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27085: LD_ADDR_VAR 0 5
27089: PUSH
27090: LD_VAR 0 5
27094: PUSH
27095: LD_VAR 0 3
27099: PUSH
27100: LD_VAR 0 4
27104: ARRAY
27105: PPUSH
27106: CALL_OW 266
27110: PUSH
27111: LD_VAR 0 3
27115: PUSH
27116: LD_VAR 0 4
27120: ARRAY
27121: PPUSH
27122: CALL_OW 250
27126: PUSH
27127: LD_VAR 0 3
27131: PUSH
27132: LD_VAR 0 4
27136: ARRAY
27137: PPUSH
27138: CALL_OW 251
27142: PUSH
27143: LD_VAR 0 3
27147: PUSH
27148: LD_VAR 0 4
27152: ARRAY
27153: PPUSH
27154: CALL_OW 254
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: ADD
27168: ST_TO_ADDR
27169: GO 27082
27171: POP
27172: POP
// result := list ;
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_VAR 0 5
27182: ST_TO_ADDR
// end ;
27183: LD_VAR 0 2
27187: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27188: LD_INT 0
27190: PPUSH
27191: PPUSH
27192: PPUSH
27193: PPUSH
27194: PPUSH
27195: PPUSH
27196: PPUSH
// if not factory then
27197: LD_VAR 0 1
27201: NOT
27202: IFFALSE 27206
// exit ;
27204: GO 27799
// if control = control_apeman then
27206: LD_VAR 0 4
27210: PUSH
27211: LD_INT 5
27213: EQUAL
27214: IFFALSE 27323
// begin tmp := UnitsInside ( factory ) ;
27216: LD_ADDR_VAR 0 8
27220: PUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: CALL_OW 313
27230: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27231: LD_VAR 0 8
27235: PPUSH
27236: LD_INT 25
27238: PUSH
27239: LD_INT 12
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PPUSH
27246: CALL_OW 72
27250: NOT
27251: IFFALSE 27261
// control := control_manual ;
27253: LD_ADDR_VAR 0 4
27257: PUSH
27258: LD_INT 1
27260: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27261: LD_ADDR_VAR 0 8
27265: PUSH
27266: LD_VAR 0 1
27270: PPUSH
27271: CALL 26958 0 1
27275: ST_TO_ADDR
// if tmp then
27276: LD_VAR 0 8
27280: IFFALSE 27323
// begin for i in tmp do
27282: LD_ADDR_VAR 0 7
27286: PUSH
27287: LD_VAR 0 8
27291: PUSH
27292: FOR_IN
27293: IFFALSE 27321
// if i [ 1 ] = b_ext_radio then
27295: LD_VAR 0 7
27299: PUSH
27300: LD_INT 1
27302: ARRAY
27303: PUSH
27304: LD_INT 22
27306: EQUAL
27307: IFFALSE 27319
// begin control := control_remote ;
27309: LD_ADDR_VAR 0 4
27313: PUSH
27314: LD_INT 2
27316: ST_TO_ADDR
// break ;
27317: GO 27321
// end ;
27319: GO 27292
27321: POP
27322: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_VAR 0 2
27332: PPUSH
27333: LD_VAR 0 3
27337: PPUSH
27338: LD_VAR 0 4
27342: PPUSH
27343: LD_VAR 0 5
27347: PPUSH
27348: CALL_OW 448
27352: IFFALSE 27387
// begin result := [ chassis , engine , control , weapon ] ;
27354: LD_ADDR_VAR 0 6
27358: PUSH
27359: LD_VAR 0 2
27363: PUSH
27364: LD_VAR 0 3
27368: PUSH
27369: LD_VAR 0 4
27373: PUSH
27374: LD_VAR 0 5
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: ST_TO_ADDR
// exit ;
27385: GO 27799
// end ; _chassis := AvailableChassisList ( factory ) ;
27387: LD_ADDR_VAR 0 9
27391: PUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: CALL_OW 475
27401: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27402: LD_ADDR_VAR 0 11
27406: PUSH
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 476
27416: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27417: LD_ADDR_VAR 0 12
27421: PUSH
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 477
27431: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27432: LD_ADDR_VAR 0 10
27436: PUSH
27437: LD_VAR 0 1
27441: PPUSH
27442: CALL_OW 478
27446: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27447: LD_VAR 0 9
27451: NOT
27452: PUSH
27453: LD_VAR 0 11
27457: NOT
27458: OR
27459: PUSH
27460: LD_VAR 0 12
27464: NOT
27465: OR
27466: PUSH
27467: LD_VAR 0 10
27471: NOT
27472: OR
27473: IFFALSE 27508
// begin result := [ chassis , engine , control , weapon ] ;
27475: LD_ADDR_VAR 0 6
27479: PUSH
27480: LD_VAR 0 2
27484: PUSH
27485: LD_VAR 0 3
27489: PUSH
27490: LD_VAR 0 4
27494: PUSH
27495: LD_VAR 0 5
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
// exit ;
27506: GO 27799
// end ; if not chassis in _chassis then
27508: LD_VAR 0 2
27512: PUSH
27513: LD_VAR 0 9
27517: IN
27518: NOT
27519: IFFALSE 27545
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27521: LD_ADDR_VAR 0 2
27525: PUSH
27526: LD_VAR 0 9
27530: PUSH
27531: LD_INT 1
27533: PPUSH
27534: LD_VAR 0 9
27538: PPUSH
27539: CALL_OW 12
27543: ARRAY
27544: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27545: LD_VAR 0 2
27549: PPUSH
27550: LD_VAR 0 3
27554: PPUSH
27555: CALL 27804 0 2
27559: NOT
27560: IFFALSE 27619
// repeat engine := _engine [ 1 ] ;
27562: LD_ADDR_VAR 0 3
27566: PUSH
27567: LD_VAR 0 11
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27576: LD_ADDR_VAR 0 11
27580: PUSH
27581: LD_VAR 0 11
27585: PPUSH
27586: LD_INT 1
27588: PPUSH
27589: CALL_OW 3
27593: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27594: LD_VAR 0 2
27598: PPUSH
27599: LD_VAR 0 3
27603: PPUSH
27604: CALL 27804 0 2
27608: PUSH
27609: LD_VAR 0 11
27613: PUSH
27614: EMPTY
27615: EQUAL
27616: OR
27617: IFFALSE 27562
// if not control in _control then
27619: LD_VAR 0 4
27623: PUSH
27624: LD_VAR 0 12
27628: IN
27629: NOT
27630: IFFALSE 27656
// control := _control [ rand ( 1 , _control ) ] ;
27632: LD_ADDR_VAR 0 4
27636: PUSH
27637: LD_VAR 0 12
27641: PUSH
27642: LD_INT 1
27644: PPUSH
27645: LD_VAR 0 12
27649: PPUSH
27650: CALL_OW 12
27654: ARRAY
27655: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: CALL 28024 0 2
27670: NOT
27671: IFFALSE 27730
// repeat weapon := _weapon [ 1 ] ;
27673: LD_ADDR_VAR 0 5
27677: PUSH
27678: LD_VAR 0 10
27682: PUSH
27683: LD_INT 1
27685: ARRAY
27686: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27687: LD_ADDR_VAR 0 10
27691: PUSH
27692: LD_VAR 0 10
27696: PPUSH
27697: LD_INT 1
27699: PPUSH
27700: CALL_OW 3
27704: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 5
27714: PPUSH
27715: CALL 28024 0 2
27719: PUSH
27720: LD_VAR 0 10
27724: PUSH
27725: EMPTY
27726: EQUAL
27727: OR
27728: IFFALSE 27673
// result := [ ] ;
27730: LD_ADDR_VAR 0 6
27734: PUSH
27735: EMPTY
27736: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_VAR 0 2
27746: PPUSH
27747: LD_VAR 0 3
27751: PPUSH
27752: LD_VAR 0 4
27756: PPUSH
27757: LD_VAR 0 5
27761: PPUSH
27762: CALL_OW 448
27766: IFFALSE 27799
// result := [ chassis , engine , control , weapon ] ;
27768: LD_ADDR_VAR 0 6
27772: PUSH
27773: LD_VAR 0 2
27777: PUSH
27778: LD_VAR 0 3
27782: PUSH
27783: LD_VAR 0 4
27787: PUSH
27788: LD_VAR 0 5
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// end ;
27799: LD_VAR 0 6
27803: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27804: LD_INT 0
27806: PPUSH
// if not chassis or not engine then
27807: LD_VAR 0 1
27811: NOT
27812: PUSH
27813: LD_VAR 0 2
27817: NOT
27818: OR
27819: IFFALSE 27823
// exit ;
27821: GO 28019
// case engine of engine_solar :
27823: LD_VAR 0 2
27827: PUSH
27828: LD_INT 2
27830: DOUBLE
27831: EQUAL
27832: IFTRUE 27836
27834: GO 27874
27836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27837: LD_ADDR_VAR 0 3
27841: PUSH
27842: LD_INT 11
27844: PUSH
27845: LD_INT 12
27847: PUSH
27848: LD_INT 13
27850: PUSH
27851: LD_INT 14
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 3
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
27872: GO 28003
27874: LD_INT 1
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27944
27882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 11
27890: PUSH
27891: LD_INT 12
27893: PUSH
27894: LD_INT 13
27896: PUSH
27897: LD_INT 14
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: LD_INT 4
27911: PUSH
27912: LD_INT 5
27914: PUSH
27915: LD_INT 21
27917: PUSH
27918: LD_INT 23
27920: PUSH
27921: LD_INT 22
27923: PUSH
27924: LD_INT 24
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
27942: GO 28003
27944: LD_INT 3
27946: DOUBLE
27947: EQUAL
27948: IFTRUE 27952
27950: GO 28002
27952: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27953: LD_ADDR_VAR 0 3
27957: PUSH
27958: LD_INT 13
27960: PUSH
27961: LD_INT 14
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 3
27969: PUSH
27970: LD_INT 4
27972: PUSH
27973: LD_INT 5
27975: PUSH
27976: LD_INT 21
27978: PUSH
27979: LD_INT 22
27981: PUSH
27982: LD_INT 23
27984: PUSH
27985: LD_INT 24
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
28000: GO 28003
28002: POP
// result := ( chassis in result ) ;
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: LD_VAR 0 1
28012: PUSH
28013: LD_VAR 0 3
28017: IN
28018: ST_TO_ADDR
// end ;
28019: LD_VAR 0 3
28023: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28024: LD_INT 0
28026: PPUSH
// if not chassis or not weapon then
28027: LD_VAR 0 1
28031: NOT
28032: PUSH
28033: LD_VAR 0 2
28037: NOT
28038: OR
28039: IFFALSE 28043
// exit ;
28041: GO 29103
// case weapon of us_machine_gun :
28043: LD_VAR 0 2
28047: PUSH
28048: LD_INT 2
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28086
28056: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 3
28070: PUSH
28071: LD_INT 4
28073: PUSH
28074: LD_INT 5
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
28084: GO 29087
28086: LD_INT 3
28088: DOUBLE
28089: EQUAL
28090: IFTRUE 28094
28092: GO 28124
28094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28095: LD_ADDR_VAR 0 3
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: LD_INT 4
28111: PUSH
28112: LD_INT 5
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
28122: GO 29087
28124: LD_INT 11
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28162
28132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: LD_INT 4
28149: PUSH
28150: LD_INT 5
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
28160: GO 29087
28162: LD_INT 4
28164: DOUBLE
28165: EQUAL
28166: IFTRUE 28170
28168: GO 28196
28170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28171: LD_ADDR_VAR 0 3
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: LD_INT 4
28184: PUSH
28185: LD_INT 5
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
28194: GO 29087
28196: LD_INT 5
28198: DOUBLE
28199: EQUAL
28200: IFTRUE 28204
28202: GO 28230
28204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28205: LD_ADDR_VAR 0 3
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: LD_INT 3
28215: PUSH
28216: LD_INT 4
28218: PUSH
28219: LD_INT 5
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: ST_TO_ADDR
28228: GO 29087
28230: LD_INT 9
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28264
28238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28239: LD_ADDR_VAR 0 3
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 3
28249: PUSH
28250: LD_INT 4
28252: PUSH
28253: LD_INT 5
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
28262: GO 29087
28264: LD_INT 7
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28298
28272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28273: LD_ADDR_VAR 0 3
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: LD_INT 4
28286: PUSH
28287: LD_INT 5
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
28296: GO 29087
28298: LD_INT 12
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 28332
28306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28307: LD_ADDR_VAR 0 3
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: LD_INT 4
28320: PUSH
28321: LD_INT 5
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: ST_TO_ADDR
28330: GO 29087
28332: LD_INT 13
28334: DOUBLE
28335: EQUAL
28336: IFTRUE 28340
28338: GO 28366
28340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: LD_INT 4
28354: PUSH
28355: LD_INT 5
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: ST_TO_ADDR
28364: GO 29087
28366: LD_INT 14
28368: DOUBLE
28369: EQUAL
28370: IFTRUE 28374
28372: GO 28392
28374: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28375: LD_ADDR_VAR 0 3
28379: PUSH
28380: LD_INT 4
28382: PUSH
28383: LD_INT 5
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: ST_TO_ADDR
28390: GO 29087
28392: LD_INT 6
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28400
28398: GO 28418
28400: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28401: LD_ADDR_VAR 0 3
28405: PUSH
28406: LD_INT 4
28408: PUSH
28409: LD_INT 5
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: ST_TO_ADDR
28416: GO 29087
28418: LD_INT 10
28420: DOUBLE
28421: EQUAL
28422: IFTRUE 28426
28424: GO 28444
28426: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28427: LD_ADDR_VAR 0 3
28431: PUSH
28432: LD_INT 4
28434: PUSH
28435: LD_INT 5
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: ST_TO_ADDR
28442: GO 29087
28444: LD_INT 22
28446: DOUBLE
28447: EQUAL
28448: IFTRUE 28452
28450: GO 28478
28452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_INT 11
28460: PUSH
28461: LD_INT 12
28463: PUSH
28464: LD_INT 13
28466: PUSH
28467: LD_INT 14
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
28476: GO 29087
28478: LD_INT 23
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28512
28486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28487: LD_ADDR_VAR 0 3
28491: PUSH
28492: LD_INT 11
28494: PUSH
28495: LD_INT 12
28497: PUSH
28498: LD_INT 13
28500: PUSH
28501: LD_INT 14
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
28510: GO 29087
28512: LD_INT 24
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 28546
28520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28521: LD_ADDR_VAR 0 3
28525: PUSH
28526: LD_INT 11
28528: PUSH
28529: LD_INT 12
28531: PUSH
28532: LD_INT 13
28534: PUSH
28535: LD_INT 14
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
28544: GO 29087
28546: LD_INT 30
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28580
28554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_INT 11
28562: PUSH
28563: LD_INT 12
28565: PUSH
28566: LD_INT 13
28568: PUSH
28569: LD_INT 14
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
28578: GO 29087
28580: LD_INT 25
28582: DOUBLE
28583: EQUAL
28584: IFTRUE 28588
28586: GO 28606
28588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28589: LD_ADDR_VAR 0 3
28593: PUSH
28594: LD_INT 13
28596: PUSH
28597: LD_INT 14
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: ST_TO_ADDR
28604: GO 29087
28606: LD_INT 27
28608: DOUBLE
28609: EQUAL
28610: IFTRUE 28614
28612: GO 28632
28614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28615: LD_ADDR_VAR 0 3
28619: PUSH
28620: LD_INT 13
28622: PUSH
28623: LD_INT 14
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: ST_TO_ADDR
28630: GO 29087
28632: LD_INT 92
28634: DOUBLE
28635: EQUAL
28636: IFTRUE 28640
28638: GO 28666
28640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28641: LD_ADDR_VAR 0 3
28645: PUSH
28646: LD_INT 11
28648: PUSH
28649: LD_INT 12
28651: PUSH
28652: LD_INT 13
28654: PUSH
28655: LD_INT 14
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
28664: GO 29087
28666: LD_INT 28
28668: DOUBLE
28669: EQUAL
28670: IFTRUE 28674
28672: GO 28692
28674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28675: LD_ADDR_VAR 0 3
28679: PUSH
28680: LD_INT 13
28682: PUSH
28683: LD_INT 14
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: ST_TO_ADDR
28690: GO 29087
28692: LD_INT 29
28694: DOUBLE
28695: EQUAL
28696: IFTRUE 28700
28698: GO 28718
28700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28701: LD_ADDR_VAR 0 3
28705: PUSH
28706: LD_INT 13
28708: PUSH
28709: LD_INT 14
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: ST_TO_ADDR
28716: GO 29087
28718: LD_INT 31
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28726
28724: GO 28744
28726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28727: LD_ADDR_VAR 0 3
28731: PUSH
28732: LD_INT 13
28734: PUSH
28735: LD_INT 14
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: ST_TO_ADDR
28742: GO 29087
28744: LD_INT 26
28746: DOUBLE
28747: EQUAL
28748: IFTRUE 28752
28750: GO 28770
28752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28753: LD_ADDR_VAR 0 3
28757: PUSH
28758: LD_INT 13
28760: PUSH
28761: LD_INT 14
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: ST_TO_ADDR
28768: GO 29087
28770: LD_INT 42
28772: DOUBLE
28773: EQUAL
28774: IFTRUE 28778
28776: GO 28804
28778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28779: LD_ADDR_VAR 0 3
28783: PUSH
28784: LD_INT 21
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_INT 23
28792: PUSH
28793: LD_INT 24
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: ST_TO_ADDR
28802: GO 29087
28804: LD_INT 43
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28838
28812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28813: LD_ADDR_VAR 0 3
28817: PUSH
28818: LD_INT 21
28820: PUSH
28821: LD_INT 22
28823: PUSH
28824: LD_INT 23
28826: PUSH
28827: LD_INT 24
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
28836: GO 29087
28838: LD_INT 44
28840: DOUBLE
28841: EQUAL
28842: IFTRUE 28846
28844: GO 28872
28846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28847: LD_ADDR_VAR 0 3
28851: PUSH
28852: LD_INT 21
28854: PUSH
28855: LD_INT 22
28857: PUSH
28858: LD_INT 23
28860: PUSH
28861: LD_INT 24
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
28870: GO 29087
28872: LD_INT 45
28874: DOUBLE
28875: EQUAL
28876: IFTRUE 28880
28878: GO 28906
28880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28881: LD_ADDR_VAR 0 3
28885: PUSH
28886: LD_INT 21
28888: PUSH
28889: LD_INT 22
28891: PUSH
28892: LD_INT 23
28894: PUSH
28895: LD_INT 24
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
28904: GO 29087
28906: LD_INT 49
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 28940
28914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_INT 21
28922: PUSH
28923: LD_INT 22
28925: PUSH
28926: LD_INT 23
28928: PUSH
28929: LD_INT 24
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
28938: GO 29087
28940: LD_INT 51
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28948
28946: GO 28974
28948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28949: LD_ADDR_VAR 0 3
28953: PUSH
28954: LD_INT 21
28956: PUSH
28957: LD_INT 22
28959: PUSH
28960: LD_INT 23
28962: PUSH
28963: LD_INT 24
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
28972: GO 29087
28974: LD_INT 52
28976: DOUBLE
28977: EQUAL
28978: IFTRUE 28982
28980: GO 29008
28982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28983: LD_ADDR_VAR 0 3
28987: PUSH
28988: LD_INT 21
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_INT 23
28996: PUSH
28997: LD_INT 24
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
29006: GO 29087
29008: LD_INT 53
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29034
29016: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: LD_INT 23
29024: PUSH
29025: LD_INT 24
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: ST_TO_ADDR
29032: GO 29087
29034: LD_INT 46
29036: DOUBLE
29037: EQUAL
29038: IFTRUE 29042
29040: GO 29060
29042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29043: LD_ADDR_VAR 0 3
29047: PUSH
29048: LD_INT 23
29050: PUSH
29051: LD_INT 24
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: ST_TO_ADDR
29058: GO 29087
29060: LD_INT 47
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29068
29066: GO 29086
29068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 23
29076: PUSH
29077: LD_INT 24
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: ST_TO_ADDR
29084: GO 29087
29086: POP
// result := ( chassis in result ) ;
29087: LD_ADDR_VAR 0 3
29091: PUSH
29092: LD_VAR 0 1
29096: PUSH
29097: LD_VAR 0 3
29101: IN
29102: ST_TO_ADDR
// end ;
29103: LD_VAR 0 3
29107: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29108: LD_INT 0
29110: PPUSH
29111: PPUSH
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
29116: PPUSH
// result := array ;
29117: LD_ADDR_VAR 0 5
29121: PUSH
29122: LD_VAR 0 1
29126: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29127: LD_VAR 0 1
29131: NOT
29132: PUSH
29133: LD_VAR 0 2
29137: NOT
29138: OR
29139: PUSH
29140: LD_VAR 0 3
29144: NOT
29145: OR
29146: PUSH
29147: LD_VAR 0 2
29151: PUSH
29152: LD_VAR 0 1
29156: GREATER
29157: OR
29158: PUSH
29159: LD_VAR 0 3
29163: PUSH
29164: LD_VAR 0 1
29168: GREATER
29169: OR
29170: IFFALSE 29174
// exit ;
29172: GO 29470
// if direction then
29174: LD_VAR 0 4
29178: IFFALSE 29242
// begin d := 1 ;
29180: LD_ADDR_VAR 0 9
29184: PUSH
29185: LD_INT 1
29187: ST_TO_ADDR
// if i_from > i_to then
29188: LD_VAR 0 2
29192: PUSH
29193: LD_VAR 0 3
29197: GREATER
29198: IFFALSE 29224
// length := ( array - i_from ) + i_to else
29200: LD_ADDR_VAR 0 11
29204: PUSH
29205: LD_VAR 0 1
29209: PUSH
29210: LD_VAR 0 2
29214: MINUS
29215: PUSH
29216: LD_VAR 0 3
29220: PLUS
29221: ST_TO_ADDR
29222: GO 29240
// length := i_to - i_from ;
29224: LD_ADDR_VAR 0 11
29228: PUSH
29229: LD_VAR 0 3
29233: PUSH
29234: LD_VAR 0 2
29238: MINUS
29239: ST_TO_ADDR
// end else
29240: GO 29303
// begin d := - 1 ;
29242: LD_ADDR_VAR 0 9
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: ST_TO_ADDR
// if i_from > i_to then
29251: LD_VAR 0 2
29255: PUSH
29256: LD_VAR 0 3
29260: GREATER
29261: IFFALSE 29281
// length := i_from - i_to else
29263: LD_ADDR_VAR 0 11
29267: PUSH
29268: LD_VAR 0 2
29272: PUSH
29273: LD_VAR 0 3
29277: MINUS
29278: ST_TO_ADDR
29279: GO 29303
// length := ( array - i_to ) + i_from ;
29281: LD_ADDR_VAR 0 11
29285: PUSH
29286: LD_VAR 0 1
29290: PUSH
29291: LD_VAR 0 3
29295: MINUS
29296: PUSH
29297: LD_VAR 0 2
29301: PLUS
29302: ST_TO_ADDR
// end ; if not length then
29303: LD_VAR 0 11
29307: NOT
29308: IFFALSE 29312
// exit ;
29310: GO 29470
// tmp := array ;
29312: LD_ADDR_VAR 0 10
29316: PUSH
29317: LD_VAR 0 1
29321: ST_TO_ADDR
// for i = 1 to length do
29322: LD_ADDR_VAR 0 6
29326: PUSH
29327: DOUBLE
29328: LD_INT 1
29330: DEC
29331: ST_TO_ADDR
29332: LD_VAR 0 11
29336: PUSH
29337: FOR_TO
29338: IFFALSE 29458
// begin for j = 1 to array do
29340: LD_ADDR_VAR 0 7
29344: PUSH
29345: DOUBLE
29346: LD_INT 1
29348: DEC
29349: ST_TO_ADDR
29350: LD_VAR 0 1
29354: PUSH
29355: FOR_TO
29356: IFFALSE 29444
// begin k := j + d ;
29358: LD_ADDR_VAR 0 8
29362: PUSH
29363: LD_VAR 0 7
29367: PUSH
29368: LD_VAR 0 9
29372: PLUS
29373: ST_TO_ADDR
// if k > array then
29374: LD_VAR 0 8
29378: PUSH
29379: LD_VAR 0 1
29383: GREATER
29384: IFFALSE 29394
// k := 1 ;
29386: LD_ADDR_VAR 0 8
29390: PUSH
29391: LD_INT 1
29393: ST_TO_ADDR
// if not k then
29394: LD_VAR 0 8
29398: NOT
29399: IFFALSE 29411
// k := array ;
29401: LD_ADDR_VAR 0 8
29405: PUSH
29406: LD_VAR 0 1
29410: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29411: LD_ADDR_VAR 0 10
29415: PUSH
29416: LD_VAR 0 10
29420: PPUSH
29421: LD_VAR 0 8
29425: PPUSH
29426: LD_VAR 0 1
29430: PUSH
29431: LD_VAR 0 7
29435: ARRAY
29436: PPUSH
29437: CALL_OW 1
29441: ST_TO_ADDR
// end ;
29442: GO 29355
29444: POP
29445: POP
// array := tmp ;
29446: LD_ADDR_VAR 0 1
29450: PUSH
29451: LD_VAR 0 10
29455: ST_TO_ADDR
// end ;
29456: GO 29337
29458: POP
29459: POP
// result := array ;
29460: LD_ADDR_VAR 0 5
29464: PUSH
29465: LD_VAR 0 1
29469: ST_TO_ADDR
// end ;
29470: LD_VAR 0 5
29474: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29475: LD_INT 0
29477: PPUSH
29478: PPUSH
// result := 0 ;
29479: LD_ADDR_VAR 0 3
29483: PUSH
29484: LD_INT 0
29486: ST_TO_ADDR
// if not array or not value in array then
29487: LD_VAR 0 1
29491: NOT
29492: PUSH
29493: LD_VAR 0 2
29497: PUSH
29498: LD_VAR 0 1
29502: IN
29503: NOT
29504: OR
29505: IFFALSE 29509
// exit ;
29507: GO 29563
// for i = 1 to array do
29509: LD_ADDR_VAR 0 4
29513: PUSH
29514: DOUBLE
29515: LD_INT 1
29517: DEC
29518: ST_TO_ADDR
29519: LD_VAR 0 1
29523: PUSH
29524: FOR_TO
29525: IFFALSE 29561
// if value = array [ i ] then
29527: LD_VAR 0 2
29531: PUSH
29532: LD_VAR 0 1
29536: PUSH
29537: LD_VAR 0 4
29541: ARRAY
29542: EQUAL
29543: IFFALSE 29559
// begin result := i ;
29545: LD_ADDR_VAR 0 3
29549: PUSH
29550: LD_VAR 0 4
29554: ST_TO_ADDR
// exit ;
29555: POP
29556: POP
29557: GO 29563
// end ;
29559: GO 29524
29561: POP
29562: POP
// end ;
29563: LD_VAR 0 3
29567: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29568: LD_INT 0
29570: PPUSH
// vc_chassis := chassis ;
29571: LD_ADDR_OWVAR 37
29575: PUSH
29576: LD_VAR 0 1
29580: ST_TO_ADDR
// vc_engine := engine ;
29581: LD_ADDR_OWVAR 39
29585: PUSH
29586: LD_VAR 0 2
29590: ST_TO_ADDR
// vc_control := control ;
29591: LD_ADDR_OWVAR 38
29595: PUSH
29596: LD_VAR 0 3
29600: ST_TO_ADDR
// vc_weapon := weapon ;
29601: LD_ADDR_OWVAR 40
29605: PUSH
29606: LD_VAR 0 4
29610: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29611: LD_ADDR_OWVAR 41
29615: PUSH
29616: LD_VAR 0 5
29620: ST_TO_ADDR
// end ;
29621: LD_VAR 0 6
29625: RET
// export function WantPlant ( unit ) ; var task ; begin
29626: LD_INT 0
29628: PPUSH
29629: PPUSH
// result := false ;
29630: LD_ADDR_VAR 0 2
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29638: LD_ADDR_VAR 0 3
29642: PUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL_OW 437
29652: ST_TO_ADDR
// if task then
29653: LD_VAR 0 3
29657: IFFALSE 29685
// if task [ 1 ] [ 1 ] = p then
29659: LD_VAR 0 3
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PUSH
29668: LD_INT 1
29670: ARRAY
29671: PUSH
29672: LD_STRING p
29674: EQUAL
29675: IFFALSE 29685
// result := true ;
29677: LD_ADDR_VAR 0 2
29681: PUSH
29682: LD_INT 1
29684: ST_TO_ADDR
// end ;
29685: LD_VAR 0 2
29689: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29690: LD_INT 0
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
// if pos < 1 then
29696: LD_VAR 0 2
29700: PUSH
29701: LD_INT 1
29703: LESS
29704: IFFALSE 29708
// exit ;
29706: GO 30011
// if pos = 1 then
29708: LD_VAR 0 2
29712: PUSH
29713: LD_INT 1
29715: EQUAL
29716: IFFALSE 29749
// result := Replace ( arr , pos [ 1 ] , value ) else
29718: LD_ADDR_VAR 0 4
29722: PUSH
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_VAR 0 2
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: PPUSH
29737: LD_VAR 0 3
29741: PPUSH
29742: CALL_OW 1
29746: ST_TO_ADDR
29747: GO 30011
// begin tmp := arr ;
29749: LD_ADDR_VAR 0 6
29753: PUSH
29754: LD_VAR 0 1
29758: ST_TO_ADDR
// s_arr := [ tmp ] ;
29759: LD_ADDR_VAR 0 7
29763: PUSH
29764: LD_VAR 0 6
29768: PUSH
29769: EMPTY
29770: LIST
29771: ST_TO_ADDR
// for i = 1 to pos - 1 do
29772: LD_ADDR_VAR 0 5
29776: PUSH
29777: DOUBLE
29778: LD_INT 1
29780: DEC
29781: ST_TO_ADDR
29782: LD_VAR 0 2
29786: PUSH
29787: LD_INT 1
29789: MINUS
29790: PUSH
29791: FOR_TO
29792: IFFALSE 29837
// begin tmp := tmp [ pos [ i ] ] ;
29794: LD_ADDR_VAR 0 6
29798: PUSH
29799: LD_VAR 0 6
29803: PUSH
29804: LD_VAR 0 2
29808: PUSH
29809: LD_VAR 0 5
29813: ARRAY
29814: ARRAY
29815: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29816: LD_ADDR_VAR 0 7
29820: PUSH
29821: LD_VAR 0 7
29825: PUSH
29826: LD_VAR 0 6
29830: PUSH
29831: EMPTY
29832: LIST
29833: ADD
29834: ST_TO_ADDR
// end ;
29835: GO 29791
29837: POP
29838: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29839: LD_ADDR_VAR 0 6
29843: PUSH
29844: LD_VAR 0 6
29848: PPUSH
29849: LD_VAR 0 2
29853: PUSH
29854: LD_VAR 0 2
29858: ARRAY
29859: PPUSH
29860: LD_VAR 0 3
29864: PPUSH
29865: CALL_OW 1
29869: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29870: LD_ADDR_VAR 0 7
29874: PUSH
29875: LD_VAR 0 7
29879: PPUSH
29880: LD_VAR 0 7
29884: PPUSH
29885: LD_VAR 0 6
29889: PPUSH
29890: CALL_OW 1
29894: ST_TO_ADDR
// for i = s_arr downto 2 do
29895: LD_ADDR_VAR 0 5
29899: PUSH
29900: DOUBLE
29901: LD_VAR 0 7
29905: INC
29906: ST_TO_ADDR
29907: LD_INT 2
29909: PUSH
29910: FOR_DOWNTO
29911: IFFALSE 29995
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29913: LD_ADDR_VAR 0 6
29917: PUSH
29918: LD_VAR 0 7
29922: PUSH
29923: LD_VAR 0 5
29927: PUSH
29928: LD_INT 1
29930: MINUS
29931: ARRAY
29932: PPUSH
29933: LD_VAR 0 2
29937: PUSH
29938: LD_VAR 0 5
29942: PUSH
29943: LD_INT 1
29945: MINUS
29946: ARRAY
29947: PPUSH
29948: LD_VAR 0 7
29952: PUSH
29953: LD_VAR 0 5
29957: ARRAY
29958: PPUSH
29959: CALL_OW 1
29963: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29964: LD_ADDR_VAR 0 7
29968: PUSH
29969: LD_VAR 0 7
29973: PPUSH
29974: LD_VAR 0 5
29978: PUSH
29979: LD_INT 1
29981: MINUS
29982: PPUSH
29983: LD_VAR 0 6
29987: PPUSH
29988: CALL_OW 1
29992: ST_TO_ADDR
// end ;
29993: GO 29910
29995: POP
29996: POP
// result := s_arr [ 1 ] ;
29997: LD_ADDR_VAR 0 4
30001: PUSH
30002: LD_VAR 0 7
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: ST_TO_ADDR
// end ; end ;
30011: LD_VAR 0 4
30015: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
// if not list then
30020: LD_VAR 0 1
30024: NOT
30025: IFFALSE 30029
// exit ;
30027: GO 30120
// i := list [ pos1 ] ;
30029: LD_ADDR_VAR 0 5
30033: PUSH
30034: LD_VAR 0 1
30038: PUSH
30039: LD_VAR 0 2
30043: ARRAY
30044: ST_TO_ADDR
// if not i then
30045: LD_VAR 0 5
30049: NOT
30050: IFFALSE 30054
// exit ;
30052: GO 30120
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30054: LD_ADDR_VAR 0 1
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: LD_VAR 0 2
30068: PPUSH
30069: LD_VAR 0 1
30073: PUSH
30074: LD_VAR 0 3
30078: ARRAY
30079: PPUSH
30080: CALL_OW 1
30084: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30085: LD_ADDR_VAR 0 1
30089: PUSH
30090: LD_VAR 0 1
30094: PPUSH
30095: LD_VAR 0 3
30099: PPUSH
30100: LD_VAR 0 5
30104: PPUSH
30105: CALL_OW 1
30109: ST_TO_ADDR
// result := list ;
30110: LD_ADDR_VAR 0 4
30114: PUSH
30115: LD_VAR 0 1
30119: ST_TO_ADDR
// end ;
30120: LD_VAR 0 4
30124: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30125: LD_INT 0
30127: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30128: LD_ADDR_VAR 0 5
30132: PUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 250
30142: PPUSH
30143: LD_VAR 0 1
30147: PPUSH
30148: CALL_OW 251
30152: PPUSH
30153: LD_VAR 0 2
30157: PPUSH
30158: LD_VAR 0 3
30162: PPUSH
30163: LD_VAR 0 4
30167: PPUSH
30168: CALL 30178 0 5
30172: ST_TO_ADDR
// end ;
30173: LD_VAR 0 5
30177: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30178: LD_INT 0
30180: PPUSH
30181: PPUSH
30182: PPUSH
30183: PPUSH
// if not list then
30184: LD_VAR 0 3
30188: NOT
30189: IFFALSE 30193
// exit ;
30191: GO 30581
// result := [ ] ;
30193: LD_ADDR_VAR 0 6
30197: PUSH
30198: EMPTY
30199: ST_TO_ADDR
// for i in list do
30200: LD_ADDR_VAR 0 7
30204: PUSH
30205: LD_VAR 0 3
30209: PUSH
30210: FOR_IN
30211: IFFALSE 30413
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30213: LD_ADDR_VAR 0 9
30217: PUSH
30218: LD_VAR 0 7
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: LD_VAR 0 2
30232: PPUSH
30233: CALL_OW 297
30237: ST_TO_ADDR
// if not result then
30238: LD_VAR 0 6
30242: NOT
30243: IFFALSE 30269
// result := [ [ i , tmp ] ] else
30245: LD_ADDR_VAR 0 6
30249: PUSH
30250: LD_VAR 0 7
30254: PUSH
30255: LD_VAR 0 9
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: ST_TO_ADDR
30267: GO 30411
// begin if result [ result ] [ 2 ] < tmp then
30269: LD_VAR 0 6
30273: PUSH
30274: LD_VAR 0 6
30278: ARRAY
30279: PUSH
30280: LD_INT 2
30282: ARRAY
30283: PUSH
30284: LD_VAR 0 9
30288: LESS
30289: IFFALSE 30331
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30291: LD_ADDR_VAR 0 6
30295: PUSH
30296: LD_VAR 0 6
30300: PPUSH
30301: LD_VAR 0 6
30305: PUSH
30306: LD_INT 1
30308: PLUS
30309: PPUSH
30310: LD_VAR 0 7
30314: PUSH
30315: LD_VAR 0 9
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PPUSH
30324: CALL_OW 2
30328: ST_TO_ADDR
30329: GO 30411
// for j = 1 to result do
30331: LD_ADDR_VAR 0 8
30335: PUSH
30336: DOUBLE
30337: LD_INT 1
30339: DEC
30340: ST_TO_ADDR
30341: LD_VAR 0 6
30345: PUSH
30346: FOR_TO
30347: IFFALSE 30409
// begin if tmp < result [ j ] [ 2 ] then
30349: LD_VAR 0 9
30353: PUSH
30354: LD_VAR 0 6
30358: PUSH
30359: LD_VAR 0 8
30363: ARRAY
30364: PUSH
30365: LD_INT 2
30367: ARRAY
30368: LESS
30369: IFFALSE 30407
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30371: LD_ADDR_VAR 0 6
30375: PUSH
30376: LD_VAR 0 6
30380: PPUSH
30381: LD_VAR 0 8
30385: PPUSH
30386: LD_VAR 0 7
30390: PUSH
30391: LD_VAR 0 9
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PPUSH
30400: CALL_OW 2
30404: ST_TO_ADDR
// break ;
30405: GO 30409
// end ; end ;
30407: GO 30346
30409: POP
30410: POP
// end ; end ;
30411: GO 30210
30413: POP
30414: POP
// if result and not asc then
30415: LD_VAR 0 6
30419: PUSH
30420: LD_VAR 0 4
30424: NOT
30425: AND
30426: IFFALSE 30501
// begin tmp := result ;
30428: LD_ADDR_VAR 0 9
30432: PUSH
30433: LD_VAR 0 6
30437: ST_TO_ADDR
// for i = tmp downto 1 do
30438: LD_ADDR_VAR 0 7
30442: PUSH
30443: DOUBLE
30444: LD_VAR 0 9
30448: INC
30449: ST_TO_ADDR
30450: LD_INT 1
30452: PUSH
30453: FOR_DOWNTO
30454: IFFALSE 30499
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30456: LD_ADDR_VAR 0 6
30460: PUSH
30461: LD_VAR 0 6
30465: PPUSH
30466: LD_VAR 0 9
30470: PUSH
30471: LD_VAR 0 7
30475: MINUS
30476: PUSH
30477: LD_INT 1
30479: PLUS
30480: PPUSH
30481: LD_VAR 0 9
30485: PUSH
30486: LD_VAR 0 7
30490: ARRAY
30491: PPUSH
30492: CALL_OW 1
30496: ST_TO_ADDR
30497: GO 30453
30499: POP
30500: POP
// end ; tmp := [ ] ;
30501: LD_ADDR_VAR 0 9
30505: PUSH
30506: EMPTY
30507: ST_TO_ADDR
// if mode then
30508: LD_VAR 0 5
30512: IFFALSE 30581
// begin for i = 1 to result do
30514: LD_ADDR_VAR 0 7
30518: PUSH
30519: DOUBLE
30520: LD_INT 1
30522: DEC
30523: ST_TO_ADDR
30524: LD_VAR 0 6
30528: PUSH
30529: FOR_TO
30530: IFFALSE 30569
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30532: LD_ADDR_VAR 0 9
30536: PUSH
30537: LD_VAR 0 9
30541: PPUSH
30542: LD_VAR 0 7
30546: PPUSH
30547: LD_VAR 0 6
30551: PUSH
30552: LD_VAR 0 7
30556: ARRAY
30557: PUSH
30558: LD_INT 1
30560: ARRAY
30561: PPUSH
30562: CALL_OW 1
30566: ST_TO_ADDR
30567: GO 30529
30569: POP
30570: POP
// result := tmp ;
30571: LD_ADDR_VAR 0 6
30575: PUSH
30576: LD_VAR 0 9
30580: ST_TO_ADDR
// end ; end ;
30581: LD_VAR 0 6
30585: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30586: LD_INT 0
30588: PPUSH
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
30593: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30594: LD_ADDR_VAR 0 5
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: ST_TO_ADDR
// if not x or not y then
30616: LD_VAR 0 2
30620: NOT
30621: PUSH
30622: LD_VAR 0 3
30626: NOT
30627: OR
30628: IFFALSE 30632
// exit ;
30630: GO 32282
// if not range then
30632: LD_VAR 0 4
30636: NOT
30637: IFFALSE 30647
// range := 10 ;
30639: LD_ADDR_VAR 0 4
30643: PUSH
30644: LD_INT 10
30646: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30647: LD_ADDR_VAR 0 8
30651: PUSH
30652: LD_INT 81
30654: PUSH
30655: LD_VAR 0 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 92
30666: PUSH
30667: LD_VAR 0 2
30671: PUSH
30672: LD_VAR 0 3
30676: PUSH
30677: LD_VAR 0 4
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: LD_INT 21
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: PPUSH
30710: CALL_OW 69
30714: ST_TO_ADDR
// if not tmp then
30715: LD_VAR 0 8
30719: NOT
30720: IFFALSE 30724
// exit ;
30722: GO 32282
// for i in tmp do
30724: LD_ADDR_VAR 0 6
30728: PUSH
30729: LD_VAR 0 8
30733: PUSH
30734: FOR_IN
30735: IFFALSE 32257
// begin points := [ 0 , 0 , 0 ] ;
30737: LD_ADDR_VAR 0 9
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: ST_TO_ADDR
// bpoints := 1 ;
30756: LD_ADDR_VAR 0 10
30760: PUSH
30761: LD_INT 1
30763: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30764: LD_VAR 0 6
30768: PPUSH
30769: CALL_OW 247
30773: PUSH
30774: LD_INT 1
30776: DOUBLE
30777: EQUAL
30778: IFTRUE 30782
30780: GO 31360
30782: POP
// begin if GetClass ( i ) = 1 then
30783: LD_VAR 0 6
30787: PPUSH
30788: CALL_OW 257
30792: PUSH
30793: LD_INT 1
30795: EQUAL
30796: IFFALSE 30817
// points := [ 10 , 5 , 3 ] ;
30798: LD_ADDR_VAR 0 9
30802: PUSH
30803: LD_INT 10
30805: PUSH
30806: LD_INT 5
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30817: LD_VAR 0 6
30821: PPUSH
30822: CALL_OW 257
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: LD_INT 4
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: LIST
30840: IN
30841: IFFALSE 30862
// points := [ 3 , 2 , 1 ] ;
30843: LD_ADDR_VAR 0 9
30847: PUSH
30848: LD_INT 3
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30862: LD_VAR 0 6
30866: PPUSH
30867: CALL_OW 257
30871: PUSH
30872: LD_INT 5
30874: EQUAL
30875: IFFALSE 30896
// points := [ 130 , 5 , 2 ] ;
30877: LD_ADDR_VAR 0 9
30881: PUSH
30882: LD_INT 130
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30896: LD_VAR 0 6
30900: PPUSH
30901: CALL_OW 257
30905: PUSH
30906: LD_INT 8
30908: EQUAL
30909: IFFALSE 30930
// points := [ 35 , 35 , 30 ] ;
30911: LD_ADDR_VAR 0 9
30915: PUSH
30916: LD_INT 35
30918: PUSH
30919: LD_INT 35
30921: PUSH
30922: LD_INT 30
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30930: LD_VAR 0 6
30934: PPUSH
30935: CALL_OW 257
30939: PUSH
30940: LD_INT 9
30942: EQUAL
30943: IFFALSE 30964
// points := [ 20 , 55 , 40 ] ;
30945: LD_ADDR_VAR 0 9
30949: PUSH
30950: LD_INT 20
30952: PUSH
30953: LD_INT 55
30955: PUSH
30956: LD_INT 40
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30964: LD_VAR 0 6
30968: PPUSH
30969: CALL_OW 257
30973: PUSH
30974: LD_INT 12
30976: PUSH
30977: LD_INT 16
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: IN
30984: IFFALSE 31005
// points := [ 5 , 3 , 2 ] ;
30986: LD_ADDR_VAR 0 9
30990: PUSH
30991: LD_INT 5
30993: PUSH
30994: LD_INT 3
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31005: LD_VAR 0 6
31009: PPUSH
31010: CALL_OW 257
31014: PUSH
31015: LD_INT 17
31017: EQUAL
31018: IFFALSE 31039
// points := [ 100 , 50 , 75 ] ;
31020: LD_ADDR_VAR 0 9
31024: PUSH
31025: LD_INT 100
31027: PUSH
31028: LD_INT 50
31030: PUSH
31031: LD_INT 75
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31039: LD_VAR 0 6
31043: PPUSH
31044: CALL_OW 257
31048: PUSH
31049: LD_INT 15
31051: EQUAL
31052: IFFALSE 31073
// points := [ 10 , 5 , 3 ] ;
31054: LD_ADDR_VAR 0 9
31058: PUSH
31059: LD_INT 10
31061: PUSH
31062: LD_INT 5
31064: PUSH
31065: LD_INT 3
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31073: LD_VAR 0 6
31077: PPUSH
31078: CALL_OW 257
31082: PUSH
31083: LD_INT 14
31085: EQUAL
31086: IFFALSE 31107
// points := [ 10 , 0 , 0 ] ;
31088: LD_ADDR_VAR 0 9
31092: PUSH
31093: LD_INT 10
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31107: LD_VAR 0 6
31111: PPUSH
31112: CALL_OW 257
31116: PUSH
31117: LD_INT 11
31119: EQUAL
31120: IFFALSE 31141
// points := [ 30 , 10 , 5 ] ;
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: LD_INT 30
31129: PUSH
31130: LD_INT 10
31132: PUSH
31133: LD_INT 5
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31141: LD_VAR 0 1
31145: PPUSH
31146: LD_INT 5
31148: PPUSH
31149: CALL_OW 321
31153: PUSH
31154: LD_INT 2
31156: EQUAL
31157: IFFALSE 31174
// bpoints := bpoints * 1.8 ;
31159: LD_ADDR_VAR 0 10
31163: PUSH
31164: LD_VAR 0 10
31168: PUSH
31169: LD_REAL  1.80000000000000E+0000
31172: MUL
31173: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31174: LD_VAR 0 6
31178: PPUSH
31179: CALL_OW 257
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: LD_INT 3
31192: PUSH
31193: LD_INT 4
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: IN
31202: PUSH
31203: LD_VAR 0 1
31207: PPUSH
31208: LD_INT 51
31210: PPUSH
31211: CALL_OW 321
31215: PUSH
31216: LD_INT 2
31218: EQUAL
31219: AND
31220: IFFALSE 31237
// bpoints := bpoints * 1.2 ;
31222: LD_ADDR_VAR 0 10
31226: PUSH
31227: LD_VAR 0 10
31231: PUSH
31232: LD_REAL  1.20000000000000E+0000
31235: MUL
31236: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31237: LD_VAR 0 6
31241: PPUSH
31242: CALL_OW 257
31246: PUSH
31247: LD_INT 5
31249: PUSH
31250: LD_INT 7
31252: PUSH
31253: LD_INT 9
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: IN
31261: PUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: LD_INT 52
31269: PPUSH
31270: CALL_OW 321
31274: PUSH
31275: LD_INT 2
31277: EQUAL
31278: AND
31279: IFFALSE 31296
// bpoints := bpoints * 1.5 ;
31281: LD_ADDR_VAR 0 10
31285: PUSH
31286: LD_VAR 0 10
31290: PUSH
31291: LD_REAL  1.50000000000000E+0000
31294: MUL
31295: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31296: LD_VAR 0 1
31300: PPUSH
31301: LD_INT 66
31303: PPUSH
31304: CALL_OW 321
31308: PUSH
31309: LD_INT 2
31311: EQUAL
31312: IFFALSE 31329
// bpoints := bpoints * 1.1 ;
31314: LD_ADDR_VAR 0 10
31318: PUSH
31319: LD_VAR 0 10
31323: PUSH
31324: LD_REAL  1.10000000000000E+0000
31327: MUL
31328: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31329: LD_ADDR_VAR 0 10
31333: PUSH
31334: LD_VAR 0 10
31338: PUSH
31339: LD_VAR 0 6
31343: PPUSH
31344: LD_INT 1
31346: PPUSH
31347: CALL_OW 259
31351: PUSH
31352: LD_REAL  1.15000000000000E+0000
31355: MUL
31356: MUL
31357: ST_TO_ADDR
// end ; unit_vehicle :
31358: GO 32186
31360: LD_INT 2
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 32174
31368: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31369: LD_VAR 0 6
31373: PPUSH
31374: CALL_OW 264
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 42
31384: PUSH
31385: LD_INT 24
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: IN
31393: IFFALSE 31414
// points := [ 25 , 5 , 3 ] ;
31395: LD_ADDR_VAR 0 9
31399: PUSH
31400: LD_INT 25
31402: PUSH
31403: LD_INT 5
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31414: LD_VAR 0 6
31418: PPUSH
31419: CALL_OW 264
31423: PUSH
31424: LD_INT 4
31426: PUSH
31427: LD_INT 43
31429: PUSH
31430: LD_INT 25
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: IN
31438: IFFALSE 31459
// points := [ 40 , 15 , 5 ] ;
31440: LD_ADDR_VAR 0 9
31444: PUSH
31445: LD_INT 40
31447: PUSH
31448: LD_INT 15
31450: PUSH
31451: LD_INT 5
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31459: LD_VAR 0 6
31463: PPUSH
31464: CALL_OW 264
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 23
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: IN
31479: IFFALSE 31500
// points := [ 7 , 25 , 8 ] ;
31481: LD_ADDR_VAR 0 9
31485: PUSH
31486: LD_INT 7
31488: PUSH
31489: LD_INT 25
31491: PUSH
31492: LD_INT 8
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31500: LD_VAR 0 6
31504: PPUSH
31505: CALL_OW 264
31509: PUSH
31510: LD_INT 5
31512: PUSH
31513: LD_INT 27
31515: PUSH
31516: LD_INT 44
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: LIST
31523: IN
31524: IFFALSE 31545
// points := [ 14 , 50 , 16 ] ;
31526: LD_ADDR_VAR 0 9
31530: PUSH
31531: LD_INT 14
31533: PUSH
31534: LD_INT 50
31536: PUSH
31537: LD_INT 16
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31545: LD_VAR 0 6
31549: PPUSH
31550: CALL_OW 264
31554: PUSH
31555: LD_INT 6
31557: PUSH
31558: LD_INT 46
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: IN
31565: IFFALSE 31586
// points := [ 32 , 120 , 70 ] ;
31567: LD_ADDR_VAR 0 9
31571: PUSH
31572: LD_INT 32
31574: PUSH
31575: LD_INT 120
31577: PUSH
31578: LD_INT 70
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31586: LD_VAR 0 6
31590: PPUSH
31591: CALL_OW 264
31595: PUSH
31596: LD_INT 7
31598: PUSH
31599: LD_INT 28
31601: PUSH
31602: LD_INT 45
31604: PUSH
31605: LD_INT 92
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: IN
31614: IFFALSE 31635
// points := [ 35 , 20 , 45 ] ;
31616: LD_ADDR_VAR 0 9
31620: PUSH
31621: LD_INT 35
31623: PUSH
31624: LD_INT 20
31626: PUSH
31627: LD_INT 45
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31635: LD_VAR 0 6
31639: PPUSH
31640: CALL_OW 264
31644: PUSH
31645: LD_INT 47
31647: PUSH
31648: EMPTY
31649: LIST
31650: IN
31651: IFFALSE 31672
// points := [ 67 , 45 , 75 ] ;
31653: LD_ADDR_VAR 0 9
31657: PUSH
31658: LD_INT 67
31660: PUSH
31661: LD_INT 45
31663: PUSH
31664: LD_INT 75
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31672: LD_VAR 0 6
31676: PPUSH
31677: CALL_OW 264
31681: PUSH
31682: LD_INT 26
31684: PUSH
31685: EMPTY
31686: LIST
31687: IN
31688: IFFALSE 31709
// points := [ 120 , 30 , 80 ] ;
31690: LD_ADDR_VAR 0 9
31694: PUSH
31695: LD_INT 120
31697: PUSH
31698: LD_INT 30
31700: PUSH
31701: LD_INT 80
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31709: LD_VAR 0 6
31713: PPUSH
31714: CALL_OW 264
31718: PUSH
31719: LD_INT 22
31721: PUSH
31722: EMPTY
31723: LIST
31724: IN
31725: IFFALSE 31746
// points := [ 40 , 1 , 1 ] ;
31727: LD_ADDR_VAR 0 9
31731: PUSH
31732: LD_INT 40
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31746: LD_VAR 0 6
31750: PPUSH
31751: CALL_OW 264
31755: PUSH
31756: LD_INT 29
31758: PUSH
31759: EMPTY
31760: LIST
31761: IN
31762: IFFALSE 31783
// points := [ 70 , 200 , 400 ] ;
31764: LD_ADDR_VAR 0 9
31768: PUSH
31769: LD_INT 70
31771: PUSH
31772: LD_INT 200
31774: PUSH
31775: LD_INT 400
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31783: LD_VAR 0 6
31787: PPUSH
31788: CALL_OW 264
31792: PUSH
31793: LD_INT 14
31795: PUSH
31796: LD_INT 53
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: IN
31803: IFFALSE 31824
// points := [ 40 , 10 , 20 ] ;
31805: LD_ADDR_VAR 0 9
31809: PUSH
31810: LD_INT 40
31812: PUSH
31813: LD_INT 10
31815: PUSH
31816: LD_INT 20
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31824: LD_VAR 0 6
31828: PPUSH
31829: CALL_OW 264
31833: PUSH
31834: LD_INT 9
31836: PUSH
31837: EMPTY
31838: LIST
31839: IN
31840: IFFALSE 31861
// points := [ 5 , 70 , 20 ] ;
31842: LD_ADDR_VAR 0 9
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: LD_INT 70
31852: PUSH
31853: LD_INT 20
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31861: LD_VAR 0 6
31865: PPUSH
31866: CALL_OW 264
31870: PUSH
31871: LD_INT 10
31873: PUSH
31874: EMPTY
31875: LIST
31876: IN
31877: IFFALSE 31898
// points := [ 35 , 110 , 70 ] ;
31879: LD_ADDR_VAR 0 9
31883: PUSH
31884: LD_INT 35
31886: PUSH
31887: LD_INT 110
31889: PUSH
31890: LD_INT 70
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31898: LD_VAR 0 6
31902: PPUSH
31903: CALL_OW 265
31907: PUSH
31908: LD_INT 25
31910: EQUAL
31911: IFFALSE 31932
// points := [ 80 , 65 , 100 ] ;
31913: LD_ADDR_VAR 0 9
31917: PUSH
31918: LD_INT 80
31920: PUSH
31921: LD_INT 65
31923: PUSH
31924: LD_INT 100
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31932: LD_VAR 0 6
31936: PPUSH
31937: CALL_OW 263
31941: PUSH
31942: LD_INT 1
31944: EQUAL
31945: IFFALSE 31980
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31947: LD_ADDR_VAR 0 10
31951: PUSH
31952: LD_VAR 0 10
31956: PUSH
31957: LD_VAR 0 6
31961: PPUSH
31962: CALL_OW 311
31966: PPUSH
31967: LD_INT 3
31969: PPUSH
31970: CALL_OW 259
31974: PUSH
31975: LD_INT 4
31977: MUL
31978: MUL
31979: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31980: LD_VAR 0 6
31984: PPUSH
31985: CALL_OW 263
31989: PUSH
31990: LD_INT 2
31992: EQUAL
31993: IFFALSE 32044
// begin j := IsControledBy ( i ) ;
31995: LD_ADDR_VAR 0 7
31999: PUSH
32000: LD_VAR 0 6
32004: PPUSH
32005: CALL_OW 312
32009: ST_TO_ADDR
// if j then
32010: LD_VAR 0 7
32014: IFFALSE 32044
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32016: LD_ADDR_VAR 0 10
32020: PUSH
32021: LD_VAR 0 10
32025: PUSH
32026: LD_VAR 0 7
32030: PPUSH
32031: LD_INT 3
32033: PPUSH
32034: CALL_OW 259
32038: PUSH
32039: LD_INT 3
32041: MUL
32042: MUL
32043: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32044: LD_VAR 0 6
32048: PPUSH
32049: CALL_OW 264
32053: PUSH
32054: LD_INT 5
32056: PUSH
32057: LD_INT 6
32059: PUSH
32060: LD_INT 46
32062: PUSH
32063: LD_INT 44
32065: PUSH
32066: LD_INT 47
32068: PUSH
32069: LD_INT 45
32071: PUSH
32072: LD_INT 28
32074: PUSH
32075: LD_INT 7
32077: PUSH
32078: LD_INT 27
32080: PUSH
32081: LD_INT 29
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: IN
32096: PUSH
32097: LD_VAR 0 1
32101: PPUSH
32102: LD_INT 52
32104: PPUSH
32105: CALL_OW 321
32109: PUSH
32110: LD_INT 2
32112: EQUAL
32113: AND
32114: IFFALSE 32131
// bpoints := bpoints * 1.2 ;
32116: LD_ADDR_VAR 0 10
32120: PUSH
32121: LD_VAR 0 10
32125: PUSH
32126: LD_REAL  1.20000000000000E+0000
32129: MUL
32130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32131: LD_VAR 0 6
32135: PPUSH
32136: CALL_OW 264
32140: PUSH
32141: LD_INT 6
32143: PUSH
32144: LD_INT 46
32146: PUSH
32147: LD_INT 47
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: IN
32155: IFFALSE 32172
// bpoints := bpoints * 1.2 ;
32157: LD_ADDR_VAR 0 10
32161: PUSH
32162: LD_VAR 0 10
32166: PUSH
32167: LD_REAL  1.20000000000000E+0000
32170: MUL
32171: ST_TO_ADDR
// end ; unit_building :
32172: GO 32186
32174: LD_INT 3
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32182
32180: GO 32185
32182: POP
// ; end ;
32183: GO 32186
32185: POP
// for j = 1 to 3 do
32186: LD_ADDR_VAR 0 7
32190: PUSH
32191: DOUBLE
32192: LD_INT 1
32194: DEC
32195: ST_TO_ADDR
32196: LD_INT 3
32198: PUSH
32199: FOR_TO
32200: IFFALSE 32253
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32202: LD_ADDR_VAR 0 5
32206: PUSH
32207: LD_VAR 0 5
32211: PPUSH
32212: LD_VAR 0 7
32216: PPUSH
32217: LD_VAR 0 5
32221: PUSH
32222: LD_VAR 0 7
32226: ARRAY
32227: PUSH
32228: LD_VAR 0 9
32232: PUSH
32233: LD_VAR 0 7
32237: ARRAY
32238: PUSH
32239: LD_VAR 0 10
32243: MUL
32244: PLUS
32245: PPUSH
32246: CALL_OW 1
32250: ST_TO_ADDR
32251: GO 32199
32253: POP
32254: POP
// end ;
32255: GO 30734
32257: POP
32258: POP
// result := Replace ( result , 4 , tmp ) ;
32259: LD_ADDR_VAR 0 5
32263: PUSH
32264: LD_VAR 0 5
32268: PPUSH
32269: LD_INT 4
32271: PPUSH
32272: LD_VAR 0 8
32276: PPUSH
32277: CALL_OW 1
32281: ST_TO_ADDR
// end ;
32282: LD_VAR 0 5
32286: RET
// export function DangerAtRange ( unit , range ) ; begin
32287: LD_INT 0
32289: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_VAR 0 1
32299: PPUSH
32300: CALL_OW 255
32304: PPUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 250
32314: PPUSH
32315: LD_VAR 0 1
32319: PPUSH
32320: CALL_OW 251
32324: PPUSH
32325: LD_VAR 0 2
32329: PPUSH
32330: CALL 30586 0 4
32334: ST_TO_ADDR
// end ;
32335: LD_VAR 0 3
32339: RET
// export function DangerInArea ( side , area ) ; begin
32340: LD_INT 0
32342: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32343: LD_ADDR_VAR 0 3
32347: PUSH
32348: LD_VAR 0 2
32352: PPUSH
32353: LD_INT 81
32355: PUSH
32356: LD_VAR 0 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PPUSH
32365: CALL_OW 70
32369: ST_TO_ADDR
// end ;
32370: LD_VAR 0 3
32374: RET
// export function IsExtension ( b ) ; begin
32375: LD_INT 0
32377: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32378: LD_ADDR_VAR 0 2
32382: PUSH
32383: LD_VAR 0 1
32387: PUSH
32388: LD_INT 23
32390: PUSH
32391: LD_INT 20
32393: PUSH
32394: LD_INT 22
32396: PUSH
32397: LD_INT 17
32399: PUSH
32400: LD_INT 24
32402: PUSH
32403: LD_INT 21
32405: PUSH
32406: LD_INT 19
32408: PUSH
32409: LD_INT 16
32411: PUSH
32412: LD_INT 25
32414: PUSH
32415: LD_INT 18
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: IN
32430: ST_TO_ADDR
// end ;
32431: LD_VAR 0 2
32435: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32436: LD_INT 0
32438: PPUSH
32439: PPUSH
32440: PPUSH
// result := [ ] ;
32441: LD_ADDR_VAR 0 4
32445: PUSH
32446: EMPTY
32447: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32448: LD_ADDR_VAR 0 5
32452: PUSH
32453: LD_VAR 0 2
32457: PPUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PPUSH
32468: CALL_OW 70
32472: ST_TO_ADDR
// if not tmp then
32473: LD_VAR 0 5
32477: NOT
32478: IFFALSE 32482
// exit ;
32480: GO 32546
// if checkLink then
32482: LD_VAR 0 3
32486: IFFALSE 32536
// begin for i in tmp do
32488: LD_ADDR_VAR 0 6
32492: PUSH
32493: LD_VAR 0 5
32497: PUSH
32498: FOR_IN
32499: IFFALSE 32534
// if GetBase ( i ) <> base then
32501: LD_VAR 0 6
32505: PPUSH
32506: CALL_OW 274
32510: PUSH
32511: LD_VAR 0 1
32515: NONEQUAL
32516: IFFALSE 32532
// ComLinkToBase ( base , i ) ;
32518: LD_VAR 0 1
32522: PPUSH
32523: LD_VAR 0 6
32527: PPUSH
32528: CALL_OW 169
32532: GO 32498
32534: POP
32535: POP
// end ; result := tmp ;
32536: LD_ADDR_VAR 0 4
32540: PUSH
32541: LD_VAR 0 5
32545: ST_TO_ADDR
// end ;
32546: LD_VAR 0 4
32550: RET
// export function ComComplete ( units , b ) ; var i ; begin
32551: LD_INT 0
32553: PPUSH
32554: PPUSH
// if not units then
32555: LD_VAR 0 1
32559: NOT
32560: IFFALSE 32564
// exit ;
32562: GO 32654
// for i in units do
32564: LD_ADDR_VAR 0 4
32568: PUSH
32569: LD_VAR 0 1
32573: PUSH
32574: FOR_IN
32575: IFFALSE 32652
// if BuildingStatus ( b ) = bs_build then
32577: LD_VAR 0 2
32581: PPUSH
32582: CALL_OW 461
32586: PUSH
32587: LD_INT 1
32589: EQUAL
32590: IFFALSE 32650
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32592: LD_VAR 0 4
32596: PPUSH
32597: LD_STRING h
32599: PUSH
32600: LD_VAR 0 2
32604: PPUSH
32605: CALL_OW 250
32609: PUSH
32610: LD_VAR 0 2
32614: PPUSH
32615: CALL_OW 251
32619: PUSH
32620: LD_VAR 0 2
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: PPUSH
32646: CALL_OW 446
32650: GO 32574
32652: POP
32653: POP
// end ;
32654: LD_VAR 0 3
32658: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32667: LD_VAR 0 1
32671: NOT
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 263
32682: PUSH
32683: LD_INT 2
32685: NONEQUAL
32686: OR
32687: IFFALSE 32691
// exit ;
32689: GO 33007
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32691: LD_ADDR_VAR 0 6
32695: PUSH
32696: LD_INT 22
32698: PUSH
32699: LD_VAR 0 1
32703: PPUSH
32704: CALL_OW 255
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: LD_INT 36
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 34
32728: PUSH
32729: LD_INT 31
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PPUSH
32745: CALL_OW 69
32749: ST_TO_ADDR
// if not tmp then
32750: LD_VAR 0 6
32754: NOT
32755: IFFALSE 32759
// exit ;
32757: GO 33007
// result := [ ] ;
32759: LD_ADDR_VAR 0 2
32763: PUSH
32764: EMPTY
32765: ST_TO_ADDR
// for i in tmp do
32766: LD_ADDR_VAR 0 3
32770: PUSH
32771: LD_VAR 0 6
32775: PUSH
32776: FOR_IN
32777: IFFALSE 32848
// begin t := UnitsInside ( i ) ;
32779: LD_ADDR_VAR 0 4
32783: PUSH
32784: LD_VAR 0 3
32788: PPUSH
32789: CALL_OW 313
32793: ST_TO_ADDR
// if t then
32794: LD_VAR 0 4
32798: IFFALSE 32846
// for j in t do
32800: LD_ADDR_VAR 0 7
32804: PUSH
32805: LD_VAR 0 4
32809: PUSH
32810: FOR_IN
32811: IFFALSE 32844
// result := Replace ( result , result + 1 , j ) ;
32813: LD_ADDR_VAR 0 2
32817: PUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: LD_VAR 0 2
32827: PUSH
32828: LD_INT 1
32830: PLUS
32831: PPUSH
32832: LD_VAR 0 7
32836: PPUSH
32837: CALL_OW 1
32841: ST_TO_ADDR
32842: GO 32810
32844: POP
32845: POP
// end ;
32846: GO 32776
32848: POP
32849: POP
// if not result then
32850: LD_VAR 0 2
32854: NOT
32855: IFFALSE 32859
// exit ;
32857: GO 33007
// mech := result [ 1 ] ;
32859: LD_ADDR_VAR 0 5
32863: PUSH
32864: LD_VAR 0 2
32868: PUSH
32869: LD_INT 1
32871: ARRAY
32872: ST_TO_ADDR
// if result > 1 then
32873: LD_VAR 0 2
32877: PUSH
32878: LD_INT 1
32880: GREATER
32881: IFFALSE 32993
// begin for i = 2 to result do
32883: LD_ADDR_VAR 0 3
32887: PUSH
32888: DOUBLE
32889: LD_INT 2
32891: DEC
32892: ST_TO_ADDR
32893: LD_VAR 0 2
32897: PUSH
32898: FOR_TO
32899: IFFALSE 32991
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32901: LD_ADDR_VAR 0 4
32905: PUSH
32906: LD_VAR 0 2
32910: PUSH
32911: LD_VAR 0 3
32915: ARRAY
32916: PPUSH
32917: LD_INT 3
32919: PPUSH
32920: CALL_OW 259
32924: PUSH
32925: LD_VAR 0 2
32929: PUSH
32930: LD_VAR 0 3
32934: ARRAY
32935: PPUSH
32936: CALL_OW 432
32940: MINUS
32941: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32942: LD_VAR 0 4
32946: PUSH
32947: LD_VAR 0 5
32951: PPUSH
32952: LD_INT 3
32954: PPUSH
32955: CALL_OW 259
32959: PUSH
32960: LD_VAR 0 5
32964: PPUSH
32965: CALL_OW 432
32969: MINUS
32970: GREATEREQUAL
32971: IFFALSE 32989
// mech := result [ i ] ;
32973: LD_ADDR_VAR 0 5
32977: PUSH
32978: LD_VAR 0 2
32982: PUSH
32983: LD_VAR 0 3
32987: ARRAY
32988: ST_TO_ADDR
// end ;
32989: GO 32898
32991: POP
32992: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32993: LD_VAR 0 1
32997: PPUSH
32998: LD_VAR 0 5
33002: PPUSH
33003: CALL_OW 135
// end ;
33007: LD_VAR 0 2
33011: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33012: LD_INT 0
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
33026: PPUSH
// result := [ ] ;
33027: LD_ADDR_VAR 0 7
33031: PUSH
33032: EMPTY
33033: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33034: LD_VAR 0 1
33038: PPUSH
33039: CALL_OW 266
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: IN
33054: NOT
33055: IFFALSE 33059
// exit ;
33057: GO 34693
// if name then
33059: LD_VAR 0 3
33063: IFFALSE 33079
// SetBName ( base_dep , name ) ;
33065: LD_VAR 0 1
33069: PPUSH
33070: LD_VAR 0 3
33074: PPUSH
33075: CALL_OW 500
// base := GetBase ( base_dep ) ;
33079: LD_ADDR_VAR 0 15
33083: PUSH
33084: LD_VAR 0 1
33088: PPUSH
33089: CALL_OW 274
33093: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33094: LD_ADDR_VAR 0 16
33098: PUSH
33099: LD_VAR 0 1
33103: PPUSH
33104: CALL_OW 255
33108: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33109: LD_ADDR_VAR 0 17
33113: PUSH
33114: LD_VAR 0 1
33118: PPUSH
33119: CALL_OW 248
33123: ST_TO_ADDR
// if sources then
33124: LD_VAR 0 5
33128: IFFALSE 33175
// for i = 1 to 3 do
33130: LD_ADDR_VAR 0 8
33134: PUSH
33135: DOUBLE
33136: LD_INT 1
33138: DEC
33139: ST_TO_ADDR
33140: LD_INT 3
33142: PUSH
33143: FOR_TO
33144: IFFALSE 33173
// AddResourceType ( base , i , sources [ i ] ) ;
33146: LD_VAR 0 15
33150: PPUSH
33151: LD_VAR 0 8
33155: PPUSH
33156: LD_VAR 0 5
33160: PUSH
33161: LD_VAR 0 8
33165: ARRAY
33166: PPUSH
33167: CALL_OW 276
33171: GO 33143
33173: POP
33174: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33175: LD_ADDR_VAR 0 18
33179: PUSH
33180: LD_VAR 0 15
33184: PPUSH
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_INT 1
33192: PPUSH
33193: CALL 32436 0 3
33197: ST_TO_ADDR
// InitHc ;
33198: CALL_OW 19
// InitUc ;
33202: CALL_OW 18
// uc_side := side ;
33206: LD_ADDR_OWVAR 20
33210: PUSH
33211: LD_VAR 0 16
33215: ST_TO_ADDR
// uc_nation := nation ;
33216: LD_ADDR_OWVAR 21
33220: PUSH
33221: LD_VAR 0 17
33225: ST_TO_ADDR
// if buildings then
33226: LD_VAR 0 18
33230: IFFALSE 34552
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33232: LD_ADDR_VAR 0 19
33236: PUSH
33237: LD_VAR 0 18
33241: PPUSH
33242: LD_INT 2
33244: PUSH
33245: LD_INT 30
33247: PUSH
33248: LD_INT 29
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 30
33257: PUSH
33258: LD_INT 30
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: PPUSH
33270: CALL_OW 72
33274: ST_TO_ADDR
// if tmp then
33275: LD_VAR 0 19
33279: IFFALSE 33327
// for i in tmp do
33281: LD_ADDR_VAR 0 8
33285: PUSH
33286: LD_VAR 0 19
33290: PUSH
33291: FOR_IN
33292: IFFALSE 33325
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33294: LD_VAR 0 8
33298: PPUSH
33299: CALL_OW 250
33303: PPUSH
33304: LD_VAR 0 8
33308: PPUSH
33309: CALL_OW 251
33313: PPUSH
33314: LD_VAR 0 16
33318: PPUSH
33319: CALL_OW 441
33323: GO 33291
33325: POP
33326: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33327: LD_VAR 0 18
33331: PPUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 30
33337: PUSH
33338: LD_INT 32
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 30
33347: PUSH
33348: LD_INT 33
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL_OW 72
33364: IFFALSE 33452
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33366: LD_ADDR_VAR 0 8
33370: PUSH
33371: LD_VAR 0 18
33375: PPUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 30
33381: PUSH
33382: LD_INT 32
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 30
33391: PUSH
33392: LD_INT 33
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: PPUSH
33404: CALL_OW 72
33408: PUSH
33409: FOR_IN
33410: IFFALSE 33450
// begin if not GetBWeapon ( i ) then
33412: LD_VAR 0 8
33416: PPUSH
33417: CALL_OW 269
33421: NOT
33422: IFFALSE 33448
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33424: LD_VAR 0 8
33428: PPUSH
33429: LD_VAR 0 8
33433: PPUSH
33434: LD_VAR 0 2
33438: PPUSH
33439: CALL 34698 0 2
33443: PPUSH
33444: CALL_OW 431
// end ;
33448: GO 33409
33450: POP
33451: POP
// end ; for i = 1 to personel do
33452: LD_ADDR_VAR 0 8
33456: PUSH
33457: DOUBLE
33458: LD_INT 1
33460: DEC
33461: ST_TO_ADDR
33462: LD_VAR 0 6
33466: PUSH
33467: FOR_TO
33468: IFFALSE 34532
// begin if i > 4 then
33470: LD_VAR 0 8
33474: PUSH
33475: LD_INT 4
33477: GREATER
33478: IFFALSE 33482
// break ;
33480: GO 34532
// case i of 1 :
33482: LD_VAR 0 8
33486: PUSH
33487: LD_INT 1
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33495
33493: GO 33575
33495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33496: LD_ADDR_VAR 0 12
33500: PUSH
33501: LD_VAR 0 18
33505: PPUSH
33506: LD_INT 22
33508: PUSH
33509: LD_VAR 0 16
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 58
33520: PUSH
33521: EMPTY
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: PUSH
33527: LD_INT 30
33529: PUSH
33530: LD_INT 32
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 30
33539: PUSH
33540: LD_INT 4
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 30
33549: PUSH
33550: LD_INT 5
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: PPUSH
33568: CALL_OW 72
33572: ST_TO_ADDR
33573: GO 33797
33575: LD_INT 2
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33583
33581: GO 33645
33583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33584: LD_ADDR_VAR 0 12
33588: PUSH
33589: LD_VAR 0 18
33593: PPUSH
33594: LD_INT 22
33596: PUSH
33597: LD_VAR 0 16
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 30
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 30
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PPUSH
33638: CALL_OW 72
33642: ST_TO_ADDR
33643: GO 33797
33645: LD_INT 3
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33715
33653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33654: LD_ADDR_VAR 0 12
33658: PUSH
33659: LD_VAR 0 18
33663: PPUSH
33664: LD_INT 22
33666: PUSH
33667: LD_VAR 0 16
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 30
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 30
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PPUSH
33708: CALL_OW 72
33712: ST_TO_ADDR
33713: GO 33797
33715: LD_INT 4
33717: DOUBLE
33718: EQUAL
33719: IFTRUE 33723
33721: GO 33796
33723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33724: LD_ADDR_VAR 0 12
33728: PUSH
33729: LD_VAR 0 18
33733: PPUSH
33734: LD_INT 22
33736: PUSH
33737: LD_VAR 0 16
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 30
33751: PUSH
33752: LD_INT 6
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 30
33761: PUSH
33762: LD_INT 7
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 30
33771: PUSH
33772: LD_INT 8
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PPUSH
33789: CALL_OW 72
33793: ST_TO_ADDR
33794: GO 33797
33796: POP
// if i = 1 then
33797: LD_VAR 0 8
33801: PUSH
33802: LD_INT 1
33804: EQUAL
33805: IFFALSE 33916
// begin tmp := [ ] ;
33807: LD_ADDR_VAR 0 19
33811: PUSH
33812: EMPTY
33813: ST_TO_ADDR
// for j in f do
33814: LD_ADDR_VAR 0 9
33818: PUSH
33819: LD_VAR 0 12
33823: PUSH
33824: FOR_IN
33825: IFFALSE 33898
// if GetBType ( j ) = b_bunker then
33827: LD_VAR 0 9
33831: PPUSH
33832: CALL_OW 266
33836: PUSH
33837: LD_INT 32
33839: EQUAL
33840: IFFALSE 33867
// tmp := Insert ( tmp , 1 , j ) else
33842: LD_ADDR_VAR 0 19
33846: PUSH
33847: LD_VAR 0 19
33851: PPUSH
33852: LD_INT 1
33854: PPUSH
33855: LD_VAR 0 9
33859: PPUSH
33860: CALL_OW 2
33864: ST_TO_ADDR
33865: GO 33896
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33867: LD_ADDR_VAR 0 19
33871: PUSH
33872: LD_VAR 0 19
33876: PPUSH
33877: LD_VAR 0 19
33881: PUSH
33882: LD_INT 1
33884: PLUS
33885: PPUSH
33886: LD_VAR 0 9
33890: PPUSH
33891: CALL_OW 2
33895: ST_TO_ADDR
33896: GO 33824
33898: POP
33899: POP
// if tmp then
33900: LD_VAR 0 19
33904: IFFALSE 33916
// f := tmp ;
33906: LD_ADDR_VAR 0 12
33910: PUSH
33911: LD_VAR 0 19
33915: ST_TO_ADDR
// end ; x := personel [ i ] ;
33916: LD_ADDR_VAR 0 13
33920: PUSH
33921: LD_VAR 0 6
33925: PUSH
33926: LD_VAR 0 8
33930: ARRAY
33931: ST_TO_ADDR
// if x = - 1 then
33932: LD_VAR 0 13
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: EQUAL
33941: IFFALSE 34150
// begin for j in f do
33943: LD_ADDR_VAR 0 9
33947: PUSH
33948: LD_VAR 0 12
33952: PUSH
33953: FOR_IN
33954: IFFALSE 34146
// repeat InitHc ;
33956: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33960: LD_VAR 0 9
33964: PPUSH
33965: CALL_OW 266
33969: PUSH
33970: LD_INT 5
33972: EQUAL
33973: IFFALSE 34043
// begin if UnitsInside ( j ) < 3 then
33975: LD_VAR 0 9
33979: PPUSH
33980: CALL_OW 313
33984: PUSH
33985: LD_INT 3
33987: LESS
33988: IFFALSE 34024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33990: LD_INT 0
33992: PPUSH
33993: LD_INT 5
33995: PUSH
33996: LD_INT 8
33998: PUSH
33999: LD_INT 9
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: PUSH
34007: LD_VAR 0 17
34011: ARRAY
34012: PPUSH
34013: LD_VAR 0 4
34017: PPUSH
34018: CALL_OW 380
34022: GO 34041
// PrepareHuman ( false , i , skill ) ;
34024: LD_INT 0
34026: PPUSH
34027: LD_VAR 0 8
34031: PPUSH
34032: LD_VAR 0 4
34036: PPUSH
34037: CALL_OW 380
// end else
34041: GO 34060
// PrepareHuman ( false , i , skill ) ;
34043: LD_INT 0
34045: PPUSH
34046: LD_VAR 0 8
34050: PPUSH
34051: LD_VAR 0 4
34055: PPUSH
34056: CALL_OW 380
// un := CreateHuman ;
34060: LD_ADDR_VAR 0 14
34064: PUSH
34065: CALL_OW 44
34069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34070: LD_ADDR_VAR 0 7
34074: PUSH
34075: LD_VAR 0 7
34079: PPUSH
34080: LD_INT 1
34082: PPUSH
34083: LD_VAR 0 14
34087: PPUSH
34088: CALL_OW 2
34092: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34093: LD_VAR 0 14
34097: PPUSH
34098: LD_VAR 0 9
34102: PPUSH
34103: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34107: LD_VAR 0 9
34111: PPUSH
34112: CALL_OW 313
34116: PUSH
34117: LD_INT 6
34119: EQUAL
34120: PUSH
34121: LD_VAR 0 9
34125: PPUSH
34126: CALL_OW 266
34130: PUSH
34131: LD_INT 32
34133: PUSH
34134: LD_INT 31
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: IN
34141: OR
34142: IFFALSE 33956
34144: GO 33953
34146: POP
34147: POP
// end else
34148: GO 34530
// for j = 1 to x do
34150: LD_ADDR_VAR 0 9
34154: PUSH
34155: DOUBLE
34156: LD_INT 1
34158: DEC
34159: ST_TO_ADDR
34160: LD_VAR 0 13
34164: PUSH
34165: FOR_TO
34166: IFFALSE 34528
// begin InitHc ;
34168: CALL_OW 19
// if not f then
34172: LD_VAR 0 12
34176: NOT
34177: IFFALSE 34266
// begin PrepareHuman ( false , i , skill ) ;
34179: LD_INT 0
34181: PPUSH
34182: LD_VAR 0 8
34186: PPUSH
34187: LD_VAR 0 4
34191: PPUSH
34192: CALL_OW 380
// un := CreateHuman ;
34196: LD_ADDR_VAR 0 14
34200: PUSH
34201: CALL_OW 44
34205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34206: LD_ADDR_VAR 0 7
34210: PUSH
34211: LD_VAR 0 7
34215: PPUSH
34216: LD_INT 1
34218: PPUSH
34219: LD_VAR 0 14
34223: PPUSH
34224: CALL_OW 2
34228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34229: LD_VAR 0 14
34233: PPUSH
34234: LD_VAR 0 1
34238: PPUSH
34239: CALL_OW 250
34243: PPUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 251
34253: PPUSH
34254: LD_INT 10
34256: PPUSH
34257: LD_INT 0
34259: PPUSH
34260: CALL_OW 50
// continue ;
34264: GO 34165
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34266: LD_VAR 0 12
34270: PUSH
34271: LD_INT 1
34273: ARRAY
34274: PPUSH
34275: CALL_OW 313
34279: PUSH
34280: LD_VAR 0 12
34284: PUSH
34285: LD_INT 1
34287: ARRAY
34288: PPUSH
34289: CALL_OW 266
34293: PUSH
34294: LD_INT 32
34296: PUSH
34297: LD_INT 31
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: IN
34304: AND
34305: PUSH
34306: LD_VAR 0 12
34310: PUSH
34311: LD_INT 1
34313: ARRAY
34314: PPUSH
34315: CALL_OW 313
34319: PUSH
34320: LD_INT 6
34322: EQUAL
34323: OR
34324: IFFALSE 34344
// f := Delete ( f , 1 ) ;
34326: LD_ADDR_VAR 0 12
34330: PUSH
34331: LD_VAR 0 12
34335: PPUSH
34336: LD_INT 1
34338: PPUSH
34339: CALL_OW 3
34343: ST_TO_ADDR
// if not f then
34344: LD_VAR 0 12
34348: NOT
34349: IFFALSE 34367
// begin x := x + 2 ;
34351: LD_ADDR_VAR 0 13
34355: PUSH
34356: LD_VAR 0 13
34360: PUSH
34361: LD_INT 2
34363: PLUS
34364: ST_TO_ADDR
// continue ;
34365: GO 34165
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34367: LD_VAR 0 12
34371: PUSH
34372: LD_INT 1
34374: ARRAY
34375: PPUSH
34376: CALL_OW 266
34380: PUSH
34381: LD_INT 5
34383: EQUAL
34384: IFFALSE 34458
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34386: LD_VAR 0 12
34390: PUSH
34391: LD_INT 1
34393: ARRAY
34394: PPUSH
34395: CALL_OW 313
34399: PUSH
34400: LD_INT 3
34402: LESS
34403: IFFALSE 34439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34405: LD_INT 0
34407: PPUSH
34408: LD_INT 5
34410: PUSH
34411: LD_INT 8
34413: PUSH
34414: LD_INT 9
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: PUSH
34422: LD_VAR 0 17
34426: ARRAY
34427: PPUSH
34428: LD_VAR 0 4
34432: PPUSH
34433: CALL_OW 380
34437: GO 34456
// PrepareHuman ( false , i , skill ) ;
34439: LD_INT 0
34441: PPUSH
34442: LD_VAR 0 8
34446: PPUSH
34447: LD_VAR 0 4
34451: PPUSH
34452: CALL_OW 380
// end else
34456: GO 34475
// PrepareHuman ( false , i , skill ) ;
34458: LD_INT 0
34460: PPUSH
34461: LD_VAR 0 8
34465: PPUSH
34466: LD_VAR 0 4
34470: PPUSH
34471: CALL_OW 380
// un := CreateHuman ;
34475: LD_ADDR_VAR 0 14
34479: PUSH
34480: CALL_OW 44
34484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34485: LD_ADDR_VAR 0 7
34489: PUSH
34490: LD_VAR 0 7
34494: PPUSH
34495: LD_INT 1
34497: PPUSH
34498: LD_VAR 0 14
34502: PPUSH
34503: CALL_OW 2
34507: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34508: LD_VAR 0 14
34512: PPUSH
34513: LD_VAR 0 12
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: PPUSH
34522: CALL_OW 52
// end ;
34526: GO 34165
34528: POP
34529: POP
// end ;
34530: GO 33467
34532: POP
34533: POP
// result := result ^ buildings ;
34534: LD_ADDR_VAR 0 7
34538: PUSH
34539: LD_VAR 0 7
34543: PUSH
34544: LD_VAR 0 18
34548: ADD
34549: ST_TO_ADDR
// end else
34550: GO 34693
// begin for i = 1 to personel do
34552: LD_ADDR_VAR 0 8
34556: PUSH
34557: DOUBLE
34558: LD_INT 1
34560: DEC
34561: ST_TO_ADDR
34562: LD_VAR 0 6
34566: PUSH
34567: FOR_TO
34568: IFFALSE 34691
// begin if i > 4 then
34570: LD_VAR 0 8
34574: PUSH
34575: LD_INT 4
34577: GREATER
34578: IFFALSE 34582
// break ;
34580: GO 34691
// x := personel [ i ] ;
34582: LD_ADDR_VAR 0 13
34586: PUSH
34587: LD_VAR 0 6
34591: PUSH
34592: LD_VAR 0 8
34596: ARRAY
34597: ST_TO_ADDR
// if x = - 1 then
34598: LD_VAR 0 13
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: EQUAL
34607: IFFALSE 34611
// continue ;
34609: GO 34567
// PrepareHuman ( false , i , skill ) ;
34611: LD_INT 0
34613: PPUSH
34614: LD_VAR 0 8
34618: PPUSH
34619: LD_VAR 0 4
34623: PPUSH
34624: CALL_OW 380
// un := CreateHuman ;
34628: LD_ADDR_VAR 0 14
34632: PUSH
34633: CALL_OW 44
34637: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34638: LD_VAR 0 14
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 250
34652: PPUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 251
34662: PPUSH
34663: LD_INT 10
34665: PPUSH
34666: LD_INT 0
34668: PPUSH
34669: CALL_OW 50
// result := result ^ un ;
34673: LD_ADDR_VAR 0 7
34677: PUSH
34678: LD_VAR 0 7
34682: PUSH
34683: LD_VAR 0 14
34687: ADD
34688: ST_TO_ADDR
// end ;
34689: GO 34567
34691: POP
34692: POP
// end ; end ;
34693: LD_VAR 0 7
34697: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34698: LD_INT 0
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
// result := false ;
34716: LD_ADDR_VAR 0 3
34720: PUSH
34721: LD_INT 0
34723: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34724: LD_VAR 0 1
34728: NOT
34729: PUSH
34730: LD_VAR 0 1
34734: PPUSH
34735: CALL_OW 266
34739: PUSH
34740: LD_INT 32
34742: PUSH
34743: LD_INT 33
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: IN
34750: NOT
34751: OR
34752: IFFALSE 34756
// exit ;
34754: GO 35865
// nat := GetNation ( tower ) ;
34756: LD_ADDR_VAR 0 12
34760: PUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 248
34770: ST_TO_ADDR
// side := GetSide ( tower ) ;
34771: LD_ADDR_VAR 0 16
34775: PUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 255
34785: ST_TO_ADDR
// x := GetX ( tower ) ;
34786: LD_ADDR_VAR 0 10
34790: PUSH
34791: LD_VAR 0 1
34795: PPUSH
34796: CALL_OW 250
34800: ST_TO_ADDR
// y := GetY ( tower ) ;
34801: LD_ADDR_VAR 0 11
34805: PUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: CALL_OW 251
34815: ST_TO_ADDR
// if not x or not y then
34816: LD_VAR 0 10
34820: NOT
34821: PUSH
34822: LD_VAR 0 11
34826: NOT
34827: OR
34828: IFFALSE 34832
// exit ;
34830: GO 35865
// weapon := 0 ;
34832: LD_ADDR_VAR 0 18
34836: PUSH
34837: LD_INT 0
34839: ST_TO_ADDR
// fac_list := [ ] ;
34840: LD_ADDR_VAR 0 17
34844: PUSH
34845: EMPTY
34846: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34847: LD_ADDR_VAR 0 6
34851: PUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 274
34861: PPUSH
34862: LD_VAR 0 2
34866: PPUSH
34867: LD_INT 0
34869: PPUSH
34870: CALL 32436 0 3
34874: PPUSH
34875: LD_INT 30
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL_OW 72
34889: ST_TO_ADDR
// if not factories then
34890: LD_VAR 0 6
34894: NOT
34895: IFFALSE 34899
// exit ;
34897: GO 35865
// for i in factories do
34899: LD_ADDR_VAR 0 8
34903: PUSH
34904: LD_VAR 0 6
34908: PUSH
34909: FOR_IN
34910: IFFALSE 34935
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34912: LD_ADDR_VAR 0 17
34916: PUSH
34917: LD_VAR 0 17
34921: PUSH
34922: LD_VAR 0 8
34926: PPUSH
34927: CALL_OW 478
34931: UNION
34932: ST_TO_ADDR
34933: GO 34909
34935: POP
34936: POP
// if not fac_list then
34937: LD_VAR 0 17
34941: NOT
34942: IFFALSE 34946
// exit ;
34944: GO 35865
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34946: LD_ADDR_VAR 0 5
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: LD_INT 5
34956: PUSH
34957: LD_INT 9
34959: PUSH
34960: LD_INT 10
34962: PUSH
34963: LD_INT 6
34965: PUSH
34966: LD_INT 7
34968: PUSH
34969: LD_INT 11
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 27
34983: PUSH
34984: LD_INT 28
34986: PUSH
34987: LD_INT 26
34989: PUSH
34990: LD_INT 30
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 43
35001: PUSH
35002: LD_INT 44
35004: PUSH
35005: LD_INT 46
35007: PUSH
35008: LD_INT 45
35010: PUSH
35011: LD_INT 47
35013: PUSH
35014: LD_INT 49
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: PUSH
35030: LD_VAR 0 12
35034: ARRAY
35035: ST_TO_ADDR
// list := list isect fac_list ;
35036: LD_ADDR_VAR 0 5
35040: PUSH
35041: LD_VAR 0 5
35045: PUSH
35046: LD_VAR 0 17
35050: ISECT
35051: ST_TO_ADDR
// if not list then
35052: LD_VAR 0 5
35056: NOT
35057: IFFALSE 35061
// exit ;
35059: GO 35865
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35061: LD_VAR 0 12
35065: PUSH
35066: LD_INT 3
35068: EQUAL
35069: PUSH
35070: LD_INT 49
35072: PUSH
35073: LD_VAR 0 5
35077: IN
35078: AND
35079: PUSH
35080: LD_INT 31
35082: PPUSH
35083: LD_VAR 0 16
35087: PPUSH
35088: CALL_OW 321
35092: PUSH
35093: LD_INT 2
35095: EQUAL
35096: AND
35097: IFFALSE 35157
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35099: LD_INT 22
35101: PUSH
35102: LD_VAR 0 16
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 35
35113: PUSH
35114: LD_INT 49
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 91
35123: PUSH
35124: LD_VAR 0 1
35128: PUSH
35129: LD_INT 10
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: PPUSH
35142: CALL_OW 69
35146: NOT
35147: IFFALSE 35157
// weapon := ru_time_lapser ;
35149: LD_ADDR_VAR 0 18
35153: PUSH
35154: LD_INT 49
35156: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35157: LD_VAR 0 12
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: IN
35172: PUSH
35173: LD_INT 11
35175: PUSH
35176: LD_VAR 0 5
35180: IN
35181: PUSH
35182: LD_INT 30
35184: PUSH
35185: LD_VAR 0 5
35189: IN
35190: OR
35191: AND
35192: PUSH
35193: LD_INT 6
35195: PPUSH
35196: LD_VAR 0 16
35200: PPUSH
35201: CALL_OW 321
35205: PUSH
35206: LD_INT 2
35208: EQUAL
35209: AND
35210: IFFALSE 35375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35212: LD_INT 22
35214: PUSH
35215: LD_VAR 0 16
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: LD_INT 35
35229: PUSH
35230: LD_INT 11
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 35
35239: PUSH
35240: LD_INT 30
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 91
35254: PUSH
35255: LD_VAR 0 1
35259: PUSH
35260: LD_INT 18
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: PPUSH
35273: CALL_OW 69
35277: NOT
35278: PUSH
35279: LD_INT 22
35281: PUSH
35282: LD_VAR 0 16
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 30
35296: PUSH
35297: LD_INT 32
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 30
35306: PUSH
35307: LD_INT 33
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 91
35321: PUSH
35322: LD_VAR 0 1
35326: PUSH
35327: LD_INT 12
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: PPUSH
35343: CALL_OW 69
35347: PUSH
35348: LD_INT 2
35350: GREATER
35351: AND
35352: IFFALSE 35375
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35354: LD_ADDR_VAR 0 18
35358: PUSH
35359: LD_INT 11
35361: PUSH
35362: LD_INT 30
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_VAR 0 12
35373: ARRAY
35374: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35375: LD_VAR 0 18
35379: NOT
35380: PUSH
35381: LD_INT 40
35383: PPUSH
35384: LD_VAR 0 16
35388: PPUSH
35389: CALL_OW 321
35393: PUSH
35394: LD_INT 2
35396: EQUAL
35397: AND
35398: PUSH
35399: LD_INT 7
35401: PUSH
35402: LD_VAR 0 5
35406: IN
35407: PUSH
35408: LD_INT 28
35410: PUSH
35411: LD_VAR 0 5
35415: IN
35416: OR
35417: PUSH
35418: LD_INT 45
35420: PUSH
35421: LD_VAR 0 5
35425: IN
35426: OR
35427: AND
35428: IFFALSE 35682
// begin hex := GetHexInfo ( x , y ) ;
35430: LD_ADDR_VAR 0 4
35434: PUSH
35435: LD_VAR 0 10
35439: PPUSH
35440: LD_VAR 0 11
35444: PPUSH
35445: CALL_OW 546
35449: ST_TO_ADDR
// if hex [ 1 ] then
35450: LD_VAR 0 4
35454: PUSH
35455: LD_INT 1
35457: ARRAY
35458: IFFALSE 35462
// exit ;
35460: GO 35865
// height := hex [ 2 ] ;
35462: LD_ADDR_VAR 0 15
35466: PUSH
35467: LD_VAR 0 4
35471: PUSH
35472: LD_INT 2
35474: ARRAY
35475: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35476: LD_ADDR_VAR 0 14
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: LD_INT 5
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
// for i in tmp do
35499: LD_ADDR_VAR 0 8
35503: PUSH
35504: LD_VAR 0 14
35508: PUSH
35509: FOR_IN
35510: IFFALSE 35680
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35512: LD_ADDR_VAR 0 9
35516: PUSH
35517: LD_VAR 0 10
35521: PPUSH
35522: LD_VAR 0 8
35526: PPUSH
35527: LD_INT 5
35529: PPUSH
35530: CALL_OW 272
35534: PUSH
35535: LD_VAR 0 11
35539: PPUSH
35540: LD_VAR 0 8
35544: PPUSH
35545: LD_INT 5
35547: PPUSH
35548: CALL_OW 273
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35557: LD_VAR 0 9
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: LD_VAR 0 9
35570: PUSH
35571: LD_INT 2
35573: ARRAY
35574: PPUSH
35575: CALL_OW 488
35579: IFFALSE 35678
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35581: LD_ADDR_VAR 0 4
35585: PUSH
35586: LD_VAR 0 9
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PPUSH
35595: LD_VAR 0 9
35599: PUSH
35600: LD_INT 2
35602: ARRAY
35603: PPUSH
35604: CALL_OW 546
35608: ST_TO_ADDR
// if hex [ 1 ] then
35609: LD_VAR 0 4
35613: PUSH
35614: LD_INT 1
35616: ARRAY
35617: IFFALSE 35621
// continue ;
35619: GO 35509
// h := hex [ 2 ] ;
35621: LD_ADDR_VAR 0 13
35625: PUSH
35626: LD_VAR 0 4
35630: PUSH
35631: LD_INT 2
35633: ARRAY
35634: ST_TO_ADDR
// if h + 7 < height then
35635: LD_VAR 0 13
35639: PUSH
35640: LD_INT 7
35642: PLUS
35643: PUSH
35644: LD_VAR 0 15
35648: LESS
35649: IFFALSE 35678
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35651: LD_ADDR_VAR 0 18
35655: PUSH
35656: LD_INT 7
35658: PUSH
35659: LD_INT 28
35661: PUSH
35662: LD_INT 45
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: PUSH
35670: LD_VAR 0 12
35674: ARRAY
35675: ST_TO_ADDR
// break ;
35676: GO 35680
// end ; end ; end ;
35678: GO 35509
35680: POP
35681: POP
// end ; if not weapon then
35682: LD_VAR 0 18
35686: NOT
35687: IFFALSE 35747
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35689: LD_ADDR_VAR 0 5
35693: PUSH
35694: LD_VAR 0 5
35698: PUSH
35699: LD_INT 11
35701: PUSH
35702: LD_INT 30
35704: PUSH
35705: LD_INT 49
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: DIFF
35713: ST_TO_ADDR
// if not list then
35714: LD_VAR 0 5
35718: NOT
35719: IFFALSE 35723
// exit ;
35721: GO 35865
// weapon := list [ rand ( 1 , list ) ] ;
35723: LD_ADDR_VAR 0 18
35727: PUSH
35728: LD_VAR 0 5
35732: PUSH
35733: LD_INT 1
35735: PPUSH
35736: LD_VAR 0 5
35740: PPUSH
35741: CALL_OW 12
35745: ARRAY
35746: ST_TO_ADDR
// end ; if weapon then
35747: LD_VAR 0 18
35751: IFFALSE 35865
// begin tmp := CostOfWeapon ( weapon ) ;
35753: LD_ADDR_VAR 0 14
35757: PUSH
35758: LD_VAR 0 18
35762: PPUSH
35763: CALL_OW 451
35767: ST_TO_ADDR
// j := GetBase ( tower ) ;
35768: LD_ADDR_VAR 0 9
35772: PUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 274
35782: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35783: LD_VAR 0 9
35787: PPUSH
35788: LD_INT 1
35790: PPUSH
35791: CALL_OW 275
35795: PUSH
35796: LD_VAR 0 14
35800: PUSH
35801: LD_INT 1
35803: ARRAY
35804: GREATEREQUAL
35805: PUSH
35806: LD_VAR 0 9
35810: PPUSH
35811: LD_INT 2
35813: PPUSH
35814: CALL_OW 275
35818: PUSH
35819: LD_VAR 0 14
35823: PUSH
35824: LD_INT 2
35826: ARRAY
35827: GREATEREQUAL
35828: AND
35829: PUSH
35830: LD_VAR 0 9
35834: PPUSH
35835: LD_INT 3
35837: PPUSH
35838: CALL_OW 275
35842: PUSH
35843: LD_VAR 0 14
35847: PUSH
35848: LD_INT 3
35850: ARRAY
35851: GREATEREQUAL
35852: AND
35853: IFFALSE 35865
// result := weapon ;
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_VAR 0 18
35864: ST_TO_ADDR
// end ; end ;
35865: LD_VAR 0 3
35869: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35870: LD_INT 0
35872: PPUSH
35873: PPUSH
// result := true ;
35874: LD_ADDR_VAR 0 3
35878: PUSH
35879: LD_INT 1
35881: ST_TO_ADDR
// if array1 = array2 then
35882: LD_VAR 0 1
35886: PUSH
35887: LD_VAR 0 2
35891: EQUAL
35892: IFFALSE 35952
// begin for i = 1 to array1 do
35894: LD_ADDR_VAR 0 4
35898: PUSH
35899: DOUBLE
35900: LD_INT 1
35902: DEC
35903: ST_TO_ADDR
35904: LD_VAR 0 1
35908: PUSH
35909: FOR_TO
35910: IFFALSE 35948
// if array1 [ i ] <> array2 [ i ] then
35912: LD_VAR 0 1
35916: PUSH
35917: LD_VAR 0 4
35921: ARRAY
35922: PUSH
35923: LD_VAR 0 2
35927: PUSH
35928: LD_VAR 0 4
35932: ARRAY
35933: NONEQUAL
35934: IFFALSE 35946
// begin result := false ;
35936: LD_ADDR_VAR 0 3
35940: PUSH
35941: LD_INT 0
35943: ST_TO_ADDR
// break ;
35944: GO 35948
// end ;
35946: GO 35909
35948: POP
35949: POP
// end else
35950: GO 35960
// result := false ;
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 0
35959: ST_TO_ADDR
// end ;
35960: LD_VAR 0 3
35964: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35965: LD_INT 0
35967: PPUSH
35968: PPUSH
// if not array1 or not array2 then
35969: LD_VAR 0 1
35973: NOT
35974: PUSH
35975: LD_VAR 0 2
35979: NOT
35980: OR
35981: IFFALSE 35985
// exit ;
35983: GO 36049
// result := true ;
35985: LD_ADDR_VAR 0 3
35989: PUSH
35990: LD_INT 1
35992: ST_TO_ADDR
// for i = 1 to array1 do
35993: LD_ADDR_VAR 0 4
35997: PUSH
35998: DOUBLE
35999: LD_INT 1
36001: DEC
36002: ST_TO_ADDR
36003: LD_VAR 0 1
36007: PUSH
36008: FOR_TO
36009: IFFALSE 36047
// if array1 [ i ] <> array2 [ i ] then
36011: LD_VAR 0 1
36015: PUSH
36016: LD_VAR 0 4
36020: ARRAY
36021: PUSH
36022: LD_VAR 0 2
36026: PUSH
36027: LD_VAR 0 4
36031: ARRAY
36032: NONEQUAL
36033: IFFALSE 36045
// begin result := false ;
36035: LD_ADDR_VAR 0 3
36039: PUSH
36040: LD_INT 0
36042: ST_TO_ADDR
// break ;
36043: GO 36047
// end ;
36045: GO 36008
36047: POP
36048: POP
// end ;
36049: LD_VAR 0 3
36053: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36054: LD_INT 0
36056: PPUSH
36057: PPUSH
36058: PPUSH
// pom := GetBase ( fac ) ;
36059: LD_ADDR_VAR 0 5
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 274
36073: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36074: LD_ADDR_VAR 0 4
36078: PUSH
36079: LD_VAR 0 2
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: PPUSH
36088: LD_VAR 0 2
36092: PUSH
36093: LD_INT 2
36095: ARRAY
36096: PPUSH
36097: LD_VAR 0 2
36101: PUSH
36102: LD_INT 3
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 2
36110: PUSH
36111: LD_INT 4
36113: ARRAY
36114: PPUSH
36115: CALL_OW 449
36119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36120: LD_ADDR_VAR 0 3
36124: PUSH
36125: LD_VAR 0 5
36129: PPUSH
36130: LD_INT 1
36132: PPUSH
36133: CALL_OW 275
36137: PUSH
36138: LD_VAR 0 4
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: GREATEREQUAL
36147: PUSH
36148: LD_VAR 0 5
36152: PPUSH
36153: LD_INT 2
36155: PPUSH
36156: CALL_OW 275
36160: PUSH
36161: LD_VAR 0 4
36165: PUSH
36166: LD_INT 2
36168: ARRAY
36169: GREATEREQUAL
36170: AND
36171: PUSH
36172: LD_VAR 0 5
36176: PPUSH
36177: LD_INT 3
36179: PPUSH
36180: CALL_OW 275
36184: PUSH
36185: LD_VAR 0 4
36189: PUSH
36190: LD_INT 3
36192: ARRAY
36193: GREATEREQUAL
36194: AND
36195: ST_TO_ADDR
// end ;
36196: LD_VAR 0 3
36200: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36201: LD_INT 0
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
// pom := GetBase ( building ) ;
36207: LD_ADDR_VAR 0 3
36211: PUSH
36212: LD_VAR 0 1
36216: PPUSH
36217: CALL_OW 274
36221: ST_TO_ADDR
// if not pom then
36222: LD_VAR 0 3
36226: NOT
36227: IFFALSE 36231
// exit ;
36229: GO 36401
// btype := GetBType ( building ) ;
36231: LD_ADDR_VAR 0 5
36235: PUSH
36236: LD_VAR 0 1
36240: PPUSH
36241: CALL_OW 266
36245: ST_TO_ADDR
// if btype = b_armoury then
36246: LD_VAR 0 5
36250: PUSH
36251: LD_INT 4
36253: EQUAL
36254: IFFALSE 36264
// btype := b_barracks ;
36256: LD_ADDR_VAR 0 5
36260: PUSH
36261: LD_INT 5
36263: ST_TO_ADDR
// if btype = b_depot then
36264: LD_VAR 0 5
36268: PUSH
36269: LD_INT 0
36271: EQUAL
36272: IFFALSE 36282
// btype := b_warehouse ;
36274: LD_ADDR_VAR 0 5
36278: PUSH
36279: LD_INT 1
36281: ST_TO_ADDR
// if btype = b_workshop then
36282: LD_VAR 0 5
36286: PUSH
36287: LD_INT 2
36289: EQUAL
36290: IFFALSE 36300
// btype := b_factory ;
36292: LD_ADDR_VAR 0 5
36296: PUSH
36297: LD_INT 3
36299: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36300: LD_ADDR_VAR 0 4
36304: PUSH
36305: LD_VAR 0 5
36309: PPUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 248
36319: PPUSH
36320: CALL_OW 450
36324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36325: LD_ADDR_VAR 0 2
36329: PUSH
36330: LD_VAR 0 3
36334: PPUSH
36335: LD_INT 1
36337: PPUSH
36338: CALL_OW 275
36342: PUSH
36343: LD_VAR 0 4
36347: PUSH
36348: LD_INT 1
36350: ARRAY
36351: GREATEREQUAL
36352: PUSH
36353: LD_VAR 0 3
36357: PPUSH
36358: LD_INT 2
36360: PPUSH
36361: CALL_OW 275
36365: PUSH
36366: LD_VAR 0 4
36370: PUSH
36371: LD_INT 2
36373: ARRAY
36374: GREATEREQUAL
36375: AND
36376: PUSH
36377: LD_VAR 0 3
36381: PPUSH
36382: LD_INT 3
36384: PPUSH
36385: CALL_OW 275
36389: PUSH
36390: LD_VAR 0 4
36394: PUSH
36395: LD_INT 3
36397: ARRAY
36398: GREATEREQUAL
36399: AND
36400: ST_TO_ADDR
// end ;
36401: LD_VAR 0 2
36405: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36406: LD_INT 0
36408: PPUSH
36409: PPUSH
36410: PPUSH
// pom := GetBase ( building ) ;
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: LD_VAR 0 1
36420: PPUSH
36421: CALL_OW 274
36425: ST_TO_ADDR
// if not pom then
36426: LD_VAR 0 4
36430: NOT
36431: IFFALSE 36435
// exit ;
36433: GO 36536
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36435: LD_ADDR_VAR 0 5
36439: PUSH
36440: LD_VAR 0 2
36444: PPUSH
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 248
36454: PPUSH
36455: CALL_OW 450
36459: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36460: LD_ADDR_VAR 0 3
36464: PUSH
36465: LD_VAR 0 4
36469: PPUSH
36470: LD_INT 1
36472: PPUSH
36473: CALL_OW 275
36477: PUSH
36478: LD_VAR 0 5
36482: PUSH
36483: LD_INT 1
36485: ARRAY
36486: GREATEREQUAL
36487: PUSH
36488: LD_VAR 0 4
36492: PPUSH
36493: LD_INT 2
36495: PPUSH
36496: CALL_OW 275
36500: PUSH
36501: LD_VAR 0 5
36505: PUSH
36506: LD_INT 2
36508: ARRAY
36509: GREATEREQUAL
36510: AND
36511: PUSH
36512: LD_VAR 0 4
36516: PPUSH
36517: LD_INT 3
36519: PPUSH
36520: CALL_OW 275
36524: PUSH
36525: LD_VAR 0 5
36529: PUSH
36530: LD_INT 3
36532: ARRAY
36533: GREATEREQUAL
36534: AND
36535: ST_TO_ADDR
// end ;
36536: LD_VAR 0 3
36540: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36541: LD_INT 0
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
// result := false ;
36554: LD_ADDR_VAR 0 8
36558: PUSH
36559: LD_INT 0
36561: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36562: LD_VAR 0 5
36566: NOT
36567: PUSH
36568: LD_VAR 0 1
36572: NOT
36573: OR
36574: PUSH
36575: LD_VAR 0 2
36579: NOT
36580: OR
36581: PUSH
36582: LD_VAR 0 3
36586: NOT
36587: OR
36588: IFFALSE 36592
// exit ;
36590: GO 37406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36592: LD_ADDR_VAR 0 14
36596: PUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: LD_VAR 0 3
36611: PPUSH
36612: LD_VAR 0 4
36616: PPUSH
36617: LD_VAR 0 5
36621: PUSH
36622: LD_INT 1
36624: ARRAY
36625: PPUSH
36626: CALL_OW 248
36630: PPUSH
36631: LD_INT 0
36633: PPUSH
36634: CALL 38639 0 6
36638: ST_TO_ADDR
// if not hexes then
36639: LD_VAR 0 14
36643: NOT
36644: IFFALSE 36648
// exit ;
36646: GO 37406
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36648: LD_ADDR_VAR 0 17
36652: PUSH
36653: LD_VAR 0 5
36657: PPUSH
36658: LD_INT 22
36660: PUSH
36661: LD_VAR 0 13
36665: PPUSH
36666: CALL_OW 255
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 30
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 30
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 72
36711: ST_TO_ADDR
// for i = 1 to hexes do
36712: LD_ADDR_VAR 0 9
36716: PUSH
36717: DOUBLE
36718: LD_INT 1
36720: DEC
36721: ST_TO_ADDR
36722: LD_VAR 0 14
36726: PUSH
36727: FOR_TO
36728: IFFALSE 37404
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36730: LD_ADDR_VAR 0 13
36734: PUSH
36735: LD_VAR 0 14
36739: PUSH
36740: LD_VAR 0 9
36744: ARRAY
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: PPUSH
36750: LD_VAR 0 14
36754: PUSH
36755: LD_VAR 0 9
36759: ARRAY
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: PPUSH
36765: CALL_OW 428
36769: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36770: LD_VAR 0 14
36774: PUSH
36775: LD_VAR 0 9
36779: ARRAY
36780: PUSH
36781: LD_INT 1
36783: ARRAY
36784: PPUSH
36785: LD_VAR 0 14
36789: PUSH
36790: LD_VAR 0 9
36794: ARRAY
36795: PUSH
36796: LD_INT 2
36798: ARRAY
36799: PPUSH
36800: CALL_OW 351
36804: PUSH
36805: LD_VAR 0 14
36809: PUSH
36810: LD_VAR 0 9
36814: ARRAY
36815: PUSH
36816: LD_INT 1
36818: ARRAY
36819: PPUSH
36820: LD_VAR 0 14
36824: PUSH
36825: LD_VAR 0 9
36829: ARRAY
36830: PUSH
36831: LD_INT 2
36833: ARRAY
36834: PPUSH
36835: CALL_OW 488
36839: NOT
36840: OR
36841: PUSH
36842: LD_VAR 0 13
36846: PPUSH
36847: CALL_OW 247
36851: PUSH
36852: LD_INT 3
36854: EQUAL
36855: OR
36856: IFFALSE 36862
// exit ;
36858: POP
36859: POP
36860: GO 37406
// if not tmp then
36862: LD_VAR 0 13
36866: NOT
36867: IFFALSE 36871
// continue ;
36869: GO 36727
// result := true ;
36871: LD_ADDR_VAR 0 8
36875: PUSH
36876: LD_INT 1
36878: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36879: LD_VAR 0 6
36883: PUSH
36884: LD_VAR 0 13
36888: PPUSH
36889: CALL_OW 247
36893: PUSH
36894: LD_INT 2
36896: EQUAL
36897: AND
36898: PUSH
36899: LD_VAR 0 13
36903: PPUSH
36904: CALL_OW 263
36908: PUSH
36909: LD_INT 1
36911: EQUAL
36912: AND
36913: IFFALSE 37077
// begin if IsDrivenBy ( tmp ) then
36915: LD_VAR 0 13
36919: PPUSH
36920: CALL_OW 311
36924: IFFALSE 36928
// continue ;
36926: GO 36727
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36928: LD_VAR 0 6
36932: PPUSH
36933: LD_INT 3
36935: PUSH
36936: LD_INT 60
36938: PUSH
36939: EMPTY
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: LD_INT 55
36951: PUSH
36952: EMPTY
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PPUSH
36963: CALL_OW 72
36967: IFFALSE 37075
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36969: LD_ADDR_VAR 0 18
36973: PUSH
36974: LD_VAR 0 6
36978: PPUSH
36979: LD_INT 3
36981: PUSH
36982: LD_INT 60
36984: PUSH
36985: EMPTY
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: LD_INT 55
36997: PUSH
36998: EMPTY
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PPUSH
37009: CALL_OW 72
37013: PUSH
37014: LD_INT 1
37016: ARRAY
37017: ST_TO_ADDR
// if IsInUnit ( driver ) then
37018: LD_VAR 0 18
37022: PPUSH
37023: CALL_OW 310
37027: IFFALSE 37038
// ComExit ( driver ) ;
37029: LD_VAR 0 18
37033: PPUSH
37034: CALL 62419 0 1
// AddComEnterUnit ( driver , tmp ) ;
37038: LD_VAR 0 18
37042: PPUSH
37043: LD_VAR 0 13
37047: PPUSH
37048: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37052: LD_VAR 0 18
37056: PPUSH
37057: LD_VAR 0 7
37061: PPUSH
37062: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37066: LD_VAR 0 18
37070: PPUSH
37071: CALL_OW 181
// end ; continue ;
37075: GO 36727
// end ; if not cleaners or not tmp in cleaners then
37077: LD_VAR 0 6
37081: NOT
37082: PUSH
37083: LD_VAR 0 13
37087: PUSH
37088: LD_VAR 0 6
37092: IN
37093: NOT
37094: OR
37095: IFFALSE 37402
// begin if dep then
37097: LD_VAR 0 17
37101: IFFALSE 37237
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37103: LD_ADDR_VAR 0 16
37107: PUSH
37108: LD_VAR 0 17
37112: PUSH
37113: LD_INT 1
37115: ARRAY
37116: PPUSH
37117: CALL_OW 250
37121: PPUSH
37122: LD_VAR 0 17
37126: PUSH
37127: LD_INT 1
37129: ARRAY
37130: PPUSH
37131: CALL_OW 254
37135: PPUSH
37136: LD_INT 5
37138: PPUSH
37139: CALL_OW 272
37143: PUSH
37144: LD_VAR 0 17
37148: PUSH
37149: LD_INT 1
37151: ARRAY
37152: PPUSH
37153: CALL_OW 251
37157: PPUSH
37158: LD_VAR 0 17
37162: PUSH
37163: LD_INT 1
37165: ARRAY
37166: PPUSH
37167: CALL_OW 254
37171: PPUSH
37172: LD_INT 5
37174: PPUSH
37175: CALL_OW 273
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37184: LD_VAR 0 16
37188: PUSH
37189: LD_INT 1
37191: ARRAY
37192: PPUSH
37193: LD_VAR 0 16
37197: PUSH
37198: LD_INT 2
37200: ARRAY
37201: PPUSH
37202: CALL_OW 488
37206: IFFALSE 37237
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37208: LD_VAR 0 13
37212: PPUSH
37213: LD_VAR 0 16
37217: PUSH
37218: LD_INT 1
37220: ARRAY
37221: PPUSH
37222: LD_VAR 0 16
37226: PUSH
37227: LD_INT 2
37229: ARRAY
37230: PPUSH
37231: CALL_OW 111
// continue ;
37235: GO 36727
// end ; end ; r := GetDir ( tmp ) ;
37237: LD_ADDR_VAR 0 15
37241: PUSH
37242: LD_VAR 0 13
37246: PPUSH
37247: CALL_OW 254
37251: ST_TO_ADDR
// if r = 5 then
37252: LD_VAR 0 15
37256: PUSH
37257: LD_INT 5
37259: EQUAL
37260: IFFALSE 37270
// r := 0 ;
37262: LD_ADDR_VAR 0 15
37266: PUSH
37267: LD_INT 0
37269: ST_TO_ADDR
// for j = r to 5 do
37270: LD_ADDR_VAR 0 10
37274: PUSH
37275: DOUBLE
37276: LD_VAR 0 15
37280: DEC
37281: ST_TO_ADDR
37282: LD_INT 5
37284: PUSH
37285: FOR_TO
37286: IFFALSE 37400
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37288: LD_ADDR_VAR 0 11
37292: PUSH
37293: LD_VAR 0 13
37297: PPUSH
37298: CALL_OW 250
37302: PPUSH
37303: LD_VAR 0 10
37307: PPUSH
37308: LD_INT 2
37310: PPUSH
37311: CALL_OW 272
37315: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37316: LD_ADDR_VAR 0 12
37320: PUSH
37321: LD_VAR 0 13
37325: PPUSH
37326: CALL_OW 251
37330: PPUSH
37331: LD_VAR 0 10
37335: PPUSH
37336: LD_INT 2
37338: PPUSH
37339: CALL_OW 273
37343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37344: LD_VAR 0 11
37348: PPUSH
37349: LD_VAR 0 12
37353: PPUSH
37354: CALL_OW 488
37358: PUSH
37359: LD_VAR 0 11
37363: PPUSH
37364: LD_VAR 0 12
37368: PPUSH
37369: CALL_OW 428
37373: NOT
37374: AND
37375: IFFALSE 37398
// begin ComMoveXY ( tmp , _x , _y ) ;
37377: LD_VAR 0 13
37381: PPUSH
37382: LD_VAR 0 11
37386: PPUSH
37387: LD_VAR 0 12
37391: PPUSH
37392: CALL_OW 111
// break ;
37396: GO 37400
// end ; end ;
37398: GO 37285
37400: POP
37401: POP
// end ; end ;
37402: GO 36727
37404: POP
37405: POP
// end ;
37406: LD_VAR 0 8
37410: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37411: LD_INT 0
37413: PPUSH
// result := true ;
37414: LD_ADDR_VAR 0 3
37418: PUSH
37419: LD_INT 1
37421: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37422: LD_VAR 0 2
37426: PUSH
37427: LD_INT 24
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37441
37433: LD_INT 33
37435: DOUBLE
37436: EQUAL
37437: IFTRUE 37441
37439: GO 37466
37441: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37442: LD_ADDR_VAR 0 3
37446: PUSH
37447: LD_INT 32
37449: PPUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 321
37459: PUSH
37460: LD_INT 2
37462: EQUAL
37463: ST_TO_ADDR
37464: GO 37782
37466: LD_INT 20
37468: DOUBLE
37469: EQUAL
37470: IFTRUE 37474
37472: GO 37499
37474: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37475: LD_ADDR_VAR 0 3
37479: PUSH
37480: LD_INT 6
37482: PPUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 321
37492: PUSH
37493: LD_INT 2
37495: EQUAL
37496: ST_TO_ADDR
37497: GO 37782
37499: LD_INT 22
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37513
37505: LD_INT 36
37507: DOUBLE
37508: EQUAL
37509: IFTRUE 37513
37511: GO 37538
37513: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37514: LD_ADDR_VAR 0 3
37518: PUSH
37519: LD_INT 15
37521: PPUSH
37522: LD_VAR 0 1
37526: PPUSH
37527: CALL_OW 321
37531: PUSH
37532: LD_INT 2
37534: EQUAL
37535: ST_TO_ADDR
37536: GO 37782
37538: LD_INT 30
37540: DOUBLE
37541: EQUAL
37542: IFTRUE 37546
37544: GO 37571
37546: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37547: LD_ADDR_VAR 0 3
37551: PUSH
37552: LD_INT 20
37554: PPUSH
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 321
37564: PUSH
37565: LD_INT 2
37567: EQUAL
37568: ST_TO_ADDR
37569: GO 37782
37571: LD_INT 28
37573: DOUBLE
37574: EQUAL
37575: IFTRUE 37585
37577: LD_INT 21
37579: DOUBLE
37580: EQUAL
37581: IFTRUE 37585
37583: GO 37610
37585: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37586: LD_ADDR_VAR 0 3
37590: PUSH
37591: LD_INT 21
37593: PPUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 321
37603: PUSH
37604: LD_INT 2
37606: EQUAL
37607: ST_TO_ADDR
37608: GO 37782
37610: LD_INT 16
37612: DOUBLE
37613: EQUAL
37614: IFTRUE 37618
37616: GO 37643
37618: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37619: LD_ADDR_VAR 0 3
37623: PUSH
37624: LD_INT 84
37626: PPUSH
37627: LD_VAR 0 1
37631: PPUSH
37632: CALL_OW 321
37636: PUSH
37637: LD_INT 2
37639: EQUAL
37640: ST_TO_ADDR
37641: GO 37782
37643: LD_INT 19
37645: DOUBLE
37646: EQUAL
37647: IFTRUE 37657
37649: LD_INT 23
37651: DOUBLE
37652: EQUAL
37653: IFTRUE 37657
37655: GO 37682
37657: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37658: LD_ADDR_VAR 0 3
37662: PUSH
37663: LD_INT 83
37665: PPUSH
37666: LD_VAR 0 1
37670: PPUSH
37671: CALL_OW 321
37675: PUSH
37676: LD_INT 2
37678: EQUAL
37679: ST_TO_ADDR
37680: GO 37782
37682: LD_INT 17
37684: DOUBLE
37685: EQUAL
37686: IFTRUE 37690
37688: GO 37715
37690: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37691: LD_ADDR_VAR 0 3
37695: PUSH
37696: LD_INT 39
37698: PPUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 321
37708: PUSH
37709: LD_INT 2
37711: EQUAL
37712: ST_TO_ADDR
37713: GO 37782
37715: LD_INT 18
37717: DOUBLE
37718: EQUAL
37719: IFTRUE 37723
37721: GO 37748
37723: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37724: LD_ADDR_VAR 0 3
37728: PUSH
37729: LD_INT 40
37731: PPUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 321
37741: PUSH
37742: LD_INT 2
37744: EQUAL
37745: ST_TO_ADDR
37746: GO 37782
37748: LD_INT 27
37750: DOUBLE
37751: EQUAL
37752: IFTRUE 37756
37754: GO 37781
37756: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37757: LD_ADDR_VAR 0 3
37761: PUSH
37762: LD_INT 35
37764: PPUSH
37765: LD_VAR 0 1
37769: PPUSH
37770: CALL_OW 321
37774: PUSH
37775: LD_INT 2
37777: EQUAL
37778: ST_TO_ADDR
37779: GO 37782
37781: POP
// end ;
37782: LD_VAR 0 3
37786: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37787: LD_INT 0
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
37798: PPUSH
37799: PPUSH
// result := false ;
37800: LD_ADDR_VAR 0 6
37804: PUSH
37805: LD_INT 0
37807: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37808: LD_VAR 0 1
37812: NOT
37813: PUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 266
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: IN
37834: NOT
37835: OR
37836: PUSH
37837: LD_VAR 0 2
37841: NOT
37842: OR
37843: PUSH
37844: LD_VAR 0 5
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: LD_INT 4
37863: PUSH
37864: LD_INT 5
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: IN
37875: NOT
37876: OR
37877: PUSH
37878: LD_VAR 0 3
37882: PPUSH
37883: LD_VAR 0 4
37887: PPUSH
37888: CALL_OW 488
37892: NOT
37893: OR
37894: IFFALSE 37898
// exit ;
37896: GO 38634
// side := GetSide ( depot ) ;
37898: LD_ADDR_VAR 0 9
37902: PUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: CALL_OW 255
37912: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37913: LD_VAR 0 9
37917: PPUSH
37918: LD_VAR 0 2
37922: PPUSH
37923: CALL 37411 0 2
37927: NOT
37928: IFFALSE 37932
// exit ;
37930: GO 38634
// pom := GetBase ( depot ) ;
37932: LD_ADDR_VAR 0 10
37936: PUSH
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL_OW 274
37946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37947: LD_ADDR_VAR 0 11
37951: PUSH
37952: LD_VAR 0 2
37956: PPUSH
37957: LD_VAR 0 1
37961: PPUSH
37962: CALL_OW 248
37966: PPUSH
37967: CALL_OW 450
37971: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37972: LD_VAR 0 10
37976: PPUSH
37977: LD_INT 1
37979: PPUSH
37980: CALL_OW 275
37984: PUSH
37985: LD_VAR 0 11
37989: PUSH
37990: LD_INT 1
37992: ARRAY
37993: GREATEREQUAL
37994: PUSH
37995: LD_VAR 0 10
37999: PPUSH
38000: LD_INT 2
38002: PPUSH
38003: CALL_OW 275
38007: PUSH
38008: LD_VAR 0 11
38012: PUSH
38013: LD_INT 2
38015: ARRAY
38016: GREATEREQUAL
38017: AND
38018: PUSH
38019: LD_VAR 0 10
38023: PPUSH
38024: LD_INT 3
38026: PPUSH
38027: CALL_OW 275
38031: PUSH
38032: LD_VAR 0 11
38036: PUSH
38037: LD_INT 3
38039: ARRAY
38040: GREATEREQUAL
38041: AND
38042: NOT
38043: IFFALSE 38047
// exit ;
38045: GO 38634
// if GetBType ( depot ) = b_depot then
38047: LD_VAR 0 1
38051: PPUSH
38052: CALL_OW 266
38056: PUSH
38057: LD_INT 0
38059: EQUAL
38060: IFFALSE 38072
// dist := 28 else
38062: LD_ADDR_VAR 0 14
38066: PUSH
38067: LD_INT 28
38069: ST_TO_ADDR
38070: GO 38080
// dist := 36 ;
38072: LD_ADDR_VAR 0 14
38076: PUSH
38077: LD_INT 36
38079: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38080: LD_VAR 0 1
38084: PPUSH
38085: LD_VAR 0 3
38089: PPUSH
38090: LD_VAR 0 4
38094: PPUSH
38095: CALL_OW 297
38099: PUSH
38100: LD_VAR 0 14
38104: GREATER
38105: IFFALSE 38109
// exit ;
38107: GO 38634
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38109: LD_ADDR_VAR 0 12
38113: PUSH
38114: LD_VAR 0 2
38118: PPUSH
38119: LD_VAR 0 3
38123: PPUSH
38124: LD_VAR 0 4
38128: PPUSH
38129: LD_VAR 0 5
38133: PPUSH
38134: LD_VAR 0 1
38138: PPUSH
38139: CALL_OW 248
38143: PPUSH
38144: LD_INT 0
38146: PPUSH
38147: CALL 38639 0 6
38151: ST_TO_ADDR
// if not hexes then
38152: LD_VAR 0 12
38156: NOT
38157: IFFALSE 38161
// exit ;
38159: GO 38634
// hex := GetHexInfo ( x , y ) ;
38161: LD_ADDR_VAR 0 15
38165: PUSH
38166: LD_VAR 0 3
38170: PPUSH
38171: LD_VAR 0 4
38175: PPUSH
38176: CALL_OW 546
38180: ST_TO_ADDR
// if hex [ 1 ] then
38181: LD_VAR 0 15
38185: PUSH
38186: LD_INT 1
38188: ARRAY
38189: IFFALSE 38193
// exit ;
38191: GO 38634
// height := hex [ 2 ] ;
38193: LD_ADDR_VAR 0 13
38197: PUSH
38198: LD_VAR 0 15
38202: PUSH
38203: LD_INT 2
38205: ARRAY
38206: ST_TO_ADDR
// for i = 1 to hexes do
38207: LD_ADDR_VAR 0 7
38211: PUSH
38212: DOUBLE
38213: LD_INT 1
38215: DEC
38216: ST_TO_ADDR
38217: LD_VAR 0 12
38221: PUSH
38222: FOR_TO
38223: IFFALSE 38553
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38225: LD_VAR 0 12
38229: PUSH
38230: LD_VAR 0 7
38234: ARRAY
38235: PUSH
38236: LD_INT 1
38238: ARRAY
38239: PPUSH
38240: LD_VAR 0 12
38244: PUSH
38245: LD_VAR 0 7
38249: ARRAY
38250: PUSH
38251: LD_INT 2
38253: ARRAY
38254: PPUSH
38255: CALL_OW 488
38259: NOT
38260: PUSH
38261: LD_VAR 0 12
38265: PUSH
38266: LD_VAR 0 7
38270: ARRAY
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: PPUSH
38276: LD_VAR 0 12
38280: PUSH
38281: LD_VAR 0 7
38285: ARRAY
38286: PUSH
38287: LD_INT 2
38289: ARRAY
38290: PPUSH
38291: CALL_OW 428
38295: PUSH
38296: LD_INT 0
38298: GREATER
38299: OR
38300: PUSH
38301: LD_VAR 0 12
38305: PUSH
38306: LD_VAR 0 7
38310: ARRAY
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: PPUSH
38316: LD_VAR 0 12
38320: PUSH
38321: LD_VAR 0 7
38325: ARRAY
38326: PUSH
38327: LD_INT 2
38329: ARRAY
38330: PPUSH
38331: CALL_OW 351
38335: OR
38336: IFFALSE 38342
// exit ;
38338: POP
38339: POP
38340: GO 38634
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38342: LD_ADDR_VAR 0 8
38346: PUSH
38347: LD_VAR 0 12
38351: PUSH
38352: LD_VAR 0 7
38356: ARRAY
38357: PUSH
38358: LD_INT 1
38360: ARRAY
38361: PPUSH
38362: LD_VAR 0 12
38366: PUSH
38367: LD_VAR 0 7
38371: ARRAY
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: PPUSH
38377: CALL_OW 546
38381: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38382: LD_VAR 0 8
38386: PUSH
38387: LD_INT 1
38389: ARRAY
38390: PUSH
38391: LD_VAR 0 8
38395: PUSH
38396: LD_INT 2
38398: ARRAY
38399: PUSH
38400: LD_VAR 0 13
38404: PUSH
38405: LD_INT 2
38407: PLUS
38408: GREATER
38409: OR
38410: PUSH
38411: LD_VAR 0 8
38415: PUSH
38416: LD_INT 2
38418: ARRAY
38419: PUSH
38420: LD_VAR 0 13
38424: PUSH
38425: LD_INT 2
38427: MINUS
38428: LESS
38429: OR
38430: PUSH
38431: LD_VAR 0 8
38435: PUSH
38436: LD_INT 3
38438: ARRAY
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: LD_INT 8
38445: PUSH
38446: LD_INT 9
38448: PUSH
38449: LD_INT 10
38451: PUSH
38452: LD_INT 11
38454: PUSH
38455: LD_INT 12
38457: PUSH
38458: LD_INT 13
38460: PUSH
38461: LD_INT 16
38463: PUSH
38464: LD_INT 17
38466: PUSH
38467: LD_INT 18
38469: PUSH
38470: LD_INT 19
38472: PUSH
38473: LD_INT 20
38475: PUSH
38476: LD_INT 21
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: IN
38494: NOT
38495: OR
38496: PUSH
38497: LD_VAR 0 8
38501: PUSH
38502: LD_INT 5
38504: ARRAY
38505: NOT
38506: OR
38507: PUSH
38508: LD_VAR 0 8
38512: PUSH
38513: LD_INT 6
38515: ARRAY
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 7
38525: PUSH
38526: LD_INT 9
38528: PUSH
38529: LD_INT 10
38531: PUSH
38532: LD_INT 11
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: IN
38543: NOT
38544: OR
38545: IFFALSE 38551
// exit ;
38547: POP
38548: POP
38549: GO 38634
// end ;
38551: GO 38222
38553: POP
38554: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38555: LD_VAR 0 9
38559: PPUSH
38560: LD_VAR 0 3
38564: PPUSH
38565: LD_VAR 0 4
38569: PPUSH
38570: LD_INT 20
38572: PPUSH
38573: CALL 30586 0 4
38577: PUSH
38578: LD_INT 4
38580: ARRAY
38581: IFFALSE 38585
// exit ;
38583: GO 38634
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38585: LD_VAR 0 2
38589: PUSH
38590: LD_INT 29
38592: PUSH
38593: LD_INT 30
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: IN
38600: PUSH
38601: LD_VAR 0 3
38605: PPUSH
38606: LD_VAR 0 4
38610: PPUSH
38611: LD_VAR 0 9
38615: PPUSH
38616: CALL_OW 440
38620: NOT
38621: AND
38622: IFFALSE 38626
// exit ;
38624: GO 38634
// result := true ;
38626: LD_ADDR_VAR 0 6
38630: PUSH
38631: LD_INT 1
38633: ST_TO_ADDR
// end ;
38634: LD_VAR 0 6
38638: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38639: LD_INT 0
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
38668: PPUSH
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
// result = [ ] ;
38699: LD_ADDR_VAR 0 7
38703: PUSH
38704: EMPTY
38705: ST_TO_ADDR
// temp_list = [ ] ;
38706: LD_ADDR_VAR 0 9
38710: PUSH
38711: EMPTY
38712: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38713: LD_VAR 0 4
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 3
38729: PUSH
38730: LD_INT 4
38732: PUSH
38733: LD_INT 5
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: IN
38744: NOT
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: IN
38761: PUSH
38762: LD_VAR 0 5
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 3
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: IN
38781: NOT
38782: AND
38783: OR
38784: IFFALSE 38788
// exit ;
38786: GO 57179
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38788: LD_VAR 0 1
38792: PUSH
38793: LD_INT 6
38795: PUSH
38796: LD_INT 7
38798: PUSH
38799: LD_INT 8
38801: PUSH
38802: LD_INT 13
38804: PUSH
38805: LD_INT 12
38807: PUSH
38808: LD_INT 15
38810: PUSH
38811: LD_INT 11
38813: PUSH
38814: LD_INT 14
38816: PUSH
38817: LD_INT 10
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: IN
38831: IFFALSE 38841
// btype = b_lab ;
38833: LD_ADDR_VAR 0 1
38837: PUSH
38838: LD_INT 6
38840: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38841: LD_VAR 0 6
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: IN
38860: NOT
38861: PUSH
38862: LD_VAR 0 1
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: LD_INT 6
38881: PUSH
38882: LD_INT 36
38884: PUSH
38885: LD_INT 4
38887: PUSH
38888: LD_INT 5
38890: PUSH
38891: LD_INT 31
38893: PUSH
38894: LD_INT 32
38896: PUSH
38897: LD_INT 33
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: IN
38913: NOT
38914: PUSH
38915: LD_VAR 0 6
38919: PUSH
38920: LD_INT 1
38922: EQUAL
38923: AND
38924: OR
38925: PUSH
38926: LD_VAR 0 1
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: IN
38941: NOT
38942: PUSH
38943: LD_VAR 0 6
38947: PUSH
38948: LD_INT 2
38950: EQUAL
38951: AND
38952: OR
38953: IFFALSE 38963
// mode = 0 ;
38955: LD_ADDR_VAR 0 6
38959: PUSH
38960: LD_INT 0
38962: ST_TO_ADDR
// case mode of 0 :
38963: LD_VAR 0 6
38967: PUSH
38968: LD_INT 0
38970: DOUBLE
38971: EQUAL
38972: IFTRUE 38976
38974: GO 50429
38976: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38977: LD_ADDR_VAR 0 11
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39170: LD_ADDR_VAR 0 12
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 3
39327: NEG
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 3
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39366: LD_ADDR_VAR 0 13
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: LD_INT 3
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39565: LD_ADDR_VAR 0 14
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 3
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39761: LD_ADDR_VAR 0 15
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39954: LD_ADDR_VAR 0 16
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 2
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40147: LD_ADDR_VAR 0 17
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 2
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40377: LD_ADDR_VAR 0 18
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40607: LD_ADDR_VAR 0 19
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40837: LD_ADDR_VAR 0 20
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41067: LD_ADDR_VAR 0 21
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41297: LD_ADDR_VAR 0 22
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41527: LD_ADDR_VAR 0 23
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 3
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41807: LD_ADDR_VAR 0 24
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 2
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 2
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42083: LD_ADDR_VAR 0 25
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: LD_INT 2
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42357: LD_ADDR_VAR 0 26
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 3
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42633: LD_ADDR_VAR 0 27
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42913: LD_ADDR_VAR 0 28
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 3
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43195: LD_ADDR_VAR 0 29
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43474: LD_ADDR_VAR 0 30
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43752: LD_ADDR_VAR 0 31
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 3
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 3
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: NEG
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44030: LD_ADDR_VAR 0 32
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44308: LD_ADDR_VAR 0 33
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 2
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44587: LD_ADDR_VAR 0 34
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44867: LD_ADDR_VAR 0 35
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44979: LD_ADDR_VAR 0 36
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45091: LD_ADDR_VAR 0 37
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45203: LD_ADDR_VAR 0 38
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45315: LD_ADDR_VAR 0 39
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45427: LD_ADDR_VAR 0 40
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45539: LD_ADDR_VAR 0 41
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 3
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 3
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 3
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 3
45848: NEG
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45889: LD_ADDR_VAR 0 42
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 3
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46239: LD_ADDR_VAR 0 43
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46587: LD_ADDR_VAR 0 44
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 3
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46937: LD_ADDR_VAR 0 45
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 3
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 3
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 2
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47287: LD_ADDR_VAR 0 46
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47635: LD_ADDR_VAR 0 47
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47786: LD_ADDR_VAR 0 48
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47933: LD_ADDR_VAR 0 49
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48077: LD_ADDR_VAR 0 50
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48221: LD_ADDR_VAR 0 51
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48368: LD_ADDR_VAR 0 52
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 2
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48519: LD_ADDR_VAR 0 53
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48749: LD_ADDR_VAR 0 54
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48979: LD_ADDR_VAR 0 55
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49209: LD_ADDR_VAR 0 56
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49439: LD_ADDR_VAR 0 57
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49669: LD_ADDR_VAR 0 58
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49899: LD_ADDR_VAR 0 59
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49987: LD_ADDR_VAR 0 60
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50075: LD_ADDR_VAR 0 61
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50163: LD_ADDR_VAR 0 62
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50251: LD_ADDR_VAR 0 63
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50339: LD_ADDR_VAR 0 64
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// end ; 1 :
50427: GO 56324
50429: LD_INT 1
50431: DOUBLE
50432: EQUAL
50433: IFTRUE 50437
50435: GO 53060
50437: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50438: LD_ADDR_VAR 0 11
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50482: LD_ADDR_VAR 0 12
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50523: LD_ADDR_VAR 0 13
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50563: LD_ADDR_VAR 0 14
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50604: LD_ADDR_VAR 0 15
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50648: LD_ADDR_VAR 0 16
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 3
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50694: LD_ADDR_VAR 0 17
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 3
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50738: LD_ADDR_VAR 0 18
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50779: LD_ADDR_VAR 0 19
50783: PUSH
50784: LD_INT 3
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50819: LD_ADDR_VAR 0 20
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 3
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50860: LD_ADDR_VAR 0 21
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50904: LD_ADDR_VAR 0 22
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: NEG
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 3
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50950: LD_ADDR_VAR 0 23
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 4
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50994: LD_ADDR_VAR 0 24
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 4
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51035: LD_ADDR_VAR 0 25
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51075: LD_ADDR_VAR 0 26
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51116: LD_ADDR_VAR 0 27
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 4
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51160: LD_ADDR_VAR 0 28
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: LD_INT 4
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51206: LD_ADDR_VAR 0 29
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 4
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 4
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 5
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 5
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 4
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 6
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 6
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 5
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51361: LD_ADDR_VAR 0 30
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 4
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 5
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 5
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 5
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 6
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 6
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51504: LD_ADDR_VAR 0 31
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 4
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 4
51551: PUSH
51552: LD_INT 4
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: LD_INT 4
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 5
51581: PUSH
51582: LD_INT 5
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 4
51591: PUSH
51592: LD_INT 5
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 6
51601: PUSH
51602: LD_INT 5
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 6
51611: PUSH
51612: LD_INT 6
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 5
51621: PUSH
51622: LD_INT 6
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51643: LD_ADDR_VAR 0 32
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 5
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 5
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 6
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: LD_INT 6
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 5
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51786: LD_ADDR_VAR 0 33
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 3
51815: NEG
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 4
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 4
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 5
51872: NEG
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 5
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 5
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 6
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 6
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51941: LD_ADDR_VAR 0 34
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: LD_INT 4
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 4
51996: NEG
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 4
52008: NEG
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 4
52020: NEG
52021: PUSH
52022: LD_INT 5
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 5
52032: NEG
52033: PUSH
52034: LD_INT 4
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 5
52044: NEG
52045: PUSH
52046: LD_INT 5
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 5
52056: NEG
52057: PUSH
52058: LD_INT 6
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 6
52068: NEG
52069: PUSH
52070: LD_INT 5
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 6
52080: NEG
52081: PUSH
52082: LD_INT 6
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52104: LD_ADDR_VAR 0 41
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52148: LD_ADDR_VAR 0 42
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52189: LD_ADDR_VAR 0 43
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52229: LD_ADDR_VAR 0 44
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 3
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52270: LD_ADDR_VAR 0 45
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52314: LD_ADDR_VAR 0 46
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52360: LD_ADDR_VAR 0 47
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52393: LD_ADDR_VAR 0 48
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52424: LD_ADDR_VAR 0 49
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52453: LD_ADDR_VAR 0 50
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 3
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52482: LD_ADDR_VAR 0 51
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52513: LD_ADDR_VAR 0 52
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52546: LD_ADDR_VAR 0 53
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52590: LD_ADDR_VAR 0 54
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 3
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52631: LD_ADDR_VAR 0 55
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52671: LD_ADDR_VAR 0 56
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52712: LD_ADDR_VAR 0 57
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 3
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52756: LD_ADDR_VAR 0 58
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52802: LD_ADDR_VAR 0 59
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52846: LD_ADDR_VAR 0 60
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52887: LD_ADDR_VAR 0 61
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52927: LD_ADDR_VAR 0 62
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52968: LD_ADDR_VAR 0 63
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53012: LD_ADDR_VAR 0 64
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// end ; 2 :
53058: GO 56324
53060: LD_INT 2
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53068
53066: GO 56323
53068: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53069: LD_ADDR_VAR 0 29
53073: PUSH
53074: LD_INT 4
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 4
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 5
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 5
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: PUSH
53200: LD_INT 4
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: LD_INT 4
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 3
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: LD_INT 4
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 4
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 4
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 5
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 5
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 4
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 5
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 4
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 4
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: LD_INT 4
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 4
53466: NEG
53467: PUSH
53468: LD_INT 5
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: LD_INT 4
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 4
53502: NEG
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 5
53514: NEG
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 5
53526: NEG
53527: PUSH
53528: LD_INT 5
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 5
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 5
53550: NEG
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53607: LD_ADDR_VAR 0 30
53611: PUSH
53612: LD_INT 4
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 4
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 5
53634: PUSH
53635: LD_INT 4
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 5
53644: PUSH
53645: LD_INT 5
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 4
53654: PUSH
53655: LD_INT 5
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 3
53664: PUSH
53665: LD_INT 4
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: LD_INT 3
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 5
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 4
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 4
53797: NEG
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 4
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 4
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 5
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 5
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 5
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: LD_INT 4
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 4
53959: NEG
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 4
53971: NEG
53972: PUSH
53973: LD_INT 4
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: LD_INT 4
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 4
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 5
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 4
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 5
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54154: LD_ADDR_VAR 0 31
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 4
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 5
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 4
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 5
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 3
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 4
54310: NEG
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 4
54321: NEG
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 4
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 4
54356: NEG
54357: PUSH
54358: LD_INT 4
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 4
54368: NEG
54369: PUSH
54370: LD_INT 5
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: LD_INT 4
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 4
54404: NEG
54405: PUSH
54406: LD_INT 3
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 5
54416: NEG
54417: PUSH
54418: LD_INT 4
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 5
54428: NEG
54429: PUSH
54430: LD_INT 5
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: LD_INT 5
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 5
54452: NEG
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 3
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 4
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 3
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 3
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 4
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 4
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 4
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 5
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 5
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 4
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 5
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54704: LD_ADDR_VAR 0 32
54708: PUSH
54709: LD_INT 4
54711: NEG
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 4
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 4
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 5
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 5
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 5
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: NEG
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: LD_INT 4
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 4
54873: NEG
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 4
54885: NEG
54886: PUSH
54887: LD_INT 4
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 4
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 4
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 5
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 4
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 4
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 4
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 4
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 4
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 4
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 5
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 5
55146: PUSH
55147: LD_INT 5
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: PUSH
55157: LD_INT 5
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 4
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 5
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 5
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55251: LD_ADDR_VAR 0 33
55255: PUSH
55256: LD_INT 4
55258: NEG
55259: PUSH
55260: LD_INT 4
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: LD_INT 5
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 4
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: NEG
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 4
55306: NEG
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 5
55318: NEG
55319: PUSH
55320: LD_INT 4
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 5
55330: NEG
55331: PUSH
55332: LD_INT 5
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: LD_INT 5
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 5
55354: NEG
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 4
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 3
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 4
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 4
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 5
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 4
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: LD_INT 2
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 4
55591: PUSH
55592: LD_INT 4
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: PUSH
55602: LD_INT 4
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 4
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 4
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 5
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 5
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 5
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55789: LD_ADDR_VAR 0 34
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 4
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 4
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 3
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 5
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 5
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 4
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 4
55991: PUSH
55992: LD_INT 4
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 5
56011: PUSH
56012: LD_INT 4
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 5
56021: PUSH
56022: LD_INT 5
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: PUSH
56032: LD_INT 5
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 5
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 5
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 4
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 4
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 4
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 4
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 5
56230: NEG
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 5
56253: NEG
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// end ; end ;
56321: GO 56324
56323: POP
// case btype of b_depot , b_warehouse :
56324: LD_VAR 0 1
56328: PUSH
56329: LD_INT 0
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56343
56335: LD_INT 1
56337: DOUBLE
56338: EQUAL
56339: IFTRUE 56343
56341: GO 56544
56343: POP
// case nation of nation_american :
56344: LD_VAR 0 5
56348: PUSH
56349: LD_INT 1
56351: DOUBLE
56352: EQUAL
56353: IFTRUE 56357
56355: GO 56413
56357: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56358: LD_ADDR_VAR 0 9
56362: PUSH
56363: LD_VAR 0 11
56367: PUSH
56368: LD_VAR 0 12
56372: PUSH
56373: LD_VAR 0 13
56377: PUSH
56378: LD_VAR 0 14
56382: PUSH
56383: LD_VAR 0 15
56387: PUSH
56388: LD_VAR 0 16
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: PUSH
56401: LD_VAR 0 4
56405: PUSH
56406: LD_INT 1
56408: PLUS
56409: ARRAY
56410: ST_TO_ADDR
56411: GO 56542
56413: LD_INT 2
56415: DOUBLE
56416: EQUAL
56417: IFTRUE 56421
56419: GO 56477
56421: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56422: LD_ADDR_VAR 0 9
56426: PUSH
56427: LD_VAR 0 17
56431: PUSH
56432: LD_VAR 0 18
56436: PUSH
56437: LD_VAR 0 19
56441: PUSH
56442: LD_VAR 0 20
56446: PUSH
56447: LD_VAR 0 21
56451: PUSH
56452: LD_VAR 0 22
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: PUSH
56465: LD_VAR 0 4
56469: PUSH
56470: LD_INT 1
56472: PLUS
56473: ARRAY
56474: ST_TO_ADDR
56475: GO 56542
56477: LD_INT 3
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56485
56483: GO 56541
56485: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56486: LD_ADDR_VAR 0 9
56490: PUSH
56491: LD_VAR 0 23
56495: PUSH
56496: LD_VAR 0 24
56500: PUSH
56501: LD_VAR 0 25
56505: PUSH
56506: LD_VAR 0 26
56510: PUSH
56511: LD_VAR 0 27
56515: PUSH
56516: LD_VAR 0 28
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: PUSH
56529: LD_VAR 0 4
56533: PUSH
56534: LD_INT 1
56536: PLUS
56537: ARRAY
56538: ST_TO_ADDR
56539: GO 56542
56541: POP
56542: GO 57097
56544: LD_INT 2
56546: DOUBLE
56547: EQUAL
56548: IFTRUE 56558
56550: LD_INT 3
56552: DOUBLE
56553: EQUAL
56554: IFTRUE 56558
56556: GO 56614
56558: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56559: LD_ADDR_VAR 0 9
56563: PUSH
56564: LD_VAR 0 29
56568: PUSH
56569: LD_VAR 0 30
56573: PUSH
56574: LD_VAR 0 31
56578: PUSH
56579: LD_VAR 0 32
56583: PUSH
56584: LD_VAR 0 33
56588: PUSH
56589: LD_VAR 0 34
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: PUSH
56602: LD_VAR 0 4
56606: PUSH
56607: LD_INT 1
56609: PLUS
56610: ARRAY
56611: ST_TO_ADDR
56612: GO 57097
56614: LD_INT 16
56616: DOUBLE
56617: EQUAL
56618: IFTRUE 56676
56620: LD_INT 17
56622: DOUBLE
56623: EQUAL
56624: IFTRUE 56676
56626: LD_INT 18
56628: DOUBLE
56629: EQUAL
56630: IFTRUE 56676
56632: LD_INT 19
56634: DOUBLE
56635: EQUAL
56636: IFTRUE 56676
56638: LD_INT 22
56640: DOUBLE
56641: EQUAL
56642: IFTRUE 56676
56644: LD_INT 20
56646: DOUBLE
56647: EQUAL
56648: IFTRUE 56676
56650: LD_INT 21
56652: DOUBLE
56653: EQUAL
56654: IFTRUE 56676
56656: LD_INT 23
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56676
56662: LD_INT 24
56664: DOUBLE
56665: EQUAL
56666: IFTRUE 56676
56668: LD_INT 25
56670: DOUBLE
56671: EQUAL
56672: IFTRUE 56676
56674: GO 56732
56676: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56677: LD_ADDR_VAR 0 9
56681: PUSH
56682: LD_VAR 0 35
56686: PUSH
56687: LD_VAR 0 36
56691: PUSH
56692: LD_VAR 0 37
56696: PUSH
56697: LD_VAR 0 38
56701: PUSH
56702: LD_VAR 0 39
56706: PUSH
56707: LD_VAR 0 40
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: PUSH
56720: LD_VAR 0 4
56724: PUSH
56725: LD_INT 1
56727: PLUS
56728: ARRAY
56729: ST_TO_ADDR
56730: GO 57097
56732: LD_INT 6
56734: DOUBLE
56735: EQUAL
56736: IFTRUE 56788
56738: LD_INT 7
56740: DOUBLE
56741: EQUAL
56742: IFTRUE 56788
56744: LD_INT 8
56746: DOUBLE
56747: EQUAL
56748: IFTRUE 56788
56750: LD_INT 13
56752: DOUBLE
56753: EQUAL
56754: IFTRUE 56788
56756: LD_INT 12
56758: DOUBLE
56759: EQUAL
56760: IFTRUE 56788
56762: LD_INT 15
56764: DOUBLE
56765: EQUAL
56766: IFTRUE 56788
56768: LD_INT 11
56770: DOUBLE
56771: EQUAL
56772: IFTRUE 56788
56774: LD_INT 14
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56788
56780: LD_INT 10
56782: DOUBLE
56783: EQUAL
56784: IFTRUE 56788
56786: GO 56844
56788: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56789: LD_ADDR_VAR 0 9
56793: PUSH
56794: LD_VAR 0 41
56798: PUSH
56799: LD_VAR 0 42
56803: PUSH
56804: LD_VAR 0 43
56808: PUSH
56809: LD_VAR 0 44
56813: PUSH
56814: LD_VAR 0 45
56818: PUSH
56819: LD_VAR 0 46
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: PUSH
56832: LD_VAR 0 4
56836: PUSH
56837: LD_INT 1
56839: PLUS
56840: ARRAY
56841: ST_TO_ADDR
56842: GO 57097
56844: LD_INT 36
56846: DOUBLE
56847: EQUAL
56848: IFTRUE 56852
56850: GO 56908
56852: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56853: LD_ADDR_VAR 0 9
56857: PUSH
56858: LD_VAR 0 47
56862: PUSH
56863: LD_VAR 0 48
56867: PUSH
56868: LD_VAR 0 49
56872: PUSH
56873: LD_VAR 0 50
56877: PUSH
56878: LD_VAR 0 51
56882: PUSH
56883: LD_VAR 0 52
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: PUSH
56896: LD_VAR 0 4
56900: PUSH
56901: LD_INT 1
56903: PLUS
56904: ARRAY
56905: ST_TO_ADDR
56906: GO 57097
56908: LD_INT 4
56910: DOUBLE
56911: EQUAL
56912: IFTRUE 56934
56914: LD_INT 5
56916: DOUBLE
56917: EQUAL
56918: IFTRUE 56934
56920: LD_INT 34
56922: DOUBLE
56923: EQUAL
56924: IFTRUE 56934
56926: LD_INT 37
56928: DOUBLE
56929: EQUAL
56930: IFTRUE 56934
56932: GO 56990
56934: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56935: LD_ADDR_VAR 0 9
56939: PUSH
56940: LD_VAR 0 53
56944: PUSH
56945: LD_VAR 0 54
56949: PUSH
56950: LD_VAR 0 55
56954: PUSH
56955: LD_VAR 0 56
56959: PUSH
56960: LD_VAR 0 57
56964: PUSH
56965: LD_VAR 0 58
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: PUSH
56978: LD_VAR 0 4
56982: PUSH
56983: LD_INT 1
56985: PLUS
56986: ARRAY
56987: ST_TO_ADDR
56988: GO 57097
56990: LD_INT 31
56992: DOUBLE
56993: EQUAL
56994: IFTRUE 57040
56996: LD_INT 32
56998: DOUBLE
56999: EQUAL
57000: IFTRUE 57040
57002: LD_INT 33
57004: DOUBLE
57005: EQUAL
57006: IFTRUE 57040
57008: LD_INT 27
57010: DOUBLE
57011: EQUAL
57012: IFTRUE 57040
57014: LD_INT 26
57016: DOUBLE
57017: EQUAL
57018: IFTRUE 57040
57020: LD_INT 28
57022: DOUBLE
57023: EQUAL
57024: IFTRUE 57040
57026: LD_INT 29
57028: DOUBLE
57029: EQUAL
57030: IFTRUE 57040
57032: LD_INT 30
57034: DOUBLE
57035: EQUAL
57036: IFTRUE 57040
57038: GO 57096
57040: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57041: LD_ADDR_VAR 0 9
57045: PUSH
57046: LD_VAR 0 59
57050: PUSH
57051: LD_VAR 0 60
57055: PUSH
57056: LD_VAR 0 61
57060: PUSH
57061: LD_VAR 0 62
57065: PUSH
57066: LD_VAR 0 63
57070: PUSH
57071: LD_VAR 0 64
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: PUSH
57084: LD_VAR 0 4
57088: PUSH
57089: LD_INT 1
57091: PLUS
57092: ARRAY
57093: ST_TO_ADDR
57094: GO 57097
57096: POP
// temp_list2 = [ ] ;
57097: LD_ADDR_VAR 0 10
57101: PUSH
57102: EMPTY
57103: ST_TO_ADDR
// for i in temp_list do
57104: LD_ADDR_VAR 0 8
57108: PUSH
57109: LD_VAR 0 9
57113: PUSH
57114: FOR_IN
57115: IFFALSE 57167
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57117: LD_ADDR_VAR 0 10
57121: PUSH
57122: LD_VAR 0 10
57126: PUSH
57127: LD_VAR 0 8
57131: PUSH
57132: LD_INT 1
57134: ARRAY
57135: PUSH
57136: LD_VAR 0 2
57140: PLUS
57141: PUSH
57142: LD_VAR 0 8
57146: PUSH
57147: LD_INT 2
57149: ARRAY
57150: PUSH
57151: LD_VAR 0 3
57155: PLUS
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: ADD
57164: ST_TO_ADDR
57165: GO 57114
57167: POP
57168: POP
// result = temp_list2 ;
57169: LD_ADDR_VAR 0 7
57173: PUSH
57174: LD_VAR 0 10
57178: ST_TO_ADDR
// end ;
57179: LD_VAR 0 7
57183: RET
// export function EnemyInRange ( unit , dist ) ; begin
57184: LD_INT 0
57186: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57187: LD_ADDR_VAR 0 3
57191: PUSH
57192: LD_VAR 0 1
57196: PPUSH
57197: CALL_OW 255
57201: PPUSH
57202: LD_VAR 0 1
57206: PPUSH
57207: CALL_OW 250
57211: PPUSH
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL_OW 251
57221: PPUSH
57222: LD_VAR 0 2
57226: PPUSH
57227: CALL 30586 0 4
57231: PUSH
57232: LD_INT 4
57234: ARRAY
57235: ST_TO_ADDR
// end ;
57236: LD_VAR 0 3
57240: RET
// export function PlayerSeeMe ( unit ) ; begin
57241: LD_INT 0
57243: PPUSH
// result := See ( your_side , unit ) ;
57244: LD_ADDR_VAR 0 2
57248: PUSH
57249: LD_OWVAR 2
57253: PPUSH
57254: LD_VAR 0 1
57258: PPUSH
57259: CALL_OW 292
57263: ST_TO_ADDR
// end ;
57264: LD_VAR 0 2
57268: RET
// export function ReverseDir ( unit ) ; begin
57269: LD_INT 0
57271: PPUSH
// if not unit then
57272: LD_VAR 0 1
57276: NOT
57277: IFFALSE 57281
// exit ;
57279: GO 57304
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57281: LD_ADDR_VAR 0 2
57285: PUSH
57286: LD_VAR 0 1
57290: PPUSH
57291: CALL_OW 254
57295: PUSH
57296: LD_INT 3
57298: PLUS
57299: PUSH
57300: LD_INT 6
57302: MOD
57303: ST_TO_ADDR
// end ;
57304: LD_VAR 0 2
57308: RET
// export function ReverseArray ( array ) ; var i ; begin
57309: LD_INT 0
57311: PPUSH
57312: PPUSH
// if not array then
57313: LD_VAR 0 1
57317: NOT
57318: IFFALSE 57322
// exit ;
57320: GO 57377
// result := [ ] ;
57322: LD_ADDR_VAR 0 2
57326: PUSH
57327: EMPTY
57328: ST_TO_ADDR
// for i := array downto 1 do
57329: LD_ADDR_VAR 0 3
57333: PUSH
57334: DOUBLE
57335: LD_VAR 0 1
57339: INC
57340: ST_TO_ADDR
57341: LD_INT 1
57343: PUSH
57344: FOR_DOWNTO
57345: IFFALSE 57375
// result := Join ( result , array [ i ] ) ;
57347: LD_ADDR_VAR 0 2
57351: PUSH
57352: LD_VAR 0 2
57356: PPUSH
57357: LD_VAR 0 1
57361: PUSH
57362: LD_VAR 0 3
57366: ARRAY
57367: PPUSH
57368: CALL 62021 0 2
57372: ST_TO_ADDR
57373: GO 57344
57375: POP
57376: POP
// end ;
57377: LD_VAR 0 2
57381: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57382: LD_INT 0
57384: PPUSH
57385: PPUSH
57386: PPUSH
57387: PPUSH
57388: PPUSH
57389: PPUSH
// if not unit or not hexes then
57390: LD_VAR 0 1
57394: NOT
57395: PUSH
57396: LD_VAR 0 2
57400: NOT
57401: OR
57402: IFFALSE 57406
// exit ;
57404: GO 57529
// dist := 9999 ;
57406: LD_ADDR_VAR 0 5
57410: PUSH
57411: LD_INT 9999
57413: ST_TO_ADDR
// for i = 1 to hexes do
57414: LD_ADDR_VAR 0 4
57418: PUSH
57419: DOUBLE
57420: LD_INT 1
57422: DEC
57423: ST_TO_ADDR
57424: LD_VAR 0 2
57428: PUSH
57429: FOR_TO
57430: IFFALSE 57517
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57432: LD_ADDR_VAR 0 6
57436: PUSH
57437: LD_VAR 0 1
57441: PPUSH
57442: LD_VAR 0 2
57446: PUSH
57447: LD_VAR 0 4
57451: ARRAY
57452: PUSH
57453: LD_INT 1
57455: ARRAY
57456: PPUSH
57457: LD_VAR 0 2
57461: PUSH
57462: LD_VAR 0 4
57466: ARRAY
57467: PUSH
57468: LD_INT 2
57470: ARRAY
57471: PPUSH
57472: CALL_OW 297
57476: ST_TO_ADDR
// if tdist < dist then
57477: LD_VAR 0 6
57481: PUSH
57482: LD_VAR 0 5
57486: LESS
57487: IFFALSE 57515
// begin hex := hexes [ i ] ;
57489: LD_ADDR_VAR 0 8
57493: PUSH
57494: LD_VAR 0 2
57498: PUSH
57499: LD_VAR 0 4
57503: ARRAY
57504: ST_TO_ADDR
// dist := tdist ;
57505: LD_ADDR_VAR 0 5
57509: PUSH
57510: LD_VAR 0 6
57514: ST_TO_ADDR
// end ; end ;
57515: GO 57429
57517: POP
57518: POP
// result := hex ;
57519: LD_ADDR_VAR 0 3
57523: PUSH
57524: LD_VAR 0 8
57528: ST_TO_ADDR
// end ;
57529: LD_VAR 0 3
57533: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57534: LD_INT 0
57536: PPUSH
57537: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57538: LD_VAR 0 1
57542: NOT
57543: PUSH
57544: LD_VAR 0 1
57548: PUSH
57549: LD_INT 21
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 23
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PPUSH
57573: CALL_OW 69
57577: IN
57578: NOT
57579: OR
57580: IFFALSE 57584
// exit ;
57582: GO 57631
// for i = 1 to 3 do
57584: LD_ADDR_VAR 0 3
57588: PUSH
57589: DOUBLE
57590: LD_INT 1
57592: DEC
57593: ST_TO_ADDR
57594: LD_INT 3
57596: PUSH
57597: FOR_TO
57598: IFFALSE 57629
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57600: LD_VAR 0 1
57604: PPUSH
57605: CALL_OW 250
57609: PPUSH
57610: LD_VAR 0 1
57614: PPUSH
57615: CALL_OW 251
57619: PPUSH
57620: LD_INT 1
57622: PPUSH
57623: CALL_OW 453
57627: GO 57597
57629: POP
57630: POP
// end ;
57631: LD_VAR 0 2
57635: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57636: LD_INT 0
57638: PPUSH
57639: PPUSH
57640: PPUSH
57641: PPUSH
57642: PPUSH
57643: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57644: LD_VAR 0 1
57648: NOT
57649: PUSH
57650: LD_VAR 0 2
57654: NOT
57655: OR
57656: PUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: CALL_OW 314
57666: OR
57667: IFFALSE 57671
// exit ;
57669: GO 58138
// if GetLives ( i ) < 250 then
57671: LD_VAR 0 4
57675: PPUSH
57676: CALL_OW 256
57680: PUSH
57681: LD_INT 250
57683: LESS
57684: IFFALSE 57697
// begin ComAutodestruct ( i ) ;
57686: LD_VAR 0 4
57690: PPUSH
57691: CALL 57534 0 1
// exit ;
57695: GO 58138
// end ; x := GetX ( enemy_unit ) ;
57697: LD_ADDR_VAR 0 7
57701: PUSH
57702: LD_VAR 0 2
57706: PPUSH
57707: CALL_OW 250
57711: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57712: LD_ADDR_VAR 0 8
57716: PUSH
57717: LD_VAR 0 2
57721: PPUSH
57722: CALL_OW 251
57726: ST_TO_ADDR
// if not x or not y then
57727: LD_VAR 0 7
57731: NOT
57732: PUSH
57733: LD_VAR 0 8
57737: NOT
57738: OR
57739: IFFALSE 57743
// exit ;
57741: GO 58138
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57743: LD_ADDR_VAR 0 6
57747: PUSH
57748: LD_VAR 0 7
57752: PPUSH
57753: LD_INT 0
57755: PPUSH
57756: LD_INT 4
57758: PPUSH
57759: CALL_OW 272
57763: PUSH
57764: LD_VAR 0 8
57768: PPUSH
57769: LD_INT 0
57771: PPUSH
57772: LD_INT 4
57774: PPUSH
57775: CALL_OW 273
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_VAR 0 7
57788: PPUSH
57789: LD_INT 1
57791: PPUSH
57792: LD_INT 4
57794: PPUSH
57795: CALL_OW 272
57799: PUSH
57800: LD_VAR 0 8
57804: PPUSH
57805: LD_INT 1
57807: PPUSH
57808: LD_INT 4
57810: PPUSH
57811: CALL_OW 273
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 7
57824: PPUSH
57825: LD_INT 2
57827: PPUSH
57828: LD_INT 4
57830: PPUSH
57831: CALL_OW 272
57835: PUSH
57836: LD_VAR 0 8
57840: PPUSH
57841: LD_INT 2
57843: PPUSH
57844: LD_INT 4
57846: PPUSH
57847: CALL_OW 273
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_VAR 0 7
57860: PPUSH
57861: LD_INT 3
57863: PPUSH
57864: LD_INT 4
57866: PPUSH
57867: CALL_OW 272
57871: PUSH
57872: LD_VAR 0 8
57876: PPUSH
57877: LD_INT 3
57879: PPUSH
57880: LD_INT 4
57882: PPUSH
57883: CALL_OW 273
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_VAR 0 7
57896: PPUSH
57897: LD_INT 4
57899: PPUSH
57900: LD_INT 4
57902: PPUSH
57903: CALL_OW 272
57907: PUSH
57908: LD_VAR 0 8
57912: PPUSH
57913: LD_INT 4
57915: PPUSH
57916: LD_INT 4
57918: PPUSH
57919: CALL_OW 273
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_VAR 0 7
57932: PPUSH
57933: LD_INT 5
57935: PPUSH
57936: LD_INT 4
57938: PPUSH
57939: CALL_OW 272
57943: PUSH
57944: LD_VAR 0 8
57948: PPUSH
57949: LD_INT 5
57951: PPUSH
57952: LD_INT 4
57954: PPUSH
57955: CALL_OW 273
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: ST_TO_ADDR
// for i = tmp downto 1 do
57972: LD_ADDR_VAR 0 4
57976: PUSH
57977: DOUBLE
57978: LD_VAR 0 6
57982: INC
57983: ST_TO_ADDR
57984: LD_INT 1
57986: PUSH
57987: FOR_DOWNTO
57988: IFFALSE 58089
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57990: LD_VAR 0 6
57994: PUSH
57995: LD_VAR 0 4
57999: ARRAY
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: PPUSH
58005: LD_VAR 0 6
58009: PUSH
58010: LD_VAR 0 4
58014: ARRAY
58015: PUSH
58016: LD_INT 2
58018: ARRAY
58019: PPUSH
58020: CALL_OW 488
58024: NOT
58025: PUSH
58026: LD_VAR 0 6
58030: PUSH
58031: LD_VAR 0 4
58035: ARRAY
58036: PUSH
58037: LD_INT 1
58039: ARRAY
58040: PPUSH
58041: LD_VAR 0 6
58045: PUSH
58046: LD_VAR 0 4
58050: ARRAY
58051: PUSH
58052: LD_INT 2
58054: ARRAY
58055: PPUSH
58056: CALL_OW 428
58060: PUSH
58061: LD_INT 0
58063: NONEQUAL
58064: OR
58065: IFFALSE 58087
// tmp := Delete ( tmp , i ) ;
58067: LD_ADDR_VAR 0 6
58071: PUSH
58072: LD_VAR 0 6
58076: PPUSH
58077: LD_VAR 0 4
58081: PPUSH
58082: CALL_OW 3
58086: ST_TO_ADDR
58087: GO 57987
58089: POP
58090: POP
// j := GetClosestHex ( unit , tmp ) ;
58091: LD_ADDR_VAR 0 5
58095: PUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: LD_VAR 0 6
58105: PPUSH
58106: CALL 57382 0 2
58110: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58111: LD_VAR 0 1
58115: PPUSH
58116: LD_VAR 0 5
58120: PUSH
58121: LD_INT 1
58123: ARRAY
58124: PPUSH
58125: LD_VAR 0 5
58129: PUSH
58130: LD_INT 2
58132: ARRAY
58133: PPUSH
58134: CALL_OW 111
// end ;
58138: LD_VAR 0 3
58142: RET
// export function PrepareApemanSoldier ( ) ; begin
58143: LD_INT 0
58145: PPUSH
// uc_nation := 0 ;
58146: LD_ADDR_OWVAR 21
58150: PUSH
58151: LD_INT 0
58153: ST_TO_ADDR
// hc_sex := sex_male ;
58154: LD_ADDR_OWVAR 27
58158: PUSH
58159: LD_INT 1
58161: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58162: LD_ADDR_OWVAR 28
58166: PUSH
58167: LD_INT 15
58169: ST_TO_ADDR
// hc_gallery :=  ;
58170: LD_ADDR_OWVAR 33
58174: PUSH
58175: LD_STRING 
58177: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58178: LD_ADDR_OWVAR 31
58182: PUSH
58183: LD_INT 0
58185: PPUSH
58186: LD_INT 3
58188: PPUSH
58189: CALL_OW 12
58193: PUSH
58194: LD_INT 0
58196: PPUSH
58197: LD_INT 3
58199: PPUSH
58200: CALL_OW 12
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// end ;
58217: LD_VAR 0 1
58221: RET
// export function PrepareApemanEngineer ( ) ; begin
58222: LD_INT 0
58224: PPUSH
// uc_nation := 0 ;
58225: LD_ADDR_OWVAR 21
58229: PUSH
58230: LD_INT 0
58232: ST_TO_ADDR
// hc_sex := sex_male ;
58233: LD_ADDR_OWVAR 27
58237: PUSH
58238: LD_INT 1
58240: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58241: LD_ADDR_OWVAR 28
58245: PUSH
58246: LD_INT 16
58248: ST_TO_ADDR
// hc_gallery :=  ;
58249: LD_ADDR_OWVAR 33
58253: PUSH
58254: LD_STRING 
58256: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58257: LD_ADDR_OWVAR 31
58261: PUSH
58262: LD_INT 0
58264: PPUSH
58265: LD_INT 3
58267: PPUSH
58268: CALL_OW 12
58272: PUSH
58273: LD_INT 0
58275: PPUSH
58276: LD_INT 3
58278: PPUSH
58279: CALL_OW 12
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: ST_TO_ADDR
// end ;
58296: LD_VAR 0 1
58300: RET
// export function PrepareApeman ( agressivity ) ; begin
58301: LD_INT 0
58303: PPUSH
// uc_side := 0 ;
58304: LD_ADDR_OWVAR 20
58308: PUSH
58309: LD_INT 0
58311: ST_TO_ADDR
// uc_nation := 0 ;
58312: LD_ADDR_OWVAR 21
58316: PUSH
58317: LD_INT 0
58319: ST_TO_ADDR
// hc_sex := sex_male ;
58320: LD_ADDR_OWVAR 27
58324: PUSH
58325: LD_INT 1
58327: ST_TO_ADDR
// hc_class := class_apeman ;
58328: LD_ADDR_OWVAR 28
58332: PUSH
58333: LD_INT 12
58335: ST_TO_ADDR
// hc_gallery :=  ;
58336: LD_ADDR_OWVAR 33
58340: PUSH
58341: LD_STRING 
58343: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58344: LD_ADDR_OWVAR 35
58348: PUSH
58349: LD_VAR 0 1
58353: NEG
58354: PPUSH
58355: LD_VAR 0 1
58359: PPUSH
58360: CALL_OW 12
58364: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58365: LD_ADDR_OWVAR 31
58369: PUSH
58370: LD_INT 0
58372: PPUSH
58373: LD_INT 3
58375: PPUSH
58376: CALL_OW 12
58380: PUSH
58381: LD_INT 0
58383: PPUSH
58384: LD_INT 3
58386: PPUSH
58387: CALL_OW 12
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: ST_TO_ADDR
// end ;
58404: LD_VAR 0 2
58408: RET
// export function PrepareTiger ( agressivity ) ; begin
58409: LD_INT 0
58411: PPUSH
// uc_side := 0 ;
58412: LD_ADDR_OWVAR 20
58416: PUSH
58417: LD_INT 0
58419: ST_TO_ADDR
// uc_nation := 0 ;
58420: LD_ADDR_OWVAR 21
58424: PUSH
58425: LD_INT 0
58427: ST_TO_ADDR
// hc_class := class_tiger ;
58428: LD_ADDR_OWVAR 28
58432: PUSH
58433: LD_INT 14
58435: ST_TO_ADDR
// hc_gallery :=  ;
58436: LD_ADDR_OWVAR 33
58440: PUSH
58441: LD_STRING 
58443: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58444: LD_ADDR_OWVAR 35
58448: PUSH
58449: LD_VAR 0 1
58453: NEG
58454: PPUSH
58455: LD_VAR 0 1
58459: PPUSH
58460: CALL_OW 12
58464: ST_TO_ADDR
// end ;
58465: LD_VAR 0 2
58469: RET
// export function PrepareEnchidna ( ) ; begin
58470: LD_INT 0
58472: PPUSH
// uc_side := 0 ;
58473: LD_ADDR_OWVAR 20
58477: PUSH
58478: LD_INT 0
58480: ST_TO_ADDR
// uc_nation := 0 ;
58481: LD_ADDR_OWVAR 21
58485: PUSH
58486: LD_INT 0
58488: ST_TO_ADDR
// hc_class := class_baggie ;
58489: LD_ADDR_OWVAR 28
58493: PUSH
58494: LD_INT 13
58496: ST_TO_ADDR
// hc_gallery :=  ;
58497: LD_ADDR_OWVAR 33
58501: PUSH
58502: LD_STRING 
58504: ST_TO_ADDR
// end ;
58505: LD_VAR 0 1
58509: RET
// export function PrepareFrog ( ) ; begin
58510: LD_INT 0
58512: PPUSH
// uc_side := 0 ;
58513: LD_ADDR_OWVAR 20
58517: PUSH
58518: LD_INT 0
58520: ST_TO_ADDR
// uc_nation := 0 ;
58521: LD_ADDR_OWVAR 21
58525: PUSH
58526: LD_INT 0
58528: ST_TO_ADDR
// hc_class := class_frog ;
58529: LD_ADDR_OWVAR 28
58533: PUSH
58534: LD_INT 19
58536: ST_TO_ADDR
// hc_gallery :=  ;
58537: LD_ADDR_OWVAR 33
58541: PUSH
58542: LD_STRING 
58544: ST_TO_ADDR
// end ;
58545: LD_VAR 0 1
58549: RET
// export function PrepareFish ( ) ; begin
58550: LD_INT 0
58552: PPUSH
// uc_side := 0 ;
58553: LD_ADDR_OWVAR 20
58557: PUSH
58558: LD_INT 0
58560: ST_TO_ADDR
// uc_nation := 0 ;
58561: LD_ADDR_OWVAR 21
58565: PUSH
58566: LD_INT 0
58568: ST_TO_ADDR
// hc_class := class_fish ;
58569: LD_ADDR_OWVAR 28
58573: PUSH
58574: LD_INT 20
58576: ST_TO_ADDR
// hc_gallery :=  ;
58577: LD_ADDR_OWVAR 33
58581: PUSH
58582: LD_STRING 
58584: ST_TO_ADDR
// end ;
58585: LD_VAR 0 1
58589: RET
// export function PrepareBird ( ) ; begin
58590: LD_INT 0
58592: PPUSH
// uc_side := 0 ;
58593: LD_ADDR_OWVAR 20
58597: PUSH
58598: LD_INT 0
58600: ST_TO_ADDR
// uc_nation := 0 ;
58601: LD_ADDR_OWVAR 21
58605: PUSH
58606: LD_INT 0
58608: ST_TO_ADDR
// hc_class := class_phororhacos ;
58609: LD_ADDR_OWVAR 28
58613: PUSH
58614: LD_INT 18
58616: ST_TO_ADDR
// hc_gallery :=  ;
58617: LD_ADDR_OWVAR 33
58621: PUSH
58622: LD_STRING 
58624: ST_TO_ADDR
// end ;
58625: LD_VAR 0 1
58629: RET
// export function PrepareHorse ( ) ; begin
58630: LD_INT 0
58632: PPUSH
// uc_side := 0 ;
58633: LD_ADDR_OWVAR 20
58637: PUSH
58638: LD_INT 0
58640: ST_TO_ADDR
// uc_nation := 0 ;
58641: LD_ADDR_OWVAR 21
58645: PUSH
58646: LD_INT 0
58648: ST_TO_ADDR
// hc_class := class_horse ;
58649: LD_ADDR_OWVAR 28
58653: PUSH
58654: LD_INT 21
58656: ST_TO_ADDR
// hc_gallery :=  ;
58657: LD_ADDR_OWVAR 33
58661: PUSH
58662: LD_STRING 
58664: ST_TO_ADDR
// end ;
58665: LD_VAR 0 1
58669: RET
// export function PrepareMastodont ( ) ; begin
58670: LD_INT 0
58672: PPUSH
// uc_side := 0 ;
58673: LD_ADDR_OWVAR 20
58677: PUSH
58678: LD_INT 0
58680: ST_TO_ADDR
// uc_nation := 0 ;
58681: LD_ADDR_OWVAR 21
58685: PUSH
58686: LD_INT 0
58688: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58689: LD_ADDR_OWVAR 37
58693: PUSH
58694: LD_INT 31
58696: ST_TO_ADDR
// vc_control := control_rider ;
58697: LD_ADDR_OWVAR 38
58701: PUSH
58702: LD_INT 4
58704: ST_TO_ADDR
// end ;
58705: LD_VAR 0 1
58709: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58710: LD_INT 0
58712: PPUSH
58713: PPUSH
58714: PPUSH
// uc_side = 0 ;
58715: LD_ADDR_OWVAR 20
58719: PUSH
58720: LD_INT 0
58722: ST_TO_ADDR
// uc_nation = 0 ;
58723: LD_ADDR_OWVAR 21
58727: PUSH
58728: LD_INT 0
58730: ST_TO_ADDR
// InitHc_All ( ) ;
58731: CALL_OW 584
// InitVc ;
58735: CALL_OW 20
// if mastodonts then
58739: LD_VAR 0 6
58743: IFFALSE 58810
// for i = 1 to mastodonts do
58745: LD_ADDR_VAR 0 11
58749: PUSH
58750: DOUBLE
58751: LD_INT 1
58753: DEC
58754: ST_TO_ADDR
58755: LD_VAR 0 6
58759: PUSH
58760: FOR_TO
58761: IFFALSE 58808
// begin vc_chassis := 31 ;
58763: LD_ADDR_OWVAR 37
58767: PUSH
58768: LD_INT 31
58770: ST_TO_ADDR
// vc_control := control_rider ;
58771: LD_ADDR_OWVAR 38
58775: PUSH
58776: LD_INT 4
58778: ST_TO_ADDR
// animal := CreateVehicle ;
58779: LD_ADDR_VAR 0 12
58783: PUSH
58784: CALL_OW 45
58788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58789: LD_VAR 0 12
58793: PPUSH
58794: LD_VAR 0 8
58798: PPUSH
58799: LD_INT 0
58801: PPUSH
58802: CALL 60938 0 3
// end ;
58806: GO 58760
58808: POP
58809: POP
// if horses then
58810: LD_VAR 0 5
58814: IFFALSE 58881
// for i = 1 to horses do
58816: LD_ADDR_VAR 0 11
58820: PUSH
58821: DOUBLE
58822: LD_INT 1
58824: DEC
58825: ST_TO_ADDR
58826: LD_VAR 0 5
58830: PUSH
58831: FOR_TO
58832: IFFALSE 58879
// begin hc_class := 21 ;
58834: LD_ADDR_OWVAR 28
58838: PUSH
58839: LD_INT 21
58841: ST_TO_ADDR
// hc_gallery :=  ;
58842: LD_ADDR_OWVAR 33
58846: PUSH
58847: LD_STRING 
58849: ST_TO_ADDR
// animal := CreateHuman ;
58850: LD_ADDR_VAR 0 12
58854: PUSH
58855: CALL_OW 44
58859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58860: LD_VAR 0 12
58864: PPUSH
58865: LD_VAR 0 8
58869: PPUSH
58870: LD_INT 0
58872: PPUSH
58873: CALL 60938 0 3
// end ;
58877: GO 58831
58879: POP
58880: POP
// if birds then
58881: LD_VAR 0 1
58885: IFFALSE 58952
// for i = 1 to birds do
58887: LD_ADDR_VAR 0 11
58891: PUSH
58892: DOUBLE
58893: LD_INT 1
58895: DEC
58896: ST_TO_ADDR
58897: LD_VAR 0 1
58901: PUSH
58902: FOR_TO
58903: IFFALSE 58950
// begin hc_class = 18 ;
58905: LD_ADDR_OWVAR 28
58909: PUSH
58910: LD_INT 18
58912: ST_TO_ADDR
// hc_gallery =  ;
58913: LD_ADDR_OWVAR 33
58917: PUSH
58918: LD_STRING 
58920: ST_TO_ADDR
// animal := CreateHuman ;
58921: LD_ADDR_VAR 0 12
58925: PUSH
58926: CALL_OW 44
58930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58931: LD_VAR 0 12
58935: PPUSH
58936: LD_VAR 0 8
58940: PPUSH
58941: LD_INT 0
58943: PPUSH
58944: CALL 60938 0 3
// end ;
58948: GO 58902
58950: POP
58951: POP
// if tigers then
58952: LD_VAR 0 2
58956: IFFALSE 59040
// for i = 1 to tigers do
58958: LD_ADDR_VAR 0 11
58962: PUSH
58963: DOUBLE
58964: LD_INT 1
58966: DEC
58967: ST_TO_ADDR
58968: LD_VAR 0 2
58972: PUSH
58973: FOR_TO
58974: IFFALSE 59038
// begin hc_class = class_tiger ;
58976: LD_ADDR_OWVAR 28
58980: PUSH
58981: LD_INT 14
58983: ST_TO_ADDR
// hc_gallery =  ;
58984: LD_ADDR_OWVAR 33
58988: PUSH
58989: LD_STRING 
58991: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58992: LD_ADDR_OWVAR 35
58996: PUSH
58997: LD_INT 7
58999: NEG
59000: PPUSH
59001: LD_INT 7
59003: PPUSH
59004: CALL_OW 12
59008: ST_TO_ADDR
// animal := CreateHuman ;
59009: LD_ADDR_VAR 0 12
59013: PUSH
59014: CALL_OW 44
59018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59019: LD_VAR 0 12
59023: PPUSH
59024: LD_VAR 0 8
59028: PPUSH
59029: LD_INT 0
59031: PPUSH
59032: CALL 60938 0 3
// end ;
59036: GO 58973
59038: POP
59039: POP
// if apemans then
59040: LD_VAR 0 3
59044: IFFALSE 59167
// for i = 1 to apemans do
59046: LD_ADDR_VAR 0 11
59050: PUSH
59051: DOUBLE
59052: LD_INT 1
59054: DEC
59055: ST_TO_ADDR
59056: LD_VAR 0 3
59060: PUSH
59061: FOR_TO
59062: IFFALSE 59165
// begin hc_class = class_apeman ;
59064: LD_ADDR_OWVAR 28
59068: PUSH
59069: LD_INT 12
59071: ST_TO_ADDR
// hc_gallery =  ;
59072: LD_ADDR_OWVAR 33
59076: PUSH
59077: LD_STRING 
59079: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59080: LD_ADDR_OWVAR 35
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PPUSH
59089: LD_INT 2
59091: PPUSH
59092: CALL_OW 12
59096: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59097: LD_ADDR_OWVAR 31
59101: PUSH
59102: LD_INT 1
59104: PPUSH
59105: LD_INT 3
59107: PPUSH
59108: CALL_OW 12
59112: PUSH
59113: LD_INT 1
59115: PPUSH
59116: LD_INT 3
59118: PPUSH
59119: CALL_OW 12
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: ST_TO_ADDR
// animal := CreateHuman ;
59136: LD_ADDR_VAR 0 12
59140: PUSH
59141: CALL_OW 44
59145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59146: LD_VAR 0 12
59150: PPUSH
59151: LD_VAR 0 8
59155: PPUSH
59156: LD_INT 0
59158: PPUSH
59159: CALL 60938 0 3
// end ;
59163: GO 59061
59165: POP
59166: POP
// if enchidnas then
59167: LD_VAR 0 4
59171: IFFALSE 59238
// for i = 1 to enchidnas do
59173: LD_ADDR_VAR 0 11
59177: PUSH
59178: DOUBLE
59179: LD_INT 1
59181: DEC
59182: ST_TO_ADDR
59183: LD_VAR 0 4
59187: PUSH
59188: FOR_TO
59189: IFFALSE 59236
// begin hc_class = 13 ;
59191: LD_ADDR_OWVAR 28
59195: PUSH
59196: LD_INT 13
59198: ST_TO_ADDR
// hc_gallery =  ;
59199: LD_ADDR_OWVAR 33
59203: PUSH
59204: LD_STRING 
59206: ST_TO_ADDR
// animal := CreateHuman ;
59207: LD_ADDR_VAR 0 12
59211: PUSH
59212: CALL_OW 44
59216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59217: LD_VAR 0 12
59221: PPUSH
59222: LD_VAR 0 8
59226: PPUSH
59227: LD_INT 0
59229: PPUSH
59230: CALL 60938 0 3
// end ;
59234: GO 59188
59236: POP
59237: POP
// if fishes then
59238: LD_VAR 0 7
59242: IFFALSE 59309
// for i = 1 to fishes do
59244: LD_ADDR_VAR 0 11
59248: PUSH
59249: DOUBLE
59250: LD_INT 1
59252: DEC
59253: ST_TO_ADDR
59254: LD_VAR 0 7
59258: PUSH
59259: FOR_TO
59260: IFFALSE 59307
// begin hc_class = 20 ;
59262: LD_ADDR_OWVAR 28
59266: PUSH
59267: LD_INT 20
59269: ST_TO_ADDR
// hc_gallery =  ;
59270: LD_ADDR_OWVAR 33
59274: PUSH
59275: LD_STRING 
59277: ST_TO_ADDR
// animal := CreateHuman ;
59278: LD_ADDR_VAR 0 12
59282: PUSH
59283: CALL_OW 44
59287: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59288: LD_VAR 0 12
59292: PPUSH
59293: LD_VAR 0 9
59297: PPUSH
59298: LD_INT 0
59300: PPUSH
59301: CALL 60938 0 3
// end ;
59305: GO 59259
59307: POP
59308: POP
// end ;
59309: LD_VAR 0 10
59313: RET
// export function WantHeal ( sci , unit ) ; begin
59314: LD_INT 0
59316: PPUSH
// if GetTaskList ( sci ) > 0 then
59317: LD_VAR 0 1
59321: PPUSH
59322: CALL_OW 437
59326: PUSH
59327: LD_INT 0
59329: GREATER
59330: IFFALSE 59400
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59332: LD_VAR 0 1
59336: PPUSH
59337: CALL_OW 437
59341: PUSH
59342: LD_INT 1
59344: ARRAY
59345: PUSH
59346: LD_INT 1
59348: ARRAY
59349: PUSH
59350: LD_STRING l
59352: EQUAL
59353: PUSH
59354: LD_VAR 0 1
59358: PPUSH
59359: CALL_OW 437
59363: PUSH
59364: LD_INT 1
59366: ARRAY
59367: PUSH
59368: LD_INT 4
59370: ARRAY
59371: PUSH
59372: LD_VAR 0 2
59376: EQUAL
59377: AND
59378: IFFALSE 59390
// result := true else
59380: LD_ADDR_VAR 0 3
59384: PUSH
59385: LD_INT 1
59387: ST_TO_ADDR
59388: GO 59398
// result := false ;
59390: LD_ADDR_VAR 0 3
59394: PUSH
59395: LD_INT 0
59397: ST_TO_ADDR
// end else
59398: GO 59408
// result := false ;
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: LD_INT 0
59407: ST_TO_ADDR
// end ;
59408: LD_VAR 0 3
59412: RET
// export function HealTarget ( sci ) ; begin
59413: LD_INT 0
59415: PPUSH
// if not sci then
59416: LD_VAR 0 1
59420: NOT
59421: IFFALSE 59425
// exit ;
59423: GO 59490
// result := 0 ;
59425: LD_ADDR_VAR 0 2
59429: PUSH
59430: LD_INT 0
59432: ST_TO_ADDR
// if GetTaskList ( sci ) then
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 437
59442: IFFALSE 59490
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59444: LD_VAR 0 1
59448: PPUSH
59449: CALL_OW 437
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: PUSH
59458: LD_INT 1
59460: ARRAY
59461: PUSH
59462: LD_STRING l
59464: EQUAL
59465: IFFALSE 59490
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: LD_VAR 0 1
59476: PPUSH
59477: CALL_OW 437
59481: PUSH
59482: LD_INT 1
59484: ARRAY
59485: PUSH
59486: LD_INT 4
59488: ARRAY
59489: ST_TO_ADDR
// end ;
59490: LD_VAR 0 2
59494: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59495: LD_INT 0
59497: PPUSH
59498: PPUSH
59499: PPUSH
59500: PPUSH
// if not base_units then
59501: LD_VAR 0 1
59505: NOT
59506: IFFALSE 59510
// exit ;
59508: GO 59597
// result := false ;
59510: LD_ADDR_VAR 0 2
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59518: LD_ADDR_VAR 0 5
59522: PUSH
59523: LD_VAR 0 1
59527: PPUSH
59528: LD_INT 21
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PPUSH
59538: CALL_OW 72
59542: ST_TO_ADDR
// if not tmp then
59543: LD_VAR 0 5
59547: NOT
59548: IFFALSE 59552
// exit ;
59550: GO 59597
// for i in tmp do
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_VAR 0 5
59561: PUSH
59562: FOR_IN
59563: IFFALSE 59595
// begin result := EnemyInRange ( i , 22 ) ;
59565: LD_ADDR_VAR 0 2
59569: PUSH
59570: LD_VAR 0 3
59574: PPUSH
59575: LD_INT 22
59577: PPUSH
59578: CALL 57184 0 2
59582: ST_TO_ADDR
// if result then
59583: LD_VAR 0 2
59587: IFFALSE 59593
// exit ;
59589: POP
59590: POP
59591: GO 59597
// end ;
59593: GO 59562
59595: POP
59596: POP
// end ;
59597: LD_VAR 0 2
59601: RET
// export function FilterByTag ( units , tag ) ; begin
59602: LD_INT 0
59604: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59605: LD_ADDR_VAR 0 3
59609: PUSH
59610: LD_VAR 0 1
59614: PPUSH
59615: LD_INT 120
59617: PUSH
59618: LD_VAR 0 2
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PPUSH
59627: CALL_OW 72
59631: ST_TO_ADDR
// end ;
59632: LD_VAR 0 3
59636: RET
// export function IsDriver ( un ) ; begin
59637: LD_INT 0
59639: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59640: LD_ADDR_VAR 0 2
59644: PUSH
59645: LD_VAR 0 1
59649: PUSH
59650: LD_INT 55
59652: PUSH
59653: EMPTY
59654: LIST
59655: PPUSH
59656: CALL_OW 69
59660: IN
59661: ST_TO_ADDR
// end ;
59662: LD_VAR 0 2
59666: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59667: LD_INT 0
59669: PPUSH
59670: PPUSH
// list := [ ] ;
59671: LD_ADDR_VAR 0 5
59675: PUSH
59676: EMPTY
59677: ST_TO_ADDR
// case d of 0 :
59678: LD_VAR 0 3
59682: PUSH
59683: LD_INT 0
59685: DOUBLE
59686: EQUAL
59687: IFTRUE 59691
59689: GO 59824
59691: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59692: LD_ADDR_VAR 0 5
59696: PUSH
59697: LD_VAR 0 1
59701: PUSH
59702: LD_INT 4
59704: MINUS
59705: PUSH
59706: LD_VAR 0 2
59710: PUSH
59711: LD_INT 4
59713: MINUS
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: LIST
59722: PUSH
59723: LD_VAR 0 1
59727: PUSH
59728: LD_INT 3
59730: MINUS
59731: PUSH
59732: LD_VAR 0 2
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: LIST
59744: PUSH
59745: LD_VAR 0 1
59749: PUSH
59750: LD_INT 4
59752: PLUS
59753: PUSH
59754: LD_VAR 0 2
59758: PUSH
59759: LD_INT 4
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: PUSH
59767: LD_VAR 0 1
59771: PUSH
59772: LD_INT 3
59774: PLUS
59775: PUSH
59776: LD_VAR 0 2
59780: PUSH
59781: LD_INT 3
59783: PLUS
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: PUSH
59793: LD_VAR 0 1
59797: PUSH
59798: LD_VAR 0 2
59802: PUSH
59803: LD_INT 4
59805: PLUS
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: ST_TO_ADDR
// end ; 1 :
59822: GO 60522
59824: LD_INT 1
59826: DOUBLE
59827: EQUAL
59828: IFTRUE 59832
59830: GO 59965
59832: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59833: LD_ADDR_VAR 0 5
59837: PUSH
59838: LD_VAR 0 1
59842: PUSH
59843: LD_VAR 0 2
59847: PUSH
59848: LD_INT 4
59850: MINUS
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: LIST
59859: PUSH
59860: LD_VAR 0 1
59864: PUSH
59865: LD_INT 3
59867: MINUS
59868: PUSH
59869: LD_VAR 0 2
59873: PUSH
59874: LD_INT 3
59876: MINUS
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: LIST
59885: PUSH
59886: LD_VAR 0 1
59890: PUSH
59891: LD_INT 4
59893: MINUS
59894: PUSH
59895: LD_VAR 0 2
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: PUSH
59908: LD_VAR 0 1
59912: PUSH
59913: LD_VAR 0 2
59917: PUSH
59918: LD_INT 3
59920: PLUS
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: PUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 4
59937: PLUS
59938: PUSH
59939: LD_VAR 0 2
59943: PUSH
59944: LD_INT 4
59946: PLUS
59947: PUSH
59948: LD_INT 5
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// end ; 2 :
59963: GO 60522
59965: LD_INT 2
59967: DOUBLE
59968: EQUAL
59969: IFTRUE 59973
59971: GO 60102
59973: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59974: LD_ADDR_VAR 0 5
59978: PUSH
59979: LD_VAR 0 1
59983: PUSH
59984: LD_VAR 0 2
59988: PUSH
59989: LD_INT 3
59991: MINUS
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: LIST
60000: PUSH
60001: LD_VAR 0 1
60005: PUSH
60006: LD_INT 4
60008: PLUS
60009: PUSH
60010: LD_VAR 0 2
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: LD_VAR 0 1
60027: PUSH
60028: LD_VAR 0 2
60032: PUSH
60033: LD_INT 4
60035: PLUS
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: PUSH
60045: LD_VAR 0 1
60049: PUSH
60050: LD_INT 3
60052: MINUS
60053: PUSH
60054: LD_VAR 0 2
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: PUSH
60067: LD_VAR 0 1
60071: PUSH
60072: LD_INT 4
60074: MINUS
60075: PUSH
60076: LD_VAR 0 2
60080: PUSH
60081: LD_INT 4
60083: MINUS
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// end ; 3 :
60100: GO 60522
60102: LD_INT 3
60104: DOUBLE
60105: EQUAL
60106: IFTRUE 60110
60108: GO 60243
60110: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60111: LD_ADDR_VAR 0 5
60115: PUSH
60116: LD_VAR 0 1
60120: PUSH
60121: LD_INT 3
60123: PLUS
60124: PUSH
60125: LD_VAR 0 2
60129: PUSH
60130: LD_INT 4
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_INT 4
60145: PLUS
60146: PUSH
60147: LD_VAR 0 2
60151: PUSH
60152: LD_INT 4
60154: PLUS
60155: PUSH
60156: LD_INT 5
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: PUSH
60164: LD_VAR 0 1
60168: PUSH
60169: LD_INT 4
60171: MINUS
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: PUSH
60186: LD_VAR 0 1
60190: PUSH
60191: LD_VAR 0 2
60195: PUSH
60196: LD_INT 4
60198: MINUS
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: PUSH
60208: LD_VAR 0 1
60212: PUSH
60213: LD_INT 3
60215: MINUS
60216: PUSH
60217: LD_VAR 0 2
60221: PUSH
60222: LD_INT 3
60224: MINUS
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// end ; 4 :
60241: GO 60522
60243: LD_INT 4
60245: DOUBLE
60246: EQUAL
60247: IFTRUE 60251
60249: GO 60384
60251: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60252: LD_ADDR_VAR 0 5
60256: PUSH
60257: LD_VAR 0 1
60261: PUSH
60262: LD_VAR 0 2
60266: PUSH
60267: LD_INT 4
60269: PLUS
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: PUSH
60279: LD_VAR 0 1
60283: PUSH
60284: LD_INT 3
60286: PLUS
60287: PUSH
60288: LD_VAR 0 2
60292: PUSH
60293: LD_INT 3
60295: PLUS
60296: PUSH
60297: LD_INT 5
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: PUSH
60305: LD_VAR 0 1
60309: PUSH
60310: LD_INT 4
60312: PLUS
60313: PUSH
60314: LD_VAR 0 2
60318: PUSH
60319: LD_INT 4
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: PUSH
60327: LD_VAR 0 1
60331: PUSH
60332: LD_VAR 0 2
60336: PUSH
60337: LD_INT 3
60339: MINUS
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: PUSH
60349: LD_VAR 0 1
60353: PUSH
60354: LD_INT 4
60356: MINUS
60357: PUSH
60358: LD_VAR 0 2
60362: PUSH
60363: LD_INT 4
60365: MINUS
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: ST_TO_ADDR
// end ; 5 :
60382: GO 60522
60384: LD_INT 5
60386: DOUBLE
60387: EQUAL
60388: IFTRUE 60392
60390: GO 60521
60392: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60393: LD_ADDR_VAR 0 5
60397: PUSH
60398: LD_VAR 0 1
60402: PUSH
60403: LD_INT 4
60405: MINUS
60406: PUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: PUSH
60420: LD_VAR 0 1
60424: PUSH
60425: LD_VAR 0 2
60429: PUSH
60430: LD_INT 4
60432: MINUS
60433: PUSH
60434: LD_INT 3
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: PUSH
60442: LD_VAR 0 1
60446: PUSH
60447: LD_INT 4
60449: PLUS
60450: PUSH
60451: LD_VAR 0 2
60455: PUSH
60456: LD_INT 4
60458: PLUS
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: PUSH
60468: LD_VAR 0 1
60472: PUSH
60473: LD_INT 3
60475: PLUS
60476: PUSH
60477: LD_VAR 0 2
60481: PUSH
60482: LD_INT 4
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: PUSH
60490: LD_VAR 0 1
60494: PUSH
60495: LD_VAR 0 2
60499: PUSH
60500: LD_INT 3
60502: PLUS
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// end ; end ;
60519: GO 60522
60521: POP
// result := list ;
60522: LD_ADDR_VAR 0 4
60526: PUSH
60527: LD_VAR 0 5
60531: ST_TO_ADDR
// end ;
60532: LD_VAR 0 4
60536: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60537: LD_INT 0
60539: PPUSH
60540: PPUSH
60541: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60542: LD_VAR 0 1
60546: NOT
60547: PUSH
60548: LD_VAR 0 2
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: IN
60571: NOT
60572: OR
60573: IFFALSE 60577
// exit ;
60575: GO 60660
// tmp := [ ] ;
60577: LD_ADDR_VAR 0 5
60581: PUSH
60582: EMPTY
60583: ST_TO_ADDR
// for i in units do
60584: LD_ADDR_VAR 0 4
60588: PUSH
60589: LD_VAR 0 1
60593: PUSH
60594: FOR_IN
60595: IFFALSE 60629
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60597: LD_ADDR_VAR 0 5
60601: PUSH
60602: LD_VAR 0 5
60606: PPUSH
60607: LD_VAR 0 4
60611: PPUSH
60612: LD_VAR 0 2
60616: PPUSH
60617: CALL_OW 259
60621: PPUSH
60622: CALL 62021 0 2
60626: ST_TO_ADDR
60627: GO 60594
60629: POP
60630: POP
// if not tmp then
60631: LD_VAR 0 5
60635: NOT
60636: IFFALSE 60640
// exit ;
60638: GO 60660
// result := SortListByListDesc ( units , tmp ) ;
60640: LD_ADDR_VAR 0 3
60644: PUSH
60645: LD_VAR 0 1
60649: PPUSH
60650: LD_VAR 0 5
60654: PPUSH
60655: CALL_OW 77
60659: ST_TO_ADDR
// end ;
60660: LD_VAR 0 3
60664: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60665: LD_INT 0
60667: PPUSH
60668: PPUSH
60669: PPUSH
// result := false ;
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: LD_INT 0
60677: ST_TO_ADDR
// if not building then
60678: LD_VAR 0 2
60682: NOT
60683: IFFALSE 60687
// exit ;
60685: GO 60825
// x := GetX ( building ) ;
60687: LD_ADDR_VAR 0 4
60691: PUSH
60692: LD_VAR 0 2
60696: PPUSH
60697: CALL_OW 250
60701: ST_TO_ADDR
// y := GetY ( building ) ;
60702: LD_ADDR_VAR 0 5
60706: PUSH
60707: LD_VAR 0 2
60711: PPUSH
60712: CALL_OW 251
60716: ST_TO_ADDR
// if not x or not y then
60717: LD_VAR 0 4
60721: NOT
60722: PUSH
60723: LD_VAR 0 5
60727: NOT
60728: OR
60729: IFFALSE 60733
// exit ;
60731: GO 60825
// if GetTaskList ( unit ) then
60733: LD_VAR 0 1
60737: PPUSH
60738: CALL_OW 437
60742: IFFALSE 60825
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60744: LD_STRING e
60746: PUSH
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL_OW 437
60756: PUSH
60757: LD_INT 1
60759: ARRAY
60760: PUSH
60761: LD_INT 1
60763: ARRAY
60764: EQUAL
60765: PUSH
60766: LD_VAR 0 4
60770: PUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 437
60780: PUSH
60781: LD_INT 1
60783: ARRAY
60784: PUSH
60785: LD_INT 2
60787: ARRAY
60788: EQUAL
60789: AND
60790: PUSH
60791: LD_VAR 0 5
60795: PUSH
60796: LD_VAR 0 1
60800: PPUSH
60801: CALL_OW 437
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: PUSH
60810: LD_INT 3
60812: ARRAY
60813: EQUAL
60814: AND
60815: IFFALSE 60825
// result := true end ;
60817: LD_ADDR_VAR 0 3
60821: PUSH
60822: LD_INT 1
60824: ST_TO_ADDR
// end ;
60825: LD_VAR 0 3
60829: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60830: LD_INT 0
60832: PPUSH
// result := false ;
60833: LD_ADDR_VAR 0 4
60837: PUSH
60838: LD_INT 0
60840: ST_TO_ADDR
// if GetTaskList ( unit ) then
60841: LD_VAR 0 1
60845: PPUSH
60846: CALL_OW 437
60850: IFFALSE 60933
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60852: LD_STRING M
60854: PUSH
60855: LD_VAR 0 1
60859: PPUSH
60860: CALL_OW 437
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PUSH
60869: LD_INT 1
60871: ARRAY
60872: EQUAL
60873: PUSH
60874: LD_VAR 0 2
60878: PUSH
60879: LD_VAR 0 1
60883: PPUSH
60884: CALL_OW 437
60888: PUSH
60889: LD_INT 1
60891: ARRAY
60892: PUSH
60893: LD_INT 2
60895: ARRAY
60896: EQUAL
60897: AND
60898: PUSH
60899: LD_VAR 0 3
60903: PUSH
60904: LD_VAR 0 1
60908: PPUSH
60909: CALL_OW 437
60913: PUSH
60914: LD_INT 1
60916: ARRAY
60917: PUSH
60918: LD_INT 3
60920: ARRAY
60921: EQUAL
60922: AND
60923: IFFALSE 60933
// result := true ;
60925: LD_ADDR_VAR 0 4
60929: PUSH
60930: LD_INT 1
60932: ST_TO_ADDR
// end ; end ;
60933: LD_VAR 0 4
60937: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60938: LD_INT 0
60940: PPUSH
60941: PPUSH
60942: PPUSH
60943: PPUSH
// if not unit or not area then
60944: LD_VAR 0 1
60948: NOT
60949: PUSH
60950: LD_VAR 0 2
60954: NOT
60955: OR
60956: IFFALSE 60960
// exit ;
60958: GO 61124
// tmp := AreaToList ( area , i ) ;
60960: LD_ADDR_VAR 0 6
60964: PUSH
60965: LD_VAR 0 2
60969: PPUSH
60970: LD_VAR 0 5
60974: PPUSH
60975: CALL_OW 517
60979: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60980: LD_ADDR_VAR 0 5
60984: PUSH
60985: DOUBLE
60986: LD_INT 1
60988: DEC
60989: ST_TO_ADDR
60990: LD_VAR 0 6
60994: PUSH
60995: LD_INT 1
60997: ARRAY
60998: PUSH
60999: FOR_TO
61000: IFFALSE 61122
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61002: LD_ADDR_VAR 0 7
61006: PUSH
61007: LD_VAR 0 6
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PUSH
61016: LD_VAR 0 5
61020: ARRAY
61021: PUSH
61022: LD_VAR 0 6
61026: PUSH
61027: LD_INT 2
61029: ARRAY
61030: PUSH
61031: LD_VAR 0 5
61035: ARRAY
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61041: LD_VAR 0 7
61045: PUSH
61046: LD_INT 1
61048: ARRAY
61049: PPUSH
61050: LD_VAR 0 7
61054: PUSH
61055: LD_INT 2
61057: ARRAY
61058: PPUSH
61059: CALL_OW 428
61063: PUSH
61064: LD_INT 0
61066: EQUAL
61067: IFFALSE 61120
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61069: LD_VAR 0 1
61073: PPUSH
61074: LD_VAR 0 7
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: PPUSH
61083: LD_VAR 0 7
61087: PUSH
61088: LD_INT 2
61090: ARRAY
61091: PPUSH
61092: LD_VAR 0 3
61096: PPUSH
61097: CALL_OW 48
// result := IsPlaced ( unit ) ;
61101: LD_ADDR_VAR 0 4
61105: PUSH
61106: LD_VAR 0 1
61110: PPUSH
61111: CALL_OW 305
61115: ST_TO_ADDR
// exit ;
61116: POP
61117: POP
61118: GO 61124
// end ; end ;
61120: GO 60999
61122: POP
61123: POP
// end ;
61124: LD_VAR 0 4
61128: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61129: LD_INT 0
61131: PPUSH
61132: PPUSH
61133: PPUSH
// if not side or side > 8 then
61134: LD_VAR 0 1
61138: NOT
61139: PUSH
61140: LD_VAR 0 1
61144: PUSH
61145: LD_INT 8
61147: GREATER
61148: OR
61149: IFFALSE 61153
// exit ;
61151: GO 61340
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61153: LD_ADDR_VAR 0 4
61157: PUSH
61158: LD_INT 22
61160: PUSH
61161: LD_VAR 0 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 21
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PPUSH
61184: CALL_OW 69
61188: ST_TO_ADDR
// if not tmp then
61189: LD_VAR 0 4
61193: NOT
61194: IFFALSE 61198
// exit ;
61196: GO 61340
// enable_addtolog := true ;
61198: LD_ADDR_OWVAR 81
61202: PUSH
61203: LD_INT 1
61205: ST_TO_ADDR
// AddToLog ( [ ) ;
61206: LD_STRING [
61208: PPUSH
61209: CALL_OW 561
// for i in tmp do
61213: LD_ADDR_VAR 0 3
61217: PUSH
61218: LD_VAR 0 4
61222: PUSH
61223: FOR_IN
61224: IFFALSE 61331
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61226: LD_STRING [
61228: PUSH
61229: LD_VAR 0 3
61233: PPUSH
61234: CALL_OW 266
61238: STR
61239: PUSH
61240: LD_STRING , 
61242: STR
61243: PUSH
61244: LD_VAR 0 3
61248: PPUSH
61249: CALL_OW 250
61253: STR
61254: PUSH
61255: LD_STRING , 
61257: STR
61258: PUSH
61259: LD_VAR 0 3
61263: PPUSH
61264: CALL_OW 251
61268: STR
61269: PUSH
61270: LD_STRING , 
61272: STR
61273: PUSH
61274: LD_VAR 0 3
61278: PPUSH
61279: CALL_OW 254
61283: STR
61284: PUSH
61285: LD_STRING , 
61287: STR
61288: PUSH
61289: LD_VAR 0 3
61293: PPUSH
61294: LD_INT 1
61296: PPUSH
61297: CALL_OW 268
61301: STR
61302: PUSH
61303: LD_STRING , 
61305: STR
61306: PUSH
61307: LD_VAR 0 3
61311: PPUSH
61312: LD_INT 2
61314: PPUSH
61315: CALL_OW 268
61319: STR
61320: PUSH
61321: LD_STRING ],
61323: STR
61324: PPUSH
61325: CALL_OW 561
// end ;
61329: GO 61223
61331: POP
61332: POP
// AddToLog ( ]; ) ;
61333: LD_STRING ];
61335: PPUSH
61336: CALL_OW 561
// end ;
61340: LD_VAR 0 2
61344: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61345: LD_INT 0
61347: PPUSH
61348: PPUSH
61349: PPUSH
61350: PPUSH
61351: PPUSH
// if not area or not rate or not max then
61352: LD_VAR 0 1
61356: NOT
61357: PUSH
61358: LD_VAR 0 2
61362: NOT
61363: OR
61364: PUSH
61365: LD_VAR 0 4
61369: NOT
61370: OR
61371: IFFALSE 61375
// exit ;
61373: GO 61564
// while 1 do
61375: LD_INT 1
61377: IFFALSE 61564
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61379: LD_ADDR_VAR 0 9
61383: PUSH
61384: LD_VAR 0 1
61388: PPUSH
61389: LD_INT 1
61391: PPUSH
61392: CALL_OW 287
61396: PUSH
61397: LD_INT 10
61399: MUL
61400: ST_TO_ADDR
// r := rate / 10 ;
61401: LD_ADDR_VAR 0 7
61405: PUSH
61406: LD_VAR 0 2
61410: PUSH
61411: LD_INT 10
61413: DIVREAL
61414: ST_TO_ADDR
// time := 1 1$00 ;
61415: LD_ADDR_VAR 0 8
61419: PUSH
61420: LD_INT 2100
61422: ST_TO_ADDR
// if amount < min then
61423: LD_VAR 0 9
61427: PUSH
61428: LD_VAR 0 3
61432: LESS
61433: IFFALSE 61451
// r := r * 2 else
61435: LD_ADDR_VAR 0 7
61439: PUSH
61440: LD_VAR 0 7
61444: PUSH
61445: LD_INT 2
61447: MUL
61448: ST_TO_ADDR
61449: GO 61477
// if amount > max then
61451: LD_VAR 0 9
61455: PUSH
61456: LD_VAR 0 4
61460: GREATER
61461: IFFALSE 61477
// r := r / 2 ;
61463: LD_ADDR_VAR 0 7
61467: PUSH
61468: LD_VAR 0 7
61472: PUSH
61473: LD_INT 2
61475: DIVREAL
61476: ST_TO_ADDR
// time := time / r ;
61477: LD_ADDR_VAR 0 8
61481: PUSH
61482: LD_VAR 0 8
61486: PUSH
61487: LD_VAR 0 7
61491: DIVREAL
61492: ST_TO_ADDR
// if time < 0 then
61493: LD_VAR 0 8
61497: PUSH
61498: LD_INT 0
61500: LESS
61501: IFFALSE 61518
// time := time * - 1 ;
61503: LD_ADDR_VAR 0 8
61507: PUSH
61508: LD_VAR 0 8
61512: PUSH
61513: LD_INT 1
61515: NEG
61516: MUL
61517: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61518: LD_VAR 0 8
61522: PUSH
61523: LD_INT 35
61525: PPUSH
61526: LD_INT 875
61528: PPUSH
61529: CALL_OW 12
61533: PLUS
61534: PPUSH
61535: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61539: LD_INT 1
61541: PPUSH
61542: LD_INT 5
61544: PPUSH
61545: CALL_OW 12
61549: PPUSH
61550: LD_VAR 0 1
61554: PPUSH
61555: LD_INT 1
61557: PPUSH
61558: CALL_OW 55
// end ;
61562: GO 61375
// end ;
61564: LD_VAR 0 5
61568: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61569: LD_INT 0
61571: PPUSH
61572: PPUSH
61573: PPUSH
61574: PPUSH
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
// if not turrets or not factories then
61579: LD_VAR 0 1
61583: NOT
61584: PUSH
61585: LD_VAR 0 2
61589: NOT
61590: OR
61591: IFFALSE 61595
// exit ;
61593: GO 61902
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61595: LD_ADDR_VAR 0 10
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: LD_INT 6
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 5
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 24
61637: PUSH
61638: LD_INT 25
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 23
61647: PUSH
61648: LD_INT 27
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 42
61661: PUSH
61662: LD_INT 43
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 44
61671: PUSH
61672: LD_INT 46
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 45
61681: PUSH
61682: LD_INT 47
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: ST_TO_ADDR
// result := [ ] ;
61699: LD_ADDR_VAR 0 3
61703: PUSH
61704: EMPTY
61705: ST_TO_ADDR
// for i in turrets do
61706: LD_ADDR_VAR 0 4
61710: PUSH
61711: LD_VAR 0 1
61715: PUSH
61716: FOR_IN
61717: IFFALSE 61900
// begin nat := GetNation ( i ) ;
61719: LD_ADDR_VAR 0 7
61723: PUSH
61724: LD_VAR 0 4
61728: PPUSH
61729: CALL_OW 248
61733: ST_TO_ADDR
// weapon := 0 ;
61734: LD_ADDR_VAR 0 8
61738: PUSH
61739: LD_INT 0
61741: ST_TO_ADDR
// if not nat then
61742: LD_VAR 0 7
61746: NOT
61747: IFFALSE 61751
// continue ;
61749: GO 61716
// for j in list [ nat ] do
61751: LD_ADDR_VAR 0 5
61755: PUSH
61756: LD_VAR 0 10
61760: PUSH
61761: LD_VAR 0 7
61765: ARRAY
61766: PUSH
61767: FOR_IN
61768: IFFALSE 61809
// if GetBWeapon ( i ) = j [ 1 ] then
61770: LD_VAR 0 4
61774: PPUSH
61775: CALL_OW 269
61779: PUSH
61780: LD_VAR 0 5
61784: PUSH
61785: LD_INT 1
61787: ARRAY
61788: EQUAL
61789: IFFALSE 61807
// begin weapon := j [ 2 ] ;
61791: LD_ADDR_VAR 0 8
61795: PUSH
61796: LD_VAR 0 5
61800: PUSH
61801: LD_INT 2
61803: ARRAY
61804: ST_TO_ADDR
// break ;
61805: GO 61809
// end ;
61807: GO 61767
61809: POP
61810: POP
// if not weapon then
61811: LD_VAR 0 8
61815: NOT
61816: IFFALSE 61820
// continue ;
61818: GO 61716
// for k in factories do
61820: LD_ADDR_VAR 0 6
61824: PUSH
61825: LD_VAR 0 2
61829: PUSH
61830: FOR_IN
61831: IFFALSE 61896
// begin weapons := AvailableWeaponList ( k ) ;
61833: LD_ADDR_VAR 0 9
61837: PUSH
61838: LD_VAR 0 6
61842: PPUSH
61843: CALL_OW 478
61847: ST_TO_ADDR
// if not weapons then
61848: LD_VAR 0 9
61852: NOT
61853: IFFALSE 61857
// continue ;
61855: GO 61830
// if weapon in weapons then
61857: LD_VAR 0 8
61861: PUSH
61862: LD_VAR 0 9
61866: IN
61867: IFFALSE 61894
// begin result := [ i , weapon ] ;
61869: LD_ADDR_VAR 0 3
61873: PUSH
61874: LD_VAR 0 4
61878: PUSH
61879: LD_VAR 0 8
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// exit ;
61888: POP
61889: POP
61890: POP
61891: POP
61892: GO 61902
// end ; end ;
61894: GO 61830
61896: POP
61897: POP
// end ;
61898: GO 61716
61900: POP
61901: POP
// end ;
61902: LD_VAR 0 3
61906: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61907: LD_INT 0
61909: PPUSH
// if not side or side > 8 then
61910: LD_VAR 0 3
61914: NOT
61915: PUSH
61916: LD_VAR 0 3
61920: PUSH
61921: LD_INT 8
61923: GREATER
61924: OR
61925: IFFALSE 61929
// exit ;
61927: GO 61988
// if not range then
61929: LD_VAR 0 4
61933: NOT
61934: IFFALSE 61945
// range := - 12 ;
61936: LD_ADDR_VAR 0 4
61940: PUSH
61941: LD_INT 12
61943: NEG
61944: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61945: LD_VAR 0 1
61949: PPUSH
61950: LD_VAR 0 2
61954: PPUSH
61955: LD_VAR 0 3
61959: PPUSH
61960: LD_VAR 0 4
61964: PPUSH
61965: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61969: LD_VAR 0 1
61973: PPUSH
61974: LD_VAR 0 2
61978: PPUSH
61979: LD_VAR 0 3
61983: PPUSH
61984: CALL_OW 331
// end ;
61988: LD_VAR 0 5
61992: RET
// export function Video ( mode ) ; begin
61993: LD_INT 0
61995: PPUSH
// ingame_video = mode ;
61996: LD_ADDR_OWVAR 52
62000: PUSH
62001: LD_VAR 0 1
62005: ST_TO_ADDR
// interface_hidden = mode ;
62006: LD_ADDR_OWVAR 54
62010: PUSH
62011: LD_VAR 0 1
62015: ST_TO_ADDR
// end ;
62016: LD_VAR 0 2
62020: RET
// export function Join ( array , element ) ; begin
62021: LD_INT 0
62023: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62024: LD_ADDR_VAR 0 3
62028: PUSH
62029: LD_VAR 0 1
62033: PPUSH
62034: LD_VAR 0 1
62038: PUSH
62039: LD_INT 1
62041: PLUS
62042: PPUSH
62043: LD_VAR 0 2
62047: PPUSH
62048: CALL_OW 1
62052: ST_TO_ADDR
// end ;
62053: LD_VAR 0 3
62057: RET
// export function JoinUnion ( array , element ) ; begin
62058: LD_INT 0
62060: PPUSH
// result := array union element ;
62061: LD_ADDR_VAR 0 3
62065: PUSH
62066: LD_VAR 0 1
62070: PUSH
62071: LD_VAR 0 2
62075: UNION
62076: ST_TO_ADDR
// end ;
62077: LD_VAR 0 3
62081: RET
// export function GetBehemoths ( side ) ; begin
62082: LD_INT 0
62084: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62085: LD_ADDR_VAR 0 2
62089: PUSH
62090: LD_INT 22
62092: PUSH
62093: LD_VAR 0 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 31
62104: PUSH
62105: LD_INT 25
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PPUSH
62116: CALL_OW 69
62120: ST_TO_ADDR
// end ;
62121: LD_VAR 0 2
62125: RET
// export function Shuffle ( array ) ; var i , index ; begin
62126: LD_INT 0
62128: PPUSH
62129: PPUSH
62130: PPUSH
// result := [ ] ;
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: EMPTY
62137: ST_TO_ADDR
// if not array then
62138: LD_VAR 0 1
62142: NOT
62143: IFFALSE 62147
// exit ;
62145: GO 62246
// Randomize ;
62147: CALL_OW 10
// for i = array downto 1 do
62151: LD_ADDR_VAR 0 3
62155: PUSH
62156: DOUBLE
62157: LD_VAR 0 1
62161: INC
62162: ST_TO_ADDR
62163: LD_INT 1
62165: PUSH
62166: FOR_DOWNTO
62167: IFFALSE 62244
// begin index := rand ( 1 , array ) ;
62169: LD_ADDR_VAR 0 4
62173: PUSH
62174: LD_INT 1
62176: PPUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 12
62186: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62187: LD_ADDR_VAR 0 2
62191: PUSH
62192: LD_VAR 0 2
62196: PPUSH
62197: LD_VAR 0 2
62201: PUSH
62202: LD_INT 1
62204: PLUS
62205: PPUSH
62206: LD_VAR 0 1
62210: PUSH
62211: LD_VAR 0 4
62215: ARRAY
62216: PPUSH
62217: CALL_OW 2
62221: ST_TO_ADDR
// array := Delete ( array , index ) ;
62222: LD_ADDR_VAR 0 1
62226: PUSH
62227: LD_VAR 0 1
62231: PPUSH
62232: LD_VAR 0 4
62236: PPUSH
62237: CALL_OW 3
62241: ST_TO_ADDR
// end ;
62242: GO 62166
62244: POP
62245: POP
// end ;
62246: LD_VAR 0 2
62250: RET
// export function GetBaseMaterials ( base ) ; begin
62251: LD_INT 0
62253: PPUSH
// result := [ 0 , 0 , 0 ] ;
62254: LD_ADDR_VAR 0 2
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: ST_TO_ADDR
// if not base then
62273: LD_VAR 0 1
62277: NOT
62278: IFFALSE 62282
// exit ;
62280: GO 62331
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62282: LD_ADDR_VAR 0 2
62286: PUSH
62287: LD_VAR 0 1
62291: PPUSH
62292: LD_INT 1
62294: PPUSH
62295: CALL_OW 275
62299: PUSH
62300: LD_VAR 0 1
62304: PPUSH
62305: LD_INT 2
62307: PPUSH
62308: CALL_OW 275
62312: PUSH
62313: LD_VAR 0 1
62317: PPUSH
62318: LD_INT 3
62320: PPUSH
62321: CALL_OW 275
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: ST_TO_ADDR
// end ;
62331: LD_VAR 0 2
62335: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62336: LD_INT 0
62338: PPUSH
62339: PPUSH
// result := array ;
62340: LD_ADDR_VAR 0 3
62344: PUSH
62345: LD_VAR 0 1
62349: ST_TO_ADDR
// if size >= result then
62350: LD_VAR 0 2
62354: PUSH
62355: LD_VAR 0 3
62359: GREATEREQUAL
62360: IFFALSE 62364
// exit ;
62362: GO 62414
// if size then
62364: LD_VAR 0 2
62368: IFFALSE 62414
// for i := array downto size do
62370: LD_ADDR_VAR 0 4
62374: PUSH
62375: DOUBLE
62376: LD_VAR 0 1
62380: INC
62381: ST_TO_ADDR
62382: LD_VAR 0 2
62386: PUSH
62387: FOR_DOWNTO
62388: IFFALSE 62412
// result := Delete ( result , result ) ;
62390: LD_ADDR_VAR 0 3
62394: PUSH
62395: LD_VAR 0 3
62399: PPUSH
62400: LD_VAR 0 3
62404: PPUSH
62405: CALL_OW 3
62409: ST_TO_ADDR
62410: GO 62387
62412: POP
62413: POP
// end ;
62414: LD_VAR 0 3
62418: RET
// export function ComExit ( unit ) ; var tmp ; begin
62419: LD_INT 0
62421: PPUSH
62422: PPUSH
// if not IsInUnit ( unit ) then
62423: LD_VAR 0 1
62427: PPUSH
62428: CALL_OW 310
62432: NOT
62433: IFFALSE 62437
// exit ;
62435: GO 62497
// tmp := IsInUnit ( unit ) ;
62437: LD_ADDR_VAR 0 3
62441: PUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: CALL_OW 310
62451: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62452: LD_VAR 0 3
62456: PPUSH
62457: CALL_OW 247
62461: PUSH
62462: LD_INT 2
62464: EQUAL
62465: IFFALSE 62478
// ComExitVehicle ( unit ) else
62467: LD_VAR 0 1
62471: PPUSH
62472: CALL_OW 121
62476: GO 62487
// ComExitBuilding ( unit ) ;
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL_OW 122
// result := tmp ;
62487: LD_ADDR_VAR 0 2
62491: PUSH
62492: LD_VAR 0 3
62496: ST_TO_ADDR
// end ;
62497: LD_VAR 0 2
62501: RET
// export function ComExitAll ( units ) ; var i ; begin
62502: LD_INT 0
62504: PPUSH
62505: PPUSH
// if not units then
62506: LD_VAR 0 1
62510: NOT
62511: IFFALSE 62515
// exit ;
62513: GO 62541
// for i in units do
62515: LD_ADDR_VAR 0 3
62519: PUSH
62520: LD_VAR 0 1
62524: PUSH
62525: FOR_IN
62526: IFFALSE 62539
// ComExit ( i ) ;
62528: LD_VAR 0 3
62532: PPUSH
62533: CALL 62419 0 1
62537: GO 62525
62539: POP
62540: POP
// end ;
62541: LD_VAR 0 2
62545: RET
// export function ResetHc ; begin
62546: LD_INT 0
62548: PPUSH
// InitHc ;
62549: CALL_OW 19
// hc_importance := 0 ;
62553: LD_ADDR_OWVAR 32
62557: PUSH
62558: LD_INT 0
62560: ST_TO_ADDR
// end ;
62561: LD_VAR 0 1
62565: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62566: LD_INT 0
62568: PPUSH
62569: PPUSH
62570: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62571: LD_ADDR_VAR 0 6
62575: PUSH
62576: LD_VAR 0 1
62580: PUSH
62581: LD_VAR 0 3
62585: PLUS
62586: PUSH
62587: LD_INT 2
62589: DIV
62590: ST_TO_ADDR
// if _x < 0 then
62591: LD_VAR 0 6
62595: PUSH
62596: LD_INT 0
62598: LESS
62599: IFFALSE 62616
// _x := _x * - 1 ;
62601: LD_ADDR_VAR 0 6
62605: PUSH
62606: LD_VAR 0 6
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: MUL
62615: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62616: LD_ADDR_VAR 0 7
62620: PUSH
62621: LD_VAR 0 2
62625: PUSH
62626: LD_VAR 0 4
62630: PLUS
62631: PUSH
62632: LD_INT 2
62634: DIV
62635: ST_TO_ADDR
// if _y < 0 then
62636: LD_VAR 0 7
62640: PUSH
62641: LD_INT 0
62643: LESS
62644: IFFALSE 62661
// _y := _y * - 1 ;
62646: LD_ADDR_VAR 0 7
62650: PUSH
62651: LD_VAR 0 7
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: MUL
62660: ST_TO_ADDR
// result := [ _x , _y ] ;
62661: LD_ADDR_VAR 0 5
62665: PUSH
62666: LD_VAR 0 6
62670: PUSH
62671: LD_VAR 0 7
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: ST_TO_ADDR
// end ;
62680: LD_VAR 0 5
62684: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62685: LD_INT 0
62687: PPUSH
62688: PPUSH
62689: PPUSH
62690: PPUSH
// task := GetTaskList ( unit ) ;
62691: LD_ADDR_VAR 0 7
62695: PUSH
62696: LD_VAR 0 1
62700: PPUSH
62701: CALL_OW 437
62705: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62706: LD_VAR 0 7
62710: NOT
62711: PUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: LD_VAR 0 2
62721: PPUSH
62722: CALL_OW 308
62726: NOT
62727: AND
62728: IFFALSE 62732
// exit ;
62730: GO 62850
// if IsInArea ( unit , area ) then
62732: LD_VAR 0 1
62736: PPUSH
62737: LD_VAR 0 2
62741: PPUSH
62742: CALL_OW 308
62746: IFFALSE 62764
// begin ComMoveToArea ( unit , goAway ) ;
62748: LD_VAR 0 1
62752: PPUSH
62753: LD_VAR 0 3
62757: PPUSH
62758: CALL_OW 113
// exit ;
62762: GO 62850
// end ; if task [ 1 ] [ 1 ] <> M then
62764: LD_VAR 0 7
62768: PUSH
62769: LD_INT 1
62771: ARRAY
62772: PUSH
62773: LD_INT 1
62775: ARRAY
62776: PUSH
62777: LD_STRING M
62779: NONEQUAL
62780: IFFALSE 62784
// exit ;
62782: GO 62850
// x := task [ 1 ] [ 2 ] ;
62784: LD_ADDR_VAR 0 5
62788: PUSH
62789: LD_VAR 0 7
62793: PUSH
62794: LD_INT 1
62796: ARRAY
62797: PUSH
62798: LD_INT 2
62800: ARRAY
62801: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62802: LD_ADDR_VAR 0 6
62806: PUSH
62807: LD_VAR 0 7
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_INT 3
62818: ARRAY
62819: ST_TO_ADDR
// if InArea ( x , y , area ) then
62820: LD_VAR 0 5
62824: PPUSH
62825: LD_VAR 0 6
62829: PPUSH
62830: LD_VAR 0 2
62834: PPUSH
62835: CALL_OW 309
62839: IFFALSE 62850
// ComStop ( unit ) ;
62841: LD_VAR 0 1
62845: PPUSH
62846: CALL_OW 141
// end ;
62850: LD_VAR 0 4
62854: RET
// export function Abs ( value ) ; begin
62855: LD_INT 0
62857: PPUSH
// result := value ;
62858: LD_ADDR_VAR 0 2
62862: PUSH
62863: LD_VAR 0 1
62867: ST_TO_ADDR
// if value < 0 then
62868: LD_VAR 0 1
62872: PUSH
62873: LD_INT 0
62875: LESS
62876: IFFALSE 62893
// result := value * - 1 ;
62878: LD_ADDR_VAR 0 2
62882: PUSH
62883: LD_VAR 0 1
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: MUL
62892: ST_TO_ADDR
// end ;
62893: LD_VAR 0 2
62897: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62898: LD_INT 0
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
62907: PPUSH
// if not unit or not building then
62908: LD_VAR 0 1
62912: NOT
62913: PUSH
62914: LD_VAR 0 2
62918: NOT
62919: OR
62920: IFFALSE 62924
// exit ;
62922: GO 63150
// x := GetX ( building ) ;
62924: LD_ADDR_VAR 0 4
62928: PUSH
62929: LD_VAR 0 2
62933: PPUSH
62934: CALL_OW 250
62938: ST_TO_ADDR
// y := GetY ( building ) ;
62939: LD_ADDR_VAR 0 6
62943: PUSH
62944: LD_VAR 0 2
62948: PPUSH
62949: CALL_OW 251
62953: ST_TO_ADDR
// d := GetDir ( building ) ;
62954: LD_ADDR_VAR 0 8
62958: PUSH
62959: LD_VAR 0 2
62963: PPUSH
62964: CALL_OW 254
62968: ST_TO_ADDR
// r := 4 ;
62969: LD_ADDR_VAR 0 9
62973: PUSH
62974: LD_INT 4
62976: ST_TO_ADDR
// for i := 1 to 5 do
62977: LD_ADDR_VAR 0 10
62981: PUSH
62982: DOUBLE
62983: LD_INT 1
62985: DEC
62986: ST_TO_ADDR
62987: LD_INT 5
62989: PUSH
62990: FOR_TO
62991: IFFALSE 63148
// begin _x := ShiftX ( x , d , r + i ) ;
62993: LD_ADDR_VAR 0 5
62997: PUSH
62998: LD_VAR 0 4
63002: PPUSH
63003: LD_VAR 0 8
63007: PPUSH
63008: LD_VAR 0 9
63012: PUSH
63013: LD_VAR 0 10
63017: PLUS
63018: PPUSH
63019: CALL_OW 272
63023: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63024: LD_ADDR_VAR 0 7
63028: PUSH
63029: LD_VAR 0 6
63033: PPUSH
63034: LD_VAR 0 8
63038: PPUSH
63039: LD_VAR 0 9
63043: PUSH
63044: LD_VAR 0 10
63048: PLUS
63049: PPUSH
63050: CALL_OW 273
63054: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63055: LD_VAR 0 5
63059: PPUSH
63060: LD_VAR 0 7
63064: PPUSH
63065: CALL_OW 488
63069: PUSH
63070: LD_VAR 0 5
63074: PPUSH
63075: LD_VAR 0 7
63079: PPUSH
63080: CALL_OW 428
63084: PPUSH
63085: CALL_OW 247
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: IN
63100: NOT
63101: AND
63102: IFFALSE 63146
// begin ComMoveXY ( unit , _x , _y ) ;
63104: LD_VAR 0 1
63108: PPUSH
63109: LD_VAR 0 5
63113: PPUSH
63114: LD_VAR 0 7
63118: PPUSH
63119: CALL_OW 111
// result := [ _x , _y ] ;
63123: LD_ADDR_VAR 0 3
63127: PUSH
63128: LD_VAR 0 5
63132: PUSH
63133: LD_VAR 0 7
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: ST_TO_ADDR
// exit ;
63142: POP
63143: POP
63144: GO 63150
// end ; end ;
63146: GO 62990
63148: POP
63149: POP
// end ;
63150: LD_VAR 0 3
63154: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63155: LD_INT 0
63157: PPUSH
63158: PPUSH
63159: PPUSH
// result := 0 ;
63160: LD_ADDR_VAR 0 3
63164: PUSH
63165: LD_INT 0
63167: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63168: LD_VAR 0 1
63172: PUSH
63173: LD_INT 0
63175: LESS
63176: PUSH
63177: LD_VAR 0 1
63181: PUSH
63182: LD_INT 8
63184: GREATER
63185: OR
63186: PUSH
63187: LD_VAR 0 2
63191: PUSH
63192: LD_INT 0
63194: LESS
63195: OR
63196: PUSH
63197: LD_VAR 0 2
63201: PUSH
63202: LD_INT 8
63204: GREATER
63205: OR
63206: IFFALSE 63210
// exit ;
63208: GO 63285
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63210: LD_ADDR_VAR 0 4
63214: PUSH
63215: LD_INT 22
63217: PUSH
63218: LD_VAR 0 2
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PPUSH
63227: CALL_OW 69
63231: PUSH
63232: FOR_IN
63233: IFFALSE 63283
// begin un := UnitShoot ( i ) ;
63235: LD_ADDR_VAR 0 5
63239: PUSH
63240: LD_VAR 0 4
63244: PPUSH
63245: CALL_OW 504
63249: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63250: LD_VAR 0 5
63254: PPUSH
63255: CALL_OW 255
63259: PUSH
63260: LD_VAR 0 1
63264: EQUAL
63265: IFFALSE 63281
// begin result := un ;
63267: LD_ADDR_VAR 0 3
63271: PUSH
63272: LD_VAR 0 5
63276: ST_TO_ADDR
// exit ;
63277: POP
63278: POP
63279: GO 63285
// end ; end ;
63281: GO 63232
63283: POP
63284: POP
// end ;
63285: LD_VAR 0 3
63289: RET
// export function GetCargoBay ( units ) ; begin
63290: LD_INT 0
63292: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63293: LD_ADDR_VAR 0 2
63297: PUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 34
63308: PUSH
63309: LD_INT 12
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 34
63318: PUSH
63319: LD_INT 51
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 34
63328: PUSH
63329: LD_INT 32
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 34
63338: PUSH
63339: LD_INT 89
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: PPUSH
63353: CALL_OW 72
63357: ST_TO_ADDR
// end ;
63358: LD_VAR 0 2
63362: RET
// export function Negate ( value ) ; begin
63363: LD_INT 0
63365: PPUSH
// result := not value ;
63366: LD_ADDR_VAR 0 2
63370: PUSH
63371: LD_VAR 0 1
63375: NOT
63376: ST_TO_ADDR
// end ;
63377: LD_VAR 0 2
63381: RET
// export function Inc ( value ) ; begin
63382: LD_INT 0
63384: PPUSH
// result := value + 1 ;
63385: LD_ADDR_VAR 0 2
63389: PUSH
63390: LD_VAR 0 1
63394: PUSH
63395: LD_INT 1
63397: PLUS
63398: ST_TO_ADDR
// end ;
63399: LD_VAR 0 2
63403: RET
// export function Dec ( value ) ; begin
63404: LD_INT 0
63406: PPUSH
// result := value - 1 ;
63407: LD_ADDR_VAR 0 2
63411: PUSH
63412: LD_VAR 0 1
63416: PUSH
63417: LD_INT 1
63419: MINUS
63420: ST_TO_ADDR
// end ;
63421: LD_VAR 0 2
63425: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63426: LD_INT 0
63428: PPUSH
63429: PPUSH
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
63434: PPUSH
63435: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63436: LD_VAR 0 1
63440: PPUSH
63441: LD_VAR 0 2
63445: PPUSH
63446: CALL_OW 488
63450: NOT
63451: PUSH
63452: LD_VAR 0 3
63456: PPUSH
63457: LD_VAR 0 4
63461: PPUSH
63462: CALL_OW 488
63466: NOT
63467: OR
63468: IFFALSE 63481
// begin result := - 1 ;
63470: LD_ADDR_VAR 0 5
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: ST_TO_ADDR
// exit ;
63479: GO 63716
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63481: LD_ADDR_VAR 0 12
63485: PUSH
63486: LD_VAR 0 1
63490: PPUSH
63491: LD_VAR 0 2
63495: PPUSH
63496: LD_VAR 0 3
63500: PPUSH
63501: LD_VAR 0 4
63505: PPUSH
63506: CALL 62566 0 4
63510: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63511: LD_ADDR_VAR 0 11
63515: PUSH
63516: LD_VAR 0 1
63520: PPUSH
63521: LD_VAR 0 2
63525: PPUSH
63526: LD_VAR 0 12
63530: PUSH
63531: LD_INT 1
63533: ARRAY
63534: PPUSH
63535: LD_VAR 0 12
63539: PUSH
63540: LD_INT 2
63542: ARRAY
63543: PPUSH
63544: CALL_OW 298
63548: ST_TO_ADDR
// distance := 9999 ;
63549: LD_ADDR_VAR 0 10
63553: PUSH
63554: LD_INT 9999
63556: ST_TO_ADDR
// for i := 0 to 5 do
63557: LD_ADDR_VAR 0 6
63561: PUSH
63562: DOUBLE
63563: LD_INT 0
63565: DEC
63566: ST_TO_ADDR
63567: LD_INT 5
63569: PUSH
63570: FOR_TO
63571: IFFALSE 63714
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63573: LD_ADDR_VAR 0 7
63577: PUSH
63578: LD_VAR 0 1
63582: PPUSH
63583: LD_VAR 0 6
63587: PPUSH
63588: LD_VAR 0 11
63592: PPUSH
63593: CALL_OW 272
63597: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63598: LD_ADDR_VAR 0 8
63602: PUSH
63603: LD_VAR 0 2
63607: PPUSH
63608: LD_VAR 0 6
63612: PPUSH
63613: LD_VAR 0 11
63617: PPUSH
63618: CALL_OW 273
63622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63623: LD_VAR 0 7
63627: PPUSH
63628: LD_VAR 0 8
63632: PPUSH
63633: CALL_OW 488
63637: NOT
63638: IFFALSE 63642
// continue ;
63640: GO 63570
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63642: LD_ADDR_VAR 0 9
63646: PUSH
63647: LD_VAR 0 12
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PPUSH
63656: LD_VAR 0 12
63660: PUSH
63661: LD_INT 2
63663: ARRAY
63664: PPUSH
63665: LD_VAR 0 7
63669: PPUSH
63670: LD_VAR 0 8
63674: PPUSH
63675: CALL_OW 298
63679: ST_TO_ADDR
// if tmp < distance then
63680: LD_VAR 0 9
63684: PUSH
63685: LD_VAR 0 10
63689: LESS
63690: IFFALSE 63712
// begin result := i ;
63692: LD_ADDR_VAR 0 5
63696: PUSH
63697: LD_VAR 0 6
63701: ST_TO_ADDR
// distance := tmp ;
63702: LD_ADDR_VAR 0 10
63706: PUSH
63707: LD_VAR 0 9
63711: ST_TO_ADDR
// end ; end ;
63712: GO 63570
63714: POP
63715: POP
// end ;
63716: LD_VAR 0 5
63720: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63721: LD_INT 0
63723: PPUSH
63724: PPUSH
// if not driver or not IsInUnit ( driver ) then
63725: LD_VAR 0 1
63729: NOT
63730: PUSH
63731: LD_VAR 0 1
63735: PPUSH
63736: CALL_OW 310
63740: NOT
63741: OR
63742: IFFALSE 63746
// exit ;
63744: GO 63836
// vehicle := IsInUnit ( driver ) ;
63746: LD_ADDR_VAR 0 3
63750: PUSH
63751: LD_VAR 0 1
63755: PPUSH
63756: CALL_OW 310
63760: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63761: LD_VAR 0 1
63765: PPUSH
63766: LD_STRING \
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: LD_STRING E
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_VAR 0 3
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PPUSH
63832: CALL_OW 446
// end ;
63836: LD_VAR 0 2
63840: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63841: LD_INT 0
63843: PPUSH
63844: PPUSH
// if not driver or not IsInUnit ( driver ) then
63845: LD_VAR 0 1
63849: NOT
63850: PUSH
63851: LD_VAR 0 1
63855: PPUSH
63856: CALL_OW 310
63860: NOT
63861: OR
63862: IFFALSE 63866
// exit ;
63864: GO 63956
// vehicle := IsInUnit ( driver ) ;
63866: LD_ADDR_VAR 0 3
63870: PUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: CALL_OW 310
63880: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63881: LD_VAR 0 1
63885: PPUSH
63886: LD_STRING \
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: PUSH
63916: LD_STRING E
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_VAR 0 3
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PPUSH
63952: CALL_OW 447
// end ;
63956: LD_VAR 0 2
63960: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63961: LD_INT 0
63963: PPUSH
63964: PPUSH
63965: PPUSH
// tmp := [ ] ;
63966: LD_ADDR_VAR 0 5
63970: PUSH
63971: EMPTY
63972: ST_TO_ADDR
// for i in units do
63973: LD_ADDR_VAR 0 4
63977: PUSH
63978: LD_VAR 0 1
63982: PUSH
63983: FOR_IN
63984: IFFALSE 64022
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63986: LD_ADDR_VAR 0 5
63990: PUSH
63991: LD_VAR 0 5
63995: PPUSH
63996: LD_VAR 0 5
64000: PUSH
64001: LD_INT 1
64003: PLUS
64004: PPUSH
64005: LD_VAR 0 4
64009: PPUSH
64010: CALL_OW 256
64014: PPUSH
64015: CALL_OW 2
64019: ST_TO_ADDR
64020: GO 63983
64022: POP
64023: POP
// if not tmp then
64024: LD_VAR 0 5
64028: NOT
64029: IFFALSE 64033
// exit ;
64031: GO 64081
// if asc then
64033: LD_VAR 0 2
64037: IFFALSE 64061
// result := SortListByListAsc ( units , tmp ) else
64039: LD_ADDR_VAR 0 3
64043: PUSH
64044: LD_VAR 0 1
64048: PPUSH
64049: LD_VAR 0 5
64053: PPUSH
64054: CALL_OW 76
64058: ST_TO_ADDR
64059: GO 64081
// result := SortListByListDesc ( units , tmp ) ;
64061: LD_ADDR_VAR 0 3
64065: PUSH
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_VAR 0 5
64075: PPUSH
64076: CALL_OW 77
64080: ST_TO_ADDR
// end ;
64081: LD_VAR 0 3
64085: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64086: LD_INT 0
64088: PPUSH
64089: PPUSH
// task := GetTaskList ( mech ) ;
64090: LD_ADDR_VAR 0 4
64094: PUSH
64095: LD_VAR 0 1
64099: PPUSH
64100: CALL_OW 437
64104: ST_TO_ADDR
// if not task then
64105: LD_VAR 0 4
64109: NOT
64110: IFFALSE 64114
// exit ;
64112: GO 64156
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_VAR 0 4
64123: PUSH
64124: LD_INT 1
64126: ARRAY
64127: PUSH
64128: LD_INT 1
64130: ARRAY
64131: PUSH
64132: LD_STRING r
64134: EQUAL
64135: PUSH
64136: LD_VAR 0 4
64140: PUSH
64141: LD_INT 1
64143: ARRAY
64144: PUSH
64145: LD_INT 4
64147: ARRAY
64148: PUSH
64149: LD_VAR 0 2
64153: EQUAL
64154: AND
64155: ST_TO_ADDR
// end ;
64156: LD_VAR 0 3
64160: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64161: LD_INT 0
64163: PPUSH
// SetDir ( unit , d ) ;
64164: LD_VAR 0 1
64168: PPUSH
64169: LD_VAR 0 4
64173: PPUSH
64174: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64178: LD_VAR 0 1
64182: PPUSH
64183: LD_VAR 0 2
64187: PPUSH
64188: LD_VAR 0 3
64192: PPUSH
64193: LD_VAR 0 5
64197: PPUSH
64198: CALL_OW 48
// end ;
64202: LD_VAR 0 6
64206: RET
// export function ToNaturalNumber ( number ) ; begin
64207: LD_INT 0
64209: PPUSH
// result := number div 1 ;
64210: LD_ADDR_VAR 0 2
64214: PUSH
64215: LD_VAR 0 1
64219: PUSH
64220: LD_INT 1
64222: DIV
64223: ST_TO_ADDR
// if number < 0 then
64224: LD_VAR 0 1
64228: PUSH
64229: LD_INT 0
64231: LESS
64232: IFFALSE 64242
// result := 0 ;
64234: LD_ADDR_VAR 0 2
64238: PUSH
64239: LD_INT 0
64241: ST_TO_ADDR
// end ;
64242: LD_VAR 0 2
64246: RET
// export function SortByClass ( units , class ) ; var un ; begin
64247: LD_INT 0
64249: PPUSH
64250: PPUSH
// if not units or not class then
64251: LD_VAR 0 1
64255: NOT
64256: PUSH
64257: LD_VAR 0 2
64261: NOT
64262: OR
64263: IFFALSE 64267
// exit ;
64265: GO 64362
// result := [ ] ;
64267: LD_ADDR_VAR 0 3
64271: PUSH
64272: EMPTY
64273: ST_TO_ADDR
// for un in units do
64274: LD_ADDR_VAR 0 4
64278: PUSH
64279: LD_VAR 0 1
64283: PUSH
64284: FOR_IN
64285: IFFALSE 64360
// if GetClass ( un ) = class then
64287: LD_VAR 0 4
64291: PPUSH
64292: CALL_OW 257
64296: PUSH
64297: LD_VAR 0 2
64301: EQUAL
64302: IFFALSE 64329
// result := Insert ( result , 1 , un ) else
64304: LD_ADDR_VAR 0 3
64308: PUSH
64309: LD_VAR 0 3
64313: PPUSH
64314: LD_INT 1
64316: PPUSH
64317: LD_VAR 0 4
64321: PPUSH
64322: CALL_OW 2
64326: ST_TO_ADDR
64327: GO 64358
// result := Replace ( result , result + 1 , un ) ;
64329: LD_ADDR_VAR 0 3
64333: PUSH
64334: LD_VAR 0 3
64338: PPUSH
64339: LD_VAR 0 3
64343: PUSH
64344: LD_INT 1
64346: PLUS
64347: PPUSH
64348: LD_VAR 0 4
64352: PPUSH
64353: CALL_OW 1
64357: ST_TO_ADDR
64358: GO 64284
64360: POP
64361: POP
// end ;
64362: LD_VAR 0 3
64366: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64367: LD_INT 0
64369: PPUSH
64370: PPUSH
64371: PPUSH
64372: PPUSH
64373: PPUSH
64374: PPUSH
64375: PPUSH
// result := [ ] ;
64376: LD_ADDR_VAR 0 4
64380: PUSH
64381: EMPTY
64382: ST_TO_ADDR
// if x - r < 0 then
64383: LD_VAR 0 1
64387: PUSH
64388: LD_VAR 0 3
64392: MINUS
64393: PUSH
64394: LD_INT 0
64396: LESS
64397: IFFALSE 64409
// min_x := 0 else
64399: LD_ADDR_VAR 0 8
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
64407: GO 64425
// min_x := x - r ;
64409: LD_ADDR_VAR 0 8
64413: PUSH
64414: LD_VAR 0 1
64418: PUSH
64419: LD_VAR 0 3
64423: MINUS
64424: ST_TO_ADDR
// if y - r < 0 then
64425: LD_VAR 0 2
64429: PUSH
64430: LD_VAR 0 3
64434: MINUS
64435: PUSH
64436: LD_INT 0
64438: LESS
64439: IFFALSE 64451
// min_y := 0 else
64441: LD_ADDR_VAR 0 7
64445: PUSH
64446: LD_INT 0
64448: ST_TO_ADDR
64449: GO 64467
// min_y := y - r ;
64451: LD_ADDR_VAR 0 7
64455: PUSH
64456: LD_VAR 0 2
64460: PUSH
64461: LD_VAR 0 3
64465: MINUS
64466: ST_TO_ADDR
// max_x := x + r ;
64467: LD_ADDR_VAR 0 9
64471: PUSH
64472: LD_VAR 0 1
64476: PUSH
64477: LD_VAR 0 3
64481: PLUS
64482: ST_TO_ADDR
// max_y := y + r ;
64483: LD_ADDR_VAR 0 10
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_VAR 0 3
64497: PLUS
64498: ST_TO_ADDR
// for _x = min_x to max_x do
64499: LD_ADDR_VAR 0 5
64503: PUSH
64504: DOUBLE
64505: LD_VAR 0 8
64509: DEC
64510: ST_TO_ADDR
64511: LD_VAR 0 9
64515: PUSH
64516: FOR_TO
64517: IFFALSE 64618
// for _y = min_y to max_y do
64519: LD_ADDR_VAR 0 6
64523: PUSH
64524: DOUBLE
64525: LD_VAR 0 7
64529: DEC
64530: ST_TO_ADDR
64531: LD_VAR 0 10
64535: PUSH
64536: FOR_TO
64537: IFFALSE 64614
// begin if not ValidHex ( _x , _y ) then
64539: LD_VAR 0 5
64543: PPUSH
64544: LD_VAR 0 6
64548: PPUSH
64549: CALL_OW 488
64553: NOT
64554: IFFALSE 64558
// continue ;
64556: GO 64536
// if GetResourceTypeXY ( _x , _y ) then
64558: LD_VAR 0 5
64562: PPUSH
64563: LD_VAR 0 6
64567: PPUSH
64568: CALL_OW 283
64572: IFFALSE 64612
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64574: LD_ADDR_VAR 0 4
64578: PUSH
64579: LD_VAR 0 4
64583: PPUSH
64584: LD_VAR 0 4
64588: PUSH
64589: LD_INT 1
64591: PLUS
64592: PPUSH
64593: LD_VAR 0 5
64597: PUSH
64598: LD_VAR 0 6
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PPUSH
64607: CALL_OW 1
64611: ST_TO_ADDR
// end ;
64612: GO 64536
64614: POP
64615: POP
64616: GO 64516
64618: POP
64619: POP
// end ;
64620: LD_VAR 0 4
64624: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64625: LD_INT 0
64627: PPUSH
64628: PPUSH
64629: PPUSH
64630: PPUSH
64631: PPUSH
64632: PPUSH
64633: PPUSH
64634: PPUSH
// if not units then
64635: LD_VAR 0 1
64639: NOT
64640: IFFALSE 64644
// exit ;
64642: GO 65168
// result := UnitFilter ( units , [ f_ok ] ) ;
64644: LD_ADDR_VAR 0 3
64648: PUSH
64649: LD_VAR 0 1
64653: PPUSH
64654: LD_INT 50
64656: PUSH
64657: EMPTY
64658: LIST
64659: PPUSH
64660: CALL_OW 72
64664: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64665: LD_ADDR_VAR 0 8
64669: PUSH
64670: LD_VAR 0 1
64674: PUSH
64675: LD_INT 1
64677: ARRAY
64678: PPUSH
64679: CALL_OW 255
64683: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64684: LD_ADDR_VAR 0 10
64688: PUSH
64689: LD_INT 29
64691: PUSH
64692: LD_INT 91
64694: PUSH
64695: LD_INT 49
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// if not result then
64703: LD_VAR 0 3
64707: NOT
64708: IFFALSE 64712
// exit ;
64710: GO 65168
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64712: LD_ADDR_VAR 0 5
64716: PUSH
64717: LD_INT 81
64719: PUSH
64720: LD_VAR 0 8
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PPUSH
64729: CALL_OW 69
64733: ST_TO_ADDR
// for i in result do
64734: LD_ADDR_VAR 0 4
64738: PUSH
64739: LD_VAR 0 3
64743: PUSH
64744: FOR_IN
64745: IFFALSE 65166
// begin tag := GetTag ( i ) + 1 ;
64747: LD_ADDR_VAR 0 9
64751: PUSH
64752: LD_VAR 0 4
64756: PPUSH
64757: CALL_OW 110
64761: PUSH
64762: LD_INT 1
64764: PLUS
64765: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64766: LD_ADDR_VAR 0 7
64770: PUSH
64771: LD_VAR 0 4
64775: PPUSH
64776: CALL_OW 250
64780: PPUSH
64781: LD_VAR 0 4
64785: PPUSH
64786: CALL_OW 251
64790: PPUSH
64791: LD_INT 6
64793: PPUSH
64794: CALL 64367 0 3
64798: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64799: LD_VAR 0 4
64803: PPUSH
64804: CALL_OW 247
64808: PUSH
64809: LD_INT 2
64811: EQUAL
64812: PUSH
64813: LD_VAR 0 7
64817: AND
64818: PUSH
64819: LD_VAR 0 4
64823: PPUSH
64824: CALL_OW 264
64828: PUSH
64829: LD_VAR 0 10
64833: IN
64834: NOT
64835: AND
64836: IFFALSE 64875
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64838: LD_VAR 0 4
64842: PPUSH
64843: LD_VAR 0 7
64847: PUSH
64848: LD_INT 1
64850: ARRAY
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: PPUSH
64856: LD_VAR 0 7
64860: PUSH
64861: LD_INT 1
64863: ARRAY
64864: PUSH
64865: LD_INT 2
64867: ARRAY
64868: PPUSH
64869: CALL_OW 116
64873: GO 65164
// if path > tag then
64875: LD_VAR 0 2
64879: PUSH
64880: LD_VAR 0 9
64884: GREATER
64885: IFFALSE 65093
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64887: LD_ADDR_VAR 0 6
64891: PUSH
64892: LD_VAR 0 5
64896: PPUSH
64897: LD_INT 91
64899: PUSH
64900: LD_VAR 0 4
64904: PUSH
64905: LD_INT 8
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: PPUSH
64913: CALL_OW 72
64917: ST_TO_ADDR
// if nearEnemy then
64918: LD_VAR 0 6
64922: IFFALSE 64991
// begin if GetWeapon ( i ) = ru_time_lapser then
64924: LD_VAR 0 4
64928: PPUSH
64929: CALL_OW 264
64933: PUSH
64934: LD_INT 49
64936: EQUAL
64937: IFFALSE 64965
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64939: LD_VAR 0 4
64943: PPUSH
64944: LD_VAR 0 6
64948: PPUSH
64949: LD_VAR 0 4
64953: PPUSH
64954: CALL_OW 74
64958: PPUSH
64959: CALL_OW 112
64963: GO 64989
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64965: LD_VAR 0 4
64969: PPUSH
64970: LD_VAR 0 6
64974: PPUSH
64975: LD_VAR 0 4
64979: PPUSH
64980: CALL_OW 74
64984: PPUSH
64985: CALL_OW 115
// end else
64989: GO 65091
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64991: LD_VAR 0 4
64995: PPUSH
64996: LD_VAR 0 2
65000: PUSH
65001: LD_VAR 0 9
65005: ARRAY
65006: PUSH
65007: LD_INT 1
65009: ARRAY
65010: PPUSH
65011: LD_VAR 0 2
65015: PUSH
65016: LD_VAR 0 9
65020: ARRAY
65021: PUSH
65022: LD_INT 2
65024: ARRAY
65025: PPUSH
65026: CALL_OW 297
65030: PUSH
65031: LD_INT 6
65033: GREATER
65034: IFFALSE 65077
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65036: LD_VAR 0 4
65040: PPUSH
65041: LD_VAR 0 2
65045: PUSH
65046: LD_VAR 0 9
65050: ARRAY
65051: PUSH
65052: LD_INT 1
65054: ARRAY
65055: PPUSH
65056: LD_VAR 0 2
65060: PUSH
65061: LD_VAR 0 9
65065: ARRAY
65066: PUSH
65067: LD_INT 2
65069: ARRAY
65070: PPUSH
65071: CALL_OW 114
65075: GO 65091
// SetTag ( i , tag ) ;
65077: LD_VAR 0 4
65081: PPUSH
65082: LD_VAR 0 9
65086: PPUSH
65087: CALL_OW 109
// end else
65091: GO 65164
// if enemy then
65093: LD_VAR 0 5
65097: IFFALSE 65164
// begin if GetWeapon ( i ) = ru_time_lapser then
65099: LD_VAR 0 4
65103: PPUSH
65104: CALL_OW 264
65108: PUSH
65109: LD_INT 49
65111: EQUAL
65112: IFFALSE 65140
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65114: LD_VAR 0 4
65118: PPUSH
65119: LD_VAR 0 5
65123: PPUSH
65124: LD_VAR 0 4
65128: PPUSH
65129: CALL_OW 74
65133: PPUSH
65134: CALL_OW 112
65138: GO 65164
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65140: LD_VAR 0 4
65144: PPUSH
65145: LD_VAR 0 5
65149: PPUSH
65150: LD_VAR 0 4
65154: PPUSH
65155: CALL_OW 74
65159: PPUSH
65160: CALL_OW 115
// end ; end ;
65164: GO 64744
65166: POP
65167: POP
// end ;
65168: LD_VAR 0 3
65172: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65173: LD_INT 0
65175: PPUSH
65176: PPUSH
65177: PPUSH
// if not unit or IsInUnit ( unit ) then
65178: LD_VAR 0 1
65182: NOT
65183: PUSH
65184: LD_VAR 0 1
65188: PPUSH
65189: CALL_OW 310
65193: OR
65194: IFFALSE 65198
// exit ;
65196: GO 65289
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65198: LD_ADDR_VAR 0 4
65202: PUSH
65203: LD_VAR 0 1
65207: PPUSH
65208: CALL_OW 250
65212: PPUSH
65213: LD_VAR 0 2
65217: PPUSH
65218: LD_INT 1
65220: PPUSH
65221: CALL_OW 272
65225: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65226: LD_ADDR_VAR 0 5
65230: PUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: CALL_OW 251
65240: PPUSH
65241: LD_VAR 0 2
65245: PPUSH
65246: LD_INT 1
65248: PPUSH
65249: CALL_OW 273
65253: ST_TO_ADDR
// if ValidHex ( x , y ) then
65254: LD_VAR 0 4
65258: PPUSH
65259: LD_VAR 0 5
65263: PPUSH
65264: CALL_OW 488
65268: IFFALSE 65289
// ComTurnXY ( unit , x , y ) ;
65270: LD_VAR 0 1
65274: PPUSH
65275: LD_VAR 0 4
65279: PPUSH
65280: LD_VAR 0 5
65284: PPUSH
65285: CALL_OW 118
// end ;
65289: LD_VAR 0 3
65293: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65294: LD_INT 0
65296: PPUSH
65297: PPUSH
// result := false ;
65298: LD_ADDR_VAR 0 3
65302: PUSH
65303: LD_INT 0
65305: ST_TO_ADDR
// if not units then
65306: LD_VAR 0 2
65310: NOT
65311: IFFALSE 65315
// exit ;
65313: GO 65360
// for i in units do
65315: LD_ADDR_VAR 0 4
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: FOR_IN
65326: IFFALSE 65358
// if See ( side , i ) then
65328: LD_VAR 0 1
65332: PPUSH
65333: LD_VAR 0 4
65337: PPUSH
65338: CALL_OW 292
65342: IFFALSE 65356
// begin result := true ;
65344: LD_ADDR_VAR 0 3
65348: PUSH
65349: LD_INT 1
65351: ST_TO_ADDR
// exit ;
65352: POP
65353: POP
65354: GO 65360
// end ;
65356: GO 65325
65358: POP
65359: POP
// end ;
65360: LD_VAR 0 3
65364: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65365: LD_INT 0
65367: PPUSH
65368: PPUSH
65369: PPUSH
65370: PPUSH
// if not unit or not points then
65371: LD_VAR 0 1
65375: NOT
65376: PUSH
65377: LD_VAR 0 2
65381: NOT
65382: OR
65383: IFFALSE 65387
// exit ;
65385: GO 65477
// dist := 99999 ;
65387: LD_ADDR_VAR 0 5
65391: PUSH
65392: LD_INT 99999
65394: ST_TO_ADDR
// for i in points do
65395: LD_ADDR_VAR 0 4
65399: PUSH
65400: LD_VAR 0 2
65404: PUSH
65405: FOR_IN
65406: IFFALSE 65475
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65408: LD_ADDR_VAR 0 6
65412: PUSH
65413: LD_VAR 0 1
65417: PPUSH
65418: LD_VAR 0 4
65422: PUSH
65423: LD_INT 1
65425: ARRAY
65426: PPUSH
65427: LD_VAR 0 4
65431: PUSH
65432: LD_INT 2
65434: ARRAY
65435: PPUSH
65436: CALL_OW 297
65440: ST_TO_ADDR
// if tmpDist < dist then
65441: LD_VAR 0 6
65445: PUSH
65446: LD_VAR 0 5
65450: LESS
65451: IFFALSE 65473
// begin result := i ;
65453: LD_ADDR_VAR 0 3
65457: PUSH
65458: LD_VAR 0 4
65462: ST_TO_ADDR
// dist := tmpDist ;
65463: LD_ADDR_VAR 0 5
65467: PUSH
65468: LD_VAR 0 6
65472: ST_TO_ADDR
// end ; end ;
65473: GO 65405
65475: POP
65476: POP
// end ;
65477: LD_VAR 0 3
65481: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65482: LD_INT 0
65484: PPUSH
// uc_side := side ;
65485: LD_ADDR_OWVAR 20
65489: PUSH
65490: LD_VAR 0 1
65494: ST_TO_ADDR
// uc_nation := 3 ;
65495: LD_ADDR_OWVAR 21
65499: PUSH
65500: LD_INT 3
65502: ST_TO_ADDR
// vc_chassis := 25 ;
65503: LD_ADDR_OWVAR 37
65507: PUSH
65508: LD_INT 25
65510: ST_TO_ADDR
// vc_engine := engine_siberite ;
65511: LD_ADDR_OWVAR 39
65515: PUSH
65516: LD_INT 3
65518: ST_TO_ADDR
// vc_control := control_computer ;
65519: LD_ADDR_OWVAR 38
65523: PUSH
65524: LD_INT 3
65526: ST_TO_ADDR
// vc_weapon := 59 ;
65527: LD_ADDR_OWVAR 40
65531: PUSH
65532: LD_INT 59
65534: ST_TO_ADDR
// result := CreateVehicle ;
65535: LD_ADDR_VAR 0 5
65539: PUSH
65540: CALL_OW 45
65544: ST_TO_ADDR
// SetDir ( result , d ) ;
65545: LD_VAR 0 5
65549: PPUSH
65550: LD_VAR 0 4
65554: PPUSH
65555: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65559: LD_VAR 0 5
65563: PPUSH
65564: LD_VAR 0 2
65568: PPUSH
65569: LD_VAR 0 3
65573: PPUSH
65574: LD_INT 0
65576: PPUSH
65577: CALL_OW 48
// end ;
65581: LD_VAR 0 5
65585: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65586: LD_INT 0
65588: PPUSH
65589: PPUSH
65590: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65591: LD_ADDR_VAR 0 2
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65614: LD_VAR 0 1
65618: NOT
65619: PUSH
65620: LD_VAR 0 1
65624: PPUSH
65625: CALL_OW 264
65629: PUSH
65630: LD_INT 12
65632: PUSH
65633: LD_INT 51
65635: PUSH
65636: LD_INT 32
65638: PUSH
65639: LD_INT 89
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: IN
65648: NOT
65649: OR
65650: IFFALSE 65654
// exit ;
65652: GO 65752
// for i := 1 to 3 do
65654: LD_ADDR_VAR 0 3
65658: PUSH
65659: DOUBLE
65660: LD_INT 1
65662: DEC
65663: ST_TO_ADDR
65664: LD_INT 3
65666: PUSH
65667: FOR_TO
65668: IFFALSE 65750
// begin tmp := GetCargo ( cargo , i ) ;
65670: LD_ADDR_VAR 0 4
65674: PUSH
65675: LD_VAR 0 1
65679: PPUSH
65680: LD_VAR 0 3
65684: PPUSH
65685: CALL_OW 289
65689: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65690: LD_ADDR_VAR 0 2
65694: PUSH
65695: LD_VAR 0 2
65699: PPUSH
65700: LD_VAR 0 3
65704: PPUSH
65705: LD_VAR 0 4
65709: PPUSH
65710: CALL_OW 1
65714: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65715: LD_ADDR_VAR 0 2
65719: PUSH
65720: LD_VAR 0 2
65724: PPUSH
65725: LD_INT 4
65727: PPUSH
65728: LD_VAR 0 2
65732: PUSH
65733: LD_INT 4
65735: ARRAY
65736: PUSH
65737: LD_VAR 0 4
65741: PLUS
65742: PPUSH
65743: CALL_OW 1
65747: ST_TO_ADDR
// end ;
65748: GO 65667
65750: POP
65751: POP
// end ;
65752: LD_VAR 0 2
65756: RET
// export function Length ( array ) ; begin
65757: LD_INT 0
65759: PPUSH
// result := array + 0 ;
65760: LD_ADDR_VAR 0 2
65764: PUSH
65765: LD_VAR 0 1
65769: PUSH
65770: LD_INT 0
65772: PLUS
65773: ST_TO_ADDR
// end ;
65774: LD_VAR 0 2
65778: RET
// export function PrepareArray ( array ) ; begin
65779: LD_INT 0
65781: PPUSH
// result := array diff 0 ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 1
65791: PUSH
65792: LD_INT 0
65794: DIFF
65795: ST_TO_ADDR
// if not result [ 1 ] then
65796: LD_VAR 0 2
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: NOT
65805: IFFALSE 65825
// result := Delete ( result , 1 ) ;
65807: LD_ADDR_VAR 0 2
65811: PUSH
65812: LD_VAR 0 2
65816: PPUSH
65817: LD_INT 1
65819: PPUSH
65820: CALL_OW 3
65824: ST_TO_ADDR
// end ;
65825: LD_VAR 0 2
65829: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65830: LD_INT 0
65832: PPUSH
65833: PPUSH
65834: PPUSH
65835: PPUSH
// sibRocketRange := 25 ;
65836: LD_ADDR_VAR 0 6
65840: PUSH
65841: LD_INT 25
65843: ST_TO_ADDR
// result := false ;
65844: LD_ADDR_VAR 0 4
65848: PUSH
65849: LD_INT 0
65851: ST_TO_ADDR
// for i := 0 to 5 do
65852: LD_ADDR_VAR 0 5
65856: PUSH
65857: DOUBLE
65858: LD_INT 0
65860: DEC
65861: ST_TO_ADDR
65862: LD_INT 5
65864: PUSH
65865: FOR_TO
65866: IFFALSE 65933
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65868: LD_VAR 0 1
65872: PPUSH
65873: LD_VAR 0 5
65877: PPUSH
65878: LD_VAR 0 6
65882: PPUSH
65883: CALL_OW 272
65887: PPUSH
65888: LD_VAR 0 2
65892: PPUSH
65893: LD_VAR 0 5
65897: PPUSH
65898: LD_VAR 0 6
65902: PPUSH
65903: CALL_OW 273
65907: PPUSH
65908: LD_VAR 0 3
65912: PPUSH
65913: CALL_OW 309
65917: IFFALSE 65931
// begin result := true ;
65919: LD_ADDR_VAR 0 4
65923: PUSH
65924: LD_INT 1
65926: ST_TO_ADDR
// exit ;
65927: POP
65928: POP
65929: GO 65935
// end ;
65931: GO 65865
65933: POP
65934: POP
// end ;
65935: LD_VAR 0 4
65939: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65940: LD_INT 0
65942: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65943: LD_VAR 0 1
65947: PPUSH
65948: LD_VAR 0 2
65952: PPUSH
65953: LD_INT 0
65955: PPUSH
65956: LD_INT 0
65958: PPUSH
65959: LD_INT 1
65961: PPUSH
65962: LD_INT 0
65964: PPUSH
65965: CALL_OW 587
// end ; end_of_file
65969: LD_VAR 0 3
65973: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65974: LD_VAR 0 1
65978: PUSH
65979: LD_INT 200
65981: DOUBLE
65982: GREATEREQUAL
65983: IFFALSE 65991
65985: LD_INT 299
65987: DOUBLE
65988: LESSEQUAL
65989: IFTRUE 65993
65991: GO 66025
65993: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65994: LD_VAR 0 1
65998: PPUSH
65999: LD_VAR 0 2
66003: PPUSH
66004: LD_VAR 0 3
66008: PPUSH
66009: LD_VAR 0 4
66013: PPUSH
66014: LD_VAR 0 5
66018: PPUSH
66019: CALL 20640 0 5
66023: GO 66102
66025: LD_INT 300
66027: DOUBLE
66028: GREATEREQUAL
66029: IFFALSE 66037
66031: LD_INT 399
66033: DOUBLE
66034: LESSEQUAL
66035: IFTRUE 66039
66037: GO 66101
66039: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66040: LD_VAR 0 1
66044: PPUSH
66045: LD_VAR 0 2
66049: PPUSH
66050: LD_VAR 0 3
66054: PPUSH
66055: LD_VAR 0 4
66059: PPUSH
66060: LD_VAR 0 5
66064: PPUSH
66065: LD_VAR 0 6
66069: PPUSH
66070: LD_VAR 0 7
66074: PPUSH
66075: LD_VAR 0 8
66079: PPUSH
66080: LD_VAR 0 9
66084: PPUSH
66085: LD_VAR 0 10
66089: PPUSH
66090: LD_VAR 0 11
66094: PPUSH
66095: CALL 16973 0 11
66099: GO 66102
66101: POP
// end ;
66102: PPOPN 11
66104: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66105: LD_VAR 0 1
66109: PPUSH
66110: LD_VAR 0 2
66114: PPUSH
66115: LD_VAR 0 3
66119: PPUSH
66120: LD_VAR 0 4
66124: PPUSH
66125: LD_VAR 0 5
66129: PPUSH
66130: CALL 20376 0 5
// end ; end_of_file
66134: PPOPN 5
66136: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66137: LD_VAR 0 1
66141: PPUSH
66142: LD_VAR 0 2
66146: PPUSH
66147: LD_VAR 0 3
66151: PPUSH
66152: LD_VAR 0 4
66156: PPUSH
66157: LD_VAR 0 5
66161: PPUSH
66162: LD_VAR 0 6
66166: PPUSH
66167: CALL 4593 0 6
// end ;
66171: PPOPN 6
66173: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66174: LD_INT 0
66176: PPUSH
// begin if not units then
66177: LD_VAR 0 1
66181: NOT
66182: IFFALSE 66186
// exit ;
66184: GO 66186
// end ;
66186: PPOPN 7
66188: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66189: CALL 4487 0 0
// end ;
66193: PPOPN 1
66195: END
