// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
  11: LD_INT 0
  13: PPUSH
  14: LD_INT 0
  16: PPUSH
  17: LD_INT 7
  19: PPUSH
  20: LD_INT 37963
  22: NEG
  23: PPUSH
  24: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  28: LD_INT 0
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 7
  36: PPUSH
  37: CALL_OW 331
// PrepareBase ;
  41: CALL 514 0 0
// Action ;
  45: CALL 54 0 0
// SaveForQuickRestart ;
  49: CALL_OW 22
// end ;
  53: END
// function Action ; var un , f , i ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
// SetBName ( brave , brave ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_STRING brave
  65: PPUSH
  66: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL_OW 274
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_INT 6000
  96: PUSH
  97: LD_INT 4500
  99: PUSH
 100: LD_INT 3000
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PUSH
 108: LD_OWVAR 67
 112: ARRAY
 113: PPUSH
 114: CALL_OW 277
// InGameOn ;
 118: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 122: LD_INT 1
 124: PPUSH
 125: CALL_OW 87
// Say ( com , DJack1 ) ;
 129: LD_EXP 1
 133: PPUSH
 134: LD_STRING DJack1
 136: PPUSH
 137: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 141: LD_EXP 3
 145: PPUSH
 146: LD_STRING DUn1
 148: PPUSH
 149: CALL_OW 88
// Say ( com , DJack2 ) ;
 153: LD_EXP 1
 157: PPUSH
 158: LD_STRING DJack2
 160: PPUSH
 161: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 165: LD_EXP 3
 169: PPUSH
 170: LD_STRING DUn2
 172: PPUSH
 173: CALL_OW 88
// Say ( com , DJack3 ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_STRING DJack3
 184: PPUSH
 185: CALL_OW 88
// uc_side := 7 ;
 189: LD_ADDR_OWVAR 20
 193: PUSH
 194: LD_INT 7
 196: ST_TO_ADDR
// uc_nation := 1 ;
 197: LD_ADDR_OWVAR 21
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 205: LD_INT 1
 207: PPUSH
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 380
// hc_name :=  ;
 218: LD_ADDR_OWVAR 26
 222: PUSH
 223: LD_STRING 
 225: ST_TO_ADDR
// un := CreateHuman ;
 226: LD_ADDR_VAR 0 2
 230: PUSH
 231: CALL_OW 44
 235: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 236: LD_INT 105
 238: PPUSH
 239: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 243: LD_VAR 0 2
 247: PPUSH
 248: LD_STRING DRadio1
 250: PPUSH
 251: CALL_OW 94
// Say ( com , DJack4 ) ;
 255: LD_EXP 1
 259: PPUSH
 260: LD_STRING DJack4
 262: PPUSH
 263: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 267: LD_VAR 0 2
 271: PPUSH
 272: LD_STRING DRadio2
 274: PPUSH
 275: CALL_OW 94
// Wait ( 0 0$01 ) ;
 279: LD_INT 35
 281: PPUSH
 282: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_STRING DDoc1
 293: PPUSH
 294: CALL_OW 94
// Say ( com , DJack5 ) ;
 298: LD_EXP 1
 302: PPUSH
 303: LD_STRING DJack5
 305: PPUSH
 306: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 310: LD_EXP 2
 314: PPUSH
 315: LD_STRING DDoc2
 317: PPUSH
 318: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 322: LD_VAR 0 2
 326: PPUSH
 327: LD_STRING DRadio3
 329: PPUSH
 330: CALL_OW 94
// Say ( com , DJack6 ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_STRING DJack6
 341: PPUSH
 342: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 346: LD_ADDR_VAR 0 3
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 7
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: ST_TO_ADDR
// for i = 2 to f do
 380: LD_ADDR_VAR 0 4
 384: PUSH
 385: DOUBLE
 386: LD_INT 2
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 3
 394: PUSH
 395: FOR_TO
 396: IFFALSE 453
// begin ComExitBuilding ( f [ i ] ) ;
 398: LD_VAR 0 3
 402: PUSH
 403: LD_VAR 0 4
 407: ARRAY
 408: PPUSH
 409: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 413: LD_VAR 0 3
 417: PUSH
 418: LD_VAR 0 4
 422: ARRAY
 423: PPUSH
 424: LD_INT 7
 426: PPUSH
 427: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ARRAY
 441: PPUSH
 442: LD_EXP 1
 446: PPUSH
 447: CALL_OW 179
// end ;
 451: GO 395
 453: POP
 454: POP
// ComExitBuilding ( com ) ;
 455: LD_EXP 1
 459: PPUSH
 460: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 45
 471: PPUSH
 472: LD_INT 32
 474: PPUSH
 475: CALL_OW 178
// Wait ( 0 0$03 ) ;
 479: LD_INT 105
 481: PPUSH
 482: CALL_OW 67
// Say ( com , DJack7 ) ;
 486: LD_EXP 1
 490: PPUSH
 491: LD_STRING DJack7
 493: PPUSH
 494: CALL_OW 88
// InGameOff ;
 498: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 502: LD_STRING TDef
 504: PPUSH
 505: CALL_OW 337
// end ; end_of_file
 509: LD_VAR 0 1
 513: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 514: LD_INT 0
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 520: LD_INT 30
 522: PPUSH
 523: LD_INT 14
 525: PPUSH
 526: LD_INT 7
 528: PPUSH
 529: LD_INT 20
 531: PPUSH
 532: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 536: LD_INT 49
 538: PPUSH
 539: LD_INT 17
 541: PPUSH
 542: LD_INT 7
 544: PPUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 552: LD_INT 35
 554: PPUSH
 555: LD_INT 46
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 568: LD_INT 70
 570: PPUSH
 571: LD_INT 39
 573: PPUSH
 574: LD_INT 7
 576: PPUSH
 577: LD_INT 20
 579: PPUSH
 580: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 584: LD_INT 30
 586: PPUSH
 587: LD_INT 14
 589: PPUSH
 590: LD_INT 7
 592: PPUSH
 593: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 597: LD_INT 49
 599: PPUSH
 600: LD_INT 17
 602: PPUSH
 603: LD_INT 7
 605: PPUSH
 606: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 610: LD_INT 35
 612: PPUSH
 613: LD_INT 46
 615: PPUSH
 616: LD_INT 7
 618: PPUSH
 619: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 623: LD_INT 70
 625: PPUSH
 626: LD_INT 39
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: CALL_OW 331
// uc_side := 7 ;
 636: LD_ADDR_OWVAR 20
 640: PUSH
 641: LD_INT 7
 643: ST_TO_ADDR
// uc_nation := 1 ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// if Difficulty < 3 then
 652: LD_OWVAR 67
 656: PUSH
 657: LD_INT 3
 659: LESS
 660: IFFALSE 761
// begin for i = 1 to 2 do
 662: LD_ADDR_VAR 0 2
 666: PUSH
 667: DOUBLE
 668: LD_INT 1
 670: DEC
 671: ST_TO_ADDR
 672: LD_INT 2
 674: PUSH
 675: FOR_TO
 676: IFFALSE 757
// begin vc_chassis := us_heavy_tracked ;
 678: LD_ADDR_OWVAR 37
 682: PUSH
 683: LD_INT 4
 685: ST_TO_ADDR
// vc_engine := 3 ;
 686: LD_ADDR_OWVAR 39
 690: PUSH
 691: LD_INT 3
 693: ST_TO_ADDR
// vc_control := control_computer ;
 694: LD_ADDR_OWVAR 38
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 702: LD_ADDR_OWVAR 40
 706: PUSH
 707: LD_INT 10
 709: ST_TO_ADDR
// un := CreateVehicle ;
 710: LD_ADDR_VAR 0 3
 714: PUSH
 715: CALL_OW 45
 719: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 720: LD_VAR 0 3
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: LD_INT 5
 730: PPUSH
 731: CALL_OW 12
 735: PPUSH
 736: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 740: LD_VAR 0 3
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 675
 757: POP
 758: POP
// end else
 759: GO 850
// begin vc_chassis := us_medium_tracked ;
 761: LD_ADDR_OWVAR 37
 765: PUSH
 766: LD_INT 3
 768: ST_TO_ADDR
// vc_engine := engine_combustion ;
 769: LD_ADDR_OWVAR 39
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// vc_control := control_manual ;
 777: LD_ADDR_OWVAR 38
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 785: LD_ADDR_OWVAR 40
 789: PUSH
 790: LD_INT 4
 792: ST_TO_ADDR
// un := CreateVehicle ;
 793: LD_ADDR_VAR 0 3
 797: PUSH
 798: CALL_OW 45
 802: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 803: LD_VAR 0 3
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 5
 813: PPUSH
 814: CALL_OW 12
 818: PPUSH
 819: CALL_OW 233
// SetFuel ( un , 75 ) ;
 823: LD_VAR 0 3
 827: PPUSH
 828: LD_INT 75
 830: PPUSH
 831: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 835: LD_VAR 0 3
 839: PPUSH
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 850: LD_ADDR_VAR 0 4
 854: PUSH
 855: LD_INT 8
 857: PUSH
 858: LD_INT 7
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_OWVAR 67
 873: ARRAY
 874: ST_TO_ADDR
// hc_importance := 100 ;
 875: LD_ADDR_OWVAR 32
 879: PUSH
 880: LD_INT 100
 882: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_VAR 0 4
 893: PPUSH
 894: CALL_OW 380
// hc_name := Jack Collins ;
 898: LD_ADDR_OWVAR 26
 902: PUSH
 903: LD_STRING Jack Collins
 905: ST_TO_ADDR
// com := CreateHuman ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: CALL_OW 44
 915: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 916: LD_EXP 1
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL_OW 52
// hc_importance := 0 ;
 928: LD_ADDR_OWVAR 32
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// hc_gallery :=  ;
 936: LD_ADDR_OWVAR 33
 940: PUSH
 941: LD_STRING 
 943: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 4
 954: PPUSH
 955: CALL_OW 380
// hc_name := Thomas Jackson ;
 959: LD_ADDR_OWVAR 26
 963: PUSH
 964: LD_STRING Thomas Jackson
 966: ST_TO_ADDR
// k1 := CreateHuman ;
 967: LD_ADDR_EXP 3
 971: PUSH
 972: CALL_OW 44
 976: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
 977: LD_EXP 3
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 52
// hc_name :=  ;
 989: LD_ADDR_OWVAR 26
 993: PUSH
 994: LD_STRING 
 996: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: DOUBLE
1003: LD_INT 1
1005: DEC
1006: ST_TO_ADDR
1007: LD_INT 9
1009: PUSH
1010: LD_INT 8
1012: PUSH
1013: LD_INT 7
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: PUSH
1021: LD_OWVAR 67
1025: ARRAY
1026: PUSH
1027: FOR_TO
1028: IFFALSE 1199
// begin Randomize ;
1030: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 12
1059: ARRAY
1060: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1061: LD_INT 0
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_INT 4
1069: PPUSH
1070: CALL_OW 12
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 380
// un := CreateHuman ;
1084: LD_ADDR_VAR 0 3
1088: PUSH
1089: CALL_OW 44
1093: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1094: LD_VAR 0 3
1098: PPUSH
1099: CALL_OW 257
1103: PUSH
1104: LD_INT 1
1106: DOUBLE
1107: EQUAL
1108: IFTRUE 1112
1110: GO 1127
1112: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 21
1120: PPUSH
1121: CALL_OW 52
1125: GO 1197
1127: LD_INT 2
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1150
1135: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1136: LD_VAR 0 3
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL_OW 52
1148: GO 1197
1150: LD_INT 3
1152: DOUBLE
1153: EQUAL
1154: IFTRUE 1158
1156: GO 1173
1158: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_INT 38
1166: PPUSH
1167: CALL_OW 52
1171: GO 1197
1173: LD_INT 4
1175: DOUBLE
1176: EQUAL
1177: IFTRUE 1181
1179: GO 1196
1181: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 36
1189: PPUSH
1190: CALL_OW 52
1194: GO 1197
1196: POP
// end ;
1197: GO 1027
1199: POP
1200: POP
// uc_side := 2 ;
1201: LD_ADDR_OWVAR 20
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// hc_name := _ ;
1217: LD_ADDR_OWVAR 26
1221: PUSH
1222: LD_STRING _
1224: ST_TO_ADDR
// hc_gallery :=  ;
1225: LD_ADDR_OWVAR 33
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// hc_class := 4 ;
1233: LD_ADDR_OWVAR 28
1237: PUSH
1238: LD_INT 4
1240: ST_TO_ADDR
// hc_sex := sex_male ;
1241: LD_ADDR_OWVAR 27
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// doc := CreateHuman ;
1249: LD_ADDR_EXP 2
1253: PUSH
1254: CALL_OW 44
1258: ST_TO_ADDR
// end ; end_of_file
1259: LD_VAR 0 1
1263: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
// uc_side := 2 ;
1270: LD_ADDR_OWVAR 20
1274: PUSH
1275: LD_INT 2
1277: ST_TO_ADDR
// uc_nation := 2 ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_INT 2
1285: ST_TO_ADDR
// tmp := [ ] ;
1286: LD_ADDR_VAR 0 5
1290: PUSH
1291: EMPTY
1292: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1293: LD_ADDR_OWVAR 31
1297: PUSH
1298: LD_INT 3
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 10
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: LD_OWVAR 67
1316: ARRAY
1317: PUSH
1318: LD_INT 3
1320: PUSH
1321: LD_INT 6
1323: PUSH
1324: LD_INT 10
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: PUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 6
1343: PUSH
1344: LD_INT 10
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_OWVAR 67
1356: ARRAY
1357: PUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 10
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: LD_OWVAR 67
1376: ARRAY
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1384: LD_INT 4
1386: PPUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 7
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: IFFALSE 1442
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: LD_INT 4
1410: PPUSH
1411: LD_INT 22
1413: PUSH
1414: LD_INT 7
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1440
// RemoveUnit ( i ) ;
1429: LD_VAR 0 3
1433: PPUSH
1434: CALL_OW 64
1438: GO 1426
1440: POP
1441: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 22
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PPUSH
1455: CALL_OW 70
1459: IFFALSE 1500
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: LD_INT 5
1468: PPUSH
1469: LD_INT 22
1471: PUSH
1472: LD_INT 7
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 70
1483: PUSH
1484: FOR_IN
1485: IFFALSE 1498
// RemoveUnit ( i ) ;
1487: LD_VAR 0 3
1491: PPUSH
1492: CALL_OW 64
1496: GO 1484
1498: POP
1499: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 22
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: CALL_OW 70
1517: IFFALSE 1558
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: LD_INT 1
1526: PPUSH
1527: LD_INT 22
1529: PUSH
1530: LD_INT 7
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 70
1541: PUSH
1542: FOR_IN
1543: IFFALSE 1556
// RemoveUnit ( i ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: CALL_OW 64
1554: GO 1542
1556: POP
1557: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1558: LD_INT 2
1560: PPUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 70
1575: IFFALSE 1616
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1577: LD_ADDR_VAR 0 3
1581: PUSH
1582: LD_INT 2
1584: PPUSH
1585: LD_INT 22
1587: PUSH
1588: LD_INT 7
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 70
1599: PUSH
1600: FOR_IN
1601: IFFALSE 1614
// RemoveUnit ( i ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: CALL_OW 64
1612: GO 1600
1614: POP
1615: POP
// case num of 1 :
1616: LD_VAR 0 1
1620: PUSH
1621: LD_INT 1
1623: DOUBLE
1624: EQUAL
1625: IFTRUE 1629
1627: GO 1882
1629: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 5
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: LD_INT 6
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_OWVAR 67
1658: ARRAY
1659: PUSH
1660: FOR_TO
1661: IFFALSE 1753
// begin uc_nation := 0 ;
1663: LD_ADDR_OWVAR 21
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1671: LD_ADDR_OWVAR 28
1675: PUSH
1676: LD_INT 15
1678: ST_TO_ADDR
// hc_gallery :=  ;
1679: LD_ADDR_OWVAR 33
1683: PUSH
1684: LD_STRING 
1686: ST_TO_ADDR
// hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1695: LD_ADDR_OWVAR 29
1699: PUSH
1700: LD_INT 16
1702: PUSH
1703: LD_INT 12
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// un := CreateHuman ;
1710: LD_ADDR_VAR 0 4
1714: PUSH
1715: CALL_OW 44
1719: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// tmp := tmp ^ un ;
1735: LD_ADDR_VAR 0 5
1739: PUSH
1740: LD_VAR 0 5
1744: PUSH
1745: LD_VAR 0 4
1749: ADD
1750: ST_TO_ADDR
// end ;
1751: GO 1660
1753: POP
1754: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1755: LD_ADDR_VAR 0 3
1759: PUSH
1760: DOUBLE
1761: LD_INT 1
1763: DEC
1764: ST_TO_ADDR
1765: LD_INT 4
1767: PUSH
1768: LD_INT 5
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PUSH
1785: FOR_TO
1786: IFFALSE 1878
// begin uc_nation := 0 ;
1788: LD_ADDR_OWVAR 21
1792: PUSH
1793: LD_INT 0
1795: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1796: LD_ADDR_OWVAR 28
1800: PUSH
1801: LD_INT 15
1803: ST_TO_ADDR
// hc_gallery :=  ;
1804: LD_ADDR_OWVAR 33
1808: PUSH
1809: LD_STRING 
1811: ST_TO_ADDR
// hc_name :=  ;
1812: LD_ADDR_OWVAR 26
1816: PUSH
1817: LD_STRING 
1819: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1820: LD_ADDR_OWVAR 29
1824: PUSH
1825: LD_INT 16
1827: PUSH
1828: LD_INT 12
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: ST_TO_ADDR
// un := CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: CALL_OW 44
1844: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 5
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// tmp := tmp ^ un ;
1860: LD_ADDR_VAR 0 5
1864: PUSH
1865: LD_VAR 0 5
1869: PUSH
1870: LD_VAR 0 4
1874: ADD
1875: ST_TO_ADDR
// end ;
1876: GO 1785
1878: POP
1879: POP
// end ; 2 :
1880: GO 2660
1882: LD_INT 2
1884: DOUBLE
1885: EQUAL
1886: IFTRUE 1890
1888: GO 2018
1890: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: LD_INT 5
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: LD_OWVAR 67
1919: ARRAY
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2014
// begin uc_nation := 0 ;
1924: LD_ADDR_OWVAR 21
1928: PUSH
1929: LD_INT 0
1931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1932: LD_ADDR_OWVAR 28
1936: PUSH
1937: LD_INT 17
1939: ST_TO_ADDR
// hc_gallery :=  ;
1940: LD_ADDR_OWVAR 33
1944: PUSH
1945: LD_STRING 
1947: ST_TO_ADDR
// hc_name :=  ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING 
1955: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 12
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// un := CreateHuman ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
1981: LD_VAR 0 4
1985: PPUSH
1986: LD_INT 3
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// tmp := tmp ^ un ;
1996: LD_ADDR_VAR 0 5
2000: PUSH
2001: LD_VAR 0 5
2005: PUSH
2006: LD_VAR 0 4
2010: ADD
2011: ST_TO_ADDR
// end ;
2012: GO 1921
2014: POP
2015: POP
// end ; 3 :
2016: GO 2660
2018: LD_INT 3
2020: DOUBLE
2021: EQUAL
2022: IFTRUE 2026
2024: GO 2186
2026: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_INT 4
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 6
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_OWVAR 67
2055: ARRAY
2056: PUSH
2057: FOR_TO
2058: IFFALSE 2182
// begin uc_nation := 2 ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2068: LD_ADDR_OWVAR 37
2072: PUSH
2073: LD_INT 14
2075: ST_TO_ADDR
// vc_engine := 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control := control_apeman ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 5
2091: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 27
2099: PUSH
2100: LD_INT 28
2102: PUSH
2103: LD_INT 29
2105: PUSH
2106: LD_INT 91
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// un := CreateVehicle ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// tmp := tmp ^ un ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PUSH
2147: LD_VAR 0 4
2151: ADD
2152: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2165: LD_VAR 0 4
2169: PPUSH
2170: LD_INT 2
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// end ;
2180: GO 2057
2182: POP
2183: POP
// end ; 4 :
2184: GO 2660
2186: LD_INT 4
2188: DOUBLE
2189: EQUAL
2190: IFTRUE 2194
2192: GO 2362
2194: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 3
2207: PPUSH
2208: LD_INT 4
2210: PUSH
2211: LD_INT 5
2213: PUSH
2214: LD_INT 6
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: PUSH
2222: LD_OWVAR 67
2226: ARRAY
2227: PPUSH
2228: CALL_OW 12
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2358
// begin uc_nation := 2 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2244: LD_ADDR_OWVAR 37
2248: PUSH
2249: LD_INT 14
2251: ST_TO_ADDR
// vc_engine := 3 ;
2252: LD_ADDR_OWVAR 39
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// vc_control := control_apeman ;
2260: LD_ADDR_OWVAR 38
2264: PUSH
2265: LD_INT 5
2267: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2268: LD_ADDR_OWVAR 40
2272: PUSH
2273: LD_INT 27
2275: PUSH
2276: LD_INT 28
2278: PUSH
2279: LD_INT 29
2281: PUSH
2282: LD_INT 91
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 1
2293: PPUSH
2294: LD_INT 4
2296: PPUSH
2297: CALL_OW 12
2301: ARRAY
2302: ST_TO_ADDR
// un := CreateVehicle ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: CALL_OW 45
2312: ST_TO_ADDR
// tmp := tmp ^ un ;
2313: LD_ADDR_VAR 0 5
2317: PUSH
2318: LD_VAR 0 5
2322: PUSH
2323: LD_VAR 0 4
2327: ADD
2328: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2329: LD_VAR 0 4
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2341: LD_VAR 0 4
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 0
2351: PPUSH
2352: CALL_OW 49
// end ;
2356: GO 2233
2358: POP
2359: POP
// end ; 5 :
2360: GO 2660
2362: LD_INT 5
2364: DOUBLE
2365: EQUAL
2366: IFTRUE 2370
2368: GO 2530
2370: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 3
2383: PUSH
2384: LD_INT 4
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_OWVAR 67
2399: ARRAY
2400: PUSH
2401: FOR_TO
2402: IFFALSE 2526
// begin uc_nation := 2 ;
2404: LD_ADDR_OWVAR 21
2408: PUSH
2409: LD_INT 2
2411: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2412: LD_ADDR_OWVAR 37
2416: PUSH
2417: LD_INT 14
2419: ST_TO_ADDR
// vc_engine := 3 ;
2420: LD_ADDR_OWVAR 39
2424: PUSH
2425: LD_INT 3
2427: ST_TO_ADDR
// vc_control := control_apeman ;
2428: LD_ADDR_OWVAR 38
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2436: LD_ADDR_OWVAR 40
2440: PUSH
2441: LD_INT 27
2443: PUSH
2444: LD_INT 28
2446: PUSH
2447: LD_INT 29
2449: PUSH
2450: LD_INT 91
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 4
2464: PPUSH
2465: CALL_OW 12
2469: ARRAY
2470: ST_TO_ADDR
// un := CreateVehicle ;
2471: LD_ADDR_VAR 0 4
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// tmp := tmp ^ un ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: LD_VAR 0 4
2495: ADD
2496: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2509: LD_VAR 0 4
2513: PPUSH
2514: LD_INT 5
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: CALL_OW 49
// end ;
2524: GO 2401
2526: POP
2527: POP
// end ; 6 :
2528: GO 2660
2530: LD_INT 6
2532: DOUBLE
2533: EQUAL
2534: IFTRUE 2538
2536: GO 2659
2538: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: DOUBLE
2545: LD_INT 1
2547: DEC
2548: ST_TO_ADDR
2549: LD_INT 2
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: LD_INT 4
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: LD_OWVAR 67
2567: ARRAY
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2655
// begin uc_nation := 2 ;
2572: LD_ADDR_OWVAR 21
2576: PUSH
2577: LD_INT 2
2579: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2580: LD_ADDR_OWVAR 37
2584: PUSH
2585: LD_INT 11
2587: ST_TO_ADDR
// vc_engine := engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// vc_control := control_apeman ;
2596: LD_ADDR_OWVAR 38
2600: PUSH
2601: LD_INT 5
2603: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2604: LD_ADDR_OWVAR 40
2608: PUSH
2609: LD_INT 24
2611: ST_TO_ADDR
// un := CreateVehicle ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: CALL_OW 45
2621: ST_TO_ADDR
// tmp := tmp ^ un ;
2622: LD_ADDR_VAR 0 5
2626: PUSH
2627: LD_VAR 0 5
2631: PUSH
2632: LD_VAR 0 4
2636: ADD
2637: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2638: LD_VAR 0 4
2642: PPUSH
2643: LD_INT 8
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 49
// end ;
2653: GO 2569
2655: POP
2656: POP
// end ; end ;
2657: GO 2660
2659: POP
// result := tmp ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_VAR 0 5
2669: ST_TO_ADDR
// end ;
2670: LD_VAR 0 2
2674: RET
// export function ComitSib ; var un ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
// uc_side := 2 ;
2679: LD_ADDR_OWVAR 20
2683: PUSH
2684: LD_INT 2
2686: ST_TO_ADDR
// uc_nation := 2 ;
2687: LD_ADDR_OWVAR 21
2691: PUSH
2692: LD_INT 2
2694: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2695: LD_INT 0
2697: PPUSH
2698: LD_INT 4
2700: PPUSH
2701: LD_INT 7
2703: PPUSH
2704: CALL_OW 380
// un := CreateHuman ;
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: CALL_OW 44
2717: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2718: LD_VAR 0 2
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_INT 63
2740: PPUSH
2741: LD_INT 37
2743: PPUSH
2744: CALL_OW 158
// end ;
2748: LD_VAR 0 1
2752: RET
// export function DSay ; var i ; begin
2753: LD_INT 0
2755: PPUSH
2756: PPUSH
// Randomize ;
2757: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_INT 8
2771: PPUSH
2772: CALL_OW 12
2776: ST_TO_ADDR
// case i of 1 :
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: DOUBLE
2785: EQUAL
2786: IFTRUE 2790
2788: GO 2805
2790: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2791: LD_EXP 2
2795: PPUSH
2796: LD_STRING DDocA1
2798: PPUSH
2799: CALL_OW 94
2803: GO 2967
2805: LD_INT 2
2807: DOUBLE
2808: EQUAL
2809: IFTRUE 2813
2811: GO 2828
2813: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2814: LD_EXP 2
2818: PPUSH
2819: LD_STRING DDocA2
2821: PPUSH
2822: CALL_OW 94
2826: GO 2967
2828: LD_INT 3
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2851
2836: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2837: LD_EXP 2
2841: PPUSH
2842: LD_STRING DDocA3
2844: PPUSH
2845: CALL_OW 94
2849: GO 2967
2851: LD_INT 4
2853: DOUBLE
2854: EQUAL
2855: IFTRUE 2859
2857: GO 2874
2859: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2860: LD_EXP 2
2864: PPUSH
2865: LD_STRING DDocA4
2867: PPUSH
2868: CALL_OW 94
2872: GO 2967
2874: LD_INT 5
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2897
2882: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2883: LD_EXP 2
2887: PPUSH
2888: LD_STRING DDocA5
2890: PPUSH
2891: CALL_OW 94
2895: GO 2967
2897: LD_INT 6
2899: DOUBLE
2900: EQUAL
2901: IFTRUE 2905
2903: GO 2920
2905: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2906: LD_EXP 2
2910: PPUSH
2911: LD_STRING DDocA6
2913: PPUSH
2914: CALL_OW 94
2918: GO 2967
2920: LD_INT 7
2922: DOUBLE
2923: EQUAL
2924: IFTRUE 2928
2926: GO 2943
2928: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2929: LD_EXP 2
2933: PPUSH
2934: LD_STRING DDocA7
2936: PPUSH
2937: CALL_OW 94
2941: GO 2967
2943: LD_INT 8
2945: DOUBLE
2946: EQUAL
2947: IFTRUE 2951
2949: GO 2966
2951: POP
// SayRadio ( doc , DDocA8 ) ; end ;
2952: LD_EXP 2
2956: PPUSH
2957: LD_STRING DDocA8
2959: PPUSH
2960: CALL_OW 94
2964: GO 2967
2966: POP
// end ; end_of_file
2967: LD_VAR 0 1
2971: RET
// every 0 0$01 do
2972: GO 2974
2974: DISABLE
// begin display_strings := [ #tick , tick ] ;
2975: LD_ADDR_OWVAR 47
2979: PUSH
2980: LD_STRING #tick
2982: PUSH
2983: LD_OWVAR 1
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// enable ;
2992: ENABLE
// end ;
2993: END
// export pom , hover , attackN ; every 1 do
2994: GO 2996
2996: DISABLE
// begin pom := [ ] ;
2997: LD_ADDR_EXP 4
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// hover := [ ] ;
3004: LD_ADDR_EXP 5
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// attackN := 0 ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_INT 0
3018: ST_TO_ADDR
// end ;
3019: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3020: LD_EXP 4
3024: IFFALSE 3446
3026: GO 3028
3028: DISABLE
3029: LD_INT 0
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
// begin enable ;
3035: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: LD_INT 22
3043: PUSH
3044: LD_INT 7
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i = 1 to pom do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_EXP 4
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3130
// if not HasTask ( pom [ i ] ) then
3074: LD_EXP 4
3078: PUSH
3079: LD_VAR 0 1
3083: ARRAY
3084: PPUSH
3085: CALL_OW 314
3089: NOT
3090: IFFALSE 3128
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3092: LD_EXP 4
3096: PUSH
3097: LD_VAR 0 1
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 74
3123: PPUSH
3124: CALL_OW 115
3128: GO 3071
3130: POP
3131: POP
// if hover then
3132: LD_EXP 5
3136: IFFALSE 3446
// begin for i = 1 to hover do
3138: LD_ADDR_VAR 0 1
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 5
3152: PUSH
3153: FOR_TO
3154: IFFALSE 3444
// begin if GetLives ( hover [ i ] ) < 250 then
3156: LD_EXP 5
3160: PUSH
3161: LD_VAR 0 1
3165: ARRAY
3166: PPUSH
3167: CALL_OW 256
3171: PUSH
3172: LD_INT 250
3174: LESS
3175: IFFALSE 3242
// begin for z = 1 to 1 + Difficulty do
3177: LD_ADDR_VAR 0 3
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 1
3189: PUSH
3190: LD_OWVAR 67
3194: PLUS
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3240
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3199: LD_EXP 5
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 5
3219: PUSH
3220: LD_VAR 0 1
3224: ARRAY
3225: PPUSH
3226: CALL_OW 251
3230: PPUSH
3231: LD_INT 10
3233: PPUSH
3234: CALL_OW 453
3238: GO 3196
3240: POP
3241: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3242: LD_VAR 0 2
3246: PPUSH
3247: LD_INT 25
3249: PUSH
3250: LD_INT 2
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: LD_INT 54
3262: PUSH
3263: EMPTY
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 72
3278: PUSH
3279: LD_INT 0
3281: GREATER
3282: IFFALSE 3364
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3284: LD_ADDR_VAR 0 4
3288: PUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_INT 25
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 54
3309: PUSH
3310: EMPTY
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PPUSH
3321: CALL_OW 72
3325: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3326: LD_EXP 5
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_EXP 5
3346: PUSH
3347: LD_VAR 0 1
3351: ARRAY
3352: PPUSH
3353: CALL_OW 74
3357: PPUSH
3358: CALL_OW 115
// end else
3362: GO 3442
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3364: LD_ADDR_VAR 0 4
3368: PUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 54
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 72
3405: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3406: LD_EXP 5
3410: PUSH
3411: LD_VAR 0 1
3415: ARRAY
3416: PPUSH
3417: LD_VAR 0 4
3421: PPUSH
3422: LD_EXP 5
3426: PUSH
3427: LD_VAR 0 1
3431: ARRAY
3432: PPUSH
3433: CALL_OW 74
3437: PPUSH
3438: CALL_OW 115
// end ; end ;
3442: GO 3153
3444: POP
3445: POP
// end ; end ;
3446: PPOPN 4
3448: END
// every 3 3$10 do var i , un ;
3449: GO 3451
3451: DISABLE
3452: LD_INT 0
3454: PPUSH
3455: PPUSH
// begin uc_side := 7 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 7
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// for i = 1 to 2 do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 2
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3651
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3488: LD_INT 1
3490: PPUSH
3491: LD_INT 5
3493: PPUSH
3494: LD_INT 7
3496: PUSH
3497: LD_INT 6
3499: PUSH
3500: LD_INT 6
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PUSH
3508: LD_OWVAR 67
3512: ARRAY
3513: PPUSH
3514: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3518: LD_ADDR_OWVAR 37
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// vc_engine := engine_combustion ;
3526: LD_ADDR_OWVAR 39
3530: PUSH
3531: LD_INT 1
3533: ST_TO_ADDR
// vc_control := control_manual ;
3534: LD_ADDR_OWVAR 38
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3542: LD_ADDR_OWVAR 41
3546: PUSH
3547: LD_INT 66
3549: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3550: LD_ADDR_OWVAR 40
3554: PUSH
3555: LD_INT 2
3557: ST_TO_ADDR
// un := CreateVehicle ;
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: CALL_OW 45
3567: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3568: LD_VAR 0 2
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 48
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3598: CALL_OW 44
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3612: LD_VAR 0 2
3616: PPUSH
3617: LD_INT 49
3619: PPUSH
3620: LD_INT 17
3622: PPUSH
3623: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3627: LD_VAR 0 2
3631: PPUSH
3632: LD_INT 48
3634: PPUSH
3635: LD_INT 36
3637: PPUSH
3638: CALL_OW 171
// Wait ( 0 0$02 ) ;
3642: LD_INT 70
3644: PPUSH
3645: CALL_OW 67
// end ;
3649: GO 3485
3651: POP
3652: POP
// end ;
3653: PPOPN 2
3655: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3656: LD_EXP 6
3660: PUSH
3661: LD_INT 10
3663: PUSH
3664: LD_INT 12
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_OWVAR 67
3679: ARRAY
3680: LESS
3681: IFFALSE 4383
3683: GO 3685
3685: DISABLE
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// begin enable ;
3690: ENABLE
// Randomize ;
3691: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3695: LD_INT 35
3697: PPUSH
3698: LD_INT 6265
3700: PPUSH
3701: CALL_OW 12
3705: PPUSH
3706: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3710: LD_EXP 6
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: PUSH
3729: LD_OWVAR 67
3733: ARRAY
3734: LESS
3735: IFFALSE 3755
// c := Rand ( 1 , 2 ) else
3737: LD_ADDR_VAR 0 1
3741: PUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 12
3752: ST_TO_ADDR
3753: GO 3771
// c := Rand ( 1 , 3 ) ;
3755: LD_ADDR_VAR 0 1
3759: PUSH
3760: LD_INT 1
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: CALL_OW 12
3770: ST_TO_ADDR
// if attackN = 0 then
3771: LD_EXP 6
3775: PUSH
3776: LD_INT 0
3778: EQUAL
3779: IFFALSE 3795
// Say ( com , DJackAttack ) else
3781: LD_EXP 1
3785: PPUSH
3786: LD_STRING DJackAttack
3788: PPUSH
3789: CALL_OW 88
3793: GO 3799
// DSay ;
3795: CALL 2753 0 0
// case c of 1 :
3799: LD_VAR 0 1
3803: PUSH
3804: LD_INT 1
3806: DOUBLE
3807: EQUAL
3808: IFTRUE 3812
3810: GO 3994
3812: POP
// begin pom := pom ^ Attack ( 1 ) ;
3813: LD_ADDR_EXP 4
3817: PUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL 1264 0 1
3830: ADD
3831: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3832: LD_INT 420
3834: PPUSH
3835: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3839: LD_ADDR_EXP 4
3843: PUSH
3844: LD_EXP 4
3848: PUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL 1264 0 1
3856: ADD
3857: ST_TO_ADDR
// if Difficulty > 2 then
3858: LD_OWVAR 67
3862: PUSH
3863: LD_INT 2
3865: GREATER
3866: IFFALSE 3894
// begin Wait ( 0 0$46 ) ;
3868: LD_INT 1610
3870: PPUSH
3871: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3875: LD_ADDR_EXP 4
3879: PUSH
3880: LD_EXP 4
3884: PUSH
3885: LD_INT 4
3887: PPUSH
3888: CALL 1264 0 1
3892: ADD
3893: ST_TO_ADDR
// end ; if attackN > 4 then
3894: LD_EXP 6
3898: PUSH
3899: LD_INT 4
3901: GREATER
3902: IFFALSE 3930
// begin Wait ( 0 0$12 ) ;
3904: LD_INT 420
3906: PPUSH
3907: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3911: LD_ADDR_EXP 4
3915: PUSH
3916: LD_EXP 4
3920: PUSH
3921: LD_INT 3
3923: PPUSH
3924: CALL 1264 0 1
3928: ADD
3929: ST_TO_ADDR
// end ; if attackN > 8 then
3930: LD_EXP 6
3934: PUSH
3935: LD_INT 8
3937: GREATER
3938: IFFALSE 3992
// begin Wait ( 0 0$12 ) ;
3940: LD_INT 420
3942: PPUSH
3943: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3947: LD_ADDR_VAR 0 2
3951: PUSH
3952: LD_INT 0
3954: PPUSH
3955: LD_INT 100
3957: PPUSH
3958: CALL_OW 12
3962: ST_TO_ADDR
// if l < 45 then
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 45
3970: LESS
3971: IFFALSE 3992
// pom := pom ^ Attack ( 2 ) ;
3973: LD_ADDR_EXP 4
3977: PUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL 1264 0 1
3990: ADD
3991: ST_TO_ADDR
// end ; end ; 2 :
3992: GO 4281
3994: LD_INT 2
3996: DOUBLE
3997: EQUAL
3998: IFTRUE 4002
4000: GO 4150
4002: POP
// begin pom := pom ^ Attack ( 2 ) ;
4003: LD_ADDR_EXP 4
4007: PUSH
4008: LD_EXP 4
4012: PUSH
4013: LD_INT 2
4015: PPUSH
4016: CALL 1264 0 1
4020: ADD
4021: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4022: LD_ADDR_EXP 4
4026: PUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 3
4034: PPUSH
4035: CALL 1264 0 1
4039: ADD
4040: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: GREATER
4049: PUSH
4050: LD_INT 63
4052: PPUSH
4053: LD_INT 37
4055: PPUSH
4056: CALL_OW 428
4060: PPUSH
4061: CALL_OW 266
4065: PUSH
4066: LD_INT 30
4068: EQUAL
4069: AND
4070: IFFALSE 4076
// ComitSib ;
4072: CALL 2675 0 0
// if Difficulty > 2 then
4076: LD_OWVAR 67
4080: PUSH
4081: LD_INT 2
4083: GREATER
4084: IFFALSE 4112
// begin Wait ( 0 0$25 ) ;
4086: LD_INT 875
4088: PPUSH
4089: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PUSH
4103: LD_INT 4
4105: PPUSH
4106: CALL 1264 0 1
4110: ADD
4111: ST_TO_ADDR
// end ; if attackN > 7 then
4112: LD_EXP 6
4116: PUSH
4117: LD_INT 7
4119: GREATER
4120: IFFALSE 4148
// begin Wait ( 0 0$15 ) ;
4122: LD_INT 525
4124: PPUSH
4125: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4129: LD_ADDR_EXP 4
4133: PUSH
4134: LD_EXP 4
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL 1264 0 1
4146: ADD
4147: ST_TO_ADDR
// end ; end ; 3 :
4148: GO 4281
4150: LD_INT 3
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4280
4158: POP
// begin pom := pom ^ Attack ( 1 ) ;
4159: LD_ADDR_EXP 4
4163: PUSH
4164: LD_EXP 4
4168: PUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL 1264 0 1
4176: ADD
4177: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4178: LD_INT 70
4180: PPUSH
4181: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4185: LD_ADDR_EXP 4
4189: PUSH
4190: LD_EXP 4
4194: PUSH
4195: LD_INT 2
4197: PPUSH
4198: CALL 1264 0 1
4202: ADD
4203: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4204: LD_INT 2100
4206: PPUSH
4207: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4211: LD_ADDR_EXP 4
4215: PUSH
4216: LD_EXP 4
4220: PUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 1264 0 1
4228: ADD
4229: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4230: LD_ADDR_EXP 4
4234: PUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 5
4242: PPUSH
4243: CALL 1264 0 1
4247: ADD
4248: ST_TO_ADDR
// if attackN > 10 then
4249: LD_EXP 6
4253: PUSH
4254: LD_INT 10
4256: GREATER
4257: IFFALSE 4278
// pom := pom ^ Attack ( 2 ) ;
4259: LD_ADDR_EXP 4
4263: PUSH
4264: LD_EXP 4
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: CALL 1264 0 1
4276: ADD
4277: ST_TO_ADDR
// end ; end ;
4278: GO 4281
4280: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4281: LD_OWVAR 67
4285: PUSH
4286: LD_INT 1
4288: GREATER
4289: PUSH
4290: LD_EXP 6
4294: PUSH
4295: LD_INT 4
4297: MOD
4298: PUSH
4299: LD_INT 0
4301: EQUAL
4302: AND
4303: IFFALSE 4369
// begin Wait ( 1 1$45 ) ;
4305: LD_INT 3675
4307: PPUSH
4308: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4312: LD_ADDR_EXP 4
4316: PUSH
4317: LD_EXP 4
4321: PUSH
4322: LD_INT 3
4324: PPUSH
4325: CALL 1264 0 1
4329: ADD
4330: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4331: LD_ADDR_EXP 4
4335: PUSH
4336: LD_EXP 4
4340: PUSH
4341: LD_INT 4
4343: PPUSH
4344: CALL 1264 0 1
4348: ADD
4349: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4350: LD_ADDR_EXP 5
4354: PUSH
4355: LD_EXP 5
4359: PUSH
4360: LD_INT 6
4362: PPUSH
4363: CALL 1264 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4369: LD_ADDR_EXP 6
4373: PUSH
4374: LD_EXP 6
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: ST_TO_ADDR
// end ;
4383: PPOPN 2
4385: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4386: LD_EXP 6
4390: PUSH
4391: LD_INT 10
4393: PUSH
4394: LD_INT 12
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: PUSH
4405: LD_OWVAR 67
4409: ARRAY
4410: GREATEREQUAL
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: AND
4431: IFFALSE 4487
4433: GO 4435
4435: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4436: LD_EXP 2
4440: PPUSH
4441: LD_STRING DDocEnd
4443: PPUSH
4444: CALL_OW 94
// Wait ( 0 0$03 ) ;
4448: LD_INT 105
4450: PPUSH
4451: CALL_OW 67
// case Query ( QWin ) of 1 :
4455: LD_STRING QWin
4457: PPUSH
4458: CALL_OW 97
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4474
4471: POP
// ; end ;
4472: GO 4475
4474: POP
// music_nat := 5 ;
4475: LD_ADDR_OWVAR 71
4479: PUSH
4480: LD_INT 5
4482: ST_TO_ADDR
// YouWin ;
4483: CALL_OW 103
// end ; end_of_file
4487: END
// on UnitDestroyed ( un ) do begin if un = brave or un = com then
4488: LD_VAR 0 1
4492: PUSH
4493: LD_INT 1
4495: EQUAL
4496: PUSH
4497: LD_VAR 0 1
4501: PUSH
4502: LD_EXP 1
4506: EQUAL
4507: OR
4508: IFFALSE 4529
// begin SayRadio ( doc , DDocWin ) ;
4510: LD_EXP 2
4514: PPUSH
4515: LD_STRING DDocWin
4517: PPUSH
4518: CALL_OW 94
// YouLost (  ) ;
4522: LD_STRING 
4524: PPUSH
4525: CALL_OW 104
// end ; end ;
4529: PPOPN 1
4531: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_VAR 0 2
4541: PPUSH
4542: LD_VAR 0 3
4546: PPUSH
4547: CALL 15352 0 3
// end ;
4551: PPOPN 3
4553: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4554: LD_VAR 0 1
4558: PPUSH
4559: CALL 15450 0 1
// end ; end_of_file
4563: PPOPN 1
4565: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
4566: GO 4568
4568: DISABLE
// begin ru_radar := 98 ;
4569: LD_ADDR_EXP 7
4573: PUSH
4574: LD_INT 98
4576: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4577: LD_ADDR_EXP 8
4581: PUSH
4582: LD_INT 89
4584: ST_TO_ADDR
// us_hack := 99 ;
4585: LD_ADDR_EXP 9
4589: PUSH
4590: LD_INT 99
4592: ST_TO_ADDR
// us_artillery := 97 ;
4593: LD_ADDR_EXP 10
4597: PUSH
4598: LD_INT 97
4600: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4601: LD_ADDR_EXP 11
4605: PUSH
4606: LD_INT 91
4608: ST_TO_ADDR
// end ; end_of_file end_of_file
4609: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4610: GO 4612
4612: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4613: LD_STRING initStreamRollete();
4615: PPUSH
4616: CALL_OW 559
// InitStreamMode ;
4620: CALL 4629 0 0
// DefineStreamItems ( ) ;
4624: CALL 5069 0 0
// end ;
4628: END
// function InitStreamMode ; begin
4629: LD_INT 0
4631: PPUSH
// streamModeActive := false ;
4632: LD_ADDR_EXP 12
4636: PUSH
4637: LD_INT 0
4639: ST_TO_ADDR
// normalCounter := 26 ;
4640: LD_ADDR_EXP 13
4644: PUSH
4645: LD_INT 26
4647: ST_TO_ADDR
// hardcoreCounter := 12 ;
4648: LD_ADDR_EXP 14
4652: PUSH
4653: LD_INT 12
4655: ST_TO_ADDR
// sRocket := false ;
4656: LD_ADDR_EXP 17
4660: PUSH
4661: LD_INT 0
4663: ST_TO_ADDR
// sSpeed := false ;
4664: LD_ADDR_EXP 16
4668: PUSH
4669: LD_INT 0
4671: ST_TO_ADDR
// sEngine := false ;
4672: LD_ADDR_EXP 18
4676: PUSH
4677: LD_INT 0
4679: ST_TO_ADDR
// sSpec := false ;
4680: LD_ADDR_EXP 15
4684: PUSH
4685: LD_INT 0
4687: ST_TO_ADDR
// sLevel := false ;
4688: LD_ADDR_EXP 19
4692: PUSH
4693: LD_INT 0
4695: ST_TO_ADDR
// sArmoury := false ;
4696: LD_ADDR_EXP 20
4700: PUSH
4701: LD_INT 0
4703: ST_TO_ADDR
// sRadar := false ;
4704: LD_ADDR_EXP 21
4708: PUSH
4709: LD_INT 0
4711: ST_TO_ADDR
// sBunker := false ;
4712: LD_ADDR_EXP 22
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// sHack := false ;
4720: LD_ADDR_EXP 23
4724: PUSH
4725: LD_INT 0
4727: ST_TO_ADDR
// sFire := false ;
4728: LD_ADDR_EXP 24
4732: PUSH
4733: LD_INT 0
4735: ST_TO_ADDR
// sRefresh := false ;
4736: LD_ADDR_EXP 25
4740: PUSH
4741: LD_INT 0
4743: ST_TO_ADDR
// sExp := false ;
4744: LD_ADDR_EXP 26
4748: PUSH
4749: LD_INT 0
4751: ST_TO_ADDR
// sDepot := false ;
4752: LD_ADDR_EXP 27
4756: PUSH
4757: LD_INT 0
4759: ST_TO_ADDR
// sFlag := false ;
4760: LD_ADDR_EXP 28
4764: PUSH
4765: LD_INT 0
4767: ST_TO_ADDR
// sKamikadze := false ;
4768: LD_ADDR_EXP 36
4772: PUSH
4773: LD_INT 0
4775: ST_TO_ADDR
// sTroll := false ;
4776: LD_ADDR_EXP 37
4780: PUSH
4781: LD_INT 0
4783: ST_TO_ADDR
// sSlow := false ;
4784: LD_ADDR_EXP 38
4788: PUSH
4789: LD_INT 0
4791: ST_TO_ADDR
// sLack := false ;
4792: LD_ADDR_EXP 39
4796: PUSH
4797: LD_INT 0
4799: ST_TO_ADDR
// sTank := false ;
4800: LD_ADDR_EXP 41
4804: PUSH
4805: LD_INT 0
4807: ST_TO_ADDR
// sRemote := false ;
4808: LD_ADDR_EXP 42
4812: PUSH
4813: LD_INT 0
4815: ST_TO_ADDR
// sPowell := false ;
4816: LD_ADDR_EXP 43
4820: PUSH
4821: LD_INT 0
4823: ST_TO_ADDR
// sTeleport := false ;
4824: LD_ADDR_EXP 46
4828: PUSH
4829: LD_INT 0
4831: ST_TO_ADDR
// sOilTower := false ;
4832: LD_ADDR_EXP 48
4836: PUSH
4837: LD_INT 0
4839: ST_TO_ADDR
// sShovel := false ;
4840: LD_ADDR_EXP 49
4844: PUSH
4845: LD_INT 0
4847: ST_TO_ADDR
// sSheik := false ;
4848: LD_ADDR_EXP 50
4852: PUSH
4853: LD_INT 0
4855: ST_TO_ADDR
// sEarthquake := false ;
4856: LD_ADDR_EXP 52
4860: PUSH
4861: LD_INT 0
4863: ST_TO_ADDR
// sAI := false ;
4864: LD_ADDR_EXP 53
4868: PUSH
4869: LD_INT 0
4871: ST_TO_ADDR
// sCargo := false ;
4872: LD_ADDR_EXP 56
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// sDLaser := false ;
4880: LD_ADDR_EXP 57
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// sExchange := false ;
4888: LD_ADDR_EXP 58
4892: PUSH
4893: LD_INT 0
4895: ST_TO_ADDR
// sFac := false ;
4896: LD_ADDR_EXP 59
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// sPower := false ;
4904: LD_ADDR_EXP 60
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// sRandom := false ;
4912: LD_ADDR_EXP 61
4916: PUSH
4917: LD_INT 0
4919: ST_TO_ADDR
// sShield := false ;
4920: LD_ADDR_EXP 62
4924: PUSH
4925: LD_INT 0
4927: ST_TO_ADDR
// sTime := false ;
4928: LD_ADDR_EXP 63
4932: PUSH
4933: LD_INT 0
4935: ST_TO_ADDR
// sTools := false ;
4936: LD_ADDR_EXP 64
4940: PUSH
4941: LD_INT 0
4943: ST_TO_ADDR
// sSold := false ;
4944: LD_ADDR_EXP 29
4948: PUSH
4949: LD_INT 0
4951: ST_TO_ADDR
// sDiff := false ;
4952: LD_ADDR_EXP 30
4956: PUSH
4957: LD_INT 0
4959: ST_TO_ADDR
// sFog := false ;
4960: LD_ADDR_EXP 33
4964: PUSH
4965: LD_INT 0
4967: ST_TO_ADDR
// sReset := false ;
4968: LD_ADDR_EXP 34
4972: PUSH
4973: LD_INT 0
4975: ST_TO_ADDR
// sSun := false ;
4976: LD_ADDR_EXP 35
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// sTiger := false ;
4984: LD_ADDR_EXP 31
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// sBomb := false ;
4992: LD_ADDR_EXP 32
4996: PUSH
4997: LD_INT 0
4999: ST_TO_ADDR
// sWound := false ;
5000: LD_ADDR_EXP 40
5004: PUSH
5005: LD_INT 0
5007: ST_TO_ADDR
// sBetray := false ;
5008: LD_ADDR_EXP 44
5012: PUSH
5013: LD_INT 0
5015: ST_TO_ADDR
// sContamin := false ;
5016: LD_ADDR_EXP 45
5020: PUSH
5021: LD_INT 0
5023: ST_TO_ADDR
// sOil := false ;
5024: LD_ADDR_EXP 47
5028: PUSH
5029: LD_INT 0
5031: ST_TO_ADDR
// sStu := false ;
5032: LD_ADDR_EXP 51
5036: PUSH
5037: LD_INT 0
5039: ST_TO_ADDR
// sBazooka := false ;
5040: LD_ADDR_EXP 54
5044: PUSH
5045: LD_INT 0
5047: ST_TO_ADDR
// sMortar := false ;
5048: LD_ADDR_EXP 55
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// sRanger := false ;
5056: LD_ADDR_EXP 65
5060: PUSH
5061: LD_INT 0
5063: ST_TO_ADDR
// end ;
5064: LD_VAR 0 1
5068: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5069: LD_INT 0
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
5075: PPUSH
// result := [ ] ;
5076: LD_ADDR_VAR 0 1
5080: PUSH
5081: EMPTY
5082: ST_TO_ADDR
// if campaign_id = 1 then
5083: LD_OWVAR 69
5087: PUSH
5088: LD_INT 1
5090: EQUAL
5091: IFFALSE 8027
// begin case mission_number of 1 :
5093: LD_OWVAR 70
5097: PUSH
5098: LD_INT 1
5100: DOUBLE
5101: EQUAL
5102: IFTRUE 5106
5104: GO 5170
5106: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5107: LD_ADDR_VAR 0 1
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 4
5117: PUSH
5118: LD_INT 11
5120: PUSH
5121: LD_INT 12
5123: PUSH
5124: LD_INT 15
5126: PUSH
5127: LD_INT 16
5129: PUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 23
5135: PUSH
5136: LD_INT 26
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 101
5152: PUSH
5153: LD_INT 102
5155: PUSH
5156: LD_INT 106
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: ST_TO_ADDR
5168: GO 8027
5170: LD_INT 2
5172: DOUBLE
5173: EQUAL
5174: IFTRUE 5178
5176: GO 5250
5178: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5179: LD_ADDR_VAR 0 1
5183: PUSH
5184: LD_INT 2
5186: PUSH
5187: LD_INT 4
5189: PUSH
5190: LD_INT 11
5192: PUSH
5193: LD_INT 12
5195: PUSH
5196: LD_INT 15
5198: PUSH
5199: LD_INT 16
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 23
5207: PUSH
5208: LD_INT 26
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 101
5224: PUSH
5225: LD_INT 102
5227: PUSH
5228: LD_INT 105
5230: PUSH
5231: LD_INT 106
5233: PUSH
5234: LD_INT 108
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 8027
5250: LD_INT 3
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5334
5258: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5259: LD_ADDR_VAR 0 1
5263: PUSH
5264: LD_INT 2
5266: PUSH
5267: LD_INT 4
5269: PUSH
5270: LD_INT 5
5272: PUSH
5273: LD_INT 11
5275: PUSH
5276: LD_INT 12
5278: PUSH
5279: LD_INT 15
5281: PUSH
5282: LD_INT 16
5284: PUSH
5285: LD_INT 22
5287: PUSH
5288: LD_INT 26
5290: PUSH
5291: LD_INT 36
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 101
5308: PUSH
5309: LD_INT 102
5311: PUSH
5312: LD_INT 105
5314: PUSH
5315: LD_INT 106
5317: PUSH
5318: LD_INT 108
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: ST_TO_ADDR
5332: GO 8027
5334: LD_INT 4
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5342
5340: GO 5426
5342: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: LD_INT 4
5353: PUSH
5354: LD_INT 5
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 11
5362: PUSH
5363: LD_INT 12
5365: PUSH
5366: LD_INT 15
5368: PUSH
5369: LD_INT 16
5371: PUSH
5372: LD_INT 22
5374: PUSH
5375: LD_INT 23
5377: PUSH
5378: LD_INT 26
5380: PUSH
5381: LD_INT 36
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 101
5400: PUSH
5401: LD_INT 102
5403: PUSH
5404: LD_INT 105
5406: PUSH
5407: LD_INT 106
5409: PUSH
5410: LD_INT 108
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: ST_TO_ADDR
5424: GO 8027
5426: LD_INT 5
5428: DOUBLE
5429: EQUAL
5430: IFTRUE 5434
5432: GO 5534
5434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5435: LD_ADDR_VAR 0 1
5439: PUSH
5440: LD_INT 2
5442: PUSH
5443: LD_INT 4
5445: PUSH
5446: LD_INT 5
5448: PUSH
5449: LD_INT 6
5451: PUSH
5452: LD_INT 8
5454: PUSH
5455: LD_INT 11
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: LD_INT 15
5463: PUSH
5464: LD_INT 16
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 23
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 26
5478: PUSH
5479: LD_INT 36
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_INT 101
5500: PUSH
5501: LD_INT 102
5503: PUSH
5504: LD_INT 105
5506: PUSH
5507: LD_INT 106
5509: PUSH
5510: LD_INT 108
5512: PUSH
5513: LD_INT 109
5515: PUSH
5516: LD_INT 112
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: ST_TO_ADDR
5532: GO 8027
5534: LD_INT 6
5536: DOUBLE
5537: EQUAL
5538: IFTRUE 5542
5540: GO 5662
5542: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5543: LD_ADDR_VAR 0 1
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: LD_INT 6
5559: PUSH
5560: LD_INT 8
5562: PUSH
5563: LD_INT 11
5565: PUSH
5566: LD_INT 12
5568: PUSH
5569: LD_INT 15
5571: PUSH
5572: LD_INT 16
5574: PUSH
5575: LD_INT 20
5577: PUSH
5578: LD_INT 21
5580: PUSH
5581: LD_INT 22
5583: PUSH
5584: LD_INT 23
5586: PUSH
5587: LD_INT 25
5589: PUSH
5590: LD_INT 26
5592: PUSH
5593: LD_INT 30
5595: PUSH
5596: LD_INT 31
5598: PUSH
5599: LD_INT 32
5601: PUSH
5602: LD_INT 36
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 101
5628: PUSH
5629: LD_INT 102
5631: PUSH
5632: LD_INT 105
5634: PUSH
5635: LD_INT 106
5637: PUSH
5638: LD_INT 108
5640: PUSH
5641: LD_INT 109
5643: PUSH
5644: LD_INT 112
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: ST_TO_ADDR
5660: GO 8027
5662: LD_INT 7
5664: DOUBLE
5665: EQUAL
5666: IFTRUE 5670
5668: GO 5770
5670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5671: LD_ADDR_VAR 0 1
5675: PUSH
5676: LD_INT 2
5678: PUSH
5679: LD_INT 4
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: LD_INT 7
5687: PUSH
5688: LD_INT 11
5690: PUSH
5691: LD_INT 12
5693: PUSH
5694: LD_INT 15
5696: PUSH
5697: LD_INT 16
5699: PUSH
5700: LD_INT 20
5702: PUSH
5703: LD_INT 21
5705: PUSH
5706: LD_INT 22
5708: PUSH
5709: LD_INT 23
5711: PUSH
5712: LD_INT 25
5714: PUSH
5715: LD_INT 26
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 101
5736: PUSH
5737: LD_INT 102
5739: PUSH
5740: LD_INT 103
5742: PUSH
5743: LD_INT 105
5745: PUSH
5746: LD_INT 106
5748: PUSH
5749: LD_INT 108
5751: PUSH
5752: LD_INT 112
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: ST_TO_ADDR
5768: GO 8027
5770: LD_INT 8
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5906
5778: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_INT 2
5786: PUSH
5787: LD_INT 4
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 6
5795: PUSH
5796: LD_INT 7
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: LD_INT 11
5804: PUSH
5805: LD_INT 12
5807: PUSH
5808: LD_INT 15
5810: PUSH
5811: LD_INT 16
5813: PUSH
5814: LD_INT 20
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 25
5828: PUSH
5829: LD_INT 26
5831: PUSH
5832: LD_INT 30
5834: PUSH
5835: LD_INT 31
5837: PUSH
5838: LD_INT 32
5840: PUSH
5841: LD_INT 36
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 101
5868: PUSH
5869: LD_INT 102
5871: PUSH
5872: LD_INT 103
5874: PUSH
5875: LD_INT 105
5877: PUSH
5878: LD_INT 106
5880: PUSH
5881: LD_INT 108
5883: PUSH
5884: LD_INT 109
5886: PUSH
5887: LD_INT 112
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: ST_TO_ADDR
5904: GO 8027
5906: LD_INT 9
5908: DOUBLE
5909: EQUAL
5910: IFTRUE 5914
5912: GO 6050
5914: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5915: LD_ADDR_VAR 0 1
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: LD_INT 4
5925: PUSH
5926: LD_INT 5
5928: PUSH
5929: LD_INT 6
5931: PUSH
5932: LD_INT 7
5934: PUSH
5935: LD_INT 8
5937: PUSH
5938: LD_INT 11
5940: PUSH
5941: LD_INT 12
5943: PUSH
5944: LD_INT 15
5946: PUSH
5947: LD_INT 16
5949: PUSH
5950: LD_INT 20
5952: PUSH
5953: LD_INT 21
5955: PUSH
5956: LD_INT 22
5958: PUSH
5959: LD_INT 23
5961: PUSH
5962: LD_INT 25
5964: PUSH
5965: LD_INT 26
5967: PUSH
5968: LD_INT 28
5970: PUSH
5971: LD_INT 30
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: LD_INT 36
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 101
6008: PUSH
6009: LD_INT 102
6011: PUSH
6012: LD_INT 103
6014: PUSH
6015: LD_INT 105
6017: PUSH
6018: LD_INT 106
6020: PUSH
6021: LD_INT 108
6023: PUSH
6024: LD_INT 109
6026: PUSH
6027: LD_INT 112
6029: PUSH
6030: LD_INT 114
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: ST_TO_ADDR
6048: GO 8027
6050: LD_INT 10
6052: DOUBLE
6053: EQUAL
6054: IFTRUE 6058
6056: GO 6242
6058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6059: LD_ADDR_VAR 0 1
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: LD_INT 4
6069: PUSH
6070: LD_INT 5
6072: PUSH
6073: LD_INT 6
6075: PUSH
6076: LD_INT 7
6078: PUSH
6079: LD_INT 8
6081: PUSH
6082: LD_INT 9
6084: PUSH
6085: LD_INT 10
6087: PUSH
6088: LD_INT 11
6090: PUSH
6091: LD_INT 12
6093: PUSH
6094: LD_INT 13
6096: PUSH
6097: LD_INT 14
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: LD_INT 16
6105: PUSH
6106: LD_INT 17
6108: PUSH
6109: LD_INT 18
6111: PUSH
6112: LD_INT 19
6114: PUSH
6115: LD_INT 20
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 22
6123: PUSH
6124: LD_INT 23
6126: PUSH
6127: LD_INT 24
6129: PUSH
6130: LD_INT 25
6132: PUSH
6133: LD_INT 26
6135: PUSH
6136: LD_INT 28
6138: PUSH
6139: LD_INT 30
6141: PUSH
6142: LD_INT 31
6144: PUSH
6145: LD_INT 32
6147: PUSH
6148: LD_INT 36
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 101
6184: PUSH
6185: LD_INT 102
6187: PUSH
6188: LD_INT 103
6190: PUSH
6191: LD_INT 104
6193: PUSH
6194: LD_INT 105
6196: PUSH
6197: LD_INT 106
6199: PUSH
6200: LD_INT 107
6202: PUSH
6203: LD_INT 108
6205: PUSH
6206: LD_INT 109
6208: PUSH
6209: LD_INT 110
6211: PUSH
6212: LD_INT 111
6214: PUSH
6215: LD_INT 112
6217: PUSH
6218: LD_INT 114
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: ST_TO_ADDR
6240: GO 8027
6242: LD_INT 11
6244: DOUBLE
6245: EQUAL
6246: IFTRUE 6250
6248: GO 6442
6250: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6251: LD_ADDR_VAR 0 1
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: LD_INT 5
6267: PUSH
6268: LD_INT 6
6270: PUSH
6271: LD_INT 7
6273: PUSH
6274: LD_INT 8
6276: PUSH
6277: LD_INT 9
6279: PUSH
6280: LD_INT 10
6282: PUSH
6283: LD_INT 11
6285: PUSH
6286: LD_INT 12
6288: PUSH
6289: LD_INT 13
6291: PUSH
6292: LD_INT 14
6294: PUSH
6295: LD_INT 15
6297: PUSH
6298: LD_INT 16
6300: PUSH
6301: LD_INT 17
6303: PUSH
6304: LD_INT 18
6306: PUSH
6307: LD_INT 19
6309: PUSH
6310: LD_INT 20
6312: PUSH
6313: LD_INT 21
6315: PUSH
6316: LD_INT 22
6318: PUSH
6319: LD_INT 23
6321: PUSH
6322: LD_INT 24
6324: PUSH
6325: LD_INT 25
6327: PUSH
6328: LD_INT 26
6330: PUSH
6331: LD_INT 28
6333: PUSH
6334: LD_INT 30
6336: PUSH
6337: LD_INT 31
6339: PUSH
6340: LD_INT 32
6342: PUSH
6343: LD_INT 34
6345: PUSH
6346: LD_INT 36
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 101
6384: PUSH
6385: LD_INT 102
6387: PUSH
6388: LD_INT 103
6390: PUSH
6391: LD_INT 104
6393: PUSH
6394: LD_INT 105
6396: PUSH
6397: LD_INT 106
6399: PUSH
6400: LD_INT 107
6402: PUSH
6403: LD_INT 108
6405: PUSH
6406: LD_INT 109
6408: PUSH
6409: LD_INT 110
6411: PUSH
6412: LD_INT 111
6414: PUSH
6415: LD_INT 112
6417: PUSH
6418: LD_INT 114
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: ST_TO_ADDR
6440: GO 8027
6442: LD_INT 12
6444: DOUBLE
6445: EQUAL
6446: IFTRUE 6450
6448: GO 6658
6450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_INT 1
6458: PUSH
6459: LD_INT 2
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: LD_INT 5
6470: PUSH
6471: LD_INT 6
6473: PUSH
6474: LD_INT 7
6476: PUSH
6477: LD_INT 8
6479: PUSH
6480: LD_INT 9
6482: PUSH
6483: LD_INT 10
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: LD_INT 13
6494: PUSH
6495: LD_INT 14
6497: PUSH
6498: LD_INT 15
6500: PUSH
6501: LD_INT 16
6503: PUSH
6504: LD_INT 17
6506: PUSH
6507: LD_INT 18
6509: PUSH
6510: LD_INT 19
6512: PUSH
6513: LD_INT 20
6515: PUSH
6516: LD_INT 21
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 23
6524: PUSH
6525: LD_INT 24
6527: PUSH
6528: LD_INT 25
6530: PUSH
6531: LD_INT 26
6533: PUSH
6534: LD_INT 27
6536: PUSH
6537: LD_INT 28
6539: PUSH
6540: LD_INT 30
6542: PUSH
6543: LD_INT 31
6545: PUSH
6546: LD_INT 32
6548: PUSH
6549: LD_INT 33
6551: PUSH
6552: LD_INT 34
6554: PUSH
6555: LD_INT 36
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 101
6596: PUSH
6597: LD_INT 102
6599: PUSH
6600: LD_INT 103
6602: PUSH
6603: LD_INT 104
6605: PUSH
6606: LD_INT 105
6608: PUSH
6609: LD_INT 106
6611: PUSH
6612: LD_INT 107
6614: PUSH
6615: LD_INT 108
6617: PUSH
6618: LD_INT 109
6620: PUSH
6621: LD_INT 110
6623: PUSH
6624: LD_INT 111
6626: PUSH
6627: LD_INT 112
6629: PUSH
6630: LD_INT 113
6632: PUSH
6633: LD_INT 114
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 8027
6658: LD_INT 13
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6862
6666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6667: LD_ADDR_VAR 0 1
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: LD_INT 2
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 4
6683: PUSH
6684: LD_INT 5
6686: PUSH
6687: LD_INT 8
6689: PUSH
6690: LD_INT 9
6692: PUSH
6693: LD_INT 10
6695: PUSH
6696: LD_INT 11
6698: PUSH
6699: LD_INT 12
6701: PUSH
6702: LD_INT 14
6704: PUSH
6705: LD_INT 15
6707: PUSH
6708: LD_INT 16
6710: PUSH
6711: LD_INT 17
6713: PUSH
6714: LD_INT 18
6716: PUSH
6717: LD_INT 19
6719: PUSH
6720: LD_INT 20
6722: PUSH
6723: LD_INT 21
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 23
6731: PUSH
6732: LD_INT 24
6734: PUSH
6735: LD_INT 25
6737: PUSH
6738: LD_INT 26
6740: PUSH
6741: LD_INT 27
6743: PUSH
6744: LD_INT 28
6746: PUSH
6747: LD_INT 30
6749: PUSH
6750: LD_INT 31
6752: PUSH
6753: LD_INT 32
6755: PUSH
6756: LD_INT 33
6758: PUSH
6759: LD_INT 34
6761: PUSH
6762: LD_INT 36
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 101
6800: PUSH
6801: LD_INT 102
6803: PUSH
6804: LD_INT 103
6806: PUSH
6807: LD_INT 104
6809: PUSH
6810: LD_INT 105
6812: PUSH
6813: LD_INT 106
6815: PUSH
6816: LD_INT 107
6818: PUSH
6819: LD_INT 108
6821: PUSH
6822: LD_INT 109
6824: PUSH
6825: LD_INT 110
6827: PUSH
6828: LD_INT 111
6830: PUSH
6831: LD_INT 112
6833: PUSH
6834: LD_INT 113
6836: PUSH
6837: LD_INT 114
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: ST_TO_ADDR
6860: GO 8027
6862: LD_INT 14
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 7082
6870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6871: LD_ADDR_VAR 0 1
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: LD_INT 2
6881: PUSH
6882: LD_INT 3
6884: PUSH
6885: LD_INT 4
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: LD_INT 6
6893: PUSH
6894: LD_INT 7
6896: PUSH
6897: LD_INT 8
6899: PUSH
6900: LD_INT 9
6902: PUSH
6903: LD_INT 10
6905: PUSH
6906: LD_INT 11
6908: PUSH
6909: LD_INT 12
6911: PUSH
6912: LD_INT 13
6914: PUSH
6915: LD_INT 14
6917: PUSH
6918: LD_INT 15
6920: PUSH
6921: LD_INT 16
6923: PUSH
6924: LD_INT 17
6926: PUSH
6927: LD_INT 18
6929: PUSH
6930: LD_INT 19
6932: PUSH
6933: LD_INT 20
6935: PUSH
6936: LD_INT 21
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 23
6944: PUSH
6945: LD_INT 24
6947: PUSH
6948: LD_INT 25
6950: PUSH
6951: LD_INT 26
6953: PUSH
6954: LD_INT 27
6956: PUSH
6957: LD_INT 28
6959: PUSH
6960: LD_INT 29
6962: PUSH
6963: LD_INT 30
6965: PUSH
6966: LD_INT 31
6968: PUSH
6969: LD_INT 32
6971: PUSH
6972: LD_INT 33
6974: PUSH
6975: LD_INT 34
6977: PUSH
6978: LD_INT 36
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 101
7020: PUSH
7021: LD_INT 102
7023: PUSH
7024: LD_INT 103
7026: PUSH
7027: LD_INT 104
7029: PUSH
7030: LD_INT 105
7032: PUSH
7033: LD_INT 106
7035: PUSH
7036: LD_INT 107
7038: PUSH
7039: LD_INT 108
7041: PUSH
7042: LD_INT 109
7044: PUSH
7045: LD_INT 110
7047: PUSH
7048: LD_INT 111
7050: PUSH
7051: LD_INT 112
7053: PUSH
7054: LD_INT 113
7056: PUSH
7057: LD_INT 114
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: ST_TO_ADDR
7080: GO 8027
7082: LD_INT 15
7084: DOUBLE
7085: EQUAL
7086: IFTRUE 7090
7088: GO 7302
7090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7091: LD_ADDR_VAR 0 1
7095: PUSH
7096: LD_INT 1
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: LD_INT 3
7104: PUSH
7105: LD_INT 4
7107: PUSH
7108: LD_INT 5
7110: PUSH
7111: LD_INT 6
7113: PUSH
7114: LD_INT 7
7116: PUSH
7117: LD_INT 8
7119: PUSH
7120: LD_INT 9
7122: PUSH
7123: LD_INT 10
7125: PUSH
7126: LD_INT 11
7128: PUSH
7129: LD_INT 12
7131: PUSH
7132: LD_INT 13
7134: PUSH
7135: LD_INT 14
7137: PUSH
7138: LD_INT 15
7140: PUSH
7141: LD_INT 16
7143: PUSH
7144: LD_INT 17
7146: PUSH
7147: LD_INT 18
7149: PUSH
7150: LD_INT 19
7152: PUSH
7153: LD_INT 20
7155: PUSH
7156: LD_INT 21
7158: PUSH
7159: LD_INT 22
7161: PUSH
7162: LD_INT 23
7164: PUSH
7165: LD_INT 24
7167: PUSH
7168: LD_INT 25
7170: PUSH
7171: LD_INT 26
7173: PUSH
7174: LD_INT 27
7176: PUSH
7177: LD_INT 28
7179: PUSH
7180: LD_INT 29
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: LD_INT 31
7188: PUSH
7189: LD_INT 32
7191: PUSH
7192: LD_INT 33
7194: PUSH
7195: LD_INT 34
7197: PUSH
7198: LD_INT 36
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 101
7240: PUSH
7241: LD_INT 102
7243: PUSH
7244: LD_INT 103
7246: PUSH
7247: LD_INT 104
7249: PUSH
7250: LD_INT 105
7252: PUSH
7253: LD_INT 106
7255: PUSH
7256: LD_INT 107
7258: PUSH
7259: LD_INT 108
7261: PUSH
7262: LD_INT 109
7264: PUSH
7265: LD_INT 110
7267: PUSH
7268: LD_INT 111
7270: PUSH
7271: LD_INT 112
7273: PUSH
7274: LD_INT 113
7276: PUSH
7277: LD_INT 114
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: ST_TO_ADDR
7300: GO 8027
7302: LD_INT 16
7304: DOUBLE
7305: EQUAL
7306: IFTRUE 7310
7308: GO 7434
7310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7311: LD_ADDR_VAR 0 1
7315: PUSH
7316: LD_INT 2
7318: PUSH
7319: LD_INT 4
7321: PUSH
7322: LD_INT 5
7324: PUSH
7325: LD_INT 7
7327: PUSH
7328: LD_INT 11
7330: PUSH
7331: LD_INT 12
7333: PUSH
7334: LD_INT 15
7336: PUSH
7337: LD_INT 16
7339: PUSH
7340: LD_INT 20
7342: PUSH
7343: LD_INT 21
7345: PUSH
7346: LD_INT 22
7348: PUSH
7349: LD_INT 23
7351: PUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 26
7357: PUSH
7358: LD_INT 30
7360: PUSH
7361: LD_INT 31
7363: PUSH
7364: LD_INT 32
7366: PUSH
7367: LD_INT 33
7369: PUSH
7370: LD_INT 34
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 101
7396: PUSH
7397: LD_INT 102
7399: PUSH
7400: LD_INT 103
7402: PUSH
7403: LD_INT 106
7405: PUSH
7406: LD_INT 108
7408: PUSH
7409: LD_INT 112
7411: PUSH
7412: LD_INT 113
7414: PUSH
7415: LD_INT 114
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 8027
7434: LD_INT 17
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7654
7442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7443: LD_ADDR_VAR 0 1
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: LD_INT 2
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: LD_INT 4
7459: PUSH
7460: LD_INT 5
7462: PUSH
7463: LD_INT 6
7465: PUSH
7466: LD_INT 7
7468: PUSH
7469: LD_INT 8
7471: PUSH
7472: LD_INT 9
7474: PUSH
7475: LD_INT 10
7477: PUSH
7478: LD_INT 11
7480: PUSH
7481: LD_INT 12
7483: PUSH
7484: LD_INT 13
7486: PUSH
7487: LD_INT 14
7489: PUSH
7490: LD_INT 15
7492: PUSH
7493: LD_INT 16
7495: PUSH
7496: LD_INT 17
7498: PUSH
7499: LD_INT 18
7501: PUSH
7502: LD_INT 19
7504: PUSH
7505: LD_INT 20
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 22
7513: PUSH
7514: LD_INT 23
7516: PUSH
7517: LD_INT 24
7519: PUSH
7520: LD_INT 25
7522: PUSH
7523: LD_INT 26
7525: PUSH
7526: LD_INT 27
7528: PUSH
7529: LD_INT 28
7531: PUSH
7532: LD_INT 29
7534: PUSH
7535: LD_INT 30
7537: PUSH
7538: LD_INT 31
7540: PUSH
7541: LD_INT 32
7543: PUSH
7544: LD_INT 33
7546: PUSH
7547: LD_INT 34
7549: PUSH
7550: LD_INT 36
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 101
7592: PUSH
7593: LD_INT 102
7595: PUSH
7596: LD_INT 103
7598: PUSH
7599: LD_INT 104
7601: PUSH
7602: LD_INT 105
7604: PUSH
7605: LD_INT 106
7607: PUSH
7608: LD_INT 107
7610: PUSH
7611: LD_INT 108
7613: PUSH
7614: LD_INT 109
7616: PUSH
7617: LD_INT 110
7619: PUSH
7620: LD_INT 111
7622: PUSH
7623: LD_INT 112
7625: PUSH
7626: LD_INT 113
7628: PUSH
7629: LD_INT 114
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: ST_TO_ADDR
7652: GO 8027
7654: LD_INT 18
7656: DOUBLE
7657: EQUAL
7658: IFTRUE 7662
7660: GO 7798
7662: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7663: LD_ADDR_VAR 0 1
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: LD_INT 5
7676: PUSH
7677: LD_INT 7
7679: PUSH
7680: LD_INT 11
7682: PUSH
7683: LD_INT 12
7685: PUSH
7686: LD_INT 15
7688: PUSH
7689: LD_INT 16
7691: PUSH
7692: LD_INT 20
7694: PUSH
7695: LD_INT 21
7697: PUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 23
7703: PUSH
7704: LD_INT 25
7706: PUSH
7707: LD_INT 26
7709: PUSH
7710: LD_INT 30
7712: PUSH
7713: LD_INT 31
7715: PUSH
7716: LD_INT 32
7718: PUSH
7719: LD_INT 33
7721: PUSH
7722: LD_INT 34
7724: PUSH
7725: LD_INT 35
7727: PUSH
7728: LD_INT 36
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 101
7756: PUSH
7757: LD_INT 102
7759: PUSH
7760: LD_INT 103
7762: PUSH
7763: LD_INT 106
7765: PUSH
7766: LD_INT 108
7768: PUSH
7769: LD_INT 112
7771: PUSH
7772: LD_INT 113
7774: PUSH
7775: LD_INT 114
7777: PUSH
7778: LD_INT 115
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: ST_TO_ADDR
7796: GO 8027
7798: LD_INT 19
7800: DOUBLE
7801: EQUAL
7802: IFTRUE 7806
7804: GO 8026
7806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7807: LD_ADDR_VAR 0 1
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: LD_INT 4
7823: PUSH
7824: LD_INT 5
7826: PUSH
7827: LD_INT 6
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 8
7835: PUSH
7836: LD_INT 9
7838: PUSH
7839: LD_INT 10
7841: PUSH
7842: LD_INT 11
7844: PUSH
7845: LD_INT 12
7847: PUSH
7848: LD_INT 13
7850: PUSH
7851: LD_INT 14
7853: PUSH
7854: LD_INT 15
7856: PUSH
7857: LD_INT 16
7859: PUSH
7860: LD_INT 17
7862: PUSH
7863: LD_INT 18
7865: PUSH
7866: LD_INT 19
7868: PUSH
7869: LD_INT 20
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 22
7877: PUSH
7878: LD_INT 23
7880: PUSH
7881: LD_INT 24
7883: PUSH
7884: LD_INT 25
7886: PUSH
7887: LD_INT 26
7889: PUSH
7890: LD_INT 27
7892: PUSH
7893: LD_INT 28
7895: PUSH
7896: LD_INT 29
7898: PUSH
7899: LD_INT 30
7901: PUSH
7902: LD_INT 31
7904: PUSH
7905: LD_INT 32
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 34
7913: PUSH
7914: LD_INT 35
7916: PUSH
7917: LD_INT 36
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 101
7960: PUSH
7961: LD_INT 102
7963: PUSH
7964: LD_INT 103
7966: PUSH
7967: LD_INT 104
7969: PUSH
7970: LD_INT 105
7972: PUSH
7973: LD_INT 106
7975: PUSH
7976: LD_INT 107
7978: PUSH
7979: LD_INT 108
7981: PUSH
7982: LD_INT 109
7984: PUSH
7985: LD_INT 110
7987: PUSH
7988: LD_INT 111
7990: PUSH
7991: LD_INT 112
7993: PUSH
7994: LD_INT 113
7996: PUSH
7997: LD_INT 114
7999: PUSH
8000: LD_INT 115
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: ST_TO_ADDR
8024: GO 8027
8026: POP
// end ; if result then
8027: LD_VAR 0 1
8031: IFFALSE 8320
// begin normal :=  ;
8033: LD_ADDR_VAR 0 3
8037: PUSH
8038: LD_STRING 
8040: ST_TO_ADDR
// hardcore :=  ;
8041: LD_ADDR_VAR 0 4
8045: PUSH
8046: LD_STRING 
8048: ST_TO_ADDR
// for i = 1 to normalCounter do
8049: LD_ADDR_VAR 0 5
8053: PUSH
8054: DOUBLE
8055: LD_INT 1
8057: DEC
8058: ST_TO_ADDR
8059: LD_EXP 13
8063: PUSH
8064: FOR_TO
8065: IFFALSE 8166
// begin tmp := 0 ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_STRING 0
8074: ST_TO_ADDR
// if result [ 1 ] then
8075: LD_VAR 0 1
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: IFFALSE 8148
// if result [ 1 ] [ 1 ] = i then
8085: LD_VAR 0 1
8089: PUSH
8090: LD_INT 1
8092: ARRAY
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PUSH
8098: LD_VAR 0 5
8102: EQUAL
8103: IFFALSE 8148
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8105: LD_ADDR_VAR 0 1
8109: PUSH
8110: LD_VAR 0 1
8114: PPUSH
8115: LD_INT 1
8117: PPUSH
8118: LD_VAR 0 1
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: PPUSH
8127: LD_INT 1
8129: PPUSH
8130: CALL_OW 3
8134: PPUSH
8135: CALL_OW 1
8139: ST_TO_ADDR
// tmp := 1 ;
8140: LD_ADDR_VAR 0 2
8144: PUSH
8145: LD_STRING 1
8147: ST_TO_ADDR
// end ; normal := normal & tmp ;
8148: LD_ADDR_VAR 0 3
8152: PUSH
8153: LD_VAR 0 3
8157: PUSH
8158: LD_VAR 0 2
8162: STR
8163: ST_TO_ADDR
// end ;
8164: GO 8064
8166: POP
8167: POP
// for i = 1 to hardcoreCounter do
8168: LD_ADDR_VAR 0 5
8172: PUSH
8173: DOUBLE
8174: LD_INT 1
8176: DEC
8177: ST_TO_ADDR
8178: LD_EXP 14
8182: PUSH
8183: FOR_TO
8184: IFFALSE 8289
// begin tmp := 0 ;
8186: LD_ADDR_VAR 0 2
8190: PUSH
8191: LD_STRING 0
8193: ST_TO_ADDR
// if result [ 2 ] then
8194: LD_VAR 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: IFFALSE 8271
// if result [ 2 ] [ 1 ] = 100 + i then
8204: LD_VAR 0 1
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PUSH
8213: LD_INT 1
8215: ARRAY
8216: PUSH
8217: LD_INT 100
8219: PUSH
8220: LD_VAR 0 5
8224: PLUS
8225: EQUAL
8226: IFFALSE 8271
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8228: LD_ADDR_VAR 0 1
8232: PUSH
8233: LD_VAR 0 1
8237: PPUSH
8238: LD_INT 2
8240: PPUSH
8241: LD_VAR 0 1
8245: PUSH
8246: LD_INT 2
8248: ARRAY
8249: PPUSH
8250: LD_INT 1
8252: PPUSH
8253: CALL_OW 3
8257: PPUSH
8258: CALL_OW 1
8262: ST_TO_ADDR
// tmp := 1 ;
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_STRING 1
8270: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8271: LD_ADDR_VAR 0 4
8275: PUSH
8276: LD_VAR 0 4
8280: PUSH
8281: LD_VAR 0 2
8285: STR
8286: ST_TO_ADDR
// end ;
8287: GO 8183
8289: POP
8290: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8291: LD_STRING getStreamItemsFromMission("
8293: PUSH
8294: LD_VAR 0 3
8298: STR
8299: PUSH
8300: LD_STRING ","
8302: STR
8303: PUSH
8304: LD_VAR 0 4
8308: STR
8309: PUSH
8310: LD_STRING ")
8312: STR
8313: PPUSH
8314: CALL_OW 559
// end else
8318: GO 8327
// ToLua ( getStreamItemsFromMission("","") ) ;
8320: LD_STRING getStreamItemsFromMission("","")
8322: PPUSH
8323: CALL_OW 559
// end ;
8327: LD_VAR 0 1
8331: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8332: LD_VAR 0 2
8336: PUSH
8337: LD_INT 100
8339: EQUAL
8340: IFFALSE 9289
// begin if not StreamModeActive then
8342: LD_EXP 12
8346: NOT
8347: IFFALSE 8357
// StreamModeActive := true ;
8349: LD_ADDR_EXP 12
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 0 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 0
8364: EQUAL
8365: IFFALSE 8371
// InitStreamMode ;
8367: CALL 4629 0 0
// if p3 = 1 then
8371: LD_VAR 0 3
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8389
// sRocket := true ;
8381: LD_ADDR_EXP 17
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// if p3 = 2 then
8389: LD_VAR 0 3
8393: PUSH
8394: LD_INT 2
8396: EQUAL
8397: IFFALSE 8407
// sSpeed := true ;
8399: LD_ADDR_EXP 16
8403: PUSH
8404: LD_INT 1
8406: ST_TO_ADDR
// if p3 = 3 then
8407: LD_VAR 0 3
8411: PUSH
8412: LD_INT 3
8414: EQUAL
8415: IFFALSE 8425
// sEngine := true ;
8417: LD_ADDR_EXP 18
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// if p3 = 4 then
8425: LD_VAR 0 3
8429: PUSH
8430: LD_INT 4
8432: EQUAL
8433: IFFALSE 8443
// sSpec := true ;
8435: LD_ADDR_EXP 15
8439: PUSH
8440: LD_INT 1
8442: ST_TO_ADDR
// if p3 = 5 then
8443: LD_VAR 0 3
8447: PUSH
8448: LD_INT 5
8450: EQUAL
8451: IFFALSE 8461
// sLevel := true ;
8453: LD_ADDR_EXP 19
8457: PUSH
8458: LD_INT 1
8460: ST_TO_ADDR
// if p3 = 6 then
8461: LD_VAR 0 3
8465: PUSH
8466: LD_INT 6
8468: EQUAL
8469: IFFALSE 8479
// sArmoury := true ;
8471: LD_ADDR_EXP 20
8475: PUSH
8476: LD_INT 1
8478: ST_TO_ADDR
// if p3 = 7 then
8479: LD_VAR 0 3
8483: PUSH
8484: LD_INT 7
8486: EQUAL
8487: IFFALSE 8497
// sRadar := true ;
8489: LD_ADDR_EXP 21
8493: PUSH
8494: LD_INT 1
8496: ST_TO_ADDR
// if p3 = 8 then
8497: LD_VAR 0 3
8501: PUSH
8502: LD_INT 8
8504: EQUAL
8505: IFFALSE 8515
// sBunker := true ;
8507: LD_ADDR_EXP 22
8511: PUSH
8512: LD_INT 1
8514: ST_TO_ADDR
// if p3 = 9 then
8515: LD_VAR 0 3
8519: PUSH
8520: LD_INT 9
8522: EQUAL
8523: IFFALSE 8533
// sHack := true ;
8525: LD_ADDR_EXP 23
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// if p3 = 10 then
8533: LD_VAR 0 3
8537: PUSH
8538: LD_INT 10
8540: EQUAL
8541: IFFALSE 8551
// sFire := true ;
8543: LD_ADDR_EXP 24
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// if p3 = 11 then
8551: LD_VAR 0 3
8555: PUSH
8556: LD_INT 11
8558: EQUAL
8559: IFFALSE 8569
// sRefresh := true ;
8561: LD_ADDR_EXP 25
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// if p3 = 12 then
8569: LD_VAR 0 3
8573: PUSH
8574: LD_INT 12
8576: EQUAL
8577: IFFALSE 8587
// sExp := true ;
8579: LD_ADDR_EXP 26
8583: PUSH
8584: LD_INT 1
8586: ST_TO_ADDR
// if p3 = 13 then
8587: LD_VAR 0 3
8591: PUSH
8592: LD_INT 13
8594: EQUAL
8595: IFFALSE 8605
// sDepot := true ;
8597: LD_ADDR_EXP 27
8601: PUSH
8602: LD_INT 1
8604: ST_TO_ADDR
// if p3 = 14 then
8605: LD_VAR 0 3
8609: PUSH
8610: LD_INT 14
8612: EQUAL
8613: IFFALSE 8623
// sFlag := true ;
8615: LD_ADDR_EXP 28
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// if p3 = 15 then
8623: LD_VAR 0 3
8627: PUSH
8628: LD_INT 15
8630: EQUAL
8631: IFFALSE 8641
// sKamikadze := true ;
8633: LD_ADDR_EXP 36
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// if p3 = 16 then
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 16
8648: EQUAL
8649: IFFALSE 8659
// sTroll := true ;
8651: LD_ADDR_EXP 37
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// if p3 = 17 then
8659: LD_VAR 0 3
8663: PUSH
8664: LD_INT 17
8666: EQUAL
8667: IFFALSE 8677
// sSlow := true ;
8669: LD_ADDR_EXP 38
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// if p3 = 18 then
8677: LD_VAR 0 3
8681: PUSH
8682: LD_INT 18
8684: EQUAL
8685: IFFALSE 8695
// sLack := true ;
8687: LD_ADDR_EXP 39
8691: PUSH
8692: LD_INT 1
8694: ST_TO_ADDR
// if p3 = 19 then
8695: LD_VAR 0 3
8699: PUSH
8700: LD_INT 19
8702: EQUAL
8703: IFFALSE 8713
// sTank := true ;
8705: LD_ADDR_EXP 41
8709: PUSH
8710: LD_INT 1
8712: ST_TO_ADDR
// if p3 = 20 then
8713: LD_VAR 0 3
8717: PUSH
8718: LD_INT 20
8720: EQUAL
8721: IFFALSE 8731
// sRemote := true ;
8723: LD_ADDR_EXP 42
8727: PUSH
8728: LD_INT 1
8730: ST_TO_ADDR
// if p3 = 21 then
8731: LD_VAR 0 3
8735: PUSH
8736: LD_INT 21
8738: EQUAL
8739: IFFALSE 8749
// sPowell := true ;
8741: LD_ADDR_EXP 43
8745: PUSH
8746: LD_INT 1
8748: ST_TO_ADDR
// if p3 = 22 then
8749: LD_VAR 0 3
8753: PUSH
8754: LD_INT 22
8756: EQUAL
8757: IFFALSE 8767
// sTeleport := true ;
8759: LD_ADDR_EXP 46
8763: PUSH
8764: LD_INT 1
8766: ST_TO_ADDR
// if p3 = 23 then
8767: LD_VAR 0 3
8771: PUSH
8772: LD_INT 23
8774: EQUAL
8775: IFFALSE 8785
// sOilTower := true ;
8777: LD_ADDR_EXP 48
8781: PUSH
8782: LD_INT 1
8784: ST_TO_ADDR
// if p3 = 24 then
8785: LD_VAR 0 3
8789: PUSH
8790: LD_INT 24
8792: EQUAL
8793: IFFALSE 8803
// sShovel := true ;
8795: LD_ADDR_EXP 49
8799: PUSH
8800: LD_INT 1
8802: ST_TO_ADDR
// if p3 = 25 then
8803: LD_VAR 0 3
8807: PUSH
8808: LD_INT 25
8810: EQUAL
8811: IFFALSE 8821
// sSheik := true ;
8813: LD_ADDR_EXP 50
8817: PUSH
8818: LD_INT 1
8820: ST_TO_ADDR
// if p3 = 26 then
8821: LD_VAR 0 3
8825: PUSH
8826: LD_INT 26
8828: EQUAL
8829: IFFALSE 8839
// sEarthquake := true ;
8831: LD_ADDR_EXP 52
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// if p3 = 27 then
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 27
8846: EQUAL
8847: IFFALSE 8857
// sAI := true ;
8849: LD_ADDR_EXP 53
8853: PUSH
8854: LD_INT 1
8856: ST_TO_ADDR
// if p3 = 28 then
8857: LD_VAR 0 3
8861: PUSH
8862: LD_INT 28
8864: EQUAL
8865: IFFALSE 8875
// sCargo := true ;
8867: LD_ADDR_EXP 56
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// if p3 = 29 then
8875: LD_VAR 0 3
8879: PUSH
8880: LD_INT 29
8882: EQUAL
8883: IFFALSE 8893
// sDLaser := true ;
8885: LD_ADDR_EXP 57
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// if p3 = 30 then
8893: LD_VAR 0 3
8897: PUSH
8898: LD_INT 30
8900: EQUAL
8901: IFFALSE 8911
// sExchange := true ;
8903: LD_ADDR_EXP 58
8907: PUSH
8908: LD_INT 1
8910: ST_TO_ADDR
// if p3 = 31 then
8911: LD_VAR 0 3
8915: PUSH
8916: LD_INT 31
8918: EQUAL
8919: IFFALSE 8929
// sFac := true ;
8921: LD_ADDR_EXP 59
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// if p3 = 32 then
8929: LD_VAR 0 3
8933: PUSH
8934: LD_INT 32
8936: EQUAL
8937: IFFALSE 8947
// sPower := true ;
8939: LD_ADDR_EXP 60
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// if p3 = 33 then
8947: LD_VAR 0 3
8951: PUSH
8952: LD_INT 33
8954: EQUAL
8955: IFFALSE 8965
// sRandom := true ;
8957: LD_ADDR_EXP 61
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// if p3 = 34 then
8965: LD_VAR 0 3
8969: PUSH
8970: LD_INT 34
8972: EQUAL
8973: IFFALSE 8983
// sShield := true ;
8975: LD_ADDR_EXP 62
8979: PUSH
8980: LD_INT 1
8982: ST_TO_ADDR
// if p3 = 35 then
8983: LD_VAR 0 3
8987: PUSH
8988: LD_INT 35
8990: EQUAL
8991: IFFALSE 9001
// sTime := true ;
8993: LD_ADDR_EXP 63
8997: PUSH
8998: LD_INT 1
9000: ST_TO_ADDR
// if p3 = 36 then
9001: LD_VAR 0 3
9005: PUSH
9006: LD_INT 36
9008: EQUAL
9009: IFFALSE 9019
// sTools := true ;
9011: LD_ADDR_EXP 64
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// if p3 = 101 then
9019: LD_VAR 0 3
9023: PUSH
9024: LD_INT 101
9026: EQUAL
9027: IFFALSE 9037
// sSold := true ;
9029: LD_ADDR_EXP 29
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// if p3 = 102 then
9037: LD_VAR 0 3
9041: PUSH
9042: LD_INT 102
9044: EQUAL
9045: IFFALSE 9055
// sDiff := true ;
9047: LD_ADDR_EXP 30
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// if p3 = 103 then
9055: LD_VAR 0 3
9059: PUSH
9060: LD_INT 103
9062: EQUAL
9063: IFFALSE 9073
// sFog := true ;
9065: LD_ADDR_EXP 33
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// if p3 = 104 then
9073: LD_VAR 0 3
9077: PUSH
9078: LD_INT 104
9080: EQUAL
9081: IFFALSE 9091
// sReset := true ;
9083: LD_ADDR_EXP 34
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// if p3 = 105 then
9091: LD_VAR 0 3
9095: PUSH
9096: LD_INT 105
9098: EQUAL
9099: IFFALSE 9109
// sSun := true ;
9101: LD_ADDR_EXP 35
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// if p3 = 106 then
9109: LD_VAR 0 3
9113: PUSH
9114: LD_INT 106
9116: EQUAL
9117: IFFALSE 9127
// sTiger := true ;
9119: LD_ADDR_EXP 31
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// if p3 = 107 then
9127: LD_VAR 0 3
9131: PUSH
9132: LD_INT 107
9134: EQUAL
9135: IFFALSE 9145
// sBomb := true ;
9137: LD_ADDR_EXP 32
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// if p3 = 108 then
9145: LD_VAR 0 3
9149: PUSH
9150: LD_INT 108
9152: EQUAL
9153: IFFALSE 9163
// sWound := true ;
9155: LD_ADDR_EXP 40
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// if p3 = 109 then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 109
9170: EQUAL
9171: IFFALSE 9181
// sBetray := true ;
9173: LD_ADDR_EXP 44
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// if p3 = 110 then
9181: LD_VAR 0 3
9185: PUSH
9186: LD_INT 110
9188: EQUAL
9189: IFFALSE 9199
// sContamin := true ;
9191: LD_ADDR_EXP 45
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// if p3 = 111 then
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 111
9206: EQUAL
9207: IFFALSE 9217
// sOil := true ;
9209: LD_ADDR_EXP 47
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// if p3 = 112 then
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 112
9224: EQUAL
9225: IFFALSE 9235
// sStu := true ;
9227: LD_ADDR_EXP 51
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// if p3 = 113 then
9235: LD_VAR 0 3
9239: PUSH
9240: LD_INT 113
9242: EQUAL
9243: IFFALSE 9253
// sBazooka := true ;
9245: LD_ADDR_EXP 54
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// if p3 = 114 then
9253: LD_VAR 0 3
9257: PUSH
9258: LD_INT 114
9260: EQUAL
9261: IFFALSE 9271
// sMortar := true ;
9263: LD_ADDR_EXP 55
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// if p3 = 115 then
9271: LD_VAR 0 3
9275: PUSH
9276: LD_INT 115
9278: EQUAL
9279: IFFALSE 9289
// sRanger := true ;
9281: LD_ADDR_EXP 65
9285: PUSH
9286: LD_INT 1
9288: ST_TO_ADDR
// end ; end ;
9289: PPOPN 6
9291: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9292: LD_EXP 12
9296: PUSH
9297: LD_EXP 17
9301: AND
9302: IFFALSE 9426
9304: GO 9306
9306: DISABLE
9307: LD_INT 0
9309: PPUSH
9310: PPUSH
// begin enable ;
9311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9312: LD_ADDR_VAR 0 2
9316: PUSH
9317: LD_INT 22
9319: PUSH
9320: LD_OWVAR 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 7
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 34
9344: PUSH
9345: LD_INT 45
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 34
9354: PUSH
9355: LD_INT 28
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: LD_INT 34
9364: PUSH
9365: LD_INT 47
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: ST_TO_ADDR
// if not tmp then
9388: LD_VAR 0 2
9392: NOT
9393: IFFALSE 9397
// exit ;
9395: GO 9426
// for i in tmp do
9397: LD_ADDR_VAR 0 1
9401: PUSH
9402: LD_VAR 0 2
9406: PUSH
9407: FOR_IN
9408: IFFALSE 9424
// begin SetLives ( i , 0 ) ;
9410: LD_VAR 0 1
9414: PPUSH
9415: LD_INT 0
9417: PPUSH
9418: CALL_OW 234
// end ;
9422: GO 9407
9424: POP
9425: POP
// end ;
9426: PPOPN 2
9428: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9429: LD_EXP 12
9433: PUSH
9434: LD_EXP 18
9438: AND
9439: IFFALSE 9523
9441: GO 9443
9443: DISABLE
9444: LD_INT 0
9446: PPUSH
9447: PPUSH
// begin enable ;
9448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9449: LD_ADDR_VAR 0 2
9453: PUSH
9454: LD_INT 22
9456: PUSH
9457: LD_OWVAR 2
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 32
9468: PUSH
9469: LD_INT 3
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 69
9484: ST_TO_ADDR
// if not tmp then
9485: LD_VAR 0 2
9489: NOT
9490: IFFALSE 9494
// exit ;
9492: GO 9523
// for i in tmp do
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_VAR 0 2
9503: PUSH
9504: FOR_IN
9505: IFFALSE 9521
// begin SetLives ( i , 0 ) ;
9507: LD_VAR 0 1
9511: PPUSH
9512: LD_INT 0
9514: PPUSH
9515: CALL_OW 234
// end ;
9519: GO 9504
9521: POP
9522: POP
// end ;
9523: PPOPN 2
9525: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9526: LD_EXP 12
9530: PUSH
9531: LD_EXP 15
9535: AND
9536: IFFALSE 9629
9538: GO 9540
9540: DISABLE
9541: LD_INT 0
9543: PPUSH
// begin enable ;
9544: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9545: LD_ADDR_VAR 0 1
9549: PUSH
9550: LD_INT 22
9552: PUSH
9553: LD_OWVAR 2
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 2
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 5
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 25
9577: PUSH
9578: LD_INT 9
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 25
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 69
9609: PUSH
9610: FOR_IN
9611: IFFALSE 9627
// begin SetClass ( i , 1 ) ;
9613: LD_VAR 0 1
9617: PPUSH
9618: LD_INT 1
9620: PPUSH
9621: CALL_OW 336
// end ;
9625: GO 9610
9627: POP
9628: POP
// end ;
9629: PPOPN 1
9631: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9632: LD_EXP 12
9636: PUSH
9637: LD_EXP 16
9641: AND
9642: PUSH
9643: LD_OWVAR 65
9647: PUSH
9648: LD_INT 7
9650: LESS
9651: AND
9652: IFFALSE 9666
9654: GO 9656
9656: DISABLE
// begin enable ;
9657: ENABLE
// game_speed := 7 ;
9658: LD_ADDR_OWVAR 65
9662: PUSH
9663: LD_INT 7
9665: ST_TO_ADDR
// end ;
9666: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9667: LD_EXP 12
9671: PUSH
9672: LD_EXP 19
9676: AND
9677: IFFALSE 9879
9679: GO 9681
9681: DISABLE
9682: LD_INT 0
9684: PPUSH
9685: PPUSH
9686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9687: LD_ADDR_VAR 0 3
9691: PUSH
9692: LD_INT 81
9694: PUSH
9695: LD_OWVAR 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 21
9706: PUSH
9707: LD_INT 1
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if not tmp then
9723: LD_VAR 0 3
9727: NOT
9728: IFFALSE 9732
// exit ;
9730: GO 9879
// if tmp > 5 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 5
9739: GREATER
9740: IFFALSE 9752
// k := 5 else
9742: LD_ADDR_VAR 0 2
9746: PUSH
9747: LD_INT 5
9749: ST_TO_ADDR
9750: GO 9762
// k := tmp ;
9752: LD_ADDR_VAR 0 2
9756: PUSH
9757: LD_VAR 0 3
9761: ST_TO_ADDR
// for i := 1 to k do
9762: LD_ADDR_VAR 0 1
9766: PUSH
9767: DOUBLE
9768: LD_INT 1
9770: DEC
9771: ST_TO_ADDR
9772: LD_VAR 0 2
9776: PUSH
9777: FOR_TO
9778: IFFALSE 9877
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9780: LD_VAR 0 3
9784: PUSH
9785: LD_VAR 0 1
9789: ARRAY
9790: PPUSH
9791: LD_VAR 0 1
9795: PUSH
9796: LD_INT 4
9798: MOD
9799: PUSH
9800: LD_INT 1
9802: PLUS
9803: PPUSH
9804: CALL_OW 259
9808: PUSH
9809: LD_INT 10
9811: LESS
9812: IFFALSE 9875
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9814: LD_VAR 0 3
9818: PUSH
9819: LD_VAR 0 1
9823: ARRAY
9824: PPUSH
9825: LD_VAR 0 1
9829: PUSH
9830: LD_INT 4
9832: MOD
9833: PUSH
9834: LD_INT 1
9836: PLUS
9837: PPUSH
9838: LD_VAR 0 3
9842: PUSH
9843: LD_VAR 0 1
9847: ARRAY
9848: PPUSH
9849: LD_VAR 0 1
9853: PUSH
9854: LD_INT 4
9856: MOD
9857: PUSH
9858: LD_INT 1
9860: PLUS
9861: PPUSH
9862: CALL_OW 259
9866: PUSH
9867: LD_INT 1
9869: PLUS
9870: PPUSH
9871: CALL_OW 237
9875: GO 9777
9877: POP
9878: POP
// end ;
9879: PPOPN 3
9881: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9882: LD_EXP 12
9886: PUSH
9887: LD_EXP 20
9891: AND
9892: IFFALSE 9912
9894: GO 9896
9896: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9897: LD_INT 4
9899: PPUSH
9900: LD_OWVAR 2
9904: PPUSH
9905: LD_INT 0
9907: PPUSH
9908: CALL_OW 324
9912: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9913: LD_EXP 12
9917: PUSH
9918: LD_EXP 49
9922: AND
9923: IFFALSE 9943
9925: GO 9927
9927: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9928: LD_INT 19
9930: PPUSH
9931: LD_OWVAR 2
9935: PPUSH
9936: LD_INT 0
9938: PPUSH
9939: CALL_OW 324
9943: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9944: LD_EXP 12
9948: PUSH
9949: LD_EXP 21
9953: AND
9954: IFFALSE 10056
9956: GO 9958
9958: DISABLE
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
// begin enable ;
9963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9964: LD_ADDR_VAR 0 2
9968: PUSH
9969: LD_INT 22
9971: PUSH
9972: LD_OWVAR 2
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: LD_INT 34
9986: PUSH
9987: LD_INT 11
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 34
9996: PUSH
9997: LD_INT 30
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 69
10017: ST_TO_ADDR
// if not tmp then
10018: LD_VAR 0 2
10022: NOT
10023: IFFALSE 10027
// exit ;
10025: GO 10056
// for i in tmp do
10027: LD_ADDR_VAR 0 1
10031: PUSH
10032: LD_VAR 0 2
10036: PUSH
10037: FOR_IN
10038: IFFALSE 10054
// begin SetLives ( i , 0 ) ;
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_INT 0
10047: PPUSH
10048: CALL_OW 234
// end ;
10052: GO 10037
10054: POP
10055: POP
// end ;
10056: PPOPN 2
10058: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10059: LD_EXP 12
10063: PUSH
10064: LD_EXP 22
10068: AND
10069: IFFALSE 10089
10071: GO 10073
10073: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10074: LD_INT 32
10076: PPUSH
10077: LD_OWVAR 2
10081: PPUSH
10082: LD_INT 0
10084: PPUSH
10085: CALL_OW 324
10089: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10090: LD_EXP 12
10094: PUSH
10095: LD_EXP 23
10099: AND
10100: IFFALSE 10281
10102: GO 10104
10104: DISABLE
10105: LD_INT 0
10107: PPUSH
10108: PPUSH
10109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10110: LD_ADDR_VAR 0 2
10114: PUSH
10115: LD_INT 22
10117: PUSH
10118: LD_OWVAR 2
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 33
10129: PUSH
10130: LD_INT 3
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: ST_TO_ADDR
// if not tmp then
10146: LD_VAR 0 2
10150: NOT
10151: IFFALSE 10155
// exit ;
10153: GO 10281
// side := 0 ;
10155: LD_ADDR_VAR 0 3
10159: PUSH
10160: LD_INT 0
10162: ST_TO_ADDR
// for i := 1 to 8 do
10163: LD_ADDR_VAR 0 1
10167: PUSH
10168: DOUBLE
10169: LD_INT 1
10171: DEC
10172: ST_TO_ADDR
10173: LD_INT 8
10175: PUSH
10176: FOR_TO
10177: IFFALSE 10225
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10179: LD_OWVAR 2
10183: PUSH
10184: LD_VAR 0 1
10188: NONEQUAL
10189: PUSH
10190: LD_OWVAR 2
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 81
10204: PUSH
10205: LD_INT 2
10207: EQUAL
10208: AND
10209: IFFALSE 10223
// begin side := i ;
10211: LD_ADDR_VAR 0 3
10215: PUSH
10216: LD_VAR 0 1
10220: ST_TO_ADDR
// break ;
10221: GO 10225
// end ;
10223: GO 10176
10225: POP
10226: POP
// if not side then
10227: LD_VAR 0 3
10231: NOT
10232: IFFALSE 10236
// exit ;
10234: GO 10281
// for i := 1 to tmp do
10236: LD_ADDR_VAR 0 1
10240: PUSH
10241: DOUBLE
10242: LD_INT 1
10244: DEC
10245: ST_TO_ADDR
10246: LD_VAR 0 2
10250: PUSH
10251: FOR_TO
10252: IFFALSE 10279
// if Prob ( 60 ) then
10254: LD_INT 60
10256: PPUSH
10257: CALL_OW 13
10261: IFFALSE 10277
// SetSide ( i , side ) ;
10263: LD_VAR 0 1
10267: PPUSH
10268: LD_VAR 0 3
10272: PPUSH
10273: CALL_OW 235
10277: GO 10251
10279: POP
10280: POP
// end ;
10281: PPOPN 3
10283: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10284: LD_EXP 12
10288: PUSH
10289: LD_EXP 25
10293: AND
10294: IFFALSE 10413
10296: GO 10298
10298: DISABLE
10299: LD_INT 0
10301: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10302: LD_ADDR_VAR 0 1
10306: PUSH
10307: LD_INT 22
10309: PUSH
10310: LD_OWVAR 2
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 21
10321: PUSH
10322: LD_INT 1
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: LD_INT 23
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PUSH
10356: FOR_IN
10357: IFFALSE 10411
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10359: LD_VAR 0 1
10363: PPUSH
10364: CALL_OW 257
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 4
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: IN
10387: IFFALSE 10409
// SetClass ( un , rand ( 1 , 4 ) ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: LD_INT 4
10399: PPUSH
10400: CALL_OW 12
10404: PPUSH
10405: CALL_OW 336
10409: GO 10356
10411: POP
10412: POP
// end ;
10413: PPOPN 1
10415: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10416: LD_EXP 12
10420: PUSH
10421: LD_EXP 24
10425: AND
10426: IFFALSE 10505
10428: GO 10430
10430: DISABLE
10431: LD_INT 0
10433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10434: LD_ADDR_VAR 0 1
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_OWVAR 2
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 3
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: ST_TO_ADDR
// if not tmp then
10470: LD_VAR 0 1
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10479: LD_VAR 0 1
10483: PUSH
10484: LD_INT 1
10486: PPUSH
10487: LD_VAR 0 1
10491: PPUSH
10492: CALL_OW 12
10496: ARRAY
10497: PPUSH
10498: LD_INT 100
10500: PPUSH
10501: CALL_OW 234
// end ;
10505: PPOPN 1
10507: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10508: LD_EXP 12
10512: PUSH
10513: LD_EXP 26
10517: AND
10518: IFFALSE 10616
10520: GO 10522
10522: DISABLE
10523: LD_INT 0
10525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10526: LD_ADDR_VAR 0 1
10530: PUSH
10531: LD_INT 22
10533: PUSH
10534: LD_OWVAR 2
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 1
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: ST_TO_ADDR
// if not tmp then
10562: LD_VAR 0 1
10566: NOT
10567: IFFALSE 10571
// exit ;
10569: GO 10616
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10571: LD_VAR 0 1
10575: PUSH
10576: LD_INT 1
10578: PPUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 12
10588: ARRAY
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: LD_INT 4
10595: PPUSH
10596: CALL_OW 12
10600: PPUSH
10601: LD_INT 3000
10603: PPUSH
10604: LD_INT 9000
10606: PPUSH
10607: CALL_OW 12
10611: PPUSH
10612: CALL_OW 492
// end ;
10616: PPOPN 1
10618: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10619: LD_EXP 12
10623: PUSH
10624: LD_EXP 27
10628: AND
10629: IFFALSE 10649
10631: GO 10633
10633: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10634: LD_INT 1
10636: PPUSH
10637: LD_OWVAR 2
10641: PPUSH
10642: LD_INT 0
10644: PPUSH
10645: CALL_OW 324
10649: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10650: LD_EXP 12
10654: PUSH
10655: LD_EXP 28
10659: AND
10660: IFFALSE 10743
10662: GO 10664
10664: DISABLE
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_OWVAR 2
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 21
10688: PUSH
10689: LD_INT 3
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 69
10704: ST_TO_ADDR
// if not tmp then
10705: LD_VAR 0 2
10709: NOT
10710: IFFALSE 10714
// exit ;
10712: GO 10743
// for i in tmp do
10714: LD_ADDR_VAR 0 1
10718: PUSH
10719: LD_VAR 0 2
10723: PUSH
10724: FOR_IN
10725: IFFALSE 10741
// SetBLevel ( i , 10 ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_INT 10
10734: PPUSH
10735: CALL_OW 241
10739: GO 10724
10741: POP
10742: POP
// end ;
10743: PPOPN 2
10745: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10746: LD_EXP 12
10750: PUSH
10751: LD_EXP 29
10755: AND
10756: IFFALSE 10867
10758: GO 10760
10760: DISABLE
10761: LD_INT 0
10763: PPUSH
10764: PPUSH
10765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_OWVAR 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 25
10785: PUSH
10786: LD_INT 1
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: ST_TO_ADDR
// if not tmp then
10802: LD_VAR 0 3
10806: NOT
10807: IFFALSE 10811
// exit ;
10809: GO 10867
// un := tmp [ rand ( 1 , tmp ) ] ;
10811: LD_ADDR_VAR 0 2
10815: PUSH
10816: LD_VAR 0 3
10820: PUSH
10821: LD_INT 1
10823: PPUSH
10824: LD_VAR 0 3
10828: PPUSH
10829: CALL_OW 12
10833: ARRAY
10834: ST_TO_ADDR
// if Crawls ( un ) then
10835: LD_VAR 0 2
10839: PPUSH
10840: CALL_OW 318
10844: IFFALSE 10855
// ComWalk ( un ) ;
10846: LD_VAR 0 2
10850: PPUSH
10851: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10855: LD_VAR 0 2
10859: PPUSH
10860: LD_INT 5
10862: PPUSH
10863: CALL_OW 336
// end ;
10867: PPOPN 3
10869: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10870: LD_EXP 12
10874: PUSH
10875: LD_EXP 30
10879: AND
10880: PUSH
10881: LD_OWVAR 67
10885: PUSH
10886: LD_INT 3
10888: LESS
10889: AND
10890: IFFALSE 10909
10892: GO 10894
10894: DISABLE
// Difficulty := Difficulty + 1 ;
10895: LD_ADDR_OWVAR 67
10899: PUSH
10900: LD_OWVAR 67
10904: PUSH
10905: LD_INT 1
10907: PLUS
10908: ST_TO_ADDR
10909: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10910: LD_EXP 12
10914: PUSH
10915: LD_EXP 31
10919: AND
10920: IFFALSE 11023
10922: GO 10924
10924: DISABLE
10925: LD_INT 0
10927: PPUSH
// begin for i := 1 to 5 do
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: DOUBLE
10934: LD_INT 1
10936: DEC
10937: ST_TO_ADDR
10938: LD_INT 5
10940: PUSH
10941: FOR_TO
10942: IFFALSE 11021
// begin uc_nation := nation_nature ;
10944: LD_ADDR_OWVAR 21
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// uc_side := 0 ;
10952: LD_ADDR_OWVAR 20
10956: PUSH
10957: LD_INT 0
10959: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10960: LD_ADDR_OWVAR 29
10964: PUSH
10965: LD_INT 12
10967: PUSH
10968: LD_INT 12
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: ST_TO_ADDR
// hc_agressivity := 20 ;
10975: LD_ADDR_OWVAR 35
10979: PUSH
10980: LD_INT 20
10982: ST_TO_ADDR
// hc_class := class_tiger ;
10983: LD_ADDR_OWVAR 28
10987: PUSH
10988: LD_INT 14
10990: ST_TO_ADDR
// hc_gallery :=  ;
10991: LD_ADDR_OWVAR 33
10995: PUSH
10996: LD_STRING 
10998: ST_TO_ADDR
// hc_name :=  ;
10999: LD_ADDR_OWVAR 26
11003: PUSH
11004: LD_STRING 
11006: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11007: CALL_OW 44
11011: PPUSH
11012: LD_INT 0
11014: PPUSH
11015: CALL_OW 51
// end ;
11019: GO 10941
11021: POP
11022: POP
// end ;
11023: PPOPN 1
11025: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11026: LD_EXP 12
11030: PUSH
11031: LD_EXP 32
11035: AND
11036: IFFALSE 11045
11038: GO 11040
11040: DISABLE
// StreamSibBomb ;
11041: CALL 11046 0 0
11045: END
// export function StreamSibBomb ; var i , x , y ; begin
11046: LD_INT 0
11048: PPUSH
11049: PPUSH
11050: PPUSH
11051: PPUSH
// result := false ;
11052: LD_ADDR_VAR 0 1
11056: PUSH
11057: LD_INT 0
11059: ST_TO_ADDR
// for i := 1 to 16 do
11060: LD_ADDR_VAR 0 2
11064: PUSH
11065: DOUBLE
11066: LD_INT 1
11068: DEC
11069: ST_TO_ADDR
11070: LD_INT 16
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11273
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11076: LD_ADDR_VAR 0 3
11080: PUSH
11081: LD_INT 10
11083: PUSH
11084: LD_INT 20
11086: PUSH
11087: LD_INT 30
11089: PUSH
11090: LD_INT 40
11092: PUSH
11093: LD_INT 50
11095: PUSH
11096: LD_INT 60
11098: PUSH
11099: LD_INT 70
11101: PUSH
11102: LD_INT 80
11104: PUSH
11105: LD_INT 90
11107: PUSH
11108: LD_INT 100
11110: PUSH
11111: LD_INT 110
11113: PUSH
11114: LD_INT 120
11116: PUSH
11117: LD_INT 130
11119: PUSH
11120: LD_INT 140
11122: PUSH
11123: LD_INT 150
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 1
11145: PPUSH
11146: LD_INT 15
11148: PPUSH
11149: CALL_OW 12
11153: ARRAY
11154: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11155: LD_ADDR_VAR 0 4
11159: PUSH
11160: LD_INT 10
11162: PUSH
11163: LD_INT 20
11165: PUSH
11166: LD_INT 30
11168: PUSH
11169: LD_INT 40
11171: PUSH
11172: LD_INT 50
11174: PUSH
11175: LD_INT 60
11177: PUSH
11178: LD_INT 70
11180: PUSH
11181: LD_INT 80
11183: PUSH
11184: LD_INT 90
11186: PUSH
11187: LD_INT 100
11189: PUSH
11190: LD_INT 110
11192: PUSH
11193: LD_INT 120
11195: PUSH
11196: LD_INT 130
11198: PUSH
11199: LD_INT 140
11201: PUSH
11202: LD_INT 150
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 1
11224: PPUSH
11225: LD_INT 15
11227: PPUSH
11228: CALL_OW 12
11232: ARRAY
11233: ST_TO_ADDR
// if ValidHex ( x , y ) then
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_VAR 0 4
11243: PPUSH
11244: CALL_OW 488
11248: IFFALSE 11271
// begin result := [ x , y ] ;
11250: LD_ADDR_VAR 0 1
11254: PUSH
11255: LD_VAR 0 3
11259: PUSH
11260: LD_VAR 0 4
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: ST_TO_ADDR
// break ;
11269: GO 11273
// end ; end ;
11271: GO 11073
11273: POP
11274: POP
// if result then
11275: LD_VAR 0 1
11279: IFFALSE 11339
// begin ToLua ( playSibBomb() ) ;
11281: LD_STRING playSibBomb()
11283: PPUSH
11284: CALL_OW 559
// wait ( 0 0$14 ) ;
11288: LD_INT 490
11290: PPUSH
11291: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11295: LD_VAR 0 1
11299: PUSH
11300: LD_INT 1
11302: ARRAY
11303: PPUSH
11304: LD_VAR 0 1
11308: PUSH
11309: LD_INT 2
11311: ARRAY
11312: PPUSH
11313: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11317: LD_VAR 0 1
11321: PUSH
11322: LD_INT 1
11324: ARRAY
11325: PPUSH
11326: LD_VAR 0 1
11330: PUSH
11331: LD_INT 2
11333: ARRAY
11334: PPUSH
11335: CALL_OW 429
// end ; end ;
11339: LD_VAR 0 1
11343: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11344: LD_EXP 12
11348: PUSH
11349: LD_EXP 34
11353: AND
11354: IFFALSE 11366
11356: GO 11358
11358: DISABLE
// YouLost (  ) ;
11359: LD_STRING 
11361: PPUSH
11362: CALL_OW 104
11366: END
// every 0 0$1 trigger StreamModeActive and sFog do
11367: LD_EXP 12
11371: PUSH
11372: LD_EXP 33
11376: AND
11377: IFFALSE 11391
11379: GO 11381
11381: DISABLE
// FogOff ( your_side ) ;
11382: LD_OWVAR 2
11386: PPUSH
11387: CALL_OW 344
11391: END
// every 0 0$1 trigger StreamModeActive and sSun do
11392: LD_EXP 12
11396: PUSH
11397: LD_EXP 35
11401: AND
11402: IFFALSE 11430
11404: GO 11406
11406: DISABLE
// begin solar_recharge_percent := 0 ;
11407: LD_ADDR_OWVAR 79
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11415: LD_INT 10500
11417: PPUSH
11418: CALL_OW 67
// solar_recharge_percent := 100 ;
11422: LD_ADDR_OWVAR 79
11426: PUSH
11427: LD_INT 100
11429: ST_TO_ADDR
// end ;
11430: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11431: LD_EXP 12
11435: PUSH
11436: LD_EXP 36
11440: AND
11441: IFFALSE 11680
11443: GO 11445
11445: DISABLE
11446: LD_INT 0
11448: PPUSH
11449: PPUSH
11450: PPUSH
// begin tmp := [ ] ;
11451: LD_ADDR_VAR 0 3
11455: PUSH
11456: EMPTY
11457: ST_TO_ADDR
// for i := 1 to 6 do
11458: LD_ADDR_VAR 0 1
11462: PUSH
11463: DOUBLE
11464: LD_INT 1
11466: DEC
11467: ST_TO_ADDR
11468: LD_INT 6
11470: PUSH
11471: FOR_TO
11472: IFFALSE 11577
// begin uc_nation := nation_nature ;
11474: LD_ADDR_OWVAR 21
11478: PUSH
11479: LD_INT 0
11481: ST_TO_ADDR
// uc_side := 0 ;
11482: LD_ADDR_OWVAR 20
11486: PUSH
11487: LD_INT 0
11489: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11490: LD_ADDR_OWVAR 29
11494: PUSH
11495: LD_INT 12
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// hc_agressivity := 20 ;
11505: LD_ADDR_OWVAR 35
11509: PUSH
11510: LD_INT 20
11512: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11513: LD_ADDR_OWVAR 28
11517: PUSH
11518: LD_INT 17
11520: ST_TO_ADDR
// hc_gallery :=  ;
11521: LD_ADDR_OWVAR 33
11525: PUSH
11526: LD_STRING 
11528: ST_TO_ADDR
// hc_name :=  ;
11529: LD_ADDR_OWVAR 26
11533: PUSH
11534: LD_STRING 
11536: ST_TO_ADDR
// un := CreateHuman ;
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: CALL_OW 44
11546: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11547: LD_VAR 0 2
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 51
// tmp := tmp ^ un ;
11559: LD_ADDR_VAR 0 3
11563: PUSH
11564: LD_VAR 0 3
11568: PUSH
11569: LD_VAR 0 2
11573: ADD
11574: ST_TO_ADDR
// end ;
11575: GO 11471
11577: POP
11578: POP
// repeat wait ( 0 0$1 ) ;
11579: LD_INT 35
11581: PPUSH
11582: CALL_OW 67
// for un in tmp do
11586: LD_ADDR_VAR 0 2
11590: PUSH
11591: LD_VAR 0 3
11595: PUSH
11596: FOR_IN
11597: IFFALSE 11671
// begin if IsDead ( un ) then
11599: LD_VAR 0 2
11603: PPUSH
11604: CALL_OW 301
11608: IFFALSE 11628
// begin tmp := tmp diff un ;
11610: LD_ADDR_VAR 0 3
11614: PUSH
11615: LD_VAR 0 3
11619: PUSH
11620: LD_VAR 0 2
11624: DIFF
11625: ST_TO_ADDR
// continue ;
11626: GO 11596
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11628: LD_VAR 0 2
11632: PPUSH
11633: LD_INT 3
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_INT 0
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PPUSH
11650: CALL_OW 69
11654: PPUSH
11655: LD_VAR 0 2
11659: PPUSH
11660: CALL_OW 74
11664: PPUSH
11665: CALL_OW 115
// end ;
11669: GO 11596
11671: POP
11672: POP
// until not tmp ;
11673: LD_VAR 0 3
11677: NOT
11678: IFFALSE 11579
// end ;
11680: PPOPN 3
11682: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11683: LD_EXP 12
11687: PUSH
11688: LD_EXP 37
11692: AND
11693: IFFALSE 11747
11695: GO 11697
11697: DISABLE
// begin ToLua ( displayTroll(); ) ;
11698: LD_STRING displayTroll();
11700: PPUSH
11701: CALL_OW 559
// wait ( 3 3$00 ) ;
11705: LD_INT 6300
11707: PPUSH
11708: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11712: LD_STRING hideTroll();
11714: PPUSH
11715: CALL_OW 559
// wait ( 1 1$00 ) ;
11719: LD_INT 2100
11721: PPUSH
11722: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11726: LD_STRING displayTroll();
11728: PPUSH
11729: CALL_OW 559
// wait ( 1 1$00 ) ;
11733: LD_INT 2100
11735: PPUSH
11736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11740: LD_STRING hideTroll();
11742: PPUSH
11743: CALL_OW 559
// end ;
11747: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11748: LD_EXP 12
11752: PUSH
11753: LD_EXP 38
11757: AND
11758: IFFALSE 11821
11760: GO 11762
11762: DISABLE
11763: LD_INT 0
11765: PPUSH
// begin p := 0 ;
11766: LD_ADDR_VAR 0 1
11770: PUSH
11771: LD_INT 0
11773: ST_TO_ADDR
// repeat game_speed := 1 ;
11774: LD_ADDR_OWVAR 65
11778: PUSH
11779: LD_INT 1
11781: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11782: LD_INT 35
11784: PPUSH
11785: CALL_OW 67
// p := p + 1 ;
11789: LD_ADDR_VAR 0 1
11793: PUSH
11794: LD_VAR 0 1
11798: PUSH
11799: LD_INT 1
11801: PLUS
11802: ST_TO_ADDR
// until p >= 60 ;
11803: LD_VAR 0 1
11807: PUSH
11808: LD_INT 60
11810: GREATEREQUAL
11811: IFFALSE 11774
// game_speed := 4 ;
11813: LD_ADDR_OWVAR 65
11817: PUSH
11818: LD_INT 4
11820: ST_TO_ADDR
// end ;
11821: PPOPN 1
11823: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11824: LD_EXP 12
11828: PUSH
11829: LD_EXP 39
11833: AND
11834: IFFALSE 11980
11836: GO 11838
11838: DISABLE
11839: LD_INT 0
11841: PPUSH
11842: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_INT 22
11850: PUSH
11851: LD_OWVAR 2
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: LD_INT 30
11865: PUSH
11866: LD_INT 0
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 30
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: ST_TO_ADDR
// if not depot then
11897: LD_VAR 0 1
11901: NOT
11902: IFFALSE 11906
// exit ;
11904: GO 11980
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11906: LD_ADDR_VAR 0 2
11910: PUSH
11911: LD_VAR 0 1
11915: PUSH
11916: LD_INT 1
11918: PPUSH
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL_OW 12
11928: ARRAY
11929: PPUSH
11930: CALL_OW 274
11934: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11935: LD_VAR 0 2
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: LD_INT 0
11945: PPUSH
11946: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11950: LD_VAR 0 2
11954: PPUSH
11955: LD_INT 2
11957: PPUSH
11958: LD_INT 0
11960: PPUSH
11961: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11965: LD_VAR 0 2
11969: PPUSH
11970: LD_INT 3
11972: PPUSH
11973: LD_INT 0
11975: PPUSH
11976: CALL_OW 277
// end ;
11980: PPOPN 2
11982: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11983: LD_EXP 12
11987: PUSH
11988: LD_EXP 40
11992: AND
11993: IFFALSE 12090
11995: GO 11997
11997: DISABLE
11998: LD_INT 0
12000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12001: LD_ADDR_VAR 0 1
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_OWVAR 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 21
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 3
12030: PUSH
12031: LD_INT 23
12033: PUSH
12034: LD_INT 0
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: ST_TO_ADDR
// if not tmp then
12055: LD_VAR 0 1
12059: NOT
12060: IFFALSE 12064
// exit ;
12062: GO 12090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12064: LD_VAR 0 1
12068: PUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL_OW 12
12081: ARRAY
12082: PPUSH
12083: LD_INT 200
12085: PPUSH
12086: CALL_OW 234
// end ;
12090: PPOPN 1
12092: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12093: LD_EXP 12
12097: PUSH
12098: LD_EXP 41
12102: AND
12103: IFFALSE 12182
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12111: LD_ADDR_VAR 0 1
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 21
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if not tmp then
12147: LD_VAR 0 1
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12156: LD_VAR 0 1
12160: PUSH
12161: LD_INT 1
12163: PPUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 12
12173: ARRAY
12174: PPUSH
12175: LD_INT 60
12177: PPUSH
12178: CALL_OW 234
// end ;
12182: PPOPN 1
12184: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12185: LD_EXP 12
12189: PUSH
12190: LD_EXP 42
12194: AND
12195: IFFALSE 12294
12197: GO 12199
12199: DISABLE
12200: LD_INT 0
12202: PPUSH
12203: PPUSH
// begin enable ;
12204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12205: LD_ADDR_VAR 0 1
12209: PUSH
12210: LD_INT 22
12212: PUSH
12213: LD_OWVAR 2
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 61
12224: PUSH
12225: EMPTY
12226: LIST
12227: PUSH
12228: LD_INT 33
12230: PUSH
12231: LD_INT 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: ST_TO_ADDR
// if not tmp then
12248: LD_VAR 0 1
12252: NOT
12253: IFFALSE 12257
// exit ;
12255: GO 12294
// for i in tmp do
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: LD_VAR 0 1
12266: PUSH
12267: FOR_IN
12268: IFFALSE 12292
// if IsControledBy ( i ) then
12270: LD_VAR 0 2
12274: PPUSH
12275: CALL_OW 312
12279: IFFALSE 12290
// ComUnlink ( i ) ;
12281: LD_VAR 0 2
12285: PPUSH
12286: CALL_OW 136
12290: GO 12267
12292: POP
12293: POP
// end ;
12294: PPOPN 2
12296: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12297: LD_EXP 12
12301: PUSH
12302: LD_EXP 43
12306: AND
12307: IFFALSE 12447
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
12315: PPUSH
// begin ToLua ( displayPowell(); ) ;
12316: LD_STRING displayPowell();
12318: PPUSH
12319: CALL_OW 559
// uc_side := 0 ;
12323: LD_ADDR_OWVAR 20
12327: PUSH
12328: LD_INT 0
12330: ST_TO_ADDR
// uc_nation := 2 ;
12331: LD_ADDR_OWVAR 21
12335: PUSH
12336: LD_INT 2
12338: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12339: LD_ADDR_OWVAR 37
12343: PUSH
12344: LD_INT 14
12346: ST_TO_ADDR
// vc_engine := engine_siberite ;
12347: LD_ADDR_OWVAR 39
12351: PUSH
12352: LD_INT 3
12354: ST_TO_ADDR
// vc_control := control_apeman ;
12355: LD_ADDR_OWVAR 38
12359: PUSH
12360: LD_INT 5
12362: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12363: LD_ADDR_OWVAR 40
12367: PUSH
12368: LD_INT 29
12370: ST_TO_ADDR
// un := CreateVehicle ;
12371: LD_ADDR_VAR 0 2
12375: PUSH
12376: CALL_OW 45
12380: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12381: LD_VAR 0 2
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12393: LD_INT 35
12395: PPUSH
12396: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12400: LD_VAR 0 2
12404: PPUSH
12405: LD_INT 22
12407: PUSH
12408: LD_OWVAR 2
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: PPUSH
12422: LD_VAR 0 2
12426: PPUSH
12427: CALL_OW 74
12431: PPUSH
12432: CALL_OW 115
// until IsDead ( un ) ;
12436: LD_VAR 0 2
12440: PPUSH
12441: CALL_OW 301
12445: IFFALSE 12393
// end ;
12447: PPOPN 2
12449: END
// every 0 0$1 trigger StreamModeActive and sStu do
12450: LD_EXP 12
12454: PUSH
12455: LD_EXP 51
12459: AND
12460: IFFALSE 12476
12462: GO 12464
12464: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12465: LD_STRING displayStucuk();
12467: PPUSH
12468: CALL_OW 559
// ResetFog ;
12472: CALL_OW 335
// end ;
12476: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12477: LD_EXP 12
12481: PUSH
12482: LD_EXP 44
12486: AND
12487: IFFALSE 12628
12489: GO 12491
12491: DISABLE
12492: LD_INT 0
12494: PPUSH
12495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_OWVAR 2
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 21
12515: PUSH
12516: LD_INT 1
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PPUSH
12527: CALL_OW 69
12531: ST_TO_ADDR
// if not tmp then
12532: LD_VAR 0 2
12536: NOT
12537: IFFALSE 12541
// exit ;
12539: GO 12628
// un := tmp [ rand ( 1 , tmp ) ] ;
12541: LD_ADDR_VAR 0 1
12545: PUSH
12546: LD_VAR 0 2
12550: PUSH
12551: LD_INT 1
12553: PPUSH
12554: LD_VAR 0 2
12558: PPUSH
12559: CALL_OW 12
12563: ARRAY
12564: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12565: LD_VAR 0 1
12569: PPUSH
12570: LD_INT 0
12572: PPUSH
12573: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_OWVAR 3
12586: PUSH
12587: LD_VAR 0 1
12591: DIFF
12592: PPUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 74
12602: PPUSH
12603: CALL_OW 115
// wait ( 0 0$20 ) ;
12607: LD_INT 700
12609: PPUSH
12610: CALL_OW 67
// SetSide ( un , your_side ) ;
12614: LD_VAR 0 1
12618: PPUSH
12619: LD_OWVAR 2
12623: PPUSH
12624: CALL_OW 235
// end ;
12628: PPOPN 2
12630: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12631: LD_EXP 12
12635: PUSH
12636: LD_EXP 45
12640: AND
12641: IFFALSE 12747
12643: GO 12645
12645: DISABLE
12646: LD_INT 0
12648: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12649: LD_ADDR_VAR 0 1
12653: PUSH
12654: LD_INT 22
12656: PUSH
12657: LD_OWVAR 2
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 30
12671: PUSH
12672: LD_INT 0
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 30
12681: PUSH
12682: LD_INT 1
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 69
12702: ST_TO_ADDR
// if not depot then
12703: LD_VAR 0 1
12707: NOT
12708: IFFALSE 12712
// exit ;
12710: GO 12747
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12712: LD_VAR 0 1
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: CALL_OW 250
12725: PPUSH
12726: LD_VAR 0 1
12730: PUSH
12731: LD_INT 1
12733: ARRAY
12734: PPUSH
12735: CALL_OW 251
12739: PPUSH
12740: LD_INT 70
12742: PPUSH
12743: CALL_OW 495
// end ;
12747: PPOPN 1
12749: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12750: LD_EXP 12
12754: PUSH
12755: LD_EXP 46
12759: AND
12760: IFFALSE 12971
12762: GO 12764
12764: DISABLE
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12772: LD_ADDR_VAR 0 5
12776: PUSH
12777: LD_INT 22
12779: PUSH
12780: LD_OWVAR 2
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 21
12791: PUSH
12792: LD_INT 1
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PPUSH
12803: CALL_OW 69
12807: ST_TO_ADDR
// if not tmp then
12808: LD_VAR 0 5
12812: NOT
12813: IFFALSE 12817
// exit ;
12815: GO 12971
// for i in tmp do
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_VAR 0 5
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12969
// begin d := rand ( 0 , 5 ) ;
12830: LD_ADDR_VAR 0 4
12834: PUSH
12835: LD_INT 0
12837: PPUSH
12838: LD_INT 5
12840: PPUSH
12841: CALL_OW 12
12845: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_VAR 0 1
12855: PPUSH
12856: CALL_OW 250
12860: PPUSH
12861: LD_VAR 0 4
12865: PPUSH
12866: LD_INT 3
12868: PPUSH
12869: LD_INT 12
12871: PPUSH
12872: CALL_OW 12
12876: PPUSH
12877: CALL_OW 272
12881: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: LD_VAR 0 1
12891: PPUSH
12892: CALL_OW 251
12896: PPUSH
12897: LD_VAR 0 4
12901: PPUSH
12902: LD_INT 3
12904: PPUSH
12905: LD_INT 12
12907: PPUSH
12908: CALL_OW 12
12912: PPUSH
12913: CALL_OW 273
12917: ST_TO_ADDR
// if ValidHex ( x , y ) then
12918: LD_VAR 0 2
12922: PPUSH
12923: LD_VAR 0 3
12927: PPUSH
12928: CALL_OW 488
12932: IFFALSE 12967
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12934: LD_VAR 0 1
12938: PPUSH
12939: LD_VAR 0 2
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 3
12951: PPUSH
12952: LD_INT 6
12954: PPUSH
12955: CALL_OW 12
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 483
// end ;
12967: GO 12827
12969: POP
12970: POP
// end ;
12971: PPOPN 5
12973: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12974: LD_EXP 12
12978: PUSH
12979: LD_EXP 47
12983: AND
12984: IFFALSE 13078
12986: GO 12988
12988: DISABLE
12989: LD_INT 0
12991: PPUSH
12992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_OWVAR 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 32
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 21
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 69
13039: ST_TO_ADDR
// if not tmp then
13040: LD_VAR 0 2
13044: NOT
13045: IFFALSE 13049
// exit ;
13047: GO 13078
// for i in tmp do
13049: LD_ADDR_VAR 0 1
13053: PUSH
13054: LD_VAR 0 2
13058: PUSH
13059: FOR_IN
13060: IFFALSE 13076
// SetFuel ( i , 0 ) ;
13062: LD_VAR 0 1
13066: PPUSH
13067: LD_INT 0
13069: PPUSH
13070: CALL_OW 240
13074: GO 13059
13076: POP
13077: POP
// end ;
13078: PPOPN 2
13080: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13081: LD_EXP 12
13085: PUSH
13086: LD_EXP 48
13090: AND
13091: IFFALSE 13157
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13099: LD_ADDR_VAR 0 1
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 30
13118: PUSH
13119: LD_INT 29
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: ST_TO_ADDR
// if not tmp then
13135: LD_VAR 0 1
13139: NOT
13140: IFFALSE 13144
// exit ;
13142: GO 13157
// DestroyUnit ( tmp [ 1 ] ) ;
13144: LD_VAR 0 1
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PPUSH
13153: CALL_OW 65
// end ;
13157: PPOPN 1
13159: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13160: LD_EXP 12
13164: PUSH
13165: LD_EXP 50
13169: AND
13170: IFFALSE 13299
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
// begin uc_side := 0 ;
13178: LD_ADDR_OWVAR 20
13182: PUSH
13183: LD_INT 0
13185: ST_TO_ADDR
// uc_nation := nation_arabian ;
13186: LD_ADDR_OWVAR 21
13190: PUSH
13191: LD_INT 2
13193: ST_TO_ADDR
// hc_gallery :=  ;
13194: LD_ADDR_OWVAR 33
13198: PUSH
13199: LD_STRING 
13201: ST_TO_ADDR
// hc_name :=  ;
13202: LD_ADDR_OWVAR 26
13206: PUSH
13207: LD_STRING 
13209: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 11
13215: PPUSH
13216: LD_INT 10
13218: PPUSH
13219: CALL_OW 380
// un := CreateHuman ;
13223: LD_ADDR_VAR 0 1
13227: PUSH
13228: CALL_OW 44
13232: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13233: LD_VAR 0 1
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13245: LD_INT 35
13247: PPUSH
13248: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13252: LD_VAR 0 1
13256: PPUSH
13257: LD_INT 22
13259: PUSH
13260: LD_OWVAR 2
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PPUSH
13269: CALL_OW 69
13273: PPUSH
13274: LD_VAR 0 1
13278: PPUSH
13279: CALL_OW 74
13283: PPUSH
13284: CALL_OW 115
// until IsDead ( un ) ;
13288: LD_VAR 0 1
13292: PPUSH
13293: CALL_OW 301
13297: IFFALSE 13245
// end ;
13299: PPOPN 1
13301: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13302: LD_EXP 12
13306: PUSH
13307: LD_EXP 52
13311: AND
13312: IFFALSE 13324
13314: GO 13316
13316: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13317: LD_STRING earthquake(getX(game), 0, 32)
13319: PPUSH
13320: CALL_OW 559
13324: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13325: LD_EXP 12
13329: PUSH
13330: LD_EXP 53
13334: AND
13335: IFFALSE 13426
13337: GO 13339
13339: DISABLE
13340: LD_INT 0
13342: PPUSH
// begin enable ;
13343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_OWVAR 2
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 21
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 33
13373: PUSH
13374: LD_INT 3
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 69
13390: ST_TO_ADDR
// if not tmp then
13391: LD_VAR 0 1
13395: NOT
13396: IFFALSE 13400
// exit ;
13398: GO 13426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13400: LD_VAR 0 1
13404: PUSH
13405: LD_INT 1
13407: PPUSH
13408: LD_VAR 0 1
13412: PPUSH
13413: CALL_OW 12
13417: ARRAY
13418: PPUSH
13419: LD_INT 1
13421: PPUSH
13422: CALL_OW 234
// end ;
13426: PPOPN 1
13428: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13429: LD_EXP 12
13433: PUSH
13434: LD_EXP 54
13438: AND
13439: IFFALSE 13580
13441: GO 13443
13443: DISABLE
13444: LD_INT 0
13446: PPUSH
13447: PPUSH
13448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13449: LD_ADDR_VAR 0 3
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_OWVAR 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// if not tmp then
13485: LD_VAR 0 3
13489: NOT
13490: IFFALSE 13494
// exit ;
13492: GO 13580
// un := tmp [ rand ( 1 , tmp ) ] ;
13494: LD_ADDR_VAR 0 2
13498: PUSH
13499: LD_VAR 0 3
13503: PUSH
13504: LD_INT 1
13506: PPUSH
13507: LD_VAR 0 3
13511: PPUSH
13512: CALL_OW 12
13516: ARRAY
13517: ST_TO_ADDR
// if Crawls ( un ) then
13518: LD_VAR 0 2
13522: PPUSH
13523: CALL_OW 318
13527: IFFALSE 13538
// ComWalk ( un ) ;
13529: LD_VAR 0 2
13533: PPUSH
13534: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_INT 9
13545: PPUSH
13546: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13550: LD_INT 28
13552: PPUSH
13553: LD_OWVAR 2
13557: PPUSH
13558: LD_INT 2
13560: PPUSH
13561: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13565: LD_INT 29
13567: PPUSH
13568: LD_OWVAR 2
13572: PPUSH
13573: LD_INT 2
13575: PPUSH
13576: CALL_OW 322
// end ;
13580: PPOPN 3
13582: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13583: LD_EXP 12
13587: PUSH
13588: LD_EXP 55
13592: AND
13593: IFFALSE 13704
13595: GO 13597
13597: DISABLE
13598: LD_INT 0
13600: PPUSH
13601: PPUSH
13602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_OWVAR 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 25
13622: PUSH
13623: LD_INT 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: ST_TO_ADDR
// if not tmp then
13639: LD_VAR 0 3
13643: NOT
13644: IFFALSE 13648
// exit ;
13646: GO 13704
// un := tmp [ rand ( 1 , tmp ) ] ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_VAR 0 3
13665: PPUSH
13666: CALL_OW 12
13670: ARRAY
13671: ST_TO_ADDR
// if Crawls ( un ) then
13672: LD_VAR 0 2
13676: PPUSH
13677: CALL_OW 318
13681: IFFALSE 13692
// ComWalk ( un ) ;
13683: LD_VAR 0 2
13687: PPUSH
13688: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13692: LD_VAR 0 2
13696: PPUSH
13697: LD_INT 8
13699: PPUSH
13700: CALL_OW 336
// end ;
13704: PPOPN 3
13706: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13707: LD_EXP 12
13711: PUSH
13712: LD_EXP 56
13716: AND
13717: IFFALSE 13861
13719: GO 13721
13721: DISABLE
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13726: LD_ADDR_VAR 0 2
13730: PUSH
13731: LD_INT 22
13733: PUSH
13734: LD_OWVAR 2
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 21
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: LD_INT 34
13758: PUSH
13759: LD_INT 12
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 34
13768: PUSH
13769: LD_INT 51
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 34
13778: PUSH
13779: LD_INT 32
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// if not tmp then
13802: LD_VAR 0 2
13806: NOT
13807: IFFALSE 13811
// exit ;
13809: GO 13861
// for i in tmp do
13811: LD_ADDR_VAR 0 1
13815: PUSH
13816: LD_VAR 0 2
13820: PUSH
13821: FOR_IN
13822: IFFALSE 13859
// if GetCargo ( i , mat_artifact ) = 0 then
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 4
13831: PPUSH
13832: CALL_OW 289
13836: PUSH
13837: LD_INT 0
13839: EQUAL
13840: IFFALSE 13857
// SetCargo ( i , mat_siberit , 100 ) ;
13842: LD_VAR 0 1
13846: PPUSH
13847: LD_INT 3
13849: PPUSH
13850: LD_INT 100
13852: PPUSH
13853: CALL_OW 290
13857: GO 13821
13859: POP
13860: POP
// end ;
13861: PPOPN 2
13863: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13864: LD_EXP 12
13868: PUSH
13869: LD_EXP 57
13873: AND
13874: IFFALSE 14027
13876: GO 13878
13878: DISABLE
13879: LD_INT 0
13881: PPUSH
13882: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13883: LD_ADDR_VAR 0 2
13887: PUSH
13888: LD_INT 22
13890: PUSH
13891: LD_OWVAR 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: ST_TO_ADDR
// if not tmp then
13905: LD_VAR 0 2
13909: NOT
13910: IFFALSE 13914
// exit ;
13912: GO 14027
// for i := 1 to 2 do
13914: LD_ADDR_VAR 0 1
13918: PUSH
13919: DOUBLE
13920: LD_INT 1
13922: DEC
13923: ST_TO_ADDR
13924: LD_INT 2
13926: PUSH
13927: FOR_TO
13928: IFFALSE 14025
// begin uc_side := your_side ;
13930: LD_ADDR_OWVAR 20
13934: PUSH
13935: LD_OWVAR 2
13939: ST_TO_ADDR
// uc_nation := nation_american ;
13940: LD_ADDR_OWVAR 21
13944: PUSH
13945: LD_INT 1
13947: ST_TO_ADDR
// vc_chassis := us_morphling ;
13948: LD_ADDR_OWVAR 37
13952: PUSH
13953: LD_INT 5
13955: ST_TO_ADDR
// vc_engine := engine_siberite ;
13956: LD_ADDR_OWVAR 39
13960: PUSH
13961: LD_INT 3
13963: ST_TO_ADDR
// vc_control := control_computer ;
13964: LD_ADDR_OWVAR 38
13968: PUSH
13969: LD_INT 3
13971: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13972: LD_ADDR_OWVAR 40
13976: PUSH
13977: LD_INT 10
13979: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13980: CALL_OW 45
13984: PPUSH
13985: LD_VAR 0 2
13989: PUSH
13990: LD_INT 1
13992: ARRAY
13993: PPUSH
13994: CALL_OW 250
13998: PPUSH
13999: LD_VAR 0 2
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PPUSH
14008: CALL_OW 251
14012: PPUSH
14013: LD_INT 12
14015: PPUSH
14016: LD_INT 1
14018: PPUSH
14019: CALL_OW 50
// end ;
14023: GO 13927
14025: POP
14026: POP
// end ;
14027: PPOPN 2
14029: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14030: LD_EXP 12
14034: PUSH
14035: LD_EXP 58
14039: AND
14040: IFFALSE 14262
14042: GO 14044
14044: DISABLE
14045: LD_INT 0
14047: PPUSH
14048: PPUSH
14049: PPUSH
14050: PPUSH
14051: PPUSH
14052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14053: LD_ADDR_VAR 0 6
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 3
14082: PUSH
14083: LD_INT 23
14085: PUSH
14086: LD_INT 0
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not tmp then
14107: LD_VAR 0 6
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14262
// s1 := rand ( 1 , 4 ) ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 1
14123: PPUSH
14124: LD_INT 4
14126: PPUSH
14127: CALL_OW 12
14131: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14132: LD_ADDR_VAR 0 4
14136: PUSH
14137: LD_VAR 0 6
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_VAR 0 2
14150: PPUSH
14151: CALL_OW 259
14155: ST_TO_ADDR
// if s1 = 1 then
14156: LD_VAR 0 2
14160: PUSH
14161: LD_INT 1
14163: EQUAL
14164: IFFALSE 14184
// s2 := rand ( 2 , 4 ) else
14166: LD_ADDR_VAR 0 3
14170: PUSH
14171: LD_INT 2
14173: PPUSH
14174: LD_INT 4
14176: PPUSH
14177: CALL_OW 12
14181: ST_TO_ADDR
14182: GO 14192
// s2 := 1 ;
14184: LD_ADDR_VAR 0 3
14188: PUSH
14189: LD_INT 1
14191: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14192: LD_ADDR_VAR 0 5
14196: PUSH
14197: LD_VAR 0 6
14201: PUSH
14202: LD_INT 1
14204: ARRAY
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: CALL_OW 259
14215: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14216: LD_VAR 0 6
14220: PUSH
14221: LD_INT 1
14223: ARRAY
14224: PPUSH
14225: LD_VAR 0 2
14229: PPUSH
14230: LD_VAR 0 5
14234: PPUSH
14235: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14239: LD_VAR 0 6
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_VAR 0 4
14257: PPUSH
14258: CALL_OW 237
// end ;
14262: PPOPN 6
14264: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14265: LD_EXP 12
14269: PUSH
14270: LD_EXP 59
14274: AND
14275: IFFALSE 14354
14277: GO 14279
14279: DISABLE
14280: LD_INT 0
14282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_OWVAR 2
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 30
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: ST_TO_ADDR
// if not tmp then
14319: LD_VAR 0 1
14323: NOT
14324: IFFALSE 14328
// exit ;
14326: GO 14354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14328: LD_VAR 0 1
14332: PUSH
14333: LD_INT 1
14335: PPUSH
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 12
14345: ARRAY
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 234
// end ;
14354: PPOPN 1
14356: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14357: LD_EXP 12
14361: PUSH
14362: LD_EXP 60
14366: AND
14367: IFFALSE 14479
14369: GO 14371
14371: DISABLE
14372: LD_INT 0
14374: PPUSH
14375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_INT 22
14383: PUSH
14384: LD_OWVAR 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: LD_INT 30
14398: PUSH
14399: LD_INT 27
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 30
14408: PUSH
14409: LD_INT 26
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 30
14418: PUSH
14419: LD_INT 28
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 69
14440: ST_TO_ADDR
// if not tmp then
14441: LD_VAR 0 2
14445: NOT
14446: IFFALSE 14450
// exit ;
14448: GO 14479
// for i in tmp do
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_VAR 0 2
14459: PUSH
14460: FOR_IN
14461: IFFALSE 14477
// SetLives ( i , 1 ) ;
14463: LD_VAR 0 1
14467: PPUSH
14468: LD_INT 1
14470: PPUSH
14471: CALL_OW 234
14475: GO 14460
14477: POP
14478: POP
// end ;
14479: PPOPN 2
14481: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14482: LD_EXP 12
14486: PUSH
14487: LD_EXP 61
14491: AND
14492: IFFALSE 14766
14494: GO 14496
14496: DISABLE
14497: LD_INT 0
14499: PPUSH
14500: PPUSH
14501: PPUSH
// begin i := rand ( 1 , 7 ) ;
14502: LD_ADDR_VAR 0 1
14506: PUSH
14507: LD_INT 1
14509: PPUSH
14510: LD_INT 7
14512: PPUSH
14513: CALL_OW 12
14517: ST_TO_ADDR
// case i of 1 :
14518: LD_VAR 0 1
14522: PUSH
14523: LD_INT 1
14525: DOUBLE
14526: EQUAL
14527: IFTRUE 14531
14529: GO 14541
14531: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14532: LD_STRING earthquake(getX(game), 0, 32)
14534: PPUSH
14535: CALL_OW 559
14539: GO 14766
14541: LD_INT 2
14543: DOUBLE
14544: EQUAL
14545: IFTRUE 14549
14547: GO 14563
14549: POP
// begin ToLua ( displayStucuk(); ) ;
14550: LD_STRING displayStucuk();
14552: PPUSH
14553: CALL_OW 559
// ResetFog ;
14557: CALL_OW 335
// end ; 3 :
14561: GO 14766
14563: LD_INT 3
14565: DOUBLE
14566: EQUAL
14567: IFTRUE 14571
14569: GO 14675
14571: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14572: LD_ADDR_VAR 0 2
14576: PUSH
14577: LD_INT 22
14579: PUSH
14580: LD_OWVAR 2
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 25
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: ST_TO_ADDR
// if not tmp then
14608: LD_VAR 0 2
14612: NOT
14613: IFFALSE 14617
// exit ;
14615: GO 14766
// un := tmp [ rand ( 1 , tmp ) ] ;
14617: LD_ADDR_VAR 0 3
14621: PUSH
14622: LD_VAR 0 2
14626: PUSH
14627: LD_INT 1
14629: PPUSH
14630: LD_VAR 0 2
14634: PPUSH
14635: CALL_OW 12
14639: ARRAY
14640: ST_TO_ADDR
// if Crawls ( un ) then
14641: LD_VAR 0 3
14645: PPUSH
14646: CALL_OW 318
14650: IFFALSE 14661
// ComWalk ( un ) ;
14652: LD_VAR 0 3
14656: PPUSH
14657: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14661: LD_VAR 0 3
14665: PPUSH
14666: LD_INT 8
14668: PPUSH
14669: CALL_OW 336
// end ; 4 :
14673: GO 14766
14675: LD_INT 4
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14683
14681: GO 14744
14683: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: LD_INT 22
14691: PUSH
14692: LD_OWVAR 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 30
14703: PUSH
14704: LD_INT 29
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: ST_TO_ADDR
// if not tmp then
14720: LD_VAR 0 2
14724: NOT
14725: IFFALSE 14729
// exit ;
14727: GO 14766
// DestroyUnit ( tmp [ 1 ] ) ;
14729: LD_VAR 0 2
14733: PUSH
14734: LD_INT 1
14736: ARRAY
14737: PPUSH
14738: CALL_OW 65
// end ; 5 .. 7 :
14742: GO 14766
14744: LD_INT 5
14746: DOUBLE
14747: GREATEREQUAL
14748: IFFALSE 14756
14750: LD_INT 7
14752: DOUBLE
14753: LESSEQUAL
14754: IFTRUE 14758
14756: GO 14765
14758: POP
// StreamSibBomb ; end ;
14759: CALL 11046 0 0
14763: GO 14766
14765: POP
// end ;
14766: PPOPN 3
14768: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14769: LD_EXP 12
14773: PUSH
14774: LD_EXP 62
14778: AND
14779: IFFALSE 14935
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
14787: PPUSH
14788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14789: LD_ADDR_VAR 0 2
14793: PUSH
14794: LD_INT 81
14796: PUSH
14797: LD_OWVAR 2
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 21
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 21
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if not tmp then
14843: LD_VAR 0 2
14847: NOT
14848: IFFALSE 14852
// exit ;
14850: GO 14935
// p := 0 ;
14852: LD_ADDR_VAR 0 3
14856: PUSH
14857: LD_INT 0
14859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14860: LD_INT 35
14862: PPUSH
14863: CALL_OW 67
// p := p + 1 ;
14867: LD_ADDR_VAR 0 3
14871: PUSH
14872: LD_VAR 0 3
14876: PUSH
14877: LD_INT 1
14879: PLUS
14880: ST_TO_ADDR
// for i in tmp do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 2
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14923
// if GetLives ( i ) < 1000 then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 256
14903: PUSH
14904: LD_INT 1000
14906: LESS
14907: IFFALSE 14921
// SetLives ( i , 1000 ) ;
14909: LD_VAR 0 1
14913: PPUSH
14914: LD_INT 1000
14916: PPUSH
14917: CALL_OW 234
14921: GO 14891
14923: POP
14924: POP
// until p > 20 ;
14925: LD_VAR 0 3
14929: PUSH
14930: LD_INT 20
14932: GREATER
14933: IFFALSE 14860
// end ;
14935: PPOPN 3
14937: END
// every 0 0$1 trigger StreamModeActive and sTime do
14938: LD_EXP 12
14942: PUSH
14943: LD_EXP 63
14947: AND
14948: IFFALSE 14983
14950: GO 14952
14952: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14953: LD_INT 28
14955: PPUSH
14956: LD_OWVAR 2
14960: PPUSH
14961: LD_INT 2
14963: PPUSH
14964: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14968: LD_INT 30
14970: PPUSH
14971: LD_OWVAR 2
14975: PPUSH
14976: LD_INT 2
14978: PPUSH
14979: CALL_OW 322
// end ;
14983: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14984: LD_EXP 12
14988: PUSH
14989: LD_EXP 64
14993: AND
14994: IFFALSE 15115
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 22
15010: PUSH
15011: LD_OWVAR 2
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 21
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 3
15032: PUSH
15033: LD_INT 23
15035: PUSH
15036: LD_INT 0
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 69
15056: ST_TO_ADDR
// if not tmp then
15057: LD_VAR 0 2
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15115
// for i in tmp do
15066: LD_ADDR_VAR 0 1
15070: PUSH
15071: LD_VAR 0 2
15075: PUSH
15076: FOR_IN
15077: IFFALSE 15113
// begin if Crawls ( i ) then
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 318
15088: IFFALSE 15099
// ComWalk ( i ) ;
15090: LD_VAR 0 1
15094: PPUSH
15095: CALL_OW 138
// SetClass ( i , 2 ) ;
15099: LD_VAR 0 1
15103: PPUSH
15104: LD_INT 2
15106: PPUSH
15107: CALL_OW 336
// end ;
15111: GO 15076
15113: POP
15114: POP
// end ;
15115: PPOPN 2
15117: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15118: LD_EXP 12
15122: PUSH
15123: LD_EXP 65
15127: AND
15128: IFFALSE 15349
15130: GO 15132
15132: DISABLE
15133: LD_INT 0
15135: PPUSH
15136: PPUSH
15137: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15138: LD_OWVAR 2
15142: PPUSH
15143: LD_INT 9
15145: PPUSH
15146: LD_INT 1
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15156: LD_INT 9
15158: PPUSH
15159: LD_OWVAR 2
15163: PPUSH
15164: CALL_OW 343
// uc_side := 9 ;
15168: LD_ADDR_OWVAR 20
15172: PUSH
15173: LD_INT 9
15175: ST_TO_ADDR
// uc_nation := 2 ;
15176: LD_ADDR_OWVAR 21
15180: PUSH
15181: LD_INT 2
15183: ST_TO_ADDR
// hc_name := Dark Warrior ;
15184: LD_ADDR_OWVAR 26
15188: PUSH
15189: LD_STRING Dark Warrior
15191: ST_TO_ADDR
// hc_gallery :=  ;
15192: LD_ADDR_OWVAR 33
15196: PUSH
15197: LD_STRING 
15199: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
15200: LD_INT 1
15202: PPUSH
15203: LD_INT 1
15205: PPUSH
15206: LD_INT 10
15208: PPUSH
15209: CALL_OW 380
// un := CreateHuman ;
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: CALL_OW 44
15222: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 51
// p := 0 ;
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_INT 0
15242: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15243: LD_INT 35
15245: PPUSH
15246: CALL_OW 67
// if GetLives ( un ) < 1000 then
15250: LD_VAR 0 3
15254: PPUSH
15255: CALL_OW 256
15259: PUSH
15260: LD_INT 1000
15262: LESS
15263: IFFALSE 15277
// SetLives ( un , 1000 ) ;
15265: LD_VAR 0 3
15269: PPUSH
15270: LD_INT 1000
15272: PPUSH
15273: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
15277: LD_VAR 0 3
15281: PPUSH
15282: LD_INT 81
15284: PUSH
15285: LD_OWVAR 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: PPUSH
15299: LD_VAR 0 3
15303: PPUSH
15304: CALL_OW 74
15308: PPUSH
15309: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15313: LD_VAR 0 2
15317: PUSH
15318: LD_INT 60
15320: GREATER
15321: PUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 301
15331: OR
15332: IFFALSE 15243
// if un then
15334: LD_VAR 0 3
15338: IFFALSE 15349
// RemoveUnit ( un ) ;
15340: LD_VAR 0 3
15344: PPUSH
15345: CALL_OW 64
// end ; end_of_file
15349: PPOPN 3
15351: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
15352: LD_INT 0
15354: PPUSH
15355: PPUSH
15356: PPUSH
15357: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 264
15367: PUSH
15368: LD_EXP 11
15372: EQUAL
15373: IFFALSE 15445
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15375: LD_INT 68
15377: PPUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 255
15387: PPUSH
15388: CALL_OW 321
15392: PUSH
15393: LD_INT 2
15395: EQUAL
15396: IFFALSE 15408
// eff := 70 else
15398: LD_ADDR_VAR 0 6
15402: PUSH
15403: LD_INT 70
15405: ST_TO_ADDR
15406: GO 15416
// eff := 30 ;
15408: LD_ADDR_VAR 0 6
15412: PUSH
15413: LD_INT 30
15415: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL_OW 250
15425: PPUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 251
15435: PPUSH
15436: LD_VAR 0 6
15440: PPUSH
15441: CALL_OW 495
// end ; end ;
15445: LD_VAR 0 4
15449: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
15450: LD_INT 0
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
15456: PPUSH
15457: PPUSH
// if cmd = 124 then
15458: LD_VAR 0 1
15462: PUSH
15463: LD_INT 124
15465: EQUAL
15466: IFFALSE 15672
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
15468: LD_ADDR_VAR 0 5
15472: PUSH
15473: LD_INT 2
15475: PUSH
15476: LD_INT 34
15478: PUSH
15479: LD_INT 53
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 34
15488: PUSH
15489: LD_INT 14
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: ST_TO_ADDR
// if not tmp then
15506: LD_VAR 0 5
15510: NOT
15511: IFFALSE 15515
// exit ;
15513: GO 15672
// for i in tmp do
15515: LD_ADDR_VAR 0 3
15519: PUSH
15520: LD_VAR 0 5
15524: PUSH
15525: FOR_IN
15526: IFFALSE 15670
// begin taskList := GetTaskList ( i ) ;
15528: LD_ADDR_VAR 0 6
15532: PUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: CALL_OW 437
15542: ST_TO_ADDR
// if not taskList then
15543: LD_VAR 0 6
15547: NOT
15548: IFFALSE 15552
// continue ;
15550: GO 15525
// for j = 1 to taskList do
15552: LD_ADDR_VAR 0 4
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_VAR 0 6
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15666
// if taskList [ j ] [ 1 ] = | then
15570: LD_VAR 0 6
15574: PUSH
15575: LD_VAR 0 4
15579: ARRAY
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PUSH
15585: LD_STRING |
15587: EQUAL
15588: IFFALSE 15664
// begin _taskList := Delete ( taskList , 1 ) ;
15590: LD_ADDR_VAR 0 7
15594: PUSH
15595: LD_VAR 0 6
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: CALL_OW 3
15607: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_VAR 0 7
15617: PPUSH
15618: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
15622: LD_VAR 0 3
15626: PPUSH
15627: LD_VAR 0 6
15631: PUSH
15632: LD_VAR 0 4
15636: ARRAY
15637: PUSH
15638: LD_INT 2
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 6
15646: PUSH
15647: LD_VAR 0 4
15651: ARRAY
15652: PUSH
15653: LD_INT 3
15655: ARRAY
15656: PPUSH
15657: LD_INT 8
15659: PPUSH
15660: CALL 15677 0 4
// end ;
15664: GO 15567
15666: POP
15667: POP
// end ;
15668: GO 15525
15670: POP
15671: POP
// end ; end ;
15672: LD_VAR 0 2
15676: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15688: LD_VAR 0 1
15692: NOT
15693: PUSH
15694: LD_VAR 0 2
15698: PPUSH
15699: LD_VAR 0 3
15703: PPUSH
15704: CALL_OW 488
15708: NOT
15709: OR
15710: PUSH
15711: LD_VAR 0 4
15715: NOT
15716: OR
15717: IFFALSE 15721
// exit ;
15719: GO 16061
// list := [ ] ;
15721: LD_ADDR_VAR 0 13
15725: PUSH
15726: EMPTY
15727: ST_TO_ADDR
// if x - r < 0 then
15728: LD_VAR 0 2
15732: PUSH
15733: LD_VAR 0 4
15737: MINUS
15738: PUSH
15739: LD_INT 0
15741: LESS
15742: IFFALSE 15754
// min_x := 0 else
15744: LD_ADDR_VAR 0 7
15748: PUSH
15749: LD_INT 0
15751: ST_TO_ADDR
15752: GO 15770
// min_x := x - r ;
15754: LD_ADDR_VAR 0 7
15758: PUSH
15759: LD_VAR 0 2
15763: PUSH
15764: LD_VAR 0 4
15768: MINUS
15769: ST_TO_ADDR
// if y - r < 0 then
15770: LD_VAR 0 3
15774: PUSH
15775: LD_VAR 0 4
15779: MINUS
15780: PUSH
15781: LD_INT 0
15783: LESS
15784: IFFALSE 15796
// min_y := 0 else
15786: LD_ADDR_VAR 0 8
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
15794: GO 15812
// min_y := y - r ;
15796: LD_ADDR_VAR 0 8
15800: PUSH
15801: LD_VAR 0 3
15805: PUSH
15806: LD_VAR 0 4
15810: MINUS
15811: ST_TO_ADDR
// max_x := x + r ;
15812: LD_ADDR_VAR 0 9
15816: PUSH
15817: LD_VAR 0 2
15821: PUSH
15822: LD_VAR 0 4
15826: PLUS
15827: ST_TO_ADDR
// max_y := y + r ;
15828: LD_ADDR_VAR 0 10
15832: PUSH
15833: LD_VAR 0 3
15837: PUSH
15838: LD_VAR 0 4
15842: PLUS
15843: ST_TO_ADDR
// for _x = min_x to max_x do
15844: LD_ADDR_VAR 0 11
15848: PUSH
15849: DOUBLE
15850: LD_VAR 0 7
15854: DEC
15855: ST_TO_ADDR
15856: LD_VAR 0 9
15860: PUSH
15861: FOR_TO
15862: IFFALSE 15979
// for _y = min_y to max_y do
15864: LD_ADDR_VAR 0 12
15868: PUSH
15869: DOUBLE
15870: LD_VAR 0 8
15874: DEC
15875: ST_TO_ADDR
15876: LD_VAR 0 10
15880: PUSH
15881: FOR_TO
15882: IFFALSE 15975
// begin if not ValidHex ( _x , _y ) then
15884: LD_VAR 0 11
15888: PPUSH
15889: LD_VAR 0 12
15893: PPUSH
15894: CALL_OW 488
15898: NOT
15899: IFFALSE 15903
// continue ;
15901: GO 15881
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15903: LD_VAR 0 11
15907: PPUSH
15908: LD_VAR 0 12
15912: PPUSH
15913: CALL_OW 351
15917: PUSH
15918: LD_VAR 0 11
15922: PPUSH
15923: LD_VAR 0 12
15927: PPUSH
15928: CALL_OW 554
15932: AND
15933: IFFALSE 15973
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15935: LD_ADDR_VAR 0 13
15939: PUSH
15940: LD_VAR 0 13
15944: PPUSH
15945: LD_VAR 0 13
15949: PUSH
15950: LD_INT 1
15952: PLUS
15953: PPUSH
15954: LD_VAR 0 11
15958: PUSH
15959: LD_VAR 0 12
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PPUSH
15968: CALL_OW 2
15972: ST_TO_ADDR
// end ;
15973: GO 15881
15975: POP
15976: POP
15977: GO 15861
15979: POP
15980: POP
// if not list then
15981: LD_VAR 0 13
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16061
// for i in list do
15990: LD_ADDR_VAR 0 6
15994: PUSH
15995: LD_VAR 0 13
15999: PUSH
16000: FOR_IN
16001: IFFALSE 16059
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_STRING M
16010: PUSH
16011: LD_VAR 0 6
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PUSH
16020: LD_VAR 0 6
16024: PUSH
16025: LD_INT 2
16027: ARRAY
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: LD_INT 0
16034: PUSH
16035: LD_INT 0
16037: PUSH
16038: LD_INT 0
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: PPUSH
16053: CALL_OW 447
16057: GO 16000
16059: POP
16060: POP
// end ;
16061: LD_VAR 0 5
16065: RET
