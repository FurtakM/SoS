// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 18641 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 18739 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 18747 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_miner := 81 ;
4669: LD_ADDR_EXP 14
4673: PUSH
4674: LD_INT 81
4676: ST_TO_ADDR
// ar_crane := 88 ;
4677: LD_ADDR_EXP 13
4681: PUSH
4682: LD_INT 88
4684: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4685: LD_ADDR_EXP 8
4689: PUSH
4690: LD_INT 89
4692: ST_TO_ADDR
// us_hack := 99 ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 99
4700: ST_TO_ADDR
// us_artillery := 97 ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 97
4708: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4709: LD_ADDR_EXP 11
4713: PUSH
4714: LD_INT 91
4716: ST_TO_ADDR
// ar_mortar := 92 ;
4717: LD_ADDR_EXP 12
4721: PUSH
4722: LD_INT 92
4724: ST_TO_ADDR
// ru_radar := 98 ;
4725: LD_ADDR_EXP 7
4729: PUSH
4730: LD_INT 98
4732: ST_TO_ADDR
// tech_Artillery := 80 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 80
4740: ST_TO_ADDR
// tech_RadMat := 81 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 81
4748: ST_TO_ADDR
// tech_BasicTools := 82 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 82
4756: ST_TO_ADDR
// tech_Cargo := 83 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 83
4764: ST_TO_ADDR
// tech_Track := 84 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 84
4772: ST_TO_ADDR
// tech_Crane := 85 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 85
4780: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 86
4788: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4789: LD_ADDR_EXP 22
4793: PUSH
4794: LD_INT 87
4796: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4797: LD_ADDR_EXP 23
4801: PUSH
4802: LD_INT 88
4804: ST_TO_ADDR
// class_mastodont := 31 ;
4805: LD_ADDR_EXP 24
4809: PUSH
4810: LD_INT 31
4812: ST_TO_ADDR
// class_horse := 21 ;
4813: LD_ADDR_EXP 25
4817: PUSH
4818: LD_INT 21
4820: ST_TO_ADDR
// end ;
4821: LD_VAR 0 1
4825: RET
// every 1 do
4826: GO 4828
4828: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4829: CALL 4666 0 0
4833: END
// every 0 0$1 do
4834: GO 4836
4836: DISABLE
// begin enable ;
4837: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4838: LD_STRING updateTimer(
4840: PUSH
4841: LD_OWVAR 1
4845: STR
4846: PUSH
4847: LD_STRING );
4849: STR
4850: PPUSH
4851: CALL_OW 559
// end ;
4855: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4856: LD_INT 0
4858: PPUSH
// if p2 = 100 then
4859: LD_VAR 0 2
4863: PUSH
4864: LD_INT 100
4866: EQUAL
4867: IFFALSE 5870
// begin if not StreamModeActive then
4869: LD_EXP 26
4873: NOT
4874: IFFALSE 4884
// StreamModeActive := true ;
4876: LD_ADDR_EXP 26
4880: PUSH
4881: LD_INT 1
4883: ST_TO_ADDR
// if p3 = 0 then
4884: LD_VAR 0 3
4888: PUSH
4889: LD_INT 0
4891: EQUAL
4892: IFFALSE 4898
// InitStreamMode ;
4894: CALL 6030 0 0
// if p3 = 1 then
4898: LD_VAR 0 3
4902: PUSH
4903: LD_INT 1
4905: EQUAL
4906: IFFALSE 4916
// sRocket := true ;
4908: LD_ADDR_EXP 31
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// if p3 = 2 then
4916: LD_VAR 0 3
4920: PUSH
4921: LD_INT 2
4923: EQUAL
4924: IFFALSE 4934
// sSpeed := true ;
4926: LD_ADDR_EXP 30
4930: PUSH
4931: LD_INT 1
4933: ST_TO_ADDR
// if p3 = 3 then
4934: LD_VAR 0 3
4938: PUSH
4939: LD_INT 3
4941: EQUAL
4942: IFFALSE 4952
// sEngine := true ;
4944: LD_ADDR_EXP 32
4948: PUSH
4949: LD_INT 1
4951: ST_TO_ADDR
// if p3 = 4 then
4952: LD_VAR 0 3
4956: PUSH
4957: LD_INT 4
4959: EQUAL
4960: IFFALSE 4970
// sSpec := true ;
4962: LD_ADDR_EXP 29
4966: PUSH
4967: LD_INT 1
4969: ST_TO_ADDR
// if p3 = 5 then
4970: LD_VAR 0 3
4974: PUSH
4975: LD_INT 5
4977: EQUAL
4978: IFFALSE 4988
// sLevel := true ;
4980: LD_ADDR_EXP 33
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 6 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 6
4995: EQUAL
4996: IFFALSE 5006
// sArmoury := true ;
4998: LD_ADDR_EXP 34
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// if p3 = 7 then
5006: LD_VAR 0 3
5010: PUSH
5011: LD_INT 7
5013: EQUAL
5014: IFFALSE 5024
// sRadar := true ;
5016: LD_ADDR_EXP 35
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// if p3 = 8 then
5024: LD_VAR 0 3
5028: PUSH
5029: LD_INT 8
5031: EQUAL
5032: IFFALSE 5042
// sBunker := true ;
5034: LD_ADDR_EXP 36
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if p3 = 9 then
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 9
5049: EQUAL
5050: IFFALSE 5060
// sHack := true ;
5052: LD_ADDR_EXP 37
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// if p3 = 10 then
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 10
5067: EQUAL
5068: IFFALSE 5078
// sFire := true ;
5070: LD_ADDR_EXP 38
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// if p3 = 11 then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 11
5085: EQUAL
5086: IFFALSE 5096
// sRefresh := true ;
5088: LD_ADDR_EXP 39
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// if p3 = 12 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 12
5103: EQUAL
5104: IFFALSE 5114
// sExp := true ;
5106: LD_ADDR_EXP 40
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 13 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 13
5121: EQUAL
5122: IFFALSE 5132
// sDepot := true ;
5124: LD_ADDR_EXP 41
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 14 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 14
5139: EQUAL
5140: IFFALSE 5150
// sFlag := true ;
5142: LD_ADDR_EXP 42
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 15 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 15
5157: EQUAL
5158: IFFALSE 5168
// sKamikadze := true ;
5160: LD_ADDR_EXP 50
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 16 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 16
5175: EQUAL
5176: IFFALSE 5186
// sTroll := true ;
5178: LD_ADDR_EXP 51
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 17 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 17
5193: EQUAL
5194: IFFALSE 5204
// sSlow := true ;
5196: LD_ADDR_EXP 52
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 18 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 18
5211: EQUAL
5212: IFFALSE 5222
// sLack := true ;
5214: LD_ADDR_EXP 53
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 19 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 19
5229: EQUAL
5230: IFFALSE 5240
// sTank := true ;
5232: LD_ADDR_EXP 55
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 20 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 20
5247: EQUAL
5248: IFFALSE 5258
// sRemote := true ;
5250: LD_ADDR_EXP 56
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// if p3 = 21 then
5258: LD_VAR 0 3
5262: PUSH
5263: LD_INT 21
5265: EQUAL
5266: IFFALSE 5276
// sPowell := true ;
5268: LD_ADDR_EXP 57
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// if p3 = 22 then
5276: LD_VAR 0 3
5280: PUSH
5281: LD_INT 22
5283: EQUAL
5284: IFFALSE 5294
// sTeleport := true ;
5286: LD_ADDR_EXP 60
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// if p3 = 23 then
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 23
5301: EQUAL
5302: IFFALSE 5312
// sOilTower := true ;
5304: LD_ADDR_EXP 62
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// if p3 = 24 then
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 24
5319: EQUAL
5320: IFFALSE 5330
// sShovel := true ;
5322: LD_ADDR_EXP 63
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// if p3 = 25 then
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 25
5337: EQUAL
5338: IFFALSE 5348
// sSheik := true ;
5340: LD_ADDR_EXP 64
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if p3 = 26 then
5348: LD_VAR 0 3
5352: PUSH
5353: LD_INT 26
5355: EQUAL
5356: IFFALSE 5366
// sEarthquake := true ;
5358: LD_ADDR_EXP 66
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// if p3 = 27 then
5366: LD_VAR 0 3
5370: PUSH
5371: LD_INT 27
5373: EQUAL
5374: IFFALSE 5384
// sAI := true ;
5376: LD_ADDR_EXP 67
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if p3 = 28 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 28
5391: EQUAL
5392: IFFALSE 5402
// sCargo := true ;
5394: LD_ADDR_EXP 70
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 29 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 29
5409: EQUAL
5410: IFFALSE 5420
// sDLaser := true ;
5412: LD_ADDR_EXP 71
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// if p3 = 30 then
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 30
5427: EQUAL
5428: IFFALSE 5438
// sExchange := true ;
5430: LD_ADDR_EXP 72
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// if p3 = 31 then
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 31
5445: EQUAL
5446: IFFALSE 5456
// sFac := true ;
5448: LD_ADDR_EXP 73
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// if p3 = 32 then
5456: LD_VAR 0 3
5460: PUSH
5461: LD_INT 32
5463: EQUAL
5464: IFFALSE 5474
// sPower := true ;
5466: LD_ADDR_EXP 74
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// if p3 = 33 then
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 33
5481: EQUAL
5482: IFFALSE 5492
// sRandom := true ;
5484: LD_ADDR_EXP 75
5488: PUSH
5489: LD_INT 1
5491: ST_TO_ADDR
// if p3 = 34 then
5492: LD_VAR 0 3
5496: PUSH
5497: LD_INT 34
5499: EQUAL
5500: IFFALSE 5510
// sShield := true ;
5502: LD_ADDR_EXP 76
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// if p3 = 35 then
5510: LD_VAR 0 3
5514: PUSH
5515: LD_INT 35
5517: EQUAL
5518: IFFALSE 5528
// sTime := true ;
5520: LD_ADDR_EXP 77
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// if p3 = 36 then
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 36
5535: EQUAL
5536: IFFALSE 5546
// sTools := true ;
5538: LD_ADDR_EXP 78
5542: PUSH
5543: LD_INT 1
5545: ST_TO_ADDR
// if p3 = 101 then
5546: LD_VAR 0 3
5550: PUSH
5551: LD_INT 101
5553: EQUAL
5554: IFFALSE 5564
// sSold := true ;
5556: LD_ADDR_EXP 43
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// if p3 = 102 then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 102
5571: EQUAL
5572: IFFALSE 5582
// sDiff := true ;
5574: LD_ADDR_EXP 44
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// if p3 = 103 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 103
5589: EQUAL
5590: IFFALSE 5600
// sFog := true ;
5592: LD_ADDR_EXP 47
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if p3 = 104 then
5600: LD_VAR 0 3
5604: PUSH
5605: LD_INT 104
5607: EQUAL
5608: IFFALSE 5618
// sReset := true ;
5610: LD_ADDR_EXP 48
5614: PUSH
5615: LD_INT 1
5617: ST_TO_ADDR
// if p3 = 105 then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 105
5625: EQUAL
5626: IFFALSE 5636
// sSun := true ;
5628: LD_ADDR_EXP 49
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// if p3 = 106 then
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 106
5643: EQUAL
5644: IFFALSE 5654
// sTiger := true ;
5646: LD_ADDR_EXP 45
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// if p3 = 107 then
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 107
5661: EQUAL
5662: IFFALSE 5672
// sBomb := true ;
5664: LD_ADDR_EXP 46
5668: PUSH
5669: LD_INT 1
5671: ST_TO_ADDR
// if p3 = 108 then
5672: LD_VAR 0 3
5676: PUSH
5677: LD_INT 108
5679: EQUAL
5680: IFFALSE 5690
// sWound := true ;
5682: LD_ADDR_EXP 54
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if p3 = 109 then
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 109
5697: EQUAL
5698: IFFALSE 5708
// sBetray := true ;
5700: LD_ADDR_EXP 58
5704: PUSH
5705: LD_INT 1
5707: ST_TO_ADDR
// if p3 = 110 then
5708: LD_VAR 0 3
5712: PUSH
5713: LD_INT 110
5715: EQUAL
5716: IFFALSE 5726
// sContamin := true ;
5718: LD_ADDR_EXP 59
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// if p3 = 111 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_INT 111
5733: EQUAL
5734: IFFALSE 5744
// sOil := true ;
5736: LD_ADDR_EXP 61
5740: PUSH
5741: LD_INT 1
5743: ST_TO_ADDR
// if p3 = 112 then
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 112
5751: EQUAL
5752: IFFALSE 5762
// sStu := true ;
5754: LD_ADDR_EXP 65
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// if p3 = 113 then
5762: LD_VAR 0 3
5766: PUSH
5767: LD_INT 113
5769: EQUAL
5770: IFFALSE 5780
// sBazooka := true ;
5772: LD_ADDR_EXP 68
5776: PUSH
5777: LD_INT 1
5779: ST_TO_ADDR
// if p3 = 114 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 114
5787: EQUAL
5788: IFFALSE 5798
// sMortar := true ;
5790: LD_ADDR_EXP 69
5794: PUSH
5795: LD_INT 1
5797: ST_TO_ADDR
// if p3 = 115 then
5798: LD_VAR 0 3
5802: PUSH
5803: LD_INT 115
5805: EQUAL
5806: IFFALSE 5816
// sRanger := true ;
5808: LD_ADDR_EXP 79
5812: PUSH
5813: LD_INT 1
5815: ST_TO_ADDR
// if p3 = 116 then
5816: LD_VAR 0 3
5820: PUSH
5821: LD_INT 116
5823: EQUAL
5824: IFFALSE 5834
// sComputer := true ;
5826: LD_ADDR_EXP 80
5830: PUSH
5831: LD_INT 1
5833: ST_TO_ADDR
// if p3 = 117 then
5834: LD_VAR 0 3
5838: PUSH
5839: LD_INT 117
5841: EQUAL
5842: IFFALSE 5852
// s30 := true ;
5844: LD_ADDR_EXP 81
5848: PUSH
5849: LD_INT 1
5851: ST_TO_ADDR
// if p3 = 118 then
5852: LD_VAR 0 3
5856: PUSH
5857: LD_INT 118
5859: EQUAL
5860: IFFALSE 5870
// s60 := true ;
5862: LD_ADDR_EXP 82
5866: PUSH
5867: LD_INT 1
5869: ST_TO_ADDR
// end ; if p2 = 101 then
5870: LD_VAR 0 2
5874: PUSH
5875: LD_INT 101
5877: EQUAL
5878: IFFALSE 6006
// begin case p3 of 1 :
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 1
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5893
5891: GO 5900
5893: POP
// hHackUnlimitedResources ; 2 :
5894: CALL 17602 0 0
5898: GO 6006
5900: LD_INT 2
5902: DOUBLE
5903: EQUAL
5904: IFTRUE 5908
5906: GO 5915
5908: POP
// hHackSetLevel10 ; 3 :
5909: CALL 17735 0 0
5913: GO 6006
5915: LD_INT 3
5917: DOUBLE
5918: EQUAL
5919: IFTRUE 5923
5921: GO 5930
5923: POP
// hHackSetLevel10YourUnits ; 4 :
5924: CALL 17820 0 0
5928: GO 6006
5930: LD_INT 4
5932: DOUBLE
5933: EQUAL
5934: IFTRUE 5938
5936: GO 5945
5938: POP
// hHackInvincible ; 5 :
5939: CALL 18268 0 0
5943: GO 6006
5945: LD_INT 5
5947: DOUBLE
5948: EQUAL
5949: IFTRUE 5953
5951: GO 5960
5953: POP
// hHackInvisible ; 6 :
5954: CALL 18379 0 0
5958: GO 6006
5960: LD_INT 6
5962: DOUBLE
5963: EQUAL
5964: IFTRUE 5968
5966: GO 5975
5968: POP
// hHackChangeYourSide ; 7 :
5969: CALL 18436 0 0
5973: GO 6006
5975: LD_INT 7
5977: DOUBLE
5978: EQUAL
5979: IFTRUE 5983
5981: GO 5990
5983: POP
// hHackChangeUnitSide ; 8 :
5984: CALL 18478 0 0
5988: GO 6006
5990: LD_INT 8
5992: DOUBLE
5993: EQUAL
5994: IFTRUE 5998
5996: GO 6005
5998: POP
// hHackFog ; end ;
5999: CALL 18579 0 0
6003: GO 6006
6005: POP
// end ; end ;
6006: LD_VAR 0 7
6010: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6011: GO 6013
6013: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6014: LD_STRING initStreamRollete();
6016: PPUSH
6017: CALL_OW 559
// InitStreamMode ;
6021: CALL 6030 0 0
// DefineStreamItems ( ) ;
6025: CALL 6494 0 0
// end ;
6029: END
// function InitStreamMode ; begin
6030: LD_INT 0
6032: PPUSH
// streamModeActive := false ;
6033: LD_ADDR_EXP 26
6037: PUSH
6038: LD_INT 0
6040: ST_TO_ADDR
// normalCounter := 36 ;
6041: LD_ADDR_EXP 27
6045: PUSH
6046: LD_INT 36
6048: ST_TO_ADDR
// hardcoreCounter := 16 ;
6049: LD_ADDR_EXP 28
6053: PUSH
6054: LD_INT 16
6056: ST_TO_ADDR
// sRocket := false ;
6057: LD_ADDR_EXP 31
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// sSpeed := false ;
6065: LD_ADDR_EXP 30
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// sEngine := false ;
6073: LD_ADDR_EXP 32
6077: PUSH
6078: LD_INT 0
6080: ST_TO_ADDR
// sSpec := false ;
6081: LD_ADDR_EXP 29
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// sLevel := false ;
6089: LD_ADDR_EXP 33
6093: PUSH
6094: LD_INT 0
6096: ST_TO_ADDR
// sArmoury := false ;
6097: LD_ADDR_EXP 34
6101: PUSH
6102: LD_INT 0
6104: ST_TO_ADDR
// sRadar := false ;
6105: LD_ADDR_EXP 35
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sBunker := false ;
6113: LD_ADDR_EXP 36
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sHack := false ;
6121: LD_ADDR_EXP 37
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sFire := false ;
6129: LD_ADDR_EXP 38
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sRefresh := false ;
6137: LD_ADDR_EXP 39
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sExp := false ;
6145: LD_ADDR_EXP 40
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sDepot := false ;
6153: LD_ADDR_EXP 41
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sFlag := false ;
6161: LD_ADDR_EXP 42
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sKamikadze := false ;
6169: LD_ADDR_EXP 50
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sTroll := false ;
6177: LD_ADDR_EXP 51
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sSlow := false ;
6185: LD_ADDR_EXP 52
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sLack := false ;
6193: LD_ADDR_EXP 53
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sTank := false ;
6201: LD_ADDR_EXP 55
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sRemote := false ;
6209: LD_ADDR_EXP 56
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sPowell := false ;
6217: LD_ADDR_EXP 57
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sTeleport := false ;
6225: LD_ADDR_EXP 60
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sOilTower := false ;
6233: LD_ADDR_EXP 62
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sShovel := false ;
6241: LD_ADDR_EXP 63
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sSheik := false ;
6249: LD_ADDR_EXP 64
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sEarthquake := false ;
6257: LD_ADDR_EXP 66
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sAI := false ;
6265: LD_ADDR_EXP 67
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sCargo := false ;
6273: LD_ADDR_EXP 70
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// sDLaser := false ;
6281: LD_ADDR_EXP 71
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// sExchange := false ;
6289: LD_ADDR_EXP 72
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// sFac := false ;
6297: LD_ADDR_EXP 73
6301: PUSH
6302: LD_INT 0
6304: ST_TO_ADDR
// sPower := false ;
6305: LD_ADDR_EXP 74
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// sRandom := false ;
6313: LD_ADDR_EXP 75
6317: PUSH
6318: LD_INT 0
6320: ST_TO_ADDR
// sShield := false ;
6321: LD_ADDR_EXP 76
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// sTime := false ;
6329: LD_ADDR_EXP 77
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// sTools := false ;
6337: LD_ADDR_EXP 78
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// sSold := false ;
6345: LD_ADDR_EXP 43
6349: PUSH
6350: LD_INT 0
6352: ST_TO_ADDR
// sDiff := false ;
6353: LD_ADDR_EXP 44
6357: PUSH
6358: LD_INT 0
6360: ST_TO_ADDR
// sFog := false ;
6361: LD_ADDR_EXP 47
6365: PUSH
6366: LD_INT 0
6368: ST_TO_ADDR
// sReset := false ;
6369: LD_ADDR_EXP 48
6373: PUSH
6374: LD_INT 0
6376: ST_TO_ADDR
// sSun := false ;
6377: LD_ADDR_EXP 49
6381: PUSH
6382: LD_INT 0
6384: ST_TO_ADDR
// sTiger := false ;
6385: LD_ADDR_EXP 45
6389: PUSH
6390: LD_INT 0
6392: ST_TO_ADDR
// sBomb := false ;
6393: LD_ADDR_EXP 46
6397: PUSH
6398: LD_INT 0
6400: ST_TO_ADDR
// sWound := false ;
6401: LD_ADDR_EXP 54
6405: PUSH
6406: LD_INT 0
6408: ST_TO_ADDR
// sBetray := false ;
6409: LD_ADDR_EXP 58
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// sContamin := false ;
6417: LD_ADDR_EXP 59
6421: PUSH
6422: LD_INT 0
6424: ST_TO_ADDR
// sOil := false ;
6425: LD_ADDR_EXP 61
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// sStu := false ;
6433: LD_ADDR_EXP 65
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// sBazooka := false ;
6441: LD_ADDR_EXP 68
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// sMortar := false ;
6449: LD_ADDR_EXP 69
6453: PUSH
6454: LD_INT 0
6456: ST_TO_ADDR
// sRanger := false ;
6457: LD_ADDR_EXP 79
6461: PUSH
6462: LD_INT 0
6464: ST_TO_ADDR
// sComputer := false ;
6465: LD_ADDR_EXP 80
6469: PUSH
6470: LD_INT 0
6472: ST_TO_ADDR
// s30 := false ;
6473: LD_ADDR_EXP 81
6477: PUSH
6478: LD_INT 0
6480: ST_TO_ADDR
// s60 := false ;
6481: LD_ADDR_EXP 82
6485: PUSH
6486: LD_INT 0
6488: ST_TO_ADDR
// end ;
6489: LD_VAR 0 1
6493: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6494: LD_INT 0
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
6500: PPUSH
// result := [ ] ;
6501: LD_ADDR_VAR 0 1
6505: PUSH
6506: EMPTY
6507: ST_TO_ADDR
// if campaign_id = 1 then
6508: LD_OWVAR 69
6512: PUSH
6513: LD_INT 1
6515: EQUAL
6516: IFFALSE 9682
// begin case mission_number of 1 :
6518: LD_OWVAR 70
6522: PUSH
6523: LD_INT 1
6525: DOUBLE
6526: EQUAL
6527: IFTRUE 6531
6529: GO 6607
6531: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6532: LD_ADDR_VAR 0 1
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: LD_INT 4
6542: PUSH
6543: LD_INT 11
6545: PUSH
6546: LD_INT 12
6548: PUSH
6549: LD_INT 15
6551: PUSH
6552: LD_INT 16
6554: PUSH
6555: LD_INT 22
6557: PUSH
6558: LD_INT 23
6560: PUSH
6561: LD_INT 26
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 101
6577: PUSH
6578: LD_INT 102
6580: PUSH
6581: LD_INT 106
6583: PUSH
6584: LD_INT 116
6586: PUSH
6587: LD_INT 117
6589: PUSH
6590: LD_INT 118
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: ST_TO_ADDR
6605: GO 9680
6607: LD_INT 2
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6699
6615: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6616: LD_ADDR_VAR 0 1
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 4
6626: PUSH
6627: LD_INT 11
6629: PUSH
6630: LD_INT 12
6632: PUSH
6633: LD_INT 15
6635: PUSH
6636: LD_INT 16
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_INT 23
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 101
6661: PUSH
6662: LD_INT 102
6664: PUSH
6665: LD_INT 105
6667: PUSH
6668: LD_INT 106
6670: PUSH
6671: LD_INT 108
6673: PUSH
6674: LD_INT 116
6676: PUSH
6677: LD_INT 117
6679: PUSH
6680: LD_INT 118
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: ST_TO_ADDR
6697: GO 9680
6699: LD_INT 3
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6795
6707: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_INT 2
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: LD_INT 11
6724: PUSH
6725: LD_INT 12
6727: PUSH
6728: LD_INT 15
6730: PUSH
6731: LD_INT 16
6733: PUSH
6734: LD_INT 22
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 36
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: LD_INT 116
6772: PUSH
6773: LD_INT 117
6775: PUSH
6776: LD_INT 118
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: ST_TO_ADDR
6793: GO 9680
6795: LD_INT 4
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6899
6803: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6804: LD_ADDR_VAR 0 1
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: LD_INT 4
6814: PUSH
6815: LD_INT 5
6817: PUSH
6818: LD_INT 8
6820: PUSH
6821: LD_INT 11
6823: PUSH
6824: LD_INT 12
6826: PUSH
6827: LD_INT 15
6829: PUSH
6830: LD_INT 16
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 23
6838: PUSH
6839: LD_INT 26
6841: PUSH
6842: LD_INT 36
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 101
6861: PUSH
6862: LD_INT 102
6864: PUSH
6865: LD_INT 105
6867: PUSH
6868: LD_INT 106
6870: PUSH
6871: LD_INT 108
6873: PUSH
6874: LD_INT 116
6876: PUSH
6877: LD_INT 117
6879: PUSH
6880: LD_INT 118
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: ST_TO_ADDR
6897: GO 9680
6899: LD_INT 5
6901: DOUBLE
6902: EQUAL
6903: IFTRUE 6907
6905: GO 7019
6907: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6908: LD_ADDR_VAR 0 1
6912: PUSH
6913: LD_INT 2
6915: PUSH
6916: LD_INT 4
6918: PUSH
6919: LD_INT 5
6921: PUSH
6922: LD_INT 6
6924: PUSH
6925: LD_INT 8
6927: PUSH
6928: LD_INT 11
6930: PUSH
6931: LD_INT 12
6933: PUSH
6934: LD_INT 15
6936: PUSH
6937: LD_INT 16
6939: PUSH
6940: LD_INT 22
6942: PUSH
6943: LD_INT 23
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 26
6951: PUSH
6952: LD_INT 36
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 101
6973: PUSH
6974: LD_INT 102
6976: PUSH
6977: LD_INT 105
6979: PUSH
6980: LD_INT 106
6982: PUSH
6983: LD_INT 108
6985: PUSH
6986: LD_INT 109
6988: PUSH
6989: LD_INT 112
6991: PUSH
6992: LD_INT 116
6994: PUSH
6995: LD_INT 117
6997: PUSH
6998: LD_INT 118
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: ST_TO_ADDR
7017: GO 9680
7019: LD_INT 6
7021: DOUBLE
7022: EQUAL
7023: IFTRUE 7027
7025: GO 7159
7027: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7028: LD_ADDR_VAR 0 1
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: LD_INT 6
7044: PUSH
7045: LD_INT 8
7047: PUSH
7048: LD_INT 11
7050: PUSH
7051: LD_INT 12
7053: PUSH
7054: LD_INT 15
7056: PUSH
7057: LD_INT 16
7059: PUSH
7060: LD_INT 20
7062: PUSH
7063: LD_INT 21
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 25
7074: PUSH
7075: LD_INT 26
7077: PUSH
7078: LD_INT 30
7080: PUSH
7081: LD_INT 31
7083: PUSH
7084: LD_INT 32
7086: PUSH
7087: LD_INT 36
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 101
7113: PUSH
7114: LD_INT 102
7116: PUSH
7117: LD_INT 105
7119: PUSH
7120: LD_INT 106
7122: PUSH
7123: LD_INT 108
7125: PUSH
7126: LD_INT 109
7128: PUSH
7129: LD_INT 112
7131: PUSH
7132: LD_INT 116
7134: PUSH
7135: LD_INT 117
7137: PUSH
7138: LD_INT 118
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: ST_TO_ADDR
7157: GO 9680
7159: LD_INT 7
7161: DOUBLE
7162: EQUAL
7163: IFTRUE 7167
7165: GO 7279
7167: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7168: LD_ADDR_VAR 0 1
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 4
7178: PUSH
7179: LD_INT 5
7181: PUSH
7182: LD_INT 7
7184: PUSH
7185: LD_INT 11
7187: PUSH
7188: LD_INT 12
7190: PUSH
7191: LD_INT 15
7193: PUSH
7194: LD_INT 16
7196: PUSH
7197: LD_INT 20
7199: PUSH
7200: LD_INT 21
7202: PUSH
7203: LD_INT 22
7205: PUSH
7206: LD_INT 23
7208: PUSH
7209: LD_INT 25
7211: PUSH
7212: LD_INT 26
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 101
7233: PUSH
7234: LD_INT 102
7236: PUSH
7237: LD_INT 103
7239: PUSH
7240: LD_INT 105
7242: PUSH
7243: LD_INT 106
7245: PUSH
7246: LD_INT 108
7248: PUSH
7249: LD_INT 112
7251: PUSH
7252: LD_INT 116
7254: PUSH
7255: LD_INT 117
7257: PUSH
7258: LD_INT 118
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: ST_TO_ADDR
7277: GO 9680
7279: LD_INT 8
7281: DOUBLE
7282: EQUAL
7283: IFTRUE 7287
7285: GO 7427
7287: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7288: LD_ADDR_VAR 0 1
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 4
7298: PUSH
7299: LD_INT 5
7301: PUSH
7302: LD_INT 6
7304: PUSH
7305: LD_INT 7
7307: PUSH
7308: LD_INT 8
7310: PUSH
7311: LD_INT 11
7313: PUSH
7314: LD_INT 12
7316: PUSH
7317: LD_INT 15
7319: PUSH
7320: LD_INT 16
7322: PUSH
7323: LD_INT 20
7325: PUSH
7326: LD_INT 21
7328: PUSH
7329: LD_INT 22
7331: PUSH
7332: LD_INT 23
7334: PUSH
7335: LD_INT 25
7337: PUSH
7338: LD_INT 26
7340: PUSH
7341: LD_INT 30
7343: PUSH
7344: LD_INT 31
7346: PUSH
7347: LD_INT 32
7349: PUSH
7350: LD_INT 36
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 101
7377: PUSH
7378: LD_INT 102
7380: PUSH
7381: LD_INT 103
7383: PUSH
7384: LD_INT 105
7386: PUSH
7387: LD_INT 106
7389: PUSH
7390: LD_INT 108
7392: PUSH
7393: LD_INT 109
7395: PUSH
7396: LD_INT 112
7398: PUSH
7399: LD_INT 116
7401: PUSH
7402: LD_INT 117
7404: PUSH
7405: LD_INT 118
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: ST_TO_ADDR
7425: GO 9680
7427: LD_INT 9
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7583
7435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7436: LD_ADDR_VAR 0 1
7440: PUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 4
7446: PUSH
7447: LD_INT 5
7449: PUSH
7450: LD_INT 6
7452: PUSH
7453: LD_INT 7
7455: PUSH
7456: LD_INT 8
7458: PUSH
7459: LD_INT 11
7461: PUSH
7462: LD_INT 12
7464: PUSH
7465: LD_INT 15
7467: PUSH
7468: LD_INT 16
7470: PUSH
7471: LD_INT 20
7473: PUSH
7474: LD_INT 21
7476: PUSH
7477: LD_INT 22
7479: PUSH
7480: LD_INT 23
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 28
7491: PUSH
7492: LD_INT 30
7494: PUSH
7495: LD_INT 31
7497: PUSH
7498: LD_INT 32
7500: PUSH
7501: LD_INT 36
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 101
7529: PUSH
7530: LD_INT 102
7532: PUSH
7533: LD_INT 103
7535: PUSH
7536: LD_INT 105
7538: PUSH
7539: LD_INT 106
7541: PUSH
7542: LD_INT 108
7544: PUSH
7545: LD_INT 109
7547: PUSH
7548: LD_INT 112
7550: PUSH
7551: LD_INT 114
7553: PUSH
7554: LD_INT 116
7556: PUSH
7557: LD_INT 117
7559: PUSH
7560: LD_INT 118
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: ST_TO_ADDR
7581: GO 9680
7583: LD_INT 10
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7787
7591: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7592: LD_ADDR_VAR 0 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 4
7602: PUSH
7603: LD_INT 5
7605: PUSH
7606: LD_INT 6
7608: PUSH
7609: LD_INT 7
7611: PUSH
7612: LD_INT 8
7614: PUSH
7615: LD_INT 9
7617: PUSH
7618: LD_INT 10
7620: PUSH
7621: LD_INT 11
7623: PUSH
7624: LD_INT 12
7626: PUSH
7627: LD_INT 13
7629: PUSH
7630: LD_INT 14
7632: PUSH
7633: LD_INT 15
7635: PUSH
7636: LD_INT 16
7638: PUSH
7639: LD_INT 17
7641: PUSH
7642: LD_INT 18
7644: PUSH
7645: LD_INT 19
7647: PUSH
7648: LD_INT 20
7650: PUSH
7651: LD_INT 21
7653: PUSH
7654: LD_INT 22
7656: PUSH
7657: LD_INT 23
7659: PUSH
7660: LD_INT 24
7662: PUSH
7663: LD_INT 25
7665: PUSH
7666: LD_INT 26
7668: PUSH
7669: LD_INT 28
7671: PUSH
7672: LD_INT 30
7674: PUSH
7675: LD_INT 31
7677: PUSH
7678: LD_INT 32
7680: PUSH
7681: LD_INT 36
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 101
7717: PUSH
7718: LD_INT 102
7720: PUSH
7721: LD_INT 103
7723: PUSH
7724: LD_INT 104
7726: PUSH
7727: LD_INT 105
7729: PUSH
7730: LD_INT 106
7732: PUSH
7733: LD_INT 107
7735: PUSH
7736: LD_INT 108
7738: PUSH
7739: LD_INT 109
7741: PUSH
7742: LD_INT 110
7744: PUSH
7745: LD_INT 111
7747: PUSH
7748: LD_INT 112
7750: PUSH
7751: LD_INT 114
7753: PUSH
7754: LD_INT 116
7756: PUSH
7757: LD_INT 117
7759: PUSH
7760: LD_INT 118
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
7785: GO 9680
7787: LD_INT 11
7789: DOUBLE
7790: EQUAL
7791: IFTRUE 7795
7793: GO 7999
7795: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7796: LD_ADDR_VAR 0 1
7800: PUSH
7801: LD_INT 2
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: LD_INT 4
7809: PUSH
7810: LD_INT 5
7812: PUSH
7813: LD_INT 6
7815: PUSH
7816: LD_INT 7
7818: PUSH
7819: LD_INT 8
7821: PUSH
7822: LD_INT 9
7824: PUSH
7825: LD_INT 10
7827: PUSH
7828: LD_INT 11
7830: PUSH
7831: LD_INT 12
7833: PUSH
7834: LD_INT 13
7836: PUSH
7837: LD_INT 14
7839: PUSH
7840: LD_INT 15
7842: PUSH
7843: LD_INT 16
7845: PUSH
7846: LD_INT 17
7848: PUSH
7849: LD_INT 18
7851: PUSH
7852: LD_INT 19
7854: PUSH
7855: LD_INT 20
7857: PUSH
7858: LD_INT 21
7860: PUSH
7861: LD_INT 22
7863: PUSH
7864: LD_INT 23
7866: PUSH
7867: LD_INT 24
7869: PUSH
7870: LD_INT 25
7872: PUSH
7873: LD_INT 26
7875: PUSH
7876: LD_INT 28
7878: PUSH
7879: LD_INT 30
7881: PUSH
7882: LD_INT 31
7884: PUSH
7885: LD_INT 32
7887: PUSH
7888: LD_INT 34
7890: PUSH
7891: LD_INT 36
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 101
7929: PUSH
7930: LD_INT 102
7932: PUSH
7933: LD_INT 103
7935: PUSH
7936: LD_INT 104
7938: PUSH
7939: LD_INT 105
7941: PUSH
7942: LD_INT 106
7944: PUSH
7945: LD_INT 107
7947: PUSH
7948: LD_INT 108
7950: PUSH
7951: LD_INT 109
7953: PUSH
7954: LD_INT 110
7956: PUSH
7957: LD_INT 111
7959: PUSH
7960: LD_INT 112
7962: PUSH
7963: LD_INT 114
7965: PUSH
7966: LD_INT 116
7968: PUSH
7969: LD_INT 117
7971: PUSH
7972: LD_INT 118
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: ST_TO_ADDR
7997: GO 9680
7999: LD_INT 12
8001: DOUBLE
8002: EQUAL
8003: IFTRUE 8007
8005: GO 8227
8007: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8008: LD_ADDR_VAR 0 1
8012: PUSH
8013: LD_INT 1
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: LD_INT 4
8024: PUSH
8025: LD_INT 5
8027: PUSH
8028: LD_INT 6
8030: PUSH
8031: LD_INT 7
8033: PUSH
8034: LD_INT 8
8036: PUSH
8037: LD_INT 9
8039: PUSH
8040: LD_INT 10
8042: PUSH
8043: LD_INT 11
8045: PUSH
8046: LD_INT 12
8048: PUSH
8049: LD_INT 13
8051: PUSH
8052: LD_INT 14
8054: PUSH
8055: LD_INT 15
8057: PUSH
8058: LD_INT 16
8060: PUSH
8061: LD_INT 17
8063: PUSH
8064: LD_INT 18
8066: PUSH
8067: LD_INT 19
8069: PUSH
8070: LD_INT 20
8072: PUSH
8073: LD_INT 21
8075: PUSH
8076: LD_INT 22
8078: PUSH
8079: LD_INT 23
8081: PUSH
8082: LD_INT 24
8084: PUSH
8085: LD_INT 25
8087: PUSH
8088: LD_INT 26
8090: PUSH
8091: LD_INT 27
8093: PUSH
8094: LD_INT 28
8096: PUSH
8097: LD_INT 30
8099: PUSH
8100: LD_INT 31
8102: PUSH
8103: LD_INT 32
8105: PUSH
8106: LD_INT 33
8108: PUSH
8109: LD_INT 34
8111: PUSH
8112: LD_INT 36
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 101
8153: PUSH
8154: LD_INT 102
8156: PUSH
8157: LD_INT 103
8159: PUSH
8160: LD_INT 104
8162: PUSH
8163: LD_INT 105
8165: PUSH
8166: LD_INT 106
8168: PUSH
8169: LD_INT 107
8171: PUSH
8172: LD_INT 108
8174: PUSH
8175: LD_INT 109
8177: PUSH
8178: LD_INT 110
8180: PUSH
8181: LD_INT 111
8183: PUSH
8184: LD_INT 112
8186: PUSH
8187: LD_INT 113
8189: PUSH
8190: LD_INT 114
8192: PUSH
8193: LD_INT 116
8195: PUSH
8196: LD_INT 117
8198: PUSH
8199: LD_INT 118
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: ST_TO_ADDR
8225: GO 9680
8227: LD_INT 13
8229: DOUBLE
8230: EQUAL
8231: IFTRUE 8235
8233: GO 8443
8235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8236: LD_ADDR_VAR 0 1
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: LD_INT 2
8246: PUSH
8247: LD_INT 3
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: LD_INT 5
8255: PUSH
8256: LD_INT 8
8258: PUSH
8259: LD_INT 9
8261: PUSH
8262: LD_INT 10
8264: PUSH
8265: LD_INT 11
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: LD_INT 14
8273: PUSH
8274: LD_INT 15
8276: PUSH
8277: LD_INT 16
8279: PUSH
8280: LD_INT 17
8282: PUSH
8283: LD_INT 18
8285: PUSH
8286: LD_INT 19
8288: PUSH
8289: LD_INT 20
8291: PUSH
8292: LD_INT 21
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_INT 23
8300: PUSH
8301: LD_INT 24
8303: PUSH
8304: LD_INT 25
8306: PUSH
8307: LD_INT 26
8309: PUSH
8310: LD_INT 27
8312: PUSH
8313: LD_INT 28
8315: PUSH
8316: LD_INT 30
8318: PUSH
8319: LD_INT 31
8321: PUSH
8322: LD_INT 32
8324: PUSH
8325: LD_INT 33
8327: PUSH
8328: LD_INT 34
8330: PUSH
8331: LD_INT 36
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 101
8369: PUSH
8370: LD_INT 102
8372: PUSH
8373: LD_INT 103
8375: PUSH
8376: LD_INT 104
8378: PUSH
8379: LD_INT 105
8381: PUSH
8382: LD_INT 106
8384: PUSH
8385: LD_INT 107
8387: PUSH
8388: LD_INT 108
8390: PUSH
8391: LD_INT 109
8393: PUSH
8394: LD_INT 110
8396: PUSH
8397: LD_INT 111
8399: PUSH
8400: LD_INT 112
8402: PUSH
8403: LD_INT 113
8405: PUSH
8406: LD_INT 114
8408: PUSH
8409: LD_INT 116
8411: PUSH
8412: LD_INT 117
8414: PUSH
8415: LD_INT 118
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: ST_TO_ADDR
8441: GO 9680
8443: LD_INT 14
8445: DOUBLE
8446: EQUAL
8447: IFTRUE 8451
8449: GO 8675
8451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8452: LD_ADDR_VAR 0 1
8456: PUSH
8457: LD_INT 1
8459: PUSH
8460: LD_INT 2
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: LD_INT 4
8468: PUSH
8469: LD_INT 5
8471: PUSH
8472: LD_INT 6
8474: PUSH
8475: LD_INT 7
8477: PUSH
8478: LD_INT 8
8480: PUSH
8481: LD_INT 9
8483: PUSH
8484: LD_INT 10
8486: PUSH
8487: LD_INT 11
8489: PUSH
8490: LD_INT 12
8492: PUSH
8493: LD_INT 13
8495: PUSH
8496: LD_INT 14
8498: PUSH
8499: LD_INT 15
8501: PUSH
8502: LD_INT 16
8504: PUSH
8505: LD_INT 17
8507: PUSH
8508: LD_INT 18
8510: PUSH
8511: LD_INT 19
8513: PUSH
8514: LD_INT 20
8516: PUSH
8517: LD_INT 21
8519: PUSH
8520: LD_INT 22
8522: PUSH
8523: LD_INT 23
8525: PUSH
8526: LD_INT 24
8528: PUSH
8529: LD_INT 25
8531: PUSH
8532: LD_INT 26
8534: PUSH
8535: LD_INT 27
8537: PUSH
8538: LD_INT 28
8540: PUSH
8541: LD_INT 29
8543: PUSH
8544: LD_INT 30
8546: PUSH
8547: LD_INT 31
8549: PUSH
8550: LD_INT 32
8552: PUSH
8553: LD_INT 33
8555: PUSH
8556: LD_INT 34
8558: PUSH
8559: LD_INT 36
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 101
8601: PUSH
8602: LD_INT 102
8604: PUSH
8605: LD_INT 103
8607: PUSH
8608: LD_INT 104
8610: PUSH
8611: LD_INT 105
8613: PUSH
8614: LD_INT 106
8616: PUSH
8617: LD_INT 107
8619: PUSH
8620: LD_INT 108
8622: PUSH
8623: LD_INT 109
8625: PUSH
8626: LD_INT 110
8628: PUSH
8629: LD_INT 111
8631: PUSH
8632: LD_INT 112
8634: PUSH
8635: LD_INT 113
8637: PUSH
8638: LD_INT 114
8640: PUSH
8641: LD_INT 116
8643: PUSH
8644: LD_INT 117
8646: PUSH
8647: LD_INT 118
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: ST_TO_ADDR
8673: GO 9680
8675: LD_INT 15
8677: DOUBLE
8678: EQUAL
8679: IFTRUE 8683
8681: GO 8907
8683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: LD_INT 2
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 4
8700: PUSH
8701: LD_INT 5
8703: PUSH
8704: LD_INT 6
8706: PUSH
8707: LD_INT 7
8709: PUSH
8710: LD_INT 8
8712: PUSH
8713: LD_INT 9
8715: PUSH
8716: LD_INT 10
8718: PUSH
8719: LD_INT 11
8721: PUSH
8722: LD_INT 12
8724: PUSH
8725: LD_INT 13
8727: PUSH
8728: LD_INT 14
8730: PUSH
8731: LD_INT 15
8733: PUSH
8734: LD_INT 16
8736: PUSH
8737: LD_INT 17
8739: PUSH
8740: LD_INT 18
8742: PUSH
8743: LD_INT 19
8745: PUSH
8746: LD_INT 20
8748: PUSH
8749: LD_INT 21
8751: PUSH
8752: LD_INT 22
8754: PUSH
8755: LD_INT 23
8757: PUSH
8758: LD_INT 24
8760: PUSH
8761: LD_INT 25
8763: PUSH
8764: LD_INT 26
8766: PUSH
8767: LD_INT 27
8769: PUSH
8770: LD_INT 28
8772: PUSH
8773: LD_INT 29
8775: PUSH
8776: LD_INT 30
8778: PUSH
8779: LD_INT 31
8781: PUSH
8782: LD_INT 32
8784: PUSH
8785: LD_INT 33
8787: PUSH
8788: LD_INT 34
8790: PUSH
8791: LD_INT 36
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 101
8833: PUSH
8834: LD_INT 102
8836: PUSH
8837: LD_INT 103
8839: PUSH
8840: LD_INT 104
8842: PUSH
8843: LD_INT 105
8845: PUSH
8846: LD_INT 106
8848: PUSH
8849: LD_INT 107
8851: PUSH
8852: LD_INT 108
8854: PUSH
8855: LD_INT 109
8857: PUSH
8858: LD_INT 110
8860: PUSH
8861: LD_INT 111
8863: PUSH
8864: LD_INT 112
8866: PUSH
8867: LD_INT 113
8869: PUSH
8870: LD_INT 114
8872: PUSH
8873: LD_INT 116
8875: PUSH
8876: LD_INT 117
8878: PUSH
8879: LD_INT 118
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: ST_TO_ADDR
8905: GO 9680
8907: LD_INT 16
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 9051
8915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8916: LD_ADDR_VAR 0 1
8920: PUSH
8921: LD_INT 2
8923: PUSH
8924: LD_INT 4
8926: PUSH
8927: LD_INT 5
8929: PUSH
8930: LD_INT 7
8932: PUSH
8933: LD_INT 11
8935: PUSH
8936: LD_INT 12
8938: PUSH
8939: LD_INT 15
8941: PUSH
8942: LD_INT 16
8944: PUSH
8945: LD_INT 20
8947: PUSH
8948: LD_INT 21
8950: PUSH
8951: LD_INT 22
8953: PUSH
8954: LD_INT 23
8956: PUSH
8957: LD_INT 25
8959: PUSH
8960: LD_INT 26
8962: PUSH
8963: LD_INT 30
8965: PUSH
8966: LD_INT 31
8968: PUSH
8969: LD_INT 32
8971: PUSH
8972: LD_INT 33
8974: PUSH
8975: LD_INT 34
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 101
9001: PUSH
9002: LD_INT 102
9004: PUSH
9005: LD_INT 103
9007: PUSH
9008: LD_INT 106
9010: PUSH
9011: LD_INT 108
9013: PUSH
9014: LD_INT 112
9016: PUSH
9017: LD_INT 113
9019: PUSH
9020: LD_INT 114
9022: PUSH
9023: LD_INT 116
9025: PUSH
9026: LD_INT 117
9028: PUSH
9029: LD_INT 118
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: ST_TO_ADDR
9049: GO 9680
9051: LD_INT 17
9053: DOUBLE
9054: EQUAL
9055: IFTRUE 9059
9057: GO 9283
9059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9060: LD_ADDR_VAR 0 1
9064: PUSH
9065: LD_INT 1
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: LD_INT 3
9073: PUSH
9074: LD_INT 4
9076: PUSH
9077: LD_INT 5
9079: PUSH
9080: LD_INT 6
9082: PUSH
9083: LD_INT 7
9085: PUSH
9086: LD_INT 8
9088: PUSH
9089: LD_INT 9
9091: PUSH
9092: LD_INT 10
9094: PUSH
9095: LD_INT 11
9097: PUSH
9098: LD_INT 12
9100: PUSH
9101: LD_INT 13
9103: PUSH
9104: LD_INT 14
9106: PUSH
9107: LD_INT 15
9109: PUSH
9110: LD_INT 16
9112: PUSH
9113: LD_INT 17
9115: PUSH
9116: LD_INT 18
9118: PUSH
9119: LD_INT 19
9121: PUSH
9122: LD_INT 20
9124: PUSH
9125: LD_INT 21
9127: PUSH
9128: LD_INT 22
9130: PUSH
9131: LD_INT 23
9133: PUSH
9134: LD_INT 24
9136: PUSH
9137: LD_INT 25
9139: PUSH
9140: LD_INT 26
9142: PUSH
9143: LD_INT 27
9145: PUSH
9146: LD_INT 28
9148: PUSH
9149: LD_INT 29
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 31
9157: PUSH
9158: LD_INT 32
9160: PUSH
9161: LD_INT 33
9163: PUSH
9164: LD_INT 34
9166: PUSH
9167: LD_INT 36
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 101
9209: PUSH
9210: LD_INT 102
9212: PUSH
9213: LD_INT 103
9215: PUSH
9216: LD_INT 104
9218: PUSH
9219: LD_INT 105
9221: PUSH
9222: LD_INT 106
9224: PUSH
9225: LD_INT 107
9227: PUSH
9228: LD_INT 108
9230: PUSH
9231: LD_INT 109
9233: PUSH
9234: LD_INT 110
9236: PUSH
9237: LD_INT 111
9239: PUSH
9240: LD_INT 112
9242: PUSH
9243: LD_INT 113
9245: PUSH
9246: LD_INT 114
9248: PUSH
9249: LD_INT 116
9251: PUSH
9252: LD_INT 117
9254: PUSH
9255: LD_INT 118
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: ST_TO_ADDR
9281: GO 9680
9283: LD_INT 18
9285: DOUBLE
9286: EQUAL
9287: IFTRUE 9291
9289: GO 9439
9291: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9292: LD_ADDR_VAR 0 1
9296: PUSH
9297: LD_INT 2
9299: PUSH
9300: LD_INT 4
9302: PUSH
9303: LD_INT 5
9305: PUSH
9306: LD_INT 7
9308: PUSH
9309: LD_INT 11
9311: PUSH
9312: LD_INT 12
9314: PUSH
9315: LD_INT 15
9317: PUSH
9318: LD_INT 16
9320: PUSH
9321: LD_INT 20
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 22
9329: PUSH
9330: LD_INT 23
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 26
9338: PUSH
9339: LD_INT 30
9341: PUSH
9342: LD_INT 31
9344: PUSH
9345: LD_INT 32
9347: PUSH
9348: LD_INT 33
9350: PUSH
9351: LD_INT 34
9353: PUSH
9354: LD_INT 35
9356: PUSH
9357: LD_INT 36
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: PUSH
9383: LD_INT 101
9385: PUSH
9386: LD_INT 102
9388: PUSH
9389: LD_INT 103
9391: PUSH
9392: LD_INT 106
9394: PUSH
9395: LD_INT 108
9397: PUSH
9398: LD_INT 112
9400: PUSH
9401: LD_INT 113
9403: PUSH
9404: LD_INT 114
9406: PUSH
9407: LD_INT 115
9409: PUSH
9410: LD_INT 116
9412: PUSH
9413: LD_INT 117
9415: PUSH
9416: LD_INT 118
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: ST_TO_ADDR
9437: GO 9680
9439: LD_INT 19
9441: DOUBLE
9442: EQUAL
9443: IFTRUE 9447
9445: GO 9679
9447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9448: LD_ADDR_VAR 0 1
9452: PUSH
9453: LD_INT 1
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 3
9461: PUSH
9462: LD_INT 4
9464: PUSH
9465: LD_INT 5
9467: PUSH
9468: LD_INT 6
9470: PUSH
9471: LD_INT 7
9473: PUSH
9474: LD_INT 8
9476: PUSH
9477: LD_INT 9
9479: PUSH
9480: LD_INT 10
9482: PUSH
9483: LD_INT 11
9485: PUSH
9486: LD_INT 12
9488: PUSH
9489: LD_INT 13
9491: PUSH
9492: LD_INT 14
9494: PUSH
9495: LD_INT 15
9497: PUSH
9498: LD_INT 16
9500: PUSH
9501: LD_INT 17
9503: PUSH
9504: LD_INT 18
9506: PUSH
9507: LD_INT 19
9509: PUSH
9510: LD_INT 20
9512: PUSH
9513: LD_INT 21
9515: PUSH
9516: LD_INT 22
9518: PUSH
9519: LD_INT 23
9521: PUSH
9522: LD_INT 24
9524: PUSH
9525: LD_INT 25
9527: PUSH
9528: LD_INT 26
9530: PUSH
9531: LD_INT 27
9533: PUSH
9534: LD_INT 28
9536: PUSH
9537: LD_INT 29
9539: PUSH
9540: LD_INT 30
9542: PUSH
9543: LD_INT 31
9545: PUSH
9546: LD_INT 32
9548: PUSH
9549: LD_INT 33
9551: PUSH
9552: LD_INT 34
9554: PUSH
9555: LD_INT 35
9557: PUSH
9558: LD_INT 36
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 101
9601: PUSH
9602: LD_INT 102
9604: PUSH
9605: LD_INT 103
9607: PUSH
9608: LD_INT 104
9610: PUSH
9611: LD_INT 105
9613: PUSH
9614: LD_INT 106
9616: PUSH
9617: LD_INT 107
9619: PUSH
9620: LD_INT 108
9622: PUSH
9623: LD_INT 109
9625: PUSH
9626: LD_INT 110
9628: PUSH
9629: LD_INT 111
9631: PUSH
9632: LD_INT 112
9634: PUSH
9635: LD_INT 113
9637: PUSH
9638: LD_INT 114
9640: PUSH
9641: LD_INT 115
9643: PUSH
9644: LD_INT 116
9646: PUSH
9647: LD_INT 117
9649: PUSH
9650: LD_INT 118
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: ST_TO_ADDR
9677: GO 9680
9679: POP
// end else
9680: GO 9911
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9682: LD_ADDR_VAR 0 1
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 4
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: LD_INT 6
9704: PUSH
9705: LD_INT 7
9707: PUSH
9708: LD_INT 8
9710: PUSH
9711: LD_INT 9
9713: PUSH
9714: LD_INT 10
9716: PUSH
9717: LD_INT 11
9719: PUSH
9720: LD_INT 12
9722: PUSH
9723: LD_INT 13
9725: PUSH
9726: LD_INT 14
9728: PUSH
9729: LD_INT 15
9731: PUSH
9732: LD_INT 16
9734: PUSH
9735: LD_INT 17
9737: PUSH
9738: LD_INT 18
9740: PUSH
9741: LD_INT 19
9743: PUSH
9744: LD_INT 20
9746: PUSH
9747: LD_INT 21
9749: PUSH
9750: LD_INT 22
9752: PUSH
9753: LD_INT 23
9755: PUSH
9756: LD_INT 24
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 26
9764: PUSH
9765: LD_INT 27
9767: PUSH
9768: LD_INT 28
9770: PUSH
9771: LD_INT 29
9773: PUSH
9774: LD_INT 30
9776: PUSH
9777: LD_INT 31
9779: PUSH
9780: LD_INT 32
9782: PUSH
9783: LD_INT 33
9785: PUSH
9786: LD_INT 34
9788: PUSH
9789: LD_INT 35
9791: PUSH
9792: LD_INT 36
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 101
9835: PUSH
9836: LD_INT 102
9838: PUSH
9839: LD_INT 103
9841: PUSH
9842: LD_INT 104
9844: PUSH
9845: LD_INT 105
9847: PUSH
9848: LD_INT 106
9850: PUSH
9851: LD_INT 107
9853: PUSH
9854: LD_INT 108
9856: PUSH
9857: LD_INT 109
9859: PUSH
9860: LD_INT 110
9862: PUSH
9863: LD_INT 111
9865: PUSH
9866: LD_INT 112
9868: PUSH
9869: LD_INT 113
9871: PUSH
9872: LD_INT 114
9874: PUSH
9875: LD_INT 115
9877: PUSH
9878: LD_INT 116
9880: PUSH
9881: LD_INT 117
9883: PUSH
9884: LD_INT 118
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: ST_TO_ADDR
// if result then
9911: LD_VAR 0 1
9915: IFFALSE 10204
// begin normal :=  ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_STRING 
9924: ST_TO_ADDR
// hardcore :=  ;
9925: LD_ADDR_VAR 0 4
9929: PUSH
9930: LD_STRING 
9932: ST_TO_ADDR
// for i = 1 to normalCounter do
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: DOUBLE
9939: LD_INT 1
9941: DEC
9942: ST_TO_ADDR
9943: LD_EXP 27
9947: PUSH
9948: FOR_TO
9949: IFFALSE 10050
// begin tmp := 0 ;
9951: LD_ADDR_VAR 0 2
9955: PUSH
9956: LD_STRING 0
9958: ST_TO_ADDR
// if result [ 1 ] then
9959: LD_VAR 0 1
9963: PUSH
9964: LD_INT 1
9966: ARRAY
9967: IFFALSE 10032
// if result [ 1 ] [ 1 ] = i then
9969: LD_VAR 0 1
9973: PUSH
9974: LD_INT 1
9976: ARRAY
9977: PUSH
9978: LD_INT 1
9980: ARRAY
9981: PUSH
9982: LD_VAR 0 5
9986: EQUAL
9987: IFFALSE 10032
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9989: LD_ADDR_VAR 0 1
9993: PUSH
9994: LD_VAR 0 1
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: LD_VAR 0 1
10006: PUSH
10007: LD_INT 1
10009: ARRAY
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 3
10018: PPUSH
10019: CALL_OW 1
10023: ST_TO_ADDR
// tmp := 1 ;
10024: LD_ADDR_VAR 0 2
10028: PUSH
10029: LD_STRING 1
10031: ST_TO_ADDR
// end ; normal := normal & tmp ;
10032: LD_ADDR_VAR 0 3
10036: PUSH
10037: LD_VAR 0 3
10041: PUSH
10042: LD_VAR 0 2
10046: STR
10047: ST_TO_ADDR
// end ;
10048: GO 9948
10050: POP
10051: POP
// for i = 1 to hardcoreCounter do
10052: LD_ADDR_VAR 0 5
10056: PUSH
10057: DOUBLE
10058: LD_INT 1
10060: DEC
10061: ST_TO_ADDR
10062: LD_EXP 28
10066: PUSH
10067: FOR_TO
10068: IFFALSE 10173
// begin tmp := 0 ;
10070: LD_ADDR_VAR 0 2
10074: PUSH
10075: LD_STRING 0
10077: ST_TO_ADDR
// if result [ 2 ] then
10078: LD_VAR 0 1
10082: PUSH
10083: LD_INT 2
10085: ARRAY
10086: IFFALSE 10155
// if result [ 2 ] [ 1 ] = 100 + i then
10088: LD_VAR 0 1
10092: PUSH
10093: LD_INT 2
10095: ARRAY
10096: PUSH
10097: LD_INT 1
10099: ARRAY
10100: PUSH
10101: LD_INT 100
10103: PUSH
10104: LD_VAR 0 5
10108: PLUS
10109: EQUAL
10110: IFFALSE 10155
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10112: LD_ADDR_VAR 0 1
10116: PUSH
10117: LD_VAR 0 1
10121: PPUSH
10122: LD_INT 2
10124: PPUSH
10125: LD_VAR 0 1
10129: PUSH
10130: LD_INT 2
10132: ARRAY
10133: PPUSH
10134: LD_INT 1
10136: PPUSH
10137: CALL_OW 3
10141: PPUSH
10142: CALL_OW 1
10146: ST_TO_ADDR
// tmp := 1 ;
10147: LD_ADDR_VAR 0 2
10151: PUSH
10152: LD_STRING 1
10154: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10155: LD_ADDR_VAR 0 4
10159: PUSH
10160: LD_VAR 0 4
10164: PUSH
10165: LD_VAR 0 2
10169: STR
10170: ST_TO_ADDR
// end ;
10171: GO 10067
10173: POP
10174: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10175: LD_STRING getStreamItemsFromMission("
10177: PUSH
10178: LD_VAR 0 3
10182: STR
10183: PUSH
10184: LD_STRING ","
10186: STR
10187: PUSH
10188: LD_VAR 0 4
10192: STR
10193: PUSH
10194: LD_STRING ")
10196: STR
10197: PPUSH
10198: CALL_OW 559
// end else
10202: GO 10211
// ToLua ( getStreamItemsFromMission("","") ) ;
10204: LD_STRING getStreamItemsFromMission("","")
10206: PPUSH
10207: CALL_OW 559
// end ;
10211: LD_VAR 0 1
10215: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10216: LD_EXP 26
10220: PUSH
10221: LD_EXP 31
10225: AND
10226: IFFALSE 10350
10228: GO 10230
10230: DISABLE
10231: LD_INT 0
10233: PPUSH
10234: PPUSH
// begin enable ;
10235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: LD_OWVAR 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 2
10255: PUSH
10256: LD_INT 34
10258: PUSH
10259: LD_INT 7
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 34
10268: PUSH
10269: LD_INT 45
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 34
10278: PUSH
10279: LD_INT 28
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 34
10288: PUSH
10289: LD_INT 47
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: ST_TO_ADDR
// if not tmp then
10312: LD_VAR 0 2
10316: NOT
10317: IFFALSE 10321
// exit ;
10319: GO 10350
// for i in tmp do
10321: LD_ADDR_VAR 0 1
10325: PUSH
10326: LD_VAR 0 2
10330: PUSH
10331: FOR_IN
10332: IFFALSE 10348
// begin SetLives ( i , 0 ) ;
10334: LD_VAR 0 1
10338: PPUSH
10339: LD_INT 0
10341: PPUSH
10342: CALL_OW 234
// end ;
10346: GO 10331
10348: POP
10349: POP
// end ;
10350: PPOPN 2
10352: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10353: LD_EXP 26
10357: PUSH
10358: LD_EXP 32
10362: AND
10363: IFFALSE 10447
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
// begin enable ;
10372: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_OWVAR 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 32
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PPUSH
10404: CALL_OW 69
10408: ST_TO_ADDR
// if not tmp then
10409: LD_VAR 0 2
10413: NOT
10414: IFFALSE 10418
// exit ;
10416: GO 10447
// for i in tmp do
10418: LD_ADDR_VAR 0 1
10422: PUSH
10423: LD_VAR 0 2
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10445
// begin SetLives ( i , 0 ) ;
10431: LD_VAR 0 1
10435: PPUSH
10436: LD_INT 0
10438: PPUSH
10439: CALL_OW 234
// end ;
10443: GO 10428
10445: POP
10446: POP
// end ;
10447: PPOPN 2
10449: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10450: LD_EXP 26
10454: PUSH
10455: LD_EXP 29
10459: AND
10460: IFFALSE 10553
10462: GO 10464
10464: DISABLE
10465: LD_INT 0
10467: PPUSH
// begin enable ;
10468: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10469: LD_ADDR_VAR 0 1
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_OWVAR 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: LD_INT 25
10491: PUSH
10492: LD_INT 5
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 25
10501: PUSH
10502: LD_INT 9
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 25
10511: PUSH
10512: LD_INT 8
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PPUSH
10529: CALL_OW 69
10533: PUSH
10534: FOR_IN
10535: IFFALSE 10551
// begin SetClass ( i , 1 ) ;
10537: LD_VAR 0 1
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 336
// end ;
10549: GO 10534
10551: POP
10552: POP
// end ;
10553: PPOPN 1
10555: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10556: LD_EXP 26
10560: PUSH
10561: LD_EXP 30
10565: AND
10566: PUSH
10567: LD_OWVAR 65
10571: PUSH
10572: LD_INT 7
10574: LESS
10575: AND
10576: IFFALSE 10590
10578: GO 10580
10580: DISABLE
// begin enable ;
10581: ENABLE
// game_speed := 7 ;
10582: LD_ADDR_OWVAR 65
10586: PUSH
10587: LD_INT 7
10589: ST_TO_ADDR
// end ;
10590: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10591: LD_EXP 26
10595: PUSH
10596: LD_EXP 33
10600: AND
10601: IFFALSE 10803
10603: GO 10605
10605: DISABLE
10606: LD_INT 0
10608: PPUSH
10609: PPUSH
10610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: LD_INT 81
10618: PUSH
10619: LD_OWVAR 2
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 21
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: ST_TO_ADDR
// if not tmp then
10647: LD_VAR 0 3
10651: NOT
10652: IFFALSE 10656
// exit ;
10654: GO 10803
// if tmp > 5 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 5
10663: GREATER
10664: IFFALSE 10676
// k := 5 else
10666: LD_ADDR_VAR 0 2
10670: PUSH
10671: LD_INT 5
10673: ST_TO_ADDR
10674: GO 10686
// k := tmp ;
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_VAR 0 3
10685: ST_TO_ADDR
// for i := 1 to k do
10686: LD_ADDR_VAR 0 1
10690: PUSH
10691: DOUBLE
10692: LD_INT 1
10694: DEC
10695: ST_TO_ADDR
10696: LD_VAR 0 2
10700: PUSH
10701: FOR_TO
10702: IFFALSE 10801
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10704: LD_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: ARRAY
10714: PPUSH
10715: LD_VAR 0 1
10719: PUSH
10720: LD_INT 4
10722: MOD
10723: PUSH
10724: LD_INT 1
10726: PLUS
10727: PPUSH
10728: CALL_OW 259
10732: PUSH
10733: LD_INT 10
10735: LESS
10736: IFFALSE 10799
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10738: LD_VAR 0 3
10742: PUSH
10743: LD_VAR 0 1
10747: ARRAY
10748: PPUSH
10749: LD_VAR 0 1
10753: PUSH
10754: LD_INT 4
10756: MOD
10757: PUSH
10758: LD_INT 1
10760: PLUS
10761: PPUSH
10762: LD_VAR 0 3
10766: PUSH
10767: LD_VAR 0 1
10771: ARRAY
10772: PPUSH
10773: LD_VAR 0 1
10777: PUSH
10778: LD_INT 4
10780: MOD
10781: PUSH
10782: LD_INT 1
10784: PLUS
10785: PPUSH
10786: CALL_OW 259
10790: PUSH
10791: LD_INT 1
10793: PLUS
10794: PPUSH
10795: CALL_OW 237
10799: GO 10701
10801: POP
10802: POP
// end ;
10803: PPOPN 3
10805: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10806: LD_EXP 26
10810: PUSH
10811: LD_EXP 34
10815: AND
10816: IFFALSE 10836
10818: GO 10820
10820: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10821: LD_INT 4
10823: PPUSH
10824: LD_OWVAR 2
10828: PPUSH
10829: LD_INT 0
10831: PPUSH
10832: CALL_OW 324
10836: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10837: LD_EXP 26
10841: PUSH
10842: LD_EXP 63
10846: AND
10847: IFFALSE 10867
10849: GO 10851
10851: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10852: LD_INT 19
10854: PPUSH
10855: LD_OWVAR 2
10859: PPUSH
10860: LD_INT 0
10862: PPUSH
10863: CALL_OW 324
10867: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10868: LD_EXP 26
10872: PUSH
10873: LD_EXP 35
10877: AND
10878: IFFALSE 10980
10880: GO 10882
10882: DISABLE
10883: LD_INT 0
10885: PPUSH
10886: PPUSH
// begin enable ;
10887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10888: LD_ADDR_VAR 0 2
10892: PUSH
10893: LD_INT 22
10895: PUSH
10896: LD_OWVAR 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: LD_INT 34
10910: PUSH
10911: LD_INT 11
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 34
10920: PUSH
10921: LD_INT 30
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: ST_TO_ADDR
// if not tmp then
10942: LD_VAR 0 2
10946: NOT
10947: IFFALSE 10951
// exit ;
10949: GO 10980
// for i in tmp do
10951: LD_ADDR_VAR 0 1
10955: PUSH
10956: LD_VAR 0 2
10960: PUSH
10961: FOR_IN
10962: IFFALSE 10978
// begin SetLives ( i , 0 ) ;
10964: LD_VAR 0 1
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 234
// end ;
10976: GO 10961
10978: POP
10979: POP
// end ;
10980: PPOPN 2
10982: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10983: LD_EXP 26
10987: PUSH
10988: LD_EXP 36
10992: AND
10993: IFFALSE 11013
10995: GO 10997
10997: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10998: LD_INT 32
11000: PPUSH
11001: LD_OWVAR 2
11005: PPUSH
11006: LD_INT 0
11008: PPUSH
11009: CALL_OW 324
11013: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11014: LD_EXP 26
11018: PUSH
11019: LD_EXP 37
11023: AND
11024: IFFALSE 11205
11026: GO 11028
11028: DISABLE
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_INT 22
11041: PUSH
11042: LD_OWVAR 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 33
11053: PUSH
11054: LD_INT 3
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 69
11069: ST_TO_ADDR
// if not tmp then
11070: LD_VAR 0 2
11074: NOT
11075: IFFALSE 11079
// exit ;
11077: GO 11205
// side := 0 ;
11079: LD_ADDR_VAR 0 3
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// for i := 1 to 8 do
11087: LD_ADDR_VAR 0 1
11091: PUSH
11092: DOUBLE
11093: LD_INT 1
11095: DEC
11096: ST_TO_ADDR
11097: LD_INT 8
11099: PUSH
11100: FOR_TO
11101: IFFALSE 11149
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11103: LD_OWVAR 2
11107: PUSH
11108: LD_VAR 0 1
11112: NONEQUAL
11113: PUSH
11114: LD_OWVAR 2
11118: PPUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 81
11128: PUSH
11129: LD_INT 2
11131: EQUAL
11132: AND
11133: IFFALSE 11147
// begin side := i ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_VAR 0 1
11144: ST_TO_ADDR
// break ;
11145: GO 11149
// end ;
11147: GO 11100
11149: POP
11150: POP
// if not side then
11151: LD_VAR 0 3
11155: NOT
11156: IFFALSE 11160
// exit ;
11158: GO 11205
// for i := 1 to tmp do
11160: LD_ADDR_VAR 0 1
11164: PUSH
11165: DOUBLE
11166: LD_INT 1
11168: DEC
11169: ST_TO_ADDR
11170: LD_VAR 0 2
11174: PUSH
11175: FOR_TO
11176: IFFALSE 11203
// if Prob ( 60 ) then
11178: LD_INT 60
11180: PPUSH
11181: CALL_OW 13
11185: IFFALSE 11201
// SetSide ( i , side ) ;
11187: LD_VAR 0 1
11191: PPUSH
11192: LD_VAR 0 3
11196: PPUSH
11197: CALL_OW 235
11201: GO 11175
11203: POP
11204: POP
// end ;
11205: PPOPN 3
11207: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11208: LD_EXP 26
11212: PUSH
11213: LD_EXP 39
11217: AND
11218: IFFALSE 11337
11220: GO 11222
11222: DISABLE
11223: LD_INT 0
11225: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11226: LD_ADDR_VAR 0 1
11230: PUSH
11231: LD_INT 22
11233: PUSH
11234: LD_OWVAR 2
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 21
11245: PUSH
11246: LD_INT 1
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 3
11255: PUSH
11256: LD_INT 23
11258: PUSH
11259: LD_INT 0
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: PPUSH
11275: CALL_OW 69
11279: PUSH
11280: FOR_IN
11281: IFFALSE 11335
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11283: LD_VAR 0 1
11287: PPUSH
11288: CALL_OW 257
11292: PUSH
11293: LD_INT 1
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: LD_INT 4
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: IN
11311: IFFALSE 11333
// SetClass ( un , rand ( 1 , 4 ) ) ;
11313: LD_VAR 0 1
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: LD_INT 4
11323: PPUSH
11324: CALL_OW 12
11328: PPUSH
11329: CALL_OW 336
11333: GO 11280
11335: POP
11336: POP
// end ;
11337: PPOPN 1
11339: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11340: LD_EXP 26
11344: PUSH
11345: LD_EXP 38
11349: AND
11350: IFFALSE 11429
11352: GO 11354
11354: DISABLE
11355: LD_INT 0
11357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_OWVAR 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 3
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: ST_TO_ADDR
// if not tmp then
11394: LD_VAR 0 1
11398: NOT
11399: IFFALSE 11403
// exit ;
11401: GO 11429
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11403: LD_VAR 0 1
11407: PUSH
11408: LD_INT 1
11410: PPUSH
11411: LD_VAR 0 1
11415: PPUSH
11416: CALL_OW 12
11420: ARRAY
11421: PPUSH
11422: LD_INT 100
11424: PPUSH
11425: CALL_OW 234
// end ;
11429: PPOPN 1
11431: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11432: LD_EXP 26
11436: PUSH
11437: LD_EXP 40
11441: AND
11442: IFFALSE 11540
11444: GO 11446
11446: DISABLE
11447: LD_INT 0
11449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11450: LD_ADDR_VAR 0 1
11454: PUSH
11455: LD_INT 22
11457: PUSH
11458: LD_OWVAR 2
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 21
11469: PUSH
11470: LD_INT 1
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: ST_TO_ADDR
// if not tmp then
11486: LD_VAR 0 1
11490: NOT
11491: IFFALSE 11495
// exit ;
11493: GO 11540
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11495: LD_VAR 0 1
11499: PUSH
11500: LD_INT 1
11502: PPUSH
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 12
11512: ARRAY
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: LD_INT 4
11519: PPUSH
11520: CALL_OW 12
11524: PPUSH
11525: LD_INT 3000
11527: PPUSH
11528: LD_INT 9000
11530: PPUSH
11531: CALL_OW 12
11535: PPUSH
11536: CALL_OW 492
// end ;
11540: PPOPN 1
11542: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11543: LD_EXP 26
11547: PUSH
11548: LD_EXP 41
11552: AND
11553: IFFALSE 11573
11555: GO 11557
11557: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11558: LD_INT 1
11560: PPUSH
11561: LD_OWVAR 2
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 324
11573: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11574: LD_EXP 26
11578: PUSH
11579: LD_EXP 42
11583: AND
11584: IFFALSE 11667
11586: GO 11588
11588: DISABLE
11589: LD_INT 0
11591: PPUSH
11592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11593: LD_ADDR_VAR 0 2
11597: PUSH
11598: LD_INT 22
11600: PUSH
11601: LD_OWVAR 2
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 3
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 69
11628: ST_TO_ADDR
// if not tmp then
11629: LD_VAR 0 2
11633: NOT
11634: IFFALSE 11638
// exit ;
11636: GO 11667
// for i in tmp do
11638: LD_ADDR_VAR 0 1
11642: PUSH
11643: LD_VAR 0 2
11647: PUSH
11648: FOR_IN
11649: IFFALSE 11665
// SetBLevel ( i , 10 ) ;
11651: LD_VAR 0 1
11655: PPUSH
11656: LD_INT 10
11658: PPUSH
11659: CALL_OW 241
11663: GO 11648
11665: POP
11666: POP
// end ;
11667: PPOPN 2
11669: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11670: LD_EXP 26
11674: PUSH
11675: LD_EXP 43
11679: AND
11680: IFFALSE 11791
11682: GO 11684
11684: DISABLE
11685: LD_INT 0
11687: PPUSH
11688: PPUSH
11689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11690: LD_ADDR_VAR 0 3
11694: PUSH
11695: LD_INT 22
11697: PUSH
11698: LD_OWVAR 2
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 25
11709: PUSH
11710: LD_INT 1
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PPUSH
11721: CALL_OW 69
11725: ST_TO_ADDR
// if not tmp then
11726: LD_VAR 0 3
11730: NOT
11731: IFFALSE 11735
// exit ;
11733: GO 11791
// un := tmp [ rand ( 1 , tmp ) ] ;
11735: LD_ADDR_VAR 0 2
11739: PUSH
11740: LD_VAR 0 3
11744: PUSH
11745: LD_INT 1
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: CALL_OW 12
11757: ARRAY
11758: ST_TO_ADDR
// if Crawls ( un ) then
11759: LD_VAR 0 2
11763: PPUSH
11764: CALL_OW 318
11768: IFFALSE 11779
// ComWalk ( un ) ;
11770: LD_VAR 0 2
11774: PPUSH
11775: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11779: LD_VAR 0 2
11783: PPUSH
11784: LD_INT 5
11786: PPUSH
11787: CALL_OW 336
// end ;
11791: PPOPN 3
11793: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11794: LD_EXP 26
11798: PUSH
11799: LD_EXP 44
11803: AND
11804: PUSH
11805: LD_OWVAR 67
11809: PUSH
11810: LD_INT 4
11812: LESS
11813: AND
11814: IFFALSE 11833
11816: GO 11818
11818: DISABLE
// begin Difficulty := Difficulty + 1 ;
11819: LD_ADDR_OWVAR 67
11823: PUSH
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: PLUS
11832: ST_TO_ADDR
// end ;
11833: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11834: LD_EXP 26
11838: PUSH
11839: LD_EXP 45
11843: AND
11844: IFFALSE 11947
11846: GO 11848
11848: DISABLE
11849: LD_INT 0
11851: PPUSH
// begin for i := 1 to 5 do
11852: LD_ADDR_VAR 0 1
11856: PUSH
11857: DOUBLE
11858: LD_INT 1
11860: DEC
11861: ST_TO_ADDR
11862: LD_INT 5
11864: PUSH
11865: FOR_TO
11866: IFFALSE 11945
// begin uc_nation := nation_nature ;
11868: LD_ADDR_OWVAR 21
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// uc_side := 0 ;
11876: LD_ADDR_OWVAR 20
11880: PUSH
11881: LD_INT 0
11883: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11884: LD_ADDR_OWVAR 29
11888: PUSH
11889: LD_INT 12
11891: PUSH
11892: LD_INT 12
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: ST_TO_ADDR
// hc_agressivity := 20 ;
11899: LD_ADDR_OWVAR 35
11903: PUSH
11904: LD_INT 20
11906: ST_TO_ADDR
// hc_class := class_tiger ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 14
11914: ST_TO_ADDR
// hc_gallery :=  ;
11915: LD_ADDR_OWVAR 33
11919: PUSH
11920: LD_STRING 
11922: ST_TO_ADDR
// hc_name :=  ;
11923: LD_ADDR_OWVAR 26
11927: PUSH
11928: LD_STRING 
11930: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11931: CALL_OW 44
11935: PPUSH
11936: LD_INT 0
11938: PPUSH
11939: CALL_OW 51
// end ;
11943: GO 11865
11945: POP
11946: POP
// end ;
11947: PPOPN 1
11949: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11950: LD_EXP 26
11954: PUSH
11955: LD_EXP 46
11959: AND
11960: IFFALSE 11969
11962: GO 11964
11964: DISABLE
// StreamSibBomb ;
11965: CALL 11970 0 0
11969: END
// export function StreamSibBomb ; var i , x , y ; begin
11970: LD_INT 0
11972: PPUSH
11973: PPUSH
11974: PPUSH
11975: PPUSH
// result := false ;
11976: LD_ADDR_VAR 0 1
11980: PUSH
11981: LD_INT 0
11983: ST_TO_ADDR
// for i := 1 to 16 do
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: DOUBLE
11990: LD_INT 1
11992: DEC
11993: ST_TO_ADDR
11994: LD_INT 16
11996: PUSH
11997: FOR_TO
11998: IFFALSE 12197
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12000: LD_ADDR_VAR 0 3
12004: PUSH
12005: LD_INT 10
12007: PUSH
12008: LD_INT 20
12010: PUSH
12011: LD_INT 30
12013: PUSH
12014: LD_INT 40
12016: PUSH
12017: LD_INT 50
12019: PUSH
12020: LD_INT 60
12022: PUSH
12023: LD_INT 70
12025: PUSH
12026: LD_INT 80
12028: PUSH
12029: LD_INT 90
12031: PUSH
12032: LD_INT 100
12034: PUSH
12035: LD_INT 110
12037: PUSH
12038: LD_INT 120
12040: PUSH
12041: LD_INT 130
12043: PUSH
12044: LD_INT 140
12046: PUSH
12047: LD_INT 150
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 1
12069: PPUSH
12070: LD_INT 15
12072: PPUSH
12073: CALL_OW 12
12077: ARRAY
12078: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12079: LD_ADDR_VAR 0 4
12083: PUSH
12084: LD_INT 10
12086: PUSH
12087: LD_INT 20
12089: PUSH
12090: LD_INT 30
12092: PUSH
12093: LD_INT 40
12095: PUSH
12096: LD_INT 50
12098: PUSH
12099: LD_INT 60
12101: PUSH
12102: LD_INT 70
12104: PUSH
12105: LD_INT 80
12107: PUSH
12108: LD_INT 90
12110: PUSH
12111: LD_INT 100
12113: PUSH
12114: LD_INT 110
12116: PUSH
12117: LD_INT 120
12119: PUSH
12120: LD_INT 130
12122: PUSH
12123: LD_INT 140
12125: PUSH
12126: LD_INT 150
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 15
12151: PPUSH
12152: CALL_OW 12
12156: ARRAY
12157: ST_TO_ADDR
// if ValidHex ( x , y ) then
12158: LD_VAR 0 3
12162: PPUSH
12163: LD_VAR 0 4
12167: PPUSH
12168: CALL_OW 488
12172: IFFALSE 12195
// begin result := [ x , y ] ;
12174: LD_ADDR_VAR 0 1
12178: PUSH
12179: LD_VAR 0 3
12183: PUSH
12184: LD_VAR 0 4
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// break ;
12193: GO 12197
// end ; end ;
12195: GO 11997
12197: POP
12198: POP
// if result then
12199: LD_VAR 0 1
12203: IFFALSE 12263
// begin ToLua ( playSibBomb() ) ;
12205: LD_STRING playSibBomb()
12207: PPUSH
12208: CALL_OW 559
// wait ( 0 0$14 ) ;
12212: LD_INT 490
12214: PPUSH
12215: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12219: LD_VAR 0 1
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 2
12235: ARRAY
12236: PPUSH
12237: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12241: LD_VAR 0 1
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: LD_VAR 0 1
12254: PUSH
12255: LD_INT 2
12257: ARRAY
12258: PPUSH
12259: CALL_OW 429
// end ; end ;
12263: LD_VAR 0 1
12267: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12268: LD_EXP 26
12272: PUSH
12273: LD_EXP 48
12277: AND
12278: IFFALSE 12290
12280: GO 12282
12282: DISABLE
// YouLost (  ) ;
12283: LD_STRING 
12285: PPUSH
12286: CALL_OW 104
12290: END
// every 0 0$1 trigger StreamModeActive and sFog do
12291: LD_EXP 26
12295: PUSH
12296: LD_EXP 47
12300: AND
12301: IFFALSE 12315
12303: GO 12305
12305: DISABLE
// FogOff ( your_side ) ;
12306: LD_OWVAR 2
12310: PPUSH
12311: CALL_OW 344
12315: END
// every 0 0$1 trigger StreamModeActive and sSun do
12316: LD_EXP 26
12320: PUSH
12321: LD_EXP 49
12325: AND
12326: IFFALSE 12354
12328: GO 12330
12330: DISABLE
// begin solar_recharge_percent := 0 ;
12331: LD_ADDR_OWVAR 79
12335: PUSH
12336: LD_INT 0
12338: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12339: LD_INT 10500
12341: PPUSH
12342: CALL_OW 67
// solar_recharge_percent := 100 ;
12346: LD_ADDR_OWVAR 79
12350: PUSH
12351: LD_INT 100
12353: ST_TO_ADDR
// end ;
12354: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12355: LD_EXP 26
12359: PUSH
12360: LD_EXP 50
12364: AND
12365: IFFALSE 12604
12367: GO 12369
12369: DISABLE
12370: LD_INT 0
12372: PPUSH
12373: PPUSH
12374: PPUSH
// begin tmp := [ ] ;
12375: LD_ADDR_VAR 0 3
12379: PUSH
12380: EMPTY
12381: ST_TO_ADDR
// for i := 1 to 6 do
12382: LD_ADDR_VAR 0 1
12386: PUSH
12387: DOUBLE
12388: LD_INT 1
12390: DEC
12391: ST_TO_ADDR
12392: LD_INT 6
12394: PUSH
12395: FOR_TO
12396: IFFALSE 12501
// begin uc_nation := nation_nature ;
12398: LD_ADDR_OWVAR 21
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// uc_side := 0 ;
12406: LD_ADDR_OWVAR 20
12410: PUSH
12411: LD_INT 0
12413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12414: LD_ADDR_OWVAR 29
12418: PUSH
12419: LD_INT 12
12421: PUSH
12422: LD_INT 12
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: ST_TO_ADDR
// hc_agressivity := 20 ;
12429: LD_ADDR_OWVAR 35
12433: PUSH
12434: LD_INT 20
12436: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12437: LD_ADDR_OWVAR 28
12441: PUSH
12442: LD_INT 17
12444: ST_TO_ADDR
// hc_gallery :=  ;
12445: LD_ADDR_OWVAR 33
12449: PUSH
12450: LD_STRING 
12452: ST_TO_ADDR
// hc_name :=  ;
12453: LD_ADDR_OWVAR 26
12457: PUSH
12458: LD_STRING 
12460: ST_TO_ADDR
// un := CreateHuman ;
12461: LD_ADDR_VAR 0 2
12465: PUSH
12466: CALL_OW 44
12470: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12471: LD_VAR 0 2
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 51
// tmp := tmp ^ un ;
12483: LD_ADDR_VAR 0 3
12487: PUSH
12488: LD_VAR 0 3
12492: PUSH
12493: LD_VAR 0 2
12497: ADD
12498: ST_TO_ADDR
// end ;
12499: GO 12395
12501: POP
12502: POP
// repeat wait ( 0 0$1 ) ;
12503: LD_INT 35
12505: PPUSH
12506: CALL_OW 67
// for un in tmp do
12510: LD_ADDR_VAR 0 2
12514: PUSH
12515: LD_VAR 0 3
12519: PUSH
12520: FOR_IN
12521: IFFALSE 12595
// begin if IsDead ( un ) then
12523: LD_VAR 0 2
12527: PPUSH
12528: CALL_OW 301
12532: IFFALSE 12552
// begin tmp := tmp diff un ;
12534: LD_ADDR_VAR 0 3
12538: PUSH
12539: LD_VAR 0 3
12543: PUSH
12544: LD_VAR 0 2
12548: DIFF
12549: ST_TO_ADDR
// continue ;
12550: GO 12520
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12552: LD_VAR 0 2
12556: PPUSH
12557: LD_INT 3
12559: PUSH
12560: LD_INT 22
12562: PUSH
12563: LD_INT 0
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PPUSH
12574: CALL_OW 69
12578: PPUSH
12579: LD_VAR 0 2
12583: PPUSH
12584: CALL_OW 74
12588: PPUSH
12589: CALL_OW 115
// end ;
12593: GO 12520
12595: POP
12596: POP
// until not tmp ;
12597: LD_VAR 0 3
12601: NOT
12602: IFFALSE 12503
// end ;
12604: PPOPN 3
12606: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12607: LD_EXP 26
12611: PUSH
12612: LD_EXP 51
12616: AND
12617: IFFALSE 12671
12619: GO 12621
12621: DISABLE
// begin ToLua ( displayTroll(); ) ;
12622: LD_STRING displayTroll();
12624: PPUSH
12625: CALL_OW 559
// wait ( 3 3$00 ) ;
12629: LD_INT 6300
12631: PPUSH
12632: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12636: LD_STRING hideTroll();
12638: PPUSH
12639: CALL_OW 559
// wait ( 1 1$00 ) ;
12643: LD_INT 2100
12645: PPUSH
12646: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12650: LD_STRING displayTroll();
12652: PPUSH
12653: CALL_OW 559
// wait ( 1 1$00 ) ;
12657: LD_INT 2100
12659: PPUSH
12660: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12664: LD_STRING hideTroll();
12666: PPUSH
12667: CALL_OW 559
// end ;
12671: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12672: LD_EXP 26
12676: PUSH
12677: LD_EXP 52
12681: AND
12682: IFFALSE 12745
12684: GO 12686
12686: DISABLE
12687: LD_INT 0
12689: PPUSH
// begin p := 0 ;
12690: LD_ADDR_VAR 0 1
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// repeat game_speed := 1 ;
12698: LD_ADDR_OWVAR 65
12702: PUSH
12703: LD_INT 1
12705: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12706: LD_INT 35
12708: PPUSH
12709: CALL_OW 67
// p := p + 1 ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_VAR 0 1
12722: PUSH
12723: LD_INT 1
12725: PLUS
12726: ST_TO_ADDR
// until p >= 60 ;
12727: LD_VAR 0 1
12731: PUSH
12732: LD_INT 60
12734: GREATEREQUAL
12735: IFFALSE 12698
// game_speed := 4 ;
12737: LD_ADDR_OWVAR 65
12741: PUSH
12742: LD_INT 4
12744: ST_TO_ADDR
// end ;
12745: PPOPN 1
12747: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12748: LD_EXP 26
12752: PUSH
12753: LD_EXP 53
12757: AND
12758: IFFALSE 12904
12760: GO 12762
12762: DISABLE
12763: LD_INT 0
12765: PPUSH
12766: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12767: LD_ADDR_VAR 0 1
12771: PUSH
12772: LD_INT 22
12774: PUSH
12775: LD_OWVAR 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 30
12789: PUSH
12790: LD_INT 0
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 30
12799: PUSH
12800: LD_INT 1
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: ST_TO_ADDR
// if not depot then
12821: LD_VAR 0 1
12825: NOT
12826: IFFALSE 12830
// exit ;
12828: GO 12904
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_VAR 0 1
12839: PUSH
12840: LD_INT 1
12842: PPUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 12
12852: ARRAY
12853: PPUSH
12854: CALL_OW 274
12858: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12859: LD_VAR 0 2
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: LD_INT 0
12869: PPUSH
12870: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12874: LD_VAR 0 2
12878: PPUSH
12879: LD_INT 2
12881: PPUSH
12882: LD_INT 0
12884: PPUSH
12885: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12889: LD_VAR 0 2
12893: PPUSH
12894: LD_INT 3
12896: PPUSH
12897: LD_INT 0
12899: PPUSH
12900: CALL_OW 277
// end ;
12904: PPOPN 2
12906: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12907: LD_EXP 26
12911: PUSH
12912: LD_EXP 54
12916: AND
12917: IFFALSE 13014
12919: GO 12921
12921: DISABLE
12922: LD_INT 0
12924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12925: LD_ADDR_VAR 0 1
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_OWVAR 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 3
12954: PUSH
12955: LD_INT 23
12957: PUSH
12958: LD_INT 0
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: PPUSH
12974: CALL_OW 69
12978: ST_TO_ADDR
// if not tmp then
12979: LD_VAR 0 1
12983: NOT
12984: IFFALSE 12988
// exit ;
12986: GO 13014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 1
12995: PPUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 12
13005: ARRAY
13006: PPUSH
13007: LD_INT 200
13009: PPUSH
13010: CALL_OW 234
// end ;
13014: PPOPN 1
13016: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13017: LD_EXP 26
13021: PUSH
13022: LD_EXP 55
13026: AND
13027: IFFALSE 13106
13029: GO 13031
13031: DISABLE
13032: LD_INT 0
13034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13035: LD_ADDR_VAR 0 1
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_OWVAR 2
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 21
13054: PUSH
13055: LD_INT 2
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PPUSH
13066: CALL_OW 69
13070: ST_TO_ADDR
// if not tmp then
13071: LD_VAR 0 1
13075: NOT
13076: IFFALSE 13080
// exit ;
13078: GO 13106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13080: LD_VAR 0 1
13084: PUSH
13085: LD_INT 1
13087: PPUSH
13088: LD_VAR 0 1
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: PPUSH
13099: LD_INT 60
13101: PPUSH
13102: CALL_OW 234
// end ;
13106: PPOPN 1
13108: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13109: LD_EXP 26
13113: PUSH
13114: LD_EXP 56
13118: AND
13119: IFFALSE 13218
13121: GO 13123
13123: DISABLE
13124: LD_INT 0
13126: PPUSH
13127: PPUSH
// begin enable ;
13128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13129: LD_ADDR_VAR 0 1
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_OWVAR 2
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 61
13148: PUSH
13149: EMPTY
13150: LIST
13151: PUSH
13152: LD_INT 33
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PPUSH
13167: CALL_OW 69
13171: ST_TO_ADDR
// if not tmp then
13172: LD_VAR 0 1
13176: NOT
13177: IFFALSE 13181
// exit ;
13179: GO 13218
// for i in tmp do
13181: LD_ADDR_VAR 0 2
13185: PUSH
13186: LD_VAR 0 1
13190: PUSH
13191: FOR_IN
13192: IFFALSE 13216
// if IsControledBy ( i ) then
13194: LD_VAR 0 2
13198: PPUSH
13199: CALL_OW 312
13203: IFFALSE 13214
// ComUnlink ( i ) ;
13205: LD_VAR 0 2
13209: PPUSH
13210: CALL_OW 136
13214: GO 13191
13216: POP
13217: POP
// end ;
13218: PPOPN 2
13220: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13221: LD_EXP 26
13225: PUSH
13226: LD_EXP 57
13230: AND
13231: IFFALSE 13371
13233: GO 13235
13235: DISABLE
13236: LD_INT 0
13238: PPUSH
13239: PPUSH
// begin ToLua ( displayPowell(); ) ;
13240: LD_STRING displayPowell();
13242: PPUSH
13243: CALL_OW 559
// uc_side := 0 ;
13247: LD_ADDR_OWVAR 20
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// uc_nation := 2 ;
13255: LD_ADDR_OWVAR 21
13259: PUSH
13260: LD_INT 2
13262: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13263: LD_ADDR_OWVAR 37
13267: PUSH
13268: LD_INT 14
13270: ST_TO_ADDR
// vc_engine := engine_siberite ;
13271: LD_ADDR_OWVAR 39
13275: PUSH
13276: LD_INT 3
13278: ST_TO_ADDR
// vc_control := control_apeman ;
13279: LD_ADDR_OWVAR 38
13283: PUSH
13284: LD_INT 5
13286: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13287: LD_ADDR_OWVAR 40
13291: PUSH
13292: LD_INT 29
13294: ST_TO_ADDR
// un := CreateVehicle ;
13295: LD_ADDR_VAR 0 2
13299: PUSH
13300: CALL_OW 45
13304: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13305: LD_VAR 0 2
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13317: LD_INT 35
13319: PPUSH
13320: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13324: LD_VAR 0 2
13328: PPUSH
13329: LD_INT 22
13331: PUSH
13332: LD_OWVAR 2
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PPUSH
13341: CALL_OW 69
13345: PPUSH
13346: LD_VAR 0 2
13350: PPUSH
13351: CALL_OW 74
13355: PPUSH
13356: CALL_OW 115
// until IsDead ( un ) ;
13360: LD_VAR 0 2
13364: PPUSH
13365: CALL_OW 301
13369: IFFALSE 13317
// end ;
13371: PPOPN 2
13373: END
// every 0 0$1 trigger StreamModeActive and sStu do
13374: LD_EXP 26
13378: PUSH
13379: LD_EXP 65
13383: AND
13384: IFFALSE 13400
13386: GO 13388
13388: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13389: LD_STRING displayStucuk();
13391: PPUSH
13392: CALL_OW 559
// ResetFog ;
13396: CALL_OW 335
// end ;
13400: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13401: LD_EXP 26
13405: PUSH
13406: LD_EXP 58
13410: AND
13411: IFFALSE 13552
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
13419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13420: LD_ADDR_VAR 0 2
13424: PUSH
13425: LD_INT 22
13427: PUSH
13428: LD_OWVAR 2
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: ST_TO_ADDR
// if not tmp then
13456: LD_VAR 0 2
13460: NOT
13461: IFFALSE 13465
// exit ;
13463: GO 13552
// un := tmp [ rand ( 1 , tmp ) ] ;
13465: LD_ADDR_VAR 0 1
13469: PUSH
13470: LD_VAR 0 2
13474: PUSH
13475: LD_INT 1
13477: PPUSH
13478: LD_VAR 0 2
13482: PPUSH
13483: CALL_OW 12
13487: ARRAY
13488: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_INT 0
13496: PPUSH
13497: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_OWVAR 3
13510: PUSH
13511: LD_VAR 0 1
13515: DIFF
13516: PPUSH
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 74
13526: PPUSH
13527: CALL_OW 115
// wait ( 0 0$20 ) ;
13531: LD_INT 700
13533: PPUSH
13534: CALL_OW 67
// SetSide ( un , your_side ) ;
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_OWVAR 2
13547: PPUSH
13548: CALL_OW 235
// end ;
13552: PPOPN 2
13554: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13555: LD_EXP 26
13559: PUSH
13560: LD_EXP 59
13564: AND
13565: IFFALSE 13671
13567: GO 13569
13569: DISABLE
13570: LD_INT 0
13572: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13573: LD_ADDR_VAR 0 1
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_OWVAR 2
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 30
13595: PUSH
13596: LD_INT 0
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 30
13605: PUSH
13606: LD_INT 1
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: ST_TO_ADDR
// if not depot then
13627: LD_VAR 0 1
13631: NOT
13632: IFFALSE 13636
// exit ;
13634: GO 13671
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13636: LD_VAR 0 1
13640: PUSH
13641: LD_INT 1
13643: ARRAY
13644: PPUSH
13645: CALL_OW 250
13649: PPUSH
13650: LD_VAR 0 1
13654: PUSH
13655: LD_INT 1
13657: ARRAY
13658: PPUSH
13659: CALL_OW 251
13663: PPUSH
13664: LD_INT 70
13666: PPUSH
13667: CALL_OW 495
// end ;
13671: PPOPN 1
13673: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13674: LD_EXP 26
13678: PUSH
13679: LD_EXP 60
13683: AND
13684: IFFALSE 13895
13686: GO 13688
13688: DISABLE
13689: LD_INT 0
13691: PPUSH
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13696: LD_ADDR_VAR 0 5
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_OWVAR 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 21
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 5
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13895
// for i in tmp do
13741: LD_ADDR_VAR 0 1
13745: PUSH
13746: LD_VAR 0 5
13750: PUSH
13751: FOR_IN
13752: IFFALSE 13893
// begin d := rand ( 0 , 5 ) ;
13754: LD_ADDR_VAR 0 4
13758: PUSH
13759: LD_INT 0
13761: PPUSH
13762: LD_INT 5
13764: PPUSH
13765: CALL_OW 12
13769: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_VAR 0 1
13779: PPUSH
13780: CALL_OW 250
13784: PPUSH
13785: LD_VAR 0 4
13789: PPUSH
13790: LD_INT 3
13792: PPUSH
13793: LD_INT 12
13795: PPUSH
13796: CALL_OW 12
13800: PPUSH
13801: CALL_OW 272
13805: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13806: LD_ADDR_VAR 0 3
13810: PUSH
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 251
13820: PPUSH
13821: LD_VAR 0 4
13825: PPUSH
13826: LD_INT 3
13828: PPUSH
13829: LD_INT 12
13831: PPUSH
13832: CALL_OW 12
13836: PPUSH
13837: CALL_OW 273
13841: ST_TO_ADDR
// if ValidHex ( x , y ) then
13842: LD_VAR 0 2
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: CALL_OW 488
13856: IFFALSE 13891
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13858: LD_VAR 0 1
13862: PPUSH
13863: LD_VAR 0 2
13867: PPUSH
13868: LD_VAR 0 3
13872: PPUSH
13873: LD_INT 3
13875: PPUSH
13876: LD_INT 6
13878: PPUSH
13879: CALL_OW 12
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: CALL_OW 483
// end ;
13891: GO 13751
13893: POP
13894: POP
// end ;
13895: PPOPN 5
13897: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13898: LD_EXP 26
13902: PUSH
13903: LD_EXP 61
13907: AND
13908: IFFALSE 14002
13910: GO 13912
13912: DISABLE
13913: LD_INT 0
13915: PPUSH
13916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13917: LD_ADDR_VAR 0 2
13921: PUSH
13922: LD_INT 22
13924: PUSH
13925: LD_OWVAR 2
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 32
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 21
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: ST_TO_ADDR
// if not tmp then
13964: LD_VAR 0 2
13968: NOT
13969: IFFALSE 13973
// exit ;
13971: GO 14002
// for i in tmp do
13973: LD_ADDR_VAR 0 1
13977: PUSH
13978: LD_VAR 0 2
13982: PUSH
13983: FOR_IN
13984: IFFALSE 14000
// SetFuel ( i , 0 ) ;
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_INT 0
13993: PPUSH
13994: CALL_OW 240
13998: GO 13983
14000: POP
14001: POP
// end ;
14002: PPOPN 2
14004: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14005: LD_EXP 26
14009: PUSH
14010: LD_EXP 62
14014: AND
14015: IFFALSE 14081
14017: GO 14019
14019: DISABLE
14020: LD_INT 0
14022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14023: LD_ADDR_VAR 0 1
14027: PUSH
14028: LD_INT 22
14030: PUSH
14031: LD_OWVAR 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 30
14042: PUSH
14043: LD_INT 29
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: ST_TO_ADDR
// if not tmp then
14059: LD_VAR 0 1
14063: NOT
14064: IFFALSE 14068
// exit ;
14066: GO 14081
// DestroyUnit ( tmp [ 1 ] ) ;
14068: LD_VAR 0 1
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PPUSH
14077: CALL_OW 65
// end ;
14081: PPOPN 1
14083: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14084: LD_EXP 26
14088: PUSH
14089: LD_EXP 64
14093: AND
14094: IFFALSE 14223
14096: GO 14098
14098: DISABLE
14099: LD_INT 0
14101: PPUSH
// begin uc_side := 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation := nation_arabian ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 2
14117: ST_TO_ADDR
// hc_gallery :=  ;
14118: LD_ADDR_OWVAR 33
14122: PUSH
14123: LD_STRING 
14125: ST_TO_ADDR
// hc_name :=  ;
14126: LD_ADDR_OWVAR 26
14130: PUSH
14131: LD_STRING 
14133: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14134: LD_INT 1
14136: PPUSH
14137: LD_INT 11
14139: PPUSH
14140: LD_INT 10
14142: PPUSH
14143: CALL_OW 380
// un := CreateHuman ;
14147: LD_ADDR_VAR 0 1
14151: PUSH
14152: CALL_OW 44
14156: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14157: LD_VAR 0 1
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14169: LD_INT 35
14171: PPUSH
14172: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14176: LD_VAR 0 1
14180: PPUSH
14181: LD_INT 22
14183: PUSH
14184: LD_OWVAR 2
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PPUSH
14193: CALL_OW 69
14197: PPUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 74
14207: PPUSH
14208: CALL_OW 115
// until IsDead ( un ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 301
14221: IFFALSE 14169
// end ;
14223: PPOPN 1
14225: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14226: LD_EXP 26
14230: PUSH
14231: LD_EXP 66
14235: AND
14236: IFFALSE 14248
14238: GO 14240
14240: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14241: LD_STRING earthquake(getX(game), 0, 32)
14243: PPUSH
14244: CALL_OW 559
14248: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14249: LD_EXP 26
14253: PUSH
14254: LD_EXP 67
14258: AND
14259: IFFALSE 14350
14261: GO 14263
14263: DISABLE
14264: LD_INT 0
14266: PPUSH
// begin enable ;
14267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14268: LD_ADDR_VAR 0 1
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_OWVAR 2
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 2
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 33
14297: PUSH
14298: LD_INT 3
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: ST_TO_ADDR
// if not tmp then
14315: LD_VAR 0 1
14319: NOT
14320: IFFALSE 14324
// exit ;
14322: GO 14350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14324: LD_VAR 0 1
14328: PUSH
14329: LD_INT 1
14331: PPUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 12
14341: ARRAY
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 234
// end ;
14350: PPOPN 1
14352: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14353: LD_EXP 26
14357: PUSH
14358: LD_EXP 68
14362: AND
14363: IFFALSE 14504
14365: GO 14367
14367: DISABLE
14368: LD_INT 0
14370: PPUSH
14371: PPUSH
14372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14373: LD_ADDR_VAR 0 3
14377: PUSH
14378: LD_INT 22
14380: PUSH
14381: LD_OWVAR 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 25
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: ST_TO_ADDR
// if not tmp then
14409: LD_VAR 0 3
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14504
// un := tmp [ rand ( 1 , tmp ) ] ;
14418: LD_ADDR_VAR 0 2
14422: PUSH
14423: LD_VAR 0 3
14427: PUSH
14428: LD_INT 1
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL_OW 12
14440: ARRAY
14441: ST_TO_ADDR
// if Crawls ( un ) then
14442: LD_VAR 0 2
14446: PPUSH
14447: CALL_OW 318
14451: IFFALSE 14462
// ComWalk ( un ) ;
14453: LD_VAR 0 2
14457: PPUSH
14458: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14462: LD_VAR 0 2
14466: PPUSH
14467: LD_INT 9
14469: PPUSH
14470: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14474: LD_INT 28
14476: PPUSH
14477: LD_OWVAR 2
14481: PPUSH
14482: LD_INT 2
14484: PPUSH
14485: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14489: LD_INT 29
14491: PPUSH
14492: LD_OWVAR 2
14496: PPUSH
14497: LD_INT 2
14499: PPUSH
14500: CALL_OW 322
// end ;
14504: PPOPN 3
14506: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14507: LD_EXP 26
14511: PUSH
14512: LD_EXP 69
14516: AND
14517: IFFALSE 14628
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
14525: PPUSH
14526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_OWVAR 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 25
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PPUSH
14558: CALL_OW 69
14562: ST_TO_ADDR
// if not tmp then
14563: LD_VAR 0 3
14567: NOT
14568: IFFALSE 14572
// exit ;
14570: GO 14628
// un := tmp [ rand ( 1 , tmp ) ] ;
14572: LD_ADDR_VAR 0 2
14576: PUSH
14577: LD_VAR 0 3
14581: PUSH
14582: LD_INT 1
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: CALL_OW 12
14594: ARRAY
14595: ST_TO_ADDR
// if Crawls ( un ) then
14596: LD_VAR 0 2
14600: PPUSH
14601: CALL_OW 318
14605: IFFALSE 14616
// ComWalk ( un ) ;
14607: LD_VAR 0 2
14611: PPUSH
14612: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14616: LD_VAR 0 2
14620: PPUSH
14621: LD_INT 8
14623: PPUSH
14624: CALL_OW 336
// end ;
14628: PPOPN 3
14630: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14631: LD_EXP 26
14635: PUSH
14636: LD_EXP 70
14640: AND
14641: IFFALSE 14785
14643: GO 14645
14645: DISABLE
14646: LD_INT 0
14648: PPUSH
14649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14650: LD_ADDR_VAR 0 2
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_OWVAR 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 2
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 12
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 34
14692: PUSH
14693: LD_INT 51
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 34
14702: PUSH
14703: LD_INT 32
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: ST_TO_ADDR
// if not tmp then
14726: LD_VAR 0 2
14730: NOT
14731: IFFALSE 14735
// exit ;
14733: GO 14785
// for i in tmp do
14735: LD_ADDR_VAR 0 1
14739: PUSH
14740: LD_VAR 0 2
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14783
// if GetCargo ( i , mat_artifact ) = 0 then
14748: LD_VAR 0 1
14752: PPUSH
14753: LD_INT 4
14755: PPUSH
14756: CALL_OW 289
14760: PUSH
14761: LD_INT 0
14763: EQUAL
14764: IFFALSE 14781
// SetCargo ( i , mat_siberit , 100 ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_INT 3
14773: PPUSH
14774: LD_INT 100
14776: PPUSH
14777: CALL_OW 290
14781: GO 14745
14783: POP
14784: POP
// end ;
14785: PPOPN 2
14787: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14788: LD_EXP 26
14792: PUSH
14793: LD_EXP 71
14797: AND
14798: IFFALSE 14981
14800: GO 14802
14802: DISABLE
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_OWVAR 2
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: ST_TO_ADDR
// if not tmp then
14829: LD_VAR 0 2
14833: NOT
14834: IFFALSE 14838
// exit ;
14836: GO 14981
// for i := 1 to 2 do
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 2
14850: PUSH
14851: FOR_TO
14852: IFFALSE 14979
// begin uc_side := your_side ;
14854: LD_ADDR_OWVAR 20
14858: PUSH
14859: LD_OWVAR 2
14863: ST_TO_ADDR
// uc_nation := nation_american ;
14864: LD_ADDR_OWVAR 21
14868: PUSH
14869: LD_INT 1
14871: ST_TO_ADDR
// vc_chassis := us_morphling ;
14872: LD_ADDR_OWVAR 37
14876: PUSH
14877: LD_INT 5
14879: ST_TO_ADDR
// vc_engine := engine_siberite ;
14880: LD_ADDR_OWVAR 39
14884: PUSH
14885: LD_INT 3
14887: ST_TO_ADDR
// vc_control := control_computer ;
14888: LD_ADDR_OWVAR 38
14892: PUSH
14893: LD_INT 3
14895: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14896: LD_ADDR_OWVAR 40
14900: PUSH
14901: LD_INT 10
14903: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14904: LD_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: ARRAY
14912: PPUSH
14913: CALL_OW 310
14917: NOT
14918: IFFALSE 14965
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14920: CALL_OW 45
14924: PPUSH
14925: LD_VAR 0 2
14929: PUSH
14930: LD_INT 1
14932: ARRAY
14933: PPUSH
14934: CALL_OW 250
14938: PPUSH
14939: LD_VAR 0 2
14943: PUSH
14944: LD_INT 1
14946: ARRAY
14947: PPUSH
14948: CALL_OW 251
14952: PPUSH
14953: LD_INT 12
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 50
14963: GO 14977
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14965: CALL_OW 45
14969: PPUSH
14970: LD_INT 1
14972: PPUSH
14973: CALL_OW 51
// end ;
14977: GO 14851
14979: POP
14980: POP
// end ;
14981: PPOPN 2
14983: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14984: LD_EXP 26
14988: PUSH
14989: LD_EXP 72
14993: AND
14994: IFFALSE 15216
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
15006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15007: LD_ADDR_VAR 0 6
15011: PUSH
15012: LD_INT 22
15014: PUSH
15015: LD_OWVAR 2
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 21
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 3
15036: PUSH
15037: LD_INT 23
15039: PUSH
15040: LD_INT 0
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: LIST
15055: PPUSH
15056: CALL_OW 69
15060: ST_TO_ADDR
// if not tmp then
15061: LD_VAR 0 6
15065: NOT
15066: IFFALSE 15070
// exit ;
15068: GO 15216
// s1 := rand ( 1 , 4 ) ;
15070: LD_ADDR_VAR 0 2
15074: PUSH
15075: LD_INT 1
15077: PPUSH
15078: LD_INT 4
15080: PPUSH
15081: CALL_OW 12
15085: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15086: LD_ADDR_VAR 0 4
15090: PUSH
15091: LD_VAR 0 6
15095: PUSH
15096: LD_INT 1
15098: ARRAY
15099: PPUSH
15100: LD_VAR 0 2
15104: PPUSH
15105: CALL_OW 259
15109: ST_TO_ADDR
// if s1 = 1 then
15110: LD_VAR 0 2
15114: PUSH
15115: LD_INT 1
15117: EQUAL
15118: IFFALSE 15138
// s2 := rand ( 2 , 4 ) else
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_INT 2
15127: PPUSH
15128: LD_INT 4
15130: PPUSH
15131: CALL_OW 12
15135: ST_TO_ADDR
15136: GO 15146
// s2 := 1 ;
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 1
15145: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15146: LD_ADDR_VAR 0 5
15150: PUSH
15151: LD_VAR 0 6
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: CALL_OW 259
15169: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15170: LD_VAR 0 6
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: PPUSH
15179: LD_VAR 0 2
15183: PPUSH
15184: LD_VAR 0 5
15188: PPUSH
15189: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15193: LD_VAR 0 6
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: LD_VAR 0 3
15206: PPUSH
15207: LD_VAR 0 4
15211: PPUSH
15212: CALL_OW 237
// end ;
15216: PPOPN 6
15218: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15219: LD_EXP 26
15223: PUSH
15224: LD_EXP 73
15228: AND
15229: IFFALSE 15308
15231: GO 15233
15233: DISABLE
15234: LD_INT 0
15236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15237: LD_ADDR_VAR 0 1
15241: PUSH
15242: LD_INT 22
15244: PUSH
15245: LD_OWVAR 2
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 30
15256: PUSH
15257: LD_INT 3
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PPUSH
15268: CALL_OW 69
15272: ST_TO_ADDR
// if not tmp then
15273: LD_VAR 0 1
15277: NOT
15278: IFFALSE 15282
// exit ;
15280: GO 15308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15282: LD_VAR 0 1
15286: PUSH
15287: LD_INT 1
15289: PPUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 12
15299: ARRAY
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: CALL_OW 234
// end ;
15308: PPOPN 1
15310: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15311: LD_EXP 26
15315: PUSH
15316: LD_EXP 74
15320: AND
15321: IFFALSE 15433
15323: GO 15325
15325: DISABLE
15326: LD_INT 0
15328: PPUSH
15329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15330: LD_ADDR_VAR 0 2
15334: PUSH
15335: LD_INT 22
15337: PUSH
15338: LD_OWVAR 2
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 2
15349: PUSH
15350: LD_INT 30
15352: PUSH
15353: LD_INT 27
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 30
15362: PUSH
15363: LD_INT 26
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 30
15372: PUSH
15373: LD_INT 28
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PPUSH
15390: CALL_OW 69
15394: ST_TO_ADDR
// if not tmp then
15395: LD_VAR 0 2
15399: NOT
15400: IFFALSE 15404
// exit ;
15402: GO 15433
// for i in tmp do
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: LD_VAR 0 2
15413: PUSH
15414: FOR_IN
15415: IFFALSE 15431
// SetLives ( i , 1 ) ;
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 234
15429: GO 15414
15431: POP
15432: POP
// end ;
15433: PPOPN 2
15435: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15436: LD_EXP 26
15440: PUSH
15441: LD_EXP 75
15445: AND
15446: IFFALSE 15733
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
15455: PPUSH
// begin i := rand ( 1 , 7 ) ;
15456: LD_ADDR_VAR 0 1
15460: PUSH
15461: LD_INT 1
15463: PPUSH
15464: LD_INT 7
15466: PPUSH
15467: CALL_OW 12
15471: ST_TO_ADDR
// case i of 1 :
15472: LD_VAR 0 1
15476: PUSH
15477: LD_INT 1
15479: DOUBLE
15480: EQUAL
15481: IFTRUE 15485
15483: GO 15495
15485: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15486: LD_STRING earthquake(getX(game), 0, 32)
15488: PPUSH
15489: CALL_OW 559
15493: GO 15733
15495: LD_INT 2
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15503
15501: GO 15517
15503: POP
// begin ToLua ( displayStucuk(); ) ;
15504: LD_STRING displayStucuk();
15506: PPUSH
15507: CALL_OW 559
// ResetFog ;
15511: CALL_OW 335
// end ; 3 :
15515: GO 15733
15517: LD_INT 3
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15629
15525: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15526: LD_ADDR_VAR 0 2
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_OWVAR 2
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 25
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 69
15561: ST_TO_ADDR
// if not tmp then
15562: LD_VAR 0 2
15566: NOT
15567: IFFALSE 15571
// exit ;
15569: GO 15733
// un := tmp [ rand ( 1 , tmp ) ] ;
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_INT 1
15583: PPUSH
15584: LD_VAR 0 2
15588: PPUSH
15589: CALL_OW 12
15593: ARRAY
15594: ST_TO_ADDR
// if Crawls ( un ) then
15595: LD_VAR 0 3
15599: PPUSH
15600: CALL_OW 318
15604: IFFALSE 15615
// ComWalk ( un ) ;
15606: LD_VAR 0 3
15610: PPUSH
15611: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15615: LD_VAR 0 3
15619: PPUSH
15620: LD_INT 8
15622: PPUSH
15623: CALL_OW 336
// end ; 4 :
15627: GO 15733
15629: LD_INT 4
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15711
15637: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 22
15645: PUSH
15646: LD_OWVAR 2
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 30
15657: PUSH
15658: LD_INT 29
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PPUSH
15669: CALL_OW 69
15673: ST_TO_ADDR
// if not tmp then
15674: LD_VAR 0 2
15678: NOT
15679: IFFALSE 15683
// exit ;
15681: GO 15733
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15683: LD_VAR 0 2
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15696: LD_VAR 0 2
15700: PUSH
15701: LD_INT 1
15703: ARRAY
15704: PPUSH
15705: CALL_OW 65
// end ; 5 .. 7 :
15709: GO 15733
15711: LD_INT 5
15713: DOUBLE
15714: GREATEREQUAL
15715: IFFALSE 15723
15717: LD_INT 7
15719: DOUBLE
15720: LESSEQUAL
15721: IFTRUE 15725
15723: GO 15732
15725: POP
// StreamSibBomb ; end ;
15726: CALL 11970 0 0
15730: GO 15733
15732: POP
// end ;
15733: PPOPN 3
15735: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15736: LD_EXP 26
15740: PUSH
15741: LD_EXP 76
15745: AND
15746: IFFALSE 15902
15748: GO 15750
15750: DISABLE
15751: LD_INT 0
15753: PPUSH
15754: PPUSH
15755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15756: LD_ADDR_VAR 0 2
15760: PUSH
15761: LD_INT 81
15763: PUSH
15764: LD_OWVAR 2
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 2
15775: PUSH
15776: LD_INT 21
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 2
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: ST_TO_ADDR
// if not tmp then
15810: LD_VAR 0 2
15814: NOT
15815: IFFALSE 15819
// exit ;
15817: GO 15902
// p := 0 ;
15819: LD_ADDR_VAR 0 3
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15827: LD_INT 35
15829: PPUSH
15830: CALL_OW 67
// p := p + 1 ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 1
15846: PLUS
15847: ST_TO_ADDR
// for i in tmp do
15848: LD_ADDR_VAR 0 1
15852: PUSH
15853: LD_VAR 0 2
15857: PUSH
15858: FOR_IN
15859: IFFALSE 15890
// if GetLives ( i ) < 1000 then
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 256
15870: PUSH
15871: LD_INT 1000
15873: LESS
15874: IFFALSE 15888
// SetLives ( i , 1000 ) ;
15876: LD_VAR 0 1
15880: PPUSH
15881: LD_INT 1000
15883: PPUSH
15884: CALL_OW 234
15888: GO 15858
15890: POP
15891: POP
// until p > 20 ;
15892: LD_VAR 0 3
15896: PUSH
15897: LD_INT 20
15899: GREATER
15900: IFFALSE 15827
// end ;
15902: PPOPN 3
15904: END
// every 0 0$1 trigger StreamModeActive and sTime do
15905: LD_EXP 26
15909: PUSH
15910: LD_EXP 77
15914: AND
15915: IFFALSE 15950
15917: GO 15919
15919: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15920: LD_INT 28
15922: PPUSH
15923: LD_OWVAR 2
15927: PPUSH
15928: LD_INT 2
15930: PPUSH
15931: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15935: LD_INT 30
15937: PPUSH
15938: LD_OWVAR 2
15942: PPUSH
15943: LD_INT 2
15945: PPUSH
15946: CALL_OW 322
// end ;
15950: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15951: LD_EXP 26
15955: PUSH
15956: LD_EXP 78
15960: AND
15961: IFFALSE 16082
15963: GO 15965
15965: DISABLE
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_OWVAR 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 21
15989: PUSH
15990: LD_INT 1
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 3
15999: PUSH
16000: LD_INT 23
16002: PUSH
16003: LD_INT 0
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: ST_TO_ADDR
// if not tmp then
16024: LD_VAR 0 2
16028: NOT
16029: IFFALSE 16033
// exit ;
16031: GO 16082
// for i in tmp do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_VAR 0 2
16042: PUSH
16043: FOR_IN
16044: IFFALSE 16080
// begin if Crawls ( i ) then
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 318
16055: IFFALSE 16066
// ComWalk ( i ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 138
// SetClass ( i , 2 ) ;
16066: LD_VAR 0 1
16070: PPUSH
16071: LD_INT 2
16073: PPUSH
16074: CALL_OW 336
// end ;
16078: GO 16043
16080: POP
16081: POP
// end ;
16082: PPOPN 2
16084: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16085: LD_EXP 26
16089: PUSH
16090: LD_EXP 79
16094: AND
16095: IFFALSE 16383
16097: GO 16099
16099: DISABLE
16100: LD_INT 0
16102: PPUSH
16103: PPUSH
16104: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16105: LD_OWVAR 2
16109: PPUSH
16110: LD_INT 9
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16123: LD_INT 9
16125: PPUSH
16126: LD_OWVAR 2
16130: PPUSH
16131: CALL_OW 343
// uc_side := 9 ;
16135: LD_ADDR_OWVAR 20
16139: PUSH
16140: LD_INT 9
16142: ST_TO_ADDR
// uc_nation := 2 ;
16143: LD_ADDR_OWVAR 21
16147: PUSH
16148: LD_INT 2
16150: ST_TO_ADDR
// hc_name := Dark Warrior ;
16151: LD_ADDR_OWVAR 26
16155: PUSH
16156: LD_STRING Dark Warrior
16158: ST_TO_ADDR
// hc_gallery :=  ;
16159: LD_ADDR_OWVAR 33
16163: PUSH
16164: LD_STRING 
16166: ST_TO_ADDR
// hc_noskilllimit := true ;
16167: LD_ADDR_OWVAR 76
16171: PUSH
16172: LD_INT 1
16174: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16175: LD_ADDR_OWVAR 31
16179: PUSH
16180: LD_INT 30
16182: PUSH
16183: LD_INT 30
16185: PUSH
16186: LD_INT 30
16188: PUSH
16189: LD_INT 30
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: ST_TO_ADDR
// un := CreateHuman ;
16198: LD_ADDR_VAR 0 3
16202: PUSH
16203: CALL_OW 44
16207: ST_TO_ADDR
// hc_noskilllimit := false ;
16208: LD_ADDR_OWVAR 76
16212: PUSH
16213: LD_INT 0
16215: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16216: LD_VAR 0 3
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 51
// ToLua ( playRanger() ) ;
16228: LD_STRING playRanger()
16230: PPUSH
16231: CALL_OW 559
// p := 0 ;
16235: LD_ADDR_VAR 0 2
16239: PUSH
16240: LD_INT 0
16242: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16243: LD_INT 35
16245: PPUSH
16246: CALL_OW 67
// p := p + 1 ;
16250: LD_ADDR_VAR 0 2
16254: PUSH
16255: LD_VAR 0 2
16259: PUSH
16260: LD_INT 1
16262: PLUS
16263: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16264: LD_VAR 0 3
16268: PPUSH
16269: CALL_OW 256
16273: PUSH
16274: LD_INT 1000
16276: LESS
16277: IFFALSE 16291
// SetLives ( un , 1000 ) ;
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1000
16286: PPUSH
16287: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16291: LD_VAR 0 3
16295: PPUSH
16296: LD_INT 81
16298: PUSH
16299: LD_OWVAR 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 91
16310: PUSH
16311: LD_VAR 0 3
16315: PUSH
16316: LD_INT 30
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PPUSH
16328: CALL_OW 69
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: CALL_OW 74
16342: PPUSH
16343: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16347: LD_VAR 0 2
16351: PUSH
16352: LD_INT 80
16354: GREATER
16355: PUSH
16356: LD_VAR 0 3
16360: PPUSH
16361: CALL_OW 301
16365: OR
16366: IFFALSE 16243
// if un then
16368: LD_VAR 0 3
16372: IFFALSE 16383
// RemoveUnit ( un ) ;
16374: LD_VAR 0 3
16378: PPUSH
16379: CALL_OW 64
// end ;
16383: PPOPN 3
16385: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16386: LD_EXP 80
16390: IFFALSE 16506
16392: GO 16394
16394: DISABLE
16395: LD_INT 0
16397: PPUSH
16398: PPUSH
16399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16400: LD_ADDR_VAR 0 2
16404: PUSH
16405: LD_INT 81
16407: PUSH
16408: LD_OWVAR 2
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 21
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PPUSH
16431: CALL_OW 69
16435: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16436: LD_STRING playComputer()
16438: PPUSH
16439: CALL_OW 559
// if not tmp then
16443: LD_VAR 0 2
16447: NOT
16448: IFFALSE 16452
// exit ;
16450: GO 16506
// for i in tmp do
16452: LD_ADDR_VAR 0 1
16456: PUSH
16457: LD_VAR 0 2
16461: PUSH
16462: FOR_IN
16463: IFFALSE 16504
// for j := 1 to 4 do
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: DOUBLE
16471: LD_INT 1
16473: DEC
16474: ST_TO_ADDR
16475: LD_INT 4
16477: PUSH
16478: FOR_TO
16479: IFFALSE 16500
// SetSkill ( i , j , 10 ) ;
16481: LD_VAR 0 1
16485: PPUSH
16486: LD_VAR 0 3
16490: PPUSH
16491: LD_INT 10
16493: PPUSH
16494: CALL_OW 237
16498: GO 16478
16500: POP
16501: POP
16502: GO 16462
16504: POP
16505: POP
// end ;
16506: PPOPN 3
16508: END
// every 0 0$1 trigger s30 do var i , tmp ;
16509: LD_EXP 81
16513: IFFALSE 16582
16515: GO 16517
16517: DISABLE
16518: LD_INT 0
16520: PPUSH
16521: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16522: LD_ADDR_VAR 0 2
16526: PUSH
16527: LD_INT 22
16529: PUSH
16530: LD_OWVAR 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: ST_TO_ADDR
// if not tmp then
16544: LD_VAR 0 2
16548: NOT
16549: IFFALSE 16553
// exit ;
16551: GO 16582
// for i in tmp do
16553: LD_ADDR_VAR 0 1
16557: PUSH
16558: LD_VAR 0 2
16562: PUSH
16563: FOR_IN
16564: IFFALSE 16580
// SetLives ( i , 300 ) ;
16566: LD_VAR 0 1
16570: PPUSH
16571: LD_INT 300
16573: PPUSH
16574: CALL_OW 234
16578: GO 16563
16580: POP
16581: POP
// end ;
16582: PPOPN 2
16584: END
// every 0 0$1 trigger s60 do var i , tmp ;
16585: LD_EXP 82
16589: IFFALSE 16658
16591: GO 16593
16593: DISABLE
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: LD_INT 22
16605: PUSH
16606: LD_OWVAR 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PPUSH
16615: CALL_OW 69
16619: ST_TO_ADDR
// if not tmp then
16620: LD_VAR 0 2
16624: NOT
16625: IFFALSE 16629
// exit ;
16627: GO 16658
// for i in tmp do
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: LD_VAR 0 2
16638: PUSH
16639: FOR_IN
16640: IFFALSE 16656
// SetLives ( i , 600 ) ;
16642: LD_VAR 0 1
16646: PPUSH
16647: LD_INT 600
16649: PPUSH
16650: CALL_OW 234
16654: GO 16639
16656: POP
16657: POP
// end ;
16658: PPOPN 2
16660: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16661: LD_INT 0
16663: PPUSH
// case cmd of 301 :
16664: LD_VAR 0 1
16668: PUSH
16669: LD_INT 301
16671: DOUBLE
16672: EQUAL
16673: IFTRUE 16677
16675: GO 16709
16677: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16678: LD_VAR 0 6
16682: PPUSH
16683: LD_VAR 0 7
16687: PPUSH
16688: LD_VAR 0 8
16692: PPUSH
16693: LD_VAR 0 4
16697: PPUSH
16698: LD_VAR 0 5
16702: PPUSH
16703: CALL 17910 0 5
16707: GO 16830
16709: LD_INT 302
16711: DOUBLE
16712: EQUAL
16713: IFTRUE 16717
16715: GO 16754
16717: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16718: LD_VAR 0 6
16722: PPUSH
16723: LD_VAR 0 7
16727: PPUSH
16728: LD_VAR 0 8
16732: PPUSH
16733: LD_VAR 0 9
16737: PPUSH
16738: LD_VAR 0 4
16742: PPUSH
16743: LD_VAR 0 5
16747: PPUSH
16748: CALL 18001 0 6
16752: GO 16830
16754: LD_INT 303
16756: DOUBLE
16757: EQUAL
16758: IFTRUE 16762
16760: GO 16799
16762: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16763: LD_VAR 0 6
16767: PPUSH
16768: LD_VAR 0 7
16772: PPUSH
16773: LD_VAR 0 8
16777: PPUSH
16778: LD_VAR 0 9
16782: PPUSH
16783: LD_VAR 0 4
16787: PPUSH
16788: LD_VAR 0 5
16792: PPUSH
16793: CALL 16835 0 6
16797: GO 16830
16799: LD_INT 304
16801: DOUBLE
16802: EQUAL
16803: IFTRUE 16807
16805: GO 16829
16807: POP
// hHackTeleport ( unit , x , y ) ; end ;
16808: LD_VAR 0 2
16812: PPUSH
16813: LD_VAR 0 4
16817: PPUSH
16818: LD_VAR 0 5
16822: PPUSH
16823: CALL 18594 0 3
16827: GO 16830
16829: POP
// end ;
16830: LD_VAR 0 12
16834: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16835: LD_INT 0
16837: PPUSH
16838: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16839: LD_VAR 0 1
16843: PUSH
16844: LD_INT 1
16846: LESS
16847: PUSH
16848: LD_VAR 0 1
16852: PUSH
16853: LD_INT 3
16855: GREATER
16856: OR
16857: PUSH
16858: LD_VAR 0 5
16862: PPUSH
16863: LD_VAR 0 6
16867: PPUSH
16868: CALL_OW 428
16872: OR
16873: IFFALSE 16877
// exit ;
16875: GO 17597
// uc_side := your_side ;
16877: LD_ADDR_OWVAR 20
16881: PUSH
16882: LD_OWVAR 2
16886: ST_TO_ADDR
// uc_nation := nation ;
16887: LD_ADDR_OWVAR 21
16891: PUSH
16892: LD_VAR 0 1
16896: ST_TO_ADDR
// bc_level = 1 ;
16897: LD_ADDR_OWVAR 43
16901: PUSH
16902: LD_INT 1
16904: ST_TO_ADDR
// case btype of 1 :
16905: LD_VAR 0 2
16909: PUSH
16910: LD_INT 1
16912: DOUBLE
16913: EQUAL
16914: IFTRUE 16918
16916: GO 16929
16918: POP
// bc_type := b_depot ; 2 :
16919: LD_ADDR_OWVAR 42
16923: PUSH
16924: LD_INT 0
16926: ST_TO_ADDR
16927: GO 17541
16929: LD_INT 2
16931: DOUBLE
16932: EQUAL
16933: IFTRUE 16937
16935: GO 16948
16937: POP
// bc_type := b_warehouse ; 3 :
16938: LD_ADDR_OWVAR 42
16942: PUSH
16943: LD_INT 1
16945: ST_TO_ADDR
16946: GO 17541
16948: LD_INT 3
16950: DOUBLE
16951: EQUAL
16952: IFTRUE 16956
16954: GO 16967
16956: POP
// bc_type := b_lab ; 4 .. 9 :
16957: LD_ADDR_OWVAR 42
16961: PUSH
16962: LD_INT 6
16964: ST_TO_ADDR
16965: GO 17541
16967: LD_INT 4
16969: DOUBLE
16970: GREATEREQUAL
16971: IFFALSE 16979
16973: LD_INT 9
16975: DOUBLE
16976: LESSEQUAL
16977: IFTRUE 16981
16979: GO 17033
16981: POP
// begin bc_type := b_lab_half ;
16982: LD_ADDR_OWVAR 42
16986: PUSH
16987: LD_INT 7
16989: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16990: LD_ADDR_OWVAR 44
16994: PUSH
16995: LD_INT 10
16997: PUSH
16998: LD_INT 11
17000: PUSH
17001: LD_INT 12
17003: PUSH
17004: LD_INT 15
17006: PUSH
17007: LD_INT 14
17009: PUSH
17010: LD_INT 13
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: LD_VAR 0 2
17025: PUSH
17026: LD_INT 3
17028: MINUS
17029: ARRAY
17030: ST_TO_ADDR
// end ; 10 .. 13 :
17031: GO 17541
17033: LD_INT 10
17035: DOUBLE
17036: GREATEREQUAL
17037: IFFALSE 17045
17039: LD_INT 13
17041: DOUBLE
17042: LESSEQUAL
17043: IFTRUE 17047
17045: GO 17124
17047: POP
// begin bc_type := b_lab_full ;
17048: LD_ADDR_OWVAR 42
17052: PUSH
17053: LD_INT 8
17055: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17056: LD_ADDR_OWVAR 44
17060: PUSH
17061: LD_INT 10
17063: PUSH
17064: LD_INT 12
17066: PUSH
17067: LD_INT 14
17069: PUSH
17070: LD_INT 13
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: PUSH
17079: LD_VAR 0 2
17083: PUSH
17084: LD_INT 9
17086: MINUS
17087: ARRAY
17088: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17089: LD_ADDR_OWVAR 45
17093: PUSH
17094: LD_INT 11
17096: PUSH
17097: LD_INT 15
17099: PUSH
17100: LD_INT 12
17102: PUSH
17103: LD_INT 15
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: PUSH
17112: LD_VAR 0 2
17116: PUSH
17117: LD_INT 9
17119: MINUS
17120: ARRAY
17121: ST_TO_ADDR
// end ; 14 :
17122: GO 17541
17124: LD_INT 14
17126: DOUBLE
17127: EQUAL
17128: IFTRUE 17132
17130: GO 17143
17132: POP
// bc_type := b_workshop ; 15 :
17133: LD_ADDR_OWVAR 42
17137: PUSH
17138: LD_INT 2
17140: ST_TO_ADDR
17141: GO 17541
17143: LD_INT 15
17145: DOUBLE
17146: EQUAL
17147: IFTRUE 17151
17149: GO 17162
17151: POP
// bc_type := b_factory ; 16 :
17152: LD_ADDR_OWVAR 42
17156: PUSH
17157: LD_INT 3
17159: ST_TO_ADDR
17160: GO 17541
17162: LD_INT 16
17164: DOUBLE
17165: EQUAL
17166: IFTRUE 17170
17168: GO 17181
17170: POP
// bc_type := b_ext_gun ; 17 :
17171: LD_ADDR_OWVAR 42
17175: PUSH
17176: LD_INT 17
17178: ST_TO_ADDR
17179: GO 17541
17181: LD_INT 17
17183: DOUBLE
17184: EQUAL
17185: IFTRUE 17189
17187: GO 17217
17189: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17190: LD_ADDR_OWVAR 42
17194: PUSH
17195: LD_INT 19
17197: PUSH
17198: LD_INT 23
17200: PUSH
17201: LD_INT 19
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: LD_VAR 0 1
17213: ARRAY
17214: ST_TO_ADDR
17215: GO 17541
17217: LD_INT 18
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17236
17225: POP
// bc_type := b_ext_radar ; 19 :
17226: LD_ADDR_OWVAR 42
17230: PUSH
17231: LD_INT 20
17233: ST_TO_ADDR
17234: GO 17541
17236: LD_INT 19
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17255
17244: POP
// bc_type := b_ext_radio ; 20 :
17245: LD_ADDR_OWVAR 42
17249: PUSH
17250: LD_INT 22
17252: ST_TO_ADDR
17253: GO 17541
17255: LD_INT 20
17257: DOUBLE
17258: EQUAL
17259: IFTRUE 17263
17261: GO 17274
17263: POP
// bc_type := b_ext_siberium ; 21 :
17264: LD_ADDR_OWVAR 42
17268: PUSH
17269: LD_INT 21
17271: ST_TO_ADDR
17272: GO 17541
17274: LD_INT 21
17276: DOUBLE
17277: EQUAL
17278: IFTRUE 17282
17280: GO 17293
17282: POP
// bc_type := b_ext_computer ; 22 :
17283: LD_ADDR_OWVAR 42
17287: PUSH
17288: LD_INT 24
17290: ST_TO_ADDR
17291: GO 17541
17293: LD_INT 22
17295: DOUBLE
17296: EQUAL
17297: IFTRUE 17301
17299: GO 17312
17301: POP
// bc_type := b_ext_track ; 23 :
17302: LD_ADDR_OWVAR 42
17306: PUSH
17307: LD_INT 16
17309: ST_TO_ADDR
17310: GO 17541
17312: LD_INT 23
17314: DOUBLE
17315: EQUAL
17316: IFTRUE 17320
17318: GO 17331
17320: POP
// bc_type := b_ext_laser ; 24 :
17321: LD_ADDR_OWVAR 42
17325: PUSH
17326: LD_INT 25
17328: ST_TO_ADDR
17329: GO 17541
17331: LD_INT 24
17333: DOUBLE
17334: EQUAL
17335: IFTRUE 17339
17337: GO 17350
17339: POP
// bc_type := b_control_tower ; 25 :
17340: LD_ADDR_OWVAR 42
17344: PUSH
17345: LD_INT 36
17347: ST_TO_ADDR
17348: GO 17541
17350: LD_INT 25
17352: DOUBLE
17353: EQUAL
17354: IFTRUE 17358
17356: GO 17369
17358: POP
// bc_type := b_breastwork ; 26 :
17359: LD_ADDR_OWVAR 42
17363: PUSH
17364: LD_INT 31
17366: ST_TO_ADDR
17367: GO 17541
17369: LD_INT 26
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17388
17377: POP
// bc_type := b_bunker ; 27 :
17378: LD_ADDR_OWVAR 42
17382: PUSH
17383: LD_INT 32
17385: ST_TO_ADDR
17386: GO 17541
17388: LD_INT 27
17390: DOUBLE
17391: EQUAL
17392: IFTRUE 17396
17394: GO 17407
17396: POP
// bc_type := b_turret ; 28 :
17397: LD_ADDR_OWVAR 42
17401: PUSH
17402: LD_INT 33
17404: ST_TO_ADDR
17405: GO 17541
17407: LD_INT 28
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17426
17415: POP
// bc_type := b_armoury ; 29 :
17416: LD_ADDR_OWVAR 42
17420: PUSH
17421: LD_INT 4
17423: ST_TO_ADDR
17424: GO 17541
17426: LD_INT 29
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 17445
17434: POP
// bc_type := b_barracks ; 30 :
17435: LD_ADDR_OWVAR 42
17439: PUSH
17440: LD_INT 5
17442: ST_TO_ADDR
17443: GO 17541
17445: LD_INT 30
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 17464
17453: POP
// bc_type := b_solar_power ; 31 :
17454: LD_ADDR_OWVAR 42
17458: PUSH
17459: LD_INT 27
17461: ST_TO_ADDR
17462: GO 17541
17464: LD_INT 31
17466: DOUBLE
17467: EQUAL
17468: IFTRUE 17472
17470: GO 17483
17472: POP
// bc_type := b_oil_power ; 32 :
17473: LD_ADDR_OWVAR 42
17477: PUSH
17478: LD_INT 26
17480: ST_TO_ADDR
17481: GO 17541
17483: LD_INT 32
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17491
17489: GO 17502
17491: POP
// bc_type := b_siberite_power ; 33 :
17492: LD_ADDR_OWVAR 42
17496: PUSH
17497: LD_INT 28
17499: ST_TO_ADDR
17500: GO 17541
17502: LD_INT 33
17504: DOUBLE
17505: EQUAL
17506: IFTRUE 17510
17508: GO 17521
17510: POP
// bc_type := b_oil_mine ; 34 :
17511: LD_ADDR_OWVAR 42
17515: PUSH
17516: LD_INT 29
17518: ST_TO_ADDR
17519: GO 17541
17521: LD_INT 34
17523: DOUBLE
17524: EQUAL
17525: IFTRUE 17529
17527: GO 17540
17529: POP
// bc_type := b_siberite_mine ; end ;
17530: LD_ADDR_OWVAR 42
17534: PUSH
17535: LD_INT 30
17537: ST_TO_ADDR
17538: GO 17541
17540: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17541: LD_ADDR_VAR 0 8
17545: PUSH
17546: LD_VAR 0 5
17550: PPUSH
17551: LD_VAR 0 6
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: CALL_OW 47
17565: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17566: LD_OWVAR 42
17570: PUSH
17571: LD_INT 32
17573: PUSH
17574: LD_INT 33
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: IN
17581: IFFALSE 17597
// PlaceWeaponTurret ( b , weapon ) ;
17583: LD_VAR 0 8
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: CALL_OW 431
// end ;
17597: LD_VAR 0 7
17601: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17602: LD_INT 0
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17608: LD_ADDR_VAR 0 4
17612: PUSH
17613: LD_INT 22
17615: PUSH
17616: LD_OWVAR 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 30
17630: PUSH
17631: LD_INT 0
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 30
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: ST_TO_ADDR
// if not tmp then
17662: LD_VAR 0 4
17666: NOT
17667: IFFALSE 17671
// exit ;
17669: GO 17730
// for i in tmp do
17671: LD_ADDR_VAR 0 2
17675: PUSH
17676: LD_VAR 0 4
17680: PUSH
17681: FOR_IN
17682: IFFALSE 17728
// for j = 1 to 3 do
17684: LD_ADDR_VAR 0 3
17688: PUSH
17689: DOUBLE
17690: LD_INT 1
17692: DEC
17693: ST_TO_ADDR
17694: LD_INT 3
17696: PUSH
17697: FOR_TO
17698: IFFALSE 17724
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17700: LD_VAR 0 2
17704: PPUSH
17705: CALL_OW 274
17709: PPUSH
17710: LD_VAR 0 3
17714: PPUSH
17715: LD_INT 99999
17717: PPUSH
17718: CALL_OW 277
17722: GO 17697
17724: POP
17725: POP
17726: GO 17681
17728: POP
17729: POP
// end ;
17730: LD_VAR 0 1
17734: RET
// export function hHackSetLevel10 ; var i , j ; begin
17735: LD_INT 0
17737: PPUSH
17738: PPUSH
17739: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: LD_INT 21
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 69
17759: PUSH
17760: FOR_IN
17761: IFFALSE 17813
// if IsSelected ( i ) then
17763: LD_VAR 0 2
17767: PPUSH
17768: CALL_OW 306
17772: IFFALSE 17811
// begin for j := 1 to 4 do
17774: LD_ADDR_VAR 0 3
17778: PUSH
17779: DOUBLE
17780: LD_INT 1
17782: DEC
17783: ST_TO_ADDR
17784: LD_INT 4
17786: PUSH
17787: FOR_TO
17788: IFFALSE 17809
// SetSkill ( i , j , 10 ) ;
17790: LD_VAR 0 2
17794: PPUSH
17795: LD_VAR 0 3
17799: PPUSH
17800: LD_INT 10
17802: PPUSH
17803: CALL_OW 237
17807: GO 17787
17809: POP
17810: POP
// end ;
17811: GO 17760
17813: POP
17814: POP
// end ;
17815: LD_VAR 0 1
17819: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17820: LD_INT 0
17822: PPUSH
17823: PPUSH
17824: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17825: LD_ADDR_VAR 0 2
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_OWVAR 2
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 21
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PPUSH
17856: CALL_OW 69
17860: PUSH
17861: FOR_IN
17862: IFFALSE 17903
// begin for j := 1 to 4 do
17864: LD_ADDR_VAR 0 3
17868: PUSH
17869: DOUBLE
17870: LD_INT 1
17872: DEC
17873: ST_TO_ADDR
17874: LD_INT 4
17876: PUSH
17877: FOR_TO
17878: IFFALSE 17899
// SetSkill ( i , j , 10 ) ;
17880: LD_VAR 0 2
17884: PPUSH
17885: LD_VAR 0 3
17889: PPUSH
17890: LD_INT 10
17892: PPUSH
17893: CALL_OW 237
17897: GO 17877
17899: POP
17900: POP
// end ;
17901: GO 17861
17903: POP
17904: POP
// end ;
17905: LD_VAR 0 1
17909: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17910: LD_INT 0
17912: PPUSH
// uc_side := your_side ;
17913: LD_ADDR_OWVAR 20
17917: PUSH
17918: LD_OWVAR 2
17922: ST_TO_ADDR
// uc_nation := nation ;
17923: LD_ADDR_OWVAR 21
17927: PUSH
17928: LD_VAR 0 1
17932: ST_TO_ADDR
// InitHc ;
17933: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17937: LD_INT 0
17939: PPUSH
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17954: LD_VAR 0 4
17958: PPUSH
17959: LD_VAR 0 5
17963: PPUSH
17964: CALL_OW 428
17968: PUSH
17969: LD_INT 0
17971: EQUAL
17972: IFFALSE 17996
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17974: CALL_OW 44
17978: PPUSH
17979: LD_VAR 0 4
17983: PPUSH
17984: LD_VAR 0 5
17988: PPUSH
17989: LD_INT 1
17991: PPUSH
17992: CALL_OW 48
// end ;
17996: LD_VAR 0 6
18000: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18001: LD_INT 0
18003: PPUSH
18004: PPUSH
// uc_side := your_side ;
18005: LD_ADDR_OWVAR 20
18009: PUSH
18010: LD_OWVAR 2
18014: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18015: LD_VAR 0 1
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: LD_INT 2
18025: PUSH
18026: LD_INT 3
18028: PUSH
18029: LD_INT 4
18031: PUSH
18032: LD_INT 5
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: IN
18042: IFFALSE 18054
// uc_nation := nation_american else
18044: LD_ADDR_OWVAR 21
18048: PUSH
18049: LD_INT 1
18051: ST_TO_ADDR
18052: GO 18097
// if chassis in [ 11 , 12 , 13 , 14 ] then
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 11
18061: PUSH
18062: LD_INT 12
18064: PUSH
18065: LD_INT 13
18067: PUSH
18068: LD_INT 14
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: IN
18077: IFFALSE 18089
// uc_nation := nation_arabian else
18079: LD_ADDR_OWVAR 21
18083: PUSH
18084: LD_INT 2
18086: ST_TO_ADDR
18087: GO 18097
// uc_nation := nation_russian ;
18089: LD_ADDR_OWVAR 21
18093: PUSH
18094: LD_INT 3
18096: ST_TO_ADDR
// vc_chassis := chassis ;
18097: LD_ADDR_OWVAR 37
18101: PUSH
18102: LD_VAR 0 1
18106: ST_TO_ADDR
// vc_engine := engine ;
18107: LD_ADDR_OWVAR 39
18111: PUSH
18112: LD_VAR 0 2
18116: ST_TO_ADDR
// vc_control := control ;
18117: LD_ADDR_OWVAR 38
18121: PUSH
18122: LD_VAR 0 3
18126: ST_TO_ADDR
// vc_weapon := weapon ;
18127: LD_ADDR_OWVAR 40
18131: PUSH
18132: LD_VAR 0 4
18136: ST_TO_ADDR
// un := CreateVehicle ;
18137: LD_ADDR_VAR 0 8
18141: PUSH
18142: CALL_OW 45
18146: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18147: LD_VAR 0 8
18151: PPUSH
18152: LD_INT 0
18154: PPUSH
18155: LD_INT 5
18157: PPUSH
18158: CALL_OW 12
18162: PPUSH
18163: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18167: LD_VAR 0 8
18171: PPUSH
18172: LD_VAR 0 5
18176: PPUSH
18177: LD_VAR 0 6
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 48
// end ;
18189: LD_VAR 0 7
18193: RET
// export hInvincible ; every 1 do
18194: GO 18196
18196: DISABLE
// hInvincible := [ ] ;
18197: LD_ADDR_EXP 83
18201: PUSH
18202: EMPTY
18203: ST_TO_ADDR
18204: END
// every 10 do var i ;
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
// begin enable ;
18211: ENABLE
// if not hInvincible then
18212: LD_EXP 83
18216: NOT
18217: IFFALSE 18221
// exit ;
18219: GO 18265
// for i in hInvincible do
18221: LD_ADDR_VAR 0 1
18225: PUSH
18226: LD_EXP 83
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18263
// if GetLives ( i ) < 1000 then
18234: LD_VAR 0 1
18238: PPUSH
18239: CALL_OW 256
18243: PUSH
18244: LD_INT 1000
18246: LESS
18247: IFFALSE 18261
// SetLives ( i , 1000 ) ;
18249: LD_VAR 0 1
18253: PPUSH
18254: LD_INT 1000
18256: PPUSH
18257: CALL_OW 234
18261: GO 18231
18263: POP
18264: POP
// end ;
18265: PPOPN 1
18267: END
// export function hHackInvincible ; var i ; begin
18268: LD_INT 0
18270: PPUSH
18271: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18272: LD_ADDR_VAR 0 2
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 21
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18372
// if IsSelected ( i ) then
18313: LD_VAR 0 2
18317: PPUSH
18318: CALL_OW 306
18322: IFFALSE 18370
// begin if i in hInvincible then
18324: LD_VAR 0 2
18328: PUSH
18329: LD_EXP 83
18333: IN
18334: IFFALSE 18354
// hInvincible := hInvincible diff i else
18336: LD_ADDR_EXP 83
18340: PUSH
18341: LD_EXP 83
18345: PUSH
18346: LD_VAR 0 2
18350: DIFF
18351: ST_TO_ADDR
18352: GO 18370
// hInvincible := hInvincible union i ;
18354: LD_ADDR_EXP 83
18358: PUSH
18359: LD_EXP 83
18363: PUSH
18364: LD_VAR 0 2
18368: UNION
18369: ST_TO_ADDR
// end ;
18370: GO 18310
18372: POP
18373: POP
// end ;
18374: LD_VAR 0 1
18378: RET
// export function hHackInvisible ; var i , j ; begin
18379: LD_INT 0
18381: PPUSH
18382: PPUSH
18383: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_INT 21
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PPUSH
18399: CALL_OW 69
18403: PUSH
18404: FOR_IN
18405: IFFALSE 18429
// if IsSelected ( i ) then
18407: LD_VAR 0 2
18411: PPUSH
18412: CALL_OW 306
18416: IFFALSE 18427
// ComForceInvisible ( i ) ;
18418: LD_VAR 0 2
18422: PPUSH
18423: CALL_OW 496
18427: GO 18404
18429: POP
18430: POP
// end ;
18431: LD_VAR 0 1
18435: RET
// export function hHackChangeYourSide ; begin
18436: LD_INT 0
18438: PPUSH
// if your_side = 8 then
18439: LD_OWVAR 2
18443: PUSH
18444: LD_INT 8
18446: EQUAL
18447: IFFALSE 18459
// your_side := 0 else
18449: LD_ADDR_OWVAR 2
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
18457: GO 18473
// your_side := your_side + 1 ;
18459: LD_ADDR_OWVAR 2
18463: PUSH
18464: LD_OWVAR 2
18468: PUSH
18469: LD_INT 1
18471: PLUS
18472: ST_TO_ADDR
// end ;
18473: LD_VAR 0 1
18477: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18478: LD_INT 0
18480: PPUSH
18481: PPUSH
18482: PPUSH
// for i in all_units do
18483: LD_ADDR_VAR 0 2
18487: PUSH
18488: LD_OWVAR 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18572
// if IsSelected ( i ) then
18496: LD_VAR 0 2
18500: PPUSH
18501: CALL_OW 306
18505: IFFALSE 18570
// begin j := GetSide ( i ) ;
18507: LD_ADDR_VAR 0 3
18511: PUSH
18512: LD_VAR 0 2
18516: PPUSH
18517: CALL_OW 255
18521: ST_TO_ADDR
// if j = 8 then
18522: LD_VAR 0 3
18526: PUSH
18527: LD_INT 8
18529: EQUAL
18530: IFFALSE 18542
// j := 0 else
18532: LD_ADDR_VAR 0 3
18536: PUSH
18537: LD_INT 0
18539: ST_TO_ADDR
18540: GO 18556
// j := j + 1 ;
18542: LD_ADDR_VAR 0 3
18546: PUSH
18547: LD_VAR 0 3
18551: PUSH
18552: LD_INT 1
18554: PLUS
18555: ST_TO_ADDR
// SetSide ( i , j ) ;
18556: LD_VAR 0 2
18560: PPUSH
18561: LD_VAR 0 3
18565: PPUSH
18566: CALL_OW 235
// end ;
18570: GO 18493
18572: POP
18573: POP
// end ;
18574: LD_VAR 0 1
18578: RET
// export function hHackFog ; begin
18579: LD_INT 0
18581: PPUSH
// FogOff ( true ) ;
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 344
// end ;
18589: LD_VAR 0 1
18593: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18594: LD_INT 0
18596: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18597: LD_VAR 0 1
18601: PPUSH
18602: LD_VAR 0 2
18606: PPUSH
18607: LD_VAR 0 3
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: LD_INT 1
18617: PPUSH
18618: CALL_OW 483
// CenterOnXY ( x , y ) ;
18622: LD_VAR 0 2
18626: PPUSH
18627: LD_VAR 0 3
18631: PPUSH
18632: CALL_OW 84
// end ; end_of_file
18636: LD_VAR 0 4
18640: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18647: LD_VAR 0 1
18651: PPUSH
18652: CALL_OW 264
18656: PUSH
18657: LD_EXP 11
18661: EQUAL
18662: IFFALSE 18734
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18664: LD_INT 68
18666: PPUSH
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL_OW 255
18676: PPUSH
18677: CALL_OW 321
18681: PUSH
18682: LD_INT 2
18684: EQUAL
18685: IFFALSE 18697
// eff := 70 else
18687: LD_ADDR_VAR 0 4
18691: PUSH
18692: LD_INT 70
18694: ST_TO_ADDR
18695: GO 18705
// eff := 30 ;
18697: LD_ADDR_VAR 0 4
18701: PUSH
18702: LD_INT 30
18704: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: CALL_OW 250
18714: PPUSH
18715: LD_VAR 0 1
18719: PPUSH
18720: CALL_OW 251
18724: PPUSH
18725: LD_VAR 0 4
18729: PPUSH
18730: CALL_OW 495
// end ; end ;
18734: LD_VAR 0 2
18738: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18739: LD_INT 0
18741: PPUSH
// end ;
18742: LD_VAR 0 4
18746: RET
// export function SOS_Command ( cmd ) ; begin
18747: LD_INT 0
18749: PPUSH
// end ;
18750: LD_VAR 0 2
18754: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18755: LD_INT 0
18757: PPUSH
// end ;
18758: LD_VAR 0 6
18762: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18763: LD_INT 0
18765: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18766: LD_VAR 0 1
18770: PUSH
18771: LD_INT 250
18773: EQUAL
18774: PUSH
18775: LD_VAR 0 2
18779: PPUSH
18780: CALL_OW 264
18784: PUSH
18785: LD_EXP 14
18789: EQUAL
18790: AND
18791: IFFALSE 18812
// MinerPlaceMine ( unit , x , y ) ;
18793: LD_VAR 0 2
18797: PPUSH
18798: LD_VAR 0 4
18802: PPUSH
18803: LD_VAR 0 5
18807: PPUSH
18808: CALL 21161 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18812: LD_VAR 0 1
18816: PUSH
18817: LD_INT 251
18819: EQUAL
18820: PUSH
18821: LD_VAR 0 2
18825: PPUSH
18826: CALL_OW 264
18830: PUSH
18831: LD_EXP 14
18835: EQUAL
18836: AND
18837: IFFALSE 18858
// MinerDetonateMine ( unit , x , y ) ;
18839: LD_VAR 0 2
18843: PPUSH
18844: LD_VAR 0 4
18848: PPUSH
18849: LD_VAR 0 5
18853: PPUSH
18854: CALL 21438 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18858: LD_VAR 0 1
18862: PUSH
18863: LD_INT 252
18865: EQUAL
18866: PUSH
18867: LD_VAR 0 2
18871: PPUSH
18872: CALL_OW 264
18876: PUSH
18877: LD_EXP 14
18881: EQUAL
18882: AND
18883: IFFALSE 18904
// MinerCreateMinefield ( unit , x , y ) ;
18885: LD_VAR 0 2
18889: PPUSH
18890: LD_VAR 0 4
18894: PPUSH
18895: LD_VAR 0 5
18899: PPUSH
18900: CALL 21855 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 253
18911: EQUAL
18912: PUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL_OW 257
18922: PUSH
18923: LD_INT 5
18925: EQUAL
18926: AND
18927: IFFALSE 18948
// ComBinocular ( unit , x , y ) ;
18929: LD_VAR 0 2
18933: PPUSH
18934: LD_VAR 0 4
18938: PPUSH
18939: LD_VAR 0 5
18943: PPUSH
18944: CALL 22226 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18948: LD_VAR 0 1
18952: PUSH
18953: LD_INT 254
18955: EQUAL
18956: PUSH
18957: LD_VAR 0 2
18961: PPUSH
18962: CALL_OW 264
18966: PUSH
18967: LD_EXP 9
18971: EQUAL
18972: AND
18973: PUSH
18974: LD_VAR 0 3
18978: PPUSH
18979: CALL_OW 263
18983: PUSH
18984: LD_INT 3
18986: EQUAL
18987: AND
18988: IFFALSE 19004
// HackDestroyVehicle ( unit , selectedUnit ) ;
18990: LD_VAR 0 2
18994: PPUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: CALL 20521 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19004: LD_VAR 0 1
19008: PUSH
19009: LD_INT 255
19011: EQUAL
19012: PUSH
19013: LD_VAR 0 2
19017: PPUSH
19018: CALL_OW 264
19022: PUSH
19023: LD_INT 14
19025: PUSH
19026: LD_INT 53
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: IN
19033: AND
19034: PUSH
19035: LD_VAR 0 4
19039: PPUSH
19040: LD_VAR 0 5
19044: PPUSH
19045: CALL_OW 488
19049: AND
19050: IFFALSE 19074
// CutTreeXYR ( unit , x , y , 12 ) ;
19052: LD_VAR 0 2
19056: PPUSH
19057: LD_VAR 0 4
19061: PPUSH
19062: LD_VAR 0 5
19066: PPUSH
19067: LD_INT 12
19069: PPUSH
19070: CALL 19087 0 4
// end ;
19074: LD_VAR 0 6
19078: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
19079: LD_INT 0
19081: PPUSH
// end ;
19082: LD_VAR 0 4
19086: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
19097: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19098: LD_VAR 0 1
19102: NOT
19103: PUSH
19104: LD_VAR 0 2
19108: PPUSH
19109: LD_VAR 0 3
19113: PPUSH
19114: CALL_OW 488
19118: NOT
19119: OR
19120: PUSH
19121: LD_VAR 0 4
19125: NOT
19126: OR
19127: IFFALSE 19131
// exit ;
19129: GO 19471
// list := [ ] ;
19131: LD_ADDR_VAR 0 13
19135: PUSH
19136: EMPTY
19137: ST_TO_ADDR
// if x - r < 0 then
19138: LD_VAR 0 2
19142: PUSH
19143: LD_VAR 0 4
19147: MINUS
19148: PUSH
19149: LD_INT 0
19151: LESS
19152: IFFALSE 19164
// min_x := 0 else
19154: LD_ADDR_VAR 0 7
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
19162: GO 19180
// min_x := x - r ;
19164: LD_ADDR_VAR 0 7
19168: PUSH
19169: LD_VAR 0 2
19173: PUSH
19174: LD_VAR 0 4
19178: MINUS
19179: ST_TO_ADDR
// if y - r < 0 then
19180: LD_VAR 0 3
19184: PUSH
19185: LD_VAR 0 4
19189: MINUS
19190: PUSH
19191: LD_INT 0
19193: LESS
19194: IFFALSE 19206
// min_y := 0 else
19196: LD_ADDR_VAR 0 8
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
19204: GO 19222
// min_y := y - r ;
19206: LD_ADDR_VAR 0 8
19210: PUSH
19211: LD_VAR 0 3
19215: PUSH
19216: LD_VAR 0 4
19220: MINUS
19221: ST_TO_ADDR
// max_x := x + r ;
19222: LD_ADDR_VAR 0 9
19226: PUSH
19227: LD_VAR 0 2
19231: PUSH
19232: LD_VAR 0 4
19236: PLUS
19237: ST_TO_ADDR
// max_y := y + r ;
19238: LD_ADDR_VAR 0 10
19242: PUSH
19243: LD_VAR 0 3
19247: PUSH
19248: LD_VAR 0 4
19252: PLUS
19253: ST_TO_ADDR
// for _x = min_x to max_x do
19254: LD_ADDR_VAR 0 11
19258: PUSH
19259: DOUBLE
19260: LD_VAR 0 7
19264: DEC
19265: ST_TO_ADDR
19266: LD_VAR 0 9
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19389
// for _y = min_y to max_y do
19274: LD_ADDR_VAR 0 12
19278: PUSH
19279: DOUBLE
19280: LD_VAR 0 8
19284: DEC
19285: ST_TO_ADDR
19286: LD_VAR 0 10
19290: PUSH
19291: FOR_TO
19292: IFFALSE 19385
// begin if not ValidHex ( _x , _y ) then
19294: LD_VAR 0 11
19298: PPUSH
19299: LD_VAR 0 12
19303: PPUSH
19304: CALL_OW 488
19308: NOT
19309: IFFALSE 19313
// continue ;
19311: GO 19291
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19313: LD_VAR 0 11
19317: PPUSH
19318: LD_VAR 0 12
19322: PPUSH
19323: CALL_OW 351
19327: PUSH
19328: LD_VAR 0 11
19332: PPUSH
19333: LD_VAR 0 12
19337: PPUSH
19338: CALL_OW 554
19342: AND
19343: IFFALSE 19383
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19345: LD_ADDR_VAR 0 13
19349: PUSH
19350: LD_VAR 0 13
19354: PPUSH
19355: LD_VAR 0 13
19359: PUSH
19360: LD_INT 1
19362: PLUS
19363: PPUSH
19364: LD_VAR 0 11
19368: PUSH
19369: LD_VAR 0 12
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 2
19382: ST_TO_ADDR
// end ;
19383: GO 19291
19385: POP
19386: POP
19387: GO 19271
19389: POP
19390: POP
// if not list then
19391: LD_VAR 0 13
19395: NOT
19396: IFFALSE 19400
// exit ;
19398: GO 19471
// for i in list do
19400: LD_ADDR_VAR 0 6
19404: PUSH
19405: LD_VAR 0 13
19409: PUSH
19410: FOR_IN
19411: IFFALSE 19469
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19413: LD_VAR 0 1
19417: PPUSH
19418: LD_STRING M
19420: PUSH
19421: LD_VAR 0 6
19425: PUSH
19426: LD_INT 1
19428: ARRAY
19429: PUSH
19430: LD_VAR 0 6
19434: PUSH
19435: LD_INT 2
19437: ARRAY
19438: PUSH
19439: LD_INT 0
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: PUSH
19460: EMPTY
19461: LIST
19462: PPUSH
19463: CALL_OW 447
19467: GO 19410
19469: POP
19470: POP
// end ;
19471: LD_VAR 0 5
19475: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19476: LD_EXP 86
19480: NOT
19481: IFFALSE 19531
19483: GO 19485
19485: DISABLE
// begin initHack := true ;
19486: LD_ADDR_EXP 86
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// hackTanks := [ ] ;
19494: LD_ADDR_EXP 87
19498: PUSH
19499: EMPTY
19500: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19501: LD_ADDR_EXP 88
19505: PUSH
19506: EMPTY
19507: ST_TO_ADDR
// hackLimit := 3 ;
19508: LD_ADDR_EXP 89
19512: PUSH
19513: LD_INT 3
19515: ST_TO_ADDR
// hackDist := 12 ;
19516: LD_ADDR_EXP 90
19520: PUSH
19521: LD_INT 12
19523: ST_TO_ADDR
// hackCounter := [ ] ;
19524: LD_ADDR_EXP 91
19528: PUSH
19529: EMPTY
19530: ST_TO_ADDR
// end ;
19531: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19532: LD_EXP 86
19536: PUSH
19537: LD_INT 34
19539: PUSH
19540: LD_EXP 9
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 69
19553: AND
19554: IFFALSE 19809
19556: GO 19558
19558: DISABLE
19559: LD_INT 0
19561: PPUSH
19562: PPUSH
// begin enable ;
19563: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19564: LD_ADDR_VAR 0 1
19568: PUSH
19569: LD_INT 34
19571: PUSH
19572: LD_EXP 9
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: PUSH
19586: FOR_IN
19587: IFFALSE 19807
// begin if not i in hackTanks then
19589: LD_VAR 0 1
19593: PUSH
19594: LD_EXP 87
19598: IN
19599: NOT
19600: IFFALSE 19683
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19602: LD_ADDR_EXP 87
19606: PUSH
19607: LD_EXP 87
19611: PPUSH
19612: LD_EXP 87
19616: PUSH
19617: LD_INT 1
19619: PLUS
19620: PPUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 1
19630: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19631: LD_ADDR_EXP 88
19635: PUSH
19636: LD_EXP 88
19640: PPUSH
19641: LD_EXP 88
19645: PUSH
19646: LD_INT 1
19648: PLUS
19649: PPUSH
19650: EMPTY
19651: PPUSH
19652: CALL_OW 1
19656: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19657: LD_ADDR_EXP 91
19661: PUSH
19662: LD_EXP 91
19666: PPUSH
19667: LD_EXP 91
19671: PUSH
19672: LD_INT 1
19674: PLUS
19675: PPUSH
19676: EMPTY
19677: PPUSH
19678: CALL_OW 1
19682: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19683: LD_VAR 0 1
19687: PPUSH
19688: CALL_OW 302
19692: NOT
19693: IFFALSE 19706
// begin HackUnlinkAll ( i ) ;
19695: LD_VAR 0 1
19699: PPUSH
19700: CALL 19812 0 1
// continue ;
19704: GO 19586
// end ; HackCheckCapturedStatus ( i ) ;
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL 20255 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: LD_INT 81
19722: PUSH
19723: LD_VAR 0 1
19727: PPUSH
19728: CALL_OW 255
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 33
19739: PUSH
19740: LD_INT 3
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 91
19749: PUSH
19750: LD_VAR 0 1
19754: PUSH
19755: LD_EXP 90
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 50
19767: PUSH
19768: EMPTY
19769: LIST
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: PPUSH
19777: CALL_OW 69
19781: ST_TO_ADDR
// if not tmp then
19782: LD_VAR 0 2
19786: NOT
19787: IFFALSE 19791
// continue ;
19789: GO 19586
// HackLink ( i , tmp ) ;
19791: LD_VAR 0 1
19795: PPUSH
19796: LD_VAR 0 2
19800: PPUSH
19801: CALL 19948 0 2
// end ;
19805: GO 19586
19807: POP
19808: POP
// end ;
19809: PPOPN 2
19811: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19812: LD_INT 0
19814: PPUSH
19815: PPUSH
19816: PPUSH
// if not hack in hackTanks then
19817: LD_VAR 0 1
19821: PUSH
19822: LD_EXP 87
19826: IN
19827: NOT
19828: IFFALSE 19832
// exit ;
19830: GO 19943
// index := GetElementIndex ( hackTanks , hack ) ;
19832: LD_ADDR_VAR 0 4
19836: PUSH
19837: LD_EXP 87
19841: PPUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL 27417 0 2
19851: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19852: LD_EXP 88
19856: PUSH
19857: LD_VAR 0 4
19861: ARRAY
19862: IFFALSE 19943
// begin for i in hackTanksCaptured [ index ] do
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: LD_EXP 88
19873: PUSH
19874: LD_VAR 0 4
19878: ARRAY
19879: PUSH
19880: FOR_IN
19881: IFFALSE 19907
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 1
19890: ARRAY
19891: PPUSH
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 2
19899: ARRAY
19900: PPUSH
19901: CALL_OW 235
19905: GO 19880
19907: POP
19908: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19909: LD_ADDR_EXP 88
19913: PUSH
19914: LD_EXP 88
19918: PPUSH
19919: LD_VAR 0 4
19923: PPUSH
19924: EMPTY
19925: PPUSH
19926: CALL_OW 1
19930: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19931: LD_VAR 0 1
19935: PPUSH
19936: LD_INT 0
19938: PPUSH
19939: CALL_OW 505
// end ; end ;
19943: LD_VAR 0 2
19947: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19948: LD_INT 0
19950: PPUSH
19951: PPUSH
19952: PPUSH
// if not hack in hackTanks or not vehicles then
19953: LD_VAR 0 1
19957: PUSH
19958: LD_EXP 87
19962: IN
19963: NOT
19964: PUSH
19965: LD_VAR 0 2
19969: NOT
19970: OR
19971: IFFALSE 19975
// exit ;
19973: GO 20250
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19975: LD_ADDR_VAR 0 2
19979: PUSH
19980: LD_VAR 0 1
19984: PPUSH
19985: LD_VAR 0 2
19989: PPUSH
19990: LD_INT 1
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL 28067 0 4
20000: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20001: LD_ADDR_VAR 0 5
20005: PUSH
20006: LD_EXP 87
20010: PPUSH
20011: LD_VAR 0 1
20015: PPUSH
20016: CALL 27417 0 2
20020: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20021: LD_EXP 88
20025: PUSH
20026: LD_VAR 0 5
20030: ARRAY
20031: PUSH
20032: LD_EXP 89
20036: LESS
20037: IFFALSE 20226
// begin for i := 1 to vehicles do
20039: LD_ADDR_VAR 0 4
20043: PUSH
20044: DOUBLE
20045: LD_INT 1
20047: DEC
20048: ST_TO_ADDR
20049: LD_VAR 0 2
20053: PUSH
20054: FOR_TO
20055: IFFALSE 20224
// begin if hackTanksCaptured [ index ] = hackLimit then
20057: LD_EXP 88
20061: PUSH
20062: LD_VAR 0 5
20066: ARRAY
20067: PUSH
20068: LD_EXP 89
20072: EQUAL
20073: IFFALSE 20077
// break ;
20075: GO 20224
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20077: LD_ADDR_EXP 91
20081: PUSH
20082: LD_EXP 91
20086: PPUSH
20087: LD_VAR 0 5
20091: PPUSH
20092: LD_EXP 91
20096: PUSH
20097: LD_VAR 0 5
20101: ARRAY
20102: PUSH
20103: LD_INT 1
20105: PLUS
20106: PPUSH
20107: CALL_OW 1
20111: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20112: LD_ADDR_EXP 88
20116: PUSH
20117: LD_EXP 88
20121: PPUSH
20122: LD_VAR 0 5
20126: PUSH
20127: LD_EXP 88
20131: PUSH
20132: LD_VAR 0 5
20136: ARRAY
20137: PUSH
20138: LD_INT 1
20140: PLUS
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PPUSH
20146: LD_VAR 0 2
20150: PUSH
20151: LD_VAR 0 4
20155: ARRAY
20156: PUSH
20157: LD_VAR 0 2
20161: PUSH
20162: LD_VAR 0 4
20166: ARRAY
20167: PPUSH
20168: CALL_OW 255
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PPUSH
20177: CALL 27632 0 3
20181: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20182: LD_VAR 0 2
20186: PUSH
20187: LD_VAR 0 4
20191: ARRAY
20192: PPUSH
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 255
20202: PPUSH
20203: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20207: LD_VAR 0 2
20211: PUSH
20212: LD_VAR 0 4
20216: ARRAY
20217: PPUSH
20218: CALL_OW 141
// end ;
20222: GO 20054
20224: POP
20225: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20226: LD_VAR 0 1
20230: PPUSH
20231: LD_EXP 88
20235: PUSH
20236: LD_VAR 0 5
20240: ARRAY
20241: PUSH
20242: LD_INT 0
20244: PLUS
20245: PPUSH
20246: CALL_OW 505
// end ;
20250: LD_VAR 0 3
20254: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20255: LD_INT 0
20257: PPUSH
20258: PPUSH
20259: PPUSH
20260: PPUSH
// if not hack in hackTanks then
20261: LD_VAR 0 1
20265: PUSH
20266: LD_EXP 87
20270: IN
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20516
// index := GetElementIndex ( hackTanks , hack ) ;
20276: LD_ADDR_VAR 0 4
20280: PUSH
20281: LD_EXP 87
20285: PPUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL 27417 0 2
20295: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20296: LD_ADDR_VAR 0 3
20300: PUSH
20301: DOUBLE
20302: LD_EXP 88
20306: PUSH
20307: LD_VAR 0 4
20311: ARRAY
20312: INC
20313: ST_TO_ADDR
20314: LD_INT 1
20316: PUSH
20317: FOR_DOWNTO
20318: IFFALSE 20490
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20320: LD_ADDR_VAR 0 5
20324: PUSH
20325: LD_EXP 88
20329: PUSH
20330: LD_VAR 0 4
20334: ARRAY
20335: PUSH
20336: LD_VAR 0 3
20340: ARRAY
20341: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20342: LD_VAR 0 5
20346: PUSH
20347: LD_INT 1
20349: ARRAY
20350: PPUSH
20351: CALL_OW 302
20355: NOT
20356: PUSH
20357: LD_VAR 0 5
20361: PUSH
20362: LD_INT 1
20364: ARRAY
20365: PPUSH
20366: CALL_OW 255
20370: PUSH
20371: LD_VAR 0 1
20375: PPUSH
20376: CALL_OW 255
20380: NONEQUAL
20381: OR
20382: IFFALSE 20488
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20384: LD_VAR 0 5
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PPUSH
20393: CALL_OW 305
20397: PUSH
20398: LD_VAR 0 5
20402: PUSH
20403: LD_INT 1
20405: ARRAY
20406: PPUSH
20407: CALL_OW 255
20411: PUSH
20412: LD_VAR 0 1
20416: PPUSH
20417: CALL_OW 255
20421: EQUAL
20422: AND
20423: IFFALSE 20447
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20425: LD_VAR 0 5
20429: PUSH
20430: LD_INT 1
20432: ARRAY
20433: PPUSH
20434: LD_VAR 0 5
20438: PUSH
20439: LD_INT 2
20441: ARRAY
20442: PPUSH
20443: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20447: LD_ADDR_EXP 88
20451: PUSH
20452: LD_EXP 88
20456: PPUSH
20457: LD_VAR 0 4
20461: PPUSH
20462: LD_EXP 88
20466: PUSH
20467: LD_VAR 0 4
20471: ARRAY
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: CALL_OW 3
20482: PPUSH
20483: CALL_OW 1
20487: ST_TO_ADDR
// end ; end ;
20488: GO 20317
20490: POP
20491: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_EXP 88
20501: PUSH
20502: LD_VAR 0 4
20506: ARRAY
20507: PUSH
20508: LD_INT 0
20510: PLUS
20511: PPUSH
20512: CALL_OW 505
// end ;
20516: LD_VAR 0 2
20520: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20521: LD_INT 0
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
// if not hack in hackTanks then
20527: LD_VAR 0 1
20531: PUSH
20532: LD_EXP 87
20536: IN
20537: NOT
20538: IFFALSE 20542
// exit ;
20540: GO 20627
// index := GetElementIndex ( hackTanks , hack ) ;
20542: LD_ADDR_VAR 0 5
20546: PUSH
20547: LD_EXP 87
20551: PPUSH
20552: LD_VAR 0 1
20556: PPUSH
20557: CALL 27417 0 2
20561: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20562: LD_ADDR_VAR 0 4
20566: PUSH
20567: DOUBLE
20568: LD_INT 1
20570: DEC
20571: ST_TO_ADDR
20572: LD_EXP 88
20576: PUSH
20577: LD_VAR 0 5
20581: ARRAY
20582: PUSH
20583: FOR_TO
20584: IFFALSE 20625
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20586: LD_EXP 88
20590: PUSH
20591: LD_VAR 0 5
20595: ARRAY
20596: PUSH
20597: LD_VAR 0 4
20601: ARRAY
20602: PUSH
20603: LD_INT 1
20605: ARRAY
20606: PUSH
20607: LD_VAR 0 2
20611: EQUAL
20612: IFFALSE 20623
// KillUnit ( vehicle ) ;
20614: LD_VAR 0 2
20618: PPUSH
20619: CALL_OW 66
20623: GO 20583
20625: POP
20626: POP
// end ;
20627: LD_VAR 0 3
20631: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20632: LD_EXP 92
20636: NOT
20637: IFFALSE 20672
20639: GO 20641
20641: DISABLE
// begin initMiner := true ;
20642: LD_ADDR_EXP 92
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// minersList := [ ] ;
20650: LD_ADDR_EXP 93
20654: PUSH
20655: EMPTY
20656: ST_TO_ADDR
// minerMinesList := [ ] ;
20657: LD_ADDR_EXP 94
20661: PUSH
20662: EMPTY
20663: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20664: LD_ADDR_EXP 95
20668: PUSH
20669: LD_INT 5
20671: ST_TO_ADDR
// end ;
20672: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20673: LD_EXP 92
20677: PUSH
20678: LD_INT 34
20680: PUSH
20681: LD_EXP 14
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PPUSH
20690: CALL_OW 69
20694: AND
20695: IFFALSE 21158
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
// begin enable ;
20706: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20707: LD_ADDR_VAR 0 1
20711: PUSH
20712: LD_INT 34
20714: PUSH
20715: LD_EXP 14
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL_OW 69
20728: PUSH
20729: FOR_IN
20730: IFFALSE 20802
// begin if not i in minersList then
20732: LD_VAR 0 1
20736: PUSH
20737: LD_EXP 93
20741: IN
20742: NOT
20743: IFFALSE 20800
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20745: LD_ADDR_EXP 93
20749: PUSH
20750: LD_EXP 93
20754: PPUSH
20755: LD_EXP 93
20759: PUSH
20760: LD_INT 1
20762: PLUS
20763: PPUSH
20764: LD_VAR 0 1
20768: PPUSH
20769: CALL_OW 1
20773: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20774: LD_ADDR_EXP 94
20778: PUSH
20779: LD_EXP 94
20783: PPUSH
20784: LD_EXP 94
20788: PUSH
20789: LD_INT 1
20791: PLUS
20792: PPUSH
20793: EMPTY
20794: PPUSH
20795: CALL_OW 1
20799: ST_TO_ADDR
// end end ;
20800: GO 20729
20802: POP
20803: POP
// for i := minerMinesList downto 1 do
20804: LD_ADDR_VAR 0 1
20808: PUSH
20809: DOUBLE
20810: LD_EXP 94
20814: INC
20815: ST_TO_ADDR
20816: LD_INT 1
20818: PUSH
20819: FOR_DOWNTO
20820: IFFALSE 21156
// begin if IsLive ( minersList [ i ] ) then
20822: LD_EXP 93
20826: PUSH
20827: LD_VAR 0 1
20831: ARRAY
20832: PPUSH
20833: CALL_OW 300
20837: IFFALSE 20865
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20839: LD_EXP 93
20843: PUSH
20844: LD_VAR 0 1
20848: ARRAY
20849: PPUSH
20850: LD_EXP 94
20854: PUSH
20855: LD_VAR 0 1
20859: ARRAY
20860: PPUSH
20861: CALL_OW 505
// if not minerMinesList [ i ] then
20865: LD_EXP 94
20869: PUSH
20870: LD_VAR 0 1
20874: ARRAY
20875: NOT
20876: IFFALSE 20880
// continue ;
20878: GO 20819
// for j := minerMinesList [ i ] downto 1 do
20880: LD_ADDR_VAR 0 2
20884: PUSH
20885: DOUBLE
20886: LD_EXP 94
20890: PUSH
20891: LD_VAR 0 1
20895: ARRAY
20896: INC
20897: ST_TO_ADDR
20898: LD_INT 1
20900: PUSH
20901: FOR_DOWNTO
20902: IFFALSE 21152
// begin side := GetSide ( minersList [ i ] ) ;
20904: LD_ADDR_VAR 0 3
20908: PUSH
20909: LD_EXP 93
20913: PUSH
20914: LD_VAR 0 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 255
20924: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20925: LD_ADDR_VAR 0 4
20929: PUSH
20930: LD_EXP 94
20934: PUSH
20935: LD_VAR 0 1
20939: ARRAY
20940: PUSH
20941: LD_VAR 0 2
20945: ARRAY
20946: PUSH
20947: LD_INT 1
20949: ARRAY
20950: PPUSH
20951: LD_EXP 94
20955: PUSH
20956: LD_VAR 0 1
20960: ARRAY
20961: PUSH
20962: LD_VAR 0 2
20966: ARRAY
20967: PUSH
20968: LD_INT 2
20970: ARRAY
20971: PPUSH
20972: CALL_OW 428
20976: ST_TO_ADDR
// if not tmp then
20977: LD_VAR 0 4
20981: NOT
20982: IFFALSE 20986
// continue ;
20984: GO 20901
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20986: LD_VAR 0 4
20990: PUSH
20991: LD_INT 81
20993: PUSH
20994: LD_VAR 0 3
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: IN
21008: PUSH
21009: LD_EXP 94
21013: PUSH
21014: LD_VAR 0 1
21018: ARRAY
21019: PUSH
21020: LD_VAR 0 2
21024: ARRAY
21025: PUSH
21026: LD_INT 1
21028: ARRAY
21029: PPUSH
21030: LD_EXP 94
21034: PUSH
21035: LD_VAR 0 1
21039: ARRAY
21040: PUSH
21041: LD_VAR 0 2
21045: ARRAY
21046: PUSH
21047: LD_INT 2
21049: ARRAY
21050: PPUSH
21051: CALL_OW 458
21055: AND
21056: IFFALSE 21150
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21058: LD_EXP 94
21062: PUSH
21063: LD_VAR 0 1
21067: ARRAY
21068: PUSH
21069: LD_VAR 0 2
21073: ARRAY
21074: PUSH
21075: LD_INT 1
21077: ARRAY
21078: PPUSH
21079: LD_EXP 94
21083: PUSH
21084: LD_VAR 0 1
21088: ARRAY
21089: PUSH
21090: LD_VAR 0 2
21094: ARRAY
21095: PUSH
21096: LD_INT 2
21098: ARRAY
21099: PPUSH
21100: LD_VAR 0 3
21104: PPUSH
21105: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21109: LD_ADDR_EXP 94
21113: PUSH
21114: LD_EXP 94
21118: PPUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_EXP 94
21128: PUSH
21129: LD_VAR 0 1
21133: ARRAY
21134: PPUSH
21135: LD_VAR 0 2
21139: PPUSH
21140: CALL_OW 3
21144: PPUSH
21145: CALL_OW 1
21149: ST_TO_ADDR
// end ; end ;
21150: GO 20901
21152: POP
21153: POP
// end ;
21154: GO 20819
21156: POP
21157: POP
// end ;
21158: PPOPN 4
21160: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
// result := false ;
21165: LD_ADDR_VAR 0 4
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21173: LD_VAR 0 1
21177: PPUSH
21178: CALL_OW 264
21182: PUSH
21183: LD_EXP 14
21187: EQUAL
21188: NOT
21189: IFFALSE 21193
// exit ;
21191: GO 21433
// index := GetElementIndex ( minersList , unit ) ;
21193: LD_ADDR_VAR 0 5
21197: PUSH
21198: LD_EXP 93
21202: PPUSH
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL 27417 0 2
21212: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21213: LD_EXP 94
21217: PUSH
21218: LD_VAR 0 5
21222: ARRAY
21223: PUSH
21224: LD_EXP 95
21228: GREATEREQUAL
21229: IFFALSE 21233
// exit ;
21231: GO 21433
// ComMoveXY ( unit , x , y ) ;
21233: LD_VAR 0 1
21237: PPUSH
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21252: LD_INT 35
21254: PPUSH
21255: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21259: LD_VAR 0 1
21263: PPUSH
21264: LD_VAR 0 2
21268: PPUSH
21269: LD_VAR 0 3
21273: PPUSH
21274: CALL 58189 0 3
21278: NOT
21279: PUSH
21280: LD_VAR 0 1
21284: PPUSH
21285: CALL_OW 314
21289: AND
21290: IFFALSE 21294
// exit ;
21292: GO 21433
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21294: LD_VAR 0 2
21298: PPUSH
21299: LD_VAR 0 3
21303: PPUSH
21304: CALL_OW 428
21308: PUSH
21309: LD_VAR 0 1
21313: EQUAL
21314: PUSH
21315: LD_VAR 0 1
21319: PPUSH
21320: CALL_OW 314
21324: NOT
21325: AND
21326: IFFALSE 21252
// PlaySoundXY ( x , y , PlantMine ) ;
21328: LD_VAR 0 2
21332: PPUSH
21333: LD_VAR 0 3
21337: PPUSH
21338: LD_STRING PlantMine
21340: PPUSH
21341: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21345: LD_VAR 0 2
21349: PPUSH
21350: LD_VAR 0 3
21354: PPUSH
21355: LD_VAR 0 1
21359: PPUSH
21360: CALL_OW 255
21364: PPUSH
21365: LD_INT 0
21367: PPUSH
21368: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21372: LD_ADDR_EXP 94
21376: PUSH
21377: LD_EXP 94
21381: PPUSH
21382: LD_VAR 0 5
21386: PUSH
21387: LD_EXP 94
21391: PUSH
21392: LD_VAR 0 5
21396: ARRAY
21397: PUSH
21398: LD_INT 1
21400: PLUS
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: LD_VAR 0 2
21410: PUSH
21411: LD_VAR 0 3
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PPUSH
21420: CALL 27632 0 3
21424: ST_TO_ADDR
// result := true ;
21425: LD_ADDR_VAR 0 4
21429: PUSH
21430: LD_INT 1
21432: ST_TO_ADDR
// end ;
21433: LD_VAR 0 4
21437: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21438: LD_INT 0
21440: PPUSH
21441: PPUSH
21442: PPUSH
// if not unit in minersList then
21443: LD_VAR 0 1
21447: PUSH
21448: LD_EXP 93
21452: IN
21453: NOT
21454: IFFALSE 21458
// exit ;
21456: GO 21850
// index := GetElementIndex ( minersList , unit ) ;
21458: LD_ADDR_VAR 0 6
21462: PUSH
21463: LD_EXP 93
21467: PPUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL 27417 0 2
21477: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21478: LD_ADDR_VAR 0 5
21482: PUSH
21483: DOUBLE
21484: LD_EXP 94
21488: PUSH
21489: LD_VAR 0 6
21493: ARRAY
21494: INC
21495: ST_TO_ADDR
21496: LD_INT 1
21498: PUSH
21499: FOR_DOWNTO
21500: IFFALSE 21661
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21502: LD_EXP 94
21506: PUSH
21507: LD_VAR 0 6
21511: ARRAY
21512: PUSH
21513: LD_VAR 0 5
21517: ARRAY
21518: PUSH
21519: LD_INT 1
21521: ARRAY
21522: PUSH
21523: LD_VAR 0 2
21527: EQUAL
21528: PUSH
21529: LD_EXP 94
21533: PUSH
21534: LD_VAR 0 6
21538: ARRAY
21539: PUSH
21540: LD_VAR 0 5
21544: ARRAY
21545: PUSH
21546: LD_INT 2
21548: ARRAY
21549: PUSH
21550: LD_VAR 0 3
21554: EQUAL
21555: AND
21556: IFFALSE 21659
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21558: LD_EXP 94
21562: PUSH
21563: LD_VAR 0 6
21567: ARRAY
21568: PUSH
21569: LD_VAR 0 5
21573: ARRAY
21574: PUSH
21575: LD_INT 1
21577: ARRAY
21578: PPUSH
21579: LD_EXP 94
21583: PUSH
21584: LD_VAR 0 6
21588: ARRAY
21589: PUSH
21590: LD_VAR 0 5
21594: ARRAY
21595: PUSH
21596: LD_INT 2
21598: ARRAY
21599: PPUSH
21600: LD_VAR 0 1
21604: PPUSH
21605: CALL_OW 255
21609: PPUSH
21610: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21614: LD_ADDR_EXP 94
21618: PUSH
21619: LD_EXP 94
21623: PPUSH
21624: LD_VAR 0 6
21628: PPUSH
21629: LD_EXP 94
21633: PUSH
21634: LD_VAR 0 6
21638: ARRAY
21639: PPUSH
21640: LD_VAR 0 5
21644: PPUSH
21645: CALL_OW 3
21649: PPUSH
21650: CALL_OW 1
21654: ST_TO_ADDR
// exit ;
21655: POP
21656: POP
21657: GO 21850
// end ; end ;
21659: GO 21499
21661: POP
21662: POP
// for i := minerMinesList [ index ] downto 1 do
21663: LD_ADDR_VAR 0 5
21667: PUSH
21668: DOUBLE
21669: LD_EXP 94
21673: PUSH
21674: LD_VAR 0 6
21678: ARRAY
21679: INC
21680: ST_TO_ADDR
21681: LD_INT 1
21683: PUSH
21684: FOR_DOWNTO
21685: IFFALSE 21848
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21687: LD_EXP 94
21691: PUSH
21692: LD_VAR 0 6
21696: ARRAY
21697: PUSH
21698: LD_VAR 0 5
21702: ARRAY
21703: PUSH
21704: LD_INT 1
21706: ARRAY
21707: PPUSH
21708: LD_EXP 94
21712: PUSH
21713: LD_VAR 0 6
21717: ARRAY
21718: PUSH
21719: LD_VAR 0 5
21723: ARRAY
21724: PUSH
21725: LD_INT 2
21727: ARRAY
21728: PPUSH
21729: LD_VAR 0 2
21733: PPUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: CALL_OW 298
21743: PUSH
21744: LD_INT 6
21746: LESS
21747: IFFALSE 21846
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21749: LD_EXP 94
21753: PUSH
21754: LD_VAR 0 6
21758: ARRAY
21759: PUSH
21760: LD_VAR 0 5
21764: ARRAY
21765: PUSH
21766: LD_INT 1
21768: ARRAY
21769: PPUSH
21770: LD_EXP 94
21774: PUSH
21775: LD_VAR 0 6
21779: ARRAY
21780: PUSH
21781: LD_VAR 0 5
21785: ARRAY
21786: PUSH
21787: LD_INT 2
21789: ARRAY
21790: PPUSH
21791: LD_VAR 0 1
21795: PPUSH
21796: CALL_OW 255
21800: PPUSH
21801: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21805: LD_ADDR_EXP 94
21809: PUSH
21810: LD_EXP 94
21814: PPUSH
21815: LD_VAR 0 6
21819: PPUSH
21820: LD_EXP 94
21824: PUSH
21825: LD_VAR 0 6
21829: ARRAY
21830: PPUSH
21831: LD_VAR 0 5
21835: PPUSH
21836: CALL_OW 3
21840: PPUSH
21841: CALL_OW 1
21845: ST_TO_ADDR
// end ; end ;
21846: GO 21684
21848: POP
21849: POP
// end ;
21850: LD_VAR 0 4
21854: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 264
21875: PUSH
21876: LD_EXP 14
21880: EQUAL
21881: NOT
21882: PUSH
21883: LD_VAR 0 1
21887: PUSH
21888: LD_EXP 93
21892: IN
21893: NOT
21894: OR
21895: IFFALSE 21899
// exit ;
21897: GO 22221
// index := GetElementIndex ( minersList , unit ) ;
21899: LD_ADDR_VAR 0 6
21903: PUSH
21904: LD_EXP 93
21908: PPUSH
21909: LD_VAR 0 1
21913: PPUSH
21914: CALL 27417 0 2
21918: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21919: LD_ADDR_VAR 0 8
21923: PUSH
21924: LD_EXP 95
21928: PUSH
21929: LD_EXP 94
21933: PUSH
21934: LD_VAR 0 6
21938: ARRAY
21939: MINUS
21940: ST_TO_ADDR
// if not minesFreeAmount then
21941: LD_VAR 0 8
21945: NOT
21946: IFFALSE 21950
// exit ;
21948: GO 22221
// tmp := [ ] ;
21950: LD_ADDR_VAR 0 7
21954: PUSH
21955: EMPTY
21956: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21957: LD_ADDR_VAR 0 5
21961: PUSH
21962: DOUBLE
21963: LD_INT 1
21965: DEC
21966: ST_TO_ADDR
21967: LD_VAR 0 8
21971: PUSH
21972: FOR_TO
21973: IFFALSE 22168
// begin _d := rand ( 0 , 5 ) ;
21975: LD_ADDR_VAR 0 11
21979: PUSH
21980: LD_INT 0
21982: PPUSH
21983: LD_INT 5
21985: PPUSH
21986: CALL_OW 12
21990: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21991: LD_ADDR_VAR 0 12
21995: PUSH
21996: LD_INT 2
21998: PPUSH
21999: LD_INT 6
22001: PPUSH
22002: CALL_OW 12
22006: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22007: LD_ADDR_VAR 0 9
22011: PUSH
22012: LD_VAR 0 2
22016: PPUSH
22017: LD_VAR 0 11
22021: PPUSH
22022: LD_VAR 0 12
22026: PPUSH
22027: CALL_OW 272
22031: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22032: LD_ADDR_VAR 0 10
22036: PUSH
22037: LD_VAR 0 3
22041: PPUSH
22042: LD_VAR 0 11
22046: PPUSH
22047: LD_VAR 0 12
22051: PPUSH
22052: CALL_OW 273
22056: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22057: LD_VAR 0 9
22061: PPUSH
22062: LD_VAR 0 10
22066: PPUSH
22067: CALL_OW 488
22071: PUSH
22072: LD_VAR 0 9
22076: PUSH
22077: LD_VAR 0 10
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_VAR 0 7
22090: IN
22091: NOT
22092: AND
22093: PUSH
22094: LD_VAR 0 9
22098: PPUSH
22099: LD_VAR 0 10
22103: PPUSH
22104: CALL_OW 458
22108: NOT
22109: AND
22110: IFFALSE 22152
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22112: LD_ADDR_VAR 0 7
22116: PUSH
22117: LD_VAR 0 7
22121: PPUSH
22122: LD_VAR 0 7
22126: PUSH
22127: LD_INT 1
22129: PLUS
22130: PPUSH
22131: LD_VAR 0 9
22135: PUSH
22136: LD_VAR 0 10
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PPUSH
22145: CALL_OW 1
22149: ST_TO_ADDR
22150: GO 22166
// i := i - 1 ;
22152: LD_ADDR_VAR 0 5
22156: PUSH
22157: LD_VAR 0 5
22161: PUSH
22162: LD_INT 1
22164: MINUS
22165: ST_TO_ADDR
// end ;
22166: GO 21972
22168: POP
22169: POP
// for i in tmp do
22170: LD_ADDR_VAR 0 5
22174: PUSH
22175: LD_VAR 0 7
22179: PUSH
22180: FOR_IN
22181: IFFALSE 22219
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22183: LD_VAR 0 1
22187: PPUSH
22188: LD_VAR 0 5
22192: PUSH
22193: LD_INT 1
22195: ARRAY
22196: PPUSH
22197: LD_VAR 0 5
22201: PUSH
22202: LD_INT 2
22204: ARRAY
22205: PPUSH
22206: CALL 21161 0 3
22210: NOT
22211: IFFALSE 22217
// exit ;
22213: POP
22214: POP
22215: GO 22221
22217: GO 22180
22219: POP
22220: POP
// end ;
22221: LD_VAR 0 4
22225: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22226: LD_INT 0
22228: PPUSH
22229: PPUSH
22230: PPUSH
22231: PPUSH
22232: PPUSH
22233: PPUSH
22234: PPUSH
// if not GetClass ( unit ) = class_sniper then
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 257
22244: PUSH
22245: LD_INT 5
22247: EQUAL
22248: NOT
22249: IFFALSE 22253
// exit ;
22251: GO 22641
// dist := 8 ;
22253: LD_ADDR_VAR 0 5
22257: PUSH
22258: LD_INT 8
22260: ST_TO_ADDR
// viewRange := 12 ;
22261: LD_ADDR_VAR 0 7
22265: PUSH
22266: LD_INT 12
22268: ST_TO_ADDR
// side := GetSide ( unit ) ;
22269: LD_ADDR_VAR 0 6
22273: PUSH
22274: LD_VAR 0 1
22278: PPUSH
22279: CALL_OW 255
22283: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22284: LD_INT 61
22286: PPUSH
22287: LD_VAR 0 6
22291: PPUSH
22292: CALL_OW 321
22296: PUSH
22297: LD_INT 2
22299: EQUAL
22300: IFFALSE 22310
// viewRange := 16 ;
22302: LD_ADDR_VAR 0 7
22306: PUSH
22307: LD_INT 16
22309: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22310: LD_VAR 0 1
22314: PPUSH
22315: LD_VAR 0 2
22319: PPUSH
22320: LD_VAR 0 3
22324: PPUSH
22325: CALL_OW 297
22329: PUSH
22330: LD_VAR 0 5
22334: GREATER
22335: IFFALSE 22414
// begin ComMoveXY ( unit , x , y ) ;
22337: LD_VAR 0 1
22341: PPUSH
22342: LD_VAR 0 2
22346: PPUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22356: LD_INT 35
22358: PPUSH
22359: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22363: LD_VAR 0 1
22367: PPUSH
22368: LD_VAR 0 2
22372: PPUSH
22373: LD_VAR 0 3
22377: PPUSH
22378: CALL 58189 0 3
22382: NOT
22383: IFFALSE 22387
// exit ;
22385: GO 22641
// until GetDistUnitXY ( unit , x , y ) < dist ;
22387: LD_VAR 0 1
22391: PPUSH
22392: LD_VAR 0 2
22396: PPUSH
22397: LD_VAR 0 3
22401: PPUSH
22402: CALL_OW 297
22406: PUSH
22407: LD_VAR 0 5
22411: LESS
22412: IFFALSE 22356
// end ; ComTurnXY ( unit , x , y ) ;
22414: LD_VAR 0 1
22418: PPUSH
22419: LD_VAR 0 2
22423: PPUSH
22424: LD_VAR 0 3
22428: PPUSH
22429: CALL_OW 118
// wait ( 5 ) ;
22433: LD_INT 5
22435: PPUSH
22436: CALL_OW 67
// _d := GetDir ( unit ) ;
22440: LD_ADDR_VAR 0 10
22444: PUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: CALL_OW 254
22454: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22455: LD_ADDR_VAR 0 8
22459: PUSH
22460: LD_VAR 0 1
22464: PPUSH
22465: CALL_OW 250
22469: PPUSH
22470: LD_VAR 0 10
22474: PPUSH
22475: LD_VAR 0 5
22479: PPUSH
22480: CALL_OW 272
22484: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22485: LD_ADDR_VAR 0 9
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 251
22499: PPUSH
22500: LD_VAR 0 10
22504: PPUSH
22505: LD_VAR 0 5
22509: PPUSH
22510: CALL_OW 273
22514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22515: LD_VAR 0 8
22519: PPUSH
22520: LD_VAR 0 9
22524: PPUSH
22525: CALL_OW 488
22529: NOT
22530: IFFALSE 22534
// exit ;
22532: GO 22641
// ComAnimCustom ( unit , 1 ) ;
22534: LD_VAR 0 1
22538: PPUSH
22539: LD_INT 1
22541: PPUSH
22542: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22546: LD_VAR 0 8
22550: PPUSH
22551: LD_VAR 0 9
22555: PPUSH
22556: LD_VAR 0 6
22560: PPUSH
22561: LD_VAR 0 7
22565: PPUSH
22566: CALL_OW 330
// repeat wait ( 1 ) ;
22570: LD_INT 1
22572: PPUSH
22573: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22577: LD_VAR 0 1
22581: PPUSH
22582: CALL_OW 316
22586: PUSH
22587: LD_VAR 0 1
22591: PPUSH
22592: CALL_OW 314
22596: OR
22597: PUSH
22598: LD_VAR 0 1
22602: PPUSH
22603: CALL_OW 302
22607: NOT
22608: OR
22609: PUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 301
22619: OR
22620: IFFALSE 22570
// RemoveSeeing ( _x , _y , side ) ;
22622: LD_VAR 0 8
22626: PPUSH
22627: LD_VAR 0 9
22631: PPUSH
22632: LD_VAR 0 6
22636: PPUSH
22637: CALL_OW 331
// end ; end_of_file
22641: LD_VAR 0 4
22645: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22646: LD_INT 0
22648: PPUSH
22649: PPUSH
// if exist_mode then
22650: LD_VAR 0 2
22654: IFFALSE 22679
// unit := CreateCharacter ( prefix & ident ) else
22656: LD_ADDR_VAR 0 5
22660: PUSH
22661: LD_VAR 0 3
22665: PUSH
22666: LD_VAR 0 1
22670: STR
22671: PPUSH
22672: CALL_OW 34
22676: ST_TO_ADDR
22677: GO 22694
// unit := NewCharacter ( ident ) ;
22679: LD_ADDR_VAR 0 5
22683: PUSH
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 25
22693: ST_TO_ADDR
// result := unit ;
22694: LD_ADDR_VAR 0 4
22698: PUSH
22699: LD_VAR 0 5
22703: ST_TO_ADDR
// end ;
22704: LD_VAR 0 4
22708: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22709: LD_INT 0
22711: PPUSH
22712: PPUSH
// if not side or not nation then
22713: LD_VAR 0 1
22717: NOT
22718: PUSH
22719: LD_VAR 0 2
22723: NOT
22724: OR
22725: IFFALSE 22729
// exit ;
22727: GO 23497
// case nation of nation_american :
22729: LD_VAR 0 2
22733: PUSH
22734: LD_INT 1
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22956
22742: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22743: LD_ADDR_VAR 0 4
22747: PUSH
22748: LD_INT 35
22750: PUSH
22751: LD_INT 45
22753: PUSH
22754: LD_INT 46
22756: PUSH
22757: LD_INT 47
22759: PUSH
22760: LD_INT 82
22762: PUSH
22763: LD_INT 83
22765: PUSH
22766: LD_INT 84
22768: PUSH
22769: LD_INT 85
22771: PUSH
22772: LD_INT 86
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: LD_INT 6
22783: PUSH
22784: LD_INT 15
22786: PUSH
22787: LD_INT 16
22789: PUSH
22790: LD_INT 7
22792: PUSH
22793: LD_INT 12
22795: PUSH
22796: LD_INT 13
22798: PUSH
22799: LD_INT 10
22801: PUSH
22802: LD_INT 14
22804: PUSH
22805: LD_INT 20
22807: PUSH
22808: LD_INT 21
22810: PUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 32
22819: PUSH
22820: LD_INT 27
22822: PUSH
22823: LD_INT 36
22825: PUSH
22826: LD_INT 69
22828: PUSH
22829: LD_INT 39
22831: PUSH
22832: LD_INT 34
22834: PUSH
22835: LD_INT 40
22837: PUSH
22838: LD_INT 48
22840: PUSH
22841: LD_INT 49
22843: PUSH
22844: LD_INT 50
22846: PUSH
22847: LD_INT 51
22849: PUSH
22850: LD_INT 52
22852: PUSH
22853: LD_INT 53
22855: PUSH
22856: LD_INT 54
22858: PUSH
22859: LD_INT 55
22861: PUSH
22862: LD_INT 56
22864: PUSH
22865: LD_INT 57
22867: PUSH
22868: LD_INT 58
22870: PUSH
22871: LD_INT 59
22873: PUSH
22874: LD_INT 60
22876: PUSH
22877: LD_INT 61
22879: PUSH
22880: LD_INT 62
22882: PUSH
22883: LD_INT 80
22885: PUSH
22886: LD_INT 82
22888: PUSH
22889: LD_INT 83
22891: PUSH
22892: LD_INT 84
22894: PUSH
22895: LD_INT 85
22897: PUSH
22898: LD_INT 86
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: ST_TO_ADDR
22954: GO 23421
22956: LD_INT 2
22958: DOUBLE
22959: EQUAL
22960: IFTRUE 22964
22962: GO 23190
22964: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22965: LD_ADDR_VAR 0 4
22969: PUSH
22970: LD_INT 35
22972: PUSH
22973: LD_INT 45
22975: PUSH
22976: LD_INT 46
22978: PUSH
22979: LD_INT 47
22981: PUSH
22982: LD_INT 82
22984: PUSH
22985: LD_INT 83
22987: PUSH
22988: LD_INT 84
22990: PUSH
22991: LD_INT 85
22993: PUSH
22994: LD_INT 87
22996: PUSH
22997: LD_INT 70
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: LD_INT 11
23005: PUSH
23006: LD_INT 3
23008: PUSH
23009: LD_INT 4
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: LD_INT 6
23017: PUSH
23018: LD_INT 15
23020: PUSH
23021: LD_INT 18
23023: PUSH
23024: LD_INT 7
23026: PUSH
23027: LD_INT 17
23029: PUSH
23030: LD_INT 8
23032: PUSH
23033: LD_INT 20
23035: PUSH
23036: LD_INT 21
23038: PUSH
23039: LD_INT 22
23041: PUSH
23042: LD_INT 72
23044: PUSH
23045: LD_INT 26
23047: PUSH
23048: LD_INT 69
23050: PUSH
23051: LD_INT 39
23053: PUSH
23054: LD_INT 40
23056: PUSH
23057: LD_INT 41
23059: PUSH
23060: LD_INT 42
23062: PUSH
23063: LD_INT 43
23065: PUSH
23066: LD_INT 48
23068: PUSH
23069: LD_INT 49
23071: PUSH
23072: LD_INT 50
23074: PUSH
23075: LD_INT 51
23077: PUSH
23078: LD_INT 52
23080: PUSH
23081: LD_INT 53
23083: PUSH
23084: LD_INT 54
23086: PUSH
23087: LD_INT 55
23089: PUSH
23090: LD_INT 56
23092: PUSH
23093: LD_INT 60
23095: PUSH
23096: LD_INT 61
23098: PUSH
23099: LD_INT 62
23101: PUSH
23102: LD_INT 66
23104: PUSH
23105: LD_INT 67
23107: PUSH
23108: LD_INT 68
23110: PUSH
23111: LD_INT 81
23113: PUSH
23114: LD_INT 82
23116: PUSH
23117: LD_INT 83
23119: PUSH
23120: LD_INT 84
23122: PUSH
23123: LD_INT 85
23125: PUSH
23126: LD_INT 87
23128: PUSH
23129: LD_INT 88
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: ST_TO_ADDR
23188: GO 23421
23190: LD_INT 3
23192: DOUBLE
23193: EQUAL
23194: IFTRUE 23198
23196: GO 23420
23198: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23199: LD_ADDR_VAR 0 4
23203: PUSH
23204: LD_INT 46
23206: PUSH
23207: LD_INT 47
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 82
23218: PUSH
23219: LD_INT 83
23221: PUSH
23222: LD_INT 84
23224: PUSH
23225: LD_INT 85
23227: PUSH
23228: LD_INT 86
23230: PUSH
23231: LD_INT 11
23233: PUSH
23234: LD_INT 9
23236: PUSH
23237: LD_INT 20
23239: PUSH
23240: LD_INT 19
23242: PUSH
23243: LD_INT 21
23245: PUSH
23246: LD_INT 24
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: LD_INT 25
23254: PUSH
23255: LD_INT 28
23257: PUSH
23258: LD_INT 29
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 31
23266: PUSH
23267: LD_INT 37
23269: PUSH
23270: LD_INT 38
23272: PUSH
23273: LD_INT 32
23275: PUSH
23276: LD_INT 27
23278: PUSH
23279: LD_INT 33
23281: PUSH
23282: LD_INT 69
23284: PUSH
23285: LD_INT 39
23287: PUSH
23288: LD_INT 34
23290: PUSH
23291: LD_INT 40
23293: PUSH
23294: LD_INT 71
23296: PUSH
23297: LD_INT 23
23299: PUSH
23300: LD_INT 44
23302: PUSH
23303: LD_INT 48
23305: PUSH
23306: LD_INT 49
23308: PUSH
23309: LD_INT 50
23311: PUSH
23312: LD_INT 51
23314: PUSH
23315: LD_INT 52
23317: PUSH
23318: LD_INT 53
23320: PUSH
23321: LD_INT 54
23323: PUSH
23324: LD_INT 55
23326: PUSH
23327: LD_INT 56
23329: PUSH
23330: LD_INT 57
23332: PUSH
23333: LD_INT 58
23335: PUSH
23336: LD_INT 59
23338: PUSH
23339: LD_INT 63
23341: PUSH
23342: LD_INT 64
23344: PUSH
23345: LD_INT 65
23347: PUSH
23348: LD_INT 82
23350: PUSH
23351: LD_INT 83
23353: PUSH
23354: LD_INT 84
23356: PUSH
23357: LD_INT 85
23359: PUSH
23360: LD_INT 86
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 23421
23420: POP
// if state > - 1 and state < 3 then
23421: LD_VAR 0 3
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: GREATER
23430: PUSH
23431: LD_VAR 0 3
23435: PUSH
23436: LD_INT 3
23438: LESS
23439: AND
23440: IFFALSE 23497
// for i in result do
23442: LD_ADDR_VAR 0 5
23446: PUSH
23447: LD_VAR 0 4
23451: PUSH
23452: FOR_IN
23453: IFFALSE 23495
// if GetTech ( i , side ) <> state then
23455: LD_VAR 0 5
23459: PPUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 321
23469: PUSH
23470: LD_VAR 0 3
23474: NONEQUAL
23475: IFFALSE 23493
// result := result diff i ;
23477: LD_ADDR_VAR 0 4
23481: PUSH
23482: LD_VAR 0 4
23486: PUSH
23487: LD_VAR 0 5
23491: DIFF
23492: ST_TO_ADDR
23493: GO 23452
23495: POP
23496: POP
// end ;
23497: LD_VAR 0 4
23501: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23502: LD_INT 0
23504: PPUSH
23505: PPUSH
23506: PPUSH
// result := true ;
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: LD_INT 1
23514: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23515: LD_ADDR_VAR 0 5
23519: PUSH
23520: LD_VAR 0 2
23524: PPUSH
23525: CALL_OW 480
23529: ST_TO_ADDR
// if not tmp then
23530: LD_VAR 0 5
23534: NOT
23535: IFFALSE 23539
// exit ;
23537: GO 23588
// for i in tmp do
23539: LD_ADDR_VAR 0 4
23543: PUSH
23544: LD_VAR 0 5
23548: PUSH
23549: FOR_IN
23550: IFFALSE 23586
// if GetTech ( i , side ) <> state_researched then
23552: LD_VAR 0 4
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 321
23566: PUSH
23567: LD_INT 2
23569: NONEQUAL
23570: IFFALSE 23584
// begin result := false ;
23572: LD_ADDR_VAR 0 3
23576: PUSH
23577: LD_INT 0
23579: ST_TO_ADDR
// exit ;
23580: POP
23581: POP
23582: GO 23588
// end ;
23584: GO 23549
23586: POP
23587: POP
// end ;
23588: LD_VAR 0 3
23592: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23593: LD_INT 0
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23608: LD_VAR 0 1
23612: NOT
23613: PUSH
23614: LD_VAR 0 1
23618: PPUSH
23619: CALL_OW 257
23623: PUSH
23624: LD_INT 9
23626: NONEQUAL
23627: OR
23628: IFFALSE 23632
// exit ;
23630: GO 24205
// side := GetSide ( unit ) ;
23632: LD_ADDR_VAR 0 9
23636: PUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 255
23646: ST_TO_ADDR
// tech_space := tech_spacanom ;
23647: LD_ADDR_VAR 0 12
23651: PUSH
23652: LD_INT 29
23654: ST_TO_ADDR
// tech_time := tech_taurad ;
23655: LD_ADDR_VAR 0 13
23659: PUSH
23660: LD_INT 28
23662: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23663: LD_ADDR_VAR 0 11
23667: PUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL_OW 310
23677: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23678: LD_VAR 0 11
23682: PPUSH
23683: CALL_OW 247
23687: PUSH
23688: LD_INT 2
23690: EQUAL
23691: IFFALSE 23695
// exit ;
23693: GO 24205
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23695: LD_ADDR_VAR 0 8
23699: PUSH
23700: LD_INT 81
23702: PUSH
23703: LD_VAR 0 9
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: LD_INT 21
23717: PUSH
23718: LD_INT 3
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 69
23737: ST_TO_ADDR
// if not tmp then
23738: LD_VAR 0 8
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 24205
// if in_unit then
23747: LD_VAR 0 11
23751: IFFALSE 23775
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23753: LD_ADDR_VAR 0 10
23757: PUSH
23758: LD_VAR 0 8
23762: PPUSH
23763: LD_VAR 0 11
23767: PPUSH
23768: CALL_OW 74
23772: ST_TO_ADDR
23773: GO 23795
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23775: LD_ADDR_VAR 0 10
23779: PUSH
23780: LD_VAR 0 8
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL_OW 74
23794: ST_TO_ADDR
// if not enemy then
23795: LD_VAR 0 10
23799: NOT
23800: IFFALSE 23804
// exit ;
23802: GO 24205
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23804: LD_VAR 0 11
23808: PUSH
23809: LD_VAR 0 11
23813: PPUSH
23814: LD_VAR 0 10
23818: PPUSH
23819: CALL_OW 296
23823: PUSH
23824: LD_INT 13
23826: GREATER
23827: AND
23828: PUSH
23829: LD_VAR 0 1
23833: PPUSH
23834: LD_VAR 0 10
23838: PPUSH
23839: CALL_OW 296
23843: PUSH
23844: LD_INT 12
23846: GREATER
23847: OR
23848: IFFALSE 23852
// exit ;
23850: GO 24205
// missile := [ 1 ] ;
23852: LD_ADDR_VAR 0 14
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23863: LD_VAR 0 9
23867: PPUSH
23868: LD_VAR 0 12
23872: PPUSH
23873: CALL_OW 325
23877: IFFALSE 23906
// missile := Insert ( missile , missile + 1 , 2 ) ;
23879: LD_ADDR_VAR 0 14
23883: PUSH
23884: LD_VAR 0 14
23888: PPUSH
23889: LD_VAR 0 14
23893: PUSH
23894: LD_INT 1
23896: PLUS
23897: PPUSH
23898: LD_INT 2
23900: PPUSH
23901: CALL_OW 2
23905: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23906: LD_VAR 0 9
23910: PPUSH
23911: LD_VAR 0 13
23915: PPUSH
23916: CALL_OW 325
23920: PUSH
23921: LD_VAR 0 10
23925: PPUSH
23926: CALL_OW 255
23930: PPUSH
23931: LD_VAR 0 13
23935: PPUSH
23936: CALL_OW 325
23940: NOT
23941: AND
23942: IFFALSE 23971
// missile := Insert ( missile , missile + 1 , 3 ) ;
23944: LD_ADDR_VAR 0 14
23948: PUSH
23949: LD_VAR 0 14
23953: PPUSH
23954: LD_VAR 0 14
23958: PUSH
23959: LD_INT 1
23961: PLUS
23962: PPUSH
23963: LD_INT 3
23965: PPUSH
23966: CALL_OW 2
23970: ST_TO_ADDR
// if missile < 2 then
23971: LD_VAR 0 14
23975: PUSH
23976: LD_INT 2
23978: LESS
23979: IFFALSE 23983
// exit ;
23981: GO 24205
// x := GetX ( enemy ) ;
23983: LD_ADDR_VAR 0 4
23987: PUSH
23988: LD_VAR 0 10
23992: PPUSH
23993: CALL_OW 250
23997: ST_TO_ADDR
// y := GetY ( enemy ) ;
23998: LD_ADDR_VAR 0 5
24002: PUSH
24003: LD_VAR 0 10
24007: PPUSH
24008: CALL_OW 251
24012: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24013: LD_ADDR_VAR 0 6
24017: PUSH
24018: LD_VAR 0 4
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL_OW 12
24034: PLUS
24035: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24036: LD_ADDR_VAR 0 7
24040: PUSH
24041: LD_VAR 0 5
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PPUSH
24050: LD_INT 1
24052: PPUSH
24053: CALL_OW 12
24057: PLUS
24058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24059: LD_VAR 0 6
24063: PPUSH
24064: LD_VAR 0 7
24068: PPUSH
24069: CALL_OW 488
24073: NOT
24074: IFFALSE 24096
// begin _x := x ;
24076: LD_ADDR_VAR 0 6
24080: PUSH
24081: LD_VAR 0 4
24085: ST_TO_ADDR
// _y := y ;
24086: LD_ADDR_VAR 0 7
24090: PUSH
24091: LD_VAR 0 5
24095: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24096: LD_ADDR_VAR 0 3
24100: PUSH
24101: LD_INT 1
24103: PPUSH
24104: LD_VAR 0 14
24108: PPUSH
24109: CALL_OW 12
24113: ST_TO_ADDR
// case i of 1 :
24114: LD_VAR 0 3
24118: PUSH
24119: LD_INT 1
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24144
24127: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24128: LD_VAR 0 1
24132: PPUSH
24133: LD_VAR 0 10
24137: PPUSH
24138: CALL_OW 115
24142: GO 24205
24144: LD_INT 2
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24174
24152: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24153: LD_VAR 0 1
24157: PPUSH
24158: LD_VAR 0 6
24162: PPUSH
24163: LD_VAR 0 7
24167: PPUSH
24168: CALL_OW 153
24172: GO 24205
24174: LD_INT 3
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24204
24182: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24183: LD_VAR 0 1
24187: PPUSH
24188: LD_VAR 0 6
24192: PPUSH
24193: LD_VAR 0 7
24197: PPUSH
24198: CALL_OW 154
24202: GO 24205
24204: POP
// end ;
24205: LD_VAR 0 2
24209: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
// if not unit or not building then
24218: LD_VAR 0 1
24222: NOT
24223: PUSH
24224: LD_VAR 0 2
24228: NOT
24229: OR
24230: IFFALSE 24234
// exit ;
24232: GO 24392
// x := GetX ( building ) ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 2
24243: PPUSH
24244: CALL_OW 250
24248: ST_TO_ADDR
// y := GetY ( building ) ;
24249: LD_ADDR_VAR 0 6
24253: PUSH
24254: LD_VAR 0 2
24258: PPUSH
24259: CALL_OW 251
24263: ST_TO_ADDR
// for i = 0 to 5 do
24264: LD_ADDR_VAR 0 4
24268: PUSH
24269: DOUBLE
24270: LD_INT 0
24272: DEC
24273: ST_TO_ADDR
24274: LD_INT 5
24276: PUSH
24277: FOR_TO
24278: IFFALSE 24390
// begin _x := ShiftX ( x , i , 3 ) ;
24280: LD_ADDR_VAR 0 7
24284: PUSH
24285: LD_VAR 0 5
24289: PPUSH
24290: LD_VAR 0 4
24294: PPUSH
24295: LD_INT 3
24297: PPUSH
24298: CALL_OW 272
24302: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24303: LD_ADDR_VAR 0 8
24307: PUSH
24308: LD_VAR 0 6
24312: PPUSH
24313: LD_VAR 0 4
24317: PPUSH
24318: LD_INT 3
24320: PPUSH
24321: CALL_OW 273
24325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24326: LD_VAR 0 7
24330: PPUSH
24331: LD_VAR 0 8
24335: PPUSH
24336: CALL_OW 488
24340: NOT
24341: IFFALSE 24345
// continue ;
24343: GO 24277
// if HexInfo ( _x , _y ) = 0 then
24345: LD_VAR 0 7
24349: PPUSH
24350: LD_VAR 0 8
24354: PPUSH
24355: CALL_OW 428
24359: PUSH
24360: LD_INT 0
24362: EQUAL
24363: IFFALSE 24388
// begin ComMoveXY ( unit , _x , _y ) ;
24365: LD_VAR 0 1
24369: PPUSH
24370: LD_VAR 0 7
24374: PPUSH
24375: LD_VAR 0 8
24379: PPUSH
24380: CALL_OW 111
// exit ;
24384: POP
24385: POP
24386: GO 24392
// end ; end ;
24388: GO 24277
24390: POP
24391: POP
// end ;
24392: LD_VAR 0 3
24396: RET
// export function ScanBase ( side , base_area ) ; begin
24397: LD_INT 0
24399: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24400: LD_ADDR_VAR 0 3
24404: PUSH
24405: LD_VAR 0 2
24409: PPUSH
24410: LD_INT 81
24412: PUSH
24413: LD_VAR 0 1
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PPUSH
24422: CALL_OW 70
24426: ST_TO_ADDR
// end ;
24427: LD_VAR 0 3
24431: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24432: LD_INT 0
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
// result := false ;
24438: LD_ADDR_VAR 0 2
24442: PUSH
24443: LD_INT 0
24445: ST_TO_ADDR
// side := GetSide ( unit ) ;
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 255
24460: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24461: LD_ADDR_VAR 0 4
24465: PUSH
24466: LD_VAR 0 1
24470: PPUSH
24471: CALL_OW 248
24475: ST_TO_ADDR
// case nat of 1 :
24476: LD_VAR 0 4
24480: PUSH
24481: LD_INT 1
24483: DOUBLE
24484: EQUAL
24485: IFTRUE 24489
24487: GO 24500
24489: POP
// tech := tech_lassight ; 2 :
24490: LD_ADDR_VAR 0 5
24494: PUSH
24495: LD_INT 12
24497: ST_TO_ADDR
24498: GO 24539
24500: LD_INT 2
24502: DOUBLE
24503: EQUAL
24504: IFTRUE 24508
24506: GO 24519
24508: POP
// tech := tech_mortar ; 3 :
24509: LD_ADDR_VAR 0 5
24513: PUSH
24514: LD_INT 41
24516: ST_TO_ADDR
24517: GO 24539
24519: LD_INT 3
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24538
24527: POP
// tech := tech_bazooka ; end ;
24528: LD_ADDR_VAR 0 5
24532: PUSH
24533: LD_INT 44
24535: ST_TO_ADDR
24536: GO 24539
24538: POP
// if Researched ( side , tech ) then
24539: LD_VAR 0 3
24543: PPUSH
24544: LD_VAR 0 5
24548: PPUSH
24549: CALL_OW 325
24553: IFFALSE 24580
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: LD_INT 5
24562: PUSH
24563: LD_INT 8
24565: PUSH
24566: LD_INT 9
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: PUSH
24574: LD_VAR 0 4
24578: ARRAY
24579: ST_TO_ADDR
// end ;
24580: LD_VAR 0 2
24584: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
24589: PPUSH
// if not mines then
24590: LD_VAR 0 2
24594: NOT
24595: IFFALSE 24599
// exit ;
24597: GO 24743
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24599: LD_ADDR_VAR 0 5
24603: PUSH
24604: LD_INT 81
24606: PUSH
24607: LD_VAR 0 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 3
24618: PUSH
24619: LD_INT 21
24621: PUSH
24622: LD_INT 3
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PPUSH
24637: CALL_OW 69
24641: ST_TO_ADDR
// for i in mines do
24642: LD_ADDR_VAR 0 4
24646: PUSH
24647: LD_VAR 0 2
24651: PUSH
24652: FOR_IN
24653: IFFALSE 24741
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24655: LD_VAR 0 4
24659: PUSH
24660: LD_INT 1
24662: ARRAY
24663: PPUSH
24664: LD_VAR 0 4
24668: PUSH
24669: LD_INT 2
24671: ARRAY
24672: PPUSH
24673: CALL_OW 458
24677: NOT
24678: IFFALSE 24682
// continue ;
24680: GO 24652
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24682: LD_VAR 0 4
24686: PUSH
24687: LD_INT 1
24689: ARRAY
24690: PPUSH
24691: LD_VAR 0 4
24695: PUSH
24696: LD_INT 2
24698: ARRAY
24699: PPUSH
24700: CALL_OW 428
24704: PUSH
24705: LD_VAR 0 5
24709: IN
24710: IFFALSE 24739
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24712: LD_VAR 0 4
24716: PUSH
24717: LD_INT 1
24719: ARRAY
24720: PPUSH
24721: LD_VAR 0 4
24725: PUSH
24726: LD_INT 2
24728: ARRAY
24729: PPUSH
24730: LD_VAR 0 1
24734: PPUSH
24735: CALL_OW 456
// end ;
24739: GO 24652
24741: POP
24742: POP
// end ;
24743: LD_VAR 0 3
24747: RET
// export function Count ( array ) ; var i ; begin
24748: LD_INT 0
24750: PPUSH
24751: PPUSH
// result := 0 ;
24752: LD_ADDR_VAR 0 2
24756: PUSH
24757: LD_INT 0
24759: ST_TO_ADDR
// for i in array do
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_VAR 0 1
24769: PUSH
24770: FOR_IN
24771: IFFALSE 24795
// if i then
24773: LD_VAR 0 3
24777: IFFALSE 24793
// result := result + 1 ;
24779: LD_ADDR_VAR 0 2
24783: PUSH
24784: LD_VAR 0 2
24788: PUSH
24789: LD_INT 1
24791: PLUS
24792: ST_TO_ADDR
24793: GO 24770
24795: POP
24796: POP
// end ;
24797: LD_VAR 0 2
24801: RET
// export function IsEmpty ( building ) ; begin
24802: LD_INT 0
24804: PPUSH
// if not building then
24805: LD_VAR 0 1
24809: NOT
24810: IFFALSE 24814
// exit ;
24812: GO 24857
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24814: LD_ADDR_VAR 0 2
24818: PUSH
24819: LD_VAR 0 1
24823: PUSH
24824: LD_INT 22
24826: PUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: CALL_OW 255
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 58
24843: PUSH
24844: EMPTY
24845: LIST
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PPUSH
24851: CALL_OW 69
24855: IN
24856: ST_TO_ADDR
// end ;
24857: LD_VAR 0 2
24861: RET
// export function IsNotFull ( building ) ; begin
24862: LD_INT 0
24864: PPUSH
// if not building then
24865: LD_VAR 0 1
24869: NOT
24870: IFFALSE 24874
// exit ;
24872: GO 24893
// result := UnitsInside ( building ) < 6 ;
24874: LD_ADDR_VAR 0 2
24878: PUSH
24879: LD_VAR 0 1
24883: PPUSH
24884: CALL_OW 313
24888: PUSH
24889: LD_INT 6
24891: LESS
24892: ST_TO_ADDR
// end ;
24893: LD_VAR 0 2
24897: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24898: LD_INT 0
24900: PPUSH
24901: PPUSH
24902: PPUSH
24903: PPUSH
// tmp := [ ] ;
24904: LD_ADDR_VAR 0 3
24908: PUSH
24909: EMPTY
24910: ST_TO_ADDR
// list := [ ] ;
24911: LD_ADDR_VAR 0 5
24915: PUSH
24916: EMPTY
24917: ST_TO_ADDR
// for i = 16 to 25 do
24918: LD_ADDR_VAR 0 4
24922: PUSH
24923: DOUBLE
24924: LD_INT 16
24926: DEC
24927: ST_TO_ADDR
24928: LD_INT 25
24930: PUSH
24931: FOR_TO
24932: IFFALSE 25005
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_VAR 0 1
24951: PPUSH
24952: CALL_OW 255
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 91
24963: PUSH
24964: LD_VAR 0 1
24968: PUSH
24969: LD_INT 6
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 30
24979: PUSH
24980: LD_VAR 0 4
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: PPUSH
24997: CALL_OW 69
25001: ADD
25002: ST_TO_ADDR
25003: GO 24931
25005: POP
25006: POP
// for i = 1 to tmp do
25007: LD_ADDR_VAR 0 4
25011: PUSH
25012: DOUBLE
25013: LD_INT 1
25015: DEC
25016: ST_TO_ADDR
25017: LD_VAR 0 3
25021: PUSH
25022: FOR_TO
25023: IFFALSE 25111
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25025: LD_ADDR_VAR 0 5
25029: PUSH
25030: LD_VAR 0 5
25034: PUSH
25035: LD_VAR 0 3
25039: PUSH
25040: LD_VAR 0 4
25044: ARRAY
25045: PPUSH
25046: CALL_OW 266
25050: PUSH
25051: LD_VAR 0 3
25055: PUSH
25056: LD_VAR 0 4
25060: ARRAY
25061: PPUSH
25062: CALL_OW 250
25066: PUSH
25067: LD_VAR 0 3
25071: PUSH
25072: LD_VAR 0 4
25076: ARRAY
25077: PPUSH
25078: CALL_OW 251
25082: PUSH
25083: LD_VAR 0 3
25087: PUSH
25088: LD_VAR 0 4
25092: ARRAY
25093: PPUSH
25094: CALL_OW 254
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: ADD
25108: ST_TO_ADDR
25109: GO 25022
25111: POP
25112: POP
// result := list ;
25113: LD_ADDR_VAR 0 2
25117: PUSH
25118: LD_VAR 0 5
25122: ST_TO_ADDR
// end ;
25123: LD_VAR 0 2
25127: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25128: LD_INT 0
25130: PPUSH
25131: PPUSH
25132: PPUSH
25133: PPUSH
25134: PPUSH
25135: PPUSH
25136: PPUSH
// if not factory then
25137: LD_VAR 0 1
25141: NOT
25142: IFFALSE 25146
// exit ;
25144: GO 25739
// if control = control_apeman then
25146: LD_VAR 0 4
25150: PUSH
25151: LD_INT 5
25153: EQUAL
25154: IFFALSE 25263
// begin tmp := UnitsInside ( factory ) ;
25156: LD_ADDR_VAR 0 8
25160: PUSH
25161: LD_VAR 0 1
25165: PPUSH
25166: CALL_OW 313
25170: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25171: LD_VAR 0 8
25175: PPUSH
25176: LD_INT 25
25178: PUSH
25179: LD_INT 12
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PPUSH
25186: CALL_OW 72
25190: NOT
25191: IFFALSE 25201
// control := control_manual ;
25193: LD_ADDR_VAR 0 4
25197: PUSH
25198: LD_INT 1
25200: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25201: LD_ADDR_VAR 0 8
25205: PUSH
25206: LD_VAR 0 1
25210: PPUSH
25211: CALL 24898 0 1
25215: ST_TO_ADDR
// if tmp then
25216: LD_VAR 0 8
25220: IFFALSE 25263
// begin for i in tmp do
25222: LD_ADDR_VAR 0 7
25226: PUSH
25227: LD_VAR 0 8
25231: PUSH
25232: FOR_IN
25233: IFFALSE 25261
// if i [ 1 ] = b_ext_radio then
25235: LD_VAR 0 7
25239: PUSH
25240: LD_INT 1
25242: ARRAY
25243: PUSH
25244: LD_INT 22
25246: EQUAL
25247: IFFALSE 25259
// begin control := control_remote ;
25249: LD_ADDR_VAR 0 4
25253: PUSH
25254: LD_INT 2
25256: ST_TO_ADDR
// break ;
25257: GO 25261
// end ;
25259: GO 25232
25261: POP
25262: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25263: LD_VAR 0 1
25267: PPUSH
25268: LD_VAR 0 2
25272: PPUSH
25273: LD_VAR 0 3
25277: PPUSH
25278: LD_VAR 0 4
25282: PPUSH
25283: LD_VAR 0 5
25287: PPUSH
25288: CALL_OW 448
25292: IFFALSE 25327
// begin result := [ chassis , engine , control , weapon ] ;
25294: LD_ADDR_VAR 0 6
25298: PUSH
25299: LD_VAR 0 2
25303: PUSH
25304: LD_VAR 0 3
25308: PUSH
25309: LD_VAR 0 4
25313: PUSH
25314: LD_VAR 0 5
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
// exit ;
25325: GO 25739
// end ; _chassis := AvailableChassisList ( factory ) ;
25327: LD_ADDR_VAR 0 9
25331: PUSH
25332: LD_VAR 0 1
25336: PPUSH
25337: CALL_OW 475
25341: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25342: LD_ADDR_VAR 0 11
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 476
25356: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25357: LD_ADDR_VAR 0 12
25361: PUSH
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 477
25371: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25372: LD_ADDR_VAR 0 10
25376: PUSH
25377: LD_VAR 0 1
25381: PPUSH
25382: CALL_OW 478
25386: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25387: LD_VAR 0 9
25391: NOT
25392: PUSH
25393: LD_VAR 0 11
25397: NOT
25398: OR
25399: PUSH
25400: LD_VAR 0 12
25404: NOT
25405: OR
25406: PUSH
25407: LD_VAR 0 10
25411: NOT
25412: OR
25413: IFFALSE 25448
// begin result := [ chassis , engine , control , weapon ] ;
25415: LD_ADDR_VAR 0 6
25419: PUSH
25420: LD_VAR 0 2
25424: PUSH
25425: LD_VAR 0 3
25429: PUSH
25430: LD_VAR 0 4
25434: PUSH
25435: LD_VAR 0 5
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
// exit ;
25446: GO 25739
// end ; if not chassis in _chassis then
25448: LD_VAR 0 2
25452: PUSH
25453: LD_VAR 0 9
25457: IN
25458: NOT
25459: IFFALSE 25485
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25461: LD_ADDR_VAR 0 2
25465: PUSH
25466: LD_VAR 0 9
25470: PUSH
25471: LD_INT 1
25473: PPUSH
25474: LD_VAR 0 9
25478: PPUSH
25479: CALL_OW 12
25483: ARRAY
25484: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25485: LD_VAR 0 2
25489: PPUSH
25490: LD_VAR 0 3
25494: PPUSH
25495: CALL 25744 0 2
25499: NOT
25500: IFFALSE 25559
// repeat engine := _engine [ 1 ] ;
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: LD_VAR 0 11
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25516: LD_ADDR_VAR 0 11
25520: PUSH
25521: LD_VAR 0 11
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 3
25533: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25534: LD_VAR 0 2
25538: PPUSH
25539: LD_VAR 0 3
25543: PPUSH
25544: CALL 25744 0 2
25548: PUSH
25549: LD_VAR 0 11
25553: PUSH
25554: EMPTY
25555: EQUAL
25556: OR
25557: IFFALSE 25502
// if not control in _control then
25559: LD_VAR 0 4
25563: PUSH
25564: LD_VAR 0 12
25568: IN
25569: NOT
25570: IFFALSE 25596
// control := _control [ rand ( 1 , _control ) ] ;
25572: LD_ADDR_VAR 0 4
25576: PUSH
25577: LD_VAR 0 12
25581: PUSH
25582: LD_INT 1
25584: PPUSH
25585: LD_VAR 0 12
25589: PPUSH
25590: CALL_OW 12
25594: ARRAY
25595: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25596: LD_VAR 0 2
25600: PPUSH
25601: LD_VAR 0 5
25605: PPUSH
25606: CALL 25964 0 2
25610: NOT
25611: IFFALSE 25670
// repeat weapon := _weapon [ 1 ] ;
25613: LD_ADDR_VAR 0 5
25617: PUSH
25618: LD_VAR 0 10
25622: PUSH
25623: LD_INT 1
25625: ARRAY
25626: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25627: LD_ADDR_VAR 0 10
25631: PUSH
25632: LD_VAR 0 10
25636: PPUSH
25637: LD_INT 1
25639: PPUSH
25640: CALL_OW 3
25644: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25645: LD_VAR 0 2
25649: PPUSH
25650: LD_VAR 0 5
25654: PPUSH
25655: CALL 25964 0 2
25659: PUSH
25660: LD_VAR 0 10
25664: PUSH
25665: EMPTY
25666: EQUAL
25667: OR
25668: IFFALSE 25613
// result := [ ] ;
25670: LD_ADDR_VAR 0 6
25674: PUSH
25675: EMPTY
25676: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: LD_VAR 0 3
25691: PPUSH
25692: LD_VAR 0 4
25696: PPUSH
25697: LD_VAR 0 5
25701: PPUSH
25702: CALL_OW 448
25706: IFFALSE 25739
// result := [ chassis , engine , control , weapon ] ;
25708: LD_ADDR_VAR 0 6
25712: PUSH
25713: LD_VAR 0 2
25717: PUSH
25718: LD_VAR 0 3
25722: PUSH
25723: LD_VAR 0 4
25727: PUSH
25728: LD_VAR 0 5
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: ST_TO_ADDR
// end ;
25739: LD_VAR 0 6
25743: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25744: LD_INT 0
25746: PPUSH
// if not chassis or not engine then
25747: LD_VAR 0 1
25751: NOT
25752: PUSH
25753: LD_VAR 0 2
25757: NOT
25758: OR
25759: IFFALSE 25763
// exit ;
25761: GO 25959
// case engine of engine_solar :
25763: LD_VAR 0 2
25767: PUSH
25768: LD_INT 2
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25814
25776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25777: LD_ADDR_VAR 0 3
25781: PUSH
25782: LD_INT 11
25784: PUSH
25785: LD_INT 12
25787: PUSH
25788: LD_INT 13
25790: PUSH
25791: LD_INT 14
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: ST_TO_ADDR
25812: GO 25943
25814: LD_INT 1
25816: DOUBLE
25817: EQUAL
25818: IFTRUE 25822
25820: GO 25884
25822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: LD_INT 11
25830: PUSH
25831: LD_INT 12
25833: PUSH
25834: LD_INT 13
25836: PUSH
25837: LD_INT 14
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 4
25851: PUSH
25852: LD_INT 5
25854: PUSH
25855: LD_INT 21
25857: PUSH
25858: LD_INT 23
25860: PUSH
25861: LD_INT 22
25863: PUSH
25864: LD_INT 24
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: ST_TO_ADDR
25882: GO 25943
25884: LD_INT 3
25886: DOUBLE
25887: EQUAL
25888: IFTRUE 25892
25890: GO 25942
25892: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25893: LD_ADDR_VAR 0 3
25897: PUSH
25898: LD_INT 13
25900: PUSH
25901: LD_INT 14
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 4
25912: PUSH
25913: LD_INT 5
25915: PUSH
25916: LD_INT 21
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_INT 23
25924: PUSH
25925: LD_INT 24
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: ST_TO_ADDR
25940: GO 25943
25942: POP
// result := ( chassis in result ) ;
25943: LD_ADDR_VAR 0 3
25947: PUSH
25948: LD_VAR 0 1
25952: PUSH
25953: LD_VAR 0 3
25957: IN
25958: ST_TO_ADDR
// end ;
25959: LD_VAR 0 3
25963: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25964: LD_INT 0
25966: PPUSH
// if not chassis or not weapon then
25967: LD_VAR 0 1
25971: NOT
25972: PUSH
25973: LD_VAR 0 2
25977: NOT
25978: OR
25979: IFFALSE 25983
// exit ;
25981: GO 27045
// case weapon of us_machine_gun :
25983: LD_VAR 0 2
25987: PUSH
25988: LD_INT 2
25990: DOUBLE
25991: EQUAL
25992: IFTRUE 25996
25994: GO 26026
25996: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25997: LD_ADDR_VAR 0 3
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 3
26010: PUSH
26011: LD_INT 4
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: ST_TO_ADDR
26024: GO 27029
26026: LD_INT 3
26028: DOUBLE
26029: EQUAL
26030: IFTRUE 26034
26032: GO 26064
26034: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: LD_INT 3
26048: PUSH
26049: LD_INT 4
26051: PUSH
26052: LD_INT 5
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: ST_TO_ADDR
26062: GO 27029
26064: LD_INT 11
26066: DOUBLE
26067: EQUAL
26068: IFTRUE 26072
26070: GO 26102
26072: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26073: LD_ADDR_VAR 0 3
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: LD_INT 3
26086: PUSH
26087: LD_INT 4
26089: PUSH
26090: LD_INT 5
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
26100: GO 27029
26102: LD_INT 4
26104: DOUBLE
26105: EQUAL
26106: IFTRUE 26110
26108: GO 26136
26110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26111: LD_ADDR_VAR 0 3
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 3
26121: PUSH
26122: LD_INT 4
26124: PUSH
26125: LD_INT 5
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: ST_TO_ADDR
26134: GO 27029
26136: LD_INT 5
26138: DOUBLE
26139: EQUAL
26140: IFTRUE 26144
26142: GO 26170
26144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26145: LD_ADDR_VAR 0 3
26149: PUSH
26150: LD_INT 2
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: LD_INT 4
26158: PUSH
26159: LD_INT 5
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: ST_TO_ADDR
26168: GO 27029
26170: LD_INT 9
26172: DOUBLE
26173: EQUAL
26174: IFTRUE 26178
26176: GO 26204
26178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26179: LD_ADDR_VAR 0 3
26183: PUSH
26184: LD_INT 2
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: LD_INT 4
26192: PUSH
26193: LD_INT 5
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: ST_TO_ADDR
26202: GO 27029
26204: LD_INT 7
26206: DOUBLE
26207: EQUAL
26208: IFTRUE 26212
26210: GO 26238
26212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26213: LD_ADDR_VAR 0 3
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: LD_INT 4
26226: PUSH
26227: LD_INT 5
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: ST_TO_ADDR
26236: GO 27029
26238: LD_INT 12
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26272
26246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26247: LD_ADDR_VAR 0 3
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: LD_INT 4
26260: PUSH
26261: LD_INT 5
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: ST_TO_ADDR
26270: GO 27029
26272: LD_INT 13
26274: DOUBLE
26275: EQUAL
26276: IFTRUE 26280
26278: GO 26306
26280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26281: LD_ADDR_VAR 0 3
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: LD_INT 3
26291: PUSH
26292: LD_INT 4
26294: PUSH
26295: LD_INT 5
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: ST_TO_ADDR
26304: GO 27029
26306: LD_INT 14
26308: DOUBLE
26309: EQUAL
26310: IFTRUE 26314
26312: GO 26332
26314: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26315: LD_ADDR_VAR 0 3
26319: PUSH
26320: LD_INT 4
26322: PUSH
26323: LD_INT 5
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: ST_TO_ADDR
26330: GO 27029
26332: LD_INT 6
26334: DOUBLE
26335: EQUAL
26336: IFTRUE 26340
26338: GO 26358
26340: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26341: LD_ADDR_VAR 0 3
26345: PUSH
26346: LD_INT 4
26348: PUSH
26349: LD_INT 5
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: ST_TO_ADDR
26356: GO 27029
26358: LD_INT 10
26360: DOUBLE
26361: EQUAL
26362: IFTRUE 26366
26364: GO 26384
26366: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26367: LD_ADDR_VAR 0 3
26371: PUSH
26372: LD_INT 4
26374: PUSH
26375: LD_INT 5
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: ST_TO_ADDR
26382: GO 27029
26384: LD_INT 22
26386: DOUBLE
26387: EQUAL
26388: IFTRUE 26392
26390: GO 26418
26392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26393: LD_ADDR_VAR 0 3
26397: PUSH
26398: LD_INT 11
26400: PUSH
26401: LD_INT 12
26403: PUSH
26404: LD_INT 13
26406: PUSH
26407: LD_INT 14
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: ST_TO_ADDR
26416: GO 27029
26418: LD_INT 23
26420: DOUBLE
26421: EQUAL
26422: IFTRUE 26426
26424: GO 26452
26426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_INT 11
26434: PUSH
26435: LD_INT 12
26437: PUSH
26438: LD_INT 13
26440: PUSH
26441: LD_INT 14
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
26450: GO 27029
26452: LD_INT 24
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26486
26460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26461: LD_ADDR_VAR 0 3
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: LD_INT 12
26471: PUSH
26472: LD_INT 13
26474: PUSH
26475: LD_INT 14
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
26484: GO 27029
26486: LD_INT 30
26488: DOUBLE
26489: EQUAL
26490: IFTRUE 26494
26492: GO 26520
26494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 11
26502: PUSH
26503: LD_INT 12
26505: PUSH
26506: LD_INT 13
26508: PUSH
26509: LD_INT 14
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: ST_TO_ADDR
26518: GO 27029
26520: LD_INT 25
26522: DOUBLE
26523: EQUAL
26524: IFTRUE 26528
26526: GO 26546
26528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26529: LD_ADDR_VAR 0 3
26533: PUSH
26534: LD_INT 13
26536: PUSH
26537: LD_INT 14
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: ST_TO_ADDR
26544: GO 27029
26546: LD_INT 27
26548: DOUBLE
26549: EQUAL
26550: IFTRUE 26554
26552: GO 26572
26554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_INT 13
26562: PUSH
26563: LD_INT 14
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: ST_TO_ADDR
26570: GO 27029
26572: LD_EXP 12
26576: DOUBLE
26577: EQUAL
26578: IFTRUE 26582
26580: GO 26608
26582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26583: LD_ADDR_VAR 0 3
26587: PUSH
26588: LD_INT 11
26590: PUSH
26591: LD_INT 12
26593: PUSH
26594: LD_INT 13
26596: PUSH
26597: LD_INT 14
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: ST_TO_ADDR
26606: GO 27029
26608: LD_INT 28
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26634
26616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 13
26624: PUSH
26625: LD_INT 14
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: ST_TO_ADDR
26632: GO 27029
26634: LD_INT 29
26636: DOUBLE
26637: EQUAL
26638: IFTRUE 26642
26640: GO 26660
26642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26643: LD_ADDR_VAR 0 3
26647: PUSH
26648: LD_INT 13
26650: PUSH
26651: LD_INT 14
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: ST_TO_ADDR
26658: GO 27029
26660: LD_INT 31
26662: DOUBLE
26663: EQUAL
26664: IFTRUE 26668
26666: GO 26686
26668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_INT 13
26676: PUSH
26677: LD_INT 14
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: ST_TO_ADDR
26684: GO 27029
26686: LD_INT 26
26688: DOUBLE
26689: EQUAL
26690: IFTRUE 26694
26692: GO 26712
26694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: LD_INT 13
26702: PUSH
26703: LD_INT 14
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: ST_TO_ADDR
26710: GO 27029
26712: LD_INT 42
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 26746
26720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26721: LD_ADDR_VAR 0 3
26725: PUSH
26726: LD_INT 21
26728: PUSH
26729: LD_INT 22
26731: PUSH
26732: LD_INT 23
26734: PUSH
26735: LD_INT 24
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: ST_TO_ADDR
26744: GO 27029
26746: LD_INT 43
26748: DOUBLE
26749: EQUAL
26750: IFTRUE 26754
26752: GO 26780
26754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26755: LD_ADDR_VAR 0 3
26759: PUSH
26760: LD_INT 21
26762: PUSH
26763: LD_INT 22
26765: PUSH
26766: LD_INT 23
26768: PUSH
26769: LD_INT 24
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: ST_TO_ADDR
26778: GO 27029
26780: LD_INT 44
26782: DOUBLE
26783: EQUAL
26784: IFTRUE 26788
26786: GO 26814
26788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_INT 21
26796: PUSH
26797: LD_INT 22
26799: PUSH
26800: LD_INT 23
26802: PUSH
26803: LD_INT 24
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
26812: GO 27029
26814: LD_INT 45
26816: DOUBLE
26817: EQUAL
26818: IFTRUE 26822
26820: GO 26848
26822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: LD_INT 21
26830: PUSH
26831: LD_INT 22
26833: PUSH
26834: LD_INT 23
26836: PUSH
26837: LD_INT 24
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: ST_TO_ADDR
26846: GO 27029
26848: LD_INT 49
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 26882
26856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_INT 21
26864: PUSH
26865: LD_INT 22
26867: PUSH
26868: LD_INT 23
26870: PUSH
26871: LD_INT 24
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: ST_TO_ADDR
26880: GO 27029
26882: LD_INT 51
26884: DOUBLE
26885: EQUAL
26886: IFTRUE 26890
26888: GO 26916
26890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26891: LD_ADDR_VAR 0 3
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 22
26901: PUSH
26902: LD_INT 23
26904: PUSH
26905: LD_INT 24
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
26914: GO 27029
26916: LD_INT 52
26918: DOUBLE
26919: EQUAL
26920: IFTRUE 26924
26922: GO 26950
26924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: LD_INT 21
26932: PUSH
26933: LD_INT 22
26935: PUSH
26936: LD_INT 23
26938: PUSH
26939: LD_INT 24
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: ST_TO_ADDR
26948: GO 27029
26950: LD_INT 53
26952: DOUBLE
26953: EQUAL
26954: IFTRUE 26958
26956: GO 26976
26958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26959: LD_ADDR_VAR 0 3
26963: PUSH
26964: LD_INT 23
26966: PUSH
26967: LD_INT 24
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: ST_TO_ADDR
26974: GO 27029
26976: LD_INT 46
26978: DOUBLE
26979: EQUAL
26980: IFTRUE 26984
26982: GO 27002
26984: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26985: LD_ADDR_VAR 0 3
26989: PUSH
26990: LD_INT 23
26992: PUSH
26993: LD_INT 24
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: ST_TO_ADDR
27000: GO 27029
27002: LD_INT 47
27004: DOUBLE
27005: EQUAL
27006: IFTRUE 27010
27008: GO 27028
27010: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_INT 23
27018: PUSH
27019: LD_INT 24
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: ST_TO_ADDR
27026: GO 27029
27028: POP
// result := ( chassis in result ) ;
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_VAR 0 1
27038: PUSH
27039: LD_VAR 0 3
27043: IN
27044: ST_TO_ADDR
// end ;
27045: LD_VAR 0 3
27049: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27050: LD_INT 0
27052: PPUSH
27053: PPUSH
27054: PPUSH
27055: PPUSH
27056: PPUSH
27057: PPUSH
27058: PPUSH
// result := array ;
27059: LD_ADDR_VAR 0 5
27063: PUSH
27064: LD_VAR 0 1
27068: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27069: LD_VAR 0 1
27073: NOT
27074: PUSH
27075: LD_VAR 0 2
27079: NOT
27080: OR
27081: PUSH
27082: LD_VAR 0 3
27086: NOT
27087: OR
27088: PUSH
27089: LD_VAR 0 2
27093: PUSH
27094: LD_VAR 0 1
27098: GREATER
27099: OR
27100: PUSH
27101: LD_VAR 0 3
27105: PUSH
27106: LD_VAR 0 1
27110: GREATER
27111: OR
27112: IFFALSE 27116
// exit ;
27114: GO 27412
// if direction then
27116: LD_VAR 0 4
27120: IFFALSE 27184
// begin d := 1 ;
27122: LD_ADDR_VAR 0 9
27126: PUSH
27127: LD_INT 1
27129: ST_TO_ADDR
// if i_from > i_to then
27130: LD_VAR 0 2
27134: PUSH
27135: LD_VAR 0 3
27139: GREATER
27140: IFFALSE 27166
// length := ( array - i_from ) + i_to else
27142: LD_ADDR_VAR 0 11
27146: PUSH
27147: LD_VAR 0 1
27151: PUSH
27152: LD_VAR 0 2
27156: MINUS
27157: PUSH
27158: LD_VAR 0 3
27162: PLUS
27163: ST_TO_ADDR
27164: GO 27182
// length := i_to - i_from ;
27166: LD_ADDR_VAR 0 11
27170: PUSH
27171: LD_VAR 0 3
27175: PUSH
27176: LD_VAR 0 2
27180: MINUS
27181: ST_TO_ADDR
// end else
27182: GO 27245
// begin d := - 1 ;
27184: LD_ADDR_VAR 0 9
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: ST_TO_ADDR
// if i_from > i_to then
27193: LD_VAR 0 2
27197: PUSH
27198: LD_VAR 0 3
27202: GREATER
27203: IFFALSE 27223
// length := i_from - i_to else
27205: LD_ADDR_VAR 0 11
27209: PUSH
27210: LD_VAR 0 2
27214: PUSH
27215: LD_VAR 0 3
27219: MINUS
27220: ST_TO_ADDR
27221: GO 27245
// length := ( array - i_to ) + i_from ;
27223: LD_ADDR_VAR 0 11
27227: PUSH
27228: LD_VAR 0 1
27232: PUSH
27233: LD_VAR 0 3
27237: MINUS
27238: PUSH
27239: LD_VAR 0 2
27243: PLUS
27244: ST_TO_ADDR
// end ; if not length then
27245: LD_VAR 0 11
27249: NOT
27250: IFFALSE 27254
// exit ;
27252: GO 27412
// tmp := array ;
27254: LD_ADDR_VAR 0 10
27258: PUSH
27259: LD_VAR 0 1
27263: ST_TO_ADDR
// for i = 1 to length do
27264: LD_ADDR_VAR 0 6
27268: PUSH
27269: DOUBLE
27270: LD_INT 1
27272: DEC
27273: ST_TO_ADDR
27274: LD_VAR 0 11
27278: PUSH
27279: FOR_TO
27280: IFFALSE 27400
// begin for j = 1 to array do
27282: LD_ADDR_VAR 0 7
27286: PUSH
27287: DOUBLE
27288: LD_INT 1
27290: DEC
27291: ST_TO_ADDR
27292: LD_VAR 0 1
27296: PUSH
27297: FOR_TO
27298: IFFALSE 27386
// begin k := j + d ;
27300: LD_ADDR_VAR 0 8
27304: PUSH
27305: LD_VAR 0 7
27309: PUSH
27310: LD_VAR 0 9
27314: PLUS
27315: ST_TO_ADDR
// if k > array then
27316: LD_VAR 0 8
27320: PUSH
27321: LD_VAR 0 1
27325: GREATER
27326: IFFALSE 27336
// k := 1 ;
27328: LD_ADDR_VAR 0 8
27332: PUSH
27333: LD_INT 1
27335: ST_TO_ADDR
// if not k then
27336: LD_VAR 0 8
27340: NOT
27341: IFFALSE 27353
// k := array ;
27343: LD_ADDR_VAR 0 8
27347: PUSH
27348: LD_VAR 0 1
27352: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27353: LD_ADDR_VAR 0 10
27357: PUSH
27358: LD_VAR 0 10
27362: PPUSH
27363: LD_VAR 0 8
27367: PPUSH
27368: LD_VAR 0 1
27372: PUSH
27373: LD_VAR 0 7
27377: ARRAY
27378: PPUSH
27379: CALL_OW 1
27383: ST_TO_ADDR
// end ;
27384: GO 27297
27386: POP
27387: POP
// array := tmp ;
27388: LD_ADDR_VAR 0 1
27392: PUSH
27393: LD_VAR 0 10
27397: ST_TO_ADDR
// end ;
27398: GO 27279
27400: POP
27401: POP
// result := array ;
27402: LD_ADDR_VAR 0 5
27406: PUSH
27407: LD_VAR 0 1
27411: ST_TO_ADDR
// end ;
27412: LD_VAR 0 5
27416: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27417: LD_INT 0
27419: PPUSH
27420: PPUSH
// result := 0 ;
27421: LD_ADDR_VAR 0 3
27425: PUSH
27426: LD_INT 0
27428: ST_TO_ADDR
// if not array or not value in array then
27429: LD_VAR 0 1
27433: NOT
27434: PUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_VAR 0 1
27444: IN
27445: NOT
27446: OR
27447: IFFALSE 27451
// exit ;
27449: GO 27505
// for i = 1 to array do
27451: LD_ADDR_VAR 0 4
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_VAR 0 1
27465: PUSH
27466: FOR_TO
27467: IFFALSE 27503
// if value = array [ i ] then
27469: LD_VAR 0 2
27473: PUSH
27474: LD_VAR 0 1
27478: PUSH
27479: LD_VAR 0 4
27483: ARRAY
27484: EQUAL
27485: IFFALSE 27501
// begin result := i ;
27487: LD_ADDR_VAR 0 3
27491: PUSH
27492: LD_VAR 0 4
27496: ST_TO_ADDR
// exit ;
27497: POP
27498: POP
27499: GO 27505
// end ;
27501: GO 27466
27503: POP
27504: POP
// end ;
27505: LD_VAR 0 3
27509: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27510: LD_INT 0
27512: PPUSH
// vc_chassis := chassis ;
27513: LD_ADDR_OWVAR 37
27517: PUSH
27518: LD_VAR 0 1
27522: ST_TO_ADDR
// vc_engine := engine ;
27523: LD_ADDR_OWVAR 39
27527: PUSH
27528: LD_VAR 0 2
27532: ST_TO_ADDR
// vc_control := control ;
27533: LD_ADDR_OWVAR 38
27537: PUSH
27538: LD_VAR 0 3
27542: ST_TO_ADDR
// vc_weapon := weapon ;
27543: LD_ADDR_OWVAR 40
27547: PUSH
27548: LD_VAR 0 4
27552: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27553: LD_ADDR_OWVAR 41
27557: PUSH
27558: LD_VAR 0 5
27562: ST_TO_ADDR
// end ;
27563: LD_VAR 0 6
27567: RET
// export function WantPlant ( unit ) ; var task ; begin
27568: LD_INT 0
27570: PPUSH
27571: PPUSH
// result := false ;
27572: LD_ADDR_VAR 0 2
27576: PUSH
27577: LD_INT 0
27579: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27580: LD_ADDR_VAR 0 3
27584: PUSH
27585: LD_VAR 0 1
27589: PPUSH
27590: CALL_OW 437
27594: ST_TO_ADDR
// if task then
27595: LD_VAR 0 3
27599: IFFALSE 27627
// if task [ 1 ] [ 1 ] = p then
27601: LD_VAR 0 3
27605: PUSH
27606: LD_INT 1
27608: ARRAY
27609: PUSH
27610: LD_INT 1
27612: ARRAY
27613: PUSH
27614: LD_STRING p
27616: EQUAL
27617: IFFALSE 27627
// result := true ;
27619: LD_ADDR_VAR 0 2
27623: PUSH
27624: LD_INT 1
27626: ST_TO_ADDR
// end ;
27627: LD_VAR 0 2
27631: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
// if pos < 1 then
27638: LD_VAR 0 2
27642: PUSH
27643: LD_INT 1
27645: LESS
27646: IFFALSE 27650
// exit ;
27648: GO 27953
// if pos = 1 then
27650: LD_VAR 0 2
27654: PUSH
27655: LD_INT 1
27657: EQUAL
27658: IFFALSE 27691
// result := Replace ( arr , pos [ 1 ] , value ) else
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_VAR 0 2
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: PPUSH
27679: LD_VAR 0 3
27683: PPUSH
27684: CALL_OW 1
27688: ST_TO_ADDR
27689: GO 27953
// begin tmp := arr ;
27691: LD_ADDR_VAR 0 6
27695: PUSH
27696: LD_VAR 0 1
27700: ST_TO_ADDR
// s_arr := [ tmp ] ;
27701: LD_ADDR_VAR 0 7
27705: PUSH
27706: LD_VAR 0 6
27710: PUSH
27711: EMPTY
27712: LIST
27713: ST_TO_ADDR
// for i = 1 to pos - 1 do
27714: LD_ADDR_VAR 0 5
27718: PUSH
27719: DOUBLE
27720: LD_INT 1
27722: DEC
27723: ST_TO_ADDR
27724: LD_VAR 0 2
27728: PUSH
27729: LD_INT 1
27731: MINUS
27732: PUSH
27733: FOR_TO
27734: IFFALSE 27779
// begin tmp := tmp [ pos [ i ] ] ;
27736: LD_ADDR_VAR 0 6
27740: PUSH
27741: LD_VAR 0 6
27745: PUSH
27746: LD_VAR 0 2
27750: PUSH
27751: LD_VAR 0 5
27755: ARRAY
27756: ARRAY
27757: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27758: LD_ADDR_VAR 0 7
27762: PUSH
27763: LD_VAR 0 7
27767: PUSH
27768: LD_VAR 0 6
27772: PUSH
27773: EMPTY
27774: LIST
27775: ADD
27776: ST_TO_ADDR
// end ;
27777: GO 27733
27779: POP
27780: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27781: LD_ADDR_VAR 0 6
27785: PUSH
27786: LD_VAR 0 6
27790: PPUSH
27791: LD_VAR 0 2
27795: PUSH
27796: LD_VAR 0 2
27800: ARRAY
27801: PPUSH
27802: LD_VAR 0 3
27806: PPUSH
27807: CALL_OW 1
27811: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27812: LD_ADDR_VAR 0 7
27816: PUSH
27817: LD_VAR 0 7
27821: PPUSH
27822: LD_VAR 0 7
27826: PPUSH
27827: LD_VAR 0 6
27831: PPUSH
27832: CALL_OW 1
27836: ST_TO_ADDR
// for i = s_arr downto 2 do
27837: LD_ADDR_VAR 0 5
27841: PUSH
27842: DOUBLE
27843: LD_VAR 0 7
27847: INC
27848: ST_TO_ADDR
27849: LD_INT 2
27851: PUSH
27852: FOR_DOWNTO
27853: IFFALSE 27937
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27855: LD_ADDR_VAR 0 6
27859: PUSH
27860: LD_VAR 0 7
27864: PUSH
27865: LD_VAR 0 5
27869: PUSH
27870: LD_INT 1
27872: MINUS
27873: ARRAY
27874: PPUSH
27875: LD_VAR 0 2
27879: PUSH
27880: LD_VAR 0 5
27884: PUSH
27885: LD_INT 1
27887: MINUS
27888: ARRAY
27889: PPUSH
27890: LD_VAR 0 7
27894: PUSH
27895: LD_VAR 0 5
27899: ARRAY
27900: PPUSH
27901: CALL_OW 1
27905: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27906: LD_ADDR_VAR 0 7
27910: PUSH
27911: LD_VAR 0 7
27915: PPUSH
27916: LD_VAR 0 5
27920: PUSH
27921: LD_INT 1
27923: MINUS
27924: PPUSH
27925: LD_VAR 0 6
27929: PPUSH
27930: CALL_OW 1
27934: ST_TO_ADDR
// end ;
27935: GO 27852
27937: POP
27938: POP
// result := s_arr [ 1 ] ;
27939: LD_ADDR_VAR 0 4
27943: PUSH
27944: LD_VAR 0 7
27948: PUSH
27949: LD_INT 1
27951: ARRAY
27952: ST_TO_ADDR
// end ; end ;
27953: LD_VAR 0 4
27957: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27958: LD_INT 0
27960: PPUSH
27961: PPUSH
// if not list then
27962: LD_VAR 0 1
27966: NOT
27967: IFFALSE 27971
// exit ;
27969: GO 28062
// i := list [ pos1 ] ;
27971: LD_ADDR_VAR 0 5
27975: PUSH
27976: LD_VAR 0 1
27980: PUSH
27981: LD_VAR 0 2
27985: ARRAY
27986: ST_TO_ADDR
// if not i then
27987: LD_VAR 0 5
27991: NOT
27992: IFFALSE 27996
// exit ;
27994: GO 28062
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27996: LD_ADDR_VAR 0 1
28000: PUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: LD_VAR 0 2
28010: PPUSH
28011: LD_VAR 0 1
28015: PUSH
28016: LD_VAR 0 3
28020: ARRAY
28021: PPUSH
28022: CALL_OW 1
28026: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28027: LD_ADDR_VAR 0 1
28031: PUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: LD_VAR 0 3
28041: PPUSH
28042: LD_VAR 0 5
28046: PPUSH
28047: CALL_OW 1
28051: ST_TO_ADDR
// result := list ;
28052: LD_ADDR_VAR 0 4
28056: PUSH
28057: LD_VAR 0 1
28061: ST_TO_ADDR
// end ;
28062: LD_VAR 0 4
28066: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28067: LD_INT 0
28069: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28070: LD_ADDR_VAR 0 5
28074: PUSH
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 250
28084: PPUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 251
28094: PPUSH
28095: LD_VAR 0 2
28099: PPUSH
28100: LD_VAR 0 3
28104: PPUSH
28105: LD_VAR 0 4
28109: PPUSH
28110: CALL 28120 0 5
28114: ST_TO_ADDR
// end ;
28115: LD_VAR 0 5
28119: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
28124: PPUSH
28125: PPUSH
// if not list then
28126: LD_VAR 0 3
28130: NOT
28131: IFFALSE 28135
// exit ;
28133: GO 28523
// result := [ ] ;
28135: LD_ADDR_VAR 0 6
28139: PUSH
28140: EMPTY
28141: ST_TO_ADDR
// for i in list do
28142: LD_ADDR_VAR 0 7
28146: PUSH
28147: LD_VAR 0 3
28151: PUSH
28152: FOR_IN
28153: IFFALSE 28355
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28155: LD_ADDR_VAR 0 9
28159: PUSH
28160: LD_VAR 0 7
28164: PPUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: CALL_OW 297
28179: ST_TO_ADDR
// if not result then
28180: LD_VAR 0 6
28184: NOT
28185: IFFALSE 28211
// result := [ [ i , tmp ] ] else
28187: LD_ADDR_VAR 0 6
28191: PUSH
28192: LD_VAR 0 7
28196: PUSH
28197: LD_VAR 0 9
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: ST_TO_ADDR
28209: GO 28353
// begin if result [ result ] [ 2 ] < tmp then
28211: LD_VAR 0 6
28215: PUSH
28216: LD_VAR 0 6
28220: ARRAY
28221: PUSH
28222: LD_INT 2
28224: ARRAY
28225: PUSH
28226: LD_VAR 0 9
28230: LESS
28231: IFFALSE 28273
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28233: LD_ADDR_VAR 0 6
28237: PUSH
28238: LD_VAR 0 6
28242: PPUSH
28243: LD_VAR 0 6
28247: PUSH
28248: LD_INT 1
28250: PLUS
28251: PPUSH
28252: LD_VAR 0 7
28256: PUSH
28257: LD_VAR 0 9
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PPUSH
28266: CALL_OW 2
28270: ST_TO_ADDR
28271: GO 28353
// for j = 1 to result do
28273: LD_ADDR_VAR 0 8
28277: PUSH
28278: DOUBLE
28279: LD_INT 1
28281: DEC
28282: ST_TO_ADDR
28283: LD_VAR 0 6
28287: PUSH
28288: FOR_TO
28289: IFFALSE 28351
// begin if tmp < result [ j ] [ 2 ] then
28291: LD_VAR 0 9
28295: PUSH
28296: LD_VAR 0 6
28300: PUSH
28301: LD_VAR 0 8
28305: ARRAY
28306: PUSH
28307: LD_INT 2
28309: ARRAY
28310: LESS
28311: IFFALSE 28349
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28313: LD_ADDR_VAR 0 6
28317: PUSH
28318: LD_VAR 0 6
28322: PPUSH
28323: LD_VAR 0 8
28327: PPUSH
28328: LD_VAR 0 7
28332: PUSH
28333: LD_VAR 0 9
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PPUSH
28342: CALL_OW 2
28346: ST_TO_ADDR
// break ;
28347: GO 28351
// end ; end ;
28349: GO 28288
28351: POP
28352: POP
// end ; end ;
28353: GO 28152
28355: POP
28356: POP
// if result and not asc then
28357: LD_VAR 0 6
28361: PUSH
28362: LD_VAR 0 4
28366: NOT
28367: AND
28368: IFFALSE 28443
// begin tmp := result ;
28370: LD_ADDR_VAR 0 9
28374: PUSH
28375: LD_VAR 0 6
28379: ST_TO_ADDR
// for i = tmp downto 1 do
28380: LD_ADDR_VAR 0 7
28384: PUSH
28385: DOUBLE
28386: LD_VAR 0 9
28390: INC
28391: ST_TO_ADDR
28392: LD_INT 1
28394: PUSH
28395: FOR_DOWNTO
28396: IFFALSE 28441
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28398: LD_ADDR_VAR 0 6
28402: PUSH
28403: LD_VAR 0 6
28407: PPUSH
28408: LD_VAR 0 9
28412: PUSH
28413: LD_VAR 0 7
28417: MINUS
28418: PUSH
28419: LD_INT 1
28421: PLUS
28422: PPUSH
28423: LD_VAR 0 9
28427: PUSH
28428: LD_VAR 0 7
28432: ARRAY
28433: PPUSH
28434: CALL_OW 1
28438: ST_TO_ADDR
28439: GO 28395
28441: POP
28442: POP
// end ; tmp := [ ] ;
28443: LD_ADDR_VAR 0 9
28447: PUSH
28448: EMPTY
28449: ST_TO_ADDR
// if mode then
28450: LD_VAR 0 5
28454: IFFALSE 28523
// begin for i = 1 to result do
28456: LD_ADDR_VAR 0 7
28460: PUSH
28461: DOUBLE
28462: LD_INT 1
28464: DEC
28465: ST_TO_ADDR
28466: LD_VAR 0 6
28470: PUSH
28471: FOR_TO
28472: IFFALSE 28511
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28474: LD_ADDR_VAR 0 9
28478: PUSH
28479: LD_VAR 0 9
28483: PPUSH
28484: LD_VAR 0 7
28488: PPUSH
28489: LD_VAR 0 6
28493: PUSH
28494: LD_VAR 0 7
28498: ARRAY
28499: PUSH
28500: LD_INT 1
28502: ARRAY
28503: PPUSH
28504: CALL_OW 1
28508: ST_TO_ADDR
28509: GO 28471
28511: POP
28512: POP
// result := tmp ;
28513: LD_ADDR_VAR 0 6
28517: PUSH
28518: LD_VAR 0 9
28522: ST_TO_ADDR
// end ; end ;
28523: LD_VAR 0 6
28527: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28536: LD_ADDR_VAR 0 5
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: ST_TO_ADDR
// if not x or not y then
28558: LD_VAR 0 2
28562: NOT
28563: PUSH
28564: LD_VAR 0 3
28568: NOT
28569: OR
28570: IFFALSE 28574
// exit ;
28572: GO 30226
// if not range then
28574: LD_VAR 0 4
28578: NOT
28579: IFFALSE 28589
// range := 10 ;
28581: LD_ADDR_VAR 0 4
28585: PUSH
28586: LD_INT 10
28588: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28589: LD_ADDR_VAR 0 8
28593: PUSH
28594: LD_INT 81
28596: PUSH
28597: LD_VAR 0 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 92
28608: PUSH
28609: LD_VAR 0 2
28613: PUSH
28614: LD_VAR 0 3
28618: PUSH
28619: LD_VAR 0 4
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 21
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: ST_TO_ADDR
// if not tmp then
28657: LD_VAR 0 8
28661: NOT
28662: IFFALSE 28666
// exit ;
28664: GO 30226
// for i in tmp do
28666: LD_ADDR_VAR 0 6
28670: PUSH
28671: LD_VAR 0 8
28675: PUSH
28676: FOR_IN
28677: IFFALSE 30201
// begin points := [ 0 , 0 , 0 ] ;
28679: LD_ADDR_VAR 0 9
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: ST_TO_ADDR
// bpoints := 1 ;
28698: LD_ADDR_VAR 0 10
28702: PUSH
28703: LD_INT 1
28705: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28706: LD_VAR 0 6
28710: PPUSH
28711: CALL_OW 247
28715: PUSH
28716: LD_INT 1
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 29302
28724: POP
// begin if GetClass ( i ) = 1 then
28725: LD_VAR 0 6
28729: PPUSH
28730: CALL_OW 257
28734: PUSH
28735: LD_INT 1
28737: EQUAL
28738: IFFALSE 28759
// points := [ 10 , 5 , 3 ] ;
28740: LD_ADDR_VAR 0 9
28744: PUSH
28745: LD_INT 10
28747: PUSH
28748: LD_INT 5
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28759: LD_VAR 0 6
28763: PPUSH
28764: CALL_OW 257
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: LD_INT 4
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: IN
28783: IFFALSE 28804
// points := [ 3 , 2 , 1 ] ;
28785: LD_ADDR_VAR 0 9
28789: PUSH
28790: LD_INT 3
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28804: LD_VAR 0 6
28808: PPUSH
28809: CALL_OW 257
28813: PUSH
28814: LD_INT 5
28816: EQUAL
28817: IFFALSE 28838
// points := [ 130 , 5 , 2 ] ;
28819: LD_ADDR_VAR 0 9
28823: PUSH
28824: LD_INT 130
28826: PUSH
28827: LD_INT 5
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28838: LD_VAR 0 6
28842: PPUSH
28843: CALL_OW 257
28847: PUSH
28848: LD_INT 8
28850: EQUAL
28851: IFFALSE 28872
// points := [ 35 , 35 , 30 ] ;
28853: LD_ADDR_VAR 0 9
28857: PUSH
28858: LD_INT 35
28860: PUSH
28861: LD_INT 35
28863: PUSH
28864: LD_INT 30
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28872: LD_VAR 0 6
28876: PPUSH
28877: CALL_OW 257
28881: PUSH
28882: LD_INT 9
28884: EQUAL
28885: IFFALSE 28906
// points := [ 20 , 55 , 40 ] ;
28887: LD_ADDR_VAR 0 9
28891: PUSH
28892: LD_INT 20
28894: PUSH
28895: LD_INT 55
28897: PUSH
28898: LD_INT 40
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28906: LD_VAR 0 6
28910: PPUSH
28911: CALL_OW 257
28915: PUSH
28916: LD_INT 12
28918: PUSH
28919: LD_INT 16
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: IN
28926: IFFALSE 28947
// points := [ 5 , 3 , 2 ] ;
28928: LD_ADDR_VAR 0 9
28932: PUSH
28933: LD_INT 5
28935: PUSH
28936: LD_INT 3
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28947: LD_VAR 0 6
28951: PPUSH
28952: CALL_OW 257
28956: PUSH
28957: LD_INT 17
28959: EQUAL
28960: IFFALSE 28981
// points := [ 100 , 50 , 75 ] ;
28962: LD_ADDR_VAR 0 9
28966: PUSH
28967: LD_INT 100
28969: PUSH
28970: LD_INT 50
28972: PUSH
28973: LD_INT 75
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28981: LD_VAR 0 6
28985: PPUSH
28986: CALL_OW 257
28990: PUSH
28991: LD_INT 15
28993: EQUAL
28994: IFFALSE 29015
// points := [ 10 , 5 , 3 ] ;
28996: LD_ADDR_VAR 0 9
29000: PUSH
29001: LD_INT 10
29003: PUSH
29004: LD_INT 5
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29015: LD_VAR 0 6
29019: PPUSH
29020: CALL_OW 257
29024: PUSH
29025: LD_INT 14
29027: EQUAL
29028: IFFALSE 29049
// points := [ 10 , 0 , 0 ] ;
29030: LD_ADDR_VAR 0 9
29034: PUSH
29035: LD_INT 10
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29049: LD_VAR 0 6
29053: PPUSH
29054: CALL_OW 257
29058: PUSH
29059: LD_INT 11
29061: EQUAL
29062: IFFALSE 29083
// points := [ 30 , 10 , 5 ] ;
29064: LD_ADDR_VAR 0 9
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 10
29074: PUSH
29075: LD_INT 5
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_INT 5
29090: PPUSH
29091: CALL_OW 321
29095: PUSH
29096: LD_INT 2
29098: EQUAL
29099: IFFALSE 29116
// bpoints := bpoints * 1.8 ;
29101: LD_ADDR_VAR 0 10
29105: PUSH
29106: LD_VAR 0 10
29110: PUSH
29111: LD_REAL  1.80000000000000E+0000
29114: MUL
29115: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29116: LD_VAR 0 6
29120: PPUSH
29121: CALL_OW 257
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: LD_INT 4
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: IN
29144: PUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_INT 51
29152: PPUSH
29153: CALL_OW 321
29157: PUSH
29158: LD_INT 2
29160: EQUAL
29161: AND
29162: IFFALSE 29179
// bpoints := bpoints * 1.2 ;
29164: LD_ADDR_VAR 0 10
29168: PUSH
29169: LD_VAR 0 10
29173: PUSH
29174: LD_REAL  1.20000000000000E+0000
29177: MUL
29178: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29179: LD_VAR 0 6
29183: PPUSH
29184: CALL_OW 257
29188: PUSH
29189: LD_INT 5
29191: PUSH
29192: LD_INT 7
29194: PUSH
29195: LD_INT 9
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: IN
29203: PUSH
29204: LD_VAR 0 1
29208: PPUSH
29209: LD_INT 52
29211: PPUSH
29212: CALL_OW 321
29216: PUSH
29217: LD_INT 2
29219: EQUAL
29220: AND
29221: IFFALSE 29238
// bpoints := bpoints * 1.5 ;
29223: LD_ADDR_VAR 0 10
29227: PUSH
29228: LD_VAR 0 10
29232: PUSH
29233: LD_REAL  1.50000000000000E+0000
29236: MUL
29237: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29238: LD_VAR 0 1
29242: PPUSH
29243: LD_INT 66
29245: PPUSH
29246: CALL_OW 321
29250: PUSH
29251: LD_INT 2
29253: EQUAL
29254: IFFALSE 29271
// bpoints := bpoints * 1.1 ;
29256: LD_ADDR_VAR 0 10
29260: PUSH
29261: LD_VAR 0 10
29265: PUSH
29266: LD_REAL  1.10000000000000E+0000
29269: MUL
29270: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29271: LD_ADDR_VAR 0 10
29275: PUSH
29276: LD_VAR 0 10
29280: PUSH
29281: LD_VAR 0 6
29285: PPUSH
29286: LD_INT 1
29288: PPUSH
29289: CALL_OW 259
29293: PUSH
29294: LD_REAL  1.15000000000000E+0000
29297: MUL
29298: MUL
29299: ST_TO_ADDR
// end ; unit_vehicle :
29300: GO 30130
29302: LD_INT 2
29304: DOUBLE
29305: EQUAL
29306: IFTRUE 29310
29308: GO 30118
29310: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29311: LD_VAR 0 6
29315: PPUSH
29316: CALL_OW 264
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 42
29326: PUSH
29327: LD_INT 24
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: IN
29335: IFFALSE 29356
// points := [ 25 , 5 , 3 ] ;
29337: LD_ADDR_VAR 0 9
29341: PUSH
29342: LD_INT 25
29344: PUSH
29345: LD_INT 5
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29356: LD_VAR 0 6
29360: PPUSH
29361: CALL_OW 264
29365: PUSH
29366: LD_INT 4
29368: PUSH
29369: LD_INT 43
29371: PUSH
29372: LD_INT 25
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: IN
29380: IFFALSE 29401
// points := [ 40 , 15 , 5 ] ;
29382: LD_ADDR_VAR 0 9
29386: PUSH
29387: LD_INT 40
29389: PUSH
29390: LD_INT 15
29392: PUSH
29393: LD_INT 5
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29401: LD_VAR 0 6
29405: PPUSH
29406: CALL_OW 264
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: LD_INT 23
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: IN
29421: IFFALSE 29442
// points := [ 7 , 25 , 8 ] ;
29423: LD_ADDR_VAR 0 9
29427: PUSH
29428: LD_INT 7
29430: PUSH
29431: LD_INT 25
29433: PUSH
29434: LD_INT 8
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29442: LD_VAR 0 6
29446: PPUSH
29447: CALL_OW 264
29451: PUSH
29452: LD_INT 5
29454: PUSH
29455: LD_INT 27
29457: PUSH
29458: LD_INT 44
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: IN
29466: IFFALSE 29487
// points := [ 14 , 50 , 16 ] ;
29468: LD_ADDR_VAR 0 9
29472: PUSH
29473: LD_INT 14
29475: PUSH
29476: LD_INT 50
29478: PUSH
29479: LD_INT 16
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29487: LD_VAR 0 6
29491: PPUSH
29492: CALL_OW 264
29496: PUSH
29497: LD_INT 6
29499: PUSH
29500: LD_INT 46
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: IN
29507: IFFALSE 29528
// points := [ 32 , 120 , 70 ] ;
29509: LD_ADDR_VAR 0 9
29513: PUSH
29514: LD_INT 32
29516: PUSH
29517: LD_INT 120
29519: PUSH
29520: LD_INT 70
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29528: LD_VAR 0 6
29532: PPUSH
29533: CALL_OW 264
29537: PUSH
29538: LD_INT 7
29540: PUSH
29541: LD_INT 28
29543: PUSH
29544: LD_INT 45
29546: PUSH
29547: LD_EXP 12
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: IN
29558: IFFALSE 29579
// points := [ 35 , 20 , 45 ] ;
29560: LD_ADDR_VAR 0 9
29564: PUSH
29565: LD_INT 35
29567: PUSH
29568: LD_INT 20
29570: PUSH
29571: LD_INT 45
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29579: LD_VAR 0 6
29583: PPUSH
29584: CALL_OW 264
29588: PUSH
29589: LD_INT 47
29591: PUSH
29592: EMPTY
29593: LIST
29594: IN
29595: IFFALSE 29616
// points := [ 67 , 45 , 75 ] ;
29597: LD_ADDR_VAR 0 9
29601: PUSH
29602: LD_INT 67
29604: PUSH
29605: LD_INT 45
29607: PUSH
29608: LD_INT 75
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29616: LD_VAR 0 6
29620: PPUSH
29621: CALL_OW 264
29625: PUSH
29626: LD_INT 26
29628: PUSH
29629: EMPTY
29630: LIST
29631: IN
29632: IFFALSE 29653
// points := [ 120 , 30 , 80 ] ;
29634: LD_ADDR_VAR 0 9
29638: PUSH
29639: LD_INT 120
29641: PUSH
29642: LD_INT 30
29644: PUSH
29645: LD_INT 80
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29653: LD_VAR 0 6
29657: PPUSH
29658: CALL_OW 264
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: EMPTY
29667: LIST
29668: IN
29669: IFFALSE 29690
// points := [ 40 , 1 , 1 ] ;
29671: LD_ADDR_VAR 0 9
29675: PUSH
29676: LD_INT 40
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29690: LD_VAR 0 6
29694: PPUSH
29695: CALL_OW 264
29699: PUSH
29700: LD_INT 29
29702: PUSH
29703: EMPTY
29704: LIST
29705: IN
29706: IFFALSE 29727
// points := [ 70 , 200 , 400 ] ;
29708: LD_ADDR_VAR 0 9
29712: PUSH
29713: LD_INT 70
29715: PUSH
29716: LD_INT 200
29718: PUSH
29719: LD_INT 400
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29727: LD_VAR 0 6
29731: PPUSH
29732: CALL_OW 264
29736: PUSH
29737: LD_INT 14
29739: PUSH
29740: LD_INT 53
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: IN
29747: IFFALSE 29768
// points := [ 40 , 10 , 20 ] ;
29749: LD_ADDR_VAR 0 9
29753: PUSH
29754: LD_INT 40
29756: PUSH
29757: LD_INT 10
29759: PUSH
29760: LD_INT 20
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29768: LD_VAR 0 6
29772: PPUSH
29773: CALL_OW 264
29777: PUSH
29778: LD_INT 9
29780: PUSH
29781: EMPTY
29782: LIST
29783: IN
29784: IFFALSE 29805
// points := [ 5 , 70 , 20 ] ;
29786: LD_ADDR_VAR 0 9
29790: PUSH
29791: LD_INT 5
29793: PUSH
29794: LD_INT 70
29796: PUSH
29797: LD_INT 20
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29805: LD_VAR 0 6
29809: PPUSH
29810: CALL_OW 264
29814: PUSH
29815: LD_INT 10
29817: PUSH
29818: EMPTY
29819: LIST
29820: IN
29821: IFFALSE 29842
// points := [ 35 , 110 , 70 ] ;
29823: LD_ADDR_VAR 0 9
29827: PUSH
29828: LD_INT 35
29830: PUSH
29831: LD_INT 110
29833: PUSH
29834: LD_INT 70
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29842: LD_VAR 0 6
29846: PPUSH
29847: CALL_OW 265
29851: PUSH
29852: LD_INT 25
29854: EQUAL
29855: IFFALSE 29876
// points := [ 80 , 65 , 100 ] ;
29857: LD_ADDR_VAR 0 9
29861: PUSH
29862: LD_INT 80
29864: PUSH
29865: LD_INT 65
29867: PUSH
29868: LD_INT 100
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: LIST
29875: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29876: LD_VAR 0 6
29880: PPUSH
29881: CALL_OW 263
29885: PUSH
29886: LD_INT 1
29888: EQUAL
29889: IFFALSE 29924
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29891: LD_ADDR_VAR 0 10
29895: PUSH
29896: LD_VAR 0 10
29900: PUSH
29901: LD_VAR 0 6
29905: PPUSH
29906: CALL_OW 311
29910: PPUSH
29911: LD_INT 3
29913: PPUSH
29914: CALL_OW 259
29918: PUSH
29919: LD_INT 4
29921: MUL
29922: MUL
29923: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29924: LD_VAR 0 6
29928: PPUSH
29929: CALL_OW 263
29933: PUSH
29934: LD_INT 2
29936: EQUAL
29937: IFFALSE 29988
// begin j := IsControledBy ( i ) ;
29939: LD_ADDR_VAR 0 7
29943: PUSH
29944: LD_VAR 0 6
29948: PPUSH
29949: CALL_OW 312
29953: ST_TO_ADDR
// if j then
29954: LD_VAR 0 7
29958: IFFALSE 29988
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29960: LD_ADDR_VAR 0 10
29964: PUSH
29965: LD_VAR 0 10
29969: PUSH
29970: LD_VAR 0 7
29974: PPUSH
29975: LD_INT 3
29977: PPUSH
29978: CALL_OW 259
29982: PUSH
29983: LD_INT 3
29985: MUL
29986: MUL
29987: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29988: LD_VAR 0 6
29992: PPUSH
29993: CALL_OW 264
29997: PUSH
29998: LD_INT 5
30000: PUSH
30001: LD_INT 6
30003: PUSH
30004: LD_INT 46
30006: PUSH
30007: LD_INT 44
30009: PUSH
30010: LD_INT 47
30012: PUSH
30013: LD_INT 45
30015: PUSH
30016: LD_INT 28
30018: PUSH
30019: LD_INT 7
30021: PUSH
30022: LD_INT 27
30024: PUSH
30025: LD_INT 29
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: IN
30040: PUSH
30041: LD_VAR 0 1
30045: PPUSH
30046: LD_INT 52
30048: PPUSH
30049: CALL_OW 321
30053: PUSH
30054: LD_INT 2
30056: EQUAL
30057: AND
30058: IFFALSE 30075
// bpoints := bpoints * 1.2 ;
30060: LD_ADDR_VAR 0 10
30064: PUSH
30065: LD_VAR 0 10
30069: PUSH
30070: LD_REAL  1.20000000000000E+0000
30073: MUL
30074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30075: LD_VAR 0 6
30079: PPUSH
30080: CALL_OW 264
30084: PUSH
30085: LD_INT 6
30087: PUSH
30088: LD_INT 46
30090: PUSH
30091: LD_INT 47
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: IN
30099: IFFALSE 30116
// bpoints := bpoints * 1.2 ;
30101: LD_ADDR_VAR 0 10
30105: PUSH
30106: LD_VAR 0 10
30110: PUSH
30111: LD_REAL  1.20000000000000E+0000
30114: MUL
30115: ST_TO_ADDR
// end ; unit_building :
30116: GO 30130
30118: LD_INT 3
30120: DOUBLE
30121: EQUAL
30122: IFTRUE 30126
30124: GO 30129
30126: POP
// ; end ;
30127: GO 30130
30129: POP
// for j = 1 to 3 do
30130: LD_ADDR_VAR 0 7
30134: PUSH
30135: DOUBLE
30136: LD_INT 1
30138: DEC
30139: ST_TO_ADDR
30140: LD_INT 3
30142: PUSH
30143: FOR_TO
30144: IFFALSE 30197
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30146: LD_ADDR_VAR 0 5
30150: PUSH
30151: LD_VAR 0 5
30155: PPUSH
30156: LD_VAR 0 7
30160: PPUSH
30161: LD_VAR 0 5
30165: PUSH
30166: LD_VAR 0 7
30170: ARRAY
30171: PUSH
30172: LD_VAR 0 9
30176: PUSH
30177: LD_VAR 0 7
30181: ARRAY
30182: PUSH
30183: LD_VAR 0 10
30187: MUL
30188: PLUS
30189: PPUSH
30190: CALL_OW 1
30194: ST_TO_ADDR
30195: GO 30143
30197: POP
30198: POP
// end ;
30199: GO 28676
30201: POP
30202: POP
// result := Replace ( result , 4 , tmp ) ;
30203: LD_ADDR_VAR 0 5
30207: PUSH
30208: LD_VAR 0 5
30212: PPUSH
30213: LD_INT 4
30215: PPUSH
30216: LD_VAR 0 8
30220: PPUSH
30221: CALL_OW 1
30225: ST_TO_ADDR
// end ;
30226: LD_VAR 0 5
30230: RET
// export function DangerAtRange ( unit , range ) ; begin
30231: LD_INT 0
30233: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 255
30248: PPUSH
30249: LD_VAR 0 1
30253: PPUSH
30254: CALL_OW 250
30258: PPUSH
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 251
30268: PPUSH
30269: LD_VAR 0 2
30273: PPUSH
30274: CALL 28528 0 4
30278: ST_TO_ADDR
// end ;
30279: LD_VAR 0 3
30283: RET
// export function DangerInArea ( side , area ) ; begin
30284: LD_INT 0
30286: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30287: LD_ADDR_VAR 0 3
30291: PUSH
30292: LD_VAR 0 2
30296: PPUSH
30297: LD_INT 81
30299: PUSH
30300: LD_VAR 0 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PPUSH
30309: CALL_OW 70
30313: ST_TO_ADDR
// end ;
30314: LD_VAR 0 3
30318: RET
// export function IsExtension ( b ) ; begin
30319: LD_INT 0
30321: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30322: LD_ADDR_VAR 0 2
30326: PUSH
30327: LD_VAR 0 1
30331: PUSH
30332: LD_INT 23
30334: PUSH
30335: LD_INT 20
30337: PUSH
30338: LD_INT 22
30340: PUSH
30341: LD_INT 17
30343: PUSH
30344: LD_INT 24
30346: PUSH
30347: LD_INT 21
30349: PUSH
30350: LD_INT 19
30352: PUSH
30353: LD_INT 16
30355: PUSH
30356: LD_INT 25
30358: PUSH
30359: LD_INT 18
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: IN
30374: ST_TO_ADDR
// end ;
30375: LD_VAR 0 2
30379: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30380: LD_INT 0
30382: PPUSH
30383: PPUSH
30384: PPUSH
// result := [ ] ;
30385: LD_ADDR_VAR 0 4
30389: PUSH
30390: EMPTY
30391: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30392: LD_ADDR_VAR 0 5
30396: PUSH
30397: LD_VAR 0 2
30401: PPUSH
30402: LD_INT 21
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PPUSH
30412: CALL_OW 70
30416: ST_TO_ADDR
// if not tmp then
30417: LD_VAR 0 5
30421: NOT
30422: IFFALSE 30426
// exit ;
30424: GO 30490
// if checkLink then
30426: LD_VAR 0 3
30430: IFFALSE 30480
// begin for i in tmp do
30432: LD_ADDR_VAR 0 6
30436: PUSH
30437: LD_VAR 0 5
30441: PUSH
30442: FOR_IN
30443: IFFALSE 30478
// if GetBase ( i ) <> base then
30445: LD_VAR 0 6
30449: PPUSH
30450: CALL_OW 274
30454: PUSH
30455: LD_VAR 0 1
30459: NONEQUAL
30460: IFFALSE 30476
// ComLinkToBase ( base , i ) ;
30462: LD_VAR 0 1
30466: PPUSH
30467: LD_VAR 0 6
30471: PPUSH
30472: CALL_OW 169
30476: GO 30442
30478: POP
30479: POP
// end ; result := tmp ;
30480: LD_ADDR_VAR 0 4
30484: PUSH
30485: LD_VAR 0 5
30489: ST_TO_ADDR
// end ;
30490: LD_VAR 0 4
30494: RET
// export function ComComplete ( units , b ) ; var i ; begin
30495: LD_INT 0
30497: PPUSH
30498: PPUSH
// if not units then
30499: LD_VAR 0 1
30503: NOT
30504: IFFALSE 30508
// exit ;
30506: GO 30598
// for i in units do
30508: LD_ADDR_VAR 0 4
30512: PUSH
30513: LD_VAR 0 1
30517: PUSH
30518: FOR_IN
30519: IFFALSE 30596
// if BuildingStatus ( b ) = bs_build then
30521: LD_VAR 0 2
30525: PPUSH
30526: CALL_OW 461
30530: PUSH
30531: LD_INT 1
30533: EQUAL
30534: IFFALSE 30594
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30536: LD_VAR 0 4
30540: PPUSH
30541: LD_STRING h
30543: PUSH
30544: LD_VAR 0 2
30548: PPUSH
30549: CALL_OW 250
30553: PUSH
30554: LD_VAR 0 2
30558: PPUSH
30559: CALL_OW 251
30563: PUSH
30564: LD_VAR 0 2
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: PPUSH
30590: CALL_OW 446
30594: GO 30518
30596: POP
30597: POP
// end ;
30598: LD_VAR 0 3
30602: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30603: LD_INT 0
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30611: LD_VAR 0 1
30615: NOT
30616: PUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 263
30626: PUSH
30627: LD_INT 2
30629: NONEQUAL
30630: OR
30631: IFFALSE 30635
// exit ;
30633: GO 30951
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30635: LD_ADDR_VAR 0 6
30639: PUSH
30640: LD_INT 22
30642: PUSH
30643: LD_VAR 0 1
30647: PPUSH
30648: CALL_OW 255
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: LD_INT 30
30662: PUSH
30663: LD_INT 36
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 34
30672: PUSH
30673: LD_INT 31
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL_OW 69
30693: ST_TO_ADDR
// if not tmp then
30694: LD_VAR 0 6
30698: NOT
30699: IFFALSE 30703
// exit ;
30701: GO 30951
// result := [ ] ;
30703: LD_ADDR_VAR 0 2
30707: PUSH
30708: EMPTY
30709: ST_TO_ADDR
// for i in tmp do
30710: LD_ADDR_VAR 0 3
30714: PUSH
30715: LD_VAR 0 6
30719: PUSH
30720: FOR_IN
30721: IFFALSE 30792
// begin t := UnitsInside ( i ) ;
30723: LD_ADDR_VAR 0 4
30727: PUSH
30728: LD_VAR 0 3
30732: PPUSH
30733: CALL_OW 313
30737: ST_TO_ADDR
// if t then
30738: LD_VAR 0 4
30742: IFFALSE 30790
// for j in t do
30744: LD_ADDR_VAR 0 7
30748: PUSH
30749: LD_VAR 0 4
30753: PUSH
30754: FOR_IN
30755: IFFALSE 30788
// result := Replace ( result , result + 1 , j ) ;
30757: LD_ADDR_VAR 0 2
30761: PUSH
30762: LD_VAR 0 2
30766: PPUSH
30767: LD_VAR 0 2
30771: PUSH
30772: LD_INT 1
30774: PLUS
30775: PPUSH
30776: LD_VAR 0 7
30780: PPUSH
30781: CALL_OW 1
30785: ST_TO_ADDR
30786: GO 30754
30788: POP
30789: POP
// end ;
30790: GO 30720
30792: POP
30793: POP
// if not result then
30794: LD_VAR 0 2
30798: NOT
30799: IFFALSE 30803
// exit ;
30801: GO 30951
// mech := result [ 1 ] ;
30803: LD_ADDR_VAR 0 5
30807: PUSH
30808: LD_VAR 0 2
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: ST_TO_ADDR
// if result > 1 then
30817: LD_VAR 0 2
30821: PUSH
30822: LD_INT 1
30824: GREATER
30825: IFFALSE 30937
// begin for i = 2 to result do
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: DOUBLE
30833: LD_INT 2
30835: DEC
30836: ST_TO_ADDR
30837: LD_VAR 0 2
30841: PUSH
30842: FOR_TO
30843: IFFALSE 30935
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30845: LD_ADDR_VAR 0 4
30849: PUSH
30850: LD_VAR 0 2
30854: PUSH
30855: LD_VAR 0 3
30859: ARRAY
30860: PPUSH
30861: LD_INT 3
30863: PPUSH
30864: CALL_OW 259
30868: PUSH
30869: LD_VAR 0 2
30873: PUSH
30874: LD_VAR 0 3
30878: ARRAY
30879: PPUSH
30880: CALL_OW 432
30884: MINUS
30885: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30886: LD_VAR 0 4
30890: PUSH
30891: LD_VAR 0 5
30895: PPUSH
30896: LD_INT 3
30898: PPUSH
30899: CALL_OW 259
30903: PUSH
30904: LD_VAR 0 5
30908: PPUSH
30909: CALL_OW 432
30913: MINUS
30914: GREATEREQUAL
30915: IFFALSE 30933
// mech := result [ i ] ;
30917: LD_ADDR_VAR 0 5
30921: PUSH
30922: LD_VAR 0 2
30926: PUSH
30927: LD_VAR 0 3
30931: ARRAY
30932: ST_TO_ADDR
// end ;
30933: GO 30842
30935: POP
30936: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: LD_VAR 0 5
30946: PPUSH
30947: CALL_OW 135
// end ;
30951: LD_VAR 0 2
30955: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
// result := [ ] ;
30971: LD_ADDR_VAR 0 7
30975: PUSH
30976: EMPTY
30977: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 266
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: IN
30998: NOT
30999: IFFALSE 31003
// exit ;
31001: GO 32637
// if name then
31003: LD_VAR 0 3
31007: IFFALSE 31023
// SetBName ( base_dep , name ) ;
31009: LD_VAR 0 1
31013: PPUSH
31014: LD_VAR 0 3
31018: PPUSH
31019: CALL_OW 500
// base := GetBase ( base_dep ) ;
31023: LD_ADDR_VAR 0 15
31027: PUSH
31028: LD_VAR 0 1
31032: PPUSH
31033: CALL_OW 274
31037: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31038: LD_ADDR_VAR 0 16
31042: PUSH
31043: LD_VAR 0 1
31047: PPUSH
31048: CALL_OW 255
31052: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31053: LD_ADDR_VAR 0 17
31057: PUSH
31058: LD_VAR 0 1
31062: PPUSH
31063: CALL_OW 248
31067: ST_TO_ADDR
// if sources then
31068: LD_VAR 0 5
31072: IFFALSE 31119
// for i = 1 to 3 do
31074: LD_ADDR_VAR 0 8
31078: PUSH
31079: DOUBLE
31080: LD_INT 1
31082: DEC
31083: ST_TO_ADDR
31084: LD_INT 3
31086: PUSH
31087: FOR_TO
31088: IFFALSE 31117
// AddResourceType ( base , i , sources [ i ] ) ;
31090: LD_VAR 0 15
31094: PPUSH
31095: LD_VAR 0 8
31099: PPUSH
31100: LD_VAR 0 5
31104: PUSH
31105: LD_VAR 0 8
31109: ARRAY
31110: PPUSH
31111: CALL_OW 276
31115: GO 31087
31117: POP
31118: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31119: LD_ADDR_VAR 0 18
31123: PUSH
31124: LD_VAR 0 15
31128: PPUSH
31129: LD_VAR 0 2
31133: PPUSH
31134: LD_INT 1
31136: PPUSH
31137: CALL 30380 0 3
31141: ST_TO_ADDR
// InitHc ;
31142: CALL_OW 19
// InitUc ;
31146: CALL_OW 18
// uc_side := side ;
31150: LD_ADDR_OWVAR 20
31154: PUSH
31155: LD_VAR 0 16
31159: ST_TO_ADDR
// uc_nation := nation ;
31160: LD_ADDR_OWVAR 21
31164: PUSH
31165: LD_VAR 0 17
31169: ST_TO_ADDR
// if buildings then
31170: LD_VAR 0 18
31174: IFFALSE 32496
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31176: LD_ADDR_VAR 0 19
31180: PUSH
31181: LD_VAR 0 18
31185: PPUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 30
31191: PUSH
31192: LD_INT 29
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 30
31201: PUSH
31202: LD_INT 30
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: LIST
31213: PPUSH
31214: CALL_OW 72
31218: ST_TO_ADDR
// if tmp then
31219: LD_VAR 0 19
31223: IFFALSE 31271
// for i in tmp do
31225: LD_ADDR_VAR 0 8
31229: PUSH
31230: LD_VAR 0 19
31234: PUSH
31235: FOR_IN
31236: IFFALSE 31269
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31238: LD_VAR 0 8
31242: PPUSH
31243: CALL_OW 250
31247: PPUSH
31248: LD_VAR 0 8
31252: PPUSH
31253: CALL_OW 251
31257: PPUSH
31258: LD_VAR 0 16
31262: PPUSH
31263: CALL_OW 441
31267: GO 31235
31269: POP
31270: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31271: LD_VAR 0 18
31275: PPUSH
31276: LD_INT 2
31278: PUSH
31279: LD_INT 30
31281: PUSH
31282: LD_INT 32
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 30
31291: PUSH
31292: LD_INT 33
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PPUSH
31304: CALL_OW 72
31308: IFFALSE 31396
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31310: LD_ADDR_VAR 0 8
31314: PUSH
31315: LD_VAR 0 18
31319: PPUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 30
31325: PUSH
31326: LD_INT 32
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 30
31335: PUSH
31336: LD_INT 33
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: PPUSH
31348: CALL_OW 72
31352: PUSH
31353: FOR_IN
31354: IFFALSE 31394
// begin if not GetBWeapon ( i ) then
31356: LD_VAR 0 8
31360: PPUSH
31361: CALL_OW 269
31365: NOT
31366: IFFALSE 31392
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31368: LD_VAR 0 8
31372: PPUSH
31373: LD_VAR 0 8
31377: PPUSH
31378: LD_VAR 0 2
31382: PPUSH
31383: CALL 32642 0 2
31387: PPUSH
31388: CALL_OW 431
// end ;
31392: GO 31353
31394: POP
31395: POP
// end ; for i = 1 to personel do
31396: LD_ADDR_VAR 0 8
31400: PUSH
31401: DOUBLE
31402: LD_INT 1
31404: DEC
31405: ST_TO_ADDR
31406: LD_VAR 0 6
31410: PUSH
31411: FOR_TO
31412: IFFALSE 32476
// begin if i > 4 then
31414: LD_VAR 0 8
31418: PUSH
31419: LD_INT 4
31421: GREATER
31422: IFFALSE 31426
// break ;
31424: GO 32476
// case i of 1 :
31426: LD_VAR 0 8
31430: PUSH
31431: LD_INT 1
31433: DOUBLE
31434: EQUAL
31435: IFTRUE 31439
31437: GO 31519
31439: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31440: LD_ADDR_VAR 0 12
31444: PUSH
31445: LD_VAR 0 18
31449: PPUSH
31450: LD_INT 22
31452: PUSH
31453: LD_VAR 0 16
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 58
31464: PUSH
31465: EMPTY
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 30
31473: PUSH
31474: LD_INT 32
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 30
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 30
31493: PUSH
31494: LD_INT 5
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: PPUSH
31512: CALL_OW 72
31516: ST_TO_ADDR
31517: GO 31741
31519: LD_INT 2
31521: DOUBLE
31522: EQUAL
31523: IFTRUE 31527
31525: GO 31589
31527: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31528: LD_ADDR_VAR 0 12
31532: PUSH
31533: LD_VAR 0 18
31537: PPUSH
31538: LD_INT 22
31540: PUSH
31541: LD_VAR 0 16
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 30
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 30
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 72
31586: ST_TO_ADDR
31587: GO 31741
31589: LD_INT 3
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 31659
31597: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31598: LD_ADDR_VAR 0 12
31602: PUSH
31603: LD_VAR 0 18
31607: PPUSH
31608: LD_INT 22
31610: PUSH
31611: LD_VAR 0 16
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: LD_INT 30
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 30
31635: PUSH
31636: LD_INT 3
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PPUSH
31652: CALL_OW 72
31656: ST_TO_ADDR
31657: GO 31741
31659: LD_INT 4
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31740
31667: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31668: LD_ADDR_VAR 0 12
31672: PUSH
31673: LD_VAR 0 18
31677: PPUSH
31678: LD_INT 22
31680: PUSH
31681: LD_VAR 0 16
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: LD_INT 30
31695: PUSH
31696: LD_INT 6
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 30
31705: PUSH
31706: LD_INT 7
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 30
31715: PUSH
31716: LD_INT 8
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PPUSH
31733: CALL_OW 72
31737: ST_TO_ADDR
31738: GO 31741
31740: POP
// if i = 1 then
31741: LD_VAR 0 8
31745: PUSH
31746: LD_INT 1
31748: EQUAL
31749: IFFALSE 31860
// begin tmp := [ ] ;
31751: LD_ADDR_VAR 0 19
31755: PUSH
31756: EMPTY
31757: ST_TO_ADDR
// for j in f do
31758: LD_ADDR_VAR 0 9
31762: PUSH
31763: LD_VAR 0 12
31767: PUSH
31768: FOR_IN
31769: IFFALSE 31842
// if GetBType ( j ) = b_bunker then
31771: LD_VAR 0 9
31775: PPUSH
31776: CALL_OW 266
31780: PUSH
31781: LD_INT 32
31783: EQUAL
31784: IFFALSE 31811
// tmp := Insert ( tmp , 1 , j ) else
31786: LD_ADDR_VAR 0 19
31790: PUSH
31791: LD_VAR 0 19
31795: PPUSH
31796: LD_INT 1
31798: PPUSH
31799: LD_VAR 0 9
31803: PPUSH
31804: CALL_OW 2
31808: ST_TO_ADDR
31809: GO 31840
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31811: LD_ADDR_VAR 0 19
31815: PUSH
31816: LD_VAR 0 19
31820: PPUSH
31821: LD_VAR 0 19
31825: PUSH
31826: LD_INT 1
31828: PLUS
31829: PPUSH
31830: LD_VAR 0 9
31834: PPUSH
31835: CALL_OW 2
31839: ST_TO_ADDR
31840: GO 31768
31842: POP
31843: POP
// if tmp then
31844: LD_VAR 0 19
31848: IFFALSE 31860
// f := tmp ;
31850: LD_ADDR_VAR 0 12
31854: PUSH
31855: LD_VAR 0 19
31859: ST_TO_ADDR
// end ; x := personel [ i ] ;
31860: LD_ADDR_VAR 0 13
31864: PUSH
31865: LD_VAR 0 6
31869: PUSH
31870: LD_VAR 0 8
31874: ARRAY
31875: ST_TO_ADDR
// if x = - 1 then
31876: LD_VAR 0 13
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: EQUAL
31885: IFFALSE 32094
// begin for j in f do
31887: LD_ADDR_VAR 0 9
31891: PUSH
31892: LD_VAR 0 12
31896: PUSH
31897: FOR_IN
31898: IFFALSE 32090
// repeat InitHc ;
31900: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31904: LD_VAR 0 9
31908: PPUSH
31909: CALL_OW 266
31913: PUSH
31914: LD_INT 5
31916: EQUAL
31917: IFFALSE 31987
// begin if UnitsInside ( j ) < 3 then
31919: LD_VAR 0 9
31923: PPUSH
31924: CALL_OW 313
31928: PUSH
31929: LD_INT 3
31931: LESS
31932: IFFALSE 31968
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31934: LD_INT 0
31936: PPUSH
31937: LD_INT 5
31939: PUSH
31940: LD_INT 8
31942: PUSH
31943: LD_INT 9
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PUSH
31951: LD_VAR 0 17
31955: ARRAY
31956: PPUSH
31957: LD_VAR 0 4
31961: PPUSH
31962: CALL_OW 380
31966: GO 31985
// PrepareHuman ( false , i , skill ) ;
31968: LD_INT 0
31970: PPUSH
31971: LD_VAR 0 8
31975: PPUSH
31976: LD_VAR 0 4
31980: PPUSH
31981: CALL_OW 380
// end else
31985: GO 32004
// PrepareHuman ( false , i , skill ) ;
31987: LD_INT 0
31989: PPUSH
31990: LD_VAR 0 8
31994: PPUSH
31995: LD_VAR 0 4
31999: PPUSH
32000: CALL_OW 380
// un := CreateHuman ;
32004: LD_ADDR_VAR 0 14
32008: PUSH
32009: CALL_OW 44
32013: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32014: LD_ADDR_VAR 0 7
32018: PUSH
32019: LD_VAR 0 7
32023: PPUSH
32024: LD_INT 1
32026: PPUSH
32027: LD_VAR 0 14
32031: PPUSH
32032: CALL_OW 2
32036: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32037: LD_VAR 0 14
32041: PPUSH
32042: LD_VAR 0 9
32046: PPUSH
32047: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32051: LD_VAR 0 9
32055: PPUSH
32056: CALL_OW 313
32060: PUSH
32061: LD_INT 6
32063: EQUAL
32064: PUSH
32065: LD_VAR 0 9
32069: PPUSH
32070: CALL_OW 266
32074: PUSH
32075: LD_INT 32
32077: PUSH
32078: LD_INT 31
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: IN
32085: OR
32086: IFFALSE 31900
32088: GO 31897
32090: POP
32091: POP
// end else
32092: GO 32474
// for j = 1 to x do
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_VAR 0 13
32108: PUSH
32109: FOR_TO
32110: IFFALSE 32472
// begin InitHc ;
32112: CALL_OW 19
// if not f then
32116: LD_VAR 0 12
32120: NOT
32121: IFFALSE 32210
// begin PrepareHuman ( false , i , skill ) ;
32123: LD_INT 0
32125: PPUSH
32126: LD_VAR 0 8
32130: PPUSH
32131: LD_VAR 0 4
32135: PPUSH
32136: CALL_OW 380
// un := CreateHuman ;
32140: LD_ADDR_VAR 0 14
32144: PUSH
32145: CALL_OW 44
32149: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32150: LD_ADDR_VAR 0 7
32154: PUSH
32155: LD_VAR 0 7
32159: PPUSH
32160: LD_INT 1
32162: PPUSH
32163: LD_VAR 0 14
32167: PPUSH
32168: CALL_OW 2
32172: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32173: LD_VAR 0 14
32177: PPUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: CALL_OW 250
32187: PPUSH
32188: LD_VAR 0 1
32192: PPUSH
32193: CALL_OW 251
32197: PPUSH
32198: LD_INT 10
32200: PPUSH
32201: LD_INT 0
32203: PPUSH
32204: CALL_OW 50
// continue ;
32208: GO 32109
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32210: LD_VAR 0 12
32214: PUSH
32215: LD_INT 1
32217: ARRAY
32218: PPUSH
32219: CALL_OW 313
32223: PUSH
32224: LD_VAR 0 12
32228: PUSH
32229: LD_INT 1
32231: ARRAY
32232: PPUSH
32233: CALL_OW 266
32237: PUSH
32238: LD_INT 32
32240: PUSH
32241: LD_INT 31
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: IN
32248: AND
32249: PUSH
32250: LD_VAR 0 12
32254: PUSH
32255: LD_INT 1
32257: ARRAY
32258: PPUSH
32259: CALL_OW 313
32263: PUSH
32264: LD_INT 6
32266: EQUAL
32267: OR
32268: IFFALSE 32288
// f := Delete ( f , 1 ) ;
32270: LD_ADDR_VAR 0 12
32274: PUSH
32275: LD_VAR 0 12
32279: PPUSH
32280: LD_INT 1
32282: PPUSH
32283: CALL_OW 3
32287: ST_TO_ADDR
// if not f then
32288: LD_VAR 0 12
32292: NOT
32293: IFFALSE 32311
// begin x := x + 2 ;
32295: LD_ADDR_VAR 0 13
32299: PUSH
32300: LD_VAR 0 13
32304: PUSH
32305: LD_INT 2
32307: PLUS
32308: ST_TO_ADDR
// continue ;
32309: GO 32109
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32311: LD_VAR 0 12
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: CALL_OW 266
32324: PUSH
32325: LD_INT 5
32327: EQUAL
32328: IFFALSE 32402
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32330: LD_VAR 0 12
32334: PUSH
32335: LD_INT 1
32337: ARRAY
32338: PPUSH
32339: CALL_OW 313
32343: PUSH
32344: LD_INT 3
32346: LESS
32347: IFFALSE 32383
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32349: LD_INT 0
32351: PPUSH
32352: LD_INT 5
32354: PUSH
32355: LD_INT 8
32357: PUSH
32358: LD_INT 9
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: PUSH
32366: LD_VAR 0 17
32370: ARRAY
32371: PPUSH
32372: LD_VAR 0 4
32376: PPUSH
32377: CALL_OW 380
32381: GO 32400
// PrepareHuman ( false , i , skill ) ;
32383: LD_INT 0
32385: PPUSH
32386: LD_VAR 0 8
32390: PPUSH
32391: LD_VAR 0 4
32395: PPUSH
32396: CALL_OW 380
// end else
32400: GO 32419
// PrepareHuman ( false , i , skill ) ;
32402: LD_INT 0
32404: PPUSH
32405: LD_VAR 0 8
32409: PPUSH
32410: LD_VAR 0 4
32414: PPUSH
32415: CALL_OW 380
// un := CreateHuman ;
32419: LD_ADDR_VAR 0 14
32423: PUSH
32424: CALL_OW 44
32428: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32429: LD_ADDR_VAR 0 7
32433: PUSH
32434: LD_VAR 0 7
32438: PPUSH
32439: LD_INT 1
32441: PPUSH
32442: LD_VAR 0 14
32446: PPUSH
32447: CALL_OW 2
32451: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32452: LD_VAR 0 14
32456: PPUSH
32457: LD_VAR 0 12
32461: PUSH
32462: LD_INT 1
32464: ARRAY
32465: PPUSH
32466: CALL_OW 52
// end ;
32470: GO 32109
32472: POP
32473: POP
// end ;
32474: GO 31411
32476: POP
32477: POP
// result := result ^ buildings ;
32478: LD_ADDR_VAR 0 7
32482: PUSH
32483: LD_VAR 0 7
32487: PUSH
32488: LD_VAR 0 18
32492: ADD
32493: ST_TO_ADDR
// end else
32494: GO 32637
// begin for i = 1 to personel do
32496: LD_ADDR_VAR 0 8
32500: PUSH
32501: DOUBLE
32502: LD_INT 1
32504: DEC
32505: ST_TO_ADDR
32506: LD_VAR 0 6
32510: PUSH
32511: FOR_TO
32512: IFFALSE 32635
// begin if i > 4 then
32514: LD_VAR 0 8
32518: PUSH
32519: LD_INT 4
32521: GREATER
32522: IFFALSE 32526
// break ;
32524: GO 32635
// x := personel [ i ] ;
32526: LD_ADDR_VAR 0 13
32530: PUSH
32531: LD_VAR 0 6
32535: PUSH
32536: LD_VAR 0 8
32540: ARRAY
32541: ST_TO_ADDR
// if x = - 1 then
32542: LD_VAR 0 13
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: EQUAL
32551: IFFALSE 32555
// continue ;
32553: GO 32511
// PrepareHuman ( false , i , skill ) ;
32555: LD_INT 0
32557: PPUSH
32558: LD_VAR 0 8
32562: PPUSH
32563: LD_VAR 0 4
32567: PPUSH
32568: CALL_OW 380
// un := CreateHuman ;
32572: LD_ADDR_VAR 0 14
32576: PUSH
32577: CALL_OW 44
32581: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32582: LD_VAR 0 14
32586: PPUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 250
32596: PPUSH
32597: LD_VAR 0 1
32601: PPUSH
32602: CALL_OW 251
32606: PPUSH
32607: LD_INT 10
32609: PPUSH
32610: LD_INT 0
32612: PPUSH
32613: CALL_OW 50
// result := result ^ un ;
32617: LD_ADDR_VAR 0 7
32621: PUSH
32622: LD_VAR 0 7
32626: PUSH
32627: LD_VAR 0 14
32631: ADD
32632: ST_TO_ADDR
// end ;
32633: GO 32511
32635: POP
32636: POP
// end ; end ;
32637: LD_VAR 0 7
32641: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32642: LD_INT 0
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
32648: PPUSH
32649: PPUSH
32650: PPUSH
32651: PPUSH
32652: PPUSH
32653: PPUSH
32654: PPUSH
32655: PPUSH
32656: PPUSH
32657: PPUSH
32658: PPUSH
32659: PPUSH
// result := false ;
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_INT 0
32667: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32668: LD_VAR 0 1
32672: NOT
32673: PUSH
32674: LD_VAR 0 1
32678: PPUSH
32679: CALL_OW 266
32683: PUSH
32684: LD_INT 32
32686: PUSH
32687: LD_INT 33
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: IN
32694: NOT
32695: OR
32696: IFFALSE 32700
// exit ;
32698: GO 33809
// nat := GetNation ( tower ) ;
32700: LD_ADDR_VAR 0 12
32704: PUSH
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 248
32714: ST_TO_ADDR
// side := GetSide ( tower ) ;
32715: LD_ADDR_VAR 0 16
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL_OW 255
32729: ST_TO_ADDR
// x := GetX ( tower ) ;
32730: LD_ADDR_VAR 0 10
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 250
32744: ST_TO_ADDR
// y := GetY ( tower ) ;
32745: LD_ADDR_VAR 0 11
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 251
32759: ST_TO_ADDR
// if not x or not y then
32760: LD_VAR 0 10
32764: NOT
32765: PUSH
32766: LD_VAR 0 11
32770: NOT
32771: OR
32772: IFFALSE 32776
// exit ;
32774: GO 33809
// weapon := 0 ;
32776: LD_ADDR_VAR 0 18
32780: PUSH
32781: LD_INT 0
32783: ST_TO_ADDR
// fac_list := [ ] ;
32784: LD_ADDR_VAR 0 17
32788: PUSH
32789: EMPTY
32790: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32791: LD_ADDR_VAR 0 6
32795: PUSH
32796: LD_VAR 0 1
32800: PPUSH
32801: CALL_OW 274
32805: PPUSH
32806: LD_VAR 0 2
32810: PPUSH
32811: LD_INT 0
32813: PPUSH
32814: CALL 30380 0 3
32818: PPUSH
32819: LD_INT 30
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PPUSH
32829: CALL_OW 72
32833: ST_TO_ADDR
// if not factories then
32834: LD_VAR 0 6
32838: NOT
32839: IFFALSE 32843
// exit ;
32841: GO 33809
// for i in factories do
32843: LD_ADDR_VAR 0 8
32847: PUSH
32848: LD_VAR 0 6
32852: PUSH
32853: FOR_IN
32854: IFFALSE 32879
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32856: LD_ADDR_VAR 0 17
32860: PUSH
32861: LD_VAR 0 17
32865: PUSH
32866: LD_VAR 0 8
32870: PPUSH
32871: CALL_OW 478
32875: UNION
32876: ST_TO_ADDR
32877: GO 32853
32879: POP
32880: POP
// if not fac_list then
32881: LD_VAR 0 17
32885: NOT
32886: IFFALSE 32890
// exit ;
32888: GO 33809
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32890: LD_ADDR_VAR 0 5
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: LD_INT 9
32903: PUSH
32904: LD_INT 10
32906: PUSH
32907: LD_INT 6
32909: PUSH
32910: LD_INT 7
32912: PUSH
32913: LD_INT 11
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 27
32927: PUSH
32928: LD_INT 28
32930: PUSH
32931: LD_INT 26
32933: PUSH
32934: LD_INT 30
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 43
32945: PUSH
32946: LD_INT 44
32948: PUSH
32949: LD_INT 46
32951: PUSH
32952: LD_INT 45
32954: PUSH
32955: LD_INT 47
32957: PUSH
32958: LD_INT 49
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: PUSH
32974: LD_VAR 0 12
32978: ARRAY
32979: ST_TO_ADDR
// list := list isect fac_list ;
32980: LD_ADDR_VAR 0 5
32984: PUSH
32985: LD_VAR 0 5
32989: PUSH
32990: LD_VAR 0 17
32994: ISECT
32995: ST_TO_ADDR
// if not list then
32996: LD_VAR 0 5
33000: NOT
33001: IFFALSE 33005
// exit ;
33003: GO 33809
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33005: LD_VAR 0 12
33009: PUSH
33010: LD_INT 3
33012: EQUAL
33013: PUSH
33014: LD_INT 49
33016: PUSH
33017: LD_VAR 0 5
33021: IN
33022: AND
33023: PUSH
33024: LD_INT 31
33026: PPUSH
33027: LD_VAR 0 16
33031: PPUSH
33032: CALL_OW 321
33036: PUSH
33037: LD_INT 2
33039: EQUAL
33040: AND
33041: IFFALSE 33101
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33043: LD_INT 22
33045: PUSH
33046: LD_VAR 0 16
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 35
33057: PUSH
33058: LD_INT 49
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 91
33067: PUSH
33068: LD_VAR 0 1
33072: PUSH
33073: LD_INT 10
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: PPUSH
33086: CALL_OW 69
33090: NOT
33091: IFFALSE 33101
// weapon := ru_time_lapser ;
33093: LD_ADDR_VAR 0 18
33097: PUSH
33098: LD_INT 49
33100: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33101: LD_VAR 0 12
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: IN
33116: PUSH
33117: LD_INT 11
33119: PUSH
33120: LD_VAR 0 5
33124: IN
33125: PUSH
33126: LD_INT 30
33128: PUSH
33129: LD_VAR 0 5
33133: IN
33134: OR
33135: AND
33136: PUSH
33137: LD_INT 6
33139: PPUSH
33140: LD_VAR 0 16
33144: PPUSH
33145: CALL_OW 321
33149: PUSH
33150: LD_INT 2
33152: EQUAL
33153: AND
33154: IFFALSE 33319
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33156: LD_INT 22
33158: PUSH
33159: LD_VAR 0 16
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 35
33173: PUSH
33174: LD_INT 11
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 35
33183: PUSH
33184: LD_INT 30
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 91
33198: PUSH
33199: LD_VAR 0 1
33203: PUSH
33204: LD_INT 18
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: PPUSH
33217: CALL_OW 69
33221: NOT
33222: PUSH
33223: LD_INT 22
33225: PUSH
33226: LD_VAR 0 16
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 30
33240: PUSH
33241: LD_INT 32
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 30
33250: PUSH
33251: LD_INT 33
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 91
33265: PUSH
33266: LD_VAR 0 1
33270: PUSH
33271: LD_INT 12
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: PUSH
33284: EMPTY
33285: LIST
33286: PPUSH
33287: CALL_OW 69
33291: PUSH
33292: LD_INT 2
33294: GREATER
33295: AND
33296: IFFALSE 33319
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33298: LD_ADDR_VAR 0 18
33302: PUSH
33303: LD_INT 11
33305: PUSH
33306: LD_INT 30
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_VAR 0 12
33317: ARRAY
33318: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33319: LD_VAR 0 18
33323: NOT
33324: PUSH
33325: LD_INT 40
33327: PPUSH
33328: LD_VAR 0 16
33332: PPUSH
33333: CALL_OW 321
33337: PUSH
33338: LD_INT 2
33340: EQUAL
33341: AND
33342: PUSH
33343: LD_INT 7
33345: PUSH
33346: LD_VAR 0 5
33350: IN
33351: PUSH
33352: LD_INT 28
33354: PUSH
33355: LD_VAR 0 5
33359: IN
33360: OR
33361: PUSH
33362: LD_INT 45
33364: PUSH
33365: LD_VAR 0 5
33369: IN
33370: OR
33371: AND
33372: IFFALSE 33626
// begin hex := GetHexInfo ( x , y ) ;
33374: LD_ADDR_VAR 0 4
33378: PUSH
33379: LD_VAR 0 10
33383: PPUSH
33384: LD_VAR 0 11
33388: PPUSH
33389: CALL_OW 546
33393: ST_TO_ADDR
// if hex [ 1 ] then
33394: LD_VAR 0 4
33398: PUSH
33399: LD_INT 1
33401: ARRAY
33402: IFFALSE 33406
// exit ;
33404: GO 33809
// height := hex [ 2 ] ;
33406: LD_ADDR_VAR 0 15
33410: PUSH
33411: LD_VAR 0 4
33415: PUSH
33416: LD_INT 2
33418: ARRAY
33419: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33420: LD_ADDR_VAR 0 14
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: ST_TO_ADDR
// for i in tmp do
33443: LD_ADDR_VAR 0 8
33447: PUSH
33448: LD_VAR 0 14
33452: PUSH
33453: FOR_IN
33454: IFFALSE 33624
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33456: LD_ADDR_VAR 0 9
33460: PUSH
33461: LD_VAR 0 10
33465: PPUSH
33466: LD_VAR 0 8
33470: PPUSH
33471: LD_INT 5
33473: PPUSH
33474: CALL_OW 272
33478: PUSH
33479: LD_VAR 0 11
33483: PPUSH
33484: LD_VAR 0 8
33488: PPUSH
33489: LD_INT 5
33491: PPUSH
33492: CALL_OW 273
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33501: LD_VAR 0 9
33505: PUSH
33506: LD_INT 1
33508: ARRAY
33509: PPUSH
33510: LD_VAR 0 9
33514: PUSH
33515: LD_INT 2
33517: ARRAY
33518: PPUSH
33519: CALL_OW 488
33523: IFFALSE 33622
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33525: LD_ADDR_VAR 0 4
33529: PUSH
33530: LD_VAR 0 9
33534: PUSH
33535: LD_INT 1
33537: ARRAY
33538: PPUSH
33539: LD_VAR 0 9
33543: PUSH
33544: LD_INT 2
33546: ARRAY
33547: PPUSH
33548: CALL_OW 546
33552: ST_TO_ADDR
// if hex [ 1 ] then
33553: LD_VAR 0 4
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: IFFALSE 33565
// continue ;
33563: GO 33453
// h := hex [ 2 ] ;
33565: LD_ADDR_VAR 0 13
33569: PUSH
33570: LD_VAR 0 4
33574: PUSH
33575: LD_INT 2
33577: ARRAY
33578: ST_TO_ADDR
// if h + 7 < height then
33579: LD_VAR 0 13
33583: PUSH
33584: LD_INT 7
33586: PLUS
33587: PUSH
33588: LD_VAR 0 15
33592: LESS
33593: IFFALSE 33622
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33595: LD_ADDR_VAR 0 18
33599: PUSH
33600: LD_INT 7
33602: PUSH
33603: LD_INT 28
33605: PUSH
33606: LD_INT 45
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: PUSH
33614: LD_VAR 0 12
33618: ARRAY
33619: ST_TO_ADDR
// break ;
33620: GO 33624
// end ; end ; end ;
33622: GO 33453
33624: POP
33625: POP
// end ; if not weapon then
33626: LD_VAR 0 18
33630: NOT
33631: IFFALSE 33691
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33633: LD_ADDR_VAR 0 5
33637: PUSH
33638: LD_VAR 0 5
33642: PUSH
33643: LD_INT 11
33645: PUSH
33646: LD_INT 30
33648: PUSH
33649: LD_INT 49
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: DIFF
33657: ST_TO_ADDR
// if not list then
33658: LD_VAR 0 5
33662: NOT
33663: IFFALSE 33667
// exit ;
33665: GO 33809
// weapon := list [ rand ( 1 , list ) ] ;
33667: LD_ADDR_VAR 0 18
33671: PUSH
33672: LD_VAR 0 5
33676: PUSH
33677: LD_INT 1
33679: PPUSH
33680: LD_VAR 0 5
33684: PPUSH
33685: CALL_OW 12
33689: ARRAY
33690: ST_TO_ADDR
// end ; if weapon then
33691: LD_VAR 0 18
33695: IFFALSE 33809
// begin tmp := CostOfWeapon ( weapon ) ;
33697: LD_ADDR_VAR 0 14
33701: PUSH
33702: LD_VAR 0 18
33706: PPUSH
33707: CALL_OW 451
33711: ST_TO_ADDR
// j := GetBase ( tower ) ;
33712: LD_ADDR_VAR 0 9
33716: PUSH
33717: LD_VAR 0 1
33721: PPUSH
33722: CALL_OW 274
33726: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33727: LD_VAR 0 9
33731: PPUSH
33732: LD_INT 1
33734: PPUSH
33735: CALL_OW 275
33739: PUSH
33740: LD_VAR 0 14
33744: PUSH
33745: LD_INT 1
33747: ARRAY
33748: GREATEREQUAL
33749: PUSH
33750: LD_VAR 0 9
33754: PPUSH
33755: LD_INT 2
33757: PPUSH
33758: CALL_OW 275
33762: PUSH
33763: LD_VAR 0 14
33767: PUSH
33768: LD_INT 2
33770: ARRAY
33771: GREATEREQUAL
33772: AND
33773: PUSH
33774: LD_VAR 0 9
33778: PPUSH
33779: LD_INT 3
33781: PPUSH
33782: CALL_OW 275
33786: PUSH
33787: LD_VAR 0 14
33791: PUSH
33792: LD_INT 3
33794: ARRAY
33795: GREATEREQUAL
33796: AND
33797: IFFALSE 33809
// result := weapon ;
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_VAR 0 18
33808: ST_TO_ADDR
// end ; end ;
33809: LD_VAR 0 3
33813: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33814: LD_INT 0
33816: PPUSH
33817: PPUSH
// result := true ;
33818: LD_ADDR_VAR 0 3
33822: PUSH
33823: LD_INT 1
33825: ST_TO_ADDR
// if array1 = array2 then
33826: LD_VAR 0 1
33830: PUSH
33831: LD_VAR 0 2
33835: EQUAL
33836: IFFALSE 33896
// begin for i = 1 to array1 do
33838: LD_ADDR_VAR 0 4
33842: PUSH
33843: DOUBLE
33844: LD_INT 1
33846: DEC
33847: ST_TO_ADDR
33848: LD_VAR 0 1
33852: PUSH
33853: FOR_TO
33854: IFFALSE 33892
// if array1 [ i ] <> array2 [ i ] then
33856: LD_VAR 0 1
33860: PUSH
33861: LD_VAR 0 4
33865: ARRAY
33866: PUSH
33867: LD_VAR 0 2
33871: PUSH
33872: LD_VAR 0 4
33876: ARRAY
33877: NONEQUAL
33878: IFFALSE 33890
// begin result := false ;
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_INT 0
33887: ST_TO_ADDR
// break ;
33888: GO 33892
// end ;
33890: GO 33853
33892: POP
33893: POP
// end else
33894: GO 33904
// result := false ;
33896: LD_ADDR_VAR 0 3
33900: PUSH
33901: LD_INT 0
33903: ST_TO_ADDR
// end ;
33904: LD_VAR 0 3
33908: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33909: LD_INT 0
33911: PPUSH
33912: PPUSH
// if not array1 or not array2 then
33913: LD_VAR 0 1
33917: NOT
33918: PUSH
33919: LD_VAR 0 2
33923: NOT
33924: OR
33925: IFFALSE 33929
// exit ;
33927: GO 33993
// result := true ;
33929: LD_ADDR_VAR 0 3
33933: PUSH
33934: LD_INT 1
33936: ST_TO_ADDR
// for i = 1 to array1 do
33937: LD_ADDR_VAR 0 4
33941: PUSH
33942: DOUBLE
33943: LD_INT 1
33945: DEC
33946: ST_TO_ADDR
33947: LD_VAR 0 1
33951: PUSH
33952: FOR_TO
33953: IFFALSE 33991
// if array1 [ i ] <> array2 [ i ] then
33955: LD_VAR 0 1
33959: PUSH
33960: LD_VAR 0 4
33964: ARRAY
33965: PUSH
33966: LD_VAR 0 2
33970: PUSH
33971: LD_VAR 0 4
33975: ARRAY
33976: NONEQUAL
33977: IFFALSE 33989
// begin result := false ;
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 0
33986: ST_TO_ADDR
// break ;
33987: GO 33991
// end ;
33989: GO 33952
33991: POP
33992: POP
// end ;
33993: LD_VAR 0 3
33997: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33998: LD_INT 0
34000: PPUSH
34001: PPUSH
34002: PPUSH
// pom := GetBase ( fac ) ;
34003: LD_ADDR_VAR 0 5
34007: PUSH
34008: LD_VAR 0 1
34012: PPUSH
34013: CALL_OW 274
34017: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34018: LD_ADDR_VAR 0 4
34022: PUSH
34023: LD_VAR 0 2
34027: PUSH
34028: LD_INT 1
34030: ARRAY
34031: PPUSH
34032: LD_VAR 0 2
34036: PUSH
34037: LD_INT 2
34039: ARRAY
34040: PPUSH
34041: LD_VAR 0 2
34045: PUSH
34046: LD_INT 3
34048: ARRAY
34049: PPUSH
34050: LD_VAR 0 2
34054: PUSH
34055: LD_INT 4
34057: ARRAY
34058: PPUSH
34059: CALL_OW 449
34063: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_VAR 0 5
34073: PPUSH
34074: LD_INT 1
34076: PPUSH
34077: CALL_OW 275
34081: PUSH
34082: LD_VAR 0 4
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: GREATEREQUAL
34091: PUSH
34092: LD_VAR 0 5
34096: PPUSH
34097: LD_INT 2
34099: PPUSH
34100: CALL_OW 275
34104: PUSH
34105: LD_VAR 0 4
34109: PUSH
34110: LD_INT 2
34112: ARRAY
34113: GREATEREQUAL
34114: AND
34115: PUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: LD_INT 3
34123: PPUSH
34124: CALL_OW 275
34128: PUSH
34129: LD_VAR 0 4
34133: PUSH
34134: LD_INT 3
34136: ARRAY
34137: GREATEREQUAL
34138: AND
34139: ST_TO_ADDR
// end ;
34140: LD_VAR 0 3
34144: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34145: LD_INT 0
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
// pom := GetBase ( building ) ;
34151: LD_ADDR_VAR 0 3
34155: PUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 274
34165: ST_TO_ADDR
// if not pom then
34166: LD_VAR 0 3
34170: NOT
34171: IFFALSE 34175
// exit ;
34173: GO 34345
// btype := GetBType ( building ) ;
34175: LD_ADDR_VAR 0 5
34179: PUSH
34180: LD_VAR 0 1
34184: PPUSH
34185: CALL_OW 266
34189: ST_TO_ADDR
// if btype = b_armoury then
34190: LD_VAR 0 5
34194: PUSH
34195: LD_INT 4
34197: EQUAL
34198: IFFALSE 34208
// btype := b_barracks ;
34200: LD_ADDR_VAR 0 5
34204: PUSH
34205: LD_INT 5
34207: ST_TO_ADDR
// if btype = b_depot then
34208: LD_VAR 0 5
34212: PUSH
34213: LD_INT 0
34215: EQUAL
34216: IFFALSE 34226
// btype := b_warehouse ;
34218: LD_ADDR_VAR 0 5
34222: PUSH
34223: LD_INT 1
34225: ST_TO_ADDR
// if btype = b_workshop then
34226: LD_VAR 0 5
34230: PUSH
34231: LD_INT 2
34233: EQUAL
34234: IFFALSE 34244
// btype := b_factory ;
34236: LD_ADDR_VAR 0 5
34240: PUSH
34241: LD_INT 3
34243: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34244: LD_ADDR_VAR 0 4
34248: PUSH
34249: LD_VAR 0 5
34253: PPUSH
34254: LD_VAR 0 1
34258: PPUSH
34259: CALL_OW 248
34263: PPUSH
34264: CALL_OW 450
34268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34269: LD_ADDR_VAR 0 2
34273: PUSH
34274: LD_VAR 0 3
34278: PPUSH
34279: LD_INT 1
34281: PPUSH
34282: CALL_OW 275
34286: PUSH
34287: LD_VAR 0 4
34291: PUSH
34292: LD_INT 1
34294: ARRAY
34295: GREATEREQUAL
34296: PUSH
34297: LD_VAR 0 3
34301: PPUSH
34302: LD_INT 2
34304: PPUSH
34305: CALL_OW 275
34309: PUSH
34310: LD_VAR 0 4
34314: PUSH
34315: LD_INT 2
34317: ARRAY
34318: GREATEREQUAL
34319: AND
34320: PUSH
34321: LD_VAR 0 3
34325: PPUSH
34326: LD_INT 3
34328: PPUSH
34329: CALL_OW 275
34333: PUSH
34334: LD_VAR 0 4
34338: PUSH
34339: LD_INT 3
34341: ARRAY
34342: GREATEREQUAL
34343: AND
34344: ST_TO_ADDR
// end ;
34345: LD_VAR 0 2
34349: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
34354: PPUSH
// pom := GetBase ( building ) ;
34355: LD_ADDR_VAR 0 4
34359: PUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: CALL_OW 274
34369: ST_TO_ADDR
// if not pom then
34370: LD_VAR 0 4
34374: NOT
34375: IFFALSE 34379
// exit ;
34377: GO 34480
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34379: LD_ADDR_VAR 0 5
34383: PUSH
34384: LD_VAR 0 2
34388: PPUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL_OW 248
34398: PPUSH
34399: CALL_OW 450
34403: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34404: LD_ADDR_VAR 0 3
34408: PUSH
34409: LD_VAR 0 4
34413: PPUSH
34414: LD_INT 1
34416: PPUSH
34417: CALL_OW 275
34421: PUSH
34422: LD_VAR 0 5
34426: PUSH
34427: LD_INT 1
34429: ARRAY
34430: GREATEREQUAL
34431: PUSH
34432: LD_VAR 0 4
34436: PPUSH
34437: LD_INT 2
34439: PPUSH
34440: CALL_OW 275
34444: PUSH
34445: LD_VAR 0 5
34449: PUSH
34450: LD_INT 2
34452: ARRAY
34453: GREATEREQUAL
34454: AND
34455: PUSH
34456: LD_VAR 0 4
34460: PPUSH
34461: LD_INT 3
34463: PPUSH
34464: CALL_OW 275
34468: PUSH
34469: LD_VAR 0 5
34473: PUSH
34474: LD_INT 3
34476: ARRAY
34477: GREATEREQUAL
34478: AND
34479: ST_TO_ADDR
// end ;
34480: LD_VAR 0 3
34484: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34485: LD_INT 0
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
// result := false ;
34498: LD_ADDR_VAR 0 8
34502: PUSH
34503: LD_INT 0
34505: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34506: LD_VAR 0 5
34510: NOT
34511: PUSH
34512: LD_VAR 0 1
34516: NOT
34517: OR
34518: PUSH
34519: LD_VAR 0 2
34523: NOT
34524: OR
34525: PUSH
34526: LD_VAR 0 3
34530: NOT
34531: OR
34532: IFFALSE 34536
// exit ;
34534: GO 35350
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34536: LD_ADDR_VAR 0 14
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: LD_VAR 0 2
34550: PPUSH
34551: LD_VAR 0 3
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: LD_VAR 0 5
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: CALL_OW 248
34574: PPUSH
34575: LD_INT 0
34577: PPUSH
34578: CALL 36587 0 6
34582: ST_TO_ADDR
// if not hexes then
34583: LD_VAR 0 14
34587: NOT
34588: IFFALSE 34592
// exit ;
34590: GO 35350
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34592: LD_ADDR_VAR 0 17
34596: PUSH
34597: LD_VAR 0 5
34601: PPUSH
34602: LD_INT 22
34604: PUSH
34605: LD_VAR 0 13
34609: PPUSH
34610: CALL_OW 255
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 30
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 30
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PPUSH
34651: CALL_OW 72
34655: ST_TO_ADDR
// for i = 1 to hexes do
34656: LD_ADDR_VAR 0 9
34660: PUSH
34661: DOUBLE
34662: LD_INT 1
34664: DEC
34665: ST_TO_ADDR
34666: LD_VAR 0 14
34670: PUSH
34671: FOR_TO
34672: IFFALSE 35348
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34674: LD_ADDR_VAR 0 13
34678: PUSH
34679: LD_VAR 0 14
34683: PUSH
34684: LD_VAR 0 9
34688: ARRAY
34689: PUSH
34690: LD_INT 1
34692: ARRAY
34693: PPUSH
34694: LD_VAR 0 14
34698: PUSH
34699: LD_VAR 0 9
34703: ARRAY
34704: PUSH
34705: LD_INT 2
34707: ARRAY
34708: PPUSH
34709: CALL_OW 428
34713: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34714: LD_VAR 0 14
34718: PUSH
34719: LD_VAR 0 9
34723: ARRAY
34724: PUSH
34725: LD_INT 1
34727: ARRAY
34728: PPUSH
34729: LD_VAR 0 14
34733: PUSH
34734: LD_VAR 0 9
34738: ARRAY
34739: PUSH
34740: LD_INT 2
34742: ARRAY
34743: PPUSH
34744: CALL_OW 351
34748: PUSH
34749: LD_VAR 0 14
34753: PUSH
34754: LD_VAR 0 9
34758: ARRAY
34759: PUSH
34760: LD_INT 1
34762: ARRAY
34763: PPUSH
34764: LD_VAR 0 14
34768: PUSH
34769: LD_VAR 0 9
34773: ARRAY
34774: PUSH
34775: LD_INT 2
34777: ARRAY
34778: PPUSH
34779: CALL_OW 488
34783: NOT
34784: OR
34785: PUSH
34786: LD_VAR 0 13
34790: PPUSH
34791: CALL_OW 247
34795: PUSH
34796: LD_INT 3
34798: EQUAL
34799: OR
34800: IFFALSE 34806
// exit ;
34802: POP
34803: POP
34804: GO 35350
// if not tmp then
34806: LD_VAR 0 13
34810: NOT
34811: IFFALSE 34815
// continue ;
34813: GO 34671
// result := true ;
34815: LD_ADDR_VAR 0 8
34819: PUSH
34820: LD_INT 1
34822: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34823: LD_VAR 0 6
34827: PUSH
34828: LD_VAR 0 13
34832: PPUSH
34833: CALL_OW 247
34837: PUSH
34838: LD_INT 2
34840: EQUAL
34841: AND
34842: PUSH
34843: LD_VAR 0 13
34847: PPUSH
34848: CALL_OW 263
34852: PUSH
34853: LD_INT 1
34855: EQUAL
34856: AND
34857: IFFALSE 35021
// begin if IsDrivenBy ( tmp ) then
34859: LD_VAR 0 13
34863: PPUSH
34864: CALL_OW 311
34868: IFFALSE 34872
// continue ;
34870: GO 34671
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34872: LD_VAR 0 6
34876: PPUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 60
34882: PUSH
34883: EMPTY
34884: LIST
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 3
34892: PUSH
34893: LD_INT 55
34895: PUSH
34896: EMPTY
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PPUSH
34907: CALL_OW 72
34911: IFFALSE 35019
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34913: LD_ADDR_VAR 0 18
34917: PUSH
34918: LD_VAR 0 6
34922: PPUSH
34923: LD_INT 3
34925: PUSH
34926: LD_INT 60
34928: PUSH
34929: EMPTY
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 55
34941: PUSH
34942: EMPTY
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PPUSH
34953: CALL_OW 72
34957: PUSH
34958: LD_INT 1
34960: ARRAY
34961: ST_TO_ADDR
// if IsInUnit ( driver ) then
34962: LD_VAR 0 18
34966: PPUSH
34967: CALL_OW 310
34971: IFFALSE 34982
// ComExit ( driver ) ;
34973: LD_VAR 0 18
34977: PPUSH
34978: CALL 59771 0 1
// AddComEnterUnit ( driver , tmp ) ;
34982: LD_VAR 0 18
34986: PPUSH
34987: LD_VAR 0 13
34991: PPUSH
34992: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34996: LD_VAR 0 18
35000: PPUSH
35001: LD_VAR 0 7
35005: PPUSH
35006: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35010: LD_VAR 0 18
35014: PPUSH
35015: CALL_OW 181
// end ; continue ;
35019: GO 34671
// end ; if not cleaners or not tmp in cleaners then
35021: LD_VAR 0 6
35025: NOT
35026: PUSH
35027: LD_VAR 0 13
35031: PUSH
35032: LD_VAR 0 6
35036: IN
35037: NOT
35038: OR
35039: IFFALSE 35346
// begin if dep then
35041: LD_VAR 0 17
35045: IFFALSE 35181
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35047: LD_ADDR_VAR 0 16
35051: PUSH
35052: LD_VAR 0 17
35056: PUSH
35057: LD_INT 1
35059: ARRAY
35060: PPUSH
35061: CALL_OW 250
35065: PPUSH
35066: LD_VAR 0 17
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: PPUSH
35075: CALL_OW 254
35079: PPUSH
35080: LD_INT 5
35082: PPUSH
35083: CALL_OW 272
35087: PUSH
35088: LD_VAR 0 17
35092: PUSH
35093: LD_INT 1
35095: ARRAY
35096: PPUSH
35097: CALL_OW 251
35101: PPUSH
35102: LD_VAR 0 17
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: PPUSH
35111: CALL_OW 254
35115: PPUSH
35116: LD_INT 5
35118: PPUSH
35119: CALL_OW 273
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35128: LD_VAR 0 16
35132: PUSH
35133: LD_INT 1
35135: ARRAY
35136: PPUSH
35137: LD_VAR 0 16
35141: PUSH
35142: LD_INT 2
35144: ARRAY
35145: PPUSH
35146: CALL_OW 488
35150: IFFALSE 35181
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35152: LD_VAR 0 13
35156: PPUSH
35157: LD_VAR 0 16
35161: PUSH
35162: LD_INT 1
35164: ARRAY
35165: PPUSH
35166: LD_VAR 0 16
35170: PUSH
35171: LD_INT 2
35173: ARRAY
35174: PPUSH
35175: CALL_OW 111
// continue ;
35179: GO 34671
// end ; end ; r := GetDir ( tmp ) ;
35181: LD_ADDR_VAR 0 15
35185: PUSH
35186: LD_VAR 0 13
35190: PPUSH
35191: CALL_OW 254
35195: ST_TO_ADDR
// if r = 5 then
35196: LD_VAR 0 15
35200: PUSH
35201: LD_INT 5
35203: EQUAL
35204: IFFALSE 35214
// r := 0 ;
35206: LD_ADDR_VAR 0 15
35210: PUSH
35211: LD_INT 0
35213: ST_TO_ADDR
// for j = r to 5 do
35214: LD_ADDR_VAR 0 10
35218: PUSH
35219: DOUBLE
35220: LD_VAR 0 15
35224: DEC
35225: ST_TO_ADDR
35226: LD_INT 5
35228: PUSH
35229: FOR_TO
35230: IFFALSE 35344
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35232: LD_ADDR_VAR 0 11
35236: PUSH
35237: LD_VAR 0 13
35241: PPUSH
35242: CALL_OW 250
35246: PPUSH
35247: LD_VAR 0 10
35251: PPUSH
35252: LD_INT 2
35254: PPUSH
35255: CALL_OW 272
35259: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35260: LD_ADDR_VAR 0 12
35264: PUSH
35265: LD_VAR 0 13
35269: PPUSH
35270: CALL_OW 251
35274: PPUSH
35275: LD_VAR 0 10
35279: PPUSH
35280: LD_INT 2
35282: PPUSH
35283: CALL_OW 273
35287: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35288: LD_VAR 0 11
35292: PPUSH
35293: LD_VAR 0 12
35297: PPUSH
35298: CALL_OW 488
35302: PUSH
35303: LD_VAR 0 11
35307: PPUSH
35308: LD_VAR 0 12
35312: PPUSH
35313: CALL_OW 428
35317: NOT
35318: AND
35319: IFFALSE 35342
// begin ComMoveXY ( tmp , _x , _y ) ;
35321: LD_VAR 0 13
35325: PPUSH
35326: LD_VAR 0 11
35330: PPUSH
35331: LD_VAR 0 12
35335: PPUSH
35336: CALL_OW 111
// break ;
35340: GO 35344
// end ; end ;
35342: GO 35229
35344: POP
35345: POP
// end ; end ;
35346: GO 34671
35348: POP
35349: POP
// end ;
35350: LD_VAR 0 8
35354: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35355: LD_INT 0
35357: PPUSH
// result := true ;
35358: LD_ADDR_VAR 0 3
35362: PUSH
35363: LD_INT 1
35365: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35366: LD_VAR 0 2
35370: PUSH
35371: LD_INT 24
35373: DOUBLE
35374: EQUAL
35375: IFTRUE 35385
35377: LD_INT 33
35379: DOUBLE
35380: EQUAL
35381: IFTRUE 35385
35383: GO 35410
35385: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35386: LD_ADDR_VAR 0 3
35390: PUSH
35391: LD_INT 32
35393: PPUSH
35394: LD_VAR 0 1
35398: PPUSH
35399: CALL_OW 321
35403: PUSH
35404: LD_INT 2
35406: EQUAL
35407: ST_TO_ADDR
35408: GO 35730
35410: LD_INT 20
35412: DOUBLE
35413: EQUAL
35414: IFTRUE 35418
35416: GO 35443
35418: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35419: LD_ADDR_VAR 0 3
35423: PUSH
35424: LD_INT 6
35426: PPUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: CALL_OW 321
35436: PUSH
35437: LD_INT 2
35439: EQUAL
35440: ST_TO_ADDR
35441: GO 35730
35443: LD_INT 22
35445: DOUBLE
35446: EQUAL
35447: IFTRUE 35457
35449: LD_INT 36
35451: DOUBLE
35452: EQUAL
35453: IFTRUE 35457
35455: GO 35482
35457: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: LD_INT 15
35465: PPUSH
35466: LD_VAR 0 1
35470: PPUSH
35471: CALL_OW 321
35475: PUSH
35476: LD_INT 2
35478: EQUAL
35479: ST_TO_ADDR
35480: GO 35730
35482: LD_INT 30
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35490
35488: GO 35515
35490: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35491: LD_ADDR_VAR 0 3
35495: PUSH
35496: LD_INT 20
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 321
35508: PUSH
35509: LD_INT 2
35511: EQUAL
35512: ST_TO_ADDR
35513: GO 35730
35515: LD_INT 28
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35529
35521: LD_INT 21
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35554
35529: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_INT 21
35537: PPUSH
35538: LD_VAR 0 1
35542: PPUSH
35543: CALL_OW 321
35547: PUSH
35548: LD_INT 2
35550: EQUAL
35551: ST_TO_ADDR
35552: GO 35730
35554: LD_INT 16
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35589
35562: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35563: LD_ADDR_VAR 0 3
35567: PUSH
35568: LD_EXP 19
35572: PPUSH
35573: LD_VAR 0 1
35577: PPUSH
35578: CALL_OW 321
35582: PUSH
35583: LD_INT 2
35585: EQUAL
35586: ST_TO_ADDR
35587: GO 35730
35589: LD_INT 19
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35603
35595: LD_INT 23
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35603
35601: GO 35630
35603: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35604: LD_ADDR_VAR 0 3
35608: PUSH
35609: LD_EXP 18
35613: PPUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 321
35623: PUSH
35624: LD_INT 2
35626: EQUAL
35627: ST_TO_ADDR
35628: GO 35730
35630: LD_INT 17
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35663
35638: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: LD_INT 39
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 321
35656: PUSH
35657: LD_INT 2
35659: EQUAL
35660: ST_TO_ADDR
35661: GO 35730
35663: LD_INT 18
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35696
35671: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_INT 40
35679: PPUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 321
35689: PUSH
35690: LD_INT 2
35692: EQUAL
35693: ST_TO_ADDR
35694: GO 35730
35696: LD_INT 27
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35704
35702: GO 35729
35704: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35705: LD_ADDR_VAR 0 3
35709: PUSH
35710: LD_INT 35
35712: PPUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 321
35722: PUSH
35723: LD_INT 2
35725: EQUAL
35726: ST_TO_ADDR
35727: GO 35730
35729: POP
// end ;
35730: LD_VAR 0 3
35734: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35735: LD_INT 0
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
// result := false ;
35748: LD_ADDR_VAR 0 6
35752: PUSH
35753: LD_INT 0
35755: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35756: LD_VAR 0 1
35760: NOT
35761: PUSH
35762: LD_VAR 0 1
35766: PPUSH
35767: CALL_OW 266
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: IN
35782: NOT
35783: OR
35784: PUSH
35785: LD_VAR 0 2
35789: NOT
35790: OR
35791: PUSH
35792: LD_VAR 0 5
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: LD_INT 3
35808: PUSH
35809: LD_INT 4
35811: PUSH
35812: LD_INT 5
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: IN
35823: NOT
35824: OR
35825: PUSH
35826: LD_VAR 0 3
35830: PPUSH
35831: LD_VAR 0 4
35835: PPUSH
35836: CALL_OW 488
35840: NOT
35841: OR
35842: IFFALSE 35846
// exit ;
35844: GO 36582
// side := GetSide ( depot ) ;
35846: LD_ADDR_VAR 0 9
35850: PUSH
35851: LD_VAR 0 1
35855: PPUSH
35856: CALL_OW 255
35860: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35861: LD_VAR 0 9
35865: PPUSH
35866: LD_VAR 0 2
35870: PPUSH
35871: CALL 35355 0 2
35875: NOT
35876: IFFALSE 35880
// exit ;
35878: GO 36582
// pom := GetBase ( depot ) ;
35880: LD_ADDR_VAR 0 10
35884: PUSH
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 274
35894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35895: LD_ADDR_VAR 0 11
35899: PUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 248
35914: PPUSH
35915: CALL_OW 450
35919: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35920: LD_VAR 0 10
35924: PPUSH
35925: LD_INT 1
35927: PPUSH
35928: CALL_OW 275
35932: PUSH
35933: LD_VAR 0 11
35937: PUSH
35938: LD_INT 1
35940: ARRAY
35941: GREATEREQUAL
35942: PUSH
35943: LD_VAR 0 10
35947: PPUSH
35948: LD_INT 2
35950: PPUSH
35951: CALL_OW 275
35955: PUSH
35956: LD_VAR 0 11
35960: PUSH
35961: LD_INT 2
35963: ARRAY
35964: GREATEREQUAL
35965: AND
35966: PUSH
35967: LD_VAR 0 10
35971: PPUSH
35972: LD_INT 3
35974: PPUSH
35975: CALL_OW 275
35979: PUSH
35980: LD_VAR 0 11
35984: PUSH
35985: LD_INT 3
35987: ARRAY
35988: GREATEREQUAL
35989: AND
35990: NOT
35991: IFFALSE 35995
// exit ;
35993: GO 36582
// if GetBType ( depot ) = b_depot then
35995: LD_VAR 0 1
35999: PPUSH
36000: CALL_OW 266
36004: PUSH
36005: LD_INT 0
36007: EQUAL
36008: IFFALSE 36020
// dist := 28 else
36010: LD_ADDR_VAR 0 14
36014: PUSH
36015: LD_INT 28
36017: ST_TO_ADDR
36018: GO 36028
// dist := 36 ;
36020: LD_ADDR_VAR 0 14
36024: PUSH
36025: LD_INT 36
36027: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36028: LD_VAR 0 1
36032: PPUSH
36033: LD_VAR 0 3
36037: PPUSH
36038: LD_VAR 0 4
36042: PPUSH
36043: CALL_OW 297
36047: PUSH
36048: LD_VAR 0 14
36052: GREATER
36053: IFFALSE 36057
// exit ;
36055: GO 36582
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36057: LD_ADDR_VAR 0 12
36061: PUSH
36062: LD_VAR 0 2
36066: PPUSH
36067: LD_VAR 0 3
36071: PPUSH
36072: LD_VAR 0 4
36076: PPUSH
36077: LD_VAR 0 5
36081: PPUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 248
36091: PPUSH
36092: LD_INT 0
36094: PPUSH
36095: CALL 36587 0 6
36099: ST_TO_ADDR
// if not hexes then
36100: LD_VAR 0 12
36104: NOT
36105: IFFALSE 36109
// exit ;
36107: GO 36582
// hex := GetHexInfo ( x , y ) ;
36109: LD_ADDR_VAR 0 15
36113: PUSH
36114: LD_VAR 0 3
36118: PPUSH
36119: LD_VAR 0 4
36123: PPUSH
36124: CALL_OW 546
36128: ST_TO_ADDR
// if hex [ 1 ] then
36129: LD_VAR 0 15
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: IFFALSE 36141
// exit ;
36139: GO 36582
// height := hex [ 2 ] ;
36141: LD_ADDR_VAR 0 13
36145: PUSH
36146: LD_VAR 0 15
36150: PUSH
36151: LD_INT 2
36153: ARRAY
36154: ST_TO_ADDR
// for i = 1 to hexes do
36155: LD_ADDR_VAR 0 7
36159: PUSH
36160: DOUBLE
36161: LD_INT 1
36163: DEC
36164: ST_TO_ADDR
36165: LD_VAR 0 12
36169: PUSH
36170: FOR_TO
36171: IFFALSE 36501
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36173: LD_VAR 0 12
36177: PUSH
36178: LD_VAR 0 7
36182: ARRAY
36183: PUSH
36184: LD_INT 1
36186: ARRAY
36187: PPUSH
36188: LD_VAR 0 12
36192: PUSH
36193: LD_VAR 0 7
36197: ARRAY
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: PPUSH
36203: CALL_OW 488
36207: NOT
36208: PUSH
36209: LD_VAR 0 12
36213: PUSH
36214: LD_VAR 0 7
36218: ARRAY
36219: PUSH
36220: LD_INT 1
36222: ARRAY
36223: PPUSH
36224: LD_VAR 0 12
36228: PUSH
36229: LD_VAR 0 7
36233: ARRAY
36234: PUSH
36235: LD_INT 2
36237: ARRAY
36238: PPUSH
36239: CALL_OW 428
36243: PUSH
36244: LD_INT 0
36246: GREATER
36247: OR
36248: PUSH
36249: LD_VAR 0 12
36253: PUSH
36254: LD_VAR 0 7
36258: ARRAY
36259: PUSH
36260: LD_INT 1
36262: ARRAY
36263: PPUSH
36264: LD_VAR 0 12
36268: PUSH
36269: LD_VAR 0 7
36273: ARRAY
36274: PUSH
36275: LD_INT 2
36277: ARRAY
36278: PPUSH
36279: CALL_OW 351
36283: OR
36284: IFFALSE 36290
// exit ;
36286: POP
36287: POP
36288: GO 36582
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36290: LD_ADDR_VAR 0 8
36294: PUSH
36295: LD_VAR 0 12
36299: PUSH
36300: LD_VAR 0 7
36304: ARRAY
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: PPUSH
36310: LD_VAR 0 12
36314: PUSH
36315: LD_VAR 0 7
36319: ARRAY
36320: PUSH
36321: LD_INT 2
36323: ARRAY
36324: PPUSH
36325: CALL_OW 546
36329: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36330: LD_VAR 0 8
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: PUSH
36339: LD_VAR 0 8
36343: PUSH
36344: LD_INT 2
36346: ARRAY
36347: PUSH
36348: LD_VAR 0 13
36352: PUSH
36353: LD_INT 2
36355: PLUS
36356: GREATER
36357: OR
36358: PUSH
36359: LD_VAR 0 8
36363: PUSH
36364: LD_INT 2
36366: ARRAY
36367: PUSH
36368: LD_VAR 0 13
36372: PUSH
36373: LD_INT 2
36375: MINUS
36376: LESS
36377: OR
36378: PUSH
36379: LD_VAR 0 8
36383: PUSH
36384: LD_INT 3
36386: ARRAY
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 8
36393: PUSH
36394: LD_INT 9
36396: PUSH
36397: LD_INT 10
36399: PUSH
36400: LD_INT 11
36402: PUSH
36403: LD_INT 12
36405: PUSH
36406: LD_INT 13
36408: PUSH
36409: LD_INT 16
36411: PUSH
36412: LD_INT 17
36414: PUSH
36415: LD_INT 18
36417: PUSH
36418: LD_INT 19
36420: PUSH
36421: LD_INT 20
36423: PUSH
36424: LD_INT 21
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: IN
36442: NOT
36443: OR
36444: PUSH
36445: LD_VAR 0 8
36449: PUSH
36450: LD_INT 5
36452: ARRAY
36453: NOT
36454: OR
36455: PUSH
36456: LD_VAR 0 8
36460: PUSH
36461: LD_INT 6
36463: ARRAY
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 7
36473: PUSH
36474: LD_INT 9
36476: PUSH
36477: LD_INT 10
36479: PUSH
36480: LD_INT 11
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: IN
36491: NOT
36492: OR
36493: IFFALSE 36499
// exit ;
36495: POP
36496: POP
36497: GO 36582
// end ;
36499: GO 36170
36501: POP
36502: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36503: LD_VAR 0 9
36507: PPUSH
36508: LD_VAR 0 3
36512: PPUSH
36513: LD_VAR 0 4
36517: PPUSH
36518: LD_INT 20
36520: PPUSH
36521: CALL 28528 0 4
36525: PUSH
36526: LD_INT 4
36528: ARRAY
36529: IFFALSE 36533
// exit ;
36531: GO 36582
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36533: LD_VAR 0 2
36537: PUSH
36538: LD_INT 29
36540: PUSH
36541: LD_INT 30
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: IN
36548: PUSH
36549: LD_VAR 0 3
36553: PPUSH
36554: LD_VAR 0 4
36558: PPUSH
36559: LD_VAR 0 9
36563: PPUSH
36564: CALL_OW 440
36568: NOT
36569: AND
36570: IFFALSE 36574
// exit ;
36572: GO 36582
// result := true ;
36574: LD_ADDR_VAR 0 6
36578: PUSH
36579: LD_INT 1
36581: ST_TO_ADDR
// end ;
36582: LD_VAR 0 6
36586: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36587: LD_INT 0
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
36608: PPUSH
36609: PPUSH
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
36621: PPUSH
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
36636: PPUSH
36637: PPUSH
36638: PPUSH
36639: PPUSH
36640: PPUSH
36641: PPUSH
36642: PPUSH
36643: PPUSH
36644: PPUSH
36645: PPUSH
36646: PPUSH
// result = [ ] ;
36647: LD_ADDR_VAR 0 7
36651: PUSH
36652: EMPTY
36653: ST_TO_ADDR
// temp_list = [ ] ;
36654: LD_ADDR_VAR 0 9
36658: PUSH
36659: EMPTY
36660: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36661: LD_VAR 0 4
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 3
36677: PUSH
36678: LD_INT 4
36680: PUSH
36681: LD_INT 5
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: IN
36692: NOT
36693: PUSH
36694: LD_VAR 0 1
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: IN
36709: PUSH
36710: LD_VAR 0 5
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: IN
36729: NOT
36730: AND
36731: OR
36732: IFFALSE 36736
// exit ;
36734: GO 55127
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36736: LD_VAR 0 1
36740: PUSH
36741: LD_INT 6
36743: PUSH
36744: LD_INT 7
36746: PUSH
36747: LD_INT 8
36749: PUSH
36750: LD_INT 13
36752: PUSH
36753: LD_INT 12
36755: PUSH
36756: LD_INT 15
36758: PUSH
36759: LD_INT 11
36761: PUSH
36762: LD_INT 14
36764: PUSH
36765: LD_INT 10
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: IN
36779: IFFALSE 36789
// btype = b_lab ;
36781: LD_ADDR_VAR 0 1
36785: PUSH
36786: LD_INT 6
36788: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36789: LD_VAR 0 6
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: IN
36808: NOT
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: LD_INT 3
36826: PUSH
36827: LD_INT 6
36829: PUSH
36830: LD_INT 36
36832: PUSH
36833: LD_INT 4
36835: PUSH
36836: LD_INT 5
36838: PUSH
36839: LD_INT 31
36841: PUSH
36842: LD_INT 32
36844: PUSH
36845: LD_INT 33
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: IN
36861: NOT
36862: PUSH
36863: LD_VAR 0 6
36867: PUSH
36868: LD_INT 1
36870: EQUAL
36871: AND
36872: OR
36873: PUSH
36874: LD_VAR 0 1
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: IN
36889: NOT
36890: PUSH
36891: LD_VAR 0 6
36895: PUSH
36896: LD_INT 2
36898: EQUAL
36899: AND
36900: OR
36901: IFFALSE 36911
// mode = 0 ;
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: LD_INT 0
36910: ST_TO_ADDR
// case mode of 0 :
36911: LD_VAR 0 6
36915: PUSH
36916: LD_INT 0
36918: DOUBLE
36919: EQUAL
36920: IFTRUE 36924
36922: GO 48377
36924: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36925: LD_ADDR_VAR 0 11
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 2
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 2
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 3
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 3
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37118: LD_ADDR_VAR 0 12
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 3
37275: NEG
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 3
37286: NEG
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37314: LD_ADDR_VAR 0 13
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: LD_INT 3
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 3
37473: NEG
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: LD_INT 3
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37513: LD_ADDR_VAR 0 14
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37709: LD_ADDR_VAR 0 15
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37902: LD_ADDR_VAR 0 16
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 3
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38095: LD_ADDR_VAR 0 17
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38325: LD_ADDR_VAR 0 18
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38555: LD_ADDR_VAR 0 19
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 1
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38785: LD_ADDR_VAR 0 20
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: NEG
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 2
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39015: LD_ADDR_VAR 0 21
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: NEG
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39245: LD_ADDR_VAR 0 22
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 2
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39475: LD_ADDR_VAR 0 23
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 3
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39755: LD_ADDR_VAR 0 24
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40031: LD_ADDR_VAR 0 25
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 3
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 3
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40305: LD_ADDR_VAR 0 26
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 3
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 3
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40581: LD_ADDR_VAR 0 27
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: NEG
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40861: LD_ADDR_VAR 0 28
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: LD_INT 2
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: LD_INT 3
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 3
41096: NEG
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41143: LD_ADDR_VAR 0 29
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: LD_INT 3
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41422: LD_ADDR_VAR 0 30
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 3
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 3
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41700: LD_ADDR_VAR 0 31
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 3
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: NEG
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41978: LD_ADDR_VAR 0 32
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 3
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 3
42221: NEG
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42256: LD_ADDR_VAR 0 33
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: LD_INT 3
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 3
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 3
42500: NEG
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42535: LD_ADDR_VAR 0 34
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 3
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42815: LD_ADDR_VAR 0 35
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42927: LD_ADDR_VAR 0 36
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43039: LD_ADDR_VAR 0 37
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43151: LD_ADDR_VAR 0 38
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43263: LD_ADDR_VAR 0 39
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43375: LD_ADDR_VAR 0 40
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43487: LD_ADDR_VAR 0 41
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43837: LD_ADDR_VAR 0 42
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 3
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 3
44134: NEG
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 3
44146: NEG
44147: PUSH
44148: LD_INT 3
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44187: LD_ADDR_VAR 0 43
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44535: LD_ADDR_VAR 0 44
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: LD_INT 3
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 3
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 3
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 3
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: NEG
44845: PUSH
44846: LD_INT 3
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44885: LD_ADDR_VAR 0 45
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 3
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: LD_INT 3
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: NEG
45195: PUSH
45196: LD_INT 3
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45235: LD_ADDR_VAR 0 46
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 3
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 3
45531: NEG
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 3
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45583: LD_ADDR_VAR 0 47
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45734: LD_ADDR_VAR 0 48
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45881: LD_ADDR_VAR 0 49
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46025: LD_ADDR_VAR 0 50
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46169: LD_ADDR_VAR 0 51
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46316: LD_ADDR_VAR 0 52
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46467: LD_ADDR_VAR 0 53
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46697: LD_ADDR_VAR 0 54
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46927: LD_ADDR_VAR 0 55
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47157: LD_ADDR_VAR 0 56
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47387: LD_ADDR_VAR 0 57
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47617: LD_ADDR_VAR 0 58
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47847: LD_ADDR_VAR 0 59
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47935: LD_ADDR_VAR 0 60
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48023: LD_ADDR_VAR 0 61
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48111: LD_ADDR_VAR 0 62
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48199: LD_ADDR_VAR 0 63
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48287: LD_ADDR_VAR 0 64
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// end ; 1 :
48375: GO 54272
48377: LD_INT 1
48379: DOUBLE
48380: EQUAL
48381: IFTRUE 48385
48383: GO 51008
48385: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48386: LD_ADDR_VAR 0 11
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48430: LD_ADDR_VAR 0 12
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48471: LD_ADDR_VAR 0 13
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 3
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48511: LD_ADDR_VAR 0 14
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48552: LD_ADDR_VAR 0 15
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48596: LD_ADDR_VAR 0 16
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48642: LD_ADDR_VAR 0 17
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48686: LD_ADDR_VAR 0 18
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48727: LD_ADDR_VAR 0 19
48731: PUSH
48732: LD_INT 3
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48767: LD_ADDR_VAR 0 20
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48808: LD_ADDR_VAR 0 21
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: NEG
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48852: LD_ADDR_VAR 0 22
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 3
48871: NEG
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: NEG
48884: PUSH
48885: LD_INT 3
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48898: LD_ADDR_VAR 0 23
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 4
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48942: LD_ADDR_VAR 0 24
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 3
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 4
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48983: LD_ADDR_VAR 0 25
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 4
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 4
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49023: LD_ADDR_VAR 0 26
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 4
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49064: LD_ADDR_VAR 0 27
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 4
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49108: LD_ADDR_VAR 0 28
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: LD_INT 4
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 4
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49154: LD_ADDR_VAR 0 29
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 3
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 4
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 5
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 5
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 4
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 6
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 6
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 5
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49309: LD_ADDR_VAR 0 30
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 4
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 4
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 4
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 5
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 5
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 5
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 6
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 6
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49452: LD_ADDR_VAR 0 31
49456: PUSH
49457: LD_INT 3
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 4
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 3
49509: PUSH
49510: LD_INT 4
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 5
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 5
49529: PUSH
49530: LD_INT 5
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 4
49539: PUSH
49540: LD_INT 5
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 6
49549: PUSH
49550: LD_INT 5
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 6
49559: PUSH
49560: LD_INT 6
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 5
49569: PUSH
49570: LD_INT 6
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49591: LD_ADDR_VAR 0 32
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 3
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 3
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 4
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 4
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 5
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 5
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 4
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 6
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 6
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: LD_INT 5
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49734: LD_ADDR_VAR 0 33
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 4
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 4
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 5
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 5
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 5
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 6
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 6
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49889: LD_ADDR_VAR 0 34
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: LD_INT 4
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 4
49956: NEG
49957: PUSH
49958: LD_INT 4
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: LD_INT 5
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 5
49980: NEG
49981: PUSH
49982: LD_INT 4
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 5
49992: NEG
49993: PUSH
49994: LD_INT 5
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 5
50004: NEG
50005: PUSH
50006: LD_INT 6
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 6
50016: NEG
50017: PUSH
50018: LD_INT 5
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 6
50028: NEG
50029: PUSH
50030: LD_INT 6
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50052: LD_ADDR_VAR 0 41
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50096: LD_ADDR_VAR 0 42
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50137: LD_ADDR_VAR 0 43
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50177: LD_ADDR_VAR 0 44
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50218: LD_ADDR_VAR 0 45
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50262: LD_ADDR_VAR 0 46
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: LIST
50307: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50308: LD_ADDR_VAR 0 47
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50341: LD_ADDR_VAR 0 48
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50372: LD_ADDR_VAR 0 49
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50401: LD_ADDR_VAR 0 50
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50430: LD_ADDR_VAR 0 51
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50461: LD_ADDR_VAR 0 52
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50494: LD_ADDR_VAR 0 53
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50538: LD_ADDR_VAR 0 54
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50579: LD_ADDR_VAR 0 55
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50619: LD_ADDR_VAR 0 56
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50660: LD_ADDR_VAR 0 57
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50704: LD_ADDR_VAR 0 58
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50750: LD_ADDR_VAR 0 59
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50794: LD_ADDR_VAR 0 60
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50835: LD_ADDR_VAR 0 61
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50875: LD_ADDR_VAR 0 62
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50916: LD_ADDR_VAR 0 63
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50960: LD_ADDR_VAR 0 64
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: LIST
51005: ST_TO_ADDR
// end ; 2 :
51006: GO 54272
51008: LD_INT 2
51010: DOUBLE
51011: EQUAL
51012: IFTRUE 51016
51014: GO 54271
51016: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51017: LD_ADDR_VAR 0 29
51021: PUSH
51022: LD_INT 4
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 4
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 5
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 5
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 4
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 4
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 4
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 5
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 5
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 4
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: NEG
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 3
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 4
51367: NEG
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 4
51402: NEG
51403: PUSH
51404: LD_INT 4
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: LD_INT 5
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 4
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 4
51450: NEG
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 5
51462: NEG
51463: PUSH
51464: LD_INT 4
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 5
51474: NEG
51475: PUSH
51476: LD_INT 5
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 5
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 5
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51555: LD_ADDR_VAR 0 30
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: LD_INT 4
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 4
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 5
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 5
51592: PUSH
51593: LD_INT 5
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 4
51602: PUSH
51603: LD_INT 5
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 4
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 3
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 5
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 5
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: LD_INT 4
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 4
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 4
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 4
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 5
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 5
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 5
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 4
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 3
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 4
51907: NEG
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 4
51919: NEG
51920: PUSH
51921: LD_INT 4
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 4
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 4
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 4
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 5
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 4
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 3
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 5
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: LD_INT 5
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52102: LD_ADDR_VAR 0 31
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 4
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 4
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 5
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 5
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 5
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 3
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 4
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 4
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 4
52281: NEG
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 4
52304: NEG
52305: PUSH
52306: LD_INT 4
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 4
52316: NEG
52317: PUSH
52318: LD_INT 5
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: LD_INT 4
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 4
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 5
52364: NEG
52365: PUSH
52366: LD_INT 4
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 5
52376: NEG
52377: PUSH
52378: LD_INT 5
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 5
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 5
52400: NEG
52401: PUSH
52402: LD_INT 3
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 4
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 4
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 4
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 4
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 4
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 5
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 5
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 4
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 5
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52652: LD_ADDR_VAR 0 32
52656: PUSH
52657: LD_INT 4
52659: NEG
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 4
52670: NEG
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 4
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 5
52715: NEG
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 5
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 5
52738: NEG
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 3
52750: NEG
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: LD_INT 3
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 4
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 3
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 4
52821: NEG
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 4
52833: NEG
52834: PUSH
52835: LD_INT 4
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 4
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 4
52857: NEG
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 4
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 5
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 4
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 3
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: LD_INT 5
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 5
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 4
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 4
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 5
53084: PUSH
53085: LD_INT 4
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 5
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: LD_INT 5
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 5
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 5
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53199: LD_ADDR_VAR 0 33
53203: PUSH
53204: LD_INT 4
53206: NEG
53207: PUSH
53208: LD_INT 4
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 4
53218: NEG
53219: PUSH
53220: LD_INT 5
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 3
53230: NEG
53231: PUSH
53232: LD_INT 4
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 4
53254: NEG
53255: PUSH
53256: LD_INT 3
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 5
53266: NEG
53267: PUSH
53268: LD_INT 4
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 5
53278: NEG
53279: PUSH
53280: LD_INT 5
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: LD_INT 5
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 5
53302: NEG
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 4
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 4
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 5
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: LD_INT 2
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 5
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 3
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: LD_INT 4
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: LD_INT 4
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 4
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 4
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 4
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 4
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 5
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 4
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: LD_INT 5
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: LD_INT 3
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53737: LD_ADDR_VAR 0 34
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 4
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 5
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 4
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 4
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 5
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: LD_INT 5
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 4
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 4
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 4
53949: PUSH
53950: LD_INT 3
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 5
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 5
53969: PUSH
53970: LD_INT 5
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 4
53979: PUSH
53980: LD_INT 5
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 5
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: LD_INT 5
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 3
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 4
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 4
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 4
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 4
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 3
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 5
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 5
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 5
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: NEG
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// end ; end ;
54269: GO 54272
54271: POP
// case btype of b_depot , b_warehouse :
54272: LD_VAR 0 1
54276: PUSH
54277: LD_INT 0
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54291
54283: LD_INT 1
54285: DOUBLE
54286: EQUAL
54287: IFTRUE 54291
54289: GO 54492
54291: POP
// case nation of nation_american :
54292: LD_VAR 0 5
54296: PUSH
54297: LD_INT 1
54299: DOUBLE
54300: EQUAL
54301: IFTRUE 54305
54303: GO 54361
54305: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54306: LD_ADDR_VAR 0 9
54310: PUSH
54311: LD_VAR 0 11
54315: PUSH
54316: LD_VAR 0 12
54320: PUSH
54321: LD_VAR 0 13
54325: PUSH
54326: LD_VAR 0 14
54330: PUSH
54331: LD_VAR 0 15
54335: PUSH
54336: LD_VAR 0 16
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: PUSH
54349: LD_VAR 0 4
54353: PUSH
54354: LD_INT 1
54356: PLUS
54357: ARRAY
54358: ST_TO_ADDR
54359: GO 54490
54361: LD_INT 2
54363: DOUBLE
54364: EQUAL
54365: IFTRUE 54369
54367: GO 54425
54369: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54370: LD_ADDR_VAR 0 9
54374: PUSH
54375: LD_VAR 0 17
54379: PUSH
54380: LD_VAR 0 18
54384: PUSH
54385: LD_VAR 0 19
54389: PUSH
54390: LD_VAR 0 20
54394: PUSH
54395: LD_VAR 0 21
54399: PUSH
54400: LD_VAR 0 22
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: PUSH
54413: LD_VAR 0 4
54417: PUSH
54418: LD_INT 1
54420: PLUS
54421: ARRAY
54422: ST_TO_ADDR
54423: GO 54490
54425: LD_INT 3
54427: DOUBLE
54428: EQUAL
54429: IFTRUE 54433
54431: GO 54489
54433: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54434: LD_ADDR_VAR 0 9
54438: PUSH
54439: LD_VAR 0 23
54443: PUSH
54444: LD_VAR 0 24
54448: PUSH
54449: LD_VAR 0 25
54453: PUSH
54454: LD_VAR 0 26
54458: PUSH
54459: LD_VAR 0 27
54463: PUSH
54464: LD_VAR 0 28
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: PUSH
54477: LD_VAR 0 4
54481: PUSH
54482: LD_INT 1
54484: PLUS
54485: ARRAY
54486: ST_TO_ADDR
54487: GO 54490
54489: POP
54490: GO 55045
54492: LD_INT 2
54494: DOUBLE
54495: EQUAL
54496: IFTRUE 54506
54498: LD_INT 3
54500: DOUBLE
54501: EQUAL
54502: IFTRUE 54506
54504: GO 54562
54506: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54507: LD_ADDR_VAR 0 9
54511: PUSH
54512: LD_VAR 0 29
54516: PUSH
54517: LD_VAR 0 30
54521: PUSH
54522: LD_VAR 0 31
54526: PUSH
54527: LD_VAR 0 32
54531: PUSH
54532: LD_VAR 0 33
54536: PUSH
54537: LD_VAR 0 34
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_VAR 0 4
54554: PUSH
54555: LD_INT 1
54557: PLUS
54558: ARRAY
54559: ST_TO_ADDR
54560: GO 55045
54562: LD_INT 16
54564: DOUBLE
54565: EQUAL
54566: IFTRUE 54624
54568: LD_INT 17
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54624
54574: LD_INT 18
54576: DOUBLE
54577: EQUAL
54578: IFTRUE 54624
54580: LD_INT 19
54582: DOUBLE
54583: EQUAL
54584: IFTRUE 54624
54586: LD_INT 22
54588: DOUBLE
54589: EQUAL
54590: IFTRUE 54624
54592: LD_INT 20
54594: DOUBLE
54595: EQUAL
54596: IFTRUE 54624
54598: LD_INT 21
54600: DOUBLE
54601: EQUAL
54602: IFTRUE 54624
54604: LD_INT 23
54606: DOUBLE
54607: EQUAL
54608: IFTRUE 54624
54610: LD_INT 24
54612: DOUBLE
54613: EQUAL
54614: IFTRUE 54624
54616: LD_INT 25
54618: DOUBLE
54619: EQUAL
54620: IFTRUE 54624
54622: GO 54680
54624: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54625: LD_ADDR_VAR 0 9
54629: PUSH
54630: LD_VAR 0 35
54634: PUSH
54635: LD_VAR 0 36
54639: PUSH
54640: LD_VAR 0 37
54644: PUSH
54645: LD_VAR 0 38
54649: PUSH
54650: LD_VAR 0 39
54654: PUSH
54655: LD_VAR 0 40
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: PUSH
54668: LD_VAR 0 4
54672: PUSH
54673: LD_INT 1
54675: PLUS
54676: ARRAY
54677: ST_TO_ADDR
54678: GO 55045
54680: LD_INT 6
54682: DOUBLE
54683: EQUAL
54684: IFTRUE 54736
54686: LD_INT 7
54688: DOUBLE
54689: EQUAL
54690: IFTRUE 54736
54692: LD_INT 8
54694: DOUBLE
54695: EQUAL
54696: IFTRUE 54736
54698: LD_INT 13
54700: DOUBLE
54701: EQUAL
54702: IFTRUE 54736
54704: LD_INT 12
54706: DOUBLE
54707: EQUAL
54708: IFTRUE 54736
54710: LD_INT 15
54712: DOUBLE
54713: EQUAL
54714: IFTRUE 54736
54716: LD_INT 11
54718: DOUBLE
54719: EQUAL
54720: IFTRUE 54736
54722: LD_INT 14
54724: DOUBLE
54725: EQUAL
54726: IFTRUE 54736
54728: LD_INT 10
54730: DOUBLE
54731: EQUAL
54732: IFTRUE 54736
54734: GO 54792
54736: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54737: LD_ADDR_VAR 0 9
54741: PUSH
54742: LD_VAR 0 41
54746: PUSH
54747: LD_VAR 0 42
54751: PUSH
54752: LD_VAR 0 43
54756: PUSH
54757: LD_VAR 0 44
54761: PUSH
54762: LD_VAR 0 45
54766: PUSH
54767: LD_VAR 0 46
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: PUSH
54780: LD_VAR 0 4
54784: PUSH
54785: LD_INT 1
54787: PLUS
54788: ARRAY
54789: ST_TO_ADDR
54790: GO 55045
54792: LD_INT 36
54794: DOUBLE
54795: EQUAL
54796: IFTRUE 54800
54798: GO 54856
54800: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54801: LD_ADDR_VAR 0 9
54805: PUSH
54806: LD_VAR 0 47
54810: PUSH
54811: LD_VAR 0 48
54815: PUSH
54816: LD_VAR 0 49
54820: PUSH
54821: LD_VAR 0 50
54825: PUSH
54826: LD_VAR 0 51
54830: PUSH
54831: LD_VAR 0 52
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: PUSH
54844: LD_VAR 0 4
54848: PUSH
54849: LD_INT 1
54851: PLUS
54852: ARRAY
54853: ST_TO_ADDR
54854: GO 55045
54856: LD_INT 4
54858: DOUBLE
54859: EQUAL
54860: IFTRUE 54882
54862: LD_INT 5
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54882
54868: LD_INT 34
54870: DOUBLE
54871: EQUAL
54872: IFTRUE 54882
54874: LD_INT 37
54876: DOUBLE
54877: EQUAL
54878: IFTRUE 54882
54880: GO 54938
54882: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54883: LD_ADDR_VAR 0 9
54887: PUSH
54888: LD_VAR 0 53
54892: PUSH
54893: LD_VAR 0 54
54897: PUSH
54898: LD_VAR 0 55
54902: PUSH
54903: LD_VAR 0 56
54907: PUSH
54908: LD_VAR 0 57
54912: PUSH
54913: LD_VAR 0 58
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: PUSH
54926: LD_VAR 0 4
54930: PUSH
54931: LD_INT 1
54933: PLUS
54934: ARRAY
54935: ST_TO_ADDR
54936: GO 55045
54938: LD_INT 31
54940: DOUBLE
54941: EQUAL
54942: IFTRUE 54988
54944: LD_INT 32
54946: DOUBLE
54947: EQUAL
54948: IFTRUE 54988
54950: LD_INT 33
54952: DOUBLE
54953: EQUAL
54954: IFTRUE 54988
54956: LD_INT 27
54958: DOUBLE
54959: EQUAL
54960: IFTRUE 54988
54962: LD_INT 26
54964: DOUBLE
54965: EQUAL
54966: IFTRUE 54988
54968: LD_INT 28
54970: DOUBLE
54971: EQUAL
54972: IFTRUE 54988
54974: LD_INT 29
54976: DOUBLE
54977: EQUAL
54978: IFTRUE 54988
54980: LD_INT 30
54982: DOUBLE
54983: EQUAL
54984: IFTRUE 54988
54986: GO 55044
54988: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54989: LD_ADDR_VAR 0 9
54993: PUSH
54994: LD_VAR 0 59
54998: PUSH
54999: LD_VAR 0 60
55003: PUSH
55004: LD_VAR 0 61
55008: PUSH
55009: LD_VAR 0 62
55013: PUSH
55014: LD_VAR 0 63
55018: PUSH
55019: LD_VAR 0 64
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: PUSH
55032: LD_VAR 0 4
55036: PUSH
55037: LD_INT 1
55039: PLUS
55040: ARRAY
55041: ST_TO_ADDR
55042: GO 55045
55044: POP
// temp_list2 = [ ] ;
55045: LD_ADDR_VAR 0 10
55049: PUSH
55050: EMPTY
55051: ST_TO_ADDR
// for i in temp_list do
55052: LD_ADDR_VAR 0 8
55056: PUSH
55057: LD_VAR 0 9
55061: PUSH
55062: FOR_IN
55063: IFFALSE 55115
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55065: LD_ADDR_VAR 0 10
55069: PUSH
55070: LD_VAR 0 10
55074: PUSH
55075: LD_VAR 0 8
55079: PUSH
55080: LD_INT 1
55082: ARRAY
55083: PUSH
55084: LD_VAR 0 2
55088: PLUS
55089: PUSH
55090: LD_VAR 0 8
55094: PUSH
55095: LD_INT 2
55097: ARRAY
55098: PUSH
55099: LD_VAR 0 3
55103: PLUS
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: ADD
55112: ST_TO_ADDR
55113: GO 55062
55115: POP
55116: POP
// result = temp_list2 ;
55117: LD_ADDR_VAR 0 7
55121: PUSH
55122: LD_VAR 0 10
55126: ST_TO_ADDR
// end ;
55127: LD_VAR 0 7
55131: RET
// export function EnemyInRange ( unit , dist ) ; begin
55132: LD_INT 0
55134: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55135: LD_ADDR_VAR 0 3
55139: PUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 255
55149: PPUSH
55150: LD_VAR 0 1
55154: PPUSH
55155: CALL_OW 250
55159: PPUSH
55160: LD_VAR 0 1
55164: PPUSH
55165: CALL_OW 251
55169: PPUSH
55170: LD_VAR 0 2
55174: PPUSH
55175: CALL 28528 0 4
55179: PUSH
55180: LD_INT 4
55182: ARRAY
55183: ST_TO_ADDR
// end ;
55184: LD_VAR 0 3
55188: RET
// export function PlayerSeeMe ( unit ) ; begin
55189: LD_INT 0
55191: PPUSH
// result := See ( your_side , unit ) ;
55192: LD_ADDR_VAR 0 2
55196: PUSH
55197: LD_OWVAR 2
55201: PPUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL_OW 292
55211: ST_TO_ADDR
// end ;
55212: LD_VAR 0 2
55216: RET
// export function ReverseDir ( unit ) ; begin
55217: LD_INT 0
55219: PPUSH
// if not unit then
55220: LD_VAR 0 1
55224: NOT
55225: IFFALSE 55229
// exit ;
55227: GO 55252
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55229: LD_ADDR_VAR 0 2
55233: PUSH
55234: LD_VAR 0 1
55238: PPUSH
55239: CALL_OW 254
55243: PUSH
55244: LD_INT 3
55246: PLUS
55247: PUSH
55248: LD_INT 6
55250: MOD
55251: ST_TO_ADDR
// end ;
55252: LD_VAR 0 2
55256: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
// if not hexes then
55264: LD_VAR 0 2
55268: NOT
55269: IFFALSE 55273
// exit ;
55271: GO 55421
// dist := 9999 ;
55273: LD_ADDR_VAR 0 5
55277: PUSH
55278: LD_INT 9999
55280: ST_TO_ADDR
// for i = 1 to hexes do
55281: LD_ADDR_VAR 0 4
55285: PUSH
55286: DOUBLE
55287: LD_INT 1
55289: DEC
55290: ST_TO_ADDR
55291: LD_VAR 0 2
55295: PUSH
55296: FOR_TO
55297: IFFALSE 55409
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55299: LD_VAR 0 1
55303: PPUSH
55304: LD_VAR 0 2
55308: PUSH
55309: LD_VAR 0 4
55313: ARRAY
55314: PUSH
55315: LD_INT 1
55317: ARRAY
55318: PPUSH
55319: LD_VAR 0 2
55323: PUSH
55324: LD_VAR 0 4
55328: ARRAY
55329: PUSH
55330: LD_INT 2
55332: ARRAY
55333: PPUSH
55334: CALL_OW 297
55338: PUSH
55339: LD_VAR 0 5
55343: LESS
55344: IFFALSE 55407
// begin hex := hexes [ i ] ;
55346: LD_ADDR_VAR 0 7
55350: PUSH
55351: LD_VAR 0 2
55355: PUSH
55356: LD_VAR 0 4
55360: ARRAY
55361: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55362: LD_ADDR_VAR 0 5
55366: PUSH
55367: LD_VAR 0 1
55371: PPUSH
55372: LD_VAR 0 2
55376: PUSH
55377: LD_VAR 0 4
55381: ARRAY
55382: PUSH
55383: LD_INT 1
55385: ARRAY
55386: PPUSH
55387: LD_VAR 0 2
55391: PUSH
55392: LD_VAR 0 4
55396: ARRAY
55397: PUSH
55398: LD_INT 2
55400: ARRAY
55401: PPUSH
55402: CALL_OW 297
55406: ST_TO_ADDR
// end ; end ;
55407: GO 55296
55409: POP
55410: POP
// result := hex ;
55411: LD_ADDR_VAR 0 3
55415: PUSH
55416: LD_VAR 0 7
55420: ST_TO_ADDR
// end ;
55421: LD_VAR 0 3
55425: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55426: LD_INT 0
55428: PPUSH
55429: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55430: LD_VAR 0 1
55434: NOT
55435: PUSH
55436: LD_VAR 0 1
55440: PUSH
55441: LD_INT 21
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 23
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PPUSH
55465: CALL_OW 69
55469: IN
55470: NOT
55471: OR
55472: IFFALSE 55476
// exit ;
55474: GO 55523
// for i = 1 to 3 do
55476: LD_ADDR_VAR 0 3
55480: PUSH
55481: DOUBLE
55482: LD_INT 1
55484: DEC
55485: ST_TO_ADDR
55486: LD_INT 3
55488: PUSH
55489: FOR_TO
55490: IFFALSE 55521
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55492: LD_VAR 0 1
55496: PPUSH
55497: CALL_OW 250
55501: PPUSH
55502: LD_VAR 0 1
55506: PPUSH
55507: CALL_OW 251
55511: PPUSH
55512: LD_INT 1
55514: PPUSH
55515: CALL_OW 453
55519: GO 55489
55521: POP
55522: POP
// end ;
55523: LD_VAR 0 2
55527: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55528: LD_INT 0
55530: PPUSH
55531: PPUSH
55532: PPUSH
55533: PPUSH
55534: PPUSH
55535: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55536: LD_VAR 0 1
55540: NOT
55541: PUSH
55542: LD_VAR 0 2
55546: NOT
55547: OR
55548: PUSH
55549: LD_VAR 0 1
55553: PPUSH
55554: CALL_OW 314
55558: OR
55559: IFFALSE 55563
// exit ;
55561: GO 56004
// x := GetX ( enemy_unit ) ;
55563: LD_ADDR_VAR 0 7
55567: PUSH
55568: LD_VAR 0 2
55572: PPUSH
55573: CALL_OW 250
55577: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55578: LD_ADDR_VAR 0 8
55582: PUSH
55583: LD_VAR 0 2
55587: PPUSH
55588: CALL_OW 251
55592: ST_TO_ADDR
// if not x or not y then
55593: LD_VAR 0 7
55597: NOT
55598: PUSH
55599: LD_VAR 0 8
55603: NOT
55604: OR
55605: IFFALSE 55609
// exit ;
55607: GO 56004
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55609: LD_ADDR_VAR 0 6
55613: PUSH
55614: LD_VAR 0 7
55618: PPUSH
55619: LD_INT 0
55621: PPUSH
55622: LD_INT 4
55624: PPUSH
55625: CALL_OW 272
55629: PUSH
55630: LD_VAR 0 8
55634: PPUSH
55635: LD_INT 0
55637: PPUSH
55638: LD_INT 4
55640: PPUSH
55641: CALL_OW 273
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_VAR 0 7
55654: PPUSH
55655: LD_INT 1
55657: PPUSH
55658: LD_INT 4
55660: PPUSH
55661: CALL_OW 272
55665: PUSH
55666: LD_VAR 0 8
55670: PPUSH
55671: LD_INT 1
55673: PPUSH
55674: LD_INT 4
55676: PPUSH
55677: CALL_OW 273
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_VAR 0 7
55690: PPUSH
55691: LD_INT 2
55693: PPUSH
55694: LD_INT 4
55696: PPUSH
55697: CALL_OW 272
55701: PUSH
55702: LD_VAR 0 8
55706: PPUSH
55707: LD_INT 2
55709: PPUSH
55710: LD_INT 4
55712: PPUSH
55713: CALL_OW 273
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_VAR 0 7
55726: PPUSH
55727: LD_INT 3
55729: PPUSH
55730: LD_INT 4
55732: PPUSH
55733: CALL_OW 272
55737: PUSH
55738: LD_VAR 0 8
55742: PPUSH
55743: LD_INT 3
55745: PPUSH
55746: LD_INT 4
55748: PPUSH
55749: CALL_OW 273
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_VAR 0 7
55762: PPUSH
55763: LD_INT 4
55765: PPUSH
55766: LD_INT 4
55768: PPUSH
55769: CALL_OW 272
55773: PUSH
55774: LD_VAR 0 8
55778: PPUSH
55779: LD_INT 4
55781: PPUSH
55782: LD_INT 4
55784: PPUSH
55785: CALL_OW 273
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_VAR 0 7
55798: PPUSH
55799: LD_INT 5
55801: PPUSH
55802: LD_INT 4
55804: PPUSH
55805: CALL_OW 272
55809: PUSH
55810: LD_VAR 0 8
55814: PPUSH
55815: LD_INT 5
55817: PPUSH
55818: LD_INT 4
55820: PPUSH
55821: CALL_OW 273
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// for i = tmp downto 1 do
55838: LD_ADDR_VAR 0 4
55842: PUSH
55843: DOUBLE
55844: LD_VAR 0 6
55848: INC
55849: ST_TO_ADDR
55850: LD_INT 1
55852: PUSH
55853: FOR_DOWNTO
55854: IFFALSE 55955
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55856: LD_VAR 0 6
55860: PUSH
55861: LD_VAR 0 4
55865: ARRAY
55866: PUSH
55867: LD_INT 1
55869: ARRAY
55870: PPUSH
55871: LD_VAR 0 6
55875: PUSH
55876: LD_VAR 0 4
55880: ARRAY
55881: PUSH
55882: LD_INT 2
55884: ARRAY
55885: PPUSH
55886: CALL_OW 488
55890: NOT
55891: PUSH
55892: LD_VAR 0 6
55896: PUSH
55897: LD_VAR 0 4
55901: ARRAY
55902: PUSH
55903: LD_INT 1
55905: ARRAY
55906: PPUSH
55907: LD_VAR 0 6
55911: PUSH
55912: LD_VAR 0 4
55916: ARRAY
55917: PUSH
55918: LD_INT 2
55920: ARRAY
55921: PPUSH
55922: CALL_OW 428
55926: PUSH
55927: LD_INT 0
55929: NONEQUAL
55930: OR
55931: IFFALSE 55953
// tmp := Delete ( tmp , i ) ;
55933: LD_ADDR_VAR 0 6
55937: PUSH
55938: LD_VAR 0 6
55942: PPUSH
55943: LD_VAR 0 4
55947: PPUSH
55948: CALL_OW 3
55952: ST_TO_ADDR
55953: GO 55853
55955: POP
55956: POP
// j := GetClosestHex ( unit , tmp ) ;
55957: LD_ADDR_VAR 0 5
55961: PUSH
55962: LD_VAR 0 1
55966: PPUSH
55967: LD_VAR 0 6
55971: PPUSH
55972: CALL 55257 0 2
55976: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55977: LD_VAR 0 1
55981: PPUSH
55982: LD_VAR 0 5
55986: PUSH
55987: LD_INT 1
55989: ARRAY
55990: PPUSH
55991: LD_VAR 0 5
55995: PUSH
55996: LD_INT 2
55998: ARRAY
55999: PPUSH
56000: CALL_OW 111
// end ;
56004: LD_VAR 0 3
56008: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56009: LD_INT 0
56011: PPUSH
56012: PPUSH
56013: PPUSH
// uc_side = 0 ;
56014: LD_ADDR_OWVAR 20
56018: PUSH
56019: LD_INT 0
56021: ST_TO_ADDR
// uc_nation = 0 ;
56022: LD_ADDR_OWVAR 21
56026: PUSH
56027: LD_INT 0
56029: ST_TO_ADDR
// InitHc_All ( ) ;
56030: CALL_OW 584
// InitVc ;
56034: CALL_OW 20
// if mastodonts then
56038: LD_VAR 0 6
56042: IFFALSE 56109
// for i = 1 to mastodonts do
56044: LD_ADDR_VAR 0 11
56048: PUSH
56049: DOUBLE
56050: LD_INT 1
56052: DEC
56053: ST_TO_ADDR
56054: LD_VAR 0 6
56058: PUSH
56059: FOR_TO
56060: IFFALSE 56107
// begin vc_chassis := 31 ;
56062: LD_ADDR_OWVAR 37
56066: PUSH
56067: LD_INT 31
56069: ST_TO_ADDR
// vc_control := control_rider ;
56070: LD_ADDR_OWVAR 38
56074: PUSH
56075: LD_INT 4
56077: ST_TO_ADDR
// animal := CreateVehicle ;
56078: LD_ADDR_VAR 0 12
56082: PUSH
56083: CALL_OW 45
56087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56088: LD_VAR 0 12
56092: PPUSH
56093: LD_VAR 0 8
56097: PPUSH
56098: LD_INT 0
56100: PPUSH
56101: CALL 58297 0 3
// end ;
56105: GO 56059
56107: POP
56108: POP
// if horses then
56109: LD_VAR 0 5
56113: IFFALSE 56180
// for i = 1 to horses do
56115: LD_ADDR_VAR 0 11
56119: PUSH
56120: DOUBLE
56121: LD_INT 1
56123: DEC
56124: ST_TO_ADDR
56125: LD_VAR 0 5
56129: PUSH
56130: FOR_TO
56131: IFFALSE 56178
// begin hc_class := 21 ;
56133: LD_ADDR_OWVAR 28
56137: PUSH
56138: LD_INT 21
56140: ST_TO_ADDR
// hc_gallery :=  ;
56141: LD_ADDR_OWVAR 33
56145: PUSH
56146: LD_STRING 
56148: ST_TO_ADDR
// animal := CreateHuman ;
56149: LD_ADDR_VAR 0 12
56153: PUSH
56154: CALL_OW 44
56158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56159: LD_VAR 0 12
56163: PPUSH
56164: LD_VAR 0 8
56168: PPUSH
56169: LD_INT 0
56171: PPUSH
56172: CALL 58297 0 3
// end ;
56176: GO 56130
56178: POP
56179: POP
// if birds then
56180: LD_VAR 0 1
56184: IFFALSE 56251
// for i = 1 to birds do
56186: LD_ADDR_VAR 0 11
56190: PUSH
56191: DOUBLE
56192: LD_INT 1
56194: DEC
56195: ST_TO_ADDR
56196: LD_VAR 0 1
56200: PUSH
56201: FOR_TO
56202: IFFALSE 56249
// begin hc_class = 18 ;
56204: LD_ADDR_OWVAR 28
56208: PUSH
56209: LD_INT 18
56211: ST_TO_ADDR
// hc_gallery =  ;
56212: LD_ADDR_OWVAR 33
56216: PUSH
56217: LD_STRING 
56219: ST_TO_ADDR
// animal := CreateHuman ;
56220: LD_ADDR_VAR 0 12
56224: PUSH
56225: CALL_OW 44
56229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56230: LD_VAR 0 12
56234: PPUSH
56235: LD_VAR 0 8
56239: PPUSH
56240: LD_INT 0
56242: PPUSH
56243: CALL 58297 0 3
// end ;
56247: GO 56201
56249: POP
56250: POP
// if tigers then
56251: LD_VAR 0 2
56255: IFFALSE 56339
// for i = 1 to tigers do
56257: LD_ADDR_VAR 0 11
56261: PUSH
56262: DOUBLE
56263: LD_INT 1
56265: DEC
56266: ST_TO_ADDR
56267: LD_VAR 0 2
56271: PUSH
56272: FOR_TO
56273: IFFALSE 56337
// begin hc_class = class_tiger ;
56275: LD_ADDR_OWVAR 28
56279: PUSH
56280: LD_INT 14
56282: ST_TO_ADDR
// hc_gallery =  ;
56283: LD_ADDR_OWVAR 33
56287: PUSH
56288: LD_STRING 
56290: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56291: LD_ADDR_OWVAR 35
56295: PUSH
56296: LD_INT 7
56298: NEG
56299: PPUSH
56300: LD_INT 7
56302: PPUSH
56303: CALL_OW 12
56307: ST_TO_ADDR
// animal := CreateHuman ;
56308: LD_ADDR_VAR 0 12
56312: PUSH
56313: CALL_OW 44
56317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56318: LD_VAR 0 12
56322: PPUSH
56323: LD_VAR 0 8
56327: PPUSH
56328: LD_INT 0
56330: PPUSH
56331: CALL 58297 0 3
// end ;
56335: GO 56272
56337: POP
56338: POP
// if apemans then
56339: LD_VAR 0 3
56343: IFFALSE 56466
// for i = 1 to apemans do
56345: LD_ADDR_VAR 0 11
56349: PUSH
56350: DOUBLE
56351: LD_INT 1
56353: DEC
56354: ST_TO_ADDR
56355: LD_VAR 0 3
56359: PUSH
56360: FOR_TO
56361: IFFALSE 56464
// begin hc_class = class_apeman ;
56363: LD_ADDR_OWVAR 28
56367: PUSH
56368: LD_INT 12
56370: ST_TO_ADDR
// hc_gallery =  ;
56371: LD_ADDR_OWVAR 33
56375: PUSH
56376: LD_STRING 
56378: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56379: LD_ADDR_OWVAR 35
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PPUSH
56388: LD_INT 2
56390: PPUSH
56391: CALL_OW 12
56395: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56396: LD_ADDR_OWVAR 31
56400: PUSH
56401: LD_INT 1
56403: PPUSH
56404: LD_INT 3
56406: PPUSH
56407: CALL_OW 12
56411: PUSH
56412: LD_INT 1
56414: PPUSH
56415: LD_INT 3
56417: PPUSH
56418: CALL_OW 12
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: ST_TO_ADDR
// animal := CreateHuman ;
56435: LD_ADDR_VAR 0 12
56439: PUSH
56440: CALL_OW 44
56444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56445: LD_VAR 0 12
56449: PPUSH
56450: LD_VAR 0 8
56454: PPUSH
56455: LD_INT 0
56457: PPUSH
56458: CALL 58297 0 3
// end ;
56462: GO 56360
56464: POP
56465: POP
// if enchidnas then
56466: LD_VAR 0 4
56470: IFFALSE 56537
// for i = 1 to enchidnas do
56472: LD_ADDR_VAR 0 11
56476: PUSH
56477: DOUBLE
56478: LD_INT 1
56480: DEC
56481: ST_TO_ADDR
56482: LD_VAR 0 4
56486: PUSH
56487: FOR_TO
56488: IFFALSE 56535
// begin hc_class = 13 ;
56490: LD_ADDR_OWVAR 28
56494: PUSH
56495: LD_INT 13
56497: ST_TO_ADDR
// hc_gallery =  ;
56498: LD_ADDR_OWVAR 33
56502: PUSH
56503: LD_STRING 
56505: ST_TO_ADDR
// animal := CreateHuman ;
56506: LD_ADDR_VAR 0 12
56510: PUSH
56511: CALL_OW 44
56515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56516: LD_VAR 0 12
56520: PPUSH
56521: LD_VAR 0 8
56525: PPUSH
56526: LD_INT 0
56528: PPUSH
56529: CALL 58297 0 3
// end ;
56533: GO 56487
56535: POP
56536: POP
// if fishes then
56537: LD_VAR 0 7
56541: IFFALSE 56608
// for i = 1 to fishes do
56543: LD_ADDR_VAR 0 11
56547: PUSH
56548: DOUBLE
56549: LD_INT 1
56551: DEC
56552: ST_TO_ADDR
56553: LD_VAR 0 7
56557: PUSH
56558: FOR_TO
56559: IFFALSE 56606
// begin hc_class = 20 ;
56561: LD_ADDR_OWVAR 28
56565: PUSH
56566: LD_INT 20
56568: ST_TO_ADDR
// hc_gallery =  ;
56569: LD_ADDR_OWVAR 33
56573: PUSH
56574: LD_STRING 
56576: ST_TO_ADDR
// animal := CreateHuman ;
56577: LD_ADDR_VAR 0 12
56581: PUSH
56582: CALL_OW 44
56586: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56587: LD_VAR 0 12
56591: PPUSH
56592: LD_VAR 0 9
56596: PPUSH
56597: LD_INT 0
56599: PPUSH
56600: CALL 58297 0 3
// end ;
56604: GO 56558
56606: POP
56607: POP
// end ;
56608: LD_VAR 0 10
56612: RET
// export function WantHeal ( sci , unit ) ; begin
56613: LD_INT 0
56615: PPUSH
// if GetTaskList ( sci ) > 0 then
56616: LD_VAR 0 1
56620: PPUSH
56621: CALL_OW 437
56625: PUSH
56626: LD_INT 0
56628: GREATER
56629: IFFALSE 56699
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56631: LD_VAR 0 1
56635: PPUSH
56636: CALL_OW 437
56640: PUSH
56641: LD_INT 1
56643: ARRAY
56644: PUSH
56645: LD_INT 1
56647: ARRAY
56648: PUSH
56649: LD_STRING l
56651: EQUAL
56652: PUSH
56653: LD_VAR 0 1
56657: PPUSH
56658: CALL_OW 437
56662: PUSH
56663: LD_INT 1
56665: ARRAY
56666: PUSH
56667: LD_INT 4
56669: ARRAY
56670: PUSH
56671: LD_VAR 0 2
56675: EQUAL
56676: AND
56677: IFFALSE 56689
// result := true else
56679: LD_ADDR_VAR 0 3
56683: PUSH
56684: LD_INT 1
56686: ST_TO_ADDR
56687: GO 56697
// result := false ;
56689: LD_ADDR_VAR 0 3
56693: PUSH
56694: LD_INT 0
56696: ST_TO_ADDR
// end else
56697: GO 56707
// result := false ;
56699: LD_ADDR_VAR 0 3
56703: PUSH
56704: LD_INT 0
56706: ST_TO_ADDR
// end ;
56707: LD_VAR 0 3
56711: RET
// export function HealTarget ( sci ) ; begin
56712: LD_INT 0
56714: PPUSH
// if not sci then
56715: LD_VAR 0 1
56719: NOT
56720: IFFALSE 56724
// exit ;
56722: GO 56789
// result := 0 ;
56724: LD_ADDR_VAR 0 2
56728: PUSH
56729: LD_INT 0
56731: ST_TO_ADDR
// if GetTaskList ( sci ) then
56732: LD_VAR 0 1
56736: PPUSH
56737: CALL_OW 437
56741: IFFALSE 56789
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56743: LD_VAR 0 1
56747: PPUSH
56748: CALL_OW 437
56752: PUSH
56753: LD_INT 1
56755: ARRAY
56756: PUSH
56757: LD_INT 1
56759: ARRAY
56760: PUSH
56761: LD_STRING l
56763: EQUAL
56764: IFFALSE 56789
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56766: LD_ADDR_VAR 0 2
56770: PUSH
56771: LD_VAR 0 1
56775: PPUSH
56776: CALL_OW 437
56780: PUSH
56781: LD_INT 1
56783: ARRAY
56784: PUSH
56785: LD_INT 4
56787: ARRAY
56788: ST_TO_ADDR
// end ;
56789: LD_VAR 0 2
56793: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56794: LD_INT 0
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
// if not base_units then
56800: LD_VAR 0 1
56804: NOT
56805: IFFALSE 56809
// exit ;
56807: GO 56896
// result := false ;
56809: LD_ADDR_VAR 0 2
56813: PUSH
56814: LD_INT 0
56816: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56817: LD_ADDR_VAR 0 5
56821: PUSH
56822: LD_VAR 0 1
56826: PPUSH
56827: LD_INT 21
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PPUSH
56837: CALL_OW 72
56841: ST_TO_ADDR
// if not tmp then
56842: LD_VAR 0 5
56846: NOT
56847: IFFALSE 56851
// exit ;
56849: GO 56896
// for i in tmp do
56851: LD_ADDR_VAR 0 3
56855: PUSH
56856: LD_VAR 0 5
56860: PUSH
56861: FOR_IN
56862: IFFALSE 56894
// begin result := EnemyInRange ( i , 22 ) ;
56864: LD_ADDR_VAR 0 2
56868: PUSH
56869: LD_VAR 0 3
56873: PPUSH
56874: LD_INT 22
56876: PPUSH
56877: CALL 55132 0 2
56881: ST_TO_ADDR
// if result then
56882: LD_VAR 0 2
56886: IFFALSE 56892
// exit ;
56888: POP
56889: POP
56890: GO 56896
// end ;
56892: GO 56861
56894: POP
56895: POP
// end ;
56896: LD_VAR 0 2
56900: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56901: LD_INT 0
56903: PPUSH
56904: PPUSH
// if not units then
56905: LD_VAR 0 1
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 56984
// result := [ ] ;
56914: LD_ADDR_VAR 0 3
56918: PUSH
56919: EMPTY
56920: ST_TO_ADDR
// for i in units do
56921: LD_ADDR_VAR 0 4
56925: PUSH
56926: LD_VAR 0 1
56930: PUSH
56931: FOR_IN
56932: IFFALSE 56982
// if GetTag ( i ) = tag then
56934: LD_VAR 0 4
56938: PPUSH
56939: CALL_OW 110
56943: PUSH
56944: LD_VAR 0 2
56948: EQUAL
56949: IFFALSE 56980
// result := Replace ( result , result + 1 , i ) ;
56951: LD_ADDR_VAR 0 3
56955: PUSH
56956: LD_VAR 0 3
56960: PPUSH
56961: LD_VAR 0 3
56965: PUSH
56966: LD_INT 1
56968: PLUS
56969: PPUSH
56970: LD_VAR 0 4
56974: PPUSH
56975: CALL_OW 1
56979: ST_TO_ADDR
56980: GO 56931
56982: POP
56983: POP
// end ;
56984: LD_VAR 0 3
56988: RET
// export function IsDriver ( un ) ; begin
56989: LD_INT 0
56991: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56992: LD_ADDR_VAR 0 2
56996: PUSH
56997: LD_VAR 0 1
57001: PUSH
57002: LD_INT 55
57004: PUSH
57005: EMPTY
57006: LIST
57007: PPUSH
57008: CALL_OW 69
57012: IN
57013: ST_TO_ADDR
// end ;
57014: LD_VAR 0 2
57018: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57019: LD_INT 0
57021: PPUSH
57022: PPUSH
// list := [ ] ;
57023: LD_ADDR_VAR 0 5
57027: PUSH
57028: EMPTY
57029: ST_TO_ADDR
// case d of 0 :
57030: LD_VAR 0 3
57034: PUSH
57035: LD_INT 0
57037: DOUBLE
57038: EQUAL
57039: IFTRUE 57043
57041: GO 57176
57043: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57044: LD_ADDR_VAR 0 5
57048: PUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_INT 4
57056: MINUS
57057: PUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_INT 4
57065: MINUS
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: PUSH
57075: LD_VAR 0 1
57079: PUSH
57080: LD_INT 3
57082: MINUS
57083: PUSH
57084: LD_VAR 0 2
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: PUSH
57097: LD_VAR 0 1
57101: PUSH
57102: LD_INT 4
57104: PLUS
57105: PUSH
57106: LD_VAR 0 2
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: PUSH
57119: LD_VAR 0 1
57123: PUSH
57124: LD_INT 3
57126: PLUS
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: LD_INT 3
57135: PLUS
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: PUSH
57145: LD_VAR 0 1
57149: PUSH
57150: LD_VAR 0 2
57154: PUSH
57155: LD_INT 4
57157: PLUS
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// end ; 1 :
57174: GO 57874
57176: LD_INT 1
57178: DOUBLE
57179: EQUAL
57180: IFTRUE 57184
57182: GO 57317
57184: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57185: LD_ADDR_VAR 0 5
57189: PUSH
57190: LD_VAR 0 1
57194: PUSH
57195: LD_VAR 0 2
57199: PUSH
57200: LD_INT 4
57202: MINUS
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: PUSH
57212: LD_VAR 0 1
57216: PUSH
57217: LD_INT 3
57219: MINUS
57220: PUSH
57221: LD_VAR 0 2
57225: PUSH
57226: LD_INT 3
57228: MINUS
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: PUSH
57238: LD_VAR 0 1
57242: PUSH
57243: LD_INT 4
57245: MINUS
57246: PUSH
57247: LD_VAR 0 2
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: LD_VAR 0 2
57269: PUSH
57270: LD_INT 3
57272: PLUS
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: PUSH
57282: LD_VAR 0 1
57286: PUSH
57287: LD_INT 4
57289: PLUS
57290: PUSH
57291: LD_VAR 0 2
57295: PUSH
57296: LD_INT 4
57298: PLUS
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// end ; 2 :
57315: GO 57874
57317: LD_INT 2
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57325
57323: GO 57454
57325: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57326: LD_ADDR_VAR 0 5
57330: PUSH
57331: LD_VAR 0 1
57335: PUSH
57336: LD_VAR 0 2
57340: PUSH
57341: LD_INT 3
57343: MINUS
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: PUSH
57353: LD_VAR 0 1
57357: PUSH
57358: LD_INT 4
57360: PLUS
57361: PUSH
57362: LD_VAR 0 2
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: PUSH
57375: LD_VAR 0 1
57379: PUSH
57380: LD_VAR 0 2
57384: PUSH
57385: LD_INT 4
57387: PLUS
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: PUSH
57397: LD_VAR 0 1
57401: PUSH
57402: LD_INT 3
57404: MINUS
57405: PUSH
57406: LD_VAR 0 2
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: LIST
57418: PUSH
57419: LD_VAR 0 1
57423: PUSH
57424: LD_INT 4
57426: MINUS
57427: PUSH
57428: LD_VAR 0 2
57432: PUSH
57433: LD_INT 4
57435: MINUS
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: ST_TO_ADDR
// end ; 3 :
57452: GO 57874
57454: LD_INT 3
57456: DOUBLE
57457: EQUAL
57458: IFTRUE 57462
57460: GO 57595
57462: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57463: LD_ADDR_VAR 0 5
57467: PUSH
57468: LD_VAR 0 1
57472: PUSH
57473: LD_INT 3
57475: PLUS
57476: PUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_INT 4
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: PUSH
57490: LD_VAR 0 1
57494: PUSH
57495: LD_INT 4
57497: PLUS
57498: PUSH
57499: LD_VAR 0 2
57503: PUSH
57504: LD_INT 4
57506: PLUS
57507: PUSH
57508: LD_INT 5
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: PUSH
57516: LD_VAR 0 1
57520: PUSH
57521: LD_INT 4
57523: MINUS
57524: PUSH
57525: LD_VAR 0 2
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: PUSH
57538: LD_VAR 0 1
57542: PUSH
57543: LD_VAR 0 2
57547: PUSH
57548: LD_INT 4
57550: MINUS
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: PUSH
57560: LD_VAR 0 1
57564: PUSH
57565: LD_INT 3
57567: MINUS
57568: PUSH
57569: LD_VAR 0 2
57573: PUSH
57574: LD_INT 3
57576: MINUS
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// end ; 4 :
57593: GO 57874
57595: LD_INT 4
57597: DOUBLE
57598: EQUAL
57599: IFTRUE 57603
57601: GO 57736
57603: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57604: LD_ADDR_VAR 0 5
57608: PUSH
57609: LD_VAR 0 1
57613: PUSH
57614: LD_VAR 0 2
57618: PUSH
57619: LD_INT 4
57621: PLUS
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: PUSH
57631: LD_VAR 0 1
57635: PUSH
57636: LD_INT 3
57638: PLUS
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 3
57647: PLUS
57648: PUSH
57649: LD_INT 5
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PUSH
57657: LD_VAR 0 1
57661: PUSH
57662: LD_INT 4
57664: PLUS
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: LD_INT 4
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_VAR 0 1
57683: PUSH
57684: LD_VAR 0 2
57688: PUSH
57689: LD_INT 3
57691: MINUS
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: PUSH
57701: LD_VAR 0 1
57705: PUSH
57706: LD_INT 4
57708: MINUS
57709: PUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_INT 4
57717: MINUS
57718: PUSH
57719: LD_INT 2
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// end ; 5 :
57734: GO 57874
57736: LD_INT 5
57738: DOUBLE
57739: EQUAL
57740: IFTRUE 57744
57742: GO 57873
57744: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57745: LD_ADDR_VAR 0 5
57749: PUSH
57750: LD_VAR 0 1
57754: PUSH
57755: LD_INT 4
57757: MINUS
57758: PUSH
57759: LD_VAR 0 2
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: PUSH
57772: LD_VAR 0 1
57776: PUSH
57777: LD_VAR 0 2
57781: PUSH
57782: LD_INT 4
57784: MINUS
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PUSH
57794: LD_VAR 0 1
57798: PUSH
57799: LD_INT 4
57801: PLUS
57802: PUSH
57803: LD_VAR 0 2
57807: PUSH
57808: LD_INT 4
57810: PLUS
57811: PUSH
57812: LD_INT 5
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: LD_INT 3
57827: PLUS
57828: PUSH
57829: LD_VAR 0 2
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: PUSH
57842: LD_VAR 0 1
57846: PUSH
57847: LD_VAR 0 2
57851: PUSH
57852: LD_INT 3
57854: PLUS
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// end ; end ;
57871: GO 57874
57873: POP
// result := list ;
57874: LD_ADDR_VAR 0 4
57878: PUSH
57879: LD_VAR 0 5
57883: ST_TO_ADDR
// end ;
57884: LD_VAR 0 4
57888: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57889: LD_INT 0
57891: PPUSH
57892: PPUSH
57893: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57894: LD_VAR 0 1
57898: NOT
57899: PUSH
57900: LD_VAR 0 2
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: LD_INT 4
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: IN
57923: NOT
57924: OR
57925: IFFALSE 57929
// exit ;
57927: GO 58021
// tmp := [ ] ;
57929: LD_ADDR_VAR 0 5
57933: PUSH
57934: EMPTY
57935: ST_TO_ADDR
// for i in units do
57936: LD_ADDR_VAR 0 4
57940: PUSH
57941: LD_VAR 0 1
57945: PUSH
57946: FOR_IN
57947: IFFALSE 57990
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57949: LD_ADDR_VAR 0 5
57953: PUSH
57954: LD_VAR 0 5
57958: PPUSH
57959: LD_VAR 0 5
57963: PUSH
57964: LD_INT 1
57966: PLUS
57967: PPUSH
57968: LD_VAR 0 4
57972: PPUSH
57973: LD_VAR 0 2
57977: PPUSH
57978: CALL_OW 259
57982: PPUSH
57983: CALL_OW 2
57987: ST_TO_ADDR
57988: GO 57946
57990: POP
57991: POP
// if not tmp then
57992: LD_VAR 0 5
57996: NOT
57997: IFFALSE 58001
// exit ;
57999: GO 58021
// result := SortListByListDesc ( units , tmp ) ;
58001: LD_ADDR_VAR 0 3
58005: PUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: LD_VAR 0 5
58015: PPUSH
58016: CALL_OW 77
58020: ST_TO_ADDR
// end ;
58021: LD_VAR 0 3
58025: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58026: LD_INT 0
58028: PPUSH
58029: PPUSH
58030: PPUSH
// result := false ;
58031: LD_ADDR_VAR 0 3
58035: PUSH
58036: LD_INT 0
58038: ST_TO_ADDR
// x := GetX ( building ) ;
58039: LD_ADDR_VAR 0 4
58043: PUSH
58044: LD_VAR 0 2
58048: PPUSH
58049: CALL_OW 250
58053: ST_TO_ADDR
// y := GetY ( building ) ;
58054: LD_ADDR_VAR 0 5
58058: PUSH
58059: LD_VAR 0 2
58063: PPUSH
58064: CALL_OW 251
58068: ST_TO_ADDR
// if not building or not x or not y then
58069: LD_VAR 0 2
58073: NOT
58074: PUSH
58075: LD_VAR 0 4
58079: NOT
58080: OR
58081: PUSH
58082: LD_VAR 0 5
58086: NOT
58087: OR
58088: IFFALSE 58092
// exit ;
58090: GO 58184
// if GetTaskList ( unit ) then
58092: LD_VAR 0 1
58096: PPUSH
58097: CALL_OW 437
58101: IFFALSE 58184
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58103: LD_STRING e
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 437
58115: PUSH
58116: LD_INT 1
58118: ARRAY
58119: PUSH
58120: LD_INT 1
58122: ARRAY
58123: EQUAL
58124: PUSH
58125: LD_VAR 0 4
58129: PUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: CALL_OW 437
58139: PUSH
58140: LD_INT 1
58142: ARRAY
58143: PUSH
58144: LD_INT 2
58146: ARRAY
58147: EQUAL
58148: AND
58149: PUSH
58150: LD_VAR 0 5
58154: PUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: CALL_OW 437
58164: PUSH
58165: LD_INT 1
58167: ARRAY
58168: PUSH
58169: LD_INT 3
58171: ARRAY
58172: EQUAL
58173: AND
58174: IFFALSE 58184
// result := true end ;
58176: LD_ADDR_VAR 0 3
58180: PUSH
58181: LD_INT 1
58183: ST_TO_ADDR
// end ;
58184: LD_VAR 0 3
58188: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58189: LD_INT 0
58191: PPUSH
// result := false ;
58192: LD_ADDR_VAR 0 4
58196: PUSH
58197: LD_INT 0
58199: ST_TO_ADDR
// if GetTaskList ( unit ) then
58200: LD_VAR 0 1
58204: PPUSH
58205: CALL_OW 437
58209: IFFALSE 58292
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58211: LD_STRING M
58213: PUSH
58214: LD_VAR 0 1
58218: PPUSH
58219: CALL_OW 437
58223: PUSH
58224: LD_INT 1
58226: ARRAY
58227: PUSH
58228: LD_INT 1
58230: ARRAY
58231: EQUAL
58232: PUSH
58233: LD_VAR 0 2
58237: PUSH
58238: LD_VAR 0 1
58242: PPUSH
58243: CALL_OW 437
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PUSH
58252: LD_INT 2
58254: ARRAY
58255: EQUAL
58256: AND
58257: PUSH
58258: LD_VAR 0 3
58262: PUSH
58263: LD_VAR 0 1
58267: PPUSH
58268: CALL_OW 437
58272: PUSH
58273: LD_INT 1
58275: ARRAY
58276: PUSH
58277: LD_INT 3
58279: ARRAY
58280: EQUAL
58281: AND
58282: IFFALSE 58292
// result := true ;
58284: LD_ADDR_VAR 0 4
58288: PUSH
58289: LD_INT 1
58291: ST_TO_ADDR
// end ; end ;
58292: LD_VAR 0 4
58296: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58297: LD_INT 0
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
// if not unit or not area then
58303: LD_VAR 0 1
58307: NOT
58308: PUSH
58309: LD_VAR 0 2
58313: NOT
58314: OR
58315: IFFALSE 58319
// exit ;
58317: GO 58483
// tmp := AreaToList ( area , i ) ;
58319: LD_ADDR_VAR 0 6
58323: PUSH
58324: LD_VAR 0 2
58328: PPUSH
58329: LD_VAR 0 5
58333: PPUSH
58334: CALL_OW 517
58338: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58339: LD_ADDR_VAR 0 5
58343: PUSH
58344: DOUBLE
58345: LD_INT 1
58347: DEC
58348: ST_TO_ADDR
58349: LD_VAR 0 6
58353: PUSH
58354: LD_INT 1
58356: ARRAY
58357: PUSH
58358: FOR_TO
58359: IFFALSE 58481
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58361: LD_ADDR_VAR 0 7
58365: PUSH
58366: LD_VAR 0 6
58370: PUSH
58371: LD_INT 1
58373: ARRAY
58374: PUSH
58375: LD_VAR 0 5
58379: ARRAY
58380: PUSH
58381: LD_VAR 0 6
58385: PUSH
58386: LD_INT 2
58388: ARRAY
58389: PUSH
58390: LD_VAR 0 5
58394: ARRAY
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58400: LD_VAR 0 7
58404: PUSH
58405: LD_INT 1
58407: ARRAY
58408: PPUSH
58409: LD_VAR 0 7
58413: PUSH
58414: LD_INT 2
58416: ARRAY
58417: PPUSH
58418: CALL_OW 428
58422: PUSH
58423: LD_INT 0
58425: EQUAL
58426: IFFALSE 58479
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58428: LD_VAR 0 1
58432: PPUSH
58433: LD_VAR 0 7
58437: PUSH
58438: LD_INT 1
58440: ARRAY
58441: PPUSH
58442: LD_VAR 0 7
58446: PUSH
58447: LD_INT 2
58449: ARRAY
58450: PPUSH
58451: LD_VAR 0 3
58455: PPUSH
58456: CALL_OW 48
// result := IsPlaced ( unit ) ;
58460: LD_ADDR_VAR 0 4
58464: PUSH
58465: LD_VAR 0 1
58469: PPUSH
58470: CALL_OW 305
58474: ST_TO_ADDR
// exit ;
58475: POP
58476: POP
58477: GO 58483
// end ; end ;
58479: GO 58358
58481: POP
58482: POP
// end ;
58483: LD_VAR 0 4
58487: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58488: LD_INT 0
58490: PPUSH
58491: PPUSH
58492: PPUSH
// if not side or side > 8 then
58493: LD_VAR 0 1
58497: NOT
58498: PUSH
58499: LD_VAR 0 1
58503: PUSH
58504: LD_INT 8
58506: GREATER
58507: OR
58508: IFFALSE 58512
// exit ;
58510: GO 58699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58512: LD_ADDR_VAR 0 4
58516: PUSH
58517: LD_INT 22
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 21
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PPUSH
58543: CALL_OW 69
58547: ST_TO_ADDR
// if not tmp then
58548: LD_VAR 0 4
58552: NOT
58553: IFFALSE 58557
// exit ;
58555: GO 58699
// enable_addtolog := true ;
58557: LD_ADDR_OWVAR 81
58561: PUSH
58562: LD_INT 1
58564: ST_TO_ADDR
// AddToLog ( [ ) ;
58565: LD_STRING [
58567: PPUSH
58568: CALL_OW 561
// for i in tmp do
58572: LD_ADDR_VAR 0 3
58576: PUSH
58577: LD_VAR 0 4
58581: PUSH
58582: FOR_IN
58583: IFFALSE 58690
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58585: LD_STRING [
58587: PUSH
58588: LD_VAR 0 3
58592: PPUSH
58593: CALL_OW 266
58597: STR
58598: PUSH
58599: LD_STRING , 
58601: STR
58602: PUSH
58603: LD_VAR 0 3
58607: PPUSH
58608: CALL_OW 250
58612: STR
58613: PUSH
58614: LD_STRING , 
58616: STR
58617: PUSH
58618: LD_VAR 0 3
58622: PPUSH
58623: CALL_OW 251
58627: STR
58628: PUSH
58629: LD_STRING , 
58631: STR
58632: PUSH
58633: LD_VAR 0 3
58637: PPUSH
58638: CALL_OW 254
58642: STR
58643: PUSH
58644: LD_STRING , 
58646: STR
58647: PUSH
58648: LD_VAR 0 3
58652: PPUSH
58653: LD_INT 1
58655: PPUSH
58656: CALL_OW 268
58660: STR
58661: PUSH
58662: LD_STRING , 
58664: STR
58665: PUSH
58666: LD_VAR 0 3
58670: PPUSH
58671: LD_INT 2
58673: PPUSH
58674: CALL_OW 268
58678: STR
58679: PUSH
58680: LD_STRING ],
58682: STR
58683: PPUSH
58684: CALL_OW 561
// end ;
58688: GO 58582
58690: POP
58691: POP
// AddToLog ( ]; ) ;
58692: LD_STRING ];
58694: PPUSH
58695: CALL_OW 561
// end ;
58699: LD_VAR 0 2
58703: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58704: LD_INT 0
58706: PPUSH
58707: PPUSH
58708: PPUSH
58709: PPUSH
58710: PPUSH
// if not area or not rate or not max then
58711: LD_VAR 0 1
58715: NOT
58716: PUSH
58717: LD_VAR 0 2
58721: NOT
58722: OR
58723: PUSH
58724: LD_VAR 0 4
58728: NOT
58729: OR
58730: IFFALSE 58734
// exit ;
58732: GO 58926
// while 1 do
58734: LD_INT 1
58736: IFFALSE 58926
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58738: LD_ADDR_VAR 0 9
58742: PUSH
58743: LD_VAR 0 1
58747: PPUSH
58748: LD_INT 1
58750: PPUSH
58751: CALL_OW 287
58755: PUSH
58756: LD_INT 10
58758: MUL
58759: ST_TO_ADDR
// r := rate / 10 ;
58760: LD_ADDR_VAR 0 7
58764: PUSH
58765: LD_VAR 0 2
58769: PUSH
58770: LD_INT 10
58772: DIVREAL
58773: ST_TO_ADDR
// time := 1 1$00 ;
58774: LD_ADDR_VAR 0 8
58778: PUSH
58779: LD_INT 2100
58781: ST_TO_ADDR
// if amount < min then
58782: LD_VAR 0 9
58786: PUSH
58787: LD_VAR 0 3
58791: LESS
58792: IFFALSE 58810
// r := r * 2 else
58794: LD_ADDR_VAR 0 7
58798: PUSH
58799: LD_VAR 0 7
58803: PUSH
58804: LD_INT 2
58806: MUL
58807: ST_TO_ADDR
58808: GO 58836
// if amount > max then
58810: LD_VAR 0 9
58814: PUSH
58815: LD_VAR 0 4
58819: GREATER
58820: IFFALSE 58836
// r := r / 2 ;
58822: LD_ADDR_VAR 0 7
58826: PUSH
58827: LD_VAR 0 7
58831: PUSH
58832: LD_INT 2
58834: DIVREAL
58835: ST_TO_ADDR
// time := time / r ;
58836: LD_ADDR_VAR 0 8
58840: PUSH
58841: LD_VAR 0 8
58845: PUSH
58846: LD_VAR 0 7
58850: DIVREAL
58851: ST_TO_ADDR
// if time < 0 then
58852: LD_VAR 0 8
58856: PUSH
58857: LD_INT 0
58859: LESS
58860: IFFALSE 58877
// time := time * - 1 ;
58862: LD_ADDR_VAR 0 8
58866: PUSH
58867: LD_VAR 0 8
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: MUL
58876: ST_TO_ADDR
// wait ( time ) ;
58877: LD_VAR 0 8
58881: PPUSH
58882: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58886: LD_INT 35
58888: PPUSH
58889: LD_INT 875
58891: PPUSH
58892: CALL_OW 12
58896: PPUSH
58897: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58901: LD_INT 1
58903: PPUSH
58904: LD_INT 5
58906: PPUSH
58907: CALL_OW 12
58911: PPUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: LD_INT 1
58919: PPUSH
58920: CALL_OW 55
// end ;
58924: GO 58734
// end ;
58926: LD_VAR 0 5
58930: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58931: LD_INT 0
58933: PPUSH
58934: PPUSH
58935: PPUSH
58936: PPUSH
58937: PPUSH
58938: PPUSH
58939: PPUSH
58940: PPUSH
// if not turrets or not factories then
58941: LD_VAR 0 1
58945: NOT
58946: PUSH
58947: LD_VAR 0 2
58951: NOT
58952: OR
58953: IFFALSE 58957
// exit ;
58955: GO 59264
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58957: LD_ADDR_VAR 0 10
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: LD_INT 6
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 4
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: LD_INT 5
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 24
58999: PUSH
59000: LD_INT 25
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 23
59009: PUSH
59010: LD_INT 27
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 42
59023: PUSH
59024: LD_INT 43
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 44
59033: PUSH
59034: LD_INT 46
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 45
59043: PUSH
59044: LD_INT 47
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: LIST
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// result := [ ] ;
59061: LD_ADDR_VAR 0 3
59065: PUSH
59066: EMPTY
59067: ST_TO_ADDR
// for i in turrets do
59068: LD_ADDR_VAR 0 4
59072: PUSH
59073: LD_VAR 0 1
59077: PUSH
59078: FOR_IN
59079: IFFALSE 59262
// begin nat := GetNation ( i ) ;
59081: LD_ADDR_VAR 0 7
59085: PUSH
59086: LD_VAR 0 4
59090: PPUSH
59091: CALL_OW 248
59095: ST_TO_ADDR
// weapon := 0 ;
59096: LD_ADDR_VAR 0 8
59100: PUSH
59101: LD_INT 0
59103: ST_TO_ADDR
// if not nat then
59104: LD_VAR 0 7
59108: NOT
59109: IFFALSE 59113
// continue ;
59111: GO 59078
// for j in list [ nat ] do
59113: LD_ADDR_VAR 0 5
59117: PUSH
59118: LD_VAR 0 10
59122: PUSH
59123: LD_VAR 0 7
59127: ARRAY
59128: PUSH
59129: FOR_IN
59130: IFFALSE 59171
// if GetBWeapon ( i ) = j [ 1 ] then
59132: LD_VAR 0 4
59136: PPUSH
59137: CALL_OW 269
59141: PUSH
59142: LD_VAR 0 5
59146: PUSH
59147: LD_INT 1
59149: ARRAY
59150: EQUAL
59151: IFFALSE 59169
// begin weapon := j [ 2 ] ;
59153: LD_ADDR_VAR 0 8
59157: PUSH
59158: LD_VAR 0 5
59162: PUSH
59163: LD_INT 2
59165: ARRAY
59166: ST_TO_ADDR
// break ;
59167: GO 59171
// end ;
59169: GO 59129
59171: POP
59172: POP
// if not weapon then
59173: LD_VAR 0 8
59177: NOT
59178: IFFALSE 59182
// continue ;
59180: GO 59078
// for k in factories do
59182: LD_ADDR_VAR 0 6
59186: PUSH
59187: LD_VAR 0 2
59191: PUSH
59192: FOR_IN
59193: IFFALSE 59258
// begin weapons := AvailableWeaponList ( k ) ;
59195: LD_ADDR_VAR 0 9
59199: PUSH
59200: LD_VAR 0 6
59204: PPUSH
59205: CALL_OW 478
59209: ST_TO_ADDR
// if not weapons then
59210: LD_VAR 0 9
59214: NOT
59215: IFFALSE 59219
// continue ;
59217: GO 59192
// if weapon in weapons then
59219: LD_VAR 0 8
59223: PUSH
59224: LD_VAR 0 9
59228: IN
59229: IFFALSE 59256
// begin result := [ i , weapon ] ;
59231: LD_ADDR_VAR 0 3
59235: PUSH
59236: LD_VAR 0 4
59240: PUSH
59241: LD_VAR 0 8
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: ST_TO_ADDR
// exit ;
59250: POP
59251: POP
59252: POP
59253: POP
59254: GO 59264
// end ; end ;
59256: GO 59192
59258: POP
59259: POP
// end ;
59260: GO 59078
59262: POP
59263: POP
// end ;
59264: LD_VAR 0 3
59268: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59269: LD_INT 0
59271: PPUSH
// if not side or side > 8 then
59272: LD_VAR 0 3
59276: NOT
59277: PUSH
59278: LD_VAR 0 3
59282: PUSH
59283: LD_INT 8
59285: GREATER
59286: OR
59287: IFFALSE 59291
// exit ;
59289: GO 59350
// if not range then
59291: LD_VAR 0 4
59295: NOT
59296: IFFALSE 59307
// range := - 12 ;
59298: LD_ADDR_VAR 0 4
59302: PUSH
59303: LD_INT 12
59305: NEG
59306: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59307: LD_VAR 0 1
59311: PPUSH
59312: LD_VAR 0 2
59316: PPUSH
59317: LD_VAR 0 3
59321: PPUSH
59322: LD_VAR 0 4
59326: PPUSH
59327: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59331: LD_VAR 0 1
59335: PPUSH
59336: LD_VAR 0 2
59340: PPUSH
59341: LD_VAR 0 3
59345: PPUSH
59346: CALL_OW 331
// end ;
59350: LD_VAR 0 5
59354: RET
// export function Video ( mode ) ; begin
59355: LD_INT 0
59357: PPUSH
// ingame_video = mode ;
59358: LD_ADDR_OWVAR 52
59362: PUSH
59363: LD_VAR 0 1
59367: ST_TO_ADDR
// interface_hidden = mode ;
59368: LD_ADDR_OWVAR 54
59372: PUSH
59373: LD_VAR 0 1
59377: ST_TO_ADDR
// end ;
59378: LD_VAR 0 2
59382: RET
// export function Join ( array , element ) ; begin
59383: LD_INT 0
59385: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59386: LD_ADDR_VAR 0 3
59390: PUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 1
59403: PLUS
59404: PPUSH
59405: LD_VAR 0 2
59409: PPUSH
59410: CALL_OW 1
59414: ST_TO_ADDR
// end ;
59415: LD_VAR 0 3
59419: RET
// export function JoinUnion ( array , element ) ; begin
59420: LD_INT 0
59422: PPUSH
// result := array union element ;
59423: LD_ADDR_VAR 0 3
59427: PUSH
59428: LD_VAR 0 1
59432: PUSH
59433: LD_VAR 0 2
59437: UNION
59438: ST_TO_ADDR
// end ;
59439: LD_VAR 0 3
59443: RET
// export function GetBehemoths ( side ) ; begin
59444: LD_INT 0
59446: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59447: LD_ADDR_VAR 0 2
59451: PUSH
59452: LD_INT 22
59454: PUSH
59455: LD_VAR 0 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 31
59466: PUSH
59467: LD_INT 25
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PPUSH
59478: CALL_OW 69
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 2
59487: RET
// export function Shuffle ( array ) ; var i , index ; begin
59488: LD_INT 0
59490: PPUSH
59491: PPUSH
59492: PPUSH
// result := [ ] ;
59493: LD_ADDR_VAR 0 2
59497: PUSH
59498: EMPTY
59499: ST_TO_ADDR
// if not array then
59500: LD_VAR 0 1
59504: NOT
59505: IFFALSE 59509
// exit ;
59507: GO 59608
// Randomize ;
59509: CALL_OW 10
// for i = array downto 1 do
59513: LD_ADDR_VAR 0 3
59517: PUSH
59518: DOUBLE
59519: LD_VAR 0 1
59523: INC
59524: ST_TO_ADDR
59525: LD_INT 1
59527: PUSH
59528: FOR_DOWNTO
59529: IFFALSE 59606
// begin index := rand ( 1 , array ) ;
59531: LD_ADDR_VAR 0 4
59535: PUSH
59536: LD_INT 1
59538: PPUSH
59539: LD_VAR 0 1
59543: PPUSH
59544: CALL_OW 12
59548: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59549: LD_ADDR_VAR 0 2
59553: PUSH
59554: LD_VAR 0 2
59558: PPUSH
59559: LD_VAR 0 2
59563: PUSH
59564: LD_INT 1
59566: PLUS
59567: PPUSH
59568: LD_VAR 0 1
59572: PUSH
59573: LD_VAR 0 4
59577: ARRAY
59578: PPUSH
59579: CALL_OW 2
59583: ST_TO_ADDR
// array := Delete ( array , index ) ;
59584: LD_ADDR_VAR 0 1
59588: PUSH
59589: LD_VAR 0 1
59593: PPUSH
59594: LD_VAR 0 4
59598: PPUSH
59599: CALL_OW 3
59603: ST_TO_ADDR
// end ;
59604: GO 59528
59606: POP
59607: POP
// end ;
59608: LD_VAR 0 2
59612: RET
// export function GetBaseMaterials ( base ) ; begin
59613: LD_INT 0
59615: PPUSH
// result := [ 0 , 0 , 0 ] ;
59616: LD_ADDR_VAR 0 2
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// if not base then
59635: LD_VAR 0 1
59639: NOT
59640: IFFALSE 59644
// exit ;
59642: GO 59693
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59644: LD_ADDR_VAR 0 2
59648: PUSH
59649: LD_VAR 0 1
59653: PPUSH
59654: LD_INT 1
59656: PPUSH
59657: CALL_OW 275
59661: PUSH
59662: LD_VAR 0 1
59666: PPUSH
59667: LD_INT 2
59669: PPUSH
59670: CALL_OW 275
59674: PUSH
59675: LD_VAR 0 1
59679: PPUSH
59680: LD_INT 3
59682: PPUSH
59683: CALL_OW 275
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: ST_TO_ADDR
// end ;
59693: LD_VAR 0 2
59697: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59698: LD_INT 0
59700: PPUSH
59701: PPUSH
// result := array ;
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: LD_VAR 0 1
59711: ST_TO_ADDR
// if size > 0 then
59712: LD_VAR 0 2
59716: PUSH
59717: LD_INT 0
59719: GREATER
59720: IFFALSE 59766
// for i := array downto size do
59722: LD_ADDR_VAR 0 4
59726: PUSH
59727: DOUBLE
59728: LD_VAR 0 1
59732: INC
59733: ST_TO_ADDR
59734: LD_VAR 0 2
59738: PUSH
59739: FOR_DOWNTO
59740: IFFALSE 59764
// result := Delete ( result , result ) ;
59742: LD_ADDR_VAR 0 3
59746: PUSH
59747: LD_VAR 0 3
59751: PPUSH
59752: LD_VAR 0 3
59756: PPUSH
59757: CALL_OW 3
59761: ST_TO_ADDR
59762: GO 59739
59764: POP
59765: POP
// end ;
59766: LD_VAR 0 3
59770: RET
// export function ComExit ( unit ) ; var tmp ; begin
59771: LD_INT 0
59773: PPUSH
59774: PPUSH
// if not IsInUnit ( unit ) then
59775: LD_VAR 0 1
59779: PPUSH
59780: CALL_OW 310
59784: NOT
59785: IFFALSE 59789
// exit ;
59787: GO 59849
// tmp := IsInUnit ( unit ) ;
59789: LD_ADDR_VAR 0 3
59793: PUSH
59794: LD_VAR 0 1
59798: PPUSH
59799: CALL_OW 310
59803: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59804: LD_VAR 0 3
59808: PPUSH
59809: CALL_OW 247
59813: PUSH
59814: LD_INT 2
59816: EQUAL
59817: IFFALSE 59830
// ComExitVehicle ( unit ) else
59819: LD_VAR 0 1
59823: PPUSH
59824: CALL_OW 121
59828: GO 59839
// ComExitBuilding ( unit ) ;
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL_OW 122
// result := tmp ;
59839: LD_ADDR_VAR 0 2
59843: PUSH
59844: LD_VAR 0 3
59848: ST_TO_ADDR
// end ;
59849: LD_VAR 0 2
59853: RET
// export function ComExitAll ( units ) ; var i ; begin
59854: LD_INT 0
59856: PPUSH
59857: PPUSH
// if not units then
59858: LD_VAR 0 1
59862: NOT
59863: IFFALSE 59867
// exit ;
59865: GO 59893
// for i in units do
59867: LD_ADDR_VAR 0 3
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: FOR_IN
59878: IFFALSE 59891
// ComExit ( i ) ;
59880: LD_VAR 0 3
59884: PPUSH
59885: CALL 59771 0 1
59889: GO 59877
59891: POP
59892: POP
// end ;
59893: LD_VAR 0 2
59897: RET
// export function ResetHc ; begin
59898: LD_INT 0
59900: PPUSH
// InitHc ;
59901: CALL_OW 19
// hc_importance := 0 ;
59905: LD_ADDR_OWVAR 32
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// end ;
59913: LD_VAR 0 1
59917: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59918: LD_INT 0
59920: PPUSH
59921: PPUSH
59922: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59923: LD_ADDR_VAR 0 6
59927: PUSH
59928: LD_VAR 0 1
59932: PUSH
59933: LD_VAR 0 3
59937: PLUS
59938: PUSH
59939: LD_INT 2
59941: DIV
59942: ST_TO_ADDR
// if _x < 0 then
59943: LD_VAR 0 6
59947: PUSH
59948: LD_INT 0
59950: LESS
59951: IFFALSE 59968
// _x := _x * - 1 ;
59953: LD_ADDR_VAR 0 6
59957: PUSH
59958: LD_VAR 0 6
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: MUL
59967: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59968: LD_ADDR_VAR 0 7
59972: PUSH
59973: LD_VAR 0 2
59977: PUSH
59978: LD_VAR 0 4
59982: PLUS
59983: PUSH
59984: LD_INT 2
59986: DIV
59987: ST_TO_ADDR
// if _y < 0 then
59988: LD_VAR 0 7
59992: PUSH
59993: LD_INT 0
59995: LESS
59996: IFFALSE 60013
// _y := _y * - 1 ;
59998: LD_ADDR_VAR 0 7
60002: PUSH
60003: LD_VAR 0 7
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: MUL
60012: ST_TO_ADDR
// result := [ _x , _y ] ;
60013: LD_ADDR_VAR 0 5
60017: PUSH
60018: LD_VAR 0 6
60022: PUSH
60023: LD_VAR 0 7
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// end ;
60032: LD_VAR 0 5
60036: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60037: LD_INT 0
60039: PPUSH
60040: PPUSH
60041: PPUSH
60042: PPUSH
// task := GetTaskList ( unit ) ;
60043: LD_ADDR_VAR 0 7
60047: PUSH
60048: LD_VAR 0 1
60052: PPUSH
60053: CALL_OW 437
60057: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60058: LD_VAR 0 7
60062: NOT
60063: PUSH
60064: LD_VAR 0 1
60068: PPUSH
60069: LD_VAR 0 2
60073: PPUSH
60074: CALL_OW 308
60078: NOT
60079: AND
60080: IFFALSE 60084
// exit ;
60082: GO 60202
// if IsInArea ( unit , area ) then
60084: LD_VAR 0 1
60088: PPUSH
60089: LD_VAR 0 2
60093: PPUSH
60094: CALL_OW 308
60098: IFFALSE 60116
// begin ComMoveToArea ( unit , goAway ) ;
60100: LD_VAR 0 1
60104: PPUSH
60105: LD_VAR 0 3
60109: PPUSH
60110: CALL_OW 113
// exit ;
60114: GO 60202
// end ; if task [ 1 ] [ 1 ] <> M then
60116: LD_VAR 0 7
60120: PUSH
60121: LD_INT 1
60123: ARRAY
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PUSH
60129: LD_STRING M
60131: NONEQUAL
60132: IFFALSE 60136
// exit ;
60134: GO 60202
// x := task [ 1 ] [ 2 ] ;
60136: LD_ADDR_VAR 0 5
60140: PUSH
60141: LD_VAR 0 7
60145: PUSH
60146: LD_INT 1
60148: ARRAY
60149: PUSH
60150: LD_INT 2
60152: ARRAY
60153: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60154: LD_ADDR_VAR 0 6
60158: PUSH
60159: LD_VAR 0 7
60163: PUSH
60164: LD_INT 1
60166: ARRAY
60167: PUSH
60168: LD_INT 3
60170: ARRAY
60171: ST_TO_ADDR
// if InArea ( x , y , area ) then
60172: LD_VAR 0 5
60176: PPUSH
60177: LD_VAR 0 6
60181: PPUSH
60182: LD_VAR 0 2
60186: PPUSH
60187: CALL_OW 309
60191: IFFALSE 60202
// ComStop ( unit ) ;
60193: LD_VAR 0 1
60197: PPUSH
60198: CALL_OW 141
// end ;
60202: LD_VAR 0 4
60206: RET
// export function Abs ( value ) ; begin
60207: LD_INT 0
60209: PPUSH
// result := value ;
60210: LD_ADDR_VAR 0 2
60214: PUSH
60215: LD_VAR 0 1
60219: ST_TO_ADDR
// if value < 0 then
60220: LD_VAR 0 1
60224: PUSH
60225: LD_INT 0
60227: LESS
60228: IFFALSE 60245
// result := value * - 1 ;
60230: LD_ADDR_VAR 0 2
60234: PUSH
60235: LD_VAR 0 1
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: MUL
60244: ST_TO_ADDR
// end ;
60245: LD_VAR 0 2
60249: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60250: LD_INT 0
60252: PPUSH
60253: PPUSH
60254: PPUSH
60255: PPUSH
60256: PPUSH
60257: PPUSH
60258: PPUSH
60259: PPUSH
// if not unit or not building then
60260: LD_VAR 0 1
60264: NOT
60265: PUSH
60266: LD_VAR 0 2
60270: NOT
60271: OR
60272: IFFALSE 60276
// exit ;
60274: GO 60502
// x := GetX ( building ) ;
60276: LD_ADDR_VAR 0 4
60280: PUSH
60281: LD_VAR 0 2
60285: PPUSH
60286: CALL_OW 250
60290: ST_TO_ADDR
// y := GetY ( building ) ;
60291: LD_ADDR_VAR 0 6
60295: PUSH
60296: LD_VAR 0 2
60300: PPUSH
60301: CALL_OW 251
60305: ST_TO_ADDR
// d := GetDir ( building ) ;
60306: LD_ADDR_VAR 0 8
60310: PUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: CALL_OW 254
60320: ST_TO_ADDR
// r := 4 ;
60321: LD_ADDR_VAR 0 9
60325: PUSH
60326: LD_INT 4
60328: ST_TO_ADDR
// for i := 1 to 5 do
60329: LD_ADDR_VAR 0 10
60333: PUSH
60334: DOUBLE
60335: LD_INT 1
60337: DEC
60338: ST_TO_ADDR
60339: LD_INT 5
60341: PUSH
60342: FOR_TO
60343: IFFALSE 60500
// begin _x := ShiftX ( x , d , r + i ) ;
60345: LD_ADDR_VAR 0 5
60349: PUSH
60350: LD_VAR 0 4
60354: PPUSH
60355: LD_VAR 0 8
60359: PPUSH
60360: LD_VAR 0 9
60364: PUSH
60365: LD_VAR 0 10
60369: PLUS
60370: PPUSH
60371: CALL_OW 272
60375: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60376: LD_ADDR_VAR 0 7
60380: PUSH
60381: LD_VAR 0 6
60385: PPUSH
60386: LD_VAR 0 8
60390: PPUSH
60391: LD_VAR 0 9
60395: PUSH
60396: LD_VAR 0 10
60400: PLUS
60401: PPUSH
60402: CALL_OW 273
60406: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60407: LD_VAR 0 5
60411: PPUSH
60412: LD_VAR 0 7
60416: PPUSH
60417: CALL_OW 488
60421: PUSH
60422: LD_VAR 0 5
60426: PPUSH
60427: LD_VAR 0 7
60431: PPUSH
60432: CALL_OW 428
60436: PPUSH
60437: CALL_OW 247
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: IN
60452: NOT
60453: AND
60454: IFFALSE 60498
// begin ComMoveXY ( unit , _x , _y ) ;
60456: LD_VAR 0 1
60460: PPUSH
60461: LD_VAR 0 5
60465: PPUSH
60466: LD_VAR 0 7
60470: PPUSH
60471: CALL_OW 111
// result := [ _x , _y ] ;
60475: LD_ADDR_VAR 0 3
60479: PUSH
60480: LD_VAR 0 5
60484: PUSH
60485: LD_VAR 0 7
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: ST_TO_ADDR
// exit ;
60494: POP
60495: POP
60496: GO 60502
// end ; end ;
60498: GO 60342
60500: POP
60501: POP
// end ;
60502: LD_VAR 0 3
60506: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60507: LD_INT 0
60509: PPUSH
60510: PPUSH
60511: PPUSH
// result := 0 ;
60512: LD_ADDR_VAR 0 3
60516: PUSH
60517: LD_INT 0
60519: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60520: LD_VAR 0 1
60524: PUSH
60525: LD_INT 0
60527: LESS
60528: PUSH
60529: LD_VAR 0 1
60533: PUSH
60534: LD_INT 8
60536: GREATER
60537: OR
60538: PUSH
60539: LD_VAR 0 2
60543: PUSH
60544: LD_INT 0
60546: LESS
60547: OR
60548: PUSH
60549: LD_VAR 0 2
60553: PUSH
60554: LD_INT 8
60556: GREATER
60557: OR
60558: IFFALSE 60562
// exit ;
60560: GO 60637
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60562: LD_ADDR_VAR 0 4
60566: PUSH
60567: LD_INT 22
60569: PUSH
60570: LD_VAR 0 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PPUSH
60579: CALL_OW 69
60583: PUSH
60584: FOR_IN
60585: IFFALSE 60635
// begin un := UnitShoot ( i ) ;
60587: LD_ADDR_VAR 0 5
60591: PUSH
60592: LD_VAR 0 4
60596: PPUSH
60597: CALL_OW 504
60601: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60602: LD_VAR 0 5
60606: PPUSH
60607: CALL_OW 255
60611: PUSH
60612: LD_VAR 0 1
60616: EQUAL
60617: IFFALSE 60633
// begin result := un ;
60619: LD_ADDR_VAR 0 3
60623: PUSH
60624: LD_VAR 0 5
60628: ST_TO_ADDR
// exit ;
60629: POP
60630: POP
60631: GO 60637
// end ; end ;
60633: GO 60584
60635: POP
60636: POP
// end ;
60637: LD_VAR 0 3
60641: RET
// export function GetCargoBay ( units ) ; begin
60642: LD_INT 0
60644: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60645: LD_ADDR_VAR 0 2
60649: PUSH
60650: LD_VAR 0 1
60654: PPUSH
60655: LD_INT 2
60657: PUSH
60658: LD_INT 34
60660: PUSH
60661: LD_INT 12
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 34
60670: PUSH
60671: LD_INT 51
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 34
60680: PUSH
60681: LD_INT 32
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 34
60690: PUSH
60691: LD_EXP 8
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: PPUSH
60707: CALL_OW 72
60711: ST_TO_ADDR
// end ;
60712: LD_VAR 0 2
60716: RET
// export function Negate ( value ) ; begin
60717: LD_INT 0
60719: PPUSH
// result := not value ;
60720: LD_ADDR_VAR 0 2
60724: PUSH
60725: LD_VAR 0 1
60729: NOT
60730: ST_TO_ADDR
// end ;
60731: LD_VAR 0 2
60735: RET
// export function Inc ( value ) ; begin
60736: LD_INT 0
60738: PPUSH
// result := value + 1 ;
60739: LD_ADDR_VAR 0 2
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: LD_INT 1
60751: PLUS
60752: ST_TO_ADDR
// end ;
60753: LD_VAR 0 2
60757: RET
// export function Dec ( value ) ; begin
60758: LD_INT 0
60760: PPUSH
// result := value - 1 ;
60761: LD_ADDR_VAR 0 2
60765: PUSH
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 1
60773: MINUS
60774: ST_TO_ADDR
// end ;
60775: LD_VAR 0 2
60779: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
60784: PPUSH
60785: PPUSH
60786: PPUSH
60787: PPUSH
60788: PPUSH
60789: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60790: LD_VAR 0 1
60794: PPUSH
60795: LD_VAR 0 2
60799: PPUSH
60800: CALL_OW 488
60804: NOT
60805: PUSH
60806: LD_VAR 0 3
60810: PPUSH
60811: LD_VAR 0 4
60815: PPUSH
60816: CALL_OW 488
60820: NOT
60821: OR
60822: IFFALSE 60835
// begin result := - 1 ;
60824: LD_ADDR_VAR 0 5
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: ST_TO_ADDR
// exit ;
60833: GO 61070
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60835: LD_ADDR_VAR 0 12
60839: PUSH
60840: LD_VAR 0 1
60844: PPUSH
60845: LD_VAR 0 2
60849: PPUSH
60850: LD_VAR 0 3
60854: PPUSH
60855: LD_VAR 0 4
60859: PPUSH
60860: CALL 59918 0 4
60864: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60865: LD_ADDR_VAR 0 11
60869: PUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: LD_VAR 0 2
60879: PPUSH
60880: LD_VAR 0 12
60884: PUSH
60885: LD_INT 1
60887: ARRAY
60888: PPUSH
60889: LD_VAR 0 12
60893: PUSH
60894: LD_INT 2
60896: ARRAY
60897: PPUSH
60898: CALL_OW 298
60902: ST_TO_ADDR
// distance := 9999 ;
60903: LD_ADDR_VAR 0 10
60907: PUSH
60908: LD_INT 9999
60910: ST_TO_ADDR
// for i := 0 to 5 do
60911: LD_ADDR_VAR 0 6
60915: PUSH
60916: DOUBLE
60917: LD_INT 0
60919: DEC
60920: ST_TO_ADDR
60921: LD_INT 5
60923: PUSH
60924: FOR_TO
60925: IFFALSE 61068
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60927: LD_ADDR_VAR 0 7
60931: PUSH
60932: LD_VAR 0 1
60936: PPUSH
60937: LD_VAR 0 6
60941: PPUSH
60942: LD_VAR 0 11
60946: PPUSH
60947: CALL_OW 272
60951: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60952: LD_ADDR_VAR 0 8
60956: PUSH
60957: LD_VAR 0 2
60961: PPUSH
60962: LD_VAR 0 6
60966: PPUSH
60967: LD_VAR 0 11
60971: PPUSH
60972: CALL_OW 273
60976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60977: LD_VAR 0 7
60981: PPUSH
60982: LD_VAR 0 8
60986: PPUSH
60987: CALL_OW 488
60991: NOT
60992: IFFALSE 60996
// continue ;
60994: GO 60924
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60996: LD_ADDR_VAR 0 9
61000: PUSH
61001: LD_VAR 0 12
61005: PUSH
61006: LD_INT 1
61008: ARRAY
61009: PPUSH
61010: LD_VAR 0 12
61014: PUSH
61015: LD_INT 2
61017: ARRAY
61018: PPUSH
61019: LD_VAR 0 7
61023: PPUSH
61024: LD_VAR 0 8
61028: PPUSH
61029: CALL_OW 298
61033: ST_TO_ADDR
// if tmp < distance then
61034: LD_VAR 0 9
61038: PUSH
61039: LD_VAR 0 10
61043: LESS
61044: IFFALSE 61066
// begin result := i ;
61046: LD_ADDR_VAR 0 5
61050: PUSH
61051: LD_VAR 0 6
61055: ST_TO_ADDR
// distance := tmp ;
61056: LD_ADDR_VAR 0 10
61060: PUSH
61061: LD_VAR 0 9
61065: ST_TO_ADDR
// end ; end ;
61066: GO 60924
61068: POP
61069: POP
// end ;
61070: LD_VAR 0 5
61074: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61075: LD_INT 0
61077: PPUSH
61078: PPUSH
// if not driver or not IsInUnit ( driver ) then
61079: LD_VAR 0 1
61083: NOT
61084: PUSH
61085: LD_VAR 0 1
61089: PPUSH
61090: CALL_OW 310
61094: NOT
61095: OR
61096: IFFALSE 61100
// exit ;
61098: GO 61190
// vehicle := IsInUnit ( driver ) ;
61100: LD_ADDR_VAR 0 3
61104: PUSH
61105: LD_VAR 0 1
61109: PPUSH
61110: CALL_OW 310
61114: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61115: LD_VAR 0 1
61119: PPUSH
61120: LD_STRING \
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: PUSH
61150: LD_STRING E
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_VAR 0 3
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PPUSH
61186: CALL_OW 446
// end ;
61190: LD_VAR 0 2
61194: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61195: LD_INT 0
61197: PPUSH
61198: PPUSH
// if not driver or not IsInUnit ( driver ) then
61199: LD_VAR 0 1
61203: NOT
61204: PUSH
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 310
61214: NOT
61215: OR
61216: IFFALSE 61220
// exit ;
61218: GO 61310
// vehicle := IsInUnit ( driver ) ;
61220: LD_ADDR_VAR 0 3
61224: PUSH
61225: LD_VAR 0 1
61229: PPUSH
61230: CALL_OW 310
61234: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61235: LD_VAR 0 1
61239: PPUSH
61240: LD_STRING \
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: PUSH
61270: LD_STRING E
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: LD_VAR 0 3
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PPUSH
61306: CALL_OW 447
// end ;
61310: LD_VAR 0 2
61314: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61315: LD_INT 0
61317: PPUSH
61318: PPUSH
61319: PPUSH
// tmp := [ ] ;
61320: LD_ADDR_VAR 0 5
61324: PUSH
61325: EMPTY
61326: ST_TO_ADDR
// for i in units do
61327: LD_ADDR_VAR 0 4
61331: PUSH
61332: LD_VAR 0 1
61336: PUSH
61337: FOR_IN
61338: IFFALSE 61376
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61340: LD_ADDR_VAR 0 5
61344: PUSH
61345: LD_VAR 0 5
61349: PPUSH
61350: LD_VAR 0 5
61354: PUSH
61355: LD_INT 1
61357: PLUS
61358: PPUSH
61359: LD_VAR 0 4
61363: PPUSH
61364: CALL_OW 256
61368: PPUSH
61369: CALL_OW 2
61373: ST_TO_ADDR
61374: GO 61337
61376: POP
61377: POP
// if not tmp then
61378: LD_VAR 0 5
61382: NOT
61383: IFFALSE 61387
// exit ;
61385: GO 61435
// if asc then
61387: LD_VAR 0 2
61391: IFFALSE 61415
// result := SortListByListAsc ( units , tmp ) else
61393: LD_ADDR_VAR 0 3
61397: PUSH
61398: LD_VAR 0 1
61402: PPUSH
61403: LD_VAR 0 5
61407: PPUSH
61408: CALL_OW 76
61412: ST_TO_ADDR
61413: GO 61435
// result := SortListByListDesc ( units , tmp ) ;
61415: LD_ADDR_VAR 0 3
61419: PUSH
61420: LD_VAR 0 1
61424: PPUSH
61425: LD_VAR 0 5
61429: PPUSH
61430: CALL_OW 77
61434: ST_TO_ADDR
// end ;
61435: LD_VAR 0 3
61439: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61440: LD_INT 0
61442: PPUSH
61443: PPUSH
// task := GetTaskList ( mech ) ;
61444: LD_ADDR_VAR 0 4
61448: PUSH
61449: LD_VAR 0 1
61453: PPUSH
61454: CALL_OW 437
61458: ST_TO_ADDR
// if not task then
61459: LD_VAR 0 4
61463: NOT
61464: IFFALSE 61468
// exit ;
61466: GO 61510
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61468: LD_ADDR_VAR 0 3
61472: PUSH
61473: LD_VAR 0 4
61477: PUSH
61478: LD_INT 1
61480: ARRAY
61481: PUSH
61482: LD_INT 1
61484: ARRAY
61485: PUSH
61486: LD_STRING r
61488: EQUAL
61489: PUSH
61490: LD_VAR 0 4
61494: PUSH
61495: LD_INT 1
61497: ARRAY
61498: PUSH
61499: LD_INT 4
61501: ARRAY
61502: PUSH
61503: LD_VAR 0 2
61507: EQUAL
61508: AND
61509: ST_TO_ADDR
// end ;
61510: LD_VAR 0 3
61514: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61515: LD_INT 0
61517: PPUSH
// SetDir ( unit , d ) ;
61518: LD_VAR 0 1
61522: PPUSH
61523: LD_VAR 0 4
61527: PPUSH
61528: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61532: LD_VAR 0 1
61536: PPUSH
61537: LD_VAR 0 2
61541: PPUSH
61542: LD_VAR 0 3
61546: PPUSH
61547: LD_VAR 0 5
61551: PPUSH
61552: CALL_OW 48
// end ;
61556: LD_VAR 0 6
61560: RET
// export function ToNaturalNumber ( number ) ; begin
61561: LD_INT 0
61563: PPUSH
// result := number div 1 ;
61564: LD_ADDR_VAR 0 2
61568: PUSH
61569: LD_VAR 0 1
61573: PUSH
61574: LD_INT 1
61576: DIV
61577: ST_TO_ADDR
// if number < 0 then
61578: LD_VAR 0 1
61582: PUSH
61583: LD_INT 0
61585: LESS
61586: IFFALSE 61596
// result := 0 ;
61588: LD_ADDR_VAR 0 2
61592: PUSH
61593: LD_INT 0
61595: ST_TO_ADDR
// end ;
61596: LD_VAR 0 2
61600: RET
// export function SortByClass ( units , class ) ; var un ; begin
61601: LD_INT 0
61603: PPUSH
61604: PPUSH
// if not units or not class then
61605: LD_VAR 0 1
61609: NOT
61610: PUSH
61611: LD_VAR 0 2
61615: NOT
61616: OR
61617: IFFALSE 61621
// exit ;
61619: GO 61716
// result := [ ] ;
61621: LD_ADDR_VAR 0 3
61625: PUSH
61626: EMPTY
61627: ST_TO_ADDR
// for un in units do
61628: LD_ADDR_VAR 0 4
61632: PUSH
61633: LD_VAR 0 1
61637: PUSH
61638: FOR_IN
61639: IFFALSE 61714
// if GetClass ( un ) = class then
61641: LD_VAR 0 4
61645: PPUSH
61646: CALL_OW 257
61650: PUSH
61651: LD_VAR 0 2
61655: EQUAL
61656: IFFALSE 61683
// result := Insert ( result , 1 , un ) else
61658: LD_ADDR_VAR 0 3
61662: PUSH
61663: LD_VAR 0 3
61667: PPUSH
61668: LD_INT 1
61670: PPUSH
61671: LD_VAR 0 4
61675: PPUSH
61676: CALL_OW 2
61680: ST_TO_ADDR
61681: GO 61712
// result := Replace ( result , result + 1 , un ) ;
61683: LD_ADDR_VAR 0 3
61687: PUSH
61688: LD_VAR 0 3
61692: PPUSH
61693: LD_VAR 0 3
61697: PUSH
61698: LD_INT 1
61700: PLUS
61701: PPUSH
61702: LD_VAR 0 4
61706: PPUSH
61707: CALL_OW 1
61711: ST_TO_ADDR
61712: GO 61638
61714: POP
61715: POP
// end ;
61716: LD_VAR 0 3
61720: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61721: LD_INT 0
61723: PPUSH
61724: PPUSH
61725: PPUSH
61726: PPUSH
61727: PPUSH
61728: PPUSH
61729: PPUSH
// result := [ ] ;
61730: LD_ADDR_VAR 0 4
61734: PUSH
61735: EMPTY
61736: ST_TO_ADDR
// if x - r < 0 then
61737: LD_VAR 0 1
61741: PUSH
61742: LD_VAR 0 3
61746: MINUS
61747: PUSH
61748: LD_INT 0
61750: LESS
61751: IFFALSE 61763
// min_x := 0 else
61753: LD_ADDR_VAR 0 8
61757: PUSH
61758: LD_INT 0
61760: ST_TO_ADDR
61761: GO 61779
// min_x := x - r ;
61763: LD_ADDR_VAR 0 8
61767: PUSH
61768: LD_VAR 0 1
61772: PUSH
61773: LD_VAR 0 3
61777: MINUS
61778: ST_TO_ADDR
// if y - r < 0 then
61779: LD_VAR 0 2
61783: PUSH
61784: LD_VAR 0 3
61788: MINUS
61789: PUSH
61790: LD_INT 0
61792: LESS
61793: IFFALSE 61805
// min_y := 0 else
61795: LD_ADDR_VAR 0 7
61799: PUSH
61800: LD_INT 0
61802: ST_TO_ADDR
61803: GO 61821
// min_y := y - r ;
61805: LD_ADDR_VAR 0 7
61809: PUSH
61810: LD_VAR 0 2
61814: PUSH
61815: LD_VAR 0 3
61819: MINUS
61820: ST_TO_ADDR
// max_x := x + r ;
61821: LD_ADDR_VAR 0 9
61825: PUSH
61826: LD_VAR 0 1
61830: PUSH
61831: LD_VAR 0 3
61835: PLUS
61836: ST_TO_ADDR
// max_y := y + r ;
61837: LD_ADDR_VAR 0 10
61841: PUSH
61842: LD_VAR 0 2
61846: PUSH
61847: LD_VAR 0 3
61851: PLUS
61852: ST_TO_ADDR
// for _x = min_x to max_x do
61853: LD_ADDR_VAR 0 5
61857: PUSH
61858: DOUBLE
61859: LD_VAR 0 8
61863: DEC
61864: ST_TO_ADDR
61865: LD_VAR 0 9
61869: PUSH
61870: FOR_TO
61871: IFFALSE 61972
// for _y = min_y to max_y do
61873: LD_ADDR_VAR 0 6
61877: PUSH
61878: DOUBLE
61879: LD_VAR 0 7
61883: DEC
61884: ST_TO_ADDR
61885: LD_VAR 0 10
61889: PUSH
61890: FOR_TO
61891: IFFALSE 61968
// begin if not ValidHex ( _x , _y ) then
61893: LD_VAR 0 5
61897: PPUSH
61898: LD_VAR 0 6
61902: PPUSH
61903: CALL_OW 488
61907: NOT
61908: IFFALSE 61912
// continue ;
61910: GO 61890
// if GetResourceTypeXY ( _x , _y ) then
61912: LD_VAR 0 5
61916: PPUSH
61917: LD_VAR 0 6
61921: PPUSH
61922: CALL_OW 283
61926: IFFALSE 61966
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61928: LD_ADDR_VAR 0 4
61932: PUSH
61933: LD_VAR 0 4
61937: PPUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: PLUS
61946: PPUSH
61947: LD_VAR 0 5
61951: PUSH
61952: LD_VAR 0 6
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PPUSH
61961: CALL_OW 1
61965: ST_TO_ADDR
// end ;
61966: GO 61890
61968: POP
61969: POP
61970: GO 61870
61972: POP
61973: POP
// end ;
61974: LD_VAR 0 4
61978: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61979: LD_INT 0
61981: PPUSH
61982: PPUSH
61983: PPUSH
61984: PPUSH
61985: PPUSH
61986: PPUSH
61987: PPUSH
61988: PPUSH
// if not units then
61989: LD_VAR 0 1
61993: NOT
61994: IFFALSE 61998
// exit ;
61996: GO 62423
// result := UnitFilter ( units , [ f_ok ] ) ;
61998: LD_ADDR_VAR 0 3
62002: PUSH
62003: LD_VAR 0 1
62007: PPUSH
62008: LD_INT 50
62010: PUSH
62011: EMPTY
62012: LIST
62013: PPUSH
62014: CALL_OW 72
62018: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62019: LD_ADDR_VAR 0 8
62023: PUSH
62024: LD_VAR 0 1
62028: PUSH
62029: LD_INT 1
62031: ARRAY
62032: PPUSH
62033: CALL_OW 255
62037: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
62038: LD_ADDR_VAR 0 10
62042: PUSH
62043: LD_INT 29
62045: PUSH
62046: LD_EXP 11
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: ST_TO_ADDR
// if not result then
62055: LD_VAR 0 3
62059: NOT
62060: IFFALSE 62064
// exit ;
62062: GO 62423
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62064: LD_ADDR_VAR 0 5
62068: PUSH
62069: LD_INT 81
62071: PUSH
62072: LD_VAR 0 8
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PPUSH
62081: CALL_OW 69
62085: ST_TO_ADDR
// for i in result do
62086: LD_ADDR_VAR 0 4
62090: PUSH
62091: LD_VAR 0 3
62095: PUSH
62096: FOR_IN
62097: IFFALSE 62421
// begin tag := GetTag ( i ) + 1 ;
62099: LD_ADDR_VAR 0 9
62103: PUSH
62104: LD_VAR 0 4
62108: PPUSH
62109: CALL_OW 110
62113: PUSH
62114: LD_INT 1
62116: PLUS
62117: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62118: LD_ADDR_VAR 0 7
62122: PUSH
62123: LD_VAR 0 4
62127: PPUSH
62128: CALL_OW 250
62132: PPUSH
62133: LD_VAR 0 4
62137: PPUSH
62138: CALL_OW 251
62142: PPUSH
62143: LD_INT 6
62145: PPUSH
62146: CALL 61721 0 3
62150: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62151: LD_VAR 0 7
62155: PUSH
62156: LD_VAR 0 4
62160: PPUSH
62161: CALL_OW 264
62165: PUSH
62166: LD_VAR 0 10
62170: IN
62171: NOT
62172: AND
62173: IFFALSE 62212
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62175: LD_VAR 0 4
62179: PPUSH
62180: LD_VAR 0 7
62184: PUSH
62185: LD_INT 1
62187: ARRAY
62188: PUSH
62189: LD_INT 1
62191: ARRAY
62192: PPUSH
62193: LD_VAR 0 7
62197: PUSH
62198: LD_INT 1
62200: ARRAY
62201: PUSH
62202: LD_INT 2
62204: ARRAY
62205: PPUSH
62206: CALL_OW 116
62210: GO 62419
// if path > tag then
62212: LD_VAR 0 2
62216: PUSH
62217: LD_VAR 0 9
62221: GREATER
62222: IFFALSE 62389
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
62224: LD_ADDR_VAR 0 6
62228: PUSH
62229: LD_VAR 0 5
62233: PPUSH
62234: LD_INT 91
62236: PUSH
62237: LD_VAR 0 4
62241: PUSH
62242: LD_INT 12
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: PPUSH
62250: CALL_OW 72
62254: ST_TO_ADDR
// if nearEnemy then
62255: LD_VAR 0 6
62259: IFFALSE 62287
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62261: LD_VAR 0 4
62265: PPUSH
62266: LD_VAR 0 6
62270: PPUSH
62271: LD_VAR 0 4
62275: PPUSH
62276: CALL_OW 74
62280: PPUSH
62281: CALL_OW 115
62285: GO 62387
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62287: LD_VAR 0 4
62291: PPUSH
62292: LD_VAR 0 2
62296: PUSH
62297: LD_VAR 0 9
62301: ARRAY
62302: PUSH
62303: LD_INT 1
62305: ARRAY
62306: PPUSH
62307: LD_VAR 0 2
62311: PUSH
62312: LD_VAR 0 9
62316: ARRAY
62317: PUSH
62318: LD_INT 2
62320: ARRAY
62321: PPUSH
62322: CALL_OW 297
62326: PUSH
62327: LD_INT 6
62329: GREATER
62330: IFFALSE 62373
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62332: LD_VAR 0 4
62336: PPUSH
62337: LD_VAR 0 2
62341: PUSH
62342: LD_VAR 0 9
62346: ARRAY
62347: PUSH
62348: LD_INT 1
62350: ARRAY
62351: PPUSH
62352: LD_VAR 0 2
62356: PUSH
62357: LD_VAR 0 9
62361: ARRAY
62362: PUSH
62363: LD_INT 2
62365: ARRAY
62366: PPUSH
62367: CALL_OW 114
62371: GO 62387
// SetTag ( i , tag ) ;
62373: LD_VAR 0 4
62377: PPUSH
62378: LD_VAR 0 9
62382: PPUSH
62383: CALL_OW 109
// end else
62387: GO 62419
// if enemy then
62389: LD_VAR 0 5
62393: IFFALSE 62419
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62395: LD_VAR 0 4
62399: PPUSH
62400: LD_VAR 0 5
62404: PPUSH
62405: LD_VAR 0 4
62409: PPUSH
62410: CALL_OW 74
62414: PPUSH
62415: CALL_OW 115
// end ;
62419: GO 62096
62421: POP
62422: POP
// end ;
62423: LD_VAR 0 3
62427: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62428: LD_INT 0
62430: PPUSH
62431: PPUSH
62432: PPUSH
// if not unit or IsInUnit ( unit ) then
62433: LD_VAR 0 1
62437: NOT
62438: PUSH
62439: LD_VAR 0 1
62443: PPUSH
62444: CALL_OW 310
62448: OR
62449: IFFALSE 62453
// exit ;
62451: GO 62544
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62453: LD_ADDR_VAR 0 4
62457: PUSH
62458: LD_VAR 0 1
62462: PPUSH
62463: CALL_OW 250
62467: PPUSH
62468: LD_VAR 0 2
62472: PPUSH
62473: LD_INT 1
62475: PPUSH
62476: CALL_OW 272
62480: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62481: LD_ADDR_VAR 0 5
62485: PUSH
62486: LD_VAR 0 1
62490: PPUSH
62491: CALL_OW 251
62495: PPUSH
62496: LD_VAR 0 2
62500: PPUSH
62501: LD_INT 1
62503: PPUSH
62504: CALL_OW 273
62508: ST_TO_ADDR
// if ValidHex ( x , y ) then
62509: LD_VAR 0 4
62513: PPUSH
62514: LD_VAR 0 5
62518: PPUSH
62519: CALL_OW 488
62523: IFFALSE 62544
// ComTurnXY ( unit , x , y ) ;
62525: LD_VAR 0 1
62529: PPUSH
62530: LD_VAR 0 4
62534: PPUSH
62535: LD_VAR 0 5
62539: PPUSH
62540: CALL_OW 118
// end ;
62544: LD_VAR 0 3
62548: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62549: LD_INT 0
62551: PPUSH
62552: PPUSH
// result := false ;
62553: LD_ADDR_VAR 0 3
62557: PUSH
62558: LD_INT 0
62560: ST_TO_ADDR
// if not units then
62561: LD_VAR 0 2
62565: NOT
62566: IFFALSE 62570
// exit ;
62568: GO 62615
// for i in units do
62570: LD_ADDR_VAR 0 4
62574: PUSH
62575: LD_VAR 0 2
62579: PUSH
62580: FOR_IN
62581: IFFALSE 62613
// if See ( side , i ) then
62583: LD_VAR 0 1
62587: PPUSH
62588: LD_VAR 0 4
62592: PPUSH
62593: CALL_OW 292
62597: IFFALSE 62611
// begin result := true ;
62599: LD_ADDR_VAR 0 3
62603: PUSH
62604: LD_INT 1
62606: ST_TO_ADDR
// exit ;
62607: POP
62608: POP
62609: GO 62615
// end ;
62611: GO 62580
62613: POP
62614: POP
// end ;
62615: LD_VAR 0 3
62619: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62620: LD_INT 0
62622: PPUSH
62623: PPUSH
62624: PPUSH
62625: PPUSH
// if not unit or not points then
62626: LD_VAR 0 1
62630: NOT
62631: PUSH
62632: LD_VAR 0 2
62636: NOT
62637: OR
62638: IFFALSE 62642
// exit ;
62640: GO 62732
// dist := 99999 ;
62642: LD_ADDR_VAR 0 5
62646: PUSH
62647: LD_INT 99999
62649: ST_TO_ADDR
// for i in points do
62650: LD_ADDR_VAR 0 4
62654: PUSH
62655: LD_VAR 0 2
62659: PUSH
62660: FOR_IN
62661: IFFALSE 62730
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62663: LD_ADDR_VAR 0 6
62667: PUSH
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_VAR 0 4
62677: PUSH
62678: LD_INT 1
62680: ARRAY
62681: PPUSH
62682: LD_VAR 0 4
62686: PUSH
62687: LD_INT 2
62689: ARRAY
62690: PPUSH
62691: CALL_OW 297
62695: ST_TO_ADDR
// if tmpDist < dist then
62696: LD_VAR 0 6
62700: PUSH
62701: LD_VAR 0 5
62705: LESS
62706: IFFALSE 62728
// begin result := i ;
62708: LD_ADDR_VAR 0 3
62712: PUSH
62713: LD_VAR 0 4
62717: ST_TO_ADDR
// dist := tmpDist ;
62718: LD_ADDR_VAR 0 5
62722: PUSH
62723: LD_VAR 0 6
62727: ST_TO_ADDR
// end ; end ;
62728: GO 62660
62730: POP
62731: POP
// end ; end_of_file
62732: LD_VAR 0 3
62736: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62737: LD_VAR 0 1
62741: PUSH
62742: LD_INT 200
62744: DOUBLE
62745: GREATEREQUAL
62746: IFFALSE 62754
62748: LD_INT 299
62750: DOUBLE
62751: LESSEQUAL
62752: IFTRUE 62756
62754: GO 62788
62756: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62757: LD_VAR 0 1
62761: PPUSH
62762: LD_VAR 0 2
62766: PPUSH
62767: LD_VAR 0 3
62771: PPUSH
62772: LD_VAR 0 4
62776: PPUSH
62777: LD_VAR 0 5
62781: PPUSH
62782: CALL 18763 0 5
62786: GO 62865
62788: LD_INT 300
62790: DOUBLE
62791: GREATEREQUAL
62792: IFFALSE 62800
62794: LD_INT 399
62796: DOUBLE
62797: LESSEQUAL
62798: IFTRUE 62802
62800: GO 62864
62802: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62803: LD_VAR 0 1
62807: PPUSH
62808: LD_VAR 0 2
62812: PPUSH
62813: LD_VAR 0 3
62817: PPUSH
62818: LD_VAR 0 4
62822: PPUSH
62823: LD_VAR 0 5
62827: PPUSH
62828: LD_VAR 0 6
62832: PPUSH
62833: LD_VAR 0 7
62837: PPUSH
62838: LD_VAR 0 8
62842: PPUSH
62843: LD_VAR 0 9
62847: PPUSH
62848: LD_VAR 0 10
62852: PPUSH
62853: LD_VAR 0 11
62857: PPUSH
62858: CALL 16661 0 11
62862: GO 62865
62864: POP
// end ;
62865: PPOPN 11
62867: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62868: LD_VAR 0 1
62872: PPUSH
62873: LD_VAR 0 2
62877: PPUSH
62878: LD_VAR 0 3
62882: PPUSH
62883: LD_VAR 0 4
62887: PPUSH
62888: LD_VAR 0 5
62892: PPUSH
62893: CALL 18755 0 5
// end ; end_of_file
62897: PPOPN 5
62899: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62900: LD_VAR 0 1
62904: PPUSH
62905: LD_VAR 0 2
62909: PPUSH
62910: LD_VAR 0 3
62914: PPUSH
62915: LD_VAR 0 4
62919: PPUSH
62920: LD_VAR 0 5
62924: PPUSH
62925: LD_VAR 0 6
62929: PPUSH
62930: CALL 4856 0 6
// end ;
62934: PPOPN 6
62936: END
