// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4269
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4167
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4036
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: PUSH
3936: LD_INT 63
3938: PPUSH
3939: LD_INT 37
3941: PPUSH
3942: CALL_OW 428
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 30
3954: EQUAL
3955: AND
3956: IFFALSE 3962
// ComitSib ;
3958: CALL 2766 0 0
// if Difficulty > 2 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 2
3969: GREATER
3970: IFFALSE 3998
// begin Wait ( 0 0$25 ) ;
3972: LD_INT 875
3974: PPUSH
3975: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PUSH
3989: LD_INT 4
3991: PPUSH
3992: CALL 1355 0 1
3996: ADD
3997: ST_TO_ADDR
// end ; if attackN > 7 then
3998: LD_EXP 6
4002: PUSH
4003: LD_INT 7
4005: GREATER
4006: IFFALSE 4034
// begin Wait ( 0 0$15 ) ;
4008: LD_INT 525
4010: PPUSH
4011: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL 1355 0 1
4032: ADD
4033: ST_TO_ADDR
// end ; end ; 3 :
4034: GO 4167
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4166
4044: POP
// begin pom := pom ^ Attack ( 1 ) ;
4045: LD_ADDR_EXP 4
4049: PUSH
4050: LD_EXP 4
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL 1355 0 1
4062: ADD
4063: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4064: LD_INT 70
4066: PPUSH
4067: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4071: LD_ADDR_EXP 4
4075: PUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL 1355 0 1
4088: ADD
4089: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4090: LD_INT 2100
4092: PPUSH
4093: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4097: LD_ADDR_EXP 4
4101: PUSH
4102: LD_EXP 4
4106: PUSH
4107: LD_INT 3
4109: PPUSH
4110: CALL 1355 0 1
4114: ADD
4115: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4116: LD_ADDR_EXP 4
4120: PUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 5
4128: PPUSH
4129: CALL 1355 0 1
4133: ADD
4134: ST_TO_ADDR
// if attackN > 10 then
4135: LD_EXP 6
4139: PUSH
4140: LD_INT 10
4142: GREATER
4143: IFFALSE 4164
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1355 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ;
4164: GO 4167
4166: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 1
4174: GREATER
4175: PUSH
4176: LD_EXP 6
4180: PUSH
4181: LD_INT 4
4183: MOD
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: AND
4189: IFFALSE 4255
// begin Wait ( 1 1$45 ) ;
4191: LD_INT 3675
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4217: LD_ADDR_EXP 4
4221: PUSH
4222: LD_EXP 4
4226: PUSH
4227: LD_INT 4
4229: PPUSH
4230: CALL 1355 0 1
4234: ADD
4235: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4236: LD_ADDR_EXP 5
4240: PUSH
4241: LD_EXP 5
4245: PUSH
4246: LD_INT 6
4248: PPUSH
4249: CALL 1355 0 1
4253: ADD
4254: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4255: LD_ADDR_EXP 6
4259: PUSH
4260: LD_EXP 6
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: PPOPN 2
4271: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4272: LD_EXP 6
4276: PUSH
4277: LD_INT 10
4279: PUSH
4280: LD_INT 12
4282: PUSH
4283: LD_INT 14
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: GREATEREQUAL
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PUSH
4313: LD_INT 0
4315: EQUAL
4316: AND
4317: IFFALSE 4360
4319: GO 4321
4321: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4322: LD_EXP 2
4326: PPUSH
4327: LD_STRING DDocEnd
4329: PPUSH
4330: CALL_OW 586
// wait ( 0 0$03 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// Query ( QWin ) ;
4341: LD_STRING QWin
4343: PPUSH
4344: CALL_OW 97
// music_nat := 5 ;
4348: LD_ADDR_OWVAR 71
4352: PUSH
4353: LD_INT 5
4355: ST_TO_ADDR
// YouWin ;
4356: CALL_OW 103
// end ; end_of_file
4360: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL 20114 0 1
// if un = brave or un = com then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 1
4377: EQUAL
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: LD_EXP 1
4388: EQUAL
4389: OR
4390: IFFALSE 4411
// begin SayRadioNoFace ( doc , DDocWin ) ;
4392: LD_EXP 2
4396: PPUSH
4397: LD_STRING DDocWin
4399: PPUSH
4400: CALL_OW 586
// YouLost (  ) ;
4404: LD_STRING 
4406: PPUSH
4407: CALL_OW 104
// end ; end ;
4411: PPOPN 1
4413: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL 20210 0 3
// end ;
4433: PPOPN 3
4435: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4436: LD_VAR 0 1
4440: PPUSH
4441: CALL 20218 0 1
// end ;
4445: PPOPN 1
4447: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL 20234 0 2
// end ; end_of_file end_of_file
4462: PPOPN 2
4464: END
// every 0 0$1 do
4465: GO 4467
4467: DISABLE
// begin enable ;
4468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4469: LD_STRING updateTimer(
4471: PUSH
4472: LD_OWVAR 1
4476: STR
4477: PUSH
4478: LD_STRING );
4480: STR
4481: PPUSH
4482: CALL_OW 559
// end ;
4486: END
// export function SOS_MapStart ( ) ; begin
4487: LD_INT 0
4489: PPUSH
// if streamModeActive then
4490: LD_EXP 7
4494: IFFALSE 4503
// DefineStreamItems ( true ) ;
4496: LD_INT 1
4498: PPUSH
4499: CALL 6157 0 1
// UpdateFactoryWaypoints ( ) ;
4503: CALL 19018 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4507: CALL 19275 0 0
// end ;
4511: LD_VAR 0 1
4515: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4516: LD_INT 0
4518: PPUSH
// if p2 = hack_mode then
4519: LD_VAR 0 2
4523: PUSH
4524: LD_INT 100
4526: EQUAL
4527: IFFALSE 5530
// begin if not StreamModeActive then
4529: LD_EXP 7
4533: NOT
4534: IFFALSE 4544
// StreamModeActive := true ;
4536: LD_ADDR_EXP 7
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 0 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 0
4551: EQUAL
4552: IFFALSE 4558
// InitStreamMode ;
4554: CALL 5693 0 0
// if p3 = 1 then
4558: LD_VAR 0 3
4562: PUSH
4563: LD_INT 1
4565: EQUAL
4566: IFFALSE 4576
// sRocket := true ;
4568: LD_ADDR_EXP 12
4572: PUSH
4573: LD_INT 1
4575: ST_TO_ADDR
// if p3 = 2 then
4576: LD_VAR 0 3
4580: PUSH
4581: LD_INT 2
4583: EQUAL
4584: IFFALSE 4594
// sSpeed := true ;
4586: LD_ADDR_EXP 11
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// if p3 = 3 then
4594: LD_VAR 0 3
4598: PUSH
4599: LD_INT 3
4601: EQUAL
4602: IFFALSE 4612
// sEngine := true ;
4604: LD_ADDR_EXP 13
4608: PUSH
4609: LD_INT 1
4611: ST_TO_ADDR
// if p3 = 4 then
4612: LD_VAR 0 3
4616: PUSH
4617: LD_INT 4
4619: EQUAL
4620: IFFALSE 4630
// sSpec := true ;
4622: LD_ADDR_EXP 10
4626: PUSH
4627: LD_INT 1
4629: ST_TO_ADDR
// if p3 = 5 then
4630: LD_VAR 0 3
4634: PUSH
4635: LD_INT 5
4637: EQUAL
4638: IFFALSE 4648
// sLevel := true ;
4640: LD_ADDR_EXP 14
4644: PUSH
4645: LD_INT 1
4647: ST_TO_ADDR
// if p3 = 6 then
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 6
4655: EQUAL
4656: IFFALSE 4666
// sArmoury := true ;
4658: LD_ADDR_EXP 15
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// if p3 = 7 then
4666: LD_VAR 0 3
4670: PUSH
4671: LD_INT 7
4673: EQUAL
4674: IFFALSE 4684
// sRadar := true ;
4676: LD_ADDR_EXP 16
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// if p3 = 8 then
4684: LD_VAR 0 3
4688: PUSH
4689: LD_INT 8
4691: EQUAL
4692: IFFALSE 4702
// sBunker := true ;
4694: LD_ADDR_EXP 17
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// if p3 = 9 then
4702: LD_VAR 0 3
4706: PUSH
4707: LD_INT 9
4709: EQUAL
4710: IFFALSE 4720
// sHack := true ;
4712: LD_ADDR_EXP 18
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// if p3 = 10 then
4720: LD_VAR 0 3
4724: PUSH
4725: LD_INT 10
4727: EQUAL
4728: IFFALSE 4738
// sFire := true ;
4730: LD_ADDR_EXP 19
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// if p3 = 11 then
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 11
4745: EQUAL
4746: IFFALSE 4756
// sRefresh := true ;
4748: LD_ADDR_EXP 20
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// if p3 = 12 then
4756: LD_VAR 0 3
4760: PUSH
4761: LD_INT 12
4763: EQUAL
4764: IFFALSE 4774
// sExp := true ;
4766: LD_ADDR_EXP 21
4770: PUSH
4771: LD_INT 1
4773: ST_TO_ADDR
// if p3 = 13 then
4774: LD_VAR 0 3
4778: PUSH
4779: LD_INT 13
4781: EQUAL
4782: IFFALSE 4792
// sDepot := true ;
4784: LD_ADDR_EXP 22
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// if p3 = 14 then
4792: LD_VAR 0 3
4796: PUSH
4797: LD_INT 14
4799: EQUAL
4800: IFFALSE 4810
// sFlag := true ;
4802: LD_ADDR_EXP 23
4806: PUSH
4807: LD_INT 1
4809: ST_TO_ADDR
// if p3 = 15 then
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 15
4817: EQUAL
4818: IFFALSE 4828
// sKamikadze := true ;
4820: LD_ADDR_EXP 31
4824: PUSH
4825: LD_INT 1
4827: ST_TO_ADDR
// if p3 = 16 then
4828: LD_VAR 0 3
4832: PUSH
4833: LD_INT 16
4835: EQUAL
4836: IFFALSE 4846
// sTroll := true ;
4838: LD_ADDR_EXP 32
4842: PUSH
4843: LD_INT 1
4845: ST_TO_ADDR
// if p3 = 17 then
4846: LD_VAR 0 3
4850: PUSH
4851: LD_INT 17
4853: EQUAL
4854: IFFALSE 4864
// sSlow := true ;
4856: LD_ADDR_EXP 33
4860: PUSH
4861: LD_INT 1
4863: ST_TO_ADDR
// if p3 = 18 then
4864: LD_VAR 0 3
4868: PUSH
4869: LD_INT 18
4871: EQUAL
4872: IFFALSE 4882
// sLack := true ;
4874: LD_ADDR_EXP 34
4878: PUSH
4879: LD_INT 1
4881: ST_TO_ADDR
// if p3 = 19 then
4882: LD_VAR 0 3
4886: PUSH
4887: LD_INT 19
4889: EQUAL
4890: IFFALSE 4900
// sTank := true ;
4892: LD_ADDR_EXP 36
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// if p3 = 20 then
4900: LD_VAR 0 3
4904: PUSH
4905: LD_INT 20
4907: EQUAL
4908: IFFALSE 4918
// sRemote := true ;
4910: LD_ADDR_EXP 37
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// if p3 = 21 then
4918: LD_VAR 0 3
4922: PUSH
4923: LD_INT 21
4925: EQUAL
4926: IFFALSE 4936
// sPowell := true ;
4928: LD_ADDR_EXP 38
4932: PUSH
4933: LD_INT 1
4935: ST_TO_ADDR
// if p3 = 22 then
4936: LD_VAR 0 3
4940: PUSH
4941: LD_INT 22
4943: EQUAL
4944: IFFALSE 4954
// sTeleport := true ;
4946: LD_ADDR_EXP 41
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// if p3 = 23 then
4954: LD_VAR 0 3
4958: PUSH
4959: LD_INT 23
4961: EQUAL
4962: IFFALSE 4972
// sOilTower := true ;
4964: LD_ADDR_EXP 43
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// if p3 = 24 then
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 24
4979: EQUAL
4980: IFFALSE 4990
// sShovel := true ;
4982: LD_ADDR_EXP 44
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// if p3 = 25 then
4990: LD_VAR 0 3
4994: PUSH
4995: LD_INT 25
4997: EQUAL
4998: IFFALSE 5008
// sSheik := true ;
5000: LD_ADDR_EXP 45
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// if p3 = 26 then
5008: LD_VAR 0 3
5012: PUSH
5013: LD_INT 26
5015: EQUAL
5016: IFFALSE 5026
// sEarthquake := true ;
5018: LD_ADDR_EXP 47
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// if p3 = 27 then
5026: LD_VAR 0 3
5030: PUSH
5031: LD_INT 27
5033: EQUAL
5034: IFFALSE 5044
// sAI := true ;
5036: LD_ADDR_EXP 48
5040: PUSH
5041: LD_INT 1
5043: ST_TO_ADDR
// if p3 = 28 then
5044: LD_VAR 0 3
5048: PUSH
5049: LD_INT 28
5051: EQUAL
5052: IFFALSE 5062
// sCargo := true ;
5054: LD_ADDR_EXP 51
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// if p3 = 29 then
5062: LD_VAR 0 3
5066: PUSH
5067: LD_INT 29
5069: EQUAL
5070: IFFALSE 5080
// sDLaser := true ;
5072: LD_ADDR_EXP 52
5076: PUSH
5077: LD_INT 1
5079: ST_TO_ADDR
// if p3 = 30 then
5080: LD_VAR 0 3
5084: PUSH
5085: LD_INT 30
5087: EQUAL
5088: IFFALSE 5098
// sExchange := true ;
5090: LD_ADDR_EXP 53
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
// if p3 = 31 then
5098: LD_VAR 0 3
5102: PUSH
5103: LD_INT 31
5105: EQUAL
5106: IFFALSE 5116
// sFac := true ;
5108: LD_ADDR_EXP 54
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// if p3 = 32 then
5116: LD_VAR 0 3
5120: PUSH
5121: LD_INT 32
5123: EQUAL
5124: IFFALSE 5134
// sPower := true ;
5126: LD_ADDR_EXP 55
5130: PUSH
5131: LD_INT 1
5133: ST_TO_ADDR
// if p3 = 33 then
5134: LD_VAR 0 3
5138: PUSH
5139: LD_INT 33
5141: EQUAL
5142: IFFALSE 5152
// sRandom := true ;
5144: LD_ADDR_EXP 56
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// if p3 = 34 then
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 34
5159: EQUAL
5160: IFFALSE 5170
// sShield := true ;
5162: LD_ADDR_EXP 57
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// if p3 = 35 then
5170: LD_VAR 0 3
5174: PUSH
5175: LD_INT 35
5177: EQUAL
5178: IFFALSE 5188
// sTime := true ;
5180: LD_ADDR_EXP 58
5184: PUSH
5185: LD_INT 1
5187: ST_TO_ADDR
// if p3 = 36 then
5188: LD_VAR 0 3
5192: PUSH
5193: LD_INT 36
5195: EQUAL
5196: IFFALSE 5206
// sTools := true ;
5198: LD_ADDR_EXP 59
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if p3 = 101 then
5206: LD_VAR 0 3
5210: PUSH
5211: LD_INT 101
5213: EQUAL
5214: IFFALSE 5224
// sSold := true ;
5216: LD_ADDR_EXP 24
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// if p3 = 102 then
5224: LD_VAR 0 3
5228: PUSH
5229: LD_INT 102
5231: EQUAL
5232: IFFALSE 5242
// sDiff := true ;
5234: LD_ADDR_EXP 25
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if p3 = 103 then
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 103
5249: EQUAL
5250: IFFALSE 5260
// sFog := true ;
5252: LD_ADDR_EXP 28
5256: PUSH
5257: LD_INT 1
5259: ST_TO_ADDR
// if p3 = 104 then
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 104
5267: EQUAL
5268: IFFALSE 5278
// sReset := true ;
5270: LD_ADDR_EXP 29
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// if p3 = 105 then
5278: LD_VAR 0 3
5282: PUSH
5283: LD_INT 105
5285: EQUAL
5286: IFFALSE 5296
// sSun := true ;
5288: LD_ADDR_EXP 30
5292: PUSH
5293: LD_INT 1
5295: ST_TO_ADDR
// if p3 = 106 then
5296: LD_VAR 0 3
5300: PUSH
5301: LD_INT 106
5303: EQUAL
5304: IFFALSE 5314
// sTiger := true ;
5306: LD_ADDR_EXP 26
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// if p3 = 107 then
5314: LD_VAR 0 3
5318: PUSH
5319: LD_INT 107
5321: EQUAL
5322: IFFALSE 5332
// sBomb := true ;
5324: LD_ADDR_EXP 27
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// if p3 = 108 then
5332: LD_VAR 0 3
5336: PUSH
5337: LD_INT 108
5339: EQUAL
5340: IFFALSE 5350
// sWound := true ;
5342: LD_ADDR_EXP 35
5346: PUSH
5347: LD_INT 1
5349: ST_TO_ADDR
// if p3 = 109 then
5350: LD_VAR 0 3
5354: PUSH
5355: LD_INT 109
5357: EQUAL
5358: IFFALSE 5368
// sBetray := true ;
5360: LD_ADDR_EXP 39
5364: PUSH
5365: LD_INT 1
5367: ST_TO_ADDR
// if p3 = 110 then
5368: LD_VAR 0 3
5372: PUSH
5373: LD_INT 110
5375: EQUAL
5376: IFFALSE 5386
// sContamin := true ;
5378: LD_ADDR_EXP 40
5382: PUSH
5383: LD_INT 1
5385: ST_TO_ADDR
// if p3 = 111 then
5386: LD_VAR 0 3
5390: PUSH
5391: LD_INT 111
5393: EQUAL
5394: IFFALSE 5404
// sOil := true ;
5396: LD_ADDR_EXP 42
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// if p3 = 112 then
5404: LD_VAR 0 3
5408: PUSH
5409: LD_INT 112
5411: EQUAL
5412: IFFALSE 5422
// sStu := true ;
5414: LD_ADDR_EXP 46
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// if p3 = 113 then
5422: LD_VAR 0 3
5426: PUSH
5427: LD_INT 113
5429: EQUAL
5430: IFFALSE 5440
// sBazooka := true ;
5432: LD_ADDR_EXP 49
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// if p3 = 114 then
5440: LD_VAR 0 3
5444: PUSH
5445: LD_INT 114
5447: EQUAL
5448: IFFALSE 5458
// sMortar := true ;
5450: LD_ADDR_EXP 50
5454: PUSH
5455: LD_INT 1
5457: ST_TO_ADDR
// if p3 = 115 then
5458: LD_VAR 0 3
5462: PUSH
5463: LD_INT 115
5465: EQUAL
5466: IFFALSE 5476
// sRanger := true ;
5468: LD_ADDR_EXP 60
5472: PUSH
5473: LD_INT 1
5475: ST_TO_ADDR
// if p3 = 116 then
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 116
5483: EQUAL
5484: IFFALSE 5494
// sComputer := true ;
5486: LD_ADDR_EXP 61
5490: PUSH
5491: LD_INT 1
5493: ST_TO_ADDR
// if p3 = 117 then
5494: LD_VAR 0 3
5498: PUSH
5499: LD_INT 117
5501: EQUAL
5502: IFFALSE 5512
// s30 := true ;
5504: LD_ADDR_EXP 62
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// if p3 = 118 then
5512: LD_VAR 0 3
5516: PUSH
5517: LD_INT 118
5519: EQUAL
5520: IFFALSE 5530
// s60 := true ;
5522: LD_ADDR_EXP 63
5526: PUSH
5527: LD_INT 1
5529: ST_TO_ADDR
// end ; if p2 = stream_mode then
5530: LD_VAR 0 2
5534: PUSH
5535: LD_INT 101
5537: EQUAL
5538: IFFALSE 5666
// begin case p3 of 1 :
5540: LD_VAR 0 3
5544: PUSH
5545: LD_INT 1
5547: DOUBLE
5548: EQUAL
5549: IFTRUE 5553
5551: GO 5560
5553: POP
// hHackUnlimitedResources ; 2 :
5554: CALL 17764 0 0
5558: GO 5666
5560: LD_INT 2
5562: DOUBLE
5563: EQUAL
5564: IFTRUE 5568
5566: GO 5575
5568: POP
// hHackSetLevel10 ; 3 :
5569: CALL 17897 0 0
5573: GO 5666
5575: LD_INT 3
5577: DOUBLE
5578: EQUAL
5579: IFTRUE 5583
5581: GO 5590
5583: POP
// hHackSetLevel10YourUnits ; 4 :
5584: CALL 17982 0 0
5588: GO 5666
5590: LD_INT 4
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5605
5598: POP
// hHackInvincible ; 5 :
5599: CALL 18430 0 0
5603: GO 5666
5605: LD_INT 5
5607: DOUBLE
5608: EQUAL
5609: IFTRUE 5613
5611: GO 5620
5613: POP
// hHackInvisible ; 6 :
5614: CALL 18541 0 0
5618: GO 5666
5620: LD_INT 6
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5628
5626: GO 5635
5628: POP
// hHackChangeYourSide ; 7 :
5629: CALL 18598 0 0
5633: GO 5666
5635: LD_INT 7
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5643
5641: GO 5650
5643: POP
// hHackChangeUnitSide ; 8 :
5644: CALL 18640 0 0
5648: GO 5666
5650: LD_INT 8
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5665
5658: POP
// hHackFog ; end ;
5659: CALL 18741 0 0
5663: GO 5666
5665: POP
// end ; end ;
5666: LD_VAR 0 7
5670: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5671: GO 5673
5673: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5674: LD_STRING initStreamRollete();
5676: PPUSH
5677: CALL_OW 559
// InitStreamMode ;
5681: CALL 5693 0 0
// DefineStreamItems ( false ) ;
5685: LD_INT 0
5687: PPUSH
5688: CALL 6157 0 1
// end ;
5692: END
// function InitStreamMode ; begin
5693: LD_INT 0
5695: PPUSH
// streamModeActive := false ;
5696: LD_ADDR_EXP 7
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
// normalCounter := 36 ;
5704: LD_ADDR_EXP 8
5708: PUSH
5709: LD_INT 36
5711: ST_TO_ADDR
// hardcoreCounter := 18 ;
5712: LD_ADDR_EXP 9
5716: PUSH
5717: LD_INT 18
5719: ST_TO_ADDR
// sRocket := false ;
5720: LD_ADDR_EXP 12
5724: PUSH
5725: LD_INT 0
5727: ST_TO_ADDR
// sSpeed := false ;
5728: LD_ADDR_EXP 11
5732: PUSH
5733: LD_INT 0
5735: ST_TO_ADDR
// sEngine := false ;
5736: LD_ADDR_EXP 13
5740: PUSH
5741: LD_INT 0
5743: ST_TO_ADDR
// sSpec := false ;
5744: LD_ADDR_EXP 10
5748: PUSH
5749: LD_INT 0
5751: ST_TO_ADDR
// sLevel := false ;
5752: LD_ADDR_EXP 14
5756: PUSH
5757: LD_INT 0
5759: ST_TO_ADDR
// sArmoury := false ;
5760: LD_ADDR_EXP 15
5764: PUSH
5765: LD_INT 0
5767: ST_TO_ADDR
// sRadar := false ;
5768: LD_ADDR_EXP 16
5772: PUSH
5773: LD_INT 0
5775: ST_TO_ADDR
// sBunker := false ;
5776: LD_ADDR_EXP 17
5780: PUSH
5781: LD_INT 0
5783: ST_TO_ADDR
// sHack := false ;
5784: LD_ADDR_EXP 18
5788: PUSH
5789: LD_INT 0
5791: ST_TO_ADDR
// sFire := false ;
5792: LD_ADDR_EXP 19
5796: PUSH
5797: LD_INT 0
5799: ST_TO_ADDR
// sRefresh := false ;
5800: LD_ADDR_EXP 20
5804: PUSH
5805: LD_INT 0
5807: ST_TO_ADDR
// sExp := false ;
5808: LD_ADDR_EXP 21
5812: PUSH
5813: LD_INT 0
5815: ST_TO_ADDR
// sDepot := false ;
5816: LD_ADDR_EXP 22
5820: PUSH
5821: LD_INT 0
5823: ST_TO_ADDR
// sFlag := false ;
5824: LD_ADDR_EXP 23
5828: PUSH
5829: LD_INT 0
5831: ST_TO_ADDR
// sKamikadze := false ;
5832: LD_ADDR_EXP 31
5836: PUSH
5837: LD_INT 0
5839: ST_TO_ADDR
// sTroll := false ;
5840: LD_ADDR_EXP 32
5844: PUSH
5845: LD_INT 0
5847: ST_TO_ADDR
// sSlow := false ;
5848: LD_ADDR_EXP 33
5852: PUSH
5853: LD_INT 0
5855: ST_TO_ADDR
// sLack := false ;
5856: LD_ADDR_EXP 34
5860: PUSH
5861: LD_INT 0
5863: ST_TO_ADDR
// sTank := false ;
5864: LD_ADDR_EXP 36
5868: PUSH
5869: LD_INT 0
5871: ST_TO_ADDR
// sRemote := false ;
5872: LD_ADDR_EXP 37
5876: PUSH
5877: LD_INT 0
5879: ST_TO_ADDR
// sPowell := false ;
5880: LD_ADDR_EXP 38
5884: PUSH
5885: LD_INT 0
5887: ST_TO_ADDR
// sTeleport := false ;
5888: LD_ADDR_EXP 41
5892: PUSH
5893: LD_INT 0
5895: ST_TO_ADDR
// sOilTower := false ;
5896: LD_ADDR_EXP 43
5900: PUSH
5901: LD_INT 0
5903: ST_TO_ADDR
// sShovel := false ;
5904: LD_ADDR_EXP 44
5908: PUSH
5909: LD_INT 0
5911: ST_TO_ADDR
// sSheik := false ;
5912: LD_ADDR_EXP 45
5916: PUSH
5917: LD_INT 0
5919: ST_TO_ADDR
// sEarthquake := false ;
5920: LD_ADDR_EXP 47
5924: PUSH
5925: LD_INT 0
5927: ST_TO_ADDR
// sAI := false ;
5928: LD_ADDR_EXP 48
5932: PUSH
5933: LD_INT 0
5935: ST_TO_ADDR
// sCargo := false ;
5936: LD_ADDR_EXP 51
5940: PUSH
5941: LD_INT 0
5943: ST_TO_ADDR
// sDLaser := false ;
5944: LD_ADDR_EXP 52
5948: PUSH
5949: LD_INT 0
5951: ST_TO_ADDR
// sExchange := false ;
5952: LD_ADDR_EXP 53
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// sFac := false ;
5960: LD_ADDR_EXP 54
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// sPower := false ;
5968: LD_ADDR_EXP 55
5972: PUSH
5973: LD_INT 0
5975: ST_TO_ADDR
// sRandom := false ;
5976: LD_ADDR_EXP 56
5980: PUSH
5981: LD_INT 0
5983: ST_TO_ADDR
// sShield := false ;
5984: LD_ADDR_EXP 57
5988: PUSH
5989: LD_INT 0
5991: ST_TO_ADDR
// sTime := false ;
5992: LD_ADDR_EXP 58
5996: PUSH
5997: LD_INT 0
5999: ST_TO_ADDR
// sTools := false ;
6000: LD_ADDR_EXP 59
6004: PUSH
6005: LD_INT 0
6007: ST_TO_ADDR
// sSold := false ;
6008: LD_ADDR_EXP 24
6012: PUSH
6013: LD_INT 0
6015: ST_TO_ADDR
// sDiff := false ;
6016: LD_ADDR_EXP 25
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// sFog := false ;
6024: LD_ADDR_EXP 28
6028: PUSH
6029: LD_INT 0
6031: ST_TO_ADDR
// sReset := false ;
6032: LD_ADDR_EXP 29
6036: PUSH
6037: LD_INT 0
6039: ST_TO_ADDR
// sSun := false ;
6040: LD_ADDR_EXP 30
6044: PUSH
6045: LD_INT 0
6047: ST_TO_ADDR
// sTiger := false ;
6048: LD_ADDR_EXP 26
6052: PUSH
6053: LD_INT 0
6055: ST_TO_ADDR
// sBomb := false ;
6056: LD_ADDR_EXP 27
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// sWound := false ;
6064: LD_ADDR_EXP 35
6068: PUSH
6069: LD_INT 0
6071: ST_TO_ADDR
// sBetray := false ;
6072: LD_ADDR_EXP 39
6076: PUSH
6077: LD_INT 0
6079: ST_TO_ADDR
// sContamin := false ;
6080: LD_ADDR_EXP 40
6084: PUSH
6085: LD_INT 0
6087: ST_TO_ADDR
// sOil := false ;
6088: LD_ADDR_EXP 42
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// sStu := false ;
6096: LD_ADDR_EXP 46
6100: PUSH
6101: LD_INT 0
6103: ST_TO_ADDR
// sBazooka := false ;
6104: LD_ADDR_EXP 49
6108: PUSH
6109: LD_INT 0
6111: ST_TO_ADDR
// sMortar := false ;
6112: LD_ADDR_EXP 50
6116: PUSH
6117: LD_INT 0
6119: ST_TO_ADDR
// sRanger := false ;
6120: LD_ADDR_EXP 60
6124: PUSH
6125: LD_INT 0
6127: ST_TO_ADDR
// sComputer := false ;
6128: LD_ADDR_EXP 61
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// s30 := false ;
6136: LD_ADDR_EXP 62
6140: PUSH
6141: LD_INT 0
6143: ST_TO_ADDR
// s60 := false ;
6144: LD_ADDR_EXP 63
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// end ;
6152: LD_VAR 0 1
6156: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
// result := [ ] ;
6166: LD_ADDR_VAR 0 2
6170: PUSH
6171: EMPTY
6172: ST_TO_ADDR
// if campaign_id = 1 then
6173: LD_OWVAR 69
6177: PUSH
6178: LD_INT 1
6180: EQUAL
6181: IFFALSE 9347
// begin case mission_number of 1 :
6183: LD_OWVAR 70
6187: PUSH
6188: LD_INT 1
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6272
6196: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6197: LD_ADDR_VAR 0 2
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: LD_INT 4
6207: PUSH
6208: LD_INT 11
6210: PUSH
6211: LD_INT 12
6213: PUSH
6214: LD_INT 15
6216: PUSH
6217: LD_INT 16
6219: PUSH
6220: LD_INT 22
6222: PUSH
6223: LD_INT 23
6225: PUSH
6226: LD_INT 26
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 101
6242: PUSH
6243: LD_INT 102
6245: PUSH
6246: LD_INT 106
6248: PUSH
6249: LD_INT 116
6251: PUSH
6252: LD_INT 117
6254: PUSH
6255: LD_INT 118
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: ST_TO_ADDR
6270: GO 9345
6272: LD_INT 2
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6364
6280: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6281: LD_ADDR_VAR 0 2
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 4
6291: PUSH
6292: LD_INT 11
6294: PUSH
6295: LD_INT 12
6297: PUSH
6298: LD_INT 15
6300: PUSH
6301: LD_INT 16
6303: PUSH
6304: LD_INT 22
6306: PUSH
6307: LD_INT 23
6309: PUSH
6310: LD_INT 26
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 101
6326: PUSH
6327: LD_INT 102
6329: PUSH
6330: LD_INT 105
6332: PUSH
6333: LD_INT 106
6335: PUSH
6336: LD_INT 108
6338: PUSH
6339: LD_INT 116
6341: PUSH
6342: LD_INT 117
6344: PUSH
6345: LD_INT 118
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: ST_TO_ADDR
6362: GO 9345
6364: LD_INT 3
6366: DOUBLE
6367: EQUAL
6368: IFTRUE 6372
6370: GO 6460
6372: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6373: LD_ADDR_VAR 0 2
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 4
6383: PUSH
6384: LD_INT 5
6386: PUSH
6387: LD_INT 11
6389: PUSH
6390: LD_INT 12
6392: PUSH
6393: LD_INT 15
6395: PUSH
6396: LD_INT 16
6398: PUSH
6399: LD_INT 22
6401: PUSH
6402: LD_INT 26
6404: PUSH
6405: LD_INT 36
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 101
6422: PUSH
6423: LD_INT 102
6425: PUSH
6426: LD_INT 105
6428: PUSH
6429: LD_INT 106
6431: PUSH
6432: LD_INT 108
6434: PUSH
6435: LD_INT 116
6437: PUSH
6438: LD_INT 117
6440: PUSH
6441: LD_INT 118
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: ST_TO_ADDR
6458: GO 9345
6460: LD_INT 4
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6564
6468: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 4
6479: PUSH
6480: LD_INT 5
6482: PUSH
6483: LD_INT 8
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: LD_INT 15
6494: PUSH
6495: LD_INT 16
6497: PUSH
6498: LD_INT 22
6500: PUSH
6501: LD_INT 23
6503: PUSH
6504: LD_INT 26
6506: PUSH
6507: LD_INT 36
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 101
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 105
6532: PUSH
6533: LD_INT 106
6535: PUSH
6536: LD_INT 108
6538: PUSH
6539: LD_INT 116
6541: PUSH
6542: LD_INT 117
6544: PUSH
6545: LD_INT 118
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: ST_TO_ADDR
6562: GO 9345
6564: LD_INT 5
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6684
6572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6573: LD_ADDR_VAR 0 2
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: LD_INT 5
6586: PUSH
6587: LD_INT 6
6589: PUSH
6590: LD_INT 8
6592: PUSH
6593: LD_INT 11
6595: PUSH
6596: LD_INT 12
6598: PUSH
6599: LD_INT 15
6601: PUSH
6602: LD_INT 16
6604: PUSH
6605: LD_INT 22
6607: PUSH
6608: LD_INT 23
6610: PUSH
6611: LD_INT 25
6613: PUSH
6614: LD_INT 26
6616: PUSH
6617: LD_INT 36
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 101
6638: PUSH
6639: LD_INT 102
6641: PUSH
6642: LD_INT 105
6644: PUSH
6645: LD_INT 106
6647: PUSH
6648: LD_INT 108
6650: PUSH
6651: LD_INT 109
6653: PUSH
6654: LD_INT 112
6656: PUSH
6657: LD_INT 116
6659: PUSH
6660: LD_INT 117
6662: PUSH
6663: LD_INT 118
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: ST_TO_ADDR
6682: GO 9345
6684: LD_INT 6
6686: DOUBLE
6687: EQUAL
6688: IFTRUE 6692
6690: GO 6824
6692: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6693: LD_ADDR_VAR 0 2
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: LD_INT 6
6709: PUSH
6710: LD_INT 8
6712: PUSH
6713: LD_INT 11
6715: PUSH
6716: LD_INT 12
6718: PUSH
6719: LD_INT 15
6721: PUSH
6722: LD_INT 16
6724: PUSH
6725: LD_INT 20
6727: PUSH
6728: LD_INT 21
6730: PUSH
6731: LD_INT 22
6733: PUSH
6734: LD_INT 23
6736: PUSH
6737: LD_INT 25
6739: PUSH
6740: LD_INT 26
6742: PUSH
6743: LD_INT 30
6745: PUSH
6746: LD_INT 31
6748: PUSH
6749: LD_INT 32
6751: PUSH
6752: LD_INT 36
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 101
6778: PUSH
6779: LD_INT 102
6781: PUSH
6782: LD_INT 105
6784: PUSH
6785: LD_INT 106
6787: PUSH
6788: LD_INT 108
6790: PUSH
6791: LD_INT 109
6793: PUSH
6794: LD_INT 112
6796: PUSH
6797: LD_INT 116
6799: PUSH
6800: LD_INT 117
6802: PUSH
6803: LD_INT 118
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: ST_TO_ADDR
6822: GO 9345
6824: LD_INT 7
6826: DOUBLE
6827: EQUAL
6828: IFTRUE 6832
6830: GO 6944
6832: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6833: LD_ADDR_VAR 0 2
6837: PUSH
6838: LD_INT 2
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: LD_INT 7
6849: PUSH
6850: LD_INT 11
6852: PUSH
6853: LD_INT 12
6855: PUSH
6856: LD_INT 15
6858: PUSH
6859: LD_INT 16
6861: PUSH
6862: LD_INT 20
6864: PUSH
6865: LD_INT 21
6867: PUSH
6868: LD_INT 22
6870: PUSH
6871: LD_INT 23
6873: PUSH
6874: LD_INT 25
6876: PUSH
6877: LD_INT 26
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 101
6898: PUSH
6899: LD_INT 102
6901: PUSH
6902: LD_INT 103
6904: PUSH
6905: LD_INT 105
6907: PUSH
6908: LD_INT 106
6910: PUSH
6911: LD_INT 108
6913: PUSH
6914: LD_INT 112
6916: PUSH
6917: LD_INT 116
6919: PUSH
6920: LD_INT 117
6922: PUSH
6923: LD_INT 118
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: ST_TO_ADDR
6942: GO 9345
6944: LD_INT 8
6946: DOUBLE
6947: EQUAL
6948: IFTRUE 6952
6950: GO 7092
6952: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6953: LD_ADDR_VAR 0 2
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: LD_INT 5
6966: PUSH
6967: LD_INT 6
6969: PUSH
6970: LD_INT 7
6972: PUSH
6973: LD_INT 8
6975: PUSH
6976: LD_INT 11
6978: PUSH
6979: LD_INT 12
6981: PUSH
6982: LD_INT 15
6984: PUSH
6985: LD_INT 16
6987: PUSH
6988: LD_INT 20
6990: PUSH
6991: LD_INT 21
6993: PUSH
6994: LD_INT 22
6996: PUSH
6997: LD_INT 23
6999: PUSH
7000: LD_INT 25
7002: PUSH
7003: LD_INT 26
7005: PUSH
7006: LD_INT 30
7008: PUSH
7009: LD_INT 31
7011: PUSH
7012: LD_INT 32
7014: PUSH
7015: LD_INT 36
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 101
7042: PUSH
7043: LD_INT 102
7045: PUSH
7046: LD_INT 103
7048: PUSH
7049: LD_INT 105
7051: PUSH
7052: LD_INT 106
7054: PUSH
7055: LD_INT 108
7057: PUSH
7058: LD_INT 109
7060: PUSH
7061: LD_INT 112
7063: PUSH
7064: LD_INT 116
7066: PUSH
7067: LD_INT 117
7069: PUSH
7070: LD_INT 118
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 9345
7092: LD_INT 9
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7248
7100: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7101: LD_ADDR_VAR 0 2
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: LD_INT 4
7111: PUSH
7112: LD_INT 5
7114: PUSH
7115: LD_INT 6
7117: PUSH
7118: LD_INT 7
7120: PUSH
7121: LD_INT 8
7123: PUSH
7124: LD_INT 11
7126: PUSH
7127: LD_INT 12
7129: PUSH
7130: LD_INT 15
7132: PUSH
7133: LD_INT 16
7135: PUSH
7136: LD_INT 20
7138: PUSH
7139: LD_INT 21
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_INT 23
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 26
7153: PUSH
7154: LD_INT 28
7156: PUSH
7157: LD_INT 30
7159: PUSH
7160: LD_INT 31
7162: PUSH
7163: LD_INT 32
7165: PUSH
7166: LD_INT 36
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 101
7194: PUSH
7195: LD_INT 102
7197: PUSH
7198: LD_INT 103
7200: PUSH
7201: LD_INT 105
7203: PUSH
7204: LD_INT 106
7206: PUSH
7207: LD_INT 108
7209: PUSH
7210: LD_INT 109
7212: PUSH
7213: LD_INT 112
7215: PUSH
7216: LD_INT 114
7218: PUSH
7219: LD_INT 116
7221: PUSH
7222: LD_INT 117
7224: PUSH
7225: LD_INT 118
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 9345
7248: LD_INT 10
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7452
7256: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 2
7264: PUSH
7265: LD_INT 4
7267: PUSH
7268: LD_INT 5
7270: PUSH
7271: LD_INT 6
7273: PUSH
7274: LD_INT 7
7276: PUSH
7277: LD_INT 8
7279: PUSH
7280: LD_INT 9
7282: PUSH
7283: LD_INT 10
7285: PUSH
7286: LD_INT 11
7288: PUSH
7289: LD_INT 12
7291: PUSH
7292: LD_INT 13
7294: PUSH
7295: LD_INT 14
7297: PUSH
7298: LD_INT 15
7300: PUSH
7301: LD_INT 16
7303: PUSH
7304: LD_INT 17
7306: PUSH
7307: LD_INT 18
7309: PUSH
7310: LD_INT 19
7312: PUSH
7313: LD_INT 20
7315: PUSH
7316: LD_INT 21
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 23
7324: PUSH
7325: LD_INT 24
7327: PUSH
7328: LD_INT 25
7330: PUSH
7331: LD_INT 26
7333: PUSH
7334: LD_INT 28
7336: PUSH
7337: LD_INT 30
7339: PUSH
7340: LD_INT 31
7342: PUSH
7343: LD_INT 32
7345: PUSH
7346: LD_INT 36
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 101
7382: PUSH
7383: LD_INT 102
7385: PUSH
7386: LD_INT 103
7388: PUSH
7389: LD_INT 104
7391: PUSH
7392: LD_INT 105
7394: PUSH
7395: LD_INT 106
7397: PUSH
7398: LD_INT 107
7400: PUSH
7401: LD_INT 108
7403: PUSH
7404: LD_INT 109
7406: PUSH
7407: LD_INT 110
7409: PUSH
7410: LD_INT 111
7412: PUSH
7413: LD_INT 112
7415: PUSH
7416: LD_INT 114
7418: PUSH
7419: LD_INT 116
7421: PUSH
7422: LD_INT 117
7424: PUSH
7425: LD_INT 118
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: ST_TO_ADDR
7450: GO 9345
7452: LD_INT 11
7454: DOUBLE
7455: EQUAL
7456: IFTRUE 7460
7458: GO 7664
7460: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7461: LD_ADDR_VAR 0 2
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 3
7471: PUSH
7472: LD_INT 4
7474: PUSH
7475: LD_INT 5
7477: PUSH
7478: LD_INT 6
7480: PUSH
7481: LD_INT 7
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: LD_INT 9
7489: PUSH
7490: LD_INT 10
7492: PUSH
7493: LD_INT 11
7495: PUSH
7496: LD_INT 12
7498: PUSH
7499: LD_INT 13
7501: PUSH
7502: LD_INT 14
7504: PUSH
7505: LD_INT 15
7507: PUSH
7508: LD_INT 16
7510: PUSH
7511: LD_INT 17
7513: PUSH
7514: LD_INT 18
7516: PUSH
7517: LD_INT 19
7519: PUSH
7520: LD_INT 20
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: LD_INT 22
7528: PUSH
7529: LD_INT 23
7531: PUSH
7532: LD_INT 24
7534: PUSH
7535: LD_INT 25
7537: PUSH
7538: LD_INT 26
7540: PUSH
7541: LD_INT 28
7543: PUSH
7544: LD_INT 30
7546: PUSH
7547: LD_INT 31
7549: PUSH
7550: LD_INT 32
7552: PUSH
7553: LD_INT 34
7555: PUSH
7556: LD_INT 36
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 101
7594: PUSH
7595: LD_INT 102
7597: PUSH
7598: LD_INT 103
7600: PUSH
7601: LD_INT 104
7603: PUSH
7604: LD_INT 105
7606: PUSH
7607: LD_INT 106
7609: PUSH
7610: LD_INT 107
7612: PUSH
7613: LD_INT 108
7615: PUSH
7616: LD_INT 109
7618: PUSH
7619: LD_INT 110
7621: PUSH
7622: LD_INT 111
7624: PUSH
7625: LD_INT 112
7627: PUSH
7628: LD_INT 114
7630: PUSH
7631: LD_INT 116
7633: PUSH
7634: LD_INT 117
7636: PUSH
7637: LD_INT 118
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: ST_TO_ADDR
7662: GO 9345
7664: LD_INT 12
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7892
7672: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7673: LD_ADDR_VAR 0 2
7677: PUSH
7678: LD_INT 1
7680: PUSH
7681: LD_INT 2
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 4
7689: PUSH
7690: LD_INT 5
7692: PUSH
7693: LD_INT 6
7695: PUSH
7696: LD_INT 7
7698: PUSH
7699: LD_INT 8
7701: PUSH
7702: LD_INT 9
7704: PUSH
7705: LD_INT 10
7707: PUSH
7708: LD_INT 11
7710: PUSH
7711: LD_INT 12
7713: PUSH
7714: LD_INT 13
7716: PUSH
7717: LD_INT 14
7719: PUSH
7720: LD_INT 15
7722: PUSH
7723: LD_INT 16
7725: PUSH
7726: LD_INT 17
7728: PUSH
7729: LD_INT 18
7731: PUSH
7732: LD_INT 19
7734: PUSH
7735: LD_INT 20
7737: PUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 22
7743: PUSH
7744: LD_INT 23
7746: PUSH
7747: LD_INT 24
7749: PUSH
7750: LD_INT 25
7752: PUSH
7753: LD_INT 26
7755: PUSH
7756: LD_INT 27
7758: PUSH
7759: LD_INT 28
7761: PUSH
7762: LD_INT 30
7764: PUSH
7765: LD_INT 31
7767: PUSH
7768: LD_INT 32
7770: PUSH
7771: LD_INT 33
7773: PUSH
7774: LD_INT 34
7776: PUSH
7777: LD_INT 36
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 101
7818: PUSH
7819: LD_INT 102
7821: PUSH
7822: LD_INT 103
7824: PUSH
7825: LD_INT 104
7827: PUSH
7828: LD_INT 105
7830: PUSH
7831: LD_INT 106
7833: PUSH
7834: LD_INT 107
7836: PUSH
7837: LD_INT 108
7839: PUSH
7840: LD_INT 109
7842: PUSH
7843: LD_INT 110
7845: PUSH
7846: LD_INT 111
7848: PUSH
7849: LD_INT 112
7851: PUSH
7852: LD_INT 113
7854: PUSH
7855: LD_INT 114
7857: PUSH
7858: LD_INT 116
7860: PUSH
7861: LD_INT 117
7863: PUSH
7864: LD_INT 118
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: ST_TO_ADDR
7890: GO 9345
7892: LD_INT 13
7894: DOUBLE
7895: EQUAL
7896: IFTRUE 7900
7898: GO 8108
7900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 1
7908: PUSH
7909: LD_INT 2
7911: PUSH
7912: LD_INT 3
7914: PUSH
7915: LD_INT 4
7917: PUSH
7918: LD_INT 5
7920: PUSH
7921: LD_INT 8
7923: PUSH
7924: LD_INT 9
7926: PUSH
7927: LD_INT 10
7929: PUSH
7930: LD_INT 11
7932: PUSH
7933: LD_INT 12
7935: PUSH
7936: LD_INT 14
7938: PUSH
7939: LD_INT 15
7941: PUSH
7942: LD_INT 16
7944: PUSH
7945: LD_INT 17
7947: PUSH
7948: LD_INT 18
7950: PUSH
7951: LD_INT 19
7953: PUSH
7954: LD_INT 20
7956: PUSH
7957: LD_INT 21
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_INT 23
7965: PUSH
7966: LD_INT 24
7968: PUSH
7969: LD_INT 25
7971: PUSH
7972: LD_INT 26
7974: PUSH
7975: LD_INT 27
7977: PUSH
7978: LD_INT 28
7980: PUSH
7981: LD_INT 30
7983: PUSH
7984: LD_INT 31
7986: PUSH
7987: LD_INT 32
7989: PUSH
7990: LD_INT 33
7992: PUSH
7993: LD_INT 34
7995: PUSH
7996: LD_INT 36
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 101
8034: PUSH
8035: LD_INT 102
8037: PUSH
8038: LD_INT 103
8040: PUSH
8041: LD_INT 104
8043: PUSH
8044: LD_INT 105
8046: PUSH
8047: LD_INT 106
8049: PUSH
8050: LD_INT 107
8052: PUSH
8053: LD_INT 108
8055: PUSH
8056: LD_INT 109
8058: PUSH
8059: LD_INT 110
8061: PUSH
8062: LD_INT 111
8064: PUSH
8065: LD_INT 112
8067: PUSH
8068: LD_INT 113
8070: PUSH
8071: LD_INT 114
8073: PUSH
8074: LD_INT 116
8076: PUSH
8077: LD_INT 117
8079: PUSH
8080: LD_INT 118
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: ST_TO_ADDR
8106: GO 9345
8108: LD_INT 14
8110: DOUBLE
8111: EQUAL
8112: IFTRUE 8116
8114: GO 8340
8116: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8117: LD_ADDR_VAR 0 2
8121: PUSH
8122: LD_INT 1
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: LD_INT 3
8130: PUSH
8131: LD_INT 4
8133: PUSH
8134: LD_INT 5
8136: PUSH
8137: LD_INT 6
8139: PUSH
8140: LD_INT 7
8142: PUSH
8143: LD_INT 8
8145: PUSH
8146: LD_INT 9
8148: PUSH
8149: LD_INT 10
8151: PUSH
8152: LD_INT 11
8154: PUSH
8155: LD_INT 12
8157: PUSH
8158: LD_INT 13
8160: PUSH
8161: LD_INT 14
8163: PUSH
8164: LD_INT 15
8166: PUSH
8167: LD_INT 16
8169: PUSH
8170: LD_INT 17
8172: PUSH
8173: LD_INT 18
8175: PUSH
8176: LD_INT 19
8178: PUSH
8179: LD_INT 20
8181: PUSH
8182: LD_INT 21
8184: PUSH
8185: LD_INT 22
8187: PUSH
8188: LD_INT 23
8190: PUSH
8191: LD_INT 24
8193: PUSH
8194: LD_INT 25
8196: PUSH
8197: LD_INT 26
8199: PUSH
8200: LD_INT 27
8202: PUSH
8203: LD_INT 28
8205: PUSH
8206: LD_INT 29
8208: PUSH
8209: LD_INT 30
8211: PUSH
8212: LD_INT 31
8214: PUSH
8215: LD_INT 32
8217: PUSH
8218: LD_INT 33
8220: PUSH
8221: LD_INT 34
8223: PUSH
8224: LD_INT 36
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 101
8266: PUSH
8267: LD_INT 102
8269: PUSH
8270: LD_INT 103
8272: PUSH
8273: LD_INT 104
8275: PUSH
8276: LD_INT 105
8278: PUSH
8279: LD_INT 106
8281: PUSH
8282: LD_INT 107
8284: PUSH
8285: LD_INT 108
8287: PUSH
8288: LD_INT 109
8290: PUSH
8291: LD_INT 110
8293: PUSH
8294: LD_INT 111
8296: PUSH
8297: LD_INT 112
8299: PUSH
8300: LD_INT 113
8302: PUSH
8303: LD_INT 114
8305: PUSH
8306: LD_INT 116
8308: PUSH
8309: LD_INT 117
8311: PUSH
8312: LD_INT 118
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: ST_TO_ADDR
8338: GO 9345
8340: LD_INT 15
8342: DOUBLE
8343: EQUAL
8344: IFTRUE 8348
8346: GO 8572
8348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8349: LD_ADDR_VAR 0 2
8353: PUSH
8354: LD_INT 1
8356: PUSH
8357: LD_INT 2
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 4
8365: PUSH
8366: LD_INT 5
8368: PUSH
8369: LD_INT 6
8371: PUSH
8372: LD_INT 7
8374: PUSH
8375: LD_INT 8
8377: PUSH
8378: LD_INT 9
8380: PUSH
8381: LD_INT 10
8383: PUSH
8384: LD_INT 11
8386: PUSH
8387: LD_INT 12
8389: PUSH
8390: LD_INT 13
8392: PUSH
8393: LD_INT 14
8395: PUSH
8396: LD_INT 15
8398: PUSH
8399: LD_INT 16
8401: PUSH
8402: LD_INT 17
8404: PUSH
8405: LD_INT 18
8407: PUSH
8408: LD_INT 19
8410: PUSH
8411: LD_INT 20
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 23
8422: PUSH
8423: LD_INT 24
8425: PUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 26
8431: PUSH
8432: LD_INT 27
8434: PUSH
8435: LD_INT 28
8437: PUSH
8438: LD_INT 29
8440: PUSH
8441: LD_INT 30
8443: PUSH
8444: LD_INT 31
8446: PUSH
8447: LD_INT 32
8449: PUSH
8450: LD_INT 33
8452: PUSH
8453: LD_INT 34
8455: PUSH
8456: LD_INT 36
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 101
8498: PUSH
8499: LD_INT 102
8501: PUSH
8502: LD_INT 103
8504: PUSH
8505: LD_INT 104
8507: PUSH
8508: LD_INT 105
8510: PUSH
8511: LD_INT 106
8513: PUSH
8514: LD_INT 107
8516: PUSH
8517: LD_INT 108
8519: PUSH
8520: LD_INT 109
8522: PUSH
8523: LD_INT 110
8525: PUSH
8526: LD_INT 111
8528: PUSH
8529: LD_INT 112
8531: PUSH
8532: LD_INT 113
8534: PUSH
8535: LD_INT 114
8537: PUSH
8538: LD_INT 116
8540: PUSH
8541: LD_INT 117
8543: PUSH
8544: LD_INT 118
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: ST_TO_ADDR
8570: GO 9345
8572: LD_INT 16
8574: DOUBLE
8575: EQUAL
8576: IFTRUE 8580
8578: GO 8716
8580: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8581: LD_ADDR_VAR 0 2
8585: PUSH
8586: LD_INT 2
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 5
8594: PUSH
8595: LD_INT 7
8597: PUSH
8598: LD_INT 11
8600: PUSH
8601: LD_INT 12
8603: PUSH
8604: LD_INT 15
8606: PUSH
8607: LD_INT 16
8609: PUSH
8610: LD_INT 20
8612: PUSH
8613: LD_INT 21
8615: PUSH
8616: LD_INT 22
8618: PUSH
8619: LD_INT 23
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 26
8627: PUSH
8628: LD_INT 30
8630: PUSH
8631: LD_INT 31
8633: PUSH
8634: LD_INT 32
8636: PUSH
8637: LD_INT 33
8639: PUSH
8640: LD_INT 34
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 101
8666: PUSH
8667: LD_INT 102
8669: PUSH
8670: LD_INT 103
8672: PUSH
8673: LD_INT 106
8675: PUSH
8676: LD_INT 108
8678: PUSH
8679: LD_INT 112
8681: PUSH
8682: LD_INT 113
8684: PUSH
8685: LD_INT 114
8687: PUSH
8688: LD_INT 116
8690: PUSH
8691: LD_INT 117
8693: PUSH
8694: LD_INT 118
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: ST_TO_ADDR
8714: GO 9345
8716: LD_INT 17
8718: DOUBLE
8719: EQUAL
8720: IFTRUE 8724
8722: GO 8948
8724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8725: LD_ADDR_VAR 0 2
8729: PUSH
8730: LD_INT 1
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: LD_INT 3
8738: PUSH
8739: LD_INT 4
8741: PUSH
8742: LD_INT 5
8744: PUSH
8745: LD_INT 6
8747: PUSH
8748: LD_INT 7
8750: PUSH
8751: LD_INT 8
8753: PUSH
8754: LD_INT 9
8756: PUSH
8757: LD_INT 10
8759: PUSH
8760: LD_INT 11
8762: PUSH
8763: LD_INT 12
8765: PUSH
8766: LD_INT 13
8768: PUSH
8769: LD_INT 14
8771: PUSH
8772: LD_INT 15
8774: PUSH
8775: LD_INT 16
8777: PUSH
8778: LD_INT 17
8780: PUSH
8781: LD_INT 18
8783: PUSH
8784: LD_INT 19
8786: PUSH
8787: LD_INT 20
8789: PUSH
8790: LD_INT 21
8792: PUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 23
8798: PUSH
8799: LD_INT 24
8801: PUSH
8802: LD_INT 25
8804: PUSH
8805: LD_INT 26
8807: PUSH
8808: LD_INT 27
8810: PUSH
8811: LD_INT 28
8813: PUSH
8814: LD_INT 29
8816: PUSH
8817: LD_INT 30
8819: PUSH
8820: LD_INT 31
8822: PUSH
8823: LD_INT 32
8825: PUSH
8826: LD_INT 33
8828: PUSH
8829: LD_INT 34
8831: PUSH
8832: LD_INT 36
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 101
8874: PUSH
8875: LD_INT 102
8877: PUSH
8878: LD_INT 103
8880: PUSH
8881: LD_INT 104
8883: PUSH
8884: LD_INT 105
8886: PUSH
8887: LD_INT 106
8889: PUSH
8890: LD_INT 107
8892: PUSH
8893: LD_INT 108
8895: PUSH
8896: LD_INT 109
8898: PUSH
8899: LD_INT 110
8901: PUSH
8902: LD_INT 111
8904: PUSH
8905: LD_INT 112
8907: PUSH
8908: LD_INT 113
8910: PUSH
8911: LD_INT 114
8913: PUSH
8914: LD_INT 116
8916: PUSH
8917: LD_INT 117
8919: PUSH
8920: LD_INT 118
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: ST_TO_ADDR
8946: GO 9345
8948: LD_INT 18
8950: DOUBLE
8951: EQUAL
8952: IFTRUE 8956
8954: GO 9104
8956: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8957: LD_ADDR_VAR 0 2
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: LD_INT 4
8967: PUSH
8968: LD_INT 5
8970: PUSH
8971: LD_INT 7
8973: PUSH
8974: LD_INT 11
8976: PUSH
8977: LD_INT 12
8979: PUSH
8980: LD_INT 15
8982: PUSH
8983: LD_INT 16
8985: PUSH
8986: LD_INT 20
8988: PUSH
8989: LD_INT 21
8991: PUSH
8992: LD_INT 22
8994: PUSH
8995: LD_INT 23
8997: PUSH
8998: LD_INT 25
9000: PUSH
9001: LD_INT 26
9003: PUSH
9004: LD_INT 30
9006: PUSH
9007: LD_INT 31
9009: PUSH
9010: LD_INT 32
9012: PUSH
9013: LD_INT 33
9015: PUSH
9016: LD_INT 34
9018: PUSH
9019: LD_INT 35
9021: PUSH
9022: LD_INT 36
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 101
9050: PUSH
9051: LD_INT 102
9053: PUSH
9054: LD_INT 103
9056: PUSH
9057: LD_INT 106
9059: PUSH
9060: LD_INT 108
9062: PUSH
9063: LD_INT 112
9065: PUSH
9066: LD_INT 113
9068: PUSH
9069: LD_INT 114
9071: PUSH
9072: LD_INT 115
9074: PUSH
9075: LD_INT 116
9077: PUSH
9078: LD_INT 117
9080: PUSH
9081: LD_INT 118
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: ST_TO_ADDR
9102: GO 9345
9104: LD_INT 19
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9344
9112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: LD_INT 2
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 8
9141: PUSH
9142: LD_INT 9
9144: PUSH
9145: LD_INT 10
9147: PUSH
9148: LD_INT 11
9150: PUSH
9151: LD_INT 12
9153: PUSH
9154: LD_INT 13
9156: PUSH
9157: LD_INT 14
9159: PUSH
9160: LD_INT 15
9162: PUSH
9163: LD_INT 16
9165: PUSH
9166: LD_INT 17
9168: PUSH
9169: LD_INT 18
9171: PUSH
9172: LD_INT 19
9174: PUSH
9175: LD_INT 20
9177: PUSH
9178: LD_INT 21
9180: PUSH
9181: LD_INT 22
9183: PUSH
9184: LD_INT 23
9186: PUSH
9187: LD_INT 24
9189: PUSH
9190: LD_INT 25
9192: PUSH
9193: LD_INT 26
9195: PUSH
9196: LD_INT 27
9198: PUSH
9199: LD_INT 28
9201: PUSH
9202: LD_INT 29
9204: PUSH
9205: LD_INT 30
9207: PUSH
9208: LD_INT 31
9210: PUSH
9211: LD_INT 32
9213: PUSH
9214: LD_INT 33
9216: PUSH
9217: LD_INT 34
9219: PUSH
9220: LD_INT 35
9222: PUSH
9223: LD_INT 36
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 101
9266: PUSH
9267: LD_INT 102
9269: PUSH
9270: LD_INT 103
9272: PUSH
9273: LD_INT 104
9275: PUSH
9276: LD_INT 105
9278: PUSH
9279: LD_INT 106
9281: PUSH
9282: LD_INT 107
9284: PUSH
9285: LD_INT 108
9287: PUSH
9288: LD_INT 109
9290: PUSH
9291: LD_INT 110
9293: PUSH
9294: LD_INT 111
9296: PUSH
9297: LD_INT 112
9299: PUSH
9300: LD_INT 113
9302: PUSH
9303: LD_INT 114
9305: PUSH
9306: LD_INT 115
9308: PUSH
9309: LD_INT 116
9311: PUSH
9312: LD_INT 117
9314: PUSH
9315: LD_INT 118
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: ST_TO_ADDR
9342: GO 9345
9344: POP
// end else
9345: GO 9576
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: LD_INT 1
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: LD_INT 3
9360: PUSH
9361: LD_INT 4
9363: PUSH
9364: LD_INT 5
9366: PUSH
9367: LD_INT 6
9369: PUSH
9370: LD_INT 7
9372: PUSH
9373: LD_INT 8
9375: PUSH
9376: LD_INT 9
9378: PUSH
9379: LD_INT 10
9381: PUSH
9382: LD_INT 11
9384: PUSH
9385: LD_INT 12
9387: PUSH
9388: LD_INT 13
9390: PUSH
9391: LD_INT 14
9393: PUSH
9394: LD_INT 15
9396: PUSH
9397: LD_INT 16
9399: PUSH
9400: LD_INT 17
9402: PUSH
9403: LD_INT 18
9405: PUSH
9406: LD_INT 19
9408: PUSH
9409: LD_INT 20
9411: PUSH
9412: LD_INT 21
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 23
9420: PUSH
9421: LD_INT 24
9423: PUSH
9424: LD_INT 25
9426: PUSH
9427: LD_INT 26
9429: PUSH
9430: LD_INT 27
9432: PUSH
9433: LD_INT 28
9435: PUSH
9436: LD_INT 29
9438: PUSH
9439: LD_INT 30
9441: PUSH
9442: LD_INT 31
9444: PUSH
9445: LD_INT 32
9447: PUSH
9448: LD_INT 33
9450: PUSH
9451: LD_INT 34
9453: PUSH
9454: LD_INT 35
9456: PUSH
9457: LD_INT 36
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 101
9500: PUSH
9501: LD_INT 102
9503: PUSH
9504: LD_INT 103
9506: PUSH
9507: LD_INT 104
9509: PUSH
9510: LD_INT 105
9512: PUSH
9513: LD_INT 106
9515: PUSH
9516: LD_INT 107
9518: PUSH
9519: LD_INT 108
9521: PUSH
9522: LD_INT 109
9524: PUSH
9525: LD_INT 110
9527: PUSH
9528: LD_INT 111
9530: PUSH
9531: LD_INT 112
9533: PUSH
9534: LD_INT 113
9536: PUSH
9537: LD_INT 114
9539: PUSH
9540: LD_INT 115
9542: PUSH
9543: LD_INT 116
9545: PUSH
9546: LD_INT 117
9548: PUSH
9549: LD_INT 118
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: ST_TO_ADDR
// if result then
9576: LD_VAR 0 2
9580: IFFALSE 10366
// begin normal :=  ;
9582: LD_ADDR_VAR 0 5
9586: PUSH
9587: LD_STRING 
9589: ST_TO_ADDR
// hardcore :=  ;
9590: LD_ADDR_VAR 0 6
9594: PUSH
9595: LD_STRING 
9597: ST_TO_ADDR
// active :=  ;
9598: LD_ADDR_VAR 0 7
9602: PUSH
9603: LD_STRING 
9605: ST_TO_ADDR
// for i = 1 to normalCounter do
9606: LD_ADDR_VAR 0 8
9610: PUSH
9611: DOUBLE
9612: LD_INT 1
9614: DEC
9615: ST_TO_ADDR
9616: LD_EXP 8
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9723
// begin tmp := 0 ;
9624: LD_ADDR_VAR 0 3
9628: PUSH
9629: LD_STRING 0
9631: ST_TO_ADDR
// if result [ 1 ] then
9632: LD_VAR 0 2
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: IFFALSE 9705
// if result [ 1 ] [ 1 ] = i then
9642: LD_VAR 0 2
9646: PUSH
9647: LD_INT 1
9649: ARRAY
9650: PUSH
9651: LD_INT 1
9653: ARRAY
9654: PUSH
9655: LD_VAR 0 8
9659: EQUAL
9660: IFFALSE 9705
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9662: LD_ADDR_VAR 0 2
9666: PUSH
9667: LD_VAR 0 2
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: LD_VAR 0 2
9679: PUSH
9680: LD_INT 1
9682: ARRAY
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 3
9691: PPUSH
9692: CALL_OW 1
9696: ST_TO_ADDR
// tmp := 1 ;
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: LD_STRING 1
9704: ST_TO_ADDR
// end ; normal := normal & tmp ;
9705: LD_ADDR_VAR 0 5
9709: PUSH
9710: LD_VAR 0 5
9714: PUSH
9715: LD_VAR 0 3
9719: STR
9720: ST_TO_ADDR
// end ;
9721: GO 9621
9723: POP
9724: POP
// for i = 1 to hardcoreCounter do
9725: LD_ADDR_VAR 0 8
9729: PUSH
9730: DOUBLE
9731: LD_INT 1
9733: DEC
9734: ST_TO_ADDR
9735: LD_EXP 9
9739: PUSH
9740: FOR_TO
9741: IFFALSE 9846
// begin tmp := 0 ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: LD_STRING 0
9750: ST_TO_ADDR
// if result [ 2 ] then
9751: LD_VAR 0 2
9755: PUSH
9756: LD_INT 2
9758: ARRAY
9759: IFFALSE 9828
// if result [ 2 ] [ 1 ] = 100 + i then
9761: LD_VAR 0 2
9765: PUSH
9766: LD_INT 2
9768: ARRAY
9769: PUSH
9770: LD_INT 1
9772: ARRAY
9773: PUSH
9774: LD_INT 100
9776: PUSH
9777: LD_VAR 0 8
9781: PLUS
9782: EQUAL
9783: IFFALSE 9828
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9785: LD_ADDR_VAR 0 2
9789: PUSH
9790: LD_VAR 0 2
9794: PPUSH
9795: LD_INT 2
9797: PPUSH
9798: LD_VAR 0 2
9802: PUSH
9803: LD_INT 2
9805: ARRAY
9806: PPUSH
9807: LD_INT 1
9809: PPUSH
9810: CALL_OW 3
9814: PPUSH
9815: CALL_OW 1
9819: ST_TO_ADDR
// tmp := 1 ;
9820: LD_ADDR_VAR 0 3
9824: PUSH
9825: LD_STRING 1
9827: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9828: LD_ADDR_VAR 0 6
9832: PUSH
9833: LD_VAR 0 6
9837: PUSH
9838: LD_VAR 0 3
9842: STR
9843: ST_TO_ADDR
// end ;
9844: GO 9740
9846: POP
9847: POP
// if isGameLoad then
9848: LD_VAR 0 1
9852: IFFALSE 10327
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9854: LD_ADDR_VAR 0 4
9858: PUSH
9859: LD_EXP 12
9863: PUSH
9864: LD_EXP 11
9868: PUSH
9869: LD_EXP 13
9873: PUSH
9874: LD_EXP 10
9878: PUSH
9879: LD_EXP 14
9883: PUSH
9884: LD_EXP 15
9888: PUSH
9889: LD_EXP 16
9893: PUSH
9894: LD_EXP 17
9898: PUSH
9899: LD_EXP 18
9903: PUSH
9904: LD_EXP 19
9908: PUSH
9909: LD_EXP 20
9913: PUSH
9914: LD_EXP 21
9918: PUSH
9919: LD_EXP 22
9923: PUSH
9924: LD_EXP 23
9928: PUSH
9929: LD_EXP 31
9933: PUSH
9934: LD_EXP 32
9938: PUSH
9939: LD_EXP 33
9943: PUSH
9944: LD_EXP 34
9948: PUSH
9949: LD_EXP 36
9953: PUSH
9954: LD_EXP 37
9958: PUSH
9959: LD_EXP 38
9963: PUSH
9964: LD_EXP 41
9968: PUSH
9969: LD_EXP 43
9973: PUSH
9974: LD_EXP 44
9978: PUSH
9979: LD_EXP 45
9983: PUSH
9984: LD_EXP 47
9988: PUSH
9989: LD_EXP 48
9993: PUSH
9994: LD_EXP 51
9998: PUSH
9999: LD_EXP 52
10003: PUSH
10004: LD_EXP 53
10008: PUSH
10009: LD_EXP 54
10013: PUSH
10014: LD_EXP 55
10018: PUSH
10019: LD_EXP 56
10023: PUSH
10024: LD_EXP 57
10028: PUSH
10029: LD_EXP 58
10033: PUSH
10034: LD_EXP 59
10038: PUSH
10039: LD_EXP 24
10043: PUSH
10044: LD_EXP 25
10048: PUSH
10049: LD_EXP 28
10053: PUSH
10054: LD_EXP 29
10058: PUSH
10059: LD_EXP 30
10063: PUSH
10064: LD_EXP 26
10068: PUSH
10069: LD_EXP 27
10073: PUSH
10074: LD_EXP 35
10078: PUSH
10079: LD_EXP 39
10083: PUSH
10084: LD_EXP 40
10088: PUSH
10089: LD_EXP 42
10093: PUSH
10094: LD_EXP 46
10098: PUSH
10099: LD_EXP 49
10103: PUSH
10104: LD_EXP 50
10108: PUSH
10109: LD_EXP 60
10113: PUSH
10114: LD_EXP 61
10118: PUSH
10119: LD_EXP 62
10123: PUSH
10124: LD_EXP 63
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: ST_TO_ADDR
// tmp :=  ;
10185: LD_ADDR_VAR 0 3
10189: PUSH
10190: LD_STRING 
10192: ST_TO_ADDR
// for i = 1 to normalCounter do
10193: LD_ADDR_VAR 0 8
10197: PUSH
10198: DOUBLE
10199: LD_INT 1
10201: DEC
10202: ST_TO_ADDR
10203: LD_EXP 8
10207: PUSH
10208: FOR_TO
10209: IFFALSE 10245
// begin if flags [ i ] then
10211: LD_VAR 0 4
10215: PUSH
10216: LD_VAR 0 8
10220: ARRAY
10221: IFFALSE 10243
// tmp := tmp & i & ; ;
10223: LD_ADDR_VAR 0 3
10227: PUSH
10228: LD_VAR 0 3
10232: PUSH
10233: LD_VAR 0 8
10237: STR
10238: PUSH
10239: LD_STRING ;
10241: STR
10242: ST_TO_ADDR
// end ;
10243: GO 10208
10245: POP
10246: POP
// for i = 1 to hardcoreCounter do
10247: LD_ADDR_VAR 0 8
10251: PUSH
10252: DOUBLE
10253: LD_INT 1
10255: DEC
10256: ST_TO_ADDR
10257: LD_EXP 9
10261: PUSH
10262: FOR_TO
10263: IFFALSE 10309
// begin if flags [ normalCounter + i ] then
10265: LD_VAR 0 4
10269: PUSH
10270: LD_EXP 8
10274: PUSH
10275: LD_VAR 0 8
10279: PLUS
10280: ARRAY
10281: IFFALSE 10307
// tmp := tmp & ( 100 + i ) & ; ;
10283: LD_ADDR_VAR 0 3
10287: PUSH
10288: LD_VAR 0 3
10292: PUSH
10293: LD_INT 100
10295: PUSH
10296: LD_VAR 0 8
10300: PLUS
10301: STR
10302: PUSH
10303: LD_STRING ;
10305: STR
10306: ST_TO_ADDR
// end ;
10307: GO 10262
10309: POP
10310: POP
// if tmp then
10311: LD_VAR 0 3
10315: IFFALSE 10327
// active := tmp ;
10317: LD_ADDR_VAR 0 7
10321: PUSH
10322: LD_VAR 0 3
10326: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10327: LD_STRING getStreamItemsFromMission("
10329: PUSH
10330: LD_VAR 0 5
10334: STR
10335: PUSH
10336: LD_STRING ","
10338: STR
10339: PUSH
10340: LD_VAR 0 6
10344: STR
10345: PUSH
10346: LD_STRING ","
10348: STR
10349: PUSH
10350: LD_VAR 0 7
10354: STR
10355: PUSH
10356: LD_STRING ")
10358: STR
10359: PPUSH
10360: CALL_OW 559
// end else
10364: GO 10373
// ToLua ( getStreamItemsFromMission("","","") ) ;
10366: LD_STRING getStreamItemsFromMission("","","")
10368: PPUSH
10369: CALL_OW 559
// end ;
10373: LD_VAR 0 2
10377: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10378: LD_EXP 7
10382: PUSH
10383: LD_EXP 12
10387: AND
10388: IFFALSE 10512
10390: GO 10392
10392: DISABLE
10393: LD_INT 0
10395: PPUSH
10396: PPUSH
// begin enable ;
10397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_INT 22
10405: PUSH
10406: LD_OWVAR 2
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: LD_INT 34
10420: PUSH
10421: LD_INT 7
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 34
10430: PUSH
10431: LD_INT 45
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 34
10440: PUSH
10441: LD_INT 28
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 34
10450: PUSH
10451: LD_INT 47
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PPUSH
10469: CALL_OW 69
10473: ST_TO_ADDR
// if not tmp then
10474: LD_VAR 0 2
10478: NOT
10479: IFFALSE 10483
// exit ;
10481: GO 10512
// for i in tmp do
10483: LD_ADDR_VAR 0 1
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10510
// begin SetLives ( i , 0 ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 0
10503: PPUSH
10504: CALL_OW 234
// end ;
10508: GO 10493
10510: POP
10511: POP
// end ;
10512: PPOPN 2
10514: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10515: LD_EXP 7
10519: PUSH
10520: LD_EXP 13
10524: AND
10525: IFFALSE 10609
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
// begin enable ;
10534: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_INT 22
10542: PUSH
10543: LD_OWVAR 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 32
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PPUSH
10566: CALL_OW 69
10570: ST_TO_ADDR
// if not tmp then
10571: LD_VAR 0 2
10575: NOT
10576: IFFALSE 10580
// exit ;
10578: GO 10609
// for i in tmp do
10580: LD_ADDR_VAR 0 1
10584: PUSH
10585: LD_VAR 0 2
10589: PUSH
10590: FOR_IN
10591: IFFALSE 10607
// begin SetLives ( i , 0 ) ;
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_INT 0
10600: PPUSH
10601: CALL_OW 234
// end ;
10605: GO 10590
10607: POP
10608: POP
// end ;
10609: PPOPN 2
10611: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10612: LD_EXP 7
10616: PUSH
10617: LD_EXP 10
10621: AND
10622: IFFALSE 10715
10624: GO 10626
10626: DISABLE
10627: LD_INT 0
10629: PPUSH
// begin enable ;
10630: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10631: LD_ADDR_VAR 0 1
10635: PUSH
10636: LD_INT 22
10638: PUSH
10639: LD_OWVAR 2
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: LD_INT 25
10653: PUSH
10654: LD_INT 5
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 25
10663: PUSH
10664: LD_INT 9
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 8
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 69
10695: PUSH
10696: FOR_IN
10697: IFFALSE 10713
// begin SetClass ( i , 1 ) ;
10699: LD_VAR 0 1
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 336
// end ;
10711: GO 10696
10713: POP
10714: POP
// end ;
10715: PPOPN 1
10717: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10718: LD_EXP 7
10722: PUSH
10723: LD_EXP 11
10727: AND
10728: PUSH
10729: LD_OWVAR 65
10733: PUSH
10734: LD_INT 7
10736: LESS
10737: AND
10738: IFFALSE 10752
10740: GO 10742
10742: DISABLE
// begin enable ;
10743: ENABLE
// game_speed := 7 ;
10744: LD_ADDR_OWVAR 65
10748: PUSH
10749: LD_INT 7
10751: ST_TO_ADDR
// end ;
10752: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10753: LD_EXP 7
10757: PUSH
10758: LD_EXP 14
10762: AND
10763: IFFALSE 10965
10765: GO 10767
10767: DISABLE
10768: LD_INT 0
10770: PPUSH
10771: PPUSH
10772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10773: LD_ADDR_VAR 0 3
10777: PUSH
10778: LD_INT 81
10780: PUSH
10781: LD_OWVAR 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 21
10792: PUSH
10793: LD_INT 1
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PPUSH
10804: CALL_OW 69
10808: ST_TO_ADDR
// if not tmp then
10809: LD_VAR 0 3
10813: NOT
10814: IFFALSE 10818
// exit ;
10816: GO 10965
// if tmp > 5 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 5
10825: GREATER
10826: IFFALSE 10838
// k := 5 else
10828: LD_ADDR_VAR 0 2
10832: PUSH
10833: LD_INT 5
10835: ST_TO_ADDR
10836: GO 10848
// k := tmp ;
10838: LD_ADDR_VAR 0 2
10842: PUSH
10843: LD_VAR 0 3
10847: ST_TO_ADDR
// for i := 1 to k do
10848: LD_ADDR_VAR 0 1
10852: PUSH
10853: DOUBLE
10854: LD_INT 1
10856: DEC
10857: ST_TO_ADDR
10858: LD_VAR 0 2
10862: PUSH
10863: FOR_TO
10864: IFFALSE 10963
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10866: LD_VAR 0 3
10870: PUSH
10871: LD_VAR 0 1
10875: ARRAY
10876: PPUSH
10877: LD_VAR 0 1
10881: PUSH
10882: LD_INT 4
10884: MOD
10885: PUSH
10886: LD_INT 1
10888: PLUS
10889: PPUSH
10890: CALL_OW 259
10894: PUSH
10895: LD_INT 10
10897: LESS
10898: IFFALSE 10961
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10900: LD_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: ARRAY
10910: PPUSH
10911: LD_VAR 0 1
10915: PUSH
10916: LD_INT 4
10918: MOD
10919: PUSH
10920: LD_INT 1
10922: PLUS
10923: PPUSH
10924: LD_VAR 0 3
10928: PUSH
10929: LD_VAR 0 1
10933: ARRAY
10934: PPUSH
10935: LD_VAR 0 1
10939: PUSH
10940: LD_INT 4
10942: MOD
10943: PUSH
10944: LD_INT 1
10946: PLUS
10947: PPUSH
10948: CALL_OW 259
10952: PUSH
10953: LD_INT 1
10955: PLUS
10956: PPUSH
10957: CALL_OW 237
10961: GO 10863
10963: POP
10964: POP
// end ;
10965: PPOPN 3
10967: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10968: LD_EXP 7
10972: PUSH
10973: LD_EXP 15
10977: AND
10978: IFFALSE 10998
10980: GO 10982
10982: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10983: LD_INT 4
10985: PPUSH
10986: LD_OWVAR 2
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 324
10998: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10999: LD_EXP 7
11003: PUSH
11004: LD_EXP 44
11008: AND
11009: IFFALSE 11029
11011: GO 11013
11013: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11014: LD_INT 19
11016: PPUSH
11017: LD_OWVAR 2
11021: PPUSH
11022: LD_INT 0
11024: PPUSH
11025: CALL_OW 324
11029: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11030: LD_EXP 7
11034: PUSH
11035: LD_EXP 16
11039: AND
11040: IFFALSE 11142
11042: GO 11044
11044: DISABLE
11045: LD_INT 0
11047: PPUSH
11048: PPUSH
// begin enable ;
11049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11050: LD_ADDR_VAR 0 2
11054: PUSH
11055: LD_INT 22
11057: PUSH
11058: LD_OWVAR 2
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: LD_INT 34
11072: PUSH
11073: LD_INT 11
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 34
11082: PUSH
11083: LD_INT 30
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 69
11103: ST_TO_ADDR
// if not tmp then
11104: LD_VAR 0 2
11108: NOT
11109: IFFALSE 11113
// exit ;
11111: GO 11142
// for i in tmp do
11113: LD_ADDR_VAR 0 1
11117: PUSH
11118: LD_VAR 0 2
11122: PUSH
11123: FOR_IN
11124: IFFALSE 11140
// begin SetLives ( i , 0 ) ;
11126: LD_VAR 0 1
11130: PPUSH
11131: LD_INT 0
11133: PPUSH
11134: CALL_OW 234
// end ;
11138: GO 11123
11140: POP
11141: POP
// end ;
11142: PPOPN 2
11144: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11145: LD_EXP 7
11149: PUSH
11150: LD_EXP 17
11154: AND
11155: IFFALSE 11175
11157: GO 11159
11159: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11160: LD_INT 32
11162: PPUSH
11163: LD_OWVAR 2
11167: PPUSH
11168: LD_INT 0
11170: PPUSH
11171: CALL_OW 324
11175: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11176: LD_EXP 7
11180: PUSH
11181: LD_EXP 18
11185: AND
11186: IFFALSE 11367
11188: GO 11190
11190: DISABLE
11191: LD_INT 0
11193: PPUSH
11194: PPUSH
11195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11196: LD_ADDR_VAR 0 2
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_OWVAR 2
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 33
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: ST_TO_ADDR
// if not tmp then
11232: LD_VAR 0 2
11236: NOT
11237: IFFALSE 11241
// exit ;
11239: GO 11367
// side := 0 ;
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// for i := 1 to 8 do
11249: LD_ADDR_VAR 0 1
11253: PUSH
11254: DOUBLE
11255: LD_INT 1
11257: DEC
11258: ST_TO_ADDR
11259: LD_INT 8
11261: PUSH
11262: FOR_TO
11263: IFFALSE 11311
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11265: LD_OWVAR 2
11269: PUSH
11270: LD_VAR 0 1
11274: NONEQUAL
11275: PUSH
11276: LD_OWVAR 2
11280: PPUSH
11281: LD_VAR 0 1
11285: PPUSH
11286: CALL_OW 81
11290: PUSH
11291: LD_INT 2
11293: EQUAL
11294: AND
11295: IFFALSE 11309
// begin side := i ;
11297: LD_ADDR_VAR 0 3
11301: PUSH
11302: LD_VAR 0 1
11306: ST_TO_ADDR
// break ;
11307: GO 11311
// end ;
11309: GO 11262
11311: POP
11312: POP
// if not side then
11313: LD_VAR 0 3
11317: NOT
11318: IFFALSE 11322
// exit ;
11320: GO 11367
// for i := 1 to tmp do
11322: LD_ADDR_VAR 0 1
11326: PUSH
11327: DOUBLE
11328: LD_INT 1
11330: DEC
11331: ST_TO_ADDR
11332: LD_VAR 0 2
11336: PUSH
11337: FOR_TO
11338: IFFALSE 11365
// if Prob ( 60 ) then
11340: LD_INT 60
11342: PPUSH
11343: CALL_OW 13
11347: IFFALSE 11363
// SetSide ( i , side ) ;
11349: LD_VAR 0 1
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: CALL_OW 235
11363: GO 11337
11365: POP
11366: POP
// end ;
11367: PPOPN 3
11369: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11370: LD_EXP 7
11374: PUSH
11375: LD_EXP 20
11379: AND
11380: IFFALSE 11499
11382: GO 11384
11384: DISABLE
11385: LD_INT 0
11387: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11388: LD_ADDR_VAR 0 1
11392: PUSH
11393: LD_INT 22
11395: PUSH
11396: LD_OWVAR 2
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 21
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 3
11417: PUSH
11418: LD_INT 23
11420: PUSH
11421: LD_INT 0
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 69
11441: PUSH
11442: FOR_IN
11443: IFFALSE 11497
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11445: LD_VAR 0 1
11449: PPUSH
11450: CALL_OW 257
11454: PUSH
11455: LD_INT 1
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 3
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: IN
11473: IFFALSE 11495
// SetClass ( un , rand ( 1 , 4 ) ) ;
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: LD_INT 4
11485: PPUSH
11486: CALL_OW 12
11490: PPUSH
11491: CALL_OW 336
11495: GO 11442
11497: POP
11498: POP
// end ;
11499: PPOPN 1
11501: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11502: LD_EXP 7
11506: PUSH
11507: LD_EXP 19
11511: AND
11512: IFFALSE 11591
11514: GO 11516
11516: DISABLE
11517: LD_INT 0
11519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11520: LD_ADDR_VAR 0 1
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_OWVAR 2
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 21
11539: PUSH
11540: LD_INT 3
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: ST_TO_ADDR
// if not tmp then
11556: LD_VAR 0 1
11560: NOT
11561: IFFALSE 11565
// exit ;
11563: GO 11591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11565: LD_VAR 0 1
11569: PUSH
11570: LD_INT 1
11572: PPUSH
11573: LD_VAR 0 1
11577: PPUSH
11578: CALL_OW 12
11582: ARRAY
11583: PPUSH
11584: LD_INT 100
11586: PPUSH
11587: CALL_OW 234
// end ;
11591: PPOPN 1
11593: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11594: LD_EXP 7
11598: PUSH
11599: LD_EXP 21
11603: AND
11604: IFFALSE 11702
11606: GO 11608
11608: DISABLE
11609: LD_INT 0
11611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11612: LD_ADDR_VAR 0 1
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_OWVAR 2
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 21
11631: PUSH
11632: LD_INT 1
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: ST_TO_ADDR
// if not tmp then
11648: LD_VAR 0 1
11652: NOT
11653: IFFALSE 11657
// exit ;
11655: GO 11702
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11657: LD_VAR 0 1
11661: PUSH
11662: LD_INT 1
11664: PPUSH
11665: LD_VAR 0 1
11669: PPUSH
11670: CALL_OW 12
11674: ARRAY
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: LD_INT 4
11681: PPUSH
11682: CALL_OW 12
11686: PPUSH
11687: LD_INT 3000
11689: PPUSH
11690: LD_INT 9000
11692: PPUSH
11693: CALL_OW 12
11697: PPUSH
11698: CALL_OW 492
// end ;
11702: PPOPN 1
11704: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11705: LD_EXP 7
11709: PUSH
11710: LD_EXP 22
11714: AND
11715: IFFALSE 11735
11717: GO 11719
11719: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11720: LD_INT 1
11722: PPUSH
11723: LD_OWVAR 2
11727: PPUSH
11728: LD_INT 0
11730: PPUSH
11731: CALL_OW 324
11735: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11736: LD_EXP 7
11740: PUSH
11741: LD_EXP 23
11745: AND
11746: IFFALSE 11829
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
11754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11755: LD_ADDR_VAR 0 2
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL_OW 69
11790: ST_TO_ADDR
// if not tmp then
11791: LD_VAR 0 2
11795: NOT
11796: IFFALSE 11800
// exit ;
11798: GO 11829
// for i in tmp do
11800: LD_ADDR_VAR 0 1
11804: PUSH
11805: LD_VAR 0 2
11809: PUSH
11810: FOR_IN
11811: IFFALSE 11827
// SetBLevel ( i , 10 ) ;
11813: LD_VAR 0 1
11817: PPUSH
11818: LD_INT 10
11820: PPUSH
11821: CALL_OW 241
11825: GO 11810
11827: POP
11828: POP
// end ;
11829: PPOPN 2
11831: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11832: LD_EXP 7
11836: PUSH
11837: LD_EXP 24
11841: AND
11842: IFFALSE 11953
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
11850: PPUSH
11851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11852: LD_ADDR_VAR 0 3
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_OWVAR 2
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 25
11871: PUSH
11872: LD_INT 1
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 69
11887: ST_TO_ADDR
// if not tmp then
11888: LD_VAR 0 3
11892: NOT
11893: IFFALSE 11897
// exit ;
11895: GO 11953
// un := tmp [ rand ( 1 , tmp ) ] ;
11897: LD_ADDR_VAR 0 2
11901: PUSH
11902: LD_VAR 0 3
11906: PUSH
11907: LD_INT 1
11909: PPUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: CALL_OW 12
11919: ARRAY
11920: ST_TO_ADDR
// if Crawls ( un ) then
11921: LD_VAR 0 2
11925: PPUSH
11926: CALL_OW 318
11930: IFFALSE 11941
// ComWalk ( un ) ;
11932: LD_VAR 0 2
11936: PPUSH
11937: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11941: LD_VAR 0 2
11945: PPUSH
11946: LD_INT 5
11948: PPUSH
11949: CALL_OW 336
// end ;
11953: PPOPN 3
11955: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11956: LD_EXP 7
11960: PUSH
11961: LD_EXP 25
11965: AND
11966: PUSH
11967: LD_OWVAR 67
11971: PUSH
11972: LD_INT 4
11974: LESS
11975: AND
11976: IFFALSE 11995
11978: GO 11980
11980: DISABLE
// begin Difficulty := Difficulty + 1 ;
11981: LD_ADDR_OWVAR 67
11985: PUSH
11986: LD_OWVAR 67
11990: PUSH
11991: LD_INT 1
11993: PLUS
11994: ST_TO_ADDR
// end ;
11995: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11996: LD_EXP 7
12000: PUSH
12001: LD_EXP 26
12005: AND
12006: IFFALSE 12109
12008: GO 12010
12010: DISABLE
12011: LD_INT 0
12013: PPUSH
// begin for i := 1 to 5 do
12014: LD_ADDR_VAR 0 1
12018: PUSH
12019: DOUBLE
12020: LD_INT 1
12022: DEC
12023: ST_TO_ADDR
12024: LD_INT 5
12026: PUSH
12027: FOR_TO
12028: IFFALSE 12107
// begin uc_nation := nation_nature ;
12030: LD_ADDR_OWVAR 21
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// uc_side := 0 ;
12038: LD_ADDR_OWVAR 20
12042: PUSH
12043: LD_INT 0
12045: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12046: LD_ADDR_OWVAR 29
12050: PUSH
12051: LD_INT 12
12053: PUSH
12054: LD_INT 12
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
// hc_agressivity := 20 ;
12061: LD_ADDR_OWVAR 35
12065: PUSH
12066: LD_INT 20
12068: ST_TO_ADDR
// hc_class := class_tiger ;
12069: LD_ADDR_OWVAR 28
12073: PUSH
12074: LD_INT 14
12076: ST_TO_ADDR
// hc_gallery :=  ;
12077: LD_ADDR_OWVAR 33
12081: PUSH
12082: LD_STRING 
12084: ST_TO_ADDR
// hc_name :=  ;
12085: LD_ADDR_OWVAR 26
12089: PUSH
12090: LD_STRING 
12092: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12093: CALL_OW 44
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: CALL_OW 51
// end ;
12105: GO 12027
12107: POP
12108: POP
// end ;
12109: PPOPN 1
12111: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12112: LD_EXP 7
12116: PUSH
12117: LD_EXP 27
12121: AND
12122: IFFALSE 12131
12124: GO 12126
12126: DISABLE
// StreamSibBomb ;
12127: CALL 12132 0 0
12131: END
// export function StreamSibBomb ; var i , x , y ; begin
12132: LD_INT 0
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
// result := false ;
12138: LD_ADDR_VAR 0 1
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// for i := 1 to 16 do
12146: LD_ADDR_VAR 0 2
12150: PUSH
12151: DOUBLE
12152: LD_INT 1
12154: DEC
12155: ST_TO_ADDR
12156: LD_INT 16
12158: PUSH
12159: FOR_TO
12160: IFFALSE 12359
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12162: LD_ADDR_VAR 0 3
12166: PUSH
12167: LD_INT 10
12169: PUSH
12170: LD_INT 20
12172: PUSH
12173: LD_INT 30
12175: PUSH
12176: LD_INT 40
12178: PUSH
12179: LD_INT 50
12181: PUSH
12182: LD_INT 60
12184: PUSH
12185: LD_INT 70
12187: PUSH
12188: LD_INT 80
12190: PUSH
12191: LD_INT 90
12193: PUSH
12194: LD_INT 100
12196: PUSH
12197: LD_INT 110
12199: PUSH
12200: LD_INT 120
12202: PUSH
12203: LD_INT 130
12205: PUSH
12206: LD_INT 140
12208: PUSH
12209: LD_INT 150
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 1
12231: PPUSH
12232: LD_INT 15
12234: PPUSH
12235: CALL_OW 12
12239: ARRAY
12240: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12241: LD_ADDR_VAR 0 4
12245: PUSH
12246: LD_INT 10
12248: PUSH
12249: LD_INT 20
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 40
12257: PUSH
12258: LD_INT 50
12260: PUSH
12261: LD_INT 60
12263: PUSH
12264: LD_INT 70
12266: PUSH
12267: LD_INT 80
12269: PUSH
12270: LD_INT 90
12272: PUSH
12273: LD_INT 100
12275: PUSH
12276: LD_INT 110
12278: PUSH
12279: LD_INT 120
12281: PUSH
12282: LD_INT 130
12284: PUSH
12285: LD_INT 140
12287: PUSH
12288: LD_INT 150
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 1
12310: PPUSH
12311: LD_INT 15
12313: PPUSH
12314: CALL_OW 12
12318: ARRAY
12319: ST_TO_ADDR
// if ValidHex ( x , y ) then
12320: LD_VAR 0 3
12324: PPUSH
12325: LD_VAR 0 4
12329: PPUSH
12330: CALL_OW 488
12334: IFFALSE 12357
// begin result := [ x , y ] ;
12336: LD_ADDR_VAR 0 1
12340: PUSH
12341: LD_VAR 0 3
12345: PUSH
12346: LD_VAR 0 4
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: ST_TO_ADDR
// break ;
12355: GO 12359
// end ; end ;
12357: GO 12159
12359: POP
12360: POP
// if result then
12361: LD_VAR 0 1
12365: IFFALSE 12425
// begin ToLua ( playSibBomb() ) ;
12367: LD_STRING playSibBomb()
12369: PPUSH
12370: CALL_OW 559
// wait ( 0 0$14 ) ;
12374: LD_INT 490
12376: PPUSH
12377: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12381: LD_VAR 0 1
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PPUSH
12390: LD_VAR 0 1
12394: PUSH
12395: LD_INT 2
12397: ARRAY
12398: PPUSH
12399: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12403: LD_VAR 0 1
12407: PUSH
12408: LD_INT 1
12410: ARRAY
12411: PPUSH
12412: LD_VAR 0 1
12416: PUSH
12417: LD_INT 2
12419: ARRAY
12420: PPUSH
12421: CALL_OW 429
// end ; end ;
12425: LD_VAR 0 1
12429: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12430: LD_EXP 7
12434: PUSH
12435: LD_EXP 29
12439: AND
12440: IFFALSE 12452
12442: GO 12444
12444: DISABLE
// YouLost (  ) ;
12445: LD_STRING 
12447: PPUSH
12448: CALL_OW 104
12452: END
// every 0 0$1 trigger StreamModeActive and sFog do
12453: LD_EXP 7
12457: PUSH
12458: LD_EXP 28
12462: AND
12463: IFFALSE 12477
12465: GO 12467
12467: DISABLE
// FogOff ( your_side ) ;
12468: LD_OWVAR 2
12472: PPUSH
12473: CALL_OW 344
12477: END
// every 0 0$1 trigger StreamModeActive and sSun do
12478: LD_EXP 7
12482: PUSH
12483: LD_EXP 30
12487: AND
12488: IFFALSE 12516
12490: GO 12492
12492: DISABLE
// begin solar_recharge_percent := 0 ;
12493: LD_ADDR_OWVAR 79
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12501: LD_INT 10500
12503: PPUSH
12504: CALL_OW 67
// solar_recharge_percent := 100 ;
12508: LD_ADDR_OWVAR 79
12512: PUSH
12513: LD_INT 100
12515: ST_TO_ADDR
// end ;
12516: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12517: LD_EXP 7
12521: PUSH
12522: LD_EXP 31
12526: AND
12527: IFFALSE 12766
12529: GO 12531
12531: DISABLE
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
12536: PPUSH
// begin tmp := [ ] ;
12537: LD_ADDR_VAR 0 3
12541: PUSH
12542: EMPTY
12543: ST_TO_ADDR
// for i := 1 to 6 do
12544: LD_ADDR_VAR 0 1
12548: PUSH
12549: DOUBLE
12550: LD_INT 1
12552: DEC
12553: ST_TO_ADDR
12554: LD_INT 6
12556: PUSH
12557: FOR_TO
12558: IFFALSE 12663
// begin uc_nation := nation_nature ;
12560: LD_ADDR_OWVAR 21
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// uc_side := 0 ;
12568: LD_ADDR_OWVAR 20
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12576: LD_ADDR_OWVAR 29
12580: PUSH
12581: LD_INT 12
12583: PUSH
12584: LD_INT 12
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
// hc_agressivity := 20 ;
12591: LD_ADDR_OWVAR 35
12595: PUSH
12596: LD_INT 20
12598: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12599: LD_ADDR_OWVAR 28
12603: PUSH
12604: LD_INT 17
12606: ST_TO_ADDR
// hc_gallery :=  ;
12607: LD_ADDR_OWVAR 33
12611: PUSH
12612: LD_STRING 
12614: ST_TO_ADDR
// hc_name :=  ;
12615: LD_ADDR_OWVAR 26
12619: PUSH
12620: LD_STRING 
12622: ST_TO_ADDR
// un := CreateHuman ;
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: CALL_OW 44
12632: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12633: LD_VAR 0 2
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: CALL_OW 51
// tmp := tmp ^ un ;
12645: LD_ADDR_VAR 0 3
12649: PUSH
12650: LD_VAR 0 3
12654: PUSH
12655: LD_VAR 0 2
12659: ADD
12660: ST_TO_ADDR
// end ;
12661: GO 12557
12663: POP
12664: POP
// repeat wait ( 0 0$1 ) ;
12665: LD_INT 35
12667: PPUSH
12668: CALL_OW 67
// for un in tmp do
12672: LD_ADDR_VAR 0 2
12676: PUSH
12677: LD_VAR 0 3
12681: PUSH
12682: FOR_IN
12683: IFFALSE 12757
// begin if IsDead ( un ) then
12685: LD_VAR 0 2
12689: PPUSH
12690: CALL_OW 301
12694: IFFALSE 12714
// begin tmp := tmp diff un ;
12696: LD_ADDR_VAR 0 3
12700: PUSH
12701: LD_VAR 0 3
12705: PUSH
12706: LD_VAR 0 2
12710: DIFF
12711: ST_TO_ADDR
// continue ;
12712: GO 12682
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12714: LD_VAR 0 2
12718: PPUSH
12719: LD_INT 3
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 0
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: PPUSH
12741: LD_VAR 0 2
12745: PPUSH
12746: CALL_OW 74
12750: PPUSH
12751: CALL_OW 115
// end ;
12755: GO 12682
12757: POP
12758: POP
// until not tmp ;
12759: LD_VAR 0 3
12763: NOT
12764: IFFALSE 12665
// end ;
12766: PPOPN 3
12768: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12769: LD_EXP 7
12773: PUSH
12774: LD_EXP 32
12778: AND
12779: IFFALSE 12833
12781: GO 12783
12783: DISABLE
// begin ToLua ( displayTroll(); ) ;
12784: LD_STRING displayTroll();
12786: PPUSH
12787: CALL_OW 559
// wait ( 3 3$00 ) ;
12791: LD_INT 6300
12793: PPUSH
12794: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12798: LD_STRING hideTroll();
12800: PPUSH
12801: CALL_OW 559
// wait ( 1 1$00 ) ;
12805: LD_INT 2100
12807: PPUSH
12808: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12812: LD_STRING displayTroll();
12814: PPUSH
12815: CALL_OW 559
// wait ( 1 1$00 ) ;
12819: LD_INT 2100
12821: PPUSH
12822: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12826: LD_STRING hideTroll();
12828: PPUSH
12829: CALL_OW 559
// end ;
12833: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12834: LD_EXP 7
12838: PUSH
12839: LD_EXP 33
12843: AND
12844: IFFALSE 12907
12846: GO 12848
12848: DISABLE
12849: LD_INT 0
12851: PPUSH
// begin p := 0 ;
12852: LD_ADDR_VAR 0 1
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// repeat game_speed := 1 ;
12860: LD_ADDR_OWVAR 65
12864: PUSH
12865: LD_INT 1
12867: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12868: LD_INT 35
12870: PPUSH
12871: CALL_OW 67
// p := p + 1 ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_VAR 0 1
12884: PUSH
12885: LD_INT 1
12887: PLUS
12888: ST_TO_ADDR
// until p >= 60 ;
12889: LD_VAR 0 1
12893: PUSH
12894: LD_INT 60
12896: GREATEREQUAL
12897: IFFALSE 12860
// game_speed := 4 ;
12899: LD_ADDR_OWVAR 65
12903: PUSH
12904: LD_INT 4
12906: ST_TO_ADDR
// end ;
12907: PPOPN 1
12909: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12910: LD_EXP 7
12914: PUSH
12915: LD_EXP 34
12919: AND
12920: IFFALSE 13066
12922: GO 12924
12924: DISABLE
12925: LD_INT 0
12927: PPUSH
12928: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_OWVAR 2
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 2
12948: PUSH
12949: LD_INT 30
12951: PUSH
12952: LD_INT 0
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 30
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: ST_TO_ADDR
// if not depot then
12983: LD_VAR 0 1
12987: NOT
12988: IFFALSE 12992
// exit ;
12990: GO 13066
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12992: LD_ADDR_VAR 0 2
12996: PUSH
12997: LD_VAR 0 1
13001: PUSH
13002: LD_INT 1
13004: PPUSH
13005: LD_VAR 0 1
13009: PPUSH
13010: CALL_OW 12
13014: ARRAY
13015: PPUSH
13016: CALL_OW 274
13020: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13021: LD_VAR 0 2
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 0
13031: PPUSH
13032: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13036: LD_VAR 0 2
13040: PPUSH
13041: LD_INT 2
13043: PPUSH
13044: LD_INT 0
13046: PPUSH
13047: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13051: LD_VAR 0 2
13055: PPUSH
13056: LD_INT 3
13058: PPUSH
13059: LD_INT 0
13061: PPUSH
13062: CALL_OW 277
// end ;
13066: PPOPN 2
13068: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13069: LD_EXP 7
13073: PUSH
13074: LD_EXP 35
13078: AND
13079: IFFALSE 13176
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_OWVAR 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 21
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 3
13116: PUSH
13117: LD_INT 23
13119: PUSH
13120: LD_INT 0
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: PPUSH
13136: CALL_OW 69
13140: ST_TO_ADDR
// if not tmp then
13141: LD_VAR 0 1
13145: NOT
13146: IFFALSE 13150
// exit ;
13148: GO 13176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13150: LD_VAR 0 1
13154: PUSH
13155: LD_INT 1
13157: PPUSH
13158: LD_VAR 0 1
13162: PPUSH
13163: CALL_OW 12
13167: ARRAY
13168: PPUSH
13169: LD_INT 200
13171: PPUSH
13172: CALL_OW 234
// end ;
13176: PPOPN 1
13178: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13179: LD_EXP 7
13183: PUSH
13184: LD_EXP 36
13188: AND
13189: IFFALSE 13268
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13197: LD_ADDR_VAR 0 1
13201: PUSH
13202: LD_INT 22
13204: PUSH
13205: LD_OWVAR 2
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 21
13216: PUSH
13217: LD_INT 2
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 69
13232: ST_TO_ADDR
// if not tmp then
13233: LD_VAR 0 1
13237: NOT
13238: IFFALSE 13242
// exit ;
13240: GO 13268
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13242: LD_VAR 0 1
13246: PUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_VAR 0 1
13254: PPUSH
13255: CALL_OW 12
13259: ARRAY
13260: PPUSH
13261: LD_INT 60
13263: PPUSH
13264: CALL_OW 234
// end ;
13268: PPOPN 1
13270: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13271: LD_EXP 7
13275: PUSH
13276: LD_EXP 37
13280: AND
13281: IFFALSE 13380
13283: GO 13285
13285: DISABLE
13286: LD_INT 0
13288: PPUSH
13289: PPUSH
// begin enable ;
13290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13291: LD_ADDR_VAR 0 1
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_OWVAR 2
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 61
13310: PUSH
13311: EMPTY
13312: LIST
13313: PUSH
13314: LD_INT 33
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 69
13333: ST_TO_ADDR
// if not tmp then
13334: LD_VAR 0 1
13338: NOT
13339: IFFALSE 13343
// exit ;
13341: GO 13380
// for i in tmp do
13343: LD_ADDR_VAR 0 2
13347: PUSH
13348: LD_VAR 0 1
13352: PUSH
13353: FOR_IN
13354: IFFALSE 13378
// if IsControledBy ( i ) then
13356: LD_VAR 0 2
13360: PPUSH
13361: CALL_OW 312
13365: IFFALSE 13376
// ComUnlink ( i ) ;
13367: LD_VAR 0 2
13371: PPUSH
13372: CALL_OW 136
13376: GO 13353
13378: POP
13379: POP
// end ;
13380: PPOPN 2
13382: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13383: LD_EXP 7
13387: PUSH
13388: LD_EXP 38
13392: AND
13393: IFFALSE 13533
13395: GO 13397
13397: DISABLE
13398: LD_INT 0
13400: PPUSH
13401: PPUSH
// begin ToLua ( displayPowell(); ) ;
13402: LD_STRING displayPowell();
13404: PPUSH
13405: CALL_OW 559
// uc_side := 0 ;
13409: LD_ADDR_OWVAR 20
13413: PUSH
13414: LD_INT 0
13416: ST_TO_ADDR
// uc_nation := 2 ;
13417: LD_ADDR_OWVAR 21
13421: PUSH
13422: LD_INT 2
13424: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13425: LD_ADDR_OWVAR 37
13429: PUSH
13430: LD_INT 14
13432: ST_TO_ADDR
// vc_engine := engine_siberite ;
13433: LD_ADDR_OWVAR 39
13437: PUSH
13438: LD_INT 3
13440: ST_TO_ADDR
// vc_control := control_apeman ;
13441: LD_ADDR_OWVAR 38
13445: PUSH
13446: LD_INT 5
13448: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13449: LD_ADDR_OWVAR 40
13453: PUSH
13454: LD_INT 29
13456: ST_TO_ADDR
// un := CreateVehicle ;
13457: LD_ADDR_VAR 0 2
13461: PUSH
13462: CALL_OW 45
13466: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13467: LD_VAR 0 2
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13479: LD_INT 35
13481: PPUSH
13482: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13486: LD_VAR 0 2
13490: PPUSH
13491: LD_INT 22
13493: PUSH
13494: LD_OWVAR 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: PPUSH
13508: LD_VAR 0 2
13512: PPUSH
13513: CALL_OW 74
13517: PPUSH
13518: CALL_OW 115
// until IsDead ( un ) ;
13522: LD_VAR 0 2
13526: PPUSH
13527: CALL_OW 301
13531: IFFALSE 13479
// end ;
13533: PPOPN 2
13535: END
// every 0 0$1 trigger StreamModeActive and sStu do
13536: LD_EXP 7
13540: PUSH
13541: LD_EXP 46
13545: AND
13546: IFFALSE 13562
13548: GO 13550
13550: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13551: LD_STRING displayStucuk();
13553: PPUSH
13554: CALL_OW 559
// ResetFog ;
13558: CALL_OW 335
// end ;
13562: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13563: LD_EXP 7
13567: PUSH
13568: LD_EXP 39
13572: AND
13573: IFFALSE 13714
13575: GO 13577
13577: DISABLE
13578: LD_INT 0
13580: PPUSH
13581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13582: LD_ADDR_VAR 0 2
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_OWVAR 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 1
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: ST_TO_ADDR
// if not tmp then
13618: LD_VAR 0 2
13622: NOT
13623: IFFALSE 13627
// exit ;
13625: GO 13714
// un := tmp [ rand ( 1 , tmp ) ] ;
13627: LD_ADDR_VAR 0 1
13631: PUSH
13632: LD_VAR 0 2
13636: PUSH
13637: LD_INT 1
13639: PPUSH
13640: LD_VAR 0 2
13644: PPUSH
13645: CALL_OW 12
13649: ARRAY
13650: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13651: LD_VAR 0 1
13655: PPUSH
13656: LD_INT 0
13658: PPUSH
13659: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13663: LD_VAR 0 1
13667: PPUSH
13668: LD_OWVAR 3
13672: PUSH
13673: LD_VAR 0 1
13677: DIFF
13678: PPUSH
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 74
13688: PPUSH
13689: CALL_OW 115
// wait ( 0 0$20 ) ;
13693: LD_INT 700
13695: PPUSH
13696: CALL_OW 67
// SetSide ( un , your_side ) ;
13700: LD_VAR 0 1
13704: PPUSH
13705: LD_OWVAR 2
13709: PPUSH
13710: CALL_OW 235
// end ;
13714: PPOPN 2
13716: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13717: LD_EXP 7
13721: PUSH
13722: LD_EXP 40
13726: AND
13727: IFFALSE 13833
13729: GO 13731
13731: DISABLE
13732: LD_INT 0
13734: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13735: LD_ADDR_VAR 0 1
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_OWVAR 2
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 30
13757: PUSH
13758: LD_INT 0
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 30
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: ST_TO_ADDR
// if not depot then
13789: LD_VAR 0 1
13793: NOT
13794: IFFALSE 13798
// exit ;
13796: GO 13833
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13798: LD_VAR 0 1
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: PPUSH
13807: CALL_OW 250
13811: PPUSH
13812: LD_VAR 0 1
13816: PUSH
13817: LD_INT 1
13819: ARRAY
13820: PPUSH
13821: CALL_OW 251
13825: PPUSH
13826: LD_INT 70
13828: PPUSH
13829: CALL_OW 495
// end ;
13833: PPOPN 1
13835: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13836: LD_EXP 7
13840: PUSH
13841: LD_EXP 41
13845: AND
13846: IFFALSE 14057
13848: GO 13850
13850: DISABLE
13851: LD_INT 0
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13858: LD_ADDR_VAR 0 5
13862: PUSH
13863: LD_INT 22
13865: PUSH
13866: LD_OWVAR 2
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 21
13877: PUSH
13878: LD_INT 1
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PPUSH
13889: CALL_OW 69
13893: ST_TO_ADDR
// if not tmp then
13894: LD_VAR 0 5
13898: NOT
13899: IFFALSE 13903
// exit ;
13901: GO 14057
// for i in tmp do
13903: LD_ADDR_VAR 0 1
13907: PUSH
13908: LD_VAR 0 5
13912: PUSH
13913: FOR_IN
13914: IFFALSE 14055
// begin d := rand ( 0 , 5 ) ;
13916: LD_ADDR_VAR 0 4
13920: PUSH
13921: LD_INT 0
13923: PPUSH
13924: LD_INT 5
13926: PPUSH
13927: CALL_OW 12
13931: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 250
13946: PPUSH
13947: LD_VAR 0 4
13951: PPUSH
13952: LD_INT 3
13954: PPUSH
13955: LD_INT 12
13957: PPUSH
13958: CALL_OW 12
13962: PPUSH
13963: CALL_OW 272
13967: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 251
13982: PPUSH
13983: LD_VAR 0 4
13987: PPUSH
13988: LD_INT 3
13990: PPUSH
13991: LD_INT 12
13993: PPUSH
13994: CALL_OW 12
13998: PPUSH
13999: CALL_OW 273
14003: ST_TO_ADDR
// if ValidHex ( x , y ) then
14004: LD_VAR 0 2
14008: PPUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: CALL_OW 488
14018: IFFALSE 14053
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14020: LD_VAR 0 1
14024: PPUSH
14025: LD_VAR 0 2
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 3
14037: PPUSH
14038: LD_INT 6
14040: PPUSH
14041: CALL_OW 12
14045: PPUSH
14046: LD_INT 1
14048: PPUSH
14049: CALL_OW 483
// end ;
14053: GO 13913
14055: POP
14056: POP
// end ;
14057: PPOPN 5
14059: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14060: LD_EXP 7
14064: PUSH
14065: LD_EXP 42
14069: AND
14070: IFFALSE 14164
14072: GO 14074
14074: DISABLE
14075: LD_INT 0
14077: PPUSH
14078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14079: LD_ADDR_VAR 0 2
14083: PUSH
14084: LD_INT 22
14086: PUSH
14087: LD_OWVAR 2
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 32
14098: PUSH
14099: LD_INT 1
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 21
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: ST_TO_ADDR
// if not tmp then
14126: LD_VAR 0 2
14130: NOT
14131: IFFALSE 14135
// exit ;
14133: GO 14164
// for i in tmp do
14135: LD_ADDR_VAR 0 1
14139: PUSH
14140: LD_VAR 0 2
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14162
// SetFuel ( i , 0 ) ;
14148: LD_VAR 0 1
14152: PPUSH
14153: LD_INT 0
14155: PPUSH
14156: CALL_OW 240
14160: GO 14145
14162: POP
14163: POP
// end ;
14164: PPOPN 2
14166: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14167: LD_EXP 7
14171: PUSH
14172: LD_EXP 43
14176: AND
14177: IFFALSE 14243
14179: GO 14181
14181: DISABLE
14182: LD_INT 0
14184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14185: LD_ADDR_VAR 0 1
14189: PUSH
14190: LD_INT 22
14192: PUSH
14193: LD_OWVAR 2
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 30
14204: PUSH
14205: LD_INT 29
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PPUSH
14216: CALL_OW 69
14220: ST_TO_ADDR
// if not tmp then
14221: LD_VAR 0 1
14225: NOT
14226: IFFALSE 14230
// exit ;
14228: GO 14243
// DestroyUnit ( tmp [ 1 ] ) ;
14230: LD_VAR 0 1
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: CALL_OW 65
// end ;
14243: PPOPN 1
14245: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14246: LD_EXP 7
14250: PUSH
14251: LD_EXP 45
14255: AND
14256: IFFALSE 14385
14258: GO 14260
14260: DISABLE
14261: LD_INT 0
14263: PPUSH
// begin uc_side := 0 ;
14264: LD_ADDR_OWVAR 20
14268: PUSH
14269: LD_INT 0
14271: ST_TO_ADDR
// uc_nation := nation_arabian ;
14272: LD_ADDR_OWVAR 21
14276: PUSH
14277: LD_INT 2
14279: ST_TO_ADDR
// hc_gallery :=  ;
14280: LD_ADDR_OWVAR 33
14284: PUSH
14285: LD_STRING 
14287: ST_TO_ADDR
// hc_name :=  ;
14288: LD_ADDR_OWVAR 26
14292: PUSH
14293: LD_STRING 
14295: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14296: LD_INT 1
14298: PPUSH
14299: LD_INT 11
14301: PPUSH
14302: LD_INT 10
14304: PPUSH
14305: CALL_OW 380
// un := CreateHuman ;
14309: LD_ADDR_VAR 0 1
14313: PUSH
14314: CALL_OW 44
14318: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14319: LD_VAR 0 1
14323: PPUSH
14324: LD_INT 1
14326: PPUSH
14327: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14331: LD_INT 35
14333: PPUSH
14334: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14338: LD_VAR 0 1
14342: PPUSH
14343: LD_INT 22
14345: PUSH
14346: LD_OWVAR 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 74
14369: PPUSH
14370: CALL_OW 115
// until IsDead ( un ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 301
14383: IFFALSE 14331
// end ;
14385: PPOPN 1
14387: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14388: LD_EXP 7
14392: PUSH
14393: LD_EXP 47
14397: AND
14398: IFFALSE 14410
14400: GO 14402
14402: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14403: LD_STRING earthquake(getX(game), 0, 32)
14405: PPUSH
14406: CALL_OW 559
14410: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14411: LD_EXP 7
14415: PUSH
14416: LD_EXP 48
14420: AND
14421: IFFALSE 14512
14423: GO 14425
14425: DISABLE
14426: LD_INT 0
14428: PPUSH
// begin enable ;
14429: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14430: LD_ADDR_VAR 0 1
14434: PUSH
14435: LD_INT 22
14437: PUSH
14438: LD_OWVAR 2
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 21
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 33
14459: PUSH
14460: LD_INT 3
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: PPUSH
14472: CALL_OW 69
14476: ST_TO_ADDR
// if not tmp then
14477: LD_VAR 0 1
14481: NOT
14482: IFFALSE 14486
// exit ;
14484: GO 14512
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14486: LD_VAR 0 1
14490: PUSH
14491: LD_INT 1
14493: PPUSH
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 12
14503: ARRAY
14504: PPUSH
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 234
// end ;
14512: PPOPN 1
14514: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14515: LD_EXP 7
14519: PUSH
14520: LD_EXP 49
14524: AND
14525: IFFALSE 14666
14527: GO 14529
14529: DISABLE
14530: LD_INT 0
14532: PPUSH
14533: PPUSH
14534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: LD_INT 22
14542: PUSH
14543: LD_OWVAR 2
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 25
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PPUSH
14566: CALL_OW 69
14570: ST_TO_ADDR
// if not tmp then
14571: LD_VAR 0 3
14575: NOT
14576: IFFALSE 14580
// exit ;
14578: GO 14666
// un := tmp [ rand ( 1 , tmp ) ] ;
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_VAR 0 3
14589: PUSH
14590: LD_INT 1
14592: PPUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: CALL_OW 12
14602: ARRAY
14603: ST_TO_ADDR
// if Crawls ( un ) then
14604: LD_VAR 0 2
14608: PPUSH
14609: CALL_OW 318
14613: IFFALSE 14624
// ComWalk ( un ) ;
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14624: LD_VAR 0 2
14628: PPUSH
14629: LD_INT 9
14631: PPUSH
14632: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14636: LD_INT 28
14638: PPUSH
14639: LD_OWVAR 2
14643: PPUSH
14644: LD_INT 2
14646: PPUSH
14647: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14651: LD_INT 29
14653: PPUSH
14654: LD_OWVAR 2
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: CALL_OW 322
// end ;
14666: PPOPN 3
14668: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14669: LD_EXP 7
14673: PUSH
14674: LD_EXP 50
14678: AND
14679: IFFALSE 14790
14681: GO 14683
14683: DISABLE
14684: LD_INT 0
14686: PPUSH
14687: PPUSH
14688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14689: LD_ADDR_VAR 0 3
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_OWVAR 2
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 25
14708: PUSH
14709: LD_INT 1
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: ST_TO_ADDR
// if not tmp then
14725: LD_VAR 0 3
14729: NOT
14730: IFFALSE 14734
// exit ;
14732: GO 14790
// un := tmp [ rand ( 1 , tmp ) ] ;
14734: LD_ADDR_VAR 0 2
14738: PUSH
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 1
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: CALL_OW 12
14756: ARRAY
14757: ST_TO_ADDR
// if Crawls ( un ) then
14758: LD_VAR 0 2
14762: PPUSH
14763: CALL_OW 318
14767: IFFALSE 14778
// ComWalk ( un ) ;
14769: LD_VAR 0 2
14773: PPUSH
14774: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14778: LD_VAR 0 2
14782: PPUSH
14783: LD_INT 8
14785: PPUSH
14786: CALL_OW 336
// end ;
14790: PPOPN 3
14792: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14793: LD_EXP 7
14797: PUSH
14798: LD_EXP 51
14802: AND
14803: IFFALSE 14947
14805: GO 14807
14807: DISABLE
14808: LD_INT 0
14810: PPUSH
14811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14812: LD_ADDR_VAR 0 2
14816: PUSH
14817: LD_INT 22
14819: PUSH
14820: LD_OWVAR 2
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 21
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: LD_INT 34
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 34
14854: PUSH
14855: LD_INT 51
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 34
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: ST_TO_ADDR
// if not tmp then
14888: LD_VAR 0 2
14892: NOT
14893: IFFALSE 14897
// exit ;
14895: GO 14947
// for i in tmp do
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: LD_VAR 0 2
14906: PUSH
14907: FOR_IN
14908: IFFALSE 14945
// if GetCargo ( i , mat_artifact ) = 0 then
14910: LD_VAR 0 1
14914: PPUSH
14915: LD_INT 4
14917: PPUSH
14918: CALL_OW 289
14922: PUSH
14923: LD_INT 0
14925: EQUAL
14926: IFFALSE 14943
// SetCargo ( i , mat_siberit , 100 ) ;
14928: LD_VAR 0 1
14932: PPUSH
14933: LD_INT 3
14935: PPUSH
14936: LD_INT 100
14938: PPUSH
14939: CALL_OW 290
14943: GO 14907
14945: POP
14946: POP
// end ;
14947: PPOPN 2
14949: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14950: LD_EXP 7
14954: PUSH
14955: LD_EXP 52
14959: AND
14960: IFFALSE 15143
14962: GO 14964
14964: DISABLE
14965: LD_INT 0
14967: PPUSH
14968: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_OWVAR 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL_OW 69
14990: ST_TO_ADDR
// if not tmp then
14991: LD_VAR 0 2
14995: NOT
14996: IFFALSE 15000
// exit ;
14998: GO 15143
// for i := 1 to 2 do
15000: LD_ADDR_VAR 0 1
15004: PUSH
15005: DOUBLE
15006: LD_INT 1
15008: DEC
15009: ST_TO_ADDR
15010: LD_INT 2
15012: PUSH
15013: FOR_TO
15014: IFFALSE 15141
// begin uc_side := your_side ;
15016: LD_ADDR_OWVAR 20
15020: PUSH
15021: LD_OWVAR 2
15025: ST_TO_ADDR
// uc_nation := nation_american ;
15026: LD_ADDR_OWVAR 21
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
// vc_chassis := us_morphling ;
15034: LD_ADDR_OWVAR 37
15038: PUSH
15039: LD_INT 5
15041: ST_TO_ADDR
// vc_engine := engine_siberite ;
15042: LD_ADDR_OWVAR 39
15046: PUSH
15047: LD_INT 3
15049: ST_TO_ADDR
// vc_control := control_computer ;
15050: LD_ADDR_OWVAR 38
15054: PUSH
15055: LD_INT 3
15057: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15058: LD_ADDR_OWVAR 40
15062: PUSH
15063: LD_INT 10
15065: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15066: LD_VAR 0 2
15070: PUSH
15071: LD_INT 1
15073: ARRAY
15074: PPUSH
15075: CALL_OW 310
15079: NOT
15080: IFFALSE 15127
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15082: CALL_OW 45
15086: PPUSH
15087: LD_VAR 0 2
15091: PUSH
15092: LD_INT 1
15094: ARRAY
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 2
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: PPUSH
15110: CALL_OW 251
15114: PPUSH
15115: LD_INT 12
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 50
15125: GO 15139
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15127: CALL_OW 45
15131: PPUSH
15132: LD_INT 1
15134: PPUSH
15135: CALL_OW 51
// end ;
15139: GO 15013
15141: POP
15142: POP
// end ;
15143: PPOPN 2
15145: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15146: LD_EXP 7
15150: PUSH
15151: LD_EXP 53
15155: AND
15156: IFFALSE 15378
15158: GO 15160
15160: DISABLE
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15169: LD_ADDR_VAR 0 6
15173: PUSH
15174: LD_INT 22
15176: PUSH
15177: LD_OWVAR 2
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 1
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 3
15198: PUSH
15199: LD_INT 23
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: ST_TO_ADDR
// if not tmp then
15223: LD_VAR 0 6
15227: NOT
15228: IFFALSE 15232
// exit ;
15230: GO 15378
// s1 := rand ( 1 , 4 ) ;
15232: LD_ADDR_VAR 0 2
15236: PUSH
15237: LD_INT 1
15239: PPUSH
15240: LD_INT 4
15242: PPUSH
15243: CALL_OW 12
15247: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15248: LD_ADDR_VAR 0 4
15252: PUSH
15253: LD_VAR 0 6
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: LD_VAR 0 2
15266: PPUSH
15267: CALL_OW 259
15271: ST_TO_ADDR
// if s1 = 1 then
15272: LD_VAR 0 2
15276: PUSH
15277: LD_INT 1
15279: EQUAL
15280: IFFALSE 15300
// s2 := rand ( 2 , 4 ) else
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: LD_INT 2
15289: PPUSH
15290: LD_INT 4
15292: PPUSH
15293: CALL_OW 12
15297: ST_TO_ADDR
15298: GO 15308
// s2 := 1 ;
15300: LD_ADDR_VAR 0 3
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15308: LD_ADDR_VAR 0 5
15312: PUSH
15313: LD_VAR 0 6
15317: PUSH
15318: LD_INT 1
15320: ARRAY
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 259
15331: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15332: LD_VAR 0 6
15336: PUSH
15337: LD_INT 1
15339: ARRAY
15340: PPUSH
15341: LD_VAR 0 2
15345: PPUSH
15346: LD_VAR 0 5
15350: PPUSH
15351: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15355: LD_VAR 0 6
15359: PUSH
15360: LD_INT 1
15362: ARRAY
15363: PPUSH
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_VAR 0 4
15373: PPUSH
15374: CALL_OW 237
// end ;
15378: PPOPN 6
15380: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15381: LD_EXP 7
15385: PUSH
15386: LD_EXP 54
15390: AND
15391: IFFALSE 15470
15393: GO 15395
15395: DISABLE
15396: LD_INT 0
15398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15399: LD_ADDR_VAR 0 1
15403: PUSH
15404: LD_INT 22
15406: PUSH
15407: LD_OWVAR 2
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 30
15418: PUSH
15419: LD_INT 3
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PPUSH
15430: CALL_OW 69
15434: ST_TO_ADDR
// if not tmp then
15435: LD_VAR 0 1
15439: NOT
15440: IFFALSE 15444
// exit ;
15442: GO 15470
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15444: LD_VAR 0 1
15448: PUSH
15449: LD_INT 1
15451: PPUSH
15452: LD_VAR 0 1
15456: PPUSH
15457: CALL_OW 12
15461: ARRAY
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 234
// end ;
15470: PPOPN 1
15472: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15473: LD_EXP 7
15477: PUSH
15478: LD_EXP 55
15482: AND
15483: IFFALSE 15595
15485: GO 15487
15487: DISABLE
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15492: LD_ADDR_VAR 0 2
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_OWVAR 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 2
15511: PUSH
15512: LD_INT 30
15514: PUSH
15515: LD_INT 27
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 30
15524: PUSH
15525: LD_INT 26
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 30
15534: PUSH
15535: LD_INT 28
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PPUSH
15552: CALL_OW 69
15556: ST_TO_ADDR
// if not tmp then
15557: LD_VAR 0 2
15561: NOT
15562: IFFALSE 15566
// exit ;
15564: GO 15595
// for i in tmp do
15566: LD_ADDR_VAR 0 1
15570: PUSH
15571: LD_VAR 0 2
15575: PUSH
15576: FOR_IN
15577: IFFALSE 15593
// SetLives ( i , 1 ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: CALL_OW 234
15591: GO 15576
15593: POP
15594: POP
// end ;
15595: PPOPN 2
15597: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15598: LD_EXP 7
15602: PUSH
15603: LD_EXP 56
15607: AND
15608: IFFALSE 15895
15610: GO 15612
15612: DISABLE
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// begin i := rand ( 1 , 7 ) ;
15618: LD_ADDR_VAR 0 1
15622: PUSH
15623: LD_INT 1
15625: PPUSH
15626: LD_INT 7
15628: PPUSH
15629: CALL_OW 12
15633: ST_TO_ADDR
// case i of 1 :
15634: LD_VAR 0 1
15638: PUSH
15639: LD_INT 1
15641: DOUBLE
15642: EQUAL
15643: IFTRUE 15647
15645: GO 15657
15647: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15648: LD_STRING earthquake(getX(game), 0, 32)
15650: PPUSH
15651: CALL_OW 559
15655: GO 15895
15657: LD_INT 2
15659: DOUBLE
15660: EQUAL
15661: IFTRUE 15665
15663: GO 15679
15665: POP
// begin ToLua ( displayStucuk(); ) ;
15666: LD_STRING displayStucuk();
15668: PPUSH
15669: CALL_OW 559
// ResetFog ;
15673: CALL_OW 335
// end ; 3 :
15677: GO 15895
15679: LD_INT 3
15681: DOUBLE
15682: EQUAL
15683: IFTRUE 15687
15685: GO 15791
15687: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15688: LD_ADDR_VAR 0 2
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_OWVAR 2
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 25
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PPUSH
15719: CALL_OW 69
15723: ST_TO_ADDR
// if not tmp then
15724: LD_VAR 0 2
15728: NOT
15729: IFFALSE 15733
// exit ;
15731: GO 15895
// un := tmp [ rand ( 1 , tmp ) ] ;
15733: LD_ADDR_VAR 0 3
15737: PUSH
15738: LD_VAR 0 2
15742: PUSH
15743: LD_INT 1
15745: PPUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 12
15755: ARRAY
15756: ST_TO_ADDR
// if Crawls ( un ) then
15757: LD_VAR 0 3
15761: PPUSH
15762: CALL_OW 318
15766: IFFALSE 15777
// ComWalk ( un ) ;
15768: LD_VAR 0 3
15772: PPUSH
15773: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 8
15784: PPUSH
15785: CALL_OW 336
// end ; 4 :
15789: GO 15895
15791: LD_INT 4
15793: DOUBLE
15794: EQUAL
15795: IFTRUE 15799
15797: GO 15873
15799: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15800: LD_ADDR_VAR 0 2
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_OWVAR 2
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 30
15819: PUSH
15820: LD_INT 29
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PPUSH
15831: CALL_OW 69
15835: ST_TO_ADDR
// if not tmp then
15836: LD_VAR 0 2
15840: NOT
15841: IFFALSE 15845
// exit ;
15843: GO 15895
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15845: LD_VAR 0 2
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15858: LD_VAR 0 2
15862: PUSH
15863: LD_INT 1
15865: ARRAY
15866: PPUSH
15867: CALL_OW 65
// end ; 5 .. 7 :
15871: GO 15895
15873: LD_INT 5
15875: DOUBLE
15876: GREATEREQUAL
15877: IFFALSE 15885
15879: LD_INT 7
15881: DOUBLE
15882: LESSEQUAL
15883: IFTRUE 15887
15885: GO 15894
15887: POP
// StreamSibBomb ; end ;
15888: CALL 12132 0 0
15892: GO 15895
15894: POP
// end ;
15895: PPOPN 3
15897: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15898: LD_EXP 7
15902: PUSH
15903: LD_EXP 57
15907: AND
15908: IFFALSE 16064
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
15917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15918: LD_ADDR_VAR 0 2
15922: PUSH
15923: LD_INT 81
15925: PUSH
15926: LD_OWVAR 2
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 2
15937: PUSH
15938: LD_INT 21
15940: PUSH
15941: LD_INT 1
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 21
15950: PUSH
15951: LD_INT 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: ST_TO_ADDR
// if not tmp then
15972: LD_VAR 0 2
15976: NOT
15977: IFFALSE 15981
// exit ;
15979: GO 16064
// p := 0 ;
15981: LD_ADDR_VAR 0 3
15985: PUSH
15986: LD_INT 0
15988: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15989: LD_INT 35
15991: PPUSH
15992: CALL_OW 67
// p := p + 1 ;
15996: LD_ADDR_VAR 0 3
16000: PUSH
16001: LD_VAR 0 3
16005: PUSH
16006: LD_INT 1
16008: PLUS
16009: ST_TO_ADDR
// for i in tmp do
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_VAR 0 2
16019: PUSH
16020: FOR_IN
16021: IFFALSE 16052
// if GetLives ( i ) < 1000 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 256
16032: PUSH
16033: LD_INT 1000
16035: LESS
16036: IFFALSE 16050
// SetLives ( i , 1000 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 1000
16045: PPUSH
16046: CALL_OW 234
16050: GO 16020
16052: POP
16053: POP
// until p > 20 ;
16054: LD_VAR 0 3
16058: PUSH
16059: LD_INT 20
16061: GREATER
16062: IFFALSE 15989
// end ;
16064: PPOPN 3
16066: END
// every 0 0$1 trigger StreamModeActive and sTime do
16067: LD_EXP 7
16071: PUSH
16072: LD_EXP 58
16076: AND
16077: IFFALSE 16112
16079: GO 16081
16081: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16082: LD_INT 28
16084: PPUSH
16085: LD_OWVAR 2
16089: PPUSH
16090: LD_INT 2
16092: PPUSH
16093: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16097: LD_INT 30
16099: PPUSH
16100: LD_OWVAR 2
16104: PPUSH
16105: LD_INT 2
16107: PPUSH
16108: CALL_OW 322
// end ;
16112: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16113: LD_EXP 7
16117: PUSH
16118: LD_EXP 59
16122: AND
16123: IFFALSE 16244
16125: GO 16127
16127: DISABLE
16128: LD_INT 0
16130: PPUSH
16131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16132: LD_ADDR_VAR 0 2
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_OWVAR 2
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 21
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 3
16161: PUSH
16162: LD_INT 23
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: LIST
16180: PPUSH
16181: CALL_OW 69
16185: ST_TO_ADDR
// if not tmp then
16186: LD_VAR 0 2
16190: NOT
16191: IFFALSE 16195
// exit ;
16193: GO 16244
// for i in tmp do
16195: LD_ADDR_VAR 0 1
16199: PUSH
16200: LD_VAR 0 2
16204: PUSH
16205: FOR_IN
16206: IFFALSE 16242
// begin if Crawls ( i ) then
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 318
16217: IFFALSE 16228
// ComWalk ( i ) ;
16219: LD_VAR 0 1
16223: PPUSH
16224: CALL_OW 138
// SetClass ( i , 2 ) ;
16228: LD_VAR 0 1
16232: PPUSH
16233: LD_INT 2
16235: PPUSH
16236: CALL_OW 336
// end ;
16240: GO 16205
16242: POP
16243: POP
// end ;
16244: PPOPN 2
16246: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16247: LD_EXP 7
16251: PUSH
16252: LD_EXP 60
16256: AND
16257: IFFALSE 16545
16259: GO 16261
16261: DISABLE
16262: LD_INT 0
16264: PPUSH
16265: PPUSH
16266: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16267: LD_OWVAR 2
16271: PPUSH
16272: LD_INT 9
16274: PPUSH
16275: LD_INT 1
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16285: LD_INT 9
16287: PPUSH
16288: LD_OWVAR 2
16292: PPUSH
16293: CALL_OW 343
// uc_side := 9 ;
16297: LD_ADDR_OWVAR 20
16301: PUSH
16302: LD_INT 9
16304: ST_TO_ADDR
// uc_nation := 2 ;
16305: LD_ADDR_OWVAR 21
16309: PUSH
16310: LD_INT 2
16312: ST_TO_ADDR
// hc_name := Dark Warrior ;
16313: LD_ADDR_OWVAR 26
16317: PUSH
16318: LD_STRING Dark Warrior
16320: ST_TO_ADDR
// hc_gallery :=  ;
16321: LD_ADDR_OWVAR 33
16325: PUSH
16326: LD_STRING 
16328: ST_TO_ADDR
// hc_noskilllimit := true ;
16329: LD_ADDR_OWVAR 76
16333: PUSH
16334: LD_INT 1
16336: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16337: LD_ADDR_OWVAR 31
16341: PUSH
16342: LD_INT 30
16344: PUSH
16345: LD_INT 30
16347: PUSH
16348: LD_INT 30
16350: PUSH
16351: LD_INT 30
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 3
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// hc_noskilllimit := false ;
16370: LD_ADDR_OWVAR 76
16374: PUSH
16375: LD_INT 0
16377: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16378: LD_VAR 0 3
16382: PPUSH
16383: LD_INT 1
16385: PPUSH
16386: CALL_OW 51
// ToLua ( playRanger() ) ;
16390: LD_STRING playRanger()
16392: PPUSH
16393: CALL_OW 559
// p := 0 ;
16397: LD_ADDR_VAR 0 2
16401: PUSH
16402: LD_INT 0
16404: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16405: LD_INT 35
16407: PPUSH
16408: CALL_OW 67
// p := p + 1 ;
16412: LD_ADDR_VAR 0 2
16416: PUSH
16417: LD_VAR 0 2
16421: PUSH
16422: LD_INT 1
16424: PLUS
16425: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16426: LD_VAR 0 3
16430: PPUSH
16431: CALL_OW 256
16435: PUSH
16436: LD_INT 1000
16438: LESS
16439: IFFALSE 16453
// SetLives ( un , 1000 ) ;
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_INT 1000
16448: PPUSH
16449: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16453: LD_VAR 0 3
16457: PPUSH
16458: LD_INT 81
16460: PUSH
16461: LD_OWVAR 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 91
16472: PUSH
16473: LD_VAR 0 3
16477: PUSH
16478: LD_INT 30
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PPUSH
16490: CALL_OW 69
16494: PPUSH
16495: LD_VAR 0 3
16499: PPUSH
16500: CALL_OW 74
16504: PPUSH
16505: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16509: LD_VAR 0 2
16513: PUSH
16514: LD_INT 80
16516: GREATER
16517: PUSH
16518: LD_VAR 0 3
16522: PPUSH
16523: CALL_OW 301
16527: OR
16528: IFFALSE 16405
// if un then
16530: LD_VAR 0 3
16534: IFFALSE 16545
// RemoveUnit ( un ) ;
16536: LD_VAR 0 3
16540: PPUSH
16541: CALL_OW 64
// end ;
16545: PPOPN 3
16547: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16548: LD_EXP 61
16552: IFFALSE 16668
16554: GO 16556
16556: DISABLE
16557: LD_INT 0
16559: PPUSH
16560: PPUSH
16561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: LD_INT 81
16569: PUSH
16570: LD_OWVAR 2
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PPUSH
16593: CALL_OW 69
16597: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16598: LD_STRING playComputer()
16600: PPUSH
16601: CALL_OW 559
// if not tmp then
16605: LD_VAR 0 2
16609: NOT
16610: IFFALSE 16614
// exit ;
16612: GO 16668
// for i in tmp do
16614: LD_ADDR_VAR 0 1
16618: PUSH
16619: LD_VAR 0 2
16623: PUSH
16624: FOR_IN
16625: IFFALSE 16666
// for j := 1 to 4 do
16627: LD_ADDR_VAR 0 3
16631: PUSH
16632: DOUBLE
16633: LD_INT 1
16635: DEC
16636: ST_TO_ADDR
16637: LD_INT 4
16639: PUSH
16640: FOR_TO
16641: IFFALSE 16662
// SetSkill ( i , j , 10 ) ;
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_INT 10
16655: PPUSH
16656: CALL_OW 237
16660: GO 16640
16662: POP
16663: POP
16664: GO 16624
16666: POP
16667: POP
// end ;
16668: PPOPN 3
16670: END
// every 0 0$1 trigger s30 do var i , tmp ;
16671: LD_EXP 62
16675: IFFALSE 16744
16677: GO 16679
16679: DISABLE
16680: LD_INT 0
16682: PPUSH
16683: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_OWVAR 2
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 69
16705: ST_TO_ADDR
// if not tmp then
16706: LD_VAR 0 2
16710: NOT
16711: IFFALSE 16715
// exit ;
16713: GO 16744
// for i in tmp do
16715: LD_ADDR_VAR 0 1
16719: PUSH
16720: LD_VAR 0 2
16724: PUSH
16725: FOR_IN
16726: IFFALSE 16742
// SetLives ( i , 300 ) ;
16728: LD_VAR 0 1
16732: PPUSH
16733: LD_INT 300
16735: PPUSH
16736: CALL_OW 234
16740: GO 16725
16742: POP
16743: POP
// end ;
16744: PPOPN 2
16746: END
// every 0 0$1 trigger s60 do var i , tmp ;
16747: LD_EXP 63
16751: IFFALSE 16820
16753: GO 16755
16755: DISABLE
16756: LD_INT 0
16758: PPUSH
16759: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16760: LD_ADDR_VAR 0 2
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_OWVAR 2
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: ST_TO_ADDR
// if not tmp then
16782: LD_VAR 0 2
16786: NOT
16787: IFFALSE 16791
// exit ;
16789: GO 16820
// for i in tmp do
16791: LD_ADDR_VAR 0 1
16795: PUSH
16796: LD_VAR 0 2
16800: PUSH
16801: FOR_IN
16802: IFFALSE 16818
// SetLives ( i , 600 ) ;
16804: LD_VAR 0 1
16808: PPUSH
16809: LD_INT 600
16811: PPUSH
16812: CALL_OW 234
16816: GO 16801
16818: POP
16819: POP
// end ;
16820: PPOPN 2
16822: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16823: LD_INT 0
16825: PPUSH
// case cmd of 301 :
16826: LD_VAR 0 1
16830: PUSH
16831: LD_INT 301
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 16871
16839: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16840: LD_VAR 0 6
16844: PPUSH
16845: LD_VAR 0 7
16849: PPUSH
16850: LD_VAR 0 8
16854: PPUSH
16855: LD_VAR 0 4
16859: PPUSH
16860: LD_VAR 0 5
16864: PPUSH
16865: CALL 18072 0 5
16869: GO 16992
16871: LD_INT 302
16873: DOUBLE
16874: EQUAL
16875: IFTRUE 16879
16877: GO 16916
16879: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16880: LD_VAR 0 6
16884: PPUSH
16885: LD_VAR 0 7
16889: PPUSH
16890: LD_VAR 0 8
16894: PPUSH
16895: LD_VAR 0 9
16899: PPUSH
16900: LD_VAR 0 4
16904: PPUSH
16905: LD_VAR 0 5
16909: PPUSH
16910: CALL 18163 0 6
16914: GO 16992
16916: LD_INT 303
16918: DOUBLE
16919: EQUAL
16920: IFTRUE 16924
16922: GO 16961
16924: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16925: LD_VAR 0 6
16929: PPUSH
16930: LD_VAR 0 7
16934: PPUSH
16935: LD_VAR 0 8
16939: PPUSH
16940: LD_VAR 0 9
16944: PPUSH
16945: LD_VAR 0 4
16949: PPUSH
16950: LD_VAR 0 5
16954: PPUSH
16955: CALL 16997 0 6
16959: GO 16992
16961: LD_INT 304
16963: DOUBLE
16964: EQUAL
16965: IFTRUE 16969
16967: GO 16991
16969: POP
// hHackTeleport ( unit , x , y ) ; end ;
16970: LD_VAR 0 2
16974: PPUSH
16975: LD_VAR 0 4
16979: PPUSH
16980: LD_VAR 0 5
16984: PPUSH
16985: CALL 18756 0 3
16989: GO 16992
16991: POP
// end ;
16992: LD_VAR 0 12
16996: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16997: LD_INT 0
16999: PPUSH
17000: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17001: LD_VAR 0 1
17005: PUSH
17006: LD_INT 1
17008: LESS
17009: PUSH
17010: LD_VAR 0 1
17014: PUSH
17015: LD_INT 3
17017: GREATER
17018: OR
17019: PUSH
17020: LD_VAR 0 5
17024: PPUSH
17025: LD_VAR 0 6
17029: PPUSH
17030: CALL_OW 428
17034: OR
17035: IFFALSE 17039
// exit ;
17037: GO 17759
// uc_side := your_side ;
17039: LD_ADDR_OWVAR 20
17043: PUSH
17044: LD_OWVAR 2
17048: ST_TO_ADDR
// uc_nation := nation ;
17049: LD_ADDR_OWVAR 21
17053: PUSH
17054: LD_VAR 0 1
17058: ST_TO_ADDR
// bc_level = 1 ;
17059: LD_ADDR_OWVAR 43
17063: PUSH
17064: LD_INT 1
17066: ST_TO_ADDR
// case btype of 1 :
17067: LD_VAR 0 2
17071: PUSH
17072: LD_INT 1
17074: DOUBLE
17075: EQUAL
17076: IFTRUE 17080
17078: GO 17091
17080: POP
// bc_type := b_depot ; 2 :
17081: LD_ADDR_OWVAR 42
17085: PUSH
17086: LD_INT 0
17088: ST_TO_ADDR
17089: GO 17703
17091: LD_INT 2
17093: DOUBLE
17094: EQUAL
17095: IFTRUE 17099
17097: GO 17110
17099: POP
// bc_type := b_warehouse ; 3 :
17100: LD_ADDR_OWVAR 42
17104: PUSH
17105: LD_INT 1
17107: ST_TO_ADDR
17108: GO 17703
17110: LD_INT 3
17112: DOUBLE
17113: EQUAL
17114: IFTRUE 17118
17116: GO 17129
17118: POP
// bc_type := b_lab ; 4 .. 9 :
17119: LD_ADDR_OWVAR 42
17123: PUSH
17124: LD_INT 6
17126: ST_TO_ADDR
17127: GO 17703
17129: LD_INT 4
17131: DOUBLE
17132: GREATEREQUAL
17133: IFFALSE 17141
17135: LD_INT 9
17137: DOUBLE
17138: LESSEQUAL
17139: IFTRUE 17143
17141: GO 17195
17143: POP
// begin bc_type := b_lab_half ;
17144: LD_ADDR_OWVAR 42
17148: PUSH
17149: LD_INT 7
17151: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17152: LD_ADDR_OWVAR 44
17156: PUSH
17157: LD_INT 10
17159: PUSH
17160: LD_INT 11
17162: PUSH
17163: LD_INT 12
17165: PUSH
17166: LD_INT 15
17168: PUSH
17169: LD_INT 14
17171: PUSH
17172: LD_INT 13
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: LD_VAR 0 2
17187: PUSH
17188: LD_INT 3
17190: MINUS
17191: ARRAY
17192: ST_TO_ADDR
// end ; 10 .. 13 :
17193: GO 17703
17195: LD_INT 10
17197: DOUBLE
17198: GREATEREQUAL
17199: IFFALSE 17207
17201: LD_INT 13
17203: DOUBLE
17204: LESSEQUAL
17205: IFTRUE 17209
17207: GO 17286
17209: POP
// begin bc_type := b_lab_full ;
17210: LD_ADDR_OWVAR 42
17214: PUSH
17215: LD_INT 8
17217: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17218: LD_ADDR_OWVAR 44
17222: PUSH
17223: LD_INT 10
17225: PUSH
17226: LD_INT 12
17228: PUSH
17229: LD_INT 14
17231: PUSH
17232: LD_INT 13
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: LD_VAR 0 2
17245: PUSH
17246: LD_INT 9
17248: MINUS
17249: ARRAY
17250: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17251: LD_ADDR_OWVAR 45
17255: PUSH
17256: LD_INT 11
17258: PUSH
17259: LD_INT 15
17261: PUSH
17262: LD_INT 12
17264: PUSH
17265: LD_INT 15
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: LD_VAR 0 2
17278: PUSH
17279: LD_INT 9
17281: MINUS
17282: ARRAY
17283: ST_TO_ADDR
// end ; 14 :
17284: GO 17703
17286: LD_INT 14
17288: DOUBLE
17289: EQUAL
17290: IFTRUE 17294
17292: GO 17305
17294: POP
// bc_type := b_workshop ; 15 :
17295: LD_ADDR_OWVAR 42
17299: PUSH
17300: LD_INT 2
17302: ST_TO_ADDR
17303: GO 17703
17305: LD_INT 15
17307: DOUBLE
17308: EQUAL
17309: IFTRUE 17313
17311: GO 17324
17313: POP
// bc_type := b_factory ; 16 :
17314: LD_ADDR_OWVAR 42
17318: PUSH
17319: LD_INT 3
17321: ST_TO_ADDR
17322: GO 17703
17324: LD_INT 16
17326: DOUBLE
17327: EQUAL
17328: IFTRUE 17332
17330: GO 17343
17332: POP
// bc_type := b_ext_gun ; 17 :
17333: LD_ADDR_OWVAR 42
17337: PUSH
17338: LD_INT 17
17340: ST_TO_ADDR
17341: GO 17703
17343: LD_INT 17
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17379
17351: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17352: LD_ADDR_OWVAR 42
17356: PUSH
17357: LD_INT 19
17359: PUSH
17360: LD_INT 23
17362: PUSH
17363: LD_INT 19
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: PUSH
17371: LD_VAR 0 1
17375: ARRAY
17376: ST_TO_ADDR
17377: GO 17703
17379: LD_INT 18
17381: DOUBLE
17382: EQUAL
17383: IFTRUE 17387
17385: GO 17398
17387: POP
// bc_type := b_ext_radar ; 19 :
17388: LD_ADDR_OWVAR 42
17392: PUSH
17393: LD_INT 20
17395: ST_TO_ADDR
17396: GO 17703
17398: LD_INT 19
17400: DOUBLE
17401: EQUAL
17402: IFTRUE 17406
17404: GO 17417
17406: POP
// bc_type := b_ext_radio ; 20 :
17407: LD_ADDR_OWVAR 42
17411: PUSH
17412: LD_INT 22
17414: ST_TO_ADDR
17415: GO 17703
17417: LD_INT 20
17419: DOUBLE
17420: EQUAL
17421: IFTRUE 17425
17423: GO 17436
17425: POP
// bc_type := b_ext_siberium ; 21 :
17426: LD_ADDR_OWVAR 42
17430: PUSH
17431: LD_INT 21
17433: ST_TO_ADDR
17434: GO 17703
17436: LD_INT 21
17438: DOUBLE
17439: EQUAL
17440: IFTRUE 17444
17442: GO 17455
17444: POP
// bc_type := b_ext_computer ; 22 :
17445: LD_ADDR_OWVAR 42
17449: PUSH
17450: LD_INT 24
17452: ST_TO_ADDR
17453: GO 17703
17455: LD_INT 22
17457: DOUBLE
17458: EQUAL
17459: IFTRUE 17463
17461: GO 17474
17463: POP
// bc_type := b_ext_track ; 23 :
17464: LD_ADDR_OWVAR 42
17468: PUSH
17469: LD_INT 16
17471: ST_TO_ADDR
17472: GO 17703
17474: LD_INT 23
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17493
17482: POP
// bc_type := b_ext_laser ; 24 :
17483: LD_ADDR_OWVAR 42
17487: PUSH
17488: LD_INT 25
17490: ST_TO_ADDR
17491: GO 17703
17493: LD_INT 24
17495: DOUBLE
17496: EQUAL
17497: IFTRUE 17501
17499: GO 17512
17501: POP
// bc_type := b_control_tower ; 25 :
17502: LD_ADDR_OWVAR 42
17506: PUSH
17507: LD_INT 36
17509: ST_TO_ADDR
17510: GO 17703
17512: LD_INT 25
17514: DOUBLE
17515: EQUAL
17516: IFTRUE 17520
17518: GO 17531
17520: POP
// bc_type := b_breastwork ; 26 :
17521: LD_ADDR_OWVAR 42
17525: PUSH
17526: LD_INT 31
17528: ST_TO_ADDR
17529: GO 17703
17531: LD_INT 26
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17539
17537: GO 17550
17539: POP
// bc_type := b_bunker ; 27 :
17540: LD_ADDR_OWVAR 42
17544: PUSH
17545: LD_INT 32
17547: ST_TO_ADDR
17548: GO 17703
17550: LD_INT 27
17552: DOUBLE
17553: EQUAL
17554: IFTRUE 17558
17556: GO 17569
17558: POP
// bc_type := b_turret ; 28 :
17559: LD_ADDR_OWVAR 42
17563: PUSH
17564: LD_INT 33
17566: ST_TO_ADDR
17567: GO 17703
17569: LD_INT 28
17571: DOUBLE
17572: EQUAL
17573: IFTRUE 17577
17575: GO 17588
17577: POP
// bc_type := b_armoury ; 29 :
17578: LD_ADDR_OWVAR 42
17582: PUSH
17583: LD_INT 4
17585: ST_TO_ADDR
17586: GO 17703
17588: LD_INT 29
17590: DOUBLE
17591: EQUAL
17592: IFTRUE 17596
17594: GO 17607
17596: POP
// bc_type := b_barracks ; 30 :
17597: LD_ADDR_OWVAR 42
17601: PUSH
17602: LD_INT 5
17604: ST_TO_ADDR
17605: GO 17703
17607: LD_INT 30
17609: DOUBLE
17610: EQUAL
17611: IFTRUE 17615
17613: GO 17626
17615: POP
// bc_type := b_solar_power ; 31 :
17616: LD_ADDR_OWVAR 42
17620: PUSH
17621: LD_INT 27
17623: ST_TO_ADDR
17624: GO 17703
17626: LD_INT 31
17628: DOUBLE
17629: EQUAL
17630: IFTRUE 17634
17632: GO 17645
17634: POP
// bc_type := b_oil_power ; 32 :
17635: LD_ADDR_OWVAR 42
17639: PUSH
17640: LD_INT 26
17642: ST_TO_ADDR
17643: GO 17703
17645: LD_INT 32
17647: DOUBLE
17648: EQUAL
17649: IFTRUE 17653
17651: GO 17664
17653: POP
// bc_type := b_siberite_power ; 33 :
17654: LD_ADDR_OWVAR 42
17658: PUSH
17659: LD_INT 28
17661: ST_TO_ADDR
17662: GO 17703
17664: LD_INT 33
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 17683
17672: POP
// bc_type := b_oil_mine ; 34 :
17673: LD_ADDR_OWVAR 42
17677: PUSH
17678: LD_INT 29
17680: ST_TO_ADDR
17681: GO 17703
17683: LD_INT 34
17685: DOUBLE
17686: EQUAL
17687: IFTRUE 17691
17689: GO 17702
17691: POP
// bc_type := b_siberite_mine ; end ;
17692: LD_ADDR_OWVAR 42
17696: PUSH
17697: LD_INT 30
17699: ST_TO_ADDR
17700: GO 17703
17702: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17703: LD_ADDR_VAR 0 8
17707: PUSH
17708: LD_VAR 0 5
17712: PPUSH
17713: LD_VAR 0 6
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: CALL_OW 47
17727: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17728: LD_OWVAR 42
17732: PUSH
17733: LD_INT 32
17735: PUSH
17736: LD_INT 33
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: IN
17743: IFFALSE 17759
// PlaceWeaponTurret ( b , weapon ) ;
17745: LD_VAR 0 8
17749: PPUSH
17750: LD_VAR 0 4
17754: PPUSH
17755: CALL_OW 431
// end ;
17759: LD_VAR 0 7
17763: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17764: LD_INT 0
17766: PPUSH
17767: PPUSH
17768: PPUSH
17769: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 22
17777: PUSH
17778: LD_OWVAR 2
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 30
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 30
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: ST_TO_ADDR
// if not tmp then
17824: LD_VAR 0 4
17828: NOT
17829: IFFALSE 17833
// exit ;
17831: GO 17892
// for i in tmp do
17833: LD_ADDR_VAR 0 2
17837: PUSH
17838: LD_VAR 0 4
17842: PUSH
17843: FOR_IN
17844: IFFALSE 17890
// for j = 1 to 3 do
17846: LD_ADDR_VAR 0 3
17850: PUSH
17851: DOUBLE
17852: LD_INT 1
17854: DEC
17855: ST_TO_ADDR
17856: LD_INT 3
17858: PUSH
17859: FOR_TO
17860: IFFALSE 17886
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17862: LD_VAR 0 2
17866: PPUSH
17867: CALL_OW 274
17871: PPUSH
17872: LD_VAR 0 3
17876: PPUSH
17877: LD_INT 99999
17879: PPUSH
17880: CALL_OW 277
17884: GO 17859
17886: POP
17887: POP
17888: GO 17843
17890: POP
17891: POP
// end ;
17892: LD_VAR 0 1
17896: RET
// export function hHackSetLevel10 ; var i , j ; begin
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
17901: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17902: LD_ADDR_VAR 0 2
17906: PUSH
17907: LD_INT 21
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PPUSH
17917: CALL_OW 69
17921: PUSH
17922: FOR_IN
17923: IFFALSE 17975
// if IsSelected ( i ) then
17925: LD_VAR 0 2
17929: PPUSH
17930: CALL_OW 306
17934: IFFALSE 17973
// begin for j := 1 to 4 do
17936: LD_ADDR_VAR 0 3
17940: PUSH
17941: DOUBLE
17942: LD_INT 1
17944: DEC
17945: ST_TO_ADDR
17946: LD_INT 4
17948: PUSH
17949: FOR_TO
17950: IFFALSE 17971
// SetSkill ( i , j , 10 ) ;
17952: LD_VAR 0 2
17956: PPUSH
17957: LD_VAR 0 3
17961: PPUSH
17962: LD_INT 10
17964: PPUSH
17965: CALL_OW 237
17969: GO 17949
17971: POP
17972: POP
// end ;
17973: GO 17922
17975: POP
17976: POP
// end ;
17977: LD_VAR 0 1
17981: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17982: LD_INT 0
17984: PPUSH
17985: PPUSH
17986: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17987: LD_ADDR_VAR 0 2
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_OWVAR 2
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 21
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: PUSH
18023: FOR_IN
18024: IFFALSE 18065
// begin for j := 1 to 4 do
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: DOUBLE
18032: LD_INT 1
18034: DEC
18035: ST_TO_ADDR
18036: LD_INT 4
18038: PUSH
18039: FOR_TO
18040: IFFALSE 18061
// SetSkill ( i , j , 10 ) ;
18042: LD_VAR 0 2
18046: PPUSH
18047: LD_VAR 0 3
18051: PPUSH
18052: LD_INT 10
18054: PPUSH
18055: CALL_OW 237
18059: GO 18039
18061: POP
18062: POP
// end ;
18063: GO 18023
18065: POP
18066: POP
// end ;
18067: LD_VAR 0 1
18071: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18072: LD_INT 0
18074: PPUSH
// uc_side := your_side ;
18075: LD_ADDR_OWVAR 20
18079: PUSH
18080: LD_OWVAR 2
18084: ST_TO_ADDR
// uc_nation := nation ;
18085: LD_ADDR_OWVAR 21
18089: PUSH
18090: LD_VAR 0 1
18094: ST_TO_ADDR
// InitHc ;
18095: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18099: LD_INT 0
18101: PPUSH
18102: LD_VAR 0 2
18106: PPUSH
18107: LD_VAR 0 3
18111: PPUSH
18112: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18116: LD_VAR 0 4
18120: PPUSH
18121: LD_VAR 0 5
18125: PPUSH
18126: CALL_OW 428
18130: PUSH
18131: LD_INT 0
18133: EQUAL
18134: IFFALSE 18158
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18136: CALL_OW 44
18140: PPUSH
18141: LD_VAR 0 4
18145: PPUSH
18146: LD_VAR 0 5
18150: PPUSH
18151: LD_INT 1
18153: PPUSH
18154: CALL_OW 48
// end ;
18158: LD_VAR 0 6
18162: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18163: LD_INT 0
18165: PPUSH
18166: PPUSH
// uc_side := your_side ;
18167: LD_ADDR_OWVAR 20
18171: PUSH
18172: LD_OWVAR 2
18176: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: LD_INT 3
18190: PUSH
18191: LD_INT 4
18193: PUSH
18194: LD_INT 5
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: IN
18204: IFFALSE 18216
// uc_nation := nation_american else
18206: LD_ADDR_OWVAR 21
18210: PUSH
18211: LD_INT 1
18213: ST_TO_ADDR
18214: GO 18259
// if chassis in [ 11 , 12 , 13 , 14 ] then
18216: LD_VAR 0 1
18220: PUSH
18221: LD_INT 11
18223: PUSH
18224: LD_INT 12
18226: PUSH
18227: LD_INT 13
18229: PUSH
18230: LD_INT 14
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: IN
18239: IFFALSE 18251
// uc_nation := nation_arabian else
18241: LD_ADDR_OWVAR 21
18245: PUSH
18246: LD_INT 2
18248: ST_TO_ADDR
18249: GO 18259
// uc_nation := nation_russian ;
18251: LD_ADDR_OWVAR 21
18255: PUSH
18256: LD_INT 3
18258: ST_TO_ADDR
// vc_chassis := chassis ;
18259: LD_ADDR_OWVAR 37
18263: PUSH
18264: LD_VAR 0 1
18268: ST_TO_ADDR
// vc_engine := engine ;
18269: LD_ADDR_OWVAR 39
18273: PUSH
18274: LD_VAR 0 2
18278: ST_TO_ADDR
// vc_control := control ;
18279: LD_ADDR_OWVAR 38
18283: PUSH
18284: LD_VAR 0 3
18288: ST_TO_ADDR
// vc_weapon := weapon ;
18289: LD_ADDR_OWVAR 40
18293: PUSH
18294: LD_VAR 0 4
18298: ST_TO_ADDR
// un := CreateVehicle ;
18299: LD_ADDR_VAR 0 8
18303: PUSH
18304: CALL_OW 45
18308: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18309: LD_VAR 0 8
18313: PPUSH
18314: LD_INT 0
18316: PPUSH
18317: LD_INT 5
18319: PPUSH
18320: CALL_OW 12
18324: PPUSH
18325: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18329: LD_VAR 0 8
18333: PPUSH
18334: LD_VAR 0 5
18338: PPUSH
18339: LD_VAR 0 6
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 48
// end ;
18351: LD_VAR 0 7
18355: RET
// export hInvincible ; every 1 do
18356: GO 18358
18358: DISABLE
// hInvincible := [ ] ;
18359: LD_ADDR_EXP 64
18363: PUSH
18364: EMPTY
18365: ST_TO_ADDR
18366: END
// every 10 do var i ;
18367: GO 18369
18369: DISABLE
18370: LD_INT 0
18372: PPUSH
// begin enable ;
18373: ENABLE
// if not hInvincible then
18374: LD_EXP 64
18378: NOT
18379: IFFALSE 18383
// exit ;
18381: GO 18427
// for i in hInvincible do
18383: LD_ADDR_VAR 0 1
18387: PUSH
18388: LD_EXP 64
18392: PUSH
18393: FOR_IN
18394: IFFALSE 18425
// if GetLives ( i ) < 1000 then
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 256
18405: PUSH
18406: LD_INT 1000
18408: LESS
18409: IFFALSE 18423
// SetLives ( i , 1000 ) ;
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_INT 1000
18418: PPUSH
18419: CALL_OW 234
18423: GO 18393
18425: POP
18426: POP
// end ;
18427: PPOPN 1
18429: END
// export function hHackInvincible ; var i ; begin
18430: LD_INT 0
18432: PPUSH
18433: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18434: LD_ADDR_VAR 0 2
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 21
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: FOR_IN
18473: IFFALSE 18534
// if IsSelected ( i ) then
18475: LD_VAR 0 2
18479: PPUSH
18480: CALL_OW 306
18484: IFFALSE 18532
// begin if i in hInvincible then
18486: LD_VAR 0 2
18490: PUSH
18491: LD_EXP 64
18495: IN
18496: IFFALSE 18516
// hInvincible := hInvincible diff i else
18498: LD_ADDR_EXP 64
18502: PUSH
18503: LD_EXP 64
18507: PUSH
18508: LD_VAR 0 2
18512: DIFF
18513: ST_TO_ADDR
18514: GO 18532
// hInvincible := hInvincible union i ;
18516: LD_ADDR_EXP 64
18520: PUSH
18521: LD_EXP 64
18525: PUSH
18526: LD_VAR 0 2
18530: UNION
18531: ST_TO_ADDR
// end ;
18532: GO 18472
18534: POP
18535: POP
// end ;
18536: LD_VAR 0 1
18540: RET
// export function hHackInvisible ; var i , j ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
18545: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18546: LD_ADDR_VAR 0 2
18550: PUSH
18551: LD_INT 21
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 69
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18591
// if IsSelected ( i ) then
18569: LD_VAR 0 2
18573: PPUSH
18574: CALL_OW 306
18578: IFFALSE 18589
// ComForceInvisible ( i ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 496
18589: GO 18566
18591: POP
18592: POP
// end ;
18593: LD_VAR 0 1
18597: RET
// export function hHackChangeYourSide ; begin
18598: LD_INT 0
18600: PPUSH
// if your_side = 8 then
18601: LD_OWVAR 2
18605: PUSH
18606: LD_INT 8
18608: EQUAL
18609: IFFALSE 18621
// your_side := 0 else
18611: LD_ADDR_OWVAR 2
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
18619: GO 18635
// your_side := your_side + 1 ;
18621: LD_ADDR_OWVAR 2
18625: PUSH
18626: LD_OWVAR 2
18630: PUSH
18631: LD_INT 1
18633: PLUS
18634: ST_TO_ADDR
// end ;
18635: LD_VAR 0 1
18639: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18640: LD_INT 0
18642: PPUSH
18643: PPUSH
18644: PPUSH
// for i in all_units do
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_OWVAR 3
18654: PUSH
18655: FOR_IN
18656: IFFALSE 18734
// if IsSelected ( i ) then
18658: LD_VAR 0 2
18662: PPUSH
18663: CALL_OW 306
18667: IFFALSE 18732
// begin j := GetSide ( i ) ;
18669: LD_ADDR_VAR 0 3
18673: PUSH
18674: LD_VAR 0 2
18678: PPUSH
18679: CALL_OW 255
18683: ST_TO_ADDR
// if j = 8 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_INT 8
18691: EQUAL
18692: IFFALSE 18704
// j := 0 else
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_INT 0
18701: ST_TO_ADDR
18702: GO 18718
// j := j + 1 ;
18704: LD_ADDR_VAR 0 3
18708: PUSH
18709: LD_VAR 0 3
18713: PUSH
18714: LD_INT 1
18716: PLUS
18717: ST_TO_ADDR
// SetSide ( i , j ) ;
18718: LD_VAR 0 2
18722: PPUSH
18723: LD_VAR 0 3
18727: PPUSH
18728: CALL_OW 235
// end ;
18732: GO 18655
18734: POP
18735: POP
// end ;
18736: LD_VAR 0 1
18740: RET
// export function hHackFog ; begin
18741: LD_INT 0
18743: PPUSH
// FogOff ( true ) ;
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 344
// end ;
18751: LD_VAR 0 1
18755: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18756: LD_INT 0
18758: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL_OW 483
// CenterOnXY ( x , y ) ;
18784: LD_VAR 0 2
18788: PPUSH
18789: LD_VAR 0 3
18793: PPUSH
18794: CALL_OW 84
// end ;
18798: LD_VAR 0 4
18802: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18803: LD_INT 0
18805: PPUSH
18806: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18807: LD_VAR 0 1
18811: NOT
18812: PUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: CALL_OW 488
18827: NOT
18828: OR
18829: PUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL_OW 266
18839: PUSH
18840: LD_INT 3
18842: NONEQUAL
18843: PUSH
18844: LD_VAR 0 1
18848: PPUSH
18849: CALL_OW 247
18853: PUSH
18854: LD_INT 1
18856: EQUAL
18857: NOT
18858: AND
18859: OR
18860: IFFALSE 18864
// exit ;
18862: GO 19013
// if GetType ( factory ) = unit_human then
18864: LD_VAR 0 1
18868: PPUSH
18869: CALL_OW 247
18873: PUSH
18874: LD_INT 1
18876: EQUAL
18877: IFFALSE 18894
// factory := IsInUnit ( factory ) ;
18879: LD_ADDR_VAR 0 1
18883: PUSH
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL_OW 310
18893: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 266
18903: PUSH
18904: LD_INT 3
18906: NONEQUAL
18907: IFFALSE 18911
// exit ;
18909: GO 19013
// if HexInfo ( x , y ) = factory then
18911: LD_VAR 0 2
18915: PPUSH
18916: LD_VAR 0 3
18920: PPUSH
18921: CALL_OW 428
18925: PUSH
18926: LD_VAR 0 1
18930: EQUAL
18931: IFFALSE 18958
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18933: LD_ADDR_EXP 65
18937: PUSH
18938: LD_EXP 65
18942: PPUSH
18943: LD_VAR 0 1
18947: PPUSH
18948: LD_INT 0
18950: PPUSH
18951: CALL_OW 1
18955: ST_TO_ADDR
18956: GO 19009
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18958: LD_ADDR_EXP 65
18962: PUSH
18963: LD_EXP 65
18967: PPUSH
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 255
18982: PUSH
18983: LD_VAR 0 1
18987: PUSH
18988: LD_VAR 0 2
18992: PUSH
18993: LD_VAR 0 3
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19009: CALL 19018 0 0
// end ;
19013: LD_VAR 0 4
19017: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19018: LD_INT 0
19020: PPUSH
19021: PPUSH
19022: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19023: LD_STRING resetFactoryWaypoint();
19025: PPUSH
19026: CALL_OW 559
// if factoryWaypoints then
19030: LD_EXP 65
19034: IFFALSE 19160
// begin list := PrepareArray ( factoryWaypoints ) ;
19036: LD_ADDR_VAR 0 3
19040: PUSH
19041: LD_EXP 65
19045: PPUSH
19046: CALL 65610 0 1
19050: ST_TO_ADDR
// for i := 1 to list do
19051: LD_ADDR_VAR 0 2
19055: PUSH
19056: DOUBLE
19057: LD_INT 1
19059: DEC
19060: ST_TO_ADDR
19061: LD_VAR 0 3
19065: PUSH
19066: FOR_TO
19067: IFFALSE 19158
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19069: LD_STRING setFactoryWaypointXY(
19071: PUSH
19072: LD_VAR 0 3
19076: PUSH
19077: LD_VAR 0 2
19081: ARRAY
19082: PUSH
19083: LD_INT 1
19085: ARRAY
19086: STR
19087: PUSH
19088: LD_STRING ,
19090: STR
19091: PUSH
19092: LD_VAR 0 3
19096: PUSH
19097: LD_VAR 0 2
19101: ARRAY
19102: PUSH
19103: LD_INT 2
19105: ARRAY
19106: STR
19107: PUSH
19108: LD_STRING ,
19110: STR
19111: PUSH
19112: LD_VAR 0 3
19116: PUSH
19117: LD_VAR 0 2
19121: ARRAY
19122: PUSH
19123: LD_INT 3
19125: ARRAY
19126: STR
19127: PUSH
19128: LD_STRING ,
19130: STR
19131: PUSH
19132: LD_VAR 0 3
19136: PUSH
19137: LD_VAR 0 2
19141: ARRAY
19142: PUSH
19143: LD_INT 4
19145: ARRAY
19146: STR
19147: PUSH
19148: LD_STRING )
19150: STR
19151: PPUSH
19152: CALL_OW 559
19156: GO 19066
19158: POP
19159: POP
// end ; end ;
19160: LD_VAR 0 1
19164: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19165: LD_INT 0
19167: PPUSH
// if HexInfo ( x , y ) = warehouse then
19168: LD_VAR 0 2
19172: PPUSH
19173: LD_VAR 0 3
19177: PPUSH
19178: CALL_OW 428
19182: PUSH
19183: LD_VAR 0 1
19187: EQUAL
19188: IFFALSE 19215
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19190: LD_ADDR_EXP 66
19194: PUSH
19195: LD_EXP 66
19199: PPUSH
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_INT 0
19207: PPUSH
19208: CALL_OW 1
19212: ST_TO_ADDR
19213: GO 19266
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19215: LD_ADDR_EXP 66
19219: PUSH
19220: LD_EXP 66
19224: PPUSH
19225: LD_VAR 0 1
19229: PPUSH
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 255
19239: PUSH
19240: LD_VAR 0 1
19244: PUSH
19245: LD_VAR 0 2
19249: PUSH
19250: LD_VAR 0 3
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 1
19265: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19266: CALL 19275 0 0
// end ;
19270: LD_VAR 0 4
19274: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19275: LD_INT 0
19277: PPUSH
19278: PPUSH
19279: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19280: LD_STRING resetWarehouseGatheringPoints();
19282: PPUSH
19283: CALL_OW 559
// if warehouseGatheringPoints then
19287: LD_EXP 66
19291: IFFALSE 19417
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_EXP 66
19302: PPUSH
19303: CALL 65610 0 1
19307: ST_TO_ADDR
// for i := 1 to list do
19308: LD_ADDR_VAR 0 2
19312: PUSH
19313: DOUBLE
19314: LD_INT 1
19316: DEC
19317: ST_TO_ADDR
19318: LD_VAR 0 3
19322: PUSH
19323: FOR_TO
19324: IFFALSE 19415
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19326: LD_STRING setWarehouseGatheringPointXY(
19328: PUSH
19329: LD_VAR 0 3
19333: PUSH
19334: LD_VAR 0 2
19338: ARRAY
19339: PUSH
19340: LD_INT 1
19342: ARRAY
19343: STR
19344: PUSH
19345: LD_STRING ,
19347: STR
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_VAR 0 2
19358: ARRAY
19359: PUSH
19360: LD_INT 2
19362: ARRAY
19363: STR
19364: PUSH
19365: LD_STRING ,
19367: STR
19368: PUSH
19369: LD_VAR 0 3
19373: PUSH
19374: LD_VAR 0 2
19378: ARRAY
19379: PUSH
19380: LD_INT 3
19382: ARRAY
19383: STR
19384: PUSH
19385: LD_STRING ,
19387: STR
19388: PUSH
19389: LD_VAR 0 3
19393: PUSH
19394: LD_VAR 0 2
19398: ARRAY
19399: PUSH
19400: LD_INT 4
19402: ARRAY
19403: STR
19404: PUSH
19405: LD_STRING )
19407: STR
19408: PPUSH
19409: CALL_OW 559
19413: GO 19323
19415: POP
19416: POP
// end ; end ;
19417: LD_VAR 0 1
19421: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19422: LD_EXP 66
19426: IFFALSE 20111
19428: GO 19430
19430: DISABLE
19431: LD_INT 0
19433: PPUSH
19434: PPUSH
19435: PPUSH
19436: PPUSH
19437: PPUSH
19438: PPUSH
19439: PPUSH
19440: PPUSH
19441: PPUSH
// begin enable ;
19442: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_EXP 66
19452: PPUSH
19453: CALL 65610 0 1
19457: ST_TO_ADDR
// if not list then
19458: LD_VAR 0 3
19462: NOT
19463: IFFALSE 19467
// exit ;
19465: GO 20111
// for i := 1 to list do
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: DOUBLE
19473: LD_INT 1
19475: DEC
19476: ST_TO_ADDR
19477: LD_VAR 0 3
19481: PUSH
19482: FOR_TO
19483: IFFALSE 20109
// begin depot := list [ i ] [ 2 ] ;
19485: LD_ADDR_VAR 0 8
19489: PUSH
19490: LD_VAR 0 3
19494: PUSH
19495: LD_VAR 0 1
19499: ARRAY
19500: PUSH
19501: LD_INT 2
19503: ARRAY
19504: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19505: LD_ADDR_VAR 0 5
19509: PUSH
19510: LD_VAR 0 3
19514: PUSH
19515: LD_VAR 0 1
19519: ARRAY
19520: PUSH
19521: LD_INT 1
19523: ARRAY
19524: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19525: LD_VAR 0 8
19529: PPUSH
19530: CALL_OW 301
19534: PUSH
19535: LD_VAR 0 5
19539: PUSH
19540: LD_VAR 0 8
19544: PPUSH
19545: CALL_OW 255
19549: NONEQUAL
19550: OR
19551: IFFALSE 19580
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19553: LD_ADDR_EXP 66
19557: PUSH
19558: LD_EXP 66
19562: PPUSH
19563: LD_VAR 0 8
19567: PPUSH
19568: LD_INT 0
19570: PPUSH
19571: CALL_OW 1
19575: ST_TO_ADDR
// exit ;
19576: POP
19577: POP
19578: GO 20111
// end ; x := list [ i ] [ 3 ] ;
19580: LD_ADDR_VAR 0 6
19584: PUSH
19585: LD_VAR 0 3
19589: PUSH
19590: LD_VAR 0 1
19594: ARRAY
19595: PUSH
19596: LD_INT 3
19598: ARRAY
19599: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19600: LD_ADDR_VAR 0 7
19604: PUSH
19605: LD_VAR 0 3
19609: PUSH
19610: LD_VAR 0 1
19614: ARRAY
19615: PUSH
19616: LD_INT 4
19618: ARRAY
19619: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19620: LD_ADDR_VAR 0 9
19624: PUSH
19625: LD_VAR 0 6
19629: PPUSH
19630: LD_VAR 0 7
19634: PPUSH
19635: LD_INT 16
19637: PPUSH
19638: CALL 64198 0 3
19642: ST_TO_ADDR
// if not cratesNearbyPoint then
19643: LD_VAR 0 9
19647: NOT
19648: IFFALSE 19654
// exit ;
19650: POP
19651: POP
19652: GO 20111
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19654: LD_ADDR_VAR 0 4
19658: PUSH
19659: LD_INT 22
19661: PUSH
19662: LD_VAR 0 5
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 3
19673: PUSH
19674: LD_INT 60
19676: PUSH
19677: EMPTY
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 91
19686: PUSH
19687: LD_VAR 0 8
19691: PUSH
19692: LD_INT 6
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 25
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 25
19715: PUSH
19716: LD_INT 16
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: PUSH
19739: LD_VAR 0 8
19743: PPUSH
19744: CALL_OW 313
19748: PPUSH
19749: LD_INT 3
19751: PUSH
19752: LD_INT 60
19754: PUSH
19755: EMPTY
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 25
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 25
19777: PUSH
19778: LD_INT 16
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PPUSH
19794: CALL_OW 72
19798: UNION
19799: ST_TO_ADDR
// if tmp then
19800: LD_VAR 0 4
19804: IFFALSE 19884
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19806: LD_ADDR_VAR 0 4
19810: PUSH
19811: LD_VAR 0 4
19815: PPUSH
19816: LD_INT 3
19818: PPUSH
19819: CALL 62167 0 2
19823: ST_TO_ADDR
// for j in tmp do
19824: LD_ADDR_VAR 0 2
19828: PUSH
19829: LD_VAR 0 4
19833: PUSH
19834: FOR_IN
19835: IFFALSE 19878
// begin if IsInUnit ( j ) then
19837: LD_VAR 0 2
19841: PPUSH
19842: CALL_OW 310
19846: IFFALSE 19857
// ComExit ( j ) ;
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL 62250 0 1
// AddComCollect ( j , x , y ) ;
19857: LD_VAR 0 2
19861: PPUSH
19862: LD_VAR 0 6
19866: PPUSH
19867: LD_VAR 0 7
19871: PPUSH
19872: CALL_OW 177
// end ;
19876: GO 19834
19878: POP
19879: POP
// exit ;
19880: POP
19881: POP
19882: GO 20111
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19884: LD_ADDR_VAR 0 4
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_VAR 0 5
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 91
19903: PUSH
19904: LD_VAR 0 8
19908: PUSH
19909: LD_INT 8
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: LD_INT 34
19922: PUSH
19923: LD_INT 12
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 34
19932: PUSH
19933: LD_INT 51
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 34
19942: PUSH
19943: LD_INT 32
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 34
19952: PUSH
19953: LD_INT 89
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: LIST
19971: PPUSH
19972: CALL_OW 69
19976: ST_TO_ADDR
// if tmp then
19977: LD_VAR 0 4
19981: IFFALSE 20107
// begin for j in tmp do
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: LD_VAR 0 4
19992: PUSH
19993: FOR_IN
19994: IFFALSE 20105
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19996: LD_VAR 0 2
20000: PPUSH
20001: CALL_OW 262
20005: PUSH
20006: LD_INT 3
20008: EQUAL
20009: PUSH
20010: LD_VAR 0 2
20014: PPUSH
20015: CALL_OW 261
20019: PUSH
20020: LD_INT 20
20022: GREATER
20023: OR
20024: PUSH
20025: LD_VAR 0 2
20029: PPUSH
20030: CALL_OW 314
20034: NOT
20035: AND
20036: PUSH
20037: LD_VAR 0 2
20041: PPUSH
20042: CALL_OW 263
20046: PUSH
20047: LD_INT 1
20049: NONEQUAL
20050: PUSH
20051: LD_VAR 0 2
20055: PPUSH
20056: CALL_OW 311
20060: OR
20061: AND
20062: IFFALSE 20103
// begin ComCollect ( j , x , y ) ;
20064: LD_VAR 0 2
20068: PPUSH
20069: LD_VAR 0 6
20073: PPUSH
20074: LD_VAR 0 7
20078: PPUSH
20079: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20083: LD_VAR 0 2
20087: PPUSH
20088: LD_VAR 0 8
20092: PPUSH
20093: CALL_OW 172
// exit ;
20097: POP
20098: POP
20099: POP
20100: POP
20101: GO 20111
// end ;
20103: GO 19993
20105: POP
20106: POP
// end ; end ;
20107: GO 19482
20109: POP
20110: POP
// end ; end_of_file
20111: PPOPN 9
20113: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20114: LD_INT 0
20116: PPUSH
20117: PPUSH
20118: PPUSH
20119: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20120: LD_VAR 0 1
20124: PPUSH
20125: CALL_OW 264
20129: PUSH
20130: LD_INT 91
20132: EQUAL
20133: IFFALSE 20205
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20135: LD_INT 68
20137: PPUSH
20138: LD_VAR 0 1
20142: PPUSH
20143: CALL_OW 255
20147: PPUSH
20148: CALL_OW 321
20152: PUSH
20153: LD_INT 2
20155: EQUAL
20156: IFFALSE 20168
// eff := 70 else
20158: LD_ADDR_VAR 0 4
20162: PUSH
20163: LD_INT 70
20165: ST_TO_ADDR
20166: GO 20176
// eff := 30 ;
20168: LD_ADDR_VAR 0 4
20172: PUSH
20173: LD_INT 30
20175: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20176: LD_VAR 0 1
20180: PPUSH
20181: CALL_OW 250
20185: PPUSH
20186: LD_VAR 0 1
20190: PPUSH
20191: CALL_OW 251
20195: PPUSH
20196: LD_VAR 0 4
20200: PPUSH
20201: CALL_OW 495
// end ; end ;
20205: LD_VAR 0 2
20209: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20210: LD_INT 0
20212: PPUSH
// end ;
20213: LD_VAR 0 4
20217: RET
// export function SOS_Command ( cmd ) ; begin
20218: LD_INT 0
20220: PPUSH
// end ;
20221: LD_VAR 0 2
20225: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20226: LD_INT 0
20228: PPUSH
// end ;
20229: LD_VAR 0 6
20233: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20234: LD_INT 0
20236: PPUSH
20237: PPUSH
// if not vehicle or not factory then
20238: LD_VAR 0 1
20242: NOT
20243: PUSH
20244: LD_VAR 0 2
20248: NOT
20249: OR
20250: IFFALSE 20254
// exit ;
20252: GO 20485
// if factoryWaypoints >= factory then
20254: LD_EXP 65
20258: PUSH
20259: LD_VAR 0 2
20263: GREATEREQUAL
20264: IFFALSE 20485
// if factoryWaypoints [ factory ] then
20266: LD_EXP 65
20270: PUSH
20271: LD_VAR 0 2
20275: ARRAY
20276: IFFALSE 20485
// begin if GetControl ( vehicle ) = control_manual then
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 263
20287: PUSH
20288: LD_INT 1
20290: EQUAL
20291: IFFALSE 20372
// begin driver := IsDrivenBy ( vehicle ) ;
20293: LD_ADDR_VAR 0 4
20297: PUSH
20298: LD_VAR 0 1
20302: PPUSH
20303: CALL_OW 311
20307: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20308: LD_VAR 0 4
20312: PPUSH
20313: LD_EXP 65
20317: PUSH
20318: LD_VAR 0 2
20322: ARRAY
20323: PUSH
20324: LD_INT 3
20326: ARRAY
20327: PPUSH
20328: LD_EXP 65
20332: PUSH
20333: LD_VAR 0 2
20337: ARRAY
20338: PUSH
20339: LD_INT 4
20341: ARRAY
20342: PPUSH
20343: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20347: LD_VAR 0 4
20351: PPUSH
20352: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20356: LD_VAR 0 4
20360: PPUSH
20361: LD_VAR 0 2
20365: PPUSH
20366: CALL_OW 180
// end else
20370: GO 20485
// if GetControl ( vehicle ) = control_remote then
20372: LD_VAR 0 1
20376: PPUSH
20377: CALL_OW 263
20381: PUSH
20382: LD_INT 2
20384: EQUAL
20385: IFFALSE 20446
// begin wait ( 0 0$2 ) ;
20387: LD_INT 70
20389: PPUSH
20390: CALL_OW 67
// if Connect ( vehicle ) then
20394: LD_VAR 0 1
20398: PPUSH
20399: CALL 32509 0 1
20403: IFFALSE 20444
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20405: LD_VAR 0 1
20409: PPUSH
20410: LD_EXP 65
20414: PUSH
20415: LD_VAR 0 2
20419: ARRAY
20420: PUSH
20421: LD_INT 3
20423: ARRAY
20424: PPUSH
20425: LD_EXP 65
20429: PUSH
20430: LD_VAR 0 2
20434: ARRAY
20435: PUSH
20436: LD_INT 4
20438: ARRAY
20439: PPUSH
20440: CALL_OW 171
// end else
20444: GO 20485
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_EXP 65
20455: PUSH
20456: LD_VAR 0 2
20460: ARRAY
20461: PUSH
20462: LD_INT 3
20464: ARRAY
20465: PPUSH
20466: LD_EXP 65
20470: PUSH
20471: LD_VAR 0 2
20475: ARRAY
20476: PUSH
20477: LD_INT 4
20479: ARRAY
20480: PPUSH
20481: CALL_OW 171
// end ; end ;
20485: LD_VAR 0 3
20489: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20490: LD_INT 0
20492: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 250
20500: EQUAL
20501: PUSH
20502: LD_VAR 0 2
20506: PPUSH
20507: CALL_OW 264
20511: PUSH
20512: LD_INT 81
20514: EQUAL
20515: AND
20516: IFFALSE 20537
// MinerPlaceMine ( unit , x , y ) ;
20518: LD_VAR 0 2
20522: PPUSH
20523: LD_VAR 0 4
20527: PPUSH
20528: LD_VAR 0 5
20532: PPUSH
20533: CALL 22922 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20537: LD_VAR 0 1
20541: PUSH
20542: LD_INT 251
20544: EQUAL
20545: PUSH
20546: LD_VAR 0 2
20550: PPUSH
20551: CALL_OW 264
20555: PUSH
20556: LD_INT 81
20558: EQUAL
20559: AND
20560: IFFALSE 20581
// MinerDetonateMine ( unit , x , y ) ;
20562: LD_VAR 0 2
20566: PPUSH
20567: LD_VAR 0 4
20571: PPUSH
20572: LD_VAR 0 5
20576: PPUSH
20577: CALL 23197 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20581: LD_VAR 0 1
20585: PUSH
20586: LD_INT 252
20588: EQUAL
20589: PUSH
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 264
20599: PUSH
20600: LD_INT 81
20602: EQUAL
20603: AND
20604: IFFALSE 20625
// MinerCreateMinefield ( unit , x , y ) ;
20606: LD_VAR 0 2
20610: PPUSH
20611: LD_VAR 0 4
20615: PPUSH
20616: LD_VAR 0 5
20620: PPUSH
20621: CALL 23614 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20625: LD_VAR 0 1
20629: PUSH
20630: LD_INT 253
20632: EQUAL
20633: PUSH
20634: LD_VAR 0 2
20638: PPUSH
20639: CALL_OW 257
20643: PUSH
20644: LD_INT 5
20646: EQUAL
20647: AND
20648: IFFALSE 20669
// ComBinocular ( unit , x , y ) ;
20650: LD_VAR 0 2
20654: PPUSH
20655: LD_VAR 0 4
20659: PPUSH
20660: LD_VAR 0 5
20664: PPUSH
20665: CALL 23983 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20669: LD_VAR 0 1
20673: PUSH
20674: LD_INT 254
20676: EQUAL
20677: PUSH
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 264
20687: PUSH
20688: LD_INT 99
20690: EQUAL
20691: AND
20692: PUSH
20693: LD_VAR 0 3
20697: PPUSH
20698: CALL_OW 263
20702: PUSH
20703: LD_INT 3
20705: EQUAL
20706: AND
20707: IFFALSE 20723
// HackDestroyVehicle ( unit , selectedUnit ) ;
20709: LD_VAR 0 2
20713: PPUSH
20714: LD_VAR 0 3
20718: PPUSH
20719: CALL 22286 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20723: LD_VAR 0 1
20727: PUSH
20728: LD_INT 255
20730: EQUAL
20731: PUSH
20732: LD_VAR 0 2
20736: PPUSH
20737: CALL_OW 264
20741: PUSH
20742: LD_INT 14
20744: PUSH
20745: LD_INT 53
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: IN
20752: AND
20753: PUSH
20754: LD_VAR 0 4
20758: PPUSH
20759: LD_VAR 0 5
20763: PPUSH
20764: CALL_OW 488
20768: AND
20769: IFFALSE 20793
// CutTreeXYR ( unit , x , y , 12 ) ;
20771: LD_VAR 0 2
20775: PPUSH
20776: LD_VAR 0 4
20780: PPUSH
20781: LD_VAR 0 5
20785: PPUSH
20786: LD_INT 12
20788: PPUSH
20789: CALL 20856 0 4
// if cmd = 256 then
20793: LD_VAR 0 1
20797: PUSH
20798: LD_INT 256
20800: EQUAL
20801: IFFALSE 20822
// SetFactoryWaypoint ( unit , x , y ) ;
20803: LD_VAR 0 2
20807: PPUSH
20808: LD_VAR 0 4
20812: PPUSH
20813: LD_VAR 0 5
20817: PPUSH
20818: CALL 18803 0 3
// if cmd = 257 then
20822: LD_VAR 0 1
20826: PUSH
20827: LD_INT 257
20829: EQUAL
20830: IFFALSE 20851
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20832: LD_VAR 0 2
20836: PPUSH
20837: LD_VAR 0 4
20841: PPUSH
20842: LD_VAR 0 5
20846: PPUSH
20847: CALL 19165 0 3
// end ;
20851: LD_VAR 0 6
20855: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
20866: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20867: LD_VAR 0 1
20871: NOT
20872: PUSH
20873: LD_VAR 0 2
20877: PPUSH
20878: LD_VAR 0 3
20882: PPUSH
20883: CALL_OW 488
20887: NOT
20888: OR
20889: PUSH
20890: LD_VAR 0 4
20894: NOT
20895: OR
20896: IFFALSE 20900
// exit ;
20898: GO 21240
// list := [ ] ;
20900: LD_ADDR_VAR 0 13
20904: PUSH
20905: EMPTY
20906: ST_TO_ADDR
// if x - r < 0 then
20907: LD_VAR 0 2
20911: PUSH
20912: LD_VAR 0 4
20916: MINUS
20917: PUSH
20918: LD_INT 0
20920: LESS
20921: IFFALSE 20933
// min_x := 0 else
20923: LD_ADDR_VAR 0 7
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
20931: GO 20949
// min_x := x - r ;
20933: LD_ADDR_VAR 0 7
20937: PUSH
20938: LD_VAR 0 2
20942: PUSH
20943: LD_VAR 0 4
20947: MINUS
20948: ST_TO_ADDR
// if y - r < 0 then
20949: LD_VAR 0 3
20953: PUSH
20954: LD_VAR 0 4
20958: MINUS
20959: PUSH
20960: LD_INT 0
20962: LESS
20963: IFFALSE 20975
// min_y := 0 else
20965: LD_ADDR_VAR 0 8
20969: PUSH
20970: LD_INT 0
20972: ST_TO_ADDR
20973: GO 20991
// min_y := y - r ;
20975: LD_ADDR_VAR 0 8
20979: PUSH
20980: LD_VAR 0 3
20984: PUSH
20985: LD_VAR 0 4
20989: MINUS
20990: ST_TO_ADDR
// max_x := x + r ;
20991: LD_ADDR_VAR 0 9
20995: PUSH
20996: LD_VAR 0 2
21000: PUSH
21001: LD_VAR 0 4
21005: PLUS
21006: ST_TO_ADDR
// max_y := y + r ;
21007: LD_ADDR_VAR 0 10
21011: PUSH
21012: LD_VAR 0 3
21016: PUSH
21017: LD_VAR 0 4
21021: PLUS
21022: ST_TO_ADDR
// for _x = min_x to max_x do
21023: LD_ADDR_VAR 0 11
21027: PUSH
21028: DOUBLE
21029: LD_VAR 0 7
21033: DEC
21034: ST_TO_ADDR
21035: LD_VAR 0 9
21039: PUSH
21040: FOR_TO
21041: IFFALSE 21158
// for _y = min_y to max_y do
21043: LD_ADDR_VAR 0 12
21047: PUSH
21048: DOUBLE
21049: LD_VAR 0 8
21053: DEC
21054: ST_TO_ADDR
21055: LD_VAR 0 10
21059: PUSH
21060: FOR_TO
21061: IFFALSE 21154
// begin if not ValidHex ( _x , _y ) then
21063: LD_VAR 0 11
21067: PPUSH
21068: LD_VAR 0 12
21072: PPUSH
21073: CALL_OW 488
21077: NOT
21078: IFFALSE 21082
// continue ;
21080: GO 21060
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21082: LD_VAR 0 11
21086: PPUSH
21087: LD_VAR 0 12
21091: PPUSH
21092: CALL_OW 351
21096: PUSH
21097: LD_VAR 0 11
21101: PPUSH
21102: LD_VAR 0 12
21106: PPUSH
21107: CALL_OW 554
21111: AND
21112: IFFALSE 21152
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21114: LD_ADDR_VAR 0 13
21118: PUSH
21119: LD_VAR 0 13
21123: PPUSH
21124: LD_VAR 0 13
21128: PUSH
21129: LD_INT 1
21131: PLUS
21132: PPUSH
21133: LD_VAR 0 11
21137: PUSH
21138: LD_VAR 0 12
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 2
21151: ST_TO_ADDR
// end ;
21152: GO 21060
21154: POP
21155: POP
21156: GO 21040
21158: POP
21159: POP
// if not list then
21160: LD_VAR 0 13
21164: NOT
21165: IFFALSE 21169
// exit ;
21167: GO 21240
// for i in list do
21169: LD_ADDR_VAR 0 6
21173: PUSH
21174: LD_VAR 0 13
21178: PUSH
21179: FOR_IN
21180: IFFALSE 21238
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: LD_STRING M
21189: PUSH
21190: LD_VAR 0 6
21194: PUSH
21195: LD_INT 1
21197: ARRAY
21198: PUSH
21199: LD_VAR 0 6
21203: PUSH
21204: LD_INT 2
21206: ARRAY
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: PPUSH
21232: CALL_OW 447
21236: GO 21179
21238: POP
21239: POP
// end ;
21240: LD_VAR 0 5
21244: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21245: LD_EXP 68
21249: NOT
21250: IFFALSE 21300
21252: GO 21254
21254: DISABLE
// begin initHack := true ;
21255: LD_ADDR_EXP 68
21259: PUSH
21260: LD_INT 1
21262: ST_TO_ADDR
// hackTanks := [ ] ;
21263: LD_ADDR_EXP 69
21267: PUSH
21268: EMPTY
21269: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21270: LD_ADDR_EXP 70
21274: PUSH
21275: EMPTY
21276: ST_TO_ADDR
// hackLimit := 3 ;
21277: LD_ADDR_EXP 71
21281: PUSH
21282: LD_INT 3
21284: ST_TO_ADDR
// hackDist := 12 ;
21285: LD_ADDR_EXP 72
21289: PUSH
21290: LD_INT 12
21292: ST_TO_ADDR
// hackCounter := [ ] ;
21293: LD_ADDR_EXP 73
21297: PUSH
21298: EMPTY
21299: ST_TO_ADDR
// end ;
21300: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21301: LD_EXP 68
21305: PUSH
21306: LD_INT 34
21308: PUSH
21309: LD_INT 99
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PPUSH
21316: CALL_OW 69
21320: AND
21321: IFFALSE 21574
21323: GO 21325
21325: DISABLE
21326: LD_INT 0
21328: PPUSH
21329: PPUSH
// begin enable ;
21330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21331: LD_ADDR_VAR 0 1
21335: PUSH
21336: LD_INT 34
21338: PUSH
21339: LD_INT 99
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PPUSH
21346: CALL_OW 69
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21572
// begin if not i in hackTanks then
21354: LD_VAR 0 1
21358: PUSH
21359: LD_EXP 69
21363: IN
21364: NOT
21365: IFFALSE 21448
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21367: LD_ADDR_EXP 69
21371: PUSH
21372: LD_EXP 69
21376: PPUSH
21377: LD_EXP 69
21381: PUSH
21382: LD_INT 1
21384: PLUS
21385: PPUSH
21386: LD_VAR 0 1
21390: PPUSH
21391: CALL_OW 1
21395: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21396: LD_ADDR_EXP 70
21400: PUSH
21401: LD_EXP 70
21405: PPUSH
21406: LD_EXP 70
21410: PUSH
21411: LD_INT 1
21413: PLUS
21414: PPUSH
21415: EMPTY
21416: PPUSH
21417: CALL_OW 1
21421: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21422: LD_ADDR_EXP 73
21426: PUSH
21427: LD_EXP 73
21431: PPUSH
21432: LD_EXP 73
21436: PUSH
21437: LD_INT 1
21439: PLUS
21440: PPUSH
21441: EMPTY
21442: PPUSH
21443: CALL_OW 1
21447: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL_OW 302
21457: NOT
21458: IFFALSE 21471
// begin HackUnlinkAll ( i ) ;
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL 21577 0 1
// continue ;
21469: GO 21351
// end ; HackCheckCapturedStatus ( i ) ;
21471: LD_VAR 0 1
21475: PPUSH
21476: CALL 22020 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_INT 81
21487: PUSH
21488: LD_VAR 0 1
21492: PPUSH
21493: CALL_OW 255
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 33
21504: PUSH
21505: LD_INT 3
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 91
21514: PUSH
21515: LD_VAR 0 1
21519: PUSH
21520: LD_EXP 72
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 50
21532: PUSH
21533: EMPTY
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: ST_TO_ADDR
// if not tmp then
21547: LD_VAR 0 2
21551: NOT
21552: IFFALSE 21556
// continue ;
21554: GO 21351
// HackLink ( i , tmp ) ;
21556: LD_VAR 0 1
21560: PPUSH
21561: LD_VAR 0 2
21565: PPUSH
21566: CALL 21713 0 2
// end ;
21570: GO 21351
21572: POP
21573: POP
// end ;
21574: PPOPN 2
21576: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21577: LD_INT 0
21579: PPUSH
21580: PPUSH
21581: PPUSH
// if not hack in hackTanks then
21582: LD_VAR 0 1
21586: PUSH
21587: LD_EXP 69
21591: IN
21592: NOT
21593: IFFALSE 21597
// exit ;
21595: GO 21708
// index := GetElementIndex ( hackTanks , hack ) ;
21597: LD_ADDR_VAR 0 4
21601: PUSH
21602: LD_EXP 69
21606: PPUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL 29325 0 2
21616: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21617: LD_EXP 70
21621: PUSH
21622: LD_VAR 0 4
21626: ARRAY
21627: IFFALSE 21708
// begin for i in hackTanksCaptured [ index ] do
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: LD_EXP 70
21638: PUSH
21639: LD_VAR 0 4
21643: ARRAY
21644: PUSH
21645: FOR_IN
21646: IFFALSE 21672
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21648: LD_VAR 0 3
21652: PUSH
21653: LD_INT 1
21655: ARRAY
21656: PPUSH
21657: LD_VAR 0 3
21661: PUSH
21662: LD_INT 2
21664: ARRAY
21665: PPUSH
21666: CALL_OW 235
21670: GO 21645
21672: POP
21673: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21674: LD_ADDR_EXP 70
21678: PUSH
21679: LD_EXP 70
21683: PPUSH
21684: LD_VAR 0 4
21688: PPUSH
21689: EMPTY
21690: PPUSH
21691: CALL_OW 1
21695: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21696: LD_VAR 0 1
21700: PPUSH
21701: LD_INT 0
21703: PPUSH
21704: CALL_OW 505
// end ; end ;
21708: LD_VAR 0 2
21712: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21713: LD_INT 0
21715: PPUSH
21716: PPUSH
21717: PPUSH
// if not hack in hackTanks or not vehicles then
21718: LD_VAR 0 1
21722: PUSH
21723: LD_EXP 69
21727: IN
21728: NOT
21729: PUSH
21730: LD_VAR 0 2
21734: NOT
21735: OR
21736: IFFALSE 21740
// exit ;
21738: GO 22015
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21740: LD_ADDR_VAR 0 2
21744: PUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_VAR 0 2
21754: PPUSH
21755: LD_INT 1
21757: PPUSH
21758: LD_INT 1
21760: PPUSH
21761: CALL 29975 0 4
21765: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21766: LD_ADDR_VAR 0 5
21770: PUSH
21771: LD_EXP 69
21775: PPUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL 29325 0 2
21785: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21786: LD_EXP 70
21790: PUSH
21791: LD_VAR 0 5
21795: ARRAY
21796: PUSH
21797: LD_EXP 71
21801: LESS
21802: IFFALSE 21991
// begin for i := 1 to vehicles do
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: DOUBLE
21810: LD_INT 1
21812: DEC
21813: ST_TO_ADDR
21814: LD_VAR 0 2
21818: PUSH
21819: FOR_TO
21820: IFFALSE 21989
// begin if hackTanksCaptured [ index ] = hackLimit then
21822: LD_EXP 70
21826: PUSH
21827: LD_VAR 0 5
21831: ARRAY
21832: PUSH
21833: LD_EXP 71
21837: EQUAL
21838: IFFALSE 21842
// break ;
21840: GO 21989
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21842: LD_ADDR_EXP 73
21846: PUSH
21847: LD_EXP 73
21851: PPUSH
21852: LD_VAR 0 5
21856: PPUSH
21857: LD_EXP 73
21861: PUSH
21862: LD_VAR 0 5
21866: ARRAY
21867: PUSH
21868: LD_INT 1
21870: PLUS
21871: PPUSH
21872: CALL_OW 1
21876: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21877: LD_ADDR_EXP 70
21881: PUSH
21882: LD_EXP 70
21886: PPUSH
21887: LD_VAR 0 5
21891: PUSH
21892: LD_EXP 70
21896: PUSH
21897: LD_VAR 0 5
21901: ARRAY
21902: PUSH
21903: LD_INT 1
21905: PLUS
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PPUSH
21911: LD_VAR 0 2
21915: PUSH
21916: LD_VAR 0 4
21920: ARRAY
21921: PUSH
21922: LD_VAR 0 2
21926: PUSH
21927: LD_VAR 0 4
21931: ARRAY
21932: PPUSH
21933: CALL_OW 255
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PPUSH
21942: CALL 29540 0 3
21946: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21947: LD_VAR 0 2
21951: PUSH
21952: LD_VAR 0 4
21956: ARRAY
21957: PPUSH
21958: LD_VAR 0 1
21962: PPUSH
21963: CALL_OW 255
21967: PPUSH
21968: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21972: LD_VAR 0 2
21976: PUSH
21977: LD_VAR 0 4
21981: ARRAY
21982: PPUSH
21983: CALL_OW 141
// end ;
21987: GO 21819
21989: POP
21990: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21991: LD_VAR 0 1
21995: PPUSH
21996: LD_EXP 70
22000: PUSH
22001: LD_VAR 0 5
22005: ARRAY
22006: PUSH
22007: LD_INT 0
22009: PLUS
22010: PPUSH
22011: CALL_OW 505
// end ;
22015: LD_VAR 0 3
22019: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
22025: PPUSH
// if not hack in hackTanks then
22026: LD_VAR 0 1
22030: PUSH
22031: LD_EXP 69
22035: IN
22036: NOT
22037: IFFALSE 22041
// exit ;
22039: GO 22281
// index := GetElementIndex ( hackTanks , hack ) ;
22041: LD_ADDR_VAR 0 4
22045: PUSH
22046: LD_EXP 69
22050: PPUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL 29325 0 2
22060: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: DOUBLE
22067: LD_EXP 70
22071: PUSH
22072: LD_VAR 0 4
22076: ARRAY
22077: INC
22078: ST_TO_ADDR
22079: LD_INT 1
22081: PUSH
22082: FOR_DOWNTO
22083: IFFALSE 22255
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22085: LD_ADDR_VAR 0 5
22089: PUSH
22090: LD_EXP 70
22094: PUSH
22095: LD_VAR 0 4
22099: ARRAY
22100: PUSH
22101: LD_VAR 0 3
22105: ARRAY
22106: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22107: LD_VAR 0 5
22111: PUSH
22112: LD_INT 1
22114: ARRAY
22115: PPUSH
22116: CALL_OW 302
22120: NOT
22121: PUSH
22122: LD_VAR 0 5
22126: PUSH
22127: LD_INT 1
22129: ARRAY
22130: PPUSH
22131: CALL_OW 255
22135: PUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 255
22145: NONEQUAL
22146: OR
22147: IFFALSE 22253
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22149: LD_VAR 0 5
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: CALL_OW 305
22162: PUSH
22163: LD_VAR 0 5
22167: PUSH
22168: LD_INT 1
22170: ARRAY
22171: PPUSH
22172: CALL_OW 255
22176: PUSH
22177: LD_VAR 0 1
22181: PPUSH
22182: CALL_OW 255
22186: EQUAL
22187: AND
22188: IFFALSE 22212
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22190: LD_VAR 0 5
22194: PUSH
22195: LD_INT 1
22197: ARRAY
22198: PPUSH
22199: LD_VAR 0 5
22203: PUSH
22204: LD_INT 2
22206: ARRAY
22207: PPUSH
22208: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22212: LD_ADDR_EXP 70
22216: PUSH
22217: LD_EXP 70
22221: PPUSH
22222: LD_VAR 0 4
22226: PPUSH
22227: LD_EXP 70
22231: PUSH
22232: LD_VAR 0 4
22236: ARRAY
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: CALL_OW 3
22247: PPUSH
22248: CALL_OW 1
22252: ST_TO_ADDR
// end ; end ;
22253: GO 22082
22255: POP
22256: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_EXP 70
22266: PUSH
22267: LD_VAR 0 4
22271: ARRAY
22272: PUSH
22273: LD_INT 0
22275: PLUS
22276: PPUSH
22277: CALL_OW 505
// end ;
22281: LD_VAR 0 2
22285: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
22290: PPUSH
22291: PPUSH
// if not hack in hackTanks then
22292: LD_VAR 0 1
22296: PUSH
22297: LD_EXP 69
22301: IN
22302: NOT
22303: IFFALSE 22307
// exit ;
22305: GO 22392
// index := GetElementIndex ( hackTanks , hack ) ;
22307: LD_ADDR_VAR 0 5
22311: PUSH
22312: LD_EXP 69
22316: PPUSH
22317: LD_VAR 0 1
22321: PPUSH
22322: CALL 29325 0 2
22326: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22327: LD_ADDR_VAR 0 4
22331: PUSH
22332: DOUBLE
22333: LD_INT 1
22335: DEC
22336: ST_TO_ADDR
22337: LD_EXP 70
22341: PUSH
22342: LD_VAR 0 5
22346: ARRAY
22347: PUSH
22348: FOR_TO
22349: IFFALSE 22390
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22351: LD_EXP 70
22355: PUSH
22356: LD_VAR 0 5
22360: ARRAY
22361: PUSH
22362: LD_VAR 0 4
22366: ARRAY
22367: PUSH
22368: LD_INT 1
22370: ARRAY
22371: PUSH
22372: LD_VAR 0 2
22376: EQUAL
22377: IFFALSE 22388
// KillUnit ( vehicle ) ;
22379: LD_VAR 0 2
22383: PPUSH
22384: CALL_OW 66
22388: GO 22348
22390: POP
22391: POP
// end ;
22392: LD_VAR 0 3
22396: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22397: LD_EXP 74
22401: NOT
22402: IFFALSE 22437
22404: GO 22406
22406: DISABLE
// begin initMiner := true ;
22407: LD_ADDR_EXP 74
22411: PUSH
22412: LD_INT 1
22414: ST_TO_ADDR
// minersList := [ ] ;
22415: LD_ADDR_EXP 75
22419: PUSH
22420: EMPTY
22421: ST_TO_ADDR
// minerMinesList := [ ] ;
22422: LD_ADDR_EXP 76
22426: PUSH
22427: EMPTY
22428: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22429: LD_ADDR_EXP 77
22433: PUSH
22434: LD_INT 5
22436: ST_TO_ADDR
// end ;
22437: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22438: LD_EXP 74
22442: PUSH
22443: LD_INT 34
22445: PUSH
22446: LD_INT 81
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: CALL_OW 69
22457: AND
22458: IFFALSE 22919
22460: GO 22462
22462: DISABLE
22463: LD_INT 0
22465: PPUSH
22466: PPUSH
22467: PPUSH
22468: PPUSH
// begin enable ;
22469: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22470: LD_ADDR_VAR 0 1
22474: PUSH
22475: LD_INT 34
22477: PUSH
22478: LD_INT 81
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 69
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22563
// begin if not i in minersList then
22493: LD_VAR 0 1
22497: PUSH
22498: LD_EXP 75
22502: IN
22503: NOT
22504: IFFALSE 22561
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22506: LD_ADDR_EXP 75
22510: PUSH
22511: LD_EXP 75
22515: PPUSH
22516: LD_EXP 75
22520: PUSH
22521: LD_INT 1
22523: PLUS
22524: PPUSH
22525: LD_VAR 0 1
22529: PPUSH
22530: CALL_OW 1
22534: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22535: LD_ADDR_EXP 76
22539: PUSH
22540: LD_EXP 76
22544: PPUSH
22545: LD_EXP 76
22549: PUSH
22550: LD_INT 1
22552: PLUS
22553: PPUSH
22554: EMPTY
22555: PPUSH
22556: CALL_OW 1
22560: ST_TO_ADDR
// end end ;
22561: GO 22490
22563: POP
22564: POP
// for i := minerMinesList downto 1 do
22565: LD_ADDR_VAR 0 1
22569: PUSH
22570: DOUBLE
22571: LD_EXP 76
22575: INC
22576: ST_TO_ADDR
22577: LD_INT 1
22579: PUSH
22580: FOR_DOWNTO
22581: IFFALSE 22917
// begin if IsLive ( minersList [ i ] ) then
22583: LD_EXP 75
22587: PUSH
22588: LD_VAR 0 1
22592: ARRAY
22593: PPUSH
22594: CALL_OW 300
22598: IFFALSE 22626
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22600: LD_EXP 75
22604: PUSH
22605: LD_VAR 0 1
22609: ARRAY
22610: PPUSH
22611: LD_EXP 76
22615: PUSH
22616: LD_VAR 0 1
22620: ARRAY
22621: PPUSH
22622: CALL_OW 505
// if not minerMinesList [ i ] then
22626: LD_EXP 76
22630: PUSH
22631: LD_VAR 0 1
22635: ARRAY
22636: NOT
22637: IFFALSE 22641
// continue ;
22639: GO 22580
// for j := minerMinesList [ i ] downto 1 do
22641: LD_ADDR_VAR 0 2
22645: PUSH
22646: DOUBLE
22647: LD_EXP 76
22651: PUSH
22652: LD_VAR 0 1
22656: ARRAY
22657: INC
22658: ST_TO_ADDR
22659: LD_INT 1
22661: PUSH
22662: FOR_DOWNTO
22663: IFFALSE 22913
// begin side := GetSide ( minersList [ i ] ) ;
22665: LD_ADDR_VAR 0 3
22669: PUSH
22670: LD_EXP 75
22674: PUSH
22675: LD_VAR 0 1
22679: ARRAY
22680: PPUSH
22681: CALL_OW 255
22685: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22686: LD_ADDR_VAR 0 4
22690: PUSH
22691: LD_EXP 76
22695: PUSH
22696: LD_VAR 0 1
22700: ARRAY
22701: PUSH
22702: LD_VAR 0 2
22706: ARRAY
22707: PUSH
22708: LD_INT 1
22710: ARRAY
22711: PPUSH
22712: LD_EXP 76
22716: PUSH
22717: LD_VAR 0 1
22721: ARRAY
22722: PUSH
22723: LD_VAR 0 2
22727: ARRAY
22728: PUSH
22729: LD_INT 2
22731: ARRAY
22732: PPUSH
22733: CALL_OW 428
22737: ST_TO_ADDR
// if not tmp then
22738: LD_VAR 0 4
22742: NOT
22743: IFFALSE 22747
// continue ;
22745: GO 22662
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22747: LD_VAR 0 4
22751: PUSH
22752: LD_INT 81
22754: PUSH
22755: LD_VAR 0 3
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PPUSH
22764: CALL_OW 69
22768: IN
22769: PUSH
22770: LD_EXP 76
22774: PUSH
22775: LD_VAR 0 1
22779: ARRAY
22780: PUSH
22781: LD_VAR 0 2
22785: ARRAY
22786: PUSH
22787: LD_INT 1
22789: ARRAY
22790: PPUSH
22791: LD_EXP 76
22795: PUSH
22796: LD_VAR 0 1
22800: ARRAY
22801: PUSH
22802: LD_VAR 0 2
22806: ARRAY
22807: PUSH
22808: LD_INT 2
22810: ARRAY
22811: PPUSH
22812: CALL_OW 458
22816: AND
22817: IFFALSE 22911
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22819: LD_EXP 76
22823: PUSH
22824: LD_VAR 0 1
22828: ARRAY
22829: PUSH
22830: LD_VAR 0 2
22834: ARRAY
22835: PUSH
22836: LD_INT 1
22838: ARRAY
22839: PPUSH
22840: LD_EXP 76
22844: PUSH
22845: LD_VAR 0 1
22849: ARRAY
22850: PUSH
22851: LD_VAR 0 2
22855: ARRAY
22856: PUSH
22857: LD_INT 2
22859: ARRAY
22860: PPUSH
22861: LD_VAR 0 3
22865: PPUSH
22866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22870: LD_ADDR_EXP 76
22874: PUSH
22875: LD_EXP 76
22879: PPUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: LD_EXP 76
22889: PUSH
22890: LD_VAR 0 1
22894: ARRAY
22895: PPUSH
22896: LD_VAR 0 2
22900: PPUSH
22901: CALL_OW 3
22905: PPUSH
22906: CALL_OW 1
22910: ST_TO_ADDR
// end ; end ;
22911: GO 22662
22913: POP
22914: POP
// end ;
22915: GO 22580
22917: POP
22918: POP
// end ;
22919: PPOPN 4
22921: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22922: LD_INT 0
22924: PPUSH
22925: PPUSH
// result := false ;
22926: LD_ADDR_VAR 0 4
22930: PUSH
22931: LD_INT 0
22933: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22934: LD_VAR 0 1
22938: PPUSH
22939: CALL_OW 264
22943: PUSH
22944: LD_INT 81
22946: EQUAL
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 23192
// index := GetElementIndex ( minersList , unit ) ;
22952: LD_ADDR_VAR 0 5
22956: PUSH
22957: LD_EXP 75
22961: PPUSH
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL 29325 0 2
22971: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22972: LD_EXP 76
22976: PUSH
22977: LD_VAR 0 5
22981: ARRAY
22982: PUSH
22983: LD_EXP 77
22987: GREATEREQUAL
22988: IFFALSE 22992
// exit ;
22990: GO 23192
// ComMoveXY ( unit , x , y ) ;
22992: LD_VAR 0 1
22996: PPUSH
22997: LD_VAR 0 2
23001: PPUSH
23002: LD_VAR 0 3
23006: PPUSH
23007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23011: LD_INT 35
23013: PPUSH
23014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23018: LD_VAR 0 1
23022: PPUSH
23023: LD_VAR 0 2
23027: PPUSH
23028: LD_VAR 0 3
23032: PPUSH
23033: CALL 60661 0 3
23037: NOT
23038: PUSH
23039: LD_VAR 0 1
23043: PPUSH
23044: CALL_OW 314
23048: AND
23049: IFFALSE 23053
// exit ;
23051: GO 23192
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23053: LD_VAR 0 2
23057: PPUSH
23058: LD_VAR 0 3
23062: PPUSH
23063: CALL_OW 428
23067: PUSH
23068: LD_VAR 0 1
23072: EQUAL
23073: PUSH
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 314
23083: NOT
23084: AND
23085: IFFALSE 23011
// PlaySoundXY ( x , y , PlantMine ) ;
23087: LD_VAR 0 2
23091: PPUSH
23092: LD_VAR 0 3
23096: PPUSH
23097: LD_STRING PlantMine
23099: PPUSH
23100: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23104: LD_VAR 0 2
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_VAR 0 1
23118: PPUSH
23119: CALL_OW 255
23123: PPUSH
23124: LD_INT 0
23126: PPUSH
23127: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23131: LD_ADDR_EXP 76
23135: PUSH
23136: LD_EXP 76
23140: PPUSH
23141: LD_VAR 0 5
23145: PUSH
23146: LD_EXP 76
23150: PUSH
23151: LD_VAR 0 5
23155: ARRAY
23156: PUSH
23157: LD_INT 1
23159: PLUS
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PPUSH
23165: LD_VAR 0 2
23169: PUSH
23170: LD_VAR 0 3
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PPUSH
23179: CALL 29540 0 3
23183: ST_TO_ADDR
// result := true ;
23184: LD_ADDR_VAR 0 4
23188: PUSH
23189: LD_INT 1
23191: ST_TO_ADDR
// end ;
23192: LD_VAR 0 4
23196: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23197: LD_INT 0
23199: PPUSH
23200: PPUSH
23201: PPUSH
// if not unit in minersList then
23202: LD_VAR 0 1
23206: PUSH
23207: LD_EXP 75
23211: IN
23212: NOT
23213: IFFALSE 23217
// exit ;
23215: GO 23609
// index := GetElementIndex ( minersList , unit ) ;
23217: LD_ADDR_VAR 0 6
23221: PUSH
23222: LD_EXP 75
23226: PPUSH
23227: LD_VAR 0 1
23231: PPUSH
23232: CALL 29325 0 2
23236: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23237: LD_ADDR_VAR 0 5
23241: PUSH
23242: DOUBLE
23243: LD_EXP 76
23247: PUSH
23248: LD_VAR 0 6
23252: ARRAY
23253: INC
23254: ST_TO_ADDR
23255: LD_INT 1
23257: PUSH
23258: FOR_DOWNTO
23259: IFFALSE 23420
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23261: LD_EXP 76
23265: PUSH
23266: LD_VAR 0 6
23270: ARRAY
23271: PUSH
23272: LD_VAR 0 5
23276: ARRAY
23277: PUSH
23278: LD_INT 1
23280: ARRAY
23281: PUSH
23282: LD_VAR 0 2
23286: EQUAL
23287: PUSH
23288: LD_EXP 76
23292: PUSH
23293: LD_VAR 0 6
23297: ARRAY
23298: PUSH
23299: LD_VAR 0 5
23303: ARRAY
23304: PUSH
23305: LD_INT 2
23307: ARRAY
23308: PUSH
23309: LD_VAR 0 3
23313: EQUAL
23314: AND
23315: IFFALSE 23418
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23317: LD_EXP 76
23321: PUSH
23322: LD_VAR 0 6
23326: ARRAY
23327: PUSH
23328: LD_VAR 0 5
23332: ARRAY
23333: PUSH
23334: LD_INT 1
23336: ARRAY
23337: PPUSH
23338: LD_EXP 76
23342: PUSH
23343: LD_VAR 0 6
23347: ARRAY
23348: PUSH
23349: LD_VAR 0 5
23353: ARRAY
23354: PUSH
23355: LD_INT 2
23357: ARRAY
23358: PPUSH
23359: LD_VAR 0 1
23363: PPUSH
23364: CALL_OW 255
23368: PPUSH
23369: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23373: LD_ADDR_EXP 76
23377: PUSH
23378: LD_EXP 76
23382: PPUSH
23383: LD_VAR 0 6
23387: PPUSH
23388: LD_EXP 76
23392: PUSH
23393: LD_VAR 0 6
23397: ARRAY
23398: PPUSH
23399: LD_VAR 0 5
23403: PPUSH
23404: CALL_OW 3
23408: PPUSH
23409: CALL_OW 1
23413: ST_TO_ADDR
// exit ;
23414: POP
23415: POP
23416: GO 23609
// end ; end ;
23418: GO 23258
23420: POP
23421: POP
// for i := minerMinesList [ index ] downto 1 do
23422: LD_ADDR_VAR 0 5
23426: PUSH
23427: DOUBLE
23428: LD_EXP 76
23432: PUSH
23433: LD_VAR 0 6
23437: ARRAY
23438: INC
23439: ST_TO_ADDR
23440: LD_INT 1
23442: PUSH
23443: FOR_DOWNTO
23444: IFFALSE 23607
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23446: LD_EXP 76
23450: PUSH
23451: LD_VAR 0 6
23455: ARRAY
23456: PUSH
23457: LD_VAR 0 5
23461: ARRAY
23462: PUSH
23463: LD_INT 1
23465: ARRAY
23466: PPUSH
23467: LD_EXP 76
23471: PUSH
23472: LD_VAR 0 6
23476: ARRAY
23477: PUSH
23478: LD_VAR 0 5
23482: ARRAY
23483: PUSH
23484: LD_INT 2
23486: ARRAY
23487: PPUSH
23488: LD_VAR 0 2
23492: PPUSH
23493: LD_VAR 0 3
23497: PPUSH
23498: CALL_OW 298
23502: PUSH
23503: LD_INT 6
23505: LESS
23506: IFFALSE 23605
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23508: LD_EXP 76
23512: PUSH
23513: LD_VAR 0 6
23517: ARRAY
23518: PUSH
23519: LD_VAR 0 5
23523: ARRAY
23524: PUSH
23525: LD_INT 1
23527: ARRAY
23528: PPUSH
23529: LD_EXP 76
23533: PUSH
23534: LD_VAR 0 6
23538: ARRAY
23539: PUSH
23540: LD_VAR 0 5
23544: ARRAY
23545: PUSH
23546: LD_INT 2
23548: ARRAY
23549: PPUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 255
23559: PPUSH
23560: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23564: LD_ADDR_EXP 76
23568: PUSH
23569: LD_EXP 76
23573: PPUSH
23574: LD_VAR 0 6
23578: PPUSH
23579: LD_EXP 76
23583: PUSH
23584: LD_VAR 0 6
23588: ARRAY
23589: PPUSH
23590: LD_VAR 0 5
23594: PPUSH
23595: CALL_OW 3
23599: PPUSH
23600: CALL_OW 1
23604: ST_TO_ADDR
// end ; end ;
23605: GO 23443
23607: POP
23608: POP
// end ;
23609: LD_VAR 0 4
23613: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23614: LD_INT 0
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL_OW 264
23634: PUSH
23635: LD_INT 81
23637: EQUAL
23638: NOT
23639: PUSH
23640: LD_VAR 0 1
23644: PUSH
23645: LD_EXP 75
23649: IN
23650: NOT
23651: OR
23652: IFFALSE 23656
// exit ;
23654: GO 23978
// index := GetElementIndex ( minersList , unit ) ;
23656: LD_ADDR_VAR 0 6
23660: PUSH
23661: LD_EXP 75
23665: PPUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL 29325 0 2
23675: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23676: LD_ADDR_VAR 0 8
23680: PUSH
23681: LD_EXP 77
23685: PUSH
23686: LD_EXP 76
23690: PUSH
23691: LD_VAR 0 6
23695: ARRAY
23696: MINUS
23697: ST_TO_ADDR
// if not minesFreeAmount then
23698: LD_VAR 0 8
23702: NOT
23703: IFFALSE 23707
// exit ;
23705: GO 23978
// tmp := [ ] ;
23707: LD_ADDR_VAR 0 7
23711: PUSH
23712: EMPTY
23713: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23714: LD_ADDR_VAR 0 5
23718: PUSH
23719: DOUBLE
23720: LD_INT 1
23722: DEC
23723: ST_TO_ADDR
23724: LD_VAR 0 8
23728: PUSH
23729: FOR_TO
23730: IFFALSE 23925
// begin _d := rand ( 0 , 5 ) ;
23732: LD_ADDR_VAR 0 11
23736: PUSH
23737: LD_INT 0
23739: PPUSH
23740: LD_INT 5
23742: PPUSH
23743: CALL_OW 12
23747: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23748: LD_ADDR_VAR 0 12
23752: PUSH
23753: LD_INT 2
23755: PPUSH
23756: LD_INT 6
23758: PPUSH
23759: CALL_OW 12
23763: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23764: LD_ADDR_VAR 0 9
23768: PUSH
23769: LD_VAR 0 2
23773: PPUSH
23774: LD_VAR 0 11
23778: PPUSH
23779: LD_VAR 0 12
23783: PPUSH
23784: CALL_OW 272
23788: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23789: LD_ADDR_VAR 0 10
23793: PUSH
23794: LD_VAR 0 3
23798: PPUSH
23799: LD_VAR 0 11
23803: PPUSH
23804: LD_VAR 0 12
23808: PPUSH
23809: CALL_OW 273
23813: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23814: LD_VAR 0 9
23818: PPUSH
23819: LD_VAR 0 10
23823: PPUSH
23824: CALL_OW 488
23828: PUSH
23829: LD_VAR 0 9
23833: PUSH
23834: LD_VAR 0 10
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_VAR 0 7
23847: IN
23848: NOT
23849: AND
23850: PUSH
23851: LD_VAR 0 9
23855: PPUSH
23856: LD_VAR 0 10
23860: PPUSH
23861: CALL_OW 458
23865: NOT
23866: AND
23867: IFFALSE 23909
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23869: LD_ADDR_VAR 0 7
23873: PUSH
23874: LD_VAR 0 7
23878: PPUSH
23879: LD_VAR 0 7
23883: PUSH
23884: LD_INT 1
23886: PLUS
23887: PPUSH
23888: LD_VAR 0 9
23892: PUSH
23893: LD_VAR 0 10
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PPUSH
23902: CALL_OW 1
23906: ST_TO_ADDR
23907: GO 23923
// i := i - 1 ;
23909: LD_ADDR_VAR 0 5
23913: PUSH
23914: LD_VAR 0 5
23918: PUSH
23919: LD_INT 1
23921: MINUS
23922: ST_TO_ADDR
// end ;
23923: GO 23729
23925: POP
23926: POP
// for i in tmp do
23927: LD_ADDR_VAR 0 5
23931: PUSH
23932: LD_VAR 0 7
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23976
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_VAR 0 5
23949: PUSH
23950: LD_INT 1
23952: ARRAY
23953: PPUSH
23954: LD_VAR 0 5
23958: PUSH
23959: LD_INT 2
23961: ARRAY
23962: PPUSH
23963: CALL 22922 0 3
23967: NOT
23968: IFFALSE 23974
// exit ;
23970: POP
23971: POP
23972: GO 23978
23974: GO 23937
23976: POP
23977: POP
// end ;
23978: LD_VAR 0 4
23982: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23983: LD_INT 0
23985: PPUSH
23986: PPUSH
23987: PPUSH
23988: PPUSH
23989: PPUSH
23990: PPUSH
23991: PPUSH
// if not GetClass ( unit ) = class_sniper then
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 257
24001: PUSH
24002: LD_INT 5
24004: EQUAL
24005: NOT
24006: IFFALSE 24010
// exit ;
24008: GO 24398
// dist := 8 ;
24010: LD_ADDR_VAR 0 5
24014: PUSH
24015: LD_INT 8
24017: ST_TO_ADDR
// viewRange := 12 ;
24018: LD_ADDR_VAR 0 7
24022: PUSH
24023: LD_INT 12
24025: ST_TO_ADDR
// side := GetSide ( unit ) ;
24026: LD_ADDR_VAR 0 6
24030: PUSH
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 255
24040: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24041: LD_INT 61
24043: PPUSH
24044: LD_VAR 0 6
24048: PPUSH
24049: CALL_OW 321
24053: PUSH
24054: LD_INT 2
24056: EQUAL
24057: IFFALSE 24067
// viewRange := 16 ;
24059: LD_ADDR_VAR 0 7
24063: PUSH
24064: LD_INT 16
24066: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24067: LD_VAR 0 1
24071: PPUSH
24072: LD_VAR 0 2
24076: PPUSH
24077: LD_VAR 0 3
24081: PPUSH
24082: CALL_OW 297
24086: PUSH
24087: LD_VAR 0 5
24091: GREATER
24092: IFFALSE 24171
// begin ComMoveXY ( unit , x , y ) ;
24094: LD_VAR 0 1
24098: PPUSH
24099: LD_VAR 0 2
24103: PPUSH
24104: LD_VAR 0 3
24108: PPUSH
24109: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24113: LD_INT 35
24115: PPUSH
24116: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24120: LD_VAR 0 1
24124: PPUSH
24125: LD_VAR 0 2
24129: PPUSH
24130: LD_VAR 0 3
24134: PPUSH
24135: CALL 60661 0 3
24139: NOT
24140: IFFALSE 24144
// exit ;
24142: GO 24398
// until GetDistUnitXY ( unit , x , y ) < dist ;
24144: LD_VAR 0 1
24148: PPUSH
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_VAR 0 3
24158: PPUSH
24159: CALL_OW 297
24163: PUSH
24164: LD_VAR 0 5
24168: LESS
24169: IFFALSE 24113
// end ; ComTurnXY ( unit , x , y ) ;
24171: LD_VAR 0 1
24175: PPUSH
24176: LD_VAR 0 2
24180: PPUSH
24181: LD_VAR 0 3
24185: PPUSH
24186: CALL_OW 118
// wait ( 5 ) ;
24190: LD_INT 5
24192: PPUSH
24193: CALL_OW 67
// _d := GetDir ( unit ) ;
24197: LD_ADDR_VAR 0 10
24201: PUSH
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL_OW 254
24211: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24212: LD_ADDR_VAR 0 8
24216: PUSH
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 250
24226: PPUSH
24227: LD_VAR 0 10
24231: PPUSH
24232: LD_VAR 0 5
24236: PPUSH
24237: CALL_OW 272
24241: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24242: LD_ADDR_VAR 0 9
24246: PUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 251
24256: PPUSH
24257: LD_VAR 0 10
24261: PPUSH
24262: LD_VAR 0 5
24266: PPUSH
24267: CALL_OW 273
24271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24272: LD_VAR 0 8
24276: PPUSH
24277: LD_VAR 0 9
24281: PPUSH
24282: CALL_OW 488
24286: NOT
24287: IFFALSE 24291
// exit ;
24289: GO 24398
// ComAnimCustom ( unit , 1 ) ;
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_INT 1
24298: PPUSH
24299: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24303: LD_VAR 0 8
24307: PPUSH
24308: LD_VAR 0 9
24312: PPUSH
24313: LD_VAR 0 6
24317: PPUSH
24318: LD_VAR 0 7
24322: PPUSH
24323: CALL_OW 330
// repeat wait ( 1 ) ;
24327: LD_INT 1
24329: PPUSH
24330: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 316
24343: PUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 314
24353: OR
24354: PUSH
24355: LD_VAR 0 1
24359: PPUSH
24360: CALL_OW 302
24364: NOT
24365: OR
24366: PUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 301
24376: OR
24377: IFFALSE 24327
// RemoveSeeing ( _x , _y , side ) ;
24379: LD_VAR 0 8
24383: PPUSH
24384: LD_VAR 0 9
24388: PPUSH
24389: LD_VAR 0 6
24393: PPUSH
24394: CALL_OW 331
// end ; end_of_file
24398: LD_VAR 0 4
24402: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24403: LD_INT 0
24405: PPUSH
24406: PPUSH
// if exist_mode then
24407: LD_VAR 0 2
24411: IFFALSE 24436
// unit := CreateCharacter ( prefix & ident ) else
24413: LD_ADDR_VAR 0 5
24417: PUSH
24418: LD_VAR 0 3
24422: PUSH
24423: LD_VAR 0 1
24427: STR
24428: PPUSH
24429: CALL_OW 34
24433: ST_TO_ADDR
24434: GO 24451
// unit := NewCharacter ( ident ) ;
24436: LD_ADDR_VAR 0 5
24440: PUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 25
24450: ST_TO_ADDR
// result := unit ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: LD_VAR 0 5
24460: ST_TO_ADDR
// end ;
24461: LD_VAR 0 4
24465: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24466: LD_INT 0
24468: PPUSH
24469: PPUSH
// if not side or not nation then
24470: LD_VAR 0 1
24474: NOT
24475: PUSH
24476: LD_VAR 0 2
24480: NOT
24481: OR
24482: IFFALSE 24486
// exit ;
24484: GO 25254
// case nation of nation_american :
24486: LD_VAR 0 2
24490: PUSH
24491: LD_INT 1
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24713
24499: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24500: LD_ADDR_VAR 0 4
24504: PUSH
24505: LD_INT 35
24507: PUSH
24508: LD_INT 45
24510: PUSH
24511: LD_INT 46
24513: PUSH
24514: LD_INT 47
24516: PUSH
24517: LD_INT 82
24519: PUSH
24520: LD_INT 83
24522: PUSH
24523: LD_INT 84
24525: PUSH
24526: LD_INT 85
24528: PUSH
24529: LD_INT 86
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 2
24537: PUSH
24538: LD_INT 6
24540: PUSH
24541: LD_INT 15
24543: PUSH
24544: LD_INT 16
24546: PUSH
24547: LD_INT 7
24549: PUSH
24550: LD_INT 12
24552: PUSH
24553: LD_INT 13
24555: PUSH
24556: LD_INT 10
24558: PUSH
24559: LD_INT 14
24561: PUSH
24562: LD_INT 20
24564: PUSH
24565: LD_INT 21
24567: PUSH
24568: LD_INT 22
24570: PUSH
24571: LD_INT 25
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: LD_INT 27
24579: PUSH
24580: LD_INT 36
24582: PUSH
24583: LD_INT 69
24585: PUSH
24586: LD_INT 39
24588: PUSH
24589: LD_INT 34
24591: PUSH
24592: LD_INT 40
24594: PUSH
24595: LD_INT 48
24597: PUSH
24598: LD_INT 49
24600: PUSH
24601: LD_INT 50
24603: PUSH
24604: LD_INT 51
24606: PUSH
24607: LD_INT 52
24609: PUSH
24610: LD_INT 53
24612: PUSH
24613: LD_INT 54
24615: PUSH
24616: LD_INT 55
24618: PUSH
24619: LD_INT 56
24621: PUSH
24622: LD_INT 57
24624: PUSH
24625: LD_INT 58
24627: PUSH
24628: LD_INT 59
24630: PUSH
24631: LD_INT 60
24633: PUSH
24634: LD_INT 61
24636: PUSH
24637: LD_INT 62
24639: PUSH
24640: LD_INT 80
24642: PUSH
24643: LD_INT 82
24645: PUSH
24646: LD_INT 83
24648: PUSH
24649: LD_INT 84
24651: PUSH
24652: LD_INT 85
24654: PUSH
24655: LD_INT 86
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: ST_TO_ADDR
24711: GO 25178
24713: LD_INT 2
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24947
24721: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24722: LD_ADDR_VAR 0 4
24726: PUSH
24727: LD_INT 35
24729: PUSH
24730: LD_INT 45
24732: PUSH
24733: LD_INT 46
24735: PUSH
24736: LD_INT 47
24738: PUSH
24739: LD_INT 82
24741: PUSH
24742: LD_INT 83
24744: PUSH
24745: LD_INT 84
24747: PUSH
24748: LD_INT 85
24750: PUSH
24751: LD_INT 87
24753: PUSH
24754: LD_INT 70
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 11
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: LD_INT 4
24768: PUSH
24769: LD_INT 5
24771: PUSH
24772: LD_INT 6
24774: PUSH
24775: LD_INT 15
24777: PUSH
24778: LD_INT 18
24780: PUSH
24781: LD_INT 7
24783: PUSH
24784: LD_INT 17
24786: PUSH
24787: LD_INT 8
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_INT 72
24801: PUSH
24802: LD_INT 26
24804: PUSH
24805: LD_INT 69
24807: PUSH
24808: LD_INT 39
24810: PUSH
24811: LD_INT 40
24813: PUSH
24814: LD_INT 41
24816: PUSH
24817: LD_INT 42
24819: PUSH
24820: LD_INT 43
24822: PUSH
24823: LD_INT 48
24825: PUSH
24826: LD_INT 49
24828: PUSH
24829: LD_INT 50
24831: PUSH
24832: LD_INT 51
24834: PUSH
24835: LD_INT 52
24837: PUSH
24838: LD_INT 53
24840: PUSH
24841: LD_INT 54
24843: PUSH
24844: LD_INT 55
24846: PUSH
24847: LD_INT 56
24849: PUSH
24850: LD_INT 60
24852: PUSH
24853: LD_INT 61
24855: PUSH
24856: LD_INT 62
24858: PUSH
24859: LD_INT 66
24861: PUSH
24862: LD_INT 67
24864: PUSH
24865: LD_INT 68
24867: PUSH
24868: LD_INT 81
24870: PUSH
24871: LD_INT 82
24873: PUSH
24874: LD_INT 83
24876: PUSH
24877: LD_INT 84
24879: PUSH
24880: LD_INT 85
24882: PUSH
24883: LD_INT 87
24885: PUSH
24886: LD_INT 88
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: ST_TO_ADDR
24945: GO 25178
24947: LD_INT 3
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24955
24953: GO 25177
24955: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24956: LD_ADDR_VAR 0 4
24960: PUSH
24961: LD_INT 46
24963: PUSH
24964: LD_INT 47
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 82
24975: PUSH
24976: LD_INT 83
24978: PUSH
24979: LD_INT 84
24981: PUSH
24982: LD_INT 85
24984: PUSH
24985: LD_INT 86
24987: PUSH
24988: LD_INT 11
24990: PUSH
24991: LD_INT 9
24993: PUSH
24994: LD_INT 20
24996: PUSH
24997: LD_INT 19
24999: PUSH
25000: LD_INT 21
25002: PUSH
25003: LD_INT 24
25005: PUSH
25006: LD_INT 22
25008: PUSH
25009: LD_INT 25
25011: PUSH
25012: LD_INT 28
25014: PUSH
25015: LD_INT 29
25017: PUSH
25018: LD_INT 30
25020: PUSH
25021: LD_INT 31
25023: PUSH
25024: LD_INT 37
25026: PUSH
25027: LD_INT 38
25029: PUSH
25030: LD_INT 32
25032: PUSH
25033: LD_INT 27
25035: PUSH
25036: LD_INT 33
25038: PUSH
25039: LD_INT 69
25041: PUSH
25042: LD_INT 39
25044: PUSH
25045: LD_INT 34
25047: PUSH
25048: LD_INT 40
25050: PUSH
25051: LD_INT 71
25053: PUSH
25054: LD_INT 23
25056: PUSH
25057: LD_INT 44
25059: PUSH
25060: LD_INT 48
25062: PUSH
25063: LD_INT 49
25065: PUSH
25066: LD_INT 50
25068: PUSH
25069: LD_INT 51
25071: PUSH
25072: LD_INT 52
25074: PUSH
25075: LD_INT 53
25077: PUSH
25078: LD_INT 54
25080: PUSH
25081: LD_INT 55
25083: PUSH
25084: LD_INT 56
25086: PUSH
25087: LD_INT 57
25089: PUSH
25090: LD_INT 58
25092: PUSH
25093: LD_INT 59
25095: PUSH
25096: LD_INT 63
25098: PUSH
25099: LD_INT 64
25101: PUSH
25102: LD_INT 65
25104: PUSH
25105: LD_INT 82
25107: PUSH
25108: LD_INT 83
25110: PUSH
25111: LD_INT 84
25113: PUSH
25114: LD_INT 85
25116: PUSH
25117: LD_INT 86
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: ST_TO_ADDR
25175: GO 25178
25177: POP
// if state > - 1 and state < 3 then
25178: LD_VAR 0 3
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: GREATER
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: LD_INT 3
25195: LESS
25196: AND
25197: IFFALSE 25254
// for i in result do
25199: LD_ADDR_VAR 0 5
25203: PUSH
25204: LD_VAR 0 4
25208: PUSH
25209: FOR_IN
25210: IFFALSE 25252
// if GetTech ( i , side ) <> state then
25212: LD_VAR 0 5
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL_OW 321
25226: PUSH
25227: LD_VAR 0 3
25231: NONEQUAL
25232: IFFALSE 25250
// result := result diff i ;
25234: LD_ADDR_VAR 0 4
25238: PUSH
25239: LD_VAR 0 4
25243: PUSH
25244: LD_VAR 0 5
25248: DIFF
25249: ST_TO_ADDR
25250: GO 25209
25252: POP
25253: POP
// end ;
25254: LD_VAR 0 4
25258: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25259: LD_INT 0
25261: PPUSH
25262: PPUSH
25263: PPUSH
// result := true ;
25264: LD_ADDR_VAR 0 3
25268: PUSH
25269: LD_INT 1
25271: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25272: LD_ADDR_VAR 0 5
25276: PUSH
25277: LD_VAR 0 2
25281: PPUSH
25282: CALL_OW 480
25286: ST_TO_ADDR
// if not tmp then
25287: LD_VAR 0 5
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25345
// for i in tmp do
25296: LD_ADDR_VAR 0 4
25300: PUSH
25301: LD_VAR 0 5
25305: PUSH
25306: FOR_IN
25307: IFFALSE 25343
// if GetTech ( i , side ) <> state_researched then
25309: LD_VAR 0 4
25313: PPUSH
25314: LD_VAR 0 1
25318: PPUSH
25319: CALL_OW 321
25323: PUSH
25324: LD_INT 2
25326: NONEQUAL
25327: IFFALSE 25341
// begin result := false ;
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 0
25336: ST_TO_ADDR
// exit ;
25337: POP
25338: POP
25339: GO 25345
// end ;
25341: GO 25306
25343: POP
25344: POP
// end ;
25345: LD_VAR 0 3
25349: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25350: LD_INT 0
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25365: LD_VAR 0 1
25369: NOT
25370: PUSH
25371: LD_VAR 0 1
25375: PPUSH
25376: CALL_OW 257
25380: PUSH
25381: LD_INT 9
25383: NONEQUAL
25384: OR
25385: IFFALSE 25389
// exit ;
25387: GO 25962
// side := GetSide ( unit ) ;
25389: LD_ADDR_VAR 0 9
25393: PUSH
25394: LD_VAR 0 1
25398: PPUSH
25399: CALL_OW 255
25403: ST_TO_ADDR
// tech_space := tech_spacanom ;
25404: LD_ADDR_VAR 0 12
25408: PUSH
25409: LD_INT 29
25411: ST_TO_ADDR
// tech_time := tech_taurad ;
25412: LD_ADDR_VAR 0 13
25416: PUSH
25417: LD_INT 28
25419: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25420: LD_ADDR_VAR 0 11
25424: PUSH
25425: LD_VAR 0 1
25429: PPUSH
25430: CALL_OW 310
25434: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25435: LD_VAR 0 11
25439: PPUSH
25440: CALL_OW 247
25444: PUSH
25445: LD_INT 2
25447: EQUAL
25448: IFFALSE 25452
// exit ;
25450: GO 25962
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25452: LD_ADDR_VAR 0 8
25456: PUSH
25457: LD_INT 81
25459: PUSH
25460: LD_VAR 0 9
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: LD_INT 21
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: ST_TO_ADDR
// if not tmp then
25495: LD_VAR 0 8
25499: NOT
25500: IFFALSE 25504
// exit ;
25502: GO 25962
// if in_unit then
25504: LD_VAR 0 11
25508: IFFALSE 25532
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25510: LD_ADDR_VAR 0 10
25514: PUSH
25515: LD_VAR 0 8
25519: PPUSH
25520: LD_VAR 0 11
25524: PPUSH
25525: CALL_OW 74
25529: ST_TO_ADDR
25530: GO 25552
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25532: LD_ADDR_VAR 0 10
25536: PUSH
25537: LD_VAR 0 8
25541: PPUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 74
25551: ST_TO_ADDR
// if not enemy then
25552: LD_VAR 0 10
25556: NOT
25557: IFFALSE 25561
// exit ;
25559: GO 25962
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25561: LD_VAR 0 11
25565: PUSH
25566: LD_VAR 0 11
25570: PPUSH
25571: LD_VAR 0 10
25575: PPUSH
25576: CALL_OW 296
25580: PUSH
25581: LD_INT 13
25583: GREATER
25584: AND
25585: PUSH
25586: LD_VAR 0 1
25590: PPUSH
25591: LD_VAR 0 10
25595: PPUSH
25596: CALL_OW 296
25600: PUSH
25601: LD_INT 12
25603: GREATER
25604: OR
25605: IFFALSE 25609
// exit ;
25607: GO 25962
// missile := [ 1 ] ;
25609: LD_ADDR_VAR 0 14
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: EMPTY
25618: LIST
25619: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25620: LD_VAR 0 9
25624: PPUSH
25625: LD_VAR 0 12
25629: PPUSH
25630: CALL_OW 325
25634: IFFALSE 25663
// missile := Replace ( missile , missile + 1 , 2 ) ;
25636: LD_ADDR_VAR 0 14
25640: PUSH
25641: LD_VAR 0 14
25645: PPUSH
25646: LD_VAR 0 14
25650: PUSH
25651: LD_INT 1
25653: PLUS
25654: PPUSH
25655: LD_INT 2
25657: PPUSH
25658: CALL_OW 1
25662: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25663: LD_VAR 0 9
25667: PPUSH
25668: LD_VAR 0 13
25672: PPUSH
25673: CALL_OW 325
25677: PUSH
25678: LD_VAR 0 10
25682: PPUSH
25683: CALL_OW 255
25687: PPUSH
25688: LD_VAR 0 13
25692: PPUSH
25693: CALL_OW 325
25697: NOT
25698: AND
25699: IFFALSE 25728
// missile := Replace ( missile , missile + 1 , 3 ) ;
25701: LD_ADDR_VAR 0 14
25705: PUSH
25706: LD_VAR 0 14
25710: PPUSH
25711: LD_VAR 0 14
25715: PUSH
25716: LD_INT 1
25718: PLUS
25719: PPUSH
25720: LD_INT 3
25722: PPUSH
25723: CALL_OW 1
25727: ST_TO_ADDR
// if missile < 2 then
25728: LD_VAR 0 14
25732: PUSH
25733: LD_INT 2
25735: LESS
25736: IFFALSE 25740
// exit ;
25738: GO 25962
// x := GetX ( enemy ) ;
25740: LD_ADDR_VAR 0 4
25744: PUSH
25745: LD_VAR 0 10
25749: PPUSH
25750: CALL_OW 250
25754: ST_TO_ADDR
// y := GetY ( enemy ) ;
25755: LD_ADDR_VAR 0 5
25759: PUSH
25760: LD_VAR 0 10
25764: PPUSH
25765: CALL_OW 251
25769: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25770: LD_ADDR_VAR 0 6
25774: PUSH
25775: LD_VAR 0 4
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PPUSH
25784: LD_INT 1
25786: PPUSH
25787: CALL_OW 12
25791: PLUS
25792: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25793: LD_ADDR_VAR 0 7
25797: PUSH
25798: LD_VAR 0 5
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PPUSH
25807: LD_INT 1
25809: PPUSH
25810: CALL_OW 12
25814: PLUS
25815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25816: LD_VAR 0 6
25820: PPUSH
25821: LD_VAR 0 7
25825: PPUSH
25826: CALL_OW 488
25830: NOT
25831: IFFALSE 25853
// begin _x := x ;
25833: LD_ADDR_VAR 0 6
25837: PUSH
25838: LD_VAR 0 4
25842: ST_TO_ADDR
// _y := y ;
25843: LD_ADDR_VAR 0 7
25847: PUSH
25848: LD_VAR 0 5
25852: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_INT 1
25860: PPUSH
25861: LD_VAR 0 14
25865: PPUSH
25866: CALL_OW 12
25870: ST_TO_ADDR
// case i of 1 :
25871: LD_VAR 0 3
25875: PUSH
25876: LD_INT 1
25878: DOUBLE
25879: EQUAL
25880: IFTRUE 25884
25882: GO 25901
25884: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25885: LD_VAR 0 1
25889: PPUSH
25890: LD_VAR 0 10
25894: PPUSH
25895: CALL_OW 115
25899: GO 25962
25901: LD_INT 2
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25931
25909: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25910: LD_VAR 0 1
25914: PPUSH
25915: LD_VAR 0 6
25919: PPUSH
25920: LD_VAR 0 7
25924: PPUSH
25925: CALL_OW 153
25929: GO 25962
25931: LD_INT 3
25933: DOUBLE
25934: EQUAL
25935: IFTRUE 25939
25937: GO 25961
25939: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25940: LD_VAR 0 1
25944: PPUSH
25945: LD_VAR 0 6
25949: PPUSH
25950: LD_VAR 0 7
25954: PPUSH
25955: CALL_OW 154
25959: GO 25962
25961: POP
// end ;
25962: LD_VAR 0 2
25966: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25967: LD_INT 0
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
// if not unit or not building then
25975: LD_VAR 0 1
25979: NOT
25980: PUSH
25981: LD_VAR 0 2
25985: NOT
25986: OR
25987: IFFALSE 25991
// exit ;
25989: GO 26149
// x := GetX ( building ) ;
25991: LD_ADDR_VAR 0 5
25995: PUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: CALL_OW 250
26005: ST_TO_ADDR
// y := GetY ( building ) ;
26006: LD_ADDR_VAR 0 6
26010: PUSH
26011: LD_VAR 0 2
26015: PPUSH
26016: CALL_OW 251
26020: ST_TO_ADDR
// for i = 0 to 5 do
26021: LD_ADDR_VAR 0 4
26025: PUSH
26026: DOUBLE
26027: LD_INT 0
26029: DEC
26030: ST_TO_ADDR
26031: LD_INT 5
26033: PUSH
26034: FOR_TO
26035: IFFALSE 26147
// begin _x := ShiftX ( x , i , 3 ) ;
26037: LD_ADDR_VAR 0 7
26041: PUSH
26042: LD_VAR 0 5
26046: PPUSH
26047: LD_VAR 0 4
26051: PPUSH
26052: LD_INT 3
26054: PPUSH
26055: CALL_OW 272
26059: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26060: LD_ADDR_VAR 0 8
26064: PUSH
26065: LD_VAR 0 6
26069: PPUSH
26070: LD_VAR 0 4
26074: PPUSH
26075: LD_INT 3
26077: PPUSH
26078: CALL_OW 273
26082: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26083: LD_VAR 0 7
26087: PPUSH
26088: LD_VAR 0 8
26092: PPUSH
26093: CALL_OW 488
26097: NOT
26098: IFFALSE 26102
// continue ;
26100: GO 26034
// if HexInfo ( _x , _y ) = 0 then
26102: LD_VAR 0 7
26106: PPUSH
26107: LD_VAR 0 8
26111: PPUSH
26112: CALL_OW 428
26116: PUSH
26117: LD_INT 0
26119: EQUAL
26120: IFFALSE 26145
// begin ComMoveXY ( unit , _x , _y ) ;
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_VAR 0 7
26131: PPUSH
26132: LD_VAR 0 8
26136: PPUSH
26137: CALL_OW 111
// exit ;
26141: POP
26142: POP
26143: GO 26149
// end ; end ;
26145: GO 26034
26147: POP
26148: POP
// end ;
26149: LD_VAR 0 3
26153: RET
// export function ScanBase ( side , base_area ) ; begin
26154: LD_INT 0
26156: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26157: LD_ADDR_VAR 0 3
26161: PUSH
26162: LD_VAR 0 2
26166: PPUSH
26167: LD_INT 81
26169: PUSH
26170: LD_VAR 0 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PPUSH
26179: CALL_OW 70
26183: ST_TO_ADDR
// end ;
26184: LD_VAR 0 3
26188: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
// result := false ;
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_INT 0
26202: ST_TO_ADDR
// side := GetSide ( unit ) ;
26203: LD_ADDR_VAR 0 3
26207: PUSH
26208: LD_VAR 0 1
26212: PPUSH
26213: CALL_OW 255
26217: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26218: LD_ADDR_VAR 0 4
26222: PUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 248
26232: ST_TO_ADDR
// case nat of 1 :
26233: LD_VAR 0 4
26237: PUSH
26238: LD_INT 1
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26257
26246: POP
// tech := tech_lassight ; 2 :
26247: LD_ADDR_VAR 0 5
26251: PUSH
26252: LD_INT 12
26254: ST_TO_ADDR
26255: GO 26296
26257: LD_INT 2
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26276
26265: POP
// tech := tech_mortar ; 3 :
26266: LD_ADDR_VAR 0 5
26270: PUSH
26271: LD_INT 41
26273: ST_TO_ADDR
26274: GO 26296
26276: LD_INT 3
26278: DOUBLE
26279: EQUAL
26280: IFTRUE 26284
26282: GO 26295
26284: POP
// tech := tech_bazooka ; end ;
26285: LD_ADDR_VAR 0 5
26289: PUSH
26290: LD_INT 44
26292: ST_TO_ADDR
26293: GO 26296
26295: POP
// if Researched ( side , tech ) then
26296: LD_VAR 0 3
26300: PPUSH
26301: LD_VAR 0 5
26305: PPUSH
26306: CALL_OW 325
26310: IFFALSE 26337
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26312: LD_ADDR_VAR 0 2
26316: PUSH
26317: LD_INT 5
26319: PUSH
26320: LD_INT 8
26322: PUSH
26323: LD_INT 9
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: LIST
26330: PUSH
26331: LD_VAR 0 4
26335: ARRAY
26336: ST_TO_ADDR
// end ;
26337: LD_VAR 0 2
26341: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26342: LD_INT 0
26344: PPUSH
26345: PPUSH
26346: PPUSH
// if not mines then
26347: LD_VAR 0 2
26351: NOT
26352: IFFALSE 26356
// exit ;
26354: GO 26500
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26356: LD_ADDR_VAR 0 5
26360: PUSH
26361: LD_INT 81
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 3
26375: PUSH
26376: LD_INT 21
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: ST_TO_ADDR
// for i in mines do
26399: LD_ADDR_VAR 0 4
26403: PUSH
26404: LD_VAR 0 2
26408: PUSH
26409: FOR_IN
26410: IFFALSE 26498
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26412: LD_VAR 0 4
26416: PUSH
26417: LD_INT 1
26419: ARRAY
26420: PPUSH
26421: LD_VAR 0 4
26425: PUSH
26426: LD_INT 2
26428: ARRAY
26429: PPUSH
26430: CALL_OW 458
26434: NOT
26435: IFFALSE 26439
// continue ;
26437: GO 26409
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26439: LD_VAR 0 4
26443: PUSH
26444: LD_INT 1
26446: ARRAY
26447: PPUSH
26448: LD_VAR 0 4
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PPUSH
26457: CALL_OW 428
26461: PUSH
26462: LD_VAR 0 5
26466: IN
26467: IFFALSE 26496
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26469: LD_VAR 0 4
26473: PUSH
26474: LD_INT 1
26476: ARRAY
26477: PPUSH
26478: LD_VAR 0 4
26482: PUSH
26483: LD_INT 2
26485: ARRAY
26486: PPUSH
26487: LD_VAR 0 1
26491: PPUSH
26492: CALL_OW 456
// end ;
26496: GO 26409
26498: POP
26499: POP
// end ;
26500: LD_VAR 0 3
26504: RET
// export function Count ( array ) ; var i ; begin
26505: LD_INT 0
26507: PPUSH
26508: PPUSH
// result := 0 ;
26509: LD_ADDR_VAR 0 2
26513: PUSH
26514: LD_INT 0
26516: ST_TO_ADDR
// for i in array do
26517: LD_ADDR_VAR 0 3
26521: PUSH
26522: LD_VAR 0 1
26526: PUSH
26527: FOR_IN
26528: IFFALSE 26552
// if i then
26530: LD_VAR 0 3
26534: IFFALSE 26550
// result := result + 1 ;
26536: LD_ADDR_VAR 0 2
26540: PUSH
26541: LD_VAR 0 2
26545: PUSH
26546: LD_INT 1
26548: PLUS
26549: ST_TO_ADDR
26550: GO 26527
26552: POP
26553: POP
// end ;
26554: LD_VAR 0 2
26558: RET
// export function IsEmpty ( building ) ; begin
26559: LD_INT 0
26561: PPUSH
// if not building then
26562: LD_VAR 0 1
26566: NOT
26567: IFFALSE 26571
// exit ;
26569: GO 26614
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: LD_VAR 0 1
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: CALL_OW 255
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 58
26600: PUSH
26601: EMPTY
26602: LIST
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PPUSH
26608: CALL_OW 69
26612: IN
26613: ST_TO_ADDR
// end ;
26614: LD_VAR 0 2
26618: RET
// export function IsNotFull ( building ) ; var places ; begin
26619: LD_INT 0
26621: PPUSH
26622: PPUSH
// if not building then
26623: LD_VAR 0 1
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26803
// result := false ;
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_INT 0
26639: ST_TO_ADDR
// places := 0 ;
26640: LD_ADDR_VAR 0 3
26644: PUSH
26645: LD_INT 0
26647: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26648: LD_VAR 0 1
26652: PPUSH
26653: CALL_OW 266
26657: PUSH
26658: LD_INT 0
26660: DOUBLE
26661: EQUAL
26662: IFTRUE 26720
26664: LD_INT 1
26666: DOUBLE
26667: EQUAL
26668: IFTRUE 26720
26670: LD_INT 6
26672: DOUBLE
26673: EQUAL
26674: IFTRUE 26720
26676: LD_INT 7
26678: DOUBLE
26679: EQUAL
26680: IFTRUE 26720
26682: LD_INT 8
26684: DOUBLE
26685: EQUAL
26686: IFTRUE 26720
26688: LD_INT 4
26690: DOUBLE
26691: EQUAL
26692: IFTRUE 26720
26694: LD_INT 5
26696: DOUBLE
26697: EQUAL
26698: IFTRUE 26720
26700: LD_INT 2
26702: DOUBLE
26703: EQUAL
26704: IFTRUE 26720
26706: LD_INT 3
26708: DOUBLE
26709: EQUAL
26710: IFTRUE 26720
26712: LD_INT 35
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 26731
26720: POP
// places := 6 ; b_bunker , b_breastwork :
26721: LD_ADDR_VAR 0 3
26725: PUSH
26726: LD_INT 6
26728: ST_TO_ADDR
26729: GO 26776
26731: LD_INT 32
26733: DOUBLE
26734: EQUAL
26735: IFTRUE 26745
26737: LD_INT 31
26739: DOUBLE
26740: EQUAL
26741: IFTRUE 26745
26743: GO 26756
26745: POP
// places := 1 ; b_control_tower :
26746: LD_ADDR_VAR 0 3
26750: PUSH
26751: LD_INT 1
26753: ST_TO_ADDR
26754: GO 26776
26756: LD_INT 36
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26775
26764: POP
// places := 3 ; end ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_INT 3
26772: ST_TO_ADDR
26773: GO 26776
26775: POP
// if places then
26776: LD_VAR 0 3
26780: IFFALSE 26803
// result := UnitsInside ( building ) < places ;
26782: LD_ADDR_VAR 0 2
26786: PUSH
26787: LD_VAR 0 1
26791: PPUSH
26792: CALL_OW 313
26796: PUSH
26797: LD_VAR 0 3
26801: LESS
26802: ST_TO_ADDR
// end ;
26803: LD_VAR 0 2
26807: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
// tmp := [ ] ;
26814: LD_ADDR_VAR 0 3
26818: PUSH
26819: EMPTY
26820: ST_TO_ADDR
// list := [ ] ;
26821: LD_ADDR_VAR 0 5
26825: PUSH
26826: EMPTY
26827: ST_TO_ADDR
// for i = 16 to 25 do
26828: LD_ADDR_VAR 0 4
26832: PUSH
26833: DOUBLE
26834: LD_INT 16
26836: DEC
26837: ST_TO_ADDR
26838: LD_INT 25
26840: PUSH
26841: FOR_TO
26842: IFFALSE 26915
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26844: LD_ADDR_VAR 0 3
26848: PUSH
26849: LD_VAR 0 3
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 255
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 91
26873: PUSH
26874: LD_VAR 0 1
26878: PUSH
26879: LD_INT 6
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 30
26889: PUSH
26890: LD_VAR 0 4
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: PPUSH
26907: CALL_OW 69
26911: ADD
26912: ST_TO_ADDR
26913: GO 26841
26915: POP
26916: POP
// for i = 1 to tmp do
26917: LD_ADDR_VAR 0 4
26921: PUSH
26922: DOUBLE
26923: LD_INT 1
26925: DEC
26926: ST_TO_ADDR
26927: LD_VAR 0 3
26931: PUSH
26932: FOR_TO
26933: IFFALSE 27021
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26935: LD_ADDR_VAR 0 5
26939: PUSH
26940: LD_VAR 0 5
26944: PUSH
26945: LD_VAR 0 3
26949: PUSH
26950: LD_VAR 0 4
26954: ARRAY
26955: PPUSH
26956: CALL_OW 266
26960: PUSH
26961: LD_VAR 0 3
26965: PUSH
26966: LD_VAR 0 4
26970: ARRAY
26971: PPUSH
26972: CALL_OW 250
26976: PUSH
26977: LD_VAR 0 3
26981: PUSH
26982: LD_VAR 0 4
26986: ARRAY
26987: PPUSH
26988: CALL_OW 251
26992: PUSH
26993: LD_VAR 0 3
26997: PUSH
26998: LD_VAR 0 4
27002: ARRAY
27003: PPUSH
27004: CALL_OW 254
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: ADD
27018: ST_TO_ADDR
27019: GO 26932
27021: POP
27022: POP
// result := list ;
27023: LD_ADDR_VAR 0 2
27027: PUSH
27028: LD_VAR 0 5
27032: ST_TO_ADDR
// end ;
27033: LD_VAR 0 2
27037: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27038: LD_INT 0
27040: PPUSH
27041: PPUSH
27042: PPUSH
27043: PPUSH
27044: PPUSH
27045: PPUSH
27046: PPUSH
// if not factory then
27047: LD_VAR 0 1
27051: NOT
27052: IFFALSE 27056
// exit ;
27054: GO 27649
// if control = control_apeman then
27056: LD_VAR 0 4
27060: PUSH
27061: LD_INT 5
27063: EQUAL
27064: IFFALSE 27173
// begin tmp := UnitsInside ( factory ) ;
27066: LD_ADDR_VAR 0 8
27070: PUSH
27071: LD_VAR 0 1
27075: PPUSH
27076: CALL_OW 313
27080: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27081: LD_VAR 0 8
27085: PPUSH
27086: LD_INT 25
27088: PUSH
27089: LD_INT 12
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL_OW 72
27100: NOT
27101: IFFALSE 27111
// control := control_manual ;
27103: LD_ADDR_VAR 0 4
27107: PUSH
27108: LD_INT 1
27110: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27111: LD_ADDR_VAR 0 8
27115: PUSH
27116: LD_VAR 0 1
27120: PPUSH
27121: CALL 26808 0 1
27125: ST_TO_ADDR
// if tmp then
27126: LD_VAR 0 8
27130: IFFALSE 27173
// begin for i in tmp do
27132: LD_ADDR_VAR 0 7
27136: PUSH
27137: LD_VAR 0 8
27141: PUSH
27142: FOR_IN
27143: IFFALSE 27171
// if i [ 1 ] = b_ext_radio then
27145: LD_VAR 0 7
27149: PUSH
27150: LD_INT 1
27152: ARRAY
27153: PUSH
27154: LD_INT 22
27156: EQUAL
27157: IFFALSE 27169
// begin control := control_remote ;
27159: LD_ADDR_VAR 0 4
27163: PUSH
27164: LD_INT 2
27166: ST_TO_ADDR
// break ;
27167: GO 27171
// end ;
27169: GO 27142
27171: POP
27172: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27173: LD_VAR 0 1
27177: PPUSH
27178: LD_VAR 0 2
27182: PPUSH
27183: LD_VAR 0 3
27187: PPUSH
27188: LD_VAR 0 4
27192: PPUSH
27193: LD_VAR 0 5
27197: PPUSH
27198: CALL_OW 448
27202: IFFALSE 27237
// begin result := [ chassis , engine , control , weapon ] ;
27204: LD_ADDR_VAR 0 6
27208: PUSH
27209: LD_VAR 0 2
27213: PUSH
27214: LD_VAR 0 3
27218: PUSH
27219: LD_VAR 0 4
27223: PUSH
27224: LD_VAR 0 5
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// exit ;
27235: GO 27649
// end ; _chassis := AvailableChassisList ( factory ) ;
27237: LD_ADDR_VAR 0 9
27241: PUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 475
27251: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27252: LD_ADDR_VAR 0 11
27256: PUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 476
27266: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27267: LD_ADDR_VAR 0 12
27271: PUSH
27272: LD_VAR 0 1
27276: PPUSH
27277: CALL_OW 477
27281: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27282: LD_ADDR_VAR 0 10
27286: PUSH
27287: LD_VAR 0 1
27291: PPUSH
27292: CALL_OW 478
27296: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27297: LD_VAR 0 9
27301: NOT
27302: PUSH
27303: LD_VAR 0 11
27307: NOT
27308: OR
27309: PUSH
27310: LD_VAR 0 12
27314: NOT
27315: OR
27316: PUSH
27317: LD_VAR 0 10
27321: NOT
27322: OR
27323: IFFALSE 27358
// begin result := [ chassis , engine , control , weapon ] ;
27325: LD_ADDR_VAR 0 6
27329: PUSH
27330: LD_VAR 0 2
27334: PUSH
27335: LD_VAR 0 3
27339: PUSH
27340: LD_VAR 0 4
27344: PUSH
27345: LD_VAR 0 5
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// exit ;
27356: GO 27649
// end ; if not chassis in _chassis then
27358: LD_VAR 0 2
27362: PUSH
27363: LD_VAR 0 9
27367: IN
27368: NOT
27369: IFFALSE 27395
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27371: LD_ADDR_VAR 0 2
27375: PUSH
27376: LD_VAR 0 9
27380: PUSH
27381: LD_INT 1
27383: PPUSH
27384: LD_VAR 0 9
27388: PPUSH
27389: CALL_OW 12
27393: ARRAY
27394: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27395: LD_VAR 0 2
27399: PPUSH
27400: LD_VAR 0 3
27404: PPUSH
27405: CALL 27654 0 2
27409: NOT
27410: IFFALSE 27469
// repeat engine := _engine [ 1 ] ;
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_VAR 0 11
27421: PUSH
27422: LD_INT 1
27424: ARRAY
27425: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27426: LD_ADDR_VAR 0 11
27430: PUSH
27431: LD_VAR 0 11
27435: PPUSH
27436: LD_INT 1
27438: PPUSH
27439: CALL_OW 3
27443: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27444: LD_VAR 0 2
27448: PPUSH
27449: LD_VAR 0 3
27453: PPUSH
27454: CALL 27654 0 2
27458: PUSH
27459: LD_VAR 0 11
27463: PUSH
27464: EMPTY
27465: EQUAL
27466: OR
27467: IFFALSE 27412
// if not control in _control then
27469: LD_VAR 0 4
27473: PUSH
27474: LD_VAR 0 12
27478: IN
27479: NOT
27480: IFFALSE 27506
// control := _control [ rand ( 1 , _control ) ] ;
27482: LD_ADDR_VAR 0 4
27486: PUSH
27487: LD_VAR 0 12
27491: PUSH
27492: LD_INT 1
27494: PPUSH
27495: LD_VAR 0 12
27499: PPUSH
27500: CALL_OW 12
27504: ARRAY
27505: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27506: LD_VAR 0 2
27510: PPUSH
27511: LD_VAR 0 5
27515: PPUSH
27516: CALL 27874 0 2
27520: NOT
27521: IFFALSE 27580
// repeat weapon := _weapon [ 1 ] ;
27523: LD_ADDR_VAR 0 5
27527: PUSH
27528: LD_VAR 0 10
27532: PUSH
27533: LD_INT 1
27535: ARRAY
27536: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27537: LD_ADDR_VAR 0 10
27541: PUSH
27542: LD_VAR 0 10
27546: PPUSH
27547: LD_INT 1
27549: PPUSH
27550: CALL_OW 3
27554: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27555: LD_VAR 0 2
27559: PPUSH
27560: LD_VAR 0 5
27564: PPUSH
27565: CALL 27874 0 2
27569: PUSH
27570: LD_VAR 0 10
27574: PUSH
27575: EMPTY
27576: EQUAL
27577: OR
27578: IFFALSE 27523
// result := [ ] ;
27580: LD_ADDR_VAR 0 6
27584: PUSH
27585: EMPTY
27586: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27587: LD_VAR 0 1
27591: PPUSH
27592: LD_VAR 0 2
27596: PPUSH
27597: LD_VAR 0 3
27601: PPUSH
27602: LD_VAR 0 4
27606: PPUSH
27607: LD_VAR 0 5
27611: PPUSH
27612: CALL_OW 448
27616: IFFALSE 27649
// result := [ chassis , engine , control , weapon ] ;
27618: LD_ADDR_VAR 0 6
27622: PUSH
27623: LD_VAR 0 2
27627: PUSH
27628: LD_VAR 0 3
27632: PUSH
27633: LD_VAR 0 4
27637: PUSH
27638: LD_VAR 0 5
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// end ;
27649: LD_VAR 0 6
27653: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27654: LD_INT 0
27656: PPUSH
// if not chassis or not engine then
27657: LD_VAR 0 1
27661: NOT
27662: PUSH
27663: LD_VAR 0 2
27667: NOT
27668: OR
27669: IFFALSE 27673
// exit ;
27671: GO 27869
// case engine of engine_solar :
27673: LD_VAR 0 2
27677: PUSH
27678: LD_INT 2
27680: DOUBLE
27681: EQUAL
27682: IFTRUE 27686
27684: GO 27724
27686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27687: LD_ADDR_VAR 0 3
27691: PUSH
27692: LD_INT 11
27694: PUSH
27695: LD_INT 12
27697: PUSH
27698: LD_INT 13
27700: PUSH
27701: LD_INT 14
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 3
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: ST_TO_ADDR
27722: GO 27853
27724: LD_INT 1
27726: DOUBLE
27727: EQUAL
27728: IFTRUE 27732
27730: GO 27794
27732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27733: LD_ADDR_VAR 0 3
27737: PUSH
27738: LD_INT 11
27740: PUSH
27741: LD_INT 12
27743: PUSH
27744: LD_INT 13
27746: PUSH
27747: LD_INT 14
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: LD_INT 4
27761: PUSH
27762: LD_INT 5
27764: PUSH
27765: LD_INT 21
27767: PUSH
27768: LD_INT 23
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_INT 24
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
27792: GO 27853
27794: LD_INT 3
27796: DOUBLE
27797: EQUAL
27798: IFTRUE 27802
27800: GO 27852
27802: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27803: LD_ADDR_VAR 0 3
27807: PUSH
27808: LD_INT 13
27810: PUSH
27811: LD_INT 14
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: LD_INT 4
27822: PUSH
27823: LD_INT 5
27825: PUSH
27826: LD_INT 21
27828: PUSH
27829: LD_INT 22
27831: PUSH
27832: LD_INT 23
27834: PUSH
27835: LD_INT 24
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
27850: GO 27853
27852: POP
// result := ( chassis in result ) ;
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_VAR 0 1
27862: PUSH
27863: LD_VAR 0 3
27867: IN
27868: ST_TO_ADDR
// end ;
27869: LD_VAR 0 3
27873: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27874: LD_INT 0
27876: PPUSH
// if not chassis or not weapon then
27877: LD_VAR 0 1
27881: NOT
27882: PUSH
27883: LD_VAR 0 2
27887: NOT
27888: OR
27889: IFFALSE 27893
// exit ;
27891: GO 28953
// case weapon of us_machine_gun :
27893: LD_VAR 0 2
27897: PUSH
27898: LD_INT 2
27900: DOUBLE
27901: EQUAL
27902: IFTRUE 27906
27904: GO 27936
27906: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27907: LD_ADDR_VAR 0 3
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: LD_INT 4
27923: PUSH
27924: LD_INT 5
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
27934: GO 28937
27936: LD_INT 3
27938: DOUBLE
27939: EQUAL
27940: IFTRUE 27944
27942: GO 27974
27944: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27945: LD_ADDR_VAR 0 3
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: LD_INT 4
27961: PUSH
27962: LD_INT 5
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: ST_TO_ADDR
27972: GO 28937
27974: LD_INT 11
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 27982
27980: GO 28012
27982: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27983: LD_ADDR_VAR 0 3
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 3
27996: PUSH
27997: LD_INT 4
27999: PUSH
28000: LD_INT 5
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
28010: GO 28937
28012: LD_INT 4
28014: DOUBLE
28015: EQUAL
28016: IFTRUE 28020
28018: GO 28046
28020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28021: LD_ADDR_VAR 0 3
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: LD_INT 4
28034: PUSH
28035: LD_INT 5
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: ST_TO_ADDR
28044: GO 28937
28046: LD_INT 5
28048: DOUBLE
28049: EQUAL
28050: IFTRUE 28054
28052: GO 28080
28054: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28055: LD_ADDR_VAR 0 3
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 4
28068: PUSH
28069: LD_INT 5
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: ST_TO_ADDR
28078: GO 28937
28080: LD_INT 9
28082: DOUBLE
28083: EQUAL
28084: IFTRUE 28088
28086: GO 28114
28088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: LD_INT 4
28102: PUSH
28103: LD_INT 5
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
28112: GO 28937
28114: LD_INT 7
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28148
28122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_INT 2
28130: PUSH
28131: LD_INT 3
28133: PUSH
28134: LD_INT 4
28136: PUSH
28137: LD_INT 5
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
28146: GO 28937
28148: LD_INT 12
28150: DOUBLE
28151: EQUAL
28152: IFTRUE 28156
28154: GO 28182
28156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28157: LD_ADDR_VAR 0 3
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: LD_INT 4
28170: PUSH
28171: LD_INT 5
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
28180: GO 28937
28182: LD_INT 13
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28216
28190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28191: LD_ADDR_VAR 0 3
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 4
28204: PUSH
28205: LD_INT 5
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
28214: GO 28937
28216: LD_INT 14
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28242
28224: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_INT 4
28232: PUSH
28233: LD_INT 5
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: ST_TO_ADDR
28240: GO 28937
28242: LD_INT 6
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28268
28250: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28251: LD_ADDR_VAR 0 3
28255: PUSH
28256: LD_INT 4
28258: PUSH
28259: LD_INT 5
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: ST_TO_ADDR
28266: GO 28937
28268: LD_INT 10
28270: DOUBLE
28271: EQUAL
28272: IFTRUE 28276
28274: GO 28294
28276: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28277: LD_ADDR_VAR 0 3
28281: PUSH
28282: LD_INT 4
28284: PUSH
28285: LD_INT 5
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: ST_TO_ADDR
28292: GO 28937
28294: LD_INT 22
28296: DOUBLE
28297: EQUAL
28298: IFTRUE 28302
28300: GO 28328
28302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28303: LD_ADDR_VAR 0 3
28307: PUSH
28308: LD_INT 11
28310: PUSH
28311: LD_INT 12
28313: PUSH
28314: LD_INT 13
28316: PUSH
28317: LD_INT 14
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: ST_TO_ADDR
28326: GO 28937
28328: LD_INT 23
28330: DOUBLE
28331: EQUAL
28332: IFTRUE 28336
28334: GO 28362
28336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28337: LD_ADDR_VAR 0 3
28341: PUSH
28342: LD_INT 11
28344: PUSH
28345: LD_INT 12
28347: PUSH
28348: LD_INT 13
28350: PUSH
28351: LD_INT 14
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: ST_TO_ADDR
28360: GO 28937
28362: LD_INT 24
28364: DOUBLE
28365: EQUAL
28366: IFTRUE 28370
28368: GO 28396
28370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28371: LD_ADDR_VAR 0 3
28375: PUSH
28376: LD_INT 11
28378: PUSH
28379: LD_INT 12
28381: PUSH
28382: LD_INT 13
28384: PUSH
28385: LD_INT 14
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: ST_TO_ADDR
28394: GO 28937
28396: LD_INT 30
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 28430
28404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_INT 11
28412: PUSH
28413: LD_INT 12
28415: PUSH
28416: LD_INT 13
28418: PUSH
28419: LD_INT 14
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: ST_TO_ADDR
28428: GO 28937
28430: LD_INT 25
28432: DOUBLE
28433: EQUAL
28434: IFTRUE 28438
28436: GO 28456
28438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28439: LD_ADDR_VAR 0 3
28443: PUSH
28444: LD_INT 13
28446: PUSH
28447: LD_INT 14
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: ST_TO_ADDR
28454: GO 28937
28456: LD_INT 27
28458: DOUBLE
28459: EQUAL
28460: IFTRUE 28464
28462: GO 28482
28464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28465: LD_ADDR_VAR 0 3
28469: PUSH
28470: LD_INT 13
28472: PUSH
28473: LD_INT 14
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: ST_TO_ADDR
28480: GO 28937
28482: LD_INT 92
28484: DOUBLE
28485: EQUAL
28486: IFTRUE 28490
28488: GO 28516
28490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28491: LD_ADDR_VAR 0 3
28495: PUSH
28496: LD_INT 11
28498: PUSH
28499: LD_INT 12
28501: PUSH
28502: LD_INT 13
28504: PUSH
28505: LD_INT 14
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
28514: GO 28937
28516: LD_INT 28
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28524
28522: GO 28542
28524: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28525: LD_ADDR_VAR 0 3
28529: PUSH
28530: LD_INT 13
28532: PUSH
28533: LD_INT 14
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: ST_TO_ADDR
28540: GO 28937
28542: LD_INT 29
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28550
28548: GO 28568
28550: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 13
28558: PUSH
28559: LD_INT 14
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: ST_TO_ADDR
28566: GO 28937
28568: LD_INT 31
28570: DOUBLE
28571: EQUAL
28572: IFTRUE 28576
28574: GO 28594
28576: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_INT 13
28584: PUSH
28585: LD_INT 14
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: ST_TO_ADDR
28592: GO 28937
28594: LD_INT 26
28596: DOUBLE
28597: EQUAL
28598: IFTRUE 28602
28600: GO 28620
28602: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28603: LD_ADDR_VAR 0 3
28607: PUSH
28608: LD_INT 13
28610: PUSH
28611: LD_INT 14
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: ST_TO_ADDR
28618: GO 28937
28620: LD_INT 42
28622: DOUBLE
28623: EQUAL
28624: IFTRUE 28628
28626: GO 28654
28628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28629: LD_ADDR_VAR 0 3
28633: PUSH
28634: LD_INT 21
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 23
28642: PUSH
28643: LD_INT 24
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: ST_TO_ADDR
28652: GO 28937
28654: LD_INT 43
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28688
28662: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_INT 21
28670: PUSH
28671: LD_INT 22
28673: PUSH
28674: LD_INT 23
28676: PUSH
28677: LD_INT 24
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
28686: GO 28937
28688: LD_INT 44
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28696
28694: GO 28722
28696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28697: LD_ADDR_VAR 0 3
28701: PUSH
28702: LD_INT 21
28704: PUSH
28705: LD_INT 22
28707: PUSH
28708: LD_INT 23
28710: PUSH
28711: LD_INT 24
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
28720: GO 28937
28722: LD_INT 45
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28756
28730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28731: LD_ADDR_VAR 0 3
28735: PUSH
28736: LD_INT 21
28738: PUSH
28739: LD_INT 22
28741: PUSH
28742: LD_INT 23
28744: PUSH
28745: LD_INT 24
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
28754: GO 28937
28756: LD_INT 49
28758: DOUBLE
28759: EQUAL
28760: IFTRUE 28764
28762: GO 28790
28764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28765: LD_ADDR_VAR 0 3
28769: PUSH
28770: LD_INT 21
28772: PUSH
28773: LD_INT 22
28775: PUSH
28776: LD_INT 23
28778: PUSH
28779: LD_INT 24
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: ST_TO_ADDR
28788: GO 28937
28790: LD_INT 51
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28798
28796: GO 28824
28798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_INT 21
28806: PUSH
28807: LD_INT 22
28809: PUSH
28810: LD_INT 23
28812: PUSH
28813: LD_INT 24
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
28822: GO 28937
28824: LD_INT 52
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28858
28832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28833: LD_ADDR_VAR 0 3
28837: PUSH
28838: LD_INT 21
28840: PUSH
28841: LD_INT 22
28843: PUSH
28844: LD_INT 23
28846: PUSH
28847: LD_INT 24
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: ST_TO_ADDR
28856: GO 28937
28858: LD_INT 53
28860: DOUBLE
28861: EQUAL
28862: IFTRUE 28866
28864: GO 28884
28866: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28867: LD_ADDR_VAR 0 3
28871: PUSH
28872: LD_INT 23
28874: PUSH
28875: LD_INT 24
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: ST_TO_ADDR
28882: GO 28937
28884: LD_INT 46
28886: DOUBLE
28887: EQUAL
28888: IFTRUE 28892
28890: GO 28910
28892: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28893: LD_ADDR_VAR 0 3
28897: PUSH
28898: LD_INT 23
28900: PUSH
28901: LD_INT 24
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: ST_TO_ADDR
28908: GO 28937
28910: LD_INT 47
28912: DOUBLE
28913: EQUAL
28914: IFTRUE 28918
28916: GO 28936
28918: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28919: LD_ADDR_VAR 0 3
28923: PUSH
28924: LD_INT 23
28926: PUSH
28927: LD_INT 24
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: ST_TO_ADDR
28934: GO 28937
28936: POP
// result := ( chassis in result ) ;
28937: LD_ADDR_VAR 0 3
28941: PUSH
28942: LD_VAR 0 1
28946: PUSH
28947: LD_VAR 0 3
28951: IN
28952: ST_TO_ADDR
// end ;
28953: LD_VAR 0 3
28957: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28958: LD_INT 0
28960: PPUSH
28961: PPUSH
28962: PPUSH
28963: PPUSH
28964: PPUSH
28965: PPUSH
28966: PPUSH
// result := array ;
28967: LD_ADDR_VAR 0 5
28971: PUSH
28972: LD_VAR 0 1
28976: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28977: LD_VAR 0 1
28981: NOT
28982: PUSH
28983: LD_VAR 0 2
28987: NOT
28988: OR
28989: PUSH
28990: LD_VAR 0 3
28994: NOT
28995: OR
28996: PUSH
28997: LD_VAR 0 2
29001: PUSH
29002: LD_VAR 0 1
29006: GREATER
29007: OR
29008: PUSH
29009: LD_VAR 0 3
29013: PUSH
29014: LD_VAR 0 1
29018: GREATER
29019: OR
29020: IFFALSE 29024
// exit ;
29022: GO 29320
// if direction then
29024: LD_VAR 0 4
29028: IFFALSE 29092
// begin d := 1 ;
29030: LD_ADDR_VAR 0 9
29034: PUSH
29035: LD_INT 1
29037: ST_TO_ADDR
// if i_from > i_to then
29038: LD_VAR 0 2
29042: PUSH
29043: LD_VAR 0 3
29047: GREATER
29048: IFFALSE 29074
// length := ( array - i_from ) + i_to else
29050: LD_ADDR_VAR 0 11
29054: PUSH
29055: LD_VAR 0 1
29059: PUSH
29060: LD_VAR 0 2
29064: MINUS
29065: PUSH
29066: LD_VAR 0 3
29070: PLUS
29071: ST_TO_ADDR
29072: GO 29090
// length := i_to - i_from ;
29074: LD_ADDR_VAR 0 11
29078: PUSH
29079: LD_VAR 0 3
29083: PUSH
29084: LD_VAR 0 2
29088: MINUS
29089: ST_TO_ADDR
// end else
29090: GO 29153
// begin d := - 1 ;
29092: LD_ADDR_VAR 0 9
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: ST_TO_ADDR
// if i_from > i_to then
29101: LD_VAR 0 2
29105: PUSH
29106: LD_VAR 0 3
29110: GREATER
29111: IFFALSE 29131
// length := i_from - i_to else
29113: LD_ADDR_VAR 0 11
29117: PUSH
29118: LD_VAR 0 2
29122: PUSH
29123: LD_VAR 0 3
29127: MINUS
29128: ST_TO_ADDR
29129: GO 29153
// length := ( array - i_to ) + i_from ;
29131: LD_ADDR_VAR 0 11
29135: PUSH
29136: LD_VAR 0 1
29140: PUSH
29141: LD_VAR 0 3
29145: MINUS
29146: PUSH
29147: LD_VAR 0 2
29151: PLUS
29152: ST_TO_ADDR
// end ; if not length then
29153: LD_VAR 0 11
29157: NOT
29158: IFFALSE 29162
// exit ;
29160: GO 29320
// tmp := array ;
29162: LD_ADDR_VAR 0 10
29166: PUSH
29167: LD_VAR 0 1
29171: ST_TO_ADDR
// for i = 1 to length do
29172: LD_ADDR_VAR 0 6
29176: PUSH
29177: DOUBLE
29178: LD_INT 1
29180: DEC
29181: ST_TO_ADDR
29182: LD_VAR 0 11
29186: PUSH
29187: FOR_TO
29188: IFFALSE 29308
// begin for j = 1 to array do
29190: LD_ADDR_VAR 0 7
29194: PUSH
29195: DOUBLE
29196: LD_INT 1
29198: DEC
29199: ST_TO_ADDR
29200: LD_VAR 0 1
29204: PUSH
29205: FOR_TO
29206: IFFALSE 29294
// begin k := j + d ;
29208: LD_ADDR_VAR 0 8
29212: PUSH
29213: LD_VAR 0 7
29217: PUSH
29218: LD_VAR 0 9
29222: PLUS
29223: ST_TO_ADDR
// if k > array then
29224: LD_VAR 0 8
29228: PUSH
29229: LD_VAR 0 1
29233: GREATER
29234: IFFALSE 29244
// k := 1 ;
29236: LD_ADDR_VAR 0 8
29240: PUSH
29241: LD_INT 1
29243: ST_TO_ADDR
// if not k then
29244: LD_VAR 0 8
29248: NOT
29249: IFFALSE 29261
// k := array ;
29251: LD_ADDR_VAR 0 8
29255: PUSH
29256: LD_VAR 0 1
29260: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29261: LD_ADDR_VAR 0 10
29265: PUSH
29266: LD_VAR 0 10
29270: PPUSH
29271: LD_VAR 0 8
29275: PPUSH
29276: LD_VAR 0 1
29280: PUSH
29281: LD_VAR 0 7
29285: ARRAY
29286: PPUSH
29287: CALL_OW 1
29291: ST_TO_ADDR
// end ;
29292: GO 29205
29294: POP
29295: POP
// array := tmp ;
29296: LD_ADDR_VAR 0 1
29300: PUSH
29301: LD_VAR 0 10
29305: ST_TO_ADDR
// end ;
29306: GO 29187
29308: POP
29309: POP
// result := array ;
29310: LD_ADDR_VAR 0 5
29314: PUSH
29315: LD_VAR 0 1
29319: ST_TO_ADDR
// end ;
29320: LD_VAR 0 5
29324: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29325: LD_INT 0
29327: PPUSH
29328: PPUSH
// result := 0 ;
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_INT 0
29336: ST_TO_ADDR
// if not array or not value in array then
29337: LD_VAR 0 1
29341: NOT
29342: PUSH
29343: LD_VAR 0 2
29347: PUSH
29348: LD_VAR 0 1
29352: IN
29353: NOT
29354: OR
29355: IFFALSE 29359
// exit ;
29357: GO 29413
// for i = 1 to array do
29359: LD_ADDR_VAR 0 4
29363: PUSH
29364: DOUBLE
29365: LD_INT 1
29367: DEC
29368: ST_TO_ADDR
29369: LD_VAR 0 1
29373: PUSH
29374: FOR_TO
29375: IFFALSE 29411
// if value = array [ i ] then
29377: LD_VAR 0 2
29381: PUSH
29382: LD_VAR 0 1
29386: PUSH
29387: LD_VAR 0 4
29391: ARRAY
29392: EQUAL
29393: IFFALSE 29409
// begin result := i ;
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_VAR 0 4
29404: ST_TO_ADDR
// exit ;
29405: POP
29406: POP
29407: GO 29413
// end ;
29409: GO 29374
29411: POP
29412: POP
// end ;
29413: LD_VAR 0 3
29417: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29418: LD_INT 0
29420: PPUSH
// vc_chassis := chassis ;
29421: LD_ADDR_OWVAR 37
29425: PUSH
29426: LD_VAR 0 1
29430: ST_TO_ADDR
// vc_engine := engine ;
29431: LD_ADDR_OWVAR 39
29435: PUSH
29436: LD_VAR 0 2
29440: ST_TO_ADDR
// vc_control := control ;
29441: LD_ADDR_OWVAR 38
29445: PUSH
29446: LD_VAR 0 3
29450: ST_TO_ADDR
// vc_weapon := weapon ;
29451: LD_ADDR_OWVAR 40
29455: PUSH
29456: LD_VAR 0 4
29460: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29461: LD_ADDR_OWVAR 41
29465: PUSH
29466: LD_VAR 0 5
29470: ST_TO_ADDR
// end ;
29471: LD_VAR 0 6
29475: RET
// export function WantPlant ( unit ) ; var task ; begin
29476: LD_INT 0
29478: PPUSH
29479: PPUSH
// result := false ;
29480: LD_ADDR_VAR 0 2
29484: PUSH
29485: LD_INT 0
29487: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29488: LD_ADDR_VAR 0 3
29492: PUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 437
29502: ST_TO_ADDR
// if task then
29503: LD_VAR 0 3
29507: IFFALSE 29535
// if task [ 1 ] [ 1 ] = p then
29509: LD_VAR 0 3
29513: PUSH
29514: LD_INT 1
29516: ARRAY
29517: PUSH
29518: LD_INT 1
29520: ARRAY
29521: PUSH
29522: LD_STRING p
29524: EQUAL
29525: IFFALSE 29535
// result := true ;
29527: LD_ADDR_VAR 0 2
29531: PUSH
29532: LD_INT 1
29534: ST_TO_ADDR
// end ;
29535: LD_VAR 0 2
29539: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29540: LD_INT 0
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
// if pos < 1 then
29546: LD_VAR 0 2
29550: PUSH
29551: LD_INT 1
29553: LESS
29554: IFFALSE 29558
// exit ;
29556: GO 29861
// if pos = 1 then
29558: LD_VAR 0 2
29562: PUSH
29563: LD_INT 1
29565: EQUAL
29566: IFFALSE 29599
// result := Replace ( arr , pos [ 1 ] , value ) else
29568: LD_ADDR_VAR 0 4
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: LD_VAR 0 2
29582: PUSH
29583: LD_INT 1
29585: ARRAY
29586: PPUSH
29587: LD_VAR 0 3
29591: PPUSH
29592: CALL_OW 1
29596: ST_TO_ADDR
29597: GO 29861
// begin tmp := arr ;
29599: LD_ADDR_VAR 0 6
29603: PUSH
29604: LD_VAR 0 1
29608: ST_TO_ADDR
// s_arr := [ tmp ] ;
29609: LD_ADDR_VAR 0 7
29613: PUSH
29614: LD_VAR 0 6
29618: PUSH
29619: EMPTY
29620: LIST
29621: ST_TO_ADDR
// for i = 1 to pos - 1 do
29622: LD_ADDR_VAR 0 5
29626: PUSH
29627: DOUBLE
29628: LD_INT 1
29630: DEC
29631: ST_TO_ADDR
29632: LD_VAR 0 2
29636: PUSH
29637: LD_INT 1
29639: MINUS
29640: PUSH
29641: FOR_TO
29642: IFFALSE 29687
// begin tmp := tmp [ pos [ i ] ] ;
29644: LD_ADDR_VAR 0 6
29648: PUSH
29649: LD_VAR 0 6
29653: PUSH
29654: LD_VAR 0 2
29658: PUSH
29659: LD_VAR 0 5
29663: ARRAY
29664: ARRAY
29665: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29666: LD_ADDR_VAR 0 7
29670: PUSH
29671: LD_VAR 0 7
29675: PUSH
29676: LD_VAR 0 6
29680: PUSH
29681: EMPTY
29682: LIST
29683: ADD
29684: ST_TO_ADDR
// end ;
29685: GO 29641
29687: POP
29688: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29689: LD_ADDR_VAR 0 6
29693: PUSH
29694: LD_VAR 0 6
29698: PPUSH
29699: LD_VAR 0 2
29703: PUSH
29704: LD_VAR 0 2
29708: ARRAY
29709: PPUSH
29710: LD_VAR 0 3
29714: PPUSH
29715: CALL_OW 1
29719: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29720: LD_ADDR_VAR 0 7
29724: PUSH
29725: LD_VAR 0 7
29729: PPUSH
29730: LD_VAR 0 7
29734: PPUSH
29735: LD_VAR 0 6
29739: PPUSH
29740: CALL_OW 1
29744: ST_TO_ADDR
// for i = s_arr downto 2 do
29745: LD_ADDR_VAR 0 5
29749: PUSH
29750: DOUBLE
29751: LD_VAR 0 7
29755: INC
29756: ST_TO_ADDR
29757: LD_INT 2
29759: PUSH
29760: FOR_DOWNTO
29761: IFFALSE 29845
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29763: LD_ADDR_VAR 0 6
29767: PUSH
29768: LD_VAR 0 7
29772: PUSH
29773: LD_VAR 0 5
29777: PUSH
29778: LD_INT 1
29780: MINUS
29781: ARRAY
29782: PPUSH
29783: LD_VAR 0 2
29787: PUSH
29788: LD_VAR 0 5
29792: PUSH
29793: LD_INT 1
29795: MINUS
29796: ARRAY
29797: PPUSH
29798: LD_VAR 0 7
29802: PUSH
29803: LD_VAR 0 5
29807: ARRAY
29808: PPUSH
29809: CALL_OW 1
29813: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29814: LD_ADDR_VAR 0 7
29818: PUSH
29819: LD_VAR 0 7
29823: PPUSH
29824: LD_VAR 0 5
29828: PUSH
29829: LD_INT 1
29831: MINUS
29832: PPUSH
29833: LD_VAR 0 6
29837: PPUSH
29838: CALL_OW 1
29842: ST_TO_ADDR
// end ;
29843: GO 29760
29845: POP
29846: POP
// result := s_arr [ 1 ] ;
29847: LD_ADDR_VAR 0 4
29851: PUSH
29852: LD_VAR 0 7
29856: PUSH
29857: LD_INT 1
29859: ARRAY
29860: ST_TO_ADDR
// end ; end ;
29861: LD_VAR 0 4
29865: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29866: LD_INT 0
29868: PPUSH
29869: PPUSH
// if not list then
29870: LD_VAR 0 1
29874: NOT
29875: IFFALSE 29879
// exit ;
29877: GO 29970
// i := list [ pos1 ] ;
29879: LD_ADDR_VAR 0 5
29883: PUSH
29884: LD_VAR 0 1
29888: PUSH
29889: LD_VAR 0 2
29893: ARRAY
29894: ST_TO_ADDR
// if not i then
29895: LD_VAR 0 5
29899: NOT
29900: IFFALSE 29904
// exit ;
29902: GO 29970
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29904: LD_ADDR_VAR 0 1
29908: PUSH
29909: LD_VAR 0 1
29913: PPUSH
29914: LD_VAR 0 2
29918: PPUSH
29919: LD_VAR 0 1
29923: PUSH
29924: LD_VAR 0 3
29928: ARRAY
29929: PPUSH
29930: CALL_OW 1
29934: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29935: LD_ADDR_VAR 0 1
29939: PUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: LD_VAR 0 3
29949: PPUSH
29950: LD_VAR 0 5
29954: PPUSH
29955: CALL_OW 1
29959: ST_TO_ADDR
// result := list ;
29960: LD_ADDR_VAR 0 4
29964: PUSH
29965: LD_VAR 0 1
29969: ST_TO_ADDR
// end ;
29970: LD_VAR 0 4
29974: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29975: LD_INT 0
29977: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29978: LD_ADDR_VAR 0 5
29982: PUSH
29983: LD_VAR 0 1
29987: PPUSH
29988: CALL_OW 250
29992: PPUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 251
30002: PPUSH
30003: LD_VAR 0 2
30007: PPUSH
30008: LD_VAR 0 3
30012: PPUSH
30013: LD_VAR 0 4
30017: PPUSH
30018: CALL 30028 0 5
30022: ST_TO_ADDR
// end ;
30023: LD_VAR 0 5
30027: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
// if not list then
30034: LD_VAR 0 3
30038: NOT
30039: IFFALSE 30043
// exit ;
30041: GO 30431
// result := [ ] ;
30043: LD_ADDR_VAR 0 6
30047: PUSH
30048: EMPTY
30049: ST_TO_ADDR
// for i in list do
30050: LD_ADDR_VAR 0 7
30054: PUSH
30055: LD_VAR 0 3
30059: PUSH
30060: FOR_IN
30061: IFFALSE 30263
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30063: LD_ADDR_VAR 0 9
30067: PUSH
30068: LD_VAR 0 7
30072: PPUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: LD_VAR 0 2
30082: PPUSH
30083: CALL_OW 297
30087: ST_TO_ADDR
// if not result then
30088: LD_VAR 0 6
30092: NOT
30093: IFFALSE 30119
// result := [ [ i , tmp ] ] else
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 7
30104: PUSH
30105: LD_VAR 0 9
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: ST_TO_ADDR
30117: GO 30261
// begin if result [ result ] [ 2 ] < tmp then
30119: LD_VAR 0 6
30123: PUSH
30124: LD_VAR 0 6
30128: ARRAY
30129: PUSH
30130: LD_INT 2
30132: ARRAY
30133: PUSH
30134: LD_VAR 0 9
30138: LESS
30139: IFFALSE 30181
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30141: LD_ADDR_VAR 0 6
30145: PUSH
30146: LD_VAR 0 6
30150: PPUSH
30151: LD_VAR 0 6
30155: PUSH
30156: LD_INT 1
30158: PLUS
30159: PPUSH
30160: LD_VAR 0 7
30164: PUSH
30165: LD_VAR 0 9
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PPUSH
30174: CALL_OW 2
30178: ST_TO_ADDR
30179: GO 30261
// for j = 1 to result do
30181: LD_ADDR_VAR 0 8
30185: PUSH
30186: DOUBLE
30187: LD_INT 1
30189: DEC
30190: ST_TO_ADDR
30191: LD_VAR 0 6
30195: PUSH
30196: FOR_TO
30197: IFFALSE 30259
// begin if tmp < result [ j ] [ 2 ] then
30199: LD_VAR 0 9
30203: PUSH
30204: LD_VAR 0 6
30208: PUSH
30209: LD_VAR 0 8
30213: ARRAY
30214: PUSH
30215: LD_INT 2
30217: ARRAY
30218: LESS
30219: IFFALSE 30257
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30221: LD_ADDR_VAR 0 6
30225: PUSH
30226: LD_VAR 0 6
30230: PPUSH
30231: LD_VAR 0 8
30235: PPUSH
30236: LD_VAR 0 7
30240: PUSH
30241: LD_VAR 0 9
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PPUSH
30250: CALL_OW 2
30254: ST_TO_ADDR
// break ;
30255: GO 30259
// end ; end ;
30257: GO 30196
30259: POP
30260: POP
// end ; end ;
30261: GO 30060
30263: POP
30264: POP
// if result and not asc then
30265: LD_VAR 0 6
30269: PUSH
30270: LD_VAR 0 4
30274: NOT
30275: AND
30276: IFFALSE 30351
// begin tmp := result ;
30278: LD_ADDR_VAR 0 9
30282: PUSH
30283: LD_VAR 0 6
30287: ST_TO_ADDR
// for i = tmp downto 1 do
30288: LD_ADDR_VAR 0 7
30292: PUSH
30293: DOUBLE
30294: LD_VAR 0 9
30298: INC
30299: ST_TO_ADDR
30300: LD_INT 1
30302: PUSH
30303: FOR_DOWNTO
30304: IFFALSE 30349
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30306: LD_ADDR_VAR 0 6
30310: PUSH
30311: LD_VAR 0 6
30315: PPUSH
30316: LD_VAR 0 9
30320: PUSH
30321: LD_VAR 0 7
30325: MINUS
30326: PUSH
30327: LD_INT 1
30329: PLUS
30330: PPUSH
30331: LD_VAR 0 9
30335: PUSH
30336: LD_VAR 0 7
30340: ARRAY
30341: PPUSH
30342: CALL_OW 1
30346: ST_TO_ADDR
30347: GO 30303
30349: POP
30350: POP
// end ; tmp := [ ] ;
30351: LD_ADDR_VAR 0 9
30355: PUSH
30356: EMPTY
30357: ST_TO_ADDR
// if mode then
30358: LD_VAR 0 5
30362: IFFALSE 30431
// begin for i = 1 to result do
30364: LD_ADDR_VAR 0 7
30368: PUSH
30369: DOUBLE
30370: LD_INT 1
30372: DEC
30373: ST_TO_ADDR
30374: LD_VAR 0 6
30378: PUSH
30379: FOR_TO
30380: IFFALSE 30419
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30382: LD_ADDR_VAR 0 9
30386: PUSH
30387: LD_VAR 0 9
30391: PPUSH
30392: LD_VAR 0 7
30396: PPUSH
30397: LD_VAR 0 6
30401: PUSH
30402: LD_VAR 0 7
30406: ARRAY
30407: PUSH
30408: LD_INT 1
30410: ARRAY
30411: PPUSH
30412: CALL_OW 1
30416: ST_TO_ADDR
30417: GO 30379
30419: POP
30420: POP
// result := tmp ;
30421: LD_ADDR_VAR 0 6
30425: PUSH
30426: LD_VAR 0 9
30430: ST_TO_ADDR
// end ; end ;
30431: LD_VAR 0 6
30435: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30436: LD_INT 0
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30444: LD_ADDR_VAR 0 5
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: ST_TO_ADDR
// if not x or not y then
30466: LD_VAR 0 2
30470: NOT
30471: PUSH
30472: LD_VAR 0 3
30476: NOT
30477: OR
30478: IFFALSE 30482
// exit ;
30480: GO 32132
// if not range then
30482: LD_VAR 0 4
30486: NOT
30487: IFFALSE 30497
// range := 10 ;
30489: LD_ADDR_VAR 0 4
30493: PUSH
30494: LD_INT 10
30496: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30497: LD_ADDR_VAR 0 8
30501: PUSH
30502: LD_INT 81
30504: PUSH
30505: LD_VAR 0 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 92
30516: PUSH
30517: LD_VAR 0 2
30521: PUSH
30522: LD_VAR 0 3
30526: PUSH
30527: LD_VAR 0 4
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: PUSH
30541: LD_INT 21
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: PPUSH
30560: CALL_OW 69
30564: ST_TO_ADDR
// if not tmp then
30565: LD_VAR 0 8
30569: NOT
30570: IFFALSE 30574
// exit ;
30572: GO 32132
// for i in tmp do
30574: LD_ADDR_VAR 0 6
30578: PUSH
30579: LD_VAR 0 8
30583: PUSH
30584: FOR_IN
30585: IFFALSE 32107
// begin points := [ 0 , 0 , 0 ] ;
30587: LD_ADDR_VAR 0 9
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// bpoints := 1 ;
30606: LD_ADDR_VAR 0 10
30610: PUSH
30611: LD_INT 1
30613: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30614: LD_VAR 0 6
30618: PPUSH
30619: CALL_OW 247
30623: PUSH
30624: LD_INT 1
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 31210
30632: POP
// begin if GetClass ( i ) = 1 then
30633: LD_VAR 0 6
30637: PPUSH
30638: CALL_OW 257
30642: PUSH
30643: LD_INT 1
30645: EQUAL
30646: IFFALSE 30667
// points := [ 10 , 5 , 3 ] ;
30648: LD_ADDR_VAR 0 9
30652: PUSH
30653: LD_INT 10
30655: PUSH
30656: LD_INT 5
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30667: LD_VAR 0 6
30671: PPUSH
30672: CALL_OW 257
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: LD_INT 4
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: IN
30691: IFFALSE 30712
// points := [ 3 , 2 , 1 ] ;
30693: LD_ADDR_VAR 0 9
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30712: LD_VAR 0 6
30716: PPUSH
30717: CALL_OW 257
30721: PUSH
30722: LD_INT 5
30724: EQUAL
30725: IFFALSE 30746
// points := [ 130 , 5 , 2 ] ;
30727: LD_ADDR_VAR 0 9
30731: PUSH
30732: LD_INT 130
30734: PUSH
30735: LD_INT 5
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30746: LD_VAR 0 6
30750: PPUSH
30751: CALL_OW 257
30755: PUSH
30756: LD_INT 8
30758: EQUAL
30759: IFFALSE 30780
// points := [ 35 , 35 , 30 ] ;
30761: LD_ADDR_VAR 0 9
30765: PUSH
30766: LD_INT 35
30768: PUSH
30769: LD_INT 35
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30780: LD_VAR 0 6
30784: PPUSH
30785: CALL_OW 257
30789: PUSH
30790: LD_INT 9
30792: EQUAL
30793: IFFALSE 30814
// points := [ 20 , 55 , 40 ] ;
30795: LD_ADDR_VAR 0 9
30799: PUSH
30800: LD_INT 20
30802: PUSH
30803: LD_INT 55
30805: PUSH
30806: LD_INT 40
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: LIST
30813: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30814: LD_VAR 0 6
30818: PPUSH
30819: CALL_OW 257
30823: PUSH
30824: LD_INT 12
30826: PUSH
30827: LD_INT 16
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: IN
30834: IFFALSE 30855
// points := [ 5 , 3 , 2 ] ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_INT 5
30843: PUSH
30844: LD_INT 3
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30855: LD_VAR 0 6
30859: PPUSH
30860: CALL_OW 257
30864: PUSH
30865: LD_INT 17
30867: EQUAL
30868: IFFALSE 30889
// points := [ 100 , 50 , 75 ] ;
30870: LD_ADDR_VAR 0 9
30874: PUSH
30875: LD_INT 100
30877: PUSH
30878: LD_INT 50
30880: PUSH
30881: LD_INT 75
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30889: LD_VAR 0 6
30893: PPUSH
30894: CALL_OW 257
30898: PUSH
30899: LD_INT 15
30901: EQUAL
30902: IFFALSE 30923
// points := [ 10 , 5 , 3 ] ;
30904: LD_ADDR_VAR 0 9
30908: PUSH
30909: LD_INT 10
30911: PUSH
30912: LD_INT 5
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30923: LD_VAR 0 6
30927: PPUSH
30928: CALL_OW 257
30932: PUSH
30933: LD_INT 14
30935: EQUAL
30936: IFFALSE 30957
// points := [ 10 , 0 , 0 ] ;
30938: LD_ADDR_VAR 0 9
30942: PUSH
30943: LD_INT 10
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30957: LD_VAR 0 6
30961: PPUSH
30962: CALL_OW 257
30966: PUSH
30967: LD_INT 11
30969: EQUAL
30970: IFFALSE 30991
// points := [ 30 , 10 , 5 ] ;
30972: LD_ADDR_VAR 0 9
30976: PUSH
30977: LD_INT 30
30979: PUSH
30980: LD_INT 10
30982: PUSH
30983: LD_INT 5
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30991: LD_VAR 0 1
30995: PPUSH
30996: LD_INT 5
30998: PPUSH
30999: CALL_OW 321
31003: PUSH
31004: LD_INT 2
31006: EQUAL
31007: IFFALSE 31024
// bpoints := bpoints * 1.8 ;
31009: LD_ADDR_VAR 0 10
31013: PUSH
31014: LD_VAR 0 10
31018: PUSH
31019: LD_REAL  1.80000000000000E+0000
31022: MUL
31023: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31024: LD_VAR 0 6
31028: PPUSH
31029: CALL_OW 257
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: LD_INT 4
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: IN
31052: PUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: LD_INT 51
31060: PPUSH
31061: CALL_OW 321
31065: PUSH
31066: LD_INT 2
31068: EQUAL
31069: AND
31070: IFFALSE 31087
// bpoints := bpoints * 1.2 ;
31072: LD_ADDR_VAR 0 10
31076: PUSH
31077: LD_VAR 0 10
31081: PUSH
31082: LD_REAL  1.20000000000000E+0000
31085: MUL
31086: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31087: LD_VAR 0 6
31091: PPUSH
31092: CALL_OW 257
31096: PUSH
31097: LD_INT 5
31099: PUSH
31100: LD_INT 7
31102: PUSH
31103: LD_INT 9
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: IN
31111: PUSH
31112: LD_VAR 0 1
31116: PPUSH
31117: LD_INT 52
31119: PPUSH
31120: CALL_OW 321
31124: PUSH
31125: LD_INT 2
31127: EQUAL
31128: AND
31129: IFFALSE 31146
// bpoints := bpoints * 1.5 ;
31131: LD_ADDR_VAR 0 10
31135: PUSH
31136: LD_VAR 0 10
31140: PUSH
31141: LD_REAL  1.50000000000000E+0000
31144: MUL
31145: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31146: LD_VAR 0 1
31150: PPUSH
31151: LD_INT 66
31153: PPUSH
31154: CALL_OW 321
31158: PUSH
31159: LD_INT 2
31161: EQUAL
31162: IFFALSE 31179
// bpoints := bpoints * 1.1 ;
31164: LD_ADDR_VAR 0 10
31168: PUSH
31169: LD_VAR 0 10
31173: PUSH
31174: LD_REAL  1.10000000000000E+0000
31177: MUL
31178: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31179: LD_ADDR_VAR 0 10
31183: PUSH
31184: LD_VAR 0 10
31188: PUSH
31189: LD_VAR 0 6
31193: PPUSH
31194: LD_INT 1
31196: PPUSH
31197: CALL_OW 259
31201: PUSH
31202: LD_REAL  1.15000000000000E+0000
31205: MUL
31206: MUL
31207: ST_TO_ADDR
// end ; unit_vehicle :
31208: GO 32036
31210: LD_INT 2
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 32024
31218: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31219: LD_VAR 0 6
31223: PPUSH
31224: CALL_OW 264
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: LD_INT 42
31234: PUSH
31235: LD_INT 24
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: IN
31243: IFFALSE 31264
// points := [ 25 , 5 , 3 ] ;
31245: LD_ADDR_VAR 0 9
31249: PUSH
31250: LD_INT 25
31252: PUSH
31253: LD_INT 5
31255: PUSH
31256: LD_INT 3
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31264: LD_VAR 0 6
31268: PPUSH
31269: CALL_OW 264
31273: PUSH
31274: LD_INT 4
31276: PUSH
31277: LD_INT 43
31279: PUSH
31280: LD_INT 25
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: IN
31288: IFFALSE 31309
// points := [ 40 , 15 , 5 ] ;
31290: LD_ADDR_VAR 0 9
31294: PUSH
31295: LD_INT 40
31297: PUSH
31298: LD_INT 15
31300: PUSH
31301: LD_INT 5
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31309: LD_VAR 0 6
31313: PPUSH
31314: CALL_OW 264
31318: PUSH
31319: LD_INT 3
31321: PUSH
31322: LD_INT 23
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: IN
31329: IFFALSE 31350
// points := [ 7 , 25 , 8 ] ;
31331: LD_ADDR_VAR 0 9
31335: PUSH
31336: LD_INT 7
31338: PUSH
31339: LD_INT 25
31341: PUSH
31342: LD_INT 8
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31350: LD_VAR 0 6
31354: PPUSH
31355: CALL_OW 264
31359: PUSH
31360: LD_INT 5
31362: PUSH
31363: LD_INT 27
31365: PUSH
31366: LD_INT 44
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: IN
31374: IFFALSE 31395
// points := [ 14 , 50 , 16 ] ;
31376: LD_ADDR_VAR 0 9
31380: PUSH
31381: LD_INT 14
31383: PUSH
31384: LD_INT 50
31386: PUSH
31387: LD_INT 16
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31395: LD_VAR 0 6
31399: PPUSH
31400: CALL_OW 264
31404: PUSH
31405: LD_INT 6
31407: PUSH
31408: LD_INT 46
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: IN
31415: IFFALSE 31436
// points := [ 32 , 120 , 70 ] ;
31417: LD_ADDR_VAR 0 9
31421: PUSH
31422: LD_INT 32
31424: PUSH
31425: LD_INT 120
31427: PUSH
31428: LD_INT 70
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31436: LD_VAR 0 6
31440: PPUSH
31441: CALL_OW 264
31445: PUSH
31446: LD_INT 7
31448: PUSH
31449: LD_INT 28
31451: PUSH
31452: LD_INT 45
31454: PUSH
31455: LD_INT 92
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: IN
31464: IFFALSE 31485
// points := [ 35 , 20 , 45 ] ;
31466: LD_ADDR_VAR 0 9
31470: PUSH
31471: LD_INT 35
31473: PUSH
31474: LD_INT 20
31476: PUSH
31477: LD_INT 45
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31485: LD_VAR 0 6
31489: PPUSH
31490: CALL_OW 264
31494: PUSH
31495: LD_INT 47
31497: PUSH
31498: EMPTY
31499: LIST
31500: IN
31501: IFFALSE 31522
// points := [ 67 , 45 , 75 ] ;
31503: LD_ADDR_VAR 0 9
31507: PUSH
31508: LD_INT 67
31510: PUSH
31511: LD_INT 45
31513: PUSH
31514: LD_INT 75
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31522: LD_VAR 0 6
31526: PPUSH
31527: CALL_OW 264
31531: PUSH
31532: LD_INT 26
31534: PUSH
31535: EMPTY
31536: LIST
31537: IN
31538: IFFALSE 31559
// points := [ 120 , 30 , 80 ] ;
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_INT 120
31547: PUSH
31548: LD_INT 30
31550: PUSH
31551: LD_INT 80
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31559: LD_VAR 0 6
31563: PPUSH
31564: CALL_OW 264
31568: PUSH
31569: LD_INT 22
31571: PUSH
31572: EMPTY
31573: LIST
31574: IN
31575: IFFALSE 31596
// points := [ 40 , 1 , 1 ] ;
31577: LD_ADDR_VAR 0 9
31581: PUSH
31582: LD_INT 40
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31596: LD_VAR 0 6
31600: PPUSH
31601: CALL_OW 264
31605: PUSH
31606: LD_INT 29
31608: PUSH
31609: EMPTY
31610: LIST
31611: IN
31612: IFFALSE 31633
// points := [ 70 , 200 , 400 ] ;
31614: LD_ADDR_VAR 0 9
31618: PUSH
31619: LD_INT 70
31621: PUSH
31622: LD_INT 200
31624: PUSH
31625: LD_INT 400
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31633: LD_VAR 0 6
31637: PPUSH
31638: CALL_OW 264
31642: PUSH
31643: LD_INT 14
31645: PUSH
31646: LD_INT 53
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: IN
31653: IFFALSE 31674
// points := [ 40 , 10 , 20 ] ;
31655: LD_ADDR_VAR 0 9
31659: PUSH
31660: LD_INT 40
31662: PUSH
31663: LD_INT 10
31665: PUSH
31666: LD_INT 20
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31674: LD_VAR 0 6
31678: PPUSH
31679: CALL_OW 264
31683: PUSH
31684: LD_INT 9
31686: PUSH
31687: EMPTY
31688: LIST
31689: IN
31690: IFFALSE 31711
// points := [ 5 , 70 , 20 ] ;
31692: LD_ADDR_VAR 0 9
31696: PUSH
31697: LD_INT 5
31699: PUSH
31700: LD_INT 70
31702: PUSH
31703: LD_INT 20
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31711: LD_VAR 0 6
31715: PPUSH
31716: CALL_OW 264
31720: PUSH
31721: LD_INT 10
31723: PUSH
31724: EMPTY
31725: LIST
31726: IN
31727: IFFALSE 31748
// points := [ 35 , 110 , 70 ] ;
31729: LD_ADDR_VAR 0 9
31733: PUSH
31734: LD_INT 35
31736: PUSH
31737: LD_INT 110
31739: PUSH
31740: LD_INT 70
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31748: LD_VAR 0 6
31752: PPUSH
31753: CALL_OW 265
31757: PUSH
31758: LD_INT 25
31760: EQUAL
31761: IFFALSE 31782
// points := [ 80 , 65 , 100 ] ;
31763: LD_ADDR_VAR 0 9
31767: PUSH
31768: LD_INT 80
31770: PUSH
31771: LD_INT 65
31773: PUSH
31774: LD_INT 100
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31782: LD_VAR 0 6
31786: PPUSH
31787: CALL_OW 263
31791: PUSH
31792: LD_INT 1
31794: EQUAL
31795: IFFALSE 31830
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31797: LD_ADDR_VAR 0 10
31801: PUSH
31802: LD_VAR 0 10
31806: PUSH
31807: LD_VAR 0 6
31811: PPUSH
31812: CALL_OW 311
31816: PPUSH
31817: LD_INT 3
31819: PPUSH
31820: CALL_OW 259
31824: PUSH
31825: LD_INT 4
31827: MUL
31828: MUL
31829: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31830: LD_VAR 0 6
31834: PPUSH
31835: CALL_OW 263
31839: PUSH
31840: LD_INT 2
31842: EQUAL
31843: IFFALSE 31894
// begin j := IsControledBy ( i ) ;
31845: LD_ADDR_VAR 0 7
31849: PUSH
31850: LD_VAR 0 6
31854: PPUSH
31855: CALL_OW 312
31859: ST_TO_ADDR
// if j then
31860: LD_VAR 0 7
31864: IFFALSE 31894
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31866: LD_ADDR_VAR 0 10
31870: PUSH
31871: LD_VAR 0 10
31875: PUSH
31876: LD_VAR 0 7
31880: PPUSH
31881: LD_INT 3
31883: PPUSH
31884: CALL_OW 259
31888: PUSH
31889: LD_INT 3
31891: MUL
31892: MUL
31893: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31894: LD_VAR 0 6
31898: PPUSH
31899: CALL_OW 264
31903: PUSH
31904: LD_INT 5
31906: PUSH
31907: LD_INT 6
31909: PUSH
31910: LD_INT 46
31912: PUSH
31913: LD_INT 44
31915: PUSH
31916: LD_INT 47
31918: PUSH
31919: LD_INT 45
31921: PUSH
31922: LD_INT 28
31924: PUSH
31925: LD_INT 7
31927: PUSH
31928: LD_INT 27
31930: PUSH
31931: LD_INT 29
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: IN
31946: PUSH
31947: LD_VAR 0 1
31951: PPUSH
31952: LD_INT 52
31954: PPUSH
31955: CALL_OW 321
31959: PUSH
31960: LD_INT 2
31962: EQUAL
31963: AND
31964: IFFALSE 31981
// bpoints := bpoints * 1.2 ;
31966: LD_ADDR_VAR 0 10
31970: PUSH
31971: LD_VAR 0 10
31975: PUSH
31976: LD_REAL  1.20000000000000E+0000
31979: MUL
31980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31981: LD_VAR 0 6
31985: PPUSH
31986: CALL_OW 264
31990: PUSH
31991: LD_INT 6
31993: PUSH
31994: LD_INT 46
31996: PUSH
31997: LD_INT 47
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: IN
32005: IFFALSE 32022
// bpoints := bpoints * 1.2 ;
32007: LD_ADDR_VAR 0 10
32011: PUSH
32012: LD_VAR 0 10
32016: PUSH
32017: LD_REAL  1.20000000000000E+0000
32020: MUL
32021: ST_TO_ADDR
// end ; unit_building :
32022: GO 32036
32024: LD_INT 3
32026: DOUBLE
32027: EQUAL
32028: IFTRUE 32032
32030: GO 32035
32032: POP
// ; end ;
32033: GO 32036
32035: POP
// for j = 1 to 3 do
32036: LD_ADDR_VAR 0 7
32040: PUSH
32041: DOUBLE
32042: LD_INT 1
32044: DEC
32045: ST_TO_ADDR
32046: LD_INT 3
32048: PUSH
32049: FOR_TO
32050: IFFALSE 32103
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32052: LD_ADDR_VAR 0 5
32056: PUSH
32057: LD_VAR 0 5
32061: PPUSH
32062: LD_VAR 0 7
32066: PPUSH
32067: LD_VAR 0 5
32071: PUSH
32072: LD_VAR 0 7
32076: ARRAY
32077: PUSH
32078: LD_VAR 0 9
32082: PUSH
32083: LD_VAR 0 7
32087: ARRAY
32088: PUSH
32089: LD_VAR 0 10
32093: MUL
32094: PLUS
32095: PPUSH
32096: CALL_OW 1
32100: ST_TO_ADDR
32101: GO 32049
32103: POP
32104: POP
// end ;
32105: GO 30584
32107: POP
32108: POP
// result := Replace ( result , 4 , tmp ) ;
32109: LD_ADDR_VAR 0 5
32113: PUSH
32114: LD_VAR 0 5
32118: PPUSH
32119: LD_INT 4
32121: PPUSH
32122: LD_VAR 0 8
32126: PPUSH
32127: CALL_OW 1
32131: ST_TO_ADDR
// end ;
32132: LD_VAR 0 5
32136: RET
// export function DangerAtRange ( unit , range ) ; begin
32137: LD_INT 0
32139: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32140: LD_ADDR_VAR 0 3
32144: PUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 255
32154: PPUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: CALL_OW 250
32164: PPUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL_OW 251
32174: PPUSH
32175: LD_VAR 0 2
32179: PPUSH
32180: CALL 30436 0 4
32184: ST_TO_ADDR
// end ;
32185: LD_VAR 0 3
32189: RET
// export function DangerInArea ( side , area ) ; begin
32190: LD_INT 0
32192: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_VAR 0 2
32202: PPUSH
32203: LD_INT 81
32205: PUSH
32206: LD_VAR 0 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PPUSH
32215: CALL_OW 70
32219: ST_TO_ADDR
// end ;
32220: LD_VAR 0 3
32224: RET
// export function IsExtension ( b ) ; begin
32225: LD_INT 0
32227: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32228: LD_ADDR_VAR 0 2
32232: PUSH
32233: LD_VAR 0 1
32237: PUSH
32238: LD_INT 23
32240: PUSH
32241: LD_INT 20
32243: PUSH
32244: LD_INT 22
32246: PUSH
32247: LD_INT 17
32249: PUSH
32250: LD_INT 24
32252: PUSH
32253: LD_INT 21
32255: PUSH
32256: LD_INT 19
32258: PUSH
32259: LD_INT 16
32261: PUSH
32262: LD_INT 25
32264: PUSH
32265: LD_INT 18
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: IN
32280: ST_TO_ADDR
// end ;
32281: LD_VAR 0 2
32285: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32286: LD_INT 0
32288: PPUSH
32289: PPUSH
32290: PPUSH
// result := [ ] ;
32291: LD_ADDR_VAR 0 4
32295: PUSH
32296: EMPTY
32297: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32298: LD_ADDR_VAR 0 5
32302: PUSH
32303: LD_VAR 0 2
32307: PPUSH
32308: LD_INT 21
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PPUSH
32318: CALL_OW 70
32322: ST_TO_ADDR
// if not tmp then
32323: LD_VAR 0 5
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32396
// if checkLink then
32332: LD_VAR 0 3
32336: IFFALSE 32386
// begin for i in tmp do
32338: LD_ADDR_VAR 0 6
32342: PUSH
32343: LD_VAR 0 5
32347: PUSH
32348: FOR_IN
32349: IFFALSE 32384
// if GetBase ( i ) <> base then
32351: LD_VAR 0 6
32355: PPUSH
32356: CALL_OW 274
32360: PUSH
32361: LD_VAR 0 1
32365: NONEQUAL
32366: IFFALSE 32382
// ComLinkToBase ( base , i ) ;
32368: LD_VAR 0 1
32372: PPUSH
32373: LD_VAR 0 6
32377: PPUSH
32378: CALL_OW 169
32382: GO 32348
32384: POP
32385: POP
// end ; result := tmp ;
32386: LD_ADDR_VAR 0 4
32390: PUSH
32391: LD_VAR 0 5
32395: ST_TO_ADDR
// end ;
32396: LD_VAR 0 4
32400: RET
// export function ComComplete ( units , b ) ; var i ; begin
32401: LD_INT 0
32403: PPUSH
32404: PPUSH
// if not units then
32405: LD_VAR 0 1
32409: NOT
32410: IFFALSE 32414
// exit ;
32412: GO 32504
// for i in units do
32414: LD_ADDR_VAR 0 4
32418: PUSH
32419: LD_VAR 0 1
32423: PUSH
32424: FOR_IN
32425: IFFALSE 32502
// if BuildingStatus ( b ) = bs_build then
32427: LD_VAR 0 2
32431: PPUSH
32432: CALL_OW 461
32436: PUSH
32437: LD_INT 1
32439: EQUAL
32440: IFFALSE 32500
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32442: LD_VAR 0 4
32446: PPUSH
32447: LD_STRING h
32449: PUSH
32450: LD_VAR 0 2
32454: PPUSH
32455: CALL_OW 250
32459: PUSH
32460: LD_VAR 0 2
32464: PPUSH
32465: CALL_OW 251
32469: PUSH
32470: LD_VAR 0 2
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: PUSH
32493: EMPTY
32494: LIST
32495: PPUSH
32496: CALL_OW 446
32500: GO 32424
32502: POP
32503: POP
// end ;
32504: LD_VAR 0 3
32508: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32509: LD_INT 0
32511: PPUSH
32512: PPUSH
32513: PPUSH
32514: PPUSH
32515: PPUSH
32516: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32517: LD_VAR 0 1
32521: NOT
32522: PUSH
32523: LD_VAR 0 1
32527: PPUSH
32528: CALL_OW 263
32532: PUSH
32533: LD_INT 2
32535: NONEQUAL
32536: OR
32537: IFFALSE 32541
// exit ;
32539: GO 32857
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32541: LD_ADDR_VAR 0 6
32545: PUSH
32546: LD_INT 22
32548: PUSH
32549: LD_VAR 0 1
32553: PPUSH
32554: CALL_OW 255
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: LD_INT 30
32568: PUSH
32569: LD_INT 36
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 34
32578: PUSH
32579: LD_INT 31
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PPUSH
32595: CALL_OW 69
32599: ST_TO_ADDR
// if not tmp then
32600: LD_VAR 0 6
32604: NOT
32605: IFFALSE 32609
// exit ;
32607: GO 32857
// result := [ ] ;
32609: LD_ADDR_VAR 0 2
32613: PUSH
32614: EMPTY
32615: ST_TO_ADDR
// for i in tmp do
32616: LD_ADDR_VAR 0 3
32620: PUSH
32621: LD_VAR 0 6
32625: PUSH
32626: FOR_IN
32627: IFFALSE 32698
// begin t := UnitsInside ( i ) ;
32629: LD_ADDR_VAR 0 4
32633: PUSH
32634: LD_VAR 0 3
32638: PPUSH
32639: CALL_OW 313
32643: ST_TO_ADDR
// if t then
32644: LD_VAR 0 4
32648: IFFALSE 32696
// for j in t do
32650: LD_ADDR_VAR 0 7
32654: PUSH
32655: LD_VAR 0 4
32659: PUSH
32660: FOR_IN
32661: IFFALSE 32694
// result := Replace ( result , result + 1 , j ) ;
32663: LD_ADDR_VAR 0 2
32667: PUSH
32668: LD_VAR 0 2
32672: PPUSH
32673: LD_VAR 0 2
32677: PUSH
32678: LD_INT 1
32680: PLUS
32681: PPUSH
32682: LD_VAR 0 7
32686: PPUSH
32687: CALL_OW 1
32691: ST_TO_ADDR
32692: GO 32660
32694: POP
32695: POP
// end ;
32696: GO 32626
32698: POP
32699: POP
// if not result then
32700: LD_VAR 0 2
32704: NOT
32705: IFFALSE 32709
// exit ;
32707: GO 32857
// mech := result [ 1 ] ;
32709: LD_ADDR_VAR 0 5
32713: PUSH
32714: LD_VAR 0 2
32718: PUSH
32719: LD_INT 1
32721: ARRAY
32722: ST_TO_ADDR
// if result > 1 then
32723: LD_VAR 0 2
32727: PUSH
32728: LD_INT 1
32730: GREATER
32731: IFFALSE 32843
// begin for i = 2 to result do
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: DOUBLE
32739: LD_INT 2
32741: DEC
32742: ST_TO_ADDR
32743: LD_VAR 0 2
32747: PUSH
32748: FOR_TO
32749: IFFALSE 32841
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32751: LD_ADDR_VAR 0 4
32755: PUSH
32756: LD_VAR 0 2
32760: PUSH
32761: LD_VAR 0 3
32765: ARRAY
32766: PPUSH
32767: LD_INT 3
32769: PPUSH
32770: CALL_OW 259
32774: PUSH
32775: LD_VAR 0 2
32779: PUSH
32780: LD_VAR 0 3
32784: ARRAY
32785: PPUSH
32786: CALL_OW 432
32790: MINUS
32791: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32792: LD_VAR 0 4
32796: PUSH
32797: LD_VAR 0 5
32801: PPUSH
32802: LD_INT 3
32804: PPUSH
32805: CALL_OW 259
32809: PUSH
32810: LD_VAR 0 5
32814: PPUSH
32815: CALL_OW 432
32819: MINUS
32820: GREATEREQUAL
32821: IFFALSE 32839
// mech := result [ i ] ;
32823: LD_ADDR_VAR 0 5
32827: PUSH
32828: LD_VAR 0 2
32832: PUSH
32833: LD_VAR 0 3
32837: ARRAY
32838: ST_TO_ADDR
// end ;
32839: GO 32748
32841: POP
32842: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32843: LD_VAR 0 1
32847: PPUSH
32848: LD_VAR 0 5
32852: PPUSH
32853: CALL_OW 135
// end ;
32857: LD_VAR 0 2
32861: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32862: LD_INT 0
32864: PPUSH
32865: PPUSH
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
32874: PPUSH
32875: PPUSH
32876: PPUSH
// result := [ ] ;
32877: LD_ADDR_VAR 0 7
32881: PUSH
32882: EMPTY
32883: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32884: LD_VAR 0 1
32888: PPUSH
32889: CALL_OW 266
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: IN
32904: NOT
32905: IFFALSE 32909
// exit ;
32907: GO 34543
// if name then
32909: LD_VAR 0 3
32913: IFFALSE 32929
// SetBName ( base_dep , name ) ;
32915: LD_VAR 0 1
32919: PPUSH
32920: LD_VAR 0 3
32924: PPUSH
32925: CALL_OW 500
// base := GetBase ( base_dep ) ;
32929: LD_ADDR_VAR 0 15
32933: PUSH
32934: LD_VAR 0 1
32938: PPUSH
32939: CALL_OW 274
32943: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32944: LD_ADDR_VAR 0 16
32948: PUSH
32949: LD_VAR 0 1
32953: PPUSH
32954: CALL_OW 255
32958: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32959: LD_ADDR_VAR 0 17
32963: PUSH
32964: LD_VAR 0 1
32968: PPUSH
32969: CALL_OW 248
32973: ST_TO_ADDR
// if sources then
32974: LD_VAR 0 5
32978: IFFALSE 33025
// for i = 1 to 3 do
32980: LD_ADDR_VAR 0 8
32984: PUSH
32985: DOUBLE
32986: LD_INT 1
32988: DEC
32989: ST_TO_ADDR
32990: LD_INT 3
32992: PUSH
32993: FOR_TO
32994: IFFALSE 33023
// AddResourceType ( base , i , sources [ i ] ) ;
32996: LD_VAR 0 15
33000: PPUSH
33001: LD_VAR 0 8
33005: PPUSH
33006: LD_VAR 0 5
33010: PUSH
33011: LD_VAR 0 8
33015: ARRAY
33016: PPUSH
33017: CALL_OW 276
33021: GO 32993
33023: POP
33024: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33025: LD_ADDR_VAR 0 18
33029: PUSH
33030: LD_VAR 0 15
33034: PPUSH
33035: LD_VAR 0 2
33039: PPUSH
33040: LD_INT 1
33042: PPUSH
33043: CALL 32286 0 3
33047: ST_TO_ADDR
// InitHc ;
33048: CALL_OW 19
// InitUc ;
33052: CALL_OW 18
// uc_side := side ;
33056: LD_ADDR_OWVAR 20
33060: PUSH
33061: LD_VAR 0 16
33065: ST_TO_ADDR
// uc_nation := nation ;
33066: LD_ADDR_OWVAR 21
33070: PUSH
33071: LD_VAR 0 17
33075: ST_TO_ADDR
// if buildings then
33076: LD_VAR 0 18
33080: IFFALSE 34402
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33082: LD_ADDR_VAR 0 19
33086: PUSH
33087: LD_VAR 0 18
33091: PPUSH
33092: LD_INT 2
33094: PUSH
33095: LD_INT 30
33097: PUSH
33098: LD_INT 29
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 30
33107: PUSH
33108: LD_INT 30
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: PPUSH
33120: CALL_OW 72
33124: ST_TO_ADDR
// if tmp then
33125: LD_VAR 0 19
33129: IFFALSE 33177
// for i in tmp do
33131: LD_ADDR_VAR 0 8
33135: PUSH
33136: LD_VAR 0 19
33140: PUSH
33141: FOR_IN
33142: IFFALSE 33175
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33144: LD_VAR 0 8
33148: PPUSH
33149: CALL_OW 250
33153: PPUSH
33154: LD_VAR 0 8
33158: PPUSH
33159: CALL_OW 251
33163: PPUSH
33164: LD_VAR 0 16
33168: PPUSH
33169: CALL_OW 441
33173: GO 33141
33175: POP
33176: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33177: LD_VAR 0 18
33181: PPUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 30
33187: PUSH
33188: LD_INT 32
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 30
33197: PUSH
33198: LD_INT 33
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: PPUSH
33210: CALL_OW 72
33214: IFFALSE 33302
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33216: LD_ADDR_VAR 0 8
33220: PUSH
33221: LD_VAR 0 18
33225: PPUSH
33226: LD_INT 2
33228: PUSH
33229: LD_INT 30
33231: PUSH
33232: LD_INT 32
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 30
33241: PUSH
33242: LD_INT 33
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: PPUSH
33254: CALL_OW 72
33258: PUSH
33259: FOR_IN
33260: IFFALSE 33300
// begin if not GetBWeapon ( i ) then
33262: LD_VAR 0 8
33266: PPUSH
33267: CALL_OW 269
33271: NOT
33272: IFFALSE 33298
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33274: LD_VAR 0 8
33278: PPUSH
33279: LD_VAR 0 8
33283: PPUSH
33284: LD_VAR 0 2
33288: PPUSH
33289: CALL 34548 0 2
33293: PPUSH
33294: CALL_OW 431
// end ;
33298: GO 33259
33300: POP
33301: POP
// end ; for i = 1 to personel do
33302: LD_ADDR_VAR 0 8
33306: PUSH
33307: DOUBLE
33308: LD_INT 1
33310: DEC
33311: ST_TO_ADDR
33312: LD_VAR 0 6
33316: PUSH
33317: FOR_TO
33318: IFFALSE 34382
// begin if i > 4 then
33320: LD_VAR 0 8
33324: PUSH
33325: LD_INT 4
33327: GREATER
33328: IFFALSE 33332
// break ;
33330: GO 34382
// case i of 1 :
33332: LD_VAR 0 8
33336: PUSH
33337: LD_INT 1
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33425
33345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33346: LD_ADDR_VAR 0 12
33350: PUSH
33351: LD_VAR 0 18
33355: PPUSH
33356: LD_INT 22
33358: PUSH
33359: LD_VAR 0 16
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 58
33370: PUSH
33371: EMPTY
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 30
33379: PUSH
33380: LD_INT 32
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 30
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 30
33399: PUSH
33400: LD_INT 5
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: PPUSH
33418: CALL_OW 72
33422: ST_TO_ADDR
33423: GO 33647
33425: LD_INT 2
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33495
33433: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33434: LD_ADDR_VAR 0 12
33438: PUSH
33439: LD_VAR 0 18
33443: PPUSH
33444: LD_INT 22
33446: PUSH
33447: LD_VAR 0 16
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: LD_INT 30
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 30
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PPUSH
33488: CALL_OW 72
33492: ST_TO_ADDR
33493: GO 33647
33495: LD_INT 3
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33503
33501: GO 33565
33503: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33504: LD_ADDR_VAR 0 12
33508: PUSH
33509: LD_VAR 0 18
33513: PPUSH
33514: LD_INT 22
33516: PUSH
33517: LD_VAR 0 16
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 30
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 30
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PPUSH
33558: CALL_OW 72
33562: ST_TO_ADDR
33563: GO 33647
33565: LD_INT 4
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33646
33573: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33574: LD_ADDR_VAR 0 12
33578: PUSH
33579: LD_VAR 0 18
33583: PPUSH
33584: LD_INT 22
33586: PUSH
33587: LD_VAR 0 16
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: LD_INT 30
33601: PUSH
33602: LD_INT 6
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 30
33611: PUSH
33612: LD_INT 7
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 30
33621: PUSH
33622: LD_INT 8
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PPUSH
33639: CALL_OW 72
33643: ST_TO_ADDR
33644: GO 33647
33646: POP
// if i = 1 then
33647: LD_VAR 0 8
33651: PUSH
33652: LD_INT 1
33654: EQUAL
33655: IFFALSE 33766
// begin tmp := [ ] ;
33657: LD_ADDR_VAR 0 19
33661: PUSH
33662: EMPTY
33663: ST_TO_ADDR
// for j in f do
33664: LD_ADDR_VAR 0 9
33668: PUSH
33669: LD_VAR 0 12
33673: PUSH
33674: FOR_IN
33675: IFFALSE 33748
// if GetBType ( j ) = b_bunker then
33677: LD_VAR 0 9
33681: PPUSH
33682: CALL_OW 266
33686: PUSH
33687: LD_INT 32
33689: EQUAL
33690: IFFALSE 33717
// tmp := Insert ( tmp , 1 , j ) else
33692: LD_ADDR_VAR 0 19
33696: PUSH
33697: LD_VAR 0 19
33701: PPUSH
33702: LD_INT 1
33704: PPUSH
33705: LD_VAR 0 9
33709: PPUSH
33710: CALL_OW 2
33714: ST_TO_ADDR
33715: GO 33746
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33717: LD_ADDR_VAR 0 19
33721: PUSH
33722: LD_VAR 0 19
33726: PPUSH
33727: LD_VAR 0 19
33731: PUSH
33732: LD_INT 1
33734: PLUS
33735: PPUSH
33736: LD_VAR 0 9
33740: PPUSH
33741: CALL_OW 2
33745: ST_TO_ADDR
33746: GO 33674
33748: POP
33749: POP
// if tmp then
33750: LD_VAR 0 19
33754: IFFALSE 33766
// f := tmp ;
33756: LD_ADDR_VAR 0 12
33760: PUSH
33761: LD_VAR 0 19
33765: ST_TO_ADDR
// end ; x := personel [ i ] ;
33766: LD_ADDR_VAR 0 13
33770: PUSH
33771: LD_VAR 0 6
33775: PUSH
33776: LD_VAR 0 8
33780: ARRAY
33781: ST_TO_ADDR
// if x = - 1 then
33782: LD_VAR 0 13
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: EQUAL
33791: IFFALSE 34000
// begin for j in f do
33793: LD_ADDR_VAR 0 9
33797: PUSH
33798: LD_VAR 0 12
33802: PUSH
33803: FOR_IN
33804: IFFALSE 33996
// repeat InitHc ;
33806: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33810: LD_VAR 0 9
33814: PPUSH
33815: CALL_OW 266
33819: PUSH
33820: LD_INT 5
33822: EQUAL
33823: IFFALSE 33893
// begin if UnitsInside ( j ) < 3 then
33825: LD_VAR 0 9
33829: PPUSH
33830: CALL_OW 313
33834: PUSH
33835: LD_INT 3
33837: LESS
33838: IFFALSE 33874
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33840: LD_INT 0
33842: PPUSH
33843: LD_INT 5
33845: PUSH
33846: LD_INT 8
33848: PUSH
33849: LD_INT 9
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: PUSH
33857: LD_VAR 0 17
33861: ARRAY
33862: PPUSH
33863: LD_VAR 0 4
33867: PPUSH
33868: CALL_OW 380
33872: GO 33891
// PrepareHuman ( false , i , skill ) ;
33874: LD_INT 0
33876: PPUSH
33877: LD_VAR 0 8
33881: PPUSH
33882: LD_VAR 0 4
33886: PPUSH
33887: CALL_OW 380
// end else
33891: GO 33910
// PrepareHuman ( false , i , skill ) ;
33893: LD_INT 0
33895: PPUSH
33896: LD_VAR 0 8
33900: PPUSH
33901: LD_VAR 0 4
33905: PPUSH
33906: CALL_OW 380
// un := CreateHuman ;
33910: LD_ADDR_VAR 0 14
33914: PUSH
33915: CALL_OW 44
33919: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33920: LD_ADDR_VAR 0 7
33924: PUSH
33925: LD_VAR 0 7
33929: PPUSH
33930: LD_INT 1
33932: PPUSH
33933: LD_VAR 0 14
33937: PPUSH
33938: CALL_OW 2
33942: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33943: LD_VAR 0 14
33947: PPUSH
33948: LD_VAR 0 9
33952: PPUSH
33953: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33957: LD_VAR 0 9
33961: PPUSH
33962: CALL_OW 313
33966: PUSH
33967: LD_INT 6
33969: EQUAL
33970: PUSH
33971: LD_VAR 0 9
33975: PPUSH
33976: CALL_OW 266
33980: PUSH
33981: LD_INT 32
33983: PUSH
33984: LD_INT 31
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: IN
33991: OR
33992: IFFALSE 33806
33994: GO 33803
33996: POP
33997: POP
// end else
33998: GO 34380
// for j = 1 to x do
34000: LD_ADDR_VAR 0 9
34004: PUSH
34005: DOUBLE
34006: LD_INT 1
34008: DEC
34009: ST_TO_ADDR
34010: LD_VAR 0 13
34014: PUSH
34015: FOR_TO
34016: IFFALSE 34378
// begin InitHc ;
34018: CALL_OW 19
// if not f then
34022: LD_VAR 0 12
34026: NOT
34027: IFFALSE 34116
// begin PrepareHuman ( false , i , skill ) ;
34029: LD_INT 0
34031: PPUSH
34032: LD_VAR 0 8
34036: PPUSH
34037: LD_VAR 0 4
34041: PPUSH
34042: CALL_OW 380
// un := CreateHuman ;
34046: LD_ADDR_VAR 0 14
34050: PUSH
34051: CALL_OW 44
34055: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34056: LD_ADDR_VAR 0 7
34060: PUSH
34061: LD_VAR 0 7
34065: PPUSH
34066: LD_INT 1
34068: PPUSH
34069: LD_VAR 0 14
34073: PPUSH
34074: CALL_OW 2
34078: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34079: LD_VAR 0 14
34083: PPUSH
34084: LD_VAR 0 1
34088: PPUSH
34089: CALL_OW 250
34093: PPUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 251
34103: PPUSH
34104: LD_INT 10
34106: PPUSH
34107: LD_INT 0
34109: PPUSH
34110: CALL_OW 50
// continue ;
34114: GO 34015
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34116: LD_VAR 0 12
34120: PUSH
34121: LD_INT 1
34123: ARRAY
34124: PPUSH
34125: CALL_OW 313
34129: PUSH
34130: LD_VAR 0 12
34134: PUSH
34135: LD_INT 1
34137: ARRAY
34138: PPUSH
34139: CALL_OW 266
34143: PUSH
34144: LD_INT 32
34146: PUSH
34147: LD_INT 31
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: IN
34154: AND
34155: PUSH
34156: LD_VAR 0 12
34160: PUSH
34161: LD_INT 1
34163: ARRAY
34164: PPUSH
34165: CALL_OW 313
34169: PUSH
34170: LD_INT 6
34172: EQUAL
34173: OR
34174: IFFALSE 34194
// f := Delete ( f , 1 ) ;
34176: LD_ADDR_VAR 0 12
34180: PUSH
34181: LD_VAR 0 12
34185: PPUSH
34186: LD_INT 1
34188: PPUSH
34189: CALL_OW 3
34193: ST_TO_ADDR
// if not f then
34194: LD_VAR 0 12
34198: NOT
34199: IFFALSE 34217
// begin x := x + 2 ;
34201: LD_ADDR_VAR 0 13
34205: PUSH
34206: LD_VAR 0 13
34210: PUSH
34211: LD_INT 2
34213: PLUS
34214: ST_TO_ADDR
// continue ;
34215: GO 34015
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34217: LD_VAR 0 12
34221: PUSH
34222: LD_INT 1
34224: ARRAY
34225: PPUSH
34226: CALL_OW 266
34230: PUSH
34231: LD_INT 5
34233: EQUAL
34234: IFFALSE 34308
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34236: LD_VAR 0 12
34240: PUSH
34241: LD_INT 1
34243: ARRAY
34244: PPUSH
34245: CALL_OW 313
34249: PUSH
34250: LD_INT 3
34252: LESS
34253: IFFALSE 34289
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34255: LD_INT 0
34257: PPUSH
34258: LD_INT 5
34260: PUSH
34261: LD_INT 8
34263: PUSH
34264: LD_INT 9
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: PUSH
34272: LD_VAR 0 17
34276: ARRAY
34277: PPUSH
34278: LD_VAR 0 4
34282: PPUSH
34283: CALL_OW 380
34287: GO 34306
// PrepareHuman ( false , i , skill ) ;
34289: LD_INT 0
34291: PPUSH
34292: LD_VAR 0 8
34296: PPUSH
34297: LD_VAR 0 4
34301: PPUSH
34302: CALL_OW 380
// end else
34306: GO 34325
// PrepareHuman ( false , i , skill ) ;
34308: LD_INT 0
34310: PPUSH
34311: LD_VAR 0 8
34315: PPUSH
34316: LD_VAR 0 4
34320: PPUSH
34321: CALL_OW 380
// un := CreateHuman ;
34325: LD_ADDR_VAR 0 14
34329: PUSH
34330: CALL_OW 44
34334: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34335: LD_ADDR_VAR 0 7
34339: PUSH
34340: LD_VAR 0 7
34344: PPUSH
34345: LD_INT 1
34347: PPUSH
34348: LD_VAR 0 14
34352: PPUSH
34353: CALL_OW 2
34357: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34358: LD_VAR 0 14
34362: PPUSH
34363: LD_VAR 0 12
34367: PUSH
34368: LD_INT 1
34370: ARRAY
34371: PPUSH
34372: CALL_OW 52
// end ;
34376: GO 34015
34378: POP
34379: POP
// end ;
34380: GO 33317
34382: POP
34383: POP
// result := result ^ buildings ;
34384: LD_ADDR_VAR 0 7
34388: PUSH
34389: LD_VAR 0 7
34393: PUSH
34394: LD_VAR 0 18
34398: ADD
34399: ST_TO_ADDR
// end else
34400: GO 34543
// begin for i = 1 to personel do
34402: LD_ADDR_VAR 0 8
34406: PUSH
34407: DOUBLE
34408: LD_INT 1
34410: DEC
34411: ST_TO_ADDR
34412: LD_VAR 0 6
34416: PUSH
34417: FOR_TO
34418: IFFALSE 34541
// begin if i > 4 then
34420: LD_VAR 0 8
34424: PUSH
34425: LD_INT 4
34427: GREATER
34428: IFFALSE 34432
// break ;
34430: GO 34541
// x := personel [ i ] ;
34432: LD_ADDR_VAR 0 13
34436: PUSH
34437: LD_VAR 0 6
34441: PUSH
34442: LD_VAR 0 8
34446: ARRAY
34447: ST_TO_ADDR
// if x = - 1 then
34448: LD_VAR 0 13
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: EQUAL
34457: IFFALSE 34461
// continue ;
34459: GO 34417
// PrepareHuman ( false , i , skill ) ;
34461: LD_INT 0
34463: PPUSH
34464: LD_VAR 0 8
34468: PPUSH
34469: LD_VAR 0 4
34473: PPUSH
34474: CALL_OW 380
// un := CreateHuman ;
34478: LD_ADDR_VAR 0 14
34482: PUSH
34483: CALL_OW 44
34487: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34488: LD_VAR 0 14
34492: PPUSH
34493: LD_VAR 0 1
34497: PPUSH
34498: CALL_OW 250
34502: PPUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 251
34512: PPUSH
34513: LD_INT 10
34515: PPUSH
34516: LD_INT 0
34518: PPUSH
34519: CALL_OW 50
// result := result ^ un ;
34523: LD_ADDR_VAR 0 7
34527: PUSH
34528: LD_VAR 0 7
34532: PUSH
34533: LD_VAR 0 14
34537: ADD
34538: ST_TO_ADDR
// end ;
34539: GO 34417
34541: POP
34542: POP
// end ; end ;
34543: LD_VAR 0 7
34547: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34548: LD_INT 0
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
34558: PPUSH
34559: PPUSH
34560: PPUSH
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
34565: PPUSH
// result := false ;
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 0
34573: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34574: LD_VAR 0 1
34578: NOT
34579: PUSH
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 266
34589: PUSH
34590: LD_INT 32
34592: PUSH
34593: LD_INT 33
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: IN
34600: NOT
34601: OR
34602: IFFALSE 34606
// exit ;
34604: GO 35715
// nat := GetNation ( tower ) ;
34606: LD_ADDR_VAR 0 12
34610: PUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 248
34620: ST_TO_ADDR
// side := GetSide ( tower ) ;
34621: LD_ADDR_VAR 0 16
34625: PUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: CALL_OW 255
34635: ST_TO_ADDR
// x := GetX ( tower ) ;
34636: LD_ADDR_VAR 0 10
34640: PUSH
34641: LD_VAR 0 1
34645: PPUSH
34646: CALL_OW 250
34650: ST_TO_ADDR
// y := GetY ( tower ) ;
34651: LD_ADDR_VAR 0 11
34655: PUSH
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL_OW 251
34665: ST_TO_ADDR
// if not x or not y then
34666: LD_VAR 0 10
34670: NOT
34671: PUSH
34672: LD_VAR 0 11
34676: NOT
34677: OR
34678: IFFALSE 34682
// exit ;
34680: GO 35715
// weapon := 0 ;
34682: LD_ADDR_VAR 0 18
34686: PUSH
34687: LD_INT 0
34689: ST_TO_ADDR
// fac_list := [ ] ;
34690: LD_ADDR_VAR 0 17
34694: PUSH
34695: EMPTY
34696: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34697: LD_ADDR_VAR 0 6
34701: PUSH
34702: LD_VAR 0 1
34706: PPUSH
34707: CALL_OW 274
34711: PPUSH
34712: LD_VAR 0 2
34716: PPUSH
34717: LD_INT 0
34719: PPUSH
34720: CALL 32286 0 3
34724: PPUSH
34725: LD_INT 30
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PPUSH
34735: CALL_OW 72
34739: ST_TO_ADDR
// if not factories then
34740: LD_VAR 0 6
34744: NOT
34745: IFFALSE 34749
// exit ;
34747: GO 35715
// for i in factories do
34749: LD_ADDR_VAR 0 8
34753: PUSH
34754: LD_VAR 0 6
34758: PUSH
34759: FOR_IN
34760: IFFALSE 34785
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34762: LD_ADDR_VAR 0 17
34766: PUSH
34767: LD_VAR 0 17
34771: PUSH
34772: LD_VAR 0 8
34776: PPUSH
34777: CALL_OW 478
34781: UNION
34782: ST_TO_ADDR
34783: GO 34759
34785: POP
34786: POP
// if not fac_list then
34787: LD_VAR 0 17
34791: NOT
34792: IFFALSE 34796
// exit ;
34794: GO 35715
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34796: LD_ADDR_VAR 0 5
34800: PUSH
34801: LD_INT 4
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: LD_INT 9
34809: PUSH
34810: LD_INT 10
34812: PUSH
34813: LD_INT 6
34815: PUSH
34816: LD_INT 7
34818: PUSH
34819: LD_INT 11
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 27
34833: PUSH
34834: LD_INT 28
34836: PUSH
34837: LD_INT 26
34839: PUSH
34840: LD_INT 30
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 43
34851: PUSH
34852: LD_INT 44
34854: PUSH
34855: LD_INT 46
34857: PUSH
34858: LD_INT 45
34860: PUSH
34861: LD_INT 47
34863: PUSH
34864: LD_INT 49
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: PUSH
34880: LD_VAR 0 12
34884: ARRAY
34885: ST_TO_ADDR
// list := list isect fac_list ;
34886: LD_ADDR_VAR 0 5
34890: PUSH
34891: LD_VAR 0 5
34895: PUSH
34896: LD_VAR 0 17
34900: ISECT
34901: ST_TO_ADDR
// if not list then
34902: LD_VAR 0 5
34906: NOT
34907: IFFALSE 34911
// exit ;
34909: GO 35715
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34911: LD_VAR 0 12
34915: PUSH
34916: LD_INT 3
34918: EQUAL
34919: PUSH
34920: LD_INT 49
34922: PUSH
34923: LD_VAR 0 5
34927: IN
34928: AND
34929: PUSH
34930: LD_INT 31
34932: PPUSH
34933: LD_VAR 0 16
34937: PPUSH
34938: CALL_OW 321
34942: PUSH
34943: LD_INT 2
34945: EQUAL
34946: AND
34947: IFFALSE 35007
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34949: LD_INT 22
34951: PUSH
34952: LD_VAR 0 16
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 35
34963: PUSH
34964: LD_INT 49
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 91
34973: PUSH
34974: LD_VAR 0 1
34978: PUSH
34979: LD_INT 10
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: PPUSH
34992: CALL_OW 69
34996: NOT
34997: IFFALSE 35007
// weapon := ru_time_lapser ;
34999: LD_ADDR_VAR 0 18
35003: PUSH
35004: LD_INT 49
35006: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35007: LD_VAR 0 12
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: IN
35022: PUSH
35023: LD_INT 11
35025: PUSH
35026: LD_VAR 0 5
35030: IN
35031: PUSH
35032: LD_INT 30
35034: PUSH
35035: LD_VAR 0 5
35039: IN
35040: OR
35041: AND
35042: PUSH
35043: LD_INT 6
35045: PPUSH
35046: LD_VAR 0 16
35050: PPUSH
35051: CALL_OW 321
35055: PUSH
35056: LD_INT 2
35058: EQUAL
35059: AND
35060: IFFALSE 35225
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35062: LD_INT 22
35064: PUSH
35065: LD_VAR 0 16
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 35
35079: PUSH
35080: LD_INT 11
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 35
35089: PUSH
35090: LD_INT 30
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 91
35104: PUSH
35105: LD_VAR 0 1
35109: PUSH
35110: LD_INT 18
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: PPUSH
35123: CALL_OW 69
35127: NOT
35128: PUSH
35129: LD_INT 22
35131: PUSH
35132: LD_VAR 0 16
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 30
35146: PUSH
35147: LD_INT 32
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 30
35156: PUSH
35157: LD_INT 33
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 91
35171: PUSH
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 12
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: PPUSH
35193: CALL_OW 69
35197: PUSH
35198: LD_INT 2
35200: GREATER
35201: AND
35202: IFFALSE 35225
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35204: LD_ADDR_VAR 0 18
35208: PUSH
35209: LD_INT 11
35211: PUSH
35212: LD_INT 30
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_VAR 0 12
35223: ARRAY
35224: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35225: LD_VAR 0 18
35229: NOT
35230: PUSH
35231: LD_INT 40
35233: PPUSH
35234: LD_VAR 0 16
35238: PPUSH
35239: CALL_OW 321
35243: PUSH
35244: LD_INT 2
35246: EQUAL
35247: AND
35248: PUSH
35249: LD_INT 7
35251: PUSH
35252: LD_VAR 0 5
35256: IN
35257: PUSH
35258: LD_INT 28
35260: PUSH
35261: LD_VAR 0 5
35265: IN
35266: OR
35267: PUSH
35268: LD_INT 45
35270: PUSH
35271: LD_VAR 0 5
35275: IN
35276: OR
35277: AND
35278: IFFALSE 35532
// begin hex := GetHexInfo ( x , y ) ;
35280: LD_ADDR_VAR 0 4
35284: PUSH
35285: LD_VAR 0 10
35289: PPUSH
35290: LD_VAR 0 11
35294: PPUSH
35295: CALL_OW 546
35299: ST_TO_ADDR
// if hex [ 1 ] then
35300: LD_VAR 0 4
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: IFFALSE 35312
// exit ;
35310: GO 35715
// height := hex [ 2 ] ;
35312: LD_ADDR_VAR 0 15
35316: PUSH
35317: LD_VAR 0 4
35321: PUSH
35322: LD_INT 2
35324: ARRAY
35325: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35326: LD_ADDR_VAR 0 14
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// for i in tmp do
35349: LD_ADDR_VAR 0 8
35353: PUSH
35354: LD_VAR 0 14
35358: PUSH
35359: FOR_IN
35360: IFFALSE 35530
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35362: LD_ADDR_VAR 0 9
35366: PUSH
35367: LD_VAR 0 10
35371: PPUSH
35372: LD_VAR 0 8
35376: PPUSH
35377: LD_INT 5
35379: PPUSH
35380: CALL_OW 272
35384: PUSH
35385: LD_VAR 0 11
35389: PPUSH
35390: LD_VAR 0 8
35394: PPUSH
35395: LD_INT 5
35397: PPUSH
35398: CALL_OW 273
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35407: LD_VAR 0 9
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PPUSH
35416: LD_VAR 0 9
35420: PUSH
35421: LD_INT 2
35423: ARRAY
35424: PPUSH
35425: CALL_OW 488
35429: IFFALSE 35528
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35431: LD_ADDR_VAR 0 4
35435: PUSH
35436: LD_VAR 0 9
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: PPUSH
35445: LD_VAR 0 9
35449: PUSH
35450: LD_INT 2
35452: ARRAY
35453: PPUSH
35454: CALL_OW 546
35458: ST_TO_ADDR
// if hex [ 1 ] then
35459: LD_VAR 0 4
35463: PUSH
35464: LD_INT 1
35466: ARRAY
35467: IFFALSE 35471
// continue ;
35469: GO 35359
// h := hex [ 2 ] ;
35471: LD_ADDR_VAR 0 13
35475: PUSH
35476: LD_VAR 0 4
35480: PUSH
35481: LD_INT 2
35483: ARRAY
35484: ST_TO_ADDR
// if h + 7 < height then
35485: LD_VAR 0 13
35489: PUSH
35490: LD_INT 7
35492: PLUS
35493: PUSH
35494: LD_VAR 0 15
35498: LESS
35499: IFFALSE 35528
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35501: LD_ADDR_VAR 0 18
35505: PUSH
35506: LD_INT 7
35508: PUSH
35509: LD_INT 28
35511: PUSH
35512: LD_INT 45
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: PUSH
35520: LD_VAR 0 12
35524: ARRAY
35525: ST_TO_ADDR
// break ;
35526: GO 35530
// end ; end ; end ;
35528: GO 35359
35530: POP
35531: POP
// end ; if not weapon then
35532: LD_VAR 0 18
35536: NOT
35537: IFFALSE 35597
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35539: LD_ADDR_VAR 0 5
35543: PUSH
35544: LD_VAR 0 5
35548: PUSH
35549: LD_INT 11
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 49
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: DIFF
35563: ST_TO_ADDR
// if not list then
35564: LD_VAR 0 5
35568: NOT
35569: IFFALSE 35573
// exit ;
35571: GO 35715
// weapon := list [ rand ( 1 , list ) ] ;
35573: LD_ADDR_VAR 0 18
35577: PUSH
35578: LD_VAR 0 5
35582: PUSH
35583: LD_INT 1
35585: PPUSH
35586: LD_VAR 0 5
35590: PPUSH
35591: CALL_OW 12
35595: ARRAY
35596: ST_TO_ADDR
// end ; if weapon then
35597: LD_VAR 0 18
35601: IFFALSE 35715
// begin tmp := CostOfWeapon ( weapon ) ;
35603: LD_ADDR_VAR 0 14
35607: PUSH
35608: LD_VAR 0 18
35612: PPUSH
35613: CALL_OW 451
35617: ST_TO_ADDR
// j := GetBase ( tower ) ;
35618: LD_ADDR_VAR 0 9
35622: PUSH
35623: LD_VAR 0 1
35627: PPUSH
35628: CALL_OW 274
35632: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35633: LD_VAR 0 9
35637: PPUSH
35638: LD_INT 1
35640: PPUSH
35641: CALL_OW 275
35645: PUSH
35646: LD_VAR 0 14
35650: PUSH
35651: LD_INT 1
35653: ARRAY
35654: GREATEREQUAL
35655: PUSH
35656: LD_VAR 0 9
35660: PPUSH
35661: LD_INT 2
35663: PPUSH
35664: CALL_OW 275
35668: PUSH
35669: LD_VAR 0 14
35673: PUSH
35674: LD_INT 2
35676: ARRAY
35677: GREATEREQUAL
35678: AND
35679: PUSH
35680: LD_VAR 0 9
35684: PPUSH
35685: LD_INT 3
35687: PPUSH
35688: CALL_OW 275
35692: PUSH
35693: LD_VAR 0 14
35697: PUSH
35698: LD_INT 3
35700: ARRAY
35701: GREATEREQUAL
35702: AND
35703: IFFALSE 35715
// result := weapon ;
35705: LD_ADDR_VAR 0 3
35709: PUSH
35710: LD_VAR 0 18
35714: ST_TO_ADDR
// end ; end ;
35715: LD_VAR 0 3
35719: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35720: LD_INT 0
35722: PPUSH
35723: PPUSH
// result := true ;
35724: LD_ADDR_VAR 0 3
35728: PUSH
35729: LD_INT 1
35731: ST_TO_ADDR
// if array1 = array2 then
35732: LD_VAR 0 1
35736: PUSH
35737: LD_VAR 0 2
35741: EQUAL
35742: IFFALSE 35802
// begin for i = 1 to array1 do
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: DOUBLE
35750: LD_INT 1
35752: DEC
35753: ST_TO_ADDR
35754: LD_VAR 0 1
35758: PUSH
35759: FOR_TO
35760: IFFALSE 35798
// if array1 [ i ] <> array2 [ i ] then
35762: LD_VAR 0 1
35766: PUSH
35767: LD_VAR 0 4
35771: ARRAY
35772: PUSH
35773: LD_VAR 0 2
35777: PUSH
35778: LD_VAR 0 4
35782: ARRAY
35783: NONEQUAL
35784: IFFALSE 35796
// begin result := false ;
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_INT 0
35793: ST_TO_ADDR
// break ;
35794: GO 35798
// end ;
35796: GO 35759
35798: POP
35799: POP
// end else
35800: GO 35810
// result := false ;
35802: LD_ADDR_VAR 0 3
35806: PUSH
35807: LD_INT 0
35809: ST_TO_ADDR
// end ;
35810: LD_VAR 0 3
35814: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35815: LD_INT 0
35817: PPUSH
35818: PPUSH
// if not array1 or not array2 then
35819: LD_VAR 0 1
35823: NOT
35824: PUSH
35825: LD_VAR 0 2
35829: NOT
35830: OR
35831: IFFALSE 35835
// exit ;
35833: GO 35899
// result := true ;
35835: LD_ADDR_VAR 0 3
35839: PUSH
35840: LD_INT 1
35842: ST_TO_ADDR
// for i = 1 to array1 do
35843: LD_ADDR_VAR 0 4
35847: PUSH
35848: DOUBLE
35849: LD_INT 1
35851: DEC
35852: ST_TO_ADDR
35853: LD_VAR 0 1
35857: PUSH
35858: FOR_TO
35859: IFFALSE 35897
// if array1 [ i ] <> array2 [ i ] then
35861: LD_VAR 0 1
35865: PUSH
35866: LD_VAR 0 4
35870: ARRAY
35871: PUSH
35872: LD_VAR 0 2
35876: PUSH
35877: LD_VAR 0 4
35881: ARRAY
35882: NONEQUAL
35883: IFFALSE 35895
// begin result := false ;
35885: LD_ADDR_VAR 0 3
35889: PUSH
35890: LD_INT 0
35892: ST_TO_ADDR
// break ;
35893: GO 35897
// end ;
35895: GO 35858
35897: POP
35898: POP
// end ;
35899: LD_VAR 0 3
35903: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35904: LD_INT 0
35906: PPUSH
35907: PPUSH
35908: PPUSH
// pom := GetBase ( fac ) ;
35909: LD_ADDR_VAR 0 5
35913: PUSH
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL_OW 274
35923: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35924: LD_ADDR_VAR 0 4
35928: PUSH
35929: LD_VAR 0 2
35933: PUSH
35934: LD_INT 1
35936: ARRAY
35937: PPUSH
35938: LD_VAR 0 2
35942: PUSH
35943: LD_INT 2
35945: ARRAY
35946: PPUSH
35947: LD_VAR 0 2
35951: PUSH
35952: LD_INT 3
35954: ARRAY
35955: PPUSH
35956: LD_VAR 0 2
35960: PUSH
35961: LD_INT 4
35963: ARRAY
35964: PPUSH
35965: CALL_OW 449
35969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35970: LD_ADDR_VAR 0 3
35974: PUSH
35975: LD_VAR 0 5
35979: PPUSH
35980: LD_INT 1
35982: PPUSH
35983: CALL_OW 275
35987: PUSH
35988: LD_VAR 0 4
35992: PUSH
35993: LD_INT 1
35995: ARRAY
35996: GREATEREQUAL
35997: PUSH
35998: LD_VAR 0 5
36002: PPUSH
36003: LD_INT 2
36005: PPUSH
36006: CALL_OW 275
36010: PUSH
36011: LD_VAR 0 4
36015: PUSH
36016: LD_INT 2
36018: ARRAY
36019: GREATEREQUAL
36020: AND
36021: PUSH
36022: LD_VAR 0 5
36026: PPUSH
36027: LD_INT 3
36029: PPUSH
36030: CALL_OW 275
36034: PUSH
36035: LD_VAR 0 4
36039: PUSH
36040: LD_INT 3
36042: ARRAY
36043: GREATEREQUAL
36044: AND
36045: ST_TO_ADDR
// end ;
36046: LD_VAR 0 3
36050: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36051: LD_INT 0
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
// pom := GetBase ( building ) ;
36057: LD_ADDR_VAR 0 3
36061: PUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: CALL_OW 274
36071: ST_TO_ADDR
// if not pom then
36072: LD_VAR 0 3
36076: NOT
36077: IFFALSE 36081
// exit ;
36079: GO 36251
// btype := GetBType ( building ) ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL_OW 266
36095: ST_TO_ADDR
// if btype = b_armoury then
36096: LD_VAR 0 5
36100: PUSH
36101: LD_INT 4
36103: EQUAL
36104: IFFALSE 36114
// btype := b_barracks ;
36106: LD_ADDR_VAR 0 5
36110: PUSH
36111: LD_INT 5
36113: ST_TO_ADDR
// if btype = b_depot then
36114: LD_VAR 0 5
36118: PUSH
36119: LD_INT 0
36121: EQUAL
36122: IFFALSE 36132
// btype := b_warehouse ;
36124: LD_ADDR_VAR 0 5
36128: PUSH
36129: LD_INT 1
36131: ST_TO_ADDR
// if btype = b_workshop then
36132: LD_VAR 0 5
36136: PUSH
36137: LD_INT 2
36139: EQUAL
36140: IFFALSE 36150
// btype := b_factory ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_INT 3
36149: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36150: LD_ADDR_VAR 0 4
36154: PUSH
36155: LD_VAR 0 5
36159: PPUSH
36160: LD_VAR 0 1
36164: PPUSH
36165: CALL_OW 248
36169: PPUSH
36170: CALL_OW 450
36174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36175: LD_ADDR_VAR 0 2
36179: PUSH
36180: LD_VAR 0 3
36184: PPUSH
36185: LD_INT 1
36187: PPUSH
36188: CALL_OW 275
36192: PUSH
36193: LD_VAR 0 4
36197: PUSH
36198: LD_INT 1
36200: ARRAY
36201: GREATEREQUAL
36202: PUSH
36203: LD_VAR 0 3
36207: PPUSH
36208: LD_INT 2
36210: PPUSH
36211: CALL_OW 275
36215: PUSH
36216: LD_VAR 0 4
36220: PUSH
36221: LD_INT 2
36223: ARRAY
36224: GREATEREQUAL
36225: AND
36226: PUSH
36227: LD_VAR 0 3
36231: PPUSH
36232: LD_INT 3
36234: PPUSH
36235: CALL_OW 275
36239: PUSH
36240: LD_VAR 0 4
36244: PUSH
36245: LD_INT 3
36247: ARRAY
36248: GREATEREQUAL
36249: AND
36250: ST_TO_ADDR
// end ;
36251: LD_VAR 0 2
36255: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36256: LD_INT 0
36258: PPUSH
36259: PPUSH
36260: PPUSH
// pom := GetBase ( building ) ;
36261: LD_ADDR_VAR 0 4
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 274
36275: ST_TO_ADDR
// if not pom then
36276: LD_VAR 0 4
36280: NOT
36281: IFFALSE 36285
// exit ;
36283: GO 36386
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_VAR 0 2
36294: PPUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: CALL_OW 248
36304: PPUSH
36305: CALL_OW 450
36309: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36310: LD_ADDR_VAR 0 3
36314: PUSH
36315: LD_VAR 0 4
36319: PPUSH
36320: LD_INT 1
36322: PPUSH
36323: CALL_OW 275
36327: PUSH
36328: LD_VAR 0 5
36332: PUSH
36333: LD_INT 1
36335: ARRAY
36336: GREATEREQUAL
36337: PUSH
36338: LD_VAR 0 4
36342: PPUSH
36343: LD_INT 2
36345: PPUSH
36346: CALL_OW 275
36350: PUSH
36351: LD_VAR 0 5
36355: PUSH
36356: LD_INT 2
36358: ARRAY
36359: GREATEREQUAL
36360: AND
36361: PUSH
36362: LD_VAR 0 4
36366: PPUSH
36367: LD_INT 3
36369: PPUSH
36370: CALL_OW 275
36374: PUSH
36375: LD_VAR 0 5
36379: PUSH
36380: LD_INT 3
36382: ARRAY
36383: GREATEREQUAL
36384: AND
36385: ST_TO_ADDR
// end ;
36386: LD_VAR 0 3
36390: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36391: LD_INT 0
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
// result := false ;
36404: LD_ADDR_VAR 0 8
36408: PUSH
36409: LD_INT 0
36411: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36412: LD_VAR 0 5
36416: NOT
36417: PUSH
36418: LD_VAR 0 1
36422: NOT
36423: OR
36424: PUSH
36425: LD_VAR 0 2
36429: NOT
36430: OR
36431: PUSH
36432: LD_VAR 0 3
36436: NOT
36437: OR
36438: IFFALSE 36442
// exit ;
36440: GO 37256
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36442: LD_ADDR_VAR 0 14
36446: PUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: LD_VAR 0 2
36456: PPUSH
36457: LD_VAR 0 3
36461: PPUSH
36462: LD_VAR 0 4
36466: PPUSH
36467: LD_VAR 0 5
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: PPUSH
36476: CALL_OW 248
36480: PPUSH
36481: LD_INT 0
36483: PPUSH
36484: CALL 38489 0 6
36488: ST_TO_ADDR
// if not hexes then
36489: LD_VAR 0 14
36493: NOT
36494: IFFALSE 36498
// exit ;
36496: GO 37256
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36498: LD_ADDR_VAR 0 17
36502: PUSH
36503: LD_VAR 0 5
36507: PPUSH
36508: LD_INT 22
36510: PUSH
36511: LD_VAR 0 13
36515: PPUSH
36516: CALL_OW 255
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 30
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 30
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PPUSH
36557: CALL_OW 72
36561: ST_TO_ADDR
// for i = 1 to hexes do
36562: LD_ADDR_VAR 0 9
36566: PUSH
36567: DOUBLE
36568: LD_INT 1
36570: DEC
36571: ST_TO_ADDR
36572: LD_VAR 0 14
36576: PUSH
36577: FOR_TO
36578: IFFALSE 37254
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36580: LD_ADDR_VAR 0 13
36584: PUSH
36585: LD_VAR 0 14
36589: PUSH
36590: LD_VAR 0 9
36594: ARRAY
36595: PUSH
36596: LD_INT 1
36598: ARRAY
36599: PPUSH
36600: LD_VAR 0 14
36604: PUSH
36605: LD_VAR 0 9
36609: ARRAY
36610: PUSH
36611: LD_INT 2
36613: ARRAY
36614: PPUSH
36615: CALL_OW 428
36619: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36620: LD_VAR 0 14
36624: PUSH
36625: LD_VAR 0 9
36629: ARRAY
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: PPUSH
36635: LD_VAR 0 14
36639: PUSH
36640: LD_VAR 0 9
36644: ARRAY
36645: PUSH
36646: LD_INT 2
36648: ARRAY
36649: PPUSH
36650: CALL_OW 351
36654: PUSH
36655: LD_VAR 0 14
36659: PUSH
36660: LD_VAR 0 9
36664: ARRAY
36665: PUSH
36666: LD_INT 1
36668: ARRAY
36669: PPUSH
36670: LD_VAR 0 14
36674: PUSH
36675: LD_VAR 0 9
36679: ARRAY
36680: PUSH
36681: LD_INT 2
36683: ARRAY
36684: PPUSH
36685: CALL_OW 488
36689: NOT
36690: OR
36691: PUSH
36692: LD_VAR 0 13
36696: PPUSH
36697: CALL_OW 247
36701: PUSH
36702: LD_INT 3
36704: EQUAL
36705: OR
36706: IFFALSE 36712
// exit ;
36708: POP
36709: POP
36710: GO 37256
// if not tmp then
36712: LD_VAR 0 13
36716: NOT
36717: IFFALSE 36721
// continue ;
36719: GO 36577
// result := true ;
36721: LD_ADDR_VAR 0 8
36725: PUSH
36726: LD_INT 1
36728: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36729: LD_VAR 0 6
36733: PUSH
36734: LD_VAR 0 13
36738: PPUSH
36739: CALL_OW 247
36743: PUSH
36744: LD_INT 2
36746: EQUAL
36747: AND
36748: PUSH
36749: LD_VAR 0 13
36753: PPUSH
36754: CALL_OW 263
36758: PUSH
36759: LD_INT 1
36761: EQUAL
36762: AND
36763: IFFALSE 36927
// begin if IsDrivenBy ( tmp ) then
36765: LD_VAR 0 13
36769: PPUSH
36770: CALL_OW 311
36774: IFFALSE 36778
// continue ;
36776: GO 36577
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36778: LD_VAR 0 6
36782: PPUSH
36783: LD_INT 3
36785: PUSH
36786: LD_INT 60
36788: PUSH
36789: EMPTY
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 3
36798: PUSH
36799: LD_INT 55
36801: PUSH
36802: EMPTY
36803: LIST
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PPUSH
36813: CALL_OW 72
36817: IFFALSE 36925
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36819: LD_ADDR_VAR 0 18
36823: PUSH
36824: LD_VAR 0 6
36828: PPUSH
36829: LD_INT 3
36831: PUSH
36832: LD_INT 60
36834: PUSH
36835: EMPTY
36836: LIST
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: LD_INT 55
36847: PUSH
36848: EMPTY
36849: LIST
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PPUSH
36859: CALL_OW 72
36863: PUSH
36864: LD_INT 1
36866: ARRAY
36867: ST_TO_ADDR
// if IsInUnit ( driver ) then
36868: LD_VAR 0 18
36872: PPUSH
36873: CALL_OW 310
36877: IFFALSE 36888
// ComExit ( driver ) ;
36879: LD_VAR 0 18
36883: PPUSH
36884: CALL 62250 0 1
// AddComEnterUnit ( driver , tmp ) ;
36888: LD_VAR 0 18
36892: PPUSH
36893: LD_VAR 0 13
36897: PPUSH
36898: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36902: LD_VAR 0 18
36906: PPUSH
36907: LD_VAR 0 7
36911: PPUSH
36912: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36916: LD_VAR 0 18
36920: PPUSH
36921: CALL_OW 181
// end ; continue ;
36925: GO 36577
// end ; if not cleaners or not tmp in cleaners then
36927: LD_VAR 0 6
36931: NOT
36932: PUSH
36933: LD_VAR 0 13
36937: PUSH
36938: LD_VAR 0 6
36942: IN
36943: NOT
36944: OR
36945: IFFALSE 37252
// begin if dep then
36947: LD_VAR 0 17
36951: IFFALSE 37087
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36953: LD_ADDR_VAR 0 16
36957: PUSH
36958: LD_VAR 0 17
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PPUSH
36967: CALL_OW 250
36971: PPUSH
36972: LD_VAR 0 17
36976: PUSH
36977: LD_INT 1
36979: ARRAY
36980: PPUSH
36981: CALL_OW 254
36985: PPUSH
36986: LD_INT 5
36988: PPUSH
36989: CALL_OW 272
36993: PUSH
36994: LD_VAR 0 17
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: CALL_OW 251
37007: PPUSH
37008: LD_VAR 0 17
37012: PUSH
37013: LD_INT 1
37015: ARRAY
37016: PPUSH
37017: CALL_OW 254
37021: PPUSH
37022: LD_INT 5
37024: PPUSH
37025: CALL_OW 273
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37034: LD_VAR 0 16
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: PPUSH
37043: LD_VAR 0 16
37047: PUSH
37048: LD_INT 2
37050: ARRAY
37051: PPUSH
37052: CALL_OW 488
37056: IFFALSE 37087
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37058: LD_VAR 0 13
37062: PPUSH
37063: LD_VAR 0 16
37067: PUSH
37068: LD_INT 1
37070: ARRAY
37071: PPUSH
37072: LD_VAR 0 16
37076: PUSH
37077: LD_INT 2
37079: ARRAY
37080: PPUSH
37081: CALL_OW 111
// continue ;
37085: GO 36577
// end ; end ; r := GetDir ( tmp ) ;
37087: LD_ADDR_VAR 0 15
37091: PUSH
37092: LD_VAR 0 13
37096: PPUSH
37097: CALL_OW 254
37101: ST_TO_ADDR
// if r = 5 then
37102: LD_VAR 0 15
37106: PUSH
37107: LD_INT 5
37109: EQUAL
37110: IFFALSE 37120
// r := 0 ;
37112: LD_ADDR_VAR 0 15
37116: PUSH
37117: LD_INT 0
37119: ST_TO_ADDR
// for j = r to 5 do
37120: LD_ADDR_VAR 0 10
37124: PUSH
37125: DOUBLE
37126: LD_VAR 0 15
37130: DEC
37131: ST_TO_ADDR
37132: LD_INT 5
37134: PUSH
37135: FOR_TO
37136: IFFALSE 37250
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37138: LD_ADDR_VAR 0 11
37142: PUSH
37143: LD_VAR 0 13
37147: PPUSH
37148: CALL_OW 250
37152: PPUSH
37153: LD_VAR 0 10
37157: PPUSH
37158: LD_INT 2
37160: PPUSH
37161: CALL_OW 272
37165: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37166: LD_ADDR_VAR 0 12
37170: PUSH
37171: LD_VAR 0 13
37175: PPUSH
37176: CALL_OW 251
37180: PPUSH
37181: LD_VAR 0 10
37185: PPUSH
37186: LD_INT 2
37188: PPUSH
37189: CALL_OW 273
37193: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37194: LD_VAR 0 11
37198: PPUSH
37199: LD_VAR 0 12
37203: PPUSH
37204: CALL_OW 488
37208: PUSH
37209: LD_VAR 0 11
37213: PPUSH
37214: LD_VAR 0 12
37218: PPUSH
37219: CALL_OW 428
37223: NOT
37224: AND
37225: IFFALSE 37248
// begin ComMoveXY ( tmp , _x , _y ) ;
37227: LD_VAR 0 13
37231: PPUSH
37232: LD_VAR 0 11
37236: PPUSH
37237: LD_VAR 0 12
37241: PPUSH
37242: CALL_OW 111
// break ;
37246: GO 37250
// end ; end ;
37248: GO 37135
37250: POP
37251: POP
// end ; end ;
37252: GO 36577
37254: POP
37255: POP
// end ;
37256: LD_VAR 0 8
37260: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37261: LD_INT 0
37263: PPUSH
// result := true ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_INT 1
37271: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37272: LD_VAR 0 2
37276: PUSH
37277: LD_INT 24
37279: DOUBLE
37280: EQUAL
37281: IFTRUE 37291
37283: LD_INT 33
37285: DOUBLE
37286: EQUAL
37287: IFTRUE 37291
37289: GO 37316
37291: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37292: LD_ADDR_VAR 0 3
37296: PUSH
37297: LD_INT 32
37299: PPUSH
37300: LD_VAR 0 1
37304: PPUSH
37305: CALL_OW 321
37309: PUSH
37310: LD_INT 2
37312: EQUAL
37313: ST_TO_ADDR
37314: GO 37632
37316: LD_INT 20
37318: DOUBLE
37319: EQUAL
37320: IFTRUE 37324
37322: GO 37349
37324: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37325: LD_ADDR_VAR 0 3
37329: PUSH
37330: LD_INT 6
37332: PPUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 321
37342: PUSH
37343: LD_INT 2
37345: EQUAL
37346: ST_TO_ADDR
37347: GO 37632
37349: LD_INT 22
37351: DOUBLE
37352: EQUAL
37353: IFTRUE 37363
37355: LD_INT 36
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37388
37363: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_INT 15
37371: PPUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 321
37381: PUSH
37382: LD_INT 2
37384: EQUAL
37385: ST_TO_ADDR
37386: GO 37632
37388: LD_INT 30
37390: DOUBLE
37391: EQUAL
37392: IFTRUE 37396
37394: GO 37421
37396: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37397: LD_ADDR_VAR 0 3
37401: PUSH
37402: LD_INT 20
37404: PPUSH
37405: LD_VAR 0 1
37409: PPUSH
37410: CALL_OW 321
37414: PUSH
37415: LD_INT 2
37417: EQUAL
37418: ST_TO_ADDR
37419: GO 37632
37421: LD_INT 28
37423: DOUBLE
37424: EQUAL
37425: IFTRUE 37435
37427: LD_INT 21
37429: DOUBLE
37430: EQUAL
37431: IFTRUE 37435
37433: GO 37460
37435: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_INT 21
37443: PPUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: CALL_OW 321
37453: PUSH
37454: LD_INT 2
37456: EQUAL
37457: ST_TO_ADDR
37458: GO 37632
37460: LD_INT 16
37462: DOUBLE
37463: EQUAL
37464: IFTRUE 37468
37466: GO 37493
37468: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37469: LD_ADDR_VAR 0 3
37473: PUSH
37474: LD_INT 84
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 321
37486: PUSH
37487: LD_INT 2
37489: EQUAL
37490: ST_TO_ADDR
37491: GO 37632
37493: LD_INT 19
37495: DOUBLE
37496: EQUAL
37497: IFTRUE 37507
37499: LD_INT 23
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 37532
37507: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37508: LD_ADDR_VAR 0 3
37512: PUSH
37513: LD_INT 83
37515: PPUSH
37516: LD_VAR 0 1
37520: PPUSH
37521: CALL_OW 321
37525: PUSH
37526: LD_INT 2
37528: EQUAL
37529: ST_TO_ADDR
37530: GO 37632
37532: LD_INT 17
37534: DOUBLE
37535: EQUAL
37536: IFTRUE 37540
37538: GO 37565
37540: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37541: LD_ADDR_VAR 0 3
37545: PUSH
37546: LD_INT 39
37548: PPUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 321
37558: PUSH
37559: LD_INT 2
37561: EQUAL
37562: ST_TO_ADDR
37563: GO 37632
37565: LD_INT 18
37567: DOUBLE
37568: EQUAL
37569: IFTRUE 37573
37571: GO 37598
37573: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37574: LD_ADDR_VAR 0 3
37578: PUSH
37579: LD_INT 40
37581: PPUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL_OW 321
37591: PUSH
37592: LD_INT 2
37594: EQUAL
37595: ST_TO_ADDR
37596: GO 37632
37598: LD_INT 27
37600: DOUBLE
37601: EQUAL
37602: IFTRUE 37606
37604: GO 37631
37606: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37607: LD_ADDR_VAR 0 3
37611: PUSH
37612: LD_INT 35
37614: PPUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 321
37624: PUSH
37625: LD_INT 2
37627: EQUAL
37628: ST_TO_ADDR
37629: GO 37632
37631: POP
// end ;
37632: LD_VAR 0 3
37636: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37637: LD_INT 0
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
// result := false ;
37650: LD_ADDR_VAR 0 6
37654: PUSH
37655: LD_INT 0
37657: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37658: LD_VAR 0 1
37662: NOT
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 266
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: IN
37684: NOT
37685: OR
37686: PUSH
37687: LD_VAR 0 2
37691: NOT
37692: OR
37693: PUSH
37694: LD_VAR 0 5
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: LD_INT 5
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: IN
37725: NOT
37726: OR
37727: PUSH
37728: LD_VAR 0 3
37732: PPUSH
37733: LD_VAR 0 4
37737: PPUSH
37738: CALL_OW 488
37742: NOT
37743: OR
37744: IFFALSE 37748
// exit ;
37746: GO 38484
// side := GetSide ( depot ) ;
37748: LD_ADDR_VAR 0 9
37752: PUSH
37753: LD_VAR 0 1
37757: PPUSH
37758: CALL_OW 255
37762: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37763: LD_VAR 0 9
37767: PPUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: CALL 37261 0 2
37777: NOT
37778: IFFALSE 37782
// exit ;
37780: GO 38484
// pom := GetBase ( depot ) ;
37782: LD_ADDR_VAR 0 10
37786: PUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: CALL_OW 274
37796: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37797: LD_ADDR_VAR 0 11
37801: PUSH
37802: LD_VAR 0 2
37806: PPUSH
37807: LD_VAR 0 1
37811: PPUSH
37812: CALL_OW 248
37816: PPUSH
37817: CALL_OW 450
37821: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37822: LD_VAR 0 10
37826: PPUSH
37827: LD_INT 1
37829: PPUSH
37830: CALL_OW 275
37834: PUSH
37835: LD_VAR 0 11
37839: PUSH
37840: LD_INT 1
37842: ARRAY
37843: GREATEREQUAL
37844: PUSH
37845: LD_VAR 0 10
37849: PPUSH
37850: LD_INT 2
37852: PPUSH
37853: CALL_OW 275
37857: PUSH
37858: LD_VAR 0 11
37862: PUSH
37863: LD_INT 2
37865: ARRAY
37866: GREATEREQUAL
37867: AND
37868: PUSH
37869: LD_VAR 0 10
37873: PPUSH
37874: LD_INT 3
37876: PPUSH
37877: CALL_OW 275
37881: PUSH
37882: LD_VAR 0 11
37886: PUSH
37887: LD_INT 3
37889: ARRAY
37890: GREATEREQUAL
37891: AND
37892: NOT
37893: IFFALSE 37897
// exit ;
37895: GO 38484
// if GetBType ( depot ) = b_depot then
37897: LD_VAR 0 1
37901: PPUSH
37902: CALL_OW 266
37906: PUSH
37907: LD_INT 0
37909: EQUAL
37910: IFFALSE 37922
// dist := 28 else
37912: LD_ADDR_VAR 0 14
37916: PUSH
37917: LD_INT 28
37919: ST_TO_ADDR
37920: GO 37930
// dist := 36 ;
37922: LD_ADDR_VAR 0 14
37926: PUSH
37927: LD_INT 36
37929: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37930: LD_VAR 0 1
37934: PPUSH
37935: LD_VAR 0 3
37939: PPUSH
37940: LD_VAR 0 4
37944: PPUSH
37945: CALL_OW 297
37949: PUSH
37950: LD_VAR 0 14
37954: GREATER
37955: IFFALSE 37959
// exit ;
37957: GO 38484
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37959: LD_ADDR_VAR 0 12
37963: PUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: LD_VAR 0 3
37973: PPUSH
37974: LD_VAR 0 4
37978: PPUSH
37979: LD_VAR 0 5
37983: PPUSH
37984: LD_VAR 0 1
37988: PPUSH
37989: CALL_OW 248
37993: PPUSH
37994: LD_INT 0
37996: PPUSH
37997: CALL 38489 0 6
38001: ST_TO_ADDR
// if not hexes then
38002: LD_VAR 0 12
38006: NOT
38007: IFFALSE 38011
// exit ;
38009: GO 38484
// hex := GetHexInfo ( x , y ) ;
38011: LD_ADDR_VAR 0 15
38015: PUSH
38016: LD_VAR 0 3
38020: PPUSH
38021: LD_VAR 0 4
38025: PPUSH
38026: CALL_OW 546
38030: ST_TO_ADDR
// if hex [ 1 ] then
38031: LD_VAR 0 15
38035: PUSH
38036: LD_INT 1
38038: ARRAY
38039: IFFALSE 38043
// exit ;
38041: GO 38484
// height := hex [ 2 ] ;
38043: LD_ADDR_VAR 0 13
38047: PUSH
38048: LD_VAR 0 15
38052: PUSH
38053: LD_INT 2
38055: ARRAY
38056: ST_TO_ADDR
// for i = 1 to hexes do
38057: LD_ADDR_VAR 0 7
38061: PUSH
38062: DOUBLE
38063: LD_INT 1
38065: DEC
38066: ST_TO_ADDR
38067: LD_VAR 0 12
38071: PUSH
38072: FOR_TO
38073: IFFALSE 38403
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38075: LD_VAR 0 12
38079: PUSH
38080: LD_VAR 0 7
38084: ARRAY
38085: PUSH
38086: LD_INT 1
38088: ARRAY
38089: PPUSH
38090: LD_VAR 0 12
38094: PUSH
38095: LD_VAR 0 7
38099: ARRAY
38100: PUSH
38101: LD_INT 2
38103: ARRAY
38104: PPUSH
38105: CALL_OW 488
38109: NOT
38110: PUSH
38111: LD_VAR 0 12
38115: PUSH
38116: LD_VAR 0 7
38120: ARRAY
38121: PUSH
38122: LD_INT 1
38124: ARRAY
38125: PPUSH
38126: LD_VAR 0 12
38130: PUSH
38131: LD_VAR 0 7
38135: ARRAY
38136: PUSH
38137: LD_INT 2
38139: ARRAY
38140: PPUSH
38141: CALL_OW 428
38145: PUSH
38146: LD_INT 0
38148: GREATER
38149: OR
38150: PUSH
38151: LD_VAR 0 12
38155: PUSH
38156: LD_VAR 0 7
38160: ARRAY
38161: PUSH
38162: LD_INT 1
38164: ARRAY
38165: PPUSH
38166: LD_VAR 0 12
38170: PUSH
38171: LD_VAR 0 7
38175: ARRAY
38176: PUSH
38177: LD_INT 2
38179: ARRAY
38180: PPUSH
38181: CALL_OW 351
38185: OR
38186: IFFALSE 38192
// exit ;
38188: POP
38189: POP
38190: GO 38484
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38192: LD_ADDR_VAR 0 8
38196: PUSH
38197: LD_VAR 0 12
38201: PUSH
38202: LD_VAR 0 7
38206: ARRAY
38207: PUSH
38208: LD_INT 1
38210: ARRAY
38211: PPUSH
38212: LD_VAR 0 12
38216: PUSH
38217: LD_VAR 0 7
38221: ARRAY
38222: PUSH
38223: LD_INT 2
38225: ARRAY
38226: PPUSH
38227: CALL_OW 546
38231: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38232: LD_VAR 0 8
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: PUSH
38241: LD_VAR 0 8
38245: PUSH
38246: LD_INT 2
38248: ARRAY
38249: PUSH
38250: LD_VAR 0 13
38254: PUSH
38255: LD_INT 2
38257: PLUS
38258: GREATER
38259: OR
38260: PUSH
38261: LD_VAR 0 8
38265: PUSH
38266: LD_INT 2
38268: ARRAY
38269: PUSH
38270: LD_VAR 0 13
38274: PUSH
38275: LD_INT 2
38277: MINUS
38278: LESS
38279: OR
38280: PUSH
38281: LD_VAR 0 8
38285: PUSH
38286: LD_INT 3
38288: ARRAY
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 8
38295: PUSH
38296: LD_INT 9
38298: PUSH
38299: LD_INT 10
38301: PUSH
38302: LD_INT 11
38304: PUSH
38305: LD_INT 12
38307: PUSH
38308: LD_INT 13
38310: PUSH
38311: LD_INT 16
38313: PUSH
38314: LD_INT 17
38316: PUSH
38317: LD_INT 18
38319: PUSH
38320: LD_INT 19
38322: PUSH
38323: LD_INT 20
38325: PUSH
38326: LD_INT 21
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: IN
38344: NOT
38345: OR
38346: PUSH
38347: LD_VAR 0 8
38351: PUSH
38352: LD_INT 5
38354: ARRAY
38355: NOT
38356: OR
38357: PUSH
38358: LD_VAR 0 8
38362: PUSH
38363: LD_INT 6
38365: ARRAY
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 7
38375: PUSH
38376: LD_INT 9
38378: PUSH
38379: LD_INT 10
38381: PUSH
38382: LD_INT 11
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: IN
38393: NOT
38394: OR
38395: IFFALSE 38401
// exit ;
38397: POP
38398: POP
38399: GO 38484
// end ;
38401: GO 38072
38403: POP
38404: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38405: LD_VAR 0 9
38409: PPUSH
38410: LD_VAR 0 3
38414: PPUSH
38415: LD_VAR 0 4
38419: PPUSH
38420: LD_INT 20
38422: PPUSH
38423: CALL 30436 0 4
38427: PUSH
38428: LD_INT 4
38430: ARRAY
38431: IFFALSE 38435
// exit ;
38433: GO 38484
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38435: LD_VAR 0 2
38439: PUSH
38440: LD_INT 29
38442: PUSH
38443: LD_INT 30
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: IN
38450: PUSH
38451: LD_VAR 0 3
38455: PPUSH
38456: LD_VAR 0 4
38460: PPUSH
38461: LD_VAR 0 9
38465: PPUSH
38466: CALL_OW 440
38470: NOT
38471: AND
38472: IFFALSE 38476
// exit ;
38474: GO 38484
// result := true ;
38476: LD_ADDR_VAR 0 6
38480: PUSH
38481: LD_INT 1
38483: ST_TO_ADDR
// end ;
38484: LD_VAR 0 6
38488: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38489: LD_INT 0
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
// result = [ ] ;
38549: LD_ADDR_VAR 0 7
38553: PUSH
38554: EMPTY
38555: ST_TO_ADDR
// temp_list = [ ] ;
38556: LD_ADDR_VAR 0 9
38560: PUSH
38561: EMPTY
38562: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38563: LD_VAR 0 4
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: LD_INT 4
38582: PUSH
38583: LD_INT 5
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: IN
38594: NOT
38595: PUSH
38596: LD_VAR 0 1
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: IN
38611: PUSH
38612: LD_VAR 0 5
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 3
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: IN
38631: NOT
38632: AND
38633: OR
38634: IFFALSE 38638
// exit ;
38636: GO 57029
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38638: LD_VAR 0 1
38642: PUSH
38643: LD_INT 6
38645: PUSH
38646: LD_INT 7
38648: PUSH
38649: LD_INT 8
38651: PUSH
38652: LD_INT 13
38654: PUSH
38655: LD_INT 12
38657: PUSH
38658: LD_INT 15
38660: PUSH
38661: LD_INT 11
38663: PUSH
38664: LD_INT 14
38666: PUSH
38667: LD_INT 10
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: IN
38681: IFFALSE 38691
// btype = b_lab ;
38683: LD_ADDR_VAR 0 1
38687: PUSH
38688: LD_INT 6
38690: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38691: LD_VAR 0 6
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: IN
38710: NOT
38711: PUSH
38712: LD_VAR 0 1
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 6
38731: PUSH
38732: LD_INT 36
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: LD_INT 5
38740: PUSH
38741: LD_INT 31
38743: PUSH
38744: LD_INT 32
38746: PUSH
38747: LD_INT 33
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: IN
38763: NOT
38764: PUSH
38765: LD_VAR 0 6
38769: PUSH
38770: LD_INT 1
38772: EQUAL
38773: AND
38774: OR
38775: PUSH
38776: LD_VAR 0 1
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 3
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: IN
38791: NOT
38792: PUSH
38793: LD_VAR 0 6
38797: PUSH
38798: LD_INT 2
38800: EQUAL
38801: AND
38802: OR
38803: IFFALSE 38813
// mode = 0 ;
38805: LD_ADDR_VAR 0 6
38809: PUSH
38810: LD_INT 0
38812: ST_TO_ADDR
// case mode of 0 :
38813: LD_VAR 0 6
38817: PUSH
38818: LD_INT 0
38820: DOUBLE
38821: EQUAL
38822: IFTRUE 38826
38824: GO 50279
38826: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38827: LD_ADDR_VAR 0 11
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 2
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39020: LD_ADDR_VAR 0 12
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 3
39177: NEG
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 3
39188: NEG
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39216: LD_ADDR_VAR 0 13
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 3
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 3
39375: NEG
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 3
39387: NEG
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39415: LD_ADDR_VAR 0 14
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: LD_INT 3
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39611: LD_ADDR_VAR 0 15
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 3
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39804: LD_ADDR_VAR 0 16
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 2
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: LD_INT 2
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39997: LD_ADDR_VAR 0 17
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40227: LD_ADDR_VAR 0 18
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40457: LD_ADDR_VAR 0 19
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40687: LD_ADDR_VAR 0 20
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40917: LD_ADDR_VAR 0 21
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41147: LD_ADDR_VAR 0 22
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: NEG
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41377: LD_ADDR_VAR 0 23
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 1
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: LD_INT 3
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 3
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41657: LD_ADDR_VAR 0 24
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 3
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41933: LD_ADDR_VAR 0 25
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: LD_INT 3
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42207: LD_ADDR_VAR 0 26
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 3
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 3
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42483: LD_ADDR_VAR 0 27
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 3
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 3
42728: NEG
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42763: LD_ADDR_VAR 0 28
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: LD_INT 3
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 3
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 3
42998: NEG
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: NEG
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43045: LD_ADDR_VAR 0 29
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: LD_INT 3
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43324: LD_ADDR_VAR 0 30
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43602: LD_ADDR_VAR 0 31
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 3
43845: NEG
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43880: LD_ADDR_VAR 0 32
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 3
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 3
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44158: LD_ADDR_VAR 0 33
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 3
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: NEG
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44437: LD_ADDR_VAR 0 34
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 3
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 3
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44717: LD_ADDR_VAR 0 35
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44829: LD_ADDR_VAR 0 36
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44941: LD_ADDR_VAR 0 37
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45053: LD_ADDR_VAR 0 38
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45165: LD_ADDR_VAR 0 39
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45277: LD_ADDR_VAR 0 40
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45389: LD_ADDR_VAR 0 41
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 3
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 3
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 3
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 3
45663: NEG
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 3
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: NEG
45699: PUSH
45700: LD_INT 3
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45739: LD_ADDR_VAR 0 42
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 3
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: NEG
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46089: LD_ADDR_VAR 0 43
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 3
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 3
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 3
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 3
46396: NEG
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46437: LD_ADDR_VAR 0 44
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 3
46680: PUSH
46681: LD_INT 3
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 3
46746: NEG
46747: PUSH
46748: LD_INT 3
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46787: LD_ADDR_VAR 0 45
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 3
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 3
47084: NEG
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: LD_INT 3
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47137: LD_ADDR_VAR 0 46
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 3
47433: NEG
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 3
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47485: LD_ADDR_VAR 0 47
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47636: LD_ADDR_VAR 0 48
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47783: LD_ADDR_VAR 0 49
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47927: LD_ADDR_VAR 0 50
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48071: LD_ADDR_VAR 0 51
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48218: LD_ADDR_VAR 0 52
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48369: LD_ADDR_VAR 0 53
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48599: LD_ADDR_VAR 0 54
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48829: LD_ADDR_VAR 0 55
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49059: LD_ADDR_VAR 0 56
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49289: LD_ADDR_VAR 0 57
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49519: LD_ADDR_VAR 0 58
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49749: LD_ADDR_VAR 0 59
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49837: LD_ADDR_VAR 0 60
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49925: LD_ADDR_VAR 0 61
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50013: LD_ADDR_VAR 0 62
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50101: LD_ADDR_VAR 0 63
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50189: LD_ADDR_VAR 0 64
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: ST_TO_ADDR
// end ; 1 :
50277: GO 56174
50279: LD_INT 1
50281: DOUBLE
50282: EQUAL
50283: IFTRUE 50287
50285: GO 52910
50287: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50288: LD_ADDR_VAR 0 11
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50332: LD_ADDR_VAR 0 12
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50373: LD_ADDR_VAR 0 13
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50413: LD_ADDR_VAR 0 14
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 3
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50454: LD_ADDR_VAR 0 15
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50498: LD_ADDR_VAR 0 16
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 3
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 3
50517: NEG
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50544: LD_ADDR_VAR 0 17
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50588: LD_ADDR_VAR 0 18
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50629: LD_ADDR_VAR 0 19
50633: PUSH
50634: LD_INT 3
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50669: LD_ADDR_VAR 0 20
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 3
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 3
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50710: LD_ADDR_VAR 0 21
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50754: LD_ADDR_VAR 0 22
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50800: LD_ADDR_VAR 0 23
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 4
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50844: LD_ADDR_VAR 0 24
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 4
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50885: LD_ADDR_VAR 0 25
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: LD_INT 3
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: LD_INT 4
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50925: LD_ADDR_VAR 0 26
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50966: LD_ADDR_VAR 0 27
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51010: LD_ADDR_VAR 0 28
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 4
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 4
51041: NEG
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51056: LD_ADDR_VAR 0 29
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 4
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 5
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 5
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 4
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 6
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: LD_INT 6
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 5
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51211: LD_ADDR_VAR 0 30
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 4
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 5
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 5
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 5
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 6
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 6
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51354: LD_ADDR_VAR 0 31
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 4
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 4
51401: PUSH
51402: LD_INT 4
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: LD_INT 4
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 5
51421: PUSH
51422: LD_INT 4
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 5
51431: PUSH
51432: LD_INT 5
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 4
51441: PUSH
51442: LD_INT 5
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 6
51451: PUSH
51452: LD_INT 5
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 6
51461: PUSH
51462: LD_INT 6
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 5
51471: PUSH
51472: LD_INT 6
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51493: LD_ADDR_VAR 0 32
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 4
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 4
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 5
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 5
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 4
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 6
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 6
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51636: LD_ADDR_VAR 0 33
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 3
51677: NEG
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 4
51688: NEG
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 4
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 4
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 5
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 5
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 5
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 6
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 6
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51791: LD_ADDR_VAR 0 34
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: LD_INT 4
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 4
51846: NEG
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 4
51858: NEG
51859: PUSH
51860: LD_INT 4
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 4
51870: NEG
51871: PUSH
51872: LD_INT 5
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 5
51882: NEG
51883: PUSH
51884: LD_INT 4
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 5
51894: NEG
51895: PUSH
51896: LD_INT 5
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 5
51906: NEG
51907: PUSH
51908: LD_INT 6
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 6
51918: NEG
51919: PUSH
51920: LD_INT 5
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 6
51930: NEG
51931: PUSH
51932: LD_INT 6
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51954: LD_ADDR_VAR 0 41
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51998: LD_ADDR_VAR 0 42
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52039: LD_ADDR_VAR 0 43
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 3
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52079: LD_ADDR_VAR 0 44
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 3
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52120: LD_ADDR_VAR 0 45
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52164: LD_ADDR_VAR 0 46
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 3
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52210: LD_ADDR_VAR 0 47
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52243: LD_ADDR_VAR 0 48
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52274: LD_ADDR_VAR 0 49
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52303: LD_ADDR_VAR 0 50
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52332: LD_ADDR_VAR 0 51
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52363: LD_ADDR_VAR 0 52
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52396: LD_ADDR_VAR 0 53
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52440: LD_ADDR_VAR 0 54
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52481: LD_ADDR_VAR 0 55
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 3
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52521: LD_ADDR_VAR 0 56
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52562: LD_ADDR_VAR 0 57
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52606: LD_ADDR_VAR 0 58
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52652: LD_ADDR_VAR 0 59
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52696: LD_ADDR_VAR 0 60
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52737: LD_ADDR_VAR 0 61
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52777: LD_ADDR_VAR 0 62
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: LIST
52817: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52818: LD_ADDR_VAR 0 63
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52862: LD_ADDR_VAR 0 64
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// end ; 2 :
52908: GO 56174
52910: LD_INT 2
52912: DOUBLE
52913: EQUAL
52914: IFTRUE 52918
52916: GO 56173
52918: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52919: LD_ADDR_VAR 0 29
52923: PUSH
52924: LD_INT 4
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 4
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 5
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 5
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 4
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 5
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 4
53039: PUSH
53040: LD_INT 3
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 4
53049: PUSH
53050: LD_INT 4
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 4
53089: PUSH
53090: LD_INT 2
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 4
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 4
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 5
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 5
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 4
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 5
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 4
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 4
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 4
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 4
53304: NEG
53305: PUSH
53306: LD_INT 4
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 4
53316: NEG
53317: PUSH
53318: LD_INT 5
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 4
53352: NEG
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 5
53364: NEG
53365: PUSH
53366: LD_INT 4
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 5
53376: NEG
53377: PUSH
53378: LD_INT 5
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: NEG
53389: PUSH
53390: LD_INT 5
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 5
53400: NEG
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53457: LD_ADDR_VAR 0 30
53461: PUSH
53462: LD_INT 4
53464: PUSH
53465: LD_INT 4
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 4
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 5
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 5
53494: PUSH
53495: LD_INT 5
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 3
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 5
53534: PUSH
53535: LD_INT 3
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 5
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 4
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 4
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 4
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 4
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 4
53692: NEG
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 5
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 5
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 5
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: LD_INT 4
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 4
53809: NEG
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 4
53821: NEG
53822: PUSH
53823: LD_INT 4
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 4
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 4
53845: NEG
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 5
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 4
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 4
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 5
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 5
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54004: LD_ADDR_VAR 0 31
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 4
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 4
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 5
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 5
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 4
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 5
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 4
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 4
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 4
54206: NEG
54207: PUSH
54208: LD_INT 4
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: NEG
54219: PUSH
54220: LD_INT 5
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: LD_INT 4
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 5
54266: NEG
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 5
54278: NEG
54279: PUSH
54280: LD_INT 5
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: LD_INT 5
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 5
54302: NEG
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 4
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 4
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 4
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 4
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 4
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 5
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 5
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 4
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 5
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54554: LD_ADDR_VAR 0 32
54558: PUSH
54559: LD_INT 4
54561: NEG
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 4
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 4
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 5
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 5
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 5
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 4
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 4
54723: NEG
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 4
54735: NEG
54736: PUSH
54737: LD_INT 4
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: LD_INT 4
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 4
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 5
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 3
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 5
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 4
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 4
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 3
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 4
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 4
54966: PUSH
54967: LD_INT 4
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 4
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 5
54986: PUSH
54987: LD_INT 4
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 5
54996: PUSH
54997: LD_INT 5
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 4
55006: PUSH
55007: LD_INT 5
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 4
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 5
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: LD_INT 5
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55101: LD_ADDR_VAR 0 33
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: LD_INT 4
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 5
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 5
55168: NEG
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 5
55180: NEG
55181: PUSH
55182: LD_INT 5
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 5
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: NEG
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 4
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: LD_INT 3
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 4
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 4
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 5
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 5
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 4
55441: PUSH
55442: LD_INT 4
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: LD_INT 4
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 4
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 4
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 4
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 5
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 5
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 4
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 5
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55639: LD_ADDR_VAR 0 34
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 5
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 4
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 4
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 5
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 4
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 4
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 4
55841: PUSH
55842: LD_INT 4
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 4
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 5
55861: PUSH
55862: LD_INT 4
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 5
55871: PUSH
55872: LD_INT 5
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 4
55881: PUSH
55882: LD_INT 5
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 5
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 4
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 4
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 4
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 4
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 5
56080: NEG
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 5
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 5
56103: NEG
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: NEG
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// end ; end ;
56171: GO 56174
56173: POP
// case btype of b_depot , b_warehouse :
56174: LD_VAR 0 1
56178: PUSH
56179: LD_INT 0
56181: DOUBLE
56182: EQUAL
56183: IFTRUE 56193
56185: LD_INT 1
56187: DOUBLE
56188: EQUAL
56189: IFTRUE 56193
56191: GO 56394
56193: POP
// case nation of nation_american :
56194: LD_VAR 0 5
56198: PUSH
56199: LD_INT 1
56201: DOUBLE
56202: EQUAL
56203: IFTRUE 56207
56205: GO 56263
56207: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56208: LD_ADDR_VAR 0 9
56212: PUSH
56213: LD_VAR 0 11
56217: PUSH
56218: LD_VAR 0 12
56222: PUSH
56223: LD_VAR 0 13
56227: PUSH
56228: LD_VAR 0 14
56232: PUSH
56233: LD_VAR 0 15
56237: PUSH
56238: LD_VAR 0 16
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: PUSH
56251: LD_VAR 0 4
56255: PUSH
56256: LD_INT 1
56258: PLUS
56259: ARRAY
56260: ST_TO_ADDR
56261: GO 56392
56263: LD_INT 2
56265: DOUBLE
56266: EQUAL
56267: IFTRUE 56271
56269: GO 56327
56271: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56272: LD_ADDR_VAR 0 9
56276: PUSH
56277: LD_VAR 0 17
56281: PUSH
56282: LD_VAR 0 18
56286: PUSH
56287: LD_VAR 0 19
56291: PUSH
56292: LD_VAR 0 20
56296: PUSH
56297: LD_VAR 0 21
56301: PUSH
56302: LD_VAR 0 22
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: PUSH
56315: LD_VAR 0 4
56319: PUSH
56320: LD_INT 1
56322: PLUS
56323: ARRAY
56324: ST_TO_ADDR
56325: GO 56392
56327: LD_INT 3
56329: DOUBLE
56330: EQUAL
56331: IFTRUE 56335
56333: GO 56391
56335: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56336: LD_ADDR_VAR 0 9
56340: PUSH
56341: LD_VAR 0 23
56345: PUSH
56346: LD_VAR 0 24
56350: PUSH
56351: LD_VAR 0 25
56355: PUSH
56356: LD_VAR 0 26
56360: PUSH
56361: LD_VAR 0 27
56365: PUSH
56366: LD_VAR 0 28
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: PUSH
56379: LD_VAR 0 4
56383: PUSH
56384: LD_INT 1
56386: PLUS
56387: ARRAY
56388: ST_TO_ADDR
56389: GO 56392
56391: POP
56392: GO 56947
56394: LD_INT 2
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56408
56400: LD_INT 3
56402: DOUBLE
56403: EQUAL
56404: IFTRUE 56408
56406: GO 56464
56408: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56409: LD_ADDR_VAR 0 9
56413: PUSH
56414: LD_VAR 0 29
56418: PUSH
56419: LD_VAR 0 30
56423: PUSH
56424: LD_VAR 0 31
56428: PUSH
56429: LD_VAR 0 32
56433: PUSH
56434: LD_VAR 0 33
56438: PUSH
56439: LD_VAR 0 34
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: PUSH
56452: LD_VAR 0 4
56456: PUSH
56457: LD_INT 1
56459: PLUS
56460: ARRAY
56461: ST_TO_ADDR
56462: GO 56947
56464: LD_INT 16
56466: DOUBLE
56467: EQUAL
56468: IFTRUE 56526
56470: LD_INT 17
56472: DOUBLE
56473: EQUAL
56474: IFTRUE 56526
56476: LD_INT 18
56478: DOUBLE
56479: EQUAL
56480: IFTRUE 56526
56482: LD_INT 19
56484: DOUBLE
56485: EQUAL
56486: IFTRUE 56526
56488: LD_INT 22
56490: DOUBLE
56491: EQUAL
56492: IFTRUE 56526
56494: LD_INT 20
56496: DOUBLE
56497: EQUAL
56498: IFTRUE 56526
56500: LD_INT 21
56502: DOUBLE
56503: EQUAL
56504: IFTRUE 56526
56506: LD_INT 23
56508: DOUBLE
56509: EQUAL
56510: IFTRUE 56526
56512: LD_INT 24
56514: DOUBLE
56515: EQUAL
56516: IFTRUE 56526
56518: LD_INT 25
56520: DOUBLE
56521: EQUAL
56522: IFTRUE 56526
56524: GO 56582
56526: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56527: LD_ADDR_VAR 0 9
56531: PUSH
56532: LD_VAR 0 35
56536: PUSH
56537: LD_VAR 0 36
56541: PUSH
56542: LD_VAR 0 37
56546: PUSH
56547: LD_VAR 0 38
56551: PUSH
56552: LD_VAR 0 39
56556: PUSH
56557: LD_VAR 0 40
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: PUSH
56570: LD_VAR 0 4
56574: PUSH
56575: LD_INT 1
56577: PLUS
56578: ARRAY
56579: ST_TO_ADDR
56580: GO 56947
56582: LD_INT 6
56584: DOUBLE
56585: EQUAL
56586: IFTRUE 56638
56588: LD_INT 7
56590: DOUBLE
56591: EQUAL
56592: IFTRUE 56638
56594: LD_INT 8
56596: DOUBLE
56597: EQUAL
56598: IFTRUE 56638
56600: LD_INT 13
56602: DOUBLE
56603: EQUAL
56604: IFTRUE 56638
56606: LD_INT 12
56608: DOUBLE
56609: EQUAL
56610: IFTRUE 56638
56612: LD_INT 15
56614: DOUBLE
56615: EQUAL
56616: IFTRUE 56638
56618: LD_INT 11
56620: DOUBLE
56621: EQUAL
56622: IFTRUE 56638
56624: LD_INT 14
56626: DOUBLE
56627: EQUAL
56628: IFTRUE 56638
56630: LD_INT 10
56632: DOUBLE
56633: EQUAL
56634: IFTRUE 56638
56636: GO 56694
56638: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56639: LD_ADDR_VAR 0 9
56643: PUSH
56644: LD_VAR 0 41
56648: PUSH
56649: LD_VAR 0 42
56653: PUSH
56654: LD_VAR 0 43
56658: PUSH
56659: LD_VAR 0 44
56663: PUSH
56664: LD_VAR 0 45
56668: PUSH
56669: LD_VAR 0 46
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: PUSH
56682: LD_VAR 0 4
56686: PUSH
56687: LD_INT 1
56689: PLUS
56690: ARRAY
56691: ST_TO_ADDR
56692: GO 56947
56694: LD_INT 36
56696: DOUBLE
56697: EQUAL
56698: IFTRUE 56702
56700: GO 56758
56702: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56703: LD_ADDR_VAR 0 9
56707: PUSH
56708: LD_VAR 0 47
56712: PUSH
56713: LD_VAR 0 48
56717: PUSH
56718: LD_VAR 0 49
56722: PUSH
56723: LD_VAR 0 50
56727: PUSH
56728: LD_VAR 0 51
56732: PUSH
56733: LD_VAR 0 52
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: PUSH
56746: LD_VAR 0 4
56750: PUSH
56751: LD_INT 1
56753: PLUS
56754: ARRAY
56755: ST_TO_ADDR
56756: GO 56947
56758: LD_INT 4
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56784
56764: LD_INT 5
56766: DOUBLE
56767: EQUAL
56768: IFTRUE 56784
56770: LD_INT 34
56772: DOUBLE
56773: EQUAL
56774: IFTRUE 56784
56776: LD_INT 37
56778: DOUBLE
56779: EQUAL
56780: IFTRUE 56784
56782: GO 56840
56784: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56785: LD_ADDR_VAR 0 9
56789: PUSH
56790: LD_VAR 0 53
56794: PUSH
56795: LD_VAR 0 54
56799: PUSH
56800: LD_VAR 0 55
56804: PUSH
56805: LD_VAR 0 56
56809: PUSH
56810: LD_VAR 0 57
56814: PUSH
56815: LD_VAR 0 58
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_VAR 0 4
56832: PUSH
56833: LD_INT 1
56835: PLUS
56836: ARRAY
56837: ST_TO_ADDR
56838: GO 56947
56840: LD_INT 31
56842: DOUBLE
56843: EQUAL
56844: IFTRUE 56890
56846: LD_INT 32
56848: DOUBLE
56849: EQUAL
56850: IFTRUE 56890
56852: LD_INT 33
56854: DOUBLE
56855: EQUAL
56856: IFTRUE 56890
56858: LD_INT 27
56860: DOUBLE
56861: EQUAL
56862: IFTRUE 56890
56864: LD_INT 26
56866: DOUBLE
56867: EQUAL
56868: IFTRUE 56890
56870: LD_INT 28
56872: DOUBLE
56873: EQUAL
56874: IFTRUE 56890
56876: LD_INT 29
56878: DOUBLE
56879: EQUAL
56880: IFTRUE 56890
56882: LD_INT 30
56884: DOUBLE
56885: EQUAL
56886: IFTRUE 56890
56888: GO 56946
56890: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56891: LD_ADDR_VAR 0 9
56895: PUSH
56896: LD_VAR 0 59
56900: PUSH
56901: LD_VAR 0 60
56905: PUSH
56906: LD_VAR 0 61
56910: PUSH
56911: LD_VAR 0 62
56915: PUSH
56916: LD_VAR 0 63
56920: PUSH
56921: LD_VAR 0 64
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: PUSH
56934: LD_VAR 0 4
56938: PUSH
56939: LD_INT 1
56941: PLUS
56942: ARRAY
56943: ST_TO_ADDR
56944: GO 56947
56946: POP
// temp_list2 = [ ] ;
56947: LD_ADDR_VAR 0 10
56951: PUSH
56952: EMPTY
56953: ST_TO_ADDR
// for i in temp_list do
56954: LD_ADDR_VAR 0 8
56958: PUSH
56959: LD_VAR 0 9
56963: PUSH
56964: FOR_IN
56965: IFFALSE 57017
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56967: LD_ADDR_VAR 0 10
56971: PUSH
56972: LD_VAR 0 10
56976: PUSH
56977: LD_VAR 0 8
56981: PUSH
56982: LD_INT 1
56984: ARRAY
56985: PUSH
56986: LD_VAR 0 2
56990: PLUS
56991: PUSH
56992: LD_VAR 0 8
56996: PUSH
56997: LD_INT 2
56999: ARRAY
57000: PUSH
57001: LD_VAR 0 3
57005: PLUS
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: EMPTY
57012: LIST
57013: ADD
57014: ST_TO_ADDR
57015: GO 56964
57017: POP
57018: POP
// result = temp_list2 ;
57019: LD_ADDR_VAR 0 7
57023: PUSH
57024: LD_VAR 0 10
57028: ST_TO_ADDR
// end ;
57029: LD_VAR 0 7
57033: RET
// export function EnemyInRange ( unit , dist ) ; begin
57034: LD_INT 0
57036: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57037: LD_ADDR_VAR 0 3
57041: PUSH
57042: LD_VAR 0 1
57046: PPUSH
57047: CALL_OW 255
57051: PPUSH
57052: LD_VAR 0 1
57056: PPUSH
57057: CALL_OW 250
57061: PPUSH
57062: LD_VAR 0 1
57066: PPUSH
57067: CALL_OW 251
57071: PPUSH
57072: LD_VAR 0 2
57076: PPUSH
57077: CALL 30436 0 4
57081: PUSH
57082: LD_INT 4
57084: ARRAY
57085: ST_TO_ADDR
// end ;
57086: LD_VAR 0 3
57090: RET
// export function PlayerSeeMe ( unit ) ; begin
57091: LD_INT 0
57093: PPUSH
// result := See ( your_side , unit ) ;
57094: LD_ADDR_VAR 0 2
57098: PUSH
57099: LD_OWVAR 2
57103: PPUSH
57104: LD_VAR 0 1
57108: PPUSH
57109: CALL_OW 292
57113: ST_TO_ADDR
// end ;
57114: LD_VAR 0 2
57118: RET
// export function ReverseDir ( unit ) ; begin
57119: LD_INT 0
57121: PPUSH
// if not unit then
57122: LD_VAR 0 1
57126: NOT
57127: IFFALSE 57131
// exit ;
57129: GO 57154
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57131: LD_ADDR_VAR 0 2
57135: PUSH
57136: LD_VAR 0 1
57140: PPUSH
57141: CALL_OW 254
57145: PUSH
57146: LD_INT 3
57148: PLUS
57149: PUSH
57150: LD_INT 6
57152: MOD
57153: ST_TO_ADDR
// end ;
57154: LD_VAR 0 2
57158: RET
// export function ReverseArray ( array ) ; var i ; begin
57159: LD_INT 0
57161: PPUSH
57162: PPUSH
// if not array then
57163: LD_VAR 0 1
57167: NOT
57168: IFFALSE 57172
// exit ;
57170: GO 57227
// result := [ ] ;
57172: LD_ADDR_VAR 0 2
57176: PUSH
57177: EMPTY
57178: ST_TO_ADDR
// for i := array downto 1 do
57179: LD_ADDR_VAR 0 3
57183: PUSH
57184: DOUBLE
57185: LD_VAR 0 1
57189: INC
57190: ST_TO_ADDR
57191: LD_INT 1
57193: PUSH
57194: FOR_DOWNTO
57195: IFFALSE 57225
// result := Join ( result , array [ i ] ) ;
57197: LD_ADDR_VAR 0 2
57201: PUSH
57202: LD_VAR 0 2
57206: PPUSH
57207: LD_VAR 0 1
57211: PUSH
57212: LD_VAR 0 3
57216: ARRAY
57217: PPUSH
57218: CALL 61852 0 2
57222: ST_TO_ADDR
57223: GO 57194
57225: POP
57226: POP
// end ;
57227: LD_VAR 0 2
57231: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57232: LD_INT 0
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
// if not unit or not hexes then
57240: LD_VAR 0 1
57244: NOT
57245: PUSH
57246: LD_VAR 0 2
57250: NOT
57251: OR
57252: IFFALSE 57256
// exit ;
57254: GO 57379
// dist := 9999 ;
57256: LD_ADDR_VAR 0 5
57260: PUSH
57261: LD_INT 9999
57263: ST_TO_ADDR
// for i = 1 to hexes do
57264: LD_ADDR_VAR 0 4
57268: PUSH
57269: DOUBLE
57270: LD_INT 1
57272: DEC
57273: ST_TO_ADDR
57274: LD_VAR 0 2
57278: PUSH
57279: FOR_TO
57280: IFFALSE 57367
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57282: LD_ADDR_VAR 0 6
57286: PUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: LD_VAR 0 2
57296: PUSH
57297: LD_VAR 0 4
57301: ARRAY
57302: PUSH
57303: LD_INT 1
57305: ARRAY
57306: PPUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_VAR 0 4
57316: ARRAY
57317: PUSH
57318: LD_INT 2
57320: ARRAY
57321: PPUSH
57322: CALL_OW 297
57326: ST_TO_ADDR
// if tdist < dist then
57327: LD_VAR 0 6
57331: PUSH
57332: LD_VAR 0 5
57336: LESS
57337: IFFALSE 57365
// begin hex := hexes [ i ] ;
57339: LD_ADDR_VAR 0 8
57343: PUSH
57344: LD_VAR 0 2
57348: PUSH
57349: LD_VAR 0 4
57353: ARRAY
57354: ST_TO_ADDR
// dist := tdist ;
57355: LD_ADDR_VAR 0 5
57359: PUSH
57360: LD_VAR 0 6
57364: ST_TO_ADDR
// end ; end ;
57365: GO 57279
57367: POP
57368: POP
// result := hex ;
57369: LD_ADDR_VAR 0 3
57373: PUSH
57374: LD_VAR 0 8
57378: ST_TO_ADDR
// end ;
57379: LD_VAR 0 3
57383: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57384: LD_INT 0
57386: PPUSH
57387: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57388: LD_VAR 0 1
57392: NOT
57393: PUSH
57394: LD_VAR 0 1
57398: PUSH
57399: LD_INT 21
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 23
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PPUSH
57423: CALL_OW 69
57427: IN
57428: NOT
57429: OR
57430: IFFALSE 57434
// exit ;
57432: GO 57481
// for i = 1 to 3 do
57434: LD_ADDR_VAR 0 3
57438: PUSH
57439: DOUBLE
57440: LD_INT 1
57442: DEC
57443: ST_TO_ADDR
57444: LD_INT 3
57446: PUSH
57447: FOR_TO
57448: IFFALSE 57479
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57450: LD_VAR 0 1
57454: PPUSH
57455: CALL_OW 250
57459: PPUSH
57460: LD_VAR 0 1
57464: PPUSH
57465: CALL_OW 251
57469: PPUSH
57470: LD_INT 1
57472: PPUSH
57473: CALL_OW 453
57477: GO 57447
57479: POP
57480: POP
// end ;
57481: LD_VAR 0 2
57485: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57486: LD_INT 0
57488: PPUSH
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
57493: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57494: LD_VAR 0 1
57498: NOT
57499: PUSH
57500: LD_VAR 0 2
57504: NOT
57505: OR
57506: PUSH
57507: LD_VAR 0 1
57511: PPUSH
57512: CALL_OW 314
57516: OR
57517: IFFALSE 57521
// exit ;
57519: GO 57962
// x := GetX ( enemy_unit ) ;
57521: LD_ADDR_VAR 0 7
57525: PUSH
57526: LD_VAR 0 2
57530: PPUSH
57531: CALL_OW 250
57535: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57536: LD_ADDR_VAR 0 8
57540: PUSH
57541: LD_VAR 0 2
57545: PPUSH
57546: CALL_OW 251
57550: ST_TO_ADDR
// if not x or not y then
57551: LD_VAR 0 7
57555: NOT
57556: PUSH
57557: LD_VAR 0 8
57561: NOT
57562: OR
57563: IFFALSE 57567
// exit ;
57565: GO 57962
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57567: LD_ADDR_VAR 0 6
57571: PUSH
57572: LD_VAR 0 7
57576: PPUSH
57577: LD_INT 0
57579: PPUSH
57580: LD_INT 4
57582: PPUSH
57583: CALL_OW 272
57587: PUSH
57588: LD_VAR 0 8
57592: PPUSH
57593: LD_INT 0
57595: PPUSH
57596: LD_INT 4
57598: PPUSH
57599: CALL_OW 273
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_VAR 0 7
57612: PPUSH
57613: LD_INT 1
57615: PPUSH
57616: LD_INT 4
57618: PPUSH
57619: CALL_OW 272
57623: PUSH
57624: LD_VAR 0 8
57628: PPUSH
57629: LD_INT 1
57631: PPUSH
57632: LD_INT 4
57634: PPUSH
57635: CALL_OW 273
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_VAR 0 7
57648: PPUSH
57649: LD_INT 2
57651: PPUSH
57652: LD_INT 4
57654: PPUSH
57655: CALL_OW 272
57659: PUSH
57660: LD_VAR 0 8
57664: PPUSH
57665: LD_INT 2
57667: PPUSH
57668: LD_INT 4
57670: PPUSH
57671: CALL_OW 273
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_VAR 0 7
57684: PPUSH
57685: LD_INT 3
57687: PPUSH
57688: LD_INT 4
57690: PPUSH
57691: CALL_OW 272
57695: PUSH
57696: LD_VAR 0 8
57700: PPUSH
57701: LD_INT 3
57703: PPUSH
57704: LD_INT 4
57706: PPUSH
57707: CALL_OW 273
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_VAR 0 7
57720: PPUSH
57721: LD_INT 4
57723: PPUSH
57724: LD_INT 4
57726: PPUSH
57727: CALL_OW 272
57731: PUSH
57732: LD_VAR 0 8
57736: PPUSH
57737: LD_INT 4
57739: PPUSH
57740: LD_INT 4
57742: PPUSH
57743: CALL_OW 273
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_VAR 0 7
57756: PPUSH
57757: LD_INT 5
57759: PPUSH
57760: LD_INT 4
57762: PPUSH
57763: CALL_OW 272
57767: PUSH
57768: LD_VAR 0 8
57772: PPUSH
57773: LD_INT 5
57775: PPUSH
57776: LD_INT 4
57778: PPUSH
57779: CALL_OW 273
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// for i = tmp downto 1 do
57796: LD_ADDR_VAR 0 4
57800: PUSH
57801: DOUBLE
57802: LD_VAR 0 6
57806: INC
57807: ST_TO_ADDR
57808: LD_INT 1
57810: PUSH
57811: FOR_DOWNTO
57812: IFFALSE 57913
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57814: LD_VAR 0 6
57818: PUSH
57819: LD_VAR 0 4
57823: ARRAY
57824: PUSH
57825: LD_INT 1
57827: ARRAY
57828: PPUSH
57829: LD_VAR 0 6
57833: PUSH
57834: LD_VAR 0 4
57838: ARRAY
57839: PUSH
57840: LD_INT 2
57842: ARRAY
57843: PPUSH
57844: CALL_OW 488
57848: NOT
57849: PUSH
57850: LD_VAR 0 6
57854: PUSH
57855: LD_VAR 0 4
57859: ARRAY
57860: PUSH
57861: LD_INT 1
57863: ARRAY
57864: PPUSH
57865: LD_VAR 0 6
57869: PUSH
57870: LD_VAR 0 4
57874: ARRAY
57875: PUSH
57876: LD_INT 2
57878: ARRAY
57879: PPUSH
57880: CALL_OW 428
57884: PUSH
57885: LD_INT 0
57887: NONEQUAL
57888: OR
57889: IFFALSE 57911
// tmp := Delete ( tmp , i ) ;
57891: LD_ADDR_VAR 0 6
57895: PUSH
57896: LD_VAR 0 6
57900: PPUSH
57901: LD_VAR 0 4
57905: PPUSH
57906: CALL_OW 3
57910: ST_TO_ADDR
57911: GO 57811
57913: POP
57914: POP
// j := GetClosestHex ( unit , tmp ) ;
57915: LD_ADDR_VAR 0 5
57919: PUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: LD_VAR 0 6
57929: PPUSH
57930: CALL 57232 0 2
57934: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57935: LD_VAR 0 1
57939: PPUSH
57940: LD_VAR 0 5
57944: PUSH
57945: LD_INT 1
57947: ARRAY
57948: PPUSH
57949: LD_VAR 0 5
57953: PUSH
57954: LD_INT 2
57956: ARRAY
57957: PPUSH
57958: CALL_OW 111
// end ;
57962: LD_VAR 0 3
57966: RET
// export function PrepareApemanSoldier ( ) ; begin
57967: LD_INT 0
57969: PPUSH
// uc_nation := 0 ;
57970: LD_ADDR_OWVAR 21
57974: PUSH
57975: LD_INT 0
57977: ST_TO_ADDR
// hc_sex := sex_male ;
57978: LD_ADDR_OWVAR 27
57982: PUSH
57983: LD_INT 1
57985: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57986: LD_ADDR_OWVAR 28
57990: PUSH
57991: LD_INT 15
57993: ST_TO_ADDR
// hc_gallery :=  ;
57994: LD_ADDR_OWVAR 33
57998: PUSH
57999: LD_STRING 
58001: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58002: LD_ADDR_OWVAR 31
58006: PUSH
58007: LD_INT 0
58009: PPUSH
58010: LD_INT 3
58012: PPUSH
58013: CALL_OW 12
58017: PUSH
58018: LD_INT 0
58020: PPUSH
58021: LD_INT 3
58023: PPUSH
58024: CALL_OW 12
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: ST_TO_ADDR
// end ;
58041: LD_VAR 0 1
58045: RET
// export function PrepareApemanEngineer ( ) ; begin
58046: LD_INT 0
58048: PPUSH
// uc_nation := 0 ;
58049: LD_ADDR_OWVAR 21
58053: PUSH
58054: LD_INT 0
58056: ST_TO_ADDR
// hc_sex := sex_male ;
58057: LD_ADDR_OWVAR 27
58061: PUSH
58062: LD_INT 1
58064: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58065: LD_ADDR_OWVAR 28
58069: PUSH
58070: LD_INT 16
58072: ST_TO_ADDR
// hc_gallery :=  ;
58073: LD_ADDR_OWVAR 33
58077: PUSH
58078: LD_STRING 
58080: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58081: LD_ADDR_OWVAR 31
58085: PUSH
58086: LD_INT 0
58088: PPUSH
58089: LD_INT 3
58091: PPUSH
58092: CALL_OW 12
58096: PUSH
58097: LD_INT 0
58099: PPUSH
58100: LD_INT 3
58102: PPUSH
58103: CALL_OW 12
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// end ;
58120: LD_VAR 0 1
58124: RET
// export function PrepareApeman ( agressivity ) ; begin
58125: LD_INT 0
58127: PPUSH
// uc_side := 0 ;
58128: LD_ADDR_OWVAR 20
58132: PUSH
58133: LD_INT 0
58135: ST_TO_ADDR
// uc_nation := 0 ;
58136: LD_ADDR_OWVAR 21
58140: PUSH
58141: LD_INT 0
58143: ST_TO_ADDR
// hc_sex := sex_male ;
58144: LD_ADDR_OWVAR 27
58148: PUSH
58149: LD_INT 1
58151: ST_TO_ADDR
// hc_class := class_apeman ;
58152: LD_ADDR_OWVAR 28
58156: PUSH
58157: LD_INT 12
58159: ST_TO_ADDR
// hc_gallery :=  ;
58160: LD_ADDR_OWVAR 33
58164: PUSH
58165: LD_STRING 
58167: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58168: LD_ADDR_OWVAR 35
58172: PUSH
58173: LD_VAR 0 1
58177: NEG
58178: PPUSH
58179: LD_VAR 0 1
58183: PPUSH
58184: CALL_OW 12
58188: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58189: LD_ADDR_OWVAR 31
58193: PUSH
58194: LD_INT 0
58196: PPUSH
58197: LD_INT 3
58199: PPUSH
58200: CALL_OW 12
58204: PUSH
58205: LD_INT 0
58207: PPUSH
58208: LD_INT 3
58210: PPUSH
58211: CALL_OW 12
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: ST_TO_ADDR
// end ;
58228: LD_VAR 0 2
58232: RET
// export function PrepareTiger ( agressivity ) ; begin
58233: LD_INT 0
58235: PPUSH
// uc_side := 0 ;
58236: LD_ADDR_OWVAR 20
58240: PUSH
58241: LD_INT 0
58243: ST_TO_ADDR
// uc_nation := 0 ;
58244: LD_ADDR_OWVAR 21
58248: PUSH
58249: LD_INT 0
58251: ST_TO_ADDR
// hc_class := class_tiger ;
58252: LD_ADDR_OWVAR 28
58256: PUSH
58257: LD_INT 14
58259: ST_TO_ADDR
// hc_gallery :=  ;
58260: LD_ADDR_OWVAR 33
58264: PUSH
58265: LD_STRING 
58267: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58268: LD_ADDR_OWVAR 35
58272: PUSH
58273: LD_VAR 0 1
58277: NEG
58278: PPUSH
58279: LD_VAR 0 1
58283: PPUSH
58284: CALL_OW 12
58288: ST_TO_ADDR
// end ;
58289: LD_VAR 0 2
58293: RET
// export function PrepareEnchidna ( ) ; begin
58294: LD_INT 0
58296: PPUSH
// uc_side := 0 ;
58297: LD_ADDR_OWVAR 20
58301: PUSH
58302: LD_INT 0
58304: ST_TO_ADDR
// uc_nation := 0 ;
58305: LD_ADDR_OWVAR 21
58309: PUSH
58310: LD_INT 0
58312: ST_TO_ADDR
// hc_class := class_baggie ;
58313: LD_ADDR_OWVAR 28
58317: PUSH
58318: LD_INT 13
58320: ST_TO_ADDR
// hc_gallery :=  ;
58321: LD_ADDR_OWVAR 33
58325: PUSH
58326: LD_STRING 
58328: ST_TO_ADDR
// end ;
58329: LD_VAR 0 1
58333: RET
// export function PrepareFrog ( ) ; begin
58334: LD_INT 0
58336: PPUSH
// uc_side := 0 ;
58337: LD_ADDR_OWVAR 20
58341: PUSH
58342: LD_INT 0
58344: ST_TO_ADDR
// uc_nation := 0 ;
58345: LD_ADDR_OWVAR 21
58349: PUSH
58350: LD_INT 0
58352: ST_TO_ADDR
// hc_class := class_frog ;
58353: LD_ADDR_OWVAR 28
58357: PUSH
58358: LD_INT 19
58360: ST_TO_ADDR
// hc_gallery :=  ;
58361: LD_ADDR_OWVAR 33
58365: PUSH
58366: LD_STRING 
58368: ST_TO_ADDR
// end ;
58369: LD_VAR 0 1
58373: RET
// export function PrepareFish ( ) ; begin
58374: LD_INT 0
58376: PPUSH
// uc_side := 0 ;
58377: LD_ADDR_OWVAR 20
58381: PUSH
58382: LD_INT 0
58384: ST_TO_ADDR
// uc_nation := 0 ;
58385: LD_ADDR_OWVAR 21
58389: PUSH
58390: LD_INT 0
58392: ST_TO_ADDR
// hc_class := class_fish ;
58393: LD_ADDR_OWVAR 28
58397: PUSH
58398: LD_INT 20
58400: ST_TO_ADDR
// hc_gallery :=  ;
58401: LD_ADDR_OWVAR 33
58405: PUSH
58406: LD_STRING 
58408: ST_TO_ADDR
// end ;
58409: LD_VAR 0 1
58413: RET
// export function PrepareBird ( ) ; begin
58414: LD_INT 0
58416: PPUSH
// uc_side := 0 ;
58417: LD_ADDR_OWVAR 20
58421: PUSH
58422: LD_INT 0
58424: ST_TO_ADDR
// uc_nation := 0 ;
58425: LD_ADDR_OWVAR 21
58429: PUSH
58430: LD_INT 0
58432: ST_TO_ADDR
// hc_class := class_phororhacos ;
58433: LD_ADDR_OWVAR 28
58437: PUSH
58438: LD_INT 18
58440: ST_TO_ADDR
// hc_gallery :=  ;
58441: LD_ADDR_OWVAR 33
58445: PUSH
58446: LD_STRING 
58448: ST_TO_ADDR
// end ;
58449: LD_VAR 0 1
58453: RET
// export function PrepareHorse ( ) ; begin
58454: LD_INT 0
58456: PPUSH
// uc_side := 0 ;
58457: LD_ADDR_OWVAR 20
58461: PUSH
58462: LD_INT 0
58464: ST_TO_ADDR
// uc_nation := 0 ;
58465: LD_ADDR_OWVAR 21
58469: PUSH
58470: LD_INT 0
58472: ST_TO_ADDR
// hc_class := class_horse ;
58473: LD_ADDR_OWVAR 28
58477: PUSH
58478: LD_INT 21
58480: ST_TO_ADDR
// hc_gallery :=  ;
58481: LD_ADDR_OWVAR 33
58485: PUSH
58486: LD_STRING 
58488: ST_TO_ADDR
// end ;
58489: LD_VAR 0 1
58493: RET
// export function PrepareMastodont ( ) ; begin
58494: LD_INT 0
58496: PPUSH
// uc_side := 0 ;
58497: LD_ADDR_OWVAR 20
58501: PUSH
58502: LD_INT 0
58504: ST_TO_ADDR
// uc_nation := 0 ;
58505: LD_ADDR_OWVAR 21
58509: PUSH
58510: LD_INT 0
58512: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58513: LD_ADDR_OWVAR 37
58517: PUSH
58518: LD_INT 31
58520: ST_TO_ADDR
// vc_control := control_rider ;
58521: LD_ADDR_OWVAR 38
58525: PUSH
58526: LD_INT 4
58528: ST_TO_ADDR
// end ;
58529: LD_VAR 0 1
58533: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58534: LD_INT 0
58536: PPUSH
58537: PPUSH
58538: PPUSH
// uc_side = 0 ;
58539: LD_ADDR_OWVAR 20
58543: PUSH
58544: LD_INT 0
58546: ST_TO_ADDR
// uc_nation = 0 ;
58547: LD_ADDR_OWVAR 21
58551: PUSH
58552: LD_INT 0
58554: ST_TO_ADDR
// InitHc_All ( ) ;
58555: CALL_OW 584
// InitVc ;
58559: CALL_OW 20
// if mastodonts then
58563: LD_VAR 0 6
58567: IFFALSE 58634
// for i = 1 to mastodonts do
58569: LD_ADDR_VAR 0 11
58573: PUSH
58574: DOUBLE
58575: LD_INT 1
58577: DEC
58578: ST_TO_ADDR
58579: LD_VAR 0 6
58583: PUSH
58584: FOR_TO
58585: IFFALSE 58632
// begin vc_chassis := 31 ;
58587: LD_ADDR_OWVAR 37
58591: PUSH
58592: LD_INT 31
58594: ST_TO_ADDR
// vc_control := control_rider ;
58595: LD_ADDR_OWVAR 38
58599: PUSH
58600: LD_INT 4
58602: ST_TO_ADDR
// animal := CreateVehicle ;
58603: LD_ADDR_VAR 0 12
58607: PUSH
58608: CALL_OW 45
58612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58613: LD_VAR 0 12
58617: PPUSH
58618: LD_VAR 0 8
58622: PPUSH
58623: LD_INT 0
58625: PPUSH
58626: CALL 60769 0 3
// end ;
58630: GO 58584
58632: POP
58633: POP
// if horses then
58634: LD_VAR 0 5
58638: IFFALSE 58705
// for i = 1 to horses do
58640: LD_ADDR_VAR 0 11
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_VAR 0 5
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58703
// begin hc_class := 21 ;
58658: LD_ADDR_OWVAR 28
58662: PUSH
58663: LD_INT 21
58665: ST_TO_ADDR
// hc_gallery :=  ;
58666: LD_ADDR_OWVAR 33
58670: PUSH
58671: LD_STRING 
58673: ST_TO_ADDR
// animal := CreateHuman ;
58674: LD_ADDR_VAR 0 12
58678: PUSH
58679: CALL_OW 44
58683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58684: LD_VAR 0 12
58688: PPUSH
58689: LD_VAR 0 8
58693: PPUSH
58694: LD_INT 0
58696: PPUSH
58697: CALL 60769 0 3
// end ;
58701: GO 58655
58703: POP
58704: POP
// if birds then
58705: LD_VAR 0 1
58709: IFFALSE 58776
// for i = 1 to birds do
58711: LD_ADDR_VAR 0 11
58715: PUSH
58716: DOUBLE
58717: LD_INT 1
58719: DEC
58720: ST_TO_ADDR
58721: LD_VAR 0 1
58725: PUSH
58726: FOR_TO
58727: IFFALSE 58774
// begin hc_class = 18 ;
58729: LD_ADDR_OWVAR 28
58733: PUSH
58734: LD_INT 18
58736: ST_TO_ADDR
// hc_gallery =  ;
58737: LD_ADDR_OWVAR 33
58741: PUSH
58742: LD_STRING 
58744: ST_TO_ADDR
// animal := CreateHuman ;
58745: LD_ADDR_VAR 0 12
58749: PUSH
58750: CALL_OW 44
58754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58755: LD_VAR 0 12
58759: PPUSH
58760: LD_VAR 0 8
58764: PPUSH
58765: LD_INT 0
58767: PPUSH
58768: CALL 60769 0 3
// end ;
58772: GO 58726
58774: POP
58775: POP
// if tigers then
58776: LD_VAR 0 2
58780: IFFALSE 58864
// for i = 1 to tigers do
58782: LD_ADDR_VAR 0 11
58786: PUSH
58787: DOUBLE
58788: LD_INT 1
58790: DEC
58791: ST_TO_ADDR
58792: LD_VAR 0 2
58796: PUSH
58797: FOR_TO
58798: IFFALSE 58862
// begin hc_class = class_tiger ;
58800: LD_ADDR_OWVAR 28
58804: PUSH
58805: LD_INT 14
58807: ST_TO_ADDR
// hc_gallery =  ;
58808: LD_ADDR_OWVAR 33
58812: PUSH
58813: LD_STRING 
58815: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58816: LD_ADDR_OWVAR 35
58820: PUSH
58821: LD_INT 7
58823: NEG
58824: PPUSH
58825: LD_INT 7
58827: PPUSH
58828: CALL_OW 12
58832: ST_TO_ADDR
// animal := CreateHuman ;
58833: LD_ADDR_VAR 0 12
58837: PUSH
58838: CALL_OW 44
58842: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58843: LD_VAR 0 12
58847: PPUSH
58848: LD_VAR 0 8
58852: PPUSH
58853: LD_INT 0
58855: PPUSH
58856: CALL 60769 0 3
// end ;
58860: GO 58797
58862: POP
58863: POP
// if apemans then
58864: LD_VAR 0 3
58868: IFFALSE 58991
// for i = 1 to apemans do
58870: LD_ADDR_VAR 0 11
58874: PUSH
58875: DOUBLE
58876: LD_INT 1
58878: DEC
58879: ST_TO_ADDR
58880: LD_VAR 0 3
58884: PUSH
58885: FOR_TO
58886: IFFALSE 58989
// begin hc_class = class_apeman ;
58888: LD_ADDR_OWVAR 28
58892: PUSH
58893: LD_INT 12
58895: ST_TO_ADDR
// hc_gallery =  ;
58896: LD_ADDR_OWVAR 33
58900: PUSH
58901: LD_STRING 
58903: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58904: LD_ADDR_OWVAR 35
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PPUSH
58913: LD_INT 2
58915: PPUSH
58916: CALL_OW 12
58920: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58921: LD_ADDR_OWVAR 31
58925: PUSH
58926: LD_INT 1
58928: PPUSH
58929: LD_INT 3
58931: PPUSH
58932: CALL_OW 12
58936: PUSH
58937: LD_INT 1
58939: PPUSH
58940: LD_INT 3
58942: PPUSH
58943: CALL_OW 12
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// animal := CreateHuman ;
58960: LD_ADDR_VAR 0 12
58964: PUSH
58965: CALL_OW 44
58969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58970: LD_VAR 0 12
58974: PPUSH
58975: LD_VAR 0 8
58979: PPUSH
58980: LD_INT 0
58982: PPUSH
58983: CALL 60769 0 3
// end ;
58987: GO 58885
58989: POP
58990: POP
// if enchidnas then
58991: LD_VAR 0 4
58995: IFFALSE 59062
// for i = 1 to enchidnas do
58997: LD_ADDR_VAR 0 11
59001: PUSH
59002: DOUBLE
59003: LD_INT 1
59005: DEC
59006: ST_TO_ADDR
59007: LD_VAR 0 4
59011: PUSH
59012: FOR_TO
59013: IFFALSE 59060
// begin hc_class = 13 ;
59015: LD_ADDR_OWVAR 28
59019: PUSH
59020: LD_INT 13
59022: ST_TO_ADDR
// hc_gallery =  ;
59023: LD_ADDR_OWVAR 33
59027: PUSH
59028: LD_STRING 
59030: ST_TO_ADDR
// animal := CreateHuman ;
59031: LD_ADDR_VAR 0 12
59035: PUSH
59036: CALL_OW 44
59040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59041: LD_VAR 0 12
59045: PPUSH
59046: LD_VAR 0 8
59050: PPUSH
59051: LD_INT 0
59053: PPUSH
59054: CALL 60769 0 3
// end ;
59058: GO 59012
59060: POP
59061: POP
// if fishes then
59062: LD_VAR 0 7
59066: IFFALSE 59133
// for i = 1 to fishes do
59068: LD_ADDR_VAR 0 11
59072: PUSH
59073: DOUBLE
59074: LD_INT 1
59076: DEC
59077: ST_TO_ADDR
59078: LD_VAR 0 7
59082: PUSH
59083: FOR_TO
59084: IFFALSE 59131
// begin hc_class = 20 ;
59086: LD_ADDR_OWVAR 28
59090: PUSH
59091: LD_INT 20
59093: ST_TO_ADDR
// hc_gallery =  ;
59094: LD_ADDR_OWVAR 33
59098: PUSH
59099: LD_STRING 
59101: ST_TO_ADDR
// animal := CreateHuman ;
59102: LD_ADDR_VAR 0 12
59106: PUSH
59107: CALL_OW 44
59111: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59112: LD_VAR 0 12
59116: PPUSH
59117: LD_VAR 0 9
59121: PPUSH
59122: LD_INT 0
59124: PPUSH
59125: CALL 60769 0 3
// end ;
59129: GO 59083
59131: POP
59132: POP
// end ;
59133: LD_VAR 0 10
59137: RET
// export function WantHeal ( sci , unit ) ; begin
59138: LD_INT 0
59140: PPUSH
// if GetTaskList ( sci ) > 0 then
59141: LD_VAR 0 1
59145: PPUSH
59146: CALL_OW 437
59150: PUSH
59151: LD_INT 0
59153: GREATER
59154: IFFALSE 59224
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59156: LD_VAR 0 1
59160: PPUSH
59161: CALL_OW 437
59165: PUSH
59166: LD_INT 1
59168: ARRAY
59169: PUSH
59170: LD_INT 1
59172: ARRAY
59173: PUSH
59174: LD_STRING l
59176: EQUAL
59177: PUSH
59178: LD_VAR 0 1
59182: PPUSH
59183: CALL_OW 437
59187: PUSH
59188: LD_INT 1
59190: ARRAY
59191: PUSH
59192: LD_INT 4
59194: ARRAY
59195: PUSH
59196: LD_VAR 0 2
59200: EQUAL
59201: AND
59202: IFFALSE 59214
// result := true else
59204: LD_ADDR_VAR 0 3
59208: PUSH
59209: LD_INT 1
59211: ST_TO_ADDR
59212: GO 59222
// result := false ;
59214: LD_ADDR_VAR 0 3
59218: PUSH
59219: LD_INT 0
59221: ST_TO_ADDR
// end else
59222: GO 59232
// result := false ;
59224: LD_ADDR_VAR 0 3
59228: PUSH
59229: LD_INT 0
59231: ST_TO_ADDR
// end ;
59232: LD_VAR 0 3
59236: RET
// export function HealTarget ( sci ) ; begin
59237: LD_INT 0
59239: PPUSH
// if not sci then
59240: LD_VAR 0 1
59244: NOT
59245: IFFALSE 59249
// exit ;
59247: GO 59314
// result := 0 ;
59249: LD_ADDR_VAR 0 2
59253: PUSH
59254: LD_INT 0
59256: ST_TO_ADDR
// if GetTaskList ( sci ) then
59257: LD_VAR 0 1
59261: PPUSH
59262: CALL_OW 437
59266: IFFALSE 59314
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59268: LD_VAR 0 1
59272: PPUSH
59273: CALL_OW 437
59277: PUSH
59278: LD_INT 1
59280: ARRAY
59281: PUSH
59282: LD_INT 1
59284: ARRAY
59285: PUSH
59286: LD_STRING l
59288: EQUAL
59289: IFFALSE 59314
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59291: LD_ADDR_VAR 0 2
59295: PUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 437
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PUSH
59310: LD_INT 4
59312: ARRAY
59313: ST_TO_ADDR
// end ;
59314: LD_VAR 0 2
59318: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59319: LD_INT 0
59321: PPUSH
59322: PPUSH
59323: PPUSH
59324: PPUSH
// if not base_units then
59325: LD_VAR 0 1
59329: NOT
59330: IFFALSE 59334
// exit ;
59332: GO 59421
// result := false ;
59334: LD_ADDR_VAR 0 2
59338: PUSH
59339: LD_INT 0
59341: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59342: LD_ADDR_VAR 0 5
59346: PUSH
59347: LD_VAR 0 1
59351: PPUSH
59352: LD_INT 21
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PPUSH
59362: CALL_OW 72
59366: ST_TO_ADDR
// if not tmp then
59367: LD_VAR 0 5
59371: NOT
59372: IFFALSE 59376
// exit ;
59374: GO 59421
// for i in tmp do
59376: LD_ADDR_VAR 0 3
59380: PUSH
59381: LD_VAR 0 5
59385: PUSH
59386: FOR_IN
59387: IFFALSE 59419
// begin result := EnemyInRange ( i , 22 ) ;
59389: LD_ADDR_VAR 0 2
59393: PUSH
59394: LD_VAR 0 3
59398: PPUSH
59399: LD_INT 22
59401: PPUSH
59402: CALL 57034 0 2
59406: ST_TO_ADDR
// if result then
59407: LD_VAR 0 2
59411: IFFALSE 59417
// exit ;
59413: POP
59414: POP
59415: GO 59421
// end ;
59417: GO 59386
59419: POP
59420: POP
// end ;
59421: LD_VAR 0 2
59425: RET
// export function FilterByTag ( units , tag ) ; begin
59426: LD_INT 0
59428: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59429: LD_ADDR_VAR 0 3
59433: PUSH
59434: LD_VAR 0 1
59438: PPUSH
59439: LD_INT 120
59441: PUSH
59442: LD_VAR 0 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PPUSH
59451: CALL_OW 72
59455: ST_TO_ADDR
// end ;
59456: LD_VAR 0 3
59460: RET
// export function IsDriver ( un ) ; begin
59461: LD_INT 0
59463: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59464: LD_ADDR_VAR 0 2
59468: PUSH
59469: LD_VAR 0 1
59473: PUSH
59474: LD_INT 55
59476: PUSH
59477: EMPTY
59478: LIST
59479: PPUSH
59480: CALL_OW 69
59484: IN
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 2
59490: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59491: LD_INT 0
59493: PPUSH
59494: PPUSH
// list := [ ] ;
59495: LD_ADDR_VAR 0 5
59499: PUSH
59500: EMPTY
59501: ST_TO_ADDR
// case d of 0 :
59502: LD_VAR 0 3
59506: PUSH
59507: LD_INT 0
59509: DOUBLE
59510: EQUAL
59511: IFTRUE 59515
59513: GO 59648
59515: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59516: LD_ADDR_VAR 0 5
59520: PUSH
59521: LD_VAR 0 1
59525: PUSH
59526: LD_INT 4
59528: MINUS
59529: PUSH
59530: LD_VAR 0 2
59534: PUSH
59535: LD_INT 4
59537: MINUS
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: PUSH
59547: LD_VAR 0 1
59551: PUSH
59552: LD_INT 3
59554: MINUS
59555: PUSH
59556: LD_VAR 0 2
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: PUSH
59569: LD_VAR 0 1
59573: PUSH
59574: LD_INT 4
59576: PLUS
59577: PUSH
59578: LD_VAR 0 2
59582: PUSH
59583: LD_INT 4
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: PUSH
59591: LD_VAR 0 1
59595: PUSH
59596: LD_INT 3
59598: PLUS
59599: PUSH
59600: LD_VAR 0 2
59604: PUSH
59605: LD_INT 3
59607: PLUS
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: PUSH
59617: LD_VAR 0 1
59621: PUSH
59622: LD_VAR 0 2
59626: PUSH
59627: LD_INT 4
59629: PLUS
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: ST_TO_ADDR
// end ; 1 :
59646: GO 60346
59648: LD_INT 1
59650: DOUBLE
59651: EQUAL
59652: IFTRUE 59656
59654: GO 59789
59656: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59657: LD_ADDR_VAR 0 5
59661: PUSH
59662: LD_VAR 0 1
59666: PUSH
59667: LD_VAR 0 2
59671: PUSH
59672: LD_INT 4
59674: MINUS
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: PUSH
59684: LD_VAR 0 1
59688: PUSH
59689: LD_INT 3
59691: MINUS
59692: PUSH
59693: LD_VAR 0 2
59697: PUSH
59698: LD_INT 3
59700: MINUS
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: PUSH
59710: LD_VAR 0 1
59714: PUSH
59715: LD_INT 4
59717: MINUS
59718: PUSH
59719: LD_VAR 0 2
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: PUSH
59732: LD_VAR 0 1
59736: PUSH
59737: LD_VAR 0 2
59741: PUSH
59742: LD_INT 3
59744: PLUS
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: LIST
59753: PUSH
59754: LD_VAR 0 1
59758: PUSH
59759: LD_INT 4
59761: PLUS
59762: PUSH
59763: LD_VAR 0 2
59767: PUSH
59768: LD_INT 4
59770: PLUS
59771: PUSH
59772: LD_INT 5
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: ST_TO_ADDR
// end ; 2 :
59787: GO 60346
59789: LD_INT 2
59791: DOUBLE
59792: EQUAL
59793: IFTRUE 59797
59795: GO 59926
59797: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59798: LD_ADDR_VAR 0 5
59802: PUSH
59803: LD_VAR 0 1
59807: PUSH
59808: LD_VAR 0 2
59812: PUSH
59813: LD_INT 3
59815: MINUS
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: PUSH
59825: LD_VAR 0 1
59829: PUSH
59830: LD_INT 4
59832: PLUS
59833: PUSH
59834: LD_VAR 0 2
59838: PUSH
59839: LD_INT 4
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: PUSH
59847: LD_VAR 0 1
59851: PUSH
59852: LD_VAR 0 2
59856: PUSH
59857: LD_INT 4
59859: PLUS
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: PUSH
59869: LD_VAR 0 1
59873: PUSH
59874: LD_INT 3
59876: MINUS
59877: PUSH
59878: LD_VAR 0 2
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: PUSH
59891: LD_VAR 0 1
59895: PUSH
59896: LD_INT 4
59898: MINUS
59899: PUSH
59900: LD_VAR 0 2
59904: PUSH
59905: LD_INT 4
59907: MINUS
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// end ; 3 :
59924: GO 60346
59926: LD_INT 3
59928: DOUBLE
59929: EQUAL
59930: IFTRUE 59934
59932: GO 60067
59934: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59935: LD_ADDR_VAR 0 5
59939: PUSH
59940: LD_VAR 0 1
59944: PUSH
59945: LD_INT 3
59947: PLUS
59948: PUSH
59949: LD_VAR 0 2
59953: PUSH
59954: LD_INT 4
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: PUSH
59962: LD_VAR 0 1
59966: PUSH
59967: LD_INT 4
59969: PLUS
59970: PUSH
59971: LD_VAR 0 2
59975: PUSH
59976: LD_INT 4
59978: PLUS
59979: PUSH
59980: LD_INT 5
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: LIST
59987: PUSH
59988: LD_VAR 0 1
59992: PUSH
59993: LD_INT 4
59995: MINUS
59996: PUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: PUSH
60010: LD_VAR 0 1
60014: PUSH
60015: LD_VAR 0 2
60019: PUSH
60020: LD_INT 4
60022: MINUS
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: PUSH
60032: LD_VAR 0 1
60036: PUSH
60037: LD_INT 3
60039: MINUS
60040: PUSH
60041: LD_VAR 0 2
60045: PUSH
60046: LD_INT 3
60048: MINUS
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: ST_TO_ADDR
// end ; 4 :
60065: GO 60346
60067: LD_INT 4
60069: DOUBLE
60070: EQUAL
60071: IFTRUE 60075
60073: GO 60208
60075: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60076: LD_ADDR_VAR 0 5
60080: PUSH
60081: LD_VAR 0 1
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_INT 4
60093: PLUS
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: PUSH
60103: LD_VAR 0 1
60107: PUSH
60108: LD_INT 3
60110: PLUS
60111: PUSH
60112: LD_VAR 0 2
60116: PUSH
60117: LD_INT 3
60119: PLUS
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: LIST
60128: PUSH
60129: LD_VAR 0 1
60133: PUSH
60134: LD_INT 4
60136: PLUS
60137: PUSH
60138: LD_VAR 0 2
60142: PUSH
60143: LD_INT 4
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: PUSH
60151: LD_VAR 0 1
60155: PUSH
60156: LD_VAR 0 2
60160: PUSH
60161: LD_INT 3
60163: MINUS
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: PUSH
60173: LD_VAR 0 1
60177: PUSH
60178: LD_INT 4
60180: MINUS
60181: PUSH
60182: LD_VAR 0 2
60186: PUSH
60187: LD_INT 4
60189: MINUS
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: ST_TO_ADDR
// end ; 5 :
60206: GO 60346
60208: LD_INT 5
60210: DOUBLE
60211: EQUAL
60212: IFTRUE 60216
60214: GO 60345
60216: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60217: LD_ADDR_VAR 0 5
60221: PUSH
60222: LD_VAR 0 1
60226: PUSH
60227: LD_INT 4
60229: MINUS
60230: PUSH
60231: LD_VAR 0 2
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: PUSH
60244: LD_VAR 0 1
60248: PUSH
60249: LD_VAR 0 2
60253: PUSH
60254: LD_INT 4
60256: MINUS
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: PUSH
60266: LD_VAR 0 1
60270: PUSH
60271: LD_INT 4
60273: PLUS
60274: PUSH
60275: LD_VAR 0 2
60279: PUSH
60280: LD_INT 4
60282: PLUS
60283: PUSH
60284: LD_INT 5
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: LIST
60291: PUSH
60292: LD_VAR 0 1
60296: PUSH
60297: LD_INT 3
60299: PLUS
60300: PUSH
60301: LD_VAR 0 2
60305: PUSH
60306: LD_INT 4
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: LIST
60313: PUSH
60314: LD_VAR 0 1
60318: PUSH
60319: LD_VAR 0 2
60323: PUSH
60324: LD_INT 3
60326: PLUS
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// end ; end ;
60343: GO 60346
60345: POP
// result := list ;
60346: LD_ADDR_VAR 0 4
60350: PUSH
60351: LD_VAR 0 5
60355: ST_TO_ADDR
// end ;
60356: LD_VAR 0 4
60360: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60361: LD_INT 0
60363: PPUSH
60364: PPUSH
60365: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60366: LD_VAR 0 1
60370: NOT
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 2
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 4
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: IN
60395: NOT
60396: OR
60397: IFFALSE 60401
// exit ;
60399: GO 60493
// tmp := [ ] ;
60401: LD_ADDR_VAR 0 5
60405: PUSH
60406: EMPTY
60407: ST_TO_ADDR
// for i in units do
60408: LD_ADDR_VAR 0 4
60412: PUSH
60413: LD_VAR 0 1
60417: PUSH
60418: FOR_IN
60419: IFFALSE 60462
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60421: LD_ADDR_VAR 0 5
60425: PUSH
60426: LD_VAR 0 5
60430: PPUSH
60431: LD_VAR 0 5
60435: PUSH
60436: LD_INT 1
60438: PLUS
60439: PPUSH
60440: LD_VAR 0 4
60444: PPUSH
60445: LD_VAR 0 2
60449: PPUSH
60450: CALL_OW 259
60454: PPUSH
60455: CALL_OW 2
60459: ST_TO_ADDR
60460: GO 60418
60462: POP
60463: POP
// if not tmp then
60464: LD_VAR 0 5
60468: NOT
60469: IFFALSE 60473
// exit ;
60471: GO 60493
// result := SortListByListDesc ( units , tmp ) ;
60473: LD_ADDR_VAR 0 3
60477: PUSH
60478: LD_VAR 0 1
60482: PPUSH
60483: LD_VAR 0 5
60487: PPUSH
60488: CALL_OW 77
60492: ST_TO_ADDR
// end ;
60493: LD_VAR 0 3
60497: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60498: LD_INT 0
60500: PPUSH
60501: PPUSH
60502: PPUSH
// result := false ;
60503: LD_ADDR_VAR 0 3
60507: PUSH
60508: LD_INT 0
60510: ST_TO_ADDR
// x := GetX ( building ) ;
60511: LD_ADDR_VAR 0 4
60515: PUSH
60516: LD_VAR 0 2
60520: PPUSH
60521: CALL_OW 250
60525: ST_TO_ADDR
// y := GetY ( building ) ;
60526: LD_ADDR_VAR 0 5
60530: PUSH
60531: LD_VAR 0 2
60535: PPUSH
60536: CALL_OW 251
60540: ST_TO_ADDR
// if not building or not x or not y then
60541: LD_VAR 0 2
60545: NOT
60546: PUSH
60547: LD_VAR 0 4
60551: NOT
60552: OR
60553: PUSH
60554: LD_VAR 0 5
60558: NOT
60559: OR
60560: IFFALSE 60564
// exit ;
60562: GO 60656
// if GetTaskList ( unit ) then
60564: LD_VAR 0 1
60568: PPUSH
60569: CALL_OW 437
60573: IFFALSE 60656
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60575: LD_STRING e
60577: PUSH
60578: LD_VAR 0 1
60582: PPUSH
60583: CALL_OW 437
60587: PUSH
60588: LD_INT 1
60590: ARRAY
60591: PUSH
60592: LD_INT 1
60594: ARRAY
60595: EQUAL
60596: PUSH
60597: LD_VAR 0 4
60601: PUSH
60602: LD_VAR 0 1
60606: PPUSH
60607: CALL_OW 437
60611: PUSH
60612: LD_INT 1
60614: ARRAY
60615: PUSH
60616: LD_INT 2
60618: ARRAY
60619: EQUAL
60620: AND
60621: PUSH
60622: LD_VAR 0 5
60626: PUSH
60627: LD_VAR 0 1
60631: PPUSH
60632: CALL_OW 437
60636: PUSH
60637: LD_INT 1
60639: ARRAY
60640: PUSH
60641: LD_INT 3
60643: ARRAY
60644: EQUAL
60645: AND
60646: IFFALSE 60656
// result := true end ;
60648: LD_ADDR_VAR 0 3
60652: PUSH
60653: LD_INT 1
60655: ST_TO_ADDR
// end ;
60656: LD_VAR 0 3
60660: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60661: LD_INT 0
60663: PPUSH
// result := false ;
60664: LD_ADDR_VAR 0 4
60668: PUSH
60669: LD_INT 0
60671: ST_TO_ADDR
// if GetTaskList ( unit ) then
60672: LD_VAR 0 1
60676: PPUSH
60677: CALL_OW 437
60681: IFFALSE 60764
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60683: LD_STRING M
60685: PUSH
60686: LD_VAR 0 1
60690: PPUSH
60691: CALL_OW 437
60695: PUSH
60696: LD_INT 1
60698: ARRAY
60699: PUSH
60700: LD_INT 1
60702: ARRAY
60703: EQUAL
60704: PUSH
60705: LD_VAR 0 2
60709: PUSH
60710: LD_VAR 0 1
60714: PPUSH
60715: CALL_OW 437
60719: PUSH
60720: LD_INT 1
60722: ARRAY
60723: PUSH
60724: LD_INT 2
60726: ARRAY
60727: EQUAL
60728: AND
60729: PUSH
60730: LD_VAR 0 3
60734: PUSH
60735: LD_VAR 0 1
60739: PPUSH
60740: CALL_OW 437
60744: PUSH
60745: LD_INT 1
60747: ARRAY
60748: PUSH
60749: LD_INT 3
60751: ARRAY
60752: EQUAL
60753: AND
60754: IFFALSE 60764
// result := true ;
60756: LD_ADDR_VAR 0 4
60760: PUSH
60761: LD_INT 1
60763: ST_TO_ADDR
// end ; end ;
60764: LD_VAR 0 4
60768: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60769: LD_INT 0
60771: PPUSH
60772: PPUSH
60773: PPUSH
60774: PPUSH
// if not unit or not area then
60775: LD_VAR 0 1
60779: NOT
60780: PUSH
60781: LD_VAR 0 2
60785: NOT
60786: OR
60787: IFFALSE 60791
// exit ;
60789: GO 60955
// tmp := AreaToList ( area , i ) ;
60791: LD_ADDR_VAR 0 6
60795: PUSH
60796: LD_VAR 0 2
60800: PPUSH
60801: LD_VAR 0 5
60805: PPUSH
60806: CALL_OW 517
60810: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60811: LD_ADDR_VAR 0 5
60815: PUSH
60816: DOUBLE
60817: LD_INT 1
60819: DEC
60820: ST_TO_ADDR
60821: LD_VAR 0 6
60825: PUSH
60826: LD_INT 1
60828: ARRAY
60829: PUSH
60830: FOR_TO
60831: IFFALSE 60953
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60833: LD_ADDR_VAR 0 7
60837: PUSH
60838: LD_VAR 0 6
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PUSH
60847: LD_VAR 0 5
60851: ARRAY
60852: PUSH
60853: LD_VAR 0 6
60857: PUSH
60858: LD_INT 2
60860: ARRAY
60861: PUSH
60862: LD_VAR 0 5
60866: ARRAY
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60872: LD_VAR 0 7
60876: PUSH
60877: LD_INT 1
60879: ARRAY
60880: PPUSH
60881: LD_VAR 0 7
60885: PUSH
60886: LD_INT 2
60888: ARRAY
60889: PPUSH
60890: CALL_OW 428
60894: PUSH
60895: LD_INT 0
60897: EQUAL
60898: IFFALSE 60951
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60900: LD_VAR 0 1
60904: PPUSH
60905: LD_VAR 0 7
60909: PUSH
60910: LD_INT 1
60912: ARRAY
60913: PPUSH
60914: LD_VAR 0 7
60918: PUSH
60919: LD_INT 2
60921: ARRAY
60922: PPUSH
60923: LD_VAR 0 3
60927: PPUSH
60928: CALL_OW 48
// result := IsPlaced ( unit ) ;
60932: LD_ADDR_VAR 0 4
60936: PUSH
60937: LD_VAR 0 1
60941: PPUSH
60942: CALL_OW 305
60946: ST_TO_ADDR
// exit ;
60947: POP
60948: POP
60949: GO 60955
// end ; end ;
60951: GO 60830
60953: POP
60954: POP
// end ;
60955: LD_VAR 0 4
60959: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
60964: PPUSH
// if not side or side > 8 then
60965: LD_VAR 0 1
60969: NOT
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_INT 8
60978: GREATER
60979: OR
60980: IFFALSE 60984
// exit ;
60982: GO 61171
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60984: LD_ADDR_VAR 0 4
60988: PUSH
60989: LD_INT 22
60991: PUSH
60992: LD_VAR 0 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 21
61003: PUSH
61004: LD_INT 3
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PPUSH
61015: CALL_OW 69
61019: ST_TO_ADDR
// if not tmp then
61020: LD_VAR 0 4
61024: NOT
61025: IFFALSE 61029
// exit ;
61027: GO 61171
// enable_addtolog := true ;
61029: LD_ADDR_OWVAR 81
61033: PUSH
61034: LD_INT 1
61036: ST_TO_ADDR
// AddToLog ( [ ) ;
61037: LD_STRING [
61039: PPUSH
61040: CALL_OW 561
// for i in tmp do
61044: LD_ADDR_VAR 0 3
61048: PUSH
61049: LD_VAR 0 4
61053: PUSH
61054: FOR_IN
61055: IFFALSE 61162
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61057: LD_STRING [
61059: PUSH
61060: LD_VAR 0 3
61064: PPUSH
61065: CALL_OW 266
61069: STR
61070: PUSH
61071: LD_STRING , 
61073: STR
61074: PUSH
61075: LD_VAR 0 3
61079: PPUSH
61080: CALL_OW 250
61084: STR
61085: PUSH
61086: LD_STRING , 
61088: STR
61089: PUSH
61090: LD_VAR 0 3
61094: PPUSH
61095: CALL_OW 251
61099: STR
61100: PUSH
61101: LD_STRING , 
61103: STR
61104: PUSH
61105: LD_VAR 0 3
61109: PPUSH
61110: CALL_OW 254
61114: STR
61115: PUSH
61116: LD_STRING , 
61118: STR
61119: PUSH
61120: LD_VAR 0 3
61124: PPUSH
61125: LD_INT 1
61127: PPUSH
61128: CALL_OW 268
61132: STR
61133: PUSH
61134: LD_STRING , 
61136: STR
61137: PUSH
61138: LD_VAR 0 3
61142: PPUSH
61143: LD_INT 2
61145: PPUSH
61146: CALL_OW 268
61150: STR
61151: PUSH
61152: LD_STRING ],
61154: STR
61155: PPUSH
61156: CALL_OW 561
// end ;
61160: GO 61054
61162: POP
61163: POP
// AddToLog ( ]; ) ;
61164: LD_STRING ];
61166: PPUSH
61167: CALL_OW 561
// end ;
61171: LD_VAR 0 2
61175: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61176: LD_INT 0
61178: PPUSH
61179: PPUSH
61180: PPUSH
61181: PPUSH
61182: PPUSH
// if not area or not rate or not max then
61183: LD_VAR 0 1
61187: NOT
61188: PUSH
61189: LD_VAR 0 2
61193: NOT
61194: OR
61195: PUSH
61196: LD_VAR 0 4
61200: NOT
61201: OR
61202: IFFALSE 61206
// exit ;
61204: GO 61395
// while 1 do
61206: LD_INT 1
61208: IFFALSE 61395
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61210: LD_ADDR_VAR 0 9
61214: PUSH
61215: LD_VAR 0 1
61219: PPUSH
61220: LD_INT 1
61222: PPUSH
61223: CALL_OW 287
61227: PUSH
61228: LD_INT 10
61230: MUL
61231: ST_TO_ADDR
// r := rate / 10 ;
61232: LD_ADDR_VAR 0 7
61236: PUSH
61237: LD_VAR 0 2
61241: PUSH
61242: LD_INT 10
61244: DIVREAL
61245: ST_TO_ADDR
// time := 1 1$00 ;
61246: LD_ADDR_VAR 0 8
61250: PUSH
61251: LD_INT 2100
61253: ST_TO_ADDR
// if amount < min then
61254: LD_VAR 0 9
61258: PUSH
61259: LD_VAR 0 3
61263: LESS
61264: IFFALSE 61282
// r := r * 2 else
61266: LD_ADDR_VAR 0 7
61270: PUSH
61271: LD_VAR 0 7
61275: PUSH
61276: LD_INT 2
61278: MUL
61279: ST_TO_ADDR
61280: GO 61308
// if amount > max then
61282: LD_VAR 0 9
61286: PUSH
61287: LD_VAR 0 4
61291: GREATER
61292: IFFALSE 61308
// r := r / 2 ;
61294: LD_ADDR_VAR 0 7
61298: PUSH
61299: LD_VAR 0 7
61303: PUSH
61304: LD_INT 2
61306: DIVREAL
61307: ST_TO_ADDR
// time := time / r ;
61308: LD_ADDR_VAR 0 8
61312: PUSH
61313: LD_VAR 0 8
61317: PUSH
61318: LD_VAR 0 7
61322: DIVREAL
61323: ST_TO_ADDR
// if time < 0 then
61324: LD_VAR 0 8
61328: PUSH
61329: LD_INT 0
61331: LESS
61332: IFFALSE 61349
// time := time * - 1 ;
61334: LD_ADDR_VAR 0 8
61338: PUSH
61339: LD_VAR 0 8
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: MUL
61348: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61349: LD_VAR 0 8
61353: PUSH
61354: LD_INT 35
61356: PPUSH
61357: LD_INT 875
61359: PPUSH
61360: CALL_OW 12
61364: PLUS
61365: PPUSH
61366: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61370: LD_INT 1
61372: PPUSH
61373: LD_INT 5
61375: PPUSH
61376: CALL_OW 12
61380: PPUSH
61381: LD_VAR 0 1
61385: PPUSH
61386: LD_INT 1
61388: PPUSH
61389: CALL_OW 55
// end ;
61393: GO 61206
// end ;
61395: LD_VAR 0 5
61399: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61400: LD_INT 0
61402: PPUSH
61403: PPUSH
61404: PPUSH
61405: PPUSH
61406: PPUSH
61407: PPUSH
61408: PPUSH
61409: PPUSH
// if not turrets or not factories then
61410: LD_VAR 0 1
61414: NOT
61415: PUSH
61416: LD_VAR 0 2
61420: NOT
61421: OR
61422: IFFALSE 61426
// exit ;
61424: GO 61733
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61426: LD_ADDR_VAR 0 10
61430: PUSH
61431: LD_INT 5
61433: PUSH
61434: LD_INT 6
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: LD_INT 4
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 5
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 24
61468: PUSH
61469: LD_INT 25
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 23
61478: PUSH
61479: LD_INT 27
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 42
61492: PUSH
61493: LD_INT 43
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 44
61502: PUSH
61503: LD_INT 46
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 45
61512: PUSH
61513: LD_INT 47
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: LIST
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: ST_TO_ADDR
// result := [ ] ;
61530: LD_ADDR_VAR 0 3
61534: PUSH
61535: EMPTY
61536: ST_TO_ADDR
// for i in turrets do
61537: LD_ADDR_VAR 0 4
61541: PUSH
61542: LD_VAR 0 1
61546: PUSH
61547: FOR_IN
61548: IFFALSE 61731
// begin nat := GetNation ( i ) ;
61550: LD_ADDR_VAR 0 7
61554: PUSH
61555: LD_VAR 0 4
61559: PPUSH
61560: CALL_OW 248
61564: ST_TO_ADDR
// weapon := 0 ;
61565: LD_ADDR_VAR 0 8
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
// if not nat then
61573: LD_VAR 0 7
61577: NOT
61578: IFFALSE 61582
// continue ;
61580: GO 61547
// for j in list [ nat ] do
61582: LD_ADDR_VAR 0 5
61586: PUSH
61587: LD_VAR 0 10
61591: PUSH
61592: LD_VAR 0 7
61596: ARRAY
61597: PUSH
61598: FOR_IN
61599: IFFALSE 61640
// if GetBWeapon ( i ) = j [ 1 ] then
61601: LD_VAR 0 4
61605: PPUSH
61606: CALL_OW 269
61610: PUSH
61611: LD_VAR 0 5
61615: PUSH
61616: LD_INT 1
61618: ARRAY
61619: EQUAL
61620: IFFALSE 61638
// begin weapon := j [ 2 ] ;
61622: LD_ADDR_VAR 0 8
61626: PUSH
61627: LD_VAR 0 5
61631: PUSH
61632: LD_INT 2
61634: ARRAY
61635: ST_TO_ADDR
// break ;
61636: GO 61640
// end ;
61638: GO 61598
61640: POP
61641: POP
// if not weapon then
61642: LD_VAR 0 8
61646: NOT
61647: IFFALSE 61651
// continue ;
61649: GO 61547
// for k in factories do
61651: LD_ADDR_VAR 0 6
61655: PUSH
61656: LD_VAR 0 2
61660: PUSH
61661: FOR_IN
61662: IFFALSE 61727
// begin weapons := AvailableWeaponList ( k ) ;
61664: LD_ADDR_VAR 0 9
61668: PUSH
61669: LD_VAR 0 6
61673: PPUSH
61674: CALL_OW 478
61678: ST_TO_ADDR
// if not weapons then
61679: LD_VAR 0 9
61683: NOT
61684: IFFALSE 61688
// continue ;
61686: GO 61661
// if weapon in weapons then
61688: LD_VAR 0 8
61692: PUSH
61693: LD_VAR 0 9
61697: IN
61698: IFFALSE 61725
// begin result := [ i , weapon ] ;
61700: LD_ADDR_VAR 0 3
61704: PUSH
61705: LD_VAR 0 4
61709: PUSH
61710: LD_VAR 0 8
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// exit ;
61719: POP
61720: POP
61721: POP
61722: POP
61723: GO 61733
// end ; end ;
61725: GO 61661
61727: POP
61728: POP
// end ;
61729: GO 61547
61731: POP
61732: POP
// end ;
61733: LD_VAR 0 3
61737: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61738: LD_INT 0
61740: PPUSH
// if not side or side > 8 then
61741: LD_VAR 0 3
61745: NOT
61746: PUSH
61747: LD_VAR 0 3
61751: PUSH
61752: LD_INT 8
61754: GREATER
61755: OR
61756: IFFALSE 61760
// exit ;
61758: GO 61819
// if not range then
61760: LD_VAR 0 4
61764: NOT
61765: IFFALSE 61776
// range := - 12 ;
61767: LD_ADDR_VAR 0 4
61771: PUSH
61772: LD_INT 12
61774: NEG
61775: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61776: LD_VAR 0 1
61780: PPUSH
61781: LD_VAR 0 2
61785: PPUSH
61786: LD_VAR 0 3
61790: PPUSH
61791: LD_VAR 0 4
61795: PPUSH
61796: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61800: LD_VAR 0 1
61804: PPUSH
61805: LD_VAR 0 2
61809: PPUSH
61810: LD_VAR 0 3
61814: PPUSH
61815: CALL_OW 331
// end ;
61819: LD_VAR 0 5
61823: RET
// export function Video ( mode ) ; begin
61824: LD_INT 0
61826: PPUSH
// ingame_video = mode ;
61827: LD_ADDR_OWVAR 52
61831: PUSH
61832: LD_VAR 0 1
61836: ST_TO_ADDR
// interface_hidden = mode ;
61837: LD_ADDR_OWVAR 54
61841: PUSH
61842: LD_VAR 0 1
61846: ST_TO_ADDR
// end ;
61847: LD_VAR 0 2
61851: RET
// export function Join ( array , element ) ; begin
61852: LD_INT 0
61854: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61855: LD_ADDR_VAR 0 3
61859: PUSH
61860: LD_VAR 0 1
61864: PPUSH
61865: LD_VAR 0 1
61869: PUSH
61870: LD_INT 1
61872: PLUS
61873: PPUSH
61874: LD_VAR 0 2
61878: PPUSH
61879: CALL_OW 1
61883: ST_TO_ADDR
// end ;
61884: LD_VAR 0 3
61888: RET
// export function JoinUnion ( array , element ) ; begin
61889: LD_INT 0
61891: PPUSH
// result := array union element ;
61892: LD_ADDR_VAR 0 3
61896: PUSH
61897: LD_VAR 0 1
61901: PUSH
61902: LD_VAR 0 2
61906: UNION
61907: ST_TO_ADDR
// end ;
61908: LD_VAR 0 3
61912: RET
// export function GetBehemoths ( side ) ; begin
61913: LD_INT 0
61915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61916: LD_ADDR_VAR 0 2
61920: PUSH
61921: LD_INT 22
61923: PUSH
61924: LD_VAR 0 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 31
61935: PUSH
61936: LD_INT 25
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PPUSH
61947: CALL_OW 69
61951: ST_TO_ADDR
// end ;
61952: LD_VAR 0 2
61956: RET
// export function Shuffle ( array ) ; var i , index ; begin
61957: LD_INT 0
61959: PPUSH
61960: PPUSH
61961: PPUSH
// result := [ ] ;
61962: LD_ADDR_VAR 0 2
61966: PUSH
61967: EMPTY
61968: ST_TO_ADDR
// if not array then
61969: LD_VAR 0 1
61973: NOT
61974: IFFALSE 61978
// exit ;
61976: GO 62077
// Randomize ;
61978: CALL_OW 10
// for i = array downto 1 do
61982: LD_ADDR_VAR 0 3
61986: PUSH
61987: DOUBLE
61988: LD_VAR 0 1
61992: INC
61993: ST_TO_ADDR
61994: LD_INT 1
61996: PUSH
61997: FOR_DOWNTO
61998: IFFALSE 62075
// begin index := rand ( 1 , array ) ;
62000: LD_ADDR_VAR 0 4
62004: PUSH
62005: LD_INT 1
62007: PPUSH
62008: LD_VAR 0 1
62012: PPUSH
62013: CALL_OW 12
62017: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62018: LD_ADDR_VAR 0 2
62022: PUSH
62023: LD_VAR 0 2
62027: PPUSH
62028: LD_VAR 0 2
62032: PUSH
62033: LD_INT 1
62035: PLUS
62036: PPUSH
62037: LD_VAR 0 1
62041: PUSH
62042: LD_VAR 0 4
62046: ARRAY
62047: PPUSH
62048: CALL_OW 2
62052: ST_TO_ADDR
// array := Delete ( array , index ) ;
62053: LD_ADDR_VAR 0 1
62057: PUSH
62058: LD_VAR 0 1
62062: PPUSH
62063: LD_VAR 0 4
62067: PPUSH
62068: CALL_OW 3
62072: ST_TO_ADDR
// end ;
62073: GO 61997
62075: POP
62076: POP
// end ;
62077: LD_VAR 0 2
62081: RET
// export function GetBaseMaterials ( base ) ; begin
62082: LD_INT 0
62084: PPUSH
// result := [ 0 , 0 , 0 ] ;
62085: LD_ADDR_VAR 0 2
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// if not base then
62104: LD_VAR 0 1
62108: NOT
62109: IFFALSE 62113
// exit ;
62111: GO 62162
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62113: LD_ADDR_VAR 0 2
62117: PUSH
62118: LD_VAR 0 1
62122: PPUSH
62123: LD_INT 1
62125: PPUSH
62126: CALL_OW 275
62130: PUSH
62131: LD_VAR 0 1
62135: PPUSH
62136: LD_INT 2
62138: PPUSH
62139: CALL_OW 275
62143: PUSH
62144: LD_VAR 0 1
62148: PPUSH
62149: LD_INT 3
62151: PPUSH
62152: CALL_OW 275
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// end ;
62162: LD_VAR 0 2
62166: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62167: LD_INT 0
62169: PPUSH
62170: PPUSH
// result := array ;
62171: LD_ADDR_VAR 0 3
62175: PUSH
62176: LD_VAR 0 1
62180: ST_TO_ADDR
// if size >= result then
62181: LD_VAR 0 2
62185: PUSH
62186: LD_VAR 0 3
62190: GREATEREQUAL
62191: IFFALSE 62195
// exit ;
62193: GO 62245
// if size then
62195: LD_VAR 0 2
62199: IFFALSE 62245
// for i := array downto size do
62201: LD_ADDR_VAR 0 4
62205: PUSH
62206: DOUBLE
62207: LD_VAR 0 1
62211: INC
62212: ST_TO_ADDR
62213: LD_VAR 0 2
62217: PUSH
62218: FOR_DOWNTO
62219: IFFALSE 62243
// result := Delete ( result , result ) ;
62221: LD_ADDR_VAR 0 3
62225: PUSH
62226: LD_VAR 0 3
62230: PPUSH
62231: LD_VAR 0 3
62235: PPUSH
62236: CALL_OW 3
62240: ST_TO_ADDR
62241: GO 62218
62243: POP
62244: POP
// end ;
62245: LD_VAR 0 3
62249: RET
// export function ComExit ( unit ) ; var tmp ; begin
62250: LD_INT 0
62252: PPUSH
62253: PPUSH
// if not IsInUnit ( unit ) then
62254: LD_VAR 0 1
62258: PPUSH
62259: CALL_OW 310
62263: NOT
62264: IFFALSE 62268
// exit ;
62266: GO 62328
// tmp := IsInUnit ( unit ) ;
62268: LD_ADDR_VAR 0 3
62272: PUSH
62273: LD_VAR 0 1
62277: PPUSH
62278: CALL_OW 310
62282: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62283: LD_VAR 0 3
62287: PPUSH
62288: CALL_OW 247
62292: PUSH
62293: LD_INT 2
62295: EQUAL
62296: IFFALSE 62309
// ComExitVehicle ( unit ) else
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 121
62307: GO 62318
// ComExitBuilding ( unit ) ;
62309: LD_VAR 0 1
62313: PPUSH
62314: CALL_OW 122
// result := tmp ;
62318: LD_ADDR_VAR 0 2
62322: PUSH
62323: LD_VAR 0 3
62327: ST_TO_ADDR
// end ;
62328: LD_VAR 0 2
62332: RET
// export function ComExitAll ( units ) ; var i ; begin
62333: LD_INT 0
62335: PPUSH
62336: PPUSH
// if not units then
62337: LD_VAR 0 1
62341: NOT
62342: IFFALSE 62346
// exit ;
62344: GO 62372
// for i in units do
62346: LD_ADDR_VAR 0 3
62350: PUSH
62351: LD_VAR 0 1
62355: PUSH
62356: FOR_IN
62357: IFFALSE 62370
// ComExit ( i ) ;
62359: LD_VAR 0 3
62363: PPUSH
62364: CALL 62250 0 1
62368: GO 62356
62370: POP
62371: POP
// end ;
62372: LD_VAR 0 2
62376: RET
// export function ResetHc ; begin
62377: LD_INT 0
62379: PPUSH
// InitHc ;
62380: CALL_OW 19
// hc_importance := 0 ;
62384: LD_ADDR_OWVAR 32
62388: PUSH
62389: LD_INT 0
62391: ST_TO_ADDR
// end ;
62392: LD_VAR 0 1
62396: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62397: LD_INT 0
62399: PPUSH
62400: PPUSH
62401: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62402: LD_ADDR_VAR 0 6
62406: PUSH
62407: LD_VAR 0 1
62411: PUSH
62412: LD_VAR 0 3
62416: PLUS
62417: PUSH
62418: LD_INT 2
62420: DIV
62421: ST_TO_ADDR
// if _x < 0 then
62422: LD_VAR 0 6
62426: PUSH
62427: LD_INT 0
62429: LESS
62430: IFFALSE 62447
// _x := _x * - 1 ;
62432: LD_ADDR_VAR 0 6
62436: PUSH
62437: LD_VAR 0 6
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: MUL
62446: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62447: LD_ADDR_VAR 0 7
62451: PUSH
62452: LD_VAR 0 2
62456: PUSH
62457: LD_VAR 0 4
62461: PLUS
62462: PUSH
62463: LD_INT 2
62465: DIV
62466: ST_TO_ADDR
// if _y < 0 then
62467: LD_VAR 0 7
62471: PUSH
62472: LD_INT 0
62474: LESS
62475: IFFALSE 62492
// _y := _y * - 1 ;
62477: LD_ADDR_VAR 0 7
62481: PUSH
62482: LD_VAR 0 7
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: MUL
62491: ST_TO_ADDR
// result := [ _x , _y ] ;
62492: LD_ADDR_VAR 0 5
62496: PUSH
62497: LD_VAR 0 6
62501: PUSH
62502: LD_VAR 0 7
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: ST_TO_ADDR
// end ;
62511: LD_VAR 0 5
62515: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62516: LD_INT 0
62518: PPUSH
62519: PPUSH
62520: PPUSH
62521: PPUSH
// task := GetTaskList ( unit ) ;
62522: LD_ADDR_VAR 0 7
62526: PUSH
62527: LD_VAR 0 1
62531: PPUSH
62532: CALL_OW 437
62536: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62537: LD_VAR 0 7
62541: NOT
62542: PUSH
62543: LD_VAR 0 1
62547: PPUSH
62548: LD_VAR 0 2
62552: PPUSH
62553: CALL_OW 308
62557: NOT
62558: AND
62559: IFFALSE 62563
// exit ;
62561: GO 62681
// if IsInArea ( unit , area ) then
62563: LD_VAR 0 1
62567: PPUSH
62568: LD_VAR 0 2
62572: PPUSH
62573: CALL_OW 308
62577: IFFALSE 62595
// begin ComMoveToArea ( unit , goAway ) ;
62579: LD_VAR 0 1
62583: PPUSH
62584: LD_VAR 0 3
62588: PPUSH
62589: CALL_OW 113
// exit ;
62593: GO 62681
// end ; if task [ 1 ] [ 1 ] <> M then
62595: LD_VAR 0 7
62599: PUSH
62600: LD_INT 1
62602: ARRAY
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: PUSH
62608: LD_STRING M
62610: NONEQUAL
62611: IFFALSE 62615
// exit ;
62613: GO 62681
// x := task [ 1 ] [ 2 ] ;
62615: LD_ADDR_VAR 0 5
62619: PUSH
62620: LD_VAR 0 7
62624: PUSH
62625: LD_INT 1
62627: ARRAY
62628: PUSH
62629: LD_INT 2
62631: ARRAY
62632: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62633: LD_ADDR_VAR 0 6
62637: PUSH
62638: LD_VAR 0 7
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PUSH
62647: LD_INT 3
62649: ARRAY
62650: ST_TO_ADDR
// if InArea ( x , y , area ) then
62651: LD_VAR 0 5
62655: PPUSH
62656: LD_VAR 0 6
62660: PPUSH
62661: LD_VAR 0 2
62665: PPUSH
62666: CALL_OW 309
62670: IFFALSE 62681
// ComStop ( unit ) ;
62672: LD_VAR 0 1
62676: PPUSH
62677: CALL_OW 141
// end ;
62681: LD_VAR 0 4
62685: RET
// export function Abs ( value ) ; begin
62686: LD_INT 0
62688: PPUSH
// result := value ;
62689: LD_ADDR_VAR 0 2
62693: PUSH
62694: LD_VAR 0 1
62698: ST_TO_ADDR
// if value < 0 then
62699: LD_VAR 0 1
62703: PUSH
62704: LD_INT 0
62706: LESS
62707: IFFALSE 62724
// result := value * - 1 ;
62709: LD_ADDR_VAR 0 2
62713: PUSH
62714: LD_VAR 0 1
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: MUL
62723: ST_TO_ADDR
// end ;
62724: LD_VAR 0 2
62728: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62729: LD_INT 0
62731: PPUSH
62732: PPUSH
62733: PPUSH
62734: PPUSH
62735: PPUSH
62736: PPUSH
62737: PPUSH
62738: PPUSH
// if not unit or not building then
62739: LD_VAR 0 1
62743: NOT
62744: PUSH
62745: LD_VAR 0 2
62749: NOT
62750: OR
62751: IFFALSE 62755
// exit ;
62753: GO 62981
// x := GetX ( building ) ;
62755: LD_ADDR_VAR 0 4
62759: PUSH
62760: LD_VAR 0 2
62764: PPUSH
62765: CALL_OW 250
62769: ST_TO_ADDR
// y := GetY ( building ) ;
62770: LD_ADDR_VAR 0 6
62774: PUSH
62775: LD_VAR 0 2
62779: PPUSH
62780: CALL_OW 251
62784: ST_TO_ADDR
// d := GetDir ( building ) ;
62785: LD_ADDR_VAR 0 8
62789: PUSH
62790: LD_VAR 0 2
62794: PPUSH
62795: CALL_OW 254
62799: ST_TO_ADDR
// r := 4 ;
62800: LD_ADDR_VAR 0 9
62804: PUSH
62805: LD_INT 4
62807: ST_TO_ADDR
// for i := 1 to 5 do
62808: LD_ADDR_VAR 0 10
62812: PUSH
62813: DOUBLE
62814: LD_INT 1
62816: DEC
62817: ST_TO_ADDR
62818: LD_INT 5
62820: PUSH
62821: FOR_TO
62822: IFFALSE 62979
// begin _x := ShiftX ( x , d , r + i ) ;
62824: LD_ADDR_VAR 0 5
62828: PUSH
62829: LD_VAR 0 4
62833: PPUSH
62834: LD_VAR 0 8
62838: PPUSH
62839: LD_VAR 0 9
62843: PUSH
62844: LD_VAR 0 10
62848: PLUS
62849: PPUSH
62850: CALL_OW 272
62854: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62855: LD_ADDR_VAR 0 7
62859: PUSH
62860: LD_VAR 0 6
62864: PPUSH
62865: LD_VAR 0 8
62869: PPUSH
62870: LD_VAR 0 9
62874: PUSH
62875: LD_VAR 0 10
62879: PLUS
62880: PPUSH
62881: CALL_OW 273
62885: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62886: LD_VAR 0 5
62890: PPUSH
62891: LD_VAR 0 7
62895: PPUSH
62896: CALL_OW 488
62900: PUSH
62901: LD_VAR 0 5
62905: PPUSH
62906: LD_VAR 0 7
62910: PPUSH
62911: CALL_OW 428
62915: PPUSH
62916: CALL_OW 247
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: IN
62931: NOT
62932: AND
62933: IFFALSE 62977
// begin ComMoveXY ( unit , _x , _y ) ;
62935: LD_VAR 0 1
62939: PPUSH
62940: LD_VAR 0 5
62944: PPUSH
62945: LD_VAR 0 7
62949: PPUSH
62950: CALL_OW 111
// result := [ _x , _y ] ;
62954: LD_ADDR_VAR 0 3
62958: PUSH
62959: LD_VAR 0 5
62963: PUSH
62964: LD_VAR 0 7
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: ST_TO_ADDR
// exit ;
62973: POP
62974: POP
62975: GO 62981
// end ; end ;
62977: GO 62821
62979: POP
62980: POP
// end ;
62981: LD_VAR 0 3
62985: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62986: LD_INT 0
62988: PPUSH
62989: PPUSH
62990: PPUSH
// result := 0 ;
62991: LD_ADDR_VAR 0 3
62995: PUSH
62996: LD_INT 0
62998: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62999: LD_VAR 0 1
63003: PUSH
63004: LD_INT 0
63006: LESS
63007: PUSH
63008: LD_VAR 0 1
63012: PUSH
63013: LD_INT 8
63015: GREATER
63016: OR
63017: PUSH
63018: LD_VAR 0 2
63022: PUSH
63023: LD_INT 0
63025: LESS
63026: OR
63027: PUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_INT 8
63035: GREATER
63036: OR
63037: IFFALSE 63041
// exit ;
63039: GO 63116
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63041: LD_ADDR_VAR 0 4
63045: PUSH
63046: LD_INT 22
63048: PUSH
63049: LD_VAR 0 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PPUSH
63058: CALL_OW 69
63062: PUSH
63063: FOR_IN
63064: IFFALSE 63114
// begin un := UnitShoot ( i ) ;
63066: LD_ADDR_VAR 0 5
63070: PUSH
63071: LD_VAR 0 4
63075: PPUSH
63076: CALL_OW 504
63080: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63081: LD_VAR 0 5
63085: PPUSH
63086: CALL_OW 255
63090: PUSH
63091: LD_VAR 0 1
63095: EQUAL
63096: IFFALSE 63112
// begin result := un ;
63098: LD_ADDR_VAR 0 3
63102: PUSH
63103: LD_VAR 0 5
63107: ST_TO_ADDR
// exit ;
63108: POP
63109: POP
63110: GO 63116
// end ; end ;
63112: GO 63063
63114: POP
63115: POP
// end ;
63116: LD_VAR 0 3
63120: RET
// export function GetCargoBay ( units ) ; begin
63121: LD_INT 0
63123: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63124: LD_ADDR_VAR 0 2
63128: PUSH
63129: LD_VAR 0 1
63133: PPUSH
63134: LD_INT 2
63136: PUSH
63137: LD_INT 34
63139: PUSH
63140: LD_INT 12
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 34
63149: PUSH
63150: LD_INT 51
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 34
63159: PUSH
63160: LD_INT 32
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 34
63169: PUSH
63170: LD_INT 89
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: PPUSH
63184: CALL_OW 72
63188: ST_TO_ADDR
// end ;
63189: LD_VAR 0 2
63193: RET
// export function Negate ( value ) ; begin
63194: LD_INT 0
63196: PPUSH
// result := not value ;
63197: LD_ADDR_VAR 0 2
63201: PUSH
63202: LD_VAR 0 1
63206: NOT
63207: ST_TO_ADDR
// end ;
63208: LD_VAR 0 2
63212: RET
// export function Inc ( value ) ; begin
63213: LD_INT 0
63215: PPUSH
// result := value + 1 ;
63216: LD_ADDR_VAR 0 2
63220: PUSH
63221: LD_VAR 0 1
63225: PUSH
63226: LD_INT 1
63228: PLUS
63229: ST_TO_ADDR
// end ;
63230: LD_VAR 0 2
63234: RET
// export function Dec ( value ) ; begin
63235: LD_INT 0
63237: PPUSH
// result := value - 1 ;
63238: LD_ADDR_VAR 0 2
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 1
63250: MINUS
63251: ST_TO_ADDR
// end ;
63252: LD_VAR 0 2
63256: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63257: LD_INT 0
63259: PPUSH
63260: PPUSH
63261: PPUSH
63262: PPUSH
63263: PPUSH
63264: PPUSH
63265: PPUSH
63266: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63267: LD_VAR 0 1
63271: PPUSH
63272: LD_VAR 0 2
63276: PPUSH
63277: CALL_OW 488
63281: NOT
63282: PUSH
63283: LD_VAR 0 3
63287: PPUSH
63288: LD_VAR 0 4
63292: PPUSH
63293: CALL_OW 488
63297: NOT
63298: OR
63299: IFFALSE 63312
// begin result := - 1 ;
63301: LD_ADDR_VAR 0 5
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: ST_TO_ADDR
// exit ;
63310: GO 63547
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63312: LD_ADDR_VAR 0 12
63316: PUSH
63317: LD_VAR 0 1
63321: PPUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: LD_VAR 0 3
63331: PPUSH
63332: LD_VAR 0 4
63336: PPUSH
63337: CALL 62397 0 4
63341: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63342: LD_ADDR_VAR 0 11
63346: PUSH
63347: LD_VAR 0 1
63351: PPUSH
63352: LD_VAR 0 2
63356: PPUSH
63357: LD_VAR 0 12
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: PPUSH
63366: LD_VAR 0 12
63370: PUSH
63371: LD_INT 2
63373: ARRAY
63374: PPUSH
63375: CALL_OW 298
63379: ST_TO_ADDR
// distance := 9999 ;
63380: LD_ADDR_VAR 0 10
63384: PUSH
63385: LD_INT 9999
63387: ST_TO_ADDR
// for i := 0 to 5 do
63388: LD_ADDR_VAR 0 6
63392: PUSH
63393: DOUBLE
63394: LD_INT 0
63396: DEC
63397: ST_TO_ADDR
63398: LD_INT 5
63400: PUSH
63401: FOR_TO
63402: IFFALSE 63545
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63404: LD_ADDR_VAR 0 7
63408: PUSH
63409: LD_VAR 0 1
63413: PPUSH
63414: LD_VAR 0 6
63418: PPUSH
63419: LD_VAR 0 11
63423: PPUSH
63424: CALL_OW 272
63428: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63429: LD_ADDR_VAR 0 8
63433: PUSH
63434: LD_VAR 0 2
63438: PPUSH
63439: LD_VAR 0 6
63443: PPUSH
63444: LD_VAR 0 11
63448: PPUSH
63449: CALL_OW 273
63453: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63454: LD_VAR 0 7
63458: PPUSH
63459: LD_VAR 0 8
63463: PPUSH
63464: CALL_OW 488
63468: NOT
63469: IFFALSE 63473
// continue ;
63471: GO 63401
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63473: LD_ADDR_VAR 0 9
63477: PUSH
63478: LD_VAR 0 12
63482: PUSH
63483: LD_INT 1
63485: ARRAY
63486: PPUSH
63487: LD_VAR 0 12
63491: PUSH
63492: LD_INT 2
63494: ARRAY
63495: PPUSH
63496: LD_VAR 0 7
63500: PPUSH
63501: LD_VAR 0 8
63505: PPUSH
63506: CALL_OW 298
63510: ST_TO_ADDR
// if tmp < distance then
63511: LD_VAR 0 9
63515: PUSH
63516: LD_VAR 0 10
63520: LESS
63521: IFFALSE 63543
// begin result := i ;
63523: LD_ADDR_VAR 0 5
63527: PUSH
63528: LD_VAR 0 6
63532: ST_TO_ADDR
// distance := tmp ;
63533: LD_ADDR_VAR 0 10
63537: PUSH
63538: LD_VAR 0 9
63542: ST_TO_ADDR
// end ; end ;
63543: GO 63401
63545: POP
63546: POP
// end ;
63547: LD_VAR 0 5
63551: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63552: LD_INT 0
63554: PPUSH
63555: PPUSH
// if not driver or not IsInUnit ( driver ) then
63556: LD_VAR 0 1
63560: NOT
63561: PUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: CALL_OW 310
63571: NOT
63572: OR
63573: IFFALSE 63577
// exit ;
63575: GO 63667
// vehicle := IsInUnit ( driver ) ;
63577: LD_ADDR_VAR 0 3
63581: PUSH
63582: LD_VAR 0 1
63586: PPUSH
63587: CALL_OW 310
63591: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63592: LD_VAR 0 1
63596: PPUSH
63597: LD_STRING \
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: PUSH
63627: LD_STRING E
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_VAR 0 3
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PPUSH
63663: CALL_OW 446
// end ;
63667: LD_VAR 0 2
63671: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63672: LD_INT 0
63674: PPUSH
63675: PPUSH
// if not driver or not IsInUnit ( driver ) then
63676: LD_VAR 0 1
63680: NOT
63681: PUSH
63682: LD_VAR 0 1
63686: PPUSH
63687: CALL_OW 310
63691: NOT
63692: OR
63693: IFFALSE 63697
// exit ;
63695: GO 63787
// vehicle := IsInUnit ( driver ) ;
63697: LD_ADDR_VAR 0 3
63701: PUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: CALL_OW 310
63711: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63712: LD_VAR 0 1
63716: PPUSH
63717: LD_STRING \
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: PUSH
63747: LD_STRING E
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_VAR 0 3
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PPUSH
63783: CALL_OW 447
// end ;
63787: LD_VAR 0 2
63791: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63792: LD_INT 0
63794: PPUSH
63795: PPUSH
63796: PPUSH
// tmp := [ ] ;
63797: LD_ADDR_VAR 0 5
63801: PUSH
63802: EMPTY
63803: ST_TO_ADDR
// for i in units do
63804: LD_ADDR_VAR 0 4
63808: PUSH
63809: LD_VAR 0 1
63813: PUSH
63814: FOR_IN
63815: IFFALSE 63853
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63817: LD_ADDR_VAR 0 5
63821: PUSH
63822: LD_VAR 0 5
63826: PPUSH
63827: LD_VAR 0 5
63831: PUSH
63832: LD_INT 1
63834: PLUS
63835: PPUSH
63836: LD_VAR 0 4
63840: PPUSH
63841: CALL_OW 256
63845: PPUSH
63846: CALL_OW 2
63850: ST_TO_ADDR
63851: GO 63814
63853: POP
63854: POP
// if not tmp then
63855: LD_VAR 0 5
63859: NOT
63860: IFFALSE 63864
// exit ;
63862: GO 63912
// if asc then
63864: LD_VAR 0 2
63868: IFFALSE 63892
// result := SortListByListAsc ( units , tmp ) else
63870: LD_ADDR_VAR 0 3
63874: PUSH
63875: LD_VAR 0 1
63879: PPUSH
63880: LD_VAR 0 5
63884: PPUSH
63885: CALL_OW 76
63889: ST_TO_ADDR
63890: GO 63912
// result := SortListByListDesc ( units , tmp ) ;
63892: LD_ADDR_VAR 0 3
63896: PUSH
63897: LD_VAR 0 1
63901: PPUSH
63902: LD_VAR 0 5
63906: PPUSH
63907: CALL_OW 77
63911: ST_TO_ADDR
// end ;
63912: LD_VAR 0 3
63916: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63917: LD_INT 0
63919: PPUSH
63920: PPUSH
// task := GetTaskList ( mech ) ;
63921: LD_ADDR_VAR 0 4
63925: PUSH
63926: LD_VAR 0 1
63930: PPUSH
63931: CALL_OW 437
63935: ST_TO_ADDR
// if not task then
63936: LD_VAR 0 4
63940: NOT
63941: IFFALSE 63945
// exit ;
63943: GO 63987
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63945: LD_ADDR_VAR 0 3
63949: PUSH
63950: LD_VAR 0 4
63954: PUSH
63955: LD_INT 1
63957: ARRAY
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: PUSH
63963: LD_STRING r
63965: EQUAL
63966: PUSH
63967: LD_VAR 0 4
63971: PUSH
63972: LD_INT 1
63974: ARRAY
63975: PUSH
63976: LD_INT 4
63978: ARRAY
63979: PUSH
63980: LD_VAR 0 2
63984: EQUAL
63985: AND
63986: ST_TO_ADDR
// end ;
63987: LD_VAR 0 3
63991: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63992: LD_INT 0
63994: PPUSH
// SetDir ( unit , d ) ;
63995: LD_VAR 0 1
63999: PPUSH
64000: LD_VAR 0 4
64004: PPUSH
64005: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64009: LD_VAR 0 1
64013: PPUSH
64014: LD_VAR 0 2
64018: PPUSH
64019: LD_VAR 0 3
64023: PPUSH
64024: LD_VAR 0 5
64028: PPUSH
64029: CALL_OW 48
// end ;
64033: LD_VAR 0 6
64037: RET
// export function ToNaturalNumber ( number ) ; begin
64038: LD_INT 0
64040: PPUSH
// result := number div 1 ;
64041: LD_ADDR_VAR 0 2
64045: PUSH
64046: LD_VAR 0 1
64050: PUSH
64051: LD_INT 1
64053: DIV
64054: ST_TO_ADDR
// if number < 0 then
64055: LD_VAR 0 1
64059: PUSH
64060: LD_INT 0
64062: LESS
64063: IFFALSE 64073
// result := 0 ;
64065: LD_ADDR_VAR 0 2
64069: PUSH
64070: LD_INT 0
64072: ST_TO_ADDR
// end ;
64073: LD_VAR 0 2
64077: RET
// export function SortByClass ( units , class ) ; var un ; begin
64078: LD_INT 0
64080: PPUSH
64081: PPUSH
// if not units or not class then
64082: LD_VAR 0 1
64086: NOT
64087: PUSH
64088: LD_VAR 0 2
64092: NOT
64093: OR
64094: IFFALSE 64098
// exit ;
64096: GO 64193
// result := [ ] ;
64098: LD_ADDR_VAR 0 3
64102: PUSH
64103: EMPTY
64104: ST_TO_ADDR
// for un in units do
64105: LD_ADDR_VAR 0 4
64109: PUSH
64110: LD_VAR 0 1
64114: PUSH
64115: FOR_IN
64116: IFFALSE 64191
// if GetClass ( un ) = class then
64118: LD_VAR 0 4
64122: PPUSH
64123: CALL_OW 257
64127: PUSH
64128: LD_VAR 0 2
64132: EQUAL
64133: IFFALSE 64160
// result := Insert ( result , 1 , un ) else
64135: LD_ADDR_VAR 0 3
64139: PUSH
64140: LD_VAR 0 3
64144: PPUSH
64145: LD_INT 1
64147: PPUSH
64148: LD_VAR 0 4
64152: PPUSH
64153: CALL_OW 2
64157: ST_TO_ADDR
64158: GO 64189
// result := Replace ( result , result + 1 , un ) ;
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: LD_VAR 0 3
64169: PPUSH
64170: LD_VAR 0 3
64174: PUSH
64175: LD_INT 1
64177: PLUS
64178: PPUSH
64179: LD_VAR 0 4
64183: PPUSH
64184: CALL_OW 1
64188: ST_TO_ADDR
64189: GO 64115
64191: POP
64192: POP
// end ;
64193: LD_VAR 0 3
64197: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64198: LD_INT 0
64200: PPUSH
64201: PPUSH
64202: PPUSH
64203: PPUSH
64204: PPUSH
64205: PPUSH
64206: PPUSH
// result := [ ] ;
64207: LD_ADDR_VAR 0 4
64211: PUSH
64212: EMPTY
64213: ST_TO_ADDR
// if x - r < 0 then
64214: LD_VAR 0 1
64218: PUSH
64219: LD_VAR 0 3
64223: MINUS
64224: PUSH
64225: LD_INT 0
64227: LESS
64228: IFFALSE 64240
// min_x := 0 else
64230: LD_ADDR_VAR 0 8
64234: PUSH
64235: LD_INT 0
64237: ST_TO_ADDR
64238: GO 64256
// min_x := x - r ;
64240: LD_ADDR_VAR 0 8
64244: PUSH
64245: LD_VAR 0 1
64249: PUSH
64250: LD_VAR 0 3
64254: MINUS
64255: ST_TO_ADDR
// if y - r < 0 then
64256: LD_VAR 0 2
64260: PUSH
64261: LD_VAR 0 3
64265: MINUS
64266: PUSH
64267: LD_INT 0
64269: LESS
64270: IFFALSE 64282
// min_y := 0 else
64272: LD_ADDR_VAR 0 7
64276: PUSH
64277: LD_INT 0
64279: ST_TO_ADDR
64280: GO 64298
// min_y := y - r ;
64282: LD_ADDR_VAR 0 7
64286: PUSH
64287: LD_VAR 0 2
64291: PUSH
64292: LD_VAR 0 3
64296: MINUS
64297: ST_TO_ADDR
// max_x := x + r ;
64298: LD_ADDR_VAR 0 9
64302: PUSH
64303: LD_VAR 0 1
64307: PUSH
64308: LD_VAR 0 3
64312: PLUS
64313: ST_TO_ADDR
// max_y := y + r ;
64314: LD_ADDR_VAR 0 10
64318: PUSH
64319: LD_VAR 0 2
64323: PUSH
64324: LD_VAR 0 3
64328: PLUS
64329: ST_TO_ADDR
// for _x = min_x to max_x do
64330: LD_ADDR_VAR 0 5
64334: PUSH
64335: DOUBLE
64336: LD_VAR 0 8
64340: DEC
64341: ST_TO_ADDR
64342: LD_VAR 0 9
64346: PUSH
64347: FOR_TO
64348: IFFALSE 64449
// for _y = min_y to max_y do
64350: LD_ADDR_VAR 0 6
64354: PUSH
64355: DOUBLE
64356: LD_VAR 0 7
64360: DEC
64361: ST_TO_ADDR
64362: LD_VAR 0 10
64366: PUSH
64367: FOR_TO
64368: IFFALSE 64445
// begin if not ValidHex ( _x , _y ) then
64370: LD_VAR 0 5
64374: PPUSH
64375: LD_VAR 0 6
64379: PPUSH
64380: CALL_OW 488
64384: NOT
64385: IFFALSE 64389
// continue ;
64387: GO 64367
// if GetResourceTypeXY ( _x , _y ) then
64389: LD_VAR 0 5
64393: PPUSH
64394: LD_VAR 0 6
64398: PPUSH
64399: CALL_OW 283
64403: IFFALSE 64443
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64405: LD_ADDR_VAR 0 4
64409: PUSH
64410: LD_VAR 0 4
64414: PPUSH
64415: LD_VAR 0 4
64419: PUSH
64420: LD_INT 1
64422: PLUS
64423: PPUSH
64424: LD_VAR 0 5
64428: PUSH
64429: LD_VAR 0 6
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PPUSH
64438: CALL_OW 1
64442: ST_TO_ADDR
// end ;
64443: GO 64367
64445: POP
64446: POP
64447: GO 64347
64449: POP
64450: POP
// end ;
64451: LD_VAR 0 4
64455: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64456: LD_INT 0
64458: PPUSH
64459: PPUSH
64460: PPUSH
64461: PPUSH
64462: PPUSH
64463: PPUSH
64464: PPUSH
64465: PPUSH
// if not units then
64466: LD_VAR 0 1
64470: NOT
64471: IFFALSE 64475
// exit ;
64473: GO 64999
// result := UnitFilter ( units , [ f_ok ] ) ;
64475: LD_ADDR_VAR 0 3
64479: PUSH
64480: LD_VAR 0 1
64484: PPUSH
64485: LD_INT 50
64487: PUSH
64488: EMPTY
64489: LIST
64490: PPUSH
64491: CALL_OW 72
64495: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64496: LD_ADDR_VAR 0 8
64500: PUSH
64501: LD_VAR 0 1
64505: PUSH
64506: LD_INT 1
64508: ARRAY
64509: PPUSH
64510: CALL_OW 255
64514: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64515: LD_ADDR_VAR 0 10
64519: PUSH
64520: LD_INT 29
64522: PUSH
64523: LD_INT 91
64525: PUSH
64526: LD_INT 49
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// if not result then
64534: LD_VAR 0 3
64538: NOT
64539: IFFALSE 64543
// exit ;
64541: GO 64999
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64543: LD_ADDR_VAR 0 5
64547: PUSH
64548: LD_INT 81
64550: PUSH
64551: LD_VAR 0 8
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PPUSH
64560: CALL_OW 69
64564: ST_TO_ADDR
// for i in result do
64565: LD_ADDR_VAR 0 4
64569: PUSH
64570: LD_VAR 0 3
64574: PUSH
64575: FOR_IN
64576: IFFALSE 64997
// begin tag := GetTag ( i ) + 1 ;
64578: LD_ADDR_VAR 0 9
64582: PUSH
64583: LD_VAR 0 4
64587: PPUSH
64588: CALL_OW 110
64592: PUSH
64593: LD_INT 1
64595: PLUS
64596: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64597: LD_ADDR_VAR 0 7
64601: PUSH
64602: LD_VAR 0 4
64606: PPUSH
64607: CALL_OW 250
64611: PPUSH
64612: LD_VAR 0 4
64616: PPUSH
64617: CALL_OW 251
64621: PPUSH
64622: LD_INT 6
64624: PPUSH
64625: CALL 64198 0 3
64629: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64630: LD_VAR 0 4
64634: PPUSH
64635: CALL_OW 247
64639: PUSH
64640: LD_INT 2
64642: EQUAL
64643: PUSH
64644: LD_VAR 0 7
64648: AND
64649: PUSH
64650: LD_VAR 0 4
64654: PPUSH
64655: CALL_OW 264
64659: PUSH
64660: LD_VAR 0 10
64664: IN
64665: NOT
64666: AND
64667: IFFALSE 64706
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64669: LD_VAR 0 4
64673: PPUSH
64674: LD_VAR 0 7
64678: PUSH
64679: LD_INT 1
64681: ARRAY
64682: PUSH
64683: LD_INT 1
64685: ARRAY
64686: PPUSH
64687: LD_VAR 0 7
64691: PUSH
64692: LD_INT 1
64694: ARRAY
64695: PUSH
64696: LD_INT 2
64698: ARRAY
64699: PPUSH
64700: CALL_OW 116
64704: GO 64995
// if path > tag then
64706: LD_VAR 0 2
64710: PUSH
64711: LD_VAR 0 9
64715: GREATER
64716: IFFALSE 64924
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64718: LD_ADDR_VAR 0 6
64722: PUSH
64723: LD_VAR 0 5
64727: PPUSH
64728: LD_INT 91
64730: PUSH
64731: LD_VAR 0 4
64735: PUSH
64736: LD_INT 8
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: LIST
64743: PPUSH
64744: CALL_OW 72
64748: ST_TO_ADDR
// if nearEnemy then
64749: LD_VAR 0 6
64753: IFFALSE 64822
// begin if GetWeapon ( i ) = ru_time_lapser then
64755: LD_VAR 0 4
64759: PPUSH
64760: CALL_OW 264
64764: PUSH
64765: LD_INT 49
64767: EQUAL
64768: IFFALSE 64796
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64770: LD_VAR 0 4
64774: PPUSH
64775: LD_VAR 0 6
64779: PPUSH
64780: LD_VAR 0 4
64784: PPUSH
64785: CALL_OW 74
64789: PPUSH
64790: CALL_OW 112
64794: GO 64820
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64796: LD_VAR 0 4
64800: PPUSH
64801: LD_VAR 0 6
64805: PPUSH
64806: LD_VAR 0 4
64810: PPUSH
64811: CALL_OW 74
64815: PPUSH
64816: CALL_OW 115
// end else
64820: GO 64922
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64822: LD_VAR 0 4
64826: PPUSH
64827: LD_VAR 0 2
64831: PUSH
64832: LD_VAR 0 9
64836: ARRAY
64837: PUSH
64838: LD_INT 1
64840: ARRAY
64841: PPUSH
64842: LD_VAR 0 2
64846: PUSH
64847: LD_VAR 0 9
64851: ARRAY
64852: PUSH
64853: LD_INT 2
64855: ARRAY
64856: PPUSH
64857: CALL_OW 297
64861: PUSH
64862: LD_INT 6
64864: GREATER
64865: IFFALSE 64908
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64867: LD_VAR 0 4
64871: PPUSH
64872: LD_VAR 0 2
64876: PUSH
64877: LD_VAR 0 9
64881: ARRAY
64882: PUSH
64883: LD_INT 1
64885: ARRAY
64886: PPUSH
64887: LD_VAR 0 2
64891: PUSH
64892: LD_VAR 0 9
64896: ARRAY
64897: PUSH
64898: LD_INT 2
64900: ARRAY
64901: PPUSH
64902: CALL_OW 114
64906: GO 64922
// SetTag ( i , tag ) ;
64908: LD_VAR 0 4
64912: PPUSH
64913: LD_VAR 0 9
64917: PPUSH
64918: CALL_OW 109
// end else
64922: GO 64995
// if enemy then
64924: LD_VAR 0 5
64928: IFFALSE 64995
// begin if GetWeapon ( i ) = ru_time_lapser then
64930: LD_VAR 0 4
64934: PPUSH
64935: CALL_OW 264
64939: PUSH
64940: LD_INT 49
64942: EQUAL
64943: IFFALSE 64971
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64945: LD_VAR 0 4
64949: PPUSH
64950: LD_VAR 0 5
64954: PPUSH
64955: LD_VAR 0 4
64959: PPUSH
64960: CALL_OW 74
64964: PPUSH
64965: CALL_OW 112
64969: GO 64995
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64971: LD_VAR 0 4
64975: PPUSH
64976: LD_VAR 0 5
64980: PPUSH
64981: LD_VAR 0 4
64985: PPUSH
64986: CALL_OW 74
64990: PPUSH
64991: CALL_OW 115
// end ; end ;
64995: GO 64575
64997: POP
64998: POP
// end ;
64999: LD_VAR 0 3
65003: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65004: LD_INT 0
65006: PPUSH
65007: PPUSH
65008: PPUSH
// if not unit or IsInUnit ( unit ) then
65009: LD_VAR 0 1
65013: NOT
65014: PUSH
65015: LD_VAR 0 1
65019: PPUSH
65020: CALL_OW 310
65024: OR
65025: IFFALSE 65029
// exit ;
65027: GO 65120
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65029: LD_ADDR_VAR 0 4
65033: PUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 250
65043: PPUSH
65044: LD_VAR 0 2
65048: PPUSH
65049: LD_INT 1
65051: PPUSH
65052: CALL_OW 272
65056: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65057: LD_ADDR_VAR 0 5
65061: PUSH
65062: LD_VAR 0 1
65066: PPUSH
65067: CALL_OW 251
65071: PPUSH
65072: LD_VAR 0 2
65076: PPUSH
65077: LD_INT 1
65079: PPUSH
65080: CALL_OW 273
65084: ST_TO_ADDR
// if ValidHex ( x , y ) then
65085: LD_VAR 0 4
65089: PPUSH
65090: LD_VAR 0 5
65094: PPUSH
65095: CALL_OW 488
65099: IFFALSE 65120
// ComTurnXY ( unit , x , y ) ;
65101: LD_VAR 0 1
65105: PPUSH
65106: LD_VAR 0 4
65110: PPUSH
65111: LD_VAR 0 5
65115: PPUSH
65116: CALL_OW 118
// end ;
65120: LD_VAR 0 3
65124: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65125: LD_INT 0
65127: PPUSH
65128: PPUSH
// result := false ;
65129: LD_ADDR_VAR 0 3
65133: PUSH
65134: LD_INT 0
65136: ST_TO_ADDR
// if not units then
65137: LD_VAR 0 2
65141: NOT
65142: IFFALSE 65146
// exit ;
65144: GO 65191
// for i in units do
65146: LD_ADDR_VAR 0 4
65150: PUSH
65151: LD_VAR 0 2
65155: PUSH
65156: FOR_IN
65157: IFFALSE 65189
// if See ( side , i ) then
65159: LD_VAR 0 1
65163: PPUSH
65164: LD_VAR 0 4
65168: PPUSH
65169: CALL_OW 292
65173: IFFALSE 65187
// begin result := true ;
65175: LD_ADDR_VAR 0 3
65179: PUSH
65180: LD_INT 1
65182: ST_TO_ADDR
// exit ;
65183: POP
65184: POP
65185: GO 65191
// end ;
65187: GO 65156
65189: POP
65190: POP
// end ;
65191: LD_VAR 0 3
65195: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65196: LD_INT 0
65198: PPUSH
65199: PPUSH
65200: PPUSH
65201: PPUSH
// if not unit or not points then
65202: LD_VAR 0 1
65206: NOT
65207: PUSH
65208: LD_VAR 0 2
65212: NOT
65213: OR
65214: IFFALSE 65218
// exit ;
65216: GO 65308
// dist := 99999 ;
65218: LD_ADDR_VAR 0 5
65222: PUSH
65223: LD_INT 99999
65225: ST_TO_ADDR
// for i in points do
65226: LD_ADDR_VAR 0 4
65230: PUSH
65231: LD_VAR 0 2
65235: PUSH
65236: FOR_IN
65237: IFFALSE 65306
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65239: LD_ADDR_VAR 0 6
65243: PUSH
65244: LD_VAR 0 1
65248: PPUSH
65249: LD_VAR 0 4
65253: PUSH
65254: LD_INT 1
65256: ARRAY
65257: PPUSH
65258: LD_VAR 0 4
65262: PUSH
65263: LD_INT 2
65265: ARRAY
65266: PPUSH
65267: CALL_OW 297
65271: ST_TO_ADDR
// if tmpDist < dist then
65272: LD_VAR 0 6
65276: PUSH
65277: LD_VAR 0 5
65281: LESS
65282: IFFALSE 65304
// begin result := i ;
65284: LD_ADDR_VAR 0 3
65288: PUSH
65289: LD_VAR 0 4
65293: ST_TO_ADDR
// dist := tmpDist ;
65294: LD_ADDR_VAR 0 5
65298: PUSH
65299: LD_VAR 0 6
65303: ST_TO_ADDR
// end ; end ;
65304: GO 65236
65306: POP
65307: POP
// end ;
65308: LD_VAR 0 3
65312: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65313: LD_INT 0
65315: PPUSH
// uc_side := side ;
65316: LD_ADDR_OWVAR 20
65320: PUSH
65321: LD_VAR 0 1
65325: ST_TO_ADDR
// uc_nation := 3 ;
65326: LD_ADDR_OWVAR 21
65330: PUSH
65331: LD_INT 3
65333: ST_TO_ADDR
// vc_chassis := 25 ;
65334: LD_ADDR_OWVAR 37
65338: PUSH
65339: LD_INT 25
65341: ST_TO_ADDR
// vc_engine := engine_siberite ;
65342: LD_ADDR_OWVAR 39
65346: PUSH
65347: LD_INT 3
65349: ST_TO_ADDR
// vc_control := control_computer ;
65350: LD_ADDR_OWVAR 38
65354: PUSH
65355: LD_INT 3
65357: ST_TO_ADDR
// vc_weapon := 59 ;
65358: LD_ADDR_OWVAR 40
65362: PUSH
65363: LD_INT 59
65365: ST_TO_ADDR
// result := CreateVehicle ;
65366: LD_ADDR_VAR 0 5
65370: PUSH
65371: CALL_OW 45
65375: ST_TO_ADDR
// SetDir ( result , d ) ;
65376: LD_VAR 0 5
65380: PPUSH
65381: LD_VAR 0 4
65385: PPUSH
65386: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65390: LD_VAR 0 5
65394: PPUSH
65395: LD_VAR 0 2
65399: PPUSH
65400: LD_VAR 0 3
65404: PPUSH
65405: LD_INT 0
65407: PPUSH
65408: CALL_OW 48
// end ;
65412: LD_VAR 0 5
65416: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65417: LD_INT 0
65419: PPUSH
65420: PPUSH
65421: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65422: LD_ADDR_VAR 0 2
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65445: LD_VAR 0 1
65449: NOT
65450: PUSH
65451: LD_VAR 0 1
65455: PPUSH
65456: CALL_OW 264
65460: PUSH
65461: LD_INT 12
65463: PUSH
65464: LD_INT 51
65466: PUSH
65467: LD_INT 32
65469: PUSH
65470: LD_INT 89
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: IN
65479: NOT
65480: OR
65481: IFFALSE 65485
// exit ;
65483: GO 65583
// for i := 1 to 3 do
65485: LD_ADDR_VAR 0 3
65489: PUSH
65490: DOUBLE
65491: LD_INT 1
65493: DEC
65494: ST_TO_ADDR
65495: LD_INT 3
65497: PUSH
65498: FOR_TO
65499: IFFALSE 65581
// begin tmp := GetCargo ( cargo , i ) ;
65501: LD_ADDR_VAR 0 4
65505: PUSH
65506: LD_VAR 0 1
65510: PPUSH
65511: LD_VAR 0 3
65515: PPUSH
65516: CALL_OW 289
65520: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65521: LD_ADDR_VAR 0 2
65525: PUSH
65526: LD_VAR 0 2
65530: PPUSH
65531: LD_VAR 0 3
65535: PPUSH
65536: LD_VAR 0 4
65540: PPUSH
65541: CALL_OW 1
65545: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65546: LD_ADDR_VAR 0 2
65550: PUSH
65551: LD_VAR 0 2
65555: PPUSH
65556: LD_INT 4
65558: PPUSH
65559: LD_VAR 0 2
65563: PUSH
65564: LD_INT 4
65566: ARRAY
65567: PUSH
65568: LD_VAR 0 4
65572: PLUS
65573: PPUSH
65574: CALL_OW 1
65578: ST_TO_ADDR
// end ;
65579: GO 65498
65581: POP
65582: POP
// end ;
65583: LD_VAR 0 2
65587: RET
// export function Length ( array ) ; begin
65588: LD_INT 0
65590: PPUSH
// result := array + 0 ;
65591: LD_ADDR_VAR 0 2
65595: PUSH
65596: LD_VAR 0 1
65600: PUSH
65601: LD_INT 0
65603: PLUS
65604: ST_TO_ADDR
// end ;
65605: LD_VAR 0 2
65609: RET
// export function PrepareArray ( array ) ; begin
65610: LD_INT 0
65612: PPUSH
// result := array diff 0 ;
65613: LD_ADDR_VAR 0 2
65617: PUSH
65618: LD_VAR 0 1
65622: PUSH
65623: LD_INT 0
65625: DIFF
65626: ST_TO_ADDR
// if not result [ 1 ] then
65627: LD_VAR 0 2
65631: PUSH
65632: LD_INT 1
65634: ARRAY
65635: NOT
65636: IFFALSE 65656
// result := Delete ( result , 1 ) ;
65638: LD_ADDR_VAR 0 2
65642: PUSH
65643: LD_VAR 0 2
65647: PPUSH
65648: LD_INT 1
65650: PPUSH
65651: CALL_OW 3
65655: ST_TO_ADDR
// end ;
65656: LD_VAR 0 2
65660: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65661: LD_INT 0
65663: PPUSH
65664: PPUSH
65665: PPUSH
65666: PPUSH
// sibRocketRange := 25 ;
65667: LD_ADDR_VAR 0 6
65671: PUSH
65672: LD_INT 25
65674: ST_TO_ADDR
// result := false ;
65675: LD_ADDR_VAR 0 4
65679: PUSH
65680: LD_INT 0
65682: ST_TO_ADDR
// for i := 0 to 5 do
65683: LD_ADDR_VAR 0 5
65687: PUSH
65688: DOUBLE
65689: LD_INT 0
65691: DEC
65692: ST_TO_ADDR
65693: LD_INT 5
65695: PUSH
65696: FOR_TO
65697: IFFALSE 65764
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65699: LD_VAR 0 1
65703: PPUSH
65704: LD_VAR 0 5
65708: PPUSH
65709: LD_VAR 0 6
65713: PPUSH
65714: CALL_OW 272
65718: PPUSH
65719: LD_VAR 0 2
65723: PPUSH
65724: LD_VAR 0 5
65728: PPUSH
65729: LD_VAR 0 6
65733: PPUSH
65734: CALL_OW 273
65738: PPUSH
65739: LD_VAR 0 3
65743: PPUSH
65744: CALL_OW 309
65748: IFFALSE 65762
// begin result := true ;
65750: LD_ADDR_VAR 0 4
65754: PUSH
65755: LD_INT 1
65757: ST_TO_ADDR
// exit ;
65758: POP
65759: POP
65760: GO 65766
// end ;
65762: GO 65696
65764: POP
65765: POP
// end ; end_of_file
65766: LD_VAR 0 4
65770: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65771: LD_VAR 0 1
65775: PUSH
65776: LD_INT 200
65778: DOUBLE
65779: GREATEREQUAL
65780: IFFALSE 65788
65782: LD_INT 299
65784: DOUBLE
65785: LESSEQUAL
65786: IFTRUE 65790
65788: GO 65822
65790: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65791: LD_VAR 0 1
65795: PPUSH
65796: LD_VAR 0 2
65800: PPUSH
65801: LD_VAR 0 3
65805: PPUSH
65806: LD_VAR 0 4
65810: PPUSH
65811: LD_VAR 0 5
65815: PPUSH
65816: CALL 20490 0 5
65820: GO 65899
65822: LD_INT 300
65824: DOUBLE
65825: GREATEREQUAL
65826: IFFALSE 65834
65828: LD_INT 399
65830: DOUBLE
65831: LESSEQUAL
65832: IFTRUE 65836
65834: GO 65898
65836: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65837: LD_VAR 0 1
65841: PPUSH
65842: LD_VAR 0 2
65846: PPUSH
65847: LD_VAR 0 3
65851: PPUSH
65852: LD_VAR 0 4
65856: PPUSH
65857: LD_VAR 0 5
65861: PPUSH
65862: LD_VAR 0 6
65866: PPUSH
65867: LD_VAR 0 7
65871: PPUSH
65872: LD_VAR 0 8
65876: PPUSH
65877: LD_VAR 0 9
65881: PPUSH
65882: LD_VAR 0 10
65886: PPUSH
65887: LD_VAR 0 11
65891: PPUSH
65892: CALL 16823 0 11
65896: GO 65899
65898: POP
// end ;
65899: PPOPN 11
65901: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: LD_VAR 0 4
65921: PPUSH
65922: LD_VAR 0 5
65926: PPUSH
65927: CALL 20226 0 5
// end ; end_of_file
65931: PPOPN 5
65933: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65934: LD_VAR 0 1
65938: PPUSH
65939: LD_VAR 0 2
65943: PPUSH
65944: LD_VAR 0 3
65948: PPUSH
65949: LD_VAR 0 4
65953: PPUSH
65954: LD_VAR 0 5
65958: PPUSH
65959: LD_VAR 0 6
65963: PPUSH
65964: CALL 4516 0 6
// end ;
65968: PPOPN 6
65970: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65971: LD_INT 0
65973: PPUSH
// begin if not units then
65974: LD_VAR 0 1
65978: NOT
65979: IFFALSE 65983
// exit ;
65981: GO 65983
// end ;
65983: PPOPN 7
65985: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65986: CALL 4487 0 0
// end ;
65990: PPOPN 1
65992: END
