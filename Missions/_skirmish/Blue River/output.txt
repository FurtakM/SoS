// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4269
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4167
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4036
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: PUSH
3936: LD_INT 63
3938: PPUSH
3939: LD_INT 37
3941: PPUSH
3942: CALL_OW 428
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 30
3954: EQUAL
3955: AND
3956: IFFALSE 3962
// ComitSib ;
3958: CALL 2766 0 0
// if Difficulty > 2 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 2
3969: GREATER
3970: IFFALSE 3998
// begin Wait ( 0 0$25 ) ;
3972: LD_INT 875
3974: PPUSH
3975: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PUSH
3989: LD_INT 4
3991: PPUSH
3992: CALL 1355 0 1
3996: ADD
3997: ST_TO_ADDR
// end ; if attackN > 7 then
3998: LD_EXP 6
4002: PUSH
4003: LD_INT 7
4005: GREATER
4006: IFFALSE 4034
// begin Wait ( 0 0$15 ) ;
4008: LD_INT 525
4010: PPUSH
4011: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL 1355 0 1
4032: ADD
4033: ST_TO_ADDR
// end ; end ; 3 :
4034: GO 4167
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4166
4044: POP
// begin pom := pom ^ Attack ( 1 ) ;
4045: LD_ADDR_EXP 4
4049: PUSH
4050: LD_EXP 4
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL 1355 0 1
4062: ADD
4063: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4064: LD_INT 70
4066: PPUSH
4067: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4071: LD_ADDR_EXP 4
4075: PUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL 1355 0 1
4088: ADD
4089: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4090: LD_INT 2100
4092: PPUSH
4093: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4097: LD_ADDR_EXP 4
4101: PUSH
4102: LD_EXP 4
4106: PUSH
4107: LD_INT 3
4109: PPUSH
4110: CALL 1355 0 1
4114: ADD
4115: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4116: LD_ADDR_EXP 4
4120: PUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 5
4128: PPUSH
4129: CALL 1355 0 1
4133: ADD
4134: ST_TO_ADDR
// if attackN > 10 then
4135: LD_EXP 6
4139: PUSH
4140: LD_INT 10
4142: GREATER
4143: IFFALSE 4164
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1355 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ;
4164: GO 4167
4166: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 1
4174: GREATER
4175: PUSH
4176: LD_EXP 6
4180: PUSH
4181: LD_INT 4
4183: MOD
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: AND
4189: IFFALSE 4255
// begin Wait ( 1 1$45 ) ;
4191: LD_INT 3675
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4217: LD_ADDR_EXP 4
4221: PUSH
4222: LD_EXP 4
4226: PUSH
4227: LD_INT 4
4229: PPUSH
4230: CALL 1355 0 1
4234: ADD
4235: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4236: LD_ADDR_EXP 5
4240: PUSH
4241: LD_EXP 5
4245: PUSH
4246: LD_INT 6
4248: PPUSH
4249: CALL 1355 0 1
4253: ADD
4254: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4255: LD_ADDR_EXP 6
4259: PUSH
4260: LD_EXP 6
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: PPOPN 2
4271: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4272: LD_EXP 6
4276: PUSH
4277: LD_INT 10
4279: PUSH
4280: LD_INT 12
4282: PUSH
4283: LD_INT 14
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: GREATEREQUAL
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PUSH
4313: LD_INT 0
4315: EQUAL
4316: AND
4317: IFFALSE 4360
4319: GO 4321
4321: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4322: LD_EXP 2
4326: PPUSH
4327: LD_STRING DDocEnd
4329: PPUSH
4330: CALL_OW 586
// wait ( 0 0$03 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// Query ( QWin ) ;
4341: LD_STRING QWin
4343: PPUSH
4344: CALL_OW 97
// music_nat := 5 ;
4348: LD_ADDR_OWVAR 71
4352: PUSH
4353: LD_INT 5
4355: ST_TO_ADDR
// YouWin ;
4356: CALL_OW 103
// end ; end_of_file
4360: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL 20259 0 1
// if un = brave or un = com then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 1
4377: EQUAL
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: LD_EXP 1
4388: EQUAL
4389: OR
4390: IFFALSE 4411
// begin SayRadioNoFace ( doc , DDocWin ) ;
4392: LD_EXP 2
4396: PPUSH
4397: LD_STRING DDocWin
4399: PPUSH
4400: CALL_OW 586
// YouLost (  ) ;
4404: LD_STRING 
4406: PPUSH
4407: CALL_OW 104
// end ; end ;
4411: PPOPN 1
4413: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL 20355 0 3
// end ;
4433: PPOPN 3
4435: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4436: LD_VAR 0 1
4440: PPUSH
4441: CALL 20363 0 1
// end ;
4445: PPOPN 1
4447: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL 20379 0 2
// end ; end_of_file end_of_file
4462: PPOPN 2
4464: END
// export globalGameSaveCounter ; every 0 0$1 do
4465: GO 4467
4467: DISABLE
// begin enable ;
4468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4469: LD_STRING updateTimer(
4471: PUSH
4472: LD_OWVAR 1
4476: STR
4477: PUSH
4478: LD_STRING );
4480: STR
4481: PPUSH
4482: CALL_OW 559
// end ;
4486: END
// every 0 0$1 do
4487: GO 4489
4489: DISABLE
// begin globalGameSaveCounter := 0 ;
4490: LD_ADDR_EXP 7
4494: PUSH
4495: LD_INT 0
4497: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4498: LD_STRING setGameSaveCounter(0)
4500: PPUSH
4501: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4505: LD_STRING initStreamRollete();
4507: PPUSH
4508: CALL_OW 559
// InitStreamMode ;
4512: CALL 5838 0 0
// DefineStreamItems ( false ) ;
4516: LD_INT 0
4518: PPUSH
4519: CALL 6302 0 1
// end ;
4523: END
// export function SOS_MapStart ( ) ; begin
4524: LD_INT 0
4526: PPUSH
// if streamModeActive then
4527: LD_EXP 8
4531: IFFALSE 4540
// DefineStreamItems ( true ) ;
4533: LD_INT 1
4535: PPUSH
4536: CALL 6302 0 1
// UpdateLuaVariables ( ) ;
4540: CALL 4557 0 0
// UpdateFactoryWaypoints ( ) ;
4544: CALL 19163 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4548: CALL 19420 0 0
// end ;
4552: LD_VAR 0 1
4556: RET
// function UpdateLuaVariables ( ) ; begin
4557: LD_INT 0
4559: PPUSH
// if globalGameSaveCounter then
4560: LD_EXP 7
4564: IFFALSE 4598
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4566: LD_ADDR_EXP 7
4570: PUSH
4571: LD_EXP 7
4575: PPUSH
4576: CALL 63377 0 1
4580: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4581: LD_STRING setGameSaveCounter(
4583: PUSH
4584: LD_EXP 7
4588: STR
4589: PUSH
4590: LD_STRING )
4592: STR
4593: PPUSH
4594: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4598: LD_STRING setGameDifficulty(
4600: PUSH
4601: LD_OWVAR 67
4605: STR
4606: PUSH
4607: LD_STRING )
4609: STR
4610: PPUSH
4611: CALL_OW 559
// end ;
4615: LD_VAR 0 1
4619: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4620: LD_INT 0
4622: PPUSH
// if p2 = stream_mode then
4623: LD_VAR 0 2
4627: PUSH
4628: LD_INT 100
4630: EQUAL
4631: IFFALSE 5634
// begin if not StreamModeActive then
4633: LD_EXP 8
4637: NOT
4638: IFFALSE 4648
// StreamModeActive := true ;
4640: LD_ADDR_EXP 8
4644: PUSH
4645: LD_INT 1
4647: ST_TO_ADDR
// if p3 = 0 then
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 0
4655: EQUAL
4656: IFFALSE 4662
// InitStreamMode ;
4658: CALL 5838 0 0
// if p3 = 1 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 1
4669: EQUAL
4670: IFFALSE 4680
// sRocket := true ;
4672: LD_ADDR_EXP 13
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 2 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 2
4687: EQUAL
4688: IFFALSE 4698
// sSpeed := true ;
4690: LD_ADDR_EXP 12
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 3 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 3
4705: EQUAL
4706: IFFALSE 4716
// sEngine := true ;
4708: LD_ADDR_EXP 14
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 4 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 4
4723: EQUAL
4724: IFFALSE 4734
// sSpec := true ;
4726: LD_ADDR_EXP 11
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 5 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 5
4741: EQUAL
4742: IFFALSE 4752
// sLevel := true ;
4744: LD_ADDR_EXP 15
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 6 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 6
4759: EQUAL
4760: IFFALSE 4770
// sArmoury := true ;
4762: LD_ADDR_EXP 16
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 7 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 7
4777: EQUAL
4778: IFFALSE 4788
// sRadar := true ;
4780: LD_ADDR_EXP 17
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 8 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 8
4795: EQUAL
4796: IFFALSE 4806
// sBunker := true ;
4798: LD_ADDR_EXP 18
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 9 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 9
4813: EQUAL
4814: IFFALSE 4824
// sHack := true ;
4816: LD_ADDR_EXP 19
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 10 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 10
4831: EQUAL
4832: IFFALSE 4842
// sFire := true ;
4834: LD_ADDR_EXP 20
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 11 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 11
4849: EQUAL
4850: IFFALSE 4860
// sRefresh := true ;
4852: LD_ADDR_EXP 21
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 12 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 12
4867: EQUAL
4868: IFFALSE 4878
// sExp := true ;
4870: LD_ADDR_EXP 22
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 13 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 13
4885: EQUAL
4886: IFFALSE 4896
// sDepot := true ;
4888: LD_ADDR_EXP 23
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 14 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 14
4903: EQUAL
4904: IFFALSE 4914
// sFlag := true ;
4906: LD_ADDR_EXP 24
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 15 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 15
4921: EQUAL
4922: IFFALSE 4932
// sKamikadze := true ;
4924: LD_ADDR_EXP 32
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 16 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 16
4939: EQUAL
4940: IFFALSE 4950
// sTroll := true ;
4942: LD_ADDR_EXP 33
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 17 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 17
4957: EQUAL
4958: IFFALSE 4968
// sSlow := true ;
4960: LD_ADDR_EXP 34
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 18 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 18
4975: EQUAL
4976: IFFALSE 4986
// sLack := true ;
4978: LD_ADDR_EXP 35
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 19 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 19
4993: EQUAL
4994: IFFALSE 5004
// sTank := true ;
4996: LD_ADDR_EXP 37
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 20 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 20
5011: EQUAL
5012: IFFALSE 5022
// sRemote := true ;
5014: LD_ADDR_EXP 38
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 21 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 21
5029: EQUAL
5030: IFFALSE 5040
// sPowell := true ;
5032: LD_ADDR_EXP 39
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 22 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 22
5047: EQUAL
5048: IFFALSE 5058
// sTeleport := true ;
5050: LD_ADDR_EXP 42
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 23 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 23
5065: EQUAL
5066: IFFALSE 5076
// sOilTower := true ;
5068: LD_ADDR_EXP 44
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 24 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 24
5083: EQUAL
5084: IFFALSE 5094
// sShovel := true ;
5086: LD_ADDR_EXP 45
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 25 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 25
5101: EQUAL
5102: IFFALSE 5112
// sSheik := true ;
5104: LD_ADDR_EXP 46
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 26 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 26
5119: EQUAL
5120: IFFALSE 5130
// sEarthquake := true ;
5122: LD_ADDR_EXP 48
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 27 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 27
5137: EQUAL
5138: IFFALSE 5148
// sAI := true ;
5140: LD_ADDR_EXP 49
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 28 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 28
5155: EQUAL
5156: IFFALSE 5166
// sCargo := true ;
5158: LD_ADDR_EXP 52
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 29 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 29
5173: EQUAL
5174: IFFALSE 5184
// sDLaser := true ;
5176: LD_ADDR_EXP 53
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 30 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 30
5191: EQUAL
5192: IFFALSE 5202
// sExchange := true ;
5194: LD_ADDR_EXP 54
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 31 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 31
5209: EQUAL
5210: IFFALSE 5220
// sFac := true ;
5212: LD_ADDR_EXP 55
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 32 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 32
5227: EQUAL
5228: IFFALSE 5238
// sPower := true ;
5230: LD_ADDR_EXP 56
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 33 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 33
5245: EQUAL
5246: IFFALSE 5256
// sRandom := true ;
5248: LD_ADDR_EXP 57
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 34 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 34
5263: EQUAL
5264: IFFALSE 5274
// sShield := true ;
5266: LD_ADDR_EXP 58
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 35 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 35
5281: EQUAL
5282: IFFALSE 5292
// sTime := true ;
5284: LD_ADDR_EXP 59
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 36 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 36
5299: EQUAL
5300: IFFALSE 5310
// sTools := true ;
5302: LD_ADDR_EXP 60
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 101 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 101
5317: EQUAL
5318: IFFALSE 5328
// sSold := true ;
5320: LD_ADDR_EXP 25
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 102 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 102
5335: EQUAL
5336: IFFALSE 5346
// sDiff := true ;
5338: LD_ADDR_EXP 26
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 103 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 103
5353: EQUAL
5354: IFFALSE 5364
// sFog := true ;
5356: LD_ADDR_EXP 29
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 104 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 104
5371: EQUAL
5372: IFFALSE 5382
// sReset := true ;
5374: LD_ADDR_EXP 30
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 105 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 105
5389: EQUAL
5390: IFFALSE 5400
// sSun := true ;
5392: LD_ADDR_EXP 31
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 106 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 106
5407: EQUAL
5408: IFFALSE 5418
// sTiger := true ;
5410: LD_ADDR_EXP 27
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 107 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 107
5425: EQUAL
5426: IFFALSE 5436
// sBomb := true ;
5428: LD_ADDR_EXP 28
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 108 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 108
5443: EQUAL
5444: IFFALSE 5454
// sWound := true ;
5446: LD_ADDR_EXP 36
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 109 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 109
5461: EQUAL
5462: IFFALSE 5472
// sBetray := true ;
5464: LD_ADDR_EXP 40
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 110 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 110
5479: EQUAL
5480: IFFALSE 5490
// sContamin := true ;
5482: LD_ADDR_EXP 41
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 111 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 111
5497: EQUAL
5498: IFFALSE 5508
// sOil := true ;
5500: LD_ADDR_EXP 43
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 112 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 112
5515: EQUAL
5516: IFFALSE 5526
// sStu := true ;
5518: LD_ADDR_EXP 47
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 113 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 113
5533: EQUAL
5534: IFFALSE 5544
// sBazooka := true ;
5536: LD_ADDR_EXP 50
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 114 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 114
5551: EQUAL
5552: IFFALSE 5562
// sMortar := true ;
5554: LD_ADDR_EXP 51
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 115 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 115
5569: EQUAL
5570: IFFALSE 5580
// sRanger := true ;
5572: LD_ADDR_EXP 61
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 116 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 116
5587: EQUAL
5588: IFFALSE 5598
// sComputer := true ;
5590: LD_ADDR_EXP 62
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 117 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 117
5605: EQUAL
5606: IFFALSE 5616
// s30 := true ;
5608: LD_ADDR_EXP 63
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 118 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 118
5623: EQUAL
5624: IFFALSE 5634
// s60 := true ;
5626: LD_ADDR_EXP 64
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// end ; if p2 = hack_mode then
5634: LD_VAR 0 2
5638: PUSH
5639: LD_INT 101
5641: EQUAL
5642: IFFALSE 5770
// begin case p3 of 1 :
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 1
5651: DOUBLE
5652: EQUAL
5653: IFTRUE 5657
5655: GO 5664
5657: POP
// hHackUnlimitedResources ; 2 :
5658: CALL 17909 0 0
5662: GO 5770
5664: LD_INT 2
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5672
5670: GO 5679
5672: POP
// hHackSetLevel10 ; 3 :
5673: CALL 18042 0 0
5677: GO 5770
5679: LD_INT 3
5681: DOUBLE
5682: EQUAL
5683: IFTRUE 5687
5685: GO 5694
5687: POP
// hHackSetLevel10YourUnits ; 4 :
5688: CALL 18127 0 0
5692: GO 5770
5694: LD_INT 4
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5709
5702: POP
// hHackInvincible ; 5 :
5703: CALL 18575 0 0
5707: GO 5770
5709: LD_INT 5
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5724
5717: POP
// hHackInvisible ; 6 :
5718: CALL 18686 0 0
5722: GO 5770
5724: LD_INT 6
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5739
5732: POP
// hHackChangeYourSide ; 7 :
5733: CALL 18743 0 0
5737: GO 5770
5739: LD_INT 7
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5754
5747: POP
// hHackChangeUnitSide ; 8 :
5748: CALL 18785 0 0
5752: GO 5770
5754: LD_INT 8
5756: DOUBLE
5757: EQUAL
5758: IFTRUE 5762
5760: GO 5769
5762: POP
// hHackFog ; end ;
5763: CALL 18886 0 0
5767: GO 5770
5769: POP
// end ; if p2 = game_save_mode then
5770: LD_VAR 0 2
5774: PUSH
5775: LD_INT 102
5777: EQUAL
5778: IFFALSE 5833
// begin if p3 = 1 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 1
5787: EQUAL
5788: IFFALSE 5800
// globalGameSaveCounter := p4 ;
5790: LD_ADDR_EXP 7
5794: PUSH
5795: LD_VAR 0 4
5799: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5800: LD_VAR 0 3
5804: PUSH
5805: LD_INT 2
5807: EQUAL
5808: PUSH
5809: LD_EXP 7
5813: AND
5814: IFFALSE 5833
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5816: LD_STRING setGameSaveCounter(
5818: PUSH
5819: LD_EXP 7
5823: STR
5824: PUSH
5825: LD_STRING )
5827: STR
5828: PPUSH
5829: CALL_OW 559
// end ; end ;
5833: LD_VAR 0 7
5837: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5838: LD_INT 0
5840: PPUSH
// streamModeActive := false ;
5841: LD_ADDR_EXP 8
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// normalCounter := 36 ;
5849: LD_ADDR_EXP 9
5853: PUSH
5854: LD_INT 36
5856: ST_TO_ADDR
// hardcoreCounter := 18 ;
5857: LD_ADDR_EXP 10
5861: PUSH
5862: LD_INT 18
5864: ST_TO_ADDR
// sRocket := false ;
5865: LD_ADDR_EXP 13
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// sSpeed := false ;
5873: LD_ADDR_EXP 12
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// sEngine := false ;
5881: LD_ADDR_EXP 14
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// sSpec := false ;
5889: LD_ADDR_EXP 11
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// sLevel := false ;
5897: LD_ADDR_EXP 15
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
// sArmoury := false ;
5905: LD_ADDR_EXP 16
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// sRadar := false ;
5913: LD_ADDR_EXP 17
5917: PUSH
5918: LD_INT 0
5920: ST_TO_ADDR
// sBunker := false ;
5921: LD_ADDR_EXP 18
5925: PUSH
5926: LD_INT 0
5928: ST_TO_ADDR
// sHack := false ;
5929: LD_ADDR_EXP 19
5933: PUSH
5934: LD_INT 0
5936: ST_TO_ADDR
// sFire := false ;
5937: LD_ADDR_EXP 20
5941: PUSH
5942: LD_INT 0
5944: ST_TO_ADDR
// sRefresh := false ;
5945: LD_ADDR_EXP 21
5949: PUSH
5950: LD_INT 0
5952: ST_TO_ADDR
// sExp := false ;
5953: LD_ADDR_EXP 22
5957: PUSH
5958: LD_INT 0
5960: ST_TO_ADDR
// sDepot := false ;
5961: LD_ADDR_EXP 23
5965: PUSH
5966: LD_INT 0
5968: ST_TO_ADDR
// sFlag := false ;
5969: LD_ADDR_EXP 24
5973: PUSH
5974: LD_INT 0
5976: ST_TO_ADDR
// sKamikadze := false ;
5977: LD_ADDR_EXP 32
5981: PUSH
5982: LD_INT 0
5984: ST_TO_ADDR
// sTroll := false ;
5985: LD_ADDR_EXP 33
5989: PUSH
5990: LD_INT 0
5992: ST_TO_ADDR
// sSlow := false ;
5993: LD_ADDR_EXP 34
5997: PUSH
5998: LD_INT 0
6000: ST_TO_ADDR
// sLack := false ;
6001: LD_ADDR_EXP 35
6005: PUSH
6006: LD_INT 0
6008: ST_TO_ADDR
// sTank := false ;
6009: LD_ADDR_EXP 37
6013: PUSH
6014: LD_INT 0
6016: ST_TO_ADDR
// sRemote := false ;
6017: LD_ADDR_EXP 38
6021: PUSH
6022: LD_INT 0
6024: ST_TO_ADDR
// sPowell := false ;
6025: LD_ADDR_EXP 39
6029: PUSH
6030: LD_INT 0
6032: ST_TO_ADDR
// sTeleport := false ;
6033: LD_ADDR_EXP 42
6037: PUSH
6038: LD_INT 0
6040: ST_TO_ADDR
// sOilTower := false ;
6041: LD_ADDR_EXP 44
6045: PUSH
6046: LD_INT 0
6048: ST_TO_ADDR
// sShovel := false ;
6049: LD_ADDR_EXP 45
6053: PUSH
6054: LD_INT 0
6056: ST_TO_ADDR
// sSheik := false ;
6057: LD_ADDR_EXP 46
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// sEarthquake := false ;
6065: LD_ADDR_EXP 48
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// sAI := false ;
6073: LD_ADDR_EXP 49
6077: PUSH
6078: LD_INT 0
6080: ST_TO_ADDR
// sCargo := false ;
6081: LD_ADDR_EXP 52
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// sDLaser := false ;
6089: LD_ADDR_EXP 53
6093: PUSH
6094: LD_INT 0
6096: ST_TO_ADDR
// sExchange := false ;
6097: LD_ADDR_EXP 54
6101: PUSH
6102: LD_INT 0
6104: ST_TO_ADDR
// sFac := false ;
6105: LD_ADDR_EXP 55
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sPower := false ;
6113: LD_ADDR_EXP 56
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sRandom := false ;
6121: LD_ADDR_EXP 57
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sShield := false ;
6129: LD_ADDR_EXP 58
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sTime := false ;
6137: LD_ADDR_EXP 59
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sTools := false ;
6145: LD_ADDR_EXP 60
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sSold := false ;
6153: LD_ADDR_EXP 25
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sDiff := false ;
6161: LD_ADDR_EXP 26
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sFog := false ;
6169: LD_ADDR_EXP 29
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sReset := false ;
6177: LD_ADDR_EXP 30
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sSun := false ;
6185: LD_ADDR_EXP 31
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sTiger := false ;
6193: LD_ADDR_EXP 27
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sBomb := false ;
6201: LD_ADDR_EXP 28
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sWound := false ;
6209: LD_ADDR_EXP 36
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sBetray := false ;
6217: LD_ADDR_EXP 40
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sContamin := false ;
6225: LD_ADDR_EXP 41
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sOil := false ;
6233: LD_ADDR_EXP 43
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sStu := false ;
6241: LD_ADDR_EXP 47
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sBazooka := false ;
6249: LD_ADDR_EXP 50
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sMortar := false ;
6257: LD_ADDR_EXP 51
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sRanger := false ;
6265: LD_ADDR_EXP 61
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sComputer := false ;
6273: LD_ADDR_EXP 62
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// s30 := false ;
6281: LD_ADDR_EXP 63
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// s60 := false ;
6289: LD_ADDR_EXP 64
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// end ;
6297: LD_VAR 0 1
6301: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6302: LD_INT 0
6304: PPUSH
6305: PPUSH
6306: PPUSH
6307: PPUSH
6308: PPUSH
6309: PPUSH
6310: PPUSH
// result := [ ] ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: EMPTY
6317: ST_TO_ADDR
// if campaign_id = 1 then
6318: LD_OWVAR 69
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 9492
// begin case mission_number of 1 :
6328: LD_OWVAR 70
6332: PUSH
6333: LD_INT 1
6335: DOUBLE
6336: EQUAL
6337: IFTRUE 6341
6339: GO 6417
6341: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: LD_INT 11
6355: PUSH
6356: LD_INT 12
6358: PUSH
6359: LD_INT 15
6361: PUSH
6362: LD_INT 16
6364: PUSH
6365: LD_INT 22
6367: PUSH
6368: LD_INT 23
6370: PUSH
6371: LD_INT 26
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 101
6387: PUSH
6388: LD_INT 102
6390: PUSH
6391: LD_INT 106
6393: PUSH
6394: LD_INT 116
6396: PUSH
6397: LD_INT 117
6399: PUSH
6400: LD_INT 118
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 9490
6417: LD_INT 2
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6509
6425: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 11
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: LD_INT 15
6445: PUSH
6446: LD_INT 16
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 23
6454: PUSH
6455: LD_INT 26
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 101
6471: PUSH
6472: LD_INT 102
6474: PUSH
6475: LD_INT 105
6477: PUSH
6478: LD_INT 106
6480: PUSH
6481: LD_INT 108
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: ST_TO_ADDR
6507: GO 9490
6509: LD_INT 3
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6605
6517: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: LD_INT 5
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: LD_INT 15
6540: PUSH
6541: LD_INT 16
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 26
6549: PUSH
6550: LD_INT 36
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 101
6567: PUSH
6568: LD_INT 102
6570: PUSH
6571: LD_INT 105
6573: PUSH
6574: LD_INT 106
6576: PUSH
6577: LD_INT 108
6579: PUSH
6580: LD_INT 116
6582: PUSH
6583: LD_INT 117
6585: PUSH
6586: LD_INT 118
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 9490
6605: LD_INT 4
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6709
6613: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 4
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: LD_INT 8
6630: PUSH
6631: LD_INT 11
6633: PUSH
6634: LD_INT 12
6636: PUSH
6637: LD_INT 15
6639: PUSH
6640: LD_INT 16
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 23
6648: PUSH
6649: LD_INT 26
6651: PUSH
6652: LD_INT 36
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 101
6671: PUSH
6672: LD_INT 102
6674: PUSH
6675: LD_INT 105
6677: PUSH
6678: LD_INT 106
6680: PUSH
6681: LD_INT 108
6683: PUSH
6684: LD_INT 116
6686: PUSH
6687: LD_INT 117
6689: PUSH
6690: LD_INT 118
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: ST_TO_ADDR
6707: GO 9490
6709: LD_INT 5
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6829
6717: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_INT 2
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: LD_INT 5
6731: PUSH
6732: LD_INT 6
6734: PUSH
6735: LD_INT 8
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 15
6746: PUSH
6747: LD_INT 16
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 23
6755: PUSH
6756: LD_INT 25
6758: PUSH
6759: LD_INT 26
6761: PUSH
6762: LD_INT 36
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 101
6783: PUSH
6784: LD_INT 102
6786: PUSH
6787: LD_INT 105
6789: PUSH
6790: LD_INT 106
6792: PUSH
6793: LD_INT 108
6795: PUSH
6796: LD_INT 109
6798: PUSH
6799: LD_INT 112
6801: PUSH
6802: LD_INT 116
6804: PUSH
6805: LD_INT 117
6807: PUSH
6808: LD_INT 118
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: ST_TO_ADDR
6827: GO 9490
6829: LD_INT 6
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6969
6837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 2
6845: PUSH
6846: LD_INT 4
6848: PUSH
6849: LD_INT 5
6851: PUSH
6852: LD_INT 6
6854: PUSH
6855: LD_INT 8
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 15
6866: PUSH
6867: LD_INT 16
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 22
6878: PUSH
6879: LD_INT 23
6881: PUSH
6882: LD_INT 25
6884: PUSH
6885: LD_INT 26
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 31
6893: PUSH
6894: LD_INT 32
6896: PUSH
6897: LD_INT 36
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 101
6923: PUSH
6924: LD_INT 102
6926: PUSH
6927: LD_INT 105
6929: PUSH
6930: LD_INT 106
6932: PUSH
6933: LD_INT 108
6935: PUSH
6936: LD_INT 109
6938: PUSH
6939: LD_INT 112
6941: PUSH
6942: LD_INT 116
6944: PUSH
6945: LD_INT 117
6947: PUSH
6948: LD_INT 118
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: ST_TO_ADDR
6967: GO 9490
6969: LD_INT 7
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7089
6977: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6978: LD_ADDR_VAR 0 2
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: LD_INT 4
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: LD_INT 7
6994: PUSH
6995: LD_INT 11
6997: PUSH
6998: LD_INT 12
7000: PUSH
7001: LD_INT 15
7003: PUSH
7004: LD_INT 16
7006: PUSH
7007: LD_INT 20
7009: PUSH
7010: LD_INT 21
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_INT 23
7018: PUSH
7019: LD_INT 25
7021: PUSH
7022: LD_INT 26
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 101
7043: PUSH
7044: LD_INT 102
7046: PUSH
7047: LD_INT 103
7049: PUSH
7050: LD_INT 105
7052: PUSH
7053: LD_INT 106
7055: PUSH
7056: LD_INT 108
7058: PUSH
7059: LD_INT 112
7061: PUSH
7062: LD_INT 116
7064: PUSH
7065: LD_INT 117
7067: PUSH
7068: LD_INT 118
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 9490
7089: LD_INT 8
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7237
7097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7098: LD_ADDR_VAR 0 2
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 4
7108: PUSH
7109: LD_INT 5
7111: PUSH
7112: LD_INT 6
7114: PUSH
7115: LD_INT 7
7117: PUSH
7118: LD_INT 8
7120: PUSH
7121: LD_INT 11
7123: PUSH
7124: LD_INT 12
7126: PUSH
7127: LD_INT 15
7129: PUSH
7130: LD_INT 16
7132: PUSH
7133: LD_INT 20
7135: PUSH
7136: LD_INT 21
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 23
7144: PUSH
7145: LD_INT 25
7147: PUSH
7148: LD_INT 26
7150: PUSH
7151: LD_INT 30
7153: PUSH
7154: LD_INT 31
7156: PUSH
7157: LD_INT 32
7159: PUSH
7160: LD_INT 36
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 101
7187: PUSH
7188: LD_INT 102
7190: PUSH
7191: LD_INT 103
7193: PUSH
7194: LD_INT 105
7196: PUSH
7197: LD_INT 106
7199: PUSH
7200: LD_INT 108
7202: PUSH
7203: LD_INT 109
7205: PUSH
7206: LD_INT 112
7208: PUSH
7209: LD_INT 116
7211: PUSH
7212: LD_INT 117
7214: PUSH
7215: LD_INT 118
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 9490
7237: LD_INT 9
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7393
7245: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7246: LD_ADDR_VAR 0 2
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 4
7256: PUSH
7257: LD_INT 5
7259: PUSH
7260: LD_INT 6
7262: PUSH
7263: LD_INT 7
7265: PUSH
7266: LD_INT 8
7268: PUSH
7269: LD_INT 11
7271: PUSH
7272: LD_INT 12
7274: PUSH
7275: LD_INT 15
7277: PUSH
7278: LD_INT 16
7280: PUSH
7281: LD_INT 20
7283: PUSH
7284: LD_INT 21
7286: PUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 23
7292: PUSH
7293: LD_INT 25
7295: PUSH
7296: LD_INT 26
7298: PUSH
7299: LD_INT 28
7301: PUSH
7302: LD_INT 30
7304: PUSH
7305: LD_INT 31
7307: PUSH
7308: LD_INT 32
7310: PUSH
7311: LD_INT 36
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 101
7339: PUSH
7340: LD_INT 102
7342: PUSH
7343: LD_INT 103
7345: PUSH
7346: LD_INT 105
7348: PUSH
7349: LD_INT 106
7351: PUSH
7352: LD_INT 108
7354: PUSH
7355: LD_INT 109
7357: PUSH
7358: LD_INT 112
7360: PUSH
7361: LD_INT 114
7363: PUSH
7364: LD_INT 116
7366: PUSH
7367: LD_INT 117
7369: PUSH
7370: LD_INT 118
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: ST_TO_ADDR
7391: GO 9490
7393: LD_INT 10
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7597
7401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7402: LD_ADDR_VAR 0 2
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 4
7412: PUSH
7413: LD_INT 5
7415: PUSH
7416: LD_INT 6
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: LD_INT 8
7424: PUSH
7425: LD_INT 9
7427: PUSH
7428: LD_INT 10
7430: PUSH
7431: LD_INT 11
7433: PUSH
7434: LD_INT 12
7436: PUSH
7437: LD_INT 13
7439: PUSH
7440: LD_INT 14
7442: PUSH
7443: LD_INT 15
7445: PUSH
7446: LD_INT 16
7448: PUSH
7449: LD_INT 17
7451: PUSH
7452: LD_INT 18
7454: PUSH
7455: LD_INT 19
7457: PUSH
7458: LD_INT 20
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 22
7466: PUSH
7467: LD_INT 23
7469: PUSH
7470: LD_INT 24
7472: PUSH
7473: LD_INT 25
7475: PUSH
7476: LD_INT 26
7478: PUSH
7479: LD_INT 28
7481: PUSH
7482: LD_INT 30
7484: PUSH
7485: LD_INT 31
7487: PUSH
7488: LD_INT 32
7490: PUSH
7491: LD_INT 36
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 101
7527: PUSH
7528: LD_INT 102
7530: PUSH
7531: LD_INT 103
7533: PUSH
7534: LD_INT 104
7536: PUSH
7537: LD_INT 105
7539: PUSH
7540: LD_INT 106
7542: PUSH
7543: LD_INT 107
7545: PUSH
7546: LD_INT 108
7548: PUSH
7549: LD_INT 109
7551: PUSH
7552: LD_INT 110
7554: PUSH
7555: LD_INT 111
7557: PUSH
7558: LD_INT 112
7560: PUSH
7561: LD_INT 114
7563: PUSH
7564: LD_INT 116
7566: PUSH
7567: LD_INT 117
7569: PUSH
7570: LD_INT 118
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: ST_TO_ADDR
7595: GO 9490
7597: LD_INT 11
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7809
7605: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7606: LD_ADDR_VAR 0 2
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 4
7619: PUSH
7620: LD_INT 5
7622: PUSH
7623: LD_INT 6
7625: PUSH
7626: LD_INT 7
7628: PUSH
7629: LD_INT 8
7631: PUSH
7632: LD_INT 9
7634: PUSH
7635: LD_INT 10
7637: PUSH
7638: LD_INT 11
7640: PUSH
7641: LD_INT 12
7643: PUSH
7644: LD_INT 13
7646: PUSH
7647: LD_INT 14
7649: PUSH
7650: LD_INT 15
7652: PUSH
7653: LD_INT 16
7655: PUSH
7656: LD_INT 17
7658: PUSH
7659: LD_INT 18
7661: PUSH
7662: LD_INT 19
7664: PUSH
7665: LD_INT 20
7667: PUSH
7668: LD_INT 21
7670: PUSH
7671: LD_INT 22
7673: PUSH
7674: LD_INT 23
7676: PUSH
7677: LD_INT 24
7679: PUSH
7680: LD_INT 25
7682: PUSH
7683: LD_INT 26
7685: PUSH
7686: LD_INT 28
7688: PUSH
7689: LD_INT 30
7691: PUSH
7692: LD_INT 31
7694: PUSH
7695: LD_INT 32
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 36
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 101
7739: PUSH
7740: LD_INT 102
7742: PUSH
7743: LD_INT 103
7745: PUSH
7746: LD_INT 104
7748: PUSH
7749: LD_INT 105
7751: PUSH
7752: LD_INT 106
7754: PUSH
7755: LD_INT 107
7757: PUSH
7758: LD_INT 108
7760: PUSH
7761: LD_INT 109
7763: PUSH
7764: LD_INT 110
7766: PUSH
7767: LD_INT 111
7769: PUSH
7770: LD_INT 112
7772: PUSH
7773: LD_INT 114
7775: PUSH
7776: LD_INT 116
7778: PUSH
7779: LD_INT 117
7781: PUSH
7782: LD_INT 118
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: ST_TO_ADDR
7807: GO 9490
7809: LD_INT 12
7811: DOUBLE
7812: EQUAL
7813: IFTRUE 7817
7815: GO 8037
7817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7818: LD_ADDR_VAR 0 2
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 4
7834: PUSH
7835: LD_INT 5
7837: PUSH
7838: LD_INT 6
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: LD_INT 9
7849: PUSH
7850: LD_INT 10
7852: PUSH
7853: LD_INT 11
7855: PUSH
7856: LD_INT 12
7858: PUSH
7859: LD_INT 13
7861: PUSH
7862: LD_INT 14
7864: PUSH
7865: LD_INT 15
7867: PUSH
7868: LD_INT 16
7870: PUSH
7871: LD_INT 17
7873: PUSH
7874: LD_INT 18
7876: PUSH
7877: LD_INT 19
7879: PUSH
7880: LD_INT 20
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 24
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 26
7900: PUSH
7901: LD_INT 27
7903: PUSH
7904: LD_INT 28
7906: PUSH
7907: LD_INT 30
7909: PUSH
7910: LD_INT 31
7912: PUSH
7913: LD_INT 32
7915: PUSH
7916: LD_INT 33
7918: PUSH
7919: LD_INT 34
7921: PUSH
7922: LD_INT 36
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 101
7963: PUSH
7964: LD_INT 102
7966: PUSH
7967: LD_INT 103
7969: PUSH
7970: LD_INT 104
7972: PUSH
7973: LD_INT 105
7975: PUSH
7976: LD_INT 106
7978: PUSH
7979: LD_INT 107
7981: PUSH
7982: LD_INT 108
7984: PUSH
7985: LD_INT 109
7987: PUSH
7988: LD_INT 110
7990: PUSH
7991: LD_INT 111
7993: PUSH
7994: LD_INT 112
7996: PUSH
7997: LD_INT 113
7999: PUSH
8000: LD_INT 114
8002: PUSH
8003: LD_INT 116
8005: PUSH
8006: LD_INT 117
8008: PUSH
8009: LD_INT 118
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: ST_TO_ADDR
8035: GO 9490
8037: LD_INT 13
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8253
8045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8046: LD_ADDR_VAR 0 2
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: LD_INT 4
8062: PUSH
8063: LD_INT 5
8065: PUSH
8066: LD_INT 8
8068: PUSH
8069: LD_INT 9
8071: PUSH
8072: LD_INT 10
8074: PUSH
8075: LD_INT 11
8077: PUSH
8078: LD_INT 12
8080: PUSH
8081: LD_INT 14
8083: PUSH
8084: LD_INT 15
8086: PUSH
8087: LD_INT 16
8089: PUSH
8090: LD_INT 17
8092: PUSH
8093: LD_INT 18
8095: PUSH
8096: LD_INT 19
8098: PUSH
8099: LD_INT 20
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 22
8107: PUSH
8108: LD_INT 23
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 25
8116: PUSH
8117: LD_INT 26
8119: PUSH
8120: LD_INT 27
8122: PUSH
8123: LD_INT 28
8125: PUSH
8126: LD_INT 30
8128: PUSH
8129: LD_INT 31
8131: PUSH
8132: LD_INT 32
8134: PUSH
8135: LD_INT 33
8137: PUSH
8138: LD_INT 34
8140: PUSH
8141: LD_INT 36
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 101
8179: PUSH
8180: LD_INT 102
8182: PUSH
8183: LD_INT 103
8185: PUSH
8186: LD_INT 104
8188: PUSH
8189: LD_INT 105
8191: PUSH
8192: LD_INT 106
8194: PUSH
8195: LD_INT 107
8197: PUSH
8198: LD_INT 108
8200: PUSH
8201: LD_INT 109
8203: PUSH
8204: LD_INT 110
8206: PUSH
8207: LD_INT 111
8209: PUSH
8210: LD_INT 112
8212: PUSH
8213: LD_INT 113
8215: PUSH
8216: LD_INT 114
8218: PUSH
8219: LD_INT 116
8221: PUSH
8222: LD_INT 117
8224: PUSH
8225: LD_INT 118
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: ST_TO_ADDR
8251: GO 9490
8253: LD_INT 14
8255: DOUBLE
8256: EQUAL
8257: IFTRUE 8261
8259: GO 8485
8261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8262: LD_ADDR_VAR 0 2
8266: PUSH
8267: LD_INT 1
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: LD_INT 3
8275: PUSH
8276: LD_INT 4
8278: PUSH
8279: LD_INT 5
8281: PUSH
8282: LD_INT 6
8284: PUSH
8285: LD_INT 7
8287: PUSH
8288: LD_INT 8
8290: PUSH
8291: LD_INT 9
8293: PUSH
8294: LD_INT 10
8296: PUSH
8297: LD_INT 11
8299: PUSH
8300: LD_INT 12
8302: PUSH
8303: LD_INT 13
8305: PUSH
8306: LD_INT 14
8308: PUSH
8309: LD_INT 15
8311: PUSH
8312: LD_INT 16
8314: PUSH
8315: LD_INT 17
8317: PUSH
8318: LD_INT 18
8320: PUSH
8321: LD_INT 19
8323: PUSH
8324: LD_INT 20
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 23
8335: PUSH
8336: LD_INT 24
8338: PUSH
8339: LD_INT 25
8341: PUSH
8342: LD_INT 26
8344: PUSH
8345: LD_INT 27
8347: PUSH
8348: LD_INT 28
8350: PUSH
8351: LD_INT 29
8353: PUSH
8354: LD_INT 30
8356: PUSH
8357: LD_INT 31
8359: PUSH
8360: LD_INT 32
8362: PUSH
8363: LD_INT 33
8365: PUSH
8366: LD_INT 34
8368: PUSH
8369: LD_INT 36
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 101
8411: PUSH
8412: LD_INT 102
8414: PUSH
8415: LD_INT 103
8417: PUSH
8418: LD_INT 104
8420: PUSH
8421: LD_INT 105
8423: PUSH
8424: LD_INT 106
8426: PUSH
8427: LD_INT 107
8429: PUSH
8430: LD_INT 108
8432: PUSH
8433: LD_INT 109
8435: PUSH
8436: LD_INT 110
8438: PUSH
8439: LD_INT 111
8441: PUSH
8442: LD_INT 112
8444: PUSH
8445: LD_INT 113
8447: PUSH
8448: LD_INT 114
8450: PUSH
8451: LD_INT 116
8453: PUSH
8454: LD_INT 117
8456: PUSH
8457: LD_INT 118
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: ST_TO_ADDR
8483: GO 9490
8485: LD_INT 15
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8717
8493: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8494: LD_ADDR_VAR 0 2
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: LD_INT 3
8507: PUSH
8508: LD_INT 4
8510: PUSH
8511: LD_INT 5
8513: PUSH
8514: LD_INT 6
8516: PUSH
8517: LD_INT 7
8519: PUSH
8520: LD_INT 8
8522: PUSH
8523: LD_INT 9
8525: PUSH
8526: LD_INT 10
8528: PUSH
8529: LD_INT 11
8531: PUSH
8532: LD_INT 12
8534: PUSH
8535: LD_INT 13
8537: PUSH
8538: LD_INT 14
8540: PUSH
8541: LD_INT 15
8543: PUSH
8544: LD_INT 16
8546: PUSH
8547: LD_INT 17
8549: PUSH
8550: LD_INT 18
8552: PUSH
8553: LD_INT 19
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 24
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 26
8576: PUSH
8577: LD_INT 27
8579: PUSH
8580: LD_INT 28
8582: PUSH
8583: LD_INT 29
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: LD_INT 32
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 34
8600: PUSH
8601: LD_INT 36
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 101
8643: PUSH
8644: LD_INT 102
8646: PUSH
8647: LD_INT 103
8649: PUSH
8650: LD_INT 104
8652: PUSH
8653: LD_INT 105
8655: PUSH
8656: LD_INT 106
8658: PUSH
8659: LD_INT 107
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: LD_INT 109
8667: PUSH
8668: LD_INT 110
8670: PUSH
8671: LD_INT 111
8673: PUSH
8674: LD_INT 112
8676: PUSH
8677: LD_INT 113
8679: PUSH
8680: LD_INT 114
8682: PUSH
8683: LD_INT 116
8685: PUSH
8686: LD_INT 117
8688: PUSH
8689: LD_INT 118
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: ST_TO_ADDR
8715: GO 9490
8717: LD_INT 16
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8861
8725: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 11
8745: PUSH
8746: LD_INT 12
8748: PUSH
8749: LD_INT 15
8751: PUSH
8752: LD_INT 16
8754: PUSH
8755: LD_INT 20
8757: PUSH
8758: LD_INT 21
8760: PUSH
8761: LD_INT 22
8763: PUSH
8764: LD_INT 23
8766: PUSH
8767: LD_INT 25
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 30
8775: PUSH
8776: LD_INT 31
8778: PUSH
8779: LD_INT 32
8781: PUSH
8782: LD_INT 33
8784: PUSH
8785: LD_INT 34
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 101
8811: PUSH
8812: LD_INT 102
8814: PUSH
8815: LD_INT 103
8817: PUSH
8818: LD_INT 106
8820: PUSH
8821: LD_INT 108
8823: PUSH
8824: LD_INT 112
8826: PUSH
8827: LD_INT 113
8829: PUSH
8830: LD_INT 114
8832: PUSH
8833: LD_INT 116
8835: PUSH
8836: LD_INT 117
8838: PUSH
8839: LD_INT 118
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: ST_TO_ADDR
8859: GO 9490
8861: LD_INT 17
8863: DOUBLE
8864: EQUAL
8865: IFTRUE 8869
8867: GO 9093
8869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 4
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: LD_INT 6
8892: PUSH
8893: LD_INT 7
8895: PUSH
8896: LD_INT 8
8898: PUSH
8899: LD_INT 9
8901: PUSH
8902: LD_INT 10
8904: PUSH
8905: LD_INT 11
8907: PUSH
8908: LD_INT 12
8910: PUSH
8911: LD_INT 13
8913: PUSH
8914: LD_INT 14
8916: PUSH
8917: LD_INT 15
8919: PUSH
8920: LD_INT 16
8922: PUSH
8923: LD_INT 17
8925: PUSH
8926: LD_INT 18
8928: PUSH
8929: LD_INT 19
8931: PUSH
8932: LD_INT 20
8934: PUSH
8935: LD_INT 21
8937: PUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 23
8943: PUSH
8944: LD_INT 24
8946: PUSH
8947: LD_INT 25
8949: PUSH
8950: LD_INT 26
8952: PUSH
8953: LD_INT 27
8955: PUSH
8956: LD_INT 28
8958: PUSH
8959: LD_INT 29
8961: PUSH
8962: LD_INT 30
8964: PUSH
8965: LD_INT 31
8967: PUSH
8968: LD_INT 32
8970: PUSH
8971: LD_INT 33
8973: PUSH
8974: LD_INT 34
8976: PUSH
8977: LD_INT 36
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 101
9019: PUSH
9020: LD_INT 102
9022: PUSH
9023: LD_INT 103
9025: PUSH
9026: LD_INT 104
9028: PUSH
9029: LD_INT 105
9031: PUSH
9032: LD_INT 106
9034: PUSH
9035: LD_INT 107
9037: PUSH
9038: LD_INT 108
9040: PUSH
9041: LD_INT 109
9043: PUSH
9044: LD_INT 110
9046: PUSH
9047: LD_INT 111
9049: PUSH
9050: LD_INT 112
9052: PUSH
9053: LD_INT 113
9055: PUSH
9056: LD_INT 114
9058: PUSH
9059: LD_INT 116
9061: PUSH
9062: LD_INT 117
9064: PUSH
9065: LD_INT 118
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: ST_TO_ADDR
9091: GO 9490
9093: LD_INT 18
9095: DOUBLE
9096: EQUAL
9097: IFTRUE 9101
9099: GO 9249
9101: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 2
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: LD_INT 5
9115: PUSH
9116: LD_INT 7
9118: PUSH
9119: LD_INT 11
9121: PUSH
9122: LD_INT 12
9124: PUSH
9125: LD_INT 15
9127: PUSH
9128: LD_INT 16
9130: PUSH
9131: LD_INT 20
9133: PUSH
9134: LD_INT 21
9136: PUSH
9137: LD_INT 22
9139: PUSH
9140: LD_INT 23
9142: PUSH
9143: LD_INT 25
9145: PUSH
9146: LD_INT 26
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 31
9154: PUSH
9155: LD_INT 32
9157: PUSH
9158: LD_INT 33
9160: PUSH
9161: LD_INT 34
9163: PUSH
9164: LD_INT 35
9166: PUSH
9167: LD_INT 36
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 102
9198: PUSH
9199: LD_INT 103
9201: PUSH
9202: LD_INT 106
9204: PUSH
9205: LD_INT 108
9207: PUSH
9208: LD_INT 112
9210: PUSH
9211: LD_INT 113
9213: PUSH
9214: LD_INT 114
9216: PUSH
9217: LD_INT 115
9219: PUSH
9220: LD_INT 116
9222: PUSH
9223: LD_INT 117
9225: PUSH
9226: LD_INT 118
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: ST_TO_ADDR
9247: GO 9490
9249: LD_INT 19
9251: DOUBLE
9252: EQUAL
9253: IFTRUE 9257
9255: GO 9489
9257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9258: LD_ADDR_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: LD_INT 2
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 6
9280: PUSH
9281: LD_INT 7
9283: PUSH
9284: LD_INT 8
9286: PUSH
9287: LD_INT 9
9289: PUSH
9290: LD_INT 10
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 12
9298: PUSH
9299: LD_INT 13
9301: PUSH
9302: LD_INT 14
9304: PUSH
9305: LD_INT 15
9307: PUSH
9308: LD_INT 16
9310: PUSH
9311: LD_INT 17
9313: PUSH
9314: LD_INT 18
9316: PUSH
9317: LD_INT 19
9319: PUSH
9320: LD_INT 20
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 23
9331: PUSH
9332: LD_INT 24
9334: PUSH
9335: LD_INT 25
9337: PUSH
9338: LD_INT 26
9340: PUSH
9341: LD_INT 27
9343: PUSH
9344: LD_INT 28
9346: PUSH
9347: LD_INT 29
9349: PUSH
9350: LD_INT 30
9352: PUSH
9353: LD_INT 31
9355: PUSH
9356: LD_INT 32
9358: PUSH
9359: LD_INT 33
9361: PUSH
9362: LD_INT 34
9364: PUSH
9365: LD_INT 35
9367: PUSH
9368: LD_INT 36
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 101
9411: PUSH
9412: LD_INT 102
9414: PUSH
9415: LD_INT 103
9417: PUSH
9418: LD_INT 104
9420: PUSH
9421: LD_INT 105
9423: PUSH
9424: LD_INT 106
9426: PUSH
9427: LD_INT 107
9429: PUSH
9430: LD_INT 108
9432: PUSH
9433: LD_INT 109
9435: PUSH
9436: LD_INT 110
9438: PUSH
9439: LD_INT 111
9441: PUSH
9442: LD_INT 112
9444: PUSH
9445: LD_INT 113
9447: PUSH
9448: LD_INT 114
9450: PUSH
9451: LD_INT 115
9453: PUSH
9454: LD_INT 116
9456: PUSH
9457: LD_INT 117
9459: PUSH
9460: LD_INT 118
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: ST_TO_ADDR
9487: GO 9490
9489: POP
// end else
9490: GO 9721
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_INT 1
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 4
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: LD_INT 6
9514: PUSH
9515: LD_INT 7
9517: PUSH
9518: LD_INT 8
9520: PUSH
9521: LD_INT 9
9523: PUSH
9524: LD_INT 10
9526: PUSH
9527: LD_INT 11
9529: PUSH
9530: LD_INT 12
9532: PUSH
9533: LD_INT 13
9535: PUSH
9536: LD_INT 14
9538: PUSH
9539: LD_INT 15
9541: PUSH
9542: LD_INT 16
9544: PUSH
9545: LD_INT 17
9547: PUSH
9548: LD_INT 18
9550: PUSH
9551: LD_INT 19
9553: PUSH
9554: LD_INT 20
9556: PUSH
9557: LD_INT 21
9559: PUSH
9560: LD_INT 22
9562: PUSH
9563: LD_INT 23
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 25
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 27
9577: PUSH
9578: LD_INT 28
9580: PUSH
9581: LD_INT 29
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 31
9589: PUSH
9590: LD_INT 32
9592: PUSH
9593: LD_INT 33
9595: PUSH
9596: LD_INT 34
9598: PUSH
9599: LD_INT 35
9601: PUSH
9602: LD_INT 36
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 103
9651: PUSH
9652: LD_INT 104
9654: PUSH
9655: LD_INT 105
9657: PUSH
9658: LD_INT 106
9660: PUSH
9661: LD_INT 107
9663: PUSH
9664: LD_INT 108
9666: PUSH
9667: LD_INT 109
9669: PUSH
9670: LD_INT 110
9672: PUSH
9673: LD_INT 111
9675: PUSH
9676: LD_INT 112
9678: PUSH
9679: LD_INT 113
9681: PUSH
9682: LD_INT 114
9684: PUSH
9685: LD_INT 115
9687: PUSH
9688: LD_INT 116
9690: PUSH
9691: LD_INT 117
9693: PUSH
9694: LD_INT 118
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: ST_TO_ADDR
// if result then
9721: LD_VAR 0 2
9725: IFFALSE 10511
// begin normal :=  ;
9727: LD_ADDR_VAR 0 5
9731: PUSH
9732: LD_STRING 
9734: ST_TO_ADDR
// hardcore :=  ;
9735: LD_ADDR_VAR 0 6
9739: PUSH
9740: LD_STRING 
9742: ST_TO_ADDR
// active :=  ;
9743: LD_ADDR_VAR 0 7
9747: PUSH
9748: LD_STRING 
9750: ST_TO_ADDR
// for i = 1 to normalCounter do
9751: LD_ADDR_VAR 0 8
9755: PUSH
9756: DOUBLE
9757: LD_INT 1
9759: DEC
9760: ST_TO_ADDR
9761: LD_EXP 9
9765: PUSH
9766: FOR_TO
9767: IFFALSE 9868
// begin tmp := 0 ;
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: LD_STRING 0
9776: ST_TO_ADDR
// if result [ 1 ] then
9777: LD_VAR 0 2
9781: PUSH
9782: LD_INT 1
9784: ARRAY
9785: IFFALSE 9850
// if result [ 1 ] [ 1 ] = i then
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PUSH
9796: LD_INT 1
9798: ARRAY
9799: PUSH
9800: LD_VAR 0 8
9804: EQUAL
9805: IFFALSE 9850
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9807: LD_ADDR_VAR 0 2
9811: PUSH
9812: LD_VAR 0 2
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: LD_VAR 0 2
9824: PUSH
9825: LD_INT 1
9827: ARRAY
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 3
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// tmp := 1 ;
9842: LD_ADDR_VAR 0 3
9846: PUSH
9847: LD_STRING 1
9849: ST_TO_ADDR
// end ; normal := normal & tmp ;
9850: LD_ADDR_VAR 0 5
9854: PUSH
9855: LD_VAR 0 5
9859: PUSH
9860: LD_VAR 0 3
9864: STR
9865: ST_TO_ADDR
// end ;
9866: GO 9766
9868: POP
9869: POP
// for i = 1 to hardcoreCounter do
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: DOUBLE
9876: LD_INT 1
9878: DEC
9879: ST_TO_ADDR
9880: LD_EXP 10
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9991
// begin tmp := 0 ;
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: LD_STRING 0
9895: ST_TO_ADDR
// if result [ 2 ] then
9896: LD_VAR 0 2
9900: PUSH
9901: LD_INT 2
9903: ARRAY
9904: IFFALSE 9973
// if result [ 2 ] [ 1 ] = 100 + i then
9906: LD_VAR 0 2
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PUSH
9919: LD_INT 100
9921: PUSH
9922: LD_VAR 0 8
9926: PLUS
9927: EQUAL
9928: IFFALSE 9973
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_VAR 0 2
9939: PPUSH
9940: LD_INT 2
9942: PPUSH
9943: LD_VAR 0 2
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 3
9959: PPUSH
9960: CALL_OW 1
9964: ST_TO_ADDR
// tmp := 1 ;
9965: LD_ADDR_VAR 0 3
9969: PUSH
9970: LD_STRING 1
9972: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9973: LD_ADDR_VAR 0 6
9977: PUSH
9978: LD_VAR 0 6
9982: PUSH
9983: LD_VAR 0 3
9987: STR
9988: ST_TO_ADDR
// end ;
9989: GO 9885
9991: POP
9992: POP
// if isGameLoad then
9993: LD_VAR 0 1
9997: IFFALSE 10472
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9999: LD_ADDR_VAR 0 4
10003: PUSH
10004: LD_EXP 13
10008: PUSH
10009: LD_EXP 12
10013: PUSH
10014: LD_EXP 14
10018: PUSH
10019: LD_EXP 11
10023: PUSH
10024: LD_EXP 15
10028: PUSH
10029: LD_EXP 16
10033: PUSH
10034: LD_EXP 17
10038: PUSH
10039: LD_EXP 18
10043: PUSH
10044: LD_EXP 19
10048: PUSH
10049: LD_EXP 20
10053: PUSH
10054: LD_EXP 21
10058: PUSH
10059: LD_EXP 22
10063: PUSH
10064: LD_EXP 23
10068: PUSH
10069: LD_EXP 24
10073: PUSH
10074: LD_EXP 32
10078: PUSH
10079: LD_EXP 33
10083: PUSH
10084: LD_EXP 34
10088: PUSH
10089: LD_EXP 35
10093: PUSH
10094: LD_EXP 37
10098: PUSH
10099: LD_EXP 38
10103: PUSH
10104: LD_EXP 39
10108: PUSH
10109: LD_EXP 42
10113: PUSH
10114: LD_EXP 44
10118: PUSH
10119: LD_EXP 45
10123: PUSH
10124: LD_EXP 46
10128: PUSH
10129: LD_EXP 48
10133: PUSH
10134: LD_EXP 49
10138: PUSH
10139: LD_EXP 52
10143: PUSH
10144: LD_EXP 53
10148: PUSH
10149: LD_EXP 54
10153: PUSH
10154: LD_EXP 55
10158: PUSH
10159: LD_EXP 56
10163: PUSH
10164: LD_EXP 57
10168: PUSH
10169: LD_EXP 58
10173: PUSH
10174: LD_EXP 59
10178: PUSH
10179: LD_EXP 60
10183: PUSH
10184: LD_EXP 25
10188: PUSH
10189: LD_EXP 26
10193: PUSH
10194: LD_EXP 29
10198: PUSH
10199: LD_EXP 30
10203: PUSH
10204: LD_EXP 31
10208: PUSH
10209: LD_EXP 27
10213: PUSH
10214: LD_EXP 28
10218: PUSH
10219: LD_EXP 36
10223: PUSH
10224: LD_EXP 40
10228: PUSH
10229: LD_EXP 41
10233: PUSH
10234: LD_EXP 43
10238: PUSH
10239: LD_EXP 47
10243: PUSH
10244: LD_EXP 50
10248: PUSH
10249: LD_EXP 51
10253: PUSH
10254: LD_EXP 61
10258: PUSH
10259: LD_EXP 62
10263: PUSH
10264: LD_EXP 63
10268: PUSH
10269: LD_EXP 64
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: ST_TO_ADDR
// tmp :=  ;
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: LD_STRING 
10337: ST_TO_ADDR
// for i = 1 to normalCounter do
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: DOUBLE
10344: LD_INT 1
10346: DEC
10347: ST_TO_ADDR
10348: LD_EXP 9
10352: PUSH
10353: FOR_TO
10354: IFFALSE 10390
// begin if flags [ i ] then
10356: LD_VAR 0 4
10360: PUSH
10361: LD_VAR 0 8
10365: ARRAY
10366: IFFALSE 10388
// tmp := tmp & i & ; ;
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: LD_VAR 0 3
10377: PUSH
10378: LD_VAR 0 8
10382: STR
10383: PUSH
10384: LD_STRING ;
10386: STR
10387: ST_TO_ADDR
// end ;
10388: GO 10353
10390: POP
10391: POP
// for i = 1 to hardcoreCounter do
10392: LD_ADDR_VAR 0 8
10396: PUSH
10397: DOUBLE
10398: LD_INT 1
10400: DEC
10401: ST_TO_ADDR
10402: LD_EXP 10
10406: PUSH
10407: FOR_TO
10408: IFFALSE 10454
// begin if flags [ normalCounter + i ] then
10410: LD_VAR 0 4
10414: PUSH
10415: LD_EXP 9
10419: PUSH
10420: LD_VAR 0 8
10424: PLUS
10425: ARRAY
10426: IFFALSE 10452
// tmp := tmp & ( 100 + i ) & ; ;
10428: LD_ADDR_VAR 0 3
10432: PUSH
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 100
10440: PUSH
10441: LD_VAR 0 8
10445: PLUS
10446: STR
10447: PUSH
10448: LD_STRING ;
10450: STR
10451: ST_TO_ADDR
// end ;
10452: GO 10407
10454: POP
10455: POP
// if tmp then
10456: LD_VAR 0 3
10460: IFFALSE 10472
// active := tmp ;
10462: LD_ADDR_VAR 0 7
10466: PUSH
10467: LD_VAR 0 3
10471: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10472: LD_STRING getStreamItemsFromMission("
10474: PUSH
10475: LD_VAR 0 5
10479: STR
10480: PUSH
10481: LD_STRING ","
10483: STR
10484: PUSH
10485: LD_VAR 0 6
10489: STR
10490: PUSH
10491: LD_STRING ","
10493: STR
10494: PUSH
10495: LD_VAR 0 7
10499: STR
10500: PUSH
10501: LD_STRING ")
10503: STR
10504: PPUSH
10505: CALL_OW 559
// end else
10509: GO 10518
// ToLua ( getStreamItemsFromMission("","","") ) ;
10511: LD_STRING getStreamItemsFromMission("","","")
10513: PPUSH
10514: CALL_OW 559
// end ;
10518: LD_VAR 0 2
10522: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10523: LD_EXP 8
10527: PUSH
10528: LD_EXP 13
10532: AND
10533: IFFALSE 10657
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
// begin enable ;
10542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 22
10550: PUSH
10551: LD_OWVAR 2
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: LD_INT 34
10565: PUSH
10566: LD_INT 7
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 45
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 34
10585: PUSH
10586: LD_INT 28
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 34
10595: PUSH
10596: LD_INT 47
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: ST_TO_ADDR
// if not tmp then
10619: LD_VAR 0 2
10623: NOT
10624: IFFALSE 10628
// exit ;
10626: GO 10657
// for i in tmp do
10628: LD_ADDR_VAR 0 1
10632: PUSH
10633: LD_VAR 0 2
10637: PUSH
10638: FOR_IN
10639: IFFALSE 10655
// begin SetLives ( i , 0 ) ;
10641: LD_VAR 0 1
10645: PPUSH
10646: LD_INT 0
10648: PPUSH
10649: CALL_OW 234
// end ;
10653: GO 10638
10655: POP
10656: POP
// end ;
10657: PPOPN 2
10659: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10660: LD_EXP 8
10664: PUSH
10665: LD_EXP 14
10669: AND
10670: IFFALSE 10754
10672: GO 10674
10674: DISABLE
10675: LD_INT 0
10677: PPUSH
10678: PPUSH
// begin enable ;
10679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10680: LD_ADDR_VAR 0 2
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 32
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: ST_TO_ADDR
// if not tmp then
10716: LD_VAR 0 2
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10754
// for i in tmp do
10725: LD_ADDR_VAR 0 1
10729: PUSH
10730: LD_VAR 0 2
10734: PUSH
10735: FOR_IN
10736: IFFALSE 10752
// begin SetLives ( i , 0 ) ;
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: CALL_OW 234
// end ;
10750: GO 10735
10752: POP
10753: POP
// end ;
10754: PPOPN 2
10756: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10757: LD_EXP 8
10761: PUSH
10762: LD_EXP 11
10766: AND
10767: IFFALSE 10860
10769: GO 10771
10771: DISABLE
10772: LD_INT 0
10774: PPUSH
// begin enable ;
10775: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_INT 22
10783: PUSH
10784: LD_OWVAR 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 5
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 9
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 8
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PPUSH
10836: CALL_OW 69
10840: PUSH
10841: FOR_IN
10842: IFFALSE 10858
// begin SetClass ( i , 1 ) ;
10844: LD_VAR 0 1
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 336
// end ;
10856: GO 10841
10858: POP
10859: POP
// end ;
10860: PPOPN 1
10862: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10863: LD_EXP 8
10867: PUSH
10868: LD_EXP 12
10872: AND
10873: PUSH
10874: LD_OWVAR 65
10878: PUSH
10879: LD_INT 7
10881: LESS
10882: AND
10883: IFFALSE 10897
10885: GO 10887
10887: DISABLE
// begin enable ;
10888: ENABLE
// game_speed := 7 ;
10889: LD_ADDR_OWVAR 65
10893: PUSH
10894: LD_INT 7
10896: ST_TO_ADDR
// end ;
10897: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10898: LD_EXP 8
10902: PUSH
10903: LD_EXP 15
10907: AND
10908: IFFALSE 11110
10910: GO 10912
10912: DISABLE
10913: LD_INT 0
10915: PPUSH
10916: PPUSH
10917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_OWVAR 2
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 21
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: ST_TO_ADDR
// if not tmp then
10954: LD_VAR 0 3
10958: NOT
10959: IFFALSE 10963
// exit ;
10961: GO 11110
// if tmp > 5 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 5
10970: GREATER
10971: IFFALSE 10983
// k := 5 else
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_INT 5
10980: ST_TO_ADDR
10981: GO 10993
// k := tmp ;
10983: LD_ADDR_VAR 0 2
10987: PUSH
10988: LD_VAR 0 3
10992: ST_TO_ADDR
// for i := 1 to k do
10993: LD_ADDR_VAR 0 1
10997: PUSH
10998: DOUBLE
10999: LD_INT 1
11001: DEC
11002: ST_TO_ADDR
11003: LD_VAR 0 2
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11108
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_VAR 0 1
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 1
11026: PUSH
11027: LD_INT 4
11029: MOD
11030: PUSH
11031: LD_INT 1
11033: PLUS
11034: PPUSH
11035: CALL_OW 259
11039: PUSH
11040: LD_INT 10
11042: LESS
11043: IFFALSE 11106
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11045: LD_VAR 0 3
11049: PUSH
11050: LD_VAR 0 1
11054: ARRAY
11055: PPUSH
11056: LD_VAR 0 1
11060: PUSH
11061: LD_INT 4
11063: MOD
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: PPUSH
11069: LD_VAR 0 3
11073: PUSH
11074: LD_VAR 0 1
11078: ARRAY
11079: PPUSH
11080: LD_VAR 0 1
11084: PUSH
11085: LD_INT 4
11087: MOD
11088: PUSH
11089: LD_INT 1
11091: PLUS
11092: PPUSH
11093: CALL_OW 259
11097: PUSH
11098: LD_INT 1
11100: PLUS
11101: PPUSH
11102: CALL_OW 237
11106: GO 11008
11108: POP
11109: POP
// end ;
11110: PPOPN 3
11112: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11113: LD_EXP 8
11117: PUSH
11118: LD_EXP 16
11122: AND
11123: IFFALSE 11143
11125: GO 11127
11127: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11128: LD_INT 4
11130: PPUSH
11131: LD_OWVAR 2
11135: PPUSH
11136: LD_INT 0
11138: PPUSH
11139: CALL_OW 324
11143: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11144: LD_EXP 8
11148: PUSH
11149: LD_EXP 45
11153: AND
11154: IFFALSE 11174
11156: GO 11158
11158: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11159: LD_INT 19
11161: PPUSH
11162: LD_OWVAR 2
11166: PPUSH
11167: LD_INT 0
11169: PPUSH
11170: CALL_OW 324
11174: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11175: LD_EXP 8
11179: PUSH
11180: LD_EXP 17
11184: AND
11185: IFFALSE 11287
11187: GO 11189
11189: DISABLE
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
// begin enable ;
11194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11195: LD_ADDR_VAR 0 2
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_OWVAR 2
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 34
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 34
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// if not tmp then
11249: LD_VAR 0 2
11253: NOT
11254: IFFALSE 11258
// exit ;
11256: GO 11287
// for i in tmp do
11258: LD_ADDR_VAR 0 1
11262: PUSH
11263: LD_VAR 0 2
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11285
// begin SetLives ( i , 0 ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 234
// end ;
11283: GO 11268
11285: POP
11286: POP
// end ;
11287: PPOPN 2
11289: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11290: LD_EXP 8
11294: PUSH
11295: LD_EXP 18
11299: AND
11300: IFFALSE 11320
11302: GO 11304
11304: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11305: LD_INT 32
11307: PPUSH
11308: LD_OWVAR 2
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 324
11320: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11321: LD_EXP 8
11325: PUSH
11326: LD_EXP 19
11330: AND
11331: IFFALSE 11512
11333: GO 11335
11335: DISABLE
11336: LD_INT 0
11338: PPUSH
11339: PPUSH
11340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: LD_INT 22
11348: PUSH
11349: LD_OWVAR 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 33
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PPUSH
11372: CALL_OW 69
11376: ST_TO_ADDR
// if not tmp then
11377: LD_VAR 0 2
11381: NOT
11382: IFFALSE 11386
// exit ;
11384: GO 11512
// side := 0 ;
11386: LD_ADDR_VAR 0 3
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// for i := 1 to 8 do
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: DOUBLE
11400: LD_INT 1
11402: DEC
11403: ST_TO_ADDR
11404: LD_INT 8
11406: PUSH
11407: FOR_TO
11408: IFFALSE 11456
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11410: LD_OWVAR 2
11414: PUSH
11415: LD_VAR 0 1
11419: NONEQUAL
11420: PUSH
11421: LD_OWVAR 2
11425: PPUSH
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 81
11435: PUSH
11436: LD_INT 2
11438: EQUAL
11439: AND
11440: IFFALSE 11454
// begin side := i ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_VAR 0 1
11451: ST_TO_ADDR
// break ;
11452: GO 11456
// end ;
11454: GO 11407
11456: POP
11457: POP
// if not side then
11458: LD_VAR 0 3
11462: NOT
11463: IFFALSE 11467
// exit ;
11465: GO 11512
// for i := 1 to tmp do
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_VAR 0 2
11481: PUSH
11482: FOR_TO
11483: IFFALSE 11510
// if Prob ( 60 ) then
11485: LD_INT 60
11487: PPUSH
11488: CALL_OW 13
11492: IFFALSE 11508
// SetSide ( i , side ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_VAR 0 3
11503: PPUSH
11504: CALL_OW 235
11508: GO 11482
11510: POP
11511: POP
// end ;
11512: PPOPN 3
11514: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11515: LD_EXP 8
11519: PUSH
11520: LD_EXP 21
11524: AND
11525: IFFALSE 11644
11527: GO 11529
11529: DISABLE
11530: LD_INT 0
11532: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_OWVAR 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 3
11562: PUSH
11563: LD_INT 23
11565: PUSH
11566: LD_INT 0
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: PUSH
11587: FOR_IN
11588: IFFALSE 11642
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 257
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: LD_INT 2
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: LD_INT 4
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: IN
11618: IFFALSE 11640
// SetClass ( un , rand ( 1 , 4 ) ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: LD_INT 4
11630: PPUSH
11631: CALL_OW 12
11635: PPUSH
11636: CALL_OW 336
11640: GO 11587
11642: POP
11643: POP
// end ;
11644: PPOPN 1
11646: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11647: LD_EXP 8
11651: PUSH
11652: LD_EXP 20
11656: AND
11657: IFFALSE 11736
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_OWVAR 2
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 21
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if not tmp then
11701: LD_VAR 0 1
11705: NOT
11706: IFFALSE 11710
// exit ;
11708: GO 11736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11710: LD_VAR 0 1
11714: PUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_VAR 0 1
11722: PPUSH
11723: CALL_OW 12
11727: ARRAY
11728: PPUSH
11729: LD_INT 100
11731: PPUSH
11732: CALL_OW 234
// end ;
11736: PPOPN 1
11738: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11739: LD_EXP 8
11743: PUSH
11744: LD_EXP 22
11748: AND
11749: IFFALSE 11847
11751: GO 11753
11753: DISABLE
11754: LD_INT 0
11756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11757: LD_ADDR_VAR 0 1
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_OWVAR 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 21
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: ST_TO_ADDR
// if not tmp then
11793: LD_VAR 0 1
11797: NOT
11798: IFFALSE 11802
// exit ;
11800: GO 11847
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11802: LD_VAR 0 1
11806: PUSH
11807: LD_INT 1
11809: PPUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 12
11819: ARRAY
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: LD_INT 4
11826: PPUSH
11827: CALL_OW 12
11831: PPUSH
11832: LD_INT 3000
11834: PPUSH
11835: LD_INT 9000
11837: PPUSH
11838: CALL_OW 12
11842: PPUSH
11843: CALL_OW 492
// end ;
11847: PPOPN 1
11849: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11850: LD_EXP 8
11854: PUSH
11855: LD_EXP 23
11859: AND
11860: IFFALSE 11880
11862: GO 11864
11864: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11865: LD_INT 1
11867: PPUSH
11868: LD_OWVAR 2
11872: PPUSH
11873: LD_INT 0
11875: PPUSH
11876: CALL_OW 324
11880: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11881: LD_EXP 8
11885: PUSH
11886: LD_EXP 24
11890: AND
11891: IFFALSE 11974
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11900: LD_ADDR_VAR 0 2
11904: PUSH
11905: LD_INT 22
11907: PUSH
11908: LD_OWVAR 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 21
11919: PUSH
11920: LD_INT 3
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: ST_TO_ADDR
// if not tmp then
11936: LD_VAR 0 2
11940: NOT
11941: IFFALSE 11945
// exit ;
11943: GO 11974
// for i in tmp do
11945: LD_ADDR_VAR 0 1
11949: PUSH
11950: LD_VAR 0 2
11954: PUSH
11955: FOR_IN
11956: IFFALSE 11972
// SetBLevel ( i , 10 ) ;
11958: LD_VAR 0 1
11962: PPUSH
11963: LD_INT 10
11965: PPUSH
11966: CALL_OW 241
11970: GO 11955
11972: POP
11973: POP
// end ;
11974: PPOPN 2
11976: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11977: LD_EXP 8
11981: PUSH
11982: LD_EXP 25
11986: AND
11987: IFFALSE 12098
11989: GO 11991
11991: DISABLE
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11997: LD_ADDR_VAR 0 3
12001: PUSH
12002: LD_INT 22
12004: PUSH
12005: LD_OWVAR 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: ST_TO_ADDR
// if not tmp then
12033: LD_VAR 0 3
12037: NOT
12038: IFFALSE 12042
// exit ;
12040: GO 12098
// un := tmp [ rand ( 1 , tmp ) ] ;
12042: LD_ADDR_VAR 0 2
12046: PUSH
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 1
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 12
12064: ARRAY
12065: ST_TO_ADDR
// if Crawls ( un ) then
12066: LD_VAR 0 2
12070: PPUSH
12071: CALL_OW 318
12075: IFFALSE 12086
// ComWalk ( un ) ;
12077: LD_VAR 0 2
12081: PPUSH
12082: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12086: LD_VAR 0 2
12090: PPUSH
12091: LD_INT 5
12093: PPUSH
12094: CALL_OW 336
// end ;
12098: PPOPN 3
12100: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12101: LD_EXP 8
12105: PUSH
12106: LD_EXP 26
12110: AND
12111: PUSH
12112: LD_OWVAR 67
12116: PUSH
12117: LD_INT 4
12119: LESS
12120: AND
12121: IFFALSE 12140
12123: GO 12125
12125: DISABLE
// begin Difficulty := Difficulty + 1 ;
12126: LD_ADDR_OWVAR 67
12130: PUSH
12131: LD_OWVAR 67
12135: PUSH
12136: LD_INT 1
12138: PLUS
12139: ST_TO_ADDR
// end ;
12140: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12141: LD_EXP 8
12145: PUSH
12146: LD_EXP 27
12150: AND
12151: IFFALSE 12254
12153: GO 12155
12155: DISABLE
12156: LD_INT 0
12158: PPUSH
// begin for i := 1 to 5 do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: DOUBLE
12165: LD_INT 1
12167: DEC
12168: ST_TO_ADDR
12169: LD_INT 5
12171: PUSH
12172: FOR_TO
12173: IFFALSE 12252
// begin uc_nation := nation_nature ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// uc_side := 0 ;
12183: LD_ADDR_OWVAR 20
12187: PUSH
12188: LD_INT 0
12190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12191: LD_ADDR_OWVAR 29
12195: PUSH
12196: LD_INT 12
12198: PUSH
12199: LD_INT 12
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: ST_TO_ADDR
// hc_agressivity := 20 ;
12206: LD_ADDR_OWVAR 35
12210: PUSH
12211: LD_INT 20
12213: ST_TO_ADDR
// hc_class := class_tiger ;
12214: LD_ADDR_OWVAR 28
12218: PUSH
12219: LD_INT 14
12221: ST_TO_ADDR
// hc_gallery :=  ;
12222: LD_ADDR_OWVAR 33
12226: PUSH
12227: LD_STRING 
12229: ST_TO_ADDR
// hc_name :=  ;
12230: LD_ADDR_OWVAR 26
12234: PUSH
12235: LD_STRING 
12237: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12238: CALL_OW 44
12242: PPUSH
12243: LD_INT 0
12245: PPUSH
12246: CALL_OW 51
// end ;
12250: GO 12172
12252: POP
12253: POP
// end ;
12254: PPOPN 1
12256: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12257: LD_EXP 8
12261: PUSH
12262: LD_EXP 28
12266: AND
12267: IFFALSE 12276
12269: GO 12271
12271: DISABLE
// StreamSibBomb ;
12272: CALL 12277 0 0
12276: END
// export function StreamSibBomb ; var i , x , y ; begin
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
// result := false ;
12283: LD_ADDR_VAR 0 1
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// for i := 1 to 16 do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_INT 16
12303: PUSH
12304: FOR_TO
12305: IFFALSE 12504
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 10
12314: PUSH
12315: LD_INT 20
12317: PUSH
12318: LD_INT 30
12320: PUSH
12321: LD_INT 40
12323: PUSH
12324: LD_INT 50
12326: PUSH
12327: LD_INT 60
12329: PUSH
12330: LD_INT 70
12332: PUSH
12333: LD_INT 80
12335: PUSH
12336: LD_INT 90
12338: PUSH
12339: LD_INT 100
12341: PUSH
12342: LD_INT 110
12344: PUSH
12345: LD_INT 120
12347: PUSH
12348: LD_INT 130
12350: PUSH
12351: LD_INT 140
12353: PUSH
12354: LD_INT 150
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 1
12376: PPUSH
12377: LD_INT 15
12379: PPUSH
12380: CALL_OW 12
12384: ARRAY
12385: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12386: LD_ADDR_VAR 0 4
12390: PUSH
12391: LD_INT 10
12393: PUSH
12394: LD_INT 20
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 40
12402: PUSH
12403: LD_INT 50
12405: PUSH
12406: LD_INT 60
12408: PUSH
12409: LD_INT 70
12411: PUSH
12412: LD_INT 80
12414: PUSH
12415: LD_INT 90
12417: PUSH
12418: LD_INT 100
12420: PUSH
12421: LD_INT 110
12423: PUSH
12424: LD_INT 120
12426: PUSH
12427: LD_INT 130
12429: PUSH
12430: LD_INT 140
12432: PUSH
12433: LD_INT 150
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 15
12458: PPUSH
12459: CALL_OW 12
12463: ARRAY
12464: ST_TO_ADDR
// if ValidHex ( x , y ) then
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 488
12479: IFFALSE 12502
// begin result := [ x , y ] ;
12481: LD_ADDR_VAR 0 1
12485: PUSH
12486: LD_VAR 0 3
12490: PUSH
12491: LD_VAR 0 4
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// break ;
12500: GO 12504
// end ; end ;
12502: GO 12304
12504: POP
12505: POP
// if result then
12506: LD_VAR 0 1
12510: IFFALSE 12570
// begin ToLua ( playSibBomb() ) ;
12512: LD_STRING playSibBomb()
12514: PPUSH
12515: CALL_OW 559
// wait ( 0 0$14 ) ;
12519: LD_INT 490
12521: PPUSH
12522: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: LD_VAR 0 1
12539: PUSH
12540: LD_INT 2
12542: ARRAY
12543: PPUSH
12544: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12548: LD_VAR 0 1
12552: PUSH
12553: LD_INT 1
12555: ARRAY
12556: PPUSH
12557: LD_VAR 0 1
12561: PUSH
12562: LD_INT 2
12564: ARRAY
12565: PPUSH
12566: CALL_OW 429
// end ; end ;
12570: LD_VAR 0 1
12574: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12575: LD_EXP 8
12579: PUSH
12580: LD_EXP 30
12584: AND
12585: IFFALSE 12597
12587: GO 12589
12589: DISABLE
// YouLost (  ) ;
12590: LD_STRING 
12592: PPUSH
12593: CALL_OW 104
12597: END
// every 0 0$1 trigger StreamModeActive and sFog do
12598: LD_EXP 8
12602: PUSH
12603: LD_EXP 29
12607: AND
12608: IFFALSE 12622
12610: GO 12612
12612: DISABLE
// FogOff ( your_side ) ;
12613: LD_OWVAR 2
12617: PPUSH
12618: CALL_OW 344
12622: END
// every 0 0$1 trigger StreamModeActive and sSun do
12623: LD_EXP 8
12627: PUSH
12628: LD_EXP 31
12632: AND
12633: IFFALSE 12661
12635: GO 12637
12637: DISABLE
// begin solar_recharge_percent := 0 ;
12638: LD_ADDR_OWVAR 79
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12646: LD_INT 10500
12648: PPUSH
12649: CALL_OW 67
// solar_recharge_percent := 100 ;
12653: LD_ADDR_OWVAR 79
12657: PUSH
12658: LD_INT 100
12660: ST_TO_ADDR
// end ;
12661: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12662: LD_EXP 8
12666: PUSH
12667: LD_EXP 32
12671: AND
12672: IFFALSE 12911
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin tmp := [ ] ;
12682: LD_ADDR_VAR 0 3
12686: PUSH
12687: EMPTY
12688: ST_TO_ADDR
// for i := 1 to 6 do
12689: LD_ADDR_VAR 0 1
12693: PUSH
12694: DOUBLE
12695: LD_INT 1
12697: DEC
12698: ST_TO_ADDR
12699: LD_INT 6
12701: PUSH
12702: FOR_TO
12703: IFFALSE 12808
// begin uc_nation := nation_nature ;
12705: LD_ADDR_OWVAR 21
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// uc_side := 0 ;
12713: LD_ADDR_OWVAR 20
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12721: LD_ADDR_OWVAR 29
12725: PUSH
12726: LD_INT 12
12728: PUSH
12729: LD_INT 12
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: ST_TO_ADDR
// hc_agressivity := 20 ;
12736: LD_ADDR_OWVAR 35
12740: PUSH
12741: LD_INT 20
12743: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12744: LD_ADDR_OWVAR 28
12748: PUSH
12749: LD_INT 17
12751: ST_TO_ADDR
// hc_gallery :=  ;
12752: LD_ADDR_OWVAR 33
12756: PUSH
12757: LD_STRING 
12759: ST_TO_ADDR
// hc_name :=  ;
12760: LD_ADDR_OWVAR 26
12764: PUSH
12765: LD_STRING 
12767: ST_TO_ADDR
// un := CreateHuman ;
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: CALL_OW 44
12777: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 51
// tmp := tmp ^ un ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_VAR 0 3
12799: PUSH
12800: LD_VAR 0 2
12804: ADD
12805: ST_TO_ADDR
// end ;
12806: GO 12702
12808: POP
12809: POP
// repeat wait ( 0 0$1 ) ;
12810: LD_INT 35
12812: PPUSH
12813: CALL_OW 67
// for un in tmp do
12817: LD_ADDR_VAR 0 2
12821: PUSH
12822: LD_VAR 0 3
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12902
// begin if IsDead ( un ) then
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 301
12839: IFFALSE 12859
// begin tmp := tmp diff un ;
12841: LD_ADDR_VAR 0 3
12845: PUSH
12846: LD_VAR 0 3
12850: PUSH
12851: LD_VAR 0 2
12855: DIFF
12856: ST_TO_ADDR
// continue ;
12857: GO 12827
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12859: LD_VAR 0 2
12863: PPUSH
12864: LD_INT 3
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 0
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PPUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: CALL_OW 74
12895: PPUSH
12896: CALL_OW 115
// end ;
12900: GO 12827
12902: POP
12903: POP
// until not tmp ;
12904: LD_VAR 0 3
12908: NOT
12909: IFFALSE 12810
// end ;
12911: PPOPN 3
12913: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12914: LD_EXP 8
12918: PUSH
12919: LD_EXP 33
12923: AND
12924: IFFALSE 12978
12926: GO 12928
12928: DISABLE
// begin ToLua ( displayTroll(); ) ;
12929: LD_STRING displayTroll();
12931: PPUSH
12932: CALL_OW 559
// wait ( 3 3$00 ) ;
12936: LD_INT 6300
12938: PPUSH
12939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12943: LD_STRING hideTroll();
12945: PPUSH
12946: CALL_OW 559
// wait ( 1 1$00 ) ;
12950: LD_INT 2100
12952: PPUSH
12953: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12957: LD_STRING displayTroll();
12959: PPUSH
12960: CALL_OW 559
// wait ( 1 1$00 ) ;
12964: LD_INT 2100
12966: PPUSH
12967: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12971: LD_STRING hideTroll();
12973: PPUSH
12974: CALL_OW 559
// end ;
12978: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12979: LD_EXP 8
12983: PUSH
12984: LD_EXP 34
12988: AND
12989: IFFALSE 13052
12991: GO 12993
12993: DISABLE
12994: LD_INT 0
12996: PPUSH
// begin p := 0 ;
12997: LD_ADDR_VAR 0 1
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// repeat game_speed := 1 ;
13005: LD_ADDR_OWVAR 65
13009: PUSH
13010: LD_INT 1
13012: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13013: LD_INT 35
13015: PPUSH
13016: CALL_OW 67
// p := p + 1 ;
13020: LD_ADDR_VAR 0 1
13024: PUSH
13025: LD_VAR 0 1
13029: PUSH
13030: LD_INT 1
13032: PLUS
13033: ST_TO_ADDR
// until p >= 60 ;
13034: LD_VAR 0 1
13038: PUSH
13039: LD_INT 60
13041: GREATEREQUAL
13042: IFFALSE 13005
// game_speed := 4 ;
13044: LD_ADDR_OWVAR 65
13048: PUSH
13049: LD_INT 4
13051: ST_TO_ADDR
// end ;
13052: PPOPN 1
13054: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13055: LD_EXP 8
13059: PUSH
13060: LD_EXP 35
13064: AND
13065: IFFALSE 13211
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_OWVAR 2
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 0
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// if not depot then
13128: LD_VAR 0 1
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13211
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: LD_VAR 0 1
13146: PUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 12
13159: ARRAY
13160: PPUSH
13161: CALL_OW 274
13165: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13166: LD_VAR 0 2
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: LD_INT 0
13176: PPUSH
13177: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13181: LD_VAR 0 2
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 0
13191: PPUSH
13192: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_INT 3
13203: PPUSH
13204: LD_INT 0
13206: PPUSH
13207: CALL_OW 277
// end ;
13211: PPOPN 2
13213: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13214: LD_EXP 8
13218: PUSH
13219: LD_EXP 36
13223: AND
13224: IFFALSE 13321
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13232: LD_ADDR_VAR 0 1
13236: PUSH
13237: LD_INT 22
13239: PUSH
13240: LD_OWVAR 2
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 21
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: LD_INT 23
13264: PUSH
13265: LD_INT 0
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: ST_TO_ADDR
// if not tmp then
13286: LD_VAR 0 1
13290: NOT
13291: IFFALSE 13295
// exit ;
13293: GO 13321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13295: LD_VAR 0 1
13299: PUSH
13300: LD_INT 1
13302: PPUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 12
13312: ARRAY
13313: PPUSH
13314: LD_INT 200
13316: PPUSH
13317: CALL_OW 234
// end ;
13321: PPOPN 1
13323: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13324: LD_EXP 8
13328: PUSH
13329: LD_EXP 37
13333: AND
13334: IFFALSE 13413
13336: GO 13338
13338: DISABLE
13339: LD_INT 0
13341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_OWVAR 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 21
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: ST_TO_ADDR
// if not tmp then
13378: LD_VAR 0 1
13382: NOT
13383: IFFALSE 13387
// exit ;
13385: GO 13413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13387: LD_VAR 0 1
13391: PUSH
13392: LD_INT 1
13394: PPUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: PPUSH
13406: LD_INT 60
13408: PPUSH
13409: CALL_OW 234
// end ;
13413: PPOPN 1
13415: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13416: LD_EXP 8
13420: PUSH
13421: LD_EXP 38
13425: AND
13426: IFFALSE 13525
13428: GO 13430
13430: DISABLE
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
// begin enable ;
13435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13436: LD_ADDR_VAR 0 1
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_OWVAR 2
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 61
13455: PUSH
13456: EMPTY
13457: LIST
13458: PUSH
13459: LD_INT 33
13461: PUSH
13462: LD_INT 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PPUSH
13474: CALL_OW 69
13478: ST_TO_ADDR
// if not tmp then
13479: LD_VAR 0 1
13483: NOT
13484: IFFALSE 13488
// exit ;
13486: GO 13525
// for i in tmp do
13488: LD_ADDR_VAR 0 2
13492: PUSH
13493: LD_VAR 0 1
13497: PUSH
13498: FOR_IN
13499: IFFALSE 13523
// if IsControledBy ( i ) then
13501: LD_VAR 0 2
13505: PPUSH
13506: CALL_OW 312
13510: IFFALSE 13521
// ComUnlink ( i ) ;
13512: LD_VAR 0 2
13516: PPUSH
13517: CALL_OW 136
13521: GO 13498
13523: POP
13524: POP
// end ;
13525: PPOPN 2
13527: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13528: LD_EXP 8
13532: PUSH
13533: LD_EXP 39
13537: AND
13538: IFFALSE 13678
13540: GO 13542
13542: DISABLE
13543: LD_INT 0
13545: PPUSH
13546: PPUSH
// begin ToLua ( displayPowell(); ) ;
13547: LD_STRING displayPowell();
13549: PPUSH
13550: CALL_OW 559
// uc_side := 0 ;
13554: LD_ADDR_OWVAR 20
13558: PUSH
13559: LD_INT 0
13561: ST_TO_ADDR
// uc_nation := 2 ;
13562: LD_ADDR_OWVAR 21
13566: PUSH
13567: LD_INT 2
13569: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13570: LD_ADDR_OWVAR 37
13574: PUSH
13575: LD_INT 14
13577: ST_TO_ADDR
// vc_engine := engine_siberite ;
13578: LD_ADDR_OWVAR 39
13582: PUSH
13583: LD_INT 3
13585: ST_TO_ADDR
// vc_control := control_apeman ;
13586: LD_ADDR_OWVAR 38
13590: PUSH
13591: LD_INT 5
13593: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13594: LD_ADDR_OWVAR 40
13598: PUSH
13599: LD_INT 29
13601: ST_TO_ADDR
// un := CreateVehicle ;
13602: LD_ADDR_VAR 0 2
13606: PUSH
13607: CALL_OW 45
13611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_INT 22
13638: PUSH
13639: LD_OWVAR 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PPUSH
13653: LD_VAR 0 2
13657: PPUSH
13658: CALL_OW 74
13662: PPUSH
13663: CALL_OW 115
// until IsDead ( un ) ;
13667: LD_VAR 0 2
13671: PPUSH
13672: CALL_OW 301
13676: IFFALSE 13624
// end ;
13678: PPOPN 2
13680: END
// every 0 0$1 trigger StreamModeActive and sStu do
13681: LD_EXP 8
13685: PUSH
13686: LD_EXP 47
13690: AND
13691: IFFALSE 13707
13693: GO 13695
13695: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13696: LD_STRING displayStucuk();
13698: PPUSH
13699: CALL_OW 559
// ResetFog ;
13703: CALL_OW 335
// end ;
13707: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13708: LD_EXP 8
13712: PUSH
13713: LD_EXP 40
13717: AND
13718: IFFALSE 13859
13720: GO 13722
13722: DISABLE
13723: LD_INT 0
13725: PPUSH
13726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_OWVAR 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 21
13746: PUSH
13747: LD_INT 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if not tmp then
13763: LD_VAR 0 2
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 13859
// un := tmp [ rand ( 1 , tmp ) ] ;
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_VAR 0 2
13781: PUSH
13782: LD_INT 1
13784: PPUSH
13785: LD_VAR 0 2
13789: PPUSH
13790: CALL_OW 12
13794: ARRAY
13795: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13796: LD_VAR 0 1
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13808: LD_VAR 0 1
13812: PPUSH
13813: LD_OWVAR 3
13817: PUSH
13818: LD_VAR 0 1
13822: DIFF
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 74
13833: PPUSH
13834: CALL_OW 115
// wait ( 0 0$20 ) ;
13838: LD_INT 700
13840: PPUSH
13841: CALL_OW 67
// SetSide ( un , your_side ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_OWVAR 2
13854: PPUSH
13855: CALL_OW 235
// end ;
13859: PPOPN 2
13861: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13862: LD_EXP 8
13866: PUSH
13867: LD_EXP 41
13871: AND
13872: IFFALSE 13978
13874: GO 13876
13876: DISABLE
13877: LD_INT 0
13879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13880: LD_ADDR_VAR 0 1
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_OWVAR 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 30
13902: PUSH
13903: LD_INT 0
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 30
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PPUSH
13929: CALL_OW 69
13933: ST_TO_ADDR
// if not depot then
13934: LD_VAR 0 1
13938: NOT
13939: IFFALSE 13943
// exit ;
13941: GO 13978
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13943: LD_VAR 0 1
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 250
13956: PPUSH
13957: LD_VAR 0 1
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: CALL_OW 251
13970: PPUSH
13971: LD_INT 70
13973: PPUSH
13974: CALL_OW 495
// end ;
13978: PPOPN 1
13980: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13981: LD_EXP 8
13985: PUSH
13986: LD_EXP 42
13990: AND
13991: IFFALSE 14202
13993: GO 13995
13995: DISABLE
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_OWVAR 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 21
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 5
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 14202
// for i in tmp do
14048: LD_ADDR_VAR 0 1
14052: PUSH
14053: LD_VAR 0 5
14057: PUSH
14058: FOR_IN
14059: IFFALSE 14200
// begin d := rand ( 0 , 5 ) ;
14061: LD_ADDR_VAR 0 4
14065: PUSH
14066: LD_INT 0
14068: PPUSH
14069: LD_INT 5
14071: PPUSH
14072: CALL_OW 12
14076: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 250
14091: PPUSH
14092: LD_VAR 0 4
14096: PPUSH
14097: LD_INT 3
14099: PPUSH
14100: LD_INT 12
14102: PPUSH
14103: CALL_OW 12
14107: PPUSH
14108: CALL_OW 272
14112: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 251
14127: PPUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 12
14138: PPUSH
14139: CALL_OW 12
14143: PPUSH
14144: CALL_OW 273
14148: ST_TO_ADDR
// if ValidHex ( x , y ) then
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: CALL_OW 488
14163: IFFALSE 14198
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: LD_VAR 0 2
14174: PPUSH
14175: LD_VAR 0 3
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 6
14185: PPUSH
14186: CALL_OW 12
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 483
// end ;
14198: GO 14058
14200: POP
14201: POP
// end ;
14202: PPOPN 5
14204: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14205: LD_EXP 8
14209: PUSH
14210: LD_EXP 43
14214: AND
14215: IFFALSE 14309
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14224: LD_ADDR_VAR 0 2
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 32
14243: PUSH
14244: LD_INT 1
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// if not tmp then
14271: LD_VAR 0 2
14275: NOT
14276: IFFALSE 14280
// exit ;
14278: GO 14309
// for i in tmp do
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_VAR 0 2
14289: PUSH
14290: FOR_IN
14291: IFFALSE 14307
// SetFuel ( i , 0 ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 0
14300: PPUSH
14301: CALL_OW 240
14305: GO 14290
14307: POP
14308: POP
// end ;
14309: PPOPN 2
14311: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14312: LD_EXP 8
14316: PUSH
14317: LD_EXP 44
14321: AND
14322: IFFALSE 14388
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14330: LD_ADDR_VAR 0 1
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_OWVAR 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 29
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if not tmp then
14366: LD_VAR 0 1
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14388
// DestroyUnit ( tmp [ 1 ] ) ;
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 1
14382: ARRAY
14383: PPUSH
14384: CALL_OW 65
// end ;
14388: PPOPN 1
14390: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14391: LD_EXP 8
14395: PUSH
14396: LD_EXP 46
14400: AND
14401: IFFALSE 14530
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
// begin uc_side := 0 ;
14409: LD_ADDR_OWVAR 20
14413: PUSH
14414: LD_INT 0
14416: ST_TO_ADDR
// uc_nation := nation_arabian ;
14417: LD_ADDR_OWVAR 21
14421: PUSH
14422: LD_INT 2
14424: ST_TO_ADDR
// hc_gallery :=  ;
14425: LD_ADDR_OWVAR 33
14429: PUSH
14430: LD_STRING 
14432: ST_TO_ADDR
// hc_name :=  ;
14433: LD_ADDR_OWVAR 26
14437: PUSH
14438: LD_STRING 
14440: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14441: LD_INT 1
14443: PPUSH
14444: LD_INT 11
14446: PPUSH
14447: LD_INT 10
14449: PPUSH
14450: CALL_OW 380
// un := CreateHuman ;
14454: LD_ADDR_VAR 0 1
14458: PUSH
14459: CALL_OW 44
14463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14476: LD_INT 35
14478: PPUSH
14479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14483: LD_VAR 0 1
14487: PPUSH
14488: LD_INT 22
14490: PUSH
14491: LD_OWVAR 2
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PPUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 74
14514: PPUSH
14515: CALL_OW 115
// until IsDead ( un ) ;
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 301
14528: IFFALSE 14476
// end ;
14530: PPOPN 1
14532: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14533: LD_EXP 8
14537: PUSH
14538: LD_EXP 48
14542: AND
14543: IFFALSE 14555
14545: GO 14547
14547: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14548: LD_STRING earthquake(getX(game), 0, 32)
14550: PPUSH
14551: CALL_OW 559
14555: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14556: LD_EXP 8
14560: PUSH
14561: LD_EXP 49
14565: AND
14566: IFFALSE 14657
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
// begin enable ;
14574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14575: LD_ADDR_VAR 0 1
14579: PUSH
14580: LD_INT 22
14582: PUSH
14583: LD_OWVAR 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 2
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 33
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PPUSH
14617: CALL_OW 69
14621: ST_TO_ADDR
// if not tmp then
14622: LD_VAR 0 1
14626: NOT
14627: IFFALSE 14631
// exit ;
14629: GO 14657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: PPUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 12
14648: ARRAY
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 234
// end ;
14657: PPOPN 1
14659: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14660: LD_EXP 8
14664: PUSH
14665: LD_EXP 50
14669: AND
14670: IFFALSE 14811
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
14679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: LD_INT 22
14687: PUSH
14688: LD_OWVAR 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 25
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: ST_TO_ADDR
// if not tmp then
14716: LD_VAR 0 3
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14811
// un := tmp [ rand ( 1 , tmp ) ] ;
14725: LD_ADDR_VAR 0 2
14729: PUSH
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: PPUSH
14738: LD_VAR 0 3
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// if Crawls ( un ) then
14749: LD_VAR 0 2
14753: PPUSH
14754: CALL_OW 318
14758: IFFALSE 14769
// ComWalk ( un ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14769: LD_VAR 0 2
14773: PPUSH
14774: LD_INT 9
14776: PPUSH
14777: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14781: LD_INT 28
14783: PPUSH
14784: LD_OWVAR 2
14788: PPUSH
14789: LD_INT 2
14791: PPUSH
14792: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14796: LD_INT 29
14798: PPUSH
14799: LD_OWVAR 2
14803: PPUSH
14804: LD_INT 2
14806: PPUSH
14807: CALL_OW 322
// end ;
14811: PPOPN 3
14813: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14814: LD_EXP 8
14818: PUSH
14819: LD_EXP 51
14823: AND
14824: IFFALSE 14935
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
14833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14834: LD_ADDR_VAR 0 3
14838: PUSH
14839: LD_INT 22
14841: PUSH
14842: LD_OWVAR 2
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 25
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: ST_TO_ADDR
// if not tmp then
14870: LD_VAR 0 3
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 14935
// un := tmp [ rand ( 1 , tmp ) ] ;
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: CALL_OW 12
14901: ARRAY
14902: ST_TO_ADDR
// if Crawls ( un ) then
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 318
14912: IFFALSE 14923
// ComWalk ( un ) ;
14914: LD_VAR 0 2
14918: PPUSH
14919: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14923: LD_VAR 0 2
14927: PPUSH
14928: LD_INT 8
14930: PPUSH
14931: CALL_OW 336
// end ;
14935: PPOPN 3
14937: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14938: LD_EXP 8
14942: PUSH
14943: LD_EXP 52
14947: AND
14948: IFFALSE 15092
14950: GO 14952
14952: DISABLE
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_OWVAR 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 21
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 34
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 34
14999: PUSH
15000: LD_INT 51
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 34
15009: PUSH
15010: LD_INT 32
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: PPUSH
15028: CALL_OW 69
15032: ST_TO_ADDR
// if not tmp then
15033: LD_VAR 0 2
15037: NOT
15038: IFFALSE 15042
// exit ;
15040: GO 15092
// for i in tmp do
15042: LD_ADDR_VAR 0 1
15046: PUSH
15047: LD_VAR 0 2
15051: PUSH
15052: FOR_IN
15053: IFFALSE 15090
// if GetCargo ( i , mat_artifact ) = 0 then
15055: LD_VAR 0 1
15059: PPUSH
15060: LD_INT 4
15062: PPUSH
15063: CALL_OW 289
15067: PUSH
15068: LD_INT 0
15070: EQUAL
15071: IFFALSE 15088
// SetCargo ( i , mat_siberit , 100 ) ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 3
15080: PPUSH
15081: LD_INT 100
15083: PPUSH
15084: CALL_OW 290
15088: GO 15052
15090: POP
15091: POP
// end ;
15092: PPOPN 2
15094: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15095: LD_EXP 8
15099: PUSH
15100: LD_EXP 53
15104: AND
15105: IFFALSE 15288
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 69
15135: ST_TO_ADDR
// if not tmp then
15136: LD_VAR 0 2
15140: NOT
15141: IFFALSE 15145
// exit ;
15143: GO 15288
// for i := 1 to 2 do
15145: LD_ADDR_VAR 0 1
15149: PUSH
15150: DOUBLE
15151: LD_INT 1
15153: DEC
15154: ST_TO_ADDR
15155: LD_INT 2
15157: PUSH
15158: FOR_TO
15159: IFFALSE 15286
// begin uc_side := your_side ;
15161: LD_ADDR_OWVAR 20
15165: PUSH
15166: LD_OWVAR 2
15170: ST_TO_ADDR
// uc_nation := nation_american ;
15171: LD_ADDR_OWVAR 21
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// vc_chassis := us_morphling ;
15179: LD_ADDR_OWVAR 37
15183: PUSH
15184: LD_INT 5
15186: ST_TO_ADDR
// vc_engine := engine_siberite ;
15187: LD_ADDR_OWVAR 39
15191: PUSH
15192: LD_INT 3
15194: ST_TO_ADDR
// vc_control := control_computer ;
15195: LD_ADDR_OWVAR 38
15199: PUSH
15200: LD_INT 3
15202: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15203: LD_ADDR_OWVAR 40
15207: PUSH
15208: LD_INT 10
15210: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15211: LD_VAR 0 2
15215: PUSH
15216: LD_INT 1
15218: ARRAY
15219: PPUSH
15220: CALL_OW 310
15224: NOT
15225: IFFALSE 15272
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15227: CALL_OW 45
15231: PPUSH
15232: LD_VAR 0 2
15236: PUSH
15237: LD_INT 1
15239: ARRAY
15240: PPUSH
15241: CALL_OW 250
15245: PPUSH
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: PPUSH
15255: CALL_OW 251
15259: PPUSH
15260: LD_INT 12
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 50
15270: GO 15284
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15272: CALL_OW 45
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 51
// end ;
15284: GO 15158
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15291: LD_EXP 8
15295: PUSH
15296: LD_EXP 54
15300: AND
15301: IFFALSE 15523
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15314: LD_ADDR_VAR 0 6
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_OWVAR 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: LD_INT 23
15346: PUSH
15347: LD_INT 0
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 6
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15523
// s1 := rand ( 1 , 4 ) ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 4
15387: PPUSH
15388: CALL_OW 12
15392: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15393: LD_ADDR_VAR 0 4
15397: PUSH
15398: LD_VAR 0 6
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 259
15416: ST_TO_ADDR
// if s1 = 1 then
15417: LD_VAR 0 2
15421: PUSH
15422: LD_INT 1
15424: EQUAL
15425: IFFALSE 15445
// s2 := rand ( 2 , 4 ) else
15427: LD_ADDR_VAR 0 3
15431: PUSH
15432: LD_INT 2
15434: PPUSH
15435: LD_INT 4
15437: PPUSH
15438: CALL_OW 12
15442: ST_TO_ADDR
15443: GO 15453
// s2 := 1 ;
15445: LD_ADDR_VAR 0 3
15449: PUSH
15450: LD_INT 1
15452: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15453: LD_ADDR_VAR 0 5
15457: PUSH
15458: LD_VAR 0 6
15462: PUSH
15463: LD_INT 1
15465: ARRAY
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: CALL_OW 259
15476: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15477: LD_VAR 0 6
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 5
15495: PPUSH
15496: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15500: LD_VAR 0 6
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: CALL_OW 237
// end ;
15523: PPOPN 6
15525: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15526: LD_EXP 8
15530: PUSH
15531: LD_EXP 55
15535: AND
15536: IFFALSE 15615
15538: GO 15540
15540: DISABLE
15541: LD_INT 0
15543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15544: LD_ADDR_VAR 0 1
15548: PUSH
15549: LD_INT 22
15551: PUSH
15552: LD_OWVAR 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PPUSH
15575: CALL_OW 69
15579: ST_TO_ADDR
// if not tmp then
15580: LD_VAR 0 1
15584: NOT
15585: IFFALSE 15589
// exit ;
15587: GO 15615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15589: LD_VAR 0 1
15593: PUSH
15594: LD_INT 1
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 12
15606: ARRAY
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 234
// end ;
15615: PPOPN 1
15617: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15618: LD_EXP 8
15622: PUSH
15623: LD_EXP 56
15627: AND
15628: IFFALSE 15740
15630: GO 15632
15632: DISABLE
15633: LD_INT 0
15635: PPUSH
15636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_OWVAR 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: LD_INT 30
15659: PUSH
15660: LD_INT 27
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 30
15669: PUSH
15670: LD_INT 26
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 28
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: ST_TO_ADDR
// if not tmp then
15702: LD_VAR 0 2
15706: NOT
15707: IFFALSE 15711
// exit ;
15709: GO 15740
// for i in tmp do
15711: LD_ADDR_VAR 0 1
15715: PUSH
15716: LD_VAR 0 2
15720: PUSH
15721: FOR_IN
15722: IFFALSE 15738
// SetLives ( i , 1 ) ;
15724: LD_VAR 0 1
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 234
15736: GO 15721
15738: POP
15739: POP
// end ;
15740: PPOPN 2
15742: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15743: LD_EXP 8
15747: PUSH
15748: LD_EXP 57
15752: AND
15753: IFFALSE 16040
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
// begin i := rand ( 1 , 7 ) ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 1
15770: PPUSH
15771: LD_INT 7
15773: PPUSH
15774: CALL_OW 12
15778: ST_TO_ADDR
// case i of 1 :
15779: LD_VAR 0 1
15783: PUSH
15784: LD_INT 1
15786: DOUBLE
15787: EQUAL
15788: IFTRUE 15792
15790: GO 15802
15792: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15793: LD_STRING earthquake(getX(game), 0, 32)
15795: PPUSH
15796: CALL_OW 559
15800: GO 16040
15802: LD_INT 2
15804: DOUBLE
15805: EQUAL
15806: IFTRUE 15810
15808: GO 15824
15810: POP
// begin ToLua ( displayStucuk(); ) ;
15811: LD_STRING displayStucuk();
15813: PPUSH
15814: CALL_OW 559
// ResetFog ;
15818: CALL_OW 335
// end ; 3 :
15822: GO 16040
15824: LD_INT 3
15826: DOUBLE
15827: EQUAL
15828: IFTRUE 15832
15830: GO 15936
15832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15833: LD_ADDR_VAR 0 2
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_OWVAR 2
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 25
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 2
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 16040
// un := tmp [ rand ( 1 , tmp ) ] ;
15878: LD_ADDR_VAR 0 3
15882: PUSH
15883: LD_VAR 0 2
15887: PUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_VAR 0 2
15895: PPUSH
15896: CALL_OW 12
15900: ARRAY
15901: ST_TO_ADDR
// if Crawls ( un ) then
15902: LD_VAR 0 3
15906: PPUSH
15907: CALL_OW 318
15911: IFFALSE 15922
// ComWalk ( un ) ;
15913: LD_VAR 0 3
15917: PPUSH
15918: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_INT 8
15929: PPUSH
15930: CALL_OW 336
// end ; 4 :
15934: GO 16040
15936: LD_INT 4
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 16018
15944: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 30
15964: PUSH
15965: LD_INT 29
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: ST_TO_ADDR
// if not tmp then
15981: LD_VAR 0 2
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16040
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15990: LD_VAR 0 2
15994: PUSH
15995: LD_INT 1
15997: ARRAY
15998: PPUSH
15999: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16003: LD_VAR 0 2
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: CALL_OW 65
// end ; 5 .. 7 :
16016: GO 16040
16018: LD_INT 5
16020: DOUBLE
16021: GREATEREQUAL
16022: IFFALSE 16030
16024: LD_INT 7
16026: DOUBLE
16027: LESSEQUAL
16028: IFTRUE 16032
16030: GO 16039
16032: POP
// StreamSibBomb ; end ;
16033: CALL 12277 0 0
16037: GO 16040
16039: POP
// end ;
16040: PPOPN 3
16042: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16043: LD_EXP 8
16047: PUSH
16048: LD_EXP 58
16052: AND
16053: IFFALSE 16209
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_INT 81
16070: PUSH
16071: LD_OWVAR 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: LD_INT 21
16085: PUSH
16086: LD_INT 1
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: ST_TO_ADDR
// if not tmp then
16117: LD_VAR 0 2
16121: NOT
16122: IFFALSE 16126
// exit ;
16124: GO 16209
// p := 0 ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_INT 0
16133: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16134: LD_INT 35
16136: PPUSH
16137: CALL_OW 67
// p := p + 1 ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 1
16153: PLUS
16154: ST_TO_ADDR
// for i in tmp do
16155: LD_ADDR_VAR 0 1
16159: PUSH
16160: LD_VAR 0 2
16164: PUSH
16165: FOR_IN
16166: IFFALSE 16197
// if GetLives ( i ) < 1000 then
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 256
16177: PUSH
16178: LD_INT 1000
16180: LESS
16181: IFFALSE 16195
// SetLives ( i , 1000 ) ;
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_INT 1000
16190: PPUSH
16191: CALL_OW 234
16195: GO 16165
16197: POP
16198: POP
// until p > 20 ;
16199: LD_VAR 0 3
16203: PUSH
16204: LD_INT 20
16206: GREATER
16207: IFFALSE 16134
// end ;
16209: PPOPN 3
16211: END
// every 0 0$1 trigger StreamModeActive and sTime do
16212: LD_EXP 8
16216: PUSH
16217: LD_EXP 59
16221: AND
16222: IFFALSE 16257
16224: GO 16226
16226: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16227: LD_INT 28
16229: PPUSH
16230: LD_OWVAR 2
16234: PPUSH
16235: LD_INT 2
16237: PPUSH
16238: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16242: LD_INT 30
16244: PPUSH
16245: LD_OWVAR 2
16249: PPUSH
16250: LD_INT 2
16252: PPUSH
16253: CALL_OW 322
// end ;
16257: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16258: LD_EXP 8
16262: PUSH
16263: LD_EXP 60
16267: AND
16268: IFFALSE 16389
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_OWVAR 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 21
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 3
16306: PUSH
16307: LD_INT 23
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: ST_TO_ADDR
// if not tmp then
16331: LD_VAR 0 2
16335: NOT
16336: IFFALSE 16340
// exit ;
16338: GO 16389
// for i in tmp do
16340: LD_ADDR_VAR 0 1
16344: PUSH
16345: LD_VAR 0 2
16349: PUSH
16350: FOR_IN
16351: IFFALSE 16387
// begin if Crawls ( i ) then
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 318
16362: IFFALSE 16373
// ComWalk ( i ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 138
// SetClass ( i , 2 ) ;
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_INT 2
16380: PPUSH
16381: CALL_OW 336
// end ;
16385: GO 16350
16387: POP
16388: POP
// end ;
16389: PPOPN 2
16391: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16392: LD_EXP 8
16396: PUSH
16397: LD_EXP 61
16401: AND
16402: IFFALSE 16690
16404: GO 16406
16406: DISABLE
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
16411: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16412: LD_OWVAR 2
16416: PPUSH
16417: LD_INT 9
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: LD_INT 1
16425: PPUSH
16426: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16430: LD_INT 9
16432: PPUSH
16433: LD_OWVAR 2
16437: PPUSH
16438: CALL_OW 343
// uc_side := 9 ;
16442: LD_ADDR_OWVAR 20
16446: PUSH
16447: LD_INT 9
16449: ST_TO_ADDR
// uc_nation := 2 ;
16450: LD_ADDR_OWVAR 21
16454: PUSH
16455: LD_INT 2
16457: ST_TO_ADDR
// hc_name := Dark Warrior ;
16458: LD_ADDR_OWVAR 26
16462: PUSH
16463: LD_STRING Dark Warrior
16465: ST_TO_ADDR
// hc_gallery :=  ;
16466: LD_ADDR_OWVAR 33
16470: PUSH
16471: LD_STRING 
16473: ST_TO_ADDR
// hc_noskilllimit := true ;
16474: LD_ADDR_OWVAR 76
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16482: LD_ADDR_OWVAR 31
16486: PUSH
16487: LD_INT 30
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 30
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: ST_TO_ADDR
// un := CreateHuman ;
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: CALL_OW 44
16514: ST_TO_ADDR
// hc_noskilllimit := false ;
16515: LD_ADDR_OWVAR 76
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16523: LD_VAR 0 3
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 51
// ToLua ( playRanger() ) ;
16535: LD_STRING playRanger()
16537: PPUSH
16538: CALL_OW 559
// p := 0 ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16550: LD_INT 35
16552: PPUSH
16553: CALL_OW 67
// p := p + 1 ;
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_VAR 0 2
16566: PUSH
16567: LD_INT 1
16569: PLUS
16570: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16571: LD_VAR 0 3
16575: PPUSH
16576: CALL_OW 256
16580: PUSH
16581: LD_INT 1000
16583: LESS
16584: IFFALSE 16598
// SetLives ( un , 1000 ) ;
16586: LD_VAR 0 3
16590: PPUSH
16591: LD_INT 1000
16593: PPUSH
16594: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16598: LD_VAR 0 3
16602: PPUSH
16603: LD_INT 81
16605: PUSH
16606: LD_OWVAR 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 91
16617: PUSH
16618: LD_VAR 0 3
16622: PUSH
16623: LD_INT 30
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: CALL_OW 74
16649: PPUSH
16650: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 80
16661: GREATER
16662: PUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: CALL_OW 301
16672: OR
16673: IFFALSE 16550
// if un then
16675: LD_VAR 0 3
16679: IFFALSE 16690
// RemoveUnit ( un ) ;
16681: LD_VAR 0 3
16685: PPUSH
16686: CALL_OW 64
// end ;
16690: PPOPN 3
16692: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16693: LD_EXP 62
16697: IFFALSE 16813
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16707: LD_ADDR_VAR 0 2
16711: PUSH
16712: LD_INT 81
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16743: LD_STRING playComputer()
16745: PPUSH
16746: CALL_OW 559
// if not tmp then
16750: LD_VAR 0 2
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 16813
// for i in tmp do
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16811
// for j := 1 to 4 do
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: DOUBLE
16778: LD_INT 1
16780: DEC
16781: ST_TO_ADDR
16782: LD_INT 4
16784: PUSH
16785: FOR_TO
16786: IFFALSE 16807
// SetSkill ( i , j , 10 ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_INT 10
16800: PPUSH
16801: CALL_OW 237
16805: GO 16785
16807: POP
16808: POP
16809: GO 16769
16811: POP
16812: POP
// end ;
16813: PPOPN 3
16815: END
// every 0 0$1 trigger s30 do var i , tmp ;
16816: LD_EXP 63
16820: IFFALSE 16889
16822: GO 16824
16824: DISABLE
16825: LD_INT 0
16827: PPUSH
16828: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: ST_TO_ADDR
// if not tmp then
16851: LD_VAR 0 2
16855: NOT
16856: IFFALSE 16860
// exit ;
16858: GO 16889
// for i in tmp do
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_VAR 0 2
16869: PUSH
16870: FOR_IN
16871: IFFALSE 16887
// SetLives ( i , 300 ) ;
16873: LD_VAR 0 1
16877: PPUSH
16878: LD_INT 300
16880: PPUSH
16881: CALL_OW 234
16885: GO 16870
16887: POP
16888: POP
// end ;
16889: PPOPN 2
16891: END
// every 0 0$1 trigger s60 do var i , tmp ;
16892: LD_EXP 64
16896: IFFALSE 16965
16898: GO 16900
16900: DISABLE
16901: LD_INT 0
16903: PPUSH
16904: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16905: LD_ADDR_VAR 0 2
16909: PUSH
16910: LD_INT 22
16912: PUSH
16913: LD_OWVAR 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PPUSH
16922: CALL_OW 69
16926: ST_TO_ADDR
// if not tmp then
16927: LD_VAR 0 2
16931: NOT
16932: IFFALSE 16936
// exit ;
16934: GO 16965
// for i in tmp do
16936: LD_ADDR_VAR 0 1
16940: PUSH
16941: LD_VAR 0 2
16945: PUSH
16946: FOR_IN
16947: IFFALSE 16963
// SetLives ( i , 600 ) ;
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_INT 600
16956: PPUSH
16957: CALL_OW 234
16961: GO 16946
16963: POP
16964: POP
// end ;
16965: PPOPN 2
16967: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16968: LD_INT 0
16970: PPUSH
// case cmd of 301 :
16971: LD_VAR 0 1
16975: PUSH
16976: LD_INT 301
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17016
16984: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16985: LD_VAR 0 6
16989: PPUSH
16990: LD_VAR 0 7
16994: PPUSH
16995: LD_VAR 0 8
16999: PPUSH
17000: LD_VAR 0 4
17004: PPUSH
17005: LD_VAR 0 5
17009: PPUSH
17010: CALL 18217 0 5
17014: GO 17137
17016: LD_INT 302
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17061
17024: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17025: LD_VAR 0 6
17029: PPUSH
17030: LD_VAR 0 7
17034: PPUSH
17035: LD_VAR 0 8
17039: PPUSH
17040: LD_VAR 0 9
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_VAR 0 5
17054: PPUSH
17055: CALL 18308 0 6
17059: GO 17137
17061: LD_INT 303
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17106
17069: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17070: LD_VAR 0 6
17074: PPUSH
17075: LD_VAR 0 7
17079: PPUSH
17080: LD_VAR 0 8
17084: PPUSH
17085: LD_VAR 0 9
17089: PPUSH
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL 17142 0 6
17104: GO 17137
17106: LD_INT 304
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17136
17114: POP
// hHackTeleport ( unit , x , y ) ; end ;
17115: LD_VAR 0 2
17119: PPUSH
17120: LD_VAR 0 4
17124: PPUSH
17125: LD_VAR 0 5
17129: PPUSH
17130: CALL 18901 0 3
17134: GO 17137
17136: POP
// end ;
17137: LD_VAR 0 12
17141: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17146: LD_VAR 0 1
17150: PUSH
17151: LD_INT 1
17153: LESS
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 3
17162: GREATER
17163: OR
17164: PUSH
17165: LD_VAR 0 5
17169: PPUSH
17170: LD_VAR 0 6
17174: PPUSH
17175: CALL_OW 428
17179: OR
17180: IFFALSE 17184
// exit ;
17182: GO 17904
// uc_side := your_side ;
17184: LD_ADDR_OWVAR 20
17188: PUSH
17189: LD_OWVAR 2
17193: ST_TO_ADDR
// uc_nation := nation ;
17194: LD_ADDR_OWVAR 21
17198: PUSH
17199: LD_VAR 0 1
17203: ST_TO_ADDR
// bc_level = 1 ;
17204: LD_ADDR_OWVAR 43
17208: PUSH
17209: LD_INT 1
17211: ST_TO_ADDR
// case btype of 1 :
17212: LD_VAR 0 2
17216: PUSH
17217: LD_INT 1
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17236
17225: POP
// bc_type := b_depot ; 2 :
17226: LD_ADDR_OWVAR 42
17230: PUSH
17231: LD_INT 0
17233: ST_TO_ADDR
17234: GO 17848
17236: LD_INT 2
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17255
17244: POP
// bc_type := b_warehouse ; 3 :
17245: LD_ADDR_OWVAR 42
17249: PUSH
17250: LD_INT 1
17252: ST_TO_ADDR
17253: GO 17848
17255: LD_INT 3
17257: DOUBLE
17258: EQUAL
17259: IFTRUE 17263
17261: GO 17274
17263: POP
// bc_type := b_lab ; 4 .. 9 :
17264: LD_ADDR_OWVAR 42
17268: PUSH
17269: LD_INT 6
17271: ST_TO_ADDR
17272: GO 17848
17274: LD_INT 4
17276: DOUBLE
17277: GREATEREQUAL
17278: IFFALSE 17286
17280: LD_INT 9
17282: DOUBLE
17283: LESSEQUAL
17284: IFTRUE 17288
17286: GO 17340
17288: POP
// begin bc_type := b_lab_half ;
17289: LD_ADDR_OWVAR 42
17293: PUSH
17294: LD_INT 7
17296: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17297: LD_ADDR_OWVAR 44
17301: PUSH
17302: LD_INT 10
17304: PUSH
17305: LD_INT 11
17307: PUSH
17308: LD_INT 12
17310: PUSH
17311: LD_INT 15
17313: PUSH
17314: LD_INT 14
17316: PUSH
17317: LD_INT 13
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 3
17335: MINUS
17336: ARRAY
17337: ST_TO_ADDR
// end ; 10 .. 13 :
17338: GO 17848
17340: LD_INT 10
17342: DOUBLE
17343: GREATEREQUAL
17344: IFFALSE 17352
17346: LD_INT 13
17348: DOUBLE
17349: LESSEQUAL
17350: IFTRUE 17354
17352: GO 17431
17354: POP
// begin bc_type := b_lab_full ;
17355: LD_ADDR_OWVAR 42
17359: PUSH
17360: LD_INT 8
17362: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17363: LD_ADDR_OWVAR 44
17367: PUSH
17368: LD_INT 10
17370: PUSH
17371: LD_INT 12
17373: PUSH
17374: LD_INT 14
17376: PUSH
17377: LD_INT 13
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: LD_VAR 0 2
17390: PUSH
17391: LD_INT 9
17393: MINUS
17394: ARRAY
17395: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17396: LD_ADDR_OWVAR 45
17400: PUSH
17401: LD_INT 11
17403: PUSH
17404: LD_INT 15
17406: PUSH
17407: LD_INT 12
17409: PUSH
17410: LD_INT 15
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PUSH
17419: LD_VAR 0 2
17423: PUSH
17424: LD_INT 9
17426: MINUS
17427: ARRAY
17428: ST_TO_ADDR
// end ; 14 :
17429: GO 17848
17431: LD_INT 14
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17450
17439: POP
// bc_type := b_workshop ; 15 :
17440: LD_ADDR_OWVAR 42
17444: PUSH
17445: LD_INT 2
17447: ST_TO_ADDR
17448: GO 17848
17450: LD_INT 15
17452: DOUBLE
17453: EQUAL
17454: IFTRUE 17458
17456: GO 17469
17458: POP
// bc_type := b_factory ; 16 :
17459: LD_ADDR_OWVAR 42
17463: PUSH
17464: LD_INT 3
17466: ST_TO_ADDR
17467: GO 17848
17469: LD_INT 16
17471: DOUBLE
17472: EQUAL
17473: IFTRUE 17477
17475: GO 17488
17477: POP
// bc_type := b_ext_gun ; 17 :
17478: LD_ADDR_OWVAR 42
17482: PUSH
17483: LD_INT 17
17485: ST_TO_ADDR
17486: GO 17848
17488: LD_INT 17
17490: DOUBLE
17491: EQUAL
17492: IFTRUE 17496
17494: GO 17524
17496: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17497: LD_ADDR_OWVAR 42
17501: PUSH
17502: LD_INT 19
17504: PUSH
17505: LD_INT 23
17507: PUSH
17508: LD_INT 19
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: PUSH
17516: LD_VAR 0 1
17520: ARRAY
17521: ST_TO_ADDR
17522: GO 17848
17524: LD_INT 18
17526: DOUBLE
17527: EQUAL
17528: IFTRUE 17532
17530: GO 17543
17532: POP
// bc_type := b_ext_radar ; 19 :
17533: LD_ADDR_OWVAR 42
17537: PUSH
17538: LD_INT 20
17540: ST_TO_ADDR
17541: GO 17848
17543: LD_INT 19
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17562
17551: POP
// bc_type := b_ext_radio ; 20 :
17552: LD_ADDR_OWVAR 42
17556: PUSH
17557: LD_INT 22
17559: ST_TO_ADDR
17560: GO 17848
17562: LD_INT 20
17564: DOUBLE
17565: EQUAL
17566: IFTRUE 17570
17568: GO 17581
17570: POP
// bc_type := b_ext_siberium ; 21 :
17571: LD_ADDR_OWVAR 42
17575: PUSH
17576: LD_INT 21
17578: ST_TO_ADDR
17579: GO 17848
17581: LD_INT 21
17583: DOUBLE
17584: EQUAL
17585: IFTRUE 17589
17587: GO 17600
17589: POP
// bc_type := b_ext_computer ; 22 :
17590: LD_ADDR_OWVAR 42
17594: PUSH
17595: LD_INT 24
17597: ST_TO_ADDR
17598: GO 17848
17600: LD_INT 22
17602: DOUBLE
17603: EQUAL
17604: IFTRUE 17608
17606: GO 17619
17608: POP
// bc_type := b_ext_track ; 23 :
17609: LD_ADDR_OWVAR 42
17613: PUSH
17614: LD_INT 16
17616: ST_TO_ADDR
17617: GO 17848
17619: LD_INT 23
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17638
17627: POP
// bc_type := b_ext_laser ; 24 :
17628: LD_ADDR_OWVAR 42
17632: PUSH
17633: LD_INT 25
17635: ST_TO_ADDR
17636: GO 17848
17638: LD_INT 24
17640: DOUBLE
17641: EQUAL
17642: IFTRUE 17646
17644: GO 17657
17646: POP
// bc_type := b_control_tower ; 25 :
17647: LD_ADDR_OWVAR 42
17651: PUSH
17652: LD_INT 36
17654: ST_TO_ADDR
17655: GO 17848
17657: LD_INT 25
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17676
17665: POP
// bc_type := b_breastwork ; 26 :
17666: LD_ADDR_OWVAR 42
17670: PUSH
17671: LD_INT 31
17673: ST_TO_ADDR
17674: GO 17848
17676: LD_INT 26
17678: DOUBLE
17679: EQUAL
17680: IFTRUE 17684
17682: GO 17695
17684: POP
// bc_type := b_bunker ; 27 :
17685: LD_ADDR_OWVAR 42
17689: PUSH
17690: LD_INT 32
17692: ST_TO_ADDR
17693: GO 17848
17695: LD_INT 27
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17714
17703: POP
// bc_type := b_turret ; 28 :
17704: LD_ADDR_OWVAR 42
17708: PUSH
17709: LD_INT 33
17711: ST_TO_ADDR
17712: GO 17848
17714: LD_INT 28
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17733
17722: POP
// bc_type := b_armoury ; 29 :
17723: LD_ADDR_OWVAR 42
17727: PUSH
17728: LD_INT 4
17730: ST_TO_ADDR
17731: GO 17848
17733: LD_INT 29
17735: DOUBLE
17736: EQUAL
17737: IFTRUE 17741
17739: GO 17752
17741: POP
// bc_type := b_barracks ; 30 :
17742: LD_ADDR_OWVAR 42
17746: PUSH
17747: LD_INT 5
17749: ST_TO_ADDR
17750: GO 17848
17752: LD_INT 30
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17760
17758: GO 17771
17760: POP
// bc_type := b_solar_power ; 31 :
17761: LD_ADDR_OWVAR 42
17765: PUSH
17766: LD_INT 27
17768: ST_TO_ADDR
17769: GO 17848
17771: LD_INT 31
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17779
17777: GO 17790
17779: POP
// bc_type := b_oil_power ; 32 :
17780: LD_ADDR_OWVAR 42
17784: PUSH
17785: LD_INT 26
17787: ST_TO_ADDR
17788: GO 17848
17790: LD_INT 32
17792: DOUBLE
17793: EQUAL
17794: IFTRUE 17798
17796: GO 17809
17798: POP
// bc_type := b_siberite_power ; 33 :
17799: LD_ADDR_OWVAR 42
17803: PUSH
17804: LD_INT 28
17806: ST_TO_ADDR
17807: GO 17848
17809: LD_INT 33
17811: DOUBLE
17812: EQUAL
17813: IFTRUE 17817
17815: GO 17828
17817: POP
// bc_type := b_oil_mine ; 34 :
17818: LD_ADDR_OWVAR 42
17822: PUSH
17823: LD_INT 29
17825: ST_TO_ADDR
17826: GO 17848
17828: LD_INT 34
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17847
17836: POP
// bc_type := b_siberite_mine ; end ;
17837: LD_ADDR_OWVAR 42
17841: PUSH
17842: LD_INT 30
17844: ST_TO_ADDR
17845: GO 17848
17847: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17848: LD_ADDR_VAR 0 8
17852: PUSH
17853: LD_VAR 0 5
17857: PPUSH
17858: LD_VAR 0 6
17862: PPUSH
17863: LD_VAR 0 3
17867: PPUSH
17868: CALL_OW 47
17872: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17873: LD_OWVAR 42
17877: PUSH
17878: LD_INT 32
17880: PUSH
17881: LD_INT 33
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: IN
17888: IFFALSE 17904
// PlaceWeaponTurret ( b , weapon ) ;
17890: LD_VAR 0 8
17894: PPUSH
17895: LD_VAR 0 4
17899: PPUSH
17900: CALL_OW 431
// end ;
17904: LD_VAR 0 7
17908: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17909: LD_INT 0
17911: PPUSH
17912: PPUSH
17913: PPUSH
17914: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17915: LD_ADDR_VAR 0 4
17919: PUSH
17920: LD_INT 22
17922: PUSH
17923: LD_OWVAR 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: LD_INT 30
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 30
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: ST_TO_ADDR
// if not tmp then
17969: LD_VAR 0 4
17973: NOT
17974: IFFALSE 17978
// exit ;
17976: GO 18037
// for i in tmp do
17978: LD_ADDR_VAR 0 2
17982: PUSH
17983: LD_VAR 0 4
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18035
// for j = 1 to 3 do
17991: LD_ADDR_VAR 0 3
17995: PUSH
17996: DOUBLE
17997: LD_INT 1
17999: DEC
18000: ST_TO_ADDR
18001: LD_INT 3
18003: PUSH
18004: FOR_TO
18005: IFFALSE 18031
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 274
18016: PPUSH
18017: LD_VAR 0 3
18021: PPUSH
18022: LD_INT 99999
18024: PPUSH
18025: CALL_OW 277
18029: GO 18004
18031: POP
18032: POP
18033: GO 17988
18035: POP
18036: POP
// end ;
18037: LD_VAR 0 1
18041: RET
// export function hHackSetLevel10 ; var i , j ; begin
18042: LD_INT 0
18044: PPUSH
18045: PPUSH
18046: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18047: LD_ADDR_VAR 0 2
18051: PUSH
18052: LD_INT 21
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: PUSH
18067: FOR_IN
18068: IFFALSE 18120
// if IsSelected ( i ) then
18070: LD_VAR 0 2
18074: PPUSH
18075: CALL_OW 306
18079: IFFALSE 18118
// begin for j := 1 to 4 do
18081: LD_ADDR_VAR 0 3
18085: PUSH
18086: DOUBLE
18087: LD_INT 1
18089: DEC
18090: ST_TO_ADDR
18091: LD_INT 4
18093: PUSH
18094: FOR_TO
18095: IFFALSE 18116
// SetSkill ( i , j , 10 ) ;
18097: LD_VAR 0 2
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 10
18109: PPUSH
18110: CALL_OW 237
18114: GO 18094
18116: POP
18117: POP
// end ;
18118: GO 18067
18120: POP
18121: POP
// end ;
18122: LD_VAR 0 1
18126: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18127: LD_INT 0
18129: PPUSH
18130: PPUSH
18131: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18132: LD_ADDR_VAR 0 2
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_OWVAR 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 21
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: PUSH
18168: FOR_IN
18169: IFFALSE 18210
// begin for j := 1 to 4 do
18171: LD_ADDR_VAR 0 3
18175: PUSH
18176: DOUBLE
18177: LD_INT 1
18179: DEC
18180: ST_TO_ADDR
18181: LD_INT 4
18183: PUSH
18184: FOR_TO
18185: IFFALSE 18206
// SetSkill ( i , j , 10 ) ;
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 10
18199: PPUSH
18200: CALL_OW 237
18204: GO 18184
18206: POP
18207: POP
// end ;
18208: GO 18168
18210: POP
18211: POP
// end ;
18212: LD_VAR 0 1
18216: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18217: LD_INT 0
18219: PPUSH
// uc_side := your_side ;
18220: LD_ADDR_OWVAR 20
18224: PUSH
18225: LD_OWVAR 2
18229: ST_TO_ADDR
// uc_nation := nation ;
18230: LD_ADDR_OWVAR 21
18234: PUSH
18235: LD_VAR 0 1
18239: ST_TO_ADDR
// InitHc ;
18240: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18244: LD_INT 0
18246: PPUSH
18247: LD_VAR 0 2
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18261: LD_VAR 0 4
18265: PPUSH
18266: LD_VAR 0 5
18270: PPUSH
18271: CALL_OW 428
18275: PUSH
18276: LD_INT 0
18278: EQUAL
18279: IFFALSE 18303
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18281: CALL_OW 44
18285: PPUSH
18286: LD_VAR 0 4
18290: PPUSH
18291: LD_VAR 0 5
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 48
// end ;
18303: LD_VAR 0 6
18307: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// uc_side := your_side ;
18312: LD_ADDR_OWVAR 20
18316: PUSH
18317: LD_OWVAR 2
18321: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18322: LD_VAR 0 1
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 2
18332: PUSH
18333: LD_INT 3
18335: PUSH
18336: LD_INT 4
18338: PUSH
18339: LD_INT 5
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: IN
18349: IFFALSE 18361
// uc_nation := nation_american else
18351: LD_ADDR_OWVAR 21
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
18359: GO 18404
// if chassis in [ 11 , 12 , 13 , 14 ] then
18361: LD_VAR 0 1
18365: PUSH
18366: LD_INT 11
18368: PUSH
18369: LD_INT 12
18371: PUSH
18372: LD_INT 13
18374: PUSH
18375: LD_INT 14
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: IN
18384: IFFALSE 18396
// uc_nation := nation_arabian else
18386: LD_ADDR_OWVAR 21
18390: PUSH
18391: LD_INT 2
18393: ST_TO_ADDR
18394: GO 18404
// uc_nation := nation_russian ;
18396: LD_ADDR_OWVAR 21
18400: PUSH
18401: LD_INT 3
18403: ST_TO_ADDR
// vc_chassis := chassis ;
18404: LD_ADDR_OWVAR 37
18408: PUSH
18409: LD_VAR 0 1
18413: ST_TO_ADDR
// vc_engine := engine ;
18414: LD_ADDR_OWVAR 39
18418: PUSH
18419: LD_VAR 0 2
18423: ST_TO_ADDR
// vc_control := control ;
18424: LD_ADDR_OWVAR 38
18428: PUSH
18429: LD_VAR 0 3
18433: ST_TO_ADDR
// vc_weapon := weapon ;
18434: LD_ADDR_OWVAR 40
18438: PUSH
18439: LD_VAR 0 4
18443: ST_TO_ADDR
// un := CreateVehicle ;
18444: LD_ADDR_VAR 0 8
18448: PUSH
18449: CALL_OW 45
18453: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18454: LD_VAR 0 8
18458: PPUSH
18459: LD_INT 0
18461: PPUSH
18462: LD_INT 5
18464: PPUSH
18465: CALL_OW 12
18469: PPUSH
18470: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18474: LD_VAR 0 8
18478: PPUSH
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_VAR 0 6
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: CALL_OW 48
// end ;
18496: LD_VAR 0 7
18500: RET
// export hInvincible ; every 1 do
18501: GO 18503
18503: DISABLE
// hInvincible := [ ] ;
18504: LD_ADDR_EXP 65
18508: PUSH
18509: EMPTY
18510: ST_TO_ADDR
18511: END
// every 10 do var i ;
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
// begin enable ;
18518: ENABLE
// if not hInvincible then
18519: LD_EXP 65
18523: NOT
18524: IFFALSE 18528
// exit ;
18526: GO 18572
// for i in hInvincible do
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: LD_EXP 65
18537: PUSH
18538: FOR_IN
18539: IFFALSE 18570
// if GetLives ( i ) < 1000 then
18541: LD_VAR 0 1
18545: PPUSH
18546: CALL_OW 256
18550: PUSH
18551: LD_INT 1000
18553: LESS
18554: IFFALSE 18568
// SetLives ( i , 1000 ) ;
18556: LD_VAR 0 1
18560: PPUSH
18561: LD_INT 1000
18563: PPUSH
18564: CALL_OW 234
18568: GO 18538
18570: POP
18571: POP
// end ;
18572: PPOPN 1
18574: END
// export function hHackInvincible ; var i ; begin
18575: LD_INT 0
18577: PPUSH
18578: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18579: LD_ADDR_VAR 0 2
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 21
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 21
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: PPUSH
18612: CALL_OW 69
18616: PUSH
18617: FOR_IN
18618: IFFALSE 18679
// if IsSelected ( i ) then
18620: LD_VAR 0 2
18624: PPUSH
18625: CALL_OW 306
18629: IFFALSE 18677
// begin if i in hInvincible then
18631: LD_VAR 0 2
18635: PUSH
18636: LD_EXP 65
18640: IN
18641: IFFALSE 18661
// hInvincible := hInvincible diff i else
18643: LD_ADDR_EXP 65
18647: PUSH
18648: LD_EXP 65
18652: PUSH
18653: LD_VAR 0 2
18657: DIFF
18658: ST_TO_ADDR
18659: GO 18677
// hInvincible := hInvincible union i ;
18661: LD_ADDR_EXP 65
18665: PUSH
18666: LD_EXP 65
18670: PUSH
18671: LD_VAR 0 2
18675: UNION
18676: ST_TO_ADDR
// end ;
18677: GO 18617
18679: POP
18680: POP
// end ;
18681: LD_VAR 0 1
18685: RET
// export function hHackInvisible ; var i , j ; begin
18686: LD_INT 0
18688: PPUSH
18689: PPUSH
18690: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18691: LD_ADDR_VAR 0 2
18695: PUSH
18696: LD_INT 21
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 69
18710: PUSH
18711: FOR_IN
18712: IFFALSE 18736
// if IsSelected ( i ) then
18714: LD_VAR 0 2
18718: PPUSH
18719: CALL_OW 306
18723: IFFALSE 18734
// ComForceInvisible ( i ) ;
18725: LD_VAR 0 2
18729: PPUSH
18730: CALL_OW 496
18734: GO 18711
18736: POP
18737: POP
// end ;
18738: LD_VAR 0 1
18742: RET
// export function hHackChangeYourSide ; begin
18743: LD_INT 0
18745: PPUSH
// if your_side = 8 then
18746: LD_OWVAR 2
18750: PUSH
18751: LD_INT 8
18753: EQUAL
18754: IFFALSE 18766
// your_side := 0 else
18756: LD_ADDR_OWVAR 2
18760: PUSH
18761: LD_INT 0
18763: ST_TO_ADDR
18764: GO 18780
// your_side := your_side + 1 ;
18766: LD_ADDR_OWVAR 2
18770: PUSH
18771: LD_OWVAR 2
18775: PUSH
18776: LD_INT 1
18778: PLUS
18779: ST_TO_ADDR
// end ;
18780: LD_VAR 0 1
18784: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
18789: PPUSH
// for i in all_units do
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: LD_OWVAR 3
18799: PUSH
18800: FOR_IN
18801: IFFALSE 18879
// if IsSelected ( i ) then
18803: LD_VAR 0 2
18807: PPUSH
18808: CALL_OW 306
18812: IFFALSE 18877
// begin j := GetSide ( i ) ;
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: LD_VAR 0 2
18823: PPUSH
18824: CALL_OW 255
18828: ST_TO_ADDR
// if j = 8 then
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 8
18836: EQUAL
18837: IFFALSE 18849
// j := 0 else
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
18847: GO 18863
// j := j + 1 ;
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_VAR 0 3
18858: PUSH
18859: LD_INT 1
18861: PLUS
18862: ST_TO_ADDR
// SetSide ( i , j ) ;
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_VAR 0 3
18872: PPUSH
18873: CALL_OW 235
// end ;
18877: GO 18800
18879: POP
18880: POP
// end ;
18881: LD_VAR 0 1
18885: RET
// export function hHackFog ; begin
18886: LD_INT 0
18888: PPUSH
// FogOff ( true ) ;
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 344
// end ;
18896: LD_VAR 0 1
18900: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18901: LD_INT 0
18903: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18904: LD_VAR 0 1
18908: PPUSH
18909: LD_VAR 0 2
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: LD_INT 1
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 483
// CenterOnXY ( x , y ) ;
18929: LD_VAR 0 2
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: CALL_OW 84
// end ;
18943: LD_VAR 0 4
18947: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18948: LD_INT 0
18950: PPUSH
18951: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18952: LD_VAR 0 1
18956: NOT
18957: PUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: LD_VAR 0 3
18967: PPUSH
18968: CALL_OW 488
18972: NOT
18973: OR
18974: PUSH
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL_OW 266
18984: PUSH
18985: LD_INT 3
18987: NONEQUAL
18988: PUSH
18989: LD_VAR 0 1
18993: PPUSH
18994: CALL_OW 247
18998: PUSH
18999: LD_INT 1
19001: EQUAL
19002: NOT
19003: AND
19004: OR
19005: IFFALSE 19009
// exit ;
19007: GO 19158
// if GetType ( factory ) = unit_human then
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 247
19018: PUSH
19019: LD_INT 1
19021: EQUAL
19022: IFFALSE 19039
// factory := IsInUnit ( factory ) ;
19024: LD_ADDR_VAR 0 1
19028: PUSH
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 310
19038: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19039: LD_VAR 0 1
19043: PPUSH
19044: CALL_OW 266
19048: PUSH
19049: LD_INT 3
19051: NONEQUAL
19052: IFFALSE 19056
// exit ;
19054: GO 19158
// if HexInfo ( x , y ) = factory then
19056: LD_VAR 0 2
19060: PPUSH
19061: LD_VAR 0 3
19065: PPUSH
19066: CALL_OW 428
19070: PUSH
19071: LD_VAR 0 1
19075: EQUAL
19076: IFFALSE 19103
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19078: LD_ADDR_EXP 66
19082: PUSH
19083: LD_EXP 66
19087: PPUSH
19088: LD_VAR 0 1
19092: PPUSH
19093: LD_INT 0
19095: PPUSH
19096: CALL_OW 1
19100: ST_TO_ADDR
19101: GO 19154
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19103: LD_ADDR_EXP 66
19107: PUSH
19108: LD_EXP 66
19112: PPUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 255
19127: PUSH
19128: LD_VAR 0 1
19132: PUSH
19133: LD_VAR 0 2
19137: PUSH
19138: LD_VAR 0 3
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: PPUSH
19149: CALL_OW 1
19153: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19154: CALL 19163 0 0
// end ;
19158: LD_VAR 0 4
19162: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19163: LD_INT 0
19165: PPUSH
19166: PPUSH
19167: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19168: LD_STRING resetFactoryWaypoint();
19170: PPUSH
19171: CALL_OW 559
// if factoryWaypoints then
19175: LD_EXP 66
19179: IFFALSE 19305
// begin list := PrepareArray ( factoryWaypoints ) ;
19181: LD_ADDR_VAR 0 3
19185: PUSH
19186: LD_EXP 66
19190: PPUSH
19191: CALL 65774 0 1
19195: ST_TO_ADDR
// for i := 1 to list do
19196: LD_ADDR_VAR 0 2
19200: PUSH
19201: DOUBLE
19202: LD_INT 1
19204: DEC
19205: ST_TO_ADDR
19206: LD_VAR 0 3
19210: PUSH
19211: FOR_TO
19212: IFFALSE 19303
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19214: LD_STRING setFactoryWaypointXY(
19216: PUSH
19217: LD_VAR 0 3
19221: PUSH
19222: LD_VAR 0 2
19226: ARRAY
19227: PUSH
19228: LD_INT 1
19230: ARRAY
19231: STR
19232: PUSH
19233: LD_STRING ,
19235: STR
19236: PUSH
19237: LD_VAR 0 3
19241: PUSH
19242: LD_VAR 0 2
19246: ARRAY
19247: PUSH
19248: LD_INT 2
19250: ARRAY
19251: STR
19252: PUSH
19253: LD_STRING ,
19255: STR
19256: PUSH
19257: LD_VAR 0 3
19261: PUSH
19262: LD_VAR 0 2
19266: ARRAY
19267: PUSH
19268: LD_INT 3
19270: ARRAY
19271: STR
19272: PUSH
19273: LD_STRING ,
19275: STR
19276: PUSH
19277: LD_VAR 0 3
19281: PUSH
19282: LD_VAR 0 2
19286: ARRAY
19287: PUSH
19288: LD_INT 4
19290: ARRAY
19291: STR
19292: PUSH
19293: LD_STRING )
19295: STR
19296: PPUSH
19297: CALL_OW 559
19301: GO 19211
19303: POP
19304: POP
// end ; end ;
19305: LD_VAR 0 1
19309: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19310: LD_INT 0
19312: PPUSH
// if HexInfo ( x , y ) = warehouse then
19313: LD_VAR 0 2
19317: PPUSH
19318: LD_VAR 0 3
19322: PPUSH
19323: CALL_OW 428
19327: PUSH
19328: LD_VAR 0 1
19332: EQUAL
19333: IFFALSE 19360
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19335: LD_ADDR_EXP 67
19339: PUSH
19340: LD_EXP 67
19344: PPUSH
19345: LD_VAR 0 1
19349: PPUSH
19350: LD_INT 0
19352: PPUSH
19353: CALL_OW 1
19357: ST_TO_ADDR
19358: GO 19411
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19360: LD_ADDR_EXP 67
19364: PUSH
19365: LD_EXP 67
19369: PPUSH
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_VAR 0 1
19379: PPUSH
19380: CALL_OW 255
19384: PUSH
19385: LD_VAR 0 1
19389: PUSH
19390: LD_VAR 0 2
19394: PUSH
19395: LD_VAR 0 3
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: PPUSH
19406: CALL_OW 1
19410: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19411: CALL 19420 0 0
// end ;
19415: LD_VAR 0 4
19419: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19420: LD_INT 0
19422: PPUSH
19423: PPUSH
19424: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19425: LD_STRING resetWarehouseGatheringPoints();
19427: PPUSH
19428: CALL_OW 559
// if warehouseGatheringPoints then
19432: LD_EXP 67
19436: IFFALSE 19562
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19438: LD_ADDR_VAR 0 3
19442: PUSH
19443: LD_EXP 67
19447: PPUSH
19448: CALL 65774 0 1
19452: ST_TO_ADDR
// for i := 1 to list do
19453: LD_ADDR_VAR 0 2
19457: PUSH
19458: DOUBLE
19459: LD_INT 1
19461: DEC
19462: ST_TO_ADDR
19463: LD_VAR 0 3
19467: PUSH
19468: FOR_TO
19469: IFFALSE 19560
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19471: LD_STRING setWarehouseGatheringPointXY(
19473: PUSH
19474: LD_VAR 0 3
19478: PUSH
19479: LD_VAR 0 2
19483: ARRAY
19484: PUSH
19485: LD_INT 1
19487: ARRAY
19488: STR
19489: PUSH
19490: LD_STRING ,
19492: STR
19493: PUSH
19494: LD_VAR 0 3
19498: PUSH
19499: LD_VAR 0 2
19503: ARRAY
19504: PUSH
19505: LD_INT 2
19507: ARRAY
19508: STR
19509: PUSH
19510: LD_STRING ,
19512: STR
19513: PUSH
19514: LD_VAR 0 3
19518: PUSH
19519: LD_VAR 0 2
19523: ARRAY
19524: PUSH
19525: LD_INT 3
19527: ARRAY
19528: STR
19529: PUSH
19530: LD_STRING ,
19532: STR
19533: PUSH
19534: LD_VAR 0 3
19538: PUSH
19539: LD_VAR 0 2
19543: ARRAY
19544: PUSH
19545: LD_INT 4
19547: ARRAY
19548: STR
19549: PUSH
19550: LD_STRING )
19552: STR
19553: PPUSH
19554: CALL_OW 559
19558: GO 19468
19560: POP
19561: POP
// end ; end ;
19562: LD_VAR 0 1
19566: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19567: LD_EXP 67
19571: IFFALSE 20256
19573: GO 19575
19575: DISABLE
19576: LD_INT 0
19578: PPUSH
19579: PPUSH
19580: PPUSH
19581: PPUSH
19582: PPUSH
19583: PPUSH
19584: PPUSH
19585: PPUSH
19586: PPUSH
// begin enable ;
19587: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: LD_EXP 67
19597: PPUSH
19598: CALL 65774 0 1
19602: ST_TO_ADDR
// if not list then
19603: LD_VAR 0 3
19607: NOT
19608: IFFALSE 19612
// exit ;
19610: GO 20256
// for i := 1 to list do
19612: LD_ADDR_VAR 0 1
19616: PUSH
19617: DOUBLE
19618: LD_INT 1
19620: DEC
19621: ST_TO_ADDR
19622: LD_VAR 0 3
19626: PUSH
19627: FOR_TO
19628: IFFALSE 20254
// begin depot := list [ i ] [ 2 ] ;
19630: LD_ADDR_VAR 0 8
19634: PUSH
19635: LD_VAR 0 3
19639: PUSH
19640: LD_VAR 0 1
19644: ARRAY
19645: PUSH
19646: LD_INT 2
19648: ARRAY
19649: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19650: LD_ADDR_VAR 0 5
19654: PUSH
19655: LD_VAR 0 3
19659: PUSH
19660: LD_VAR 0 1
19664: ARRAY
19665: PUSH
19666: LD_INT 1
19668: ARRAY
19669: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19670: LD_VAR 0 8
19674: PPUSH
19675: CALL_OW 301
19679: PUSH
19680: LD_VAR 0 5
19684: PUSH
19685: LD_VAR 0 8
19689: PPUSH
19690: CALL_OW 255
19694: NONEQUAL
19695: OR
19696: IFFALSE 19725
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19698: LD_ADDR_EXP 67
19702: PUSH
19703: LD_EXP 67
19707: PPUSH
19708: LD_VAR 0 8
19712: PPUSH
19713: LD_INT 0
19715: PPUSH
19716: CALL_OW 1
19720: ST_TO_ADDR
// exit ;
19721: POP
19722: POP
19723: GO 20256
// end ; x := list [ i ] [ 3 ] ;
19725: LD_ADDR_VAR 0 6
19729: PUSH
19730: LD_VAR 0 3
19734: PUSH
19735: LD_VAR 0 1
19739: ARRAY
19740: PUSH
19741: LD_INT 3
19743: ARRAY
19744: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19745: LD_ADDR_VAR 0 7
19749: PUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_VAR 0 1
19759: ARRAY
19760: PUSH
19761: LD_INT 4
19763: ARRAY
19764: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19765: LD_ADDR_VAR 0 9
19769: PUSH
19770: LD_VAR 0 6
19774: PPUSH
19775: LD_VAR 0 7
19779: PPUSH
19780: LD_INT 16
19782: PPUSH
19783: CALL 64362 0 3
19787: ST_TO_ADDR
// if not cratesNearbyPoint then
19788: LD_VAR 0 9
19792: NOT
19793: IFFALSE 19799
// exit ;
19795: POP
19796: POP
19797: GO 20256
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19799: LD_ADDR_VAR 0 4
19803: PUSH
19804: LD_INT 22
19806: PUSH
19807: LD_VAR 0 5
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 3
19818: PUSH
19819: LD_INT 60
19821: PUSH
19822: EMPTY
19823: LIST
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 91
19831: PUSH
19832: LD_VAR 0 8
19836: PUSH
19837: LD_INT 6
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 25
19850: PUSH
19851: LD_INT 2
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 25
19860: PUSH
19861: LD_INT 16
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: PPUSH
19879: CALL_OW 69
19883: PUSH
19884: LD_VAR 0 8
19888: PPUSH
19889: CALL_OW 313
19893: PPUSH
19894: LD_INT 3
19896: PUSH
19897: LD_INT 60
19899: PUSH
19900: EMPTY
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 25
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 25
19922: PUSH
19923: LD_INT 16
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PPUSH
19939: CALL_OW 72
19943: UNION
19944: ST_TO_ADDR
// if tmp then
19945: LD_VAR 0 4
19949: IFFALSE 20029
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19951: LD_ADDR_VAR 0 4
19955: PUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: LD_INT 3
19963: PPUSH
19964: CALL 62331 0 2
19968: ST_TO_ADDR
// for j in tmp do
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_VAR 0 4
19978: PUSH
19979: FOR_IN
19980: IFFALSE 20023
// begin if IsInUnit ( j ) then
19982: LD_VAR 0 2
19986: PPUSH
19987: CALL_OW 310
19991: IFFALSE 20002
// ComExit ( j ) ;
19993: LD_VAR 0 2
19997: PPUSH
19998: CALL 62414 0 1
// AddComCollect ( j , x , y ) ;
20002: LD_VAR 0 2
20006: PPUSH
20007: LD_VAR 0 6
20011: PPUSH
20012: LD_VAR 0 7
20016: PPUSH
20017: CALL_OW 177
// end ;
20021: GO 19979
20023: POP
20024: POP
// exit ;
20025: POP
20026: POP
20027: GO 20256
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20029: LD_ADDR_VAR 0 4
20033: PUSH
20034: LD_INT 22
20036: PUSH
20037: LD_VAR 0 5
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 91
20048: PUSH
20049: LD_VAR 0 8
20053: PUSH
20054: LD_INT 8
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 34
20067: PUSH
20068: LD_INT 12
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 34
20077: PUSH
20078: LD_INT 51
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 34
20087: PUSH
20088: LD_INT 32
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 34
20097: PUSH
20098: LD_INT 89
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: PPUSH
20117: CALL_OW 69
20121: ST_TO_ADDR
// if tmp then
20122: LD_VAR 0 4
20126: IFFALSE 20252
// begin for j in tmp do
20128: LD_ADDR_VAR 0 2
20132: PUSH
20133: LD_VAR 0 4
20137: PUSH
20138: FOR_IN
20139: IFFALSE 20250
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 262
20150: PUSH
20151: LD_INT 3
20153: EQUAL
20154: PUSH
20155: LD_VAR 0 2
20159: PPUSH
20160: CALL_OW 261
20164: PUSH
20165: LD_INT 20
20167: GREATER
20168: OR
20169: PUSH
20170: LD_VAR 0 2
20174: PPUSH
20175: CALL_OW 314
20179: NOT
20180: AND
20181: PUSH
20182: LD_VAR 0 2
20186: PPUSH
20187: CALL_OW 263
20191: PUSH
20192: LD_INT 1
20194: NONEQUAL
20195: PUSH
20196: LD_VAR 0 2
20200: PPUSH
20201: CALL_OW 311
20205: OR
20206: AND
20207: IFFALSE 20248
// begin ComCollect ( j , x , y ) ;
20209: LD_VAR 0 2
20213: PPUSH
20214: LD_VAR 0 6
20218: PPUSH
20219: LD_VAR 0 7
20223: PPUSH
20224: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20228: LD_VAR 0 2
20232: PPUSH
20233: LD_VAR 0 8
20237: PPUSH
20238: CALL_OW 172
// exit ;
20242: POP
20243: POP
20244: POP
20245: POP
20246: GO 20256
// end ;
20248: GO 20138
20250: POP
20251: POP
// end ; end ;
20252: GO 19627
20254: POP
20255: POP
// end ; end_of_file
20256: PPOPN 9
20258: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
20263: PPUSH
20264: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 264
20274: PUSH
20275: LD_INT 91
20277: EQUAL
20278: IFFALSE 20350
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20280: LD_INT 68
20282: PPUSH
20283: LD_VAR 0 1
20287: PPUSH
20288: CALL_OW 255
20292: PPUSH
20293: CALL_OW 321
20297: PUSH
20298: LD_INT 2
20300: EQUAL
20301: IFFALSE 20313
// eff := 70 else
20303: LD_ADDR_VAR 0 4
20307: PUSH
20308: LD_INT 70
20310: ST_TO_ADDR
20311: GO 20321
// eff := 30 ;
20313: LD_ADDR_VAR 0 4
20317: PUSH
20318: LD_INT 30
20320: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 250
20330: PPUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 251
20340: PPUSH
20341: LD_VAR 0 4
20345: PPUSH
20346: CALL_OW 495
// end ; end ;
20350: LD_VAR 0 2
20354: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20355: LD_INT 0
20357: PPUSH
// end ;
20358: LD_VAR 0 4
20362: RET
// export function SOS_Command ( cmd ) ; begin
20363: LD_INT 0
20365: PPUSH
// end ;
20366: LD_VAR 0 2
20370: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20371: LD_INT 0
20373: PPUSH
// end ;
20374: LD_VAR 0 6
20378: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20379: LD_INT 0
20381: PPUSH
20382: PPUSH
// if not vehicle or not factory then
20383: LD_VAR 0 1
20387: NOT
20388: PUSH
20389: LD_VAR 0 2
20393: NOT
20394: OR
20395: IFFALSE 20399
// exit ;
20397: GO 20630
// if factoryWaypoints >= factory then
20399: LD_EXP 66
20403: PUSH
20404: LD_VAR 0 2
20408: GREATEREQUAL
20409: IFFALSE 20630
// if factoryWaypoints [ factory ] then
20411: LD_EXP 66
20415: PUSH
20416: LD_VAR 0 2
20420: ARRAY
20421: IFFALSE 20630
// begin if GetControl ( vehicle ) = control_manual then
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 263
20432: PUSH
20433: LD_INT 1
20435: EQUAL
20436: IFFALSE 20517
// begin driver := IsDrivenBy ( vehicle ) ;
20438: LD_ADDR_VAR 0 4
20442: PUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 311
20452: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20453: LD_VAR 0 4
20457: PPUSH
20458: LD_EXP 66
20462: PUSH
20463: LD_VAR 0 2
20467: ARRAY
20468: PUSH
20469: LD_INT 3
20471: ARRAY
20472: PPUSH
20473: LD_EXP 66
20477: PUSH
20478: LD_VAR 0 2
20482: ARRAY
20483: PUSH
20484: LD_INT 4
20486: ARRAY
20487: PPUSH
20488: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20492: LD_VAR 0 4
20496: PPUSH
20497: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20501: LD_VAR 0 4
20505: PPUSH
20506: LD_VAR 0 2
20510: PPUSH
20511: CALL_OW 180
// end else
20515: GO 20630
// if GetControl ( vehicle ) = control_remote then
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 263
20526: PUSH
20527: LD_INT 2
20529: EQUAL
20530: IFFALSE 20591
// begin wait ( 0 0$2 ) ;
20532: LD_INT 70
20534: PPUSH
20535: CALL_OW 67
// if Connect ( vehicle ) then
20539: LD_VAR 0 1
20543: PPUSH
20544: CALL 32654 0 1
20548: IFFALSE 20589
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20550: LD_VAR 0 1
20554: PPUSH
20555: LD_EXP 66
20559: PUSH
20560: LD_VAR 0 2
20564: ARRAY
20565: PUSH
20566: LD_INT 3
20568: ARRAY
20569: PPUSH
20570: LD_EXP 66
20574: PUSH
20575: LD_VAR 0 2
20579: ARRAY
20580: PUSH
20581: LD_INT 4
20583: ARRAY
20584: PPUSH
20585: CALL_OW 171
// end else
20589: GO 20630
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20591: LD_VAR 0 1
20595: PPUSH
20596: LD_EXP 66
20600: PUSH
20601: LD_VAR 0 2
20605: ARRAY
20606: PUSH
20607: LD_INT 3
20609: ARRAY
20610: PPUSH
20611: LD_EXP 66
20615: PUSH
20616: LD_VAR 0 2
20620: ARRAY
20621: PUSH
20622: LD_INT 4
20624: ARRAY
20625: PPUSH
20626: CALL_OW 171
// end ; end ;
20630: LD_VAR 0 3
20634: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20635: LD_INT 0
20637: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20638: LD_VAR 0 1
20642: PUSH
20643: LD_INT 250
20645: EQUAL
20646: PUSH
20647: LD_VAR 0 2
20651: PPUSH
20652: CALL_OW 264
20656: PUSH
20657: LD_INT 81
20659: EQUAL
20660: AND
20661: IFFALSE 20682
// MinerPlaceMine ( unit , x , y ) ;
20663: LD_VAR 0 2
20667: PPUSH
20668: LD_VAR 0 4
20672: PPUSH
20673: LD_VAR 0 5
20677: PPUSH
20678: CALL 23067 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20682: LD_VAR 0 1
20686: PUSH
20687: LD_INT 251
20689: EQUAL
20690: PUSH
20691: LD_VAR 0 2
20695: PPUSH
20696: CALL_OW 264
20700: PUSH
20701: LD_INT 81
20703: EQUAL
20704: AND
20705: IFFALSE 20726
// MinerDetonateMine ( unit , x , y ) ;
20707: LD_VAR 0 2
20711: PPUSH
20712: LD_VAR 0 4
20716: PPUSH
20717: LD_VAR 0 5
20721: PPUSH
20722: CALL 23342 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20726: LD_VAR 0 1
20730: PUSH
20731: LD_INT 252
20733: EQUAL
20734: PUSH
20735: LD_VAR 0 2
20739: PPUSH
20740: CALL_OW 264
20744: PUSH
20745: LD_INT 81
20747: EQUAL
20748: AND
20749: IFFALSE 20770
// MinerCreateMinefield ( unit , x , y ) ;
20751: LD_VAR 0 2
20755: PPUSH
20756: LD_VAR 0 4
20760: PPUSH
20761: LD_VAR 0 5
20765: PPUSH
20766: CALL 23759 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20770: LD_VAR 0 1
20774: PUSH
20775: LD_INT 253
20777: EQUAL
20778: PUSH
20779: LD_VAR 0 2
20783: PPUSH
20784: CALL_OW 257
20788: PUSH
20789: LD_INT 5
20791: EQUAL
20792: AND
20793: IFFALSE 20814
// ComBinocular ( unit , x , y ) ;
20795: LD_VAR 0 2
20799: PPUSH
20800: LD_VAR 0 4
20804: PPUSH
20805: LD_VAR 0 5
20809: PPUSH
20810: CALL 24128 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 254
20821: EQUAL
20822: PUSH
20823: LD_VAR 0 2
20827: PPUSH
20828: CALL_OW 264
20832: PUSH
20833: LD_INT 99
20835: EQUAL
20836: AND
20837: PUSH
20838: LD_VAR 0 3
20842: PPUSH
20843: CALL_OW 263
20847: PUSH
20848: LD_INT 3
20850: EQUAL
20851: AND
20852: IFFALSE 20868
// HackDestroyVehicle ( unit , selectedUnit ) ;
20854: LD_VAR 0 2
20858: PPUSH
20859: LD_VAR 0 3
20863: PPUSH
20864: CALL 22431 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20868: LD_VAR 0 1
20872: PUSH
20873: LD_INT 255
20875: EQUAL
20876: PUSH
20877: LD_VAR 0 2
20881: PPUSH
20882: CALL_OW 264
20886: PUSH
20887: LD_INT 14
20889: PUSH
20890: LD_INT 53
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: IN
20897: AND
20898: PUSH
20899: LD_VAR 0 4
20903: PPUSH
20904: LD_VAR 0 5
20908: PPUSH
20909: CALL_OW 488
20913: AND
20914: IFFALSE 20938
// CutTreeXYR ( unit , x , y , 12 ) ;
20916: LD_VAR 0 2
20920: PPUSH
20921: LD_VAR 0 4
20925: PPUSH
20926: LD_VAR 0 5
20930: PPUSH
20931: LD_INT 12
20933: PPUSH
20934: CALL 21001 0 4
// if cmd = 256 then
20938: LD_VAR 0 1
20942: PUSH
20943: LD_INT 256
20945: EQUAL
20946: IFFALSE 20967
// SetFactoryWaypoint ( unit , x , y ) ;
20948: LD_VAR 0 2
20952: PPUSH
20953: LD_VAR 0 4
20957: PPUSH
20958: LD_VAR 0 5
20962: PPUSH
20963: CALL 18948 0 3
// if cmd = 257 then
20967: LD_VAR 0 1
20971: PUSH
20972: LD_INT 257
20974: EQUAL
20975: IFFALSE 20996
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20977: LD_VAR 0 2
20981: PPUSH
20982: LD_VAR 0 4
20986: PPUSH
20987: LD_VAR 0 5
20991: PPUSH
20992: CALL 19310 0 3
// end ;
20996: LD_VAR 0 6
21000: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21012: LD_VAR 0 1
21016: NOT
21017: PUSH
21018: LD_VAR 0 2
21022: PPUSH
21023: LD_VAR 0 3
21027: PPUSH
21028: CALL_OW 488
21032: NOT
21033: OR
21034: PUSH
21035: LD_VAR 0 4
21039: NOT
21040: OR
21041: IFFALSE 21045
// exit ;
21043: GO 21385
// list := [ ] ;
21045: LD_ADDR_VAR 0 13
21049: PUSH
21050: EMPTY
21051: ST_TO_ADDR
// if x - r < 0 then
21052: LD_VAR 0 2
21056: PUSH
21057: LD_VAR 0 4
21061: MINUS
21062: PUSH
21063: LD_INT 0
21065: LESS
21066: IFFALSE 21078
// min_x := 0 else
21068: LD_ADDR_VAR 0 7
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
21076: GO 21094
// min_x := x - r ;
21078: LD_ADDR_VAR 0 7
21082: PUSH
21083: LD_VAR 0 2
21087: PUSH
21088: LD_VAR 0 4
21092: MINUS
21093: ST_TO_ADDR
// if y - r < 0 then
21094: LD_VAR 0 3
21098: PUSH
21099: LD_VAR 0 4
21103: MINUS
21104: PUSH
21105: LD_INT 0
21107: LESS
21108: IFFALSE 21120
// min_y := 0 else
21110: LD_ADDR_VAR 0 8
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
21118: GO 21136
// min_y := y - r ;
21120: LD_ADDR_VAR 0 8
21124: PUSH
21125: LD_VAR 0 3
21129: PUSH
21130: LD_VAR 0 4
21134: MINUS
21135: ST_TO_ADDR
// max_x := x + r ;
21136: LD_ADDR_VAR 0 9
21140: PUSH
21141: LD_VAR 0 2
21145: PUSH
21146: LD_VAR 0 4
21150: PLUS
21151: ST_TO_ADDR
// max_y := y + r ;
21152: LD_ADDR_VAR 0 10
21156: PUSH
21157: LD_VAR 0 3
21161: PUSH
21162: LD_VAR 0 4
21166: PLUS
21167: ST_TO_ADDR
// for _x = min_x to max_x do
21168: LD_ADDR_VAR 0 11
21172: PUSH
21173: DOUBLE
21174: LD_VAR 0 7
21178: DEC
21179: ST_TO_ADDR
21180: LD_VAR 0 9
21184: PUSH
21185: FOR_TO
21186: IFFALSE 21303
// for _y = min_y to max_y do
21188: LD_ADDR_VAR 0 12
21192: PUSH
21193: DOUBLE
21194: LD_VAR 0 8
21198: DEC
21199: ST_TO_ADDR
21200: LD_VAR 0 10
21204: PUSH
21205: FOR_TO
21206: IFFALSE 21299
// begin if not ValidHex ( _x , _y ) then
21208: LD_VAR 0 11
21212: PPUSH
21213: LD_VAR 0 12
21217: PPUSH
21218: CALL_OW 488
21222: NOT
21223: IFFALSE 21227
// continue ;
21225: GO 21205
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21227: LD_VAR 0 11
21231: PPUSH
21232: LD_VAR 0 12
21236: PPUSH
21237: CALL_OW 351
21241: PUSH
21242: LD_VAR 0 11
21246: PPUSH
21247: LD_VAR 0 12
21251: PPUSH
21252: CALL_OW 554
21256: AND
21257: IFFALSE 21297
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21259: LD_ADDR_VAR 0 13
21263: PUSH
21264: LD_VAR 0 13
21268: PPUSH
21269: LD_VAR 0 13
21273: PUSH
21274: LD_INT 1
21276: PLUS
21277: PPUSH
21278: LD_VAR 0 11
21282: PUSH
21283: LD_VAR 0 12
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PPUSH
21292: CALL_OW 2
21296: ST_TO_ADDR
// end ;
21297: GO 21205
21299: POP
21300: POP
21301: GO 21185
21303: POP
21304: POP
// if not list then
21305: LD_VAR 0 13
21309: NOT
21310: IFFALSE 21314
// exit ;
21312: GO 21385
// for i in list do
21314: LD_ADDR_VAR 0 6
21318: PUSH
21319: LD_VAR 0 13
21323: PUSH
21324: FOR_IN
21325: IFFALSE 21383
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21327: LD_VAR 0 1
21331: PPUSH
21332: LD_STRING M
21334: PUSH
21335: LD_VAR 0 6
21339: PUSH
21340: LD_INT 1
21342: ARRAY
21343: PUSH
21344: LD_VAR 0 6
21348: PUSH
21349: LD_INT 2
21351: ARRAY
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: PPUSH
21377: CALL_OW 447
21381: GO 21324
21383: POP
21384: POP
// end ;
21385: LD_VAR 0 5
21389: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21390: LD_EXP 69
21394: NOT
21395: IFFALSE 21445
21397: GO 21399
21399: DISABLE
// begin initHack := true ;
21400: LD_ADDR_EXP 69
21404: PUSH
21405: LD_INT 1
21407: ST_TO_ADDR
// hackTanks := [ ] ;
21408: LD_ADDR_EXP 70
21412: PUSH
21413: EMPTY
21414: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21415: LD_ADDR_EXP 71
21419: PUSH
21420: EMPTY
21421: ST_TO_ADDR
// hackLimit := 3 ;
21422: LD_ADDR_EXP 72
21426: PUSH
21427: LD_INT 3
21429: ST_TO_ADDR
// hackDist := 12 ;
21430: LD_ADDR_EXP 73
21434: PUSH
21435: LD_INT 12
21437: ST_TO_ADDR
// hackCounter := [ ] ;
21438: LD_ADDR_EXP 74
21442: PUSH
21443: EMPTY
21444: ST_TO_ADDR
// end ;
21445: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21446: LD_EXP 69
21450: PUSH
21451: LD_INT 34
21453: PUSH
21454: LD_INT 99
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PPUSH
21461: CALL_OW 69
21465: AND
21466: IFFALSE 21719
21468: GO 21470
21470: DISABLE
21471: LD_INT 0
21473: PPUSH
21474: PPUSH
// begin enable ;
21475: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21476: LD_ADDR_VAR 0 1
21480: PUSH
21481: LD_INT 34
21483: PUSH
21484: LD_INT 99
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PPUSH
21491: CALL_OW 69
21495: PUSH
21496: FOR_IN
21497: IFFALSE 21717
// begin if not i in hackTanks then
21499: LD_VAR 0 1
21503: PUSH
21504: LD_EXP 70
21508: IN
21509: NOT
21510: IFFALSE 21593
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21512: LD_ADDR_EXP 70
21516: PUSH
21517: LD_EXP 70
21521: PPUSH
21522: LD_EXP 70
21526: PUSH
21527: LD_INT 1
21529: PLUS
21530: PPUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: CALL_OW 1
21540: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21541: LD_ADDR_EXP 71
21545: PUSH
21546: LD_EXP 71
21550: PPUSH
21551: LD_EXP 71
21555: PUSH
21556: LD_INT 1
21558: PLUS
21559: PPUSH
21560: EMPTY
21561: PPUSH
21562: CALL_OW 1
21566: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21567: LD_ADDR_EXP 74
21571: PUSH
21572: LD_EXP 74
21576: PPUSH
21577: LD_EXP 74
21581: PUSH
21582: LD_INT 1
21584: PLUS
21585: PPUSH
21586: EMPTY
21587: PPUSH
21588: CALL_OW 1
21592: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21593: LD_VAR 0 1
21597: PPUSH
21598: CALL_OW 302
21602: NOT
21603: IFFALSE 21616
// begin HackUnlinkAll ( i ) ;
21605: LD_VAR 0 1
21609: PPUSH
21610: CALL 21722 0 1
// continue ;
21614: GO 21496
// end ; HackCheckCapturedStatus ( i ) ;
21616: LD_VAR 0 1
21620: PPUSH
21621: CALL 22165 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21625: LD_ADDR_VAR 0 2
21629: PUSH
21630: LD_INT 81
21632: PUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: CALL_OW 255
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 33
21649: PUSH
21650: LD_INT 3
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 91
21659: PUSH
21660: LD_VAR 0 1
21664: PUSH
21665: LD_EXP 73
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 50
21677: PUSH
21678: EMPTY
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: ST_TO_ADDR
// if not tmp then
21692: LD_VAR 0 2
21696: NOT
21697: IFFALSE 21701
// continue ;
21699: GO 21496
// HackLink ( i , tmp ) ;
21701: LD_VAR 0 1
21705: PPUSH
21706: LD_VAR 0 2
21710: PPUSH
21711: CALL 21858 0 2
// end ;
21715: GO 21496
21717: POP
21718: POP
// end ;
21719: PPOPN 2
21721: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21722: LD_INT 0
21724: PPUSH
21725: PPUSH
21726: PPUSH
// if not hack in hackTanks then
21727: LD_VAR 0 1
21731: PUSH
21732: LD_EXP 70
21736: IN
21737: NOT
21738: IFFALSE 21742
// exit ;
21740: GO 21853
// index := GetElementIndex ( hackTanks , hack ) ;
21742: LD_ADDR_VAR 0 4
21746: PUSH
21747: LD_EXP 70
21751: PPUSH
21752: LD_VAR 0 1
21756: PPUSH
21757: CALL 29470 0 2
21761: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21762: LD_EXP 71
21766: PUSH
21767: LD_VAR 0 4
21771: ARRAY
21772: IFFALSE 21853
// begin for i in hackTanksCaptured [ index ] do
21774: LD_ADDR_VAR 0 3
21778: PUSH
21779: LD_EXP 71
21783: PUSH
21784: LD_VAR 0 4
21788: ARRAY
21789: PUSH
21790: FOR_IN
21791: IFFALSE 21817
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21793: LD_VAR 0 3
21797: PUSH
21798: LD_INT 1
21800: ARRAY
21801: PPUSH
21802: LD_VAR 0 3
21806: PUSH
21807: LD_INT 2
21809: ARRAY
21810: PPUSH
21811: CALL_OW 235
21815: GO 21790
21817: POP
21818: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21819: LD_ADDR_EXP 71
21823: PUSH
21824: LD_EXP 71
21828: PPUSH
21829: LD_VAR 0 4
21833: PPUSH
21834: EMPTY
21835: PPUSH
21836: CALL_OW 1
21840: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_INT 0
21848: PPUSH
21849: CALL_OW 505
// end ; end ;
21853: LD_VAR 0 2
21857: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
21862: PPUSH
// if not hack in hackTanks or not vehicles then
21863: LD_VAR 0 1
21867: PUSH
21868: LD_EXP 70
21872: IN
21873: NOT
21874: PUSH
21875: LD_VAR 0 2
21879: NOT
21880: OR
21881: IFFALSE 21885
// exit ;
21883: GO 22160
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: LD_VAR 0 2
21899: PPUSH
21900: LD_INT 1
21902: PPUSH
21903: LD_INT 1
21905: PPUSH
21906: CALL 30120 0 4
21910: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21911: LD_ADDR_VAR 0 5
21915: PUSH
21916: LD_EXP 70
21920: PPUSH
21921: LD_VAR 0 1
21925: PPUSH
21926: CALL 29470 0 2
21930: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21931: LD_EXP 71
21935: PUSH
21936: LD_VAR 0 5
21940: ARRAY
21941: PUSH
21942: LD_EXP 72
21946: LESS
21947: IFFALSE 22136
// begin for i := 1 to vehicles do
21949: LD_ADDR_VAR 0 4
21953: PUSH
21954: DOUBLE
21955: LD_INT 1
21957: DEC
21958: ST_TO_ADDR
21959: LD_VAR 0 2
21963: PUSH
21964: FOR_TO
21965: IFFALSE 22134
// begin if hackTanksCaptured [ index ] = hackLimit then
21967: LD_EXP 71
21971: PUSH
21972: LD_VAR 0 5
21976: ARRAY
21977: PUSH
21978: LD_EXP 72
21982: EQUAL
21983: IFFALSE 21987
// break ;
21985: GO 22134
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21987: LD_ADDR_EXP 74
21991: PUSH
21992: LD_EXP 74
21996: PPUSH
21997: LD_VAR 0 5
22001: PPUSH
22002: LD_EXP 74
22006: PUSH
22007: LD_VAR 0 5
22011: ARRAY
22012: PUSH
22013: LD_INT 1
22015: PLUS
22016: PPUSH
22017: CALL_OW 1
22021: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22022: LD_ADDR_EXP 71
22026: PUSH
22027: LD_EXP 71
22031: PPUSH
22032: LD_VAR 0 5
22036: PUSH
22037: LD_EXP 71
22041: PUSH
22042: LD_VAR 0 5
22046: ARRAY
22047: PUSH
22048: LD_INT 1
22050: PLUS
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PPUSH
22056: LD_VAR 0 2
22060: PUSH
22061: LD_VAR 0 4
22065: ARRAY
22066: PUSH
22067: LD_VAR 0 2
22071: PUSH
22072: LD_VAR 0 4
22076: ARRAY
22077: PPUSH
22078: CALL_OW 255
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PPUSH
22087: CALL 29685 0 3
22091: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22092: LD_VAR 0 2
22096: PUSH
22097: LD_VAR 0 4
22101: ARRAY
22102: PPUSH
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL_OW 255
22112: PPUSH
22113: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22117: LD_VAR 0 2
22121: PUSH
22122: LD_VAR 0 4
22126: ARRAY
22127: PPUSH
22128: CALL_OW 141
// end ;
22132: GO 21964
22134: POP
22135: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_EXP 71
22145: PUSH
22146: LD_VAR 0 5
22150: ARRAY
22151: PUSH
22152: LD_INT 0
22154: PLUS
22155: PPUSH
22156: CALL_OW 505
// end ;
22160: LD_VAR 0 3
22164: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
// if not hack in hackTanks then
22171: LD_VAR 0 1
22175: PUSH
22176: LD_EXP 70
22180: IN
22181: NOT
22182: IFFALSE 22186
// exit ;
22184: GO 22426
// index := GetElementIndex ( hackTanks , hack ) ;
22186: LD_ADDR_VAR 0 4
22190: PUSH
22191: LD_EXP 70
22195: PPUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL 29470 0 2
22205: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22206: LD_ADDR_VAR 0 3
22210: PUSH
22211: DOUBLE
22212: LD_EXP 71
22216: PUSH
22217: LD_VAR 0 4
22221: ARRAY
22222: INC
22223: ST_TO_ADDR
22224: LD_INT 1
22226: PUSH
22227: FOR_DOWNTO
22228: IFFALSE 22400
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22230: LD_ADDR_VAR 0 5
22234: PUSH
22235: LD_EXP 71
22239: PUSH
22240: LD_VAR 0 4
22244: ARRAY
22245: PUSH
22246: LD_VAR 0 3
22250: ARRAY
22251: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22252: LD_VAR 0 5
22256: PUSH
22257: LD_INT 1
22259: ARRAY
22260: PPUSH
22261: CALL_OW 302
22265: NOT
22266: PUSH
22267: LD_VAR 0 5
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: PPUSH
22276: CALL_OW 255
22280: PUSH
22281: LD_VAR 0 1
22285: PPUSH
22286: CALL_OW 255
22290: NONEQUAL
22291: OR
22292: IFFALSE 22398
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22294: LD_VAR 0 5
22298: PUSH
22299: LD_INT 1
22301: ARRAY
22302: PPUSH
22303: CALL_OW 305
22307: PUSH
22308: LD_VAR 0 5
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: CALL_OW 255
22321: PUSH
22322: LD_VAR 0 1
22326: PPUSH
22327: CALL_OW 255
22331: EQUAL
22332: AND
22333: IFFALSE 22357
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22335: LD_VAR 0 5
22339: PUSH
22340: LD_INT 1
22342: ARRAY
22343: PPUSH
22344: LD_VAR 0 5
22348: PUSH
22349: LD_INT 2
22351: ARRAY
22352: PPUSH
22353: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22357: LD_ADDR_EXP 71
22361: PUSH
22362: LD_EXP 71
22366: PPUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: LD_EXP 71
22376: PUSH
22377: LD_VAR 0 4
22381: ARRAY
22382: PPUSH
22383: LD_VAR 0 3
22387: PPUSH
22388: CALL_OW 3
22392: PPUSH
22393: CALL_OW 1
22397: ST_TO_ADDR
// end ; end ;
22398: GO 22227
22400: POP
22401: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22402: LD_VAR 0 1
22406: PPUSH
22407: LD_EXP 71
22411: PUSH
22412: LD_VAR 0 4
22416: ARRAY
22417: PUSH
22418: LD_INT 0
22420: PLUS
22421: PPUSH
22422: CALL_OW 505
// end ;
22426: LD_VAR 0 2
22430: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22431: LD_INT 0
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
// if not hack in hackTanks then
22437: LD_VAR 0 1
22441: PUSH
22442: LD_EXP 70
22446: IN
22447: NOT
22448: IFFALSE 22452
// exit ;
22450: GO 22537
// index := GetElementIndex ( hackTanks , hack ) ;
22452: LD_ADDR_VAR 0 5
22456: PUSH
22457: LD_EXP 70
22461: PPUSH
22462: LD_VAR 0 1
22466: PPUSH
22467: CALL 29470 0 2
22471: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22472: LD_ADDR_VAR 0 4
22476: PUSH
22477: DOUBLE
22478: LD_INT 1
22480: DEC
22481: ST_TO_ADDR
22482: LD_EXP 71
22486: PUSH
22487: LD_VAR 0 5
22491: ARRAY
22492: PUSH
22493: FOR_TO
22494: IFFALSE 22535
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22496: LD_EXP 71
22500: PUSH
22501: LD_VAR 0 5
22505: ARRAY
22506: PUSH
22507: LD_VAR 0 4
22511: ARRAY
22512: PUSH
22513: LD_INT 1
22515: ARRAY
22516: PUSH
22517: LD_VAR 0 2
22521: EQUAL
22522: IFFALSE 22533
// KillUnit ( vehicle ) ;
22524: LD_VAR 0 2
22528: PPUSH
22529: CALL_OW 66
22533: GO 22493
22535: POP
22536: POP
// end ;
22537: LD_VAR 0 3
22541: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22542: LD_EXP 75
22546: NOT
22547: IFFALSE 22582
22549: GO 22551
22551: DISABLE
// begin initMiner := true ;
22552: LD_ADDR_EXP 75
22556: PUSH
22557: LD_INT 1
22559: ST_TO_ADDR
// minersList := [ ] ;
22560: LD_ADDR_EXP 76
22564: PUSH
22565: EMPTY
22566: ST_TO_ADDR
// minerMinesList := [ ] ;
22567: LD_ADDR_EXP 77
22571: PUSH
22572: EMPTY
22573: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22574: LD_ADDR_EXP 78
22578: PUSH
22579: LD_INT 5
22581: ST_TO_ADDR
// end ;
22582: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22583: LD_EXP 75
22587: PUSH
22588: LD_INT 34
22590: PUSH
22591: LD_INT 81
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PPUSH
22598: CALL_OW 69
22602: AND
22603: IFFALSE 23064
22605: GO 22607
22607: DISABLE
22608: LD_INT 0
22610: PPUSH
22611: PPUSH
22612: PPUSH
22613: PPUSH
// begin enable ;
22614: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22615: LD_ADDR_VAR 0 1
22619: PUSH
22620: LD_INT 34
22622: PUSH
22623: LD_INT 81
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PPUSH
22630: CALL_OW 69
22634: PUSH
22635: FOR_IN
22636: IFFALSE 22708
// begin if not i in minersList then
22638: LD_VAR 0 1
22642: PUSH
22643: LD_EXP 76
22647: IN
22648: NOT
22649: IFFALSE 22706
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22651: LD_ADDR_EXP 76
22655: PUSH
22656: LD_EXP 76
22660: PPUSH
22661: LD_EXP 76
22665: PUSH
22666: LD_INT 1
22668: PLUS
22669: PPUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 1
22679: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22680: LD_ADDR_EXP 77
22684: PUSH
22685: LD_EXP 77
22689: PPUSH
22690: LD_EXP 77
22694: PUSH
22695: LD_INT 1
22697: PLUS
22698: PPUSH
22699: EMPTY
22700: PPUSH
22701: CALL_OW 1
22705: ST_TO_ADDR
// end end ;
22706: GO 22635
22708: POP
22709: POP
// for i := minerMinesList downto 1 do
22710: LD_ADDR_VAR 0 1
22714: PUSH
22715: DOUBLE
22716: LD_EXP 77
22720: INC
22721: ST_TO_ADDR
22722: LD_INT 1
22724: PUSH
22725: FOR_DOWNTO
22726: IFFALSE 23062
// begin if IsLive ( minersList [ i ] ) then
22728: LD_EXP 76
22732: PUSH
22733: LD_VAR 0 1
22737: ARRAY
22738: PPUSH
22739: CALL_OW 300
22743: IFFALSE 22771
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22745: LD_EXP 76
22749: PUSH
22750: LD_VAR 0 1
22754: ARRAY
22755: PPUSH
22756: LD_EXP 77
22760: PUSH
22761: LD_VAR 0 1
22765: ARRAY
22766: PPUSH
22767: CALL_OW 505
// if not minerMinesList [ i ] then
22771: LD_EXP 77
22775: PUSH
22776: LD_VAR 0 1
22780: ARRAY
22781: NOT
22782: IFFALSE 22786
// continue ;
22784: GO 22725
// for j := minerMinesList [ i ] downto 1 do
22786: LD_ADDR_VAR 0 2
22790: PUSH
22791: DOUBLE
22792: LD_EXP 77
22796: PUSH
22797: LD_VAR 0 1
22801: ARRAY
22802: INC
22803: ST_TO_ADDR
22804: LD_INT 1
22806: PUSH
22807: FOR_DOWNTO
22808: IFFALSE 23058
// begin side := GetSide ( minersList [ i ] ) ;
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_EXP 76
22819: PUSH
22820: LD_VAR 0 1
22824: ARRAY
22825: PPUSH
22826: CALL_OW 255
22830: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22831: LD_ADDR_VAR 0 4
22835: PUSH
22836: LD_EXP 77
22840: PUSH
22841: LD_VAR 0 1
22845: ARRAY
22846: PUSH
22847: LD_VAR 0 2
22851: ARRAY
22852: PUSH
22853: LD_INT 1
22855: ARRAY
22856: PPUSH
22857: LD_EXP 77
22861: PUSH
22862: LD_VAR 0 1
22866: ARRAY
22867: PUSH
22868: LD_VAR 0 2
22872: ARRAY
22873: PUSH
22874: LD_INT 2
22876: ARRAY
22877: PPUSH
22878: CALL_OW 428
22882: ST_TO_ADDR
// if not tmp then
22883: LD_VAR 0 4
22887: NOT
22888: IFFALSE 22892
// continue ;
22890: GO 22807
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22892: LD_VAR 0 4
22896: PUSH
22897: LD_INT 81
22899: PUSH
22900: LD_VAR 0 3
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: IN
22914: PUSH
22915: LD_EXP 77
22919: PUSH
22920: LD_VAR 0 1
22924: ARRAY
22925: PUSH
22926: LD_VAR 0 2
22930: ARRAY
22931: PUSH
22932: LD_INT 1
22934: ARRAY
22935: PPUSH
22936: LD_EXP 77
22940: PUSH
22941: LD_VAR 0 1
22945: ARRAY
22946: PUSH
22947: LD_VAR 0 2
22951: ARRAY
22952: PUSH
22953: LD_INT 2
22955: ARRAY
22956: PPUSH
22957: CALL_OW 458
22961: AND
22962: IFFALSE 23056
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22964: LD_EXP 77
22968: PUSH
22969: LD_VAR 0 1
22973: ARRAY
22974: PUSH
22975: LD_VAR 0 2
22979: ARRAY
22980: PUSH
22981: LD_INT 1
22983: ARRAY
22984: PPUSH
22985: LD_EXP 77
22989: PUSH
22990: LD_VAR 0 1
22994: ARRAY
22995: PUSH
22996: LD_VAR 0 2
23000: ARRAY
23001: PUSH
23002: LD_INT 2
23004: ARRAY
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23015: LD_ADDR_EXP 77
23019: PUSH
23020: LD_EXP 77
23024: PPUSH
23025: LD_VAR 0 1
23029: PPUSH
23030: LD_EXP 77
23034: PUSH
23035: LD_VAR 0 1
23039: ARRAY
23040: PPUSH
23041: LD_VAR 0 2
23045: PPUSH
23046: CALL_OW 3
23050: PPUSH
23051: CALL_OW 1
23055: ST_TO_ADDR
// end ; end ;
23056: GO 22807
23058: POP
23059: POP
// end ;
23060: GO 22725
23062: POP
23063: POP
// end ;
23064: PPOPN 4
23066: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23067: LD_INT 0
23069: PPUSH
23070: PPUSH
// result := false ;
23071: LD_ADDR_VAR 0 4
23075: PUSH
23076: LD_INT 0
23078: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL_OW 264
23088: PUSH
23089: LD_INT 81
23091: EQUAL
23092: NOT
23093: IFFALSE 23097
// exit ;
23095: GO 23337
// index := GetElementIndex ( minersList , unit ) ;
23097: LD_ADDR_VAR 0 5
23101: PUSH
23102: LD_EXP 76
23106: PPUSH
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL 29470 0 2
23116: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23117: LD_EXP 77
23121: PUSH
23122: LD_VAR 0 5
23126: ARRAY
23127: PUSH
23128: LD_EXP 78
23132: GREATEREQUAL
23133: IFFALSE 23137
// exit ;
23135: GO 23337
// ComMoveXY ( unit , x , y ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_VAR 0 3
23151: PPUSH
23152: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23156: LD_INT 35
23158: PPUSH
23159: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_VAR 0 2
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: CALL 60825 0 3
23182: NOT
23183: PUSH
23184: LD_VAR 0 1
23188: PPUSH
23189: CALL_OW 314
23193: AND
23194: IFFALSE 23198
// exit ;
23196: GO 23337
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23198: LD_VAR 0 2
23202: PPUSH
23203: LD_VAR 0 3
23207: PPUSH
23208: CALL_OW 428
23212: PUSH
23213: LD_VAR 0 1
23217: EQUAL
23218: PUSH
23219: LD_VAR 0 1
23223: PPUSH
23224: CALL_OW 314
23228: NOT
23229: AND
23230: IFFALSE 23156
// PlaySoundXY ( x , y , PlantMine ) ;
23232: LD_VAR 0 2
23236: PPUSH
23237: LD_VAR 0 3
23241: PPUSH
23242: LD_STRING PlantMine
23244: PPUSH
23245: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_VAR 0 1
23263: PPUSH
23264: CALL_OW 255
23268: PPUSH
23269: LD_INT 0
23271: PPUSH
23272: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23276: LD_ADDR_EXP 77
23280: PUSH
23281: LD_EXP 77
23285: PPUSH
23286: LD_VAR 0 5
23290: PUSH
23291: LD_EXP 77
23295: PUSH
23296: LD_VAR 0 5
23300: ARRAY
23301: PUSH
23302: LD_INT 1
23304: PLUS
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PPUSH
23310: LD_VAR 0 2
23314: PUSH
23315: LD_VAR 0 3
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL 29685 0 3
23328: ST_TO_ADDR
// result := true ;
23329: LD_ADDR_VAR 0 4
23333: PUSH
23334: LD_INT 1
23336: ST_TO_ADDR
// end ;
23337: LD_VAR 0 4
23341: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23342: LD_INT 0
23344: PPUSH
23345: PPUSH
23346: PPUSH
// if not unit in minersList then
23347: LD_VAR 0 1
23351: PUSH
23352: LD_EXP 76
23356: IN
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23754
// index := GetElementIndex ( minersList , unit ) ;
23362: LD_ADDR_VAR 0 6
23366: PUSH
23367: LD_EXP 76
23371: PPUSH
23372: LD_VAR 0 1
23376: PPUSH
23377: CALL 29470 0 2
23381: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23382: LD_ADDR_VAR 0 5
23386: PUSH
23387: DOUBLE
23388: LD_EXP 77
23392: PUSH
23393: LD_VAR 0 6
23397: ARRAY
23398: INC
23399: ST_TO_ADDR
23400: LD_INT 1
23402: PUSH
23403: FOR_DOWNTO
23404: IFFALSE 23565
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23406: LD_EXP 77
23410: PUSH
23411: LD_VAR 0 6
23415: ARRAY
23416: PUSH
23417: LD_VAR 0 5
23421: ARRAY
23422: PUSH
23423: LD_INT 1
23425: ARRAY
23426: PUSH
23427: LD_VAR 0 2
23431: EQUAL
23432: PUSH
23433: LD_EXP 77
23437: PUSH
23438: LD_VAR 0 6
23442: ARRAY
23443: PUSH
23444: LD_VAR 0 5
23448: ARRAY
23449: PUSH
23450: LD_INT 2
23452: ARRAY
23453: PUSH
23454: LD_VAR 0 3
23458: EQUAL
23459: AND
23460: IFFALSE 23563
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23462: LD_EXP 77
23466: PUSH
23467: LD_VAR 0 6
23471: ARRAY
23472: PUSH
23473: LD_VAR 0 5
23477: ARRAY
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: PPUSH
23483: LD_EXP 77
23487: PUSH
23488: LD_VAR 0 6
23492: ARRAY
23493: PUSH
23494: LD_VAR 0 5
23498: ARRAY
23499: PUSH
23500: LD_INT 2
23502: ARRAY
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 255
23513: PPUSH
23514: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23518: LD_ADDR_EXP 77
23522: PUSH
23523: LD_EXP 77
23527: PPUSH
23528: LD_VAR 0 6
23532: PPUSH
23533: LD_EXP 77
23537: PUSH
23538: LD_VAR 0 6
23542: ARRAY
23543: PPUSH
23544: LD_VAR 0 5
23548: PPUSH
23549: CALL_OW 3
23553: PPUSH
23554: CALL_OW 1
23558: ST_TO_ADDR
// exit ;
23559: POP
23560: POP
23561: GO 23754
// end ; end ;
23563: GO 23403
23565: POP
23566: POP
// for i := minerMinesList [ index ] downto 1 do
23567: LD_ADDR_VAR 0 5
23571: PUSH
23572: DOUBLE
23573: LD_EXP 77
23577: PUSH
23578: LD_VAR 0 6
23582: ARRAY
23583: INC
23584: ST_TO_ADDR
23585: LD_INT 1
23587: PUSH
23588: FOR_DOWNTO
23589: IFFALSE 23752
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23591: LD_EXP 77
23595: PUSH
23596: LD_VAR 0 6
23600: ARRAY
23601: PUSH
23602: LD_VAR 0 5
23606: ARRAY
23607: PUSH
23608: LD_INT 1
23610: ARRAY
23611: PPUSH
23612: LD_EXP 77
23616: PUSH
23617: LD_VAR 0 6
23621: ARRAY
23622: PUSH
23623: LD_VAR 0 5
23627: ARRAY
23628: PUSH
23629: LD_INT 2
23631: ARRAY
23632: PPUSH
23633: LD_VAR 0 2
23637: PPUSH
23638: LD_VAR 0 3
23642: PPUSH
23643: CALL_OW 298
23647: PUSH
23648: LD_INT 6
23650: LESS
23651: IFFALSE 23750
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23653: LD_EXP 77
23657: PUSH
23658: LD_VAR 0 6
23662: ARRAY
23663: PUSH
23664: LD_VAR 0 5
23668: ARRAY
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: PPUSH
23674: LD_EXP 77
23678: PUSH
23679: LD_VAR 0 6
23683: ARRAY
23684: PUSH
23685: LD_VAR 0 5
23689: ARRAY
23690: PUSH
23691: LD_INT 2
23693: ARRAY
23694: PPUSH
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 255
23704: PPUSH
23705: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23709: LD_ADDR_EXP 77
23713: PUSH
23714: LD_EXP 77
23718: PPUSH
23719: LD_VAR 0 6
23723: PPUSH
23724: LD_EXP 77
23728: PUSH
23729: LD_VAR 0 6
23733: ARRAY
23734: PPUSH
23735: LD_VAR 0 5
23739: PPUSH
23740: CALL_OW 3
23744: PPUSH
23745: CALL_OW 1
23749: ST_TO_ADDR
// end ; end ;
23750: GO 23588
23752: POP
23753: POP
// end ;
23754: LD_VAR 0 4
23758: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23770: LD_VAR 0 1
23774: PPUSH
23775: CALL_OW 264
23779: PUSH
23780: LD_INT 81
23782: EQUAL
23783: NOT
23784: PUSH
23785: LD_VAR 0 1
23789: PUSH
23790: LD_EXP 76
23794: IN
23795: NOT
23796: OR
23797: IFFALSE 23801
// exit ;
23799: GO 24123
// index := GetElementIndex ( minersList , unit ) ;
23801: LD_ADDR_VAR 0 6
23805: PUSH
23806: LD_EXP 76
23810: PPUSH
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL 29470 0 2
23820: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23821: LD_ADDR_VAR 0 8
23825: PUSH
23826: LD_EXP 78
23830: PUSH
23831: LD_EXP 77
23835: PUSH
23836: LD_VAR 0 6
23840: ARRAY
23841: MINUS
23842: ST_TO_ADDR
// if not minesFreeAmount then
23843: LD_VAR 0 8
23847: NOT
23848: IFFALSE 23852
// exit ;
23850: GO 24123
// tmp := [ ] ;
23852: LD_ADDR_VAR 0 7
23856: PUSH
23857: EMPTY
23858: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23859: LD_ADDR_VAR 0 5
23863: PUSH
23864: DOUBLE
23865: LD_INT 1
23867: DEC
23868: ST_TO_ADDR
23869: LD_VAR 0 8
23873: PUSH
23874: FOR_TO
23875: IFFALSE 24070
// begin _d := rand ( 0 , 5 ) ;
23877: LD_ADDR_VAR 0 11
23881: PUSH
23882: LD_INT 0
23884: PPUSH
23885: LD_INT 5
23887: PPUSH
23888: CALL_OW 12
23892: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23893: LD_ADDR_VAR 0 12
23897: PUSH
23898: LD_INT 2
23900: PPUSH
23901: LD_INT 6
23903: PPUSH
23904: CALL_OW 12
23908: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23909: LD_ADDR_VAR 0 9
23913: PUSH
23914: LD_VAR 0 2
23918: PPUSH
23919: LD_VAR 0 11
23923: PPUSH
23924: LD_VAR 0 12
23928: PPUSH
23929: CALL_OW 272
23933: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23934: LD_ADDR_VAR 0 10
23938: PUSH
23939: LD_VAR 0 3
23943: PPUSH
23944: LD_VAR 0 11
23948: PPUSH
23949: LD_VAR 0 12
23953: PPUSH
23954: CALL_OW 273
23958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23959: LD_VAR 0 9
23963: PPUSH
23964: LD_VAR 0 10
23968: PPUSH
23969: CALL_OW 488
23973: PUSH
23974: LD_VAR 0 9
23978: PUSH
23979: LD_VAR 0 10
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_VAR 0 7
23992: IN
23993: NOT
23994: AND
23995: PUSH
23996: LD_VAR 0 9
24000: PPUSH
24001: LD_VAR 0 10
24005: PPUSH
24006: CALL_OW 458
24010: NOT
24011: AND
24012: IFFALSE 24054
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24014: LD_ADDR_VAR 0 7
24018: PUSH
24019: LD_VAR 0 7
24023: PPUSH
24024: LD_VAR 0 7
24028: PUSH
24029: LD_INT 1
24031: PLUS
24032: PPUSH
24033: LD_VAR 0 9
24037: PUSH
24038: LD_VAR 0 10
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PPUSH
24047: CALL_OW 1
24051: ST_TO_ADDR
24052: GO 24068
// i := i - 1 ;
24054: LD_ADDR_VAR 0 5
24058: PUSH
24059: LD_VAR 0 5
24063: PUSH
24064: LD_INT 1
24066: MINUS
24067: ST_TO_ADDR
// end ;
24068: GO 23874
24070: POP
24071: POP
// for i in tmp do
24072: LD_ADDR_VAR 0 5
24076: PUSH
24077: LD_VAR 0 7
24081: PUSH
24082: FOR_IN
24083: IFFALSE 24121
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24085: LD_VAR 0 1
24089: PPUSH
24090: LD_VAR 0 5
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: PPUSH
24099: LD_VAR 0 5
24103: PUSH
24104: LD_INT 2
24106: ARRAY
24107: PPUSH
24108: CALL 23067 0 3
24112: NOT
24113: IFFALSE 24119
// exit ;
24115: POP
24116: POP
24117: GO 24123
24119: GO 24082
24121: POP
24122: POP
// end ;
24123: LD_VAR 0 4
24127: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24128: LD_INT 0
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
24134: PPUSH
24135: PPUSH
24136: PPUSH
// if not GetClass ( unit ) = class_sniper then
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 257
24146: PUSH
24147: LD_INT 5
24149: EQUAL
24150: NOT
24151: IFFALSE 24155
// exit ;
24153: GO 24543
// dist := 8 ;
24155: LD_ADDR_VAR 0 5
24159: PUSH
24160: LD_INT 8
24162: ST_TO_ADDR
// viewRange := 12 ;
24163: LD_ADDR_VAR 0 7
24167: PUSH
24168: LD_INT 12
24170: ST_TO_ADDR
// side := GetSide ( unit ) ;
24171: LD_ADDR_VAR 0 6
24175: PUSH
24176: LD_VAR 0 1
24180: PPUSH
24181: CALL_OW 255
24185: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24186: LD_INT 61
24188: PPUSH
24189: LD_VAR 0 6
24193: PPUSH
24194: CALL_OW 321
24198: PUSH
24199: LD_INT 2
24201: EQUAL
24202: IFFALSE 24212
// viewRange := 16 ;
24204: LD_ADDR_VAR 0 7
24208: PUSH
24209: LD_INT 16
24211: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 3
24226: PPUSH
24227: CALL_OW 297
24231: PUSH
24232: LD_VAR 0 5
24236: GREATER
24237: IFFALSE 24316
// begin ComMoveXY ( unit , x , y ) ;
24239: LD_VAR 0 1
24243: PPUSH
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_VAR 0 3
24253: PPUSH
24254: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24258: LD_INT 35
24260: PPUSH
24261: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24265: LD_VAR 0 1
24269: PPUSH
24270: LD_VAR 0 2
24274: PPUSH
24275: LD_VAR 0 3
24279: PPUSH
24280: CALL 60825 0 3
24284: NOT
24285: IFFALSE 24289
// exit ;
24287: GO 24543
// until GetDistUnitXY ( unit , x , y ) < dist ;
24289: LD_VAR 0 1
24293: PPUSH
24294: LD_VAR 0 2
24298: PPUSH
24299: LD_VAR 0 3
24303: PPUSH
24304: CALL_OW 297
24308: PUSH
24309: LD_VAR 0 5
24313: LESS
24314: IFFALSE 24258
// end ; ComTurnXY ( unit , x , y ) ;
24316: LD_VAR 0 1
24320: PPUSH
24321: LD_VAR 0 2
24325: PPUSH
24326: LD_VAR 0 3
24330: PPUSH
24331: CALL_OW 118
// wait ( 5 ) ;
24335: LD_INT 5
24337: PPUSH
24338: CALL_OW 67
// _d := GetDir ( unit ) ;
24342: LD_ADDR_VAR 0 10
24346: PUSH
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 254
24356: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24357: LD_ADDR_VAR 0 8
24361: PUSH
24362: LD_VAR 0 1
24366: PPUSH
24367: CALL_OW 250
24371: PPUSH
24372: LD_VAR 0 10
24376: PPUSH
24377: LD_VAR 0 5
24381: PPUSH
24382: CALL_OW 272
24386: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24387: LD_ADDR_VAR 0 9
24391: PUSH
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 251
24401: PPUSH
24402: LD_VAR 0 10
24406: PPUSH
24407: LD_VAR 0 5
24411: PPUSH
24412: CALL_OW 273
24416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24417: LD_VAR 0 8
24421: PPUSH
24422: LD_VAR 0 9
24426: PPUSH
24427: CALL_OW 488
24431: NOT
24432: IFFALSE 24436
// exit ;
24434: GO 24543
// ComAnimCustom ( unit , 1 ) ;
24436: LD_VAR 0 1
24440: PPUSH
24441: LD_INT 1
24443: PPUSH
24444: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24448: LD_VAR 0 8
24452: PPUSH
24453: LD_VAR 0 9
24457: PPUSH
24458: LD_VAR 0 6
24462: PPUSH
24463: LD_VAR 0 7
24467: PPUSH
24468: CALL_OW 330
// repeat wait ( 1 ) ;
24472: LD_INT 1
24474: PPUSH
24475: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 316
24488: PUSH
24489: LD_VAR 0 1
24493: PPUSH
24494: CALL_OW 314
24498: OR
24499: PUSH
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL_OW 302
24509: NOT
24510: OR
24511: PUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 301
24521: OR
24522: IFFALSE 24472
// RemoveSeeing ( _x , _y , side ) ;
24524: LD_VAR 0 8
24528: PPUSH
24529: LD_VAR 0 9
24533: PPUSH
24534: LD_VAR 0 6
24538: PPUSH
24539: CALL_OW 331
// end ; end_of_file
24543: LD_VAR 0 4
24547: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24548: LD_INT 0
24550: PPUSH
24551: PPUSH
// if exist_mode then
24552: LD_VAR 0 2
24556: IFFALSE 24581
// unit := CreateCharacter ( prefix & ident ) else
24558: LD_ADDR_VAR 0 5
24562: PUSH
24563: LD_VAR 0 3
24567: PUSH
24568: LD_VAR 0 1
24572: STR
24573: PPUSH
24574: CALL_OW 34
24578: ST_TO_ADDR
24579: GO 24596
// unit := NewCharacter ( ident ) ;
24581: LD_ADDR_VAR 0 5
24585: PUSH
24586: LD_VAR 0 1
24590: PPUSH
24591: CALL_OW 25
24595: ST_TO_ADDR
// result := unit ;
24596: LD_ADDR_VAR 0 4
24600: PUSH
24601: LD_VAR 0 5
24605: ST_TO_ADDR
// end ;
24606: LD_VAR 0 4
24610: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24611: LD_INT 0
24613: PPUSH
24614: PPUSH
// if not side or not nation then
24615: LD_VAR 0 1
24619: NOT
24620: PUSH
24621: LD_VAR 0 2
24625: NOT
24626: OR
24627: IFFALSE 24631
// exit ;
24629: GO 25399
// case nation of nation_american :
24631: LD_VAR 0 2
24635: PUSH
24636: LD_INT 1
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24858
24644: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24645: LD_ADDR_VAR 0 4
24649: PUSH
24650: LD_INT 35
24652: PUSH
24653: LD_INT 45
24655: PUSH
24656: LD_INT 46
24658: PUSH
24659: LD_INT 47
24661: PUSH
24662: LD_INT 82
24664: PUSH
24665: LD_INT 83
24667: PUSH
24668: LD_INT 84
24670: PUSH
24671: LD_INT 85
24673: PUSH
24674: LD_INT 86
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: LD_INT 6
24685: PUSH
24686: LD_INT 15
24688: PUSH
24689: LD_INT 16
24691: PUSH
24692: LD_INT 7
24694: PUSH
24695: LD_INT 12
24697: PUSH
24698: LD_INT 13
24700: PUSH
24701: LD_INT 10
24703: PUSH
24704: LD_INT 14
24706: PUSH
24707: LD_INT 20
24709: PUSH
24710: LD_INT 21
24712: PUSH
24713: LD_INT 22
24715: PUSH
24716: LD_INT 25
24718: PUSH
24719: LD_INT 32
24721: PUSH
24722: LD_INT 27
24724: PUSH
24725: LD_INT 36
24727: PUSH
24728: LD_INT 69
24730: PUSH
24731: LD_INT 39
24733: PUSH
24734: LD_INT 34
24736: PUSH
24737: LD_INT 40
24739: PUSH
24740: LD_INT 48
24742: PUSH
24743: LD_INT 49
24745: PUSH
24746: LD_INT 50
24748: PUSH
24749: LD_INT 51
24751: PUSH
24752: LD_INT 52
24754: PUSH
24755: LD_INT 53
24757: PUSH
24758: LD_INT 54
24760: PUSH
24761: LD_INT 55
24763: PUSH
24764: LD_INT 56
24766: PUSH
24767: LD_INT 57
24769: PUSH
24770: LD_INT 58
24772: PUSH
24773: LD_INT 59
24775: PUSH
24776: LD_INT 60
24778: PUSH
24779: LD_INT 61
24781: PUSH
24782: LD_INT 62
24784: PUSH
24785: LD_INT 80
24787: PUSH
24788: LD_INT 82
24790: PUSH
24791: LD_INT 83
24793: PUSH
24794: LD_INT 84
24796: PUSH
24797: LD_INT 85
24799: PUSH
24800: LD_INT 86
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: ST_TO_ADDR
24856: GO 25323
24858: LD_INT 2
24860: DOUBLE
24861: EQUAL
24862: IFTRUE 24866
24864: GO 25092
24866: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24867: LD_ADDR_VAR 0 4
24871: PUSH
24872: LD_INT 35
24874: PUSH
24875: LD_INT 45
24877: PUSH
24878: LD_INT 46
24880: PUSH
24881: LD_INT 47
24883: PUSH
24884: LD_INT 82
24886: PUSH
24887: LD_INT 83
24889: PUSH
24890: LD_INT 84
24892: PUSH
24893: LD_INT 85
24895: PUSH
24896: LD_INT 87
24898: PUSH
24899: LD_INT 70
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 11
24907: PUSH
24908: LD_INT 3
24910: PUSH
24911: LD_INT 4
24913: PUSH
24914: LD_INT 5
24916: PUSH
24917: LD_INT 6
24919: PUSH
24920: LD_INT 15
24922: PUSH
24923: LD_INT 18
24925: PUSH
24926: LD_INT 7
24928: PUSH
24929: LD_INT 17
24931: PUSH
24932: LD_INT 8
24934: PUSH
24935: LD_INT 20
24937: PUSH
24938: LD_INT 21
24940: PUSH
24941: LD_INT 22
24943: PUSH
24944: LD_INT 72
24946: PUSH
24947: LD_INT 26
24949: PUSH
24950: LD_INT 69
24952: PUSH
24953: LD_INT 39
24955: PUSH
24956: LD_INT 40
24958: PUSH
24959: LD_INT 41
24961: PUSH
24962: LD_INT 42
24964: PUSH
24965: LD_INT 43
24967: PUSH
24968: LD_INT 48
24970: PUSH
24971: LD_INT 49
24973: PUSH
24974: LD_INT 50
24976: PUSH
24977: LD_INT 51
24979: PUSH
24980: LD_INT 52
24982: PUSH
24983: LD_INT 53
24985: PUSH
24986: LD_INT 54
24988: PUSH
24989: LD_INT 55
24991: PUSH
24992: LD_INT 56
24994: PUSH
24995: LD_INT 60
24997: PUSH
24998: LD_INT 61
25000: PUSH
25001: LD_INT 62
25003: PUSH
25004: LD_INT 66
25006: PUSH
25007: LD_INT 67
25009: PUSH
25010: LD_INT 68
25012: PUSH
25013: LD_INT 81
25015: PUSH
25016: LD_INT 82
25018: PUSH
25019: LD_INT 83
25021: PUSH
25022: LD_INT 84
25024: PUSH
25025: LD_INT 85
25027: PUSH
25028: LD_INT 87
25030: PUSH
25031: LD_INT 88
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
25090: GO 25323
25092: LD_INT 3
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 25322
25100: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25101: LD_ADDR_VAR 0 4
25105: PUSH
25106: LD_INT 46
25108: PUSH
25109: LD_INT 47
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 82
25120: PUSH
25121: LD_INT 83
25123: PUSH
25124: LD_INT 84
25126: PUSH
25127: LD_INT 85
25129: PUSH
25130: LD_INT 86
25132: PUSH
25133: LD_INT 11
25135: PUSH
25136: LD_INT 9
25138: PUSH
25139: LD_INT 20
25141: PUSH
25142: LD_INT 19
25144: PUSH
25145: LD_INT 21
25147: PUSH
25148: LD_INT 24
25150: PUSH
25151: LD_INT 22
25153: PUSH
25154: LD_INT 25
25156: PUSH
25157: LD_INT 28
25159: PUSH
25160: LD_INT 29
25162: PUSH
25163: LD_INT 30
25165: PUSH
25166: LD_INT 31
25168: PUSH
25169: LD_INT 37
25171: PUSH
25172: LD_INT 38
25174: PUSH
25175: LD_INT 32
25177: PUSH
25178: LD_INT 27
25180: PUSH
25181: LD_INT 33
25183: PUSH
25184: LD_INT 69
25186: PUSH
25187: LD_INT 39
25189: PUSH
25190: LD_INT 34
25192: PUSH
25193: LD_INT 40
25195: PUSH
25196: LD_INT 71
25198: PUSH
25199: LD_INT 23
25201: PUSH
25202: LD_INT 44
25204: PUSH
25205: LD_INT 48
25207: PUSH
25208: LD_INT 49
25210: PUSH
25211: LD_INT 50
25213: PUSH
25214: LD_INT 51
25216: PUSH
25217: LD_INT 52
25219: PUSH
25220: LD_INT 53
25222: PUSH
25223: LD_INT 54
25225: PUSH
25226: LD_INT 55
25228: PUSH
25229: LD_INT 56
25231: PUSH
25232: LD_INT 57
25234: PUSH
25235: LD_INT 58
25237: PUSH
25238: LD_INT 59
25240: PUSH
25241: LD_INT 63
25243: PUSH
25244: LD_INT 64
25246: PUSH
25247: LD_INT 65
25249: PUSH
25250: LD_INT 82
25252: PUSH
25253: LD_INT 83
25255: PUSH
25256: LD_INT 84
25258: PUSH
25259: LD_INT 85
25261: PUSH
25262: LD_INT 86
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: ST_TO_ADDR
25320: GO 25323
25322: POP
// if state > - 1 and state < 3 then
25323: LD_VAR 0 3
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: GREATER
25332: PUSH
25333: LD_VAR 0 3
25337: PUSH
25338: LD_INT 3
25340: LESS
25341: AND
25342: IFFALSE 25399
// for i in result do
25344: LD_ADDR_VAR 0 5
25348: PUSH
25349: LD_VAR 0 4
25353: PUSH
25354: FOR_IN
25355: IFFALSE 25397
// if GetTech ( i , side ) <> state then
25357: LD_VAR 0 5
25361: PPUSH
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 321
25371: PUSH
25372: LD_VAR 0 3
25376: NONEQUAL
25377: IFFALSE 25395
// result := result diff i ;
25379: LD_ADDR_VAR 0 4
25383: PUSH
25384: LD_VAR 0 4
25388: PUSH
25389: LD_VAR 0 5
25393: DIFF
25394: ST_TO_ADDR
25395: GO 25354
25397: POP
25398: POP
// end ;
25399: LD_VAR 0 4
25403: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25404: LD_INT 0
25406: PPUSH
25407: PPUSH
25408: PPUSH
// result := true ;
25409: LD_ADDR_VAR 0 3
25413: PUSH
25414: LD_INT 1
25416: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25417: LD_ADDR_VAR 0 5
25421: PUSH
25422: LD_VAR 0 2
25426: PPUSH
25427: CALL_OW 480
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 5
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25490
// for i in tmp do
25441: LD_ADDR_VAR 0 4
25445: PUSH
25446: LD_VAR 0 5
25450: PUSH
25451: FOR_IN
25452: IFFALSE 25488
// if GetTech ( i , side ) <> state_researched then
25454: LD_VAR 0 4
25458: PPUSH
25459: LD_VAR 0 1
25463: PPUSH
25464: CALL_OW 321
25468: PUSH
25469: LD_INT 2
25471: NONEQUAL
25472: IFFALSE 25486
// begin result := false ;
25474: LD_ADDR_VAR 0 3
25478: PUSH
25479: LD_INT 0
25481: ST_TO_ADDR
// exit ;
25482: POP
25483: POP
25484: GO 25490
// end ;
25486: GO 25451
25488: POP
25489: POP
// end ;
25490: LD_VAR 0 3
25494: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25495: LD_INT 0
25497: PPUSH
25498: PPUSH
25499: PPUSH
25500: PPUSH
25501: PPUSH
25502: PPUSH
25503: PPUSH
25504: PPUSH
25505: PPUSH
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25510: LD_VAR 0 1
25514: NOT
25515: PUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 257
25525: PUSH
25526: LD_INT 9
25528: NONEQUAL
25529: OR
25530: IFFALSE 25534
// exit ;
25532: GO 26107
// side := GetSide ( unit ) ;
25534: LD_ADDR_VAR 0 9
25538: PUSH
25539: LD_VAR 0 1
25543: PPUSH
25544: CALL_OW 255
25548: ST_TO_ADDR
// tech_space := tech_spacanom ;
25549: LD_ADDR_VAR 0 12
25553: PUSH
25554: LD_INT 29
25556: ST_TO_ADDR
// tech_time := tech_taurad ;
25557: LD_ADDR_VAR 0 13
25561: PUSH
25562: LD_INT 28
25564: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25565: LD_ADDR_VAR 0 11
25569: PUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: CALL_OW 310
25579: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25580: LD_VAR 0 11
25584: PPUSH
25585: CALL_OW 247
25589: PUSH
25590: LD_INT 2
25592: EQUAL
25593: IFFALSE 25597
// exit ;
25595: GO 26107
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25597: LD_ADDR_VAR 0 8
25601: PUSH
25602: LD_INT 81
25604: PUSH
25605: LD_VAR 0 9
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 3
25616: PUSH
25617: LD_INT 21
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: ST_TO_ADDR
// if not tmp then
25640: LD_VAR 0 8
25644: NOT
25645: IFFALSE 25649
// exit ;
25647: GO 26107
// if in_unit then
25649: LD_VAR 0 11
25653: IFFALSE 25677
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25655: LD_ADDR_VAR 0 10
25659: PUSH
25660: LD_VAR 0 8
25664: PPUSH
25665: LD_VAR 0 11
25669: PPUSH
25670: CALL_OW 74
25674: ST_TO_ADDR
25675: GO 25697
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25677: LD_ADDR_VAR 0 10
25681: PUSH
25682: LD_VAR 0 8
25686: PPUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 74
25696: ST_TO_ADDR
// if not enemy then
25697: LD_VAR 0 10
25701: NOT
25702: IFFALSE 25706
// exit ;
25704: GO 26107
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25706: LD_VAR 0 11
25710: PUSH
25711: LD_VAR 0 11
25715: PPUSH
25716: LD_VAR 0 10
25720: PPUSH
25721: CALL_OW 296
25725: PUSH
25726: LD_INT 13
25728: GREATER
25729: AND
25730: PUSH
25731: LD_VAR 0 1
25735: PPUSH
25736: LD_VAR 0 10
25740: PPUSH
25741: CALL_OW 296
25745: PUSH
25746: LD_INT 12
25748: GREATER
25749: OR
25750: IFFALSE 25754
// exit ;
25752: GO 26107
// missile := [ 1 ] ;
25754: LD_ADDR_VAR 0 14
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25765: LD_VAR 0 9
25769: PPUSH
25770: LD_VAR 0 12
25774: PPUSH
25775: CALL_OW 325
25779: IFFALSE 25808
// missile := Replace ( missile , missile + 1 , 2 ) ;
25781: LD_ADDR_VAR 0 14
25785: PUSH
25786: LD_VAR 0 14
25790: PPUSH
25791: LD_VAR 0 14
25795: PUSH
25796: LD_INT 1
25798: PLUS
25799: PPUSH
25800: LD_INT 2
25802: PPUSH
25803: CALL_OW 1
25807: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25808: LD_VAR 0 9
25812: PPUSH
25813: LD_VAR 0 13
25817: PPUSH
25818: CALL_OW 325
25822: PUSH
25823: LD_VAR 0 10
25827: PPUSH
25828: CALL_OW 255
25832: PPUSH
25833: LD_VAR 0 13
25837: PPUSH
25838: CALL_OW 325
25842: NOT
25843: AND
25844: IFFALSE 25873
// missile := Replace ( missile , missile + 1 , 3 ) ;
25846: LD_ADDR_VAR 0 14
25850: PUSH
25851: LD_VAR 0 14
25855: PPUSH
25856: LD_VAR 0 14
25860: PUSH
25861: LD_INT 1
25863: PLUS
25864: PPUSH
25865: LD_INT 3
25867: PPUSH
25868: CALL_OW 1
25872: ST_TO_ADDR
// if missile < 2 then
25873: LD_VAR 0 14
25877: PUSH
25878: LD_INT 2
25880: LESS
25881: IFFALSE 25885
// exit ;
25883: GO 26107
// x := GetX ( enemy ) ;
25885: LD_ADDR_VAR 0 4
25889: PUSH
25890: LD_VAR 0 10
25894: PPUSH
25895: CALL_OW 250
25899: ST_TO_ADDR
// y := GetY ( enemy ) ;
25900: LD_ADDR_VAR 0 5
25904: PUSH
25905: LD_VAR 0 10
25909: PPUSH
25910: CALL_OW 251
25914: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25915: LD_ADDR_VAR 0 6
25919: PUSH
25920: LD_VAR 0 4
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PPUSH
25929: LD_INT 1
25931: PPUSH
25932: CALL_OW 12
25936: PLUS
25937: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25938: LD_ADDR_VAR 0 7
25942: PUSH
25943: LD_VAR 0 5
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PPUSH
25952: LD_INT 1
25954: PPUSH
25955: CALL_OW 12
25959: PLUS
25960: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25961: LD_VAR 0 6
25965: PPUSH
25966: LD_VAR 0 7
25970: PPUSH
25971: CALL_OW 488
25975: NOT
25976: IFFALSE 25998
// begin _x := x ;
25978: LD_ADDR_VAR 0 6
25982: PUSH
25983: LD_VAR 0 4
25987: ST_TO_ADDR
// _y := y ;
25988: LD_ADDR_VAR 0 7
25992: PUSH
25993: LD_VAR 0 5
25997: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25998: LD_ADDR_VAR 0 3
26002: PUSH
26003: LD_INT 1
26005: PPUSH
26006: LD_VAR 0 14
26010: PPUSH
26011: CALL_OW 12
26015: ST_TO_ADDR
// case i of 1 :
26016: LD_VAR 0 3
26020: PUSH
26021: LD_INT 1
26023: DOUBLE
26024: EQUAL
26025: IFTRUE 26029
26027: GO 26046
26029: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26030: LD_VAR 0 1
26034: PPUSH
26035: LD_VAR 0 10
26039: PPUSH
26040: CALL_OW 115
26044: GO 26107
26046: LD_INT 2
26048: DOUBLE
26049: EQUAL
26050: IFTRUE 26054
26052: GO 26076
26054: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26055: LD_VAR 0 1
26059: PPUSH
26060: LD_VAR 0 6
26064: PPUSH
26065: LD_VAR 0 7
26069: PPUSH
26070: CALL_OW 153
26074: GO 26107
26076: LD_INT 3
26078: DOUBLE
26079: EQUAL
26080: IFTRUE 26084
26082: GO 26106
26084: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_VAR 0 6
26094: PPUSH
26095: LD_VAR 0 7
26099: PPUSH
26100: CALL_OW 154
26104: GO 26107
26106: POP
// end ;
26107: LD_VAR 0 2
26111: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26112: LD_INT 0
26114: PPUSH
26115: PPUSH
26116: PPUSH
26117: PPUSH
26118: PPUSH
26119: PPUSH
// if not unit or not building then
26120: LD_VAR 0 1
26124: NOT
26125: PUSH
26126: LD_VAR 0 2
26130: NOT
26131: OR
26132: IFFALSE 26136
// exit ;
26134: GO 26294
// x := GetX ( building ) ;
26136: LD_ADDR_VAR 0 5
26140: PUSH
26141: LD_VAR 0 2
26145: PPUSH
26146: CALL_OW 250
26150: ST_TO_ADDR
// y := GetY ( building ) ;
26151: LD_ADDR_VAR 0 6
26155: PUSH
26156: LD_VAR 0 2
26160: PPUSH
26161: CALL_OW 251
26165: ST_TO_ADDR
// for i = 0 to 5 do
26166: LD_ADDR_VAR 0 4
26170: PUSH
26171: DOUBLE
26172: LD_INT 0
26174: DEC
26175: ST_TO_ADDR
26176: LD_INT 5
26178: PUSH
26179: FOR_TO
26180: IFFALSE 26292
// begin _x := ShiftX ( x , i , 3 ) ;
26182: LD_ADDR_VAR 0 7
26186: PUSH
26187: LD_VAR 0 5
26191: PPUSH
26192: LD_VAR 0 4
26196: PPUSH
26197: LD_INT 3
26199: PPUSH
26200: CALL_OW 272
26204: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26205: LD_ADDR_VAR 0 8
26209: PUSH
26210: LD_VAR 0 6
26214: PPUSH
26215: LD_VAR 0 4
26219: PPUSH
26220: LD_INT 3
26222: PPUSH
26223: CALL_OW 273
26227: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26228: LD_VAR 0 7
26232: PPUSH
26233: LD_VAR 0 8
26237: PPUSH
26238: CALL_OW 488
26242: NOT
26243: IFFALSE 26247
// continue ;
26245: GO 26179
// if HexInfo ( _x , _y ) = 0 then
26247: LD_VAR 0 7
26251: PPUSH
26252: LD_VAR 0 8
26256: PPUSH
26257: CALL_OW 428
26261: PUSH
26262: LD_INT 0
26264: EQUAL
26265: IFFALSE 26290
// begin ComMoveXY ( unit , _x , _y ) ;
26267: LD_VAR 0 1
26271: PPUSH
26272: LD_VAR 0 7
26276: PPUSH
26277: LD_VAR 0 8
26281: PPUSH
26282: CALL_OW 111
// exit ;
26286: POP
26287: POP
26288: GO 26294
// end ; end ;
26290: GO 26179
26292: POP
26293: POP
// end ;
26294: LD_VAR 0 3
26298: RET
// export function ScanBase ( side , base_area ) ; begin
26299: LD_INT 0
26301: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26302: LD_ADDR_VAR 0 3
26306: PUSH
26307: LD_VAR 0 2
26311: PPUSH
26312: LD_INT 81
26314: PUSH
26315: LD_VAR 0 1
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PPUSH
26324: CALL_OW 70
26328: ST_TO_ADDR
// end ;
26329: LD_VAR 0 3
26333: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26334: LD_INT 0
26336: PPUSH
26337: PPUSH
26338: PPUSH
26339: PPUSH
// result := false ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_INT 0
26347: ST_TO_ADDR
// side := GetSide ( unit ) ;
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 255
26362: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26363: LD_ADDR_VAR 0 4
26367: PUSH
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 248
26377: ST_TO_ADDR
// case nat of 1 :
26378: LD_VAR 0 4
26382: PUSH
26383: LD_INT 1
26385: DOUBLE
26386: EQUAL
26387: IFTRUE 26391
26389: GO 26402
26391: POP
// tech := tech_lassight ; 2 :
26392: LD_ADDR_VAR 0 5
26396: PUSH
26397: LD_INT 12
26399: ST_TO_ADDR
26400: GO 26441
26402: LD_INT 2
26404: DOUBLE
26405: EQUAL
26406: IFTRUE 26410
26408: GO 26421
26410: POP
// tech := tech_mortar ; 3 :
26411: LD_ADDR_VAR 0 5
26415: PUSH
26416: LD_INT 41
26418: ST_TO_ADDR
26419: GO 26441
26421: LD_INT 3
26423: DOUBLE
26424: EQUAL
26425: IFTRUE 26429
26427: GO 26440
26429: POP
// tech := tech_bazooka ; end ;
26430: LD_ADDR_VAR 0 5
26434: PUSH
26435: LD_INT 44
26437: ST_TO_ADDR
26438: GO 26441
26440: POP
// if Researched ( side , tech ) then
26441: LD_VAR 0 3
26445: PPUSH
26446: LD_VAR 0 5
26450: PPUSH
26451: CALL_OW 325
26455: IFFALSE 26482
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26457: LD_ADDR_VAR 0 2
26461: PUSH
26462: LD_INT 5
26464: PUSH
26465: LD_INT 8
26467: PUSH
26468: LD_INT 9
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: PUSH
26476: LD_VAR 0 4
26480: ARRAY
26481: ST_TO_ADDR
// end ;
26482: LD_VAR 0 2
26486: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26487: LD_INT 0
26489: PPUSH
26490: PPUSH
26491: PPUSH
// if not mines then
26492: LD_VAR 0 2
26496: NOT
26497: IFFALSE 26501
// exit ;
26499: GO 26645
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26501: LD_ADDR_VAR 0 5
26505: PUSH
26506: LD_INT 81
26508: PUSH
26509: LD_VAR 0 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 3
26520: PUSH
26521: LD_INT 21
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PPUSH
26539: CALL_OW 69
26543: ST_TO_ADDR
// for i in mines do
26544: LD_ADDR_VAR 0 4
26548: PUSH
26549: LD_VAR 0 2
26553: PUSH
26554: FOR_IN
26555: IFFALSE 26643
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26557: LD_VAR 0 4
26561: PUSH
26562: LD_INT 1
26564: ARRAY
26565: PPUSH
26566: LD_VAR 0 4
26570: PUSH
26571: LD_INT 2
26573: ARRAY
26574: PPUSH
26575: CALL_OW 458
26579: NOT
26580: IFFALSE 26584
// continue ;
26582: GO 26554
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26584: LD_VAR 0 4
26588: PUSH
26589: LD_INT 1
26591: ARRAY
26592: PPUSH
26593: LD_VAR 0 4
26597: PUSH
26598: LD_INT 2
26600: ARRAY
26601: PPUSH
26602: CALL_OW 428
26606: PUSH
26607: LD_VAR 0 5
26611: IN
26612: IFFALSE 26641
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26614: LD_VAR 0 4
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PPUSH
26623: LD_VAR 0 4
26627: PUSH
26628: LD_INT 2
26630: ARRAY
26631: PPUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL_OW 456
// end ;
26641: GO 26554
26643: POP
26644: POP
// end ;
26645: LD_VAR 0 3
26649: RET
// export function Count ( array ) ; var i ; begin
26650: LD_INT 0
26652: PPUSH
26653: PPUSH
// result := 0 ;
26654: LD_ADDR_VAR 0 2
26658: PUSH
26659: LD_INT 0
26661: ST_TO_ADDR
// for i in array do
26662: LD_ADDR_VAR 0 3
26666: PUSH
26667: LD_VAR 0 1
26671: PUSH
26672: FOR_IN
26673: IFFALSE 26697
// if i then
26675: LD_VAR 0 3
26679: IFFALSE 26695
// result := result + 1 ;
26681: LD_ADDR_VAR 0 2
26685: PUSH
26686: LD_VAR 0 2
26690: PUSH
26691: LD_INT 1
26693: PLUS
26694: ST_TO_ADDR
26695: GO 26672
26697: POP
26698: POP
// end ;
26699: LD_VAR 0 2
26703: RET
// export function IsEmpty ( building ) ; begin
26704: LD_INT 0
26706: PPUSH
// if not building then
26707: LD_VAR 0 1
26711: NOT
26712: IFFALSE 26716
// exit ;
26714: GO 26759
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26716: LD_ADDR_VAR 0 2
26720: PUSH
26721: LD_VAR 0 1
26725: PUSH
26726: LD_INT 22
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 255
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 58
26745: PUSH
26746: EMPTY
26747: LIST
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PPUSH
26753: CALL_OW 69
26757: IN
26758: ST_TO_ADDR
// end ;
26759: LD_VAR 0 2
26763: RET
// export function IsNotFull ( building ) ; var places ; begin
26764: LD_INT 0
26766: PPUSH
26767: PPUSH
// if not building then
26768: LD_VAR 0 1
26772: NOT
26773: IFFALSE 26777
// exit ;
26775: GO 26948
// result := false ;
26777: LD_ADDR_VAR 0 2
26781: PUSH
26782: LD_INT 0
26784: ST_TO_ADDR
// places := 0 ;
26785: LD_ADDR_VAR 0 3
26789: PUSH
26790: LD_INT 0
26792: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 266
26802: PUSH
26803: LD_INT 0
26805: DOUBLE
26806: EQUAL
26807: IFTRUE 26865
26809: LD_INT 1
26811: DOUBLE
26812: EQUAL
26813: IFTRUE 26865
26815: LD_INT 6
26817: DOUBLE
26818: EQUAL
26819: IFTRUE 26865
26821: LD_INT 7
26823: DOUBLE
26824: EQUAL
26825: IFTRUE 26865
26827: LD_INT 8
26829: DOUBLE
26830: EQUAL
26831: IFTRUE 26865
26833: LD_INT 4
26835: DOUBLE
26836: EQUAL
26837: IFTRUE 26865
26839: LD_INT 5
26841: DOUBLE
26842: EQUAL
26843: IFTRUE 26865
26845: LD_INT 2
26847: DOUBLE
26848: EQUAL
26849: IFTRUE 26865
26851: LD_INT 3
26853: DOUBLE
26854: EQUAL
26855: IFTRUE 26865
26857: LD_INT 35
26859: DOUBLE
26860: EQUAL
26861: IFTRUE 26865
26863: GO 26876
26865: POP
// places := 6 ; b_bunker , b_breastwork :
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_INT 6
26873: ST_TO_ADDR
26874: GO 26921
26876: LD_INT 32
26878: DOUBLE
26879: EQUAL
26880: IFTRUE 26890
26882: LD_INT 31
26884: DOUBLE
26885: EQUAL
26886: IFTRUE 26890
26888: GO 26901
26890: POP
// places := 1 ; b_control_tower :
26891: LD_ADDR_VAR 0 3
26895: PUSH
26896: LD_INT 1
26898: ST_TO_ADDR
26899: GO 26921
26901: LD_INT 36
26903: DOUBLE
26904: EQUAL
26905: IFTRUE 26909
26907: GO 26920
26909: POP
// places := 3 ; end ;
26910: LD_ADDR_VAR 0 3
26914: PUSH
26915: LD_INT 3
26917: ST_TO_ADDR
26918: GO 26921
26920: POP
// if places then
26921: LD_VAR 0 3
26925: IFFALSE 26948
// result := UnitsInside ( building ) < places ;
26927: LD_ADDR_VAR 0 2
26931: PUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 313
26941: PUSH
26942: LD_VAR 0 3
26946: LESS
26947: ST_TO_ADDR
// end ;
26948: LD_VAR 0 2
26952: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26953: LD_INT 0
26955: PPUSH
26956: PPUSH
26957: PPUSH
26958: PPUSH
// tmp := [ ] ;
26959: LD_ADDR_VAR 0 3
26963: PUSH
26964: EMPTY
26965: ST_TO_ADDR
// list := [ ] ;
26966: LD_ADDR_VAR 0 5
26970: PUSH
26971: EMPTY
26972: ST_TO_ADDR
// for i = 16 to 25 do
26973: LD_ADDR_VAR 0 4
26977: PUSH
26978: DOUBLE
26979: LD_INT 16
26981: DEC
26982: ST_TO_ADDR
26983: LD_INT 25
26985: PUSH
26986: FOR_TO
26987: IFFALSE 27060
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_VAR 0 3
26998: PUSH
26999: LD_INT 22
27001: PUSH
27002: LD_VAR 0 1
27006: PPUSH
27007: CALL_OW 255
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 91
27018: PUSH
27019: LD_VAR 0 1
27023: PUSH
27024: LD_INT 6
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 30
27034: PUSH
27035: LD_VAR 0 4
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: PPUSH
27052: CALL_OW 69
27056: ADD
27057: ST_TO_ADDR
27058: GO 26986
27060: POP
27061: POP
// for i = 1 to tmp do
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: DOUBLE
27068: LD_INT 1
27070: DEC
27071: ST_TO_ADDR
27072: LD_VAR 0 3
27076: PUSH
27077: FOR_TO
27078: IFFALSE 27166
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_VAR 0 5
27089: PUSH
27090: LD_VAR 0 3
27094: PUSH
27095: LD_VAR 0 4
27099: ARRAY
27100: PPUSH
27101: CALL_OW 266
27105: PUSH
27106: LD_VAR 0 3
27110: PUSH
27111: LD_VAR 0 4
27115: ARRAY
27116: PPUSH
27117: CALL_OW 250
27121: PUSH
27122: LD_VAR 0 3
27126: PUSH
27127: LD_VAR 0 4
27131: ARRAY
27132: PPUSH
27133: CALL_OW 251
27137: PUSH
27138: LD_VAR 0 3
27142: PUSH
27143: LD_VAR 0 4
27147: ARRAY
27148: PPUSH
27149: CALL_OW 254
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: ADD
27163: ST_TO_ADDR
27164: GO 27077
27166: POP
27167: POP
// result := list ;
27168: LD_ADDR_VAR 0 2
27172: PUSH
27173: LD_VAR 0 5
27177: ST_TO_ADDR
// end ;
27178: LD_VAR 0 2
27182: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27183: LD_INT 0
27185: PPUSH
27186: PPUSH
27187: PPUSH
27188: PPUSH
27189: PPUSH
27190: PPUSH
27191: PPUSH
// if not factory then
27192: LD_VAR 0 1
27196: NOT
27197: IFFALSE 27201
// exit ;
27199: GO 27794
// if control = control_apeman then
27201: LD_VAR 0 4
27205: PUSH
27206: LD_INT 5
27208: EQUAL
27209: IFFALSE 27318
// begin tmp := UnitsInside ( factory ) ;
27211: LD_ADDR_VAR 0 8
27215: PUSH
27216: LD_VAR 0 1
27220: PPUSH
27221: CALL_OW 313
27225: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27226: LD_VAR 0 8
27230: PPUSH
27231: LD_INT 25
27233: PUSH
27234: LD_INT 12
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 72
27245: NOT
27246: IFFALSE 27256
// control := control_manual ;
27248: LD_ADDR_VAR 0 4
27252: PUSH
27253: LD_INT 1
27255: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27256: LD_ADDR_VAR 0 8
27260: PUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL 26953 0 1
27270: ST_TO_ADDR
// if tmp then
27271: LD_VAR 0 8
27275: IFFALSE 27318
// begin for i in tmp do
27277: LD_ADDR_VAR 0 7
27281: PUSH
27282: LD_VAR 0 8
27286: PUSH
27287: FOR_IN
27288: IFFALSE 27316
// if i [ 1 ] = b_ext_radio then
27290: LD_VAR 0 7
27294: PUSH
27295: LD_INT 1
27297: ARRAY
27298: PUSH
27299: LD_INT 22
27301: EQUAL
27302: IFFALSE 27314
// begin control := control_remote ;
27304: LD_ADDR_VAR 0 4
27308: PUSH
27309: LD_INT 2
27311: ST_TO_ADDR
// break ;
27312: GO 27316
// end ;
27314: GO 27287
27316: POP
27317: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27318: LD_VAR 0 1
27322: PPUSH
27323: LD_VAR 0 2
27327: PPUSH
27328: LD_VAR 0 3
27332: PPUSH
27333: LD_VAR 0 4
27337: PPUSH
27338: LD_VAR 0 5
27342: PPUSH
27343: CALL_OW 448
27347: IFFALSE 27382
// begin result := [ chassis , engine , control , weapon ] ;
27349: LD_ADDR_VAR 0 6
27353: PUSH
27354: LD_VAR 0 2
27358: PUSH
27359: LD_VAR 0 3
27363: PUSH
27364: LD_VAR 0 4
27368: PUSH
27369: LD_VAR 0 5
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
// exit ;
27380: GO 27794
// end ; _chassis := AvailableChassisList ( factory ) ;
27382: LD_ADDR_VAR 0 9
27386: PUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 475
27396: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27397: LD_ADDR_VAR 0 11
27401: PUSH
27402: LD_VAR 0 1
27406: PPUSH
27407: CALL_OW 476
27411: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27412: LD_ADDR_VAR 0 12
27416: PUSH
27417: LD_VAR 0 1
27421: PPUSH
27422: CALL_OW 477
27426: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27427: LD_ADDR_VAR 0 10
27431: PUSH
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 478
27441: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27442: LD_VAR 0 9
27446: NOT
27447: PUSH
27448: LD_VAR 0 11
27452: NOT
27453: OR
27454: PUSH
27455: LD_VAR 0 12
27459: NOT
27460: OR
27461: PUSH
27462: LD_VAR 0 10
27466: NOT
27467: OR
27468: IFFALSE 27503
// begin result := [ chassis , engine , control , weapon ] ;
27470: LD_ADDR_VAR 0 6
27474: PUSH
27475: LD_VAR 0 2
27479: PUSH
27480: LD_VAR 0 3
27484: PUSH
27485: LD_VAR 0 4
27489: PUSH
27490: LD_VAR 0 5
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
// exit ;
27501: GO 27794
// end ; if not chassis in _chassis then
27503: LD_VAR 0 2
27507: PUSH
27508: LD_VAR 0 9
27512: IN
27513: NOT
27514: IFFALSE 27540
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27516: LD_ADDR_VAR 0 2
27520: PUSH
27521: LD_VAR 0 9
27525: PUSH
27526: LD_INT 1
27528: PPUSH
27529: LD_VAR 0 9
27533: PPUSH
27534: CALL_OW 12
27538: ARRAY
27539: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27540: LD_VAR 0 2
27544: PPUSH
27545: LD_VAR 0 3
27549: PPUSH
27550: CALL 27799 0 2
27554: NOT
27555: IFFALSE 27614
// repeat engine := _engine [ 1 ] ;
27557: LD_ADDR_VAR 0 3
27561: PUSH
27562: LD_VAR 0 11
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27571: LD_ADDR_VAR 0 11
27575: PUSH
27576: LD_VAR 0 11
27580: PPUSH
27581: LD_INT 1
27583: PPUSH
27584: CALL_OW 3
27588: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27589: LD_VAR 0 2
27593: PPUSH
27594: LD_VAR 0 3
27598: PPUSH
27599: CALL 27799 0 2
27603: PUSH
27604: LD_VAR 0 11
27608: PUSH
27609: EMPTY
27610: EQUAL
27611: OR
27612: IFFALSE 27557
// if not control in _control then
27614: LD_VAR 0 4
27618: PUSH
27619: LD_VAR 0 12
27623: IN
27624: NOT
27625: IFFALSE 27651
// control := _control [ rand ( 1 , _control ) ] ;
27627: LD_ADDR_VAR 0 4
27631: PUSH
27632: LD_VAR 0 12
27636: PUSH
27637: LD_INT 1
27639: PPUSH
27640: LD_VAR 0 12
27644: PPUSH
27645: CALL_OW 12
27649: ARRAY
27650: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27651: LD_VAR 0 2
27655: PPUSH
27656: LD_VAR 0 5
27660: PPUSH
27661: CALL 28019 0 2
27665: NOT
27666: IFFALSE 27725
// repeat weapon := _weapon [ 1 ] ;
27668: LD_ADDR_VAR 0 5
27672: PUSH
27673: LD_VAR 0 10
27677: PUSH
27678: LD_INT 1
27680: ARRAY
27681: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27682: LD_ADDR_VAR 0 10
27686: PUSH
27687: LD_VAR 0 10
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: CALL_OW 3
27699: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27700: LD_VAR 0 2
27704: PPUSH
27705: LD_VAR 0 5
27709: PPUSH
27710: CALL 28019 0 2
27714: PUSH
27715: LD_VAR 0 10
27719: PUSH
27720: EMPTY
27721: EQUAL
27722: OR
27723: IFFALSE 27668
// result := [ ] ;
27725: LD_ADDR_VAR 0 6
27729: PUSH
27730: EMPTY
27731: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27732: LD_VAR 0 1
27736: PPUSH
27737: LD_VAR 0 2
27741: PPUSH
27742: LD_VAR 0 3
27746: PPUSH
27747: LD_VAR 0 4
27751: PPUSH
27752: LD_VAR 0 5
27756: PPUSH
27757: CALL_OW 448
27761: IFFALSE 27794
// result := [ chassis , engine , control , weapon ] ;
27763: LD_ADDR_VAR 0 6
27767: PUSH
27768: LD_VAR 0 2
27772: PUSH
27773: LD_VAR 0 3
27777: PUSH
27778: LD_VAR 0 4
27782: PUSH
27783: LD_VAR 0 5
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: ST_TO_ADDR
// end ;
27794: LD_VAR 0 6
27798: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27799: LD_INT 0
27801: PPUSH
// if not chassis or not engine then
27802: LD_VAR 0 1
27806: NOT
27807: PUSH
27808: LD_VAR 0 2
27812: NOT
27813: OR
27814: IFFALSE 27818
// exit ;
27816: GO 28014
// case engine of engine_solar :
27818: LD_VAR 0 2
27822: PUSH
27823: LD_INT 2
27825: DOUBLE
27826: EQUAL
27827: IFTRUE 27831
27829: GO 27869
27831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27832: LD_ADDR_VAR 0 3
27836: PUSH
27837: LD_INT 11
27839: PUSH
27840: LD_INT 12
27842: PUSH
27843: LD_INT 13
27845: PUSH
27846: LD_INT 14
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 3
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: ST_TO_ADDR
27867: GO 27998
27869: LD_INT 1
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27877
27875: GO 27939
27877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_INT 11
27885: PUSH
27886: LD_INT 12
27888: PUSH
27889: LD_INT 13
27891: PUSH
27892: LD_INT 14
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 3
27903: PUSH
27904: LD_INT 4
27906: PUSH
27907: LD_INT 5
27909: PUSH
27910: LD_INT 21
27912: PUSH
27913: LD_INT 23
27915: PUSH
27916: LD_INT 22
27918: PUSH
27919: LD_INT 24
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
27937: GO 27998
27939: LD_INT 3
27941: DOUBLE
27942: EQUAL
27943: IFTRUE 27947
27945: GO 27997
27947: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27948: LD_ADDR_VAR 0 3
27952: PUSH
27953: LD_INT 13
27955: PUSH
27956: LD_INT 14
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: LD_INT 4
27967: PUSH
27968: LD_INT 5
27970: PUSH
27971: LD_INT 21
27973: PUSH
27974: LD_INT 22
27976: PUSH
27977: LD_INT 23
27979: PUSH
27980: LD_INT 24
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: ST_TO_ADDR
27995: GO 27998
27997: POP
// result := ( chassis in result ) ;
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: LD_VAR 0 1
28007: PUSH
28008: LD_VAR 0 3
28012: IN
28013: ST_TO_ADDR
// end ;
28014: LD_VAR 0 3
28018: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28019: LD_INT 0
28021: PPUSH
// if not chassis or not weapon then
28022: LD_VAR 0 1
28026: NOT
28027: PUSH
28028: LD_VAR 0 2
28032: NOT
28033: OR
28034: IFFALSE 28038
// exit ;
28036: GO 29098
// case weapon of us_machine_gun :
28038: LD_VAR 0 2
28042: PUSH
28043: LD_INT 2
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28081
28051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28052: LD_ADDR_VAR 0 3
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 4
28068: PUSH
28069: LD_INT 5
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
28079: GO 29082
28081: LD_INT 3
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28119
28089: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: LD_INT 3
28103: PUSH
28104: LD_INT 4
28106: PUSH
28107: LD_INT 5
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
28117: GO 29082
28119: LD_INT 11
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28157
28127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28128: LD_ADDR_VAR 0 3
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: LD_INT 3
28141: PUSH
28142: LD_INT 4
28144: PUSH
28145: LD_INT 5
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: ST_TO_ADDR
28155: GO 29082
28157: LD_INT 4
28159: DOUBLE
28160: EQUAL
28161: IFTRUE 28165
28163: GO 28191
28165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 3
28176: PUSH
28177: LD_INT 4
28179: PUSH
28180: LD_INT 5
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
28189: GO 29082
28191: LD_INT 5
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 28225
28199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: LD_INT 4
28213: PUSH
28214: LD_INT 5
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
28223: GO 29082
28225: LD_INT 9
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28259
28233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: LD_INT 4
28247: PUSH
28248: LD_INT 5
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: ST_TO_ADDR
28257: GO 29082
28259: LD_INT 7
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28267
28265: GO 28293
28267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28268: LD_ADDR_VAR 0 3
28272: PUSH
28273: LD_INT 2
28275: PUSH
28276: LD_INT 3
28278: PUSH
28279: LD_INT 4
28281: PUSH
28282: LD_INT 5
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: ST_TO_ADDR
28291: GO 29082
28293: LD_INT 12
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28327
28301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28302: LD_ADDR_VAR 0 3
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 3
28312: PUSH
28313: LD_INT 4
28315: PUSH
28316: LD_INT 5
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
28325: GO 29082
28327: LD_INT 13
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28361
28335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28336: LD_ADDR_VAR 0 3
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: LD_INT 3
28346: PUSH
28347: LD_INT 4
28349: PUSH
28350: LD_INT 5
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
28359: GO 29082
28361: LD_INT 14
28363: DOUBLE
28364: EQUAL
28365: IFTRUE 28369
28367: GO 28387
28369: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28370: LD_ADDR_VAR 0 3
28374: PUSH
28375: LD_INT 4
28377: PUSH
28378: LD_INT 5
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: ST_TO_ADDR
28385: GO 29082
28387: LD_INT 6
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28413
28395: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 4
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: ST_TO_ADDR
28411: GO 29082
28413: LD_INT 10
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28439
28421: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28422: LD_ADDR_VAR 0 3
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: LD_INT 5
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: ST_TO_ADDR
28437: GO 29082
28439: LD_INT 22
28441: DOUBLE
28442: EQUAL
28443: IFTRUE 28447
28445: GO 28473
28447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: LD_INT 11
28455: PUSH
28456: LD_INT 12
28458: PUSH
28459: LD_INT 13
28461: PUSH
28462: LD_INT 14
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
28471: GO 29082
28473: LD_INT 23
28475: DOUBLE
28476: EQUAL
28477: IFTRUE 28481
28479: GO 28507
28481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28482: LD_ADDR_VAR 0 3
28486: PUSH
28487: LD_INT 11
28489: PUSH
28490: LD_INT 12
28492: PUSH
28493: LD_INT 13
28495: PUSH
28496: LD_INT 14
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
28505: GO 29082
28507: LD_INT 24
28509: DOUBLE
28510: EQUAL
28511: IFTRUE 28515
28513: GO 28541
28515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28516: LD_ADDR_VAR 0 3
28520: PUSH
28521: LD_INT 11
28523: PUSH
28524: LD_INT 12
28526: PUSH
28527: LD_INT 13
28529: PUSH
28530: LD_INT 14
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: ST_TO_ADDR
28539: GO 29082
28541: LD_INT 30
28543: DOUBLE
28544: EQUAL
28545: IFTRUE 28549
28547: GO 28575
28549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 11
28557: PUSH
28558: LD_INT 12
28560: PUSH
28561: LD_INT 13
28563: PUSH
28564: LD_INT 14
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
28573: GO 29082
28575: LD_INT 25
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28601
28583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 13
28591: PUSH
28592: LD_INT 14
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: ST_TO_ADDR
28599: GO 29082
28601: LD_INT 27
28603: DOUBLE
28604: EQUAL
28605: IFTRUE 28609
28607: GO 28627
28609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_INT 13
28617: PUSH
28618: LD_INT 14
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: ST_TO_ADDR
28625: GO 29082
28627: LD_INT 92
28629: DOUBLE
28630: EQUAL
28631: IFTRUE 28635
28633: GO 28661
28635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28636: LD_ADDR_VAR 0 3
28640: PUSH
28641: LD_INT 11
28643: PUSH
28644: LD_INT 12
28646: PUSH
28647: LD_INT 13
28649: PUSH
28650: LD_INT 14
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
28659: GO 29082
28661: LD_INT 28
28663: DOUBLE
28664: EQUAL
28665: IFTRUE 28669
28667: GO 28687
28669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28670: LD_ADDR_VAR 0 3
28674: PUSH
28675: LD_INT 13
28677: PUSH
28678: LD_INT 14
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: ST_TO_ADDR
28685: GO 29082
28687: LD_INT 29
28689: DOUBLE
28690: EQUAL
28691: IFTRUE 28695
28693: GO 28713
28695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 13
28703: PUSH
28704: LD_INT 14
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: ST_TO_ADDR
28711: GO 29082
28713: LD_INT 31
28715: DOUBLE
28716: EQUAL
28717: IFTRUE 28721
28719: GO 28739
28721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_INT 13
28729: PUSH
28730: LD_INT 14
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: ST_TO_ADDR
28737: GO 29082
28739: LD_INT 26
28741: DOUBLE
28742: EQUAL
28743: IFTRUE 28747
28745: GO 28765
28747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28748: LD_ADDR_VAR 0 3
28752: PUSH
28753: LD_INT 13
28755: PUSH
28756: LD_INT 14
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: ST_TO_ADDR
28763: GO 29082
28765: LD_INT 42
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28799
28773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28774: LD_ADDR_VAR 0 3
28778: PUSH
28779: LD_INT 21
28781: PUSH
28782: LD_INT 22
28784: PUSH
28785: LD_INT 23
28787: PUSH
28788: LD_INT 24
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 29082
28799: LD_INT 43
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28833
28807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 21
28815: PUSH
28816: LD_INT 22
28818: PUSH
28819: LD_INT 23
28821: PUSH
28822: LD_INT 24
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
28831: GO 29082
28833: LD_INT 44
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28867
28841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 21
28849: PUSH
28850: LD_INT 22
28852: PUSH
28853: LD_INT 23
28855: PUSH
28856: LD_INT 24
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
28865: GO 29082
28867: LD_INT 45
28869: DOUBLE
28870: EQUAL
28871: IFTRUE 28875
28873: GO 28901
28875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: LD_INT 21
28883: PUSH
28884: LD_INT 22
28886: PUSH
28887: LD_INT 23
28889: PUSH
28890: LD_INT 24
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: ST_TO_ADDR
28899: GO 29082
28901: LD_INT 49
28903: DOUBLE
28904: EQUAL
28905: IFTRUE 28909
28907: GO 28935
28909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28910: LD_ADDR_VAR 0 3
28914: PUSH
28915: LD_INT 21
28917: PUSH
28918: LD_INT 22
28920: PUSH
28921: LD_INT 23
28923: PUSH
28924: LD_INT 24
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
28933: GO 29082
28935: LD_INT 51
28937: DOUBLE
28938: EQUAL
28939: IFTRUE 28943
28941: GO 28969
28943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28944: LD_ADDR_VAR 0 3
28948: PUSH
28949: LD_INT 21
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 23
28957: PUSH
28958: LD_INT 24
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: ST_TO_ADDR
28967: GO 29082
28969: LD_INT 52
28971: DOUBLE
28972: EQUAL
28973: IFTRUE 28977
28975: GO 29003
28977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28978: LD_ADDR_VAR 0 3
28982: PUSH
28983: LD_INT 21
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_INT 23
28991: PUSH
28992: LD_INT 24
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
29001: GO 29082
29003: LD_INT 53
29005: DOUBLE
29006: EQUAL
29007: IFTRUE 29011
29009: GO 29029
29011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29012: LD_ADDR_VAR 0 3
29016: PUSH
29017: LD_INT 23
29019: PUSH
29020: LD_INT 24
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: ST_TO_ADDR
29027: GO 29082
29029: LD_INT 46
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29037
29035: GO 29055
29037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29038: LD_ADDR_VAR 0 3
29042: PUSH
29043: LD_INT 23
29045: PUSH
29046: LD_INT 24
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: ST_TO_ADDR
29053: GO 29082
29055: LD_INT 47
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29063
29061: GO 29081
29063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29064: LD_ADDR_VAR 0 3
29068: PUSH
29069: LD_INT 23
29071: PUSH
29072: LD_INT 24
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: ST_TO_ADDR
29079: GO 29082
29081: POP
// result := ( chassis in result ) ;
29082: LD_ADDR_VAR 0 3
29086: PUSH
29087: LD_VAR 0 1
29091: PUSH
29092: LD_VAR 0 3
29096: IN
29097: ST_TO_ADDR
// end ;
29098: LD_VAR 0 3
29102: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29103: LD_INT 0
29105: PPUSH
29106: PPUSH
29107: PPUSH
29108: PPUSH
29109: PPUSH
29110: PPUSH
29111: PPUSH
// result := array ;
29112: LD_ADDR_VAR 0 5
29116: PUSH
29117: LD_VAR 0 1
29121: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29122: LD_VAR 0 1
29126: NOT
29127: PUSH
29128: LD_VAR 0 2
29132: NOT
29133: OR
29134: PUSH
29135: LD_VAR 0 3
29139: NOT
29140: OR
29141: PUSH
29142: LD_VAR 0 2
29146: PUSH
29147: LD_VAR 0 1
29151: GREATER
29152: OR
29153: PUSH
29154: LD_VAR 0 3
29158: PUSH
29159: LD_VAR 0 1
29163: GREATER
29164: OR
29165: IFFALSE 29169
// exit ;
29167: GO 29465
// if direction then
29169: LD_VAR 0 4
29173: IFFALSE 29237
// begin d := 1 ;
29175: LD_ADDR_VAR 0 9
29179: PUSH
29180: LD_INT 1
29182: ST_TO_ADDR
// if i_from > i_to then
29183: LD_VAR 0 2
29187: PUSH
29188: LD_VAR 0 3
29192: GREATER
29193: IFFALSE 29219
// length := ( array - i_from ) + i_to else
29195: LD_ADDR_VAR 0 11
29199: PUSH
29200: LD_VAR 0 1
29204: PUSH
29205: LD_VAR 0 2
29209: MINUS
29210: PUSH
29211: LD_VAR 0 3
29215: PLUS
29216: ST_TO_ADDR
29217: GO 29235
// length := i_to - i_from ;
29219: LD_ADDR_VAR 0 11
29223: PUSH
29224: LD_VAR 0 3
29228: PUSH
29229: LD_VAR 0 2
29233: MINUS
29234: ST_TO_ADDR
// end else
29235: GO 29298
// begin d := - 1 ;
29237: LD_ADDR_VAR 0 9
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: ST_TO_ADDR
// if i_from > i_to then
29246: LD_VAR 0 2
29250: PUSH
29251: LD_VAR 0 3
29255: GREATER
29256: IFFALSE 29276
// length := i_from - i_to else
29258: LD_ADDR_VAR 0 11
29262: PUSH
29263: LD_VAR 0 2
29267: PUSH
29268: LD_VAR 0 3
29272: MINUS
29273: ST_TO_ADDR
29274: GO 29298
// length := ( array - i_to ) + i_from ;
29276: LD_ADDR_VAR 0 11
29280: PUSH
29281: LD_VAR 0 1
29285: PUSH
29286: LD_VAR 0 3
29290: MINUS
29291: PUSH
29292: LD_VAR 0 2
29296: PLUS
29297: ST_TO_ADDR
// end ; if not length then
29298: LD_VAR 0 11
29302: NOT
29303: IFFALSE 29307
// exit ;
29305: GO 29465
// tmp := array ;
29307: LD_ADDR_VAR 0 10
29311: PUSH
29312: LD_VAR 0 1
29316: ST_TO_ADDR
// for i = 1 to length do
29317: LD_ADDR_VAR 0 6
29321: PUSH
29322: DOUBLE
29323: LD_INT 1
29325: DEC
29326: ST_TO_ADDR
29327: LD_VAR 0 11
29331: PUSH
29332: FOR_TO
29333: IFFALSE 29453
// begin for j = 1 to array do
29335: LD_ADDR_VAR 0 7
29339: PUSH
29340: DOUBLE
29341: LD_INT 1
29343: DEC
29344: ST_TO_ADDR
29345: LD_VAR 0 1
29349: PUSH
29350: FOR_TO
29351: IFFALSE 29439
// begin k := j + d ;
29353: LD_ADDR_VAR 0 8
29357: PUSH
29358: LD_VAR 0 7
29362: PUSH
29363: LD_VAR 0 9
29367: PLUS
29368: ST_TO_ADDR
// if k > array then
29369: LD_VAR 0 8
29373: PUSH
29374: LD_VAR 0 1
29378: GREATER
29379: IFFALSE 29389
// k := 1 ;
29381: LD_ADDR_VAR 0 8
29385: PUSH
29386: LD_INT 1
29388: ST_TO_ADDR
// if not k then
29389: LD_VAR 0 8
29393: NOT
29394: IFFALSE 29406
// k := array ;
29396: LD_ADDR_VAR 0 8
29400: PUSH
29401: LD_VAR 0 1
29405: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29406: LD_ADDR_VAR 0 10
29410: PUSH
29411: LD_VAR 0 10
29415: PPUSH
29416: LD_VAR 0 8
29420: PPUSH
29421: LD_VAR 0 1
29425: PUSH
29426: LD_VAR 0 7
29430: ARRAY
29431: PPUSH
29432: CALL_OW 1
29436: ST_TO_ADDR
// end ;
29437: GO 29350
29439: POP
29440: POP
// array := tmp ;
29441: LD_ADDR_VAR 0 1
29445: PUSH
29446: LD_VAR 0 10
29450: ST_TO_ADDR
// end ;
29451: GO 29332
29453: POP
29454: POP
// result := array ;
29455: LD_ADDR_VAR 0 5
29459: PUSH
29460: LD_VAR 0 1
29464: ST_TO_ADDR
// end ;
29465: LD_VAR 0 5
29469: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29470: LD_INT 0
29472: PPUSH
29473: PPUSH
// result := 0 ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
// if not array or not value in array then
29482: LD_VAR 0 1
29486: NOT
29487: PUSH
29488: LD_VAR 0 2
29492: PUSH
29493: LD_VAR 0 1
29497: IN
29498: NOT
29499: OR
29500: IFFALSE 29504
// exit ;
29502: GO 29558
// for i = 1 to array do
29504: LD_ADDR_VAR 0 4
29508: PUSH
29509: DOUBLE
29510: LD_INT 1
29512: DEC
29513: ST_TO_ADDR
29514: LD_VAR 0 1
29518: PUSH
29519: FOR_TO
29520: IFFALSE 29556
// if value = array [ i ] then
29522: LD_VAR 0 2
29526: PUSH
29527: LD_VAR 0 1
29531: PUSH
29532: LD_VAR 0 4
29536: ARRAY
29537: EQUAL
29538: IFFALSE 29554
// begin result := i ;
29540: LD_ADDR_VAR 0 3
29544: PUSH
29545: LD_VAR 0 4
29549: ST_TO_ADDR
// exit ;
29550: POP
29551: POP
29552: GO 29558
// end ;
29554: GO 29519
29556: POP
29557: POP
// end ;
29558: LD_VAR 0 3
29562: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29563: LD_INT 0
29565: PPUSH
// vc_chassis := chassis ;
29566: LD_ADDR_OWVAR 37
29570: PUSH
29571: LD_VAR 0 1
29575: ST_TO_ADDR
// vc_engine := engine ;
29576: LD_ADDR_OWVAR 39
29580: PUSH
29581: LD_VAR 0 2
29585: ST_TO_ADDR
// vc_control := control ;
29586: LD_ADDR_OWVAR 38
29590: PUSH
29591: LD_VAR 0 3
29595: ST_TO_ADDR
// vc_weapon := weapon ;
29596: LD_ADDR_OWVAR 40
29600: PUSH
29601: LD_VAR 0 4
29605: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29606: LD_ADDR_OWVAR 41
29610: PUSH
29611: LD_VAR 0 5
29615: ST_TO_ADDR
// end ;
29616: LD_VAR 0 6
29620: RET
// export function WantPlant ( unit ) ; var task ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
// result := false ;
29625: LD_ADDR_VAR 0 2
29629: PUSH
29630: LD_INT 0
29632: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 437
29647: ST_TO_ADDR
// if task then
29648: LD_VAR 0 3
29652: IFFALSE 29680
// if task [ 1 ] [ 1 ] = p then
29654: LD_VAR 0 3
29658: PUSH
29659: LD_INT 1
29661: ARRAY
29662: PUSH
29663: LD_INT 1
29665: ARRAY
29666: PUSH
29667: LD_STRING p
29669: EQUAL
29670: IFFALSE 29680
// result := true ;
29672: LD_ADDR_VAR 0 2
29676: PUSH
29677: LD_INT 1
29679: ST_TO_ADDR
// end ;
29680: LD_VAR 0 2
29684: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29685: LD_INT 0
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
// if pos < 1 then
29691: LD_VAR 0 2
29695: PUSH
29696: LD_INT 1
29698: LESS
29699: IFFALSE 29703
// exit ;
29701: GO 30006
// if pos = 1 then
29703: LD_VAR 0 2
29707: PUSH
29708: LD_INT 1
29710: EQUAL
29711: IFFALSE 29744
// result := Replace ( arr , pos [ 1 ] , value ) else
29713: LD_ADDR_VAR 0 4
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: LD_VAR 0 2
29727: PUSH
29728: LD_INT 1
29730: ARRAY
29731: PPUSH
29732: LD_VAR 0 3
29736: PPUSH
29737: CALL_OW 1
29741: ST_TO_ADDR
29742: GO 30006
// begin tmp := arr ;
29744: LD_ADDR_VAR 0 6
29748: PUSH
29749: LD_VAR 0 1
29753: ST_TO_ADDR
// s_arr := [ tmp ] ;
29754: LD_ADDR_VAR 0 7
29758: PUSH
29759: LD_VAR 0 6
29763: PUSH
29764: EMPTY
29765: LIST
29766: ST_TO_ADDR
// for i = 1 to pos - 1 do
29767: LD_ADDR_VAR 0 5
29771: PUSH
29772: DOUBLE
29773: LD_INT 1
29775: DEC
29776: ST_TO_ADDR
29777: LD_VAR 0 2
29781: PUSH
29782: LD_INT 1
29784: MINUS
29785: PUSH
29786: FOR_TO
29787: IFFALSE 29832
// begin tmp := tmp [ pos [ i ] ] ;
29789: LD_ADDR_VAR 0 6
29793: PUSH
29794: LD_VAR 0 6
29798: PUSH
29799: LD_VAR 0 2
29803: PUSH
29804: LD_VAR 0 5
29808: ARRAY
29809: ARRAY
29810: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29811: LD_ADDR_VAR 0 7
29815: PUSH
29816: LD_VAR 0 7
29820: PUSH
29821: LD_VAR 0 6
29825: PUSH
29826: EMPTY
29827: LIST
29828: ADD
29829: ST_TO_ADDR
// end ;
29830: GO 29786
29832: POP
29833: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29834: LD_ADDR_VAR 0 6
29838: PUSH
29839: LD_VAR 0 6
29843: PPUSH
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 2
29853: ARRAY
29854: PPUSH
29855: LD_VAR 0 3
29859: PPUSH
29860: CALL_OW 1
29864: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29865: LD_ADDR_VAR 0 7
29869: PUSH
29870: LD_VAR 0 7
29874: PPUSH
29875: LD_VAR 0 7
29879: PPUSH
29880: LD_VAR 0 6
29884: PPUSH
29885: CALL_OW 1
29889: ST_TO_ADDR
// for i = s_arr downto 2 do
29890: LD_ADDR_VAR 0 5
29894: PUSH
29895: DOUBLE
29896: LD_VAR 0 7
29900: INC
29901: ST_TO_ADDR
29902: LD_INT 2
29904: PUSH
29905: FOR_DOWNTO
29906: IFFALSE 29990
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29908: LD_ADDR_VAR 0 6
29912: PUSH
29913: LD_VAR 0 7
29917: PUSH
29918: LD_VAR 0 5
29922: PUSH
29923: LD_INT 1
29925: MINUS
29926: ARRAY
29927: PPUSH
29928: LD_VAR 0 2
29932: PUSH
29933: LD_VAR 0 5
29937: PUSH
29938: LD_INT 1
29940: MINUS
29941: ARRAY
29942: PPUSH
29943: LD_VAR 0 7
29947: PUSH
29948: LD_VAR 0 5
29952: ARRAY
29953: PPUSH
29954: CALL_OW 1
29958: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29959: LD_ADDR_VAR 0 7
29963: PUSH
29964: LD_VAR 0 7
29968: PPUSH
29969: LD_VAR 0 5
29973: PUSH
29974: LD_INT 1
29976: MINUS
29977: PPUSH
29978: LD_VAR 0 6
29982: PPUSH
29983: CALL_OW 1
29987: ST_TO_ADDR
// end ;
29988: GO 29905
29990: POP
29991: POP
// result := s_arr [ 1 ] ;
29992: LD_ADDR_VAR 0 4
29996: PUSH
29997: LD_VAR 0 7
30001: PUSH
30002: LD_INT 1
30004: ARRAY
30005: ST_TO_ADDR
// end ; end ;
30006: LD_VAR 0 4
30010: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30011: LD_INT 0
30013: PPUSH
30014: PPUSH
// if not list then
30015: LD_VAR 0 1
30019: NOT
30020: IFFALSE 30024
// exit ;
30022: GO 30115
// i := list [ pos1 ] ;
30024: LD_ADDR_VAR 0 5
30028: PUSH
30029: LD_VAR 0 1
30033: PUSH
30034: LD_VAR 0 2
30038: ARRAY
30039: ST_TO_ADDR
// if not i then
30040: LD_VAR 0 5
30044: NOT
30045: IFFALSE 30049
// exit ;
30047: GO 30115
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30049: LD_ADDR_VAR 0 1
30053: PUSH
30054: LD_VAR 0 1
30058: PPUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: LD_VAR 0 1
30068: PUSH
30069: LD_VAR 0 3
30073: ARRAY
30074: PPUSH
30075: CALL_OW 1
30079: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30080: LD_ADDR_VAR 0 1
30084: PUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: LD_VAR 0 3
30094: PPUSH
30095: LD_VAR 0 5
30099: PPUSH
30100: CALL_OW 1
30104: ST_TO_ADDR
// result := list ;
30105: LD_ADDR_VAR 0 4
30109: PUSH
30110: LD_VAR 0 1
30114: ST_TO_ADDR
// end ;
30115: LD_VAR 0 4
30119: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30120: LD_INT 0
30122: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30123: LD_ADDR_VAR 0 5
30127: PUSH
30128: LD_VAR 0 1
30132: PPUSH
30133: CALL_OW 250
30137: PPUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: CALL_OW 251
30147: PPUSH
30148: LD_VAR 0 2
30152: PPUSH
30153: LD_VAR 0 3
30157: PPUSH
30158: LD_VAR 0 4
30162: PPUSH
30163: CALL 30173 0 5
30167: ST_TO_ADDR
// end ;
30168: LD_VAR 0 5
30172: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30173: LD_INT 0
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
// if not list then
30179: LD_VAR 0 3
30183: NOT
30184: IFFALSE 30188
// exit ;
30186: GO 30576
// result := [ ] ;
30188: LD_ADDR_VAR 0 6
30192: PUSH
30193: EMPTY
30194: ST_TO_ADDR
// for i in list do
30195: LD_ADDR_VAR 0 7
30199: PUSH
30200: LD_VAR 0 3
30204: PUSH
30205: FOR_IN
30206: IFFALSE 30408
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30208: LD_ADDR_VAR 0 9
30212: PUSH
30213: LD_VAR 0 7
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: LD_VAR 0 2
30227: PPUSH
30228: CALL_OW 297
30232: ST_TO_ADDR
// if not result then
30233: LD_VAR 0 6
30237: NOT
30238: IFFALSE 30264
// result := [ [ i , tmp ] ] else
30240: LD_ADDR_VAR 0 6
30244: PUSH
30245: LD_VAR 0 7
30249: PUSH
30250: LD_VAR 0 9
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: ST_TO_ADDR
30262: GO 30406
// begin if result [ result ] [ 2 ] < tmp then
30264: LD_VAR 0 6
30268: PUSH
30269: LD_VAR 0 6
30273: ARRAY
30274: PUSH
30275: LD_INT 2
30277: ARRAY
30278: PUSH
30279: LD_VAR 0 9
30283: LESS
30284: IFFALSE 30326
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30286: LD_ADDR_VAR 0 6
30290: PUSH
30291: LD_VAR 0 6
30295: PPUSH
30296: LD_VAR 0 6
30300: PUSH
30301: LD_INT 1
30303: PLUS
30304: PPUSH
30305: LD_VAR 0 7
30309: PUSH
30310: LD_VAR 0 9
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 2
30323: ST_TO_ADDR
30324: GO 30406
// for j = 1 to result do
30326: LD_ADDR_VAR 0 8
30330: PUSH
30331: DOUBLE
30332: LD_INT 1
30334: DEC
30335: ST_TO_ADDR
30336: LD_VAR 0 6
30340: PUSH
30341: FOR_TO
30342: IFFALSE 30404
// begin if tmp < result [ j ] [ 2 ] then
30344: LD_VAR 0 9
30348: PUSH
30349: LD_VAR 0 6
30353: PUSH
30354: LD_VAR 0 8
30358: ARRAY
30359: PUSH
30360: LD_INT 2
30362: ARRAY
30363: LESS
30364: IFFALSE 30402
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30366: LD_ADDR_VAR 0 6
30370: PUSH
30371: LD_VAR 0 6
30375: PPUSH
30376: LD_VAR 0 8
30380: PPUSH
30381: LD_VAR 0 7
30385: PUSH
30386: LD_VAR 0 9
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PPUSH
30395: CALL_OW 2
30399: ST_TO_ADDR
// break ;
30400: GO 30404
// end ; end ;
30402: GO 30341
30404: POP
30405: POP
// end ; end ;
30406: GO 30205
30408: POP
30409: POP
// if result and not asc then
30410: LD_VAR 0 6
30414: PUSH
30415: LD_VAR 0 4
30419: NOT
30420: AND
30421: IFFALSE 30496
// begin tmp := result ;
30423: LD_ADDR_VAR 0 9
30427: PUSH
30428: LD_VAR 0 6
30432: ST_TO_ADDR
// for i = tmp downto 1 do
30433: LD_ADDR_VAR 0 7
30437: PUSH
30438: DOUBLE
30439: LD_VAR 0 9
30443: INC
30444: ST_TO_ADDR
30445: LD_INT 1
30447: PUSH
30448: FOR_DOWNTO
30449: IFFALSE 30494
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30451: LD_ADDR_VAR 0 6
30455: PUSH
30456: LD_VAR 0 6
30460: PPUSH
30461: LD_VAR 0 9
30465: PUSH
30466: LD_VAR 0 7
30470: MINUS
30471: PUSH
30472: LD_INT 1
30474: PLUS
30475: PPUSH
30476: LD_VAR 0 9
30480: PUSH
30481: LD_VAR 0 7
30485: ARRAY
30486: PPUSH
30487: CALL_OW 1
30491: ST_TO_ADDR
30492: GO 30448
30494: POP
30495: POP
// end ; tmp := [ ] ;
30496: LD_ADDR_VAR 0 9
30500: PUSH
30501: EMPTY
30502: ST_TO_ADDR
// if mode then
30503: LD_VAR 0 5
30507: IFFALSE 30576
// begin for i = 1 to result do
30509: LD_ADDR_VAR 0 7
30513: PUSH
30514: DOUBLE
30515: LD_INT 1
30517: DEC
30518: ST_TO_ADDR
30519: LD_VAR 0 6
30523: PUSH
30524: FOR_TO
30525: IFFALSE 30564
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30527: LD_ADDR_VAR 0 9
30531: PUSH
30532: LD_VAR 0 9
30536: PPUSH
30537: LD_VAR 0 7
30541: PPUSH
30542: LD_VAR 0 6
30546: PUSH
30547: LD_VAR 0 7
30551: ARRAY
30552: PUSH
30553: LD_INT 1
30555: ARRAY
30556: PPUSH
30557: CALL_OW 1
30561: ST_TO_ADDR
30562: GO 30524
30564: POP
30565: POP
// result := tmp ;
30566: LD_ADDR_VAR 0 6
30570: PUSH
30571: LD_VAR 0 9
30575: ST_TO_ADDR
// end ; end ;
30576: LD_VAR 0 6
30580: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
30587: PPUSH
30588: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
// if not x or not y then
30611: LD_VAR 0 2
30615: NOT
30616: PUSH
30617: LD_VAR 0 3
30621: NOT
30622: OR
30623: IFFALSE 30627
// exit ;
30625: GO 32277
// if not range then
30627: LD_VAR 0 4
30631: NOT
30632: IFFALSE 30642
// range := 10 ;
30634: LD_ADDR_VAR 0 4
30638: PUSH
30639: LD_INT 10
30641: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30642: LD_ADDR_VAR 0 8
30646: PUSH
30647: LD_INT 81
30649: PUSH
30650: LD_VAR 0 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 92
30661: PUSH
30662: LD_VAR 0 2
30666: PUSH
30667: LD_VAR 0 3
30671: PUSH
30672: LD_VAR 0 4
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: LD_INT 21
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: PPUSH
30705: CALL_OW 69
30709: ST_TO_ADDR
// if not tmp then
30710: LD_VAR 0 8
30714: NOT
30715: IFFALSE 30719
// exit ;
30717: GO 32277
// for i in tmp do
30719: LD_ADDR_VAR 0 6
30723: PUSH
30724: LD_VAR 0 8
30728: PUSH
30729: FOR_IN
30730: IFFALSE 32252
// begin points := [ 0 , 0 , 0 ] ;
30732: LD_ADDR_VAR 0 9
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
// bpoints := 1 ;
30751: LD_ADDR_VAR 0 10
30755: PUSH
30756: LD_INT 1
30758: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30759: LD_VAR 0 6
30763: PPUSH
30764: CALL_OW 247
30768: PUSH
30769: LD_INT 1
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 31355
30777: POP
// begin if GetClass ( i ) = 1 then
30778: LD_VAR 0 6
30782: PPUSH
30783: CALL_OW 257
30787: PUSH
30788: LD_INT 1
30790: EQUAL
30791: IFFALSE 30812
// points := [ 10 , 5 , 3 ] ;
30793: LD_ADDR_VAR 0 9
30797: PUSH
30798: LD_INT 10
30800: PUSH
30801: LD_INT 5
30803: PUSH
30804: LD_INT 3
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30812: LD_VAR 0 6
30816: PPUSH
30817: CALL_OW 257
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: LD_INT 3
30827: PUSH
30828: LD_INT 4
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: IN
30836: IFFALSE 30857
// points := [ 3 , 2 , 1 ] ;
30838: LD_ADDR_VAR 0 9
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30857: LD_VAR 0 6
30861: PPUSH
30862: CALL_OW 257
30866: PUSH
30867: LD_INT 5
30869: EQUAL
30870: IFFALSE 30891
// points := [ 130 , 5 , 2 ] ;
30872: LD_ADDR_VAR 0 9
30876: PUSH
30877: LD_INT 130
30879: PUSH
30880: LD_INT 5
30882: PUSH
30883: LD_INT 2
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30891: LD_VAR 0 6
30895: PPUSH
30896: CALL_OW 257
30900: PUSH
30901: LD_INT 8
30903: EQUAL
30904: IFFALSE 30925
// points := [ 35 , 35 , 30 ] ;
30906: LD_ADDR_VAR 0 9
30910: PUSH
30911: LD_INT 35
30913: PUSH
30914: LD_INT 35
30916: PUSH
30917: LD_INT 30
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30925: LD_VAR 0 6
30929: PPUSH
30930: CALL_OW 257
30934: PUSH
30935: LD_INT 9
30937: EQUAL
30938: IFFALSE 30959
// points := [ 20 , 55 , 40 ] ;
30940: LD_ADDR_VAR 0 9
30944: PUSH
30945: LD_INT 20
30947: PUSH
30948: LD_INT 55
30950: PUSH
30951: LD_INT 40
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30959: LD_VAR 0 6
30963: PPUSH
30964: CALL_OW 257
30968: PUSH
30969: LD_INT 12
30971: PUSH
30972: LD_INT 16
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: IN
30979: IFFALSE 31000
// points := [ 5 , 3 , 2 ] ;
30981: LD_ADDR_VAR 0 9
30985: PUSH
30986: LD_INT 5
30988: PUSH
30989: LD_INT 3
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31000: LD_VAR 0 6
31004: PPUSH
31005: CALL_OW 257
31009: PUSH
31010: LD_INT 17
31012: EQUAL
31013: IFFALSE 31034
// points := [ 100 , 50 , 75 ] ;
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_INT 100
31022: PUSH
31023: LD_INT 50
31025: PUSH
31026: LD_INT 75
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 257
31043: PUSH
31044: LD_INT 15
31046: EQUAL
31047: IFFALSE 31068
// points := [ 10 , 5 , 3 ] ;
31049: LD_ADDR_VAR 0 9
31053: PUSH
31054: LD_INT 10
31056: PUSH
31057: LD_INT 5
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31068: LD_VAR 0 6
31072: PPUSH
31073: CALL_OW 257
31077: PUSH
31078: LD_INT 14
31080: EQUAL
31081: IFFALSE 31102
// points := [ 10 , 0 , 0 ] ;
31083: LD_ADDR_VAR 0 9
31087: PUSH
31088: LD_INT 10
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31102: LD_VAR 0 6
31106: PPUSH
31107: CALL_OW 257
31111: PUSH
31112: LD_INT 11
31114: EQUAL
31115: IFFALSE 31136
// points := [ 30 , 10 , 5 ] ;
31117: LD_ADDR_VAR 0 9
31121: PUSH
31122: LD_INT 30
31124: PUSH
31125: LD_INT 10
31127: PUSH
31128: LD_INT 5
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31136: LD_VAR 0 1
31140: PPUSH
31141: LD_INT 5
31143: PPUSH
31144: CALL_OW 321
31148: PUSH
31149: LD_INT 2
31151: EQUAL
31152: IFFALSE 31169
// bpoints := bpoints * 1.8 ;
31154: LD_ADDR_VAR 0 10
31158: PUSH
31159: LD_VAR 0 10
31163: PUSH
31164: LD_REAL  1.80000000000000E+0000
31167: MUL
31168: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31169: LD_VAR 0 6
31173: PPUSH
31174: CALL_OW 257
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 4
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: IN
31197: PUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: LD_INT 51
31205: PPUSH
31206: CALL_OW 321
31210: PUSH
31211: LD_INT 2
31213: EQUAL
31214: AND
31215: IFFALSE 31232
// bpoints := bpoints * 1.2 ;
31217: LD_ADDR_VAR 0 10
31221: PUSH
31222: LD_VAR 0 10
31226: PUSH
31227: LD_REAL  1.20000000000000E+0000
31230: MUL
31231: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31232: LD_VAR 0 6
31236: PPUSH
31237: CALL_OW 257
31241: PUSH
31242: LD_INT 5
31244: PUSH
31245: LD_INT 7
31247: PUSH
31248: LD_INT 9
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: IN
31256: PUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: LD_INT 52
31264: PPUSH
31265: CALL_OW 321
31269: PUSH
31270: LD_INT 2
31272: EQUAL
31273: AND
31274: IFFALSE 31291
// bpoints := bpoints * 1.5 ;
31276: LD_ADDR_VAR 0 10
31280: PUSH
31281: LD_VAR 0 10
31285: PUSH
31286: LD_REAL  1.50000000000000E+0000
31289: MUL
31290: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31291: LD_VAR 0 1
31295: PPUSH
31296: LD_INT 66
31298: PPUSH
31299: CALL_OW 321
31303: PUSH
31304: LD_INT 2
31306: EQUAL
31307: IFFALSE 31324
// bpoints := bpoints * 1.1 ;
31309: LD_ADDR_VAR 0 10
31313: PUSH
31314: LD_VAR 0 10
31318: PUSH
31319: LD_REAL  1.10000000000000E+0000
31322: MUL
31323: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31324: LD_ADDR_VAR 0 10
31328: PUSH
31329: LD_VAR 0 10
31333: PUSH
31334: LD_VAR 0 6
31338: PPUSH
31339: LD_INT 1
31341: PPUSH
31342: CALL_OW 259
31346: PUSH
31347: LD_REAL  1.15000000000000E+0000
31350: MUL
31351: MUL
31352: ST_TO_ADDR
// end ; unit_vehicle :
31353: GO 32181
31355: LD_INT 2
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 32169
31363: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31364: LD_VAR 0 6
31368: PPUSH
31369: CALL_OW 264
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 42
31379: PUSH
31380: LD_INT 24
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: LIST
31387: IN
31388: IFFALSE 31409
// points := [ 25 , 5 , 3 ] ;
31390: LD_ADDR_VAR 0 9
31394: PUSH
31395: LD_INT 25
31397: PUSH
31398: LD_INT 5
31400: PUSH
31401: LD_INT 3
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31409: LD_VAR 0 6
31413: PPUSH
31414: CALL_OW 264
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: LD_INT 43
31424: PUSH
31425: LD_INT 25
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: IN
31433: IFFALSE 31454
// points := [ 40 , 15 , 5 ] ;
31435: LD_ADDR_VAR 0 9
31439: PUSH
31440: LD_INT 40
31442: PUSH
31443: LD_INT 15
31445: PUSH
31446: LD_INT 5
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31454: LD_VAR 0 6
31458: PPUSH
31459: CALL_OW 264
31463: PUSH
31464: LD_INT 3
31466: PUSH
31467: LD_INT 23
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: IN
31474: IFFALSE 31495
// points := [ 7 , 25 , 8 ] ;
31476: LD_ADDR_VAR 0 9
31480: PUSH
31481: LD_INT 7
31483: PUSH
31484: LD_INT 25
31486: PUSH
31487: LD_INT 8
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31495: LD_VAR 0 6
31499: PPUSH
31500: CALL_OW 264
31504: PUSH
31505: LD_INT 5
31507: PUSH
31508: LD_INT 27
31510: PUSH
31511: LD_INT 44
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: IN
31519: IFFALSE 31540
// points := [ 14 , 50 , 16 ] ;
31521: LD_ADDR_VAR 0 9
31525: PUSH
31526: LD_INT 14
31528: PUSH
31529: LD_INT 50
31531: PUSH
31532: LD_INT 16
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31540: LD_VAR 0 6
31544: PPUSH
31545: CALL_OW 264
31549: PUSH
31550: LD_INT 6
31552: PUSH
31553: LD_INT 46
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: IN
31560: IFFALSE 31581
// points := [ 32 , 120 , 70 ] ;
31562: LD_ADDR_VAR 0 9
31566: PUSH
31567: LD_INT 32
31569: PUSH
31570: LD_INT 120
31572: PUSH
31573: LD_INT 70
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31581: LD_VAR 0 6
31585: PPUSH
31586: CALL_OW 264
31590: PUSH
31591: LD_INT 7
31593: PUSH
31594: LD_INT 28
31596: PUSH
31597: LD_INT 45
31599: PUSH
31600: LD_INT 92
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: IN
31609: IFFALSE 31630
// points := [ 35 , 20 , 45 ] ;
31611: LD_ADDR_VAR 0 9
31615: PUSH
31616: LD_INT 35
31618: PUSH
31619: LD_INT 20
31621: PUSH
31622: LD_INT 45
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31630: LD_VAR 0 6
31634: PPUSH
31635: CALL_OW 264
31639: PUSH
31640: LD_INT 47
31642: PUSH
31643: EMPTY
31644: LIST
31645: IN
31646: IFFALSE 31667
// points := [ 67 , 45 , 75 ] ;
31648: LD_ADDR_VAR 0 9
31652: PUSH
31653: LD_INT 67
31655: PUSH
31656: LD_INT 45
31658: PUSH
31659: LD_INT 75
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 264
31676: PUSH
31677: LD_INT 26
31679: PUSH
31680: EMPTY
31681: LIST
31682: IN
31683: IFFALSE 31704
// points := [ 120 , 30 , 80 ] ;
31685: LD_ADDR_VAR 0 9
31689: PUSH
31690: LD_INT 120
31692: PUSH
31693: LD_INT 30
31695: PUSH
31696: LD_INT 80
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31704: LD_VAR 0 6
31708: PPUSH
31709: CALL_OW 264
31713: PUSH
31714: LD_INT 22
31716: PUSH
31717: EMPTY
31718: LIST
31719: IN
31720: IFFALSE 31741
// points := [ 40 , 1 , 1 ] ;
31722: LD_ADDR_VAR 0 9
31726: PUSH
31727: LD_INT 40
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31741: LD_VAR 0 6
31745: PPUSH
31746: CALL_OW 264
31750: PUSH
31751: LD_INT 29
31753: PUSH
31754: EMPTY
31755: LIST
31756: IN
31757: IFFALSE 31778
// points := [ 70 , 200 , 400 ] ;
31759: LD_ADDR_VAR 0 9
31763: PUSH
31764: LD_INT 70
31766: PUSH
31767: LD_INT 200
31769: PUSH
31770: LD_INT 400
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31778: LD_VAR 0 6
31782: PPUSH
31783: CALL_OW 264
31787: PUSH
31788: LD_INT 14
31790: PUSH
31791: LD_INT 53
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: IN
31798: IFFALSE 31819
// points := [ 40 , 10 , 20 ] ;
31800: LD_ADDR_VAR 0 9
31804: PUSH
31805: LD_INT 40
31807: PUSH
31808: LD_INT 10
31810: PUSH
31811: LD_INT 20
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31819: LD_VAR 0 6
31823: PPUSH
31824: CALL_OW 264
31828: PUSH
31829: LD_INT 9
31831: PUSH
31832: EMPTY
31833: LIST
31834: IN
31835: IFFALSE 31856
// points := [ 5 , 70 , 20 ] ;
31837: LD_ADDR_VAR 0 9
31841: PUSH
31842: LD_INT 5
31844: PUSH
31845: LD_INT 70
31847: PUSH
31848: LD_INT 20
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31856: LD_VAR 0 6
31860: PPUSH
31861: CALL_OW 264
31865: PUSH
31866: LD_INT 10
31868: PUSH
31869: EMPTY
31870: LIST
31871: IN
31872: IFFALSE 31893
// points := [ 35 , 110 , 70 ] ;
31874: LD_ADDR_VAR 0 9
31878: PUSH
31879: LD_INT 35
31881: PUSH
31882: LD_INT 110
31884: PUSH
31885: LD_INT 70
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31893: LD_VAR 0 6
31897: PPUSH
31898: CALL_OW 265
31902: PUSH
31903: LD_INT 25
31905: EQUAL
31906: IFFALSE 31927
// points := [ 80 , 65 , 100 ] ;
31908: LD_ADDR_VAR 0 9
31912: PUSH
31913: LD_INT 80
31915: PUSH
31916: LD_INT 65
31918: PUSH
31919: LD_INT 100
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31927: LD_VAR 0 6
31931: PPUSH
31932: CALL_OW 263
31936: PUSH
31937: LD_INT 1
31939: EQUAL
31940: IFFALSE 31975
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31942: LD_ADDR_VAR 0 10
31946: PUSH
31947: LD_VAR 0 10
31951: PUSH
31952: LD_VAR 0 6
31956: PPUSH
31957: CALL_OW 311
31961: PPUSH
31962: LD_INT 3
31964: PPUSH
31965: CALL_OW 259
31969: PUSH
31970: LD_INT 4
31972: MUL
31973: MUL
31974: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31975: LD_VAR 0 6
31979: PPUSH
31980: CALL_OW 263
31984: PUSH
31985: LD_INT 2
31987: EQUAL
31988: IFFALSE 32039
// begin j := IsControledBy ( i ) ;
31990: LD_ADDR_VAR 0 7
31994: PUSH
31995: LD_VAR 0 6
31999: PPUSH
32000: CALL_OW 312
32004: ST_TO_ADDR
// if j then
32005: LD_VAR 0 7
32009: IFFALSE 32039
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32011: LD_ADDR_VAR 0 10
32015: PUSH
32016: LD_VAR 0 10
32020: PUSH
32021: LD_VAR 0 7
32025: PPUSH
32026: LD_INT 3
32028: PPUSH
32029: CALL_OW 259
32033: PUSH
32034: LD_INT 3
32036: MUL
32037: MUL
32038: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32039: LD_VAR 0 6
32043: PPUSH
32044: CALL_OW 264
32048: PUSH
32049: LD_INT 5
32051: PUSH
32052: LD_INT 6
32054: PUSH
32055: LD_INT 46
32057: PUSH
32058: LD_INT 44
32060: PUSH
32061: LD_INT 47
32063: PUSH
32064: LD_INT 45
32066: PUSH
32067: LD_INT 28
32069: PUSH
32070: LD_INT 7
32072: PUSH
32073: LD_INT 27
32075: PUSH
32076: LD_INT 29
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: IN
32091: PUSH
32092: LD_VAR 0 1
32096: PPUSH
32097: LD_INT 52
32099: PPUSH
32100: CALL_OW 321
32104: PUSH
32105: LD_INT 2
32107: EQUAL
32108: AND
32109: IFFALSE 32126
// bpoints := bpoints * 1.2 ;
32111: LD_ADDR_VAR 0 10
32115: PUSH
32116: LD_VAR 0 10
32120: PUSH
32121: LD_REAL  1.20000000000000E+0000
32124: MUL
32125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32126: LD_VAR 0 6
32130: PPUSH
32131: CALL_OW 264
32135: PUSH
32136: LD_INT 6
32138: PUSH
32139: LD_INT 46
32141: PUSH
32142: LD_INT 47
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: IN
32150: IFFALSE 32167
// bpoints := bpoints * 1.2 ;
32152: LD_ADDR_VAR 0 10
32156: PUSH
32157: LD_VAR 0 10
32161: PUSH
32162: LD_REAL  1.20000000000000E+0000
32165: MUL
32166: ST_TO_ADDR
// end ; unit_building :
32167: GO 32181
32169: LD_INT 3
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32177
32175: GO 32180
32177: POP
// ; end ;
32178: GO 32181
32180: POP
// for j = 1 to 3 do
32181: LD_ADDR_VAR 0 7
32185: PUSH
32186: DOUBLE
32187: LD_INT 1
32189: DEC
32190: ST_TO_ADDR
32191: LD_INT 3
32193: PUSH
32194: FOR_TO
32195: IFFALSE 32248
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32197: LD_ADDR_VAR 0 5
32201: PUSH
32202: LD_VAR 0 5
32206: PPUSH
32207: LD_VAR 0 7
32211: PPUSH
32212: LD_VAR 0 5
32216: PUSH
32217: LD_VAR 0 7
32221: ARRAY
32222: PUSH
32223: LD_VAR 0 9
32227: PUSH
32228: LD_VAR 0 7
32232: ARRAY
32233: PUSH
32234: LD_VAR 0 10
32238: MUL
32239: PLUS
32240: PPUSH
32241: CALL_OW 1
32245: ST_TO_ADDR
32246: GO 32194
32248: POP
32249: POP
// end ;
32250: GO 30729
32252: POP
32253: POP
// result := Replace ( result , 4 , tmp ) ;
32254: LD_ADDR_VAR 0 5
32258: PUSH
32259: LD_VAR 0 5
32263: PPUSH
32264: LD_INT 4
32266: PPUSH
32267: LD_VAR 0 8
32271: PPUSH
32272: CALL_OW 1
32276: ST_TO_ADDR
// end ;
32277: LD_VAR 0 5
32281: RET
// export function DangerAtRange ( unit , range ) ; begin
32282: LD_INT 0
32284: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32285: LD_ADDR_VAR 0 3
32289: PUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 255
32299: PPUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 250
32309: PPUSH
32310: LD_VAR 0 1
32314: PPUSH
32315: CALL_OW 251
32319: PPUSH
32320: LD_VAR 0 2
32324: PPUSH
32325: CALL 30581 0 4
32329: ST_TO_ADDR
// end ;
32330: LD_VAR 0 3
32334: RET
// export function DangerInArea ( side , area ) ; begin
32335: LD_INT 0
32337: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32338: LD_ADDR_VAR 0 3
32342: PUSH
32343: LD_VAR 0 2
32347: PPUSH
32348: LD_INT 81
32350: PUSH
32351: LD_VAR 0 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PPUSH
32360: CALL_OW 70
32364: ST_TO_ADDR
// end ;
32365: LD_VAR 0 3
32369: RET
// export function IsExtension ( b ) ; begin
32370: LD_INT 0
32372: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32373: LD_ADDR_VAR 0 2
32377: PUSH
32378: LD_VAR 0 1
32382: PUSH
32383: LD_INT 23
32385: PUSH
32386: LD_INT 20
32388: PUSH
32389: LD_INT 22
32391: PUSH
32392: LD_INT 17
32394: PUSH
32395: LD_INT 24
32397: PUSH
32398: LD_INT 21
32400: PUSH
32401: LD_INT 19
32403: PUSH
32404: LD_INT 16
32406: PUSH
32407: LD_INT 25
32409: PUSH
32410: LD_INT 18
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: IN
32425: ST_TO_ADDR
// end ;
32426: LD_VAR 0 2
32430: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32431: LD_INT 0
32433: PPUSH
32434: PPUSH
32435: PPUSH
// result := [ ] ;
32436: LD_ADDR_VAR 0 4
32440: PUSH
32441: EMPTY
32442: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32443: LD_ADDR_VAR 0 5
32447: PUSH
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_INT 21
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PPUSH
32463: CALL_OW 70
32467: ST_TO_ADDR
// if not tmp then
32468: LD_VAR 0 5
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32541
// if checkLink then
32477: LD_VAR 0 3
32481: IFFALSE 32531
// begin for i in tmp do
32483: LD_ADDR_VAR 0 6
32487: PUSH
32488: LD_VAR 0 5
32492: PUSH
32493: FOR_IN
32494: IFFALSE 32529
// if GetBase ( i ) <> base then
32496: LD_VAR 0 6
32500: PPUSH
32501: CALL_OW 274
32505: PUSH
32506: LD_VAR 0 1
32510: NONEQUAL
32511: IFFALSE 32527
// ComLinkToBase ( base , i ) ;
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_VAR 0 6
32522: PPUSH
32523: CALL_OW 169
32527: GO 32493
32529: POP
32530: POP
// end ; result := tmp ;
32531: LD_ADDR_VAR 0 4
32535: PUSH
32536: LD_VAR 0 5
32540: ST_TO_ADDR
// end ;
32541: LD_VAR 0 4
32545: RET
// export function ComComplete ( units , b ) ; var i ; begin
32546: LD_INT 0
32548: PPUSH
32549: PPUSH
// if not units then
32550: LD_VAR 0 1
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32649
// for i in units do
32559: LD_ADDR_VAR 0 4
32563: PUSH
32564: LD_VAR 0 1
32568: PUSH
32569: FOR_IN
32570: IFFALSE 32647
// if BuildingStatus ( b ) = bs_build then
32572: LD_VAR 0 2
32576: PPUSH
32577: CALL_OW 461
32581: PUSH
32582: LD_INT 1
32584: EQUAL
32585: IFFALSE 32645
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32587: LD_VAR 0 4
32591: PPUSH
32592: LD_STRING h
32594: PUSH
32595: LD_VAR 0 2
32599: PPUSH
32600: CALL_OW 250
32604: PUSH
32605: LD_VAR 0 2
32609: PPUSH
32610: CALL_OW 251
32614: PUSH
32615: LD_VAR 0 2
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: PPUSH
32641: CALL_OW 446
32645: GO 32569
32647: POP
32648: POP
// end ;
32649: LD_VAR 0 3
32653: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32654: LD_INT 0
32656: PPUSH
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32662: LD_VAR 0 1
32666: NOT
32667: PUSH
32668: LD_VAR 0 1
32672: PPUSH
32673: CALL_OW 263
32677: PUSH
32678: LD_INT 2
32680: NONEQUAL
32681: OR
32682: IFFALSE 32686
// exit ;
32684: GO 33002
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32686: LD_ADDR_VAR 0 6
32690: PUSH
32691: LD_INT 22
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 255
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 30
32713: PUSH
32714: LD_INT 36
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 34
32723: PUSH
32724: LD_INT 31
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PPUSH
32740: CALL_OW 69
32744: ST_TO_ADDR
// if not tmp then
32745: LD_VAR 0 6
32749: NOT
32750: IFFALSE 32754
// exit ;
32752: GO 33002
// result := [ ] ;
32754: LD_ADDR_VAR 0 2
32758: PUSH
32759: EMPTY
32760: ST_TO_ADDR
// for i in tmp do
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_VAR 0 6
32770: PUSH
32771: FOR_IN
32772: IFFALSE 32843
// begin t := UnitsInside ( i ) ;
32774: LD_ADDR_VAR 0 4
32778: PUSH
32779: LD_VAR 0 3
32783: PPUSH
32784: CALL_OW 313
32788: ST_TO_ADDR
// if t then
32789: LD_VAR 0 4
32793: IFFALSE 32841
// for j in t do
32795: LD_ADDR_VAR 0 7
32799: PUSH
32800: LD_VAR 0 4
32804: PUSH
32805: FOR_IN
32806: IFFALSE 32839
// result := Replace ( result , result + 1 , j ) ;
32808: LD_ADDR_VAR 0 2
32812: PUSH
32813: LD_VAR 0 2
32817: PPUSH
32818: LD_VAR 0 2
32822: PUSH
32823: LD_INT 1
32825: PLUS
32826: PPUSH
32827: LD_VAR 0 7
32831: PPUSH
32832: CALL_OW 1
32836: ST_TO_ADDR
32837: GO 32805
32839: POP
32840: POP
// end ;
32841: GO 32771
32843: POP
32844: POP
// if not result then
32845: LD_VAR 0 2
32849: NOT
32850: IFFALSE 32854
// exit ;
32852: GO 33002
// mech := result [ 1 ] ;
32854: LD_ADDR_VAR 0 5
32858: PUSH
32859: LD_VAR 0 2
32863: PUSH
32864: LD_INT 1
32866: ARRAY
32867: ST_TO_ADDR
// if result > 1 then
32868: LD_VAR 0 2
32872: PUSH
32873: LD_INT 1
32875: GREATER
32876: IFFALSE 32988
// begin for i = 2 to result do
32878: LD_ADDR_VAR 0 3
32882: PUSH
32883: DOUBLE
32884: LD_INT 2
32886: DEC
32887: ST_TO_ADDR
32888: LD_VAR 0 2
32892: PUSH
32893: FOR_TO
32894: IFFALSE 32986
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32896: LD_ADDR_VAR 0 4
32900: PUSH
32901: LD_VAR 0 2
32905: PUSH
32906: LD_VAR 0 3
32910: ARRAY
32911: PPUSH
32912: LD_INT 3
32914: PPUSH
32915: CALL_OW 259
32919: PUSH
32920: LD_VAR 0 2
32924: PUSH
32925: LD_VAR 0 3
32929: ARRAY
32930: PPUSH
32931: CALL_OW 432
32935: MINUS
32936: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32937: LD_VAR 0 4
32941: PUSH
32942: LD_VAR 0 5
32946: PPUSH
32947: LD_INT 3
32949: PPUSH
32950: CALL_OW 259
32954: PUSH
32955: LD_VAR 0 5
32959: PPUSH
32960: CALL_OW 432
32964: MINUS
32965: GREATEREQUAL
32966: IFFALSE 32984
// mech := result [ i ] ;
32968: LD_ADDR_VAR 0 5
32972: PUSH
32973: LD_VAR 0 2
32977: PUSH
32978: LD_VAR 0 3
32982: ARRAY
32983: ST_TO_ADDR
// end ;
32984: GO 32893
32986: POP
32987: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32988: LD_VAR 0 1
32992: PPUSH
32993: LD_VAR 0 5
32997: PPUSH
32998: CALL_OW 135
// end ;
33002: LD_VAR 0 2
33006: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33007: LD_INT 0
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
// result := [ ] ;
33022: LD_ADDR_VAR 0 7
33026: PUSH
33027: EMPTY
33028: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 266
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: IN
33049: NOT
33050: IFFALSE 33054
// exit ;
33052: GO 34688
// if name then
33054: LD_VAR 0 3
33058: IFFALSE 33074
// SetBName ( base_dep , name ) ;
33060: LD_VAR 0 1
33064: PPUSH
33065: LD_VAR 0 3
33069: PPUSH
33070: CALL_OW 500
// base := GetBase ( base_dep ) ;
33074: LD_ADDR_VAR 0 15
33078: PUSH
33079: LD_VAR 0 1
33083: PPUSH
33084: CALL_OW 274
33088: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33089: LD_ADDR_VAR 0 16
33093: PUSH
33094: LD_VAR 0 1
33098: PPUSH
33099: CALL_OW 255
33103: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33104: LD_ADDR_VAR 0 17
33108: PUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 248
33118: ST_TO_ADDR
// if sources then
33119: LD_VAR 0 5
33123: IFFALSE 33170
// for i = 1 to 3 do
33125: LD_ADDR_VAR 0 8
33129: PUSH
33130: DOUBLE
33131: LD_INT 1
33133: DEC
33134: ST_TO_ADDR
33135: LD_INT 3
33137: PUSH
33138: FOR_TO
33139: IFFALSE 33168
// AddResourceType ( base , i , sources [ i ] ) ;
33141: LD_VAR 0 15
33145: PPUSH
33146: LD_VAR 0 8
33150: PPUSH
33151: LD_VAR 0 5
33155: PUSH
33156: LD_VAR 0 8
33160: ARRAY
33161: PPUSH
33162: CALL_OW 276
33166: GO 33138
33168: POP
33169: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33170: LD_ADDR_VAR 0 18
33174: PUSH
33175: LD_VAR 0 15
33179: PPUSH
33180: LD_VAR 0 2
33184: PPUSH
33185: LD_INT 1
33187: PPUSH
33188: CALL 32431 0 3
33192: ST_TO_ADDR
// InitHc ;
33193: CALL_OW 19
// InitUc ;
33197: CALL_OW 18
// uc_side := side ;
33201: LD_ADDR_OWVAR 20
33205: PUSH
33206: LD_VAR 0 16
33210: ST_TO_ADDR
// uc_nation := nation ;
33211: LD_ADDR_OWVAR 21
33215: PUSH
33216: LD_VAR 0 17
33220: ST_TO_ADDR
// if buildings then
33221: LD_VAR 0 18
33225: IFFALSE 34547
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33227: LD_ADDR_VAR 0 19
33231: PUSH
33232: LD_VAR 0 18
33236: PPUSH
33237: LD_INT 2
33239: PUSH
33240: LD_INT 30
33242: PUSH
33243: LD_INT 29
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 30
33252: PUSH
33253: LD_INT 30
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 72
33269: ST_TO_ADDR
// if tmp then
33270: LD_VAR 0 19
33274: IFFALSE 33322
// for i in tmp do
33276: LD_ADDR_VAR 0 8
33280: PUSH
33281: LD_VAR 0 19
33285: PUSH
33286: FOR_IN
33287: IFFALSE 33320
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33289: LD_VAR 0 8
33293: PPUSH
33294: CALL_OW 250
33298: PPUSH
33299: LD_VAR 0 8
33303: PPUSH
33304: CALL_OW 251
33308: PPUSH
33309: LD_VAR 0 16
33313: PPUSH
33314: CALL_OW 441
33318: GO 33286
33320: POP
33321: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33322: LD_VAR 0 18
33326: PPUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 30
33332: PUSH
33333: LD_INT 32
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 30
33342: PUSH
33343: LD_INT 33
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: PPUSH
33355: CALL_OW 72
33359: IFFALSE 33447
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33361: LD_ADDR_VAR 0 8
33365: PUSH
33366: LD_VAR 0 18
33370: PPUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 30
33376: PUSH
33377: LD_INT 32
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 30
33386: PUSH
33387: LD_INT 33
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: PPUSH
33399: CALL_OW 72
33403: PUSH
33404: FOR_IN
33405: IFFALSE 33445
// begin if not GetBWeapon ( i ) then
33407: LD_VAR 0 8
33411: PPUSH
33412: CALL_OW 269
33416: NOT
33417: IFFALSE 33443
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33419: LD_VAR 0 8
33423: PPUSH
33424: LD_VAR 0 8
33428: PPUSH
33429: LD_VAR 0 2
33433: PPUSH
33434: CALL 34693 0 2
33438: PPUSH
33439: CALL_OW 431
// end ;
33443: GO 33404
33445: POP
33446: POP
// end ; for i = 1 to personel do
33447: LD_ADDR_VAR 0 8
33451: PUSH
33452: DOUBLE
33453: LD_INT 1
33455: DEC
33456: ST_TO_ADDR
33457: LD_VAR 0 6
33461: PUSH
33462: FOR_TO
33463: IFFALSE 34527
// begin if i > 4 then
33465: LD_VAR 0 8
33469: PUSH
33470: LD_INT 4
33472: GREATER
33473: IFFALSE 33477
// break ;
33475: GO 34527
// case i of 1 :
33477: LD_VAR 0 8
33481: PUSH
33482: LD_INT 1
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33490
33488: GO 33570
33490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33491: LD_ADDR_VAR 0 12
33495: PUSH
33496: LD_VAR 0 18
33500: PPUSH
33501: LD_INT 22
33503: PUSH
33504: LD_VAR 0 16
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 58
33515: PUSH
33516: EMPTY
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 30
33524: PUSH
33525: LD_INT 32
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 30
33534: PUSH
33535: LD_INT 4
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 30
33544: PUSH
33545: LD_INT 5
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: PPUSH
33563: CALL_OW 72
33567: ST_TO_ADDR
33568: GO 33792
33570: LD_INT 2
33572: DOUBLE
33573: EQUAL
33574: IFTRUE 33578
33576: GO 33640
33578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33579: LD_ADDR_VAR 0 12
33583: PUSH
33584: LD_VAR 0 18
33588: PPUSH
33589: LD_INT 22
33591: PUSH
33592: LD_VAR 0 16
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 30
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 30
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PPUSH
33633: CALL_OW 72
33637: ST_TO_ADDR
33638: GO 33792
33640: LD_INT 3
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33648
33646: GO 33710
33648: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33649: LD_ADDR_VAR 0 12
33653: PUSH
33654: LD_VAR 0 18
33658: PPUSH
33659: LD_INT 22
33661: PUSH
33662: LD_VAR 0 16
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 30
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 30
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PPUSH
33703: CALL_OW 72
33707: ST_TO_ADDR
33708: GO 33792
33710: LD_INT 4
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33791
33718: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33719: LD_ADDR_VAR 0 12
33723: PUSH
33724: LD_VAR 0 18
33728: PPUSH
33729: LD_INT 22
33731: PUSH
33732: LD_VAR 0 16
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 30
33746: PUSH
33747: LD_INT 6
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 30
33756: PUSH
33757: LD_INT 7
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 30
33766: PUSH
33767: LD_INT 8
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PPUSH
33784: CALL_OW 72
33788: ST_TO_ADDR
33789: GO 33792
33791: POP
// if i = 1 then
33792: LD_VAR 0 8
33796: PUSH
33797: LD_INT 1
33799: EQUAL
33800: IFFALSE 33911
// begin tmp := [ ] ;
33802: LD_ADDR_VAR 0 19
33806: PUSH
33807: EMPTY
33808: ST_TO_ADDR
// for j in f do
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_VAR 0 12
33818: PUSH
33819: FOR_IN
33820: IFFALSE 33893
// if GetBType ( j ) = b_bunker then
33822: LD_VAR 0 9
33826: PPUSH
33827: CALL_OW 266
33831: PUSH
33832: LD_INT 32
33834: EQUAL
33835: IFFALSE 33862
// tmp := Insert ( tmp , 1 , j ) else
33837: LD_ADDR_VAR 0 19
33841: PUSH
33842: LD_VAR 0 19
33846: PPUSH
33847: LD_INT 1
33849: PPUSH
33850: LD_VAR 0 9
33854: PPUSH
33855: CALL_OW 2
33859: ST_TO_ADDR
33860: GO 33891
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33862: LD_ADDR_VAR 0 19
33866: PUSH
33867: LD_VAR 0 19
33871: PPUSH
33872: LD_VAR 0 19
33876: PUSH
33877: LD_INT 1
33879: PLUS
33880: PPUSH
33881: LD_VAR 0 9
33885: PPUSH
33886: CALL_OW 2
33890: ST_TO_ADDR
33891: GO 33819
33893: POP
33894: POP
// if tmp then
33895: LD_VAR 0 19
33899: IFFALSE 33911
// f := tmp ;
33901: LD_ADDR_VAR 0 12
33905: PUSH
33906: LD_VAR 0 19
33910: ST_TO_ADDR
// end ; x := personel [ i ] ;
33911: LD_ADDR_VAR 0 13
33915: PUSH
33916: LD_VAR 0 6
33920: PUSH
33921: LD_VAR 0 8
33925: ARRAY
33926: ST_TO_ADDR
// if x = - 1 then
33927: LD_VAR 0 13
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: EQUAL
33936: IFFALSE 34145
// begin for j in f do
33938: LD_ADDR_VAR 0 9
33942: PUSH
33943: LD_VAR 0 12
33947: PUSH
33948: FOR_IN
33949: IFFALSE 34141
// repeat InitHc ;
33951: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33955: LD_VAR 0 9
33959: PPUSH
33960: CALL_OW 266
33964: PUSH
33965: LD_INT 5
33967: EQUAL
33968: IFFALSE 34038
// begin if UnitsInside ( j ) < 3 then
33970: LD_VAR 0 9
33974: PPUSH
33975: CALL_OW 313
33979: PUSH
33980: LD_INT 3
33982: LESS
33983: IFFALSE 34019
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33985: LD_INT 0
33987: PPUSH
33988: LD_INT 5
33990: PUSH
33991: LD_INT 8
33993: PUSH
33994: LD_INT 9
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: PUSH
34002: LD_VAR 0 17
34006: ARRAY
34007: PPUSH
34008: LD_VAR 0 4
34012: PPUSH
34013: CALL_OW 380
34017: GO 34036
// PrepareHuman ( false , i , skill ) ;
34019: LD_INT 0
34021: PPUSH
34022: LD_VAR 0 8
34026: PPUSH
34027: LD_VAR 0 4
34031: PPUSH
34032: CALL_OW 380
// end else
34036: GO 34055
// PrepareHuman ( false , i , skill ) ;
34038: LD_INT 0
34040: PPUSH
34041: LD_VAR 0 8
34045: PPUSH
34046: LD_VAR 0 4
34050: PPUSH
34051: CALL_OW 380
// un := CreateHuman ;
34055: LD_ADDR_VAR 0 14
34059: PUSH
34060: CALL_OW 44
34064: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34065: LD_ADDR_VAR 0 7
34069: PUSH
34070: LD_VAR 0 7
34074: PPUSH
34075: LD_INT 1
34077: PPUSH
34078: LD_VAR 0 14
34082: PPUSH
34083: CALL_OW 2
34087: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34088: LD_VAR 0 14
34092: PPUSH
34093: LD_VAR 0 9
34097: PPUSH
34098: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34102: LD_VAR 0 9
34106: PPUSH
34107: CALL_OW 313
34111: PUSH
34112: LD_INT 6
34114: EQUAL
34115: PUSH
34116: LD_VAR 0 9
34120: PPUSH
34121: CALL_OW 266
34125: PUSH
34126: LD_INT 32
34128: PUSH
34129: LD_INT 31
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: IN
34136: OR
34137: IFFALSE 33951
34139: GO 33948
34141: POP
34142: POP
// end else
34143: GO 34525
// for j = 1 to x do
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: DOUBLE
34151: LD_INT 1
34153: DEC
34154: ST_TO_ADDR
34155: LD_VAR 0 13
34159: PUSH
34160: FOR_TO
34161: IFFALSE 34523
// begin InitHc ;
34163: CALL_OW 19
// if not f then
34167: LD_VAR 0 12
34171: NOT
34172: IFFALSE 34261
// begin PrepareHuman ( false , i , skill ) ;
34174: LD_INT 0
34176: PPUSH
34177: LD_VAR 0 8
34181: PPUSH
34182: LD_VAR 0 4
34186: PPUSH
34187: CALL_OW 380
// un := CreateHuman ;
34191: LD_ADDR_VAR 0 14
34195: PUSH
34196: CALL_OW 44
34200: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34201: LD_ADDR_VAR 0 7
34205: PUSH
34206: LD_VAR 0 7
34210: PPUSH
34211: LD_INT 1
34213: PPUSH
34214: LD_VAR 0 14
34218: PPUSH
34219: CALL_OW 2
34223: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34224: LD_VAR 0 14
34228: PPUSH
34229: LD_VAR 0 1
34233: PPUSH
34234: CALL_OW 250
34238: PPUSH
34239: LD_VAR 0 1
34243: PPUSH
34244: CALL_OW 251
34248: PPUSH
34249: LD_INT 10
34251: PPUSH
34252: LD_INT 0
34254: PPUSH
34255: CALL_OW 50
// continue ;
34259: GO 34160
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34261: LD_VAR 0 12
34265: PUSH
34266: LD_INT 1
34268: ARRAY
34269: PPUSH
34270: CALL_OW 313
34274: PUSH
34275: LD_VAR 0 12
34279: PUSH
34280: LD_INT 1
34282: ARRAY
34283: PPUSH
34284: CALL_OW 266
34288: PUSH
34289: LD_INT 32
34291: PUSH
34292: LD_INT 31
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: IN
34299: AND
34300: PUSH
34301: LD_VAR 0 12
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: CALL_OW 313
34314: PUSH
34315: LD_INT 6
34317: EQUAL
34318: OR
34319: IFFALSE 34339
// f := Delete ( f , 1 ) ;
34321: LD_ADDR_VAR 0 12
34325: PUSH
34326: LD_VAR 0 12
34330: PPUSH
34331: LD_INT 1
34333: PPUSH
34334: CALL_OW 3
34338: ST_TO_ADDR
// if not f then
34339: LD_VAR 0 12
34343: NOT
34344: IFFALSE 34362
// begin x := x + 2 ;
34346: LD_ADDR_VAR 0 13
34350: PUSH
34351: LD_VAR 0 13
34355: PUSH
34356: LD_INT 2
34358: PLUS
34359: ST_TO_ADDR
// continue ;
34360: GO 34160
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34362: LD_VAR 0 12
34366: PUSH
34367: LD_INT 1
34369: ARRAY
34370: PPUSH
34371: CALL_OW 266
34375: PUSH
34376: LD_INT 5
34378: EQUAL
34379: IFFALSE 34453
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34381: LD_VAR 0 12
34385: PUSH
34386: LD_INT 1
34388: ARRAY
34389: PPUSH
34390: CALL_OW 313
34394: PUSH
34395: LD_INT 3
34397: LESS
34398: IFFALSE 34434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34400: LD_INT 0
34402: PPUSH
34403: LD_INT 5
34405: PUSH
34406: LD_INT 8
34408: PUSH
34409: LD_INT 9
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: PUSH
34417: LD_VAR 0 17
34421: ARRAY
34422: PPUSH
34423: LD_VAR 0 4
34427: PPUSH
34428: CALL_OW 380
34432: GO 34451
// PrepareHuman ( false , i , skill ) ;
34434: LD_INT 0
34436: PPUSH
34437: LD_VAR 0 8
34441: PPUSH
34442: LD_VAR 0 4
34446: PPUSH
34447: CALL_OW 380
// end else
34451: GO 34470
// PrepareHuman ( false , i , skill ) ;
34453: LD_INT 0
34455: PPUSH
34456: LD_VAR 0 8
34460: PPUSH
34461: LD_VAR 0 4
34465: PPUSH
34466: CALL_OW 380
// un := CreateHuman ;
34470: LD_ADDR_VAR 0 14
34474: PUSH
34475: CALL_OW 44
34479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34480: LD_ADDR_VAR 0 7
34484: PUSH
34485: LD_VAR 0 7
34489: PPUSH
34490: LD_INT 1
34492: PPUSH
34493: LD_VAR 0 14
34497: PPUSH
34498: CALL_OW 2
34502: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34503: LD_VAR 0 14
34507: PPUSH
34508: LD_VAR 0 12
34512: PUSH
34513: LD_INT 1
34515: ARRAY
34516: PPUSH
34517: CALL_OW 52
// end ;
34521: GO 34160
34523: POP
34524: POP
// end ;
34525: GO 33462
34527: POP
34528: POP
// result := result ^ buildings ;
34529: LD_ADDR_VAR 0 7
34533: PUSH
34534: LD_VAR 0 7
34538: PUSH
34539: LD_VAR 0 18
34543: ADD
34544: ST_TO_ADDR
// end else
34545: GO 34688
// begin for i = 1 to personel do
34547: LD_ADDR_VAR 0 8
34551: PUSH
34552: DOUBLE
34553: LD_INT 1
34555: DEC
34556: ST_TO_ADDR
34557: LD_VAR 0 6
34561: PUSH
34562: FOR_TO
34563: IFFALSE 34686
// begin if i > 4 then
34565: LD_VAR 0 8
34569: PUSH
34570: LD_INT 4
34572: GREATER
34573: IFFALSE 34577
// break ;
34575: GO 34686
// x := personel [ i ] ;
34577: LD_ADDR_VAR 0 13
34581: PUSH
34582: LD_VAR 0 6
34586: PUSH
34587: LD_VAR 0 8
34591: ARRAY
34592: ST_TO_ADDR
// if x = - 1 then
34593: LD_VAR 0 13
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: EQUAL
34602: IFFALSE 34606
// continue ;
34604: GO 34562
// PrepareHuman ( false , i , skill ) ;
34606: LD_INT 0
34608: PPUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: LD_VAR 0 4
34618: PPUSH
34619: CALL_OW 380
// un := CreateHuman ;
34623: LD_ADDR_VAR 0 14
34627: PUSH
34628: CALL_OW 44
34632: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34633: LD_VAR 0 14
34637: PPUSH
34638: LD_VAR 0 1
34642: PPUSH
34643: CALL_OW 250
34647: PPUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 251
34657: PPUSH
34658: LD_INT 10
34660: PPUSH
34661: LD_INT 0
34663: PPUSH
34664: CALL_OW 50
// result := result ^ un ;
34668: LD_ADDR_VAR 0 7
34672: PUSH
34673: LD_VAR 0 7
34677: PUSH
34678: LD_VAR 0 14
34682: ADD
34683: ST_TO_ADDR
// end ;
34684: GO 34562
34686: POP
34687: POP
// end ; end ;
34688: LD_VAR 0 7
34692: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34693: LD_INT 0
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
// result := false ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_INT 0
34718: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34719: LD_VAR 0 1
34723: NOT
34724: PUSH
34725: LD_VAR 0 1
34729: PPUSH
34730: CALL_OW 266
34734: PUSH
34735: LD_INT 32
34737: PUSH
34738: LD_INT 33
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: IN
34745: NOT
34746: OR
34747: IFFALSE 34751
// exit ;
34749: GO 35860
// nat := GetNation ( tower ) ;
34751: LD_ADDR_VAR 0 12
34755: PUSH
34756: LD_VAR 0 1
34760: PPUSH
34761: CALL_OW 248
34765: ST_TO_ADDR
// side := GetSide ( tower ) ;
34766: LD_ADDR_VAR 0 16
34770: PUSH
34771: LD_VAR 0 1
34775: PPUSH
34776: CALL_OW 255
34780: ST_TO_ADDR
// x := GetX ( tower ) ;
34781: LD_ADDR_VAR 0 10
34785: PUSH
34786: LD_VAR 0 1
34790: PPUSH
34791: CALL_OW 250
34795: ST_TO_ADDR
// y := GetY ( tower ) ;
34796: LD_ADDR_VAR 0 11
34800: PUSH
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL_OW 251
34810: ST_TO_ADDR
// if not x or not y then
34811: LD_VAR 0 10
34815: NOT
34816: PUSH
34817: LD_VAR 0 11
34821: NOT
34822: OR
34823: IFFALSE 34827
// exit ;
34825: GO 35860
// weapon := 0 ;
34827: LD_ADDR_VAR 0 18
34831: PUSH
34832: LD_INT 0
34834: ST_TO_ADDR
// fac_list := [ ] ;
34835: LD_ADDR_VAR 0 17
34839: PUSH
34840: EMPTY
34841: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34842: LD_ADDR_VAR 0 6
34846: PUSH
34847: LD_VAR 0 1
34851: PPUSH
34852: CALL_OW 274
34856: PPUSH
34857: LD_VAR 0 2
34861: PPUSH
34862: LD_INT 0
34864: PPUSH
34865: CALL 32431 0 3
34869: PPUSH
34870: LD_INT 30
34872: PUSH
34873: LD_INT 3
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PPUSH
34880: CALL_OW 72
34884: ST_TO_ADDR
// if not factories then
34885: LD_VAR 0 6
34889: NOT
34890: IFFALSE 34894
// exit ;
34892: GO 35860
// for i in factories do
34894: LD_ADDR_VAR 0 8
34898: PUSH
34899: LD_VAR 0 6
34903: PUSH
34904: FOR_IN
34905: IFFALSE 34930
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34907: LD_ADDR_VAR 0 17
34911: PUSH
34912: LD_VAR 0 17
34916: PUSH
34917: LD_VAR 0 8
34921: PPUSH
34922: CALL_OW 478
34926: UNION
34927: ST_TO_ADDR
34928: GO 34904
34930: POP
34931: POP
// if not fac_list then
34932: LD_VAR 0 17
34936: NOT
34937: IFFALSE 34941
// exit ;
34939: GO 35860
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34941: LD_ADDR_VAR 0 5
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 5
34951: PUSH
34952: LD_INT 9
34954: PUSH
34955: LD_INT 10
34957: PUSH
34958: LD_INT 6
34960: PUSH
34961: LD_INT 7
34963: PUSH
34964: LD_INT 11
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 27
34978: PUSH
34979: LD_INT 28
34981: PUSH
34982: LD_INT 26
34984: PUSH
34985: LD_INT 30
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 43
34996: PUSH
34997: LD_INT 44
34999: PUSH
35000: LD_INT 46
35002: PUSH
35003: LD_INT 45
35005: PUSH
35006: LD_INT 47
35008: PUSH
35009: LD_INT 49
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: PUSH
35025: LD_VAR 0 12
35029: ARRAY
35030: ST_TO_ADDR
// list := list isect fac_list ;
35031: LD_ADDR_VAR 0 5
35035: PUSH
35036: LD_VAR 0 5
35040: PUSH
35041: LD_VAR 0 17
35045: ISECT
35046: ST_TO_ADDR
// if not list then
35047: LD_VAR 0 5
35051: NOT
35052: IFFALSE 35056
// exit ;
35054: GO 35860
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35056: LD_VAR 0 12
35060: PUSH
35061: LD_INT 3
35063: EQUAL
35064: PUSH
35065: LD_INT 49
35067: PUSH
35068: LD_VAR 0 5
35072: IN
35073: AND
35074: PUSH
35075: LD_INT 31
35077: PPUSH
35078: LD_VAR 0 16
35082: PPUSH
35083: CALL_OW 321
35087: PUSH
35088: LD_INT 2
35090: EQUAL
35091: AND
35092: IFFALSE 35152
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35094: LD_INT 22
35096: PUSH
35097: LD_VAR 0 16
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 35
35108: PUSH
35109: LD_INT 49
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 91
35118: PUSH
35119: LD_VAR 0 1
35123: PUSH
35124: LD_INT 10
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: PPUSH
35137: CALL_OW 69
35141: NOT
35142: IFFALSE 35152
// weapon := ru_time_lapser ;
35144: LD_ADDR_VAR 0 18
35148: PUSH
35149: LD_INT 49
35151: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35152: LD_VAR 0 12
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: IN
35167: PUSH
35168: LD_INT 11
35170: PUSH
35171: LD_VAR 0 5
35175: IN
35176: PUSH
35177: LD_INT 30
35179: PUSH
35180: LD_VAR 0 5
35184: IN
35185: OR
35186: AND
35187: PUSH
35188: LD_INT 6
35190: PPUSH
35191: LD_VAR 0 16
35195: PPUSH
35196: CALL_OW 321
35200: PUSH
35201: LD_INT 2
35203: EQUAL
35204: AND
35205: IFFALSE 35370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35207: LD_INT 22
35209: PUSH
35210: LD_VAR 0 16
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 35
35224: PUSH
35225: LD_INT 11
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 35
35234: PUSH
35235: LD_INT 30
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 91
35249: PUSH
35250: LD_VAR 0 1
35254: PUSH
35255: LD_INT 18
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: PPUSH
35268: CALL_OW 69
35272: NOT
35273: PUSH
35274: LD_INT 22
35276: PUSH
35277: LD_VAR 0 16
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: LD_INT 30
35291: PUSH
35292: LD_INT 32
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 30
35301: PUSH
35302: LD_INT 33
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 91
35316: PUSH
35317: LD_VAR 0 1
35321: PUSH
35322: LD_INT 12
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: PPUSH
35338: CALL_OW 69
35342: PUSH
35343: LD_INT 2
35345: GREATER
35346: AND
35347: IFFALSE 35370
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35349: LD_ADDR_VAR 0 18
35353: PUSH
35354: LD_INT 11
35356: PUSH
35357: LD_INT 30
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_VAR 0 12
35368: ARRAY
35369: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35370: LD_VAR 0 18
35374: NOT
35375: PUSH
35376: LD_INT 40
35378: PPUSH
35379: LD_VAR 0 16
35383: PPUSH
35384: CALL_OW 321
35388: PUSH
35389: LD_INT 2
35391: EQUAL
35392: AND
35393: PUSH
35394: LD_INT 7
35396: PUSH
35397: LD_VAR 0 5
35401: IN
35402: PUSH
35403: LD_INT 28
35405: PUSH
35406: LD_VAR 0 5
35410: IN
35411: OR
35412: PUSH
35413: LD_INT 45
35415: PUSH
35416: LD_VAR 0 5
35420: IN
35421: OR
35422: AND
35423: IFFALSE 35677
// begin hex := GetHexInfo ( x , y ) ;
35425: LD_ADDR_VAR 0 4
35429: PUSH
35430: LD_VAR 0 10
35434: PPUSH
35435: LD_VAR 0 11
35439: PPUSH
35440: CALL_OW 546
35444: ST_TO_ADDR
// if hex [ 1 ] then
35445: LD_VAR 0 4
35449: PUSH
35450: LD_INT 1
35452: ARRAY
35453: IFFALSE 35457
// exit ;
35455: GO 35860
// height := hex [ 2 ] ;
35457: LD_ADDR_VAR 0 15
35461: PUSH
35462: LD_VAR 0 4
35466: PUSH
35467: LD_INT 2
35469: ARRAY
35470: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35471: LD_ADDR_VAR 0 14
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
// for i in tmp do
35494: LD_ADDR_VAR 0 8
35498: PUSH
35499: LD_VAR 0 14
35503: PUSH
35504: FOR_IN
35505: IFFALSE 35675
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35507: LD_ADDR_VAR 0 9
35511: PUSH
35512: LD_VAR 0 10
35516: PPUSH
35517: LD_VAR 0 8
35521: PPUSH
35522: LD_INT 5
35524: PPUSH
35525: CALL_OW 272
35529: PUSH
35530: LD_VAR 0 11
35534: PPUSH
35535: LD_VAR 0 8
35539: PPUSH
35540: LD_INT 5
35542: PPUSH
35543: CALL_OW 273
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35552: LD_VAR 0 9
35556: PUSH
35557: LD_INT 1
35559: ARRAY
35560: PPUSH
35561: LD_VAR 0 9
35565: PUSH
35566: LD_INT 2
35568: ARRAY
35569: PPUSH
35570: CALL_OW 488
35574: IFFALSE 35673
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35576: LD_ADDR_VAR 0 4
35580: PUSH
35581: LD_VAR 0 9
35585: PUSH
35586: LD_INT 1
35588: ARRAY
35589: PPUSH
35590: LD_VAR 0 9
35594: PUSH
35595: LD_INT 2
35597: ARRAY
35598: PPUSH
35599: CALL_OW 546
35603: ST_TO_ADDR
// if hex [ 1 ] then
35604: LD_VAR 0 4
35608: PUSH
35609: LD_INT 1
35611: ARRAY
35612: IFFALSE 35616
// continue ;
35614: GO 35504
// h := hex [ 2 ] ;
35616: LD_ADDR_VAR 0 13
35620: PUSH
35621: LD_VAR 0 4
35625: PUSH
35626: LD_INT 2
35628: ARRAY
35629: ST_TO_ADDR
// if h + 7 < height then
35630: LD_VAR 0 13
35634: PUSH
35635: LD_INT 7
35637: PLUS
35638: PUSH
35639: LD_VAR 0 15
35643: LESS
35644: IFFALSE 35673
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35646: LD_ADDR_VAR 0 18
35650: PUSH
35651: LD_INT 7
35653: PUSH
35654: LD_INT 28
35656: PUSH
35657: LD_INT 45
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: PUSH
35665: LD_VAR 0 12
35669: ARRAY
35670: ST_TO_ADDR
// break ;
35671: GO 35675
// end ; end ; end ;
35673: GO 35504
35675: POP
35676: POP
// end ; if not weapon then
35677: LD_VAR 0 18
35681: NOT
35682: IFFALSE 35742
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35684: LD_ADDR_VAR 0 5
35688: PUSH
35689: LD_VAR 0 5
35693: PUSH
35694: LD_INT 11
35696: PUSH
35697: LD_INT 30
35699: PUSH
35700: LD_INT 49
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: DIFF
35708: ST_TO_ADDR
// if not list then
35709: LD_VAR 0 5
35713: NOT
35714: IFFALSE 35718
// exit ;
35716: GO 35860
// weapon := list [ rand ( 1 , list ) ] ;
35718: LD_ADDR_VAR 0 18
35722: PUSH
35723: LD_VAR 0 5
35727: PUSH
35728: LD_INT 1
35730: PPUSH
35731: LD_VAR 0 5
35735: PPUSH
35736: CALL_OW 12
35740: ARRAY
35741: ST_TO_ADDR
// end ; if weapon then
35742: LD_VAR 0 18
35746: IFFALSE 35860
// begin tmp := CostOfWeapon ( weapon ) ;
35748: LD_ADDR_VAR 0 14
35752: PUSH
35753: LD_VAR 0 18
35757: PPUSH
35758: CALL_OW 451
35762: ST_TO_ADDR
// j := GetBase ( tower ) ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_VAR 0 1
35772: PPUSH
35773: CALL_OW 274
35777: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35778: LD_VAR 0 9
35782: PPUSH
35783: LD_INT 1
35785: PPUSH
35786: CALL_OW 275
35790: PUSH
35791: LD_VAR 0 14
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: GREATEREQUAL
35800: PUSH
35801: LD_VAR 0 9
35805: PPUSH
35806: LD_INT 2
35808: PPUSH
35809: CALL_OW 275
35813: PUSH
35814: LD_VAR 0 14
35818: PUSH
35819: LD_INT 2
35821: ARRAY
35822: GREATEREQUAL
35823: AND
35824: PUSH
35825: LD_VAR 0 9
35829: PPUSH
35830: LD_INT 3
35832: PPUSH
35833: CALL_OW 275
35837: PUSH
35838: LD_VAR 0 14
35842: PUSH
35843: LD_INT 3
35845: ARRAY
35846: GREATEREQUAL
35847: AND
35848: IFFALSE 35860
// result := weapon ;
35850: LD_ADDR_VAR 0 3
35854: PUSH
35855: LD_VAR 0 18
35859: ST_TO_ADDR
// end ; end ;
35860: LD_VAR 0 3
35864: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35865: LD_INT 0
35867: PPUSH
35868: PPUSH
// result := true ;
35869: LD_ADDR_VAR 0 3
35873: PUSH
35874: LD_INT 1
35876: ST_TO_ADDR
// if array1 = array2 then
35877: LD_VAR 0 1
35881: PUSH
35882: LD_VAR 0 2
35886: EQUAL
35887: IFFALSE 35947
// begin for i = 1 to array1 do
35889: LD_ADDR_VAR 0 4
35893: PUSH
35894: DOUBLE
35895: LD_INT 1
35897: DEC
35898: ST_TO_ADDR
35899: LD_VAR 0 1
35903: PUSH
35904: FOR_TO
35905: IFFALSE 35943
// if array1 [ i ] <> array2 [ i ] then
35907: LD_VAR 0 1
35911: PUSH
35912: LD_VAR 0 4
35916: ARRAY
35917: PUSH
35918: LD_VAR 0 2
35922: PUSH
35923: LD_VAR 0 4
35927: ARRAY
35928: NONEQUAL
35929: IFFALSE 35941
// begin result := false ;
35931: LD_ADDR_VAR 0 3
35935: PUSH
35936: LD_INT 0
35938: ST_TO_ADDR
// break ;
35939: GO 35943
// end ;
35941: GO 35904
35943: POP
35944: POP
// end else
35945: GO 35955
// result := false ;
35947: LD_ADDR_VAR 0 3
35951: PUSH
35952: LD_INT 0
35954: ST_TO_ADDR
// end ;
35955: LD_VAR 0 3
35959: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
// if not array1 or not array2 then
35964: LD_VAR 0 1
35968: NOT
35969: PUSH
35970: LD_VAR 0 2
35974: NOT
35975: OR
35976: IFFALSE 35980
// exit ;
35978: GO 36044
// result := true ;
35980: LD_ADDR_VAR 0 3
35984: PUSH
35985: LD_INT 1
35987: ST_TO_ADDR
// for i = 1 to array1 do
35988: LD_ADDR_VAR 0 4
35992: PUSH
35993: DOUBLE
35994: LD_INT 1
35996: DEC
35997: ST_TO_ADDR
35998: LD_VAR 0 1
36002: PUSH
36003: FOR_TO
36004: IFFALSE 36042
// if array1 [ i ] <> array2 [ i ] then
36006: LD_VAR 0 1
36010: PUSH
36011: LD_VAR 0 4
36015: ARRAY
36016: PUSH
36017: LD_VAR 0 2
36021: PUSH
36022: LD_VAR 0 4
36026: ARRAY
36027: NONEQUAL
36028: IFFALSE 36040
// begin result := false ;
36030: LD_ADDR_VAR 0 3
36034: PUSH
36035: LD_INT 0
36037: ST_TO_ADDR
// break ;
36038: GO 36042
// end ;
36040: GO 36003
36042: POP
36043: POP
// end ;
36044: LD_VAR 0 3
36048: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36049: LD_INT 0
36051: PPUSH
36052: PPUSH
36053: PPUSH
// pom := GetBase ( fac ) ;
36054: LD_ADDR_VAR 0 5
36058: PUSH
36059: LD_VAR 0 1
36063: PPUSH
36064: CALL_OW 274
36068: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36069: LD_ADDR_VAR 0 4
36073: PUSH
36074: LD_VAR 0 2
36078: PUSH
36079: LD_INT 1
36081: ARRAY
36082: PPUSH
36083: LD_VAR 0 2
36087: PUSH
36088: LD_INT 2
36090: ARRAY
36091: PPUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_INT 3
36099: ARRAY
36100: PPUSH
36101: LD_VAR 0 2
36105: PUSH
36106: LD_INT 4
36108: ARRAY
36109: PPUSH
36110: CALL_OW 449
36114: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36115: LD_ADDR_VAR 0 3
36119: PUSH
36120: LD_VAR 0 5
36124: PPUSH
36125: LD_INT 1
36127: PPUSH
36128: CALL_OW 275
36132: PUSH
36133: LD_VAR 0 4
36137: PUSH
36138: LD_INT 1
36140: ARRAY
36141: GREATEREQUAL
36142: PUSH
36143: LD_VAR 0 5
36147: PPUSH
36148: LD_INT 2
36150: PPUSH
36151: CALL_OW 275
36155: PUSH
36156: LD_VAR 0 4
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: GREATEREQUAL
36165: AND
36166: PUSH
36167: LD_VAR 0 5
36171: PPUSH
36172: LD_INT 3
36174: PPUSH
36175: CALL_OW 275
36179: PUSH
36180: LD_VAR 0 4
36184: PUSH
36185: LD_INT 3
36187: ARRAY
36188: GREATEREQUAL
36189: AND
36190: ST_TO_ADDR
// end ;
36191: LD_VAR 0 3
36195: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36196: LD_INT 0
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
// pom := GetBase ( building ) ;
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 274
36216: ST_TO_ADDR
// if not pom then
36217: LD_VAR 0 3
36221: NOT
36222: IFFALSE 36226
// exit ;
36224: GO 36396
// btype := GetBType ( building ) ;
36226: LD_ADDR_VAR 0 5
36230: PUSH
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL_OW 266
36240: ST_TO_ADDR
// if btype = b_armoury then
36241: LD_VAR 0 5
36245: PUSH
36246: LD_INT 4
36248: EQUAL
36249: IFFALSE 36259
// btype := b_barracks ;
36251: LD_ADDR_VAR 0 5
36255: PUSH
36256: LD_INT 5
36258: ST_TO_ADDR
// if btype = b_depot then
36259: LD_VAR 0 5
36263: PUSH
36264: LD_INT 0
36266: EQUAL
36267: IFFALSE 36277
// btype := b_warehouse ;
36269: LD_ADDR_VAR 0 5
36273: PUSH
36274: LD_INT 1
36276: ST_TO_ADDR
// if btype = b_workshop then
36277: LD_VAR 0 5
36281: PUSH
36282: LD_INT 2
36284: EQUAL
36285: IFFALSE 36295
// btype := b_factory ;
36287: LD_ADDR_VAR 0 5
36291: PUSH
36292: LD_INT 3
36294: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36295: LD_ADDR_VAR 0 4
36299: PUSH
36300: LD_VAR 0 5
36304: PPUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL_OW 248
36314: PPUSH
36315: CALL_OW 450
36319: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36320: LD_ADDR_VAR 0 2
36324: PUSH
36325: LD_VAR 0 3
36329: PPUSH
36330: LD_INT 1
36332: PPUSH
36333: CALL_OW 275
36337: PUSH
36338: LD_VAR 0 4
36342: PUSH
36343: LD_INT 1
36345: ARRAY
36346: GREATEREQUAL
36347: PUSH
36348: LD_VAR 0 3
36352: PPUSH
36353: LD_INT 2
36355: PPUSH
36356: CALL_OW 275
36360: PUSH
36361: LD_VAR 0 4
36365: PUSH
36366: LD_INT 2
36368: ARRAY
36369: GREATEREQUAL
36370: AND
36371: PUSH
36372: LD_VAR 0 3
36376: PPUSH
36377: LD_INT 3
36379: PPUSH
36380: CALL_OW 275
36384: PUSH
36385: LD_VAR 0 4
36389: PUSH
36390: LD_INT 3
36392: ARRAY
36393: GREATEREQUAL
36394: AND
36395: ST_TO_ADDR
// end ;
36396: LD_VAR 0 2
36400: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
36405: PPUSH
// pom := GetBase ( building ) ;
36406: LD_ADDR_VAR 0 4
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 274
36420: ST_TO_ADDR
// if not pom then
36421: LD_VAR 0 4
36425: NOT
36426: IFFALSE 36430
// exit ;
36428: GO 36531
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36430: LD_ADDR_VAR 0 5
36434: PUSH
36435: LD_VAR 0 2
36439: PPUSH
36440: LD_VAR 0 1
36444: PPUSH
36445: CALL_OW 248
36449: PPUSH
36450: CALL_OW 450
36454: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36455: LD_ADDR_VAR 0 3
36459: PUSH
36460: LD_VAR 0 4
36464: PPUSH
36465: LD_INT 1
36467: PPUSH
36468: CALL_OW 275
36472: PUSH
36473: LD_VAR 0 5
36477: PUSH
36478: LD_INT 1
36480: ARRAY
36481: GREATEREQUAL
36482: PUSH
36483: LD_VAR 0 4
36487: PPUSH
36488: LD_INT 2
36490: PPUSH
36491: CALL_OW 275
36495: PUSH
36496: LD_VAR 0 5
36500: PUSH
36501: LD_INT 2
36503: ARRAY
36504: GREATEREQUAL
36505: AND
36506: PUSH
36507: LD_VAR 0 4
36511: PPUSH
36512: LD_INT 3
36514: PPUSH
36515: CALL_OW 275
36519: PUSH
36520: LD_VAR 0 5
36524: PUSH
36525: LD_INT 3
36527: ARRAY
36528: GREATEREQUAL
36529: AND
36530: ST_TO_ADDR
// end ;
36531: LD_VAR 0 3
36535: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36536: LD_INT 0
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
// result := false ;
36549: LD_ADDR_VAR 0 8
36553: PUSH
36554: LD_INT 0
36556: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36557: LD_VAR 0 5
36561: NOT
36562: PUSH
36563: LD_VAR 0 1
36567: NOT
36568: OR
36569: PUSH
36570: LD_VAR 0 2
36574: NOT
36575: OR
36576: PUSH
36577: LD_VAR 0 3
36581: NOT
36582: OR
36583: IFFALSE 36587
// exit ;
36585: GO 37401
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36587: LD_ADDR_VAR 0 14
36591: PUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: LD_VAR 0 2
36601: PPUSH
36602: LD_VAR 0 3
36606: PPUSH
36607: LD_VAR 0 4
36611: PPUSH
36612: LD_VAR 0 5
36616: PUSH
36617: LD_INT 1
36619: ARRAY
36620: PPUSH
36621: CALL_OW 248
36625: PPUSH
36626: LD_INT 0
36628: PPUSH
36629: CALL 38634 0 6
36633: ST_TO_ADDR
// if not hexes then
36634: LD_VAR 0 14
36638: NOT
36639: IFFALSE 36643
// exit ;
36641: GO 37401
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36643: LD_ADDR_VAR 0 17
36647: PUSH
36648: LD_VAR 0 5
36652: PPUSH
36653: LD_INT 22
36655: PUSH
36656: LD_VAR 0 13
36660: PPUSH
36661: CALL_OW 255
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 30
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 30
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PPUSH
36702: CALL_OW 72
36706: ST_TO_ADDR
// for i = 1 to hexes do
36707: LD_ADDR_VAR 0 9
36711: PUSH
36712: DOUBLE
36713: LD_INT 1
36715: DEC
36716: ST_TO_ADDR
36717: LD_VAR 0 14
36721: PUSH
36722: FOR_TO
36723: IFFALSE 37399
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36725: LD_ADDR_VAR 0 13
36729: PUSH
36730: LD_VAR 0 14
36734: PUSH
36735: LD_VAR 0 9
36739: ARRAY
36740: PUSH
36741: LD_INT 1
36743: ARRAY
36744: PPUSH
36745: LD_VAR 0 14
36749: PUSH
36750: LD_VAR 0 9
36754: ARRAY
36755: PUSH
36756: LD_INT 2
36758: ARRAY
36759: PPUSH
36760: CALL_OW 428
36764: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36765: LD_VAR 0 14
36769: PUSH
36770: LD_VAR 0 9
36774: ARRAY
36775: PUSH
36776: LD_INT 1
36778: ARRAY
36779: PPUSH
36780: LD_VAR 0 14
36784: PUSH
36785: LD_VAR 0 9
36789: ARRAY
36790: PUSH
36791: LD_INT 2
36793: ARRAY
36794: PPUSH
36795: CALL_OW 351
36799: PUSH
36800: LD_VAR 0 14
36804: PUSH
36805: LD_VAR 0 9
36809: ARRAY
36810: PUSH
36811: LD_INT 1
36813: ARRAY
36814: PPUSH
36815: LD_VAR 0 14
36819: PUSH
36820: LD_VAR 0 9
36824: ARRAY
36825: PUSH
36826: LD_INT 2
36828: ARRAY
36829: PPUSH
36830: CALL_OW 488
36834: NOT
36835: OR
36836: PUSH
36837: LD_VAR 0 13
36841: PPUSH
36842: CALL_OW 247
36846: PUSH
36847: LD_INT 3
36849: EQUAL
36850: OR
36851: IFFALSE 36857
// exit ;
36853: POP
36854: POP
36855: GO 37401
// if not tmp then
36857: LD_VAR 0 13
36861: NOT
36862: IFFALSE 36866
// continue ;
36864: GO 36722
// result := true ;
36866: LD_ADDR_VAR 0 8
36870: PUSH
36871: LD_INT 1
36873: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36874: LD_VAR 0 6
36878: PUSH
36879: LD_VAR 0 13
36883: PPUSH
36884: CALL_OW 247
36888: PUSH
36889: LD_INT 2
36891: EQUAL
36892: AND
36893: PUSH
36894: LD_VAR 0 13
36898: PPUSH
36899: CALL_OW 263
36903: PUSH
36904: LD_INT 1
36906: EQUAL
36907: AND
36908: IFFALSE 37072
// begin if IsDrivenBy ( tmp ) then
36910: LD_VAR 0 13
36914: PPUSH
36915: CALL_OW 311
36919: IFFALSE 36923
// continue ;
36921: GO 36722
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36923: LD_VAR 0 6
36927: PPUSH
36928: LD_INT 3
36930: PUSH
36931: LD_INT 60
36933: PUSH
36934: EMPTY
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 3
36943: PUSH
36944: LD_INT 55
36946: PUSH
36947: EMPTY
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PPUSH
36958: CALL_OW 72
36962: IFFALSE 37070
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36964: LD_ADDR_VAR 0 18
36968: PUSH
36969: LD_VAR 0 6
36973: PPUSH
36974: LD_INT 3
36976: PUSH
36977: LD_INT 60
36979: PUSH
36980: EMPTY
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 3
36989: PUSH
36990: LD_INT 55
36992: PUSH
36993: EMPTY
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PPUSH
37004: CALL_OW 72
37008: PUSH
37009: LD_INT 1
37011: ARRAY
37012: ST_TO_ADDR
// if IsInUnit ( driver ) then
37013: LD_VAR 0 18
37017: PPUSH
37018: CALL_OW 310
37022: IFFALSE 37033
// ComExit ( driver ) ;
37024: LD_VAR 0 18
37028: PPUSH
37029: CALL 62414 0 1
// AddComEnterUnit ( driver , tmp ) ;
37033: LD_VAR 0 18
37037: PPUSH
37038: LD_VAR 0 13
37042: PPUSH
37043: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37047: LD_VAR 0 18
37051: PPUSH
37052: LD_VAR 0 7
37056: PPUSH
37057: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37061: LD_VAR 0 18
37065: PPUSH
37066: CALL_OW 181
// end ; continue ;
37070: GO 36722
// end ; if not cleaners or not tmp in cleaners then
37072: LD_VAR 0 6
37076: NOT
37077: PUSH
37078: LD_VAR 0 13
37082: PUSH
37083: LD_VAR 0 6
37087: IN
37088: NOT
37089: OR
37090: IFFALSE 37397
// begin if dep then
37092: LD_VAR 0 17
37096: IFFALSE 37232
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37098: LD_ADDR_VAR 0 16
37102: PUSH
37103: LD_VAR 0 17
37107: PUSH
37108: LD_INT 1
37110: ARRAY
37111: PPUSH
37112: CALL_OW 250
37116: PPUSH
37117: LD_VAR 0 17
37121: PUSH
37122: LD_INT 1
37124: ARRAY
37125: PPUSH
37126: CALL_OW 254
37130: PPUSH
37131: LD_INT 5
37133: PPUSH
37134: CALL_OW 272
37138: PUSH
37139: LD_VAR 0 17
37143: PUSH
37144: LD_INT 1
37146: ARRAY
37147: PPUSH
37148: CALL_OW 251
37152: PPUSH
37153: LD_VAR 0 17
37157: PUSH
37158: LD_INT 1
37160: ARRAY
37161: PPUSH
37162: CALL_OW 254
37166: PPUSH
37167: LD_INT 5
37169: PPUSH
37170: CALL_OW 273
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37179: LD_VAR 0 16
37183: PUSH
37184: LD_INT 1
37186: ARRAY
37187: PPUSH
37188: LD_VAR 0 16
37192: PUSH
37193: LD_INT 2
37195: ARRAY
37196: PPUSH
37197: CALL_OW 488
37201: IFFALSE 37232
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37203: LD_VAR 0 13
37207: PPUSH
37208: LD_VAR 0 16
37212: PUSH
37213: LD_INT 1
37215: ARRAY
37216: PPUSH
37217: LD_VAR 0 16
37221: PUSH
37222: LD_INT 2
37224: ARRAY
37225: PPUSH
37226: CALL_OW 111
// continue ;
37230: GO 36722
// end ; end ; r := GetDir ( tmp ) ;
37232: LD_ADDR_VAR 0 15
37236: PUSH
37237: LD_VAR 0 13
37241: PPUSH
37242: CALL_OW 254
37246: ST_TO_ADDR
// if r = 5 then
37247: LD_VAR 0 15
37251: PUSH
37252: LD_INT 5
37254: EQUAL
37255: IFFALSE 37265
// r := 0 ;
37257: LD_ADDR_VAR 0 15
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// for j = r to 5 do
37265: LD_ADDR_VAR 0 10
37269: PUSH
37270: DOUBLE
37271: LD_VAR 0 15
37275: DEC
37276: ST_TO_ADDR
37277: LD_INT 5
37279: PUSH
37280: FOR_TO
37281: IFFALSE 37395
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37283: LD_ADDR_VAR 0 11
37287: PUSH
37288: LD_VAR 0 13
37292: PPUSH
37293: CALL_OW 250
37297: PPUSH
37298: LD_VAR 0 10
37302: PPUSH
37303: LD_INT 2
37305: PPUSH
37306: CALL_OW 272
37310: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37311: LD_ADDR_VAR 0 12
37315: PUSH
37316: LD_VAR 0 13
37320: PPUSH
37321: CALL_OW 251
37325: PPUSH
37326: LD_VAR 0 10
37330: PPUSH
37331: LD_INT 2
37333: PPUSH
37334: CALL_OW 273
37338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37339: LD_VAR 0 11
37343: PPUSH
37344: LD_VAR 0 12
37348: PPUSH
37349: CALL_OW 488
37353: PUSH
37354: LD_VAR 0 11
37358: PPUSH
37359: LD_VAR 0 12
37363: PPUSH
37364: CALL_OW 428
37368: NOT
37369: AND
37370: IFFALSE 37393
// begin ComMoveXY ( tmp , _x , _y ) ;
37372: LD_VAR 0 13
37376: PPUSH
37377: LD_VAR 0 11
37381: PPUSH
37382: LD_VAR 0 12
37386: PPUSH
37387: CALL_OW 111
// break ;
37391: GO 37395
// end ; end ;
37393: GO 37280
37395: POP
37396: POP
// end ; end ;
37397: GO 36722
37399: POP
37400: POP
// end ;
37401: LD_VAR 0 8
37405: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37406: LD_INT 0
37408: PPUSH
// result := true ;
37409: LD_ADDR_VAR 0 3
37413: PUSH
37414: LD_INT 1
37416: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37417: LD_VAR 0 2
37421: PUSH
37422: LD_INT 24
37424: DOUBLE
37425: EQUAL
37426: IFTRUE 37436
37428: LD_INT 33
37430: DOUBLE
37431: EQUAL
37432: IFTRUE 37436
37434: GO 37461
37436: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37437: LD_ADDR_VAR 0 3
37441: PUSH
37442: LD_INT 32
37444: PPUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 321
37454: PUSH
37455: LD_INT 2
37457: EQUAL
37458: ST_TO_ADDR
37459: GO 37777
37461: LD_INT 20
37463: DOUBLE
37464: EQUAL
37465: IFTRUE 37469
37467: GO 37494
37469: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37470: LD_ADDR_VAR 0 3
37474: PUSH
37475: LD_INT 6
37477: PPUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: CALL_OW 321
37487: PUSH
37488: LD_INT 2
37490: EQUAL
37491: ST_TO_ADDR
37492: GO 37777
37494: LD_INT 22
37496: DOUBLE
37497: EQUAL
37498: IFTRUE 37508
37500: LD_INT 36
37502: DOUBLE
37503: EQUAL
37504: IFTRUE 37508
37506: GO 37533
37508: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37509: LD_ADDR_VAR 0 3
37513: PUSH
37514: LD_INT 15
37516: PPUSH
37517: LD_VAR 0 1
37521: PPUSH
37522: CALL_OW 321
37526: PUSH
37527: LD_INT 2
37529: EQUAL
37530: ST_TO_ADDR
37531: GO 37777
37533: LD_INT 30
37535: DOUBLE
37536: EQUAL
37537: IFTRUE 37541
37539: GO 37566
37541: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37542: LD_ADDR_VAR 0 3
37546: PUSH
37547: LD_INT 20
37549: PPUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 321
37559: PUSH
37560: LD_INT 2
37562: EQUAL
37563: ST_TO_ADDR
37564: GO 37777
37566: LD_INT 28
37568: DOUBLE
37569: EQUAL
37570: IFTRUE 37580
37572: LD_INT 21
37574: DOUBLE
37575: EQUAL
37576: IFTRUE 37580
37578: GO 37605
37580: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_INT 21
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 321
37598: PUSH
37599: LD_INT 2
37601: EQUAL
37602: ST_TO_ADDR
37603: GO 37777
37605: LD_INT 16
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37613
37611: GO 37638
37613: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37614: LD_ADDR_VAR 0 3
37618: PUSH
37619: LD_INT 84
37621: PPUSH
37622: LD_VAR 0 1
37626: PPUSH
37627: CALL_OW 321
37631: PUSH
37632: LD_INT 2
37634: EQUAL
37635: ST_TO_ADDR
37636: GO 37777
37638: LD_INT 19
37640: DOUBLE
37641: EQUAL
37642: IFTRUE 37652
37644: LD_INT 23
37646: DOUBLE
37647: EQUAL
37648: IFTRUE 37652
37650: GO 37677
37652: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37653: LD_ADDR_VAR 0 3
37657: PUSH
37658: LD_INT 83
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL_OW 321
37670: PUSH
37671: LD_INT 2
37673: EQUAL
37674: ST_TO_ADDR
37675: GO 37777
37677: LD_INT 17
37679: DOUBLE
37680: EQUAL
37681: IFTRUE 37685
37683: GO 37710
37685: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_INT 39
37693: PPUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 321
37703: PUSH
37704: LD_INT 2
37706: EQUAL
37707: ST_TO_ADDR
37708: GO 37777
37710: LD_INT 18
37712: DOUBLE
37713: EQUAL
37714: IFTRUE 37718
37716: GO 37743
37718: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37719: LD_ADDR_VAR 0 3
37723: PUSH
37724: LD_INT 40
37726: PPUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: CALL_OW 321
37736: PUSH
37737: LD_INT 2
37739: EQUAL
37740: ST_TO_ADDR
37741: GO 37777
37743: LD_INT 27
37745: DOUBLE
37746: EQUAL
37747: IFTRUE 37751
37749: GO 37776
37751: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37752: LD_ADDR_VAR 0 3
37756: PUSH
37757: LD_INT 35
37759: PPUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 321
37769: PUSH
37770: LD_INT 2
37772: EQUAL
37773: ST_TO_ADDR
37774: GO 37777
37776: POP
// end ;
37777: LD_VAR 0 3
37781: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37782: LD_INT 0
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
// result := false ;
37795: LD_ADDR_VAR 0 6
37799: PUSH
37800: LD_INT 0
37802: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37803: LD_VAR 0 1
37807: NOT
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 266
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: IN
37829: NOT
37830: OR
37831: PUSH
37832: LD_VAR 0 2
37836: NOT
37837: OR
37838: PUSH
37839: LD_VAR 0 5
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: LD_INT 4
37858: PUSH
37859: LD_INT 5
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: IN
37870: NOT
37871: OR
37872: PUSH
37873: LD_VAR 0 3
37877: PPUSH
37878: LD_VAR 0 4
37882: PPUSH
37883: CALL_OW 488
37887: NOT
37888: OR
37889: IFFALSE 37893
// exit ;
37891: GO 38629
// side := GetSide ( depot ) ;
37893: LD_ADDR_VAR 0 9
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 255
37907: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37908: LD_VAR 0 9
37912: PPUSH
37913: LD_VAR 0 2
37917: PPUSH
37918: CALL 37406 0 2
37922: NOT
37923: IFFALSE 37927
// exit ;
37925: GO 38629
// pom := GetBase ( depot ) ;
37927: LD_ADDR_VAR 0 10
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 274
37941: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37942: LD_ADDR_VAR 0 11
37946: PUSH
37947: LD_VAR 0 2
37951: PPUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 248
37961: PPUSH
37962: CALL_OW 450
37966: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37967: LD_VAR 0 10
37971: PPUSH
37972: LD_INT 1
37974: PPUSH
37975: CALL_OW 275
37979: PUSH
37980: LD_VAR 0 11
37984: PUSH
37985: LD_INT 1
37987: ARRAY
37988: GREATEREQUAL
37989: PUSH
37990: LD_VAR 0 10
37994: PPUSH
37995: LD_INT 2
37997: PPUSH
37998: CALL_OW 275
38002: PUSH
38003: LD_VAR 0 11
38007: PUSH
38008: LD_INT 2
38010: ARRAY
38011: GREATEREQUAL
38012: AND
38013: PUSH
38014: LD_VAR 0 10
38018: PPUSH
38019: LD_INT 3
38021: PPUSH
38022: CALL_OW 275
38026: PUSH
38027: LD_VAR 0 11
38031: PUSH
38032: LD_INT 3
38034: ARRAY
38035: GREATEREQUAL
38036: AND
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38629
// if GetBType ( depot ) = b_depot then
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 266
38051: PUSH
38052: LD_INT 0
38054: EQUAL
38055: IFFALSE 38067
// dist := 28 else
38057: LD_ADDR_VAR 0 14
38061: PUSH
38062: LD_INT 28
38064: ST_TO_ADDR
38065: GO 38075
// dist := 36 ;
38067: LD_ADDR_VAR 0 14
38071: PUSH
38072: LD_INT 36
38074: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38075: LD_VAR 0 1
38079: PPUSH
38080: LD_VAR 0 3
38084: PPUSH
38085: LD_VAR 0 4
38089: PPUSH
38090: CALL_OW 297
38094: PUSH
38095: LD_VAR 0 14
38099: GREATER
38100: IFFALSE 38104
// exit ;
38102: GO 38629
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38104: LD_ADDR_VAR 0 12
38108: PUSH
38109: LD_VAR 0 2
38113: PPUSH
38114: LD_VAR 0 3
38118: PPUSH
38119: LD_VAR 0 4
38123: PPUSH
38124: LD_VAR 0 5
38128: PPUSH
38129: LD_VAR 0 1
38133: PPUSH
38134: CALL_OW 248
38138: PPUSH
38139: LD_INT 0
38141: PPUSH
38142: CALL 38634 0 6
38146: ST_TO_ADDR
// if not hexes then
38147: LD_VAR 0 12
38151: NOT
38152: IFFALSE 38156
// exit ;
38154: GO 38629
// hex := GetHexInfo ( x , y ) ;
38156: LD_ADDR_VAR 0 15
38160: PUSH
38161: LD_VAR 0 3
38165: PPUSH
38166: LD_VAR 0 4
38170: PPUSH
38171: CALL_OW 546
38175: ST_TO_ADDR
// if hex [ 1 ] then
38176: LD_VAR 0 15
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: IFFALSE 38188
// exit ;
38186: GO 38629
// height := hex [ 2 ] ;
38188: LD_ADDR_VAR 0 13
38192: PUSH
38193: LD_VAR 0 15
38197: PUSH
38198: LD_INT 2
38200: ARRAY
38201: ST_TO_ADDR
// for i = 1 to hexes do
38202: LD_ADDR_VAR 0 7
38206: PUSH
38207: DOUBLE
38208: LD_INT 1
38210: DEC
38211: ST_TO_ADDR
38212: LD_VAR 0 12
38216: PUSH
38217: FOR_TO
38218: IFFALSE 38548
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38220: LD_VAR 0 12
38224: PUSH
38225: LD_VAR 0 7
38229: ARRAY
38230: PUSH
38231: LD_INT 1
38233: ARRAY
38234: PPUSH
38235: LD_VAR 0 12
38239: PUSH
38240: LD_VAR 0 7
38244: ARRAY
38245: PUSH
38246: LD_INT 2
38248: ARRAY
38249: PPUSH
38250: CALL_OW 488
38254: NOT
38255: PUSH
38256: LD_VAR 0 12
38260: PUSH
38261: LD_VAR 0 7
38265: ARRAY
38266: PUSH
38267: LD_INT 1
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 12
38275: PUSH
38276: LD_VAR 0 7
38280: ARRAY
38281: PUSH
38282: LD_INT 2
38284: ARRAY
38285: PPUSH
38286: CALL_OW 428
38290: PUSH
38291: LD_INT 0
38293: GREATER
38294: OR
38295: PUSH
38296: LD_VAR 0 12
38300: PUSH
38301: LD_VAR 0 7
38305: ARRAY
38306: PUSH
38307: LD_INT 1
38309: ARRAY
38310: PPUSH
38311: LD_VAR 0 12
38315: PUSH
38316: LD_VAR 0 7
38320: ARRAY
38321: PUSH
38322: LD_INT 2
38324: ARRAY
38325: PPUSH
38326: CALL_OW 351
38330: OR
38331: IFFALSE 38337
// exit ;
38333: POP
38334: POP
38335: GO 38629
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38337: LD_ADDR_VAR 0 8
38341: PUSH
38342: LD_VAR 0 12
38346: PUSH
38347: LD_VAR 0 7
38351: ARRAY
38352: PUSH
38353: LD_INT 1
38355: ARRAY
38356: PPUSH
38357: LD_VAR 0 12
38361: PUSH
38362: LD_VAR 0 7
38366: ARRAY
38367: PUSH
38368: LD_INT 2
38370: ARRAY
38371: PPUSH
38372: CALL_OW 546
38376: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38377: LD_VAR 0 8
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PUSH
38386: LD_VAR 0 8
38390: PUSH
38391: LD_INT 2
38393: ARRAY
38394: PUSH
38395: LD_VAR 0 13
38399: PUSH
38400: LD_INT 2
38402: PLUS
38403: GREATER
38404: OR
38405: PUSH
38406: LD_VAR 0 8
38410: PUSH
38411: LD_INT 2
38413: ARRAY
38414: PUSH
38415: LD_VAR 0 13
38419: PUSH
38420: LD_INT 2
38422: MINUS
38423: LESS
38424: OR
38425: PUSH
38426: LD_VAR 0 8
38430: PUSH
38431: LD_INT 3
38433: ARRAY
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 8
38440: PUSH
38441: LD_INT 9
38443: PUSH
38444: LD_INT 10
38446: PUSH
38447: LD_INT 11
38449: PUSH
38450: LD_INT 12
38452: PUSH
38453: LD_INT 13
38455: PUSH
38456: LD_INT 16
38458: PUSH
38459: LD_INT 17
38461: PUSH
38462: LD_INT 18
38464: PUSH
38465: LD_INT 19
38467: PUSH
38468: LD_INT 20
38470: PUSH
38471: LD_INT 21
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: IN
38489: NOT
38490: OR
38491: PUSH
38492: LD_VAR 0 8
38496: PUSH
38497: LD_INT 5
38499: ARRAY
38500: NOT
38501: OR
38502: PUSH
38503: LD_VAR 0 8
38507: PUSH
38508: LD_INT 6
38510: ARRAY
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 7
38520: PUSH
38521: LD_INT 9
38523: PUSH
38524: LD_INT 10
38526: PUSH
38527: LD_INT 11
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: IN
38538: NOT
38539: OR
38540: IFFALSE 38546
// exit ;
38542: POP
38543: POP
38544: GO 38629
// end ;
38546: GO 38217
38548: POP
38549: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38550: LD_VAR 0 9
38554: PPUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: LD_VAR 0 4
38564: PPUSH
38565: LD_INT 20
38567: PPUSH
38568: CALL 30581 0 4
38572: PUSH
38573: LD_INT 4
38575: ARRAY
38576: IFFALSE 38580
// exit ;
38578: GO 38629
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38580: LD_VAR 0 2
38584: PUSH
38585: LD_INT 29
38587: PUSH
38588: LD_INT 30
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: IN
38595: PUSH
38596: LD_VAR 0 3
38600: PPUSH
38601: LD_VAR 0 4
38605: PPUSH
38606: LD_VAR 0 9
38610: PPUSH
38611: CALL_OW 440
38615: NOT
38616: AND
38617: IFFALSE 38621
// exit ;
38619: GO 38629
// result := true ;
38621: LD_ADDR_VAR 0 6
38625: PUSH
38626: LD_INT 1
38628: ST_TO_ADDR
// end ;
38629: LD_VAR 0 6
38633: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38634: LD_INT 0
38636: PPUSH
38637: PPUSH
38638: PPUSH
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
38668: PPUSH
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
38677: PPUSH
38678: PPUSH
38679: PPUSH
38680: PPUSH
38681: PPUSH
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
// result = [ ] ;
38694: LD_ADDR_VAR 0 7
38698: PUSH
38699: EMPTY
38700: ST_TO_ADDR
// temp_list = [ ] ;
38701: LD_ADDR_VAR 0 9
38705: PUSH
38706: EMPTY
38707: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38708: LD_VAR 0 4
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 4
38727: PUSH
38728: LD_INT 5
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: IN
38739: NOT
38740: PUSH
38741: LD_VAR 0 1
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: IN
38756: PUSH
38757: LD_VAR 0 5
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 3
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: LIST
38775: IN
38776: NOT
38777: AND
38778: OR
38779: IFFALSE 38783
// exit ;
38781: GO 57174
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38783: LD_VAR 0 1
38787: PUSH
38788: LD_INT 6
38790: PUSH
38791: LD_INT 7
38793: PUSH
38794: LD_INT 8
38796: PUSH
38797: LD_INT 13
38799: PUSH
38800: LD_INT 12
38802: PUSH
38803: LD_INT 15
38805: PUSH
38806: LD_INT 11
38808: PUSH
38809: LD_INT 14
38811: PUSH
38812: LD_INT 10
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: IN
38826: IFFALSE 38836
// btype = b_lab ;
38828: LD_ADDR_VAR 0 1
38832: PUSH
38833: LD_INT 6
38835: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38836: LD_VAR 0 6
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: IN
38855: NOT
38856: PUSH
38857: LD_VAR 0 1
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 6
38876: PUSH
38877: LD_INT 36
38879: PUSH
38880: LD_INT 4
38882: PUSH
38883: LD_INT 5
38885: PUSH
38886: LD_INT 31
38888: PUSH
38889: LD_INT 32
38891: PUSH
38892: LD_INT 33
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: IN
38908: NOT
38909: PUSH
38910: LD_VAR 0 6
38914: PUSH
38915: LD_INT 1
38917: EQUAL
38918: AND
38919: OR
38920: PUSH
38921: LD_VAR 0 1
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: IN
38936: NOT
38937: PUSH
38938: LD_VAR 0 6
38942: PUSH
38943: LD_INT 2
38945: EQUAL
38946: AND
38947: OR
38948: IFFALSE 38958
// mode = 0 ;
38950: LD_ADDR_VAR 0 6
38954: PUSH
38955: LD_INT 0
38957: ST_TO_ADDR
// case mode of 0 :
38958: LD_VAR 0 6
38962: PUSH
38963: LD_INT 0
38965: DOUBLE
38966: EQUAL
38967: IFTRUE 38971
38969: GO 50424
38971: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38972: LD_ADDR_VAR 0 11
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 2
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39165: LD_ADDR_VAR 0 12
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 3
39322: NEG
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 3
39333: NEG
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39361: LD_ADDR_VAR 0 13
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: LD_INT 3
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 3
39520: NEG
39521: PUSH
39522: LD_INT 2
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 3
39532: NEG
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39560: LD_ADDR_VAR 0 14
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: LD_INT 3
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 3
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39756: LD_ADDR_VAR 0 15
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 3
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39949: LD_ADDR_VAR 0 16
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40142: LD_ADDR_VAR 0 17
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40372: LD_ADDR_VAR 0 18
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 2
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40602: LD_ADDR_VAR 0 19
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40832: LD_ADDR_VAR 0 20
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41062: LD_ADDR_VAR 0 21
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41292: LD_ADDR_VAR 0 22
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41522: LD_ADDR_VAR 0 23
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 3
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41802: LD_ADDR_VAR 0 24
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42078: LD_ADDR_VAR 0 25
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 3
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 3
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 3
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42352: LD_ADDR_VAR 0 26
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 2
42551: NEG
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 3
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42628: LD_ADDR_VAR 0 27
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 3
42873: NEG
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42908: LD_ADDR_VAR 0 28
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 3
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43190: LD_ADDR_VAR 0 29
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43469: LD_ADDR_VAR 0 30
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 3
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43747: LD_ADDR_VAR 0 31
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44025: LD_ADDR_VAR 0 32
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 3
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44303: LD_ADDR_VAR 0 33
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: LD_INT 3
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 3
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44582: LD_ADDR_VAR 0 34
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 3
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44862: LD_ADDR_VAR 0 35
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44974: LD_ADDR_VAR 0 36
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45086: LD_ADDR_VAR 0 37
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45198: LD_ADDR_VAR 0 38
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45310: LD_ADDR_VAR 0 39
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45422: LD_ADDR_VAR 0 40
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45534: LD_ADDR_VAR 0 41
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 3
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: NEG
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45884: LD_ADDR_VAR 0 42
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 3
46130: PUSH
46131: LD_INT 3
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 3
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 3
46193: NEG
46194: PUSH
46195: LD_INT 3
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46234: LD_ADDR_VAR 0 43
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 3
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 3
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 3
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 3
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 3
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46582: LD_ADDR_VAR 0 44
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 3
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46932: LD_ADDR_VAR 0 45
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47282: LD_ADDR_VAR 0 46
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 3
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47630: LD_ADDR_VAR 0 47
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47781: LD_ADDR_VAR 0 48
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47928: LD_ADDR_VAR 0 49
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48072: LD_ADDR_VAR 0 50
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48216: LD_ADDR_VAR 0 51
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48363: LD_ADDR_VAR 0 52
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48514: LD_ADDR_VAR 0 53
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48744: LD_ADDR_VAR 0 54
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48974: LD_ADDR_VAR 0 55
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49204: LD_ADDR_VAR 0 56
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49434: LD_ADDR_VAR 0 57
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49664: LD_ADDR_VAR 0 58
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49894: LD_ADDR_VAR 0 59
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49982: LD_ADDR_VAR 0 60
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50070: LD_ADDR_VAR 0 61
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50158: LD_ADDR_VAR 0 62
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50246: LD_ADDR_VAR 0 63
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50334: LD_ADDR_VAR 0 64
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// end ; 1 :
50422: GO 56319
50424: LD_INT 1
50426: DOUBLE
50427: EQUAL
50428: IFTRUE 50432
50430: GO 53055
50432: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50433: LD_ADDR_VAR 0 11
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 3
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50477: LD_ADDR_VAR 0 12
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50518: LD_ADDR_VAR 0 13
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50558: LD_ADDR_VAR 0 14
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50599: LD_ADDR_VAR 0 15
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50643: LD_ADDR_VAR 0 16
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 3
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50689: LD_ADDR_VAR 0 17
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50733: LD_ADDR_VAR 0 18
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50774: LD_ADDR_VAR 0 19
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50814: LD_ADDR_VAR 0 20
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: LIST
50854: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50855: LD_ADDR_VAR 0 21
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50899: LD_ADDR_VAR 0 22
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50945: LD_ADDR_VAR 0 23
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 4
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 3
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50989: LD_ADDR_VAR 0 24
50993: PUSH
50994: LD_INT 3
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 4
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51030: LD_ADDR_VAR 0 25
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 4
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 4
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51070: LD_ADDR_VAR 0 26
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 4
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51111: LD_ADDR_VAR 0 27
51115: PUSH
51116: LD_INT 3
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 4
51140: NEG
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51155: LD_ADDR_VAR 0 28
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: LD_INT 3
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: NEG
51175: PUSH
51176: LD_INT 4
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 4
51186: NEG
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51201: LD_ADDR_VAR 0 29
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 4
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 4
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 5
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 5
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 4
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 6
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 6
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 5
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51356: LD_ADDR_VAR 0 30
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 4
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 4
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 4
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 5
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 5
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 6
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 6
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51499: LD_ADDR_VAR 0 31
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 4
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: LD_INT 4
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 5
51566: PUSH
51567: LD_INT 4
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 5
51576: PUSH
51577: LD_INT 5
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 4
51586: PUSH
51587: LD_INT 5
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 6
51596: PUSH
51597: LD_INT 5
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 6
51606: PUSH
51607: LD_INT 6
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 5
51616: PUSH
51617: LD_INT 6
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51638: LD_ADDR_VAR 0 32
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 4
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 4
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 5
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 5
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 4
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 6
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 6
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 5
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51781: LD_ADDR_VAR 0 33
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 4
51833: NEG
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 5
51867: NEG
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 5
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 5
51890: NEG
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 6
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 6
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51936: LD_ADDR_VAR 0 34
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 3
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: NEG
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: LD_INT 4
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 4
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: LD_INT 4
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 4
52015: NEG
52016: PUSH
52017: LD_INT 5
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 5
52027: NEG
52028: PUSH
52029: LD_INT 4
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 5
52039: NEG
52040: PUSH
52041: LD_INT 5
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 5
52051: NEG
52052: PUSH
52053: LD_INT 6
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 6
52063: NEG
52064: PUSH
52065: LD_INT 5
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 6
52075: NEG
52076: PUSH
52077: LD_INT 6
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52099: LD_ADDR_VAR 0 41
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52143: LD_ADDR_VAR 0 42
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52184: LD_ADDR_VAR 0 43
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52224: LD_ADDR_VAR 0 44
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52265: LD_ADDR_VAR 0 45
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52309: LD_ADDR_VAR 0 46
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52355: LD_ADDR_VAR 0 47
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52388: LD_ADDR_VAR 0 48
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52419: LD_ADDR_VAR 0 49
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52448: LD_ADDR_VAR 0 50
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52477: LD_ADDR_VAR 0 51
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52508: LD_ADDR_VAR 0 52
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 3
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52541: LD_ADDR_VAR 0 53
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 3
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52585: LD_ADDR_VAR 0 54
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52626: LD_ADDR_VAR 0 55
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52666: LD_ADDR_VAR 0 56
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52707: LD_ADDR_VAR 0 57
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52751: LD_ADDR_VAR 0 58
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52797: LD_ADDR_VAR 0 59
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52841: LD_ADDR_VAR 0 60
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52882: LD_ADDR_VAR 0 61
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52922: LD_ADDR_VAR 0 62
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52963: LD_ADDR_VAR 0 63
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53007: LD_ADDR_VAR 0 64
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// end ; 2 :
53053: GO 56319
53055: LD_INT 2
53057: DOUBLE
53058: EQUAL
53059: IFTRUE 53063
53061: GO 56318
53063: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53064: LD_ADDR_VAR 0 29
53068: PUSH
53069: LD_INT 4
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 4
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 5
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 5
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 4
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 4
53194: PUSH
53195: LD_INT 4
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: LD_INT 4
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 4
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 4
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 4
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 5
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 5
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 4
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 5
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: LD_INT 3
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 4
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 4
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 4
53449: NEG
53450: PUSH
53451: LD_INT 4
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 4
53461: NEG
53462: PUSH
53463: LD_INT 5
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 4
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 4
53497: NEG
53498: PUSH
53499: LD_INT 3
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 5
53509: NEG
53510: PUSH
53511: LD_INT 4
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 5
53521: NEG
53522: PUSH
53523: LD_INT 5
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 5
53545: NEG
53546: PUSH
53547: LD_INT 3
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53602: LD_ADDR_VAR 0 30
53606: PUSH
53607: LD_INT 4
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 4
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 5
53629: PUSH
53630: LD_INT 4
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 5
53639: PUSH
53640: LD_INT 5
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: LD_INT 5
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 5
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: LD_INT 5
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 4
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 4
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 4
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 5
53848: NEG
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 5
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 5
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: NEG
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: LD_INT 4
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 4
53954: NEG
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 4
53966: NEG
53967: PUSH
53968: LD_INT 4
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 4
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 4
53990: NEG
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 4
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 5
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 4
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 3
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 4
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 5
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: LD_INT 5
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54149: LD_ADDR_VAR 0 31
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 5
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 5
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 4
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: LD_INT 5
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 4
54316: NEG
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 4
54351: NEG
54352: PUSH
54353: LD_INT 4
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 4
54363: NEG
54364: PUSH
54365: LD_INT 5
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 4
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: NEG
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 4
54399: NEG
54400: PUSH
54401: LD_INT 3
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 5
54411: NEG
54412: PUSH
54413: LD_INT 4
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 5
54423: NEG
54424: PUSH
54425: LD_INT 5
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: NEG
54436: PUSH
54437: LD_INT 5
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 5
54447: NEG
54448: PUSH
54449: LD_INT 3
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 4
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 4
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: LD_INT 4
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 4
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 5
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 4
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 5
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54699: LD_ADDR_VAR 0 32
54703: PUSH
54704: LD_INT 4
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 4
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 5
54762: NEG
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 5
54773: NEG
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: NEG
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: LD_INT 3
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: LD_INT 4
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 3
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 4
54868: NEG
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: NEG
54881: PUSH
54882: LD_INT 4
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 4
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 4
54904: NEG
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 4
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 5
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 4
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 5
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: LD_INT 5
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 4
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 4
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 4
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 4
55111: PUSH
55112: LD_INT 4
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 4
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: PUSH
55132: LD_INT 4
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 5
55141: PUSH
55142: LD_INT 5
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 4
55151: PUSH
55152: LD_INT 5
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 5
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: LD_INT 5
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55246: LD_ADDR_VAR 0 33
55250: PUSH
55251: LD_INT 4
55253: NEG
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 4
55265: NEG
55266: PUSH
55267: LD_INT 5
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: LD_INT 4
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: NEG
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 4
55301: NEG
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 5
55313: NEG
55314: PUSH
55315: LD_INT 4
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 5
55325: NEG
55326: PUSH
55327: LD_INT 5
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: LD_INT 5
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 5
55349: NEG
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 3
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 4
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 4
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 5
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 5
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 4
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 5
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 3
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 4
55586: PUSH
55587: LD_INT 4
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: PUSH
55597: LD_INT 4
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 4
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 4
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 4
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 4
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 5
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 5
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 5
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55784: LD_ADDR_VAR 0 34
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 4
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 5
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 4
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 5
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: NEG
55882: PUSH
55883: LD_INT 5
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 4
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 4
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: LD_INT 4
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 4
55996: PUSH
55997: LD_INT 3
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 5
56006: PUSH
56007: LD_INT 4
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 5
56016: PUSH
56017: LD_INT 5
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: LD_INT 4
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 5
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: LD_INT 5
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 4
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 4
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 4
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 4
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 5
56225: NEG
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 5
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 5
56248: NEG
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 3
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// end ; end ;
56316: GO 56319
56318: POP
// case btype of b_depot , b_warehouse :
56319: LD_VAR 0 1
56323: PUSH
56324: LD_INT 0
56326: DOUBLE
56327: EQUAL
56328: IFTRUE 56338
56330: LD_INT 1
56332: DOUBLE
56333: EQUAL
56334: IFTRUE 56338
56336: GO 56539
56338: POP
// case nation of nation_american :
56339: LD_VAR 0 5
56343: PUSH
56344: LD_INT 1
56346: DOUBLE
56347: EQUAL
56348: IFTRUE 56352
56350: GO 56408
56352: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56353: LD_ADDR_VAR 0 9
56357: PUSH
56358: LD_VAR 0 11
56362: PUSH
56363: LD_VAR 0 12
56367: PUSH
56368: LD_VAR 0 13
56372: PUSH
56373: LD_VAR 0 14
56377: PUSH
56378: LD_VAR 0 15
56382: PUSH
56383: LD_VAR 0 16
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: PUSH
56396: LD_VAR 0 4
56400: PUSH
56401: LD_INT 1
56403: PLUS
56404: ARRAY
56405: ST_TO_ADDR
56406: GO 56537
56408: LD_INT 2
56410: DOUBLE
56411: EQUAL
56412: IFTRUE 56416
56414: GO 56472
56416: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56417: LD_ADDR_VAR 0 9
56421: PUSH
56422: LD_VAR 0 17
56426: PUSH
56427: LD_VAR 0 18
56431: PUSH
56432: LD_VAR 0 19
56436: PUSH
56437: LD_VAR 0 20
56441: PUSH
56442: LD_VAR 0 21
56446: PUSH
56447: LD_VAR 0 22
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: PUSH
56460: LD_VAR 0 4
56464: PUSH
56465: LD_INT 1
56467: PLUS
56468: ARRAY
56469: ST_TO_ADDR
56470: GO 56537
56472: LD_INT 3
56474: DOUBLE
56475: EQUAL
56476: IFTRUE 56480
56478: GO 56536
56480: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56481: LD_ADDR_VAR 0 9
56485: PUSH
56486: LD_VAR 0 23
56490: PUSH
56491: LD_VAR 0 24
56495: PUSH
56496: LD_VAR 0 25
56500: PUSH
56501: LD_VAR 0 26
56505: PUSH
56506: LD_VAR 0 27
56510: PUSH
56511: LD_VAR 0 28
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: PUSH
56524: LD_VAR 0 4
56528: PUSH
56529: LD_INT 1
56531: PLUS
56532: ARRAY
56533: ST_TO_ADDR
56534: GO 56537
56536: POP
56537: GO 57092
56539: LD_INT 2
56541: DOUBLE
56542: EQUAL
56543: IFTRUE 56553
56545: LD_INT 3
56547: DOUBLE
56548: EQUAL
56549: IFTRUE 56553
56551: GO 56609
56553: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56554: LD_ADDR_VAR 0 9
56558: PUSH
56559: LD_VAR 0 29
56563: PUSH
56564: LD_VAR 0 30
56568: PUSH
56569: LD_VAR 0 31
56573: PUSH
56574: LD_VAR 0 32
56578: PUSH
56579: LD_VAR 0 33
56583: PUSH
56584: LD_VAR 0 34
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: PUSH
56597: LD_VAR 0 4
56601: PUSH
56602: LD_INT 1
56604: PLUS
56605: ARRAY
56606: ST_TO_ADDR
56607: GO 57092
56609: LD_INT 16
56611: DOUBLE
56612: EQUAL
56613: IFTRUE 56671
56615: LD_INT 17
56617: DOUBLE
56618: EQUAL
56619: IFTRUE 56671
56621: LD_INT 18
56623: DOUBLE
56624: EQUAL
56625: IFTRUE 56671
56627: LD_INT 19
56629: DOUBLE
56630: EQUAL
56631: IFTRUE 56671
56633: LD_INT 22
56635: DOUBLE
56636: EQUAL
56637: IFTRUE 56671
56639: LD_INT 20
56641: DOUBLE
56642: EQUAL
56643: IFTRUE 56671
56645: LD_INT 21
56647: DOUBLE
56648: EQUAL
56649: IFTRUE 56671
56651: LD_INT 23
56653: DOUBLE
56654: EQUAL
56655: IFTRUE 56671
56657: LD_INT 24
56659: DOUBLE
56660: EQUAL
56661: IFTRUE 56671
56663: LD_INT 25
56665: DOUBLE
56666: EQUAL
56667: IFTRUE 56671
56669: GO 56727
56671: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56672: LD_ADDR_VAR 0 9
56676: PUSH
56677: LD_VAR 0 35
56681: PUSH
56682: LD_VAR 0 36
56686: PUSH
56687: LD_VAR 0 37
56691: PUSH
56692: LD_VAR 0 38
56696: PUSH
56697: LD_VAR 0 39
56701: PUSH
56702: LD_VAR 0 40
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: PUSH
56715: LD_VAR 0 4
56719: PUSH
56720: LD_INT 1
56722: PLUS
56723: ARRAY
56724: ST_TO_ADDR
56725: GO 57092
56727: LD_INT 6
56729: DOUBLE
56730: EQUAL
56731: IFTRUE 56783
56733: LD_INT 7
56735: DOUBLE
56736: EQUAL
56737: IFTRUE 56783
56739: LD_INT 8
56741: DOUBLE
56742: EQUAL
56743: IFTRUE 56783
56745: LD_INT 13
56747: DOUBLE
56748: EQUAL
56749: IFTRUE 56783
56751: LD_INT 12
56753: DOUBLE
56754: EQUAL
56755: IFTRUE 56783
56757: LD_INT 15
56759: DOUBLE
56760: EQUAL
56761: IFTRUE 56783
56763: LD_INT 11
56765: DOUBLE
56766: EQUAL
56767: IFTRUE 56783
56769: LD_INT 14
56771: DOUBLE
56772: EQUAL
56773: IFTRUE 56783
56775: LD_INT 10
56777: DOUBLE
56778: EQUAL
56779: IFTRUE 56783
56781: GO 56839
56783: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56784: LD_ADDR_VAR 0 9
56788: PUSH
56789: LD_VAR 0 41
56793: PUSH
56794: LD_VAR 0 42
56798: PUSH
56799: LD_VAR 0 43
56803: PUSH
56804: LD_VAR 0 44
56808: PUSH
56809: LD_VAR 0 45
56813: PUSH
56814: LD_VAR 0 46
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: PUSH
56827: LD_VAR 0 4
56831: PUSH
56832: LD_INT 1
56834: PLUS
56835: ARRAY
56836: ST_TO_ADDR
56837: GO 57092
56839: LD_INT 36
56841: DOUBLE
56842: EQUAL
56843: IFTRUE 56847
56845: GO 56903
56847: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56848: LD_ADDR_VAR 0 9
56852: PUSH
56853: LD_VAR 0 47
56857: PUSH
56858: LD_VAR 0 48
56862: PUSH
56863: LD_VAR 0 49
56867: PUSH
56868: LD_VAR 0 50
56872: PUSH
56873: LD_VAR 0 51
56877: PUSH
56878: LD_VAR 0 52
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: PUSH
56891: LD_VAR 0 4
56895: PUSH
56896: LD_INT 1
56898: PLUS
56899: ARRAY
56900: ST_TO_ADDR
56901: GO 57092
56903: LD_INT 4
56905: DOUBLE
56906: EQUAL
56907: IFTRUE 56929
56909: LD_INT 5
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56929
56915: LD_INT 34
56917: DOUBLE
56918: EQUAL
56919: IFTRUE 56929
56921: LD_INT 37
56923: DOUBLE
56924: EQUAL
56925: IFTRUE 56929
56927: GO 56985
56929: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56930: LD_ADDR_VAR 0 9
56934: PUSH
56935: LD_VAR 0 53
56939: PUSH
56940: LD_VAR 0 54
56944: PUSH
56945: LD_VAR 0 55
56949: PUSH
56950: LD_VAR 0 56
56954: PUSH
56955: LD_VAR 0 57
56959: PUSH
56960: LD_VAR 0 58
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: PUSH
56973: LD_VAR 0 4
56977: PUSH
56978: LD_INT 1
56980: PLUS
56981: ARRAY
56982: ST_TO_ADDR
56983: GO 57092
56985: LD_INT 31
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 57035
56991: LD_INT 32
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 57035
56997: LD_INT 33
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57035
57003: LD_INT 27
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57035
57009: LD_INT 26
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57035
57015: LD_INT 28
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57035
57021: LD_INT 29
57023: DOUBLE
57024: EQUAL
57025: IFTRUE 57035
57027: LD_INT 30
57029: DOUBLE
57030: EQUAL
57031: IFTRUE 57035
57033: GO 57091
57035: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57036: LD_ADDR_VAR 0 9
57040: PUSH
57041: LD_VAR 0 59
57045: PUSH
57046: LD_VAR 0 60
57050: PUSH
57051: LD_VAR 0 61
57055: PUSH
57056: LD_VAR 0 62
57060: PUSH
57061: LD_VAR 0 63
57065: PUSH
57066: LD_VAR 0 64
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: PUSH
57079: LD_VAR 0 4
57083: PUSH
57084: LD_INT 1
57086: PLUS
57087: ARRAY
57088: ST_TO_ADDR
57089: GO 57092
57091: POP
// temp_list2 = [ ] ;
57092: LD_ADDR_VAR 0 10
57096: PUSH
57097: EMPTY
57098: ST_TO_ADDR
// for i in temp_list do
57099: LD_ADDR_VAR 0 8
57103: PUSH
57104: LD_VAR 0 9
57108: PUSH
57109: FOR_IN
57110: IFFALSE 57162
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57112: LD_ADDR_VAR 0 10
57116: PUSH
57117: LD_VAR 0 10
57121: PUSH
57122: LD_VAR 0 8
57126: PUSH
57127: LD_INT 1
57129: ARRAY
57130: PUSH
57131: LD_VAR 0 2
57135: PLUS
57136: PUSH
57137: LD_VAR 0 8
57141: PUSH
57142: LD_INT 2
57144: ARRAY
57145: PUSH
57146: LD_VAR 0 3
57150: PLUS
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: ADD
57159: ST_TO_ADDR
57160: GO 57109
57162: POP
57163: POP
// result = temp_list2 ;
57164: LD_ADDR_VAR 0 7
57168: PUSH
57169: LD_VAR 0 10
57173: ST_TO_ADDR
// end ;
57174: LD_VAR 0 7
57178: RET
// export function EnemyInRange ( unit , dist ) ; begin
57179: LD_INT 0
57181: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57182: LD_ADDR_VAR 0 3
57186: PUSH
57187: LD_VAR 0 1
57191: PPUSH
57192: CALL_OW 255
57196: PPUSH
57197: LD_VAR 0 1
57201: PPUSH
57202: CALL_OW 250
57206: PPUSH
57207: LD_VAR 0 1
57211: PPUSH
57212: CALL_OW 251
57216: PPUSH
57217: LD_VAR 0 2
57221: PPUSH
57222: CALL 30581 0 4
57226: PUSH
57227: LD_INT 4
57229: ARRAY
57230: ST_TO_ADDR
// end ;
57231: LD_VAR 0 3
57235: RET
// export function PlayerSeeMe ( unit ) ; begin
57236: LD_INT 0
57238: PPUSH
// result := See ( your_side , unit ) ;
57239: LD_ADDR_VAR 0 2
57243: PUSH
57244: LD_OWVAR 2
57248: PPUSH
57249: LD_VAR 0 1
57253: PPUSH
57254: CALL_OW 292
57258: ST_TO_ADDR
// end ;
57259: LD_VAR 0 2
57263: RET
// export function ReverseDir ( unit ) ; begin
57264: LD_INT 0
57266: PPUSH
// if not unit then
57267: LD_VAR 0 1
57271: NOT
57272: IFFALSE 57276
// exit ;
57274: GO 57299
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57276: LD_ADDR_VAR 0 2
57280: PUSH
57281: LD_VAR 0 1
57285: PPUSH
57286: CALL_OW 254
57290: PUSH
57291: LD_INT 3
57293: PLUS
57294: PUSH
57295: LD_INT 6
57297: MOD
57298: ST_TO_ADDR
// end ;
57299: LD_VAR 0 2
57303: RET
// export function ReverseArray ( array ) ; var i ; begin
57304: LD_INT 0
57306: PPUSH
57307: PPUSH
// if not array then
57308: LD_VAR 0 1
57312: NOT
57313: IFFALSE 57317
// exit ;
57315: GO 57372
// result := [ ] ;
57317: LD_ADDR_VAR 0 2
57321: PUSH
57322: EMPTY
57323: ST_TO_ADDR
// for i := array downto 1 do
57324: LD_ADDR_VAR 0 3
57328: PUSH
57329: DOUBLE
57330: LD_VAR 0 1
57334: INC
57335: ST_TO_ADDR
57336: LD_INT 1
57338: PUSH
57339: FOR_DOWNTO
57340: IFFALSE 57370
// result := Join ( result , array [ i ] ) ;
57342: LD_ADDR_VAR 0 2
57346: PUSH
57347: LD_VAR 0 2
57351: PPUSH
57352: LD_VAR 0 1
57356: PUSH
57357: LD_VAR 0 3
57361: ARRAY
57362: PPUSH
57363: CALL 62016 0 2
57367: ST_TO_ADDR
57368: GO 57339
57370: POP
57371: POP
// end ;
57372: LD_VAR 0 2
57376: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57377: LD_INT 0
57379: PPUSH
57380: PPUSH
57381: PPUSH
57382: PPUSH
57383: PPUSH
57384: PPUSH
// if not unit or not hexes then
57385: LD_VAR 0 1
57389: NOT
57390: PUSH
57391: LD_VAR 0 2
57395: NOT
57396: OR
57397: IFFALSE 57401
// exit ;
57399: GO 57524
// dist := 9999 ;
57401: LD_ADDR_VAR 0 5
57405: PUSH
57406: LD_INT 9999
57408: ST_TO_ADDR
// for i = 1 to hexes do
57409: LD_ADDR_VAR 0 4
57413: PUSH
57414: DOUBLE
57415: LD_INT 1
57417: DEC
57418: ST_TO_ADDR
57419: LD_VAR 0 2
57423: PUSH
57424: FOR_TO
57425: IFFALSE 57512
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57427: LD_ADDR_VAR 0 6
57431: PUSH
57432: LD_VAR 0 1
57436: PPUSH
57437: LD_VAR 0 2
57441: PUSH
57442: LD_VAR 0 4
57446: ARRAY
57447: PUSH
57448: LD_INT 1
57450: ARRAY
57451: PPUSH
57452: LD_VAR 0 2
57456: PUSH
57457: LD_VAR 0 4
57461: ARRAY
57462: PUSH
57463: LD_INT 2
57465: ARRAY
57466: PPUSH
57467: CALL_OW 297
57471: ST_TO_ADDR
// if tdist < dist then
57472: LD_VAR 0 6
57476: PUSH
57477: LD_VAR 0 5
57481: LESS
57482: IFFALSE 57510
// begin hex := hexes [ i ] ;
57484: LD_ADDR_VAR 0 8
57488: PUSH
57489: LD_VAR 0 2
57493: PUSH
57494: LD_VAR 0 4
57498: ARRAY
57499: ST_TO_ADDR
// dist := tdist ;
57500: LD_ADDR_VAR 0 5
57504: PUSH
57505: LD_VAR 0 6
57509: ST_TO_ADDR
// end ; end ;
57510: GO 57424
57512: POP
57513: POP
// result := hex ;
57514: LD_ADDR_VAR 0 3
57518: PUSH
57519: LD_VAR 0 8
57523: ST_TO_ADDR
// end ;
57524: LD_VAR 0 3
57528: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57529: LD_INT 0
57531: PPUSH
57532: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57533: LD_VAR 0 1
57537: NOT
57538: PUSH
57539: LD_VAR 0 1
57543: PUSH
57544: LD_INT 21
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 23
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PPUSH
57568: CALL_OW 69
57572: IN
57573: NOT
57574: OR
57575: IFFALSE 57579
// exit ;
57577: GO 57626
// for i = 1 to 3 do
57579: LD_ADDR_VAR 0 3
57583: PUSH
57584: DOUBLE
57585: LD_INT 1
57587: DEC
57588: ST_TO_ADDR
57589: LD_INT 3
57591: PUSH
57592: FOR_TO
57593: IFFALSE 57624
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57595: LD_VAR 0 1
57599: PPUSH
57600: CALL_OW 250
57604: PPUSH
57605: LD_VAR 0 1
57609: PPUSH
57610: CALL_OW 251
57614: PPUSH
57615: LD_INT 1
57617: PPUSH
57618: CALL_OW 453
57622: GO 57592
57624: POP
57625: POP
// end ;
57626: LD_VAR 0 2
57630: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57631: LD_INT 0
57633: PPUSH
57634: PPUSH
57635: PPUSH
57636: PPUSH
57637: PPUSH
57638: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57639: LD_VAR 0 1
57643: NOT
57644: PUSH
57645: LD_VAR 0 2
57649: NOT
57650: OR
57651: PUSH
57652: LD_VAR 0 1
57656: PPUSH
57657: CALL_OW 314
57661: OR
57662: IFFALSE 57666
// exit ;
57664: GO 58133
// if GetLives ( i ) < 250 then
57666: LD_VAR 0 4
57670: PPUSH
57671: CALL_OW 256
57675: PUSH
57676: LD_INT 250
57678: LESS
57679: IFFALSE 57692
// begin ComAutodestruct ( i ) ;
57681: LD_VAR 0 4
57685: PPUSH
57686: CALL 57529 0 1
// exit ;
57690: GO 58133
// end ; x := GetX ( enemy_unit ) ;
57692: LD_ADDR_VAR 0 7
57696: PUSH
57697: LD_VAR 0 2
57701: PPUSH
57702: CALL_OW 250
57706: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57707: LD_ADDR_VAR 0 8
57711: PUSH
57712: LD_VAR 0 2
57716: PPUSH
57717: CALL_OW 251
57721: ST_TO_ADDR
// if not x or not y then
57722: LD_VAR 0 7
57726: NOT
57727: PUSH
57728: LD_VAR 0 8
57732: NOT
57733: OR
57734: IFFALSE 57738
// exit ;
57736: GO 58133
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57738: LD_ADDR_VAR 0 6
57742: PUSH
57743: LD_VAR 0 7
57747: PPUSH
57748: LD_INT 0
57750: PPUSH
57751: LD_INT 4
57753: PPUSH
57754: CALL_OW 272
57758: PUSH
57759: LD_VAR 0 8
57763: PPUSH
57764: LD_INT 0
57766: PPUSH
57767: LD_INT 4
57769: PPUSH
57770: CALL_OW 273
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_VAR 0 7
57783: PPUSH
57784: LD_INT 1
57786: PPUSH
57787: LD_INT 4
57789: PPUSH
57790: CALL_OW 272
57794: PUSH
57795: LD_VAR 0 8
57799: PPUSH
57800: LD_INT 1
57802: PPUSH
57803: LD_INT 4
57805: PPUSH
57806: CALL_OW 273
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_VAR 0 7
57819: PPUSH
57820: LD_INT 2
57822: PPUSH
57823: LD_INT 4
57825: PPUSH
57826: CALL_OW 272
57830: PUSH
57831: LD_VAR 0 8
57835: PPUSH
57836: LD_INT 2
57838: PPUSH
57839: LD_INT 4
57841: PPUSH
57842: CALL_OW 273
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_VAR 0 7
57855: PPUSH
57856: LD_INT 3
57858: PPUSH
57859: LD_INT 4
57861: PPUSH
57862: CALL_OW 272
57866: PUSH
57867: LD_VAR 0 8
57871: PPUSH
57872: LD_INT 3
57874: PPUSH
57875: LD_INT 4
57877: PPUSH
57878: CALL_OW 273
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_VAR 0 7
57891: PPUSH
57892: LD_INT 4
57894: PPUSH
57895: LD_INT 4
57897: PPUSH
57898: CALL_OW 272
57902: PUSH
57903: LD_VAR 0 8
57907: PPUSH
57908: LD_INT 4
57910: PPUSH
57911: LD_INT 4
57913: PPUSH
57914: CALL_OW 273
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_VAR 0 7
57927: PPUSH
57928: LD_INT 5
57930: PPUSH
57931: LD_INT 4
57933: PPUSH
57934: CALL_OW 272
57938: PUSH
57939: LD_VAR 0 8
57943: PPUSH
57944: LD_INT 5
57946: PPUSH
57947: LD_INT 4
57949: PPUSH
57950: CALL_OW 273
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// for i = tmp downto 1 do
57967: LD_ADDR_VAR 0 4
57971: PUSH
57972: DOUBLE
57973: LD_VAR 0 6
57977: INC
57978: ST_TO_ADDR
57979: LD_INT 1
57981: PUSH
57982: FOR_DOWNTO
57983: IFFALSE 58084
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57985: LD_VAR 0 6
57989: PUSH
57990: LD_VAR 0 4
57994: ARRAY
57995: PUSH
57996: LD_INT 1
57998: ARRAY
57999: PPUSH
58000: LD_VAR 0 6
58004: PUSH
58005: LD_VAR 0 4
58009: ARRAY
58010: PUSH
58011: LD_INT 2
58013: ARRAY
58014: PPUSH
58015: CALL_OW 488
58019: NOT
58020: PUSH
58021: LD_VAR 0 6
58025: PUSH
58026: LD_VAR 0 4
58030: ARRAY
58031: PUSH
58032: LD_INT 1
58034: ARRAY
58035: PPUSH
58036: LD_VAR 0 6
58040: PUSH
58041: LD_VAR 0 4
58045: ARRAY
58046: PUSH
58047: LD_INT 2
58049: ARRAY
58050: PPUSH
58051: CALL_OW 428
58055: PUSH
58056: LD_INT 0
58058: NONEQUAL
58059: OR
58060: IFFALSE 58082
// tmp := Delete ( tmp , i ) ;
58062: LD_ADDR_VAR 0 6
58066: PUSH
58067: LD_VAR 0 6
58071: PPUSH
58072: LD_VAR 0 4
58076: PPUSH
58077: CALL_OW 3
58081: ST_TO_ADDR
58082: GO 57982
58084: POP
58085: POP
// j := GetClosestHex ( unit , tmp ) ;
58086: LD_ADDR_VAR 0 5
58090: PUSH
58091: LD_VAR 0 1
58095: PPUSH
58096: LD_VAR 0 6
58100: PPUSH
58101: CALL 57377 0 2
58105: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58106: LD_VAR 0 1
58110: PPUSH
58111: LD_VAR 0 5
58115: PUSH
58116: LD_INT 1
58118: ARRAY
58119: PPUSH
58120: LD_VAR 0 5
58124: PUSH
58125: LD_INT 2
58127: ARRAY
58128: PPUSH
58129: CALL_OW 111
// end ;
58133: LD_VAR 0 3
58137: RET
// export function PrepareApemanSoldier ( ) ; begin
58138: LD_INT 0
58140: PPUSH
// uc_nation := 0 ;
58141: LD_ADDR_OWVAR 21
58145: PUSH
58146: LD_INT 0
58148: ST_TO_ADDR
// hc_sex := sex_male ;
58149: LD_ADDR_OWVAR 27
58153: PUSH
58154: LD_INT 1
58156: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58157: LD_ADDR_OWVAR 28
58161: PUSH
58162: LD_INT 15
58164: ST_TO_ADDR
// hc_gallery :=  ;
58165: LD_ADDR_OWVAR 33
58169: PUSH
58170: LD_STRING 
58172: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58173: LD_ADDR_OWVAR 31
58177: PUSH
58178: LD_INT 0
58180: PPUSH
58181: LD_INT 3
58183: PPUSH
58184: CALL_OW 12
58188: PUSH
58189: LD_INT 0
58191: PPUSH
58192: LD_INT 3
58194: PPUSH
58195: CALL_OW 12
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
// end ;
58212: LD_VAR 0 1
58216: RET
// export function PrepareApemanEngineer ( ) ; begin
58217: LD_INT 0
58219: PPUSH
// uc_nation := 0 ;
58220: LD_ADDR_OWVAR 21
58224: PUSH
58225: LD_INT 0
58227: ST_TO_ADDR
// hc_sex := sex_male ;
58228: LD_ADDR_OWVAR 27
58232: PUSH
58233: LD_INT 1
58235: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58236: LD_ADDR_OWVAR 28
58240: PUSH
58241: LD_INT 16
58243: ST_TO_ADDR
// hc_gallery :=  ;
58244: LD_ADDR_OWVAR 33
58248: PUSH
58249: LD_STRING 
58251: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58252: LD_ADDR_OWVAR 31
58256: PUSH
58257: LD_INT 0
58259: PPUSH
58260: LD_INT 3
58262: PPUSH
58263: CALL_OW 12
58267: PUSH
58268: LD_INT 0
58270: PPUSH
58271: LD_INT 3
58273: PPUSH
58274: CALL_OW 12
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// end ;
58291: LD_VAR 0 1
58295: RET
// export function PrepareApeman ( agressivity ) ; begin
58296: LD_INT 0
58298: PPUSH
// uc_side := 0 ;
58299: LD_ADDR_OWVAR 20
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// uc_nation := 0 ;
58307: LD_ADDR_OWVAR 21
58311: PUSH
58312: LD_INT 0
58314: ST_TO_ADDR
// hc_sex := sex_male ;
58315: LD_ADDR_OWVAR 27
58319: PUSH
58320: LD_INT 1
58322: ST_TO_ADDR
// hc_class := class_apeman ;
58323: LD_ADDR_OWVAR 28
58327: PUSH
58328: LD_INT 12
58330: ST_TO_ADDR
// hc_gallery :=  ;
58331: LD_ADDR_OWVAR 33
58335: PUSH
58336: LD_STRING 
58338: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58339: LD_ADDR_OWVAR 35
58343: PUSH
58344: LD_VAR 0 1
58348: NEG
58349: PPUSH
58350: LD_VAR 0 1
58354: PPUSH
58355: CALL_OW 12
58359: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58360: LD_ADDR_OWVAR 31
58364: PUSH
58365: LD_INT 0
58367: PPUSH
58368: LD_INT 3
58370: PPUSH
58371: CALL_OW 12
58375: PUSH
58376: LD_INT 0
58378: PPUSH
58379: LD_INT 3
58381: PPUSH
58382: CALL_OW 12
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: ST_TO_ADDR
// end ;
58399: LD_VAR 0 2
58403: RET
// export function PrepareTiger ( agressivity ) ; begin
58404: LD_INT 0
58406: PPUSH
// uc_side := 0 ;
58407: LD_ADDR_OWVAR 20
58411: PUSH
58412: LD_INT 0
58414: ST_TO_ADDR
// uc_nation := 0 ;
58415: LD_ADDR_OWVAR 21
58419: PUSH
58420: LD_INT 0
58422: ST_TO_ADDR
// hc_class := class_tiger ;
58423: LD_ADDR_OWVAR 28
58427: PUSH
58428: LD_INT 14
58430: ST_TO_ADDR
// hc_gallery :=  ;
58431: LD_ADDR_OWVAR 33
58435: PUSH
58436: LD_STRING 
58438: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58439: LD_ADDR_OWVAR 35
58443: PUSH
58444: LD_VAR 0 1
58448: NEG
58449: PPUSH
58450: LD_VAR 0 1
58454: PPUSH
58455: CALL_OW 12
58459: ST_TO_ADDR
// end ;
58460: LD_VAR 0 2
58464: RET
// export function PrepareEnchidna ( ) ; begin
58465: LD_INT 0
58467: PPUSH
// uc_side := 0 ;
58468: LD_ADDR_OWVAR 20
58472: PUSH
58473: LD_INT 0
58475: ST_TO_ADDR
// uc_nation := 0 ;
58476: LD_ADDR_OWVAR 21
58480: PUSH
58481: LD_INT 0
58483: ST_TO_ADDR
// hc_class := class_baggie ;
58484: LD_ADDR_OWVAR 28
58488: PUSH
58489: LD_INT 13
58491: ST_TO_ADDR
// hc_gallery :=  ;
58492: LD_ADDR_OWVAR 33
58496: PUSH
58497: LD_STRING 
58499: ST_TO_ADDR
// end ;
58500: LD_VAR 0 1
58504: RET
// export function PrepareFrog ( ) ; begin
58505: LD_INT 0
58507: PPUSH
// uc_side := 0 ;
58508: LD_ADDR_OWVAR 20
58512: PUSH
58513: LD_INT 0
58515: ST_TO_ADDR
// uc_nation := 0 ;
58516: LD_ADDR_OWVAR 21
58520: PUSH
58521: LD_INT 0
58523: ST_TO_ADDR
// hc_class := class_frog ;
58524: LD_ADDR_OWVAR 28
58528: PUSH
58529: LD_INT 19
58531: ST_TO_ADDR
// hc_gallery :=  ;
58532: LD_ADDR_OWVAR 33
58536: PUSH
58537: LD_STRING 
58539: ST_TO_ADDR
// end ;
58540: LD_VAR 0 1
58544: RET
// export function PrepareFish ( ) ; begin
58545: LD_INT 0
58547: PPUSH
// uc_side := 0 ;
58548: LD_ADDR_OWVAR 20
58552: PUSH
58553: LD_INT 0
58555: ST_TO_ADDR
// uc_nation := 0 ;
58556: LD_ADDR_OWVAR 21
58560: PUSH
58561: LD_INT 0
58563: ST_TO_ADDR
// hc_class := class_fish ;
58564: LD_ADDR_OWVAR 28
58568: PUSH
58569: LD_INT 20
58571: ST_TO_ADDR
// hc_gallery :=  ;
58572: LD_ADDR_OWVAR 33
58576: PUSH
58577: LD_STRING 
58579: ST_TO_ADDR
// end ;
58580: LD_VAR 0 1
58584: RET
// export function PrepareBird ( ) ; begin
58585: LD_INT 0
58587: PPUSH
// uc_side := 0 ;
58588: LD_ADDR_OWVAR 20
58592: PUSH
58593: LD_INT 0
58595: ST_TO_ADDR
// uc_nation := 0 ;
58596: LD_ADDR_OWVAR 21
58600: PUSH
58601: LD_INT 0
58603: ST_TO_ADDR
// hc_class := class_phororhacos ;
58604: LD_ADDR_OWVAR 28
58608: PUSH
58609: LD_INT 18
58611: ST_TO_ADDR
// hc_gallery :=  ;
58612: LD_ADDR_OWVAR 33
58616: PUSH
58617: LD_STRING 
58619: ST_TO_ADDR
// end ;
58620: LD_VAR 0 1
58624: RET
// export function PrepareHorse ( ) ; begin
58625: LD_INT 0
58627: PPUSH
// uc_side := 0 ;
58628: LD_ADDR_OWVAR 20
58632: PUSH
58633: LD_INT 0
58635: ST_TO_ADDR
// uc_nation := 0 ;
58636: LD_ADDR_OWVAR 21
58640: PUSH
58641: LD_INT 0
58643: ST_TO_ADDR
// hc_class := class_horse ;
58644: LD_ADDR_OWVAR 28
58648: PUSH
58649: LD_INT 21
58651: ST_TO_ADDR
// hc_gallery :=  ;
58652: LD_ADDR_OWVAR 33
58656: PUSH
58657: LD_STRING 
58659: ST_TO_ADDR
// end ;
58660: LD_VAR 0 1
58664: RET
// export function PrepareMastodont ( ) ; begin
58665: LD_INT 0
58667: PPUSH
// uc_side := 0 ;
58668: LD_ADDR_OWVAR 20
58672: PUSH
58673: LD_INT 0
58675: ST_TO_ADDR
// uc_nation := 0 ;
58676: LD_ADDR_OWVAR 21
58680: PUSH
58681: LD_INT 0
58683: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58684: LD_ADDR_OWVAR 37
58688: PUSH
58689: LD_INT 31
58691: ST_TO_ADDR
// vc_control := control_rider ;
58692: LD_ADDR_OWVAR 38
58696: PUSH
58697: LD_INT 4
58699: ST_TO_ADDR
// end ;
58700: LD_VAR 0 1
58704: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58705: LD_INT 0
58707: PPUSH
58708: PPUSH
58709: PPUSH
// uc_side = 0 ;
58710: LD_ADDR_OWVAR 20
58714: PUSH
58715: LD_INT 0
58717: ST_TO_ADDR
// uc_nation = 0 ;
58718: LD_ADDR_OWVAR 21
58722: PUSH
58723: LD_INT 0
58725: ST_TO_ADDR
// InitHc_All ( ) ;
58726: CALL_OW 584
// InitVc ;
58730: CALL_OW 20
// if mastodonts then
58734: LD_VAR 0 6
58738: IFFALSE 58805
// for i = 1 to mastodonts do
58740: LD_ADDR_VAR 0 11
58744: PUSH
58745: DOUBLE
58746: LD_INT 1
58748: DEC
58749: ST_TO_ADDR
58750: LD_VAR 0 6
58754: PUSH
58755: FOR_TO
58756: IFFALSE 58803
// begin vc_chassis := 31 ;
58758: LD_ADDR_OWVAR 37
58762: PUSH
58763: LD_INT 31
58765: ST_TO_ADDR
// vc_control := control_rider ;
58766: LD_ADDR_OWVAR 38
58770: PUSH
58771: LD_INT 4
58773: ST_TO_ADDR
// animal := CreateVehicle ;
58774: LD_ADDR_VAR 0 12
58778: PUSH
58779: CALL_OW 45
58783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58784: LD_VAR 0 12
58788: PPUSH
58789: LD_VAR 0 8
58793: PPUSH
58794: LD_INT 0
58796: PPUSH
58797: CALL 60933 0 3
// end ;
58801: GO 58755
58803: POP
58804: POP
// if horses then
58805: LD_VAR 0 5
58809: IFFALSE 58876
// for i = 1 to horses do
58811: LD_ADDR_VAR 0 11
58815: PUSH
58816: DOUBLE
58817: LD_INT 1
58819: DEC
58820: ST_TO_ADDR
58821: LD_VAR 0 5
58825: PUSH
58826: FOR_TO
58827: IFFALSE 58874
// begin hc_class := 21 ;
58829: LD_ADDR_OWVAR 28
58833: PUSH
58834: LD_INT 21
58836: ST_TO_ADDR
// hc_gallery :=  ;
58837: LD_ADDR_OWVAR 33
58841: PUSH
58842: LD_STRING 
58844: ST_TO_ADDR
// animal := CreateHuman ;
58845: LD_ADDR_VAR 0 12
58849: PUSH
58850: CALL_OW 44
58854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58855: LD_VAR 0 12
58859: PPUSH
58860: LD_VAR 0 8
58864: PPUSH
58865: LD_INT 0
58867: PPUSH
58868: CALL 60933 0 3
// end ;
58872: GO 58826
58874: POP
58875: POP
// if birds then
58876: LD_VAR 0 1
58880: IFFALSE 58947
// for i = 1 to birds do
58882: LD_ADDR_VAR 0 11
58886: PUSH
58887: DOUBLE
58888: LD_INT 1
58890: DEC
58891: ST_TO_ADDR
58892: LD_VAR 0 1
58896: PUSH
58897: FOR_TO
58898: IFFALSE 58945
// begin hc_class = 18 ;
58900: LD_ADDR_OWVAR 28
58904: PUSH
58905: LD_INT 18
58907: ST_TO_ADDR
// hc_gallery =  ;
58908: LD_ADDR_OWVAR 33
58912: PUSH
58913: LD_STRING 
58915: ST_TO_ADDR
// animal := CreateHuman ;
58916: LD_ADDR_VAR 0 12
58920: PUSH
58921: CALL_OW 44
58925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58926: LD_VAR 0 12
58930: PPUSH
58931: LD_VAR 0 8
58935: PPUSH
58936: LD_INT 0
58938: PPUSH
58939: CALL 60933 0 3
// end ;
58943: GO 58897
58945: POP
58946: POP
// if tigers then
58947: LD_VAR 0 2
58951: IFFALSE 59035
// for i = 1 to tigers do
58953: LD_ADDR_VAR 0 11
58957: PUSH
58958: DOUBLE
58959: LD_INT 1
58961: DEC
58962: ST_TO_ADDR
58963: LD_VAR 0 2
58967: PUSH
58968: FOR_TO
58969: IFFALSE 59033
// begin hc_class = class_tiger ;
58971: LD_ADDR_OWVAR 28
58975: PUSH
58976: LD_INT 14
58978: ST_TO_ADDR
// hc_gallery =  ;
58979: LD_ADDR_OWVAR 33
58983: PUSH
58984: LD_STRING 
58986: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58987: LD_ADDR_OWVAR 35
58991: PUSH
58992: LD_INT 7
58994: NEG
58995: PPUSH
58996: LD_INT 7
58998: PPUSH
58999: CALL_OW 12
59003: ST_TO_ADDR
// animal := CreateHuman ;
59004: LD_ADDR_VAR 0 12
59008: PUSH
59009: CALL_OW 44
59013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59014: LD_VAR 0 12
59018: PPUSH
59019: LD_VAR 0 8
59023: PPUSH
59024: LD_INT 0
59026: PPUSH
59027: CALL 60933 0 3
// end ;
59031: GO 58968
59033: POP
59034: POP
// if apemans then
59035: LD_VAR 0 3
59039: IFFALSE 59162
// for i = 1 to apemans do
59041: LD_ADDR_VAR 0 11
59045: PUSH
59046: DOUBLE
59047: LD_INT 1
59049: DEC
59050: ST_TO_ADDR
59051: LD_VAR 0 3
59055: PUSH
59056: FOR_TO
59057: IFFALSE 59160
// begin hc_class = class_apeman ;
59059: LD_ADDR_OWVAR 28
59063: PUSH
59064: LD_INT 12
59066: ST_TO_ADDR
// hc_gallery =  ;
59067: LD_ADDR_OWVAR 33
59071: PUSH
59072: LD_STRING 
59074: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59075: LD_ADDR_OWVAR 35
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PPUSH
59084: LD_INT 2
59086: PPUSH
59087: CALL_OW 12
59091: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59092: LD_ADDR_OWVAR 31
59096: PUSH
59097: LD_INT 1
59099: PPUSH
59100: LD_INT 3
59102: PPUSH
59103: CALL_OW 12
59107: PUSH
59108: LD_INT 1
59110: PPUSH
59111: LD_INT 3
59113: PPUSH
59114: CALL_OW 12
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// animal := CreateHuman ;
59131: LD_ADDR_VAR 0 12
59135: PUSH
59136: CALL_OW 44
59140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59141: LD_VAR 0 12
59145: PPUSH
59146: LD_VAR 0 8
59150: PPUSH
59151: LD_INT 0
59153: PPUSH
59154: CALL 60933 0 3
// end ;
59158: GO 59056
59160: POP
59161: POP
// if enchidnas then
59162: LD_VAR 0 4
59166: IFFALSE 59233
// for i = 1 to enchidnas do
59168: LD_ADDR_VAR 0 11
59172: PUSH
59173: DOUBLE
59174: LD_INT 1
59176: DEC
59177: ST_TO_ADDR
59178: LD_VAR 0 4
59182: PUSH
59183: FOR_TO
59184: IFFALSE 59231
// begin hc_class = 13 ;
59186: LD_ADDR_OWVAR 28
59190: PUSH
59191: LD_INT 13
59193: ST_TO_ADDR
// hc_gallery =  ;
59194: LD_ADDR_OWVAR 33
59198: PUSH
59199: LD_STRING 
59201: ST_TO_ADDR
// animal := CreateHuman ;
59202: LD_ADDR_VAR 0 12
59206: PUSH
59207: CALL_OW 44
59211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59212: LD_VAR 0 12
59216: PPUSH
59217: LD_VAR 0 8
59221: PPUSH
59222: LD_INT 0
59224: PPUSH
59225: CALL 60933 0 3
// end ;
59229: GO 59183
59231: POP
59232: POP
// if fishes then
59233: LD_VAR 0 7
59237: IFFALSE 59304
// for i = 1 to fishes do
59239: LD_ADDR_VAR 0 11
59243: PUSH
59244: DOUBLE
59245: LD_INT 1
59247: DEC
59248: ST_TO_ADDR
59249: LD_VAR 0 7
59253: PUSH
59254: FOR_TO
59255: IFFALSE 59302
// begin hc_class = 20 ;
59257: LD_ADDR_OWVAR 28
59261: PUSH
59262: LD_INT 20
59264: ST_TO_ADDR
// hc_gallery =  ;
59265: LD_ADDR_OWVAR 33
59269: PUSH
59270: LD_STRING 
59272: ST_TO_ADDR
// animal := CreateHuman ;
59273: LD_ADDR_VAR 0 12
59277: PUSH
59278: CALL_OW 44
59282: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59283: LD_VAR 0 12
59287: PPUSH
59288: LD_VAR 0 9
59292: PPUSH
59293: LD_INT 0
59295: PPUSH
59296: CALL 60933 0 3
// end ;
59300: GO 59254
59302: POP
59303: POP
// end ;
59304: LD_VAR 0 10
59308: RET
// export function WantHeal ( sci , unit ) ; begin
59309: LD_INT 0
59311: PPUSH
// if GetTaskList ( sci ) > 0 then
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 437
59321: PUSH
59322: LD_INT 0
59324: GREATER
59325: IFFALSE 59395
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59327: LD_VAR 0 1
59331: PPUSH
59332: CALL_OW 437
59336: PUSH
59337: LD_INT 1
59339: ARRAY
59340: PUSH
59341: LD_INT 1
59343: ARRAY
59344: PUSH
59345: LD_STRING l
59347: EQUAL
59348: PUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 437
59358: PUSH
59359: LD_INT 1
59361: ARRAY
59362: PUSH
59363: LD_INT 4
59365: ARRAY
59366: PUSH
59367: LD_VAR 0 2
59371: EQUAL
59372: AND
59373: IFFALSE 59385
// result := true else
59375: LD_ADDR_VAR 0 3
59379: PUSH
59380: LD_INT 1
59382: ST_TO_ADDR
59383: GO 59393
// result := false ;
59385: LD_ADDR_VAR 0 3
59389: PUSH
59390: LD_INT 0
59392: ST_TO_ADDR
// end else
59393: GO 59403
// result := false ;
59395: LD_ADDR_VAR 0 3
59399: PUSH
59400: LD_INT 0
59402: ST_TO_ADDR
// end ;
59403: LD_VAR 0 3
59407: RET
// export function HealTarget ( sci ) ; begin
59408: LD_INT 0
59410: PPUSH
// if not sci then
59411: LD_VAR 0 1
59415: NOT
59416: IFFALSE 59420
// exit ;
59418: GO 59485
// result := 0 ;
59420: LD_ADDR_VAR 0 2
59424: PUSH
59425: LD_INT 0
59427: ST_TO_ADDR
// if GetTaskList ( sci ) then
59428: LD_VAR 0 1
59432: PPUSH
59433: CALL_OW 437
59437: IFFALSE 59485
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59439: LD_VAR 0 1
59443: PPUSH
59444: CALL_OW 437
59448: PUSH
59449: LD_INT 1
59451: ARRAY
59452: PUSH
59453: LD_INT 1
59455: ARRAY
59456: PUSH
59457: LD_STRING l
59459: EQUAL
59460: IFFALSE 59485
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59462: LD_ADDR_VAR 0 2
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: CALL_OW 437
59476: PUSH
59477: LD_INT 1
59479: ARRAY
59480: PUSH
59481: LD_INT 4
59483: ARRAY
59484: ST_TO_ADDR
// end ;
59485: LD_VAR 0 2
59489: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59490: LD_INT 0
59492: PPUSH
59493: PPUSH
59494: PPUSH
59495: PPUSH
// if not base_units then
59496: LD_VAR 0 1
59500: NOT
59501: IFFALSE 59505
// exit ;
59503: GO 59592
// result := false ;
59505: LD_ADDR_VAR 0 2
59509: PUSH
59510: LD_INT 0
59512: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59513: LD_ADDR_VAR 0 5
59517: PUSH
59518: LD_VAR 0 1
59522: PPUSH
59523: LD_INT 21
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PPUSH
59533: CALL_OW 72
59537: ST_TO_ADDR
// if not tmp then
59538: LD_VAR 0 5
59542: NOT
59543: IFFALSE 59547
// exit ;
59545: GO 59592
// for i in tmp do
59547: LD_ADDR_VAR 0 3
59551: PUSH
59552: LD_VAR 0 5
59556: PUSH
59557: FOR_IN
59558: IFFALSE 59590
// begin result := EnemyInRange ( i , 22 ) ;
59560: LD_ADDR_VAR 0 2
59564: PUSH
59565: LD_VAR 0 3
59569: PPUSH
59570: LD_INT 22
59572: PPUSH
59573: CALL 57179 0 2
59577: ST_TO_ADDR
// if result then
59578: LD_VAR 0 2
59582: IFFALSE 59588
// exit ;
59584: POP
59585: POP
59586: GO 59592
// end ;
59588: GO 59557
59590: POP
59591: POP
// end ;
59592: LD_VAR 0 2
59596: RET
// export function FilterByTag ( units , tag ) ; begin
59597: LD_INT 0
59599: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59600: LD_ADDR_VAR 0 3
59604: PUSH
59605: LD_VAR 0 1
59609: PPUSH
59610: LD_INT 120
59612: PUSH
59613: LD_VAR 0 2
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PPUSH
59622: CALL_OW 72
59626: ST_TO_ADDR
// end ;
59627: LD_VAR 0 3
59631: RET
// export function IsDriver ( un ) ; begin
59632: LD_INT 0
59634: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59635: LD_ADDR_VAR 0 2
59639: PUSH
59640: LD_VAR 0 1
59644: PUSH
59645: LD_INT 55
59647: PUSH
59648: EMPTY
59649: LIST
59650: PPUSH
59651: CALL_OW 69
59655: IN
59656: ST_TO_ADDR
// end ;
59657: LD_VAR 0 2
59661: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59662: LD_INT 0
59664: PPUSH
59665: PPUSH
// list := [ ] ;
59666: LD_ADDR_VAR 0 5
59670: PUSH
59671: EMPTY
59672: ST_TO_ADDR
// case d of 0 :
59673: LD_VAR 0 3
59677: PUSH
59678: LD_INT 0
59680: DOUBLE
59681: EQUAL
59682: IFTRUE 59686
59684: GO 59819
59686: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59687: LD_ADDR_VAR 0 5
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: LD_INT 4
59699: MINUS
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: MINUS
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: PUSH
59718: LD_VAR 0 1
59722: PUSH
59723: LD_INT 3
59725: MINUS
59726: PUSH
59727: LD_VAR 0 2
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: PUSH
59740: LD_VAR 0 1
59744: PUSH
59745: LD_INT 4
59747: PLUS
59748: PUSH
59749: LD_VAR 0 2
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: PUSH
59762: LD_VAR 0 1
59766: PUSH
59767: LD_INT 3
59769: PLUS
59770: PUSH
59771: LD_VAR 0 2
59775: PUSH
59776: LD_INT 3
59778: PLUS
59779: PUSH
59780: LD_INT 5
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: PUSH
59788: LD_VAR 0 1
59792: PUSH
59793: LD_VAR 0 2
59797: PUSH
59798: LD_INT 4
59800: PLUS
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: ST_TO_ADDR
// end ; 1 :
59817: GO 60517
59819: LD_INT 1
59821: DOUBLE
59822: EQUAL
59823: IFTRUE 59827
59825: GO 59960
59827: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59828: LD_ADDR_VAR 0 5
59832: PUSH
59833: LD_VAR 0 1
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_INT 4
59845: MINUS
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_INT 3
59862: MINUS
59863: PUSH
59864: LD_VAR 0 2
59868: PUSH
59869: LD_INT 3
59871: MINUS
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: PUSH
59881: LD_VAR 0 1
59885: PUSH
59886: LD_INT 4
59888: MINUS
59889: PUSH
59890: LD_VAR 0 2
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: PUSH
59903: LD_VAR 0 1
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 3
59915: PLUS
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: PUSH
59925: LD_VAR 0 1
59929: PUSH
59930: LD_INT 4
59932: PLUS
59933: PUSH
59934: LD_VAR 0 2
59938: PUSH
59939: LD_INT 4
59941: PLUS
59942: PUSH
59943: LD_INT 5
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// end ; 2 :
59958: GO 60517
59960: LD_INT 2
59962: DOUBLE
59963: EQUAL
59964: IFTRUE 59968
59966: GO 60097
59968: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59969: LD_ADDR_VAR 0 5
59973: PUSH
59974: LD_VAR 0 1
59978: PUSH
59979: LD_VAR 0 2
59983: PUSH
59984: LD_INT 3
59986: MINUS
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: PUSH
59996: LD_VAR 0 1
60000: PUSH
60001: LD_INT 4
60003: PLUS
60004: PUSH
60005: LD_VAR 0 2
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: PUSH
60018: LD_VAR 0 1
60022: PUSH
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 4
60030: PLUS
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: PUSH
60040: LD_VAR 0 1
60044: PUSH
60045: LD_INT 3
60047: MINUS
60048: PUSH
60049: LD_VAR 0 2
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: PUSH
60062: LD_VAR 0 1
60066: PUSH
60067: LD_INT 4
60069: MINUS
60070: PUSH
60071: LD_VAR 0 2
60075: PUSH
60076: LD_INT 4
60078: MINUS
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// end ; 3 :
60095: GO 60517
60097: LD_INT 3
60099: DOUBLE
60100: EQUAL
60101: IFTRUE 60105
60103: GO 60238
60105: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60106: LD_ADDR_VAR 0 5
60110: PUSH
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 3
60118: PLUS
60119: PUSH
60120: LD_VAR 0 2
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_VAR 0 1
60137: PUSH
60138: LD_INT 4
60140: PLUS
60141: PUSH
60142: LD_VAR 0 2
60146: PUSH
60147: LD_INT 4
60149: PLUS
60150: PUSH
60151: LD_INT 5
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: PUSH
60159: LD_VAR 0 1
60163: PUSH
60164: LD_INT 4
60166: MINUS
60167: PUSH
60168: LD_VAR 0 2
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: PUSH
60181: LD_VAR 0 1
60185: PUSH
60186: LD_VAR 0 2
60190: PUSH
60191: LD_INT 4
60193: MINUS
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: PUSH
60203: LD_VAR 0 1
60207: PUSH
60208: LD_INT 3
60210: MINUS
60211: PUSH
60212: LD_VAR 0 2
60216: PUSH
60217: LD_INT 3
60219: MINUS
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// end ; 4 :
60236: GO 60517
60238: LD_INT 4
60240: DOUBLE
60241: EQUAL
60242: IFTRUE 60246
60244: GO 60379
60246: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60247: LD_ADDR_VAR 0 5
60251: PUSH
60252: LD_VAR 0 1
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_INT 4
60264: PLUS
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: PUSH
60274: LD_VAR 0 1
60278: PUSH
60279: LD_INT 3
60281: PLUS
60282: PUSH
60283: LD_VAR 0 2
60287: PUSH
60288: LD_INT 3
60290: PLUS
60291: PUSH
60292: LD_INT 5
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: PUSH
60300: LD_VAR 0 1
60304: PUSH
60305: LD_INT 4
60307: PLUS
60308: PUSH
60309: LD_VAR 0 2
60313: PUSH
60314: LD_INT 4
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: PUSH
60322: LD_VAR 0 1
60326: PUSH
60327: LD_VAR 0 2
60331: PUSH
60332: LD_INT 3
60334: MINUS
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: PUSH
60344: LD_VAR 0 1
60348: PUSH
60349: LD_INT 4
60351: MINUS
60352: PUSH
60353: LD_VAR 0 2
60357: PUSH
60358: LD_INT 4
60360: MINUS
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: LIST
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: ST_TO_ADDR
// end ; 5 :
60377: GO 60517
60379: LD_INT 5
60381: DOUBLE
60382: EQUAL
60383: IFTRUE 60387
60385: GO 60516
60387: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60388: LD_ADDR_VAR 0 5
60392: PUSH
60393: LD_VAR 0 1
60397: PUSH
60398: LD_INT 4
60400: MINUS
60401: PUSH
60402: LD_VAR 0 2
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: PUSH
60415: LD_VAR 0 1
60419: PUSH
60420: LD_VAR 0 2
60424: PUSH
60425: LD_INT 4
60427: MINUS
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: LIST
60436: PUSH
60437: LD_VAR 0 1
60441: PUSH
60442: LD_INT 4
60444: PLUS
60445: PUSH
60446: LD_VAR 0 2
60450: PUSH
60451: LD_INT 4
60453: PLUS
60454: PUSH
60455: LD_INT 5
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: PUSH
60463: LD_VAR 0 1
60467: PUSH
60468: LD_INT 3
60470: PLUS
60471: PUSH
60472: LD_VAR 0 2
60476: PUSH
60477: LD_INT 4
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: PUSH
60485: LD_VAR 0 1
60489: PUSH
60490: LD_VAR 0 2
60494: PUSH
60495: LD_INT 3
60497: PLUS
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: LIST
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// end ; end ;
60514: GO 60517
60516: POP
// result := list ;
60517: LD_ADDR_VAR 0 4
60521: PUSH
60522: LD_VAR 0 5
60526: ST_TO_ADDR
// end ;
60527: LD_VAR 0 4
60531: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60532: LD_INT 0
60534: PPUSH
60535: PPUSH
60536: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60537: LD_VAR 0 1
60541: NOT
60542: PUSH
60543: LD_VAR 0 2
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: LD_INT 4
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: IN
60566: NOT
60567: OR
60568: IFFALSE 60572
// exit ;
60570: GO 60655
// tmp := [ ] ;
60572: LD_ADDR_VAR 0 5
60576: PUSH
60577: EMPTY
60578: ST_TO_ADDR
// for i in units do
60579: LD_ADDR_VAR 0 4
60583: PUSH
60584: LD_VAR 0 1
60588: PUSH
60589: FOR_IN
60590: IFFALSE 60624
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60592: LD_ADDR_VAR 0 5
60596: PUSH
60597: LD_VAR 0 5
60601: PPUSH
60602: LD_VAR 0 4
60606: PPUSH
60607: LD_VAR 0 2
60611: PPUSH
60612: CALL_OW 259
60616: PPUSH
60617: CALL 62016 0 2
60621: ST_TO_ADDR
60622: GO 60589
60624: POP
60625: POP
// if not tmp then
60626: LD_VAR 0 5
60630: NOT
60631: IFFALSE 60635
// exit ;
60633: GO 60655
// result := SortListByListDesc ( units , tmp ) ;
60635: LD_ADDR_VAR 0 3
60639: PUSH
60640: LD_VAR 0 1
60644: PPUSH
60645: LD_VAR 0 5
60649: PPUSH
60650: CALL_OW 77
60654: ST_TO_ADDR
// end ;
60655: LD_VAR 0 3
60659: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
60664: PPUSH
// result := false ;
60665: LD_ADDR_VAR 0 3
60669: PUSH
60670: LD_INT 0
60672: ST_TO_ADDR
// if not building then
60673: LD_VAR 0 2
60677: NOT
60678: IFFALSE 60682
// exit ;
60680: GO 60820
// x := GetX ( building ) ;
60682: LD_ADDR_VAR 0 4
60686: PUSH
60687: LD_VAR 0 2
60691: PPUSH
60692: CALL_OW 250
60696: ST_TO_ADDR
// y := GetY ( building ) ;
60697: LD_ADDR_VAR 0 5
60701: PUSH
60702: LD_VAR 0 2
60706: PPUSH
60707: CALL_OW 251
60711: ST_TO_ADDR
// if not x or not y then
60712: LD_VAR 0 4
60716: NOT
60717: PUSH
60718: LD_VAR 0 5
60722: NOT
60723: OR
60724: IFFALSE 60728
// exit ;
60726: GO 60820
// if GetTaskList ( unit ) then
60728: LD_VAR 0 1
60732: PPUSH
60733: CALL_OW 437
60737: IFFALSE 60820
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60739: LD_STRING e
60741: PUSH
60742: LD_VAR 0 1
60746: PPUSH
60747: CALL_OW 437
60751: PUSH
60752: LD_INT 1
60754: ARRAY
60755: PUSH
60756: LD_INT 1
60758: ARRAY
60759: EQUAL
60760: PUSH
60761: LD_VAR 0 4
60765: PUSH
60766: LD_VAR 0 1
60770: PPUSH
60771: CALL_OW 437
60775: PUSH
60776: LD_INT 1
60778: ARRAY
60779: PUSH
60780: LD_INT 2
60782: ARRAY
60783: EQUAL
60784: AND
60785: PUSH
60786: LD_VAR 0 5
60790: PUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: CALL_OW 437
60800: PUSH
60801: LD_INT 1
60803: ARRAY
60804: PUSH
60805: LD_INT 3
60807: ARRAY
60808: EQUAL
60809: AND
60810: IFFALSE 60820
// result := true end ;
60812: LD_ADDR_VAR 0 3
60816: PUSH
60817: LD_INT 1
60819: ST_TO_ADDR
// end ;
60820: LD_VAR 0 3
60824: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60825: LD_INT 0
60827: PPUSH
// result := false ;
60828: LD_ADDR_VAR 0 4
60832: PUSH
60833: LD_INT 0
60835: ST_TO_ADDR
// if GetTaskList ( unit ) then
60836: LD_VAR 0 1
60840: PPUSH
60841: CALL_OW 437
60845: IFFALSE 60928
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60847: LD_STRING M
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 437
60859: PUSH
60860: LD_INT 1
60862: ARRAY
60863: PUSH
60864: LD_INT 1
60866: ARRAY
60867: EQUAL
60868: PUSH
60869: LD_VAR 0 2
60873: PUSH
60874: LD_VAR 0 1
60878: PPUSH
60879: CALL_OW 437
60883: PUSH
60884: LD_INT 1
60886: ARRAY
60887: PUSH
60888: LD_INT 2
60890: ARRAY
60891: EQUAL
60892: AND
60893: PUSH
60894: LD_VAR 0 3
60898: PUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: CALL_OW 437
60908: PUSH
60909: LD_INT 1
60911: ARRAY
60912: PUSH
60913: LD_INT 3
60915: ARRAY
60916: EQUAL
60917: AND
60918: IFFALSE 60928
// result := true ;
60920: LD_ADDR_VAR 0 4
60924: PUSH
60925: LD_INT 1
60927: ST_TO_ADDR
// end ; end ;
60928: LD_VAR 0 4
60932: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60933: LD_INT 0
60935: PPUSH
60936: PPUSH
60937: PPUSH
60938: PPUSH
// if not unit or not area then
60939: LD_VAR 0 1
60943: NOT
60944: PUSH
60945: LD_VAR 0 2
60949: NOT
60950: OR
60951: IFFALSE 60955
// exit ;
60953: GO 61119
// tmp := AreaToList ( area , i ) ;
60955: LD_ADDR_VAR 0 6
60959: PUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: LD_VAR 0 5
60969: PPUSH
60970: CALL_OW 517
60974: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60975: LD_ADDR_VAR 0 5
60979: PUSH
60980: DOUBLE
60981: LD_INT 1
60983: DEC
60984: ST_TO_ADDR
60985: LD_VAR 0 6
60989: PUSH
60990: LD_INT 1
60992: ARRAY
60993: PUSH
60994: FOR_TO
60995: IFFALSE 61117
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60997: LD_ADDR_VAR 0 7
61001: PUSH
61002: LD_VAR 0 6
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PUSH
61011: LD_VAR 0 5
61015: ARRAY
61016: PUSH
61017: LD_VAR 0 6
61021: PUSH
61022: LD_INT 2
61024: ARRAY
61025: PUSH
61026: LD_VAR 0 5
61030: ARRAY
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61036: LD_VAR 0 7
61040: PUSH
61041: LD_INT 1
61043: ARRAY
61044: PPUSH
61045: LD_VAR 0 7
61049: PUSH
61050: LD_INT 2
61052: ARRAY
61053: PPUSH
61054: CALL_OW 428
61058: PUSH
61059: LD_INT 0
61061: EQUAL
61062: IFFALSE 61115
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61064: LD_VAR 0 1
61068: PPUSH
61069: LD_VAR 0 7
61073: PUSH
61074: LD_INT 1
61076: ARRAY
61077: PPUSH
61078: LD_VAR 0 7
61082: PUSH
61083: LD_INT 2
61085: ARRAY
61086: PPUSH
61087: LD_VAR 0 3
61091: PPUSH
61092: CALL_OW 48
// result := IsPlaced ( unit ) ;
61096: LD_ADDR_VAR 0 4
61100: PUSH
61101: LD_VAR 0 1
61105: PPUSH
61106: CALL_OW 305
61110: ST_TO_ADDR
// exit ;
61111: POP
61112: POP
61113: GO 61119
// end ; end ;
61115: GO 60994
61117: POP
61118: POP
// end ;
61119: LD_VAR 0 4
61123: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61124: LD_INT 0
61126: PPUSH
61127: PPUSH
61128: PPUSH
// if not side or side > 8 then
61129: LD_VAR 0 1
61133: NOT
61134: PUSH
61135: LD_VAR 0 1
61139: PUSH
61140: LD_INT 8
61142: GREATER
61143: OR
61144: IFFALSE 61148
// exit ;
61146: GO 61335
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61148: LD_ADDR_VAR 0 4
61152: PUSH
61153: LD_INT 22
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 21
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PPUSH
61179: CALL_OW 69
61183: ST_TO_ADDR
// if not tmp then
61184: LD_VAR 0 4
61188: NOT
61189: IFFALSE 61193
// exit ;
61191: GO 61335
// enable_addtolog := true ;
61193: LD_ADDR_OWVAR 81
61197: PUSH
61198: LD_INT 1
61200: ST_TO_ADDR
// AddToLog ( [ ) ;
61201: LD_STRING [
61203: PPUSH
61204: CALL_OW 561
// for i in tmp do
61208: LD_ADDR_VAR 0 3
61212: PUSH
61213: LD_VAR 0 4
61217: PUSH
61218: FOR_IN
61219: IFFALSE 61326
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61221: LD_STRING [
61223: PUSH
61224: LD_VAR 0 3
61228: PPUSH
61229: CALL_OW 266
61233: STR
61234: PUSH
61235: LD_STRING , 
61237: STR
61238: PUSH
61239: LD_VAR 0 3
61243: PPUSH
61244: CALL_OW 250
61248: STR
61249: PUSH
61250: LD_STRING , 
61252: STR
61253: PUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: CALL_OW 251
61263: STR
61264: PUSH
61265: LD_STRING , 
61267: STR
61268: PUSH
61269: LD_VAR 0 3
61273: PPUSH
61274: CALL_OW 254
61278: STR
61279: PUSH
61280: LD_STRING , 
61282: STR
61283: PUSH
61284: LD_VAR 0 3
61288: PPUSH
61289: LD_INT 1
61291: PPUSH
61292: CALL_OW 268
61296: STR
61297: PUSH
61298: LD_STRING , 
61300: STR
61301: PUSH
61302: LD_VAR 0 3
61306: PPUSH
61307: LD_INT 2
61309: PPUSH
61310: CALL_OW 268
61314: STR
61315: PUSH
61316: LD_STRING ],
61318: STR
61319: PPUSH
61320: CALL_OW 561
// end ;
61324: GO 61218
61326: POP
61327: POP
// AddToLog ( ]; ) ;
61328: LD_STRING ];
61330: PPUSH
61331: CALL_OW 561
// end ;
61335: LD_VAR 0 2
61339: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
61344: PPUSH
61345: PPUSH
61346: PPUSH
// if not area or not rate or not max then
61347: LD_VAR 0 1
61351: NOT
61352: PUSH
61353: LD_VAR 0 2
61357: NOT
61358: OR
61359: PUSH
61360: LD_VAR 0 4
61364: NOT
61365: OR
61366: IFFALSE 61370
// exit ;
61368: GO 61559
// while 1 do
61370: LD_INT 1
61372: IFFALSE 61559
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61374: LD_ADDR_VAR 0 9
61378: PUSH
61379: LD_VAR 0 1
61383: PPUSH
61384: LD_INT 1
61386: PPUSH
61387: CALL_OW 287
61391: PUSH
61392: LD_INT 10
61394: MUL
61395: ST_TO_ADDR
// r := rate / 10 ;
61396: LD_ADDR_VAR 0 7
61400: PUSH
61401: LD_VAR 0 2
61405: PUSH
61406: LD_INT 10
61408: DIVREAL
61409: ST_TO_ADDR
// time := 1 1$00 ;
61410: LD_ADDR_VAR 0 8
61414: PUSH
61415: LD_INT 2100
61417: ST_TO_ADDR
// if amount < min then
61418: LD_VAR 0 9
61422: PUSH
61423: LD_VAR 0 3
61427: LESS
61428: IFFALSE 61446
// r := r * 2 else
61430: LD_ADDR_VAR 0 7
61434: PUSH
61435: LD_VAR 0 7
61439: PUSH
61440: LD_INT 2
61442: MUL
61443: ST_TO_ADDR
61444: GO 61472
// if amount > max then
61446: LD_VAR 0 9
61450: PUSH
61451: LD_VAR 0 4
61455: GREATER
61456: IFFALSE 61472
// r := r / 2 ;
61458: LD_ADDR_VAR 0 7
61462: PUSH
61463: LD_VAR 0 7
61467: PUSH
61468: LD_INT 2
61470: DIVREAL
61471: ST_TO_ADDR
// time := time / r ;
61472: LD_ADDR_VAR 0 8
61476: PUSH
61477: LD_VAR 0 8
61481: PUSH
61482: LD_VAR 0 7
61486: DIVREAL
61487: ST_TO_ADDR
// if time < 0 then
61488: LD_VAR 0 8
61492: PUSH
61493: LD_INT 0
61495: LESS
61496: IFFALSE 61513
// time := time * - 1 ;
61498: LD_ADDR_VAR 0 8
61502: PUSH
61503: LD_VAR 0 8
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: MUL
61512: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61513: LD_VAR 0 8
61517: PUSH
61518: LD_INT 35
61520: PPUSH
61521: LD_INT 875
61523: PPUSH
61524: CALL_OW 12
61528: PLUS
61529: PPUSH
61530: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61534: LD_INT 1
61536: PPUSH
61537: LD_INT 5
61539: PPUSH
61540: CALL_OW 12
61544: PPUSH
61545: LD_VAR 0 1
61549: PPUSH
61550: LD_INT 1
61552: PPUSH
61553: CALL_OW 55
// end ;
61557: GO 61370
// end ;
61559: LD_VAR 0 5
61563: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61564: LD_INT 0
61566: PPUSH
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
61571: PPUSH
61572: PPUSH
61573: PPUSH
// if not turrets or not factories then
61574: LD_VAR 0 1
61578: NOT
61579: PUSH
61580: LD_VAR 0 2
61584: NOT
61585: OR
61586: IFFALSE 61590
// exit ;
61588: GO 61897
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61590: LD_ADDR_VAR 0 10
61594: PUSH
61595: LD_INT 5
61597: PUSH
61598: LD_INT 6
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: LD_INT 4
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: LD_INT 5
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 24
61632: PUSH
61633: LD_INT 25
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 23
61642: PUSH
61643: LD_INT 27
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 42
61656: PUSH
61657: LD_INT 43
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 44
61666: PUSH
61667: LD_INT 46
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 45
61676: PUSH
61677: LD_INT 47
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: ST_TO_ADDR
// result := [ ] ;
61694: LD_ADDR_VAR 0 3
61698: PUSH
61699: EMPTY
61700: ST_TO_ADDR
// for i in turrets do
61701: LD_ADDR_VAR 0 4
61705: PUSH
61706: LD_VAR 0 1
61710: PUSH
61711: FOR_IN
61712: IFFALSE 61895
// begin nat := GetNation ( i ) ;
61714: LD_ADDR_VAR 0 7
61718: PUSH
61719: LD_VAR 0 4
61723: PPUSH
61724: CALL_OW 248
61728: ST_TO_ADDR
// weapon := 0 ;
61729: LD_ADDR_VAR 0 8
61733: PUSH
61734: LD_INT 0
61736: ST_TO_ADDR
// if not nat then
61737: LD_VAR 0 7
61741: NOT
61742: IFFALSE 61746
// continue ;
61744: GO 61711
// for j in list [ nat ] do
61746: LD_ADDR_VAR 0 5
61750: PUSH
61751: LD_VAR 0 10
61755: PUSH
61756: LD_VAR 0 7
61760: ARRAY
61761: PUSH
61762: FOR_IN
61763: IFFALSE 61804
// if GetBWeapon ( i ) = j [ 1 ] then
61765: LD_VAR 0 4
61769: PPUSH
61770: CALL_OW 269
61774: PUSH
61775: LD_VAR 0 5
61779: PUSH
61780: LD_INT 1
61782: ARRAY
61783: EQUAL
61784: IFFALSE 61802
// begin weapon := j [ 2 ] ;
61786: LD_ADDR_VAR 0 8
61790: PUSH
61791: LD_VAR 0 5
61795: PUSH
61796: LD_INT 2
61798: ARRAY
61799: ST_TO_ADDR
// break ;
61800: GO 61804
// end ;
61802: GO 61762
61804: POP
61805: POP
// if not weapon then
61806: LD_VAR 0 8
61810: NOT
61811: IFFALSE 61815
// continue ;
61813: GO 61711
// for k in factories do
61815: LD_ADDR_VAR 0 6
61819: PUSH
61820: LD_VAR 0 2
61824: PUSH
61825: FOR_IN
61826: IFFALSE 61891
// begin weapons := AvailableWeaponList ( k ) ;
61828: LD_ADDR_VAR 0 9
61832: PUSH
61833: LD_VAR 0 6
61837: PPUSH
61838: CALL_OW 478
61842: ST_TO_ADDR
// if not weapons then
61843: LD_VAR 0 9
61847: NOT
61848: IFFALSE 61852
// continue ;
61850: GO 61825
// if weapon in weapons then
61852: LD_VAR 0 8
61856: PUSH
61857: LD_VAR 0 9
61861: IN
61862: IFFALSE 61889
// begin result := [ i , weapon ] ;
61864: LD_ADDR_VAR 0 3
61868: PUSH
61869: LD_VAR 0 4
61873: PUSH
61874: LD_VAR 0 8
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: ST_TO_ADDR
// exit ;
61883: POP
61884: POP
61885: POP
61886: POP
61887: GO 61897
// end ; end ;
61889: GO 61825
61891: POP
61892: POP
// end ;
61893: GO 61711
61895: POP
61896: POP
// end ;
61897: LD_VAR 0 3
61901: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61902: LD_INT 0
61904: PPUSH
// if not side or side > 8 then
61905: LD_VAR 0 3
61909: NOT
61910: PUSH
61911: LD_VAR 0 3
61915: PUSH
61916: LD_INT 8
61918: GREATER
61919: OR
61920: IFFALSE 61924
// exit ;
61922: GO 61983
// if not range then
61924: LD_VAR 0 4
61928: NOT
61929: IFFALSE 61940
// range := - 12 ;
61931: LD_ADDR_VAR 0 4
61935: PUSH
61936: LD_INT 12
61938: NEG
61939: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61940: LD_VAR 0 1
61944: PPUSH
61945: LD_VAR 0 2
61949: PPUSH
61950: LD_VAR 0 3
61954: PPUSH
61955: LD_VAR 0 4
61959: PPUSH
61960: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61964: LD_VAR 0 1
61968: PPUSH
61969: LD_VAR 0 2
61973: PPUSH
61974: LD_VAR 0 3
61978: PPUSH
61979: CALL_OW 331
// end ;
61983: LD_VAR 0 5
61987: RET
// export function Video ( mode ) ; begin
61988: LD_INT 0
61990: PPUSH
// ingame_video = mode ;
61991: LD_ADDR_OWVAR 52
61995: PUSH
61996: LD_VAR 0 1
62000: ST_TO_ADDR
// interface_hidden = mode ;
62001: LD_ADDR_OWVAR 54
62005: PUSH
62006: LD_VAR 0 1
62010: ST_TO_ADDR
// end ;
62011: LD_VAR 0 2
62015: RET
// export function Join ( array , element ) ; begin
62016: LD_INT 0
62018: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62019: LD_ADDR_VAR 0 3
62023: PUSH
62024: LD_VAR 0 1
62028: PPUSH
62029: LD_VAR 0 1
62033: PUSH
62034: LD_INT 1
62036: PLUS
62037: PPUSH
62038: LD_VAR 0 2
62042: PPUSH
62043: CALL_OW 1
62047: ST_TO_ADDR
// end ;
62048: LD_VAR 0 3
62052: RET
// export function JoinUnion ( array , element ) ; begin
62053: LD_INT 0
62055: PPUSH
// result := array union element ;
62056: LD_ADDR_VAR 0 3
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: LD_VAR 0 2
62070: UNION
62071: ST_TO_ADDR
// end ;
62072: LD_VAR 0 3
62076: RET
// export function GetBehemoths ( side ) ; begin
62077: LD_INT 0
62079: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62080: LD_ADDR_VAR 0 2
62084: PUSH
62085: LD_INT 22
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 31
62099: PUSH
62100: LD_INT 25
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PPUSH
62111: CALL_OW 69
62115: ST_TO_ADDR
// end ;
62116: LD_VAR 0 2
62120: RET
// export function Shuffle ( array ) ; var i , index ; begin
62121: LD_INT 0
62123: PPUSH
62124: PPUSH
62125: PPUSH
// result := [ ] ;
62126: LD_ADDR_VAR 0 2
62130: PUSH
62131: EMPTY
62132: ST_TO_ADDR
// if not array then
62133: LD_VAR 0 1
62137: NOT
62138: IFFALSE 62142
// exit ;
62140: GO 62241
// Randomize ;
62142: CALL_OW 10
// for i = array downto 1 do
62146: LD_ADDR_VAR 0 3
62150: PUSH
62151: DOUBLE
62152: LD_VAR 0 1
62156: INC
62157: ST_TO_ADDR
62158: LD_INT 1
62160: PUSH
62161: FOR_DOWNTO
62162: IFFALSE 62239
// begin index := rand ( 1 , array ) ;
62164: LD_ADDR_VAR 0 4
62168: PUSH
62169: LD_INT 1
62171: PPUSH
62172: LD_VAR 0 1
62176: PPUSH
62177: CALL_OW 12
62181: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62182: LD_ADDR_VAR 0 2
62186: PUSH
62187: LD_VAR 0 2
62191: PPUSH
62192: LD_VAR 0 2
62196: PUSH
62197: LD_INT 1
62199: PLUS
62200: PPUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_VAR 0 4
62210: ARRAY
62211: PPUSH
62212: CALL_OW 2
62216: ST_TO_ADDR
// array := Delete ( array , index ) ;
62217: LD_ADDR_VAR 0 1
62221: PUSH
62222: LD_VAR 0 1
62226: PPUSH
62227: LD_VAR 0 4
62231: PPUSH
62232: CALL_OW 3
62236: ST_TO_ADDR
// end ;
62237: GO 62161
62239: POP
62240: POP
// end ;
62241: LD_VAR 0 2
62245: RET
// export function GetBaseMaterials ( base ) ; begin
62246: LD_INT 0
62248: PPUSH
// result := [ 0 , 0 , 0 ] ;
62249: LD_ADDR_VAR 0 2
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: LIST
62267: ST_TO_ADDR
// if not base then
62268: LD_VAR 0 1
62272: NOT
62273: IFFALSE 62277
// exit ;
62275: GO 62326
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62277: LD_ADDR_VAR 0 2
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: LD_INT 1
62289: PPUSH
62290: CALL_OW 275
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: LD_INT 2
62302: PPUSH
62303: CALL_OW 275
62307: PUSH
62308: LD_VAR 0 1
62312: PPUSH
62313: LD_INT 3
62315: PPUSH
62316: CALL_OW 275
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// end ;
62326: LD_VAR 0 2
62330: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62331: LD_INT 0
62333: PPUSH
62334: PPUSH
// result := array ;
62335: LD_ADDR_VAR 0 3
62339: PUSH
62340: LD_VAR 0 1
62344: ST_TO_ADDR
// if size >= result then
62345: LD_VAR 0 2
62349: PUSH
62350: LD_VAR 0 3
62354: GREATEREQUAL
62355: IFFALSE 62359
// exit ;
62357: GO 62409
// if size then
62359: LD_VAR 0 2
62363: IFFALSE 62409
// for i := array downto size do
62365: LD_ADDR_VAR 0 4
62369: PUSH
62370: DOUBLE
62371: LD_VAR 0 1
62375: INC
62376: ST_TO_ADDR
62377: LD_VAR 0 2
62381: PUSH
62382: FOR_DOWNTO
62383: IFFALSE 62407
// result := Delete ( result , result ) ;
62385: LD_ADDR_VAR 0 3
62389: PUSH
62390: LD_VAR 0 3
62394: PPUSH
62395: LD_VAR 0 3
62399: PPUSH
62400: CALL_OW 3
62404: ST_TO_ADDR
62405: GO 62382
62407: POP
62408: POP
// end ;
62409: LD_VAR 0 3
62413: RET
// export function ComExit ( unit ) ; var tmp ; begin
62414: LD_INT 0
62416: PPUSH
62417: PPUSH
// if not IsInUnit ( unit ) then
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 310
62427: NOT
62428: IFFALSE 62432
// exit ;
62430: GO 62492
// tmp := IsInUnit ( unit ) ;
62432: LD_ADDR_VAR 0 3
62436: PUSH
62437: LD_VAR 0 1
62441: PPUSH
62442: CALL_OW 310
62446: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62447: LD_VAR 0 3
62451: PPUSH
62452: CALL_OW 247
62456: PUSH
62457: LD_INT 2
62459: EQUAL
62460: IFFALSE 62473
// ComExitVehicle ( unit ) else
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL_OW 121
62471: GO 62482
// ComExitBuilding ( unit ) ;
62473: LD_VAR 0 1
62477: PPUSH
62478: CALL_OW 122
// result := tmp ;
62482: LD_ADDR_VAR 0 2
62486: PUSH
62487: LD_VAR 0 3
62491: ST_TO_ADDR
// end ;
62492: LD_VAR 0 2
62496: RET
// export function ComExitAll ( units ) ; var i ; begin
62497: LD_INT 0
62499: PPUSH
62500: PPUSH
// if not units then
62501: LD_VAR 0 1
62505: NOT
62506: IFFALSE 62510
// exit ;
62508: GO 62536
// for i in units do
62510: LD_ADDR_VAR 0 3
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: FOR_IN
62521: IFFALSE 62534
// ComExit ( i ) ;
62523: LD_VAR 0 3
62527: PPUSH
62528: CALL 62414 0 1
62532: GO 62520
62534: POP
62535: POP
// end ;
62536: LD_VAR 0 2
62540: RET
// export function ResetHc ; begin
62541: LD_INT 0
62543: PPUSH
// InitHc ;
62544: CALL_OW 19
// hc_importance := 0 ;
62548: LD_ADDR_OWVAR 32
62552: PUSH
62553: LD_INT 0
62555: ST_TO_ADDR
// end ;
62556: LD_VAR 0 1
62560: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62561: LD_INT 0
62563: PPUSH
62564: PPUSH
62565: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62566: LD_ADDR_VAR 0 6
62570: PUSH
62571: LD_VAR 0 1
62575: PUSH
62576: LD_VAR 0 3
62580: PLUS
62581: PUSH
62582: LD_INT 2
62584: DIV
62585: ST_TO_ADDR
// if _x < 0 then
62586: LD_VAR 0 6
62590: PUSH
62591: LD_INT 0
62593: LESS
62594: IFFALSE 62611
// _x := _x * - 1 ;
62596: LD_ADDR_VAR 0 6
62600: PUSH
62601: LD_VAR 0 6
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: MUL
62610: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62611: LD_ADDR_VAR 0 7
62615: PUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_VAR 0 4
62625: PLUS
62626: PUSH
62627: LD_INT 2
62629: DIV
62630: ST_TO_ADDR
// if _y < 0 then
62631: LD_VAR 0 7
62635: PUSH
62636: LD_INT 0
62638: LESS
62639: IFFALSE 62656
// _y := _y * - 1 ;
62641: LD_ADDR_VAR 0 7
62645: PUSH
62646: LD_VAR 0 7
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: MUL
62655: ST_TO_ADDR
// result := [ _x , _y ] ;
62656: LD_ADDR_VAR 0 5
62660: PUSH
62661: LD_VAR 0 6
62665: PUSH
62666: LD_VAR 0 7
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// end ;
62675: LD_VAR 0 5
62679: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62680: LD_INT 0
62682: PPUSH
62683: PPUSH
62684: PPUSH
62685: PPUSH
// task := GetTaskList ( unit ) ;
62686: LD_ADDR_VAR 0 7
62690: PUSH
62691: LD_VAR 0 1
62695: PPUSH
62696: CALL_OW 437
62700: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62701: LD_VAR 0 7
62705: NOT
62706: PUSH
62707: LD_VAR 0 1
62711: PPUSH
62712: LD_VAR 0 2
62716: PPUSH
62717: CALL_OW 308
62721: NOT
62722: AND
62723: IFFALSE 62727
// exit ;
62725: GO 62845
// if IsInArea ( unit , area ) then
62727: LD_VAR 0 1
62731: PPUSH
62732: LD_VAR 0 2
62736: PPUSH
62737: CALL_OW 308
62741: IFFALSE 62759
// begin ComMoveToArea ( unit , goAway ) ;
62743: LD_VAR 0 1
62747: PPUSH
62748: LD_VAR 0 3
62752: PPUSH
62753: CALL_OW 113
// exit ;
62757: GO 62845
// end ; if task [ 1 ] [ 1 ] <> M then
62759: LD_VAR 0 7
62763: PUSH
62764: LD_INT 1
62766: ARRAY
62767: PUSH
62768: LD_INT 1
62770: ARRAY
62771: PUSH
62772: LD_STRING M
62774: NONEQUAL
62775: IFFALSE 62779
// exit ;
62777: GO 62845
// x := task [ 1 ] [ 2 ] ;
62779: LD_ADDR_VAR 0 5
62783: PUSH
62784: LD_VAR 0 7
62788: PUSH
62789: LD_INT 1
62791: ARRAY
62792: PUSH
62793: LD_INT 2
62795: ARRAY
62796: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62797: LD_ADDR_VAR 0 6
62801: PUSH
62802: LD_VAR 0 7
62806: PUSH
62807: LD_INT 1
62809: ARRAY
62810: PUSH
62811: LD_INT 3
62813: ARRAY
62814: ST_TO_ADDR
// if InArea ( x , y , area ) then
62815: LD_VAR 0 5
62819: PPUSH
62820: LD_VAR 0 6
62824: PPUSH
62825: LD_VAR 0 2
62829: PPUSH
62830: CALL_OW 309
62834: IFFALSE 62845
// ComStop ( unit ) ;
62836: LD_VAR 0 1
62840: PPUSH
62841: CALL_OW 141
// end ;
62845: LD_VAR 0 4
62849: RET
// export function Abs ( value ) ; begin
62850: LD_INT 0
62852: PPUSH
// result := value ;
62853: LD_ADDR_VAR 0 2
62857: PUSH
62858: LD_VAR 0 1
62862: ST_TO_ADDR
// if value < 0 then
62863: LD_VAR 0 1
62867: PUSH
62868: LD_INT 0
62870: LESS
62871: IFFALSE 62888
// result := value * - 1 ;
62873: LD_ADDR_VAR 0 2
62877: PUSH
62878: LD_VAR 0 1
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: MUL
62887: ST_TO_ADDR
// end ;
62888: LD_VAR 0 2
62892: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62893: LD_INT 0
62895: PPUSH
62896: PPUSH
62897: PPUSH
62898: PPUSH
62899: PPUSH
62900: PPUSH
62901: PPUSH
62902: PPUSH
// if not unit or not building then
62903: LD_VAR 0 1
62907: NOT
62908: PUSH
62909: LD_VAR 0 2
62913: NOT
62914: OR
62915: IFFALSE 62919
// exit ;
62917: GO 63145
// x := GetX ( building ) ;
62919: LD_ADDR_VAR 0 4
62923: PUSH
62924: LD_VAR 0 2
62928: PPUSH
62929: CALL_OW 250
62933: ST_TO_ADDR
// y := GetY ( building ) ;
62934: LD_ADDR_VAR 0 6
62938: PUSH
62939: LD_VAR 0 2
62943: PPUSH
62944: CALL_OW 251
62948: ST_TO_ADDR
// d := GetDir ( building ) ;
62949: LD_ADDR_VAR 0 8
62953: PUSH
62954: LD_VAR 0 2
62958: PPUSH
62959: CALL_OW 254
62963: ST_TO_ADDR
// r := 4 ;
62964: LD_ADDR_VAR 0 9
62968: PUSH
62969: LD_INT 4
62971: ST_TO_ADDR
// for i := 1 to 5 do
62972: LD_ADDR_VAR 0 10
62976: PUSH
62977: DOUBLE
62978: LD_INT 1
62980: DEC
62981: ST_TO_ADDR
62982: LD_INT 5
62984: PUSH
62985: FOR_TO
62986: IFFALSE 63143
// begin _x := ShiftX ( x , d , r + i ) ;
62988: LD_ADDR_VAR 0 5
62992: PUSH
62993: LD_VAR 0 4
62997: PPUSH
62998: LD_VAR 0 8
63002: PPUSH
63003: LD_VAR 0 9
63007: PUSH
63008: LD_VAR 0 10
63012: PLUS
63013: PPUSH
63014: CALL_OW 272
63018: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63019: LD_ADDR_VAR 0 7
63023: PUSH
63024: LD_VAR 0 6
63028: PPUSH
63029: LD_VAR 0 8
63033: PPUSH
63034: LD_VAR 0 9
63038: PUSH
63039: LD_VAR 0 10
63043: PLUS
63044: PPUSH
63045: CALL_OW 273
63049: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63050: LD_VAR 0 5
63054: PPUSH
63055: LD_VAR 0 7
63059: PPUSH
63060: CALL_OW 488
63064: PUSH
63065: LD_VAR 0 5
63069: PPUSH
63070: LD_VAR 0 7
63074: PPUSH
63075: CALL_OW 428
63079: PPUSH
63080: CALL_OW 247
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: IN
63095: NOT
63096: AND
63097: IFFALSE 63141
// begin ComMoveXY ( unit , _x , _y ) ;
63099: LD_VAR 0 1
63103: PPUSH
63104: LD_VAR 0 5
63108: PPUSH
63109: LD_VAR 0 7
63113: PPUSH
63114: CALL_OW 111
// result := [ _x , _y ] ;
63118: LD_ADDR_VAR 0 3
63122: PUSH
63123: LD_VAR 0 5
63127: PUSH
63128: LD_VAR 0 7
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: ST_TO_ADDR
// exit ;
63137: POP
63138: POP
63139: GO 63145
// end ; end ;
63141: GO 62985
63143: POP
63144: POP
// end ;
63145: LD_VAR 0 3
63149: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63150: LD_INT 0
63152: PPUSH
63153: PPUSH
63154: PPUSH
// result := 0 ;
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_INT 0
63162: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63163: LD_VAR 0 1
63167: PUSH
63168: LD_INT 0
63170: LESS
63171: PUSH
63172: LD_VAR 0 1
63176: PUSH
63177: LD_INT 8
63179: GREATER
63180: OR
63181: PUSH
63182: LD_VAR 0 2
63186: PUSH
63187: LD_INT 0
63189: LESS
63190: OR
63191: PUSH
63192: LD_VAR 0 2
63196: PUSH
63197: LD_INT 8
63199: GREATER
63200: OR
63201: IFFALSE 63205
// exit ;
63203: GO 63280
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63205: LD_ADDR_VAR 0 4
63209: PUSH
63210: LD_INT 22
63212: PUSH
63213: LD_VAR 0 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PPUSH
63222: CALL_OW 69
63226: PUSH
63227: FOR_IN
63228: IFFALSE 63278
// begin un := UnitShoot ( i ) ;
63230: LD_ADDR_VAR 0 5
63234: PUSH
63235: LD_VAR 0 4
63239: PPUSH
63240: CALL_OW 504
63244: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63245: LD_VAR 0 5
63249: PPUSH
63250: CALL_OW 255
63254: PUSH
63255: LD_VAR 0 1
63259: EQUAL
63260: IFFALSE 63276
// begin result := un ;
63262: LD_ADDR_VAR 0 3
63266: PUSH
63267: LD_VAR 0 5
63271: ST_TO_ADDR
// exit ;
63272: POP
63273: POP
63274: GO 63280
// end ; end ;
63276: GO 63227
63278: POP
63279: POP
// end ;
63280: LD_VAR 0 3
63284: RET
// export function GetCargoBay ( units ) ; begin
63285: LD_INT 0
63287: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63288: LD_ADDR_VAR 0 2
63292: PUSH
63293: LD_VAR 0 1
63297: PPUSH
63298: LD_INT 2
63300: PUSH
63301: LD_INT 34
63303: PUSH
63304: LD_INT 12
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 34
63313: PUSH
63314: LD_INT 51
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 34
63323: PUSH
63324: LD_INT 32
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 34
63333: PUSH
63334: LD_INT 89
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: PPUSH
63348: CALL_OW 72
63352: ST_TO_ADDR
// end ;
63353: LD_VAR 0 2
63357: RET
// export function Negate ( value ) ; begin
63358: LD_INT 0
63360: PPUSH
// result := not value ;
63361: LD_ADDR_VAR 0 2
63365: PUSH
63366: LD_VAR 0 1
63370: NOT
63371: ST_TO_ADDR
// end ;
63372: LD_VAR 0 2
63376: RET
// export function Inc ( value ) ; begin
63377: LD_INT 0
63379: PPUSH
// result := value + 1 ;
63380: LD_ADDR_VAR 0 2
63384: PUSH
63385: LD_VAR 0 1
63389: PUSH
63390: LD_INT 1
63392: PLUS
63393: ST_TO_ADDR
// end ;
63394: LD_VAR 0 2
63398: RET
// export function Dec ( value ) ; begin
63399: LD_INT 0
63401: PPUSH
// result := value - 1 ;
63402: LD_ADDR_VAR 0 2
63406: PUSH
63407: LD_VAR 0 1
63411: PUSH
63412: LD_INT 1
63414: MINUS
63415: ST_TO_ADDR
// end ;
63416: LD_VAR 0 2
63420: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63421: LD_INT 0
63423: PPUSH
63424: PPUSH
63425: PPUSH
63426: PPUSH
63427: PPUSH
63428: PPUSH
63429: PPUSH
63430: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63431: LD_VAR 0 1
63435: PPUSH
63436: LD_VAR 0 2
63440: PPUSH
63441: CALL_OW 488
63445: NOT
63446: PUSH
63447: LD_VAR 0 3
63451: PPUSH
63452: LD_VAR 0 4
63456: PPUSH
63457: CALL_OW 488
63461: NOT
63462: OR
63463: IFFALSE 63476
// begin result := - 1 ;
63465: LD_ADDR_VAR 0 5
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: ST_TO_ADDR
// exit ;
63474: GO 63711
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63476: LD_ADDR_VAR 0 12
63480: PUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: LD_VAR 0 2
63490: PPUSH
63491: LD_VAR 0 3
63495: PPUSH
63496: LD_VAR 0 4
63500: PPUSH
63501: CALL 62561 0 4
63505: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63506: LD_ADDR_VAR 0 11
63510: PUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: LD_VAR 0 2
63520: PPUSH
63521: LD_VAR 0 12
63525: PUSH
63526: LD_INT 1
63528: ARRAY
63529: PPUSH
63530: LD_VAR 0 12
63534: PUSH
63535: LD_INT 2
63537: ARRAY
63538: PPUSH
63539: CALL_OW 298
63543: ST_TO_ADDR
// distance := 9999 ;
63544: LD_ADDR_VAR 0 10
63548: PUSH
63549: LD_INT 9999
63551: ST_TO_ADDR
// for i := 0 to 5 do
63552: LD_ADDR_VAR 0 6
63556: PUSH
63557: DOUBLE
63558: LD_INT 0
63560: DEC
63561: ST_TO_ADDR
63562: LD_INT 5
63564: PUSH
63565: FOR_TO
63566: IFFALSE 63709
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63568: LD_ADDR_VAR 0 7
63572: PUSH
63573: LD_VAR 0 1
63577: PPUSH
63578: LD_VAR 0 6
63582: PPUSH
63583: LD_VAR 0 11
63587: PPUSH
63588: CALL_OW 272
63592: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63593: LD_ADDR_VAR 0 8
63597: PUSH
63598: LD_VAR 0 2
63602: PPUSH
63603: LD_VAR 0 6
63607: PPUSH
63608: LD_VAR 0 11
63612: PPUSH
63613: CALL_OW 273
63617: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63618: LD_VAR 0 7
63622: PPUSH
63623: LD_VAR 0 8
63627: PPUSH
63628: CALL_OW 488
63632: NOT
63633: IFFALSE 63637
// continue ;
63635: GO 63565
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63637: LD_ADDR_VAR 0 9
63641: PUSH
63642: LD_VAR 0 12
63646: PUSH
63647: LD_INT 1
63649: ARRAY
63650: PPUSH
63651: LD_VAR 0 12
63655: PUSH
63656: LD_INT 2
63658: ARRAY
63659: PPUSH
63660: LD_VAR 0 7
63664: PPUSH
63665: LD_VAR 0 8
63669: PPUSH
63670: CALL_OW 298
63674: ST_TO_ADDR
// if tmp < distance then
63675: LD_VAR 0 9
63679: PUSH
63680: LD_VAR 0 10
63684: LESS
63685: IFFALSE 63707
// begin result := i ;
63687: LD_ADDR_VAR 0 5
63691: PUSH
63692: LD_VAR 0 6
63696: ST_TO_ADDR
// distance := tmp ;
63697: LD_ADDR_VAR 0 10
63701: PUSH
63702: LD_VAR 0 9
63706: ST_TO_ADDR
// end ; end ;
63707: GO 63565
63709: POP
63710: POP
// end ;
63711: LD_VAR 0 5
63715: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63716: LD_INT 0
63718: PPUSH
63719: PPUSH
// if not driver or not IsInUnit ( driver ) then
63720: LD_VAR 0 1
63724: NOT
63725: PUSH
63726: LD_VAR 0 1
63730: PPUSH
63731: CALL_OW 310
63735: NOT
63736: OR
63737: IFFALSE 63741
// exit ;
63739: GO 63831
// vehicle := IsInUnit ( driver ) ;
63741: LD_ADDR_VAR 0 3
63745: PUSH
63746: LD_VAR 0 1
63750: PPUSH
63751: CALL_OW 310
63755: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63756: LD_VAR 0 1
63760: PPUSH
63761: LD_STRING \
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: PUSH
63791: LD_STRING E
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_VAR 0 3
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PPUSH
63827: CALL_OW 446
// end ;
63831: LD_VAR 0 2
63835: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63836: LD_INT 0
63838: PPUSH
63839: PPUSH
// if not driver or not IsInUnit ( driver ) then
63840: LD_VAR 0 1
63844: NOT
63845: PUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 310
63855: NOT
63856: OR
63857: IFFALSE 63861
// exit ;
63859: GO 63951
// vehicle := IsInUnit ( driver ) ;
63861: LD_ADDR_VAR 0 3
63865: PUSH
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL_OW 310
63875: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63876: LD_VAR 0 1
63880: PPUSH
63881: LD_STRING \
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: LD_STRING E
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: LD_VAR 0 3
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PPUSH
63947: CALL_OW 447
// end ;
63951: LD_VAR 0 2
63955: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63956: LD_INT 0
63958: PPUSH
63959: PPUSH
63960: PPUSH
// tmp := [ ] ;
63961: LD_ADDR_VAR 0 5
63965: PUSH
63966: EMPTY
63967: ST_TO_ADDR
// for i in units do
63968: LD_ADDR_VAR 0 4
63972: PUSH
63973: LD_VAR 0 1
63977: PUSH
63978: FOR_IN
63979: IFFALSE 64017
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63981: LD_ADDR_VAR 0 5
63985: PUSH
63986: LD_VAR 0 5
63990: PPUSH
63991: LD_VAR 0 5
63995: PUSH
63996: LD_INT 1
63998: PLUS
63999: PPUSH
64000: LD_VAR 0 4
64004: PPUSH
64005: CALL_OW 256
64009: PPUSH
64010: CALL_OW 2
64014: ST_TO_ADDR
64015: GO 63978
64017: POP
64018: POP
// if not tmp then
64019: LD_VAR 0 5
64023: NOT
64024: IFFALSE 64028
// exit ;
64026: GO 64076
// if asc then
64028: LD_VAR 0 2
64032: IFFALSE 64056
// result := SortListByListAsc ( units , tmp ) else
64034: LD_ADDR_VAR 0 3
64038: PUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: LD_VAR 0 5
64048: PPUSH
64049: CALL_OW 76
64053: ST_TO_ADDR
64054: GO 64076
// result := SortListByListDesc ( units , tmp ) ;
64056: LD_ADDR_VAR 0 3
64060: PUSH
64061: LD_VAR 0 1
64065: PPUSH
64066: LD_VAR 0 5
64070: PPUSH
64071: CALL_OW 77
64075: ST_TO_ADDR
// end ;
64076: LD_VAR 0 3
64080: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64081: LD_INT 0
64083: PPUSH
64084: PPUSH
// task := GetTaskList ( mech ) ;
64085: LD_ADDR_VAR 0 4
64089: PUSH
64090: LD_VAR 0 1
64094: PPUSH
64095: CALL_OW 437
64099: ST_TO_ADDR
// if not task then
64100: LD_VAR 0 4
64104: NOT
64105: IFFALSE 64109
// exit ;
64107: GO 64151
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64109: LD_ADDR_VAR 0 3
64113: PUSH
64114: LD_VAR 0 4
64118: PUSH
64119: LD_INT 1
64121: ARRAY
64122: PUSH
64123: LD_INT 1
64125: ARRAY
64126: PUSH
64127: LD_STRING r
64129: EQUAL
64130: PUSH
64131: LD_VAR 0 4
64135: PUSH
64136: LD_INT 1
64138: ARRAY
64139: PUSH
64140: LD_INT 4
64142: ARRAY
64143: PUSH
64144: LD_VAR 0 2
64148: EQUAL
64149: AND
64150: ST_TO_ADDR
// end ;
64151: LD_VAR 0 3
64155: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64156: LD_INT 0
64158: PPUSH
// SetDir ( unit , d ) ;
64159: LD_VAR 0 1
64163: PPUSH
64164: LD_VAR 0 4
64168: PPUSH
64169: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64173: LD_VAR 0 1
64177: PPUSH
64178: LD_VAR 0 2
64182: PPUSH
64183: LD_VAR 0 3
64187: PPUSH
64188: LD_VAR 0 5
64192: PPUSH
64193: CALL_OW 48
// end ;
64197: LD_VAR 0 6
64201: RET
// export function ToNaturalNumber ( number ) ; begin
64202: LD_INT 0
64204: PPUSH
// result := number div 1 ;
64205: LD_ADDR_VAR 0 2
64209: PUSH
64210: LD_VAR 0 1
64214: PUSH
64215: LD_INT 1
64217: DIV
64218: ST_TO_ADDR
// if number < 0 then
64219: LD_VAR 0 1
64223: PUSH
64224: LD_INT 0
64226: LESS
64227: IFFALSE 64237
// result := 0 ;
64229: LD_ADDR_VAR 0 2
64233: PUSH
64234: LD_INT 0
64236: ST_TO_ADDR
// end ;
64237: LD_VAR 0 2
64241: RET
// export function SortByClass ( units , class ) ; var un ; begin
64242: LD_INT 0
64244: PPUSH
64245: PPUSH
// if not units or not class then
64246: LD_VAR 0 1
64250: NOT
64251: PUSH
64252: LD_VAR 0 2
64256: NOT
64257: OR
64258: IFFALSE 64262
// exit ;
64260: GO 64357
// result := [ ] ;
64262: LD_ADDR_VAR 0 3
64266: PUSH
64267: EMPTY
64268: ST_TO_ADDR
// for un in units do
64269: LD_ADDR_VAR 0 4
64273: PUSH
64274: LD_VAR 0 1
64278: PUSH
64279: FOR_IN
64280: IFFALSE 64355
// if GetClass ( un ) = class then
64282: LD_VAR 0 4
64286: PPUSH
64287: CALL_OW 257
64291: PUSH
64292: LD_VAR 0 2
64296: EQUAL
64297: IFFALSE 64324
// result := Insert ( result , 1 , un ) else
64299: LD_ADDR_VAR 0 3
64303: PUSH
64304: LD_VAR 0 3
64308: PPUSH
64309: LD_INT 1
64311: PPUSH
64312: LD_VAR 0 4
64316: PPUSH
64317: CALL_OW 2
64321: ST_TO_ADDR
64322: GO 64353
// result := Replace ( result , result + 1 , un ) ;
64324: LD_ADDR_VAR 0 3
64328: PUSH
64329: LD_VAR 0 3
64333: PPUSH
64334: LD_VAR 0 3
64338: PUSH
64339: LD_INT 1
64341: PLUS
64342: PPUSH
64343: LD_VAR 0 4
64347: PPUSH
64348: CALL_OW 1
64352: ST_TO_ADDR
64353: GO 64279
64355: POP
64356: POP
// end ;
64357: LD_VAR 0 3
64361: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64362: LD_INT 0
64364: PPUSH
64365: PPUSH
64366: PPUSH
64367: PPUSH
64368: PPUSH
64369: PPUSH
64370: PPUSH
// result := [ ] ;
64371: LD_ADDR_VAR 0 4
64375: PUSH
64376: EMPTY
64377: ST_TO_ADDR
// if x - r < 0 then
64378: LD_VAR 0 1
64382: PUSH
64383: LD_VAR 0 3
64387: MINUS
64388: PUSH
64389: LD_INT 0
64391: LESS
64392: IFFALSE 64404
// min_x := 0 else
64394: LD_ADDR_VAR 0 8
64398: PUSH
64399: LD_INT 0
64401: ST_TO_ADDR
64402: GO 64420
// min_x := x - r ;
64404: LD_ADDR_VAR 0 8
64408: PUSH
64409: LD_VAR 0 1
64413: PUSH
64414: LD_VAR 0 3
64418: MINUS
64419: ST_TO_ADDR
// if y - r < 0 then
64420: LD_VAR 0 2
64424: PUSH
64425: LD_VAR 0 3
64429: MINUS
64430: PUSH
64431: LD_INT 0
64433: LESS
64434: IFFALSE 64446
// min_y := 0 else
64436: LD_ADDR_VAR 0 7
64440: PUSH
64441: LD_INT 0
64443: ST_TO_ADDR
64444: GO 64462
// min_y := y - r ;
64446: LD_ADDR_VAR 0 7
64450: PUSH
64451: LD_VAR 0 2
64455: PUSH
64456: LD_VAR 0 3
64460: MINUS
64461: ST_TO_ADDR
// max_x := x + r ;
64462: LD_ADDR_VAR 0 9
64466: PUSH
64467: LD_VAR 0 1
64471: PUSH
64472: LD_VAR 0 3
64476: PLUS
64477: ST_TO_ADDR
// max_y := y + r ;
64478: LD_ADDR_VAR 0 10
64482: PUSH
64483: LD_VAR 0 2
64487: PUSH
64488: LD_VAR 0 3
64492: PLUS
64493: ST_TO_ADDR
// for _x = min_x to max_x do
64494: LD_ADDR_VAR 0 5
64498: PUSH
64499: DOUBLE
64500: LD_VAR 0 8
64504: DEC
64505: ST_TO_ADDR
64506: LD_VAR 0 9
64510: PUSH
64511: FOR_TO
64512: IFFALSE 64613
// for _y = min_y to max_y do
64514: LD_ADDR_VAR 0 6
64518: PUSH
64519: DOUBLE
64520: LD_VAR 0 7
64524: DEC
64525: ST_TO_ADDR
64526: LD_VAR 0 10
64530: PUSH
64531: FOR_TO
64532: IFFALSE 64609
// begin if not ValidHex ( _x , _y ) then
64534: LD_VAR 0 5
64538: PPUSH
64539: LD_VAR 0 6
64543: PPUSH
64544: CALL_OW 488
64548: NOT
64549: IFFALSE 64553
// continue ;
64551: GO 64531
// if GetResourceTypeXY ( _x , _y ) then
64553: LD_VAR 0 5
64557: PPUSH
64558: LD_VAR 0 6
64562: PPUSH
64563: CALL_OW 283
64567: IFFALSE 64607
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64569: LD_ADDR_VAR 0 4
64573: PUSH
64574: LD_VAR 0 4
64578: PPUSH
64579: LD_VAR 0 4
64583: PUSH
64584: LD_INT 1
64586: PLUS
64587: PPUSH
64588: LD_VAR 0 5
64592: PUSH
64593: LD_VAR 0 6
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PPUSH
64602: CALL_OW 1
64606: ST_TO_ADDR
// end ;
64607: GO 64531
64609: POP
64610: POP
64611: GO 64511
64613: POP
64614: POP
// end ;
64615: LD_VAR 0 4
64619: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64620: LD_INT 0
64622: PPUSH
64623: PPUSH
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
// if not units then
64630: LD_VAR 0 1
64634: NOT
64635: IFFALSE 64639
// exit ;
64637: GO 65163
// result := UnitFilter ( units , [ f_ok ] ) ;
64639: LD_ADDR_VAR 0 3
64643: PUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_INT 50
64651: PUSH
64652: EMPTY
64653: LIST
64654: PPUSH
64655: CALL_OW 72
64659: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64660: LD_ADDR_VAR 0 8
64664: PUSH
64665: LD_VAR 0 1
64669: PUSH
64670: LD_INT 1
64672: ARRAY
64673: PPUSH
64674: CALL_OW 255
64678: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64679: LD_ADDR_VAR 0 10
64683: PUSH
64684: LD_INT 29
64686: PUSH
64687: LD_INT 91
64689: PUSH
64690: LD_INT 49
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: ST_TO_ADDR
// if not result then
64698: LD_VAR 0 3
64702: NOT
64703: IFFALSE 64707
// exit ;
64705: GO 65163
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64707: LD_ADDR_VAR 0 5
64711: PUSH
64712: LD_INT 81
64714: PUSH
64715: LD_VAR 0 8
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PPUSH
64724: CALL_OW 69
64728: ST_TO_ADDR
// for i in result do
64729: LD_ADDR_VAR 0 4
64733: PUSH
64734: LD_VAR 0 3
64738: PUSH
64739: FOR_IN
64740: IFFALSE 65161
// begin tag := GetTag ( i ) + 1 ;
64742: LD_ADDR_VAR 0 9
64746: PUSH
64747: LD_VAR 0 4
64751: PPUSH
64752: CALL_OW 110
64756: PUSH
64757: LD_INT 1
64759: PLUS
64760: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64761: LD_ADDR_VAR 0 7
64765: PUSH
64766: LD_VAR 0 4
64770: PPUSH
64771: CALL_OW 250
64775: PPUSH
64776: LD_VAR 0 4
64780: PPUSH
64781: CALL_OW 251
64785: PPUSH
64786: LD_INT 6
64788: PPUSH
64789: CALL 64362 0 3
64793: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64794: LD_VAR 0 4
64798: PPUSH
64799: CALL_OW 247
64803: PUSH
64804: LD_INT 2
64806: EQUAL
64807: PUSH
64808: LD_VAR 0 7
64812: AND
64813: PUSH
64814: LD_VAR 0 4
64818: PPUSH
64819: CALL_OW 264
64823: PUSH
64824: LD_VAR 0 10
64828: IN
64829: NOT
64830: AND
64831: IFFALSE 64870
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64833: LD_VAR 0 4
64837: PPUSH
64838: LD_VAR 0 7
64842: PUSH
64843: LD_INT 1
64845: ARRAY
64846: PUSH
64847: LD_INT 1
64849: ARRAY
64850: PPUSH
64851: LD_VAR 0 7
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PUSH
64860: LD_INT 2
64862: ARRAY
64863: PPUSH
64864: CALL_OW 116
64868: GO 65159
// if path > tag then
64870: LD_VAR 0 2
64874: PUSH
64875: LD_VAR 0 9
64879: GREATER
64880: IFFALSE 65088
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64882: LD_ADDR_VAR 0 6
64886: PUSH
64887: LD_VAR 0 5
64891: PPUSH
64892: LD_INT 91
64894: PUSH
64895: LD_VAR 0 4
64899: PUSH
64900: LD_INT 8
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: PPUSH
64908: CALL_OW 72
64912: ST_TO_ADDR
// if nearEnemy then
64913: LD_VAR 0 6
64917: IFFALSE 64986
// begin if GetWeapon ( i ) = ru_time_lapser then
64919: LD_VAR 0 4
64923: PPUSH
64924: CALL_OW 264
64928: PUSH
64929: LD_INT 49
64931: EQUAL
64932: IFFALSE 64960
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64934: LD_VAR 0 4
64938: PPUSH
64939: LD_VAR 0 6
64943: PPUSH
64944: LD_VAR 0 4
64948: PPUSH
64949: CALL_OW 74
64953: PPUSH
64954: CALL_OW 112
64958: GO 64984
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64960: LD_VAR 0 4
64964: PPUSH
64965: LD_VAR 0 6
64969: PPUSH
64970: LD_VAR 0 4
64974: PPUSH
64975: CALL_OW 74
64979: PPUSH
64980: CALL_OW 115
// end else
64984: GO 65086
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64986: LD_VAR 0 4
64990: PPUSH
64991: LD_VAR 0 2
64995: PUSH
64996: LD_VAR 0 9
65000: ARRAY
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: PPUSH
65006: LD_VAR 0 2
65010: PUSH
65011: LD_VAR 0 9
65015: ARRAY
65016: PUSH
65017: LD_INT 2
65019: ARRAY
65020: PPUSH
65021: CALL_OW 297
65025: PUSH
65026: LD_INT 6
65028: GREATER
65029: IFFALSE 65072
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65031: LD_VAR 0 4
65035: PPUSH
65036: LD_VAR 0 2
65040: PUSH
65041: LD_VAR 0 9
65045: ARRAY
65046: PUSH
65047: LD_INT 1
65049: ARRAY
65050: PPUSH
65051: LD_VAR 0 2
65055: PUSH
65056: LD_VAR 0 9
65060: ARRAY
65061: PUSH
65062: LD_INT 2
65064: ARRAY
65065: PPUSH
65066: CALL_OW 114
65070: GO 65086
// SetTag ( i , tag ) ;
65072: LD_VAR 0 4
65076: PPUSH
65077: LD_VAR 0 9
65081: PPUSH
65082: CALL_OW 109
// end else
65086: GO 65159
// if enemy then
65088: LD_VAR 0 5
65092: IFFALSE 65159
// begin if GetWeapon ( i ) = ru_time_lapser then
65094: LD_VAR 0 4
65098: PPUSH
65099: CALL_OW 264
65103: PUSH
65104: LD_INT 49
65106: EQUAL
65107: IFFALSE 65135
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65109: LD_VAR 0 4
65113: PPUSH
65114: LD_VAR 0 5
65118: PPUSH
65119: LD_VAR 0 4
65123: PPUSH
65124: CALL_OW 74
65128: PPUSH
65129: CALL_OW 112
65133: GO 65159
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65135: LD_VAR 0 4
65139: PPUSH
65140: LD_VAR 0 5
65144: PPUSH
65145: LD_VAR 0 4
65149: PPUSH
65150: CALL_OW 74
65154: PPUSH
65155: CALL_OW 115
// end ; end ;
65159: GO 64739
65161: POP
65162: POP
// end ;
65163: LD_VAR 0 3
65167: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65168: LD_INT 0
65170: PPUSH
65171: PPUSH
65172: PPUSH
// if not unit or IsInUnit ( unit ) then
65173: LD_VAR 0 1
65177: NOT
65178: PUSH
65179: LD_VAR 0 1
65183: PPUSH
65184: CALL_OW 310
65188: OR
65189: IFFALSE 65193
// exit ;
65191: GO 65284
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65193: LD_ADDR_VAR 0 4
65197: PUSH
65198: LD_VAR 0 1
65202: PPUSH
65203: CALL_OW 250
65207: PPUSH
65208: LD_VAR 0 2
65212: PPUSH
65213: LD_INT 1
65215: PPUSH
65216: CALL_OW 272
65220: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65221: LD_ADDR_VAR 0 5
65225: PUSH
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL_OW 251
65235: PPUSH
65236: LD_VAR 0 2
65240: PPUSH
65241: LD_INT 1
65243: PPUSH
65244: CALL_OW 273
65248: ST_TO_ADDR
// if ValidHex ( x , y ) then
65249: LD_VAR 0 4
65253: PPUSH
65254: LD_VAR 0 5
65258: PPUSH
65259: CALL_OW 488
65263: IFFALSE 65284
// ComTurnXY ( unit , x , y ) ;
65265: LD_VAR 0 1
65269: PPUSH
65270: LD_VAR 0 4
65274: PPUSH
65275: LD_VAR 0 5
65279: PPUSH
65280: CALL_OW 118
// end ;
65284: LD_VAR 0 3
65288: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65289: LD_INT 0
65291: PPUSH
65292: PPUSH
// result := false ;
65293: LD_ADDR_VAR 0 3
65297: PUSH
65298: LD_INT 0
65300: ST_TO_ADDR
// if not units then
65301: LD_VAR 0 2
65305: NOT
65306: IFFALSE 65310
// exit ;
65308: GO 65355
// for i in units do
65310: LD_ADDR_VAR 0 4
65314: PUSH
65315: LD_VAR 0 2
65319: PUSH
65320: FOR_IN
65321: IFFALSE 65353
// if See ( side , i ) then
65323: LD_VAR 0 1
65327: PPUSH
65328: LD_VAR 0 4
65332: PPUSH
65333: CALL_OW 292
65337: IFFALSE 65351
// begin result := true ;
65339: LD_ADDR_VAR 0 3
65343: PUSH
65344: LD_INT 1
65346: ST_TO_ADDR
// exit ;
65347: POP
65348: POP
65349: GO 65355
// end ;
65351: GO 65320
65353: POP
65354: POP
// end ;
65355: LD_VAR 0 3
65359: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65360: LD_INT 0
65362: PPUSH
65363: PPUSH
65364: PPUSH
65365: PPUSH
// if not unit or not points then
65366: LD_VAR 0 1
65370: NOT
65371: PUSH
65372: LD_VAR 0 2
65376: NOT
65377: OR
65378: IFFALSE 65382
// exit ;
65380: GO 65472
// dist := 99999 ;
65382: LD_ADDR_VAR 0 5
65386: PUSH
65387: LD_INT 99999
65389: ST_TO_ADDR
// for i in points do
65390: LD_ADDR_VAR 0 4
65394: PUSH
65395: LD_VAR 0 2
65399: PUSH
65400: FOR_IN
65401: IFFALSE 65470
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65403: LD_ADDR_VAR 0 6
65407: PUSH
65408: LD_VAR 0 1
65412: PPUSH
65413: LD_VAR 0 4
65417: PUSH
65418: LD_INT 1
65420: ARRAY
65421: PPUSH
65422: LD_VAR 0 4
65426: PUSH
65427: LD_INT 2
65429: ARRAY
65430: PPUSH
65431: CALL_OW 297
65435: ST_TO_ADDR
// if tmpDist < dist then
65436: LD_VAR 0 6
65440: PUSH
65441: LD_VAR 0 5
65445: LESS
65446: IFFALSE 65468
// begin result := i ;
65448: LD_ADDR_VAR 0 3
65452: PUSH
65453: LD_VAR 0 4
65457: ST_TO_ADDR
// dist := tmpDist ;
65458: LD_ADDR_VAR 0 5
65462: PUSH
65463: LD_VAR 0 6
65467: ST_TO_ADDR
// end ; end ;
65468: GO 65400
65470: POP
65471: POP
// end ;
65472: LD_VAR 0 3
65476: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65477: LD_INT 0
65479: PPUSH
// uc_side := side ;
65480: LD_ADDR_OWVAR 20
65484: PUSH
65485: LD_VAR 0 1
65489: ST_TO_ADDR
// uc_nation := 3 ;
65490: LD_ADDR_OWVAR 21
65494: PUSH
65495: LD_INT 3
65497: ST_TO_ADDR
// vc_chassis := 25 ;
65498: LD_ADDR_OWVAR 37
65502: PUSH
65503: LD_INT 25
65505: ST_TO_ADDR
// vc_engine := engine_siberite ;
65506: LD_ADDR_OWVAR 39
65510: PUSH
65511: LD_INT 3
65513: ST_TO_ADDR
// vc_control := control_computer ;
65514: LD_ADDR_OWVAR 38
65518: PUSH
65519: LD_INT 3
65521: ST_TO_ADDR
// vc_weapon := 59 ;
65522: LD_ADDR_OWVAR 40
65526: PUSH
65527: LD_INT 59
65529: ST_TO_ADDR
// result := CreateVehicle ;
65530: LD_ADDR_VAR 0 5
65534: PUSH
65535: CALL_OW 45
65539: ST_TO_ADDR
// SetDir ( result , d ) ;
65540: LD_VAR 0 5
65544: PPUSH
65545: LD_VAR 0 4
65549: PPUSH
65550: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65554: LD_VAR 0 5
65558: PPUSH
65559: LD_VAR 0 2
65563: PPUSH
65564: LD_VAR 0 3
65568: PPUSH
65569: LD_INT 0
65571: PPUSH
65572: CALL_OW 48
// end ;
65576: LD_VAR 0 5
65580: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65581: LD_INT 0
65583: PPUSH
65584: PPUSH
65585: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65586: LD_ADDR_VAR 0 2
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65609: LD_VAR 0 1
65613: NOT
65614: PUSH
65615: LD_VAR 0 1
65619: PPUSH
65620: CALL_OW 264
65624: PUSH
65625: LD_INT 12
65627: PUSH
65628: LD_INT 51
65630: PUSH
65631: LD_INT 32
65633: PUSH
65634: LD_INT 89
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: IN
65643: NOT
65644: OR
65645: IFFALSE 65649
// exit ;
65647: GO 65747
// for i := 1 to 3 do
65649: LD_ADDR_VAR 0 3
65653: PUSH
65654: DOUBLE
65655: LD_INT 1
65657: DEC
65658: ST_TO_ADDR
65659: LD_INT 3
65661: PUSH
65662: FOR_TO
65663: IFFALSE 65745
// begin tmp := GetCargo ( cargo , i ) ;
65665: LD_ADDR_VAR 0 4
65669: PUSH
65670: LD_VAR 0 1
65674: PPUSH
65675: LD_VAR 0 3
65679: PPUSH
65680: CALL_OW 289
65684: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65685: LD_ADDR_VAR 0 2
65689: PUSH
65690: LD_VAR 0 2
65694: PPUSH
65695: LD_VAR 0 3
65699: PPUSH
65700: LD_VAR 0 4
65704: PPUSH
65705: CALL_OW 1
65709: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65710: LD_ADDR_VAR 0 2
65714: PUSH
65715: LD_VAR 0 2
65719: PPUSH
65720: LD_INT 4
65722: PPUSH
65723: LD_VAR 0 2
65727: PUSH
65728: LD_INT 4
65730: ARRAY
65731: PUSH
65732: LD_VAR 0 4
65736: PLUS
65737: PPUSH
65738: CALL_OW 1
65742: ST_TO_ADDR
// end ;
65743: GO 65662
65745: POP
65746: POP
// end ;
65747: LD_VAR 0 2
65751: RET
// export function Length ( array ) ; begin
65752: LD_INT 0
65754: PPUSH
// result := array + 0 ;
65755: LD_ADDR_VAR 0 2
65759: PUSH
65760: LD_VAR 0 1
65764: PUSH
65765: LD_INT 0
65767: PLUS
65768: ST_TO_ADDR
// end ;
65769: LD_VAR 0 2
65773: RET
// export function PrepareArray ( array ) ; begin
65774: LD_INT 0
65776: PPUSH
// result := array diff 0 ;
65777: LD_ADDR_VAR 0 2
65781: PUSH
65782: LD_VAR 0 1
65786: PUSH
65787: LD_INT 0
65789: DIFF
65790: ST_TO_ADDR
// if not result [ 1 ] then
65791: LD_VAR 0 2
65795: PUSH
65796: LD_INT 1
65798: ARRAY
65799: NOT
65800: IFFALSE 65820
// result := Delete ( result , 1 ) ;
65802: LD_ADDR_VAR 0 2
65806: PUSH
65807: LD_VAR 0 2
65811: PPUSH
65812: LD_INT 1
65814: PPUSH
65815: CALL_OW 3
65819: ST_TO_ADDR
// end ;
65820: LD_VAR 0 2
65824: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65825: LD_INT 0
65827: PPUSH
65828: PPUSH
65829: PPUSH
65830: PPUSH
// sibRocketRange := 25 ;
65831: LD_ADDR_VAR 0 6
65835: PUSH
65836: LD_INT 25
65838: ST_TO_ADDR
// result := false ;
65839: LD_ADDR_VAR 0 4
65843: PUSH
65844: LD_INT 0
65846: ST_TO_ADDR
// for i := 0 to 5 do
65847: LD_ADDR_VAR 0 5
65851: PUSH
65852: DOUBLE
65853: LD_INT 0
65855: DEC
65856: ST_TO_ADDR
65857: LD_INT 5
65859: PUSH
65860: FOR_TO
65861: IFFALSE 65928
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65863: LD_VAR 0 1
65867: PPUSH
65868: LD_VAR 0 5
65872: PPUSH
65873: LD_VAR 0 6
65877: PPUSH
65878: CALL_OW 272
65882: PPUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: LD_VAR 0 5
65892: PPUSH
65893: LD_VAR 0 6
65897: PPUSH
65898: CALL_OW 273
65902: PPUSH
65903: LD_VAR 0 3
65907: PPUSH
65908: CALL_OW 309
65912: IFFALSE 65926
// begin result := true ;
65914: LD_ADDR_VAR 0 4
65918: PUSH
65919: LD_INT 1
65921: ST_TO_ADDR
// exit ;
65922: POP
65923: POP
65924: GO 65930
// end ;
65926: GO 65860
65928: POP
65929: POP
// end ;
65930: LD_VAR 0 4
65934: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65935: LD_INT 0
65937: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65938: LD_VAR 0 1
65942: PPUSH
65943: LD_VAR 0 2
65947: PPUSH
65948: LD_INT 0
65950: PPUSH
65951: LD_INT 0
65953: PPUSH
65954: LD_INT 1
65956: PPUSH
65957: LD_INT 0
65959: PPUSH
65960: CALL_OW 587
// end ; end_of_file
65964: LD_VAR 0 3
65968: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65969: LD_VAR 0 1
65973: PUSH
65974: LD_INT 200
65976: DOUBLE
65977: GREATEREQUAL
65978: IFFALSE 65986
65980: LD_INT 299
65982: DOUBLE
65983: LESSEQUAL
65984: IFTRUE 65988
65986: GO 66020
65988: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65989: LD_VAR 0 1
65993: PPUSH
65994: LD_VAR 0 2
65998: PPUSH
65999: LD_VAR 0 3
66003: PPUSH
66004: LD_VAR 0 4
66008: PPUSH
66009: LD_VAR 0 5
66013: PPUSH
66014: CALL 20635 0 5
66018: GO 66097
66020: LD_INT 300
66022: DOUBLE
66023: GREATEREQUAL
66024: IFFALSE 66032
66026: LD_INT 399
66028: DOUBLE
66029: LESSEQUAL
66030: IFTRUE 66034
66032: GO 66096
66034: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66035: LD_VAR 0 1
66039: PPUSH
66040: LD_VAR 0 2
66044: PPUSH
66045: LD_VAR 0 3
66049: PPUSH
66050: LD_VAR 0 4
66054: PPUSH
66055: LD_VAR 0 5
66059: PPUSH
66060: LD_VAR 0 6
66064: PPUSH
66065: LD_VAR 0 7
66069: PPUSH
66070: LD_VAR 0 8
66074: PPUSH
66075: LD_VAR 0 9
66079: PPUSH
66080: LD_VAR 0 10
66084: PPUSH
66085: LD_VAR 0 11
66089: PPUSH
66090: CALL 16968 0 11
66094: GO 66097
66096: POP
// end ;
66097: PPOPN 11
66099: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66100: LD_VAR 0 1
66104: PPUSH
66105: LD_VAR 0 2
66109: PPUSH
66110: LD_VAR 0 3
66114: PPUSH
66115: LD_VAR 0 4
66119: PPUSH
66120: LD_VAR 0 5
66124: PPUSH
66125: CALL 20371 0 5
// end ; end_of_file
66129: PPOPN 5
66131: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66132: LD_VAR 0 1
66136: PPUSH
66137: LD_VAR 0 2
66141: PPUSH
66142: LD_VAR 0 3
66146: PPUSH
66147: LD_VAR 0 4
66151: PPUSH
66152: LD_VAR 0 5
66156: PPUSH
66157: LD_VAR 0 6
66161: PPUSH
66162: CALL 4620 0 6
// end ;
66166: PPOPN 6
66168: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66169: LD_INT 0
66171: PPUSH
// begin if not units then
66172: LD_VAR 0 1
66176: NOT
66177: IFFALSE 66181
// exit ;
66179: GO 66181
// end ;
66181: PPOPN 7
66183: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66184: CALL 4524 0 0
// end ;
66188: PPOPN 1
66190: END
