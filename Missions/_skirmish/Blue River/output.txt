// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
  11: LD_INT 0
  13: PPUSH
  14: LD_INT 0
  16: PPUSH
  17: LD_INT 7
  19: PPUSH
  20: LD_INT 37963
  22: NEG
  23: PPUSH
  24: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  28: LD_INT 0
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 7
  36: PPUSH
  37: CALL_OW 331
// PrepareBase ;
  41: CALL 514 0 0
// Action ;
  45: CALL 54 0 0
// SaveForQuickRestart ;
  49: CALL_OW 22
// end ;
  53: END
// function Action ; var un , f , i ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
// SetBName ( brave , brave ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_STRING brave
  65: PPUSH
  66: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL_OW 274
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_INT 6000
  96: PUSH
  97: LD_INT 4500
  99: PUSH
 100: LD_INT 3000
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PUSH
 108: LD_OWVAR 67
 112: ARRAY
 113: PPUSH
 114: CALL_OW 277
// InGameOn ;
 118: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 122: LD_INT 1
 124: PPUSH
 125: CALL_OW 87
// Say ( com , DJack1 ) ;
 129: LD_EXP 1
 133: PPUSH
 134: LD_STRING DJack1
 136: PPUSH
 137: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 141: LD_EXP 3
 145: PPUSH
 146: LD_STRING DUn1
 148: PPUSH
 149: CALL_OW 88
// Say ( com , DJack2 ) ;
 153: LD_EXP 1
 157: PPUSH
 158: LD_STRING DJack2
 160: PPUSH
 161: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 165: LD_EXP 3
 169: PPUSH
 170: LD_STRING DUn2
 172: PPUSH
 173: CALL_OW 88
// Say ( com , DJack3 ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_STRING DJack3
 184: PPUSH
 185: CALL_OW 88
// uc_side := 7 ;
 189: LD_ADDR_OWVAR 20
 193: PUSH
 194: LD_INT 7
 196: ST_TO_ADDR
// uc_nation := 1 ;
 197: LD_ADDR_OWVAR 21
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 205: LD_INT 1
 207: PPUSH
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 380
// hc_name :=  ;
 218: LD_ADDR_OWVAR 26
 222: PUSH
 223: LD_STRING 
 225: ST_TO_ADDR
// un := CreateHuman ;
 226: LD_ADDR_VAR 0 2
 230: PUSH
 231: CALL_OW 44
 235: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 236: LD_INT 105
 238: PPUSH
 239: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 243: LD_VAR 0 2
 247: PPUSH
 248: LD_STRING DRadio1
 250: PPUSH
 251: CALL_OW 94
// Say ( com , DJack4 ) ;
 255: LD_EXP 1
 259: PPUSH
 260: LD_STRING DJack4
 262: PPUSH
 263: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 267: LD_VAR 0 2
 271: PPUSH
 272: LD_STRING DRadio2
 274: PPUSH
 275: CALL_OW 94
// Wait ( 0 0$01 ) ;
 279: LD_INT 35
 281: PPUSH
 282: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_STRING DDoc1
 293: PPUSH
 294: CALL_OW 94
// Say ( com , DJack5 ) ;
 298: LD_EXP 1
 302: PPUSH
 303: LD_STRING DJack5
 305: PPUSH
 306: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 310: LD_EXP 2
 314: PPUSH
 315: LD_STRING DDoc2
 317: PPUSH
 318: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 322: LD_VAR 0 2
 326: PPUSH
 327: LD_STRING DRadio3
 329: PPUSH
 330: CALL_OW 94
// Say ( com , DJack6 ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_STRING DJack6
 341: PPUSH
 342: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 346: LD_ADDR_VAR 0 3
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 7
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: ST_TO_ADDR
// for i = 2 to f do
 380: LD_ADDR_VAR 0 4
 384: PUSH
 385: DOUBLE
 386: LD_INT 2
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 3
 394: PUSH
 395: FOR_TO
 396: IFFALSE 453
// begin ComExitBuilding ( f [ i ] ) ;
 398: LD_VAR 0 3
 402: PUSH
 403: LD_VAR 0 4
 407: ARRAY
 408: PPUSH
 409: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 413: LD_VAR 0 3
 417: PUSH
 418: LD_VAR 0 4
 422: ARRAY
 423: PPUSH
 424: LD_INT 7
 426: PPUSH
 427: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ARRAY
 441: PPUSH
 442: LD_EXP 1
 446: PPUSH
 447: CALL_OW 179
// end ;
 451: GO 395
 453: POP
 454: POP
// ComExitBuilding ( com ) ;
 455: LD_EXP 1
 459: PPUSH
 460: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 45
 471: PPUSH
 472: LD_INT 32
 474: PPUSH
 475: CALL_OW 178
// Wait ( 0 0$03 ) ;
 479: LD_INT 105
 481: PPUSH
 482: CALL_OW 67
// Say ( com , DJack7 ) ;
 486: LD_EXP 1
 490: PPUSH
 491: LD_STRING DJack7
 493: PPUSH
 494: CALL_OW 88
// InGameOff ;
 498: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 502: LD_STRING TDef
 504: PPUSH
 505: CALL_OW 337
// end ; end_of_file
 509: LD_VAR 0 1
 513: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 514: LD_INT 0
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 520: LD_INT 30
 522: PPUSH
 523: LD_INT 14
 525: PPUSH
 526: LD_INT 7
 528: PPUSH
 529: LD_INT 20
 531: PPUSH
 532: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 536: LD_INT 49
 538: PPUSH
 539: LD_INT 17
 541: PPUSH
 542: LD_INT 7
 544: PPUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 552: LD_INT 35
 554: PPUSH
 555: LD_INT 46
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 568: LD_INT 70
 570: PPUSH
 571: LD_INT 39
 573: PPUSH
 574: LD_INT 7
 576: PPUSH
 577: LD_INT 20
 579: PPUSH
 580: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 584: LD_INT 30
 586: PPUSH
 587: LD_INT 14
 589: PPUSH
 590: LD_INT 7
 592: PPUSH
 593: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 597: LD_INT 49
 599: PPUSH
 600: LD_INT 17
 602: PPUSH
 603: LD_INT 7
 605: PPUSH
 606: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 610: LD_INT 35
 612: PPUSH
 613: LD_INT 46
 615: PPUSH
 616: LD_INT 7
 618: PPUSH
 619: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 623: LD_INT 70
 625: PPUSH
 626: LD_INT 39
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: CALL_OW 331
// uc_side := 7 ;
 636: LD_ADDR_OWVAR 20
 640: PUSH
 641: LD_INT 7
 643: ST_TO_ADDR
// uc_nation := 1 ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// if Difficulty < 3 then
 652: LD_OWVAR 67
 656: PUSH
 657: LD_INT 3
 659: LESS
 660: IFFALSE 761
// begin for i = 1 to 2 do
 662: LD_ADDR_VAR 0 2
 666: PUSH
 667: DOUBLE
 668: LD_INT 1
 670: DEC
 671: ST_TO_ADDR
 672: LD_INT 2
 674: PUSH
 675: FOR_TO
 676: IFFALSE 757
// begin vc_chassis := us_heavy_tracked ;
 678: LD_ADDR_OWVAR 37
 682: PUSH
 683: LD_INT 4
 685: ST_TO_ADDR
// vc_engine := 3 ;
 686: LD_ADDR_OWVAR 39
 690: PUSH
 691: LD_INT 3
 693: ST_TO_ADDR
// vc_control := control_computer ;
 694: LD_ADDR_OWVAR 38
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 702: LD_ADDR_OWVAR 40
 706: PUSH
 707: LD_INT 10
 709: ST_TO_ADDR
// un := CreateVehicle ;
 710: LD_ADDR_VAR 0 3
 714: PUSH
 715: CALL_OW 45
 719: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 720: LD_VAR 0 3
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: LD_INT 5
 730: PPUSH
 731: CALL_OW 12
 735: PPUSH
 736: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 740: LD_VAR 0 3
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 675
 757: POP
 758: POP
// end else
 759: GO 850
// begin vc_chassis := us_medium_tracked ;
 761: LD_ADDR_OWVAR 37
 765: PUSH
 766: LD_INT 3
 768: ST_TO_ADDR
// vc_engine := engine_combustion ;
 769: LD_ADDR_OWVAR 39
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// vc_control := control_manual ;
 777: LD_ADDR_OWVAR 38
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 785: LD_ADDR_OWVAR 40
 789: PUSH
 790: LD_INT 4
 792: ST_TO_ADDR
// un := CreateVehicle ;
 793: LD_ADDR_VAR 0 3
 797: PUSH
 798: CALL_OW 45
 802: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 803: LD_VAR 0 3
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 5
 813: PPUSH
 814: CALL_OW 12
 818: PPUSH
 819: CALL_OW 233
// SetFuel ( un , 75 ) ;
 823: LD_VAR 0 3
 827: PPUSH
 828: LD_INT 75
 830: PPUSH
 831: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 835: LD_VAR 0 3
 839: PPUSH
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 850: LD_ADDR_VAR 0 4
 854: PUSH
 855: LD_INT 8
 857: PUSH
 858: LD_INT 7
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_OWVAR 67
 873: ARRAY
 874: ST_TO_ADDR
// hc_importance := 100 ;
 875: LD_ADDR_OWVAR 32
 879: PUSH
 880: LD_INT 100
 882: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_VAR 0 4
 893: PPUSH
 894: CALL_OW 380
// hc_name := Jack Collins ;
 898: LD_ADDR_OWVAR 26
 902: PUSH
 903: LD_STRING Jack Collins
 905: ST_TO_ADDR
// com := CreateHuman ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: CALL_OW 44
 915: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 916: LD_EXP 1
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL_OW 52
// hc_importance := 0 ;
 928: LD_ADDR_OWVAR 32
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// hc_gallery :=  ;
 936: LD_ADDR_OWVAR 33
 940: PUSH
 941: LD_STRING 
 943: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 4
 954: PPUSH
 955: CALL_OW 380
// hc_name := Thomas Jackson ;
 959: LD_ADDR_OWVAR 26
 963: PUSH
 964: LD_STRING Thomas Jackson
 966: ST_TO_ADDR
// k1 := CreateHuman ;
 967: LD_ADDR_EXP 3
 971: PUSH
 972: CALL_OW 44
 976: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
 977: LD_EXP 3
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 52
// hc_name :=  ;
 989: LD_ADDR_OWVAR 26
 993: PUSH
 994: LD_STRING 
 996: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: DOUBLE
1003: LD_INT 1
1005: DEC
1006: ST_TO_ADDR
1007: LD_INT 9
1009: PUSH
1010: LD_INT 8
1012: PUSH
1013: LD_INT 7
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: PUSH
1021: LD_OWVAR 67
1025: ARRAY
1026: PUSH
1027: FOR_TO
1028: IFFALSE 1199
// begin Randomize ;
1030: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 12
1059: ARRAY
1060: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1061: LD_INT 0
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_INT 4
1069: PPUSH
1070: CALL_OW 12
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 380
// un := CreateHuman ;
1084: LD_ADDR_VAR 0 3
1088: PUSH
1089: CALL_OW 44
1093: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1094: LD_VAR 0 3
1098: PPUSH
1099: CALL_OW 257
1103: PUSH
1104: LD_INT 1
1106: DOUBLE
1107: EQUAL
1108: IFTRUE 1112
1110: GO 1127
1112: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 21
1120: PPUSH
1121: CALL_OW 52
1125: GO 1197
1127: LD_INT 2
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1150
1135: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1136: LD_VAR 0 3
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL_OW 52
1148: GO 1197
1150: LD_INT 3
1152: DOUBLE
1153: EQUAL
1154: IFTRUE 1158
1156: GO 1173
1158: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_INT 38
1166: PPUSH
1167: CALL_OW 52
1171: GO 1197
1173: LD_INT 4
1175: DOUBLE
1176: EQUAL
1177: IFTRUE 1181
1179: GO 1196
1181: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 36
1189: PPUSH
1190: CALL_OW 52
1194: GO 1197
1196: POP
// end ;
1197: GO 1027
1199: POP
1200: POP
// uc_side := 2 ;
1201: LD_ADDR_OWVAR 20
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// hc_name := _ ;
1217: LD_ADDR_OWVAR 26
1221: PUSH
1222: LD_STRING _
1224: ST_TO_ADDR
// hc_gallery :=  ;
1225: LD_ADDR_OWVAR 33
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// hc_class := 4 ;
1233: LD_ADDR_OWVAR 28
1237: PUSH
1238: LD_INT 4
1240: ST_TO_ADDR
// hc_sex := sex_male ;
1241: LD_ADDR_OWVAR 27
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// doc := CreateHuman ;
1249: LD_ADDR_EXP 2
1253: PUSH
1254: CALL_OW 44
1258: ST_TO_ADDR
// end ; end_of_file
1259: LD_VAR 0 1
1263: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
// uc_side := 2 ;
1270: LD_ADDR_OWVAR 20
1274: PUSH
1275: LD_INT 2
1277: ST_TO_ADDR
// uc_nation := 2 ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_INT 2
1285: ST_TO_ADDR
// tmp := [ ] ;
1286: LD_ADDR_VAR 0 5
1290: PUSH
1291: EMPTY
1292: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1293: LD_ADDR_OWVAR 31
1297: PUSH
1298: LD_INT 3
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 10
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: LD_OWVAR 67
1316: ARRAY
1317: PUSH
1318: LD_INT 3
1320: PUSH
1321: LD_INT 6
1323: PUSH
1324: LD_INT 10
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: PUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 6
1343: PUSH
1344: LD_INT 10
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_OWVAR 67
1356: ARRAY
1357: PUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 10
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: LD_OWVAR 67
1376: ARRAY
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1384: LD_INT 4
1386: PPUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 7
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: IFFALSE 1442
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: LD_INT 4
1410: PPUSH
1411: LD_INT 22
1413: PUSH
1414: LD_INT 7
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1440
// RemoveUnit ( i ) ;
1429: LD_VAR 0 3
1433: PPUSH
1434: CALL_OW 64
1438: GO 1426
1440: POP
1441: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 22
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PPUSH
1455: CALL_OW 70
1459: IFFALSE 1500
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: LD_INT 5
1468: PPUSH
1469: LD_INT 22
1471: PUSH
1472: LD_INT 7
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 70
1483: PUSH
1484: FOR_IN
1485: IFFALSE 1498
// RemoveUnit ( i ) ;
1487: LD_VAR 0 3
1491: PPUSH
1492: CALL_OW 64
1496: GO 1484
1498: POP
1499: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 22
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: CALL_OW 70
1517: IFFALSE 1558
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: LD_INT 1
1526: PPUSH
1527: LD_INT 22
1529: PUSH
1530: LD_INT 7
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 70
1541: PUSH
1542: FOR_IN
1543: IFFALSE 1556
// RemoveUnit ( i ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: CALL_OW 64
1554: GO 1542
1556: POP
1557: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1558: LD_INT 2
1560: PPUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 70
1575: IFFALSE 1616
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1577: LD_ADDR_VAR 0 3
1581: PUSH
1582: LD_INT 2
1584: PPUSH
1585: LD_INT 22
1587: PUSH
1588: LD_INT 7
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 70
1599: PUSH
1600: FOR_IN
1601: IFFALSE 1614
// RemoveUnit ( i ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: CALL_OW 64
1612: GO 1600
1614: POP
1615: POP
// case num of 1 :
1616: LD_VAR 0 1
1620: PUSH
1621: LD_INT 1
1623: DOUBLE
1624: EQUAL
1625: IFTRUE 1629
1627: GO 1882
1629: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 5
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: LD_INT 6
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_OWVAR 67
1658: ARRAY
1659: PUSH
1660: FOR_TO
1661: IFFALSE 1753
// begin uc_nation := 0 ;
1663: LD_ADDR_OWVAR 21
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1671: LD_ADDR_OWVAR 28
1675: PUSH
1676: LD_INT 15
1678: ST_TO_ADDR
// hc_gallery :=  ;
1679: LD_ADDR_OWVAR 33
1683: PUSH
1684: LD_STRING 
1686: ST_TO_ADDR
// hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1695: LD_ADDR_OWVAR 29
1699: PUSH
1700: LD_INT 16
1702: PUSH
1703: LD_INT 12
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// un := CreateHuman ;
1710: LD_ADDR_VAR 0 4
1714: PUSH
1715: CALL_OW 44
1719: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// tmp := tmp ^ un ;
1735: LD_ADDR_VAR 0 5
1739: PUSH
1740: LD_VAR 0 5
1744: PUSH
1745: LD_VAR 0 4
1749: ADD
1750: ST_TO_ADDR
// end ;
1751: GO 1660
1753: POP
1754: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1755: LD_ADDR_VAR 0 3
1759: PUSH
1760: DOUBLE
1761: LD_INT 1
1763: DEC
1764: ST_TO_ADDR
1765: LD_INT 4
1767: PUSH
1768: LD_INT 5
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PUSH
1785: FOR_TO
1786: IFFALSE 1878
// begin uc_nation := 0 ;
1788: LD_ADDR_OWVAR 21
1792: PUSH
1793: LD_INT 0
1795: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1796: LD_ADDR_OWVAR 28
1800: PUSH
1801: LD_INT 15
1803: ST_TO_ADDR
// hc_gallery :=  ;
1804: LD_ADDR_OWVAR 33
1808: PUSH
1809: LD_STRING 
1811: ST_TO_ADDR
// hc_name :=  ;
1812: LD_ADDR_OWVAR 26
1816: PUSH
1817: LD_STRING 
1819: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1820: LD_ADDR_OWVAR 29
1824: PUSH
1825: LD_INT 16
1827: PUSH
1828: LD_INT 12
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: ST_TO_ADDR
// un := CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: CALL_OW 44
1844: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 5
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// tmp := tmp ^ un ;
1860: LD_ADDR_VAR 0 5
1864: PUSH
1865: LD_VAR 0 5
1869: PUSH
1870: LD_VAR 0 4
1874: ADD
1875: ST_TO_ADDR
// end ;
1876: GO 1785
1878: POP
1879: POP
// end ; 2 :
1880: GO 2660
1882: LD_INT 2
1884: DOUBLE
1885: EQUAL
1886: IFTRUE 1890
1888: GO 2018
1890: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: LD_INT 5
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: LD_OWVAR 67
1919: ARRAY
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2014
// begin uc_nation := 0 ;
1924: LD_ADDR_OWVAR 21
1928: PUSH
1929: LD_INT 0
1931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1932: LD_ADDR_OWVAR 28
1936: PUSH
1937: LD_INT 17
1939: ST_TO_ADDR
// hc_gallery :=  ;
1940: LD_ADDR_OWVAR 33
1944: PUSH
1945: LD_STRING 
1947: ST_TO_ADDR
// hc_name :=  ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING 
1955: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 12
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// un := CreateHuman ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
1981: LD_VAR 0 4
1985: PPUSH
1986: LD_INT 3
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// tmp := tmp ^ un ;
1996: LD_ADDR_VAR 0 5
2000: PUSH
2001: LD_VAR 0 5
2005: PUSH
2006: LD_VAR 0 4
2010: ADD
2011: ST_TO_ADDR
// end ;
2012: GO 1921
2014: POP
2015: POP
// end ; 3 :
2016: GO 2660
2018: LD_INT 3
2020: DOUBLE
2021: EQUAL
2022: IFTRUE 2026
2024: GO 2186
2026: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_INT 4
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 6
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_OWVAR 67
2055: ARRAY
2056: PUSH
2057: FOR_TO
2058: IFFALSE 2182
// begin uc_nation := 2 ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2068: LD_ADDR_OWVAR 37
2072: PUSH
2073: LD_INT 14
2075: ST_TO_ADDR
// vc_engine := 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control := control_apeman ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 5
2091: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 27
2099: PUSH
2100: LD_INT 28
2102: PUSH
2103: LD_INT 29
2105: PUSH
2106: LD_INT 91
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// un := CreateVehicle ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// tmp := tmp ^ un ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PUSH
2147: LD_VAR 0 4
2151: ADD
2152: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2165: LD_VAR 0 4
2169: PPUSH
2170: LD_INT 2
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// end ;
2180: GO 2057
2182: POP
2183: POP
// end ; 4 :
2184: GO 2660
2186: LD_INT 4
2188: DOUBLE
2189: EQUAL
2190: IFTRUE 2194
2192: GO 2362
2194: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 3
2207: PPUSH
2208: LD_INT 4
2210: PUSH
2211: LD_INT 5
2213: PUSH
2214: LD_INT 6
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: PUSH
2222: LD_OWVAR 67
2226: ARRAY
2227: PPUSH
2228: CALL_OW 12
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2358
// begin uc_nation := 2 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2244: LD_ADDR_OWVAR 37
2248: PUSH
2249: LD_INT 14
2251: ST_TO_ADDR
// vc_engine := 3 ;
2252: LD_ADDR_OWVAR 39
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// vc_control := control_apeman ;
2260: LD_ADDR_OWVAR 38
2264: PUSH
2265: LD_INT 5
2267: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2268: LD_ADDR_OWVAR 40
2272: PUSH
2273: LD_INT 27
2275: PUSH
2276: LD_INT 28
2278: PUSH
2279: LD_INT 29
2281: PUSH
2282: LD_INT 91
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 1
2293: PPUSH
2294: LD_INT 4
2296: PPUSH
2297: CALL_OW 12
2301: ARRAY
2302: ST_TO_ADDR
// un := CreateVehicle ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: CALL_OW 45
2312: ST_TO_ADDR
// tmp := tmp ^ un ;
2313: LD_ADDR_VAR 0 5
2317: PUSH
2318: LD_VAR 0 5
2322: PUSH
2323: LD_VAR 0 4
2327: ADD
2328: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2329: LD_VAR 0 4
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2341: LD_VAR 0 4
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 0
2351: PPUSH
2352: CALL_OW 49
// end ;
2356: GO 2233
2358: POP
2359: POP
// end ; 5 :
2360: GO 2660
2362: LD_INT 5
2364: DOUBLE
2365: EQUAL
2366: IFTRUE 2370
2368: GO 2530
2370: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 3
2383: PUSH
2384: LD_INT 4
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_OWVAR 67
2399: ARRAY
2400: PUSH
2401: FOR_TO
2402: IFFALSE 2526
// begin uc_nation := 2 ;
2404: LD_ADDR_OWVAR 21
2408: PUSH
2409: LD_INT 2
2411: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2412: LD_ADDR_OWVAR 37
2416: PUSH
2417: LD_INT 14
2419: ST_TO_ADDR
// vc_engine := 3 ;
2420: LD_ADDR_OWVAR 39
2424: PUSH
2425: LD_INT 3
2427: ST_TO_ADDR
// vc_control := control_apeman ;
2428: LD_ADDR_OWVAR 38
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2436: LD_ADDR_OWVAR 40
2440: PUSH
2441: LD_INT 27
2443: PUSH
2444: LD_INT 28
2446: PUSH
2447: LD_INT 29
2449: PUSH
2450: LD_INT 91
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 4
2464: PPUSH
2465: CALL_OW 12
2469: ARRAY
2470: ST_TO_ADDR
// un := CreateVehicle ;
2471: LD_ADDR_VAR 0 4
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// tmp := tmp ^ un ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: LD_VAR 0 4
2495: ADD
2496: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2509: LD_VAR 0 4
2513: PPUSH
2514: LD_INT 5
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: CALL_OW 49
// end ;
2524: GO 2401
2526: POP
2527: POP
// end ; 6 :
2528: GO 2660
2530: LD_INT 6
2532: DOUBLE
2533: EQUAL
2534: IFTRUE 2538
2536: GO 2659
2538: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: DOUBLE
2545: LD_INT 1
2547: DEC
2548: ST_TO_ADDR
2549: LD_INT 2
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: LD_INT 4
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: LD_OWVAR 67
2567: ARRAY
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2655
// begin uc_nation := 2 ;
2572: LD_ADDR_OWVAR 21
2576: PUSH
2577: LD_INT 2
2579: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2580: LD_ADDR_OWVAR 37
2584: PUSH
2585: LD_INT 11
2587: ST_TO_ADDR
// vc_engine := engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// vc_control := control_apeman ;
2596: LD_ADDR_OWVAR 38
2600: PUSH
2601: LD_INT 5
2603: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2604: LD_ADDR_OWVAR 40
2608: PUSH
2609: LD_INT 24
2611: ST_TO_ADDR
// un := CreateVehicle ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: CALL_OW 45
2621: ST_TO_ADDR
// tmp := tmp ^ un ;
2622: LD_ADDR_VAR 0 5
2626: PUSH
2627: LD_VAR 0 5
2631: PUSH
2632: LD_VAR 0 4
2636: ADD
2637: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2638: LD_VAR 0 4
2642: PPUSH
2643: LD_INT 8
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 49
// end ;
2653: GO 2569
2655: POP
2656: POP
// end ; end ;
2657: GO 2660
2659: POP
// result := tmp ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_VAR 0 5
2669: ST_TO_ADDR
// end ;
2670: LD_VAR 0 2
2674: RET
// export function ComitSib ; var un ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
// uc_side := 2 ;
2679: LD_ADDR_OWVAR 20
2683: PUSH
2684: LD_INT 2
2686: ST_TO_ADDR
// uc_nation := 2 ;
2687: LD_ADDR_OWVAR 21
2691: PUSH
2692: LD_INT 2
2694: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2695: LD_INT 0
2697: PPUSH
2698: LD_INT 4
2700: PPUSH
2701: LD_INT 7
2703: PPUSH
2704: CALL_OW 380
// un := CreateHuman ;
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: CALL_OW 44
2717: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2718: LD_VAR 0 2
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_INT 63
2740: PPUSH
2741: LD_INT 37
2743: PPUSH
2744: CALL_OW 158
// end ;
2748: LD_VAR 0 1
2752: RET
// export function DSay ; var i ; begin
2753: LD_INT 0
2755: PPUSH
2756: PPUSH
// Randomize ;
2757: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_INT 8
2771: PPUSH
2772: CALL_OW 12
2776: ST_TO_ADDR
// case i of 1 :
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: DOUBLE
2785: EQUAL
2786: IFTRUE 2790
2788: GO 2805
2790: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2791: LD_EXP 2
2795: PPUSH
2796: LD_STRING DDocA1
2798: PPUSH
2799: CALL_OW 94
2803: GO 2967
2805: LD_INT 2
2807: DOUBLE
2808: EQUAL
2809: IFTRUE 2813
2811: GO 2828
2813: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2814: LD_EXP 2
2818: PPUSH
2819: LD_STRING DDocA2
2821: PPUSH
2822: CALL_OW 94
2826: GO 2967
2828: LD_INT 3
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2851
2836: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2837: LD_EXP 2
2841: PPUSH
2842: LD_STRING DDocA3
2844: PPUSH
2845: CALL_OW 94
2849: GO 2967
2851: LD_INT 4
2853: DOUBLE
2854: EQUAL
2855: IFTRUE 2859
2857: GO 2874
2859: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2860: LD_EXP 2
2864: PPUSH
2865: LD_STRING DDocA4
2867: PPUSH
2868: CALL_OW 94
2872: GO 2967
2874: LD_INT 5
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2897
2882: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2883: LD_EXP 2
2887: PPUSH
2888: LD_STRING DDocA5
2890: PPUSH
2891: CALL_OW 94
2895: GO 2967
2897: LD_INT 6
2899: DOUBLE
2900: EQUAL
2901: IFTRUE 2905
2903: GO 2920
2905: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2906: LD_EXP 2
2910: PPUSH
2911: LD_STRING DDocA6
2913: PPUSH
2914: CALL_OW 94
2918: GO 2967
2920: LD_INT 7
2922: DOUBLE
2923: EQUAL
2924: IFTRUE 2928
2926: GO 2943
2928: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2929: LD_EXP 2
2933: PPUSH
2934: LD_STRING DDocA7
2936: PPUSH
2937: CALL_OW 94
2941: GO 2967
2943: LD_INT 8
2945: DOUBLE
2946: EQUAL
2947: IFTRUE 2951
2949: GO 2966
2951: POP
// SayRadio ( doc , DDocA8 ) ; end ;
2952: LD_EXP 2
2956: PPUSH
2957: LD_STRING DDocA8
2959: PPUSH
2960: CALL_OW 94
2964: GO 2967
2966: POP
// end ; end_of_file
2967: LD_VAR 0 1
2971: RET
// every 0 0$01 do
2972: GO 2974
2974: DISABLE
// begin display_strings := [ #tick , tick ] ;
2975: LD_ADDR_OWVAR 47
2979: PUSH
2980: LD_STRING #tick
2982: PUSH
2983: LD_OWVAR 1
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// enable ;
2992: ENABLE
// end ;
2993: END
// export pom , hover , attackN ; every 1 do
2994: GO 2996
2996: DISABLE
// begin pom := [ ] ;
2997: LD_ADDR_EXP 4
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// hover := [ ] ;
3004: LD_ADDR_EXP 5
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// attackN := 0 ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_INT 0
3018: ST_TO_ADDR
// end ;
3019: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3020: LD_EXP 4
3024: IFFALSE 3446
3026: GO 3028
3028: DISABLE
3029: LD_INT 0
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
// begin enable ;
3035: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: LD_INT 22
3043: PUSH
3044: LD_INT 7
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i = 1 to pom do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_EXP 4
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3130
// if not HasTask ( pom [ i ] ) then
3074: LD_EXP 4
3078: PUSH
3079: LD_VAR 0 1
3083: ARRAY
3084: PPUSH
3085: CALL_OW 314
3089: NOT
3090: IFFALSE 3128
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3092: LD_EXP 4
3096: PUSH
3097: LD_VAR 0 1
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 74
3123: PPUSH
3124: CALL_OW 115
3128: GO 3071
3130: POP
3131: POP
// if hover then
3132: LD_EXP 5
3136: IFFALSE 3446
// begin for i = 1 to hover do
3138: LD_ADDR_VAR 0 1
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 5
3152: PUSH
3153: FOR_TO
3154: IFFALSE 3444
// begin if GetLives ( hover [ i ] ) < 250 then
3156: LD_EXP 5
3160: PUSH
3161: LD_VAR 0 1
3165: ARRAY
3166: PPUSH
3167: CALL_OW 256
3171: PUSH
3172: LD_INT 250
3174: LESS
3175: IFFALSE 3242
// begin for z = 1 to 1 + Difficulty do
3177: LD_ADDR_VAR 0 3
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 1
3189: PUSH
3190: LD_OWVAR 67
3194: PLUS
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3240
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3199: LD_EXP 5
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 5
3219: PUSH
3220: LD_VAR 0 1
3224: ARRAY
3225: PPUSH
3226: CALL_OW 251
3230: PPUSH
3231: LD_INT 10
3233: PPUSH
3234: CALL_OW 453
3238: GO 3196
3240: POP
3241: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3242: LD_VAR 0 2
3246: PPUSH
3247: LD_INT 25
3249: PUSH
3250: LD_INT 2
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: LD_INT 54
3262: PUSH
3263: EMPTY
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 72
3278: PUSH
3279: LD_INT 0
3281: GREATER
3282: IFFALSE 3364
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3284: LD_ADDR_VAR 0 4
3288: PUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_INT 25
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 54
3309: PUSH
3310: EMPTY
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PPUSH
3321: CALL_OW 72
3325: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3326: LD_EXP 5
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_EXP 5
3346: PUSH
3347: LD_VAR 0 1
3351: ARRAY
3352: PPUSH
3353: CALL_OW 74
3357: PPUSH
3358: CALL_OW 115
// end else
3362: GO 3442
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3364: LD_ADDR_VAR 0 4
3368: PUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 54
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 72
3405: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3406: LD_EXP 5
3410: PUSH
3411: LD_VAR 0 1
3415: ARRAY
3416: PPUSH
3417: LD_VAR 0 4
3421: PPUSH
3422: LD_EXP 5
3426: PUSH
3427: LD_VAR 0 1
3431: ARRAY
3432: PPUSH
3433: CALL_OW 74
3437: PPUSH
3438: CALL_OW 115
// end ; end ;
3442: GO 3153
3444: POP
3445: POP
// end ; end ;
3446: PPOPN 4
3448: END
// every 3 3$10 do var i , un ;
3449: GO 3451
3451: DISABLE
3452: LD_INT 0
3454: PPUSH
3455: PPUSH
// begin uc_side := 7 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 7
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// for i = 1 to 2 do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 2
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3651
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3488: LD_INT 1
3490: PPUSH
3491: LD_INT 5
3493: PPUSH
3494: LD_INT 7
3496: PUSH
3497: LD_INT 6
3499: PUSH
3500: LD_INT 6
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PUSH
3508: LD_OWVAR 67
3512: ARRAY
3513: PPUSH
3514: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3518: LD_ADDR_OWVAR 37
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// vc_engine := engine_combustion ;
3526: LD_ADDR_OWVAR 39
3530: PUSH
3531: LD_INT 1
3533: ST_TO_ADDR
// vc_control := control_manual ;
3534: LD_ADDR_OWVAR 38
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3542: LD_ADDR_OWVAR 41
3546: PUSH
3547: LD_INT 66
3549: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3550: LD_ADDR_OWVAR 40
3554: PUSH
3555: LD_INT 2
3557: ST_TO_ADDR
// un := CreateVehicle ;
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: CALL_OW 45
3567: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3568: LD_VAR 0 2
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 48
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3598: CALL_OW 44
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3612: LD_VAR 0 2
3616: PPUSH
3617: LD_INT 49
3619: PPUSH
3620: LD_INT 17
3622: PPUSH
3623: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3627: LD_VAR 0 2
3631: PPUSH
3632: LD_INT 48
3634: PPUSH
3635: LD_INT 36
3637: PPUSH
3638: CALL_OW 171
// Wait ( 0 0$02 ) ;
3642: LD_INT 70
3644: PPUSH
3645: CALL_OW 67
// end ;
3649: GO 3485
3651: POP
3652: POP
// end ;
3653: PPOPN 2
3655: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3656: LD_EXP 6
3660: PUSH
3661: LD_INT 10
3663: PUSH
3664: LD_INT 12
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_OWVAR 67
3679: ARRAY
3680: LESS
3681: IFFALSE 4383
3683: GO 3685
3685: DISABLE
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// begin enable ;
3690: ENABLE
// Randomize ;
3691: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3695: LD_INT 35
3697: PPUSH
3698: LD_INT 6265
3700: PPUSH
3701: CALL_OW 12
3705: PPUSH
3706: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3710: LD_EXP 6
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: PUSH
3729: LD_OWVAR 67
3733: ARRAY
3734: LESS
3735: IFFALSE 3755
// c := Rand ( 1 , 2 ) else
3737: LD_ADDR_VAR 0 1
3741: PUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 12
3752: ST_TO_ADDR
3753: GO 3771
// c := Rand ( 1 , 3 ) ;
3755: LD_ADDR_VAR 0 1
3759: PUSH
3760: LD_INT 1
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: CALL_OW 12
3770: ST_TO_ADDR
// if attackN = 0 then
3771: LD_EXP 6
3775: PUSH
3776: LD_INT 0
3778: EQUAL
3779: IFFALSE 3795
// Say ( com , DJackAttack ) else
3781: LD_EXP 1
3785: PPUSH
3786: LD_STRING DJackAttack
3788: PPUSH
3789: CALL_OW 88
3793: GO 3799
// DSay ;
3795: CALL 2753 0 0
// case c of 1 :
3799: LD_VAR 0 1
3803: PUSH
3804: LD_INT 1
3806: DOUBLE
3807: EQUAL
3808: IFTRUE 3812
3810: GO 3994
3812: POP
// begin pom := pom ^ Attack ( 1 ) ;
3813: LD_ADDR_EXP 4
3817: PUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL 1264 0 1
3830: ADD
3831: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3832: LD_INT 420
3834: PPUSH
3835: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3839: LD_ADDR_EXP 4
3843: PUSH
3844: LD_EXP 4
3848: PUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL 1264 0 1
3856: ADD
3857: ST_TO_ADDR
// if Difficulty > 2 then
3858: LD_OWVAR 67
3862: PUSH
3863: LD_INT 2
3865: GREATER
3866: IFFALSE 3894
// begin Wait ( 0 0$46 ) ;
3868: LD_INT 1610
3870: PPUSH
3871: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3875: LD_ADDR_EXP 4
3879: PUSH
3880: LD_EXP 4
3884: PUSH
3885: LD_INT 4
3887: PPUSH
3888: CALL 1264 0 1
3892: ADD
3893: ST_TO_ADDR
// end ; if attackN > 4 then
3894: LD_EXP 6
3898: PUSH
3899: LD_INT 4
3901: GREATER
3902: IFFALSE 3930
// begin Wait ( 0 0$12 ) ;
3904: LD_INT 420
3906: PPUSH
3907: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3911: LD_ADDR_EXP 4
3915: PUSH
3916: LD_EXP 4
3920: PUSH
3921: LD_INT 3
3923: PPUSH
3924: CALL 1264 0 1
3928: ADD
3929: ST_TO_ADDR
// end ; if attackN > 8 then
3930: LD_EXP 6
3934: PUSH
3935: LD_INT 8
3937: GREATER
3938: IFFALSE 3992
// begin Wait ( 0 0$12 ) ;
3940: LD_INT 420
3942: PPUSH
3943: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3947: LD_ADDR_VAR 0 2
3951: PUSH
3952: LD_INT 0
3954: PPUSH
3955: LD_INT 100
3957: PPUSH
3958: CALL_OW 12
3962: ST_TO_ADDR
// if l < 45 then
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 45
3970: LESS
3971: IFFALSE 3992
// pom := pom ^ Attack ( 2 ) ;
3973: LD_ADDR_EXP 4
3977: PUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL 1264 0 1
3990: ADD
3991: ST_TO_ADDR
// end ; end ; 2 :
3992: GO 4281
3994: LD_INT 2
3996: DOUBLE
3997: EQUAL
3998: IFTRUE 4002
4000: GO 4150
4002: POP
// begin pom := pom ^ Attack ( 2 ) ;
4003: LD_ADDR_EXP 4
4007: PUSH
4008: LD_EXP 4
4012: PUSH
4013: LD_INT 2
4015: PPUSH
4016: CALL 1264 0 1
4020: ADD
4021: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4022: LD_ADDR_EXP 4
4026: PUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 3
4034: PPUSH
4035: CALL 1264 0 1
4039: ADD
4040: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: GREATER
4049: PUSH
4050: LD_INT 63
4052: PPUSH
4053: LD_INT 37
4055: PPUSH
4056: CALL_OW 428
4060: PPUSH
4061: CALL_OW 266
4065: PUSH
4066: LD_INT 30
4068: EQUAL
4069: AND
4070: IFFALSE 4076
// ComitSib ;
4072: CALL 2675 0 0
// if Difficulty > 2 then
4076: LD_OWVAR 67
4080: PUSH
4081: LD_INT 2
4083: GREATER
4084: IFFALSE 4112
// begin Wait ( 0 0$25 ) ;
4086: LD_INT 875
4088: PPUSH
4089: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PUSH
4103: LD_INT 4
4105: PPUSH
4106: CALL 1264 0 1
4110: ADD
4111: ST_TO_ADDR
// end ; if attackN > 7 then
4112: LD_EXP 6
4116: PUSH
4117: LD_INT 7
4119: GREATER
4120: IFFALSE 4148
// begin Wait ( 0 0$15 ) ;
4122: LD_INT 525
4124: PPUSH
4125: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4129: LD_ADDR_EXP 4
4133: PUSH
4134: LD_EXP 4
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL 1264 0 1
4146: ADD
4147: ST_TO_ADDR
// end ; end ; 3 :
4148: GO 4281
4150: LD_INT 3
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4280
4158: POP
// begin pom := pom ^ Attack ( 1 ) ;
4159: LD_ADDR_EXP 4
4163: PUSH
4164: LD_EXP 4
4168: PUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL 1264 0 1
4176: ADD
4177: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4178: LD_INT 70
4180: PPUSH
4181: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4185: LD_ADDR_EXP 4
4189: PUSH
4190: LD_EXP 4
4194: PUSH
4195: LD_INT 2
4197: PPUSH
4198: CALL 1264 0 1
4202: ADD
4203: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4204: LD_INT 2100
4206: PPUSH
4207: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4211: LD_ADDR_EXP 4
4215: PUSH
4216: LD_EXP 4
4220: PUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 1264 0 1
4228: ADD
4229: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4230: LD_ADDR_EXP 4
4234: PUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 5
4242: PPUSH
4243: CALL 1264 0 1
4247: ADD
4248: ST_TO_ADDR
// if attackN > 10 then
4249: LD_EXP 6
4253: PUSH
4254: LD_INT 10
4256: GREATER
4257: IFFALSE 4278
// pom := pom ^ Attack ( 2 ) ;
4259: LD_ADDR_EXP 4
4263: PUSH
4264: LD_EXP 4
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: CALL 1264 0 1
4276: ADD
4277: ST_TO_ADDR
// end ; end ;
4278: GO 4281
4280: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4281: LD_OWVAR 67
4285: PUSH
4286: LD_INT 1
4288: GREATER
4289: PUSH
4290: LD_EXP 6
4294: PUSH
4295: LD_INT 4
4297: MOD
4298: PUSH
4299: LD_INT 0
4301: EQUAL
4302: AND
4303: IFFALSE 4369
// begin Wait ( 1 1$45 ) ;
4305: LD_INT 3675
4307: PPUSH
4308: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4312: LD_ADDR_EXP 4
4316: PUSH
4317: LD_EXP 4
4321: PUSH
4322: LD_INT 3
4324: PPUSH
4325: CALL 1264 0 1
4329: ADD
4330: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4331: LD_ADDR_EXP 4
4335: PUSH
4336: LD_EXP 4
4340: PUSH
4341: LD_INT 4
4343: PPUSH
4344: CALL 1264 0 1
4348: ADD
4349: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4350: LD_ADDR_EXP 5
4354: PUSH
4355: LD_EXP 5
4359: PUSH
4360: LD_INT 6
4362: PPUSH
4363: CALL 1264 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4369: LD_ADDR_EXP 6
4373: PUSH
4374: LD_EXP 6
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: ST_TO_ADDR
// end ;
4383: PPOPN 2
4385: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4386: LD_EXP 6
4390: PUSH
4391: LD_INT 10
4393: PUSH
4394: LD_INT 12
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: PUSH
4405: LD_OWVAR 67
4409: ARRAY
4410: GREATEREQUAL
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: AND
4431: IFFALSE 4487
4433: GO 4435
4435: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4436: LD_EXP 2
4440: PPUSH
4441: LD_STRING DDocEnd
4443: PPUSH
4444: CALL_OW 94
// Wait ( 0 0$03 ) ;
4448: LD_INT 105
4450: PPUSH
4451: CALL_OW 67
// case Query ( QWin ) of 1 :
4455: LD_STRING QWin
4457: PPUSH
4458: CALL_OW 97
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4474
4471: POP
// ; end ;
4472: GO 4475
4474: POP
// music_nat := 5 ;
4475: LD_ADDR_OWVAR 71
4479: PUSH
4480: LD_INT 5
4482: ST_TO_ADDR
// YouWin ;
4483: CALL_OW 103
// end ; end_of_file
4487: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL 15742 0 1
// if un = brave or un = com then
4497: LD_VAR 0 1
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: PUSH
4506: LD_VAR 0 1
4510: PUSH
4511: LD_EXP 1
4515: EQUAL
4516: OR
4517: IFFALSE 4538
// begin SayRadio ( doc , DDocWin ) ;
4519: LD_EXP 2
4523: PPUSH
4524: LD_STRING DDocWin
4526: PPUSH
4527: CALL_OW 94
// YouLost (  ) ;
4531: LD_STRING 
4533: PPUSH
4534: CALL_OW 104
// end ; end ;
4538: PPOPN 1
4540: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4541: LD_VAR 0 1
4545: PPUSH
4546: LD_VAR 0 2
4550: PPUSH
4551: LD_VAR 0 3
4555: PPUSH
4556: CALL 15840 0 3
// end ;
4560: PPOPN 3
4562: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4563: LD_VAR 0 1
4567: PPUSH
4568: CALL 15848 0 1
// end ; end_of_file
4572: PPOPN 1
4574: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
4575: GO 4577
4577: DISABLE
// begin ru_radar := 98 ;
4578: LD_ADDR_EXP 7
4582: PUSH
4583: LD_INT 98
4585: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4586: LD_ADDR_EXP 8
4590: PUSH
4591: LD_INT 89
4593: ST_TO_ADDR
// us_hack := 99 ;
4594: LD_ADDR_EXP 9
4598: PUSH
4599: LD_INT 99
4601: ST_TO_ADDR
// us_artillery := 97 ;
4602: LD_ADDR_EXP 10
4606: PUSH
4607: LD_INT 97
4609: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4610: LD_ADDR_EXP 11
4614: PUSH
4615: LD_INT 91
4617: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4618: LD_ADDR_EXP 12
4622: PUSH
4623: LD_INT 92
4625: ST_TO_ADDR
// tech_Artillery := 80 ;
4626: LD_ADDR_EXP 13
4630: PUSH
4631: LD_INT 80
4633: ST_TO_ADDR
// tech_RadMat := 81 ;
4634: LD_ADDR_EXP 14
4638: PUSH
4639: LD_INT 81
4641: ST_TO_ADDR
// tech_BasicTools := 82 ;
4642: LD_ADDR_EXP 15
4646: PUSH
4647: LD_INT 82
4649: ST_TO_ADDR
// tech_Cargo := 83 ;
4650: LD_ADDR_EXP 16
4654: PUSH
4655: LD_INT 83
4657: ST_TO_ADDR
// tech_Track := 84 ;
4658: LD_ADDR_EXP 17
4662: PUSH
4663: LD_INT 84
4665: ST_TO_ADDR
// tech_Crane := 85 ;
4666: LD_ADDR_EXP 18
4670: PUSH
4671: LD_INT 85
4673: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4674: LD_ADDR_EXP 19
4678: PUSH
4679: LD_INT 86
4681: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4682: LD_ADDR_EXP 20
4686: PUSH
4687: LD_INT 87
4689: ST_TO_ADDR
// end ; end_of_file end_of_file
4690: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4691: GO 4693
4693: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4694: LD_STRING initStreamRollete();
4696: PPUSH
4697: CALL_OW 559
// InitStreamMode ;
4701: CALL 4710 0 0
// DefineStreamItems ( ) ;
4705: CALL 5150 0 0
// end ;
4709: END
// function InitStreamMode ; begin
4710: LD_INT 0
4712: PPUSH
// streamModeActive := false ;
4713: LD_ADDR_EXP 21
4717: PUSH
4718: LD_INT 0
4720: ST_TO_ADDR
// normalCounter := 36 ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 36
4728: ST_TO_ADDR
// hardcoreCounter := 16 ;
4729: LD_ADDR_EXP 23
4733: PUSH
4734: LD_INT 16
4736: ST_TO_ADDR
// sRocket := false ;
4737: LD_ADDR_EXP 26
4741: PUSH
4742: LD_INT 0
4744: ST_TO_ADDR
// sSpeed := false ;
4745: LD_ADDR_EXP 25
4749: PUSH
4750: LD_INT 0
4752: ST_TO_ADDR
// sEngine := false ;
4753: LD_ADDR_EXP 27
4757: PUSH
4758: LD_INT 0
4760: ST_TO_ADDR
// sSpec := false ;
4761: LD_ADDR_EXP 24
4765: PUSH
4766: LD_INT 0
4768: ST_TO_ADDR
// sLevel := false ;
4769: LD_ADDR_EXP 28
4773: PUSH
4774: LD_INT 0
4776: ST_TO_ADDR
// sArmoury := false ;
4777: LD_ADDR_EXP 29
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// sRadar := false ;
4785: LD_ADDR_EXP 30
4789: PUSH
4790: LD_INT 0
4792: ST_TO_ADDR
// sBunker := false ;
4793: LD_ADDR_EXP 31
4797: PUSH
4798: LD_INT 0
4800: ST_TO_ADDR
// sHack := false ;
4801: LD_ADDR_EXP 32
4805: PUSH
4806: LD_INT 0
4808: ST_TO_ADDR
// sFire := false ;
4809: LD_ADDR_EXP 33
4813: PUSH
4814: LD_INT 0
4816: ST_TO_ADDR
// sRefresh := false ;
4817: LD_ADDR_EXP 34
4821: PUSH
4822: LD_INT 0
4824: ST_TO_ADDR
// sExp := false ;
4825: LD_ADDR_EXP 35
4829: PUSH
4830: LD_INT 0
4832: ST_TO_ADDR
// sDepot := false ;
4833: LD_ADDR_EXP 36
4837: PUSH
4838: LD_INT 0
4840: ST_TO_ADDR
// sFlag := false ;
4841: LD_ADDR_EXP 37
4845: PUSH
4846: LD_INT 0
4848: ST_TO_ADDR
// sKamikadze := false ;
4849: LD_ADDR_EXP 45
4853: PUSH
4854: LD_INT 0
4856: ST_TO_ADDR
// sTroll := false ;
4857: LD_ADDR_EXP 46
4861: PUSH
4862: LD_INT 0
4864: ST_TO_ADDR
// sSlow := false ;
4865: LD_ADDR_EXP 47
4869: PUSH
4870: LD_INT 0
4872: ST_TO_ADDR
// sLack := false ;
4873: LD_ADDR_EXP 48
4877: PUSH
4878: LD_INT 0
4880: ST_TO_ADDR
// sTank := false ;
4881: LD_ADDR_EXP 50
4885: PUSH
4886: LD_INT 0
4888: ST_TO_ADDR
// sRemote := false ;
4889: LD_ADDR_EXP 51
4893: PUSH
4894: LD_INT 0
4896: ST_TO_ADDR
// sPowell := false ;
4897: LD_ADDR_EXP 52
4901: PUSH
4902: LD_INT 0
4904: ST_TO_ADDR
// sTeleport := false ;
4905: LD_ADDR_EXP 55
4909: PUSH
4910: LD_INT 0
4912: ST_TO_ADDR
// sOilTower := false ;
4913: LD_ADDR_EXP 57
4917: PUSH
4918: LD_INT 0
4920: ST_TO_ADDR
// sShovel := false ;
4921: LD_ADDR_EXP 58
4925: PUSH
4926: LD_INT 0
4928: ST_TO_ADDR
// sSheik := false ;
4929: LD_ADDR_EXP 59
4933: PUSH
4934: LD_INT 0
4936: ST_TO_ADDR
// sEarthquake := false ;
4937: LD_ADDR_EXP 61
4941: PUSH
4942: LD_INT 0
4944: ST_TO_ADDR
// sAI := false ;
4945: LD_ADDR_EXP 62
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// sCargo := false ;
4953: LD_ADDR_EXP 65
4957: PUSH
4958: LD_INT 0
4960: ST_TO_ADDR
// sDLaser := false ;
4961: LD_ADDR_EXP 66
4965: PUSH
4966: LD_INT 0
4968: ST_TO_ADDR
// sExchange := false ;
4969: LD_ADDR_EXP 67
4973: PUSH
4974: LD_INT 0
4976: ST_TO_ADDR
// sFac := false ;
4977: LD_ADDR_EXP 68
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// sPower := false ;
4985: LD_ADDR_EXP 69
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// sRandom := false ;
4993: LD_ADDR_EXP 70
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// sShield := false ;
5001: LD_ADDR_EXP 71
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// sTime := false ;
5009: LD_ADDR_EXP 72
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// sTools := false ;
5017: LD_ADDR_EXP 73
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// sSold := false ;
5025: LD_ADDR_EXP 38
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// sDiff := false ;
5033: LD_ADDR_EXP 39
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// sFog := false ;
5041: LD_ADDR_EXP 42
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// sReset := false ;
5049: LD_ADDR_EXP 43
5053: PUSH
5054: LD_INT 0
5056: ST_TO_ADDR
// sSun := false ;
5057: LD_ADDR_EXP 44
5061: PUSH
5062: LD_INT 0
5064: ST_TO_ADDR
// sTiger := false ;
5065: LD_ADDR_EXP 40
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// sBomb := false ;
5073: LD_ADDR_EXP 41
5077: PUSH
5078: LD_INT 0
5080: ST_TO_ADDR
// sWound := false ;
5081: LD_ADDR_EXP 49
5085: PUSH
5086: LD_INT 0
5088: ST_TO_ADDR
// sBetray := false ;
5089: LD_ADDR_EXP 53
5093: PUSH
5094: LD_INT 0
5096: ST_TO_ADDR
// sContamin := false ;
5097: LD_ADDR_EXP 54
5101: PUSH
5102: LD_INT 0
5104: ST_TO_ADDR
// sOil := false ;
5105: LD_ADDR_EXP 56
5109: PUSH
5110: LD_INT 0
5112: ST_TO_ADDR
// sStu := false ;
5113: LD_ADDR_EXP 60
5117: PUSH
5118: LD_INT 0
5120: ST_TO_ADDR
// sBazooka := false ;
5121: LD_ADDR_EXP 63
5125: PUSH
5126: LD_INT 0
5128: ST_TO_ADDR
// sMortar := false ;
5129: LD_ADDR_EXP 64
5133: PUSH
5134: LD_INT 0
5136: ST_TO_ADDR
// sRanger := false ;
5137: LD_ADDR_EXP 74
5141: PUSH
5142: LD_INT 0
5144: ST_TO_ADDR
// end ;
5145: LD_VAR 0 1
5149: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5150: LD_INT 0
5152: PPUSH
5153: PPUSH
5154: PPUSH
5155: PPUSH
5156: PPUSH
// result := [ ] ;
5157: LD_ADDR_VAR 0 1
5161: PUSH
5162: EMPTY
5163: ST_TO_ADDR
// if campaign_id = 1 then
5164: LD_OWVAR 69
5168: PUSH
5169: LD_INT 1
5171: EQUAL
5172: IFFALSE 8110
// begin case mission_number of 1 :
5174: LD_OWVAR 70
5178: PUSH
5179: LD_INT 1
5181: DOUBLE
5182: EQUAL
5183: IFTRUE 5187
5185: GO 5251
5187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5188: LD_ADDR_VAR 0 1
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 15
5207: PUSH
5208: LD_INT 16
5210: PUSH
5211: LD_INT 22
5213: PUSH
5214: LD_INT 23
5216: PUSH
5217: LD_INT 26
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 101
5233: PUSH
5234: LD_INT 102
5236: PUSH
5237: LD_INT 106
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: ST_TO_ADDR
5249: GO 8108
5251: LD_INT 2
5253: DOUBLE
5254: EQUAL
5255: IFTRUE 5259
5257: GO 5331
5259: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: LD_INT 2
5267: PUSH
5268: LD_INT 4
5270: PUSH
5271: LD_INT 11
5273: PUSH
5274: LD_INT 12
5276: PUSH
5277: LD_INT 15
5279: PUSH
5280: LD_INT 16
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_INT 23
5288: PUSH
5289: LD_INT 26
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 101
5305: PUSH
5306: LD_INT 102
5308: PUSH
5309: LD_INT 105
5311: PUSH
5312: LD_INT 106
5314: PUSH
5315: LD_INT 108
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: ST_TO_ADDR
5329: GO 8108
5331: LD_INT 3
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5415
5339: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5340: LD_ADDR_VAR 0 1
5344: PUSH
5345: LD_INT 2
5347: PUSH
5348: LD_INT 4
5350: PUSH
5351: LD_INT 5
5353: PUSH
5354: LD_INT 11
5356: PUSH
5357: LD_INT 12
5359: PUSH
5360: LD_INT 15
5362: PUSH
5363: LD_INT 16
5365: PUSH
5366: LD_INT 22
5368: PUSH
5369: LD_INT 26
5371: PUSH
5372: LD_INT 36
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 101
5389: PUSH
5390: LD_INT 102
5392: PUSH
5393: LD_INT 105
5395: PUSH
5396: LD_INT 106
5398: PUSH
5399: LD_INT 108
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: ST_TO_ADDR
5413: GO 8108
5415: LD_INT 4
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5507
5423: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: LD_INT 5
5437: PUSH
5438: LD_INT 8
5440: PUSH
5441: LD_INT 11
5443: PUSH
5444: LD_INT 12
5446: PUSH
5447: LD_INT 15
5449: PUSH
5450: LD_INT 16
5452: PUSH
5453: LD_INT 22
5455: PUSH
5456: LD_INT 23
5458: PUSH
5459: LD_INT 26
5461: PUSH
5462: LD_INT 36
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 101
5481: PUSH
5482: LD_INT 102
5484: PUSH
5485: LD_INT 105
5487: PUSH
5488: LD_INT 106
5490: PUSH
5491: LD_INT 108
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: ST_TO_ADDR
5505: GO 8108
5507: LD_INT 5
5509: DOUBLE
5510: EQUAL
5511: IFTRUE 5515
5513: GO 5615
5515: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5516: LD_ADDR_VAR 0 1
5520: PUSH
5521: LD_INT 2
5523: PUSH
5524: LD_INT 4
5526: PUSH
5527: LD_INT 5
5529: PUSH
5530: LD_INT 6
5532: PUSH
5533: LD_INT 8
5535: PUSH
5536: LD_INT 11
5538: PUSH
5539: LD_INT 12
5541: PUSH
5542: LD_INT 15
5544: PUSH
5545: LD_INT 16
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 25
5556: PUSH
5557: LD_INT 26
5559: PUSH
5560: LD_INT 36
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 101
5581: PUSH
5582: LD_INT 102
5584: PUSH
5585: LD_INT 105
5587: PUSH
5588: LD_INT 106
5590: PUSH
5591: LD_INT 108
5593: PUSH
5594: LD_INT 109
5596: PUSH
5597: LD_INT 112
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: ST_TO_ADDR
5613: GO 8108
5615: LD_INT 6
5617: DOUBLE
5618: EQUAL
5619: IFTRUE 5623
5621: GO 5743
5623: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5624: LD_ADDR_VAR 0 1
5628: PUSH
5629: LD_INT 2
5631: PUSH
5632: LD_INT 4
5634: PUSH
5635: LD_INT 5
5637: PUSH
5638: LD_INT 6
5640: PUSH
5641: LD_INT 8
5643: PUSH
5644: LD_INT 11
5646: PUSH
5647: LD_INT 12
5649: PUSH
5650: LD_INT 15
5652: PUSH
5653: LD_INT 16
5655: PUSH
5656: LD_INT 20
5658: PUSH
5659: LD_INT 21
5661: PUSH
5662: LD_INT 22
5664: PUSH
5665: LD_INT 23
5667: PUSH
5668: LD_INT 25
5670: PUSH
5671: LD_INT 26
5673: PUSH
5674: LD_INT 30
5676: PUSH
5677: LD_INT 31
5679: PUSH
5680: LD_INT 32
5682: PUSH
5683: LD_INT 36
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 101
5709: PUSH
5710: LD_INT 102
5712: PUSH
5713: LD_INT 105
5715: PUSH
5716: LD_INT 106
5718: PUSH
5719: LD_INT 108
5721: PUSH
5722: LD_INT 109
5724: PUSH
5725: LD_INT 112
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 8108
5743: LD_INT 7
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5851
5751: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5752: LD_ADDR_VAR 0 1
5756: PUSH
5757: LD_INT 2
5759: PUSH
5760: LD_INT 4
5762: PUSH
5763: LD_INT 5
5765: PUSH
5766: LD_INT 7
5768: PUSH
5769: LD_INT 11
5771: PUSH
5772: LD_INT 12
5774: PUSH
5775: LD_INT 15
5777: PUSH
5778: LD_INT 16
5780: PUSH
5781: LD_INT 20
5783: PUSH
5784: LD_INT 21
5786: PUSH
5787: LD_INT 22
5789: PUSH
5790: LD_INT 23
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 26
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 101
5817: PUSH
5818: LD_INT 102
5820: PUSH
5821: LD_INT 103
5823: PUSH
5824: LD_INT 105
5826: PUSH
5827: LD_INT 106
5829: PUSH
5830: LD_INT 108
5832: PUSH
5833: LD_INT 112
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: ST_TO_ADDR
5849: GO 8108
5851: LD_INT 8
5853: DOUBLE
5854: EQUAL
5855: IFTRUE 5859
5857: GO 5987
5859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5860: LD_ADDR_VAR 0 1
5864: PUSH
5865: LD_INT 2
5867: PUSH
5868: LD_INT 4
5870: PUSH
5871: LD_INT 5
5873: PUSH
5874: LD_INT 6
5876: PUSH
5877: LD_INT 7
5879: PUSH
5880: LD_INT 8
5882: PUSH
5883: LD_INT 11
5885: PUSH
5886: LD_INT 12
5888: PUSH
5889: LD_INT 15
5891: PUSH
5892: LD_INT 16
5894: PUSH
5895: LD_INT 20
5897: PUSH
5898: LD_INT 21
5900: PUSH
5901: LD_INT 22
5903: PUSH
5904: LD_INT 23
5906: PUSH
5907: LD_INT 25
5909: PUSH
5910: LD_INT 26
5912: PUSH
5913: LD_INT 30
5915: PUSH
5916: LD_INT 31
5918: PUSH
5919: LD_INT 32
5921: PUSH
5922: LD_INT 36
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 101
5949: PUSH
5950: LD_INT 102
5952: PUSH
5953: LD_INT 103
5955: PUSH
5956: LD_INT 105
5958: PUSH
5959: LD_INT 106
5961: PUSH
5962: LD_INT 108
5964: PUSH
5965: LD_INT 109
5967: PUSH
5968: LD_INT 112
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: ST_TO_ADDR
5985: GO 8108
5987: LD_INT 9
5989: DOUBLE
5990: EQUAL
5991: IFTRUE 5995
5993: GO 6131
5995: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5996: LD_ADDR_VAR 0 1
6000: PUSH
6001: LD_INT 2
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: LD_INT 8
6018: PUSH
6019: LD_INT 11
6021: PUSH
6022: LD_INT 12
6024: PUSH
6025: LD_INT 15
6027: PUSH
6028: LD_INT 16
6030: PUSH
6031: LD_INT 20
6033: PUSH
6034: LD_INT 21
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 23
6042: PUSH
6043: LD_INT 25
6045: PUSH
6046: LD_INT 26
6048: PUSH
6049: LD_INT 28
6051: PUSH
6052: LD_INT 30
6054: PUSH
6055: LD_INT 31
6057: PUSH
6058: LD_INT 32
6060: PUSH
6061: LD_INT 36
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 101
6089: PUSH
6090: LD_INT 102
6092: PUSH
6093: LD_INT 103
6095: PUSH
6096: LD_INT 105
6098: PUSH
6099: LD_INT 106
6101: PUSH
6102: LD_INT 108
6104: PUSH
6105: LD_INT 109
6107: PUSH
6108: LD_INT 112
6110: PUSH
6111: LD_INT 114
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: ST_TO_ADDR
6129: GO 8108
6131: LD_INT 10
6133: DOUBLE
6134: EQUAL
6135: IFTRUE 6139
6137: GO 6323
6139: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6140: LD_ADDR_VAR 0 1
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 4
6150: PUSH
6151: LD_INT 5
6153: PUSH
6154: LD_INT 6
6156: PUSH
6157: LD_INT 7
6159: PUSH
6160: LD_INT 8
6162: PUSH
6163: LD_INT 9
6165: PUSH
6166: LD_INT 10
6168: PUSH
6169: LD_INT 11
6171: PUSH
6172: LD_INT 12
6174: PUSH
6175: LD_INT 13
6177: PUSH
6178: LD_INT 14
6180: PUSH
6181: LD_INT 15
6183: PUSH
6184: LD_INT 16
6186: PUSH
6187: LD_INT 17
6189: PUSH
6190: LD_INT 18
6192: PUSH
6193: LD_INT 19
6195: PUSH
6196: LD_INT 20
6198: PUSH
6199: LD_INT 21
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 23
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 25
6213: PUSH
6214: LD_INT 26
6216: PUSH
6217: LD_INT 28
6219: PUSH
6220: LD_INT 30
6222: PUSH
6223: LD_INT 31
6225: PUSH
6226: LD_INT 32
6228: PUSH
6229: LD_INT 36
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 101
6265: PUSH
6266: LD_INT 102
6268: PUSH
6269: LD_INT 103
6271: PUSH
6272: LD_INT 104
6274: PUSH
6275: LD_INT 105
6277: PUSH
6278: LD_INT 106
6280: PUSH
6281: LD_INT 107
6283: PUSH
6284: LD_INT 108
6286: PUSH
6287: LD_INT 109
6289: PUSH
6290: LD_INT 110
6292: PUSH
6293: LD_INT 111
6295: PUSH
6296: LD_INT 112
6298: PUSH
6299: LD_INT 114
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: ST_TO_ADDR
6321: GO 8108
6323: LD_INT 11
6325: DOUBLE
6326: EQUAL
6327: IFTRUE 6331
6329: GO 6523
6331: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6332: LD_ADDR_VAR 0 1
6336: PUSH
6337: LD_INT 2
6339: PUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 4
6345: PUSH
6346: LD_INT 5
6348: PUSH
6349: LD_INT 6
6351: PUSH
6352: LD_INT 7
6354: PUSH
6355: LD_INT 8
6357: PUSH
6358: LD_INT 9
6360: PUSH
6361: LD_INT 10
6363: PUSH
6364: LD_INT 11
6366: PUSH
6367: LD_INT 12
6369: PUSH
6370: LD_INT 13
6372: PUSH
6373: LD_INT 14
6375: PUSH
6376: LD_INT 15
6378: PUSH
6379: LD_INT 16
6381: PUSH
6382: LD_INT 17
6384: PUSH
6385: LD_INT 18
6387: PUSH
6388: LD_INT 19
6390: PUSH
6391: LD_INT 20
6393: PUSH
6394: LD_INT 21
6396: PUSH
6397: LD_INT 22
6399: PUSH
6400: LD_INT 23
6402: PUSH
6403: LD_INT 24
6405: PUSH
6406: LD_INT 25
6408: PUSH
6409: LD_INT 26
6411: PUSH
6412: LD_INT 28
6414: PUSH
6415: LD_INT 30
6417: PUSH
6418: LD_INT 31
6420: PUSH
6421: LD_INT 32
6423: PUSH
6424: LD_INT 34
6426: PUSH
6427: LD_INT 36
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 101
6465: PUSH
6466: LD_INT 102
6468: PUSH
6469: LD_INT 103
6471: PUSH
6472: LD_INT 104
6474: PUSH
6475: LD_INT 105
6477: PUSH
6478: LD_INT 106
6480: PUSH
6481: LD_INT 107
6483: PUSH
6484: LD_INT 108
6486: PUSH
6487: LD_INT 109
6489: PUSH
6490: LD_INT 110
6492: PUSH
6493: LD_INT 111
6495: PUSH
6496: LD_INT 112
6498: PUSH
6499: LD_INT 114
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: ST_TO_ADDR
6521: GO 8108
6523: LD_INT 12
6525: DOUBLE
6526: EQUAL
6527: IFTRUE 6531
6529: GO 6739
6531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6532: LD_ADDR_VAR 0 1
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: LD_INT 2
6542: PUSH
6543: LD_INT 3
6545: PUSH
6546: LD_INT 4
6548: PUSH
6549: LD_INT 5
6551: PUSH
6552: LD_INT 6
6554: PUSH
6555: LD_INT 7
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: LD_INT 9
6563: PUSH
6564: LD_INT 10
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 13
6575: PUSH
6576: LD_INT 14
6578: PUSH
6579: LD_INT 15
6581: PUSH
6582: LD_INT 16
6584: PUSH
6585: LD_INT 17
6587: PUSH
6588: LD_INT 18
6590: PUSH
6591: LD_INT 19
6593: PUSH
6594: LD_INT 20
6596: PUSH
6597: LD_INT 21
6599: PUSH
6600: LD_INT 22
6602: PUSH
6603: LD_INT 23
6605: PUSH
6606: LD_INT 24
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 26
6614: PUSH
6615: LD_INT 27
6617: PUSH
6618: LD_INT 28
6620: PUSH
6621: LD_INT 30
6623: PUSH
6624: LD_INT 31
6626: PUSH
6627: LD_INT 32
6629: PUSH
6630: LD_INT 33
6632: PUSH
6633: LD_INT 34
6635: PUSH
6636: LD_INT 36
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 101
6677: PUSH
6678: LD_INT 102
6680: PUSH
6681: LD_INT 103
6683: PUSH
6684: LD_INT 104
6686: PUSH
6687: LD_INT 105
6689: PUSH
6690: LD_INT 106
6692: PUSH
6693: LD_INT 107
6695: PUSH
6696: LD_INT 108
6698: PUSH
6699: LD_INT 109
6701: PUSH
6702: LD_INT 110
6704: PUSH
6705: LD_INT 111
6707: PUSH
6708: LD_INT 112
6710: PUSH
6711: LD_INT 113
6713: PUSH
6714: LD_INT 114
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 8108
6739: LD_INT 13
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6943
6747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 8
6770: PUSH
6771: LD_INT 9
6773: PUSH
6774: LD_INT 10
6776: PUSH
6777: LD_INT 11
6779: PUSH
6780: LD_INT 12
6782: PUSH
6783: LD_INT 14
6785: PUSH
6786: LD_INT 15
6788: PUSH
6789: LD_INT 16
6791: PUSH
6792: LD_INT 17
6794: PUSH
6795: LD_INT 18
6797: PUSH
6798: LD_INT 19
6800: PUSH
6801: LD_INT 20
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 23
6812: PUSH
6813: LD_INT 24
6815: PUSH
6816: LD_INT 25
6818: PUSH
6819: LD_INT 26
6821: PUSH
6822: LD_INT 27
6824: PUSH
6825: LD_INT 28
6827: PUSH
6828: LD_INT 30
6830: PUSH
6831: LD_INT 31
6833: PUSH
6834: LD_INT 32
6836: PUSH
6837: LD_INT 33
6839: PUSH
6840: LD_INT 34
6842: PUSH
6843: LD_INT 36
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 101
6881: PUSH
6882: LD_INT 102
6884: PUSH
6885: LD_INT 103
6887: PUSH
6888: LD_INT 104
6890: PUSH
6891: LD_INT 105
6893: PUSH
6894: LD_INT 106
6896: PUSH
6897: LD_INT 107
6899: PUSH
6900: LD_INT 108
6902: PUSH
6903: LD_INT 109
6905: PUSH
6906: LD_INT 110
6908: PUSH
6909: LD_INT 111
6911: PUSH
6912: LD_INT 112
6914: PUSH
6915: LD_INT 113
6917: PUSH
6918: LD_INT 114
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: ST_TO_ADDR
6941: GO 8108
6943: LD_INT 14
6945: DOUBLE
6946: EQUAL
6947: IFTRUE 6951
6949: GO 7163
6951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6952: LD_ADDR_VAR 0 1
6956: PUSH
6957: LD_INT 1
6959: PUSH
6960: LD_INT 2
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: LD_INT 4
6968: PUSH
6969: LD_INT 5
6971: PUSH
6972: LD_INT 6
6974: PUSH
6975: LD_INT 7
6977: PUSH
6978: LD_INT 8
6980: PUSH
6981: LD_INT 9
6983: PUSH
6984: LD_INT 10
6986: PUSH
6987: LD_INT 11
6989: PUSH
6990: LD_INT 12
6992: PUSH
6993: LD_INT 13
6995: PUSH
6996: LD_INT 14
6998: PUSH
6999: LD_INT 15
7001: PUSH
7002: LD_INT 16
7004: PUSH
7005: LD_INT 17
7007: PUSH
7008: LD_INT 18
7010: PUSH
7011: LD_INT 19
7013: PUSH
7014: LD_INT 20
7016: PUSH
7017: LD_INT 21
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_INT 23
7025: PUSH
7026: LD_INT 24
7028: PUSH
7029: LD_INT 25
7031: PUSH
7032: LD_INT 26
7034: PUSH
7035: LD_INT 27
7037: PUSH
7038: LD_INT 28
7040: PUSH
7041: LD_INT 29
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 31
7049: PUSH
7050: LD_INT 32
7052: PUSH
7053: LD_INT 33
7055: PUSH
7056: LD_INT 34
7058: PUSH
7059: LD_INT 36
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 101
7101: PUSH
7102: LD_INT 102
7104: PUSH
7105: LD_INT 103
7107: PUSH
7108: LD_INT 104
7110: PUSH
7111: LD_INT 105
7113: PUSH
7114: LD_INT 106
7116: PUSH
7117: LD_INT 107
7119: PUSH
7120: LD_INT 108
7122: PUSH
7123: LD_INT 109
7125: PUSH
7126: LD_INT 110
7128: PUSH
7129: LD_INT 111
7131: PUSH
7132: LD_INT 112
7134: PUSH
7135: LD_INT 113
7137: PUSH
7138: LD_INT 114
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 8108
7163: LD_INT 15
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7383
7171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7172: LD_ADDR_VAR 0 1
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 4
7188: PUSH
7189: LD_INT 5
7191: PUSH
7192: LD_INT 6
7194: PUSH
7195: LD_INT 7
7197: PUSH
7198: LD_INT 8
7200: PUSH
7201: LD_INT 9
7203: PUSH
7204: LD_INT 10
7206: PUSH
7207: LD_INT 11
7209: PUSH
7210: LD_INT 12
7212: PUSH
7213: LD_INT 13
7215: PUSH
7216: LD_INT 14
7218: PUSH
7219: LD_INT 15
7221: PUSH
7222: LD_INT 16
7224: PUSH
7225: LD_INT 17
7227: PUSH
7228: LD_INT 18
7230: PUSH
7231: LD_INT 19
7233: PUSH
7234: LD_INT 20
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 26
7254: PUSH
7255: LD_INT 27
7257: PUSH
7258: LD_INT 28
7260: PUSH
7261: LD_INT 29
7263: PUSH
7264: LD_INT 30
7266: PUSH
7267: LD_INT 31
7269: PUSH
7270: LD_INT 32
7272: PUSH
7273: LD_INT 33
7275: PUSH
7276: LD_INT 34
7278: PUSH
7279: LD_INT 36
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 101
7321: PUSH
7322: LD_INT 102
7324: PUSH
7325: LD_INT 103
7327: PUSH
7328: LD_INT 104
7330: PUSH
7331: LD_INT 105
7333: PUSH
7334: LD_INT 106
7336: PUSH
7337: LD_INT 107
7339: PUSH
7340: LD_INT 108
7342: PUSH
7343: LD_INT 109
7345: PUSH
7346: LD_INT 110
7348: PUSH
7349: LD_INT 111
7351: PUSH
7352: LD_INT 112
7354: PUSH
7355: LD_INT 113
7357: PUSH
7358: LD_INT 114
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: ST_TO_ADDR
7381: GO 8108
7383: LD_INT 16
7385: DOUBLE
7386: EQUAL
7387: IFTRUE 7391
7389: GO 7515
7391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7392: LD_ADDR_VAR 0 1
7396: PUSH
7397: LD_INT 2
7399: PUSH
7400: LD_INT 4
7402: PUSH
7403: LD_INT 5
7405: PUSH
7406: LD_INT 7
7408: PUSH
7409: LD_INT 11
7411: PUSH
7412: LD_INT 12
7414: PUSH
7415: LD_INT 15
7417: PUSH
7418: LD_INT 16
7420: PUSH
7421: LD_INT 20
7423: PUSH
7424: LD_INT 21
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_INT 23
7432: PUSH
7433: LD_INT 25
7435: PUSH
7436: LD_INT 26
7438: PUSH
7439: LD_INT 30
7441: PUSH
7442: LD_INT 31
7444: PUSH
7445: LD_INT 32
7447: PUSH
7448: LD_INT 33
7450: PUSH
7451: LD_INT 34
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 101
7477: PUSH
7478: LD_INT 102
7480: PUSH
7481: LD_INT 103
7483: PUSH
7484: LD_INT 106
7486: PUSH
7487: LD_INT 108
7489: PUSH
7490: LD_INT 112
7492: PUSH
7493: LD_INT 113
7495: PUSH
7496: LD_INT 114
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: ST_TO_ADDR
7513: GO 8108
7515: LD_INT 17
7517: DOUBLE
7518: EQUAL
7519: IFTRUE 7523
7521: GO 7735
7523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7524: LD_ADDR_VAR 0 1
7528: PUSH
7529: LD_INT 1
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: LD_INT 3
7537: PUSH
7538: LD_INT 4
7540: PUSH
7541: LD_INT 5
7543: PUSH
7544: LD_INT 6
7546: PUSH
7547: LD_INT 7
7549: PUSH
7550: LD_INT 8
7552: PUSH
7553: LD_INT 9
7555: PUSH
7556: LD_INT 10
7558: PUSH
7559: LD_INT 11
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: LD_INT 13
7567: PUSH
7568: LD_INT 14
7570: PUSH
7571: LD_INT 15
7573: PUSH
7574: LD_INT 16
7576: PUSH
7577: LD_INT 17
7579: PUSH
7580: LD_INT 18
7582: PUSH
7583: LD_INT 19
7585: PUSH
7586: LD_INT 20
7588: PUSH
7589: LD_INT 21
7591: PUSH
7592: LD_INT 22
7594: PUSH
7595: LD_INT 23
7597: PUSH
7598: LD_INT 24
7600: PUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 27
7609: PUSH
7610: LD_INT 28
7612: PUSH
7613: LD_INT 29
7615: PUSH
7616: LD_INT 30
7618: PUSH
7619: LD_INT 31
7621: PUSH
7622: LD_INT 32
7624: PUSH
7625: LD_INT 33
7627: PUSH
7628: LD_INT 34
7630: PUSH
7631: LD_INT 36
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 101
7673: PUSH
7674: LD_INT 102
7676: PUSH
7677: LD_INT 103
7679: PUSH
7680: LD_INT 104
7682: PUSH
7683: LD_INT 105
7685: PUSH
7686: LD_INT 106
7688: PUSH
7689: LD_INT 107
7691: PUSH
7692: LD_INT 108
7694: PUSH
7695: LD_INT 109
7697: PUSH
7698: LD_INT 110
7700: PUSH
7701: LD_INT 111
7703: PUSH
7704: LD_INT 112
7706: PUSH
7707: LD_INT 113
7709: PUSH
7710: LD_INT 114
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: ST_TO_ADDR
7733: GO 8108
7735: LD_INT 18
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7879
7743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7744: LD_ADDR_VAR 0 1
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 4
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: LD_INT 7
7760: PUSH
7761: LD_INT 11
7763: PUSH
7764: LD_INT 12
7766: PUSH
7767: LD_INT 15
7769: PUSH
7770: LD_INT 16
7772: PUSH
7773: LD_INT 20
7775: PUSH
7776: LD_INT 21
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 23
7784: PUSH
7785: LD_INT 25
7787: PUSH
7788: LD_INT 26
7790: PUSH
7791: LD_INT 30
7793: PUSH
7794: LD_INT 31
7796: PUSH
7797: LD_INT 32
7799: PUSH
7800: LD_INT 33
7802: PUSH
7803: LD_INT 34
7805: PUSH
7806: LD_INT 35
7808: PUSH
7809: LD_INT 36
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 101
7837: PUSH
7838: LD_INT 102
7840: PUSH
7841: LD_INT 103
7843: PUSH
7844: LD_INT 106
7846: PUSH
7847: LD_INT 108
7849: PUSH
7850: LD_INT 112
7852: PUSH
7853: LD_INT 113
7855: PUSH
7856: LD_INT 114
7858: PUSH
7859: LD_INT 115
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: ST_TO_ADDR
7877: GO 8108
7879: LD_INT 19
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 8107
7887: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7888: LD_ADDR_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: LD_INT 2
7898: PUSH
7899: LD_INT 3
7901: PUSH
7902: LD_INT 4
7904: PUSH
7905: LD_INT 5
7907: PUSH
7908: LD_INT 6
7910: PUSH
7911: LD_INT 7
7913: PUSH
7914: LD_INT 8
7916: PUSH
7917: LD_INT 9
7919: PUSH
7920: LD_INT 10
7922: PUSH
7923: LD_INT 11
7925: PUSH
7926: LD_INT 12
7928: PUSH
7929: LD_INT 13
7931: PUSH
7932: LD_INT 14
7934: PUSH
7935: LD_INT 15
7937: PUSH
7938: LD_INT 16
7940: PUSH
7941: LD_INT 17
7943: PUSH
7944: LD_INT 18
7946: PUSH
7947: LD_INT 19
7949: PUSH
7950: LD_INT 20
7952: PUSH
7953: LD_INT 21
7955: PUSH
7956: LD_INT 22
7958: PUSH
7959: LD_INT 23
7961: PUSH
7962: LD_INT 24
7964: PUSH
7965: LD_INT 25
7967: PUSH
7968: LD_INT 26
7970: PUSH
7971: LD_INT 27
7973: PUSH
7974: LD_INT 28
7976: PUSH
7977: LD_INT 29
7979: PUSH
7980: LD_INT 30
7982: PUSH
7983: LD_INT 31
7985: PUSH
7986: LD_INT 32
7988: PUSH
7989: LD_INT 33
7991: PUSH
7992: LD_INT 34
7994: PUSH
7995: LD_INT 35
7997: PUSH
7998: LD_INT 36
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 101
8041: PUSH
8042: LD_INT 102
8044: PUSH
8045: LD_INT 103
8047: PUSH
8048: LD_INT 104
8050: PUSH
8051: LD_INT 105
8053: PUSH
8054: LD_INT 106
8056: PUSH
8057: LD_INT 107
8059: PUSH
8060: LD_INT 108
8062: PUSH
8063: LD_INT 109
8065: PUSH
8066: LD_INT 110
8068: PUSH
8069: LD_INT 111
8071: PUSH
8072: LD_INT 112
8074: PUSH
8075: LD_INT 113
8077: PUSH
8078: LD_INT 114
8080: PUSH
8081: LD_INT 115
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: ST_TO_ADDR
8105: GO 8108
8107: POP
// end else
8108: GO 8327
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8110: LD_ADDR_VAR 0 1
8114: PUSH
8115: LD_INT 1
8117: PUSH
8118: LD_INT 2
8120: PUSH
8121: LD_INT 3
8123: PUSH
8124: LD_INT 4
8126: PUSH
8127: LD_INT 5
8129: PUSH
8130: LD_INT 6
8132: PUSH
8133: LD_INT 7
8135: PUSH
8136: LD_INT 8
8138: PUSH
8139: LD_INT 9
8141: PUSH
8142: LD_INT 10
8144: PUSH
8145: LD_INT 11
8147: PUSH
8148: LD_INT 12
8150: PUSH
8151: LD_INT 13
8153: PUSH
8154: LD_INT 14
8156: PUSH
8157: LD_INT 15
8159: PUSH
8160: LD_INT 16
8162: PUSH
8163: LD_INT 17
8165: PUSH
8166: LD_INT 18
8168: PUSH
8169: LD_INT 19
8171: PUSH
8172: LD_INT 20
8174: PUSH
8175: LD_INT 21
8177: PUSH
8178: LD_INT 22
8180: PUSH
8181: LD_INT 23
8183: PUSH
8184: LD_INT 24
8186: PUSH
8187: LD_INT 25
8189: PUSH
8190: LD_INT 26
8192: PUSH
8193: LD_INT 27
8195: PUSH
8196: LD_INT 28
8198: PUSH
8199: LD_INT 29
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 31
8207: PUSH
8208: LD_INT 32
8210: PUSH
8211: LD_INT 33
8213: PUSH
8214: LD_INT 34
8216: PUSH
8217: LD_INT 35
8219: PUSH
8220: LD_INT 36
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 101
8263: PUSH
8264: LD_INT 102
8266: PUSH
8267: LD_INT 103
8269: PUSH
8270: LD_INT 104
8272: PUSH
8273: LD_INT 105
8275: PUSH
8276: LD_INT 106
8278: PUSH
8279: LD_INT 107
8281: PUSH
8282: LD_INT 108
8284: PUSH
8285: LD_INT 109
8287: PUSH
8288: LD_INT 110
8290: PUSH
8291: LD_INT 111
8293: PUSH
8294: LD_INT 112
8296: PUSH
8297: LD_INT 113
8299: PUSH
8300: LD_INT 114
8302: PUSH
8303: LD_INT 115
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: ST_TO_ADDR
// if result then
8327: LD_VAR 0 1
8331: IFFALSE 8620
// begin normal :=  ;
8333: LD_ADDR_VAR 0 3
8337: PUSH
8338: LD_STRING 
8340: ST_TO_ADDR
// hardcore :=  ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_STRING 
8348: ST_TO_ADDR
// for i = 1 to normalCounter do
8349: LD_ADDR_VAR 0 5
8353: PUSH
8354: DOUBLE
8355: LD_INT 1
8357: DEC
8358: ST_TO_ADDR
8359: LD_EXP 22
8363: PUSH
8364: FOR_TO
8365: IFFALSE 8466
// begin tmp := 0 ;
8367: LD_ADDR_VAR 0 2
8371: PUSH
8372: LD_STRING 0
8374: ST_TO_ADDR
// if result [ 1 ] then
8375: LD_VAR 0 1
8379: PUSH
8380: LD_INT 1
8382: ARRAY
8383: IFFALSE 8448
// if result [ 1 ] [ 1 ] = i then
8385: LD_VAR 0 1
8389: PUSH
8390: LD_INT 1
8392: ARRAY
8393: PUSH
8394: LD_INT 1
8396: ARRAY
8397: PUSH
8398: LD_VAR 0 5
8402: EQUAL
8403: IFFALSE 8448
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8405: LD_ADDR_VAR 0 1
8409: PUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: CALL_OW 3
8434: PPUSH
8435: CALL_OW 1
8439: ST_TO_ADDR
// tmp := 1 ;
8440: LD_ADDR_VAR 0 2
8444: PUSH
8445: LD_STRING 1
8447: ST_TO_ADDR
// end ; normal := normal & tmp ;
8448: LD_ADDR_VAR 0 3
8452: PUSH
8453: LD_VAR 0 3
8457: PUSH
8458: LD_VAR 0 2
8462: STR
8463: ST_TO_ADDR
// end ;
8464: GO 8364
8466: POP
8467: POP
// for i = 1 to hardcoreCounter do
8468: LD_ADDR_VAR 0 5
8472: PUSH
8473: DOUBLE
8474: LD_INT 1
8476: DEC
8477: ST_TO_ADDR
8478: LD_EXP 23
8482: PUSH
8483: FOR_TO
8484: IFFALSE 8589
// begin tmp := 0 ;
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: LD_STRING 0
8493: ST_TO_ADDR
// if result [ 2 ] then
8494: LD_VAR 0 1
8498: PUSH
8499: LD_INT 2
8501: ARRAY
8502: IFFALSE 8571
// if result [ 2 ] [ 1 ] = 100 + i then
8504: LD_VAR 0 1
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PUSH
8513: LD_INT 1
8515: ARRAY
8516: PUSH
8517: LD_INT 100
8519: PUSH
8520: LD_VAR 0 5
8524: PLUS
8525: EQUAL
8526: IFFALSE 8571
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_VAR 0 1
8537: PPUSH
8538: LD_INT 2
8540: PPUSH
8541: LD_VAR 0 1
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PPUSH
8550: LD_INT 1
8552: PPUSH
8553: CALL_OW 3
8557: PPUSH
8558: CALL_OW 1
8562: ST_TO_ADDR
// tmp := 1 ;
8563: LD_ADDR_VAR 0 2
8567: PUSH
8568: LD_STRING 1
8570: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8571: LD_ADDR_VAR 0 4
8575: PUSH
8576: LD_VAR 0 4
8580: PUSH
8581: LD_VAR 0 2
8585: STR
8586: ST_TO_ADDR
// end ;
8587: GO 8483
8589: POP
8590: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8591: LD_STRING getStreamItemsFromMission("
8593: PUSH
8594: LD_VAR 0 3
8598: STR
8599: PUSH
8600: LD_STRING ","
8602: STR
8603: PUSH
8604: LD_VAR 0 4
8608: STR
8609: PUSH
8610: LD_STRING ")
8612: STR
8613: PPUSH
8614: CALL_OW 559
// end else
8618: GO 8627
// ToLua ( getStreamItemsFromMission("","") ) ;
8620: LD_STRING getStreamItemsFromMission("","")
8622: PPUSH
8623: CALL_OW 559
// end ;
8627: LD_VAR 0 1
8631: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8632: LD_VAR 0 2
8636: PUSH
8637: LD_INT 100
8639: EQUAL
8640: IFFALSE 9589
// begin if not StreamModeActive then
8642: LD_EXP 21
8646: NOT
8647: IFFALSE 8657
// StreamModeActive := true ;
8649: LD_ADDR_EXP 21
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// if p3 = 0 then
8657: LD_VAR 0 3
8661: PUSH
8662: LD_INT 0
8664: EQUAL
8665: IFFALSE 8671
// InitStreamMode ;
8667: CALL 4710 0 0
// if p3 = 1 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 1
8678: EQUAL
8679: IFFALSE 8689
// sRocket := true ;
8681: LD_ADDR_EXP 26
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 2 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 2
8696: EQUAL
8697: IFFALSE 8707
// sSpeed := true ;
8699: LD_ADDR_EXP 25
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 3 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 3
8714: EQUAL
8715: IFFALSE 8725
// sEngine := true ;
8717: LD_ADDR_EXP 27
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 4 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 4
8732: EQUAL
8733: IFFALSE 8743
// sSpec := true ;
8735: LD_ADDR_EXP 24
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 5 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 5
8750: EQUAL
8751: IFFALSE 8761
// sLevel := true ;
8753: LD_ADDR_EXP 28
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 6 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 6
8768: EQUAL
8769: IFFALSE 8779
// sArmoury := true ;
8771: LD_ADDR_EXP 29
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// if p3 = 7 then
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 7
8786: EQUAL
8787: IFFALSE 8797
// sRadar := true ;
8789: LD_ADDR_EXP 30
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// if p3 = 8 then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_INT 8
8804: EQUAL
8805: IFFALSE 8815
// sBunker := true ;
8807: LD_ADDR_EXP 31
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// if p3 = 9 then
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 9
8822: EQUAL
8823: IFFALSE 8833
// sHack := true ;
8825: LD_ADDR_EXP 32
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if p3 = 10 then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 10
8840: EQUAL
8841: IFFALSE 8851
// sFire := true ;
8843: LD_ADDR_EXP 33
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// if p3 = 11 then
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 11
8858: EQUAL
8859: IFFALSE 8869
// sRefresh := true ;
8861: LD_ADDR_EXP 34
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// if p3 = 12 then
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 12
8876: EQUAL
8877: IFFALSE 8887
// sExp := true ;
8879: LD_ADDR_EXP 35
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if p3 = 13 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 13
8894: EQUAL
8895: IFFALSE 8905
// sDepot := true ;
8897: LD_ADDR_EXP 36
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// if p3 = 14 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 14
8912: EQUAL
8913: IFFALSE 8923
// sFlag := true ;
8915: LD_ADDR_EXP 37
8919: PUSH
8920: LD_INT 1
8922: ST_TO_ADDR
// if p3 = 15 then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 15
8930: EQUAL
8931: IFFALSE 8941
// sKamikadze := true ;
8933: LD_ADDR_EXP 45
8937: PUSH
8938: LD_INT 1
8940: ST_TO_ADDR
// if p3 = 16 then
8941: LD_VAR 0 3
8945: PUSH
8946: LD_INT 16
8948: EQUAL
8949: IFFALSE 8959
// sTroll := true ;
8951: LD_ADDR_EXP 46
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
// if p3 = 17 then
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 17
8966: EQUAL
8967: IFFALSE 8977
// sSlow := true ;
8969: LD_ADDR_EXP 47
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// if p3 = 18 then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_INT 18
8984: EQUAL
8985: IFFALSE 8995
// sLack := true ;
8987: LD_ADDR_EXP 48
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// if p3 = 19 then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 19
9002: EQUAL
9003: IFFALSE 9013
// sTank := true ;
9005: LD_ADDR_EXP 50
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if p3 = 20 then
9013: LD_VAR 0 3
9017: PUSH
9018: LD_INT 20
9020: EQUAL
9021: IFFALSE 9031
// sRemote := true ;
9023: LD_ADDR_EXP 51
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// if p3 = 21 then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 21
9038: EQUAL
9039: IFFALSE 9049
// sPowell := true ;
9041: LD_ADDR_EXP 52
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// if p3 = 22 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 22
9056: EQUAL
9057: IFFALSE 9067
// sTeleport := true ;
9059: LD_ADDR_EXP 55
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// if p3 = 23 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 23
9074: EQUAL
9075: IFFALSE 9085
// sOilTower := true ;
9077: LD_ADDR_EXP 57
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 24 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 24
9092: EQUAL
9093: IFFALSE 9103
// sShovel := true ;
9095: LD_ADDR_EXP 58
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// if p3 = 25 then
9103: LD_VAR 0 3
9107: PUSH
9108: LD_INT 25
9110: EQUAL
9111: IFFALSE 9121
// sSheik := true ;
9113: LD_ADDR_EXP 59
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// if p3 = 26 then
9121: LD_VAR 0 3
9125: PUSH
9126: LD_INT 26
9128: EQUAL
9129: IFFALSE 9139
// sEarthquake := true ;
9131: LD_ADDR_EXP 61
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// if p3 = 27 then
9139: LD_VAR 0 3
9143: PUSH
9144: LD_INT 27
9146: EQUAL
9147: IFFALSE 9157
// sAI := true ;
9149: LD_ADDR_EXP 62
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
// if p3 = 28 then
9157: LD_VAR 0 3
9161: PUSH
9162: LD_INT 28
9164: EQUAL
9165: IFFALSE 9175
// sCargo := true ;
9167: LD_ADDR_EXP 65
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// if p3 = 29 then
9175: LD_VAR 0 3
9179: PUSH
9180: LD_INT 29
9182: EQUAL
9183: IFFALSE 9193
// sDLaser := true ;
9185: LD_ADDR_EXP 66
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// if p3 = 30 then
9193: LD_VAR 0 3
9197: PUSH
9198: LD_INT 30
9200: EQUAL
9201: IFFALSE 9211
// sExchange := true ;
9203: LD_ADDR_EXP 67
9207: PUSH
9208: LD_INT 1
9210: ST_TO_ADDR
// if p3 = 31 then
9211: LD_VAR 0 3
9215: PUSH
9216: LD_INT 31
9218: EQUAL
9219: IFFALSE 9229
// sFac := true ;
9221: LD_ADDR_EXP 68
9225: PUSH
9226: LD_INT 1
9228: ST_TO_ADDR
// if p3 = 32 then
9229: LD_VAR 0 3
9233: PUSH
9234: LD_INT 32
9236: EQUAL
9237: IFFALSE 9247
// sPower := true ;
9239: LD_ADDR_EXP 69
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// if p3 = 33 then
9247: LD_VAR 0 3
9251: PUSH
9252: LD_INT 33
9254: EQUAL
9255: IFFALSE 9265
// sRandom := true ;
9257: LD_ADDR_EXP 70
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// if p3 = 34 then
9265: LD_VAR 0 3
9269: PUSH
9270: LD_INT 34
9272: EQUAL
9273: IFFALSE 9283
// sShield := true ;
9275: LD_ADDR_EXP 71
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// if p3 = 35 then
9283: LD_VAR 0 3
9287: PUSH
9288: LD_INT 35
9290: EQUAL
9291: IFFALSE 9301
// sTime := true ;
9293: LD_ADDR_EXP 72
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// if p3 = 36 then
9301: LD_VAR 0 3
9305: PUSH
9306: LD_INT 36
9308: EQUAL
9309: IFFALSE 9319
// sTools := true ;
9311: LD_ADDR_EXP 73
9315: PUSH
9316: LD_INT 1
9318: ST_TO_ADDR
// if p3 = 101 then
9319: LD_VAR 0 3
9323: PUSH
9324: LD_INT 101
9326: EQUAL
9327: IFFALSE 9337
// sSold := true ;
9329: LD_ADDR_EXP 38
9333: PUSH
9334: LD_INT 1
9336: ST_TO_ADDR
// if p3 = 102 then
9337: LD_VAR 0 3
9341: PUSH
9342: LD_INT 102
9344: EQUAL
9345: IFFALSE 9355
// sDiff := true ;
9347: LD_ADDR_EXP 39
9351: PUSH
9352: LD_INT 1
9354: ST_TO_ADDR
// if p3 = 103 then
9355: LD_VAR 0 3
9359: PUSH
9360: LD_INT 103
9362: EQUAL
9363: IFFALSE 9373
// sFog := true ;
9365: LD_ADDR_EXP 42
9369: PUSH
9370: LD_INT 1
9372: ST_TO_ADDR
// if p3 = 104 then
9373: LD_VAR 0 3
9377: PUSH
9378: LD_INT 104
9380: EQUAL
9381: IFFALSE 9391
// sReset := true ;
9383: LD_ADDR_EXP 43
9387: PUSH
9388: LD_INT 1
9390: ST_TO_ADDR
// if p3 = 105 then
9391: LD_VAR 0 3
9395: PUSH
9396: LD_INT 105
9398: EQUAL
9399: IFFALSE 9409
// sSun := true ;
9401: LD_ADDR_EXP 44
9405: PUSH
9406: LD_INT 1
9408: ST_TO_ADDR
// if p3 = 106 then
9409: LD_VAR 0 3
9413: PUSH
9414: LD_INT 106
9416: EQUAL
9417: IFFALSE 9427
// sTiger := true ;
9419: LD_ADDR_EXP 40
9423: PUSH
9424: LD_INT 1
9426: ST_TO_ADDR
// if p3 = 107 then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 107
9434: EQUAL
9435: IFFALSE 9445
// sBomb := true ;
9437: LD_ADDR_EXP 41
9441: PUSH
9442: LD_INT 1
9444: ST_TO_ADDR
// if p3 = 108 then
9445: LD_VAR 0 3
9449: PUSH
9450: LD_INT 108
9452: EQUAL
9453: IFFALSE 9463
// sWound := true ;
9455: LD_ADDR_EXP 49
9459: PUSH
9460: LD_INT 1
9462: ST_TO_ADDR
// if p3 = 109 then
9463: LD_VAR 0 3
9467: PUSH
9468: LD_INT 109
9470: EQUAL
9471: IFFALSE 9481
// sBetray := true ;
9473: LD_ADDR_EXP 53
9477: PUSH
9478: LD_INT 1
9480: ST_TO_ADDR
// if p3 = 110 then
9481: LD_VAR 0 3
9485: PUSH
9486: LD_INT 110
9488: EQUAL
9489: IFFALSE 9499
// sContamin := true ;
9491: LD_ADDR_EXP 54
9495: PUSH
9496: LD_INT 1
9498: ST_TO_ADDR
// if p3 = 111 then
9499: LD_VAR 0 3
9503: PUSH
9504: LD_INT 111
9506: EQUAL
9507: IFFALSE 9517
// sOil := true ;
9509: LD_ADDR_EXP 56
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// if p3 = 112 then
9517: LD_VAR 0 3
9521: PUSH
9522: LD_INT 112
9524: EQUAL
9525: IFFALSE 9535
// sStu := true ;
9527: LD_ADDR_EXP 60
9531: PUSH
9532: LD_INT 1
9534: ST_TO_ADDR
// if p3 = 113 then
9535: LD_VAR 0 3
9539: PUSH
9540: LD_INT 113
9542: EQUAL
9543: IFFALSE 9553
// sBazooka := true ;
9545: LD_ADDR_EXP 63
9549: PUSH
9550: LD_INT 1
9552: ST_TO_ADDR
// if p3 = 114 then
9553: LD_VAR 0 3
9557: PUSH
9558: LD_INT 114
9560: EQUAL
9561: IFFALSE 9571
// sMortar := true ;
9563: LD_ADDR_EXP 64
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// if p3 = 115 then
9571: LD_VAR 0 3
9575: PUSH
9576: LD_INT 115
9578: EQUAL
9579: IFFALSE 9589
// sRanger := true ;
9581: LD_ADDR_EXP 74
9585: PUSH
9586: LD_INT 1
9588: ST_TO_ADDR
// end ; end ;
9589: PPOPN 6
9591: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9592: LD_EXP 21
9596: PUSH
9597: LD_EXP 26
9601: AND
9602: IFFALSE 9726
9604: GO 9606
9606: DISABLE
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
// begin enable ;
9611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9612: LD_ADDR_VAR 0 2
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_OWVAR 2
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: LD_INT 34
9634: PUSH
9635: LD_INT 7
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 34
9644: PUSH
9645: LD_INT 45
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 34
9654: PUSH
9655: LD_INT 28
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: LD_INT 34
9664: PUSH
9665: LD_INT 47
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: CALL_OW 69
9687: ST_TO_ADDR
// if not tmp then
9688: LD_VAR 0 2
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9726
// for i in tmp do
9697: LD_ADDR_VAR 0 1
9701: PUSH
9702: LD_VAR 0 2
9706: PUSH
9707: FOR_IN
9708: IFFALSE 9724
// begin SetLives ( i , 0 ) ;
9710: LD_VAR 0 1
9714: PPUSH
9715: LD_INT 0
9717: PPUSH
9718: CALL_OW 234
// end ;
9722: GO 9707
9724: POP
9725: POP
// end ;
9726: PPOPN 2
9728: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9729: LD_EXP 21
9733: PUSH
9734: LD_EXP 27
9738: AND
9739: IFFALSE 9823
9741: GO 9743
9743: DISABLE
9744: LD_INT 0
9746: PPUSH
9747: PPUSH
// begin enable ;
9748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9749: LD_ADDR_VAR 0 2
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_OWVAR 2
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 32
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PPUSH
9780: CALL_OW 69
9784: ST_TO_ADDR
// if not tmp then
9785: LD_VAR 0 2
9789: NOT
9790: IFFALSE 9794
// exit ;
9792: GO 9823
// for i in tmp do
9794: LD_ADDR_VAR 0 1
9798: PUSH
9799: LD_VAR 0 2
9803: PUSH
9804: FOR_IN
9805: IFFALSE 9821
// begin SetLives ( i , 0 ) ;
9807: LD_VAR 0 1
9811: PPUSH
9812: LD_INT 0
9814: PPUSH
9815: CALL_OW 234
// end ;
9819: GO 9804
9821: POP
9822: POP
// end ;
9823: PPOPN 2
9825: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9826: LD_EXP 21
9830: PUSH
9831: LD_EXP 24
9835: AND
9836: IFFALSE 9929
9838: GO 9840
9840: DISABLE
9841: LD_INT 0
9843: PPUSH
// begin enable ;
9844: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9845: LD_ADDR_VAR 0 1
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_OWVAR 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 5
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 25
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 25
9887: PUSH
9888: LD_INT 8
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 69
9909: PUSH
9910: FOR_IN
9911: IFFALSE 9927
// begin SetClass ( i , 1 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 336
// end ;
9925: GO 9910
9927: POP
9928: POP
// end ;
9929: PPOPN 1
9931: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9932: LD_EXP 21
9936: PUSH
9937: LD_EXP 25
9941: AND
9942: PUSH
9943: LD_OWVAR 65
9947: PUSH
9948: LD_INT 7
9950: LESS
9951: AND
9952: IFFALSE 9966
9954: GO 9956
9956: DISABLE
// begin enable ;
9957: ENABLE
// game_speed := 7 ;
9958: LD_ADDR_OWVAR 65
9962: PUSH
9963: LD_INT 7
9965: ST_TO_ADDR
// end ;
9966: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9967: LD_EXP 21
9971: PUSH
9972: LD_EXP 28
9976: AND
9977: IFFALSE 10179
9979: GO 9981
9981: DISABLE
9982: LD_INT 0
9984: PPUSH
9985: PPUSH
9986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9987: LD_ADDR_VAR 0 3
9991: PUSH
9992: LD_INT 81
9994: PUSH
9995: LD_OWVAR 2
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 21
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 69
10022: ST_TO_ADDR
// if not tmp then
10023: LD_VAR 0 3
10027: NOT
10028: IFFALSE 10032
// exit ;
10030: GO 10179
// if tmp > 5 then
10032: LD_VAR 0 3
10036: PUSH
10037: LD_INT 5
10039: GREATER
10040: IFFALSE 10052
// k := 5 else
10042: LD_ADDR_VAR 0 2
10046: PUSH
10047: LD_INT 5
10049: ST_TO_ADDR
10050: GO 10062
// k := tmp ;
10052: LD_ADDR_VAR 0 2
10056: PUSH
10057: LD_VAR 0 3
10061: ST_TO_ADDR
// for i := 1 to k do
10062: LD_ADDR_VAR 0 1
10066: PUSH
10067: DOUBLE
10068: LD_INT 1
10070: DEC
10071: ST_TO_ADDR
10072: LD_VAR 0 2
10076: PUSH
10077: FOR_TO
10078: IFFALSE 10177
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10080: LD_VAR 0 3
10084: PUSH
10085: LD_VAR 0 1
10089: ARRAY
10090: PPUSH
10091: LD_VAR 0 1
10095: PUSH
10096: LD_INT 4
10098: MOD
10099: PUSH
10100: LD_INT 1
10102: PLUS
10103: PPUSH
10104: CALL_OW 259
10108: PUSH
10109: LD_INT 10
10111: LESS
10112: IFFALSE 10175
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 1
10123: ARRAY
10124: PPUSH
10125: LD_VAR 0 1
10129: PUSH
10130: LD_INT 4
10132: MOD
10133: PUSH
10134: LD_INT 1
10136: PLUS
10137: PPUSH
10138: LD_VAR 0 3
10142: PUSH
10143: LD_VAR 0 1
10147: ARRAY
10148: PPUSH
10149: LD_VAR 0 1
10153: PUSH
10154: LD_INT 4
10156: MOD
10157: PUSH
10158: LD_INT 1
10160: PLUS
10161: PPUSH
10162: CALL_OW 259
10166: PUSH
10167: LD_INT 1
10169: PLUS
10170: PPUSH
10171: CALL_OW 237
10175: GO 10077
10177: POP
10178: POP
// end ;
10179: PPOPN 3
10181: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10182: LD_EXP 21
10186: PUSH
10187: LD_EXP 29
10191: AND
10192: IFFALSE 10212
10194: GO 10196
10196: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10197: LD_INT 4
10199: PPUSH
10200: LD_OWVAR 2
10204: PPUSH
10205: LD_INT 0
10207: PPUSH
10208: CALL_OW 324
10212: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10213: LD_EXP 21
10217: PUSH
10218: LD_EXP 58
10222: AND
10223: IFFALSE 10243
10225: GO 10227
10227: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10228: LD_INT 19
10230: PPUSH
10231: LD_OWVAR 2
10235: PPUSH
10236: LD_INT 0
10238: PPUSH
10239: CALL_OW 324
10243: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10244: LD_EXP 21
10248: PUSH
10249: LD_EXP 30
10253: AND
10254: IFFALSE 10356
10256: GO 10258
10258: DISABLE
10259: LD_INT 0
10261: PPUSH
10262: PPUSH
// begin enable ;
10263: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10264: LD_ADDR_VAR 0 2
10268: PUSH
10269: LD_INT 22
10271: PUSH
10272: LD_OWVAR 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: LD_INT 34
10286: PUSH
10287: LD_INT 11
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 34
10296: PUSH
10297: LD_INT 30
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 69
10317: ST_TO_ADDR
// if not tmp then
10318: LD_VAR 0 2
10322: NOT
10323: IFFALSE 10327
// exit ;
10325: GO 10356
// for i in tmp do
10327: LD_ADDR_VAR 0 1
10331: PUSH
10332: LD_VAR 0 2
10336: PUSH
10337: FOR_IN
10338: IFFALSE 10354
// begin SetLives ( i , 0 ) ;
10340: LD_VAR 0 1
10344: PPUSH
10345: LD_INT 0
10347: PPUSH
10348: CALL_OW 234
// end ;
10352: GO 10337
10354: POP
10355: POP
// end ;
10356: PPOPN 2
10358: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10359: LD_EXP 21
10363: PUSH
10364: LD_EXP 31
10368: AND
10369: IFFALSE 10389
10371: GO 10373
10373: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10374: LD_INT 32
10376: PPUSH
10377: LD_OWVAR 2
10381: PPUSH
10382: LD_INT 0
10384: PPUSH
10385: CALL_OW 324
10389: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10390: LD_EXP 21
10394: PUSH
10395: LD_EXP 32
10399: AND
10400: IFFALSE 10581
10402: GO 10404
10404: DISABLE
10405: LD_INT 0
10407: PPUSH
10408: PPUSH
10409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10410: LD_ADDR_VAR 0 2
10414: PUSH
10415: LD_INT 22
10417: PUSH
10418: LD_OWVAR 2
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 33
10429: PUSH
10430: LD_INT 3
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: ST_TO_ADDR
// if not tmp then
10446: LD_VAR 0 2
10450: NOT
10451: IFFALSE 10455
// exit ;
10453: GO 10581
// side := 0 ;
10455: LD_ADDR_VAR 0 3
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// for i := 1 to 8 do
10463: LD_ADDR_VAR 0 1
10467: PUSH
10468: DOUBLE
10469: LD_INT 1
10471: DEC
10472: ST_TO_ADDR
10473: LD_INT 8
10475: PUSH
10476: FOR_TO
10477: IFFALSE 10525
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10479: LD_OWVAR 2
10483: PUSH
10484: LD_VAR 0 1
10488: NONEQUAL
10489: PUSH
10490: LD_OWVAR 2
10494: PPUSH
10495: LD_VAR 0 1
10499: PPUSH
10500: CALL_OW 81
10504: PUSH
10505: LD_INT 2
10507: EQUAL
10508: AND
10509: IFFALSE 10523
// begin side := i ;
10511: LD_ADDR_VAR 0 3
10515: PUSH
10516: LD_VAR 0 1
10520: ST_TO_ADDR
// break ;
10521: GO 10525
// end ;
10523: GO 10476
10525: POP
10526: POP
// if not side then
10527: LD_VAR 0 3
10531: NOT
10532: IFFALSE 10536
// exit ;
10534: GO 10581
// for i := 1 to tmp do
10536: LD_ADDR_VAR 0 1
10540: PUSH
10541: DOUBLE
10542: LD_INT 1
10544: DEC
10545: ST_TO_ADDR
10546: LD_VAR 0 2
10550: PUSH
10551: FOR_TO
10552: IFFALSE 10579
// if Prob ( 60 ) then
10554: LD_INT 60
10556: PPUSH
10557: CALL_OW 13
10561: IFFALSE 10577
// SetSide ( i , side ) ;
10563: LD_VAR 0 1
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: CALL_OW 235
10577: GO 10551
10579: POP
10580: POP
// end ;
10581: PPOPN 3
10583: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10584: LD_EXP 21
10588: PUSH
10589: LD_EXP 34
10593: AND
10594: IFFALSE 10713
10596: GO 10598
10598: DISABLE
10599: LD_INT 0
10601: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10602: LD_ADDR_VAR 0 1
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_OWVAR 2
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 21
10621: PUSH
10622: LD_INT 1
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 3
10631: PUSH
10632: LD_INT 23
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: FOR_IN
10657: IFFALSE 10711
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10659: LD_VAR 0 1
10663: PPUSH
10664: CALL_OW 257
10668: PUSH
10669: LD_INT 1
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: LD_INT 3
10677: PUSH
10678: LD_INT 4
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: IN
10687: IFFALSE 10709
// SetClass ( un , rand ( 1 , 4 ) ) ;
10689: LD_VAR 0 1
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: LD_INT 4
10699: PPUSH
10700: CALL_OW 12
10704: PPUSH
10705: CALL_OW 336
10709: GO 10656
10711: POP
10712: POP
// end ;
10713: PPOPN 1
10715: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10716: LD_EXP 21
10720: PUSH
10721: LD_EXP 33
10725: AND
10726: IFFALSE 10805
10728: GO 10730
10730: DISABLE
10731: LD_INT 0
10733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10734: LD_ADDR_VAR 0 1
10738: PUSH
10739: LD_INT 22
10741: PUSH
10742: LD_OWVAR 2
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 69
10769: ST_TO_ADDR
// if not tmp then
10770: LD_VAR 0 1
10774: NOT
10775: IFFALSE 10779
// exit ;
10777: GO 10805
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10779: LD_VAR 0 1
10783: PUSH
10784: LD_INT 1
10786: PPUSH
10787: LD_VAR 0 1
10791: PPUSH
10792: CALL_OW 12
10796: ARRAY
10797: PPUSH
10798: LD_INT 100
10800: PPUSH
10801: CALL_OW 234
// end ;
10805: PPOPN 1
10807: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10808: LD_EXP 21
10812: PUSH
10813: LD_EXP 35
10817: AND
10818: IFFALSE 10916
10820: GO 10822
10822: DISABLE
10823: LD_INT 0
10825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10826: LD_ADDR_VAR 0 1
10830: PUSH
10831: LD_INT 22
10833: PUSH
10834: LD_OWVAR 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 21
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// if not tmp then
10862: LD_VAR 0 1
10866: NOT
10867: IFFALSE 10871
// exit ;
10869: GO 10916
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10871: LD_VAR 0 1
10875: PUSH
10876: LD_INT 1
10878: PPUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 12
10888: ARRAY
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: LD_INT 4
10895: PPUSH
10896: CALL_OW 12
10900: PPUSH
10901: LD_INT 3000
10903: PPUSH
10904: LD_INT 9000
10906: PPUSH
10907: CALL_OW 12
10911: PPUSH
10912: CALL_OW 492
// end ;
10916: PPOPN 1
10918: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10919: LD_EXP 21
10923: PUSH
10924: LD_EXP 36
10928: AND
10929: IFFALSE 10949
10931: GO 10933
10933: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10934: LD_INT 1
10936: PPUSH
10937: LD_OWVAR 2
10941: PPUSH
10942: LD_INT 0
10944: PPUSH
10945: CALL_OW 324
10949: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10950: LD_EXP 21
10954: PUSH
10955: LD_EXP 37
10959: AND
10960: IFFALSE 11043
10962: GO 10964
10964: DISABLE
10965: LD_INT 0
10967: PPUSH
10968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_INT 22
10976: PUSH
10977: LD_OWVAR 2
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 21
10988: PUSH
10989: LD_INT 3
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PPUSH
11000: CALL_OW 69
11004: ST_TO_ADDR
// if not tmp then
11005: LD_VAR 0 2
11009: NOT
11010: IFFALSE 11014
// exit ;
11012: GO 11043
// for i in tmp do
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: LD_VAR 0 2
11023: PUSH
11024: FOR_IN
11025: IFFALSE 11041
// SetBLevel ( i , 10 ) ;
11027: LD_VAR 0 1
11031: PPUSH
11032: LD_INT 10
11034: PPUSH
11035: CALL_OW 241
11039: GO 11024
11041: POP
11042: POP
// end ;
11043: PPOPN 2
11045: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11046: LD_EXP 21
11050: PUSH
11051: LD_EXP 38
11055: AND
11056: IFFALSE 11167
11058: GO 11060
11060: DISABLE
11061: LD_INT 0
11063: PPUSH
11064: PPUSH
11065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11066: LD_ADDR_VAR 0 3
11070: PUSH
11071: LD_INT 22
11073: PUSH
11074: LD_OWVAR 2
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 25
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: ST_TO_ADDR
// if not tmp then
11102: LD_VAR 0 3
11106: NOT
11107: IFFALSE 11111
// exit ;
11109: GO 11167
// un := tmp [ rand ( 1 , tmp ) ] ;
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_VAR 0 3
11120: PUSH
11121: LD_INT 1
11123: PPUSH
11124: LD_VAR 0 3
11128: PPUSH
11129: CALL_OW 12
11133: ARRAY
11134: ST_TO_ADDR
// if Crawls ( un ) then
11135: LD_VAR 0 2
11139: PPUSH
11140: CALL_OW 318
11144: IFFALSE 11155
// ComWalk ( un ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11155: LD_VAR 0 2
11159: PPUSH
11160: LD_INT 5
11162: PPUSH
11163: CALL_OW 336
// end ;
11167: PPOPN 3
11169: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11170: LD_EXP 21
11174: PUSH
11175: LD_EXP 39
11179: AND
11180: PUSH
11181: LD_OWVAR 67
11185: PUSH
11186: LD_INT 3
11188: LESS
11189: AND
11190: IFFALSE 11209
11192: GO 11194
11194: DISABLE
// Difficulty := Difficulty + 1 ;
11195: LD_ADDR_OWVAR 67
11199: PUSH
11200: LD_OWVAR 67
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: ST_TO_ADDR
11209: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11210: LD_EXP 21
11214: PUSH
11215: LD_EXP 40
11219: AND
11220: IFFALSE 11323
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
// begin for i := 1 to 5 do
11228: LD_ADDR_VAR 0 1
11232: PUSH
11233: DOUBLE
11234: LD_INT 1
11236: DEC
11237: ST_TO_ADDR
11238: LD_INT 5
11240: PUSH
11241: FOR_TO
11242: IFFALSE 11321
// begin uc_nation := nation_nature ;
11244: LD_ADDR_OWVAR 21
11248: PUSH
11249: LD_INT 0
11251: ST_TO_ADDR
// uc_side := 0 ;
11252: LD_ADDR_OWVAR 20
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11260: LD_ADDR_OWVAR 29
11264: PUSH
11265: LD_INT 12
11267: PUSH
11268: LD_INT 12
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: ST_TO_ADDR
// hc_agressivity := 20 ;
11275: LD_ADDR_OWVAR 35
11279: PUSH
11280: LD_INT 20
11282: ST_TO_ADDR
// hc_class := class_tiger ;
11283: LD_ADDR_OWVAR 28
11287: PUSH
11288: LD_INT 14
11290: ST_TO_ADDR
// hc_gallery :=  ;
11291: LD_ADDR_OWVAR 33
11295: PUSH
11296: LD_STRING 
11298: ST_TO_ADDR
// hc_name :=  ;
11299: LD_ADDR_OWVAR 26
11303: PUSH
11304: LD_STRING 
11306: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11307: CALL_OW 44
11311: PPUSH
11312: LD_INT 0
11314: PPUSH
11315: CALL_OW 51
// end ;
11319: GO 11241
11321: POP
11322: POP
// end ;
11323: PPOPN 1
11325: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11326: LD_EXP 21
11330: PUSH
11331: LD_EXP 41
11335: AND
11336: IFFALSE 11345
11338: GO 11340
11340: DISABLE
// StreamSibBomb ;
11341: CALL 11346 0 0
11345: END
// export function StreamSibBomb ; var i , x , y ; begin
11346: LD_INT 0
11348: PPUSH
11349: PPUSH
11350: PPUSH
11351: PPUSH
// result := false ;
11352: LD_ADDR_VAR 0 1
11356: PUSH
11357: LD_INT 0
11359: ST_TO_ADDR
// for i := 1 to 16 do
11360: LD_ADDR_VAR 0 2
11364: PUSH
11365: DOUBLE
11366: LD_INT 1
11368: DEC
11369: ST_TO_ADDR
11370: LD_INT 16
11372: PUSH
11373: FOR_TO
11374: IFFALSE 11573
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11376: LD_ADDR_VAR 0 3
11380: PUSH
11381: LD_INT 10
11383: PUSH
11384: LD_INT 20
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 40
11392: PUSH
11393: LD_INT 50
11395: PUSH
11396: LD_INT 60
11398: PUSH
11399: LD_INT 70
11401: PUSH
11402: LD_INT 80
11404: PUSH
11405: LD_INT 90
11407: PUSH
11408: LD_INT 100
11410: PUSH
11411: LD_INT 110
11413: PUSH
11414: LD_INT 120
11416: PUSH
11417: LD_INT 130
11419: PUSH
11420: LD_INT 140
11422: PUSH
11423: LD_INT 150
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 1
11445: PPUSH
11446: LD_INT 15
11448: PPUSH
11449: CALL_OW 12
11453: ARRAY
11454: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11455: LD_ADDR_VAR 0 4
11459: PUSH
11460: LD_INT 10
11462: PUSH
11463: LD_INT 20
11465: PUSH
11466: LD_INT 30
11468: PUSH
11469: LD_INT 40
11471: PUSH
11472: LD_INT 50
11474: PUSH
11475: LD_INT 60
11477: PUSH
11478: LD_INT 70
11480: PUSH
11481: LD_INT 80
11483: PUSH
11484: LD_INT 90
11486: PUSH
11487: LD_INT 100
11489: PUSH
11490: LD_INT 110
11492: PUSH
11493: LD_INT 120
11495: PUSH
11496: LD_INT 130
11498: PUSH
11499: LD_INT 140
11501: PUSH
11502: LD_INT 150
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 1
11524: PPUSH
11525: LD_INT 15
11527: PPUSH
11528: CALL_OW 12
11532: ARRAY
11533: ST_TO_ADDR
// if ValidHex ( x , y ) then
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_VAR 0 4
11543: PPUSH
11544: CALL_OW 488
11548: IFFALSE 11571
// begin result := [ x , y ] ;
11550: LD_ADDR_VAR 0 1
11554: PUSH
11555: LD_VAR 0 3
11559: PUSH
11560: LD_VAR 0 4
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: ST_TO_ADDR
// break ;
11569: GO 11573
// end ; end ;
11571: GO 11373
11573: POP
11574: POP
// if result then
11575: LD_VAR 0 1
11579: IFFALSE 11639
// begin ToLua ( playSibBomb() ) ;
11581: LD_STRING playSibBomb()
11583: PPUSH
11584: CALL_OW 559
// wait ( 0 0$14 ) ;
11588: LD_INT 490
11590: PPUSH
11591: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11595: LD_VAR 0 1
11599: PUSH
11600: LD_INT 1
11602: ARRAY
11603: PPUSH
11604: LD_VAR 0 1
11608: PUSH
11609: LD_INT 2
11611: ARRAY
11612: PPUSH
11613: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11617: LD_VAR 0 1
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: PPUSH
11626: LD_VAR 0 1
11630: PUSH
11631: LD_INT 2
11633: ARRAY
11634: PPUSH
11635: CALL_OW 429
// end ; end ;
11639: LD_VAR 0 1
11643: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11644: LD_EXP 21
11648: PUSH
11649: LD_EXP 43
11653: AND
11654: IFFALSE 11666
11656: GO 11658
11658: DISABLE
// YouLost (  ) ;
11659: LD_STRING 
11661: PPUSH
11662: CALL_OW 104
11666: END
// every 0 0$1 trigger StreamModeActive and sFog do
11667: LD_EXP 21
11671: PUSH
11672: LD_EXP 42
11676: AND
11677: IFFALSE 11691
11679: GO 11681
11681: DISABLE
// FogOff ( your_side ) ;
11682: LD_OWVAR 2
11686: PPUSH
11687: CALL_OW 344
11691: END
// every 0 0$1 trigger StreamModeActive and sSun do
11692: LD_EXP 21
11696: PUSH
11697: LD_EXP 44
11701: AND
11702: IFFALSE 11730
11704: GO 11706
11706: DISABLE
// begin solar_recharge_percent := 0 ;
11707: LD_ADDR_OWVAR 79
11711: PUSH
11712: LD_INT 0
11714: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11715: LD_INT 10500
11717: PPUSH
11718: CALL_OW 67
// solar_recharge_percent := 100 ;
11722: LD_ADDR_OWVAR 79
11726: PUSH
11727: LD_INT 100
11729: ST_TO_ADDR
// end ;
11730: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11731: LD_EXP 21
11735: PUSH
11736: LD_EXP 45
11740: AND
11741: IFFALSE 11980
11743: GO 11745
11745: DISABLE
11746: LD_INT 0
11748: PPUSH
11749: PPUSH
11750: PPUSH
// begin tmp := [ ] ;
11751: LD_ADDR_VAR 0 3
11755: PUSH
11756: EMPTY
11757: ST_TO_ADDR
// for i := 1 to 6 do
11758: LD_ADDR_VAR 0 1
11762: PUSH
11763: DOUBLE
11764: LD_INT 1
11766: DEC
11767: ST_TO_ADDR
11768: LD_INT 6
11770: PUSH
11771: FOR_TO
11772: IFFALSE 11877
// begin uc_nation := nation_nature ;
11774: LD_ADDR_OWVAR 21
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// uc_side := 0 ;
11782: LD_ADDR_OWVAR 20
11786: PUSH
11787: LD_INT 0
11789: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11790: LD_ADDR_OWVAR 29
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: LD_INT 12
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: ST_TO_ADDR
// hc_agressivity := 20 ;
11805: LD_ADDR_OWVAR 35
11809: PUSH
11810: LD_INT 20
11812: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11813: LD_ADDR_OWVAR 28
11817: PUSH
11818: LD_INT 17
11820: ST_TO_ADDR
// hc_gallery :=  ;
11821: LD_ADDR_OWVAR 33
11825: PUSH
11826: LD_STRING 
11828: ST_TO_ADDR
// hc_name :=  ;
11829: LD_ADDR_OWVAR 26
11833: PUSH
11834: LD_STRING 
11836: ST_TO_ADDR
// un := CreateHuman ;
11837: LD_ADDR_VAR 0 2
11841: PUSH
11842: CALL_OW 44
11846: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11847: LD_VAR 0 2
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 51
// tmp := tmp ^ un ;
11859: LD_ADDR_VAR 0 3
11863: PUSH
11864: LD_VAR 0 3
11868: PUSH
11869: LD_VAR 0 2
11873: ADD
11874: ST_TO_ADDR
// end ;
11875: GO 11771
11877: POP
11878: POP
// repeat wait ( 0 0$1 ) ;
11879: LD_INT 35
11881: PPUSH
11882: CALL_OW 67
// for un in tmp do
11886: LD_ADDR_VAR 0 2
11890: PUSH
11891: LD_VAR 0 3
11895: PUSH
11896: FOR_IN
11897: IFFALSE 11971
// begin if IsDead ( un ) then
11899: LD_VAR 0 2
11903: PPUSH
11904: CALL_OW 301
11908: IFFALSE 11928
// begin tmp := tmp diff un ;
11910: LD_ADDR_VAR 0 3
11914: PUSH
11915: LD_VAR 0 3
11919: PUSH
11920: LD_VAR 0 2
11924: DIFF
11925: ST_TO_ADDR
// continue ;
11926: GO 11896
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11928: LD_VAR 0 2
11932: PPUSH
11933: LD_INT 3
11935: PUSH
11936: LD_INT 22
11938: PUSH
11939: LD_INT 0
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_VAR 0 2
11959: PPUSH
11960: CALL_OW 74
11964: PPUSH
11965: CALL_OW 115
// end ;
11969: GO 11896
11971: POP
11972: POP
// until not tmp ;
11973: LD_VAR 0 3
11977: NOT
11978: IFFALSE 11879
// end ;
11980: PPOPN 3
11982: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11983: LD_EXP 21
11987: PUSH
11988: LD_EXP 46
11992: AND
11993: IFFALSE 12047
11995: GO 11997
11997: DISABLE
// begin ToLua ( displayTroll(); ) ;
11998: LD_STRING displayTroll();
12000: PPUSH
12001: CALL_OW 559
// wait ( 3 3$00 ) ;
12005: LD_INT 6300
12007: PPUSH
12008: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12012: LD_STRING hideTroll();
12014: PPUSH
12015: CALL_OW 559
// wait ( 1 1$00 ) ;
12019: LD_INT 2100
12021: PPUSH
12022: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12026: LD_STRING displayTroll();
12028: PPUSH
12029: CALL_OW 559
// wait ( 1 1$00 ) ;
12033: LD_INT 2100
12035: PPUSH
12036: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12040: LD_STRING hideTroll();
12042: PPUSH
12043: CALL_OW 559
// end ;
12047: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12048: LD_EXP 21
12052: PUSH
12053: LD_EXP 47
12057: AND
12058: IFFALSE 12121
12060: GO 12062
12062: DISABLE
12063: LD_INT 0
12065: PPUSH
// begin p := 0 ;
12066: LD_ADDR_VAR 0 1
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// repeat game_speed := 1 ;
12074: LD_ADDR_OWVAR 65
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12082: LD_INT 35
12084: PPUSH
12085: CALL_OW 67
// p := p + 1 ;
12089: LD_ADDR_VAR 0 1
12093: PUSH
12094: LD_VAR 0 1
12098: PUSH
12099: LD_INT 1
12101: PLUS
12102: ST_TO_ADDR
// until p >= 60 ;
12103: LD_VAR 0 1
12107: PUSH
12108: LD_INT 60
12110: GREATEREQUAL
12111: IFFALSE 12074
// game_speed := 4 ;
12113: LD_ADDR_OWVAR 65
12117: PUSH
12118: LD_INT 4
12120: ST_TO_ADDR
// end ;
12121: PPOPN 1
12123: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12124: LD_EXP 21
12128: PUSH
12129: LD_EXP 48
12133: AND
12134: IFFALSE 12280
12136: GO 12138
12138: DISABLE
12139: LD_INT 0
12141: PPUSH
12142: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12143: LD_ADDR_VAR 0 1
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_OWVAR 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: LD_INT 30
12165: PUSH
12166: LD_INT 0
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 30
12175: PUSH
12176: LD_INT 1
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 69
12196: ST_TO_ADDR
// if not depot then
12197: LD_VAR 0 1
12201: NOT
12202: IFFALSE 12206
// exit ;
12204: GO 12280
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: PPUSH
12219: LD_VAR 0 1
12223: PPUSH
12224: CALL_OW 12
12228: ARRAY
12229: PPUSH
12230: CALL_OW 274
12234: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: LD_INT 0
12245: PPUSH
12246: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_INT 2
12257: PPUSH
12258: LD_INT 0
12260: PPUSH
12261: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12265: LD_VAR 0 2
12269: PPUSH
12270: LD_INT 3
12272: PPUSH
12273: LD_INT 0
12275: PPUSH
12276: CALL_OW 277
// end ;
12280: PPOPN 2
12282: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12283: LD_EXP 21
12287: PUSH
12288: LD_EXP 49
12292: AND
12293: IFFALSE 12390
12295: GO 12297
12297: DISABLE
12298: LD_INT 0
12300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12301: LD_ADDR_VAR 0 1
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_OWVAR 2
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 21
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: LD_INT 23
12333: PUSH
12334: LD_INT 0
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: ST_TO_ADDR
// if not tmp then
12355: LD_VAR 0 1
12359: NOT
12360: IFFALSE 12364
// exit ;
12362: GO 12390
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12364: LD_VAR 0 1
12368: PUSH
12369: LD_INT 1
12371: PPUSH
12372: LD_VAR 0 1
12376: PPUSH
12377: CALL_OW 12
12381: ARRAY
12382: PPUSH
12383: LD_INT 200
12385: PPUSH
12386: CALL_OW 234
// end ;
12390: PPOPN 1
12392: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12393: LD_EXP 21
12397: PUSH
12398: LD_EXP 50
12402: AND
12403: IFFALSE 12482
12405: GO 12407
12407: DISABLE
12408: LD_INT 0
12410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12411: LD_ADDR_VAR 0 1
12415: PUSH
12416: LD_INT 22
12418: PUSH
12419: LD_OWVAR 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 21
12430: PUSH
12431: LD_INT 2
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: ST_TO_ADDR
// if not tmp then
12447: LD_VAR 0 1
12451: NOT
12452: IFFALSE 12456
// exit ;
12454: GO 12482
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12456: LD_VAR 0 1
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: LD_VAR 0 1
12468: PPUSH
12469: CALL_OW 12
12473: ARRAY
12474: PPUSH
12475: LD_INT 60
12477: PPUSH
12478: CALL_OW 234
// end ;
12482: PPOPN 1
12484: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12485: LD_EXP 21
12489: PUSH
12490: LD_EXP 51
12494: AND
12495: IFFALSE 12594
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
// begin enable ;
12504: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_OWVAR 2
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 61
12524: PUSH
12525: EMPTY
12526: LIST
12527: PUSH
12528: LD_INT 33
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: ST_TO_ADDR
// if not tmp then
12548: LD_VAR 0 1
12552: NOT
12553: IFFALSE 12557
// exit ;
12555: GO 12594
// for i in tmp do
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_VAR 0 1
12566: PUSH
12567: FOR_IN
12568: IFFALSE 12592
// if IsControledBy ( i ) then
12570: LD_VAR 0 2
12574: PPUSH
12575: CALL_OW 312
12579: IFFALSE 12590
// ComUnlink ( i ) ;
12581: LD_VAR 0 2
12585: PPUSH
12586: CALL_OW 136
12590: GO 12567
12592: POP
12593: POP
// end ;
12594: PPOPN 2
12596: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12597: LD_EXP 21
12601: PUSH
12602: LD_EXP 52
12606: AND
12607: IFFALSE 12747
12609: GO 12611
12611: DISABLE
12612: LD_INT 0
12614: PPUSH
12615: PPUSH
// begin ToLua ( displayPowell(); ) ;
12616: LD_STRING displayPowell();
12618: PPUSH
12619: CALL_OW 559
// uc_side := 0 ;
12623: LD_ADDR_OWVAR 20
12627: PUSH
12628: LD_INT 0
12630: ST_TO_ADDR
// uc_nation := 2 ;
12631: LD_ADDR_OWVAR 21
12635: PUSH
12636: LD_INT 2
12638: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12639: LD_ADDR_OWVAR 37
12643: PUSH
12644: LD_INT 14
12646: ST_TO_ADDR
// vc_engine := engine_siberite ;
12647: LD_ADDR_OWVAR 39
12651: PUSH
12652: LD_INT 3
12654: ST_TO_ADDR
// vc_control := control_apeman ;
12655: LD_ADDR_OWVAR 38
12659: PUSH
12660: LD_INT 5
12662: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12663: LD_ADDR_OWVAR 40
12667: PUSH
12668: LD_INT 29
12670: ST_TO_ADDR
// un := CreateVehicle ;
12671: LD_ADDR_VAR 0 2
12675: PUSH
12676: CALL_OW 45
12680: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12681: LD_VAR 0 2
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12693: LD_INT 35
12695: PPUSH
12696: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12700: LD_VAR 0 2
12704: PPUSH
12705: LD_INT 22
12707: PUSH
12708: LD_OWVAR 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PPUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: CALL_OW 74
12731: PPUSH
12732: CALL_OW 115
// until IsDead ( un ) ;
12736: LD_VAR 0 2
12740: PPUSH
12741: CALL_OW 301
12745: IFFALSE 12693
// end ;
12747: PPOPN 2
12749: END
// every 0 0$1 trigger StreamModeActive and sStu do
12750: LD_EXP 21
12754: PUSH
12755: LD_EXP 60
12759: AND
12760: IFFALSE 12776
12762: GO 12764
12764: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12765: LD_STRING displayStucuk();
12767: PPUSH
12768: CALL_OW 559
// ResetFog ;
12772: CALL_OW 335
// end ;
12776: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12777: LD_EXP 21
12781: PUSH
12782: LD_EXP 53
12786: AND
12787: IFFALSE 12928
12789: GO 12791
12791: DISABLE
12792: LD_INT 0
12794: PPUSH
12795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12796: LD_ADDR_VAR 0 2
12800: PUSH
12801: LD_INT 22
12803: PUSH
12804: LD_OWVAR 2
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: LD_INT 21
12815: PUSH
12816: LD_INT 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 69
12831: ST_TO_ADDR
// if not tmp then
12832: LD_VAR 0 2
12836: NOT
12837: IFFALSE 12841
// exit ;
12839: GO 12928
// un := tmp [ rand ( 1 , tmp ) ] ;
12841: LD_ADDR_VAR 0 1
12845: PUSH
12846: LD_VAR 0 2
12850: PUSH
12851: LD_INT 1
12853: PPUSH
12854: LD_VAR 0 2
12858: PPUSH
12859: CALL_OW 12
12863: ARRAY
12864: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12877: LD_VAR 0 1
12881: PPUSH
12882: LD_OWVAR 3
12886: PUSH
12887: LD_VAR 0 1
12891: DIFF
12892: PPUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 74
12902: PPUSH
12903: CALL_OW 115
// wait ( 0 0$20 ) ;
12907: LD_INT 700
12909: PPUSH
12910: CALL_OW 67
// SetSide ( un , your_side ) ;
12914: LD_VAR 0 1
12918: PPUSH
12919: LD_OWVAR 2
12923: PPUSH
12924: CALL_OW 235
// end ;
12928: PPOPN 2
12930: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12931: LD_EXP 21
12935: PUSH
12936: LD_EXP 54
12940: AND
12941: IFFALSE 13047
12943: GO 12945
12945: DISABLE
12946: LD_INT 0
12948: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12949: LD_ADDR_VAR 0 1
12953: PUSH
12954: LD_INT 22
12956: PUSH
12957: LD_OWVAR 2
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 30
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: ST_TO_ADDR
// if not depot then
13003: LD_VAR 0 1
13007: NOT
13008: IFFALSE 13012
// exit ;
13010: GO 13047
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13012: LD_VAR 0 1
13016: PUSH
13017: LD_INT 1
13019: ARRAY
13020: PPUSH
13021: CALL_OW 250
13025: PPUSH
13026: LD_VAR 0 1
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PPUSH
13035: CALL_OW 251
13039: PPUSH
13040: LD_INT 70
13042: PPUSH
13043: CALL_OW 495
// end ;
13047: PPOPN 1
13049: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13050: LD_EXP 21
13054: PUSH
13055: LD_EXP 55
13059: AND
13060: IFFALSE 13271
13062: GO 13064
13064: DISABLE
13065: LD_INT 0
13067: PPUSH
13068: PPUSH
13069: PPUSH
13070: PPUSH
13071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13072: LD_ADDR_VAR 0 5
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_OWVAR 2
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: ST_TO_ADDR
// if not tmp then
13108: LD_VAR 0 5
13112: NOT
13113: IFFALSE 13117
// exit ;
13115: GO 13271
// for i in tmp do
13117: LD_ADDR_VAR 0 1
13121: PUSH
13122: LD_VAR 0 5
13126: PUSH
13127: FOR_IN
13128: IFFALSE 13269
// begin d := rand ( 0 , 5 ) ;
13130: LD_ADDR_VAR 0 4
13134: PUSH
13135: LD_INT 0
13137: PPUSH
13138: LD_INT 5
13140: PPUSH
13141: CALL_OW 12
13145: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 250
13160: PPUSH
13161: LD_VAR 0 4
13165: PPUSH
13166: LD_INT 3
13168: PPUSH
13169: LD_INT 12
13171: PPUSH
13172: CALL_OW 12
13176: PPUSH
13177: CALL_OW 272
13181: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 251
13196: PPUSH
13197: LD_VAR 0 4
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: LD_INT 12
13207: PPUSH
13208: CALL_OW 12
13212: PPUSH
13213: CALL_OW 273
13217: ST_TO_ADDR
// if ValidHex ( x , y ) then
13218: LD_VAR 0 2
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: CALL_OW 488
13232: IFFALSE 13267
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13234: LD_VAR 0 1
13238: PPUSH
13239: LD_VAR 0 2
13243: PPUSH
13244: LD_VAR 0 3
13248: PPUSH
13249: LD_INT 3
13251: PPUSH
13252: LD_INT 6
13254: PPUSH
13255: CALL_OW 12
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 483
// end ;
13267: GO 13127
13269: POP
13270: POP
// end ;
13271: PPOPN 5
13273: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13274: LD_EXP 21
13278: PUSH
13279: LD_EXP 56
13283: AND
13284: IFFALSE 13378
13286: GO 13288
13288: DISABLE
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_OWVAR 2
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 32
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 21
13322: PUSH
13323: LD_INT 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: PPUSH
13335: CALL_OW 69
13339: ST_TO_ADDR
// if not tmp then
13340: LD_VAR 0 2
13344: NOT
13345: IFFALSE 13349
// exit ;
13347: GO 13378
// for i in tmp do
13349: LD_ADDR_VAR 0 1
13353: PUSH
13354: LD_VAR 0 2
13358: PUSH
13359: FOR_IN
13360: IFFALSE 13376
// SetFuel ( i , 0 ) ;
13362: LD_VAR 0 1
13366: PPUSH
13367: LD_INT 0
13369: PPUSH
13370: CALL_OW 240
13374: GO 13359
13376: POP
13377: POP
// end ;
13378: PPOPN 2
13380: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13381: LD_EXP 21
13385: PUSH
13386: LD_EXP 57
13390: AND
13391: IFFALSE 13457
13393: GO 13395
13395: DISABLE
13396: LD_INT 0
13398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13399: LD_ADDR_VAR 0 1
13403: PUSH
13404: LD_INT 22
13406: PUSH
13407: LD_OWVAR 2
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: LD_INT 29
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: ST_TO_ADDR
// if not tmp then
13435: LD_VAR 0 1
13439: NOT
13440: IFFALSE 13444
// exit ;
13442: GO 13457
// DestroyUnit ( tmp [ 1 ] ) ;
13444: LD_VAR 0 1
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: PPUSH
13453: CALL_OW 65
// end ;
13457: PPOPN 1
13459: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13460: LD_EXP 21
13464: PUSH
13465: LD_EXP 59
13469: AND
13470: IFFALSE 13599
13472: GO 13474
13474: DISABLE
13475: LD_INT 0
13477: PPUSH
// begin uc_side := 0 ;
13478: LD_ADDR_OWVAR 20
13482: PUSH
13483: LD_INT 0
13485: ST_TO_ADDR
// uc_nation := nation_arabian ;
13486: LD_ADDR_OWVAR 21
13490: PUSH
13491: LD_INT 2
13493: ST_TO_ADDR
// hc_gallery :=  ;
13494: LD_ADDR_OWVAR 33
13498: PUSH
13499: LD_STRING 
13501: ST_TO_ADDR
// hc_name :=  ;
13502: LD_ADDR_OWVAR 26
13506: PUSH
13507: LD_STRING 
13509: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13510: LD_INT 1
13512: PPUSH
13513: LD_INT 11
13515: PPUSH
13516: LD_INT 10
13518: PPUSH
13519: CALL_OW 380
// un := CreateHuman ;
13523: LD_ADDR_VAR 0 1
13527: PUSH
13528: CALL_OW 44
13532: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13533: LD_VAR 0 1
13537: PPUSH
13538: LD_INT 1
13540: PPUSH
13541: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13545: LD_INT 35
13547: PPUSH
13548: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13552: LD_VAR 0 1
13556: PPUSH
13557: LD_INT 22
13559: PUSH
13560: LD_OWVAR 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 69
13573: PPUSH
13574: LD_VAR 0 1
13578: PPUSH
13579: CALL_OW 74
13583: PPUSH
13584: CALL_OW 115
// until IsDead ( un ) ;
13588: LD_VAR 0 1
13592: PPUSH
13593: CALL_OW 301
13597: IFFALSE 13545
// end ;
13599: PPOPN 1
13601: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13602: LD_EXP 21
13606: PUSH
13607: LD_EXP 61
13611: AND
13612: IFFALSE 13624
13614: GO 13616
13616: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13617: LD_STRING earthquake(getX(game), 0, 32)
13619: PPUSH
13620: CALL_OW 559
13624: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13625: LD_EXP 21
13629: PUSH
13630: LD_EXP 62
13634: AND
13635: IFFALSE 13726
13637: GO 13639
13639: DISABLE
13640: LD_INT 0
13642: PPUSH
// begin enable ;
13643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13644: LD_ADDR_VAR 0 1
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_OWVAR 2
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 21
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 33
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: ST_TO_ADDR
// if not tmp then
13691: LD_VAR 0 1
13695: NOT
13696: IFFALSE 13700
// exit ;
13698: GO 13726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13700: LD_VAR 0 1
13704: PUSH
13705: LD_INT 1
13707: PPUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 12
13717: ARRAY
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: CALL_OW 234
// end ;
13726: PPOPN 1
13728: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13729: LD_EXP 21
13733: PUSH
13734: LD_EXP 63
13738: AND
13739: IFFALSE 13880
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
13748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_INT 22
13756: PUSH
13757: LD_OWVAR 2
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 25
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 69
13784: ST_TO_ADDR
// if not tmp then
13785: LD_VAR 0 3
13789: NOT
13790: IFFALSE 13794
// exit ;
13792: GO 13880
// un := tmp [ rand ( 1 , tmp ) ] ;
13794: LD_ADDR_VAR 0 2
13798: PUSH
13799: LD_VAR 0 3
13803: PUSH
13804: LD_INT 1
13806: PPUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: CALL_OW 12
13816: ARRAY
13817: ST_TO_ADDR
// if Crawls ( un ) then
13818: LD_VAR 0 2
13822: PPUSH
13823: CALL_OW 318
13827: IFFALSE 13838
// ComWalk ( un ) ;
13829: LD_VAR 0 2
13833: PPUSH
13834: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_INT 9
13845: PPUSH
13846: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13850: LD_INT 28
13852: PPUSH
13853: LD_OWVAR 2
13857: PPUSH
13858: LD_INT 2
13860: PPUSH
13861: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13865: LD_INT 29
13867: PPUSH
13868: LD_OWVAR 2
13872: PPUSH
13873: LD_INT 2
13875: PPUSH
13876: CALL_OW 322
// end ;
13880: PPOPN 3
13882: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13883: LD_EXP 21
13887: PUSH
13888: LD_EXP 64
13892: AND
13893: IFFALSE 14004
13895: GO 13897
13897: DISABLE
13898: LD_INT 0
13900: PPUSH
13901: PPUSH
13902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13903: LD_ADDR_VAR 0 3
13907: PUSH
13908: LD_INT 22
13910: PUSH
13911: LD_OWVAR 2
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 1
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: ST_TO_ADDR
// if not tmp then
13939: LD_VAR 0 3
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 14004
// un := tmp [ rand ( 1 , tmp ) ] ;
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: LD_VAR 0 3
13957: PUSH
13958: LD_INT 1
13960: PPUSH
13961: LD_VAR 0 3
13965: PPUSH
13966: CALL_OW 12
13970: ARRAY
13971: ST_TO_ADDR
// if Crawls ( un ) then
13972: LD_VAR 0 2
13976: PPUSH
13977: CALL_OW 318
13981: IFFALSE 13992
// ComWalk ( un ) ;
13983: LD_VAR 0 2
13987: PPUSH
13988: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13992: LD_VAR 0 2
13996: PPUSH
13997: LD_INT 8
13999: PPUSH
14000: CALL_OW 336
// end ;
14004: PPOPN 3
14006: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14007: LD_EXP 21
14011: PUSH
14012: LD_EXP 65
14016: AND
14017: IFFALSE 14161
14019: GO 14021
14021: DISABLE
14022: LD_INT 0
14024: PPUSH
14025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_INT 22
14033: PUSH
14034: LD_OWVAR 2
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 2
14055: PUSH
14056: LD_INT 34
14058: PUSH
14059: LD_INT 12
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 34
14068: PUSH
14069: LD_INT 51
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 34
14078: PUSH
14079: LD_INT 32
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: PPUSH
14097: CALL_OW 69
14101: ST_TO_ADDR
// if not tmp then
14102: LD_VAR 0 2
14106: NOT
14107: IFFALSE 14111
// exit ;
14109: GO 14161
// for i in tmp do
14111: LD_ADDR_VAR 0 1
14115: PUSH
14116: LD_VAR 0 2
14120: PUSH
14121: FOR_IN
14122: IFFALSE 14159
// if GetCargo ( i , mat_artifact ) = 0 then
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_INT 4
14131: PPUSH
14132: CALL_OW 289
14136: PUSH
14137: LD_INT 0
14139: EQUAL
14140: IFFALSE 14157
// SetCargo ( i , mat_siberit , 100 ) ;
14142: LD_VAR 0 1
14146: PPUSH
14147: LD_INT 3
14149: PPUSH
14150: LD_INT 100
14152: PPUSH
14153: CALL_OW 290
14157: GO 14121
14159: POP
14160: POP
// end ;
14161: PPOPN 2
14163: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14164: LD_EXP 21
14168: PUSH
14169: LD_EXP 66
14173: AND
14174: IFFALSE 14357
14176: GO 14178
14178: DISABLE
14179: LD_INT 0
14181: PPUSH
14182: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14183: LD_ADDR_VAR 0 2
14187: PUSH
14188: LD_INT 22
14190: PUSH
14191: LD_OWVAR 2
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 69
14204: ST_TO_ADDR
// if not tmp then
14205: LD_VAR 0 2
14209: NOT
14210: IFFALSE 14214
// exit ;
14212: GO 14357
// for i := 1 to 2 do
14214: LD_ADDR_VAR 0 1
14218: PUSH
14219: DOUBLE
14220: LD_INT 1
14222: DEC
14223: ST_TO_ADDR
14224: LD_INT 2
14226: PUSH
14227: FOR_TO
14228: IFFALSE 14355
// begin uc_side := your_side ;
14230: LD_ADDR_OWVAR 20
14234: PUSH
14235: LD_OWVAR 2
14239: ST_TO_ADDR
// uc_nation := nation_american ;
14240: LD_ADDR_OWVAR 21
14244: PUSH
14245: LD_INT 1
14247: ST_TO_ADDR
// vc_chassis := us_morphling ;
14248: LD_ADDR_OWVAR 37
14252: PUSH
14253: LD_INT 5
14255: ST_TO_ADDR
// vc_engine := engine_siberite ;
14256: LD_ADDR_OWVAR 39
14260: PUSH
14261: LD_INT 3
14263: ST_TO_ADDR
// vc_control := control_computer ;
14264: LD_ADDR_OWVAR 38
14268: PUSH
14269: LD_INT 3
14271: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14272: LD_ADDR_OWVAR 40
14276: PUSH
14277: LD_INT 10
14279: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14280: LD_VAR 0 2
14284: PUSH
14285: LD_INT 1
14287: ARRAY
14288: PPUSH
14289: CALL_OW 310
14293: NOT
14294: IFFALSE 14341
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14296: CALL_OW 45
14300: PPUSH
14301: LD_VAR 0 2
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: CALL_OW 250
14314: PPUSH
14315: LD_VAR 0 2
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PPUSH
14324: CALL_OW 251
14328: PPUSH
14329: LD_INT 12
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 50
14339: GO 14353
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14341: CALL_OW 45
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 51
// end ;
14353: GO 14227
14355: POP
14356: POP
// end ;
14357: PPOPN 2
14359: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14360: LD_EXP 21
14364: PUSH
14365: LD_EXP 67
14369: AND
14370: IFFALSE 14592
14372: GO 14374
14374: DISABLE
14375: LD_INT 0
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14383: LD_ADDR_VAR 0 6
14387: PUSH
14388: LD_INT 22
14390: PUSH
14391: LD_OWVAR 2
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 21
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 3
14412: PUSH
14413: LD_INT 23
14415: PUSH
14416: LD_INT 0
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 69
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 6
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14592
// s1 := rand ( 1 , 4 ) ;
14446: LD_ADDR_VAR 0 2
14450: PUSH
14451: LD_INT 1
14453: PPUSH
14454: LD_INT 4
14456: PPUSH
14457: CALL_OW 12
14461: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 6
14471: PUSH
14472: LD_INT 1
14474: ARRAY
14475: PPUSH
14476: LD_VAR 0 2
14480: PPUSH
14481: CALL_OW 259
14485: ST_TO_ADDR
// if s1 = 1 then
14486: LD_VAR 0 2
14490: PUSH
14491: LD_INT 1
14493: EQUAL
14494: IFFALSE 14514
// s2 := rand ( 2 , 4 ) else
14496: LD_ADDR_VAR 0 3
14500: PUSH
14501: LD_INT 2
14503: PPUSH
14504: LD_INT 4
14506: PPUSH
14507: CALL_OW 12
14511: ST_TO_ADDR
14512: GO 14522
// s2 := 1 ;
14514: LD_ADDR_VAR 0 3
14518: PUSH
14519: LD_INT 1
14521: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14522: LD_ADDR_VAR 0 5
14526: PUSH
14527: LD_VAR 0 6
14531: PUSH
14532: LD_INT 1
14534: ARRAY
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: CALL_OW 259
14545: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14546: LD_VAR 0 6
14550: PUSH
14551: LD_INT 1
14553: ARRAY
14554: PPUSH
14555: LD_VAR 0 2
14559: PPUSH
14560: LD_VAR 0 5
14564: PPUSH
14565: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14569: LD_VAR 0 6
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PPUSH
14578: LD_VAR 0 3
14582: PPUSH
14583: LD_VAR 0 4
14587: PPUSH
14588: CALL_OW 237
// end ;
14592: PPOPN 6
14594: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14595: LD_EXP 21
14599: PUSH
14600: LD_EXP 68
14604: AND
14605: IFFALSE 14684
14607: GO 14609
14609: DISABLE
14610: LD_INT 0
14612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14613: LD_ADDR_VAR 0 1
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_OWVAR 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: ST_TO_ADDR
// if not tmp then
14649: LD_VAR 0 1
14653: NOT
14654: IFFALSE 14658
// exit ;
14656: GO 14684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14658: LD_VAR 0 1
14662: PUSH
14663: LD_INT 1
14665: PPUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 12
14675: ARRAY
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 234
// end ;
14684: PPOPN 1
14686: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14687: LD_EXP 21
14691: PUSH
14692: LD_EXP 69
14696: AND
14697: IFFALSE 14809
14699: GO 14701
14701: DISABLE
14702: LD_INT 0
14704: PPUSH
14705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: LD_INT 30
14728: PUSH
14729: LD_INT 27
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 30
14738: PUSH
14739: LD_INT 26
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 30
14748: PUSH
14749: LD_INT 28
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: ST_TO_ADDR
// if not tmp then
14771: LD_VAR 0 2
14775: NOT
14776: IFFALSE 14780
// exit ;
14778: GO 14809
// for i in tmp do
14780: LD_ADDR_VAR 0 1
14784: PUSH
14785: LD_VAR 0 2
14789: PUSH
14790: FOR_IN
14791: IFFALSE 14807
// SetLives ( i , 1 ) ;
14793: LD_VAR 0 1
14797: PPUSH
14798: LD_INT 1
14800: PPUSH
14801: CALL_OW 234
14805: GO 14790
14807: POP
14808: POP
// end ;
14809: PPOPN 2
14811: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14812: LD_EXP 21
14816: PUSH
14817: LD_EXP 70
14821: AND
14822: IFFALSE 15096
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
14831: PPUSH
// begin i := rand ( 1 , 7 ) ;
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_INT 1
14839: PPUSH
14840: LD_INT 7
14842: PPUSH
14843: CALL_OW 12
14847: ST_TO_ADDR
// case i of 1 :
14848: LD_VAR 0 1
14852: PUSH
14853: LD_INT 1
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 14871
14861: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14862: LD_STRING earthquake(getX(game), 0, 32)
14864: PPUSH
14865: CALL_OW 559
14869: GO 15096
14871: LD_INT 2
14873: DOUBLE
14874: EQUAL
14875: IFTRUE 14879
14877: GO 14893
14879: POP
// begin ToLua ( displayStucuk(); ) ;
14880: LD_STRING displayStucuk();
14882: PPUSH
14883: CALL_OW 559
// ResetFog ;
14887: CALL_OW 335
// end ; 3 :
14891: GO 15096
14893: LD_INT 3
14895: DOUBLE
14896: EQUAL
14897: IFTRUE 14901
14899: GO 15005
14901: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_INT 22
14909: PUSH
14910: LD_OWVAR 2
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 25
14921: PUSH
14922: LD_INT 1
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PPUSH
14933: CALL_OW 69
14937: ST_TO_ADDR
// if not tmp then
14938: LD_VAR 0 2
14942: NOT
14943: IFFALSE 14947
// exit ;
14945: GO 15096
// un := tmp [ rand ( 1 , tmp ) ] ;
14947: LD_ADDR_VAR 0 3
14951: PUSH
14952: LD_VAR 0 2
14956: PUSH
14957: LD_INT 1
14959: PPUSH
14960: LD_VAR 0 2
14964: PPUSH
14965: CALL_OW 12
14969: ARRAY
14970: ST_TO_ADDR
// if Crawls ( un ) then
14971: LD_VAR 0 3
14975: PPUSH
14976: CALL_OW 318
14980: IFFALSE 14991
// ComWalk ( un ) ;
14982: LD_VAR 0 3
14986: PPUSH
14987: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14991: LD_VAR 0 3
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: CALL_OW 336
// end ; 4 :
15003: GO 15096
15005: LD_INT 4
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15013
15011: GO 15074
15013: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: LD_INT 22
15021: PUSH
15022: LD_OWVAR 2
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 30
15033: PUSH
15034: LD_INT 29
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: ST_TO_ADDR
// if not tmp then
15050: LD_VAR 0 2
15054: NOT
15055: IFFALSE 15059
// exit ;
15057: GO 15096
// DestroyUnit ( tmp [ 1 ] ) ;
15059: LD_VAR 0 2
15063: PUSH
15064: LD_INT 1
15066: ARRAY
15067: PPUSH
15068: CALL_OW 65
// end ; 5 .. 7 :
15072: GO 15096
15074: LD_INT 5
15076: DOUBLE
15077: GREATEREQUAL
15078: IFFALSE 15086
15080: LD_INT 7
15082: DOUBLE
15083: LESSEQUAL
15084: IFTRUE 15088
15086: GO 15095
15088: POP
// StreamSibBomb ; end ;
15089: CALL 11346 0 0
15093: GO 15096
15095: POP
// end ;
15096: PPOPN 3
15098: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15099: LD_EXP 21
15103: PUSH
15104: LD_EXP 71
15108: AND
15109: IFFALSE 15265
15111: GO 15113
15113: DISABLE
15114: LD_INT 0
15116: PPUSH
15117: PPUSH
15118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: LD_INT 81
15126: PUSH
15127: LD_OWVAR 2
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PPUSH
15168: CALL_OW 69
15172: ST_TO_ADDR
// if not tmp then
15173: LD_VAR 0 2
15177: NOT
15178: IFFALSE 15182
// exit ;
15180: GO 15265
// p := 0 ;
15182: LD_ADDR_VAR 0 3
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// p := p + 1 ;
15197: LD_ADDR_VAR 0 3
15201: PUSH
15202: LD_VAR 0 3
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: ST_TO_ADDR
// for i in tmp do
15211: LD_ADDR_VAR 0 1
15215: PUSH
15216: LD_VAR 0 2
15220: PUSH
15221: FOR_IN
15222: IFFALSE 15253
// if GetLives ( i ) < 1000 then
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL_OW 256
15233: PUSH
15234: LD_INT 1000
15236: LESS
15237: IFFALSE 15251
// SetLives ( i , 1000 ) ;
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_INT 1000
15246: PPUSH
15247: CALL_OW 234
15251: GO 15221
15253: POP
15254: POP
// until p > 20 ;
15255: LD_VAR 0 3
15259: PUSH
15260: LD_INT 20
15262: GREATER
15263: IFFALSE 15190
// end ;
15265: PPOPN 3
15267: END
// every 0 0$1 trigger StreamModeActive and sTime do
15268: LD_EXP 21
15272: PUSH
15273: LD_EXP 72
15277: AND
15278: IFFALSE 15313
15280: GO 15282
15282: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15283: LD_INT 28
15285: PPUSH
15286: LD_OWVAR 2
15290: PPUSH
15291: LD_INT 2
15293: PPUSH
15294: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15298: LD_INT 30
15300: PPUSH
15301: LD_OWVAR 2
15305: PPUSH
15306: LD_INT 2
15308: PPUSH
15309: CALL_OW 322
// end ;
15313: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15314: LD_EXP 21
15318: PUSH
15319: LD_EXP 73
15323: AND
15324: IFFALSE 15445
15326: GO 15328
15328: DISABLE
15329: LD_INT 0
15331: PPUSH
15332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15333: LD_ADDR_VAR 0 2
15337: PUSH
15338: LD_INT 22
15340: PUSH
15341: LD_OWVAR 2
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 21
15352: PUSH
15353: LD_INT 1
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: LD_INT 23
15365: PUSH
15366: LD_INT 0
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 69
15386: ST_TO_ADDR
// if not tmp then
15387: LD_VAR 0 2
15391: NOT
15392: IFFALSE 15396
// exit ;
15394: GO 15445
// for i in tmp do
15396: LD_ADDR_VAR 0 1
15400: PUSH
15401: LD_VAR 0 2
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15443
// begin if Crawls ( i ) then
15409: LD_VAR 0 1
15413: PPUSH
15414: CALL_OW 318
15418: IFFALSE 15429
// ComWalk ( i ) ;
15420: LD_VAR 0 1
15424: PPUSH
15425: CALL_OW 138
// SetClass ( i , 2 ) ;
15429: LD_VAR 0 1
15433: PPUSH
15434: LD_INT 2
15436: PPUSH
15437: CALL_OW 336
// end ;
15441: GO 15406
15443: POP
15444: POP
// end ;
15445: PPOPN 2
15447: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15448: LD_EXP 21
15452: PUSH
15453: LD_EXP 74
15457: AND
15458: IFFALSE 15739
15460: GO 15462
15462: DISABLE
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
15467: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15468: LD_OWVAR 2
15472: PPUSH
15473: LD_INT 9
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15486: LD_INT 9
15488: PPUSH
15489: LD_OWVAR 2
15493: PPUSH
15494: CALL_OW 343
// uc_side := 9 ;
15498: LD_ADDR_OWVAR 20
15502: PUSH
15503: LD_INT 9
15505: ST_TO_ADDR
// uc_nation := 2 ;
15506: LD_ADDR_OWVAR 21
15510: PUSH
15511: LD_INT 2
15513: ST_TO_ADDR
// hc_name := Dark Warrior ;
15514: LD_ADDR_OWVAR 26
15518: PUSH
15519: LD_STRING Dark Warrior
15521: ST_TO_ADDR
// hc_gallery :=  ;
15522: LD_ADDR_OWVAR 33
15526: PUSH
15527: LD_STRING 
15529: ST_TO_ADDR
// hc_noskilllimit := true ;
15530: LD_ADDR_OWVAR 76
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15538: LD_ADDR_OWVAR 31
15542: PUSH
15543: LD_INT 30
15545: PUSH
15546: LD_INT 30
15548: PUSH
15549: LD_INT 30
15551: PUSH
15552: LD_INT 30
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: ST_TO_ADDR
// un := CreateHuman ;
15561: LD_ADDR_VAR 0 3
15565: PUSH
15566: CALL_OW 44
15570: ST_TO_ADDR
// hc_noskilllimit := false ;
15571: LD_ADDR_OWVAR 76
15575: PUSH
15576: LD_INT 0
15578: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15579: LD_VAR 0 3
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: CALL_OW 51
// p := 0 ;
15591: LD_ADDR_VAR 0 2
15595: PUSH
15596: LD_INT 0
15598: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15599: LD_INT 35
15601: PPUSH
15602: CALL_OW 67
// p := p + 1 ;
15606: LD_ADDR_VAR 0 2
15610: PUSH
15611: LD_VAR 0 2
15615: PUSH
15616: LD_INT 1
15618: PLUS
15619: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15620: LD_VAR 0 3
15624: PPUSH
15625: CALL_OW 256
15629: PUSH
15630: LD_INT 1000
15632: LESS
15633: IFFALSE 15647
// SetLives ( un , 1000 ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 1000
15642: PPUSH
15643: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15647: LD_VAR 0 3
15651: PPUSH
15652: LD_INT 81
15654: PUSH
15655: LD_OWVAR 2
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 91
15666: PUSH
15667: LD_VAR 0 3
15671: PUSH
15672: LD_INT 30
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PPUSH
15689: LD_VAR 0 3
15693: PPUSH
15694: CALL_OW 74
15698: PPUSH
15699: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 60
15710: GREATER
15711: PUSH
15712: LD_VAR 0 3
15716: PPUSH
15717: CALL_OW 301
15721: OR
15722: IFFALSE 15599
// if un then
15724: LD_VAR 0 3
15728: IFFALSE 15739
// RemoveUnit ( un ) ;
15730: LD_VAR 0 3
15734: PPUSH
15735: CALL_OW 64
// end ; end_of_file
15739: PPOPN 3
15741: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
15746: PPUSH
15747: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 264
15757: PUSH
15758: LD_EXP 11
15762: EQUAL
15763: IFFALSE 15835
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15765: LD_INT 68
15767: PPUSH
15768: LD_VAR 0 1
15772: PPUSH
15773: CALL_OW 255
15777: PPUSH
15778: CALL_OW 321
15782: PUSH
15783: LD_INT 2
15785: EQUAL
15786: IFFALSE 15798
// eff := 70 else
15788: LD_ADDR_VAR 0 4
15792: PUSH
15793: LD_INT 70
15795: ST_TO_ADDR
15796: GO 15806
// eff := 30 ;
15798: LD_ADDR_VAR 0 4
15802: PUSH
15803: LD_INT 30
15805: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 250
15815: PPUSH
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 251
15825: PPUSH
15826: LD_VAR 0 4
15830: PPUSH
15831: CALL_OW 495
// end ; end ;
15835: LD_VAR 0 2
15839: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15840: LD_INT 0
15842: PPUSH
// end ;
15843: LD_VAR 0 4
15847: RET
// export function SOS_Command ( cmd ) ; begin
15848: LD_INT 0
15850: PPUSH
// end ;
15851: LD_VAR 0 2
15855: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 255
15863: EQUAL
15864: PUSH
15865: LD_VAR 0 2
15869: PPUSH
15870: CALL_OW 264
15874: PUSH
15875: LD_INT 14
15877: PUSH
15878: LD_INT 53
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: IN
15885: AND
15886: PUSH
15887: LD_VAR 0 4
15891: PPUSH
15892: LD_VAR 0 5
15896: PPUSH
15897: CALL_OW 488
15901: AND
15902: IFFALSE 15926
// CutTreeXYR ( unit , x , y , 12 ) ;
15904: LD_VAR 0 2
15908: PPUSH
15909: LD_VAR 0 4
15913: PPUSH
15914: LD_VAR 0 5
15918: PPUSH
15919: LD_INT 12
15921: PPUSH
15922: CALL 15929 0 4
// end ;
15926: PPOPN 5
15928: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
15933: PPUSH
15934: PPUSH
15935: PPUSH
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15940: LD_VAR 0 1
15944: NOT
15945: PUSH
15946: LD_VAR 0 2
15950: PPUSH
15951: LD_VAR 0 3
15955: PPUSH
15956: CALL_OW 488
15960: NOT
15961: OR
15962: PUSH
15963: LD_VAR 0 4
15967: NOT
15968: OR
15969: IFFALSE 15973
// exit ;
15971: GO 16313
// list := [ ] ;
15973: LD_ADDR_VAR 0 13
15977: PUSH
15978: EMPTY
15979: ST_TO_ADDR
// if x - r < 0 then
15980: LD_VAR 0 2
15984: PUSH
15985: LD_VAR 0 4
15989: MINUS
15990: PUSH
15991: LD_INT 0
15993: LESS
15994: IFFALSE 16006
// min_x := 0 else
15996: LD_ADDR_VAR 0 7
16000: PUSH
16001: LD_INT 0
16003: ST_TO_ADDR
16004: GO 16022
// min_x := x - r ;
16006: LD_ADDR_VAR 0 7
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: LD_VAR 0 4
16020: MINUS
16021: ST_TO_ADDR
// if y - r < 0 then
16022: LD_VAR 0 3
16026: PUSH
16027: LD_VAR 0 4
16031: MINUS
16032: PUSH
16033: LD_INT 0
16035: LESS
16036: IFFALSE 16048
// min_y := 0 else
16038: LD_ADDR_VAR 0 8
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
16046: GO 16064
// min_y := y - r ;
16048: LD_ADDR_VAR 0 8
16052: PUSH
16053: LD_VAR 0 3
16057: PUSH
16058: LD_VAR 0 4
16062: MINUS
16063: ST_TO_ADDR
// max_x := x + r ;
16064: LD_ADDR_VAR 0 9
16068: PUSH
16069: LD_VAR 0 2
16073: PUSH
16074: LD_VAR 0 4
16078: PLUS
16079: ST_TO_ADDR
// max_y := y + r ;
16080: LD_ADDR_VAR 0 10
16084: PUSH
16085: LD_VAR 0 3
16089: PUSH
16090: LD_VAR 0 4
16094: PLUS
16095: ST_TO_ADDR
// for _x = min_x to max_x do
16096: LD_ADDR_VAR 0 11
16100: PUSH
16101: DOUBLE
16102: LD_VAR 0 7
16106: DEC
16107: ST_TO_ADDR
16108: LD_VAR 0 9
16112: PUSH
16113: FOR_TO
16114: IFFALSE 16231
// for _y = min_y to max_y do
16116: LD_ADDR_VAR 0 12
16120: PUSH
16121: DOUBLE
16122: LD_VAR 0 8
16126: DEC
16127: ST_TO_ADDR
16128: LD_VAR 0 10
16132: PUSH
16133: FOR_TO
16134: IFFALSE 16227
// begin if not ValidHex ( _x , _y ) then
16136: LD_VAR 0 11
16140: PPUSH
16141: LD_VAR 0 12
16145: PPUSH
16146: CALL_OW 488
16150: NOT
16151: IFFALSE 16155
// continue ;
16153: GO 16133
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16155: LD_VAR 0 11
16159: PPUSH
16160: LD_VAR 0 12
16164: PPUSH
16165: CALL_OW 351
16169: PUSH
16170: LD_VAR 0 11
16174: PPUSH
16175: LD_VAR 0 12
16179: PPUSH
16180: CALL_OW 554
16184: AND
16185: IFFALSE 16225
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16187: LD_ADDR_VAR 0 13
16191: PUSH
16192: LD_VAR 0 13
16196: PPUSH
16197: LD_VAR 0 13
16201: PUSH
16202: LD_INT 1
16204: PLUS
16205: PPUSH
16206: LD_VAR 0 11
16210: PUSH
16211: LD_VAR 0 12
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PPUSH
16220: CALL_OW 2
16224: ST_TO_ADDR
// end ;
16225: GO 16133
16227: POP
16228: POP
16229: GO 16113
16231: POP
16232: POP
// if not list then
16233: LD_VAR 0 13
16237: NOT
16238: IFFALSE 16242
// exit ;
16240: GO 16313
// for i in list do
16242: LD_ADDR_VAR 0 6
16246: PUSH
16247: LD_VAR 0 13
16251: PUSH
16252: FOR_IN
16253: IFFALSE 16311
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_STRING M
16262: PUSH
16263: LD_VAR 0 6
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: PUSH
16272: LD_VAR 0 6
16276: PUSH
16277: LD_INT 2
16279: ARRAY
16280: PUSH
16281: LD_INT 0
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: LD_INT 0
16289: PUSH
16290: LD_INT 0
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: PPUSH
16305: CALL_OW 447
16309: GO 16252
16311: POP
16312: POP
// end ;
16313: LD_VAR 0 5
16317: RET
