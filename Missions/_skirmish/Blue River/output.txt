// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4269
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4167
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4036
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: PUSH
3936: LD_INT 63
3938: PPUSH
3939: LD_INT 37
3941: PPUSH
3942: CALL_OW 428
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 30
3954: EQUAL
3955: AND
3956: IFFALSE 3962
// ComitSib ;
3958: CALL 2766 0 0
// if Difficulty > 2 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 2
3969: GREATER
3970: IFFALSE 3998
// begin Wait ( 0 0$25 ) ;
3972: LD_INT 875
3974: PPUSH
3975: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PUSH
3989: LD_INT 4
3991: PPUSH
3992: CALL 1355 0 1
3996: ADD
3997: ST_TO_ADDR
// end ; if attackN > 7 then
3998: LD_EXP 6
4002: PUSH
4003: LD_INT 7
4005: GREATER
4006: IFFALSE 4034
// begin Wait ( 0 0$15 ) ;
4008: LD_INT 525
4010: PPUSH
4011: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL 1355 0 1
4032: ADD
4033: ST_TO_ADDR
// end ; end ; 3 :
4034: GO 4167
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4166
4044: POP
// begin pom := pom ^ Attack ( 1 ) ;
4045: LD_ADDR_EXP 4
4049: PUSH
4050: LD_EXP 4
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL 1355 0 1
4062: ADD
4063: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4064: LD_INT 70
4066: PPUSH
4067: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4071: LD_ADDR_EXP 4
4075: PUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL 1355 0 1
4088: ADD
4089: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4090: LD_INT 2100
4092: PPUSH
4093: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4097: LD_ADDR_EXP 4
4101: PUSH
4102: LD_EXP 4
4106: PUSH
4107: LD_INT 3
4109: PPUSH
4110: CALL 1355 0 1
4114: ADD
4115: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4116: LD_ADDR_EXP 4
4120: PUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 5
4128: PPUSH
4129: CALL 1355 0 1
4133: ADD
4134: ST_TO_ADDR
// if attackN > 10 then
4135: LD_EXP 6
4139: PUSH
4140: LD_INT 10
4142: GREATER
4143: IFFALSE 4164
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1355 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ;
4164: GO 4167
4166: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 1
4174: GREATER
4175: PUSH
4176: LD_EXP 6
4180: PUSH
4181: LD_INT 4
4183: MOD
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: AND
4189: IFFALSE 4255
// begin Wait ( 1 1$45 ) ;
4191: LD_INT 3675
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4217: LD_ADDR_EXP 4
4221: PUSH
4222: LD_EXP 4
4226: PUSH
4227: LD_INT 4
4229: PPUSH
4230: CALL 1355 0 1
4234: ADD
4235: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4236: LD_ADDR_EXP 5
4240: PUSH
4241: LD_EXP 5
4245: PUSH
4246: LD_INT 6
4248: PPUSH
4249: CALL 1355 0 1
4253: ADD
4254: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4255: LD_ADDR_EXP 6
4259: PUSH
4260: LD_EXP 6
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: PPOPN 2
4271: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4272: LD_EXP 6
4276: PUSH
4277: LD_INT 10
4279: PUSH
4280: LD_INT 12
4282: PUSH
4283: LD_INT 14
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: GREATEREQUAL
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PUSH
4313: LD_INT 0
4315: EQUAL
4316: AND
4317: IFFALSE 4360
4319: GO 4321
4321: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4322: LD_EXP 2
4326: PPUSH
4327: LD_STRING DDocEnd
4329: PPUSH
4330: CALL_OW 586
// wait ( 0 0$03 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// Query ( QWin ) ;
4341: LD_STRING QWin
4343: PPUSH
4344: CALL_OW 97
// music_nat := 5 ;
4348: LD_ADDR_OWVAR 71
4352: PUSH
4353: LD_INT 5
4355: ST_TO_ADDR
// YouWin ;
4356: CALL_OW 103
// end ; end_of_file
4360: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL 20284 0 1
// if un = brave or un = com then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 1
4377: EQUAL
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: LD_EXP 1
4388: EQUAL
4389: OR
4390: IFFALSE 4411
// begin SayRadioNoFace ( doc , DDocWin ) ;
4392: LD_EXP 2
4396: PPUSH
4397: LD_STRING DDocWin
4399: PPUSH
4400: CALL_OW 586
// YouLost (  ) ;
4404: LD_STRING 
4406: PPUSH
4407: CALL_OW 104
// end ; end ;
4411: PPOPN 1
4413: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL 20380 0 3
// end ;
4433: PPOPN 3
4435: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4436: LD_VAR 0 1
4440: PPUSH
4441: CALL 20388 0 1
// end ;
4445: PPOPN 1
4447: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL 20404 0 2
// end ; end_of_file end_of_file
4462: PPOPN 2
4464: END
// export globalGameSaveCounter ; every 0 0$1 do
4465: GO 4467
4467: DISABLE
// begin enable ;
4468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4469: LD_STRING updateTimer(
4471: PUSH
4472: LD_OWVAR 1
4476: STR
4477: PUSH
4478: LD_STRING );
4480: STR
4481: PPUSH
4482: CALL_OW 559
// end ;
4486: END
// every 0 0$1 do
4487: GO 4489
4489: DISABLE
// begin globalGameSaveCounter := 0 ;
4490: LD_ADDR_EXP 7
4494: PUSH
4495: LD_INT 0
4497: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4498: LD_STRING setGameSaveCounter(0)
4500: PPUSH
4501: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4505: LD_STRING initStreamRollete();
4507: PPUSH
4508: CALL_OW 559
// InitStreamMode ;
4512: CALL 5855 0 0
// DefineStreamItems ( false ) ;
4516: LD_INT 0
4518: PPUSH
4519: CALL 6319 0 1
// end ;
4523: END
// export function SOS_MapStart ( ) ; begin
4524: LD_INT 0
4526: PPUSH
// if streamModeActive then
4527: LD_EXP 8
4531: IFFALSE 4540
// DefineStreamItems ( true ) ;
4533: LD_INT 1
4535: PPUSH
4536: CALL 6319 0 1
// UpdateLuaVariables ( ) ;
4540: CALL 4557 0 0
// UpdateFactoryWaypoints ( ) ;
4544: CALL 19188 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4548: CALL 19445 0 0
// end ;
4552: LD_VAR 0 1
4556: RET
// function UpdateLuaVariables ( ) ; begin
4557: LD_INT 0
4559: PPUSH
// if globalGameSaveCounter then
4560: LD_EXP 7
4564: IFFALSE 4598
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4566: LD_ADDR_EXP 7
4570: PUSH
4571: LD_EXP 7
4575: PPUSH
4576: CALL 64230 0 1
4580: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4581: LD_STRING setGameSaveCounter(
4583: PUSH
4584: LD_EXP 7
4588: STR
4589: PUSH
4590: LD_STRING )
4592: STR
4593: PPUSH
4594: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4598: LD_STRING setGameDifficulty(
4600: PUSH
4601: LD_OWVAR 67
4605: STR
4606: PUSH
4607: LD_STRING )
4609: STR
4610: PPUSH
4611: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4615: LD_STRING displayDifficulty(
4617: PUSH
4618: LD_OWVAR 67
4622: STR
4623: PUSH
4624: LD_STRING )
4626: STR
4627: PPUSH
4628: CALL_OW 559
// end ;
4632: LD_VAR 0 1
4636: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4637: LD_INT 0
4639: PPUSH
// if p2 = stream_mode then
4640: LD_VAR 0 2
4644: PUSH
4645: LD_INT 100
4647: EQUAL
4648: IFFALSE 5651
// begin if not StreamModeActive then
4650: LD_EXP 8
4654: NOT
4655: IFFALSE 4665
// StreamModeActive := true ;
4657: LD_ADDR_EXP 8
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// if p3 = 0 then
4665: LD_VAR 0 3
4669: PUSH
4670: LD_INT 0
4672: EQUAL
4673: IFFALSE 4679
// InitStreamMode ;
4675: CALL 5855 0 0
// if p3 = 1 then
4679: LD_VAR 0 3
4683: PUSH
4684: LD_INT 1
4686: EQUAL
4687: IFFALSE 4697
// sRocket := true ;
4689: LD_ADDR_EXP 13
4693: PUSH
4694: LD_INT 1
4696: ST_TO_ADDR
// if p3 = 2 then
4697: LD_VAR 0 3
4701: PUSH
4702: LD_INT 2
4704: EQUAL
4705: IFFALSE 4715
// sSpeed := true ;
4707: LD_ADDR_EXP 12
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// if p3 = 3 then
4715: LD_VAR 0 3
4719: PUSH
4720: LD_INT 3
4722: EQUAL
4723: IFFALSE 4733
// sEngine := true ;
4725: LD_ADDR_EXP 14
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// if p3 = 4 then
4733: LD_VAR 0 3
4737: PUSH
4738: LD_INT 4
4740: EQUAL
4741: IFFALSE 4751
// sSpec := true ;
4743: LD_ADDR_EXP 11
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// if p3 = 5 then
4751: LD_VAR 0 3
4755: PUSH
4756: LD_INT 5
4758: EQUAL
4759: IFFALSE 4769
// sLevel := true ;
4761: LD_ADDR_EXP 15
4765: PUSH
4766: LD_INT 1
4768: ST_TO_ADDR
// if p3 = 6 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 6
4776: EQUAL
4777: IFFALSE 4787
// sArmoury := true ;
4779: LD_ADDR_EXP 16
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 7 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 7
4794: EQUAL
4795: IFFALSE 4805
// sRadar := true ;
4797: LD_ADDR_EXP 17
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// if p3 = 8 then
4805: LD_VAR 0 3
4809: PUSH
4810: LD_INT 8
4812: EQUAL
4813: IFFALSE 4823
// sBunker := true ;
4815: LD_ADDR_EXP 18
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// if p3 = 9 then
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 9
4830: EQUAL
4831: IFFALSE 4841
// sHack := true ;
4833: LD_ADDR_EXP 19
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// if p3 = 10 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 10
4848: EQUAL
4849: IFFALSE 4859
// sFire := true ;
4851: LD_ADDR_EXP 20
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 11 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 11
4866: EQUAL
4867: IFFALSE 4877
// sRefresh := true ;
4869: LD_ADDR_EXP 21
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 12 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 12
4884: EQUAL
4885: IFFALSE 4895
// sExp := true ;
4887: LD_ADDR_EXP 22
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 13 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 13
4902: EQUAL
4903: IFFALSE 4913
// sDepot := true ;
4905: LD_ADDR_EXP 23
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 14 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 14
4920: EQUAL
4921: IFFALSE 4931
// sFlag := true ;
4923: LD_ADDR_EXP 24
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 15 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 15
4938: EQUAL
4939: IFFALSE 4949
// sKamikadze := true ;
4941: LD_ADDR_EXP 32
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 16 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 16
4956: EQUAL
4957: IFFALSE 4967
// sTroll := true ;
4959: LD_ADDR_EXP 33
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 17 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 17
4974: EQUAL
4975: IFFALSE 4985
// sSlow := true ;
4977: LD_ADDR_EXP 34
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 18 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 18
4992: EQUAL
4993: IFFALSE 5003
// sLack := true ;
4995: LD_ADDR_EXP 35
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 19 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 19
5010: EQUAL
5011: IFFALSE 5021
// sTank := true ;
5013: LD_ADDR_EXP 37
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 20 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 20
5028: EQUAL
5029: IFFALSE 5039
// sRemote := true ;
5031: LD_ADDR_EXP 38
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 21 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 21
5046: EQUAL
5047: IFFALSE 5057
// sPowell := true ;
5049: LD_ADDR_EXP 39
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 22 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 22
5064: EQUAL
5065: IFFALSE 5075
// sTeleport := true ;
5067: LD_ADDR_EXP 42
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 23 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 23
5082: EQUAL
5083: IFFALSE 5093
// sOilTower := true ;
5085: LD_ADDR_EXP 44
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 24 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 24
5100: EQUAL
5101: IFFALSE 5111
// sShovel := true ;
5103: LD_ADDR_EXP 45
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 25 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 25
5118: EQUAL
5119: IFFALSE 5129
// sSheik := true ;
5121: LD_ADDR_EXP 46
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 26 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 26
5136: EQUAL
5137: IFFALSE 5147
// sEarthquake := true ;
5139: LD_ADDR_EXP 48
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 27 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 27
5154: EQUAL
5155: IFFALSE 5165
// sAI := true ;
5157: LD_ADDR_EXP 49
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 28 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 28
5172: EQUAL
5173: IFFALSE 5183
// sCargo := true ;
5175: LD_ADDR_EXP 52
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 29 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 29
5190: EQUAL
5191: IFFALSE 5201
// sDLaser := true ;
5193: LD_ADDR_EXP 53
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 30 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 30
5208: EQUAL
5209: IFFALSE 5219
// sExchange := true ;
5211: LD_ADDR_EXP 54
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 31 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 31
5226: EQUAL
5227: IFFALSE 5237
// sFac := true ;
5229: LD_ADDR_EXP 55
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 32 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 32
5244: EQUAL
5245: IFFALSE 5255
// sPower := true ;
5247: LD_ADDR_EXP 56
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 33 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 33
5262: EQUAL
5263: IFFALSE 5273
// sRandom := true ;
5265: LD_ADDR_EXP 57
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// if p3 = 34 then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 34
5280: EQUAL
5281: IFFALSE 5291
// sShield := true ;
5283: LD_ADDR_EXP 58
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// if p3 = 35 then
5291: LD_VAR 0 3
5295: PUSH
5296: LD_INT 35
5298: EQUAL
5299: IFFALSE 5309
// sTime := true ;
5301: LD_ADDR_EXP 59
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// if p3 = 36 then
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 36
5316: EQUAL
5317: IFFALSE 5327
// sTools := true ;
5319: LD_ADDR_EXP 60
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// if p3 = 101 then
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 101
5334: EQUAL
5335: IFFALSE 5345
// sSold := true ;
5337: LD_ADDR_EXP 25
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// if p3 = 102 then
5345: LD_VAR 0 3
5349: PUSH
5350: LD_INT 102
5352: EQUAL
5353: IFFALSE 5363
// sDiff := true ;
5355: LD_ADDR_EXP 26
5359: PUSH
5360: LD_INT 1
5362: ST_TO_ADDR
// if p3 = 103 then
5363: LD_VAR 0 3
5367: PUSH
5368: LD_INT 103
5370: EQUAL
5371: IFFALSE 5381
// sFog := true ;
5373: LD_ADDR_EXP 29
5377: PUSH
5378: LD_INT 1
5380: ST_TO_ADDR
// if p3 = 104 then
5381: LD_VAR 0 3
5385: PUSH
5386: LD_INT 104
5388: EQUAL
5389: IFFALSE 5399
// sReset := true ;
5391: LD_ADDR_EXP 30
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
// if p3 = 105 then
5399: LD_VAR 0 3
5403: PUSH
5404: LD_INT 105
5406: EQUAL
5407: IFFALSE 5417
// sSun := true ;
5409: LD_ADDR_EXP 31
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// if p3 = 106 then
5417: LD_VAR 0 3
5421: PUSH
5422: LD_INT 106
5424: EQUAL
5425: IFFALSE 5435
// sTiger := true ;
5427: LD_ADDR_EXP 27
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// if p3 = 107 then
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 107
5442: EQUAL
5443: IFFALSE 5453
// sBomb := true ;
5445: LD_ADDR_EXP 28
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// if p3 = 108 then
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 108
5460: EQUAL
5461: IFFALSE 5471
// sWound := true ;
5463: LD_ADDR_EXP 36
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// if p3 = 109 then
5471: LD_VAR 0 3
5475: PUSH
5476: LD_INT 109
5478: EQUAL
5479: IFFALSE 5489
// sBetray := true ;
5481: LD_ADDR_EXP 40
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// if p3 = 110 then
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 110
5496: EQUAL
5497: IFFALSE 5507
// sContamin := true ;
5499: LD_ADDR_EXP 41
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// if p3 = 111 then
5507: LD_VAR 0 3
5511: PUSH
5512: LD_INT 111
5514: EQUAL
5515: IFFALSE 5525
// sOil := true ;
5517: LD_ADDR_EXP 43
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// if p3 = 112 then
5525: LD_VAR 0 3
5529: PUSH
5530: LD_INT 112
5532: EQUAL
5533: IFFALSE 5543
// sStu := true ;
5535: LD_ADDR_EXP 47
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// if p3 = 113 then
5543: LD_VAR 0 3
5547: PUSH
5548: LD_INT 113
5550: EQUAL
5551: IFFALSE 5561
// sBazooka := true ;
5553: LD_ADDR_EXP 50
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// if p3 = 114 then
5561: LD_VAR 0 3
5565: PUSH
5566: LD_INT 114
5568: EQUAL
5569: IFFALSE 5579
// sMortar := true ;
5571: LD_ADDR_EXP 51
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// if p3 = 115 then
5579: LD_VAR 0 3
5583: PUSH
5584: LD_INT 115
5586: EQUAL
5587: IFFALSE 5597
// sRanger := true ;
5589: LD_ADDR_EXP 61
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// if p3 = 116 then
5597: LD_VAR 0 3
5601: PUSH
5602: LD_INT 116
5604: EQUAL
5605: IFFALSE 5615
// sComputer := true ;
5607: LD_ADDR_EXP 62
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// if p3 = 117 then
5615: LD_VAR 0 3
5619: PUSH
5620: LD_INT 117
5622: EQUAL
5623: IFFALSE 5633
// s30 := true ;
5625: LD_ADDR_EXP 63
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// if p3 = 118 then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 118
5640: EQUAL
5641: IFFALSE 5651
// s60 := true ;
5643: LD_ADDR_EXP 64
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// end ; if p2 = hack_mode then
5651: LD_VAR 0 2
5655: PUSH
5656: LD_INT 101
5658: EQUAL
5659: IFFALSE 5787
// begin case p3 of 1 :
5661: LD_VAR 0 3
5665: PUSH
5666: LD_INT 1
5668: DOUBLE
5669: EQUAL
5670: IFTRUE 5674
5672: GO 5681
5674: POP
// hHackUnlimitedResources ; 2 :
5675: CALL 17934 0 0
5679: GO 5787
5681: LD_INT 2
5683: DOUBLE
5684: EQUAL
5685: IFTRUE 5689
5687: GO 5696
5689: POP
// hHackSetLevel10 ; 3 :
5690: CALL 18067 0 0
5694: GO 5787
5696: LD_INT 3
5698: DOUBLE
5699: EQUAL
5700: IFTRUE 5704
5702: GO 5711
5704: POP
// hHackSetLevel10YourUnits ; 4 :
5705: CALL 18152 0 0
5709: GO 5787
5711: LD_INT 4
5713: DOUBLE
5714: EQUAL
5715: IFTRUE 5719
5717: GO 5726
5719: POP
// hHackInvincible ; 5 :
5720: CALL 18600 0 0
5724: GO 5787
5726: LD_INT 5
5728: DOUBLE
5729: EQUAL
5730: IFTRUE 5734
5732: GO 5741
5734: POP
// hHackInvisible ; 6 :
5735: CALL 18711 0 0
5739: GO 5787
5741: LD_INT 6
5743: DOUBLE
5744: EQUAL
5745: IFTRUE 5749
5747: GO 5756
5749: POP
// hHackChangeYourSide ; 7 :
5750: CALL 18768 0 0
5754: GO 5787
5756: LD_INT 7
5758: DOUBLE
5759: EQUAL
5760: IFTRUE 5764
5762: GO 5771
5764: POP
// hHackChangeUnitSide ; 8 :
5765: CALL 18810 0 0
5769: GO 5787
5771: LD_INT 8
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5786
5779: POP
// hHackFog ; end ;
5780: CALL 18911 0 0
5784: GO 5787
5786: POP
// end ; if p2 = game_save_mode then
5787: LD_VAR 0 2
5791: PUSH
5792: LD_INT 102
5794: EQUAL
5795: IFFALSE 5850
// begin if p3 = 1 then
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: IFFALSE 5817
// globalGameSaveCounter := p4 ;
5807: LD_ADDR_EXP 7
5811: PUSH
5812: LD_VAR 0 4
5816: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 2
5824: EQUAL
5825: PUSH
5826: LD_EXP 7
5830: AND
5831: IFFALSE 5850
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5833: LD_STRING setGameSaveCounter(
5835: PUSH
5836: LD_EXP 7
5840: STR
5841: PUSH
5842: LD_STRING )
5844: STR
5845: PPUSH
5846: CALL_OW 559
// end ; end ;
5850: LD_VAR 0 7
5854: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5855: LD_INT 0
5857: PPUSH
// streamModeActive := false ;
5858: LD_ADDR_EXP 8
5862: PUSH
5863: LD_INT 0
5865: ST_TO_ADDR
// normalCounter := 36 ;
5866: LD_ADDR_EXP 9
5870: PUSH
5871: LD_INT 36
5873: ST_TO_ADDR
// hardcoreCounter := 18 ;
5874: LD_ADDR_EXP 10
5878: PUSH
5879: LD_INT 18
5881: ST_TO_ADDR
// sRocket := false ;
5882: LD_ADDR_EXP 13
5886: PUSH
5887: LD_INT 0
5889: ST_TO_ADDR
// sSpeed := false ;
5890: LD_ADDR_EXP 12
5894: PUSH
5895: LD_INT 0
5897: ST_TO_ADDR
// sEngine := false ;
5898: LD_ADDR_EXP 14
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// sSpec := false ;
5906: LD_ADDR_EXP 11
5910: PUSH
5911: LD_INT 0
5913: ST_TO_ADDR
// sLevel := false ;
5914: LD_ADDR_EXP 15
5918: PUSH
5919: LD_INT 0
5921: ST_TO_ADDR
// sArmoury := false ;
5922: LD_ADDR_EXP 16
5926: PUSH
5927: LD_INT 0
5929: ST_TO_ADDR
// sRadar := false ;
5930: LD_ADDR_EXP 17
5934: PUSH
5935: LD_INT 0
5937: ST_TO_ADDR
// sBunker := false ;
5938: LD_ADDR_EXP 18
5942: PUSH
5943: LD_INT 0
5945: ST_TO_ADDR
// sHack := false ;
5946: LD_ADDR_EXP 19
5950: PUSH
5951: LD_INT 0
5953: ST_TO_ADDR
// sFire := false ;
5954: LD_ADDR_EXP 20
5958: PUSH
5959: LD_INT 0
5961: ST_TO_ADDR
// sRefresh := false ;
5962: LD_ADDR_EXP 21
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// sExp := false ;
5970: LD_ADDR_EXP 22
5974: PUSH
5975: LD_INT 0
5977: ST_TO_ADDR
// sDepot := false ;
5978: LD_ADDR_EXP 23
5982: PUSH
5983: LD_INT 0
5985: ST_TO_ADDR
// sFlag := false ;
5986: LD_ADDR_EXP 24
5990: PUSH
5991: LD_INT 0
5993: ST_TO_ADDR
// sKamikadze := false ;
5994: LD_ADDR_EXP 32
5998: PUSH
5999: LD_INT 0
6001: ST_TO_ADDR
// sTroll := false ;
6002: LD_ADDR_EXP 33
6006: PUSH
6007: LD_INT 0
6009: ST_TO_ADDR
// sSlow := false ;
6010: LD_ADDR_EXP 34
6014: PUSH
6015: LD_INT 0
6017: ST_TO_ADDR
// sLack := false ;
6018: LD_ADDR_EXP 35
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// sTank := false ;
6026: LD_ADDR_EXP 37
6030: PUSH
6031: LD_INT 0
6033: ST_TO_ADDR
// sRemote := false ;
6034: LD_ADDR_EXP 38
6038: PUSH
6039: LD_INT 0
6041: ST_TO_ADDR
// sPowell := false ;
6042: LD_ADDR_EXP 39
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// sTeleport := false ;
6050: LD_ADDR_EXP 42
6054: PUSH
6055: LD_INT 0
6057: ST_TO_ADDR
// sOilTower := false ;
6058: LD_ADDR_EXP 44
6062: PUSH
6063: LD_INT 0
6065: ST_TO_ADDR
// sShovel := false ;
6066: LD_ADDR_EXP 45
6070: PUSH
6071: LD_INT 0
6073: ST_TO_ADDR
// sSheik := false ;
6074: LD_ADDR_EXP 46
6078: PUSH
6079: LD_INT 0
6081: ST_TO_ADDR
// sEarthquake := false ;
6082: LD_ADDR_EXP 48
6086: PUSH
6087: LD_INT 0
6089: ST_TO_ADDR
// sAI := false ;
6090: LD_ADDR_EXP 49
6094: PUSH
6095: LD_INT 0
6097: ST_TO_ADDR
// sCargo := false ;
6098: LD_ADDR_EXP 52
6102: PUSH
6103: LD_INT 0
6105: ST_TO_ADDR
// sDLaser := false ;
6106: LD_ADDR_EXP 53
6110: PUSH
6111: LD_INT 0
6113: ST_TO_ADDR
// sExchange := false ;
6114: LD_ADDR_EXP 54
6118: PUSH
6119: LD_INT 0
6121: ST_TO_ADDR
// sFac := false ;
6122: LD_ADDR_EXP 55
6126: PUSH
6127: LD_INT 0
6129: ST_TO_ADDR
// sPower := false ;
6130: LD_ADDR_EXP 56
6134: PUSH
6135: LD_INT 0
6137: ST_TO_ADDR
// sRandom := false ;
6138: LD_ADDR_EXP 57
6142: PUSH
6143: LD_INT 0
6145: ST_TO_ADDR
// sShield := false ;
6146: LD_ADDR_EXP 58
6150: PUSH
6151: LD_INT 0
6153: ST_TO_ADDR
// sTime := false ;
6154: LD_ADDR_EXP 59
6158: PUSH
6159: LD_INT 0
6161: ST_TO_ADDR
// sTools := false ;
6162: LD_ADDR_EXP 60
6166: PUSH
6167: LD_INT 0
6169: ST_TO_ADDR
// sSold := false ;
6170: LD_ADDR_EXP 25
6174: PUSH
6175: LD_INT 0
6177: ST_TO_ADDR
// sDiff := false ;
6178: LD_ADDR_EXP 26
6182: PUSH
6183: LD_INT 0
6185: ST_TO_ADDR
// sFog := false ;
6186: LD_ADDR_EXP 29
6190: PUSH
6191: LD_INT 0
6193: ST_TO_ADDR
// sReset := false ;
6194: LD_ADDR_EXP 30
6198: PUSH
6199: LD_INT 0
6201: ST_TO_ADDR
// sSun := false ;
6202: LD_ADDR_EXP 31
6206: PUSH
6207: LD_INT 0
6209: ST_TO_ADDR
// sTiger := false ;
6210: LD_ADDR_EXP 27
6214: PUSH
6215: LD_INT 0
6217: ST_TO_ADDR
// sBomb := false ;
6218: LD_ADDR_EXP 28
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// sWound := false ;
6226: LD_ADDR_EXP 36
6230: PUSH
6231: LD_INT 0
6233: ST_TO_ADDR
// sBetray := false ;
6234: LD_ADDR_EXP 40
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// sContamin := false ;
6242: LD_ADDR_EXP 41
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// sOil := false ;
6250: LD_ADDR_EXP 43
6254: PUSH
6255: LD_INT 0
6257: ST_TO_ADDR
// sStu := false ;
6258: LD_ADDR_EXP 47
6262: PUSH
6263: LD_INT 0
6265: ST_TO_ADDR
// sBazooka := false ;
6266: LD_ADDR_EXP 50
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
// sMortar := false ;
6274: LD_ADDR_EXP 51
6278: PUSH
6279: LD_INT 0
6281: ST_TO_ADDR
// sRanger := false ;
6282: LD_ADDR_EXP 61
6286: PUSH
6287: LD_INT 0
6289: ST_TO_ADDR
// sComputer := false ;
6290: LD_ADDR_EXP 62
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// s30 := false ;
6298: LD_ADDR_EXP 63
6302: PUSH
6303: LD_INT 0
6305: ST_TO_ADDR
// s60 := false ;
6306: LD_ADDR_EXP 64
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// end ;
6314: LD_VAR 0 1
6318: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6319: LD_INT 0
6321: PPUSH
6322: PPUSH
6323: PPUSH
6324: PPUSH
6325: PPUSH
6326: PPUSH
6327: PPUSH
// result := [ ] ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: EMPTY
6334: ST_TO_ADDR
// if campaign_id = 1 then
6335: LD_OWVAR 69
6339: PUSH
6340: LD_INT 1
6342: EQUAL
6343: IFFALSE 9509
// begin case mission_number of 1 :
6345: LD_OWVAR 70
6349: PUSH
6350: LD_INT 1
6352: DOUBLE
6353: EQUAL
6354: IFTRUE 6358
6356: GO 6434
6358: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: LD_INT 4
6369: PUSH
6370: LD_INT 11
6372: PUSH
6373: LD_INT 12
6375: PUSH
6376: LD_INT 15
6378: PUSH
6379: LD_INT 16
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 23
6387: PUSH
6388: LD_INT 26
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 101
6404: PUSH
6405: LD_INT 102
6407: PUSH
6408: LD_INT 106
6410: PUSH
6411: LD_INT 116
6413: PUSH
6414: LD_INT 117
6416: PUSH
6417: LD_INT 118
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 9507
6434: LD_INT 2
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6526
6442: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 4
6453: PUSH
6454: LD_INT 11
6456: PUSH
6457: LD_INT 12
6459: PUSH
6460: LD_INT 15
6462: PUSH
6463: LD_INT 16
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_INT 23
6471: PUSH
6472: LD_INT 26
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 101
6488: PUSH
6489: LD_INT 102
6491: PUSH
6492: LD_INT 105
6494: PUSH
6495: LD_INT 106
6497: PUSH
6498: LD_INT 108
6500: PUSH
6501: LD_INT 116
6503: PUSH
6504: LD_INT 117
6506: PUSH
6507: LD_INT 118
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: ST_TO_ADDR
6524: GO 9507
6526: LD_INT 3
6528: DOUBLE
6529: EQUAL
6530: IFTRUE 6534
6532: GO 6622
6534: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6535: LD_ADDR_VAR 0 2
6539: PUSH
6540: LD_INT 2
6542: PUSH
6543: LD_INT 4
6545: PUSH
6546: LD_INT 5
6548: PUSH
6549: LD_INT 11
6551: PUSH
6552: LD_INT 12
6554: PUSH
6555: LD_INT 15
6557: PUSH
6558: LD_INT 16
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 26
6566: PUSH
6567: LD_INT 36
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 101
6584: PUSH
6585: LD_INT 102
6587: PUSH
6588: LD_INT 105
6590: PUSH
6591: LD_INT 106
6593: PUSH
6594: LD_INT 108
6596: PUSH
6597: LD_INT 116
6599: PUSH
6600: LD_INT 117
6602: PUSH
6603: LD_INT 118
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: ST_TO_ADDR
6620: GO 9507
6622: LD_INT 4
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6726
6630: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6631: LD_ADDR_VAR 0 2
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 4
6641: PUSH
6642: LD_INT 5
6644: PUSH
6645: LD_INT 8
6647: PUSH
6648: LD_INT 11
6650: PUSH
6651: LD_INT 12
6653: PUSH
6654: LD_INT 15
6656: PUSH
6657: LD_INT 16
6659: PUSH
6660: LD_INT 22
6662: PUSH
6663: LD_INT 23
6665: PUSH
6666: LD_INT 26
6668: PUSH
6669: LD_INT 36
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 101
6688: PUSH
6689: LD_INT 102
6691: PUSH
6692: LD_INT 105
6694: PUSH
6695: LD_INT 106
6697: PUSH
6698: LD_INT 108
6700: PUSH
6701: LD_INT 116
6703: PUSH
6704: LD_INT 117
6706: PUSH
6707: LD_INT 118
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: ST_TO_ADDR
6724: GO 9507
6726: LD_INT 5
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6846
6734: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_INT 2
6742: PUSH
6743: LD_INT 4
6745: PUSH
6746: LD_INT 5
6748: PUSH
6749: LD_INT 6
6751: PUSH
6752: LD_INT 8
6754: PUSH
6755: LD_INT 11
6757: PUSH
6758: LD_INT 12
6760: PUSH
6761: LD_INT 15
6763: PUSH
6764: LD_INT 16
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 23
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 26
6778: PUSH
6779: LD_INT 36
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 101
6800: PUSH
6801: LD_INT 102
6803: PUSH
6804: LD_INT 105
6806: PUSH
6807: LD_INT 106
6809: PUSH
6810: LD_INT 108
6812: PUSH
6813: LD_INT 109
6815: PUSH
6816: LD_INT 112
6818: PUSH
6819: LD_INT 116
6821: PUSH
6822: LD_INT 117
6824: PUSH
6825: LD_INT 118
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 9507
6846: LD_INT 6
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6986
6854: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_INT 2
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: LD_INT 5
6868: PUSH
6869: LD_INT 6
6871: PUSH
6872: LD_INT 8
6874: PUSH
6875: LD_INT 11
6877: PUSH
6878: LD_INT 12
6880: PUSH
6881: LD_INT 15
6883: PUSH
6884: LD_INT 16
6886: PUSH
6887: LD_INT 20
6889: PUSH
6890: LD_INT 21
6892: PUSH
6893: LD_INT 22
6895: PUSH
6896: LD_INT 23
6898: PUSH
6899: LD_INT 25
6901: PUSH
6902: LD_INT 26
6904: PUSH
6905: LD_INT 30
6907: PUSH
6908: LD_INT 31
6910: PUSH
6911: LD_INT 32
6913: PUSH
6914: LD_INT 36
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 101
6940: PUSH
6941: LD_INT 102
6943: PUSH
6944: LD_INT 105
6946: PUSH
6947: LD_INT 106
6949: PUSH
6950: LD_INT 108
6952: PUSH
6953: LD_INT 109
6955: PUSH
6956: LD_INT 112
6958: PUSH
6959: LD_INT 116
6961: PUSH
6962: LD_INT 117
6964: PUSH
6965: LD_INT 118
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
6984: GO 9507
6986: LD_INT 7
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7106
6994: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6995: LD_ADDR_VAR 0 2
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 4
7005: PUSH
7006: LD_INT 5
7008: PUSH
7009: LD_INT 7
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 12
7017: PUSH
7018: LD_INT 15
7020: PUSH
7021: LD_INT 16
7023: PUSH
7024: LD_INT 20
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 26
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 101
7060: PUSH
7061: LD_INT 102
7063: PUSH
7064: LD_INT 103
7066: PUSH
7067: LD_INT 105
7069: PUSH
7070: LD_INT 106
7072: PUSH
7073: LD_INT 108
7075: PUSH
7076: LD_INT 112
7078: PUSH
7079: LD_INT 116
7081: PUSH
7082: LD_INT 117
7084: PUSH
7085: LD_INT 118
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: ST_TO_ADDR
7104: GO 9507
7106: LD_INT 8
7108: DOUBLE
7109: EQUAL
7110: IFTRUE 7114
7112: GO 7254
7114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7115: LD_ADDR_VAR 0 2
7119: PUSH
7120: LD_INT 2
7122: PUSH
7123: LD_INT 4
7125: PUSH
7126: LD_INT 5
7128: PUSH
7129: LD_INT 6
7131: PUSH
7132: LD_INT 7
7134: PUSH
7135: LD_INT 8
7137: PUSH
7138: LD_INT 11
7140: PUSH
7141: LD_INT 12
7143: PUSH
7144: LD_INT 15
7146: PUSH
7147: LD_INT 16
7149: PUSH
7150: LD_INT 20
7152: PUSH
7153: LD_INT 21
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_INT 23
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 26
7167: PUSH
7168: LD_INT 30
7170: PUSH
7171: LD_INT 31
7173: PUSH
7174: LD_INT 32
7176: PUSH
7177: LD_INT 36
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 101
7204: PUSH
7205: LD_INT 102
7207: PUSH
7208: LD_INT 103
7210: PUSH
7211: LD_INT 105
7213: PUSH
7214: LD_INT 106
7216: PUSH
7217: LD_INT 108
7219: PUSH
7220: LD_INT 109
7222: PUSH
7223: LD_INT 112
7225: PUSH
7226: LD_INT 116
7228: PUSH
7229: LD_INT 117
7231: PUSH
7232: LD_INT 118
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: ST_TO_ADDR
7252: GO 9507
7254: LD_INT 9
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7410
7262: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 4
7273: PUSH
7274: LD_INT 5
7276: PUSH
7277: LD_INT 6
7279: PUSH
7280: LD_INT 7
7282: PUSH
7283: LD_INT 8
7285: PUSH
7286: LD_INT 11
7288: PUSH
7289: LD_INT 12
7291: PUSH
7292: LD_INT 15
7294: PUSH
7295: LD_INT 16
7297: PUSH
7298: LD_INT 20
7300: PUSH
7301: LD_INT 21
7303: PUSH
7304: LD_INT 22
7306: PUSH
7307: LD_INT 23
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 26
7315: PUSH
7316: LD_INT 28
7318: PUSH
7319: LD_INT 30
7321: PUSH
7322: LD_INT 31
7324: PUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 36
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 101
7356: PUSH
7357: LD_INT 102
7359: PUSH
7360: LD_INT 103
7362: PUSH
7363: LD_INT 105
7365: PUSH
7366: LD_INT 106
7368: PUSH
7369: LD_INT 108
7371: PUSH
7372: LD_INT 109
7374: PUSH
7375: LD_INT 112
7377: PUSH
7378: LD_INT 114
7380: PUSH
7381: LD_INT 116
7383: PUSH
7384: LD_INT 117
7386: PUSH
7387: LD_INT 118
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: ST_TO_ADDR
7408: GO 9507
7410: LD_INT 10
7412: DOUBLE
7413: EQUAL
7414: IFTRUE 7418
7416: GO 7614
7418: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7419: LD_ADDR_VAR 0 2
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: LD_INT 4
7429: PUSH
7430: LD_INT 5
7432: PUSH
7433: LD_INT 6
7435: PUSH
7436: LD_INT 7
7438: PUSH
7439: LD_INT 8
7441: PUSH
7442: LD_INT 9
7444: PUSH
7445: LD_INT 10
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: LD_INT 13
7456: PUSH
7457: LD_INT 14
7459: PUSH
7460: LD_INT 15
7462: PUSH
7463: LD_INT 16
7465: PUSH
7466: LD_INT 17
7468: PUSH
7469: LD_INT 18
7471: PUSH
7472: LD_INT 19
7474: PUSH
7475: LD_INT 20
7477: PUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 23
7486: PUSH
7487: LD_INT 24
7489: PUSH
7490: LD_INT 25
7492: PUSH
7493: LD_INT 26
7495: PUSH
7496: LD_INT 28
7498: PUSH
7499: LD_INT 30
7501: PUSH
7502: LD_INT 31
7504: PUSH
7505: LD_INT 32
7507: PUSH
7508: LD_INT 36
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 101
7544: PUSH
7545: LD_INT 102
7547: PUSH
7548: LD_INT 103
7550: PUSH
7551: LD_INT 104
7553: PUSH
7554: LD_INT 105
7556: PUSH
7557: LD_INT 106
7559: PUSH
7560: LD_INT 107
7562: PUSH
7563: LD_INT 108
7565: PUSH
7566: LD_INT 109
7568: PUSH
7569: LD_INT 110
7571: PUSH
7572: LD_INT 111
7574: PUSH
7575: LD_INT 112
7577: PUSH
7578: LD_INT 114
7580: PUSH
7581: LD_INT 116
7583: PUSH
7584: LD_INT 117
7586: PUSH
7587: LD_INT 118
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: ST_TO_ADDR
7612: GO 9507
7614: LD_INT 11
7616: DOUBLE
7617: EQUAL
7618: IFTRUE 7622
7620: GO 7826
7622: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: LD_INT 6
7642: PUSH
7643: LD_INT 7
7645: PUSH
7646: LD_INT 8
7648: PUSH
7649: LD_INT 9
7651: PUSH
7652: LD_INT 10
7654: PUSH
7655: LD_INT 11
7657: PUSH
7658: LD_INT 12
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: LD_INT 14
7666: PUSH
7667: LD_INT 15
7669: PUSH
7670: LD_INT 16
7672: PUSH
7673: LD_INT 17
7675: PUSH
7676: LD_INT 18
7678: PUSH
7679: LD_INT 19
7681: PUSH
7682: LD_INT 20
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 24
7696: PUSH
7697: LD_INT 25
7699: PUSH
7700: LD_INT 26
7702: PUSH
7703: LD_INT 28
7705: PUSH
7706: LD_INT 30
7708: PUSH
7709: LD_INT 31
7711: PUSH
7712: LD_INT 32
7714: PUSH
7715: LD_INT 34
7717: PUSH
7718: LD_INT 36
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 101
7756: PUSH
7757: LD_INT 102
7759: PUSH
7760: LD_INT 103
7762: PUSH
7763: LD_INT 104
7765: PUSH
7766: LD_INT 105
7768: PUSH
7769: LD_INT 106
7771: PUSH
7772: LD_INT 107
7774: PUSH
7775: LD_INT 108
7777: PUSH
7778: LD_INT 109
7780: PUSH
7781: LD_INT 110
7783: PUSH
7784: LD_INT 111
7786: PUSH
7787: LD_INT 112
7789: PUSH
7790: LD_INT 114
7792: PUSH
7793: LD_INT 116
7795: PUSH
7796: LD_INT 117
7798: PUSH
7799: LD_INT 118
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: ST_TO_ADDR
7824: GO 9507
7826: LD_INT 12
7828: DOUBLE
7829: EQUAL
7830: IFTRUE 7834
7832: GO 8054
7834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7835: LD_ADDR_VAR 0 2
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: LD_INT 3
7848: PUSH
7849: LD_INT 4
7851: PUSH
7852: LD_INT 5
7854: PUSH
7855: LD_INT 6
7857: PUSH
7858: LD_INT 7
7860: PUSH
7861: LD_INT 8
7863: PUSH
7864: LD_INT 9
7866: PUSH
7867: LD_INT 10
7869: PUSH
7870: LD_INT 11
7872: PUSH
7873: LD_INT 12
7875: PUSH
7876: LD_INT 13
7878: PUSH
7879: LD_INT 14
7881: PUSH
7882: LD_INT 15
7884: PUSH
7885: LD_INT 16
7887: PUSH
7888: LD_INT 17
7890: PUSH
7891: LD_INT 18
7893: PUSH
7894: LD_INT 19
7896: PUSH
7897: LD_INT 20
7899: PUSH
7900: LD_INT 21
7902: PUSH
7903: LD_INT 22
7905: PUSH
7906: LD_INT 23
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 26
7917: PUSH
7918: LD_INT 27
7920: PUSH
7921: LD_INT 28
7923: PUSH
7924: LD_INT 30
7926: PUSH
7927: LD_INT 31
7929: PUSH
7930: LD_INT 32
7932: PUSH
7933: LD_INT 33
7935: PUSH
7936: LD_INT 34
7938: PUSH
7939: LD_INT 36
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 101
7980: PUSH
7981: LD_INT 102
7983: PUSH
7984: LD_INT 103
7986: PUSH
7987: LD_INT 104
7989: PUSH
7990: LD_INT 105
7992: PUSH
7993: LD_INT 106
7995: PUSH
7996: LD_INT 107
7998: PUSH
7999: LD_INT 108
8001: PUSH
8002: LD_INT 109
8004: PUSH
8005: LD_INT 110
8007: PUSH
8008: LD_INT 111
8010: PUSH
8011: LD_INT 112
8013: PUSH
8014: LD_INT 113
8016: PUSH
8017: LD_INT 114
8019: PUSH
8020: LD_INT 116
8022: PUSH
8023: LD_INT 117
8025: PUSH
8026: LD_INT 118
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: ST_TO_ADDR
8052: GO 9507
8054: LD_INT 13
8056: DOUBLE
8057: EQUAL
8058: IFTRUE 8062
8060: GO 8270
8062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_INT 1
8070: PUSH
8071: LD_INT 2
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: LD_INT 4
8079: PUSH
8080: LD_INT 5
8082: PUSH
8083: LD_INT 8
8085: PUSH
8086: LD_INT 9
8088: PUSH
8089: LD_INT 10
8091: PUSH
8092: LD_INT 11
8094: PUSH
8095: LD_INT 12
8097: PUSH
8098: LD_INT 14
8100: PUSH
8101: LD_INT 15
8103: PUSH
8104: LD_INT 16
8106: PUSH
8107: LD_INT 17
8109: PUSH
8110: LD_INT 18
8112: PUSH
8113: LD_INT 19
8115: PUSH
8116: LD_INT 20
8118: PUSH
8119: LD_INT 21
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 23
8127: PUSH
8128: LD_INT 24
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 26
8136: PUSH
8137: LD_INT 27
8139: PUSH
8140: LD_INT 28
8142: PUSH
8143: LD_INT 30
8145: PUSH
8146: LD_INT 31
8148: PUSH
8149: LD_INT 32
8151: PUSH
8152: LD_INT 33
8154: PUSH
8155: LD_INT 34
8157: PUSH
8158: LD_INT 36
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 101
8196: PUSH
8197: LD_INT 102
8199: PUSH
8200: LD_INT 103
8202: PUSH
8203: LD_INT 104
8205: PUSH
8206: LD_INT 105
8208: PUSH
8209: LD_INT 106
8211: PUSH
8212: LD_INT 107
8214: PUSH
8215: LD_INT 108
8217: PUSH
8218: LD_INT 109
8220: PUSH
8221: LD_INT 110
8223: PUSH
8224: LD_INT 111
8226: PUSH
8227: LD_INT 112
8229: PUSH
8230: LD_INT 113
8232: PUSH
8233: LD_INT 114
8235: PUSH
8236: LD_INT 116
8238: PUSH
8239: LD_INT 117
8241: PUSH
8242: LD_INT 118
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: ST_TO_ADDR
8268: GO 9507
8270: LD_INT 14
8272: DOUBLE
8273: EQUAL
8274: IFTRUE 8278
8276: GO 8502
8278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8279: LD_ADDR_VAR 0 2
8283: PUSH
8284: LD_INT 1
8286: PUSH
8287: LD_INT 2
8289: PUSH
8290: LD_INT 3
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: LD_INT 5
8298: PUSH
8299: LD_INT 6
8301: PUSH
8302: LD_INT 7
8304: PUSH
8305: LD_INT 8
8307: PUSH
8308: LD_INT 9
8310: PUSH
8311: LD_INT 10
8313: PUSH
8314: LD_INT 11
8316: PUSH
8317: LD_INT 12
8319: PUSH
8320: LD_INT 13
8322: PUSH
8323: LD_INT 14
8325: PUSH
8326: LD_INT 15
8328: PUSH
8329: LD_INT 16
8331: PUSH
8332: LD_INT 17
8334: PUSH
8335: LD_INT 18
8337: PUSH
8338: LD_INT 19
8340: PUSH
8341: LD_INT 20
8343: PUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 22
8349: PUSH
8350: LD_INT 23
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 25
8358: PUSH
8359: LD_INT 26
8361: PUSH
8362: LD_INT 27
8364: PUSH
8365: LD_INT 28
8367: PUSH
8368: LD_INT 29
8370: PUSH
8371: LD_INT 30
8373: PUSH
8374: LD_INT 31
8376: PUSH
8377: LD_INT 32
8379: PUSH
8380: LD_INT 33
8382: PUSH
8383: LD_INT 34
8385: PUSH
8386: LD_INT 36
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: LD_INT 102
8431: PUSH
8432: LD_INT 103
8434: PUSH
8435: LD_INT 104
8437: PUSH
8438: LD_INT 105
8440: PUSH
8441: LD_INT 106
8443: PUSH
8444: LD_INT 107
8446: PUSH
8447: LD_INT 108
8449: PUSH
8450: LD_INT 109
8452: PUSH
8453: LD_INT 110
8455: PUSH
8456: LD_INT 111
8458: PUSH
8459: LD_INT 112
8461: PUSH
8462: LD_INT 113
8464: PUSH
8465: LD_INT 114
8467: PUSH
8468: LD_INT 116
8470: PUSH
8471: LD_INT 117
8473: PUSH
8474: LD_INT 118
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: ST_TO_ADDR
8500: GO 9507
8502: LD_INT 15
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8734
8510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8511: LD_ADDR_VAR 0 2
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_INT 3
8524: PUSH
8525: LD_INT 4
8527: PUSH
8528: LD_INT 5
8530: PUSH
8531: LD_INT 6
8533: PUSH
8534: LD_INT 7
8536: PUSH
8537: LD_INT 8
8539: PUSH
8540: LD_INT 9
8542: PUSH
8543: LD_INT 10
8545: PUSH
8546: LD_INT 11
8548: PUSH
8549: LD_INT 12
8551: PUSH
8552: LD_INT 13
8554: PUSH
8555: LD_INT 14
8557: PUSH
8558: LD_INT 15
8560: PUSH
8561: LD_INT 16
8563: PUSH
8564: LD_INT 17
8566: PUSH
8567: LD_INT 18
8569: PUSH
8570: LD_INT 19
8572: PUSH
8573: LD_INT 20
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 22
8581: PUSH
8582: LD_INT 23
8584: PUSH
8585: LD_INT 24
8587: PUSH
8588: LD_INT 25
8590: PUSH
8591: LD_INT 26
8593: PUSH
8594: LD_INT 27
8596: PUSH
8597: LD_INT 28
8599: PUSH
8600: LD_INT 29
8602: PUSH
8603: LD_INT 30
8605: PUSH
8606: LD_INT 31
8608: PUSH
8609: LD_INT 32
8611: PUSH
8612: LD_INT 33
8614: PUSH
8615: LD_INT 34
8617: PUSH
8618: LD_INT 36
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 101
8660: PUSH
8661: LD_INT 102
8663: PUSH
8664: LD_INT 103
8666: PUSH
8667: LD_INT 104
8669: PUSH
8670: LD_INT 105
8672: PUSH
8673: LD_INT 106
8675: PUSH
8676: LD_INT 107
8678: PUSH
8679: LD_INT 108
8681: PUSH
8682: LD_INT 109
8684: PUSH
8685: LD_INT 110
8687: PUSH
8688: LD_INT 111
8690: PUSH
8691: LD_INT 112
8693: PUSH
8694: LD_INT 113
8696: PUSH
8697: LD_INT 114
8699: PUSH
8700: LD_INT 116
8702: PUSH
8703: LD_INT 117
8705: PUSH
8706: LD_INT 118
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: ST_TO_ADDR
8732: GO 9507
8734: LD_INT 16
8736: DOUBLE
8737: EQUAL
8738: IFTRUE 8742
8740: GO 8878
8742: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: LD_INT 2
8750: PUSH
8751: LD_INT 4
8753: PUSH
8754: LD_INT 5
8756: PUSH
8757: LD_INT 7
8759: PUSH
8760: LD_INT 11
8762: PUSH
8763: LD_INT 12
8765: PUSH
8766: LD_INT 15
8768: PUSH
8769: LD_INT 16
8771: PUSH
8772: LD_INT 20
8774: PUSH
8775: LD_INT 21
8777: PUSH
8778: LD_INT 22
8780: PUSH
8781: LD_INT 23
8783: PUSH
8784: LD_INT 25
8786: PUSH
8787: LD_INT 26
8789: PUSH
8790: LD_INT 30
8792: PUSH
8793: LD_INT 31
8795: PUSH
8796: LD_INT 32
8798: PUSH
8799: LD_INT 33
8801: PUSH
8802: LD_INT 34
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: PUSH
8826: LD_INT 101
8828: PUSH
8829: LD_INT 102
8831: PUSH
8832: LD_INT 103
8834: PUSH
8835: LD_INT 106
8837: PUSH
8838: LD_INT 108
8840: PUSH
8841: LD_INT 112
8843: PUSH
8844: LD_INT 113
8846: PUSH
8847: LD_INT 114
8849: PUSH
8850: LD_INT 116
8852: PUSH
8853: LD_INT 117
8855: PUSH
8856: LD_INT 118
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: ST_TO_ADDR
8876: GO 9507
8878: LD_INT 17
8880: DOUBLE
8881: EQUAL
8882: IFTRUE 8886
8884: GO 9110
8886: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8887: LD_ADDR_VAR 0 2
8891: PUSH
8892: LD_INT 1
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: LD_INT 4
8903: PUSH
8904: LD_INT 5
8906: PUSH
8907: LD_INT 6
8909: PUSH
8910: LD_INT 7
8912: PUSH
8913: LD_INT 8
8915: PUSH
8916: LD_INT 9
8918: PUSH
8919: LD_INT 10
8921: PUSH
8922: LD_INT 11
8924: PUSH
8925: LD_INT 12
8927: PUSH
8928: LD_INT 13
8930: PUSH
8931: LD_INT 14
8933: PUSH
8934: LD_INT 15
8936: PUSH
8937: LD_INT 16
8939: PUSH
8940: LD_INT 17
8942: PUSH
8943: LD_INT 18
8945: PUSH
8946: LD_INT 19
8948: PUSH
8949: LD_INT 20
8951: PUSH
8952: LD_INT 21
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 24
8963: PUSH
8964: LD_INT 25
8966: PUSH
8967: LD_INT 26
8969: PUSH
8970: LD_INT 27
8972: PUSH
8973: LD_INT 28
8975: PUSH
8976: LD_INT 29
8978: PUSH
8979: LD_INT 30
8981: PUSH
8982: LD_INT 31
8984: PUSH
8985: LD_INT 32
8987: PUSH
8988: LD_INT 33
8990: PUSH
8991: LD_INT 34
8993: PUSH
8994: LD_INT 36
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 101
9036: PUSH
9037: LD_INT 102
9039: PUSH
9040: LD_INT 103
9042: PUSH
9043: LD_INT 104
9045: PUSH
9046: LD_INT 105
9048: PUSH
9049: LD_INT 106
9051: PUSH
9052: LD_INT 107
9054: PUSH
9055: LD_INT 108
9057: PUSH
9058: LD_INT 109
9060: PUSH
9061: LD_INT 110
9063: PUSH
9064: LD_INT 111
9066: PUSH
9067: LD_INT 112
9069: PUSH
9070: LD_INT 113
9072: PUSH
9073: LD_INT 114
9075: PUSH
9076: LD_INT 116
9078: PUSH
9079: LD_INT 117
9081: PUSH
9082: LD_INT 118
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
9108: GO 9507
9110: LD_INT 18
9112: DOUBLE
9113: EQUAL
9114: IFTRUE 9118
9116: GO 9266
9118: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 7
9135: PUSH
9136: LD_INT 11
9138: PUSH
9139: LD_INT 12
9141: PUSH
9142: LD_INT 15
9144: PUSH
9145: LD_INT 16
9147: PUSH
9148: LD_INT 20
9150: PUSH
9151: LD_INT 21
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_INT 23
9159: PUSH
9160: LD_INT 25
9162: PUSH
9163: LD_INT 26
9165: PUSH
9166: LD_INT 30
9168: PUSH
9169: LD_INT 31
9171: PUSH
9172: LD_INT 32
9174: PUSH
9175: LD_INT 33
9177: PUSH
9178: LD_INT 34
9180: PUSH
9181: LD_INT 35
9183: PUSH
9184: LD_INT 36
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 101
9212: PUSH
9213: LD_INT 102
9215: PUSH
9216: LD_INT 103
9218: PUSH
9219: LD_INT 106
9221: PUSH
9222: LD_INT 108
9224: PUSH
9225: LD_INT 112
9227: PUSH
9228: LD_INT 113
9230: PUSH
9231: LD_INT 114
9233: PUSH
9234: LD_INT 115
9236: PUSH
9237: LD_INT 116
9239: PUSH
9240: LD_INT 117
9242: PUSH
9243: LD_INT 118
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ST_TO_ADDR
9264: GO 9507
9266: LD_INT 19
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9506
9274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_INT 1
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 4
9291: PUSH
9292: LD_INT 5
9294: PUSH
9295: LD_INT 6
9297: PUSH
9298: LD_INT 7
9300: PUSH
9301: LD_INT 8
9303: PUSH
9304: LD_INT 9
9306: PUSH
9307: LD_INT 10
9309: PUSH
9310: LD_INT 11
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: LD_INT 13
9318: PUSH
9319: LD_INT 14
9321: PUSH
9322: LD_INT 15
9324: PUSH
9325: LD_INT 16
9327: PUSH
9328: LD_INT 17
9330: PUSH
9331: LD_INT 18
9333: PUSH
9334: LD_INT 19
9336: PUSH
9337: LD_INT 20
9339: PUSH
9340: LD_INT 21
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 23
9348: PUSH
9349: LD_INT 24
9351: PUSH
9352: LD_INT 25
9354: PUSH
9355: LD_INT 26
9357: PUSH
9358: LD_INT 27
9360: PUSH
9361: LD_INT 28
9363: PUSH
9364: LD_INT 29
9366: PUSH
9367: LD_INT 30
9369: PUSH
9370: LD_INT 31
9372: PUSH
9373: LD_INT 32
9375: PUSH
9376: LD_INT 33
9378: PUSH
9379: LD_INT 34
9381: PUSH
9382: LD_INT 35
9384: PUSH
9385: LD_INT 36
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 101
9428: PUSH
9429: LD_INT 102
9431: PUSH
9432: LD_INT 103
9434: PUSH
9435: LD_INT 104
9437: PUSH
9438: LD_INT 105
9440: PUSH
9441: LD_INT 106
9443: PUSH
9444: LD_INT 107
9446: PUSH
9447: LD_INT 108
9449: PUSH
9450: LD_INT 109
9452: PUSH
9453: LD_INT 110
9455: PUSH
9456: LD_INT 111
9458: PUSH
9459: LD_INT 112
9461: PUSH
9462: LD_INT 113
9464: PUSH
9465: LD_INT 114
9467: PUSH
9468: LD_INT 115
9470: PUSH
9471: LD_INT 116
9473: PUSH
9474: LD_INT 117
9476: PUSH
9477: LD_INT 118
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: ST_TO_ADDR
9504: GO 9507
9506: POP
// end else
9507: GO 9738
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: LD_INT 2
9519: PUSH
9520: LD_INT 3
9522: PUSH
9523: LD_INT 4
9525: PUSH
9526: LD_INT 5
9528: PUSH
9529: LD_INT 6
9531: PUSH
9532: LD_INT 7
9534: PUSH
9535: LD_INT 8
9537: PUSH
9538: LD_INT 9
9540: PUSH
9541: LD_INT 10
9543: PUSH
9544: LD_INT 11
9546: PUSH
9547: LD_INT 12
9549: PUSH
9550: LD_INT 13
9552: PUSH
9553: LD_INT 14
9555: PUSH
9556: LD_INT 15
9558: PUSH
9559: LD_INT 16
9561: PUSH
9562: LD_INT 17
9564: PUSH
9565: LD_INT 18
9567: PUSH
9568: LD_INT 19
9570: PUSH
9571: LD_INT 20
9573: PUSH
9574: LD_INT 21
9576: PUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 23
9582: PUSH
9583: LD_INT 24
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 26
9591: PUSH
9592: LD_INT 27
9594: PUSH
9595: LD_INT 28
9597: PUSH
9598: LD_INT 29
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 31
9606: PUSH
9607: LD_INT 32
9609: PUSH
9610: LD_INT 33
9612: PUSH
9613: LD_INT 34
9615: PUSH
9616: LD_INT 35
9618: PUSH
9619: LD_INT 36
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 101
9662: PUSH
9663: LD_INT 102
9665: PUSH
9666: LD_INT 103
9668: PUSH
9669: LD_INT 104
9671: PUSH
9672: LD_INT 105
9674: PUSH
9675: LD_INT 106
9677: PUSH
9678: LD_INT 107
9680: PUSH
9681: LD_INT 108
9683: PUSH
9684: LD_INT 109
9686: PUSH
9687: LD_INT 110
9689: PUSH
9690: LD_INT 111
9692: PUSH
9693: LD_INT 112
9695: PUSH
9696: LD_INT 113
9698: PUSH
9699: LD_INT 114
9701: PUSH
9702: LD_INT 115
9704: PUSH
9705: LD_INT 116
9707: PUSH
9708: LD_INT 117
9710: PUSH
9711: LD_INT 118
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: ST_TO_ADDR
// if result then
9738: LD_VAR 0 2
9742: IFFALSE 10528
// begin normal :=  ;
9744: LD_ADDR_VAR 0 5
9748: PUSH
9749: LD_STRING 
9751: ST_TO_ADDR
// hardcore :=  ;
9752: LD_ADDR_VAR 0 6
9756: PUSH
9757: LD_STRING 
9759: ST_TO_ADDR
// active :=  ;
9760: LD_ADDR_VAR 0 7
9764: PUSH
9765: LD_STRING 
9767: ST_TO_ADDR
// for i = 1 to normalCounter do
9768: LD_ADDR_VAR 0 8
9772: PUSH
9773: DOUBLE
9774: LD_INT 1
9776: DEC
9777: ST_TO_ADDR
9778: LD_EXP 9
9782: PUSH
9783: FOR_TO
9784: IFFALSE 9885
// begin tmp := 0 ;
9786: LD_ADDR_VAR 0 3
9790: PUSH
9791: LD_STRING 0
9793: ST_TO_ADDR
// if result [ 1 ] then
9794: LD_VAR 0 2
9798: PUSH
9799: LD_INT 1
9801: ARRAY
9802: IFFALSE 9867
// if result [ 1 ] [ 1 ] = i then
9804: LD_VAR 0 2
9808: PUSH
9809: LD_INT 1
9811: ARRAY
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PUSH
9817: LD_VAR 0 8
9821: EQUAL
9822: IFFALSE 9867
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9824: LD_ADDR_VAR 0 2
9828: PUSH
9829: LD_VAR 0 2
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: LD_VAR 0 2
9841: PUSH
9842: LD_INT 1
9844: ARRAY
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: CALL_OW 3
9853: PPUSH
9854: CALL_OW 1
9858: ST_TO_ADDR
// tmp := 1 ;
9859: LD_ADDR_VAR 0 3
9863: PUSH
9864: LD_STRING 1
9866: ST_TO_ADDR
// end ; normal := normal & tmp ;
9867: LD_ADDR_VAR 0 5
9871: PUSH
9872: LD_VAR 0 5
9876: PUSH
9877: LD_VAR 0 3
9881: STR
9882: ST_TO_ADDR
// end ;
9883: GO 9783
9885: POP
9886: POP
// for i = 1 to hardcoreCounter do
9887: LD_ADDR_VAR 0 8
9891: PUSH
9892: DOUBLE
9893: LD_INT 1
9895: DEC
9896: ST_TO_ADDR
9897: LD_EXP 10
9901: PUSH
9902: FOR_TO
9903: IFFALSE 10008
// begin tmp := 0 ;
9905: LD_ADDR_VAR 0 3
9909: PUSH
9910: LD_STRING 0
9912: ST_TO_ADDR
// if result [ 2 ] then
9913: LD_VAR 0 2
9917: PUSH
9918: LD_INT 2
9920: ARRAY
9921: IFFALSE 9990
// if result [ 2 ] [ 1 ] = 100 + i then
9923: LD_VAR 0 2
9927: PUSH
9928: LD_INT 2
9930: ARRAY
9931: PUSH
9932: LD_INT 1
9934: ARRAY
9935: PUSH
9936: LD_INT 100
9938: PUSH
9939: LD_VAR 0 8
9943: PLUS
9944: EQUAL
9945: IFFALSE 9990
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9947: LD_ADDR_VAR 0 2
9951: PUSH
9952: LD_VAR 0 2
9956: PPUSH
9957: LD_INT 2
9959: PPUSH
9960: LD_VAR 0 2
9964: PUSH
9965: LD_INT 2
9967: ARRAY
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 3
9976: PPUSH
9977: CALL_OW 1
9981: ST_TO_ADDR
// tmp := 1 ;
9982: LD_ADDR_VAR 0 3
9986: PUSH
9987: LD_STRING 1
9989: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9990: LD_ADDR_VAR 0 6
9994: PUSH
9995: LD_VAR 0 6
9999: PUSH
10000: LD_VAR 0 3
10004: STR
10005: ST_TO_ADDR
// end ;
10006: GO 9902
10008: POP
10009: POP
// if isGameLoad then
10010: LD_VAR 0 1
10014: IFFALSE 10489
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10016: LD_ADDR_VAR 0 4
10020: PUSH
10021: LD_EXP 13
10025: PUSH
10026: LD_EXP 12
10030: PUSH
10031: LD_EXP 14
10035: PUSH
10036: LD_EXP 11
10040: PUSH
10041: LD_EXP 15
10045: PUSH
10046: LD_EXP 16
10050: PUSH
10051: LD_EXP 17
10055: PUSH
10056: LD_EXP 18
10060: PUSH
10061: LD_EXP 19
10065: PUSH
10066: LD_EXP 20
10070: PUSH
10071: LD_EXP 21
10075: PUSH
10076: LD_EXP 22
10080: PUSH
10081: LD_EXP 23
10085: PUSH
10086: LD_EXP 24
10090: PUSH
10091: LD_EXP 32
10095: PUSH
10096: LD_EXP 33
10100: PUSH
10101: LD_EXP 34
10105: PUSH
10106: LD_EXP 35
10110: PUSH
10111: LD_EXP 37
10115: PUSH
10116: LD_EXP 38
10120: PUSH
10121: LD_EXP 39
10125: PUSH
10126: LD_EXP 42
10130: PUSH
10131: LD_EXP 44
10135: PUSH
10136: LD_EXP 45
10140: PUSH
10141: LD_EXP 46
10145: PUSH
10146: LD_EXP 48
10150: PUSH
10151: LD_EXP 49
10155: PUSH
10156: LD_EXP 52
10160: PUSH
10161: LD_EXP 53
10165: PUSH
10166: LD_EXP 54
10170: PUSH
10171: LD_EXP 55
10175: PUSH
10176: LD_EXP 56
10180: PUSH
10181: LD_EXP 57
10185: PUSH
10186: LD_EXP 58
10190: PUSH
10191: LD_EXP 59
10195: PUSH
10196: LD_EXP 60
10200: PUSH
10201: LD_EXP 25
10205: PUSH
10206: LD_EXP 26
10210: PUSH
10211: LD_EXP 29
10215: PUSH
10216: LD_EXP 30
10220: PUSH
10221: LD_EXP 31
10225: PUSH
10226: LD_EXP 27
10230: PUSH
10231: LD_EXP 28
10235: PUSH
10236: LD_EXP 36
10240: PUSH
10241: LD_EXP 40
10245: PUSH
10246: LD_EXP 41
10250: PUSH
10251: LD_EXP 43
10255: PUSH
10256: LD_EXP 47
10260: PUSH
10261: LD_EXP 50
10265: PUSH
10266: LD_EXP 51
10270: PUSH
10271: LD_EXP 61
10275: PUSH
10276: LD_EXP 62
10280: PUSH
10281: LD_EXP 63
10285: PUSH
10286: LD_EXP 64
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: ST_TO_ADDR
// tmp :=  ;
10347: LD_ADDR_VAR 0 3
10351: PUSH
10352: LD_STRING 
10354: ST_TO_ADDR
// for i = 1 to normalCounter do
10355: LD_ADDR_VAR 0 8
10359: PUSH
10360: DOUBLE
10361: LD_INT 1
10363: DEC
10364: ST_TO_ADDR
10365: LD_EXP 9
10369: PUSH
10370: FOR_TO
10371: IFFALSE 10407
// begin if flags [ i ] then
10373: LD_VAR 0 4
10377: PUSH
10378: LD_VAR 0 8
10382: ARRAY
10383: IFFALSE 10405
// tmp := tmp & i & ; ;
10385: LD_ADDR_VAR 0 3
10389: PUSH
10390: LD_VAR 0 3
10394: PUSH
10395: LD_VAR 0 8
10399: STR
10400: PUSH
10401: LD_STRING ;
10403: STR
10404: ST_TO_ADDR
// end ;
10405: GO 10370
10407: POP
10408: POP
// for i = 1 to hardcoreCounter do
10409: LD_ADDR_VAR 0 8
10413: PUSH
10414: DOUBLE
10415: LD_INT 1
10417: DEC
10418: ST_TO_ADDR
10419: LD_EXP 10
10423: PUSH
10424: FOR_TO
10425: IFFALSE 10471
// begin if flags [ normalCounter + i ] then
10427: LD_VAR 0 4
10431: PUSH
10432: LD_EXP 9
10436: PUSH
10437: LD_VAR 0 8
10441: PLUS
10442: ARRAY
10443: IFFALSE 10469
// tmp := tmp & ( 100 + i ) & ; ;
10445: LD_ADDR_VAR 0 3
10449: PUSH
10450: LD_VAR 0 3
10454: PUSH
10455: LD_INT 100
10457: PUSH
10458: LD_VAR 0 8
10462: PLUS
10463: STR
10464: PUSH
10465: LD_STRING ;
10467: STR
10468: ST_TO_ADDR
// end ;
10469: GO 10424
10471: POP
10472: POP
// if tmp then
10473: LD_VAR 0 3
10477: IFFALSE 10489
// active := tmp ;
10479: LD_ADDR_VAR 0 7
10483: PUSH
10484: LD_VAR 0 3
10488: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10489: LD_STRING getStreamItemsFromMission("
10491: PUSH
10492: LD_VAR 0 5
10496: STR
10497: PUSH
10498: LD_STRING ","
10500: STR
10501: PUSH
10502: LD_VAR 0 6
10506: STR
10507: PUSH
10508: LD_STRING ","
10510: STR
10511: PUSH
10512: LD_VAR 0 7
10516: STR
10517: PUSH
10518: LD_STRING ")
10520: STR
10521: PPUSH
10522: CALL_OW 559
// end else
10526: GO 10535
// ToLua ( getStreamItemsFromMission("","","") ) ;
10528: LD_STRING getStreamItemsFromMission("","","")
10530: PPUSH
10531: CALL_OW 559
// end ;
10535: LD_VAR 0 2
10539: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10540: LD_EXP 8
10544: PUSH
10545: LD_EXP 13
10549: AND
10550: IFFALSE 10674
10552: GO 10554
10554: DISABLE
10555: LD_INT 0
10557: PPUSH
10558: PPUSH
// begin enable ;
10559: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10560: LD_ADDR_VAR 0 2
10564: PUSH
10565: LD_INT 22
10567: PUSH
10568: LD_OWVAR 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: LD_INT 34
10582: PUSH
10583: LD_INT 7
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 34
10592: PUSH
10593: LD_INT 45
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 34
10602: PUSH
10603: LD_INT 28
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 34
10612: PUSH
10613: LD_INT 47
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: ST_TO_ADDR
// if not tmp then
10636: LD_VAR 0 2
10640: NOT
10641: IFFALSE 10645
// exit ;
10643: GO 10674
// for i in tmp do
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_VAR 0 2
10654: PUSH
10655: FOR_IN
10656: IFFALSE 10672
// begin SetLives ( i , 0 ) ;
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_INT 0
10665: PPUSH
10666: CALL_OW 234
// end ;
10670: GO 10655
10672: POP
10673: POP
// end ;
10674: PPOPN 2
10676: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10677: LD_EXP 8
10681: PUSH
10682: LD_EXP 14
10686: AND
10687: IFFALSE 10771
10689: GO 10691
10691: DISABLE
10692: LD_INT 0
10694: PPUSH
10695: PPUSH
// begin enable ;
10696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_OWVAR 2
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 32
10716: PUSH
10717: LD_INT 3
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 69
10732: ST_TO_ADDR
// if not tmp then
10733: LD_VAR 0 2
10737: NOT
10738: IFFALSE 10742
// exit ;
10740: GO 10771
// for i in tmp do
10742: LD_ADDR_VAR 0 1
10746: PUSH
10747: LD_VAR 0 2
10751: PUSH
10752: FOR_IN
10753: IFFALSE 10769
// begin SetLives ( i , 0 ) ;
10755: LD_VAR 0 1
10759: PPUSH
10760: LD_INT 0
10762: PPUSH
10763: CALL_OW 234
// end ;
10767: GO 10752
10769: POP
10770: POP
// end ;
10771: PPOPN 2
10773: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10774: LD_EXP 8
10778: PUSH
10779: LD_EXP 11
10783: AND
10784: IFFALSE 10877
10786: GO 10788
10788: DISABLE
10789: LD_INT 0
10791: PPUSH
// begin enable ;
10792: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10793: LD_ADDR_VAR 0 1
10797: PUSH
10798: LD_INT 22
10800: PUSH
10801: LD_OWVAR 2
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 2
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 5
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 25
10825: PUSH
10826: LD_INT 9
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 25
10835: PUSH
10836: LD_INT 8
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PUSH
10858: FOR_IN
10859: IFFALSE 10875
// begin SetClass ( i , 1 ) ;
10861: LD_VAR 0 1
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 336
// end ;
10873: GO 10858
10875: POP
10876: POP
// end ;
10877: PPOPN 1
10879: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10880: LD_EXP 8
10884: PUSH
10885: LD_EXP 12
10889: AND
10890: PUSH
10891: LD_OWVAR 65
10895: PUSH
10896: LD_INT 7
10898: LESS
10899: AND
10900: IFFALSE 10914
10902: GO 10904
10904: DISABLE
// begin enable ;
10905: ENABLE
// game_speed := 7 ;
10906: LD_ADDR_OWVAR 65
10910: PUSH
10911: LD_INT 7
10913: ST_TO_ADDR
// end ;
10914: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10915: LD_EXP 8
10919: PUSH
10920: LD_EXP 15
10924: AND
10925: IFFALSE 11127
10927: GO 10929
10929: DISABLE
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10935: LD_ADDR_VAR 0 3
10939: PUSH
10940: LD_INT 81
10942: PUSH
10943: LD_OWVAR 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 21
10954: PUSH
10955: LD_INT 1
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PPUSH
10966: CALL_OW 69
10970: ST_TO_ADDR
// if not tmp then
10971: LD_VAR 0 3
10975: NOT
10976: IFFALSE 10980
// exit ;
10978: GO 11127
// if tmp > 5 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 5
10987: GREATER
10988: IFFALSE 11000
// k := 5 else
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_INT 5
10997: ST_TO_ADDR
10998: GO 11010
// k := tmp ;
11000: LD_ADDR_VAR 0 2
11004: PUSH
11005: LD_VAR 0 3
11009: ST_TO_ADDR
// for i := 1 to k do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_VAR 0 2
11024: PUSH
11025: FOR_TO
11026: IFFALSE 11125
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11028: LD_VAR 0 3
11032: PUSH
11033: LD_VAR 0 1
11037: ARRAY
11038: PPUSH
11039: LD_VAR 0 1
11043: PUSH
11044: LD_INT 4
11046: MOD
11047: PUSH
11048: LD_INT 1
11050: PLUS
11051: PPUSH
11052: CALL_OW 259
11056: PUSH
11057: LD_INT 10
11059: LESS
11060: IFFALSE 11123
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11062: LD_VAR 0 3
11066: PUSH
11067: LD_VAR 0 1
11071: ARRAY
11072: PPUSH
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 4
11080: MOD
11081: PUSH
11082: LD_INT 1
11084: PLUS
11085: PPUSH
11086: LD_VAR 0 3
11090: PUSH
11091: LD_VAR 0 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 1
11101: PUSH
11102: LD_INT 4
11104: MOD
11105: PUSH
11106: LD_INT 1
11108: PLUS
11109: PPUSH
11110: CALL_OW 259
11114: PUSH
11115: LD_INT 1
11117: PLUS
11118: PPUSH
11119: CALL_OW 237
11123: GO 11025
11125: POP
11126: POP
// end ;
11127: PPOPN 3
11129: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11130: LD_EXP 8
11134: PUSH
11135: LD_EXP 16
11139: AND
11140: IFFALSE 11160
11142: GO 11144
11144: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11145: LD_INT 4
11147: PPUSH
11148: LD_OWVAR 2
11152: PPUSH
11153: LD_INT 0
11155: PPUSH
11156: CALL_OW 324
11160: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11161: LD_EXP 8
11165: PUSH
11166: LD_EXP 45
11170: AND
11171: IFFALSE 11191
11173: GO 11175
11175: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11176: LD_INT 19
11178: PPUSH
11179: LD_OWVAR 2
11183: PPUSH
11184: LD_INT 0
11186: PPUSH
11187: CALL_OW 324
11191: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11192: LD_EXP 8
11196: PUSH
11197: LD_EXP 17
11201: AND
11202: IFFALSE 11304
11204: GO 11206
11206: DISABLE
11207: LD_INT 0
11209: PPUSH
11210: PPUSH
// begin enable ;
11211: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11212: LD_ADDR_VAR 0 2
11216: PUSH
11217: LD_INT 22
11219: PUSH
11220: LD_OWVAR 2
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: LD_INT 34
11234: PUSH
11235: LD_INT 11
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 34
11244: PUSH
11245: LD_INT 30
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: ST_TO_ADDR
// if not tmp then
11266: LD_VAR 0 2
11270: NOT
11271: IFFALSE 11275
// exit ;
11273: GO 11304
// for i in tmp do
11275: LD_ADDR_VAR 0 1
11279: PUSH
11280: LD_VAR 0 2
11284: PUSH
11285: FOR_IN
11286: IFFALSE 11302
// begin SetLives ( i , 0 ) ;
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_INT 0
11295: PPUSH
11296: CALL_OW 234
// end ;
11300: GO 11285
11302: POP
11303: POP
// end ;
11304: PPOPN 2
11306: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 18
11316: AND
11317: IFFALSE 11337
11319: GO 11321
11321: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11322: LD_INT 32
11324: PPUSH
11325: LD_OWVAR 2
11329: PPUSH
11330: LD_INT 0
11332: PPUSH
11333: CALL_OW 324
11337: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11338: LD_EXP 8
11342: PUSH
11343: LD_EXP 19
11347: AND
11348: IFFALSE 11529
11350: GO 11352
11352: DISABLE
11353: LD_INT 0
11355: PPUSH
11356: PPUSH
11357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11358: LD_ADDR_VAR 0 2
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_OWVAR 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 33
11377: PUSH
11378: LD_INT 3
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: ST_TO_ADDR
// if not tmp then
11394: LD_VAR 0 2
11398: NOT
11399: IFFALSE 11403
// exit ;
11401: GO 11529
// side := 0 ;
11403: LD_ADDR_VAR 0 3
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// for i := 1 to 8 do
11411: LD_ADDR_VAR 0 1
11415: PUSH
11416: DOUBLE
11417: LD_INT 1
11419: DEC
11420: ST_TO_ADDR
11421: LD_INT 8
11423: PUSH
11424: FOR_TO
11425: IFFALSE 11473
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11427: LD_OWVAR 2
11431: PUSH
11432: LD_VAR 0 1
11436: NONEQUAL
11437: PUSH
11438: LD_OWVAR 2
11442: PPUSH
11443: LD_VAR 0 1
11447: PPUSH
11448: CALL_OW 81
11452: PUSH
11453: LD_INT 2
11455: EQUAL
11456: AND
11457: IFFALSE 11471
// begin side := i ;
11459: LD_ADDR_VAR 0 3
11463: PUSH
11464: LD_VAR 0 1
11468: ST_TO_ADDR
// break ;
11469: GO 11473
// end ;
11471: GO 11424
11473: POP
11474: POP
// if not side then
11475: LD_VAR 0 3
11479: NOT
11480: IFFALSE 11484
// exit ;
11482: GO 11529
// for i := 1 to tmp do
11484: LD_ADDR_VAR 0 1
11488: PUSH
11489: DOUBLE
11490: LD_INT 1
11492: DEC
11493: ST_TO_ADDR
11494: LD_VAR 0 2
11498: PUSH
11499: FOR_TO
11500: IFFALSE 11527
// if Prob ( 60 ) then
11502: LD_INT 60
11504: PPUSH
11505: CALL_OW 13
11509: IFFALSE 11525
// SetSide ( i , side ) ;
11511: LD_VAR 0 1
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: CALL_OW 235
11525: GO 11499
11527: POP
11528: POP
// end ;
11529: PPOPN 3
11531: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11532: LD_EXP 8
11536: PUSH
11537: LD_EXP 21
11541: AND
11542: IFFALSE 11661
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11550: LD_ADDR_VAR 0 1
11554: PUSH
11555: LD_INT 22
11557: PUSH
11558: LD_OWVAR 2
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 23
11582: PUSH
11583: LD_INT 0
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11659
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 257
11616: PUSH
11617: LD_INT 1
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 4
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: IN
11635: IFFALSE 11657
// SetClass ( un , rand ( 1 , 4 ) ) ;
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: LD_INT 4
11647: PPUSH
11648: CALL_OW 12
11652: PPUSH
11653: CALL_OW 336
11657: GO 11604
11659: POP
11660: POP
// end ;
11661: PPOPN 1
11663: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11664: LD_EXP 8
11668: PUSH
11669: LD_EXP 20
11673: AND
11674: IFFALSE 11753
11676: GO 11678
11678: DISABLE
11679: LD_INT 0
11681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: LD_INT 22
11689: PUSH
11690: LD_OWVAR 2
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 21
11701: PUSH
11702: LD_INT 3
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PPUSH
11713: CALL_OW 69
11717: ST_TO_ADDR
// if not tmp then
11718: LD_VAR 0 1
11722: NOT
11723: IFFALSE 11727
// exit ;
11725: GO 11753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11727: LD_VAR 0 1
11731: PUSH
11732: LD_INT 1
11734: PPUSH
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 12
11744: ARRAY
11745: PPUSH
11746: LD_INT 100
11748: PPUSH
11749: CALL_OW 234
// end ;
11753: PPOPN 1
11755: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11756: LD_EXP 8
11760: PUSH
11761: LD_EXP 22
11765: AND
11766: IFFALSE 11864
11768: GO 11770
11770: DISABLE
11771: LD_INT 0
11773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_INT 22
11781: PUSH
11782: LD_OWVAR 2
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 21
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 69
11809: ST_TO_ADDR
// if not tmp then
11810: LD_VAR 0 1
11814: NOT
11815: IFFALSE 11819
// exit ;
11817: GO 11864
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11819: LD_VAR 0 1
11823: PUSH
11824: LD_INT 1
11826: PPUSH
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 12
11836: ARRAY
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: LD_INT 4
11843: PPUSH
11844: CALL_OW 12
11848: PPUSH
11849: LD_INT 3000
11851: PPUSH
11852: LD_INT 9000
11854: PPUSH
11855: CALL_OW 12
11859: PPUSH
11860: CALL_OW 492
// end ;
11864: PPOPN 1
11866: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11867: LD_EXP 8
11871: PUSH
11872: LD_EXP 23
11876: AND
11877: IFFALSE 11897
11879: GO 11881
11881: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11882: LD_INT 1
11884: PPUSH
11885: LD_OWVAR 2
11889: PPUSH
11890: LD_INT 0
11892: PPUSH
11893: CALL_OW 324
11897: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11898: LD_EXP 8
11902: PUSH
11903: LD_EXP 24
11907: AND
11908: IFFALSE 11991
11910: GO 11912
11912: DISABLE
11913: LD_INT 0
11915: PPUSH
11916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11917: LD_ADDR_VAR 0 2
11921: PUSH
11922: LD_INT 22
11924: PUSH
11925: LD_OWVAR 2
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 21
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PPUSH
11948: CALL_OW 69
11952: ST_TO_ADDR
// if not tmp then
11953: LD_VAR 0 2
11957: NOT
11958: IFFALSE 11962
// exit ;
11960: GO 11991
// for i in tmp do
11962: LD_ADDR_VAR 0 1
11966: PUSH
11967: LD_VAR 0 2
11971: PUSH
11972: FOR_IN
11973: IFFALSE 11989
// SetBLevel ( i , 10 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_INT 10
11982: PPUSH
11983: CALL_OW 241
11987: GO 11972
11989: POP
11990: POP
// end ;
11991: PPOPN 2
11993: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11994: LD_EXP 8
11998: PUSH
11999: LD_EXP 25
12003: AND
12004: IFFALSE 12115
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
12013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12014: LD_ADDR_VAR 0 3
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_OWVAR 2
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 25
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 69
12049: ST_TO_ADDR
// if not tmp then
12050: LD_VAR 0 3
12054: NOT
12055: IFFALSE 12059
// exit ;
12057: GO 12115
// un := tmp [ rand ( 1 , tmp ) ] ;
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_VAR 0 3
12068: PUSH
12069: LD_INT 1
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: CALL_OW 12
12081: ARRAY
12082: ST_TO_ADDR
// if Crawls ( un ) then
12083: LD_VAR 0 2
12087: PPUSH
12088: CALL_OW 318
12092: IFFALSE 12103
// ComWalk ( un ) ;
12094: LD_VAR 0 2
12098: PPUSH
12099: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12103: LD_VAR 0 2
12107: PPUSH
12108: LD_INT 5
12110: PPUSH
12111: CALL_OW 336
// end ;
12115: PPOPN 3
12117: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12118: LD_EXP 8
12122: PUSH
12123: LD_EXP 26
12127: AND
12128: PUSH
12129: LD_OWVAR 67
12133: PUSH
12134: LD_INT 4
12136: LESS
12137: AND
12138: IFFALSE 12157
12140: GO 12142
12142: DISABLE
// begin Difficulty := Difficulty + 1 ;
12143: LD_ADDR_OWVAR 67
12147: PUSH
12148: LD_OWVAR 67
12152: PUSH
12153: LD_INT 1
12155: PLUS
12156: ST_TO_ADDR
// end ;
12157: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12158: LD_EXP 8
12162: PUSH
12163: LD_EXP 27
12167: AND
12168: IFFALSE 12271
12170: GO 12172
12172: DISABLE
12173: LD_INT 0
12175: PPUSH
// begin for i := 1 to 5 do
12176: LD_ADDR_VAR 0 1
12180: PUSH
12181: DOUBLE
12182: LD_INT 1
12184: DEC
12185: ST_TO_ADDR
12186: LD_INT 5
12188: PUSH
12189: FOR_TO
12190: IFFALSE 12269
// begin uc_nation := nation_nature ;
12192: LD_ADDR_OWVAR 21
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// uc_side := 0 ;
12200: LD_ADDR_OWVAR 20
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12208: LD_ADDR_OWVAR 29
12212: PUSH
12213: LD_INT 12
12215: PUSH
12216: LD_INT 12
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: ST_TO_ADDR
// hc_agressivity := 20 ;
12223: LD_ADDR_OWVAR 35
12227: PUSH
12228: LD_INT 20
12230: ST_TO_ADDR
// hc_class := class_tiger ;
12231: LD_ADDR_OWVAR 28
12235: PUSH
12236: LD_INT 14
12238: ST_TO_ADDR
// hc_gallery :=  ;
12239: LD_ADDR_OWVAR 33
12243: PUSH
12244: LD_STRING 
12246: ST_TO_ADDR
// hc_name :=  ;
12247: LD_ADDR_OWVAR 26
12251: PUSH
12252: LD_STRING 
12254: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12255: CALL_OW 44
12259: PPUSH
12260: LD_INT 0
12262: PPUSH
12263: CALL_OW 51
// end ;
12267: GO 12189
12269: POP
12270: POP
// end ;
12271: PPOPN 1
12273: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12274: LD_EXP 8
12278: PUSH
12279: LD_EXP 28
12283: AND
12284: IFFALSE 12293
12286: GO 12288
12288: DISABLE
// StreamSibBomb ;
12289: CALL 12294 0 0
12293: END
// export function StreamSibBomb ; var i , x , y ; begin
12294: LD_INT 0
12296: PPUSH
12297: PPUSH
12298: PPUSH
12299: PPUSH
// result := false ;
12300: LD_ADDR_VAR 0 1
12304: PUSH
12305: LD_INT 0
12307: ST_TO_ADDR
// for i := 1 to 16 do
12308: LD_ADDR_VAR 0 2
12312: PUSH
12313: DOUBLE
12314: LD_INT 1
12316: DEC
12317: ST_TO_ADDR
12318: LD_INT 16
12320: PUSH
12321: FOR_TO
12322: IFFALSE 12521
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 10
12331: PUSH
12332: LD_INT 20
12334: PUSH
12335: LD_INT 30
12337: PUSH
12338: LD_INT 40
12340: PUSH
12341: LD_INT 50
12343: PUSH
12344: LD_INT 60
12346: PUSH
12347: LD_INT 70
12349: PUSH
12350: LD_INT 80
12352: PUSH
12353: LD_INT 90
12355: PUSH
12356: LD_INT 100
12358: PUSH
12359: LD_INT 110
12361: PUSH
12362: LD_INT 120
12364: PUSH
12365: LD_INT 130
12367: PUSH
12368: LD_INT 140
12370: PUSH
12371: LD_INT 150
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 1
12393: PPUSH
12394: LD_INT 15
12396: PPUSH
12397: CALL_OW 12
12401: ARRAY
12402: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12403: LD_ADDR_VAR 0 4
12407: PUSH
12408: LD_INT 10
12410: PUSH
12411: LD_INT 20
12413: PUSH
12414: LD_INT 30
12416: PUSH
12417: LD_INT 40
12419: PUSH
12420: LD_INT 50
12422: PUSH
12423: LD_INT 60
12425: PUSH
12426: LD_INT 70
12428: PUSH
12429: LD_INT 80
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 100
12437: PUSH
12438: LD_INT 110
12440: PUSH
12441: LD_INT 120
12443: PUSH
12444: LD_INT 130
12446: PUSH
12447: LD_INT 140
12449: PUSH
12450: LD_INT 150
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 1
12472: PPUSH
12473: LD_INT 15
12475: PPUSH
12476: CALL_OW 12
12480: ARRAY
12481: ST_TO_ADDR
// if ValidHex ( x , y ) then
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_VAR 0 4
12491: PPUSH
12492: CALL_OW 488
12496: IFFALSE 12519
// begin result := [ x , y ] ;
12498: LD_ADDR_VAR 0 1
12502: PUSH
12503: LD_VAR 0 3
12507: PUSH
12508: LD_VAR 0 4
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: ST_TO_ADDR
// break ;
12517: GO 12521
// end ; end ;
12519: GO 12321
12521: POP
12522: POP
// if result then
12523: LD_VAR 0 1
12527: IFFALSE 12587
// begin ToLua ( playSibBomb() ) ;
12529: LD_STRING playSibBomb()
12531: PPUSH
12532: CALL_OW 559
// wait ( 0 0$14 ) ;
12536: LD_INT 490
12538: PPUSH
12539: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12543: LD_VAR 0 1
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: LD_VAR 0 1
12556: PUSH
12557: LD_INT 2
12559: ARRAY
12560: PPUSH
12561: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12565: LD_VAR 0 1
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: PPUSH
12574: LD_VAR 0 1
12578: PUSH
12579: LD_INT 2
12581: ARRAY
12582: PPUSH
12583: CALL_OW 429
// end ; end ;
12587: LD_VAR 0 1
12591: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12592: LD_EXP 8
12596: PUSH
12597: LD_EXP 30
12601: AND
12602: IFFALSE 12614
12604: GO 12606
12606: DISABLE
// YouLost (  ) ;
12607: LD_STRING 
12609: PPUSH
12610: CALL_OW 104
12614: END
// every 0 0$1 trigger StreamModeActive and sFog do
12615: LD_EXP 8
12619: PUSH
12620: LD_EXP 29
12624: AND
12625: IFFALSE 12639
12627: GO 12629
12629: DISABLE
// FogOff ( your_side ) ;
12630: LD_OWVAR 2
12634: PPUSH
12635: CALL_OW 344
12639: END
// every 0 0$1 trigger StreamModeActive and sSun do
12640: LD_EXP 8
12644: PUSH
12645: LD_EXP 31
12649: AND
12650: IFFALSE 12678
12652: GO 12654
12654: DISABLE
// begin solar_recharge_percent := 0 ;
12655: LD_ADDR_OWVAR 79
12659: PUSH
12660: LD_INT 0
12662: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12663: LD_INT 10500
12665: PPUSH
12666: CALL_OW 67
// solar_recharge_percent := 100 ;
12670: LD_ADDR_OWVAR 79
12674: PUSH
12675: LD_INT 100
12677: ST_TO_ADDR
// end ;
12678: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12679: LD_EXP 8
12683: PUSH
12684: LD_EXP 32
12688: AND
12689: IFFALSE 12928
12691: GO 12693
12693: DISABLE
12694: LD_INT 0
12696: PPUSH
12697: PPUSH
12698: PPUSH
// begin tmp := [ ] ;
12699: LD_ADDR_VAR 0 3
12703: PUSH
12704: EMPTY
12705: ST_TO_ADDR
// for i := 1 to 6 do
12706: LD_ADDR_VAR 0 1
12710: PUSH
12711: DOUBLE
12712: LD_INT 1
12714: DEC
12715: ST_TO_ADDR
12716: LD_INT 6
12718: PUSH
12719: FOR_TO
12720: IFFALSE 12825
// begin uc_nation := nation_nature ;
12722: LD_ADDR_OWVAR 21
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// uc_side := 0 ;
12730: LD_ADDR_OWVAR 20
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12738: LD_ADDR_OWVAR 29
12742: PUSH
12743: LD_INT 12
12745: PUSH
12746: LD_INT 12
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: ST_TO_ADDR
// hc_agressivity := 20 ;
12753: LD_ADDR_OWVAR 35
12757: PUSH
12758: LD_INT 20
12760: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12761: LD_ADDR_OWVAR 28
12765: PUSH
12766: LD_INT 17
12768: ST_TO_ADDR
// hc_gallery :=  ;
12769: LD_ADDR_OWVAR 33
12773: PUSH
12774: LD_STRING 
12776: ST_TO_ADDR
// hc_name :=  ;
12777: LD_ADDR_OWVAR 26
12781: PUSH
12782: LD_STRING 
12784: ST_TO_ADDR
// un := CreateHuman ;
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: CALL_OW 44
12794: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12795: LD_VAR 0 2
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 51
// tmp := tmp ^ un ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: LD_VAR 0 3
12816: PUSH
12817: LD_VAR 0 2
12821: ADD
12822: ST_TO_ADDR
// end ;
12823: GO 12719
12825: POP
12826: POP
// repeat wait ( 0 0$1 ) ;
12827: LD_INT 35
12829: PPUSH
12830: CALL_OW 67
// for un in tmp do
12834: LD_ADDR_VAR 0 2
12838: PUSH
12839: LD_VAR 0 3
12843: PUSH
12844: FOR_IN
12845: IFFALSE 12919
// begin if IsDead ( un ) then
12847: LD_VAR 0 2
12851: PPUSH
12852: CALL_OW 301
12856: IFFALSE 12876
// begin tmp := tmp diff un ;
12858: LD_ADDR_VAR 0 3
12862: PUSH
12863: LD_VAR 0 3
12867: PUSH
12868: LD_VAR 0 2
12872: DIFF
12873: ST_TO_ADDR
// continue ;
12874: GO 12844
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12876: LD_VAR 0 2
12880: PPUSH
12881: LD_INT 3
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 0
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: PPUSH
12903: LD_VAR 0 2
12907: PPUSH
12908: CALL_OW 74
12912: PPUSH
12913: CALL_OW 115
// end ;
12917: GO 12844
12919: POP
12920: POP
// until not tmp ;
12921: LD_VAR 0 3
12925: NOT
12926: IFFALSE 12827
// end ;
12928: PPOPN 3
12930: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12931: LD_EXP 8
12935: PUSH
12936: LD_EXP 33
12940: AND
12941: IFFALSE 12995
12943: GO 12945
12945: DISABLE
// begin ToLua ( displayTroll(); ) ;
12946: LD_STRING displayTroll();
12948: PPUSH
12949: CALL_OW 559
// wait ( 3 3$00 ) ;
12953: LD_INT 6300
12955: PPUSH
12956: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12960: LD_STRING hideTroll();
12962: PPUSH
12963: CALL_OW 559
// wait ( 1 1$00 ) ;
12967: LD_INT 2100
12969: PPUSH
12970: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12974: LD_STRING displayTroll();
12976: PPUSH
12977: CALL_OW 559
// wait ( 1 1$00 ) ;
12981: LD_INT 2100
12983: PPUSH
12984: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12988: LD_STRING hideTroll();
12990: PPUSH
12991: CALL_OW 559
// end ;
12995: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12996: LD_EXP 8
13000: PUSH
13001: LD_EXP 34
13005: AND
13006: IFFALSE 13069
13008: GO 13010
13010: DISABLE
13011: LD_INT 0
13013: PPUSH
// begin p := 0 ;
13014: LD_ADDR_VAR 0 1
13018: PUSH
13019: LD_INT 0
13021: ST_TO_ADDR
// repeat game_speed := 1 ;
13022: LD_ADDR_OWVAR 65
13026: PUSH
13027: LD_INT 1
13029: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13030: LD_INT 35
13032: PPUSH
13033: CALL_OW 67
// p := p + 1 ;
13037: LD_ADDR_VAR 0 1
13041: PUSH
13042: LD_VAR 0 1
13046: PUSH
13047: LD_INT 1
13049: PLUS
13050: ST_TO_ADDR
// until p >= 60 ;
13051: LD_VAR 0 1
13055: PUSH
13056: LD_INT 60
13058: GREATEREQUAL
13059: IFFALSE 13022
// game_speed := 4 ;
13061: LD_ADDR_OWVAR 65
13065: PUSH
13066: LD_INT 4
13068: ST_TO_ADDR
// end ;
13069: PPOPN 1
13071: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13072: LD_EXP 8
13076: PUSH
13077: LD_EXP 35
13081: AND
13082: IFFALSE 13228
13084: GO 13086
13086: DISABLE
13087: LD_INT 0
13089: PPUSH
13090: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: LD_INT 22
13098: PUSH
13099: LD_OWVAR 2
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 2
13110: PUSH
13111: LD_INT 30
13113: PUSH
13114: LD_INT 0
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 30
13123: PUSH
13124: LD_INT 1
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PPUSH
13140: CALL_OW 69
13144: ST_TO_ADDR
// if not depot then
13145: LD_VAR 0 1
13149: NOT
13150: IFFALSE 13154
// exit ;
13152: GO 13228
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13154: LD_ADDR_VAR 0 2
13158: PUSH
13159: LD_VAR 0 1
13163: PUSH
13164: LD_INT 1
13166: PPUSH
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 12
13176: ARRAY
13177: PPUSH
13178: CALL_OW 274
13182: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13183: LD_VAR 0 2
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_INT 0
13193: PPUSH
13194: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13198: LD_VAR 0 2
13202: PPUSH
13203: LD_INT 2
13205: PPUSH
13206: LD_INT 0
13208: PPUSH
13209: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13213: LD_VAR 0 2
13217: PPUSH
13218: LD_INT 3
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 277
// end ;
13228: PPOPN 2
13230: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13231: LD_EXP 8
13235: PUSH
13236: LD_EXP 36
13240: AND
13241: IFFALSE 13338
13243: GO 13245
13245: DISABLE
13246: LD_INT 0
13248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13249: LD_ADDR_VAR 0 1
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_OWVAR 2
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 3
13278: PUSH
13279: LD_INT 23
13281: PUSH
13282: LD_INT 0
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 69
13302: ST_TO_ADDR
// if not tmp then
13303: LD_VAR 0 1
13307: NOT
13308: IFFALSE 13312
// exit ;
13310: GO 13338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13312: LD_VAR 0 1
13316: PUSH
13317: LD_INT 1
13319: PPUSH
13320: LD_VAR 0 1
13324: PPUSH
13325: CALL_OW 12
13329: ARRAY
13330: PPUSH
13331: LD_INT 200
13333: PPUSH
13334: CALL_OW 234
// end ;
13338: PPOPN 1
13340: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13341: LD_EXP 8
13345: PUSH
13346: LD_EXP 37
13350: AND
13351: IFFALSE 13430
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_OWVAR 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 21
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 69
13394: ST_TO_ADDR
// if not tmp then
13395: LD_VAR 0 1
13399: NOT
13400: IFFALSE 13404
// exit ;
13402: GO 13430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13404: LD_VAR 0 1
13408: PUSH
13409: LD_INT 1
13411: PPUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 12
13421: ARRAY
13422: PPUSH
13423: LD_INT 60
13425: PPUSH
13426: CALL_OW 234
// end ;
13430: PPOPN 1
13432: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13433: LD_EXP 8
13437: PUSH
13438: LD_EXP 38
13442: AND
13443: IFFALSE 13542
13445: GO 13447
13447: DISABLE
13448: LD_INT 0
13450: PPUSH
13451: PPUSH
// begin enable ;
13452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13453: LD_ADDR_VAR 0 1
13457: PUSH
13458: LD_INT 22
13460: PUSH
13461: LD_OWVAR 2
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 61
13472: PUSH
13473: EMPTY
13474: LIST
13475: PUSH
13476: LD_INT 33
13478: PUSH
13479: LD_INT 2
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: ST_TO_ADDR
// if not tmp then
13496: LD_VAR 0 1
13500: NOT
13501: IFFALSE 13505
// exit ;
13503: GO 13542
// for i in tmp do
13505: LD_ADDR_VAR 0 2
13509: PUSH
13510: LD_VAR 0 1
13514: PUSH
13515: FOR_IN
13516: IFFALSE 13540
// if IsControledBy ( i ) then
13518: LD_VAR 0 2
13522: PPUSH
13523: CALL_OW 312
13527: IFFALSE 13538
// ComUnlink ( i ) ;
13529: LD_VAR 0 2
13533: PPUSH
13534: CALL_OW 136
13538: GO 13515
13540: POP
13541: POP
// end ;
13542: PPOPN 2
13544: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13545: LD_EXP 8
13549: PUSH
13550: LD_EXP 39
13554: AND
13555: IFFALSE 13695
13557: GO 13559
13559: DISABLE
13560: LD_INT 0
13562: PPUSH
13563: PPUSH
// begin ToLua ( displayPowell(); ) ;
13564: LD_STRING displayPowell();
13566: PPUSH
13567: CALL_OW 559
// uc_side := 0 ;
13571: LD_ADDR_OWVAR 20
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// uc_nation := 2 ;
13579: LD_ADDR_OWVAR 21
13583: PUSH
13584: LD_INT 2
13586: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13587: LD_ADDR_OWVAR 37
13591: PUSH
13592: LD_INT 14
13594: ST_TO_ADDR
// vc_engine := engine_siberite ;
13595: LD_ADDR_OWVAR 39
13599: PUSH
13600: LD_INT 3
13602: ST_TO_ADDR
// vc_control := control_apeman ;
13603: LD_ADDR_OWVAR 38
13607: PUSH
13608: LD_INT 5
13610: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13611: LD_ADDR_OWVAR 40
13615: PUSH
13616: LD_INT 29
13618: ST_TO_ADDR
// un := CreateVehicle ;
13619: LD_ADDR_VAR 0 2
13623: PUSH
13624: CALL_OW 45
13628: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13629: LD_VAR 0 2
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13641: LD_INT 35
13643: PPUSH
13644: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13648: LD_VAR 0 2
13652: PPUSH
13653: LD_INT 22
13655: PUSH
13656: LD_OWVAR 2
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PPUSH
13665: CALL_OW 69
13669: PPUSH
13670: LD_VAR 0 2
13674: PPUSH
13675: CALL_OW 74
13679: PPUSH
13680: CALL_OW 115
// until IsDead ( un ) ;
13684: LD_VAR 0 2
13688: PPUSH
13689: CALL_OW 301
13693: IFFALSE 13641
// end ;
13695: PPOPN 2
13697: END
// every 0 0$1 trigger StreamModeActive and sStu do
13698: LD_EXP 8
13702: PUSH
13703: LD_EXP 47
13707: AND
13708: IFFALSE 13724
13710: GO 13712
13712: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13713: LD_STRING displayStucuk();
13715: PPUSH
13716: CALL_OW 559
// ResetFog ;
13720: CALL_OW 335
// end ;
13724: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13725: LD_EXP 8
13729: PUSH
13730: LD_EXP 40
13734: AND
13735: IFFALSE 13876
13737: GO 13739
13739: DISABLE
13740: LD_INT 0
13742: PPUSH
13743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13744: LD_ADDR_VAR 0 2
13748: PUSH
13749: LD_INT 22
13751: PUSH
13752: LD_OWVAR 2
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 21
13763: PUSH
13764: LD_INT 1
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 69
13779: ST_TO_ADDR
// if not tmp then
13780: LD_VAR 0 2
13784: NOT
13785: IFFALSE 13789
// exit ;
13787: GO 13876
// un := tmp [ rand ( 1 , tmp ) ] ;
13789: LD_ADDR_VAR 0 1
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 1
13801: PPUSH
13802: LD_VAR 0 2
13806: PPUSH
13807: CALL_OW 12
13811: ARRAY
13812: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_INT 0
13820: PPUSH
13821: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13825: LD_VAR 0 1
13829: PPUSH
13830: LD_OWVAR 3
13834: PUSH
13835: LD_VAR 0 1
13839: DIFF
13840: PPUSH
13841: LD_VAR 0 1
13845: PPUSH
13846: CALL_OW 74
13850: PPUSH
13851: CALL_OW 115
// wait ( 0 0$20 ) ;
13855: LD_INT 700
13857: PPUSH
13858: CALL_OW 67
// SetSide ( un , your_side ) ;
13862: LD_VAR 0 1
13866: PPUSH
13867: LD_OWVAR 2
13871: PPUSH
13872: CALL_OW 235
// end ;
13876: PPOPN 2
13878: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13879: LD_EXP 8
13883: PUSH
13884: LD_EXP 41
13888: AND
13889: IFFALSE 13995
13891: GO 13893
13893: DISABLE
13894: LD_INT 0
13896: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13897: LD_ADDR_VAR 0 1
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_OWVAR 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 30
13919: PUSH
13920: LD_INT 0
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 30
13929: PUSH
13930: LD_INT 1
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not depot then
13951: LD_VAR 0 1
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 13995
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13960: LD_VAR 0 1
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 250
13973: PPUSH
13974: LD_VAR 0 1
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: CALL_OW 251
13987: PPUSH
13988: LD_INT 70
13990: PPUSH
13991: CALL_OW 495
// end ;
13995: PPOPN 1
13997: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13998: LD_EXP 8
14002: PUSH
14003: LD_EXP 42
14007: AND
14008: IFFALSE 14219
14010: GO 14012
14012: DISABLE
14013: LD_INT 0
14015: PPUSH
14016: PPUSH
14017: PPUSH
14018: PPUSH
14019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14020: LD_ADDR_VAR 0 5
14024: PUSH
14025: LD_INT 22
14027: PUSH
14028: LD_OWVAR 2
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 1
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 69
14055: ST_TO_ADDR
// if not tmp then
14056: LD_VAR 0 5
14060: NOT
14061: IFFALSE 14065
// exit ;
14063: GO 14219
// for i in tmp do
14065: LD_ADDR_VAR 0 1
14069: PUSH
14070: LD_VAR 0 5
14074: PUSH
14075: FOR_IN
14076: IFFALSE 14217
// begin d := rand ( 0 , 5 ) ;
14078: LD_ADDR_VAR 0 4
14082: PUSH
14083: LD_INT 0
14085: PPUSH
14086: LD_INT 5
14088: PPUSH
14089: CALL_OW 12
14093: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 250
14108: PPUSH
14109: LD_VAR 0 4
14113: PPUSH
14114: LD_INT 3
14116: PPUSH
14117: LD_INT 12
14119: PPUSH
14120: CALL_OW 12
14124: PPUSH
14125: CALL_OW 272
14129: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 251
14144: PPUSH
14145: LD_VAR 0 4
14149: PPUSH
14150: LD_INT 3
14152: PPUSH
14153: LD_INT 12
14155: PPUSH
14156: CALL_OW 12
14160: PPUSH
14161: CALL_OW 273
14165: ST_TO_ADDR
// if ValidHex ( x , y ) then
14166: LD_VAR 0 2
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: CALL_OW 488
14180: IFFALSE 14215
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14182: LD_VAR 0 1
14186: PPUSH
14187: LD_VAR 0 2
14191: PPUSH
14192: LD_VAR 0 3
14196: PPUSH
14197: LD_INT 3
14199: PPUSH
14200: LD_INT 6
14202: PPUSH
14203: CALL_OW 12
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 483
// end ;
14215: GO 14075
14217: POP
14218: POP
// end ;
14219: PPOPN 5
14221: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14222: LD_EXP 8
14226: PUSH
14227: LD_EXP 43
14231: AND
14232: IFFALSE 14326
14234: GO 14236
14236: DISABLE
14237: LD_INT 0
14239: PPUSH
14240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14241: LD_ADDR_VAR 0 2
14245: PUSH
14246: LD_INT 22
14248: PUSH
14249: LD_OWVAR 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 32
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: ST_TO_ADDR
// if not tmp then
14288: LD_VAR 0 2
14292: NOT
14293: IFFALSE 14297
// exit ;
14295: GO 14326
// for i in tmp do
14297: LD_ADDR_VAR 0 1
14301: PUSH
14302: LD_VAR 0 2
14306: PUSH
14307: FOR_IN
14308: IFFALSE 14324
// SetFuel ( i , 0 ) ;
14310: LD_VAR 0 1
14314: PPUSH
14315: LD_INT 0
14317: PPUSH
14318: CALL_OW 240
14322: GO 14307
14324: POP
14325: POP
// end ;
14326: PPOPN 2
14328: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14329: LD_EXP 8
14333: PUSH
14334: LD_EXP 44
14338: AND
14339: IFFALSE 14405
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 30
14366: PUSH
14367: LD_INT 29
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 1
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14405
// DestroyUnit ( tmp [ 1 ] ) ;
14392: LD_VAR 0 1
14396: PUSH
14397: LD_INT 1
14399: ARRAY
14400: PPUSH
14401: CALL_OW 65
// end ;
14405: PPOPN 1
14407: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14408: LD_EXP 8
14412: PUSH
14413: LD_EXP 46
14417: AND
14418: IFFALSE 14547
14420: GO 14422
14422: DISABLE
14423: LD_INT 0
14425: PPUSH
// begin uc_side := 0 ;
14426: LD_ADDR_OWVAR 20
14430: PUSH
14431: LD_INT 0
14433: ST_TO_ADDR
// uc_nation := nation_arabian ;
14434: LD_ADDR_OWVAR 21
14438: PUSH
14439: LD_INT 2
14441: ST_TO_ADDR
// hc_gallery :=  ;
14442: LD_ADDR_OWVAR 33
14446: PUSH
14447: LD_STRING 
14449: ST_TO_ADDR
// hc_name :=  ;
14450: LD_ADDR_OWVAR 26
14454: PUSH
14455: LD_STRING 
14457: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14458: LD_INT 1
14460: PPUSH
14461: LD_INT 11
14463: PPUSH
14464: LD_INT 10
14466: PPUSH
14467: CALL_OW 380
// un := CreateHuman ;
14471: LD_ADDR_VAR 0 1
14475: PUSH
14476: CALL_OW 44
14480: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14493: LD_INT 35
14495: PPUSH
14496: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14500: LD_VAR 0 1
14504: PPUSH
14505: LD_INT 22
14507: PUSH
14508: LD_OWVAR 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PPUSH
14517: CALL_OW 69
14521: PPUSH
14522: LD_VAR 0 1
14526: PPUSH
14527: CALL_OW 74
14531: PPUSH
14532: CALL_OW 115
// until IsDead ( un ) ;
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL_OW 301
14545: IFFALSE 14493
// end ;
14547: PPOPN 1
14549: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14550: LD_EXP 8
14554: PUSH
14555: LD_EXP 48
14559: AND
14560: IFFALSE 14572
14562: GO 14564
14564: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14565: LD_STRING earthquake(getX(game), 0, 32)
14567: PPUSH
14568: CALL_OW 559
14572: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14573: LD_EXP 8
14577: PUSH
14578: LD_EXP 49
14582: AND
14583: IFFALSE 14674
14585: GO 14587
14587: DISABLE
14588: LD_INT 0
14590: PPUSH
// begin enable ;
14591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14592: LD_ADDR_VAR 0 1
14596: PUSH
14597: LD_INT 22
14599: PUSH
14600: LD_OWVAR 2
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 21
14611: PUSH
14612: LD_INT 2
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 33
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// if not tmp then
14639: LD_VAR 0 1
14643: NOT
14644: IFFALSE 14648
// exit ;
14646: GO 14674
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14648: LD_VAR 0 1
14652: PUSH
14653: LD_INT 1
14655: PPUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 12
14665: ARRAY
14666: PPUSH
14667: LD_INT 1
14669: PPUSH
14670: CALL_OW 234
// end ;
14674: PPOPN 1
14676: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14677: LD_EXP 8
14681: PUSH
14682: LD_EXP 50
14686: AND
14687: IFFALSE 14828
14689: GO 14691
14691: DISABLE
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
14696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_INT 22
14704: PUSH
14705: LD_OWVAR 2
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 25
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: ST_TO_ADDR
// if not tmp then
14733: LD_VAR 0 3
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 14828
// un := tmp [ rand ( 1 , tmp ) ] ;
14742: LD_ADDR_VAR 0 2
14746: PUSH
14747: LD_VAR 0 3
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_VAR 0 3
14759: PPUSH
14760: CALL_OW 12
14764: ARRAY
14765: ST_TO_ADDR
// if Crawls ( un ) then
14766: LD_VAR 0 2
14770: PPUSH
14771: CALL_OW 318
14775: IFFALSE 14786
// ComWalk ( un ) ;
14777: LD_VAR 0 2
14781: PPUSH
14782: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14786: LD_VAR 0 2
14790: PPUSH
14791: LD_INT 9
14793: PPUSH
14794: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14798: LD_INT 28
14800: PPUSH
14801: LD_OWVAR 2
14805: PPUSH
14806: LD_INT 2
14808: PPUSH
14809: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14813: LD_INT 29
14815: PPUSH
14816: LD_OWVAR 2
14820: PPUSH
14821: LD_INT 2
14823: PPUSH
14824: CALL_OW 322
// end ;
14828: PPOPN 3
14830: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14831: LD_EXP 8
14835: PUSH
14836: LD_EXP 51
14840: AND
14841: IFFALSE 14952
14843: GO 14845
14845: DISABLE
14846: LD_INT 0
14848: PPUSH
14849: PPUSH
14850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 22
14858: PUSH
14859: LD_OWVAR 2
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 25
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// if not tmp then
14887: LD_VAR 0 3
14891: NOT
14892: IFFALSE 14896
// exit ;
14894: GO 14952
// un := tmp [ rand ( 1 , tmp ) ] ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: LD_VAR 0 3
14905: PUSH
14906: LD_INT 1
14908: PPUSH
14909: LD_VAR 0 3
14913: PPUSH
14914: CALL_OW 12
14918: ARRAY
14919: ST_TO_ADDR
// if Crawls ( un ) then
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 318
14929: IFFALSE 14940
// ComWalk ( un ) ;
14931: LD_VAR 0 2
14935: PPUSH
14936: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14940: LD_VAR 0 2
14944: PPUSH
14945: LD_INT 8
14947: PPUSH
14948: CALL_OW 336
// end ;
14952: PPOPN 3
14954: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14955: LD_EXP 8
14959: PUSH
14960: LD_EXP 52
14964: AND
14965: IFFALSE 15109
14967: GO 14969
14969: DISABLE
14970: LD_INT 0
14972: PPUSH
14973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_INT 22
14981: PUSH
14982: LD_OWVAR 2
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 21
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 2
15003: PUSH
15004: LD_INT 34
15006: PUSH
15007: LD_INT 12
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 34
15016: PUSH
15017: LD_INT 51
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 34
15026: PUSH
15027: LD_INT 32
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: ST_TO_ADDR
// if not tmp then
15050: LD_VAR 0 2
15054: NOT
15055: IFFALSE 15059
// exit ;
15057: GO 15109
// for i in tmp do
15059: LD_ADDR_VAR 0 1
15063: PUSH
15064: LD_VAR 0 2
15068: PUSH
15069: FOR_IN
15070: IFFALSE 15107
// if GetCargo ( i , mat_artifact ) = 0 then
15072: LD_VAR 0 1
15076: PPUSH
15077: LD_INT 4
15079: PPUSH
15080: CALL_OW 289
15084: PUSH
15085: LD_INT 0
15087: EQUAL
15088: IFFALSE 15105
// SetCargo ( i , mat_siberit , 100 ) ;
15090: LD_VAR 0 1
15094: PPUSH
15095: LD_INT 3
15097: PPUSH
15098: LD_INT 100
15100: PPUSH
15101: CALL_OW 290
15105: GO 15069
15107: POP
15108: POP
// end ;
15109: PPOPN 2
15111: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15112: LD_EXP 8
15116: PUSH
15117: LD_EXP 53
15121: AND
15122: IFFALSE 15305
15124: GO 15126
15126: DISABLE
15127: LD_INT 0
15129: PPUSH
15130: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15131: LD_ADDR_VAR 0 2
15135: PUSH
15136: LD_INT 22
15138: PUSH
15139: LD_OWVAR 2
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PPUSH
15148: CALL_OW 69
15152: ST_TO_ADDR
// if not tmp then
15153: LD_VAR 0 2
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15305
// for i := 1 to 2 do
15162: LD_ADDR_VAR 0 1
15166: PUSH
15167: DOUBLE
15168: LD_INT 1
15170: DEC
15171: ST_TO_ADDR
15172: LD_INT 2
15174: PUSH
15175: FOR_TO
15176: IFFALSE 15303
// begin uc_side := your_side ;
15178: LD_ADDR_OWVAR 20
15182: PUSH
15183: LD_OWVAR 2
15187: ST_TO_ADDR
// uc_nation := nation_american ;
15188: LD_ADDR_OWVAR 21
15192: PUSH
15193: LD_INT 1
15195: ST_TO_ADDR
// vc_chassis := us_morphling ;
15196: LD_ADDR_OWVAR 37
15200: PUSH
15201: LD_INT 5
15203: ST_TO_ADDR
// vc_engine := engine_siberite ;
15204: LD_ADDR_OWVAR 39
15208: PUSH
15209: LD_INT 3
15211: ST_TO_ADDR
// vc_control := control_computer ;
15212: LD_ADDR_OWVAR 38
15216: PUSH
15217: LD_INT 3
15219: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15220: LD_ADDR_OWVAR 40
15224: PUSH
15225: LD_INT 10
15227: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15228: LD_VAR 0 2
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: CALL_OW 310
15241: NOT
15242: IFFALSE 15289
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15244: CALL_OW 45
15248: PPUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_INT 1
15256: ARRAY
15257: PPUSH
15258: CALL_OW 250
15262: PPUSH
15263: LD_VAR 0 2
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: PPUSH
15272: CALL_OW 251
15276: PPUSH
15277: LD_INT 12
15279: PPUSH
15280: LD_INT 1
15282: PPUSH
15283: CALL_OW 50
15287: GO 15301
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15289: CALL_OW 45
15293: PPUSH
15294: LD_INT 1
15296: PPUSH
15297: CALL_OW 51
// end ;
15301: GO 15175
15303: POP
15304: POP
// end ;
15305: PPOPN 2
15307: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15308: LD_EXP 8
15312: PUSH
15313: LD_EXP 54
15317: AND
15318: IFFALSE 15540
15320: GO 15322
15322: DISABLE
15323: LD_INT 0
15325: PPUSH
15326: PPUSH
15327: PPUSH
15328: PPUSH
15329: PPUSH
15330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15331: LD_ADDR_VAR 0 6
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_OWVAR 2
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 21
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 3
15360: PUSH
15361: LD_INT 23
15363: PUSH
15364: LD_INT 0
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: PPUSH
15380: CALL_OW 69
15384: ST_TO_ADDR
// if not tmp then
15385: LD_VAR 0 6
15389: NOT
15390: IFFALSE 15394
// exit ;
15392: GO 15540
// s1 := rand ( 1 , 4 ) ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 4
15404: PPUSH
15405: CALL_OW 12
15409: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15410: LD_ADDR_VAR 0 4
15414: PUSH
15415: LD_VAR 0 6
15419: PUSH
15420: LD_INT 1
15422: ARRAY
15423: PPUSH
15424: LD_VAR 0 2
15428: PPUSH
15429: CALL_OW 259
15433: ST_TO_ADDR
// if s1 = 1 then
15434: LD_VAR 0 2
15438: PUSH
15439: LD_INT 1
15441: EQUAL
15442: IFFALSE 15462
// s2 := rand ( 2 , 4 ) else
15444: LD_ADDR_VAR 0 3
15448: PUSH
15449: LD_INT 2
15451: PPUSH
15452: LD_INT 4
15454: PPUSH
15455: CALL_OW 12
15459: ST_TO_ADDR
15460: GO 15470
// s2 := 1 ;
15462: LD_ADDR_VAR 0 3
15466: PUSH
15467: LD_INT 1
15469: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15470: LD_ADDR_VAR 0 5
15474: PUSH
15475: LD_VAR 0 6
15479: PUSH
15480: LD_INT 1
15482: ARRAY
15483: PPUSH
15484: LD_VAR 0 3
15488: PPUSH
15489: CALL_OW 259
15493: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15494: LD_VAR 0 6
15498: PUSH
15499: LD_INT 1
15501: ARRAY
15502: PPUSH
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_VAR 0 5
15512: PPUSH
15513: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15517: LD_VAR 0 6
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_VAR 0 3
15530: PPUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: CALL_OW 237
// end ;
15540: PPOPN 6
15542: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15543: LD_EXP 8
15547: PUSH
15548: LD_EXP 55
15552: AND
15553: IFFALSE 15632
15555: GO 15557
15557: DISABLE
15558: LD_INT 0
15560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15561: LD_ADDR_VAR 0 1
15565: PUSH
15566: LD_INT 22
15568: PUSH
15569: LD_OWVAR 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 30
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PPUSH
15592: CALL_OW 69
15596: ST_TO_ADDR
// if not tmp then
15597: LD_VAR 0 1
15601: NOT
15602: IFFALSE 15606
// exit ;
15604: GO 15632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15606: LD_VAR 0 1
15610: PUSH
15611: LD_INT 1
15613: PPUSH
15614: LD_VAR 0 1
15618: PPUSH
15619: CALL_OW 12
15623: ARRAY
15624: PPUSH
15625: LD_INT 1
15627: PPUSH
15628: CALL_OW 234
// end ;
15632: PPOPN 1
15634: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15635: LD_EXP 8
15639: PUSH
15640: LD_EXP 56
15644: AND
15645: IFFALSE 15757
15647: GO 15649
15649: DISABLE
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15654: LD_ADDR_VAR 0 2
15658: PUSH
15659: LD_INT 22
15661: PUSH
15662: LD_OWVAR 2
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 2
15673: PUSH
15674: LD_INT 30
15676: PUSH
15677: LD_INT 27
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_INT 26
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 28
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PPUSH
15714: CALL_OW 69
15718: ST_TO_ADDR
// if not tmp then
15719: LD_VAR 0 2
15723: NOT
15724: IFFALSE 15728
// exit ;
15726: GO 15757
// for i in tmp do
15728: LD_ADDR_VAR 0 1
15732: PUSH
15733: LD_VAR 0 2
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15755
// SetLives ( i , 1 ) ;
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 234
15753: GO 15738
15755: POP
15756: POP
// end ;
15757: PPOPN 2
15759: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15760: LD_EXP 8
15764: PUSH
15765: LD_EXP 57
15769: AND
15770: IFFALSE 16057
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
15778: PPUSH
15779: PPUSH
// begin i := rand ( 1 , 7 ) ;
15780: LD_ADDR_VAR 0 1
15784: PUSH
15785: LD_INT 1
15787: PPUSH
15788: LD_INT 7
15790: PPUSH
15791: CALL_OW 12
15795: ST_TO_ADDR
// case i of 1 :
15796: LD_VAR 0 1
15800: PUSH
15801: LD_INT 1
15803: DOUBLE
15804: EQUAL
15805: IFTRUE 15809
15807: GO 15819
15809: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15810: LD_STRING earthquake(getX(game), 0, 32)
15812: PPUSH
15813: CALL_OW 559
15817: GO 16057
15819: LD_INT 2
15821: DOUBLE
15822: EQUAL
15823: IFTRUE 15827
15825: GO 15841
15827: POP
// begin ToLua ( displayStucuk(); ) ;
15828: LD_STRING displayStucuk();
15830: PPUSH
15831: CALL_OW 559
// ResetFog ;
15835: CALL_OW 335
// end ; 3 :
15839: GO 16057
15841: LD_INT 3
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 15953
15849: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15850: LD_ADDR_VAR 0 2
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_OWVAR 2
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 25
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: ST_TO_ADDR
// if not tmp then
15886: LD_VAR 0 2
15890: NOT
15891: IFFALSE 15895
// exit ;
15893: GO 16057
// un := tmp [ rand ( 1 , tmp ) ] ;
15895: LD_ADDR_VAR 0 3
15899: PUSH
15900: LD_VAR 0 2
15904: PUSH
15905: LD_INT 1
15907: PPUSH
15908: LD_VAR 0 2
15912: PPUSH
15913: CALL_OW 12
15917: ARRAY
15918: ST_TO_ADDR
// if Crawls ( un ) then
15919: LD_VAR 0 3
15923: PPUSH
15924: CALL_OW 318
15928: IFFALSE 15939
// ComWalk ( un ) ;
15930: LD_VAR 0 3
15934: PPUSH
15935: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 8
15946: PPUSH
15947: CALL_OW 336
// end ; 4 :
15951: GO 16057
15953: LD_INT 4
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16035
15961: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_OWVAR 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 30
15981: PUSH
15982: LD_INT 29
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: ST_TO_ADDR
// if not tmp then
15998: LD_VAR 0 2
16002: NOT
16003: IFFALSE 16007
// exit ;
16005: GO 16057
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16007: LD_VAR 0 2
16011: PUSH
16012: LD_INT 1
16014: ARRAY
16015: PPUSH
16016: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16020: LD_VAR 0 2
16024: PUSH
16025: LD_INT 1
16027: ARRAY
16028: PPUSH
16029: CALL_OW 65
// end ; 5 .. 7 :
16033: GO 16057
16035: LD_INT 5
16037: DOUBLE
16038: GREATEREQUAL
16039: IFFALSE 16047
16041: LD_INT 7
16043: DOUBLE
16044: LESSEQUAL
16045: IFTRUE 16049
16047: GO 16056
16049: POP
// StreamSibBomb ; end ;
16050: CALL 12294 0 0
16054: GO 16057
16056: POP
// end ;
16057: PPOPN 3
16059: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16060: LD_EXP 8
16064: PUSH
16065: LD_EXP 58
16069: AND
16070: IFFALSE 16226
16072: GO 16074
16074: DISABLE
16075: LD_INT 0
16077: PPUSH
16078: PPUSH
16079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_INT 81
16087: PUSH
16088: LD_OWVAR 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 2
16099: PUSH
16100: LD_INT 21
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 21
16112: PUSH
16113: LD_INT 2
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: ST_TO_ADDR
// if not tmp then
16134: LD_VAR 0 2
16138: NOT
16139: IFFALSE 16143
// exit ;
16141: GO 16226
// p := 0 ;
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_INT 0
16150: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16151: LD_INT 35
16153: PPUSH
16154: CALL_OW 67
// p := p + 1 ;
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: LD_VAR 0 3
16167: PUSH
16168: LD_INT 1
16170: PLUS
16171: ST_TO_ADDR
// for i in tmp do
16172: LD_ADDR_VAR 0 1
16176: PUSH
16177: LD_VAR 0 2
16181: PUSH
16182: FOR_IN
16183: IFFALSE 16214
// if GetLives ( i ) < 1000 then
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 256
16194: PUSH
16195: LD_INT 1000
16197: LESS
16198: IFFALSE 16212
// SetLives ( i , 1000 ) ;
16200: LD_VAR 0 1
16204: PPUSH
16205: LD_INT 1000
16207: PPUSH
16208: CALL_OW 234
16212: GO 16182
16214: POP
16215: POP
// until p > 20 ;
16216: LD_VAR 0 3
16220: PUSH
16221: LD_INT 20
16223: GREATER
16224: IFFALSE 16151
// end ;
16226: PPOPN 3
16228: END
// every 0 0$1 trigger StreamModeActive and sTime do
16229: LD_EXP 8
16233: PUSH
16234: LD_EXP 59
16238: AND
16239: IFFALSE 16274
16241: GO 16243
16243: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16244: LD_INT 28
16246: PPUSH
16247: LD_OWVAR 2
16251: PPUSH
16252: LD_INT 2
16254: PPUSH
16255: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16259: LD_INT 30
16261: PPUSH
16262: LD_OWVAR 2
16266: PPUSH
16267: LD_INT 2
16269: PPUSH
16270: CALL_OW 322
// end ;
16274: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16275: LD_EXP 8
16279: PUSH
16280: LD_EXP 60
16284: AND
16285: IFFALSE 16406
16287: GO 16289
16289: DISABLE
16290: LD_INT 0
16292: PPUSH
16293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16294: LD_ADDR_VAR 0 2
16298: PUSH
16299: LD_INT 22
16301: PUSH
16302: LD_OWVAR 2
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 21
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 3
16323: PUSH
16324: LD_INT 23
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: PPUSH
16343: CALL_OW 69
16347: ST_TO_ADDR
// if not tmp then
16348: LD_VAR 0 2
16352: NOT
16353: IFFALSE 16357
// exit ;
16355: GO 16406
// for i in tmp do
16357: LD_ADDR_VAR 0 1
16361: PUSH
16362: LD_VAR 0 2
16366: PUSH
16367: FOR_IN
16368: IFFALSE 16404
// begin if Crawls ( i ) then
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 318
16379: IFFALSE 16390
// ComWalk ( i ) ;
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 138
// SetClass ( i , 2 ) ;
16390: LD_VAR 0 1
16394: PPUSH
16395: LD_INT 2
16397: PPUSH
16398: CALL_OW 336
// end ;
16402: GO 16367
16404: POP
16405: POP
// end ;
16406: PPOPN 2
16408: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16409: LD_EXP 8
16413: PUSH
16414: LD_EXP 61
16418: AND
16419: IFFALSE 16707
16421: GO 16423
16423: DISABLE
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
16428: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16429: LD_OWVAR 2
16433: PPUSH
16434: LD_INT 9
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16447: LD_INT 9
16449: PPUSH
16450: LD_OWVAR 2
16454: PPUSH
16455: CALL_OW 343
// uc_side := 9 ;
16459: LD_ADDR_OWVAR 20
16463: PUSH
16464: LD_INT 9
16466: ST_TO_ADDR
// uc_nation := 2 ;
16467: LD_ADDR_OWVAR 21
16471: PUSH
16472: LD_INT 2
16474: ST_TO_ADDR
// hc_name := Dark Warrior ;
16475: LD_ADDR_OWVAR 26
16479: PUSH
16480: LD_STRING Dark Warrior
16482: ST_TO_ADDR
// hc_gallery :=  ;
16483: LD_ADDR_OWVAR 33
16487: PUSH
16488: LD_STRING 
16490: ST_TO_ADDR
// hc_noskilllimit := true ;
16491: LD_ADDR_OWVAR 76
16495: PUSH
16496: LD_INT 1
16498: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16499: LD_ADDR_OWVAR 31
16503: PUSH
16504: LD_INT 30
16506: PUSH
16507: LD_INT 30
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 30
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: ST_TO_ADDR
// un := CreateHuman ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: CALL_OW 44
16531: ST_TO_ADDR
// hc_noskilllimit := false ;
16532: LD_ADDR_OWVAR 76
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16540: LD_VAR 0 3
16544: PPUSH
16545: LD_INT 1
16547: PPUSH
16548: CALL_OW 51
// ToLua ( playRanger() ) ;
16552: LD_STRING playRanger()
16554: PPUSH
16555: CALL_OW 559
// p := 0 ;
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16567: LD_INT 35
16569: PPUSH
16570: CALL_OW 67
// p := p + 1 ;
16574: LD_ADDR_VAR 0 2
16578: PUSH
16579: LD_VAR 0 2
16583: PUSH
16584: LD_INT 1
16586: PLUS
16587: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16588: LD_VAR 0 3
16592: PPUSH
16593: CALL_OW 256
16597: PUSH
16598: LD_INT 1000
16600: LESS
16601: IFFALSE 16615
// SetLives ( un , 1000 ) ;
16603: LD_VAR 0 3
16607: PPUSH
16608: LD_INT 1000
16610: PPUSH
16611: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16615: LD_VAR 0 3
16619: PPUSH
16620: LD_INT 81
16622: PUSH
16623: LD_OWVAR 2
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 91
16634: PUSH
16635: LD_VAR 0 3
16639: PUSH
16640: LD_INT 30
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PPUSH
16652: CALL_OW 69
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: CALL_OW 74
16666: PPUSH
16667: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16671: LD_VAR 0 2
16675: PUSH
16676: LD_INT 80
16678: GREATER
16679: PUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: CALL_OW 301
16689: OR
16690: IFFALSE 16567
// if un then
16692: LD_VAR 0 3
16696: IFFALSE 16707
// RemoveUnit ( un ) ;
16698: LD_VAR 0 3
16702: PPUSH
16703: CALL_OW 64
// end ;
16707: PPOPN 3
16709: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16710: LD_EXP 62
16714: IFFALSE 16830
16716: GO 16718
16718: DISABLE
16719: LD_INT 0
16721: PPUSH
16722: PPUSH
16723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16724: LD_ADDR_VAR 0 2
16728: PUSH
16729: LD_INT 81
16731: PUSH
16732: LD_OWVAR 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 21
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16760: LD_STRING playComputer()
16762: PPUSH
16763: CALL_OW 559
// if not tmp then
16767: LD_VAR 0 2
16771: NOT
16772: IFFALSE 16776
// exit ;
16774: GO 16830
// for i in tmp do
16776: LD_ADDR_VAR 0 1
16780: PUSH
16781: LD_VAR 0 2
16785: PUSH
16786: FOR_IN
16787: IFFALSE 16828
// for j := 1 to 4 do
16789: LD_ADDR_VAR 0 3
16793: PUSH
16794: DOUBLE
16795: LD_INT 1
16797: DEC
16798: ST_TO_ADDR
16799: LD_INT 4
16801: PUSH
16802: FOR_TO
16803: IFFALSE 16824
// SetSkill ( i , j , 10 ) ;
16805: LD_VAR 0 1
16809: PPUSH
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_INT 10
16817: PPUSH
16818: CALL_OW 237
16822: GO 16802
16824: POP
16825: POP
16826: GO 16786
16828: POP
16829: POP
// end ;
16830: PPOPN 3
16832: END
// every 0 0$1 trigger s30 do var i , tmp ;
16833: LD_EXP 63
16837: IFFALSE 16906
16839: GO 16841
16841: DISABLE
16842: LD_INT 0
16844: PPUSH
16845: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16846: LD_ADDR_VAR 0 2
16850: PUSH
16851: LD_INT 22
16853: PUSH
16854: LD_OWVAR 2
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 69
16867: ST_TO_ADDR
// if not tmp then
16868: LD_VAR 0 2
16872: NOT
16873: IFFALSE 16877
// exit ;
16875: GO 16906
// for i in tmp do
16877: LD_ADDR_VAR 0 1
16881: PUSH
16882: LD_VAR 0 2
16886: PUSH
16887: FOR_IN
16888: IFFALSE 16904
// SetLives ( i , 300 ) ;
16890: LD_VAR 0 1
16894: PPUSH
16895: LD_INT 300
16897: PPUSH
16898: CALL_OW 234
16902: GO 16887
16904: POP
16905: POP
// end ;
16906: PPOPN 2
16908: END
// every 0 0$1 trigger s60 do var i , tmp ;
16909: LD_EXP 64
16913: IFFALSE 16982
16915: GO 16917
16917: DISABLE
16918: LD_INT 0
16920: PPUSH
16921: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16922: LD_ADDR_VAR 0 2
16926: PUSH
16927: LD_INT 22
16929: PUSH
16930: LD_OWVAR 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PPUSH
16939: CALL_OW 69
16943: ST_TO_ADDR
// if not tmp then
16944: LD_VAR 0 2
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 16982
// for i in tmp do
16953: LD_ADDR_VAR 0 1
16957: PUSH
16958: LD_VAR 0 2
16962: PUSH
16963: FOR_IN
16964: IFFALSE 16980
// SetLives ( i , 600 ) ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_INT 600
16973: PPUSH
16974: CALL_OW 234
16978: GO 16963
16980: POP
16981: POP
// end ;
16982: PPOPN 2
16984: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16985: LD_INT 0
16987: PPUSH
// case cmd of 301 :
16988: LD_VAR 0 1
16992: PUSH
16993: LD_INT 301
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17033
17001: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17002: LD_VAR 0 6
17006: PPUSH
17007: LD_VAR 0 7
17011: PPUSH
17012: LD_VAR 0 8
17016: PPUSH
17017: LD_VAR 0 4
17021: PPUSH
17022: LD_VAR 0 5
17026: PPUSH
17027: CALL 18242 0 5
17031: GO 17154
17033: LD_INT 302
17035: DOUBLE
17036: EQUAL
17037: IFTRUE 17041
17039: GO 17078
17041: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17042: LD_VAR 0 6
17046: PPUSH
17047: LD_VAR 0 7
17051: PPUSH
17052: LD_VAR 0 8
17056: PPUSH
17057: LD_VAR 0 9
17061: PPUSH
17062: LD_VAR 0 4
17066: PPUSH
17067: LD_VAR 0 5
17071: PPUSH
17072: CALL 18333 0 6
17076: GO 17154
17078: LD_INT 303
17080: DOUBLE
17081: EQUAL
17082: IFTRUE 17086
17084: GO 17123
17086: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17087: LD_VAR 0 6
17091: PPUSH
17092: LD_VAR 0 7
17096: PPUSH
17097: LD_VAR 0 8
17101: PPUSH
17102: LD_VAR 0 9
17106: PPUSH
17107: LD_VAR 0 4
17111: PPUSH
17112: LD_VAR 0 5
17116: PPUSH
17117: CALL 17159 0 6
17121: GO 17154
17123: LD_INT 304
17125: DOUBLE
17126: EQUAL
17127: IFTRUE 17131
17129: GO 17153
17131: POP
// hHackTeleport ( unit , x , y ) ; end ;
17132: LD_VAR 0 2
17136: PPUSH
17137: LD_VAR 0 4
17141: PPUSH
17142: LD_VAR 0 5
17146: PPUSH
17147: CALL 18926 0 3
17151: GO 17154
17153: POP
// end ;
17154: LD_VAR 0 12
17158: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17163: LD_VAR 0 1
17167: PUSH
17168: LD_INT 1
17170: LESS
17171: PUSH
17172: LD_VAR 0 1
17176: PUSH
17177: LD_INT 3
17179: GREATER
17180: OR
17181: PUSH
17182: LD_VAR 0 5
17186: PPUSH
17187: LD_VAR 0 6
17191: PPUSH
17192: CALL_OW 428
17196: OR
17197: IFFALSE 17201
// exit ;
17199: GO 17929
// uc_side := your_side ;
17201: LD_ADDR_OWVAR 20
17205: PUSH
17206: LD_OWVAR 2
17210: ST_TO_ADDR
// uc_nation := nation ;
17211: LD_ADDR_OWVAR 21
17215: PUSH
17216: LD_VAR 0 1
17220: ST_TO_ADDR
// bc_level = 1 ;
17221: LD_ADDR_OWVAR 43
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// case btype of 1 :
17229: LD_VAR 0 2
17233: PUSH
17234: LD_INT 1
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17253
17242: POP
// bc_type := b_depot ; 2 :
17243: LD_ADDR_OWVAR 42
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
17251: GO 17873
17253: LD_INT 2
17255: DOUBLE
17256: EQUAL
17257: IFTRUE 17261
17259: GO 17272
17261: POP
// bc_type := b_warehouse ; 3 :
17262: LD_ADDR_OWVAR 42
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
17270: GO 17873
17272: LD_INT 3
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17280
17278: GO 17291
17280: POP
// bc_type := b_lab ; 4 .. 9 :
17281: LD_ADDR_OWVAR 42
17285: PUSH
17286: LD_INT 6
17288: ST_TO_ADDR
17289: GO 17873
17291: LD_INT 4
17293: DOUBLE
17294: GREATEREQUAL
17295: IFFALSE 17303
17297: LD_INT 9
17299: DOUBLE
17300: LESSEQUAL
17301: IFTRUE 17305
17303: GO 17365
17305: POP
// begin bc_type := b_lab_half ;
17306: LD_ADDR_OWVAR 42
17310: PUSH
17311: LD_INT 7
17313: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17314: LD_ADDR_OWVAR 44
17318: PUSH
17319: LD_INT 10
17321: PUSH
17322: LD_INT 11
17324: PUSH
17325: LD_INT 12
17327: PUSH
17328: LD_INT 15
17330: PUSH
17331: LD_INT 14
17333: PUSH
17334: LD_INT 13
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: LD_VAR 0 2
17349: PUSH
17350: LD_INT 3
17352: MINUS
17353: ARRAY
17354: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17355: LD_ADDR_OWVAR 45
17359: PUSH
17360: LD_INT 9
17362: ST_TO_ADDR
// end ; 10 .. 13 :
17363: GO 17873
17365: LD_INT 10
17367: DOUBLE
17368: GREATEREQUAL
17369: IFFALSE 17377
17371: LD_INT 13
17373: DOUBLE
17374: LESSEQUAL
17375: IFTRUE 17379
17377: GO 17456
17379: POP
// begin bc_type := b_lab_full ;
17380: LD_ADDR_OWVAR 42
17384: PUSH
17385: LD_INT 8
17387: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17388: LD_ADDR_OWVAR 44
17392: PUSH
17393: LD_INT 10
17395: PUSH
17396: LD_INT 12
17398: PUSH
17399: LD_INT 14
17401: PUSH
17402: LD_INT 13
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: PUSH
17411: LD_VAR 0 2
17415: PUSH
17416: LD_INT 9
17418: MINUS
17419: ARRAY
17420: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17421: LD_ADDR_OWVAR 45
17425: PUSH
17426: LD_INT 11
17428: PUSH
17429: LD_INT 15
17431: PUSH
17432: LD_INT 12
17434: PUSH
17435: LD_INT 15
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_VAR 0 2
17448: PUSH
17449: LD_INT 9
17451: MINUS
17452: ARRAY
17453: ST_TO_ADDR
// end ; 14 :
17454: GO 17873
17456: LD_INT 14
17458: DOUBLE
17459: EQUAL
17460: IFTRUE 17464
17462: GO 17475
17464: POP
// bc_type := b_workshop ; 15 :
17465: LD_ADDR_OWVAR 42
17469: PUSH
17470: LD_INT 2
17472: ST_TO_ADDR
17473: GO 17873
17475: LD_INT 15
17477: DOUBLE
17478: EQUAL
17479: IFTRUE 17483
17481: GO 17494
17483: POP
// bc_type := b_factory ; 16 :
17484: LD_ADDR_OWVAR 42
17488: PUSH
17489: LD_INT 3
17491: ST_TO_ADDR
17492: GO 17873
17494: LD_INT 16
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17513
17502: POP
// bc_type := b_ext_gun ; 17 :
17503: LD_ADDR_OWVAR 42
17507: PUSH
17508: LD_INT 17
17510: ST_TO_ADDR
17511: GO 17873
17513: LD_INT 17
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17521
17519: GO 17549
17521: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17522: LD_ADDR_OWVAR 42
17526: PUSH
17527: LD_INT 19
17529: PUSH
17530: LD_INT 23
17532: PUSH
17533: LD_INT 19
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_VAR 0 1
17545: ARRAY
17546: ST_TO_ADDR
17547: GO 17873
17549: LD_INT 18
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17568
17557: POP
// bc_type := b_ext_radar ; 19 :
17558: LD_ADDR_OWVAR 42
17562: PUSH
17563: LD_INT 20
17565: ST_TO_ADDR
17566: GO 17873
17568: LD_INT 19
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17587
17576: POP
// bc_type := b_ext_radio ; 20 :
17577: LD_ADDR_OWVAR 42
17581: PUSH
17582: LD_INT 22
17584: ST_TO_ADDR
17585: GO 17873
17587: LD_INT 20
17589: DOUBLE
17590: EQUAL
17591: IFTRUE 17595
17593: GO 17606
17595: POP
// bc_type := b_ext_siberium ; 21 :
17596: LD_ADDR_OWVAR 42
17600: PUSH
17601: LD_INT 21
17603: ST_TO_ADDR
17604: GO 17873
17606: LD_INT 21
17608: DOUBLE
17609: EQUAL
17610: IFTRUE 17614
17612: GO 17625
17614: POP
// bc_type := b_ext_computer ; 22 :
17615: LD_ADDR_OWVAR 42
17619: PUSH
17620: LD_INT 24
17622: ST_TO_ADDR
17623: GO 17873
17625: LD_INT 22
17627: DOUBLE
17628: EQUAL
17629: IFTRUE 17633
17631: GO 17644
17633: POP
// bc_type := b_ext_track ; 23 :
17634: LD_ADDR_OWVAR 42
17638: PUSH
17639: LD_INT 16
17641: ST_TO_ADDR
17642: GO 17873
17644: LD_INT 23
17646: DOUBLE
17647: EQUAL
17648: IFTRUE 17652
17650: GO 17663
17652: POP
// bc_type := b_ext_laser ; 24 :
17653: LD_ADDR_OWVAR 42
17657: PUSH
17658: LD_INT 25
17660: ST_TO_ADDR
17661: GO 17873
17663: LD_INT 24
17665: DOUBLE
17666: EQUAL
17667: IFTRUE 17671
17669: GO 17682
17671: POP
// bc_type := b_control_tower ; 25 :
17672: LD_ADDR_OWVAR 42
17676: PUSH
17677: LD_INT 36
17679: ST_TO_ADDR
17680: GO 17873
17682: LD_INT 25
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17701
17690: POP
// bc_type := b_breastwork ; 26 :
17691: LD_ADDR_OWVAR 42
17695: PUSH
17696: LD_INT 31
17698: ST_TO_ADDR
17699: GO 17873
17701: LD_INT 26
17703: DOUBLE
17704: EQUAL
17705: IFTRUE 17709
17707: GO 17720
17709: POP
// bc_type := b_bunker ; 27 :
17710: LD_ADDR_OWVAR 42
17714: PUSH
17715: LD_INT 32
17717: ST_TO_ADDR
17718: GO 17873
17720: LD_INT 27
17722: DOUBLE
17723: EQUAL
17724: IFTRUE 17728
17726: GO 17739
17728: POP
// bc_type := b_turret ; 28 :
17729: LD_ADDR_OWVAR 42
17733: PUSH
17734: LD_INT 33
17736: ST_TO_ADDR
17737: GO 17873
17739: LD_INT 28
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17758
17747: POP
// bc_type := b_armoury ; 29 :
17748: LD_ADDR_OWVAR 42
17752: PUSH
17753: LD_INT 4
17755: ST_TO_ADDR
17756: GO 17873
17758: LD_INT 29
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17777
17766: POP
// bc_type := b_barracks ; 30 :
17767: LD_ADDR_OWVAR 42
17771: PUSH
17772: LD_INT 5
17774: ST_TO_ADDR
17775: GO 17873
17777: LD_INT 30
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17796
17785: POP
// bc_type := b_solar_power ; 31 :
17786: LD_ADDR_OWVAR 42
17790: PUSH
17791: LD_INT 27
17793: ST_TO_ADDR
17794: GO 17873
17796: LD_INT 31
17798: DOUBLE
17799: EQUAL
17800: IFTRUE 17804
17802: GO 17815
17804: POP
// bc_type := b_oil_power ; 32 :
17805: LD_ADDR_OWVAR 42
17809: PUSH
17810: LD_INT 26
17812: ST_TO_ADDR
17813: GO 17873
17815: LD_INT 32
17817: DOUBLE
17818: EQUAL
17819: IFTRUE 17823
17821: GO 17834
17823: POP
// bc_type := b_siberite_power ; 33 :
17824: LD_ADDR_OWVAR 42
17828: PUSH
17829: LD_INT 28
17831: ST_TO_ADDR
17832: GO 17873
17834: LD_INT 33
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17853
17842: POP
// bc_type := b_oil_mine ; 34 :
17843: LD_ADDR_OWVAR 42
17847: PUSH
17848: LD_INT 29
17850: ST_TO_ADDR
17851: GO 17873
17853: LD_INT 34
17855: DOUBLE
17856: EQUAL
17857: IFTRUE 17861
17859: GO 17872
17861: POP
// bc_type := b_siberite_mine ; end ;
17862: LD_ADDR_OWVAR 42
17866: PUSH
17867: LD_INT 30
17869: ST_TO_ADDR
17870: GO 17873
17872: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17873: LD_ADDR_VAR 0 8
17877: PUSH
17878: LD_VAR 0 5
17882: PPUSH
17883: LD_VAR 0 6
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: CALL_OW 47
17897: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17898: LD_OWVAR 42
17902: PUSH
17903: LD_INT 32
17905: PUSH
17906: LD_INT 33
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: IFFALSE 17929
// PlaceWeaponTurret ( b , weapon ) ;
17915: LD_VAR 0 8
17919: PPUSH
17920: LD_VAR 0 4
17924: PPUSH
17925: CALL_OW 431
// end ;
17929: LD_VAR 0 7
17933: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17934: LD_INT 0
17936: PPUSH
17937: PPUSH
17938: PPUSH
17939: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17940: LD_ADDR_VAR 0 4
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_OWVAR 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 30
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 30
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 69
17993: ST_TO_ADDR
// if not tmp then
17994: LD_VAR 0 4
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18062
// for i in tmp do
18003: LD_ADDR_VAR 0 2
18007: PUSH
18008: LD_VAR 0 4
18012: PUSH
18013: FOR_IN
18014: IFFALSE 18060
// for j = 1 to 3 do
18016: LD_ADDR_VAR 0 3
18020: PUSH
18021: DOUBLE
18022: LD_INT 1
18024: DEC
18025: ST_TO_ADDR
18026: LD_INT 3
18028: PUSH
18029: FOR_TO
18030: IFFALSE 18056
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18032: LD_VAR 0 2
18036: PPUSH
18037: CALL_OW 274
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 99999
18049: PPUSH
18050: CALL_OW 277
18054: GO 18029
18056: POP
18057: POP
18058: GO 18013
18060: POP
18061: POP
// end ;
18062: LD_VAR 0 1
18066: RET
// export function hHackSetLevel10 ; var i , j ; begin
18067: LD_INT 0
18069: PPUSH
18070: PPUSH
18071: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_INT 21
18079: PUSH
18080: LD_INT 1
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PPUSH
18087: CALL_OW 69
18091: PUSH
18092: FOR_IN
18093: IFFALSE 18145
// if IsSelected ( i ) then
18095: LD_VAR 0 2
18099: PPUSH
18100: CALL_OW 306
18104: IFFALSE 18143
// begin for j := 1 to 4 do
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: DOUBLE
18112: LD_INT 1
18114: DEC
18115: ST_TO_ADDR
18116: LD_INT 4
18118: PUSH
18119: FOR_TO
18120: IFFALSE 18141
// SetSkill ( i , j , 10 ) ;
18122: LD_VAR 0 2
18126: PPUSH
18127: LD_VAR 0 3
18131: PPUSH
18132: LD_INT 10
18134: PPUSH
18135: CALL_OW 237
18139: GO 18119
18141: POP
18142: POP
// end ;
18143: GO 18092
18145: POP
18146: POP
// end ;
18147: LD_VAR 0 1
18151: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18152: LD_INT 0
18154: PPUSH
18155: PPUSH
18156: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18157: LD_ADDR_VAR 0 2
18161: PUSH
18162: LD_INT 22
18164: PUSH
18165: LD_OWVAR 2
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PPUSH
18188: CALL_OW 69
18192: PUSH
18193: FOR_IN
18194: IFFALSE 18235
// begin for j := 1 to 4 do
18196: LD_ADDR_VAR 0 3
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_INT 4
18208: PUSH
18209: FOR_TO
18210: IFFALSE 18231
// SetSkill ( i , j , 10 ) ;
18212: LD_VAR 0 2
18216: PPUSH
18217: LD_VAR 0 3
18221: PPUSH
18222: LD_INT 10
18224: PPUSH
18225: CALL_OW 237
18229: GO 18209
18231: POP
18232: POP
// end ;
18233: GO 18193
18235: POP
18236: POP
// end ;
18237: LD_VAR 0 1
18241: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18242: LD_INT 0
18244: PPUSH
// uc_side := your_side ;
18245: LD_ADDR_OWVAR 20
18249: PUSH
18250: LD_OWVAR 2
18254: ST_TO_ADDR
// uc_nation := nation ;
18255: LD_ADDR_OWVAR 21
18259: PUSH
18260: LD_VAR 0 1
18264: ST_TO_ADDR
// InitHc ;
18265: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18269: LD_INT 0
18271: PPUSH
18272: LD_VAR 0 2
18276: PPUSH
18277: LD_VAR 0 3
18281: PPUSH
18282: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18286: LD_VAR 0 4
18290: PPUSH
18291: LD_VAR 0 5
18295: PPUSH
18296: CALL_OW 428
18300: PUSH
18301: LD_INT 0
18303: EQUAL
18304: IFFALSE 18328
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18306: CALL_OW 44
18310: PPUSH
18311: LD_VAR 0 4
18315: PPUSH
18316: LD_VAR 0 5
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: CALL_OW 48
// end ;
18328: LD_VAR 0 6
18332: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18333: LD_INT 0
18335: PPUSH
18336: PPUSH
// uc_side := your_side ;
18337: LD_ADDR_OWVAR 20
18341: PUSH
18342: LD_OWVAR 2
18346: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18347: LD_VAR 0 1
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: LD_INT 4
18363: PUSH
18364: LD_INT 5
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: IN
18374: IFFALSE 18386
// uc_nation := nation_american else
18376: LD_ADDR_OWVAR 21
18380: PUSH
18381: LD_INT 1
18383: ST_TO_ADDR
18384: GO 18429
// if chassis in [ 11 , 12 , 13 , 14 ] then
18386: LD_VAR 0 1
18390: PUSH
18391: LD_INT 11
18393: PUSH
18394: LD_INT 12
18396: PUSH
18397: LD_INT 13
18399: PUSH
18400: LD_INT 14
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: IN
18409: IFFALSE 18421
// uc_nation := nation_arabian else
18411: LD_ADDR_OWVAR 21
18415: PUSH
18416: LD_INT 2
18418: ST_TO_ADDR
18419: GO 18429
// uc_nation := nation_russian ;
18421: LD_ADDR_OWVAR 21
18425: PUSH
18426: LD_INT 3
18428: ST_TO_ADDR
// vc_chassis := chassis ;
18429: LD_ADDR_OWVAR 37
18433: PUSH
18434: LD_VAR 0 1
18438: ST_TO_ADDR
// vc_engine := engine ;
18439: LD_ADDR_OWVAR 39
18443: PUSH
18444: LD_VAR 0 2
18448: ST_TO_ADDR
// vc_control := control ;
18449: LD_ADDR_OWVAR 38
18453: PUSH
18454: LD_VAR 0 3
18458: ST_TO_ADDR
// vc_weapon := weapon ;
18459: LD_ADDR_OWVAR 40
18463: PUSH
18464: LD_VAR 0 4
18468: ST_TO_ADDR
// un := CreateVehicle ;
18469: LD_ADDR_VAR 0 8
18473: PUSH
18474: CALL_OW 45
18478: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18479: LD_VAR 0 8
18483: PPUSH
18484: LD_INT 0
18486: PPUSH
18487: LD_INT 5
18489: PPUSH
18490: CALL_OW 12
18494: PPUSH
18495: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18499: LD_VAR 0 8
18503: PPUSH
18504: LD_VAR 0 5
18508: PPUSH
18509: LD_VAR 0 6
18513: PPUSH
18514: LD_INT 1
18516: PPUSH
18517: CALL_OW 48
// end ;
18521: LD_VAR 0 7
18525: RET
// export hInvincible ; every 1 do
18526: GO 18528
18528: DISABLE
// hInvincible := [ ] ;
18529: LD_ADDR_EXP 65
18533: PUSH
18534: EMPTY
18535: ST_TO_ADDR
18536: END
// every 10 do var i ;
18537: GO 18539
18539: DISABLE
18540: LD_INT 0
18542: PPUSH
// begin enable ;
18543: ENABLE
// if not hInvincible then
18544: LD_EXP 65
18548: NOT
18549: IFFALSE 18553
// exit ;
18551: GO 18597
// for i in hInvincible do
18553: LD_ADDR_VAR 0 1
18557: PUSH
18558: LD_EXP 65
18562: PUSH
18563: FOR_IN
18564: IFFALSE 18595
// if GetLives ( i ) < 1000 then
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 256
18575: PUSH
18576: LD_INT 1000
18578: LESS
18579: IFFALSE 18593
// SetLives ( i , 1000 ) ;
18581: LD_VAR 0 1
18585: PPUSH
18586: LD_INT 1000
18588: PPUSH
18589: CALL_OW 234
18593: GO 18563
18595: POP
18596: POP
// end ;
18597: PPOPN 1
18599: END
// export function hHackInvincible ; var i ; begin
18600: LD_INT 0
18602: PPUSH
18603: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18604: LD_ADDR_VAR 0 2
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 21
18614: PUSH
18615: LD_INT 1
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 69
18641: PUSH
18642: FOR_IN
18643: IFFALSE 18704
// if IsSelected ( i ) then
18645: LD_VAR 0 2
18649: PPUSH
18650: CALL_OW 306
18654: IFFALSE 18702
// begin if i in hInvincible then
18656: LD_VAR 0 2
18660: PUSH
18661: LD_EXP 65
18665: IN
18666: IFFALSE 18686
// hInvincible := hInvincible diff i else
18668: LD_ADDR_EXP 65
18672: PUSH
18673: LD_EXP 65
18677: PUSH
18678: LD_VAR 0 2
18682: DIFF
18683: ST_TO_ADDR
18684: GO 18702
// hInvincible := hInvincible union i ;
18686: LD_ADDR_EXP 65
18690: PUSH
18691: LD_EXP 65
18695: PUSH
18696: LD_VAR 0 2
18700: UNION
18701: ST_TO_ADDR
// end ;
18702: GO 18642
18704: POP
18705: POP
// end ;
18706: LD_VAR 0 1
18710: RET
// export function hHackInvisible ; var i , j ; begin
18711: LD_INT 0
18713: PPUSH
18714: PPUSH
18715: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18716: LD_ADDR_VAR 0 2
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: CALL_OW 69
18735: PUSH
18736: FOR_IN
18737: IFFALSE 18761
// if IsSelected ( i ) then
18739: LD_VAR 0 2
18743: PPUSH
18744: CALL_OW 306
18748: IFFALSE 18759
// ComForceInvisible ( i ) ;
18750: LD_VAR 0 2
18754: PPUSH
18755: CALL_OW 496
18759: GO 18736
18761: POP
18762: POP
// end ;
18763: LD_VAR 0 1
18767: RET
// export function hHackChangeYourSide ; begin
18768: LD_INT 0
18770: PPUSH
// if your_side = 8 then
18771: LD_OWVAR 2
18775: PUSH
18776: LD_INT 8
18778: EQUAL
18779: IFFALSE 18791
// your_side := 0 else
18781: LD_ADDR_OWVAR 2
18785: PUSH
18786: LD_INT 0
18788: ST_TO_ADDR
18789: GO 18805
// your_side := your_side + 1 ;
18791: LD_ADDR_OWVAR 2
18795: PUSH
18796: LD_OWVAR 2
18800: PUSH
18801: LD_INT 1
18803: PLUS
18804: ST_TO_ADDR
// end ;
18805: LD_VAR 0 1
18809: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18810: LD_INT 0
18812: PPUSH
18813: PPUSH
18814: PPUSH
// for i in all_units do
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_OWVAR 3
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18904
// if IsSelected ( i ) then
18828: LD_VAR 0 2
18832: PPUSH
18833: CALL_OW 306
18837: IFFALSE 18902
// begin j := GetSide ( i ) ;
18839: LD_ADDR_VAR 0 3
18843: PUSH
18844: LD_VAR 0 2
18848: PPUSH
18849: CALL_OW 255
18853: ST_TO_ADDR
// if j = 8 then
18854: LD_VAR 0 3
18858: PUSH
18859: LD_INT 8
18861: EQUAL
18862: IFFALSE 18874
// j := 0 else
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 0
18871: ST_TO_ADDR
18872: GO 18888
// j := j + 1 ;
18874: LD_ADDR_VAR 0 3
18878: PUSH
18879: LD_VAR 0 3
18883: PUSH
18884: LD_INT 1
18886: PLUS
18887: ST_TO_ADDR
// SetSide ( i , j ) ;
18888: LD_VAR 0 2
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: CALL_OW 235
// end ;
18902: GO 18825
18904: POP
18905: POP
// end ;
18906: LD_VAR 0 1
18910: RET
// export function hHackFog ; begin
18911: LD_INT 0
18913: PPUSH
// FogOff ( true ) ;
18914: LD_INT 1
18916: PPUSH
18917: CALL_OW 344
// end ;
18921: LD_VAR 0 1
18925: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18926: LD_INT 0
18928: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: LD_VAR 0 2
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: CALL_OW 483
// CenterOnXY ( x , y ) ;
18954: LD_VAR 0 2
18958: PPUSH
18959: LD_VAR 0 3
18963: PPUSH
18964: CALL_OW 84
// end ;
18968: LD_VAR 0 4
18972: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18973: LD_INT 0
18975: PPUSH
18976: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18977: LD_VAR 0 1
18981: NOT
18982: PUSH
18983: LD_VAR 0 2
18987: PPUSH
18988: LD_VAR 0 3
18992: PPUSH
18993: CALL_OW 488
18997: NOT
18998: OR
18999: PUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 266
19009: PUSH
19010: LD_INT 3
19012: NONEQUAL
19013: PUSH
19014: LD_VAR 0 1
19018: PPUSH
19019: CALL_OW 247
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: NOT
19028: AND
19029: OR
19030: IFFALSE 19034
// exit ;
19032: GO 19183
// if GetType ( factory ) = unit_human then
19034: LD_VAR 0 1
19038: PPUSH
19039: CALL_OW 247
19043: PUSH
19044: LD_INT 1
19046: EQUAL
19047: IFFALSE 19064
// factory := IsInUnit ( factory ) ;
19049: LD_ADDR_VAR 0 1
19053: PUSH
19054: LD_VAR 0 1
19058: PPUSH
19059: CALL_OW 310
19063: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 266
19073: PUSH
19074: LD_INT 3
19076: NONEQUAL
19077: IFFALSE 19081
// exit ;
19079: GO 19183
// if HexInfo ( x , y ) = factory then
19081: LD_VAR 0 2
19085: PPUSH
19086: LD_VAR 0 3
19090: PPUSH
19091: CALL_OW 428
19095: PUSH
19096: LD_VAR 0 1
19100: EQUAL
19101: IFFALSE 19128
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19103: LD_ADDR_EXP 66
19107: PUSH
19108: LD_EXP 66
19112: PPUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: LD_INT 0
19120: PPUSH
19121: CALL_OW 1
19125: ST_TO_ADDR
19126: GO 19179
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19128: LD_ADDR_EXP 66
19132: PUSH
19133: LD_EXP 66
19137: PPUSH
19138: LD_VAR 0 1
19142: PPUSH
19143: LD_VAR 0 1
19147: PPUSH
19148: CALL_OW 255
19152: PUSH
19153: LD_VAR 0 1
19157: PUSH
19158: LD_VAR 0 2
19162: PUSH
19163: LD_VAR 0 3
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 1
19178: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19179: CALL 19188 0 0
// end ;
19183: LD_VAR 0 4
19187: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
19192: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19193: LD_STRING resetFactoryWaypoint();
19195: PPUSH
19196: CALL_OW 559
// if factoryWaypoints then
19200: LD_EXP 66
19204: IFFALSE 19330
// begin list := PrepareArray ( factoryWaypoints ) ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_EXP 66
19215: PPUSH
19216: CALL 66627 0 1
19220: ST_TO_ADDR
// for i := 1 to list do
19221: LD_ADDR_VAR 0 2
19225: PUSH
19226: DOUBLE
19227: LD_INT 1
19229: DEC
19230: ST_TO_ADDR
19231: LD_VAR 0 3
19235: PUSH
19236: FOR_TO
19237: IFFALSE 19328
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19239: LD_STRING setFactoryWaypointXY(
19241: PUSH
19242: LD_VAR 0 3
19246: PUSH
19247: LD_VAR 0 2
19251: ARRAY
19252: PUSH
19253: LD_INT 1
19255: ARRAY
19256: STR
19257: PUSH
19258: LD_STRING ,
19260: STR
19261: PUSH
19262: LD_VAR 0 3
19266: PUSH
19267: LD_VAR 0 2
19271: ARRAY
19272: PUSH
19273: LD_INT 2
19275: ARRAY
19276: STR
19277: PUSH
19278: LD_STRING ,
19280: STR
19281: PUSH
19282: LD_VAR 0 3
19286: PUSH
19287: LD_VAR 0 2
19291: ARRAY
19292: PUSH
19293: LD_INT 3
19295: ARRAY
19296: STR
19297: PUSH
19298: LD_STRING ,
19300: STR
19301: PUSH
19302: LD_VAR 0 3
19306: PUSH
19307: LD_VAR 0 2
19311: ARRAY
19312: PUSH
19313: LD_INT 4
19315: ARRAY
19316: STR
19317: PUSH
19318: LD_STRING )
19320: STR
19321: PPUSH
19322: CALL_OW 559
19326: GO 19236
19328: POP
19329: POP
// end ; end ;
19330: LD_VAR 0 1
19334: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19335: LD_INT 0
19337: PPUSH
// if HexInfo ( x , y ) = warehouse then
19338: LD_VAR 0 2
19342: PPUSH
19343: LD_VAR 0 3
19347: PPUSH
19348: CALL_OW 428
19352: PUSH
19353: LD_VAR 0 1
19357: EQUAL
19358: IFFALSE 19385
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19360: LD_ADDR_EXP 67
19364: PUSH
19365: LD_EXP 67
19369: PPUSH
19370: LD_VAR 0 1
19374: PPUSH
19375: LD_INT 0
19377: PPUSH
19378: CALL_OW 1
19382: ST_TO_ADDR
19383: GO 19436
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19385: LD_ADDR_EXP 67
19389: PUSH
19390: LD_EXP 67
19394: PPUSH
19395: LD_VAR 0 1
19399: PPUSH
19400: LD_VAR 0 1
19404: PPUSH
19405: CALL_OW 255
19409: PUSH
19410: LD_VAR 0 1
19414: PUSH
19415: LD_VAR 0 2
19419: PUSH
19420: LD_VAR 0 3
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: PPUSH
19431: CALL_OW 1
19435: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19436: CALL 19445 0 0
// end ;
19440: LD_VAR 0 4
19444: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19445: LD_INT 0
19447: PPUSH
19448: PPUSH
19449: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19450: LD_STRING resetWarehouseGatheringPoints();
19452: PPUSH
19453: CALL_OW 559
// if warehouseGatheringPoints then
19457: LD_EXP 67
19461: IFFALSE 19587
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19463: LD_ADDR_VAR 0 3
19467: PUSH
19468: LD_EXP 67
19472: PPUSH
19473: CALL 66627 0 1
19477: ST_TO_ADDR
// for i := 1 to list do
19478: LD_ADDR_VAR 0 2
19482: PUSH
19483: DOUBLE
19484: LD_INT 1
19486: DEC
19487: ST_TO_ADDR
19488: LD_VAR 0 3
19492: PUSH
19493: FOR_TO
19494: IFFALSE 19585
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19496: LD_STRING setWarehouseGatheringPointXY(
19498: PUSH
19499: LD_VAR 0 3
19503: PUSH
19504: LD_VAR 0 2
19508: ARRAY
19509: PUSH
19510: LD_INT 1
19512: ARRAY
19513: STR
19514: PUSH
19515: LD_STRING ,
19517: STR
19518: PUSH
19519: LD_VAR 0 3
19523: PUSH
19524: LD_VAR 0 2
19528: ARRAY
19529: PUSH
19530: LD_INT 2
19532: ARRAY
19533: STR
19534: PUSH
19535: LD_STRING ,
19537: STR
19538: PUSH
19539: LD_VAR 0 3
19543: PUSH
19544: LD_VAR 0 2
19548: ARRAY
19549: PUSH
19550: LD_INT 3
19552: ARRAY
19553: STR
19554: PUSH
19555: LD_STRING ,
19557: STR
19558: PUSH
19559: LD_VAR 0 3
19563: PUSH
19564: LD_VAR 0 2
19568: ARRAY
19569: PUSH
19570: LD_INT 4
19572: ARRAY
19573: STR
19574: PUSH
19575: LD_STRING )
19577: STR
19578: PPUSH
19579: CALL_OW 559
19583: GO 19493
19585: POP
19586: POP
// end ; end ;
19587: LD_VAR 0 1
19591: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19592: LD_EXP 67
19596: IFFALSE 20281
19598: GO 19600
19600: DISABLE
19601: LD_INT 0
19603: PPUSH
19604: PPUSH
19605: PPUSH
19606: PPUSH
19607: PPUSH
19608: PPUSH
19609: PPUSH
19610: PPUSH
19611: PPUSH
// begin enable ;
19612: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_EXP 67
19622: PPUSH
19623: CALL 66627 0 1
19627: ST_TO_ADDR
// if not list then
19628: LD_VAR 0 3
19632: NOT
19633: IFFALSE 19637
// exit ;
19635: GO 20281
// for i := 1 to list do
19637: LD_ADDR_VAR 0 1
19641: PUSH
19642: DOUBLE
19643: LD_INT 1
19645: DEC
19646: ST_TO_ADDR
19647: LD_VAR 0 3
19651: PUSH
19652: FOR_TO
19653: IFFALSE 20279
// begin depot := list [ i ] [ 2 ] ;
19655: LD_ADDR_VAR 0 8
19659: PUSH
19660: LD_VAR 0 3
19664: PUSH
19665: LD_VAR 0 1
19669: ARRAY
19670: PUSH
19671: LD_INT 2
19673: ARRAY
19674: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19675: LD_ADDR_VAR 0 5
19679: PUSH
19680: LD_VAR 0 3
19684: PUSH
19685: LD_VAR 0 1
19689: ARRAY
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19695: LD_VAR 0 8
19699: PPUSH
19700: CALL_OW 301
19704: PUSH
19705: LD_VAR 0 5
19709: PUSH
19710: LD_VAR 0 8
19714: PPUSH
19715: CALL_OW 255
19719: NONEQUAL
19720: OR
19721: IFFALSE 19750
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19723: LD_ADDR_EXP 67
19727: PUSH
19728: LD_EXP 67
19732: PPUSH
19733: LD_VAR 0 8
19737: PPUSH
19738: LD_INT 0
19740: PPUSH
19741: CALL_OW 1
19745: ST_TO_ADDR
// exit ;
19746: POP
19747: POP
19748: GO 20281
// end ; x := list [ i ] [ 3 ] ;
19750: LD_ADDR_VAR 0 6
19754: PUSH
19755: LD_VAR 0 3
19759: PUSH
19760: LD_VAR 0 1
19764: ARRAY
19765: PUSH
19766: LD_INT 3
19768: ARRAY
19769: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19770: LD_ADDR_VAR 0 7
19774: PUSH
19775: LD_VAR 0 3
19779: PUSH
19780: LD_VAR 0 1
19784: ARRAY
19785: PUSH
19786: LD_INT 4
19788: ARRAY
19789: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19790: LD_ADDR_VAR 0 9
19794: PUSH
19795: LD_VAR 0 6
19799: PPUSH
19800: LD_VAR 0 7
19804: PPUSH
19805: LD_INT 16
19807: PPUSH
19808: CALL 65215 0 3
19812: ST_TO_ADDR
// if not cratesNearbyPoint then
19813: LD_VAR 0 9
19817: NOT
19818: IFFALSE 19824
// exit ;
19820: POP
19821: POP
19822: GO 20281
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19824: LD_ADDR_VAR 0 4
19828: PUSH
19829: LD_INT 22
19831: PUSH
19832: LD_VAR 0 5
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: LD_INT 60
19846: PUSH
19847: EMPTY
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 91
19856: PUSH
19857: LD_VAR 0 8
19861: PUSH
19862: LD_INT 6
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 25
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 25
19885: PUSH
19886: LD_INT 16
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: PPUSH
19904: CALL_OW 69
19908: PUSH
19909: LD_VAR 0 8
19913: PPUSH
19914: CALL_OW 313
19918: PPUSH
19919: LD_INT 3
19921: PUSH
19922: LD_INT 60
19924: PUSH
19925: EMPTY
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 25
19947: PUSH
19948: LD_INT 16
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL_OW 72
19968: UNION
19969: ST_TO_ADDR
// if tmp then
19970: LD_VAR 0 4
19974: IFFALSE 20054
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19976: LD_ADDR_VAR 0 4
19980: PUSH
19981: LD_VAR 0 4
19985: PPUSH
19986: LD_INT 3
19988: PPUSH
19989: CALL 63184 0 2
19993: ST_TO_ADDR
// for j in tmp do
19994: LD_ADDR_VAR 0 2
19998: PUSH
19999: LD_VAR 0 4
20003: PUSH
20004: FOR_IN
20005: IFFALSE 20048
// begin if IsInUnit ( j ) then
20007: LD_VAR 0 2
20011: PPUSH
20012: CALL_OW 310
20016: IFFALSE 20027
// ComExit ( j ) ;
20018: LD_VAR 0 2
20022: PPUSH
20023: CALL 63267 0 1
// AddComCollect ( j , x , y ) ;
20027: LD_VAR 0 2
20031: PPUSH
20032: LD_VAR 0 6
20036: PPUSH
20037: LD_VAR 0 7
20041: PPUSH
20042: CALL_OW 177
// end ;
20046: GO 20004
20048: POP
20049: POP
// exit ;
20050: POP
20051: POP
20052: GO 20281
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20054: LD_ADDR_VAR 0 4
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_VAR 0 5
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 91
20073: PUSH
20074: LD_VAR 0 8
20078: PUSH
20079: LD_INT 8
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: LD_INT 34
20092: PUSH
20093: LD_INT 12
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 34
20102: PUSH
20103: LD_INT 51
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 34
20112: PUSH
20113: LD_INT 32
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 34
20122: PUSH
20123: LD_INT 89
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: PPUSH
20142: CALL_OW 69
20146: ST_TO_ADDR
// if tmp then
20147: LD_VAR 0 4
20151: IFFALSE 20277
// begin for j in tmp do
20153: LD_ADDR_VAR 0 2
20157: PUSH
20158: LD_VAR 0 4
20162: PUSH
20163: FOR_IN
20164: IFFALSE 20275
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20166: LD_VAR 0 2
20170: PPUSH
20171: CALL_OW 262
20175: PUSH
20176: LD_INT 3
20178: EQUAL
20179: PUSH
20180: LD_VAR 0 2
20184: PPUSH
20185: CALL_OW 261
20189: PUSH
20190: LD_INT 20
20192: GREATER
20193: OR
20194: PUSH
20195: LD_VAR 0 2
20199: PPUSH
20200: CALL_OW 314
20204: NOT
20205: AND
20206: PUSH
20207: LD_VAR 0 2
20211: PPUSH
20212: CALL_OW 263
20216: PUSH
20217: LD_INT 1
20219: NONEQUAL
20220: PUSH
20221: LD_VAR 0 2
20225: PPUSH
20226: CALL_OW 311
20230: OR
20231: AND
20232: IFFALSE 20273
// begin ComCollect ( j , x , y ) ;
20234: LD_VAR 0 2
20238: PPUSH
20239: LD_VAR 0 6
20243: PPUSH
20244: LD_VAR 0 7
20248: PPUSH
20249: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20253: LD_VAR 0 2
20257: PPUSH
20258: LD_VAR 0 8
20262: PPUSH
20263: CALL_OW 172
// exit ;
20267: POP
20268: POP
20269: POP
20270: POP
20271: GO 20281
// end ;
20273: GO 20163
20275: POP
20276: POP
// end ; end ;
20277: GO 19652
20279: POP
20280: POP
// end ; end_of_file
20281: PPOPN 9
20283: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
20288: PPUSH
20289: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 264
20299: PUSH
20300: LD_INT 91
20302: EQUAL
20303: IFFALSE 20375
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20305: LD_INT 68
20307: PPUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: CALL_OW 255
20317: PPUSH
20318: CALL_OW 321
20322: PUSH
20323: LD_INT 2
20325: EQUAL
20326: IFFALSE 20338
// eff := 70 else
20328: LD_ADDR_VAR 0 4
20332: PUSH
20333: LD_INT 70
20335: ST_TO_ADDR
20336: GO 20346
// eff := 30 ;
20338: LD_ADDR_VAR 0 4
20342: PUSH
20343: LD_INT 30
20345: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20346: LD_VAR 0 1
20350: PPUSH
20351: CALL_OW 250
20355: PPUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL_OW 251
20365: PPUSH
20366: LD_VAR 0 4
20370: PPUSH
20371: CALL_OW 495
// end ; end ;
20375: LD_VAR 0 2
20379: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20380: LD_INT 0
20382: PPUSH
// end ;
20383: LD_VAR 0 4
20387: RET
// export function SOS_Command ( cmd ) ; begin
20388: LD_INT 0
20390: PPUSH
// end ;
20391: LD_VAR 0 2
20395: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20396: LD_INT 0
20398: PPUSH
// end ;
20399: LD_VAR 0 6
20403: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20404: LD_INT 0
20406: PPUSH
20407: PPUSH
// if not vehicle or not factory then
20408: LD_VAR 0 1
20412: NOT
20413: PUSH
20414: LD_VAR 0 2
20418: NOT
20419: OR
20420: IFFALSE 20424
// exit ;
20422: GO 20655
// if factoryWaypoints >= factory then
20424: LD_EXP 66
20428: PUSH
20429: LD_VAR 0 2
20433: GREATEREQUAL
20434: IFFALSE 20655
// if factoryWaypoints [ factory ] then
20436: LD_EXP 66
20440: PUSH
20441: LD_VAR 0 2
20445: ARRAY
20446: IFFALSE 20655
// begin if GetControl ( vehicle ) = control_manual then
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 263
20457: PUSH
20458: LD_INT 1
20460: EQUAL
20461: IFFALSE 20542
// begin driver := IsDrivenBy ( vehicle ) ;
20463: LD_ADDR_VAR 0 4
20467: PUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: CALL_OW 311
20477: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20478: LD_VAR 0 4
20482: PPUSH
20483: LD_EXP 66
20487: PUSH
20488: LD_VAR 0 2
20492: ARRAY
20493: PUSH
20494: LD_INT 3
20496: ARRAY
20497: PPUSH
20498: LD_EXP 66
20502: PUSH
20503: LD_VAR 0 2
20507: ARRAY
20508: PUSH
20509: LD_INT 4
20511: ARRAY
20512: PPUSH
20513: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20517: LD_VAR 0 4
20521: PPUSH
20522: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20526: LD_VAR 0 4
20530: PPUSH
20531: LD_VAR 0 2
20535: PPUSH
20536: CALL_OW 180
// end else
20540: GO 20655
// if GetControl ( vehicle ) = control_remote then
20542: LD_VAR 0 1
20546: PPUSH
20547: CALL_OW 263
20551: PUSH
20552: LD_INT 2
20554: EQUAL
20555: IFFALSE 20616
// begin wait ( 0 0$2 ) ;
20557: LD_INT 70
20559: PPUSH
20560: CALL_OW 67
// if Connect ( vehicle ) then
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL 33486 0 1
20573: IFFALSE 20614
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20575: LD_VAR 0 1
20579: PPUSH
20580: LD_EXP 66
20584: PUSH
20585: LD_VAR 0 2
20589: ARRAY
20590: PUSH
20591: LD_INT 3
20593: ARRAY
20594: PPUSH
20595: LD_EXP 66
20599: PUSH
20600: LD_VAR 0 2
20604: ARRAY
20605: PUSH
20606: LD_INT 4
20608: ARRAY
20609: PPUSH
20610: CALL_OW 171
// end else
20614: GO 20655
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20616: LD_VAR 0 1
20620: PPUSH
20621: LD_EXP 66
20625: PUSH
20626: LD_VAR 0 2
20630: ARRAY
20631: PUSH
20632: LD_INT 3
20634: ARRAY
20635: PPUSH
20636: LD_EXP 66
20640: PUSH
20641: LD_VAR 0 2
20645: ARRAY
20646: PUSH
20647: LD_INT 4
20649: ARRAY
20650: PPUSH
20651: CALL_OW 171
// end ; end ;
20655: LD_VAR 0 3
20659: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20660: LD_INT 0
20662: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20663: LD_VAR 0 1
20667: PUSH
20668: LD_INT 250
20670: EQUAL
20671: PUSH
20672: LD_VAR 0 2
20676: PPUSH
20677: CALL_OW 264
20681: PUSH
20682: LD_INT 81
20684: EQUAL
20685: AND
20686: IFFALSE 20707
// MinerPlaceMine ( unit , x , y ) ;
20688: LD_VAR 0 2
20692: PPUSH
20693: LD_VAR 0 4
20697: PPUSH
20698: LD_VAR 0 5
20702: PPUSH
20703: CALL 23697 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20707: LD_VAR 0 1
20711: PUSH
20712: LD_INT 251
20714: EQUAL
20715: PUSH
20716: LD_VAR 0 2
20720: PPUSH
20721: CALL_OW 264
20725: PUSH
20726: LD_INT 81
20728: EQUAL
20729: AND
20730: IFFALSE 20751
// MinerDetonateMine ( unit , x , y ) ;
20732: LD_VAR 0 2
20736: PPUSH
20737: LD_VAR 0 4
20741: PPUSH
20742: LD_VAR 0 5
20746: PPUSH
20747: CALL 23972 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20751: LD_VAR 0 1
20755: PUSH
20756: LD_INT 252
20758: EQUAL
20759: PUSH
20760: LD_VAR 0 2
20764: PPUSH
20765: CALL_OW 264
20769: PUSH
20770: LD_INT 81
20772: EQUAL
20773: AND
20774: IFFALSE 20795
// MinerCreateMinefield ( unit , x , y ) ;
20776: LD_VAR 0 2
20780: PPUSH
20781: LD_VAR 0 4
20785: PPUSH
20786: LD_VAR 0 5
20790: PPUSH
20791: CALL 24389 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20795: LD_VAR 0 1
20799: PUSH
20800: LD_INT 253
20802: EQUAL
20803: PUSH
20804: LD_VAR 0 2
20808: PPUSH
20809: CALL_OW 257
20813: PUSH
20814: LD_INT 5
20816: EQUAL
20817: AND
20818: IFFALSE 20839
// ComBinocular ( unit , x , y ) ;
20820: LD_VAR 0 2
20824: PPUSH
20825: LD_VAR 0 4
20829: PPUSH
20830: LD_VAR 0 5
20834: PPUSH
20835: CALL 24758 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20839: LD_VAR 0 1
20843: PUSH
20844: LD_INT 254
20846: EQUAL
20847: PUSH
20848: LD_VAR 0 2
20852: PPUSH
20853: CALL_OW 264
20857: PUSH
20858: LD_INT 99
20860: EQUAL
20861: AND
20862: PUSH
20863: LD_VAR 0 3
20867: PPUSH
20868: CALL_OW 263
20872: PUSH
20873: LD_INT 3
20875: EQUAL
20876: AND
20877: IFFALSE 20893
// HackDestroyVehicle ( unit , selectedUnit ) ;
20879: LD_VAR 0 2
20883: PPUSH
20884: LD_VAR 0 3
20888: PPUSH
20889: CALL 23061 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20893: LD_VAR 0 1
20897: PUSH
20898: LD_INT 255
20900: EQUAL
20901: PUSH
20902: LD_VAR 0 2
20906: PPUSH
20907: CALL_OW 264
20911: PUSH
20912: LD_INT 14
20914: PUSH
20915: LD_INT 53
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: IN
20922: AND
20923: PUSH
20924: LD_VAR 0 4
20928: PPUSH
20929: LD_VAR 0 5
20933: PPUSH
20934: CALL_OW 488
20938: AND
20939: IFFALSE 20963
// CutTreeXYR ( unit , x , y , 12 ) ;
20941: LD_VAR 0 2
20945: PPUSH
20946: LD_VAR 0 4
20950: PPUSH
20951: LD_VAR 0 5
20955: PPUSH
20956: LD_INT 12
20958: PPUSH
20959: CALL 21058 0 4
// if cmd = 256 then
20963: LD_VAR 0 1
20967: PUSH
20968: LD_INT 256
20970: EQUAL
20971: IFFALSE 20992
// SetFactoryWaypoint ( unit , x , y ) ;
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_VAR 0 4
20982: PPUSH
20983: LD_VAR 0 5
20987: PPUSH
20988: CALL 18973 0 3
// if cmd = 257 then
20992: LD_VAR 0 1
20996: PUSH
20997: LD_INT 257
20999: EQUAL
21000: IFFALSE 21021
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21002: LD_VAR 0 2
21006: PPUSH
21007: LD_VAR 0 4
21011: PPUSH
21012: LD_VAR 0 5
21016: PPUSH
21017: CALL 19335 0 3
// if cmd = 258 then
21021: LD_VAR 0 1
21025: PUSH
21026: LD_INT 258
21028: EQUAL
21029: IFFALSE 21053
// BurnTreeXYR ( unit , x , y , 8 ) ;
21031: LD_VAR 0 2
21035: PPUSH
21036: LD_VAR 0 4
21040: PPUSH
21041: LD_VAR 0 5
21045: PPUSH
21046: LD_INT 8
21048: PPUSH
21049: CALL 21452 0 4
// end ;
21053: LD_VAR 0 6
21057: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21058: LD_INT 0
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
21064: PPUSH
21065: PPUSH
21066: PPUSH
21067: PPUSH
21068: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21069: LD_VAR 0 1
21073: PPUSH
21074: CALL_OW 302
21078: NOT
21079: PUSH
21080: LD_VAR 0 2
21084: PPUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 488
21094: NOT
21095: OR
21096: PUSH
21097: LD_VAR 0 4
21101: NOT
21102: OR
21103: IFFALSE 21107
// exit ;
21105: GO 21447
// list := [ ] ;
21107: LD_ADDR_VAR 0 13
21111: PUSH
21112: EMPTY
21113: ST_TO_ADDR
// if x - r < 0 then
21114: LD_VAR 0 2
21118: PUSH
21119: LD_VAR 0 4
21123: MINUS
21124: PUSH
21125: LD_INT 0
21127: LESS
21128: IFFALSE 21140
// min_x := 0 else
21130: LD_ADDR_VAR 0 7
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
21138: GO 21156
// min_x := x - r ;
21140: LD_ADDR_VAR 0 7
21144: PUSH
21145: LD_VAR 0 2
21149: PUSH
21150: LD_VAR 0 4
21154: MINUS
21155: ST_TO_ADDR
// if y - r < 0 then
21156: LD_VAR 0 3
21160: PUSH
21161: LD_VAR 0 4
21165: MINUS
21166: PUSH
21167: LD_INT 0
21169: LESS
21170: IFFALSE 21182
// min_y := 0 else
21172: LD_ADDR_VAR 0 8
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
21180: GO 21198
// min_y := y - r ;
21182: LD_ADDR_VAR 0 8
21186: PUSH
21187: LD_VAR 0 3
21191: PUSH
21192: LD_VAR 0 4
21196: MINUS
21197: ST_TO_ADDR
// max_x := x + r ;
21198: LD_ADDR_VAR 0 9
21202: PUSH
21203: LD_VAR 0 2
21207: PUSH
21208: LD_VAR 0 4
21212: PLUS
21213: ST_TO_ADDR
// max_y := y + r ;
21214: LD_ADDR_VAR 0 10
21218: PUSH
21219: LD_VAR 0 3
21223: PUSH
21224: LD_VAR 0 4
21228: PLUS
21229: ST_TO_ADDR
// for _x = min_x to max_x do
21230: LD_ADDR_VAR 0 11
21234: PUSH
21235: DOUBLE
21236: LD_VAR 0 7
21240: DEC
21241: ST_TO_ADDR
21242: LD_VAR 0 9
21246: PUSH
21247: FOR_TO
21248: IFFALSE 21365
// for _y = min_y to max_y do
21250: LD_ADDR_VAR 0 12
21254: PUSH
21255: DOUBLE
21256: LD_VAR 0 8
21260: DEC
21261: ST_TO_ADDR
21262: LD_VAR 0 10
21266: PUSH
21267: FOR_TO
21268: IFFALSE 21361
// begin if not ValidHex ( _x , _y ) then
21270: LD_VAR 0 11
21274: PPUSH
21275: LD_VAR 0 12
21279: PPUSH
21280: CALL_OW 488
21284: NOT
21285: IFFALSE 21289
// continue ;
21287: GO 21267
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21289: LD_VAR 0 11
21293: PPUSH
21294: LD_VAR 0 12
21298: PPUSH
21299: CALL_OW 351
21303: PUSH
21304: LD_VAR 0 11
21308: PPUSH
21309: LD_VAR 0 12
21313: PPUSH
21314: CALL_OW 554
21318: AND
21319: IFFALSE 21359
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21321: LD_ADDR_VAR 0 13
21325: PUSH
21326: LD_VAR 0 13
21330: PPUSH
21331: LD_VAR 0 13
21335: PUSH
21336: LD_INT 1
21338: PLUS
21339: PPUSH
21340: LD_VAR 0 11
21344: PUSH
21345: LD_VAR 0 12
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PPUSH
21354: CALL_OW 2
21358: ST_TO_ADDR
// end ;
21359: GO 21267
21361: POP
21362: POP
21363: GO 21247
21365: POP
21366: POP
// if not list then
21367: LD_VAR 0 13
21371: NOT
21372: IFFALSE 21376
// exit ;
21374: GO 21447
// for i in list do
21376: LD_ADDR_VAR 0 6
21380: PUSH
21381: LD_VAR 0 13
21385: PUSH
21386: FOR_IN
21387: IFFALSE 21445
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21389: LD_VAR 0 1
21393: PPUSH
21394: LD_STRING M
21396: PUSH
21397: LD_VAR 0 6
21401: PUSH
21402: LD_INT 1
21404: ARRAY
21405: PUSH
21406: LD_VAR 0 6
21410: PUSH
21411: LD_INT 2
21413: ARRAY
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: PUSH
21436: EMPTY
21437: LIST
21438: PPUSH
21439: CALL_OW 447
21443: GO 21386
21445: POP
21446: POP
// end ;
21447: LD_VAR 0 5
21451: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21452: LD_INT 0
21454: PPUSH
21455: PPUSH
21456: PPUSH
21457: PPUSH
21458: PPUSH
21459: PPUSH
21460: PPUSH
21461: PPUSH
21462: PPUSH
21463: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21464: LD_VAR 0 1
21468: PPUSH
21469: CALL_OW 302
21473: NOT
21474: PUSH
21475: LD_VAR 0 2
21479: PPUSH
21480: LD_VAR 0 3
21484: PPUSH
21485: CALL_OW 488
21489: NOT
21490: OR
21491: PUSH
21492: LD_VAR 0 4
21496: NOT
21497: OR
21498: IFFALSE 21502
// exit ;
21500: GO 22015
// list := [ ] ;
21502: LD_ADDR_VAR 0 13
21506: PUSH
21507: EMPTY
21508: ST_TO_ADDR
// if x - r < 0 then
21509: LD_VAR 0 2
21513: PUSH
21514: LD_VAR 0 4
21518: MINUS
21519: PUSH
21520: LD_INT 0
21522: LESS
21523: IFFALSE 21535
// min_x := 0 else
21525: LD_ADDR_VAR 0 7
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
21533: GO 21551
// min_x := x - r ;
21535: LD_ADDR_VAR 0 7
21539: PUSH
21540: LD_VAR 0 2
21544: PUSH
21545: LD_VAR 0 4
21549: MINUS
21550: ST_TO_ADDR
// if y - r < 0 then
21551: LD_VAR 0 3
21555: PUSH
21556: LD_VAR 0 4
21560: MINUS
21561: PUSH
21562: LD_INT 0
21564: LESS
21565: IFFALSE 21577
// min_y := 0 else
21567: LD_ADDR_VAR 0 8
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
21575: GO 21593
// min_y := y - r ;
21577: LD_ADDR_VAR 0 8
21581: PUSH
21582: LD_VAR 0 3
21586: PUSH
21587: LD_VAR 0 4
21591: MINUS
21592: ST_TO_ADDR
// max_x := x + r ;
21593: LD_ADDR_VAR 0 9
21597: PUSH
21598: LD_VAR 0 2
21602: PUSH
21603: LD_VAR 0 4
21607: PLUS
21608: ST_TO_ADDR
// max_y := y + r ;
21609: LD_ADDR_VAR 0 10
21613: PUSH
21614: LD_VAR 0 3
21618: PUSH
21619: LD_VAR 0 4
21623: PLUS
21624: ST_TO_ADDR
// for _x = min_x to max_x do
21625: LD_ADDR_VAR 0 11
21629: PUSH
21630: DOUBLE
21631: LD_VAR 0 7
21635: DEC
21636: ST_TO_ADDR
21637: LD_VAR 0 9
21641: PUSH
21642: FOR_TO
21643: IFFALSE 21760
// for _y = min_y to max_y do
21645: LD_ADDR_VAR 0 12
21649: PUSH
21650: DOUBLE
21651: LD_VAR 0 8
21655: DEC
21656: ST_TO_ADDR
21657: LD_VAR 0 10
21661: PUSH
21662: FOR_TO
21663: IFFALSE 21756
// begin if not ValidHex ( _x , _y ) then
21665: LD_VAR 0 11
21669: PPUSH
21670: LD_VAR 0 12
21674: PPUSH
21675: CALL_OW 488
21679: NOT
21680: IFFALSE 21684
// continue ;
21682: GO 21662
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21684: LD_VAR 0 11
21688: PPUSH
21689: LD_VAR 0 12
21693: PPUSH
21694: CALL_OW 351
21698: PUSH
21699: LD_VAR 0 11
21703: PPUSH
21704: LD_VAR 0 12
21708: PPUSH
21709: CALL_OW 554
21713: AND
21714: IFFALSE 21754
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21716: LD_ADDR_VAR 0 13
21720: PUSH
21721: LD_VAR 0 13
21725: PPUSH
21726: LD_VAR 0 13
21730: PUSH
21731: LD_INT 1
21733: PLUS
21734: PPUSH
21735: LD_VAR 0 11
21739: PUSH
21740: LD_VAR 0 12
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PPUSH
21749: CALL_OW 2
21753: ST_TO_ADDR
// end ;
21754: GO 21662
21756: POP
21757: POP
21758: GO 21642
21760: POP
21761: POP
// if not list then
21762: LD_VAR 0 13
21766: NOT
21767: IFFALSE 21771
// exit ;
21769: GO 22015
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
21771: LD_ADDR_VAR 0 13
21775: PUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: LD_VAR 0 13
21785: PPUSH
21786: LD_INT 1
21788: PPUSH
21789: LD_INT 1
21791: PPUSH
21792: CALL 30628 0 4
21796: ST_TO_ADDR
// ComStop ( flame ) ;
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 141
// for i in list do
21806: LD_ADDR_VAR 0 6
21810: PUSH
21811: LD_VAR 0 13
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21848
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_VAR 0 6
21828: PUSH
21829: LD_INT 1
21831: ARRAY
21832: PPUSH
21833: LD_VAR 0 6
21837: PUSH
21838: LD_INT 2
21840: ARRAY
21841: PPUSH
21842: CALL_OW 176
21846: GO 21816
21848: POP
21849: POP
// repeat wait ( 0 0$1 ) ;
21850: LD_INT 35
21852: PPUSH
21853: CALL_OW 67
// task := GetTaskList ( flame ) ;
21857: LD_ADDR_VAR 0 14
21861: PUSH
21862: LD_VAR 0 1
21866: PPUSH
21867: CALL_OW 437
21871: ST_TO_ADDR
// if not task then
21872: LD_VAR 0 14
21876: NOT
21877: IFFALSE 21881
// exit ;
21879: GO 22015
// if task [ 1 ] [ 1 ] <> | then
21881: LD_VAR 0 14
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: PUSH
21890: LD_INT 1
21892: ARRAY
21893: PUSH
21894: LD_STRING |
21896: NONEQUAL
21897: IFFALSE 21901
// exit ;
21899: GO 22015
// _x := task [ 1 ] [ 2 ] ;
21901: LD_ADDR_VAR 0 11
21905: PUSH
21906: LD_VAR 0 14
21910: PUSH
21911: LD_INT 1
21913: ARRAY
21914: PUSH
21915: LD_INT 2
21917: ARRAY
21918: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
21919: LD_ADDR_VAR 0 12
21923: PUSH
21924: LD_VAR 0 14
21928: PUSH
21929: LD_INT 1
21931: ARRAY
21932: PUSH
21933: LD_INT 3
21935: ARRAY
21936: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
21937: LD_VAR 0 11
21941: PPUSH
21942: LD_VAR 0 12
21946: PPUSH
21947: CALL_OW 351
21951: NOT
21952: PUSH
21953: LD_VAR 0 11
21957: PPUSH
21958: LD_VAR 0 12
21962: PPUSH
21963: CALL_OW 554
21967: NOT
21968: OR
21969: IFFALSE 22003
// begin task := Delete ( task , 1 ) ;
21971: LD_ADDR_VAR 0 14
21975: PUSH
21976: LD_VAR 0 14
21980: PPUSH
21981: LD_INT 1
21983: PPUSH
21984: CALL_OW 3
21988: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
21989: LD_VAR 0 1
21993: PPUSH
21994: LD_VAR 0 14
21998: PPUSH
21999: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 314
22012: NOT
22013: IFFALSE 21850
// end ;
22015: LD_VAR 0 5
22019: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22020: LD_EXP 69
22024: NOT
22025: IFFALSE 22075
22027: GO 22029
22029: DISABLE
// begin initHack := true ;
22030: LD_ADDR_EXP 69
22034: PUSH
22035: LD_INT 1
22037: ST_TO_ADDR
// hackTanks := [ ] ;
22038: LD_ADDR_EXP 70
22042: PUSH
22043: EMPTY
22044: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22045: LD_ADDR_EXP 71
22049: PUSH
22050: EMPTY
22051: ST_TO_ADDR
// hackLimit := 3 ;
22052: LD_ADDR_EXP 72
22056: PUSH
22057: LD_INT 3
22059: ST_TO_ADDR
// hackDist := 12 ;
22060: LD_ADDR_EXP 73
22064: PUSH
22065: LD_INT 12
22067: ST_TO_ADDR
// hackCounter := [ ] ;
22068: LD_ADDR_EXP 74
22072: PUSH
22073: EMPTY
22074: ST_TO_ADDR
// end ;
22075: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22076: LD_EXP 69
22080: PUSH
22081: LD_INT 34
22083: PUSH
22084: LD_INT 99
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PPUSH
22091: CALL_OW 69
22095: AND
22096: IFFALSE 22349
22098: GO 22100
22100: DISABLE
22101: LD_INT 0
22103: PPUSH
22104: PPUSH
// begin enable ;
22105: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22106: LD_ADDR_VAR 0 1
22110: PUSH
22111: LD_INT 34
22113: PUSH
22114: LD_INT 99
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PPUSH
22121: CALL_OW 69
22125: PUSH
22126: FOR_IN
22127: IFFALSE 22347
// begin if not i in hackTanks then
22129: LD_VAR 0 1
22133: PUSH
22134: LD_EXP 70
22138: IN
22139: NOT
22140: IFFALSE 22223
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22142: LD_ADDR_EXP 70
22146: PUSH
22147: LD_EXP 70
22151: PPUSH
22152: LD_EXP 70
22156: PUSH
22157: LD_INT 1
22159: PLUS
22160: PPUSH
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 1
22170: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22171: LD_ADDR_EXP 71
22175: PUSH
22176: LD_EXP 71
22180: PPUSH
22181: LD_EXP 71
22185: PUSH
22186: LD_INT 1
22188: PLUS
22189: PPUSH
22190: EMPTY
22191: PPUSH
22192: CALL_OW 1
22196: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22197: LD_ADDR_EXP 74
22201: PUSH
22202: LD_EXP 74
22206: PPUSH
22207: LD_EXP 74
22211: PUSH
22212: LD_INT 1
22214: PLUS
22215: PPUSH
22216: EMPTY
22217: PPUSH
22218: CALL_OW 1
22222: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL_OW 302
22232: NOT
22233: IFFALSE 22246
// begin HackUnlinkAll ( i ) ;
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL 22352 0 1
// continue ;
22244: GO 22126
// end ; HackCheckCapturedStatus ( i ) ;
22246: LD_VAR 0 1
22250: PPUSH
22251: CALL 22795 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22255: LD_ADDR_VAR 0 2
22259: PUSH
22260: LD_INT 81
22262: PUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: CALL_OW 255
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 33
22279: PUSH
22280: LD_INT 3
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 91
22289: PUSH
22290: LD_VAR 0 1
22294: PUSH
22295: LD_EXP 73
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 50
22307: PUSH
22308: EMPTY
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: ST_TO_ADDR
// if not tmp then
22322: LD_VAR 0 2
22326: NOT
22327: IFFALSE 22331
// continue ;
22329: GO 22126
// HackLink ( i , tmp ) ;
22331: LD_VAR 0 1
22335: PPUSH
22336: LD_VAR 0 2
22340: PPUSH
22341: CALL 22488 0 2
// end ;
22345: GO 22126
22347: POP
22348: POP
// end ;
22349: PPOPN 2
22351: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22352: LD_INT 0
22354: PPUSH
22355: PPUSH
22356: PPUSH
// if not hack in hackTanks then
22357: LD_VAR 0 1
22361: PUSH
22362: LD_EXP 70
22366: IN
22367: NOT
22368: IFFALSE 22372
// exit ;
22370: GO 22483
// index := GetElementIndex ( hackTanks , hack ) ;
22372: LD_ADDR_VAR 0 4
22376: PUSH
22377: LD_EXP 70
22381: PPUSH
22382: LD_VAR 0 1
22386: PPUSH
22387: CALL 29925 0 2
22391: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22392: LD_EXP 71
22396: PUSH
22397: LD_VAR 0 4
22401: ARRAY
22402: IFFALSE 22483
// begin for i in hackTanksCaptured [ index ] do
22404: LD_ADDR_VAR 0 3
22408: PUSH
22409: LD_EXP 71
22413: PUSH
22414: LD_VAR 0 4
22418: ARRAY
22419: PUSH
22420: FOR_IN
22421: IFFALSE 22447
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22423: LD_VAR 0 3
22427: PUSH
22428: LD_INT 1
22430: ARRAY
22431: PPUSH
22432: LD_VAR 0 3
22436: PUSH
22437: LD_INT 2
22439: ARRAY
22440: PPUSH
22441: CALL_OW 235
22445: GO 22420
22447: POP
22448: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22449: LD_ADDR_EXP 71
22453: PUSH
22454: LD_EXP 71
22458: PPUSH
22459: LD_VAR 0 4
22463: PPUSH
22464: EMPTY
22465: PPUSH
22466: CALL_OW 1
22470: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22471: LD_VAR 0 1
22475: PPUSH
22476: LD_INT 0
22478: PPUSH
22479: CALL_OW 505
// end ; end ;
22483: LD_VAR 0 2
22487: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
22492: PPUSH
// if not hack in hackTanks or not vehicles then
22493: LD_VAR 0 1
22497: PUSH
22498: LD_EXP 70
22502: IN
22503: NOT
22504: PUSH
22505: LD_VAR 0 2
22509: NOT
22510: OR
22511: IFFALSE 22515
// exit ;
22513: GO 22790
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22515: LD_ADDR_VAR 0 2
22519: PUSH
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_VAR 0 2
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL 30575 0 4
22540: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22541: LD_ADDR_VAR 0 5
22545: PUSH
22546: LD_EXP 70
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: CALL 29925 0 2
22560: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22561: LD_EXP 71
22565: PUSH
22566: LD_VAR 0 5
22570: ARRAY
22571: PUSH
22572: LD_EXP 72
22576: LESS
22577: IFFALSE 22766
// begin for i := 1 to vehicles do
22579: LD_ADDR_VAR 0 4
22583: PUSH
22584: DOUBLE
22585: LD_INT 1
22587: DEC
22588: ST_TO_ADDR
22589: LD_VAR 0 2
22593: PUSH
22594: FOR_TO
22595: IFFALSE 22764
// begin if hackTanksCaptured [ index ] = hackLimit then
22597: LD_EXP 71
22601: PUSH
22602: LD_VAR 0 5
22606: ARRAY
22607: PUSH
22608: LD_EXP 72
22612: EQUAL
22613: IFFALSE 22617
// break ;
22615: GO 22764
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22617: LD_ADDR_EXP 74
22621: PUSH
22622: LD_EXP 74
22626: PPUSH
22627: LD_VAR 0 5
22631: PPUSH
22632: LD_EXP 74
22636: PUSH
22637: LD_VAR 0 5
22641: ARRAY
22642: PUSH
22643: LD_INT 1
22645: PLUS
22646: PPUSH
22647: CALL_OW 1
22651: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22652: LD_ADDR_EXP 71
22656: PUSH
22657: LD_EXP 71
22661: PPUSH
22662: LD_VAR 0 5
22666: PUSH
22667: LD_EXP 71
22671: PUSH
22672: LD_VAR 0 5
22676: ARRAY
22677: PUSH
22678: LD_INT 1
22680: PLUS
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: LD_VAR 0 2
22690: PUSH
22691: LD_VAR 0 4
22695: ARRAY
22696: PUSH
22697: LD_VAR 0 2
22701: PUSH
22702: LD_VAR 0 4
22706: ARRAY
22707: PPUSH
22708: CALL_OW 255
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL 30140 0 3
22721: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22722: LD_VAR 0 2
22726: PUSH
22727: LD_VAR 0 4
22731: ARRAY
22732: PPUSH
22733: LD_VAR 0 1
22737: PPUSH
22738: CALL_OW 255
22742: PPUSH
22743: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22747: LD_VAR 0 2
22751: PUSH
22752: LD_VAR 0 4
22756: ARRAY
22757: PPUSH
22758: CALL_OW 141
// end ;
22762: GO 22594
22764: POP
22765: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22766: LD_VAR 0 1
22770: PPUSH
22771: LD_EXP 71
22775: PUSH
22776: LD_VAR 0 5
22780: ARRAY
22781: PUSH
22782: LD_INT 0
22784: PLUS
22785: PPUSH
22786: CALL_OW 505
// end ;
22790: LD_VAR 0 3
22794: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22795: LD_INT 0
22797: PPUSH
22798: PPUSH
22799: PPUSH
22800: PPUSH
// if not hack in hackTanks then
22801: LD_VAR 0 1
22805: PUSH
22806: LD_EXP 70
22810: IN
22811: NOT
22812: IFFALSE 22816
// exit ;
22814: GO 23056
// index := GetElementIndex ( hackTanks , hack ) ;
22816: LD_ADDR_VAR 0 4
22820: PUSH
22821: LD_EXP 70
22825: PPUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: CALL 29925 0 2
22835: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22836: LD_ADDR_VAR 0 3
22840: PUSH
22841: DOUBLE
22842: LD_EXP 71
22846: PUSH
22847: LD_VAR 0 4
22851: ARRAY
22852: INC
22853: ST_TO_ADDR
22854: LD_INT 1
22856: PUSH
22857: FOR_DOWNTO
22858: IFFALSE 23030
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22860: LD_ADDR_VAR 0 5
22864: PUSH
22865: LD_EXP 71
22869: PUSH
22870: LD_VAR 0 4
22874: ARRAY
22875: PUSH
22876: LD_VAR 0 3
22880: ARRAY
22881: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22882: LD_VAR 0 5
22886: PUSH
22887: LD_INT 1
22889: ARRAY
22890: PPUSH
22891: CALL_OW 302
22895: NOT
22896: PUSH
22897: LD_VAR 0 5
22901: PUSH
22902: LD_INT 1
22904: ARRAY
22905: PPUSH
22906: CALL_OW 255
22910: PUSH
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 255
22920: NONEQUAL
22921: OR
22922: IFFALSE 23028
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22924: LD_VAR 0 5
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: CALL_OW 305
22937: PUSH
22938: LD_VAR 0 5
22942: PUSH
22943: LD_INT 1
22945: ARRAY
22946: PPUSH
22947: CALL_OW 255
22951: PUSH
22952: LD_VAR 0 1
22956: PPUSH
22957: CALL_OW 255
22961: EQUAL
22962: AND
22963: IFFALSE 22987
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22965: LD_VAR 0 5
22969: PUSH
22970: LD_INT 1
22972: ARRAY
22973: PPUSH
22974: LD_VAR 0 5
22978: PUSH
22979: LD_INT 2
22981: ARRAY
22982: PPUSH
22983: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22987: LD_ADDR_EXP 71
22991: PUSH
22992: LD_EXP 71
22996: PPUSH
22997: LD_VAR 0 4
23001: PPUSH
23002: LD_EXP 71
23006: PUSH
23007: LD_VAR 0 4
23011: ARRAY
23012: PPUSH
23013: LD_VAR 0 3
23017: PPUSH
23018: CALL_OW 3
23022: PPUSH
23023: CALL_OW 1
23027: ST_TO_ADDR
// end ; end ;
23028: GO 22857
23030: POP
23031: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23032: LD_VAR 0 1
23036: PPUSH
23037: LD_EXP 71
23041: PUSH
23042: LD_VAR 0 4
23046: ARRAY
23047: PUSH
23048: LD_INT 0
23050: PLUS
23051: PPUSH
23052: CALL_OW 505
// end ;
23056: LD_VAR 0 2
23060: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23061: LD_INT 0
23063: PPUSH
23064: PPUSH
23065: PPUSH
23066: PPUSH
// if not hack in hackTanks then
23067: LD_VAR 0 1
23071: PUSH
23072: LD_EXP 70
23076: IN
23077: NOT
23078: IFFALSE 23082
// exit ;
23080: GO 23167
// index := GetElementIndex ( hackTanks , hack ) ;
23082: LD_ADDR_VAR 0 5
23086: PUSH
23087: LD_EXP 70
23091: PPUSH
23092: LD_VAR 0 1
23096: PPUSH
23097: CALL 29925 0 2
23101: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23102: LD_ADDR_VAR 0 4
23106: PUSH
23107: DOUBLE
23108: LD_INT 1
23110: DEC
23111: ST_TO_ADDR
23112: LD_EXP 71
23116: PUSH
23117: LD_VAR 0 5
23121: ARRAY
23122: PUSH
23123: FOR_TO
23124: IFFALSE 23165
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23126: LD_EXP 71
23130: PUSH
23131: LD_VAR 0 5
23135: ARRAY
23136: PUSH
23137: LD_VAR 0 4
23141: ARRAY
23142: PUSH
23143: LD_INT 1
23145: ARRAY
23146: PUSH
23147: LD_VAR 0 2
23151: EQUAL
23152: IFFALSE 23163
// KillUnit ( vehicle ) ;
23154: LD_VAR 0 2
23158: PPUSH
23159: CALL_OW 66
23163: GO 23123
23165: POP
23166: POP
// end ;
23167: LD_VAR 0 3
23171: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23172: LD_EXP 75
23176: NOT
23177: IFFALSE 23212
23179: GO 23181
23181: DISABLE
// begin initMiner := true ;
23182: LD_ADDR_EXP 75
23186: PUSH
23187: LD_INT 1
23189: ST_TO_ADDR
// minersList := [ ] ;
23190: LD_ADDR_EXP 76
23194: PUSH
23195: EMPTY
23196: ST_TO_ADDR
// minerMinesList := [ ] ;
23197: LD_ADDR_EXP 77
23201: PUSH
23202: EMPTY
23203: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23204: LD_ADDR_EXP 78
23208: PUSH
23209: LD_INT 5
23211: ST_TO_ADDR
// end ;
23212: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23213: LD_EXP 75
23217: PUSH
23218: LD_INT 34
23220: PUSH
23221: LD_INT 81
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PPUSH
23228: CALL_OW 69
23232: AND
23233: IFFALSE 23694
23235: GO 23237
23237: DISABLE
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
// begin enable ;
23244: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23245: LD_ADDR_VAR 0 1
23249: PUSH
23250: LD_INT 34
23252: PUSH
23253: LD_INT 81
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PPUSH
23260: CALL_OW 69
23264: PUSH
23265: FOR_IN
23266: IFFALSE 23338
// begin if not i in minersList then
23268: LD_VAR 0 1
23272: PUSH
23273: LD_EXP 76
23277: IN
23278: NOT
23279: IFFALSE 23336
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23281: LD_ADDR_EXP 76
23285: PUSH
23286: LD_EXP 76
23290: PPUSH
23291: LD_EXP 76
23295: PUSH
23296: LD_INT 1
23298: PLUS
23299: PPUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: CALL_OW 1
23309: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23310: LD_ADDR_EXP 77
23314: PUSH
23315: LD_EXP 77
23319: PPUSH
23320: LD_EXP 77
23324: PUSH
23325: LD_INT 1
23327: PLUS
23328: PPUSH
23329: EMPTY
23330: PPUSH
23331: CALL_OW 1
23335: ST_TO_ADDR
// end end ;
23336: GO 23265
23338: POP
23339: POP
// for i := minerMinesList downto 1 do
23340: LD_ADDR_VAR 0 1
23344: PUSH
23345: DOUBLE
23346: LD_EXP 77
23350: INC
23351: ST_TO_ADDR
23352: LD_INT 1
23354: PUSH
23355: FOR_DOWNTO
23356: IFFALSE 23692
// begin if IsLive ( minersList [ i ] ) then
23358: LD_EXP 76
23362: PUSH
23363: LD_VAR 0 1
23367: ARRAY
23368: PPUSH
23369: CALL_OW 300
23373: IFFALSE 23401
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23375: LD_EXP 76
23379: PUSH
23380: LD_VAR 0 1
23384: ARRAY
23385: PPUSH
23386: LD_EXP 77
23390: PUSH
23391: LD_VAR 0 1
23395: ARRAY
23396: PPUSH
23397: CALL_OW 505
// if not minerMinesList [ i ] then
23401: LD_EXP 77
23405: PUSH
23406: LD_VAR 0 1
23410: ARRAY
23411: NOT
23412: IFFALSE 23416
// continue ;
23414: GO 23355
// for j := minerMinesList [ i ] downto 1 do
23416: LD_ADDR_VAR 0 2
23420: PUSH
23421: DOUBLE
23422: LD_EXP 77
23426: PUSH
23427: LD_VAR 0 1
23431: ARRAY
23432: INC
23433: ST_TO_ADDR
23434: LD_INT 1
23436: PUSH
23437: FOR_DOWNTO
23438: IFFALSE 23688
// begin side := GetSide ( minersList [ i ] ) ;
23440: LD_ADDR_VAR 0 3
23444: PUSH
23445: LD_EXP 76
23449: PUSH
23450: LD_VAR 0 1
23454: ARRAY
23455: PPUSH
23456: CALL_OW 255
23460: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23461: LD_ADDR_VAR 0 4
23465: PUSH
23466: LD_EXP 77
23470: PUSH
23471: LD_VAR 0 1
23475: ARRAY
23476: PUSH
23477: LD_VAR 0 2
23481: ARRAY
23482: PUSH
23483: LD_INT 1
23485: ARRAY
23486: PPUSH
23487: LD_EXP 77
23491: PUSH
23492: LD_VAR 0 1
23496: ARRAY
23497: PUSH
23498: LD_VAR 0 2
23502: ARRAY
23503: PUSH
23504: LD_INT 2
23506: ARRAY
23507: PPUSH
23508: CALL_OW 428
23512: ST_TO_ADDR
// if not tmp then
23513: LD_VAR 0 4
23517: NOT
23518: IFFALSE 23522
// continue ;
23520: GO 23437
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23522: LD_VAR 0 4
23526: PUSH
23527: LD_INT 81
23529: PUSH
23530: LD_VAR 0 3
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PPUSH
23539: CALL_OW 69
23543: IN
23544: PUSH
23545: LD_EXP 77
23549: PUSH
23550: LD_VAR 0 1
23554: ARRAY
23555: PUSH
23556: LD_VAR 0 2
23560: ARRAY
23561: PUSH
23562: LD_INT 1
23564: ARRAY
23565: PPUSH
23566: LD_EXP 77
23570: PUSH
23571: LD_VAR 0 1
23575: ARRAY
23576: PUSH
23577: LD_VAR 0 2
23581: ARRAY
23582: PUSH
23583: LD_INT 2
23585: ARRAY
23586: PPUSH
23587: CALL_OW 458
23591: AND
23592: IFFALSE 23686
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23594: LD_EXP 77
23598: PUSH
23599: LD_VAR 0 1
23603: ARRAY
23604: PUSH
23605: LD_VAR 0 2
23609: ARRAY
23610: PUSH
23611: LD_INT 1
23613: ARRAY
23614: PPUSH
23615: LD_EXP 77
23619: PUSH
23620: LD_VAR 0 1
23624: ARRAY
23625: PUSH
23626: LD_VAR 0 2
23630: ARRAY
23631: PUSH
23632: LD_INT 2
23634: ARRAY
23635: PPUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23645: LD_ADDR_EXP 77
23649: PUSH
23650: LD_EXP 77
23654: PPUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_EXP 77
23664: PUSH
23665: LD_VAR 0 1
23669: ARRAY
23670: PPUSH
23671: LD_VAR 0 2
23675: PPUSH
23676: CALL_OW 3
23680: PPUSH
23681: CALL_OW 1
23685: ST_TO_ADDR
// end ; end ;
23686: GO 23437
23688: POP
23689: POP
// end ;
23690: GO 23355
23692: POP
23693: POP
// end ;
23694: PPOPN 4
23696: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23697: LD_INT 0
23699: PPUSH
23700: PPUSH
// result := false ;
23701: LD_ADDR_VAR 0 4
23705: PUSH
23706: LD_INT 0
23708: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 264
23718: PUSH
23719: LD_INT 81
23721: EQUAL
23722: NOT
23723: IFFALSE 23727
// exit ;
23725: GO 23967
// index := GetElementIndex ( minersList , unit ) ;
23727: LD_ADDR_VAR 0 5
23731: PUSH
23732: LD_EXP 76
23736: PPUSH
23737: LD_VAR 0 1
23741: PPUSH
23742: CALL 29925 0 2
23746: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23747: LD_EXP 77
23751: PUSH
23752: LD_VAR 0 5
23756: ARRAY
23757: PUSH
23758: LD_EXP 78
23762: GREATEREQUAL
23763: IFFALSE 23767
// exit ;
23765: GO 23967
// ComMoveXY ( unit , x , y ) ;
23767: LD_VAR 0 1
23771: PPUSH
23772: LD_VAR 0 2
23776: PPUSH
23777: LD_VAR 0 3
23781: PPUSH
23782: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23786: LD_INT 35
23788: PPUSH
23789: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23793: LD_VAR 0 1
23797: PPUSH
23798: LD_VAR 0 2
23802: PPUSH
23803: LD_VAR 0 3
23807: PPUSH
23808: CALL 61666 0 3
23812: NOT
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 314
23823: AND
23824: IFFALSE 23828
// exit ;
23826: GO 23967
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23828: LD_VAR 0 2
23832: PPUSH
23833: LD_VAR 0 3
23837: PPUSH
23838: CALL_OW 428
23842: PUSH
23843: LD_VAR 0 1
23847: EQUAL
23848: PUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: CALL_OW 314
23858: NOT
23859: AND
23860: IFFALSE 23786
// PlaySoundXY ( x , y , PlantMine ) ;
23862: LD_VAR 0 2
23866: PPUSH
23867: LD_VAR 0 3
23871: PPUSH
23872: LD_STRING PlantMine
23874: PPUSH
23875: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23879: LD_VAR 0 2
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 255
23898: PPUSH
23899: LD_INT 0
23901: PPUSH
23902: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23906: LD_ADDR_EXP 77
23910: PUSH
23911: LD_EXP 77
23915: PPUSH
23916: LD_VAR 0 5
23920: PUSH
23921: LD_EXP 77
23925: PUSH
23926: LD_VAR 0 5
23930: ARRAY
23931: PUSH
23932: LD_INT 1
23934: PLUS
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: LD_VAR 0 2
23944: PUSH
23945: LD_VAR 0 3
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PPUSH
23954: CALL 30140 0 3
23958: ST_TO_ADDR
// result := true ;
23959: LD_ADDR_VAR 0 4
23963: PUSH
23964: LD_INT 1
23966: ST_TO_ADDR
// end ;
23967: LD_VAR 0 4
23971: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23972: LD_INT 0
23974: PPUSH
23975: PPUSH
23976: PPUSH
// if not unit in minersList then
23977: LD_VAR 0 1
23981: PUSH
23982: LD_EXP 76
23986: IN
23987: NOT
23988: IFFALSE 23992
// exit ;
23990: GO 24384
// index := GetElementIndex ( minersList , unit ) ;
23992: LD_ADDR_VAR 0 6
23996: PUSH
23997: LD_EXP 76
24001: PPUSH
24002: LD_VAR 0 1
24006: PPUSH
24007: CALL 29925 0 2
24011: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24012: LD_ADDR_VAR 0 5
24016: PUSH
24017: DOUBLE
24018: LD_EXP 77
24022: PUSH
24023: LD_VAR 0 6
24027: ARRAY
24028: INC
24029: ST_TO_ADDR
24030: LD_INT 1
24032: PUSH
24033: FOR_DOWNTO
24034: IFFALSE 24195
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24036: LD_EXP 77
24040: PUSH
24041: LD_VAR 0 6
24045: ARRAY
24046: PUSH
24047: LD_VAR 0 5
24051: ARRAY
24052: PUSH
24053: LD_INT 1
24055: ARRAY
24056: PUSH
24057: LD_VAR 0 2
24061: EQUAL
24062: PUSH
24063: LD_EXP 77
24067: PUSH
24068: LD_VAR 0 6
24072: ARRAY
24073: PUSH
24074: LD_VAR 0 5
24078: ARRAY
24079: PUSH
24080: LD_INT 2
24082: ARRAY
24083: PUSH
24084: LD_VAR 0 3
24088: EQUAL
24089: AND
24090: IFFALSE 24193
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24092: LD_EXP 77
24096: PUSH
24097: LD_VAR 0 6
24101: ARRAY
24102: PUSH
24103: LD_VAR 0 5
24107: ARRAY
24108: PUSH
24109: LD_INT 1
24111: ARRAY
24112: PPUSH
24113: LD_EXP 77
24117: PUSH
24118: LD_VAR 0 6
24122: ARRAY
24123: PUSH
24124: LD_VAR 0 5
24128: ARRAY
24129: PUSH
24130: LD_INT 2
24132: ARRAY
24133: PPUSH
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 255
24143: PPUSH
24144: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24148: LD_ADDR_EXP 77
24152: PUSH
24153: LD_EXP 77
24157: PPUSH
24158: LD_VAR 0 6
24162: PPUSH
24163: LD_EXP 77
24167: PUSH
24168: LD_VAR 0 6
24172: ARRAY
24173: PPUSH
24174: LD_VAR 0 5
24178: PPUSH
24179: CALL_OW 3
24183: PPUSH
24184: CALL_OW 1
24188: ST_TO_ADDR
// exit ;
24189: POP
24190: POP
24191: GO 24384
// end ; end ;
24193: GO 24033
24195: POP
24196: POP
// for i := minerMinesList [ index ] downto 1 do
24197: LD_ADDR_VAR 0 5
24201: PUSH
24202: DOUBLE
24203: LD_EXP 77
24207: PUSH
24208: LD_VAR 0 6
24212: ARRAY
24213: INC
24214: ST_TO_ADDR
24215: LD_INT 1
24217: PUSH
24218: FOR_DOWNTO
24219: IFFALSE 24382
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24221: LD_EXP 77
24225: PUSH
24226: LD_VAR 0 6
24230: ARRAY
24231: PUSH
24232: LD_VAR 0 5
24236: ARRAY
24237: PUSH
24238: LD_INT 1
24240: ARRAY
24241: PPUSH
24242: LD_EXP 77
24246: PUSH
24247: LD_VAR 0 6
24251: ARRAY
24252: PUSH
24253: LD_VAR 0 5
24257: ARRAY
24258: PUSH
24259: LD_INT 2
24261: ARRAY
24262: PPUSH
24263: LD_VAR 0 2
24267: PPUSH
24268: LD_VAR 0 3
24272: PPUSH
24273: CALL_OW 298
24277: PUSH
24278: LD_INT 6
24280: LESS
24281: IFFALSE 24380
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24283: LD_EXP 77
24287: PUSH
24288: LD_VAR 0 6
24292: ARRAY
24293: PUSH
24294: LD_VAR 0 5
24298: ARRAY
24299: PUSH
24300: LD_INT 1
24302: ARRAY
24303: PPUSH
24304: LD_EXP 77
24308: PUSH
24309: LD_VAR 0 6
24313: ARRAY
24314: PUSH
24315: LD_VAR 0 5
24319: ARRAY
24320: PUSH
24321: LD_INT 2
24323: ARRAY
24324: PPUSH
24325: LD_VAR 0 1
24329: PPUSH
24330: CALL_OW 255
24334: PPUSH
24335: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24339: LD_ADDR_EXP 77
24343: PUSH
24344: LD_EXP 77
24348: PPUSH
24349: LD_VAR 0 6
24353: PPUSH
24354: LD_EXP 77
24358: PUSH
24359: LD_VAR 0 6
24363: ARRAY
24364: PPUSH
24365: LD_VAR 0 5
24369: PPUSH
24370: CALL_OW 3
24374: PPUSH
24375: CALL_OW 1
24379: ST_TO_ADDR
// end ; end ;
24380: GO 24218
24382: POP
24383: POP
// end ;
24384: LD_VAR 0 4
24388: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24389: LD_INT 0
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24400: LD_VAR 0 1
24404: PPUSH
24405: CALL_OW 264
24409: PUSH
24410: LD_INT 81
24412: EQUAL
24413: NOT
24414: PUSH
24415: LD_VAR 0 1
24419: PUSH
24420: LD_EXP 76
24424: IN
24425: NOT
24426: OR
24427: IFFALSE 24431
// exit ;
24429: GO 24753
// index := GetElementIndex ( minersList , unit ) ;
24431: LD_ADDR_VAR 0 6
24435: PUSH
24436: LD_EXP 76
24440: PPUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL 29925 0 2
24450: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24451: LD_ADDR_VAR 0 8
24455: PUSH
24456: LD_EXP 78
24460: PUSH
24461: LD_EXP 77
24465: PUSH
24466: LD_VAR 0 6
24470: ARRAY
24471: MINUS
24472: ST_TO_ADDR
// if not minesFreeAmount then
24473: LD_VAR 0 8
24477: NOT
24478: IFFALSE 24482
// exit ;
24480: GO 24753
// tmp := [ ] ;
24482: LD_ADDR_VAR 0 7
24486: PUSH
24487: EMPTY
24488: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24489: LD_ADDR_VAR 0 5
24493: PUSH
24494: DOUBLE
24495: LD_INT 1
24497: DEC
24498: ST_TO_ADDR
24499: LD_VAR 0 8
24503: PUSH
24504: FOR_TO
24505: IFFALSE 24700
// begin _d := rand ( 0 , 5 ) ;
24507: LD_ADDR_VAR 0 11
24511: PUSH
24512: LD_INT 0
24514: PPUSH
24515: LD_INT 5
24517: PPUSH
24518: CALL_OW 12
24522: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24523: LD_ADDR_VAR 0 12
24527: PUSH
24528: LD_INT 2
24530: PPUSH
24531: LD_INT 6
24533: PPUSH
24534: CALL_OW 12
24538: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24539: LD_ADDR_VAR 0 9
24543: PUSH
24544: LD_VAR 0 2
24548: PPUSH
24549: LD_VAR 0 11
24553: PPUSH
24554: LD_VAR 0 12
24558: PPUSH
24559: CALL_OW 272
24563: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24564: LD_ADDR_VAR 0 10
24568: PUSH
24569: LD_VAR 0 3
24573: PPUSH
24574: LD_VAR 0 11
24578: PPUSH
24579: LD_VAR 0 12
24583: PPUSH
24584: CALL_OW 273
24588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24589: LD_VAR 0 9
24593: PPUSH
24594: LD_VAR 0 10
24598: PPUSH
24599: CALL_OW 488
24603: PUSH
24604: LD_VAR 0 9
24608: PUSH
24609: LD_VAR 0 10
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_VAR 0 7
24622: IN
24623: NOT
24624: AND
24625: PUSH
24626: LD_VAR 0 9
24630: PPUSH
24631: LD_VAR 0 10
24635: PPUSH
24636: CALL_OW 458
24640: NOT
24641: AND
24642: IFFALSE 24684
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24644: LD_ADDR_VAR 0 7
24648: PUSH
24649: LD_VAR 0 7
24653: PPUSH
24654: LD_VAR 0 7
24658: PUSH
24659: LD_INT 1
24661: PLUS
24662: PPUSH
24663: LD_VAR 0 9
24667: PUSH
24668: LD_VAR 0 10
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 1
24681: ST_TO_ADDR
24682: GO 24698
// i := i - 1 ;
24684: LD_ADDR_VAR 0 5
24688: PUSH
24689: LD_VAR 0 5
24693: PUSH
24694: LD_INT 1
24696: MINUS
24697: ST_TO_ADDR
// end ;
24698: GO 24504
24700: POP
24701: POP
// for i in tmp do
24702: LD_ADDR_VAR 0 5
24706: PUSH
24707: LD_VAR 0 7
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24751
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_VAR 0 5
24724: PUSH
24725: LD_INT 1
24727: ARRAY
24728: PPUSH
24729: LD_VAR 0 5
24733: PUSH
24734: LD_INT 2
24736: ARRAY
24737: PPUSH
24738: CALL 23697 0 3
24742: NOT
24743: IFFALSE 24749
// exit ;
24745: POP
24746: POP
24747: GO 24753
24749: GO 24712
24751: POP
24752: POP
// end ;
24753: LD_VAR 0 4
24757: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
// if not GetClass ( unit ) = class_sniper then
24767: LD_VAR 0 1
24771: PPUSH
24772: CALL_OW 257
24776: PUSH
24777: LD_INT 5
24779: EQUAL
24780: NOT
24781: IFFALSE 24785
// exit ;
24783: GO 25173
// dist := 8 ;
24785: LD_ADDR_VAR 0 5
24789: PUSH
24790: LD_INT 8
24792: ST_TO_ADDR
// viewRange := 12 ;
24793: LD_ADDR_VAR 0 7
24797: PUSH
24798: LD_INT 12
24800: ST_TO_ADDR
// side := GetSide ( unit ) ;
24801: LD_ADDR_VAR 0 6
24805: PUSH
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 255
24815: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24816: LD_INT 61
24818: PPUSH
24819: LD_VAR 0 6
24823: PPUSH
24824: CALL_OW 321
24828: PUSH
24829: LD_INT 2
24831: EQUAL
24832: IFFALSE 24842
// viewRange := 16 ;
24834: LD_ADDR_VAR 0 7
24838: PUSH
24839: LD_INT 16
24841: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24842: LD_VAR 0 1
24846: PPUSH
24847: LD_VAR 0 2
24851: PPUSH
24852: LD_VAR 0 3
24856: PPUSH
24857: CALL_OW 297
24861: PUSH
24862: LD_VAR 0 5
24866: GREATER
24867: IFFALSE 24946
// begin ComMoveXY ( unit , x , y ) ;
24869: LD_VAR 0 1
24873: PPUSH
24874: LD_VAR 0 2
24878: PPUSH
24879: LD_VAR 0 3
24883: PPUSH
24884: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24888: LD_INT 35
24890: PPUSH
24891: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24895: LD_VAR 0 1
24899: PPUSH
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_VAR 0 3
24909: PPUSH
24910: CALL 61666 0 3
24914: NOT
24915: IFFALSE 24919
// exit ;
24917: GO 25173
// until GetDistUnitXY ( unit , x , y ) < dist ;
24919: LD_VAR 0 1
24923: PPUSH
24924: LD_VAR 0 2
24928: PPUSH
24929: LD_VAR 0 3
24933: PPUSH
24934: CALL_OW 297
24938: PUSH
24939: LD_VAR 0 5
24943: LESS
24944: IFFALSE 24888
// end ; ComTurnXY ( unit , x , y ) ;
24946: LD_VAR 0 1
24950: PPUSH
24951: LD_VAR 0 2
24955: PPUSH
24956: LD_VAR 0 3
24960: PPUSH
24961: CALL_OW 118
// wait ( 5 ) ;
24965: LD_INT 5
24967: PPUSH
24968: CALL_OW 67
// _d := GetDir ( unit ) ;
24972: LD_ADDR_VAR 0 10
24976: PUSH
24977: LD_VAR 0 1
24981: PPUSH
24982: CALL_OW 254
24986: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24987: LD_ADDR_VAR 0 8
24991: PUSH
24992: LD_VAR 0 1
24996: PPUSH
24997: CALL_OW 250
25001: PPUSH
25002: LD_VAR 0 10
25006: PPUSH
25007: LD_VAR 0 5
25011: PPUSH
25012: CALL_OW 272
25016: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25017: LD_ADDR_VAR 0 9
25021: PUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 251
25031: PPUSH
25032: LD_VAR 0 10
25036: PPUSH
25037: LD_VAR 0 5
25041: PPUSH
25042: CALL_OW 273
25046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25047: LD_VAR 0 8
25051: PPUSH
25052: LD_VAR 0 9
25056: PPUSH
25057: CALL_OW 488
25061: NOT
25062: IFFALSE 25066
// exit ;
25064: GO 25173
// ComAnimCustom ( unit , 1 ) ;
25066: LD_VAR 0 1
25070: PPUSH
25071: LD_INT 1
25073: PPUSH
25074: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25078: LD_VAR 0 8
25082: PPUSH
25083: LD_VAR 0 9
25087: PPUSH
25088: LD_VAR 0 6
25092: PPUSH
25093: LD_VAR 0 7
25097: PPUSH
25098: CALL_OW 330
// repeat wait ( 1 ) ;
25102: LD_INT 1
25104: PPUSH
25105: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 316
25118: PUSH
25119: LD_VAR 0 1
25123: PPUSH
25124: CALL_OW 314
25128: OR
25129: PUSH
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 302
25139: NOT
25140: OR
25141: PUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 301
25151: OR
25152: IFFALSE 25102
// RemoveSeeing ( _x , _y , side ) ;
25154: LD_VAR 0 8
25158: PPUSH
25159: LD_VAR 0 9
25163: PPUSH
25164: LD_VAR 0 6
25168: PPUSH
25169: CALL_OW 331
// end ; end_of_file
25173: LD_VAR 0 4
25177: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25178: LD_INT 0
25180: PPUSH
25181: PPUSH
// if exist_mode then
25182: LD_VAR 0 2
25186: IFFALSE 25211
// unit := CreateCharacter ( prefix & ident ) else
25188: LD_ADDR_VAR 0 5
25192: PUSH
25193: LD_VAR 0 3
25197: PUSH
25198: LD_VAR 0 1
25202: STR
25203: PPUSH
25204: CALL_OW 34
25208: ST_TO_ADDR
25209: GO 25226
// unit := NewCharacter ( ident ) ;
25211: LD_ADDR_VAR 0 5
25215: PUSH
25216: LD_VAR 0 1
25220: PPUSH
25221: CALL_OW 25
25225: ST_TO_ADDR
// result := unit ;
25226: LD_ADDR_VAR 0 4
25230: PUSH
25231: LD_VAR 0 5
25235: ST_TO_ADDR
// end ;
25236: LD_VAR 0 4
25240: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// if not side or not nation then
25245: LD_VAR 0 1
25249: NOT
25250: PUSH
25251: LD_VAR 0 2
25255: NOT
25256: OR
25257: IFFALSE 25261
// exit ;
25259: GO 26029
// case nation of nation_american :
25261: LD_VAR 0 2
25265: PUSH
25266: LD_INT 1
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25488
25274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25275: LD_ADDR_VAR 0 4
25279: PUSH
25280: LD_INT 35
25282: PUSH
25283: LD_INT 45
25285: PUSH
25286: LD_INT 46
25288: PUSH
25289: LD_INT 47
25291: PUSH
25292: LD_INT 82
25294: PUSH
25295: LD_INT 83
25297: PUSH
25298: LD_INT 84
25300: PUSH
25301: LD_INT 85
25303: PUSH
25304: LD_INT 86
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: LD_INT 6
25315: PUSH
25316: LD_INT 15
25318: PUSH
25319: LD_INT 16
25321: PUSH
25322: LD_INT 7
25324: PUSH
25325: LD_INT 12
25327: PUSH
25328: LD_INT 13
25330: PUSH
25331: LD_INT 10
25333: PUSH
25334: LD_INT 14
25336: PUSH
25337: LD_INT 20
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 22
25345: PUSH
25346: LD_INT 25
25348: PUSH
25349: LD_INT 32
25351: PUSH
25352: LD_INT 27
25354: PUSH
25355: LD_INT 36
25357: PUSH
25358: LD_INT 69
25360: PUSH
25361: LD_INT 39
25363: PUSH
25364: LD_INT 34
25366: PUSH
25367: LD_INT 40
25369: PUSH
25370: LD_INT 48
25372: PUSH
25373: LD_INT 49
25375: PUSH
25376: LD_INT 50
25378: PUSH
25379: LD_INT 51
25381: PUSH
25382: LD_INT 52
25384: PUSH
25385: LD_INT 53
25387: PUSH
25388: LD_INT 54
25390: PUSH
25391: LD_INT 55
25393: PUSH
25394: LD_INT 56
25396: PUSH
25397: LD_INT 57
25399: PUSH
25400: LD_INT 58
25402: PUSH
25403: LD_INT 59
25405: PUSH
25406: LD_INT 60
25408: PUSH
25409: LD_INT 61
25411: PUSH
25412: LD_INT 62
25414: PUSH
25415: LD_INT 80
25417: PUSH
25418: LD_INT 82
25420: PUSH
25421: LD_INT 83
25423: PUSH
25424: LD_INT 84
25426: PUSH
25427: LD_INT 85
25429: PUSH
25430: LD_INT 86
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: ST_TO_ADDR
25486: GO 25953
25488: LD_INT 2
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25722
25496: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25497: LD_ADDR_VAR 0 4
25501: PUSH
25502: LD_INT 35
25504: PUSH
25505: LD_INT 45
25507: PUSH
25508: LD_INT 46
25510: PUSH
25511: LD_INT 47
25513: PUSH
25514: LD_INT 82
25516: PUSH
25517: LD_INT 83
25519: PUSH
25520: LD_INT 84
25522: PUSH
25523: LD_INT 85
25525: PUSH
25526: LD_INT 87
25528: PUSH
25529: LD_INT 70
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 11
25537: PUSH
25538: LD_INT 3
25540: PUSH
25541: LD_INT 4
25543: PUSH
25544: LD_INT 5
25546: PUSH
25547: LD_INT 6
25549: PUSH
25550: LD_INT 15
25552: PUSH
25553: LD_INT 18
25555: PUSH
25556: LD_INT 7
25558: PUSH
25559: LD_INT 17
25561: PUSH
25562: LD_INT 8
25564: PUSH
25565: LD_INT 20
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 22
25573: PUSH
25574: LD_INT 72
25576: PUSH
25577: LD_INT 26
25579: PUSH
25580: LD_INT 69
25582: PUSH
25583: LD_INT 39
25585: PUSH
25586: LD_INT 40
25588: PUSH
25589: LD_INT 41
25591: PUSH
25592: LD_INT 42
25594: PUSH
25595: LD_INT 43
25597: PUSH
25598: LD_INT 48
25600: PUSH
25601: LD_INT 49
25603: PUSH
25604: LD_INT 50
25606: PUSH
25607: LD_INT 51
25609: PUSH
25610: LD_INT 52
25612: PUSH
25613: LD_INT 53
25615: PUSH
25616: LD_INT 54
25618: PUSH
25619: LD_INT 55
25621: PUSH
25622: LD_INT 56
25624: PUSH
25625: LD_INT 60
25627: PUSH
25628: LD_INT 61
25630: PUSH
25631: LD_INT 62
25633: PUSH
25634: LD_INT 66
25636: PUSH
25637: LD_INT 67
25639: PUSH
25640: LD_INT 68
25642: PUSH
25643: LD_INT 81
25645: PUSH
25646: LD_INT 82
25648: PUSH
25649: LD_INT 83
25651: PUSH
25652: LD_INT 84
25654: PUSH
25655: LD_INT 85
25657: PUSH
25658: LD_INT 87
25660: PUSH
25661: LD_INT 88
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: ST_TO_ADDR
25720: GO 25953
25722: LD_INT 3
25724: DOUBLE
25725: EQUAL
25726: IFTRUE 25730
25728: GO 25952
25730: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25731: LD_ADDR_VAR 0 4
25735: PUSH
25736: LD_INT 46
25738: PUSH
25739: LD_INT 47
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 82
25750: PUSH
25751: LD_INT 83
25753: PUSH
25754: LD_INT 84
25756: PUSH
25757: LD_INT 85
25759: PUSH
25760: LD_INT 86
25762: PUSH
25763: LD_INT 11
25765: PUSH
25766: LD_INT 9
25768: PUSH
25769: LD_INT 20
25771: PUSH
25772: LD_INT 19
25774: PUSH
25775: LD_INT 21
25777: PUSH
25778: LD_INT 24
25780: PUSH
25781: LD_INT 22
25783: PUSH
25784: LD_INT 25
25786: PUSH
25787: LD_INT 28
25789: PUSH
25790: LD_INT 29
25792: PUSH
25793: LD_INT 30
25795: PUSH
25796: LD_INT 31
25798: PUSH
25799: LD_INT 37
25801: PUSH
25802: LD_INT 38
25804: PUSH
25805: LD_INT 32
25807: PUSH
25808: LD_INT 27
25810: PUSH
25811: LD_INT 33
25813: PUSH
25814: LD_INT 69
25816: PUSH
25817: LD_INT 39
25819: PUSH
25820: LD_INT 34
25822: PUSH
25823: LD_INT 40
25825: PUSH
25826: LD_INT 71
25828: PUSH
25829: LD_INT 23
25831: PUSH
25832: LD_INT 44
25834: PUSH
25835: LD_INT 48
25837: PUSH
25838: LD_INT 49
25840: PUSH
25841: LD_INT 50
25843: PUSH
25844: LD_INT 51
25846: PUSH
25847: LD_INT 52
25849: PUSH
25850: LD_INT 53
25852: PUSH
25853: LD_INT 54
25855: PUSH
25856: LD_INT 55
25858: PUSH
25859: LD_INT 56
25861: PUSH
25862: LD_INT 57
25864: PUSH
25865: LD_INT 58
25867: PUSH
25868: LD_INT 59
25870: PUSH
25871: LD_INT 63
25873: PUSH
25874: LD_INT 64
25876: PUSH
25877: LD_INT 65
25879: PUSH
25880: LD_INT 82
25882: PUSH
25883: LD_INT 83
25885: PUSH
25886: LD_INT 84
25888: PUSH
25889: LD_INT 85
25891: PUSH
25892: LD_INT 86
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: ST_TO_ADDR
25950: GO 25953
25952: POP
// if state > - 1 and state < 3 then
25953: LD_VAR 0 3
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: GREATER
25962: PUSH
25963: LD_VAR 0 3
25967: PUSH
25968: LD_INT 3
25970: LESS
25971: AND
25972: IFFALSE 26029
// for i in result do
25974: LD_ADDR_VAR 0 5
25978: PUSH
25979: LD_VAR 0 4
25983: PUSH
25984: FOR_IN
25985: IFFALSE 26027
// if GetTech ( i , side ) <> state then
25987: LD_VAR 0 5
25991: PPUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: CALL_OW 321
26001: PUSH
26002: LD_VAR 0 3
26006: NONEQUAL
26007: IFFALSE 26025
// result := result diff i ;
26009: LD_ADDR_VAR 0 4
26013: PUSH
26014: LD_VAR 0 4
26018: PUSH
26019: LD_VAR 0 5
26023: DIFF
26024: ST_TO_ADDR
26025: GO 25984
26027: POP
26028: POP
// end ;
26029: LD_VAR 0 4
26033: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
26038: PPUSH
// result := true ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_INT 1
26046: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26047: LD_ADDR_VAR 0 5
26051: PUSH
26052: LD_VAR 0 2
26056: PPUSH
26057: CALL_OW 480
26061: ST_TO_ADDR
// if not tmp then
26062: LD_VAR 0 5
26066: NOT
26067: IFFALSE 26071
// exit ;
26069: GO 26120
// for i in tmp do
26071: LD_ADDR_VAR 0 4
26075: PUSH
26076: LD_VAR 0 5
26080: PUSH
26081: FOR_IN
26082: IFFALSE 26118
// if GetTech ( i , side ) <> state_researched then
26084: LD_VAR 0 4
26088: PPUSH
26089: LD_VAR 0 1
26093: PPUSH
26094: CALL_OW 321
26098: PUSH
26099: LD_INT 2
26101: NONEQUAL
26102: IFFALSE 26116
// begin result := false ;
26104: LD_ADDR_VAR 0 3
26108: PUSH
26109: LD_INT 0
26111: ST_TO_ADDR
// exit ;
26112: POP
26113: POP
26114: GO 26120
// end ;
26116: GO 26081
26118: POP
26119: POP
// end ;
26120: LD_VAR 0 3
26124: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26140: LD_VAR 0 1
26144: NOT
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 257
26155: PUSH
26156: LD_INT 9
26158: NONEQUAL
26159: OR
26160: IFFALSE 26164
// exit ;
26162: GO 26737
// side := GetSide ( unit ) ;
26164: LD_ADDR_VAR 0 9
26168: PUSH
26169: LD_VAR 0 1
26173: PPUSH
26174: CALL_OW 255
26178: ST_TO_ADDR
// tech_space := tech_spacanom ;
26179: LD_ADDR_VAR 0 12
26183: PUSH
26184: LD_INT 29
26186: ST_TO_ADDR
// tech_time := tech_taurad ;
26187: LD_ADDR_VAR 0 13
26191: PUSH
26192: LD_INT 28
26194: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26195: LD_ADDR_VAR 0 11
26199: PUSH
26200: LD_VAR 0 1
26204: PPUSH
26205: CALL_OW 310
26209: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26210: LD_VAR 0 11
26214: PPUSH
26215: CALL_OW 247
26219: PUSH
26220: LD_INT 2
26222: EQUAL
26223: IFFALSE 26227
// exit ;
26225: GO 26737
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26227: LD_ADDR_VAR 0 8
26231: PUSH
26232: LD_INT 81
26234: PUSH
26235: LD_VAR 0 9
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: LD_INT 21
26249: PUSH
26250: LD_INT 3
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PPUSH
26265: CALL_OW 69
26269: ST_TO_ADDR
// if not tmp then
26270: LD_VAR 0 8
26274: NOT
26275: IFFALSE 26279
// exit ;
26277: GO 26737
// if in_unit then
26279: LD_VAR 0 11
26283: IFFALSE 26307
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26285: LD_ADDR_VAR 0 10
26289: PUSH
26290: LD_VAR 0 8
26294: PPUSH
26295: LD_VAR 0 11
26299: PPUSH
26300: CALL_OW 74
26304: ST_TO_ADDR
26305: GO 26327
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26307: LD_ADDR_VAR 0 10
26311: PUSH
26312: LD_VAR 0 8
26316: PPUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 74
26326: ST_TO_ADDR
// if not enemy then
26327: LD_VAR 0 10
26331: NOT
26332: IFFALSE 26336
// exit ;
26334: GO 26737
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26336: LD_VAR 0 11
26340: PUSH
26341: LD_VAR 0 11
26345: PPUSH
26346: LD_VAR 0 10
26350: PPUSH
26351: CALL_OW 296
26355: PUSH
26356: LD_INT 13
26358: GREATER
26359: AND
26360: PUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: LD_VAR 0 10
26370: PPUSH
26371: CALL_OW 296
26375: PUSH
26376: LD_INT 12
26378: GREATER
26379: OR
26380: IFFALSE 26384
// exit ;
26382: GO 26737
// missile := [ 1 ] ;
26384: LD_ADDR_VAR 0 14
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26395: LD_VAR 0 9
26399: PPUSH
26400: LD_VAR 0 12
26404: PPUSH
26405: CALL_OW 325
26409: IFFALSE 26438
// missile := Replace ( missile , missile + 1 , 2 ) ;
26411: LD_ADDR_VAR 0 14
26415: PUSH
26416: LD_VAR 0 14
26420: PPUSH
26421: LD_VAR 0 14
26425: PUSH
26426: LD_INT 1
26428: PLUS
26429: PPUSH
26430: LD_INT 2
26432: PPUSH
26433: CALL_OW 1
26437: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26438: LD_VAR 0 9
26442: PPUSH
26443: LD_VAR 0 13
26447: PPUSH
26448: CALL_OW 325
26452: PUSH
26453: LD_VAR 0 10
26457: PPUSH
26458: CALL_OW 255
26462: PPUSH
26463: LD_VAR 0 13
26467: PPUSH
26468: CALL_OW 325
26472: NOT
26473: AND
26474: IFFALSE 26503
// missile := Replace ( missile , missile + 1 , 3 ) ;
26476: LD_ADDR_VAR 0 14
26480: PUSH
26481: LD_VAR 0 14
26485: PPUSH
26486: LD_VAR 0 14
26490: PUSH
26491: LD_INT 1
26493: PLUS
26494: PPUSH
26495: LD_INT 3
26497: PPUSH
26498: CALL_OW 1
26502: ST_TO_ADDR
// if missile < 2 then
26503: LD_VAR 0 14
26507: PUSH
26508: LD_INT 2
26510: LESS
26511: IFFALSE 26515
// exit ;
26513: GO 26737
// x := GetX ( enemy ) ;
26515: LD_ADDR_VAR 0 4
26519: PUSH
26520: LD_VAR 0 10
26524: PPUSH
26525: CALL_OW 250
26529: ST_TO_ADDR
// y := GetY ( enemy ) ;
26530: LD_ADDR_VAR 0 5
26534: PUSH
26535: LD_VAR 0 10
26539: PPUSH
26540: CALL_OW 251
26544: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26545: LD_ADDR_VAR 0 6
26549: PUSH
26550: LD_VAR 0 4
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PPUSH
26559: LD_INT 1
26561: PPUSH
26562: CALL_OW 12
26566: PLUS
26567: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26568: LD_ADDR_VAR 0 7
26572: PUSH
26573: LD_VAR 0 5
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PPUSH
26582: LD_INT 1
26584: PPUSH
26585: CALL_OW 12
26589: PLUS
26590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26591: LD_VAR 0 6
26595: PPUSH
26596: LD_VAR 0 7
26600: PPUSH
26601: CALL_OW 488
26605: NOT
26606: IFFALSE 26628
// begin _x := x ;
26608: LD_ADDR_VAR 0 6
26612: PUSH
26613: LD_VAR 0 4
26617: ST_TO_ADDR
// _y := y ;
26618: LD_ADDR_VAR 0 7
26622: PUSH
26623: LD_VAR 0 5
26627: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26628: LD_ADDR_VAR 0 3
26632: PUSH
26633: LD_INT 1
26635: PPUSH
26636: LD_VAR 0 14
26640: PPUSH
26641: CALL_OW 12
26645: ST_TO_ADDR
// case i of 1 :
26646: LD_VAR 0 3
26650: PUSH
26651: LD_INT 1
26653: DOUBLE
26654: EQUAL
26655: IFTRUE 26659
26657: GO 26676
26659: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26660: LD_VAR 0 1
26664: PPUSH
26665: LD_VAR 0 10
26669: PPUSH
26670: CALL_OW 115
26674: GO 26737
26676: LD_INT 2
26678: DOUBLE
26679: EQUAL
26680: IFTRUE 26684
26682: GO 26706
26684: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26685: LD_VAR 0 1
26689: PPUSH
26690: LD_VAR 0 6
26694: PPUSH
26695: LD_VAR 0 7
26699: PPUSH
26700: CALL_OW 153
26704: GO 26737
26706: LD_INT 3
26708: DOUBLE
26709: EQUAL
26710: IFTRUE 26714
26712: GO 26736
26714: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26715: LD_VAR 0 1
26719: PPUSH
26720: LD_VAR 0 6
26724: PPUSH
26725: LD_VAR 0 7
26729: PPUSH
26730: CALL_OW 154
26734: GO 26737
26736: POP
// end ;
26737: LD_VAR 0 2
26741: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
// if not unit or not building then
26750: LD_VAR 0 1
26754: NOT
26755: PUSH
26756: LD_VAR 0 2
26760: NOT
26761: OR
26762: IFFALSE 26766
// exit ;
26764: GO 26924
// x := GetX ( building ) ;
26766: LD_ADDR_VAR 0 5
26770: PUSH
26771: LD_VAR 0 2
26775: PPUSH
26776: CALL_OW 250
26780: ST_TO_ADDR
// y := GetY ( building ) ;
26781: LD_ADDR_VAR 0 6
26785: PUSH
26786: LD_VAR 0 2
26790: PPUSH
26791: CALL_OW 251
26795: ST_TO_ADDR
// for i = 0 to 5 do
26796: LD_ADDR_VAR 0 4
26800: PUSH
26801: DOUBLE
26802: LD_INT 0
26804: DEC
26805: ST_TO_ADDR
26806: LD_INT 5
26808: PUSH
26809: FOR_TO
26810: IFFALSE 26922
// begin _x := ShiftX ( x , i , 3 ) ;
26812: LD_ADDR_VAR 0 7
26816: PUSH
26817: LD_VAR 0 5
26821: PPUSH
26822: LD_VAR 0 4
26826: PPUSH
26827: LD_INT 3
26829: PPUSH
26830: CALL_OW 272
26834: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26835: LD_ADDR_VAR 0 8
26839: PUSH
26840: LD_VAR 0 6
26844: PPUSH
26845: LD_VAR 0 4
26849: PPUSH
26850: LD_INT 3
26852: PPUSH
26853: CALL_OW 273
26857: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26858: LD_VAR 0 7
26862: PPUSH
26863: LD_VAR 0 8
26867: PPUSH
26868: CALL_OW 488
26872: NOT
26873: IFFALSE 26877
// continue ;
26875: GO 26809
// if HexInfo ( _x , _y ) = 0 then
26877: LD_VAR 0 7
26881: PPUSH
26882: LD_VAR 0 8
26886: PPUSH
26887: CALL_OW 428
26891: PUSH
26892: LD_INT 0
26894: EQUAL
26895: IFFALSE 26920
// begin ComMoveXY ( unit , _x , _y ) ;
26897: LD_VAR 0 1
26901: PPUSH
26902: LD_VAR 0 7
26906: PPUSH
26907: LD_VAR 0 8
26911: PPUSH
26912: CALL_OW 111
// exit ;
26916: POP
26917: POP
26918: GO 26924
// end ; end ;
26920: GO 26809
26922: POP
26923: POP
// end ;
26924: LD_VAR 0 3
26928: RET
// export function ScanBase ( side , base_area ) ; begin
26929: LD_INT 0
26931: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26932: LD_ADDR_VAR 0 3
26936: PUSH
26937: LD_VAR 0 2
26941: PPUSH
26942: LD_INT 81
26944: PUSH
26945: LD_VAR 0 1
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PPUSH
26954: CALL_OW 70
26958: ST_TO_ADDR
// end ;
26959: LD_VAR 0 3
26963: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26964: LD_INT 0
26966: PPUSH
26967: PPUSH
26968: PPUSH
26969: PPUSH
// result := false ;
26970: LD_ADDR_VAR 0 2
26974: PUSH
26975: LD_INT 0
26977: ST_TO_ADDR
// side := GetSide ( unit ) ;
26978: LD_ADDR_VAR 0 3
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 255
26992: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26993: LD_ADDR_VAR 0 4
26997: PUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL_OW 248
27007: ST_TO_ADDR
// case nat of 1 :
27008: LD_VAR 0 4
27012: PUSH
27013: LD_INT 1
27015: DOUBLE
27016: EQUAL
27017: IFTRUE 27021
27019: GO 27032
27021: POP
// tech := tech_lassight ; 2 :
27022: LD_ADDR_VAR 0 5
27026: PUSH
27027: LD_INT 12
27029: ST_TO_ADDR
27030: GO 27071
27032: LD_INT 2
27034: DOUBLE
27035: EQUAL
27036: IFTRUE 27040
27038: GO 27051
27040: POP
// tech := tech_mortar ; 3 :
27041: LD_ADDR_VAR 0 5
27045: PUSH
27046: LD_INT 41
27048: ST_TO_ADDR
27049: GO 27071
27051: LD_INT 3
27053: DOUBLE
27054: EQUAL
27055: IFTRUE 27059
27057: GO 27070
27059: POP
// tech := tech_bazooka ; end ;
27060: LD_ADDR_VAR 0 5
27064: PUSH
27065: LD_INT 44
27067: ST_TO_ADDR
27068: GO 27071
27070: POP
// if Researched ( side , tech ) then
27071: LD_VAR 0 3
27075: PPUSH
27076: LD_VAR 0 5
27080: PPUSH
27081: CALL_OW 325
27085: IFFALSE 27112
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27087: LD_ADDR_VAR 0 2
27091: PUSH
27092: LD_INT 5
27094: PUSH
27095: LD_INT 8
27097: PUSH
27098: LD_INT 9
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: PUSH
27106: LD_VAR 0 4
27110: ARRAY
27111: ST_TO_ADDR
// end ;
27112: LD_VAR 0 2
27116: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
27121: PPUSH
// if not mines then
27122: LD_VAR 0 2
27126: NOT
27127: IFFALSE 27131
// exit ;
27129: GO 27275
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27131: LD_ADDR_VAR 0 5
27135: PUSH
27136: LD_INT 81
27138: PUSH
27139: LD_VAR 0 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 21
27153: PUSH
27154: LD_INT 3
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PPUSH
27169: CALL_OW 69
27173: ST_TO_ADDR
// for i in mines do
27174: LD_ADDR_VAR 0 4
27178: PUSH
27179: LD_VAR 0 2
27183: PUSH
27184: FOR_IN
27185: IFFALSE 27273
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27187: LD_VAR 0 4
27191: PUSH
27192: LD_INT 1
27194: ARRAY
27195: PPUSH
27196: LD_VAR 0 4
27200: PUSH
27201: LD_INT 2
27203: ARRAY
27204: PPUSH
27205: CALL_OW 458
27209: NOT
27210: IFFALSE 27214
// continue ;
27212: GO 27184
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27214: LD_VAR 0 4
27218: PUSH
27219: LD_INT 1
27221: ARRAY
27222: PPUSH
27223: LD_VAR 0 4
27227: PUSH
27228: LD_INT 2
27230: ARRAY
27231: PPUSH
27232: CALL_OW 428
27236: PUSH
27237: LD_VAR 0 5
27241: IN
27242: IFFALSE 27271
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27244: LD_VAR 0 4
27248: PUSH
27249: LD_INT 1
27251: ARRAY
27252: PPUSH
27253: LD_VAR 0 4
27257: PUSH
27258: LD_INT 2
27260: ARRAY
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 456
// end ;
27271: GO 27184
27273: POP
27274: POP
// end ;
27275: LD_VAR 0 3
27279: RET
// export function Count ( array ) ; begin
27280: LD_INT 0
27282: PPUSH
// result := array + 0 ;
27283: LD_ADDR_VAR 0 2
27287: PUSH
27288: LD_VAR 0 1
27292: PUSH
27293: LD_INT 0
27295: PLUS
27296: ST_TO_ADDR
// end ;
27297: LD_VAR 0 2
27301: RET
// export function IsEmpty ( building ) ; begin
27302: LD_INT 0
27304: PPUSH
// if not building then
27305: LD_VAR 0 1
27309: NOT
27310: IFFALSE 27314
// exit ;
27312: GO 27357
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27314: LD_ADDR_VAR 0 2
27318: PUSH
27319: LD_VAR 0 1
27323: PUSH
27324: LD_INT 22
27326: PUSH
27327: LD_VAR 0 1
27331: PPUSH
27332: CALL_OW 255
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 58
27343: PUSH
27344: EMPTY
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PPUSH
27351: CALL_OW 69
27355: IN
27356: ST_TO_ADDR
// end ;
27357: LD_VAR 0 2
27361: RET
// export function IsNotFull ( building ) ; var places ; begin
27362: LD_INT 0
27364: PPUSH
27365: PPUSH
// if not building then
27366: LD_VAR 0 1
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27403
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27375: LD_ADDR_VAR 0 2
27379: PUSH
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_INT 3
27387: PUSH
27388: LD_INT 62
27390: PUSH
27391: EMPTY
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PPUSH
27398: CALL_OW 72
27402: ST_TO_ADDR
// end ;
27403: LD_VAR 0 2
27407: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27408: LD_INT 0
27410: PPUSH
27411: PPUSH
27412: PPUSH
27413: PPUSH
// tmp := [ ] ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: EMPTY
27420: ST_TO_ADDR
// list := [ ] ;
27421: LD_ADDR_VAR 0 5
27425: PUSH
27426: EMPTY
27427: ST_TO_ADDR
// for i = 16 to 25 do
27428: LD_ADDR_VAR 0 4
27432: PUSH
27433: DOUBLE
27434: LD_INT 16
27436: DEC
27437: ST_TO_ADDR
27438: LD_INT 25
27440: PUSH
27441: FOR_TO
27442: IFFALSE 27515
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27444: LD_ADDR_VAR 0 3
27448: PUSH
27449: LD_VAR 0 3
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_VAR 0 1
27461: PPUSH
27462: CALL_OW 255
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 91
27473: PUSH
27474: LD_VAR 0 1
27478: PUSH
27479: LD_INT 6
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 30
27489: PUSH
27490: LD_VAR 0 4
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: PPUSH
27507: CALL_OW 69
27511: ADD
27512: ST_TO_ADDR
27513: GO 27441
27515: POP
27516: POP
// for i = 1 to tmp do
27517: LD_ADDR_VAR 0 4
27521: PUSH
27522: DOUBLE
27523: LD_INT 1
27525: DEC
27526: ST_TO_ADDR
27527: LD_VAR 0 3
27531: PUSH
27532: FOR_TO
27533: IFFALSE 27621
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27535: LD_ADDR_VAR 0 5
27539: PUSH
27540: LD_VAR 0 5
27544: PUSH
27545: LD_VAR 0 3
27549: PUSH
27550: LD_VAR 0 4
27554: ARRAY
27555: PPUSH
27556: CALL_OW 266
27560: PUSH
27561: LD_VAR 0 3
27565: PUSH
27566: LD_VAR 0 4
27570: ARRAY
27571: PPUSH
27572: CALL_OW 250
27576: PUSH
27577: LD_VAR 0 3
27581: PUSH
27582: LD_VAR 0 4
27586: ARRAY
27587: PPUSH
27588: CALL_OW 251
27592: PUSH
27593: LD_VAR 0 3
27597: PUSH
27598: LD_VAR 0 4
27602: ARRAY
27603: PPUSH
27604: CALL_OW 254
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: ADD
27618: ST_TO_ADDR
27619: GO 27532
27621: POP
27622: POP
// result := list ;
27623: LD_ADDR_VAR 0 2
27627: PUSH
27628: LD_VAR 0 5
27632: ST_TO_ADDR
// end ;
27633: LD_VAR 0 2
27637: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
// if not factory then
27647: LD_VAR 0 1
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 28249
// if control = control_apeman then
27656: LD_VAR 0 4
27660: PUSH
27661: LD_INT 5
27663: EQUAL
27664: IFFALSE 27773
// begin tmp := UnitsInside ( factory ) ;
27666: LD_ADDR_VAR 0 8
27670: PUSH
27671: LD_VAR 0 1
27675: PPUSH
27676: CALL_OW 313
27680: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27681: LD_VAR 0 8
27685: PPUSH
27686: LD_INT 25
27688: PUSH
27689: LD_INT 12
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PPUSH
27696: CALL_OW 72
27700: NOT
27701: IFFALSE 27711
// control := control_manual ;
27703: LD_ADDR_VAR 0 4
27707: PUSH
27708: LD_INT 1
27710: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27711: LD_ADDR_VAR 0 8
27715: PUSH
27716: LD_VAR 0 1
27720: PPUSH
27721: CALL 27408 0 1
27725: ST_TO_ADDR
// if tmp then
27726: LD_VAR 0 8
27730: IFFALSE 27773
// begin for i in tmp do
27732: LD_ADDR_VAR 0 7
27736: PUSH
27737: LD_VAR 0 8
27741: PUSH
27742: FOR_IN
27743: IFFALSE 27771
// if i [ 1 ] = b_ext_radio then
27745: LD_VAR 0 7
27749: PUSH
27750: LD_INT 1
27752: ARRAY
27753: PUSH
27754: LD_INT 22
27756: EQUAL
27757: IFFALSE 27769
// begin control := control_remote ;
27759: LD_ADDR_VAR 0 4
27763: PUSH
27764: LD_INT 2
27766: ST_TO_ADDR
// break ;
27767: GO 27771
// end ;
27769: GO 27742
27771: POP
27772: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_VAR 0 2
27782: PPUSH
27783: LD_VAR 0 3
27787: PPUSH
27788: LD_VAR 0 4
27792: PPUSH
27793: LD_VAR 0 5
27797: PPUSH
27798: CALL_OW 448
27802: IFFALSE 27837
// begin result := [ chassis , engine , control , weapon ] ;
27804: LD_ADDR_VAR 0 6
27808: PUSH
27809: LD_VAR 0 2
27813: PUSH
27814: LD_VAR 0 3
27818: PUSH
27819: LD_VAR 0 4
27823: PUSH
27824: LD_VAR 0 5
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// exit ;
27835: GO 28249
// end ; _chassis := AvailableChassisList ( factory ) ;
27837: LD_ADDR_VAR 0 9
27841: PUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 475
27851: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27852: LD_ADDR_VAR 0 11
27856: PUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: CALL_OW 476
27866: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27867: LD_ADDR_VAR 0 12
27871: PUSH
27872: LD_VAR 0 1
27876: PPUSH
27877: CALL_OW 477
27881: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27882: LD_ADDR_VAR 0 10
27886: PUSH
27887: LD_VAR 0 1
27891: PPUSH
27892: CALL_OW 478
27896: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27897: LD_VAR 0 9
27901: NOT
27902: PUSH
27903: LD_VAR 0 11
27907: NOT
27908: OR
27909: PUSH
27910: LD_VAR 0 12
27914: NOT
27915: OR
27916: PUSH
27917: LD_VAR 0 10
27921: NOT
27922: OR
27923: IFFALSE 27958
// begin result := [ chassis , engine , control , weapon ] ;
27925: LD_ADDR_VAR 0 6
27929: PUSH
27930: LD_VAR 0 2
27934: PUSH
27935: LD_VAR 0 3
27939: PUSH
27940: LD_VAR 0 4
27944: PUSH
27945: LD_VAR 0 5
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: ST_TO_ADDR
// exit ;
27956: GO 28249
// end ; if not chassis in _chassis then
27958: LD_VAR 0 2
27962: PUSH
27963: LD_VAR 0 9
27967: IN
27968: NOT
27969: IFFALSE 27995
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27971: LD_ADDR_VAR 0 2
27975: PUSH
27976: LD_VAR 0 9
27980: PUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_VAR 0 9
27988: PPUSH
27989: CALL_OW 12
27993: ARRAY
27994: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27995: LD_VAR 0 2
27999: PPUSH
28000: LD_VAR 0 3
28004: PPUSH
28005: CALL 28254 0 2
28009: NOT
28010: IFFALSE 28069
// repeat engine := _engine [ 1 ] ;
28012: LD_ADDR_VAR 0 3
28016: PUSH
28017: LD_VAR 0 11
28021: PUSH
28022: LD_INT 1
28024: ARRAY
28025: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28026: LD_ADDR_VAR 0 11
28030: PUSH
28031: LD_VAR 0 11
28035: PPUSH
28036: LD_INT 1
28038: PPUSH
28039: CALL_OW 3
28043: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28044: LD_VAR 0 2
28048: PPUSH
28049: LD_VAR 0 3
28053: PPUSH
28054: CALL 28254 0 2
28058: PUSH
28059: LD_VAR 0 11
28063: PUSH
28064: EMPTY
28065: EQUAL
28066: OR
28067: IFFALSE 28012
// if not control in _control then
28069: LD_VAR 0 4
28073: PUSH
28074: LD_VAR 0 12
28078: IN
28079: NOT
28080: IFFALSE 28106
// control := _control [ rand ( 1 , _control ) ] ;
28082: LD_ADDR_VAR 0 4
28086: PUSH
28087: LD_VAR 0 12
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_VAR 0 12
28099: PPUSH
28100: CALL_OW 12
28104: ARRAY
28105: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28106: LD_VAR 0 2
28110: PPUSH
28111: LD_VAR 0 5
28115: PPUSH
28116: CALL 28474 0 2
28120: NOT
28121: IFFALSE 28180
// repeat weapon := _weapon [ 1 ] ;
28123: LD_ADDR_VAR 0 5
28127: PUSH
28128: LD_VAR 0 10
28132: PUSH
28133: LD_INT 1
28135: ARRAY
28136: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28137: LD_ADDR_VAR 0 10
28141: PUSH
28142: LD_VAR 0 10
28146: PPUSH
28147: LD_INT 1
28149: PPUSH
28150: CALL_OW 3
28154: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28155: LD_VAR 0 2
28159: PPUSH
28160: LD_VAR 0 5
28164: PPUSH
28165: CALL 28474 0 2
28169: PUSH
28170: LD_VAR 0 10
28174: PUSH
28175: EMPTY
28176: EQUAL
28177: OR
28178: IFFALSE 28123
// result := [ ] ;
28180: LD_ADDR_VAR 0 6
28184: PUSH
28185: EMPTY
28186: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28187: LD_VAR 0 1
28191: PPUSH
28192: LD_VAR 0 2
28196: PPUSH
28197: LD_VAR 0 3
28201: PPUSH
28202: LD_VAR 0 4
28206: PPUSH
28207: LD_VAR 0 5
28211: PPUSH
28212: CALL_OW 448
28216: IFFALSE 28249
// result := [ chassis , engine , control , weapon ] ;
28218: LD_ADDR_VAR 0 6
28222: PUSH
28223: LD_VAR 0 2
28227: PUSH
28228: LD_VAR 0 3
28232: PUSH
28233: LD_VAR 0 4
28237: PUSH
28238: LD_VAR 0 5
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: ST_TO_ADDR
// end ;
28249: LD_VAR 0 6
28253: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28254: LD_INT 0
28256: PPUSH
// if not chassis or not engine then
28257: LD_VAR 0 1
28261: NOT
28262: PUSH
28263: LD_VAR 0 2
28267: NOT
28268: OR
28269: IFFALSE 28273
// exit ;
28271: GO 28469
// case engine of engine_solar :
28273: LD_VAR 0 2
28277: PUSH
28278: LD_INT 2
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28286
28284: GO 28324
28286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28287: LD_ADDR_VAR 0 3
28291: PUSH
28292: LD_INT 11
28294: PUSH
28295: LD_INT 12
28297: PUSH
28298: LD_INT 13
28300: PUSH
28301: LD_INT 14
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 3
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
28322: GO 28453
28324: LD_INT 1
28326: DOUBLE
28327: EQUAL
28328: IFTRUE 28332
28330: GO 28394
28332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28333: LD_ADDR_VAR 0 3
28337: PUSH
28338: LD_INT 11
28340: PUSH
28341: LD_INT 12
28343: PUSH
28344: LD_INT 13
28346: PUSH
28347: LD_INT 14
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: LD_INT 4
28361: PUSH
28362: LD_INT 5
28364: PUSH
28365: LD_INT 21
28367: PUSH
28368: LD_INT 23
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: LD_INT 24
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
28392: GO 28453
28394: LD_INT 3
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28452
28402: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: LD_INT 13
28410: PUSH
28411: LD_INT 14
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 3
28419: PUSH
28420: LD_INT 4
28422: PUSH
28423: LD_INT 5
28425: PUSH
28426: LD_INT 21
28428: PUSH
28429: LD_INT 22
28431: PUSH
28432: LD_INT 23
28434: PUSH
28435: LD_INT 24
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
28450: GO 28453
28452: POP
// result := ( chassis in result ) ;
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_VAR 0 1
28462: PUSH
28463: LD_VAR 0 3
28467: IN
28468: ST_TO_ADDR
// end ;
28469: LD_VAR 0 3
28473: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28474: LD_INT 0
28476: PPUSH
// if not chassis or not weapon then
28477: LD_VAR 0 1
28481: NOT
28482: PUSH
28483: LD_VAR 0 2
28487: NOT
28488: OR
28489: IFFALSE 28493
// exit ;
28491: GO 29553
// case weapon of us_machine_gun :
28493: LD_VAR 0 2
28497: PUSH
28498: LD_INT 2
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28536
28506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 3
28520: PUSH
28521: LD_INT 4
28523: PUSH
28524: LD_INT 5
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
28534: GO 29537
28536: LD_INT 3
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28544
28542: GO 28574
28544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: LD_INT 3
28558: PUSH
28559: LD_INT 4
28561: PUSH
28562: LD_INT 5
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: ST_TO_ADDR
28572: GO 29537
28574: LD_INT 11
28576: DOUBLE
28577: EQUAL
28578: IFTRUE 28582
28580: GO 28612
28582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: LD_INT 3
28596: PUSH
28597: LD_INT 4
28599: PUSH
28600: LD_INT 5
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
28610: GO 29537
28612: LD_INT 4
28614: DOUBLE
28615: EQUAL
28616: IFTRUE 28620
28618: GO 28646
28620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28621: LD_ADDR_VAR 0 3
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: LD_INT 3
28631: PUSH
28632: LD_INT 4
28634: PUSH
28635: LD_INT 5
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
28644: GO 29537
28646: LD_INT 5
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28680
28654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28655: LD_ADDR_VAR 0 3
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: LD_INT 4
28668: PUSH
28669: LD_INT 5
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: ST_TO_ADDR
28678: GO 29537
28680: LD_INT 9
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28688
28686: GO 28714
28688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28689: LD_ADDR_VAR 0 3
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: LD_INT 4
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: ST_TO_ADDR
28712: GO 29537
28714: LD_INT 7
28716: DOUBLE
28717: EQUAL
28718: IFTRUE 28722
28720: GO 28748
28722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28723: LD_ADDR_VAR 0 3
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: LD_INT 3
28733: PUSH
28734: LD_INT 4
28736: PUSH
28737: LD_INT 5
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
28746: GO 29537
28748: LD_INT 12
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 28782
28756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28757: LD_ADDR_VAR 0 3
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: LD_INT 4
28770: PUSH
28771: LD_INT 5
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: ST_TO_ADDR
28780: GO 29537
28782: LD_INT 13
28784: DOUBLE
28785: EQUAL
28786: IFTRUE 28790
28788: GO 28816
28790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28791: LD_ADDR_VAR 0 3
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: LD_INT 3
28801: PUSH
28802: LD_INT 4
28804: PUSH
28805: LD_INT 5
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: ST_TO_ADDR
28814: GO 29537
28816: LD_INT 14
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28842
28824: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28825: LD_ADDR_VAR 0 3
28829: PUSH
28830: LD_INT 4
28832: PUSH
28833: LD_INT 5
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: ST_TO_ADDR
28840: GO 29537
28842: LD_INT 6
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28868
28850: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28851: LD_ADDR_VAR 0 3
28855: PUSH
28856: LD_INT 4
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: ST_TO_ADDR
28866: GO 29537
28868: LD_INT 10
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 28894
28876: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28877: LD_ADDR_VAR 0 3
28881: PUSH
28882: LD_INT 4
28884: PUSH
28885: LD_INT 5
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: ST_TO_ADDR
28892: GO 29537
28894: LD_INT 22
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28902
28900: GO 28928
28902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28903: LD_ADDR_VAR 0 3
28907: PUSH
28908: LD_INT 11
28910: PUSH
28911: LD_INT 12
28913: PUSH
28914: LD_INT 13
28916: PUSH
28917: LD_INT 14
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
28926: GO 29537
28928: LD_INT 23
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28936
28934: GO 28962
28936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28937: LD_ADDR_VAR 0 3
28941: PUSH
28942: LD_INT 11
28944: PUSH
28945: LD_INT 12
28947: PUSH
28948: LD_INT 13
28950: PUSH
28951: LD_INT 14
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: ST_TO_ADDR
28960: GO 29537
28962: LD_INT 24
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 28996
28970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28971: LD_ADDR_VAR 0 3
28975: PUSH
28976: LD_INT 11
28978: PUSH
28979: LD_INT 12
28981: PUSH
28982: LD_INT 13
28984: PUSH
28985: LD_INT 14
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: ST_TO_ADDR
28994: GO 29537
28996: LD_INT 30
28998: DOUBLE
28999: EQUAL
29000: IFTRUE 29004
29002: GO 29030
29004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29005: LD_ADDR_VAR 0 3
29009: PUSH
29010: LD_INT 11
29012: PUSH
29013: LD_INT 12
29015: PUSH
29016: LD_INT 13
29018: PUSH
29019: LD_INT 14
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: ST_TO_ADDR
29028: GO 29537
29030: LD_INT 25
29032: DOUBLE
29033: EQUAL
29034: IFTRUE 29038
29036: GO 29056
29038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29039: LD_ADDR_VAR 0 3
29043: PUSH
29044: LD_INT 13
29046: PUSH
29047: LD_INT 14
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: ST_TO_ADDR
29054: GO 29537
29056: LD_INT 27
29058: DOUBLE
29059: EQUAL
29060: IFTRUE 29064
29062: GO 29082
29064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29065: LD_ADDR_VAR 0 3
29069: PUSH
29070: LD_INT 13
29072: PUSH
29073: LD_INT 14
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: ST_TO_ADDR
29080: GO 29537
29082: LD_INT 92
29084: DOUBLE
29085: EQUAL
29086: IFTRUE 29090
29088: GO 29116
29090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: LD_INT 11
29098: PUSH
29099: LD_INT 12
29101: PUSH
29102: LD_INT 13
29104: PUSH
29105: LD_INT 14
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
29114: GO 29537
29116: LD_INT 28
29118: DOUBLE
29119: EQUAL
29120: IFTRUE 29124
29122: GO 29142
29124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29125: LD_ADDR_VAR 0 3
29129: PUSH
29130: LD_INT 13
29132: PUSH
29133: LD_INT 14
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: ST_TO_ADDR
29140: GO 29537
29142: LD_INT 29
29144: DOUBLE
29145: EQUAL
29146: IFTRUE 29150
29148: GO 29168
29150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29151: LD_ADDR_VAR 0 3
29155: PUSH
29156: LD_INT 13
29158: PUSH
29159: LD_INT 14
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: ST_TO_ADDR
29166: GO 29537
29168: LD_INT 31
29170: DOUBLE
29171: EQUAL
29172: IFTRUE 29176
29174: GO 29194
29176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: LD_INT 13
29184: PUSH
29185: LD_INT 14
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: ST_TO_ADDR
29192: GO 29537
29194: LD_INT 26
29196: DOUBLE
29197: EQUAL
29198: IFTRUE 29202
29200: GO 29220
29202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: LD_INT 13
29210: PUSH
29211: LD_INT 14
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: ST_TO_ADDR
29218: GO 29537
29220: LD_INT 42
29222: DOUBLE
29223: EQUAL
29224: IFTRUE 29228
29226: GO 29254
29228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29229: LD_ADDR_VAR 0 3
29233: PUSH
29234: LD_INT 21
29236: PUSH
29237: LD_INT 22
29239: PUSH
29240: LD_INT 23
29242: PUSH
29243: LD_INT 24
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
29252: GO 29537
29254: LD_INT 43
29256: DOUBLE
29257: EQUAL
29258: IFTRUE 29262
29260: GO 29288
29262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29263: LD_ADDR_VAR 0 3
29267: PUSH
29268: LD_INT 21
29270: PUSH
29271: LD_INT 22
29273: PUSH
29274: LD_INT 23
29276: PUSH
29277: LD_INT 24
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
29286: GO 29537
29288: LD_INT 44
29290: DOUBLE
29291: EQUAL
29292: IFTRUE 29296
29294: GO 29322
29296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29297: LD_ADDR_VAR 0 3
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 22
29307: PUSH
29308: LD_INT 23
29310: PUSH
29311: LD_INT 24
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: ST_TO_ADDR
29320: GO 29537
29322: LD_INT 45
29324: DOUBLE
29325: EQUAL
29326: IFTRUE 29330
29328: GO 29356
29330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: LD_INT 21
29338: PUSH
29339: LD_INT 22
29341: PUSH
29342: LD_INT 23
29344: PUSH
29345: LD_INT 24
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
29354: GO 29537
29356: LD_INT 49
29358: DOUBLE
29359: EQUAL
29360: IFTRUE 29364
29362: GO 29390
29364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29365: LD_ADDR_VAR 0 3
29369: PUSH
29370: LD_INT 21
29372: PUSH
29373: LD_INT 22
29375: PUSH
29376: LD_INT 23
29378: PUSH
29379: LD_INT 24
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: ST_TO_ADDR
29388: GO 29537
29390: LD_INT 51
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29424
29398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: LD_INT 21
29406: PUSH
29407: LD_INT 22
29409: PUSH
29410: LD_INT 23
29412: PUSH
29413: LD_INT 24
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: ST_TO_ADDR
29422: GO 29537
29424: LD_INT 52
29426: DOUBLE
29427: EQUAL
29428: IFTRUE 29432
29430: GO 29458
29432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29433: LD_ADDR_VAR 0 3
29437: PUSH
29438: LD_INT 21
29440: PUSH
29441: LD_INT 22
29443: PUSH
29444: LD_INT 23
29446: PUSH
29447: LD_INT 24
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
29456: GO 29537
29458: LD_INT 53
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29484
29466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_INT 23
29474: PUSH
29475: LD_INT 24
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: ST_TO_ADDR
29482: GO 29537
29484: LD_INT 46
29486: DOUBLE
29487: EQUAL
29488: IFTRUE 29492
29490: GO 29510
29492: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29493: LD_ADDR_VAR 0 3
29497: PUSH
29498: LD_INT 23
29500: PUSH
29501: LD_INT 24
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: ST_TO_ADDR
29508: GO 29537
29510: LD_INT 47
29512: DOUBLE
29513: EQUAL
29514: IFTRUE 29518
29516: GO 29536
29518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29519: LD_ADDR_VAR 0 3
29523: PUSH
29524: LD_INT 23
29526: PUSH
29527: LD_INT 24
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: ST_TO_ADDR
29534: GO 29537
29536: POP
// result := ( chassis in result ) ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_VAR 0 1
29546: PUSH
29547: LD_VAR 0 3
29551: IN
29552: ST_TO_ADDR
// end ;
29553: LD_VAR 0 3
29557: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
// result := array ;
29567: LD_ADDR_VAR 0 5
29571: PUSH
29572: LD_VAR 0 1
29576: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29577: LD_VAR 0 1
29581: NOT
29582: PUSH
29583: LD_VAR 0 2
29587: NOT
29588: OR
29589: PUSH
29590: LD_VAR 0 3
29594: NOT
29595: OR
29596: PUSH
29597: LD_VAR 0 2
29601: PUSH
29602: LD_VAR 0 1
29606: GREATER
29607: OR
29608: PUSH
29609: LD_VAR 0 3
29613: PUSH
29614: LD_VAR 0 1
29618: GREATER
29619: OR
29620: IFFALSE 29624
// exit ;
29622: GO 29920
// if direction then
29624: LD_VAR 0 4
29628: IFFALSE 29692
// begin d := 1 ;
29630: LD_ADDR_VAR 0 9
29634: PUSH
29635: LD_INT 1
29637: ST_TO_ADDR
// if i_from > i_to then
29638: LD_VAR 0 2
29642: PUSH
29643: LD_VAR 0 3
29647: GREATER
29648: IFFALSE 29674
// length := ( array - i_from ) + i_to else
29650: LD_ADDR_VAR 0 11
29654: PUSH
29655: LD_VAR 0 1
29659: PUSH
29660: LD_VAR 0 2
29664: MINUS
29665: PUSH
29666: LD_VAR 0 3
29670: PLUS
29671: ST_TO_ADDR
29672: GO 29690
// length := i_to - i_from ;
29674: LD_ADDR_VAR 0 11
29678: PUSH
29679: LD_VAR 0 3
29683: PUSH
29684: LD_VAR 0 2
29688: MINUS
29689: ST_TO_ADDR
// end else
29690: GO 29753
// begin d := - 1 ;
29692: LD_ADDR_VAR 0 9
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: ST_TO_ADDR
// if i_from > i_to then
29701: LD_VAR 0 2
29705: PUSH
29706: LD_VAR 0 3
29710: GREATER
29711: IFFALSE 29731
// length := i_from - i_to else
29713: LD_ADDR_VAR 0 11
29717: PUSH
29718: LD_VAR 0 2
29722: PUSH
29723: LD_VAR 0 3
29727: MINUS
29728: ST_TO_ADDR
29729: GO 29753
// length := ( array - i_to ) + i_from ;
29731: LD_ADDR_VAR 0 11
29735: PUSH
29736: LD_VAR 0 1
29740: PUSH
29741: LD_VAR 0 3
29745: MINUS
29746: PUSH
29747: LD_VAR 0 2
29751: PLUS
29752: ST_TO_ADDR
// end ; if not length then
29753: LD_VAR 0 11
29757: NOT
29758: IFFALSE 29762
// exit ;
29760: GO 29920
// tmp := array ;
29762: LD_ADDR_VAR 0 10
29766: PUSH
29767: LD_VAR 0 1
29771: ST_TO_ADDR
// for i = 1 to length do
29772: LD_ADDR_VAR 0 6
29776: PUSH
29777: DOUBLE
29778: LD_INT 1
29780: DEC
29781: ST_TO_ADDR
29782: LD_VAR 0 11
29786: PUSH
29787: FOR_TO
29788: IFFALSE 29908
// begin for j = 1 to array do
29790: LD_ADDR_VAR 0 7
29794: PUSH
29795: DOUBLE
29796: LD_INT 1
29798: DEC
29799: ST_TO_ADDR
29800: LD_VAR 0 1
29804: PUSH
29805: FOR_TO
29806: IFFALSE 29894
// begin k := j + d ;
29808: LD_ADDR_VAR 0 8
29812: PUSH
29813: LD_VAR 0 7
29817: PUSH
29818: LD_VAR 0 9
29822: PLUS
29823: ST_TO_ADDR
// if k > array then
29824: LD_VAR 0 8
29828: PUSH
29829: LD_VAR 0 1
29833: GREATER
29834: IFFALSE 29844
// k := 1 ;
29836: LD_ADDR_VAR 0 8
29840: PUSH
29841: LD_INT 1
29843: ST_TO_ADDR
// if not k then
29844: LD_VAR 0 8
29848: NOT
29849: IFFALSE 29861
// k := array ;
29851: LD_ADDR_VAR 0 8
29855: PUSH
29856: LD_VAR 0 1
29860: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29861: LD_ADDR_VAR 0 10
29865: PUSH
29866: LD_VAR 0 10
29870: PPUSH
29871: LD_VAR 0 8
29875: PPUSH
29876: LD_VAR 0 1
29880: PUSH
29881: LD_VAR 0 7
29885: ARRAY
29886: PPUSH
29887: CALL_OW 1
29891: ST_TO_ADDR
// end ;
29892: GO 29805
29894: POP
29895: POP
// array := tmp ;
29896: LD_ADDR_VAR 0 1
29900: PUSH
29901: LD_VAR 0 10
29905: ST_TO_ADDR
// end ;
29906: GO 29787
29908: POP
29909: POP
// result := array ;
29910: LD_ADDR_VAR 0 5
29914: PUSH
29915: LD_VAR 0 1
29919: ST_TO_ADDR
// end ;
29920: LD_VAR 0 5
29924: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29925: LD_INT 0
29927: PPUSH
29928: PPUSH
// result := 0 ;
29929: LD_ADDR_VAR 0 3
29933: PUSH
29934: LD_INT 0
29936: ST_TO_ADDR
// if not array or not value in array then
29937: LD_VAR 0 1
29941: NOT
29942: PUSH
29943: LD_VAR 0 2
29947: PUSH
29948: LD_VAR 0 1
29952: IN
29953: NOT
29954: OR
29955: IFFALSE 29959
// exit ;
29957: GO 30013
// for i = 1 to array do
29959: LD_ADDR_VAR 0 4
29963: PUSH
29964: DOUBLE
29965: LD_INT 1
29967: DEC
29968: ST_TO_ADDR
29969: LD_VAR 0 1
29973: PUSH
29974: FOR_TO
29975: IFFALSE 30011
// if value = array [ i ] then
29977: LD_VAR 0 2
29981: PUSH
29982: LD_VAR 0 1
29986: PUSH
29987: LD_VAR 0 4
29991: ARRAY
29992: EQUAL
29993: IFFALSE 30009
// begin result := i ;
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_VAR 0 4
30004: ST_TO_ADDR
// exit ;
30005: POP
30006: POP
30007: GO 30013
// end ;
30009: GO 29974
30011: POP
30012: POP
// end ;
30013: LD_VAR 0 3
30017: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30018: LD_INT 0
30020: PPUSH
// vc_chassis := chassis ;
30021: LD_ADDR_OWVAR 37
30025: PUSH
30026: LD_VAR 0 1
30030: ST_TO_ADDR
// vc_engine := engine ;
30031: LD_ADDR_OWVAR 39
30035: PUSH
30036: LD_VAR 0 2
30040: ST_TO_ADDR
// vc_control := control ;
30041: LD_ADDR_OWVAR 38
30045: PUSH
30046: LD_VAR 0 3
30050: ST_TO_ADDR
// vc_weapon := weapon ;
30051: LD_ADDR_OWVAR 40
30055: PUSH
30056: LD_VAR 0 4
30060: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30061: LD_ADDR_OWVAR 41
30065: PUSH
30066: LD_VAR 0 5
30070: ST_TO_ADDR
// end ;
30071: LD_VAR 0 6
30075: RET
// export function WantPlant ( unit ) ; var task ; begin
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
// result := false ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 0
30087: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: LD_VAR 0 1
30097: PPUSH
30098: CALL_OW 437
30102: ST_TO_ADDR
// if task then
30103: LD_VAR 0 3
30107: IFFALSE 30135
// if task [ 1 ] [ 1 ] = p then
30109: LD_VAR 0 3
30113: PUSH
30114: LD_INT 1
30116: ARRAY
30117: PUSH
30118: LD_INT 1
30120: ARRAY
30121: PUSH
30122: LD_STRING p
30124: EQUAL
30125: IFFALSE 30135
// result := true ;
30127: LD_ADDR_VAR 0 2
30131: PUSH
30132: LD_INT 1
30134: ST_TO_ADDR
// end ;
30135: LD_VAR 0 2
30139: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30140: LD_INT 0
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
// if pos < 1 then
30146: LD_VAR 0 2
30150: PUSH
30151: LD_INT 1
30153: LESS
30154: IFFALSE 30158
// exit ;
30156: GO 30461
// if pos = 1 then
30158: LD_VAR 0 2
30162: PUSH
30163: LD_INT 1
30165: EQUAL
30166: IFFALSE 30199
// result := Replace ( arr , pos [ 1 ] , value ) else
30168: LD_ADDR_VAR 0 4
30172: PUSH
30173: LD_VAR 0 1
30177: PPUSH
30178: LD_VAR 0 2
30182: PUSH
30183: LD_INT 1
30185: ARRAY
30186: PPUSH
30187: LD_VAR 0 3
30191: PPUSH
30192: CALL_OW 1
30196: ST_TO_ADDR
30197: GO 30461
// begin tmp := arr ;
30199: LD_ADDR_VAR 0 6
30203: PUSH
30204: LD_VAR 0 1
30208: ST_TO_ADDR
// s_arr := [ tmp ] ;
30209: LD_ADDR_VAR 0 7
30213: PUSH
30214: LD_VAR 0 6
30218: PUSH
30219: EMPTY
30220: LIST
30221: ST_TO_ADDR
// for i = 1 to pos - 1 do
30222: LD_ADDR_VAR 0 5
30226: PUSH
30227: DOUBLE
30228: LD_INT 1
30230: DEC
30231: ST_TO_ADDR
30232: LD_VAR 0 2
30236: PUSH
30237: LD_INT 1
30239: MINUS
30240: PUSH
30241: FOR_TO
30242: IFFALSE 30287
// begin tmp := tmp [ pos [ i ] ] ;
30244: LD_ADDR_VAR 0 6
30248: PUSH
30249: LD_VAR 0 6
30253: PUSH
30254: LD_VAR 0 2
30258: PUSH
30259: LD_VAR 0 5
30263: ARRAY
30264: ARRAY
30265: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30266: LD_ADDR_VAR 0 7
30270: PUSH
30271: LD_VAR 0 7
30275: PUSH
30276: LD_VAR 0 6
30280: PUSH
30281: EMPTY
30282: LIST
30283: ADD
30284: ST_TO_ADDR
// end ;
30285: GO 30241
30287: POP
30288: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30289: LD_ADDR_VAR 0 6
30293: PUSH
30294: LD_VAR 0 6
30298: PPUSH
30299: LD_VAR 0 2
30303: PUSH
30304: LD_VAR 0 2
30308: ARRAY
30309: PPUSH
30310: LD_VAR 0 3
30314: PPUSH
30315: CALL_OW 1
30319: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30320: LD_ADDR_VAR 0 7
30324: PUSH
30325: LD_VAR 0 7
30329: PPUSH
30330: LD_VAR 0 7
30334: PPUSH
30335: LD_VAR 0 6
30339: PPUSH
30340: CALL_OW 1
30344: ST_TO_ADDR
// for i = s_arr downto 2 do
30345: LD_ADDR_VAR 0 5
30349: PUSH
30350: DOUBLE
30351: LD_VAR 0 7
30355: INC
30356: ST_TO_ADDR
30357: LD_INT 2
30359: PUSH
30360: FOR_DOWNTO
30361: IFFALSE 30445
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30363: LD_ADDR_VAR 0 6
30367: PUSH
30368: LD_VAR 0 7
30372: PUSH
30373: LD_VAR 0 5
30377: PUSH
30378: LD_INT 1
30380: MINUS
30381: ARRAY
30382: PPUSH
30383: LD_VAR 0 2
30387: PUSH
30388: LD_VAR 0 5
30392: PUSH
30393: LD_INT 1
30395: MINUS
30396: ARRAY
30397: PPUSH
30398: LD_VAR 0 7
30402: PUSH
30403: LD_VAR 0 5
30407: ARRAY
30408: PPUSH
30409: CALL_OW 1
30413: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30414: LD_ADDR_VAR 0 7
30418: PUSH
30419: LD_VAR 0 7
30423: PPUSH
30424: LD_VAR 0 5
30428: PUSH
30429: LD_INT 1
30431: MINUS
30432: PPUSH
30433: LD_VAR 0 6
30437: PPUSH
30438: CALL_OW 1
30442: ST_TO_ADDR
// end ;
30443: GO 30360
30445: POP
30446: POP
// result := s_arr [ 1 ] ;
30447: LD_ADDR_VAR 0 4
30451: PUSH
30452: LD_VAR 0 7
30456: PUSH
30457: LD_INT 1
30459: ARRAY
30460: ST_TO_ADDR
// end ; end ;
30461: LD_VAR 0 4
30465: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30466: LD_INT 0
30468: PPUSH
30469: PPUSH
// if not list then
30470: LD_VAR 0 1
30474: NOT
30475: IFFALSE 30479
// exit ;
30477: GO 30570
// i := list [ pos1 ] ;
30479: LD_ADDR_VAR 0 5
30483: PUSH
30484: LD_VAR 0 1
30488: PUSH
30489: LD_VAR 0 2
30493: ARRAY
30494: ST_TO_ADDR
// if not i then
30495: LD_VAR 0 5
30499: NOT
30500: IFFALSE 30504
// exit ;
30502: GO 30570
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30504: LD_ADDR_VAR 0 1
30508: PUSH
30509: LD_VAR 0 1
30513: PPUSH
30514: LD_VAR 0 2
30518: PPUSH
30519: LD_VAR 0 1
30523: PUSH
30524: LD_VAR 0 3
30528: ARRAY
30529: PPUSH
30530: CALL_OW 1
30534: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30535: LD_ADDR_VAR 0 1
30539: PUSH
30540: LD_VAR 0 1
30544: PPUSH
30545: LD_VAR 0 3
30549: PPUSH
30550: LD_VAR 0 5
30554: PPUSH
30555: CALL_OW 1
30559: ST_TO_ADDR
// result := list ;
30560: LD_ADDR_VAR 0 4
30564: PUSH
30565: LD_VAR 0 1
30569: ST_TO_ADDR
// end ;
30570: LD_VAR 0 4
30574: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30575: LD_INT 0
30577: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30578: LD_ADDR_VAR 0 5
30582: PUSH
30583: LD_VAR 0 1
30587: PPUSH
30588: CALL_OW 250
30592: PPUSH
30593: LD_VAR 0 1
30597: PPUSH
30598: CALL_OW 251
30602: PPUSH
30603: LD_VAR 0 2
30607: PPUSH
30608: LD_VAR 0 3
30612: PPUSH
30613: LD_VAR 0 4
30617: PPUSH
30618: CALL 30996 0 5
30622: ST_TO_ADDR
// end ;
30623: LD_VAR 0 5
30627: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30628: LD_INT 0
30630: PPUSH
30631: PPUSH
30632: PPUSH
30633: PPUSH
// if not list or not unit then
30634: LD_VAR 0 2
30638: NOT
30639: PUSH
30640: LD_VAR 0 1
30644: NOT
30645: OR
30646: IFFALSE 30650
// exit ;
30648: GO 30991
// result := [ ] ;
30650: LD_ADDR_VAR 0 5
30654: PUSH
30655: EMPTY
30656: ST_TO_ADDR
// for i in list do
30657: LD_ADDR_VAR 0 6
30661: PUSH
30662: LD_VAR 0 2
30666: PUSH
30667: FOR_IN
30668: IFFALSE 30886
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30670: LD_ADDR_VAR 0 8
30674: PUSH
30675: LD_VAR 0 1
30679: PPUSH
30680: LD_VAR 0 6
30684: PUSH
30685: LD_INT 1
30687: ARRAY
30688: PPUSH
30689: LD_VAR 0 6
30693: PUSH
30694: LD_INT 2
30696: ARRAY
30697: PPUSH
30698: CALL_OW 297
30702: ST_TO_ADDR
// if not Count ( result ) then
30703: LD_VAR 0 5
30707: PPUSH
30708: CALL 27280 0 1
30712: NOT
30713: IFFALSE 30746
// begin result := Join ( result , [ i , tmp ] ) ;
30715: LD_ADDR_VAR 0 5
30719: PUSH
30720: LD_VAR 0 5
30724: PPUSH
30725: LD_VAR 0 6
30729: PUSH
30730: LD_VAR 0 8
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PPUSH
30739: CALL 62869 0 2
30743: ST_TO_ADDR
// continue ;
30744: GO 30667
// end ; if result [ result ] [ 2 ] <= tmp then
30746: LD_VAR 0 5
30750: PUSH
30751: LD_VAR 0 5
30755: ARRAY
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PUSH
30761: LD_VAR 0 8
30765: LESSEQUAL
30766: IFFALSE 30799
// result := Join ( result , [ i , tmp ] ) else
30768: LD_ADDR_VAR 0 5
30772: PUSH
30773: LD_VAR 0 5
30777: PPUSH
30778: LD_VAR 0 6
30782: PUSH
30783: LD_VAR 0 8
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PPUSH
30792: CALL 62869 0 2
30796: ST_TO_ADDR
30797: GO 30884
// begin for j := 1 to Count ( result ) do
30799: LD_ADDR_VAR 0 7
30803: PUSH
30804: DOUBLE
30805: LD_INT 1
30807: DEC
30808: ST_TO_ADDR
30809: LD_VAR 0 5
30813: PPUSH
30814: CALL 27280 0 1
30818: PUSH
30819: FOR_TO
30820: IFFALSE 30882
// begin if tmp < result [ j ] [ 2 ] then
30822: LD_VAR 0 8
30826: PUSH
30827: LD_VAR 0 5
30831: PUSH
30832: LD_VAR 0 7
30836: ARRAY
30837: PUSH
30838: LD_INT 2
30840: ARRAY
30841: LESS
30842: IFFALSE 30880
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30844: LD_ADDR_VAR 0 5
30848: PUSH
30849: LD_VAR 0 5
30853: PPUSH
30854: LD_VAR 0 7
30858: PPUSH
30859: LD_VAR 0 6
30863: PUSH
30864: LD_VAR 0 8
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PPUSH
30873: CALL_OW 2
30877: ST_TO_ADDR
// break ;
30878: GO 30882
// end ; end ;
30880: GO 30819
30882: POP
30883: POP
// end ; end ;
30884: GO 30667
30886: POP
30887: POP
// if result and not asc then
30888: LD_VAR 0 5
30892: PUSH
30893: LD_VAR 0 3
30897: NOT
30898: AND
30899: IFFALSE 30916
// result := ReverseArray ( result ) ;
30901: LD_ADDR_VAR 0 5
30905: PUSH
30906: LD_VAR 0 5
30910: PPUSH
30911: CALL 58156 0 1
30915: ST_TO_ADDR
// tmp := [ ] ;
30916: LD_ADDR_VAR 0 8
30920: PUSH
30921: EMPTY
30922: ST_TO_ADDR
// if mode then
30923: LD_VAR 0 4
30927: IFFALSE 30991
// begin for i := 1 to result do
30929: LD_ADDR_VAR 0 6
30933: PUSH
30934: DOUBLE
30935: LD_INT 1
30937: DEC
30938: ST_TO_ADDR
30939: LD_VAR 0 5
30943: PUSH
30944: FOR_TO
30945: IFFALSE 30979
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30947: LD_ADDR_VAR 0 8
30951: PUSH
30952: LD_VAR 0 8
30956: PPUSH
30957: LD_VAR 0 5
30961: PUSH
30962: LD_VAR 0 6
30966: ARRAY
30967: PUSH
30968: LD_INT 1
30970: ARRAY
30971: PPUSH
30972: CALL 62869 0 2
30976: ST_TO_ADDR
30977: GO 30944
30979: POP
30980: POP
// result := tmp ;
30981: LD_ADDR_VAR 0 5
30985: PUSH
30986: LD_VAR 0 8
30990: ST_TO_ADDR
// end ; end ;
30991: LD_VAR 0 5
30995: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30996: LD_INT 0
30998: PPUSH
30999: PPUSH
31000: PPUSH
31001: PPUSH
// if not list then
31002: LD_VAR 0 3
31006: NOT
31007: IFFALSE 31011
// exit ;
31009: GO 31399
// result := [ ] ;
31011: LD_ADDR_VAR 0 6
31015: PUSH
31016: EMPTY
31017: ST_TO_ADDR
// for i in list do
31018: LD_ADDR_VAR 0 7
31022: PUSH
31023: LD_VAR 0 3
31027: PUSH
31028: FOR_IN
31029: IFFALSE 31231
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31031: LD_ADDR_VAR 0 9
31035: PUSH
31036: LD_VAR 0 7
31040: PPUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL_OW 297
31055: ST_TO_ADDR
// if not result then
31056: LD_VAR 0 6
31060: NOT
31061: IFFALSE 31087
// result := [ [ i , tmp ] ] else
31063: LD_ADDR_VAR 0 6
31067: PUSH
31068: LD_VAR 0 7
31072: PUSH
31073: LD_VAR 0 9
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: ST_TO_ADDR
31085: GO 31229
// begin if result [ result ] [ 2 ] < tmp then
31087: LD_VAR 0 6
31091: PUSH
31092: LD_VAR 0 6
31096: ARRAY
31097: PUSH
31098: LD_INT 2
31100: ARRAY
31101: PUSH
31102: LD_VAR 0 9
31106: LESS
31107: IFFALSE 31149
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31109: LD_ADDR_VAR 0 6
31113: PUSH
31114: LD_VAR 0 6
31118: PPUSH
31119: LD_VAR 0 6
31123: PUSH
31124: LD_INT 1
31126: PLUS
31127: PPUSH
31128: LD_VAR 0 7
31132: PUSH
31133: LD_VAR 0 9
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 2
31146: ST_TO_ADDR
31147: GO 31229
// for j = 1 to result do
31149: LD_ADDR_VAR 0 8
31153: PUSH
31154: DOUBLE
31155: LD_INT 1
31157: DEC
31158: ST_TO_ADDR
31159: LD_VAR 0 6
31163: PUSH
31164: FOR_TO
31165: IFFALSE 31227
// begin if tmp < result [ j ] [ 2 ] then
31167: LD_VAR 0 9
31171: PUSH
31172: LD_VAR 0 6
31176: PUSH
31177: LD_VAR 0 8
31181: ARRAY
31182: PUSH
31183: LD_INT 2
31185: ARRAY
31186: LESS
31187: IFFALSE 31225
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31189: LD_ADDR_VAR 0 6
31193: PUSH
31194: LD_VAR 0 6
31198: PPUSH
31199: LD_VAR 0 8
31203: PPUSH
31204: LD_VAR 0 7
31208: PUSH
31209: LD_VAR 0 9
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PPUSH
31218: CALL_OW 2
31222: ST_TO_ADDR
// break ;
31223: GO 31227
// end ; end ;
31225: GO 31164
31227: POP
31228: POP
// end ; end ;
31229: GO 31028
31231: POP
31232: POP
// if result and not asc then
31233: LD_VAR 0 6
31237: PUSH
31238: LD_VAR 0 4
31242: NOT
31243: AND
31244: IFFALSE 31319
// begin tmp := result ;
31246: LD_ADDR_VAR 0 9
31250: PUSH
31251: LD_VAR 0 6
31255: ST_TO_ADDR
// for i = tmp downto 1 do
31256: LD_ADDR_VAR 0 7
31260: PUSH
31261: DOUBLE
31262: LD_VAR 0 9
31266: INC
31267: ST_TO_ADDR
31268: LD_INT 1
31270: PUSH
31271: FOR_DOWNTO
31272: IFFALSE 31317
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31274: LD_ADDR_VAR 0 6
31278: PUSH
31279: LD_VAR 0 6
31283: PPUSH
31284: LD_VAR 0 9
31288: PUSH
31289: LD_VAR 0 7
31293: MINUS
31294: PUSH
31295: LD_INT 1
31297: PLUS
31298: PPUSH
31299: LD_VAR 0 9
31303: PUSH
31304: LD_VAR 0 7
31308: ARRAY
31309: PPUSH
31310: CALL_OW 1
31314: ST_TO_ADDR
31315: GO 31271
31317: POP
31318: POP
// end ; tmp := [ ] ;
31319: LD_ADDR_VAR 0 9
31323: PUSH
31324: EMPTY
31325: ST_TO_ADDR
// if mode then
31326: LD_VAR 0 5
31330: IFFALSE 31399
// begin for i = 1 to result do
31332: LD_ADDR_VAR 0 7
31336: PUSH
31337: DOUBLE
31338: LD_INT 1
31340: DEC
31341: ST_TO_ADDR
31342: LD_VAR 0 6
31346: PUSH
31347: FOR_TO
31348: IFFALSE 31387
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31350: LD_ADDR_VAR 0 9
31354: PUSH
31355: LD_VAR 0 9
31359: PPUSH
31360: LD_VAR 0 7
31364: PPUSH
31365: LD_VAR 0 6
31369: PUSH
31370: LD_VAR 0 7
31374: ARRAY
31375: PUSH
31376: LD_INT 1
31378: ARRAY
31379: PPUSH
31380: CALL_OW 1
31384: ST_TO_ADDR
31385: GO 31347
31387: POP
31388: POP
// result := tmp ;
31389: LD_ADDR_VAR 0 6
31393: PUSH
31394: LD_VAR 0 9
31398: ST_TO_ADDR
// end ; end ;
31399: LD_VAR 0 6
31403: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31404: LD_INT 0
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31412: LD_ADDR_VAR 0 5
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: ST_TO_ADDR
// if not x or not y then
31434: LD_VAR 0 2
31438: NOT
31439: PUSH
31440: LD_VAR 0 3
31444: NOT
31445: OR
31446: IFFALSE 31450
// exit ;
31448: GO 33100
// if not range then
31450: LD_VAR 0 4
31454: NOT
31455: IFFALSE 31465
// range := 10 ;
31457: LD_ADDR_VAR 0 4
31461: PUSH
31462: LD_INT 10
31464: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31465: LD_ADDR_VAR 0 8
31469: PUSH
31470: LD_INT 81
31472: PUSH
31473: LD_VAR 0 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 92
31484: PUSH
31485: LD_VAR 0 2
31489: PUSH
31490: LD_VAR 0 3
31494: PUSH
31495: LD_VAR 0 4
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 21
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: PPUSH
31528: CALL_OW 69
31532: ST_TO_ADDR
// if not tmp then
31533: LD_VAR 0 8
31537: NOT
31538: IFFALSE 31542
// exit ;
31540: GO 33100
// for i in tmp do
31542: LD_ADDR_VAR 0 6
31546: PUSH
31547: LD_VAR 0 8
31551: PUSH
31552: FOR_IN
31553: IFFALSE 33075
// begin points := [ 0 , 0 , 0 ] ;
31555: LD_ADDR_VAR 0 9
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
// bpoints := 1 ;
31574: LD_ADDR_VAR 0 10
31578: PUSH
31579: LD_INT 1
31581: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31582: LD_VAR 0 6
31586: PPUSH
31587: CALL_OW 247
31591: PUSH
31592: LD_INT 1
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 32178
31600: POP
// begin if GetClass ( i ) = 1 then
31601: LD_VAR 0 6
31605: PPUSH
31606: CALL_OW 257
31610: PUSH
31611: LD_INT 1
31613: EQUAL
31614: IFFALSE 31635
// points := [ 10 , 5 , 3 ] ;
31616: LD_ADDR_VAR 0 9
31620: PUSH
31621: LD_INT 10
31623: PUSH
31624: LD_INT 5
31626: PUSH
31627: LD_INT 3
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31635: LD_VAR 0 6
31639: PPUSH
31640: CALL_OW 257
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: IN
31659: IFFALSE 31680
// points := [ 3 , 2 , 1 ] ;
31661: LD_ADDR_VAR 0 9
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31680: LD_VAR 0 6
31684: PPUSH
31685: CALL_OW 257
31689: PUSH
31690: LD_INT 5
31692: EQUAL
31693: IFFALSE 31714
// points := [ 130 , 5 , 2 ] ;
31695: LD_ADDR_VAR 0 9
31699: PUSH
31700: LD_INT 130
31702: PUSH
31703: LD_INT 5
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31714: LD_VAR 0 6
31718: PPUSH
31719: CALL_OW 257
31723: PUSH
31724: LD_INT 8
31726: EQUAL
31727: IFFALSE 31748
// points := [ 35 , 35 , 30 ] ;
31729: LD_ADDR_VAR 0 9
31733: PUSH
31734: LD_INT 35
31736: PUSH
31737: LD_INT 35
31739: PUSH
31740: LD_INT 30
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31748: LD_VAR 0 6
31752: PPUSH
31753: CALL_OW 257
31757: PUSH
31758: LD_INT 9
31760: EQUAL
31761: IFFALSE 31782
// points := [ 20 , 55 , 40 ] ;
31763: LD_ADDR_VAR 0 9
31767: PUSH
31768: LD_INT 20
31770: PUSH
31771: LD_INT 55
31773: PUSH
31774: LD_INT 40
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31782: LD_VAR 0 6
31786: PPUSH
31787: CALL_OW 257
31791: PUSH
31792: LD_INT 12
31794: PUSH
31795: LD_INT 16
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: IN
31802: IFFALSE 31823
// points := [ 5 , 3 , 2 ] ;
31804: LD_ADDR_VAR 0 9
31808: PUSH
31809: LD_INT 5
31811: PUSH
31812: LD_INT 3
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31823: LD_VAR 0 6
31827: PPUSH
31828: CALL_OW 257
31832: PUSH
31833: LD_INT 17
31835: EQUAL
31836: IFFALSE 31857
// points := [ 100 , 50 , 75 ] ;
31838: LD_ADDR_VAR 0 9
31842: PUSH
31843: LD_INT 100
31845: PUSH
31846: LD_INT 50
31848: PUSH
31849: LD_INT 75
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31857: LD_VAR 0 6
31861: PPUSH
31862: CALL_OW 257
31866: PUSH
31867: LD_INT 15
31869: EQUAL
31870: IFFALSE 31891
// points := [ 10 , 5 , 3 ] ;
31872: LD_ADDR_VAR 0 9
31876: PUSH
31877: LD_INT 10
31879: PUSH
31880: LD_INT 5
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31891: LD_VAR 0 6
31895: PPUSH
31896: CALL_OW 257
31900: PUSH
31901: LD_INT 14
31903: EQUAL
31904: IFFALSE 31925
// points := [ 10 , 0 , 0 ] ;
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_INT 10
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 257
31934: PUSH
31935: LD_INT 11
31937: EQUAL
31938: IFFALSE 31959
// points := [ 30 , 10 , 5 ] ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_INT 30
31947: PUSH
31948: LD_INT 10
31950: PUSH
31951: LD_INT 5
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31959: LD_VAR 0 1
31963: PPUSH
31964: LD_INT 5
31966: PPUSH
31967: CALL_OW 321
31971: PUSH
31972: LD_INT 2
31974: EQUAL
31975: IFFALSE 31992
// bpoints := bpoints * 1.8 ;
31977: LD_ADDR_VAR 0 10
31981: PUSH
31982: LD_VAR 0 10
31986: PUSH
31987: LD_REAL  1.80000000000000E+0000
31990: MUL
31991: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31992: LD_VAR 0 6
31996: PPUSH
31997: CALL_OW 257
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: LD_INT 3
32010: PUSH
32011: LD_INT 4
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: IN
32020: PUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: LD_INT 51
32028: PPUSH
32029: CALL_OW 321
32033: PUSH
32034: LD_INT 2
32036: EQUAL
32037: AND
32038: IFFALSE 32055
// bpoints := bpoints * 1.2 ;
32040: LD_ADDR_VAR 0 10
32044: PUSH
32045: LD_VAR 0 10
32049: PUSH
32050: LD_REAL  1.20000000000000E+0000
32053: MUL
32054: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32055: LD_VAR 0 6
32059: PPUSH
32060: CALL_OW 257
32064: PUSH
32065: LD_INT 5
32067: PUSH
32068: LD_INT 7
32070: PUSH
32071: LD_INT 9
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: IN
32079: PUSH
32080: LD_VAR 0 1
32084: PPUSH
32085: LD_INT 52
32087: PPUSH
32088: CALL_OW 321
32092: PUSH
32093: LD_INT 2
32095: EQUAL
32096: AND
32097: IFFALSE 32114
// bpoints := bpoints * 1.5 ;
32099: LD_ADDR_VAR 0 10
32103: PUSH
32104: LD_VAR 0 10
32108: PUSH
32109: LD_REAL  1.50000000000000E+0000
32112: MUL
32113: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32114: LD_VAR 0 1
32118: PPUSH
32119: LD_INT 66
32121: PPUSH
32122: CALL_OW 321
32126: PUSH
32127: LD_INT 2
32129: EQUAL
32130: IFFALSE 32147
// bpoints := bpoints * 1.1 ;
32132: LD_ADDR_VAR 0 10
32136: PUSH
32137: LD_VAR 0 10
32141: PUSH
32142: LD_REAL  1.10000000000000E+0000
32145: MUL
32146: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32147: LD_ADDR_VAR 0 10
32151: PUSH
32152: LD_VAR 0 10
32156: PUSH
32157: LD_VAR 0 6
32161: PPUSH
32162: LD_INT 1
32164: PPUSH
32165: CALL_OW 259
32169: PUSH
32170: LD_REAL  1.15000000000000E+0000
32173: MUL
32174: MUL
32175: ST_TO_ADDR
// end ; unit_vehicle :
32176: GO 33004
32178: LD_INT 2
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32992
32186: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32187: LD_VAR 0 6
32191: PPUSH
32192: CALL_OW 264
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 42
32202: PUSH
32203: LD_INT 24
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: IN
32211: IFFALSE 32232
// points := [ 25 , 5 , 3 ] ;
32213: LD_ADDR_VAR 0 9
32217: PUSH
32218: LD_INT 25
32220: PUSH
32221: LD_INT 5
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32232: LD_VAR 0 6
32236: PPUSH
32237: CALL_OW 264
32241: PUSH
32242: LD_INT 4
32244: PUSH
32245: LD_INT 43
32247: PUSH
32248: LD_INT 25
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: IN
32256: IFFALSE 32277
// points := [ 40 , 15 , 5 ] ;
32258: LD_ADDR_VAR 0 9
32262: PUSH
32263: LD_INT 40
32265: PUSH
32266: LD_INT 15
32268: PUSH
32269: LD_INT 5
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: LIST
32276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32277: LD_VAR 0 6
32281: PPUSH
32282: CALL_OW 264
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: LD_INT 23
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: IN
32297: IFFALSE 32318
// points := [ 7 , 25 , 8 ] ;
32299: LD_ADDR_VAR 0 9
32303: PUSH
32304: LD_INT 7
32306: PUSH
32307: LD_INT 25
32309: PUSH
32310: LD_INT 8
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32318: LD_VAR 0 6
32322: PPUSH
32323: CALL_OW 264
32327: PUSH
32328: LD_INT 5
32330: PUSH
32331: LD_INT 27
32333: PUSH
32334: LD_INT 44
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: IN
32342: IFFALSE 32363
// points := [ 14 , 50 , 16 ] ;
32344: LD_ADDR_VAR 0 9
32348: PUSH
32349: LD_INT 14
32351: PUSH
32352: LD_INT 50
32354: PUSH
32355: LD_INT 16
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32363: LD_VAR 0 6
32367: PPUSH
32368: CALL_OW 264
32372: PUSH
32373: LD_INT 6
32375: PUSH
32376: LD_INT 46
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: IN
32383: IFFALSE 32404
// points := [ 32 , 120 , 70 ] ;
32385: LD_ADDR_VAR 0 9
32389: PUSH
32390: LD_INT 32
32392: PUSH
32393: LD_INT 120
32395: PUSH
32396: LD_INT 70
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32404: LD_VAR 0 6
32408: PPUSH
32409: CALL_OW 264
32413: PUSH
32414: LD_INT 7
32416: PUSH
32417: LD_INT 28
32419: PUSH
32420: LD_INT 45
32422: PUSH
32423: LD_INT 92
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: IN
32432: IFFALSE 32453
// points := [ 35 , 20 , 45 ] ;
32434: LD_ADDR_VAR 0 9
32438: PUSH
32439: LD_INT 35
32441: PUSH
32442: LD_INT 20
32444: PUSH
32445: LD_INT 45
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32453: LD_VAR 0 6
32457: PPUSH
32458: CALL_OW 264
32462: PUSH
32463: LD_INT 47
32465: PUSH
32466: EMPTY
32467: LIST
32468: IN
32469: IFFALSE 32490
// points := [ 67 , 45 , 75 ] ;
32471: LD_ADDR_VAR 0 9
32475: PUSH
32476: LD_INT 67
32478: PUSH
32479: LD_INT 45
32481: PUSH
32482: LD_INT 75
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32490: LD_VAR 0 6
32494: PPUSH
32495: CALL_OW 264
32499: PUSH
32500: LD_INT 26
32502: PUSH
32503: EMPTY
32504: LIST
32505: IN
32506: IFFALSE 32527
// points := [ 120 , 30 , 80 ] ;
32508: LD_ADDR_VAR 0 9
32512: PUSH
32513: LD_INT 120
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: LD_INT 80
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32527: LD_VAR 0 6
32531: PPUSH
32532: CALL_OW 264
32536: PUSH
32537: LD_INT 22
32539: PUSH
32540: EMPTY
32541: LIST
32542: IN
32543: IFFALSE 32564
// points := [ 40 , 1 , 1 ] ;
32545: LD_ADDR_VAR 0 9
32549: PUSH
32550: LD_INT 40
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32564: LD_VAR 0 6
32568: PPUSH
32569: CALL_OW 264
32573: PUSH
32574: LD_INT 29
32576: PUSH
32577: EMPTY
32578: LIST
32579: IN
32580: IFFALSE 32601
// points := [ 70 , 200 , 400 ] ;
32582: LD_ADDR_VAR 0 9
32586: PUSH
32587: LD_INT 70
32589: PUSH
32590: LD_INT 200
32592: PUSH
32593: LD_INT 400
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32601: LD_VAR 0 6
32605: PPUSH
32606: CALL_OW 264
32610: PUSH
32611: LD_INT 14
32613: PUSH
32614: LD_INT 53
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: IN
32621: IFFALSE 32642
// points := [ 40 , 10 , 20 ] ;
32623: LD_ADDR_VAR 0 9
32627: PUSH
32628: LD_INT 40
32630: PUSH
32631: LD_INT 10
32633: PUSH
32634: LD_INT 20
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32642: LD_VAR 0 6
32646: PPUSH
32647: CALL_OW 264
32651: PUSH
32652: LD_INT 9
32654: PUSH
32655: EMPTY
32656: LIST
32657: IN
32658: IFFALSE 32679
// points := [ 5 , 70 , 20 ] ;
32660: LD_ADDR_VAR 0 9
32664: PUSH
32665: LD_INT 5
32667: PUSH
32668: LD_INT 70
32670: PUSH
32671: LD_INT 20
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32679: LD_VAR 0 6
32683: PPUSH
32684: CALL_OW 264
32688: PUSH
32689: LD_INT 10
32691: PUSH
32692: EMPTY
32693: LIST
32694: IN
32695: IFFALSE 32716
// points := [ 35 , 110 , 70 ] ;
32697: LD_ADDR_VAR 0 9
32701: PUSH
32702: LD_INT 35
32704: PUSH
32705: LD_INT 110
32707: PUSH
32708: LD_INT 70
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32716: LD_VAR 0 6
32720: PPUSH
32721: CALL_OW 265
32725: PUSH
32726: LD_INT 25
32728: EQUAL
32729: IFFALSE 32750
// points := [ 80 , 65 , 100 ] ;
32731: LD_ADDR_VAR 0 9
32735: PUSH
32736: LD_INT 80
32738: PUSH
32739: LD_INT 65
32741: PUSH
32742: LD_INT 100
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32750: LD_VAR 0 6
32754: PPUSH
32755: CALL_OW 263
32759: PUSH
32760: LD_INT 1
32762: EQUAL
32763: IFFALSE 32798
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32765: LD_ADDR_VAR 0 10
32769: PUSH
32770: LD_VAR 0 10
32774: PUSH
32775: LD_VAR 0 6
32779: PPUSH
32780: CALL_OW 311
32784: PPUSH
32785: LD_INT 3
32787: PPUSH
32788: CALL_OW 259
32792: PUSH
32793: LD_INT 4
32795: MUL
32796: MUL
32797: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32798: LD_VAR 0 6
32802: PPUSH
32803: CALL_OW 263
32807: PUSH
32808: LD_INT 2
32810: EQUAL
32811: IFFALSE 32862
// begin j := IsControledBy ( i ) ;
32813: LD_ADDR_VAR 0 7
32817: PUSH
32818: LD_VAR 0 6
32822: PPUSH
32823: CALL_OW 312
32827: ST_TO_ADDR
// if j then
32828: LD_VAR 0 7
32832: IFFALSE 32862
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32834: LD_ADDR_VAR 0 10
32838: PUSH
32839: LD_VAR 0 10
32843: PUSH
32844: LD_VAR 0 7
32848: PPUSH
32849: LD_INT 3
32851: PPUSH
32852: CALL_OW 259
32856: PUSH
32857: LD_INT 3
32859: MUL
32860: MUL
32861: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32862: LD_VAR 0 6
32866: PPUSH
32867: CALL_OW 264
32871: PUSH
32872: LD_INT 5
32874: PUSH
32875: LD_INT 6
32877: PUSH
32878: LD_INT 46
32880: PUSH
32881: LD_INT 44
32883: PUSH
32884: LD_INT 47
32886: PUSH
32887: LD_INT 45
32889: PUSH
32890: LD_INT 28
32892: PUSH
32893: LD_INT 7
32895: PUSH
32896: LD_INT 27
32898: PUSH
32899: LD_INT 29
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: IN
32914: PUSH
32915: LD_VAR 0 1
32919: PPUSH
32920: LD_INT 52
32922: PPUSH
32923: CALL_OW 321
32927: PUSH
32928: LD_INT 2
32930: EQUAL
32931: AND
32932: IFFALSE 32949
// bpoints := bpoints * 1.2 ;
32934: LD_ADDR_VAR 0 10
32938: PUSH
32939: LD_VAR 0 10
32943: PUSH
32944: LD_REAL  1.20000000000000E+0000
32947: MUL
32948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32949: LD_VAR 0 6
32953: PPUSH
32954: CALL_OW 264
32958: PUSH
32959: LD_INT 6
32961: PUSH
32962: LD_INT 46
32964: PUSH
32965: LD_INT 47
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: IN
32973: IFFALSE 32990
// bpoints := bpoints * 1.2 ;
32975: LD_ADDR_VAR 0 10
32979: PUSH
32980: LD_VAR 0 10
32984: PUSH
32985: LD_REAL  1.20000000000000E+0000
32988: MUL
32989: ST_TO_ADDR
// end ; unit_building :
32990: GO 33004
32992: LD_INT 3
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33003
33000: POP
// ; end ;
33001: GO 33004
33003: POP
// for j = 1 to 3 do
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: DOUBLE
33010: LD_INT 1
33012: DEC
33013: ST_TO_ADDR
33014: LD_INT 3
33016: PUSH
33017: FOR_TO
33018: IFFALSE 33071
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 5
33029: PPUSH
33030: LD_VAR 0 7
33034: PPUSH
33035: LD_VAR 0 5
33039: PUSH
33040: LD_VAR 0 7
33044: ARRAY
33045: PUSH
33046: LD_VAR 0 9
33050: PUSH
33051: LD_VAR 0 7
33055: ARRAY
33056: PUSH
33057: LD_VAR 0 10
33061: MUL
33062: PLUS
33063: PPUSH
33064: CALL_OW 1
33068: ST_TO_ADDR
33069: GO 33017
33071: POP
33072: POP
// end ;
33073: GO 31552
33075: POP
33076: POP
// result := Replace ( result , 4 , tmp ) ;
33077: LD_ADDR_VAR 0 5
33081: PUSH
33082: LD_VAR 0 5
33086: PPUSH
33087: LD_INT 4
33089: PPUSH
33090: LD_VAR 0 8
33094: PPUSH
33095: CALL_OW 1
33099: ST_TO_ADDR
// end ;
33100: LD_VAR 0 5
33104: RET
// export function DangerAtRange ( unit , range ) ; begin
33105: LD_INT 0
33107: PPUSH
// if not unit then
33108: LD_VAR 0 1
33112: NOT
33113: IFFALSE 33117
// exit ;
33115: GO 33162
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 255
33131: PPUSH
33132: LD_VAR 0 1
33136: PPUSH
33137: CALL_OW 250
33141: PPUSH
33142: LD_VAR 0 1
33146: PPUSH
33147: CALL_OW 251
33151: PPUSH
33152: LD_VAR 0 2
33156: PPUSH
33157: CALL 31404 0 4
33161: ST_TO_ADDR
// end ;
33162: LD_VAR 0 3
33166: RET
// export function DangerInArea ( side , area ) ; begin
33167: LD_INT 0
33169: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33170: LD_ADDR_VAR 0 3
33174: PUSH
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_INT 81
33182: PUSH
33183: LD_VAR 0 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PPUSH
33192: CALL_OW 70
33196: ST_TO_ADDR
// end ;
33197: LD_VAR 0 3
33201: RET
// export function IsExtension ( b ) ; begin
33202: LD_INT 0
33204: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33205: LD_ADDR_VAR 0 2
33209: PUSH
33210: LD_VAR 0 1
33214: PUSH
33215: LD_INT 23
33217: PUSH
33218: LD_INT 20
33220: PUSH
33221: LD_INT 22
33223: PUSH
33224: LD_INT 17
33226: PUSH
33227: LD_INT 24
33229: PUSH
33230: LD_INT 21
33232: PUSH
33233: LD_INT 19
33235: PUSH
33236: LD_INT 16
33238: PUSH
33239: LD_INT 25
33241: PUSH
33242: LD_INT 18
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: IN
33257: ST_TO_ADDR
// end ;
33258: LD_VAR 0 2
33262: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
33267: PPUSH
// result := [ ] ;
33268: LD_ADDR_VAR 0 4
33272: PUSH
33273: EMPTY
33274: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33275: LD_ADDR_VAR 0 5
33279: PUSH
33280: LD_VAR 0 2
33284: PPUSH
33285: LD_INT 21
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PPUSH
33295: CALL_OW 70
33299: ST_TO_ADDR
// if not tmp then
33300: LD_VAR 0 5
33304: NOT
33305: IFFALSE 33309
// exit ;
33307: GO 33373
// if checkLink then
33309: LD_VAR 0 3
33313: IFFALSE 33363
// begin for i in tmp do
33315: LD_ADDR_VAR 0 6
33319: PUSH
33320: LD_VAR 0 5
33324: PUSH
33325: FOR_IN
33326: IFFALSE 33361
// if GetBase ( i ) <> base then
33328: LD_VAR 0 6
33332: PPUSH
33333: CALL_OW 274
33337: PUSH
33338: LD_VAR 0 1
33342: NONEQUAL
33343: IFFALSE 33359
// ComLinkToBase ( base , i ) ;
33345: LD_VAR 0 1
33349: PPUSH
33350: LD_VAR 0 6
33354: PPUSH
33355: CALL_OW 169
33359: GO 33325
33361: POP
33362: POP
// end ; result := tmp ;
33363: LD_ADDR_VAR 0 4
33367: PUSH
33368: LD_VAR 0 5
33372: ST_TO_ADDR
// end ;
33373: LD_VAR 0 4
33377: RET
// export function ComComplete ( units , b ) ; var i ; begin
33378: LD_INT 0
33380: PPUSH
33381: PPUSH
// if not units then
33382: LD_VAR 0 1
33386: NOT
33387: IFFALSE 33391
// exit ;
33389: GO 33481
// for i in units do
33391: LD_ADDR_VAR 0 4
33395: PUSH
33396: LD_VAR 0 1
33400: PUSH
33401: FOR_IN
33402: IFFALSE 33479
// if BuildingStatus ( b ) = bs_build then
33404: LD_VAR 0 2
33408: PPUSH
33409: CALL_OW 461
33413: PUSH
33414: LD_INT 1
33416: EQUAL
33417: IFFALSE 33477
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33419: LD_VAR 0 4
33423: PPUSH
33424: LD_STRING h
33426: PUSH
33427: LD_VAR 0 2
33431: PPUSH
33432: CALL_OW 250
33436: PUSH
33437: LD_VAR 0 2
33441: PPUSH
33442: CALL_OW 251
33446: PUSH
33447: LD_VAR 0 2
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: PPUSH
33473: CALL_OW 446
33477: GO 33401
33479: POP
33480: POP
// end ;
33481: LD_VAR 0 3
33485: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33486: LD_INT 0
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33494: LD_VAR 0 1
33498: NOT
33499: PUSH
33500: LD_VAR 0 1
33504: PPUSH
33505: CALL_OW 263
33509: PUSH
33510: LD_INT 2
33512: NONEQUAL
33513: OR
33514: IFFALSE 33518
// exit ;
33516: GO 33834
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33518: LD_ADDR_VAR 0 6
33522: PUSH
33523: LD_INT 22
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 255
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 2
33542: PUSH
33543: LD_INT 30
33545: PUSH
33546: LD_INT 36
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 34
33555: PUSH
33556: LD_INT 31
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PPUSH
33572: CALL_OW 69
33576: ST_TO_ADDR
// if not tmp then
33577: LD_VAR 0 6
33581: NOT
33582: IFFALSE 33586
// exit ;
33584: GO 33834
// result := [ ] ;
33586: LD_ADDR_VAR 0 2
33590: PUSH
33591: EMPTY
33592: ST_TO_ADDR
// for i in tmp do
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_VAR 0 6
33602: PUSH
33603: FOR_IN
33604: IFFALSE 33675
// begin t := UnitsInside ( i ) ;
33606: LD_ADDR_VAR 0 4
33610: PUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: CALL_OW 313
33620: ST_TO_ADDR
// if t then
33621: LD_VAR 0 4
33625: IFFALSE 33673
// for j in t do
33627: LD_ADDR_VAR 0 7
33631: PUSH
33632: LD_VAR 0 4
33636: PUSH
33637: FOR_IN
33638: IFFALSE 33671
// result := Replace ( result , result + 1 , j ) ;
33640: LD_ADDR_VAR 0 2
33644: PUSH
33645: LD_VAR 0 2
33649: PPUSH
33650: LD_VAR 0 2
33654: PUSH
33655: LD_INT 1
33657: PLUS
33658: PPUSH
33659: LD_VAR 0 7
33663: PPUSH
33664: CALL_OW 1
33668: ST_TO_ADDR
33669: GO 33637
33671: POP
33672: POP
// end ;
33673: GO 33603
33675: POP
33676: POP
// if not result then
33677: LD_VAR 0 2
33681: NOT
33682: IFFALSE 33686
// exit ;
33684: GO 33834
// mech := result [ 1 ] ;
33686: LD_ADDR_VAR 0 5
33690: PUSH
33691: LD_VAR 0 2
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: ST_TO_ADDR
// if result > 1 then
33700: LD_VAR 0 2
33704: PUSH
33705: LD_INT 1
33707: GREATER
33708: IFFALSE 33820
// begin for i = 2 to result do
33710: LD_ADDR_VAR 0 3
33714: PUSH
33715: DOUBLE
33716: LD_INT 2
33718: DEC
33719: ST_TO_ADDR
33720: LD_VAR 0 2
33724: PUSH
33725: FOR_TO
33726: IFFALSE 33818
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33728: LD_ADDR_VAR 0 4
33732: PUSH
33733: LD_VAR 0 2
33737: PUSH
33738: LD_VAR 0 3
33742: ARRAY
33743: PPUSH
33744: LD_INT 3
33746: PPUSH
33747: CALL_OW 259
33751: PUSH
33752: LD_VAR 0 2
33756: PUSH
33757: LD_VAR 0 3
33761: ARRAY
33762: PPUSH
33763: CALL_OW 432
33767: MINUS
33768: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33769: LD_VAR 0 4
33773: PUSH
33774: LD_VAR 0 5
33778: PPUSH
33779: LD_INT 3
33781: PPUSH
33782: CALL_OW 259
33786: PUSH
33787: LD_VAR 0 5
33791: PPUSH
33792: CALL_OW 432
33796: MINUS
33797: GREATEREQUAL
33798: IFFALSE 33816
// mech := result [ i ] ;
33800: LD_ADDR_VAR 0 5
33804: PUSH
33805: LD_VAR 0 2
33809: PUSH
33810: LD_VAR 0 3
33814: ARRAY
33815: ST_TO_ADDR
// end ;
33816: GO 33725
33818: POP
33819: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33820: LD_VAR 0 1
33824: PPUSH
33825: LD_VAR 0 5
33829: PPUSH
33830: CALL_OW 135
// end ;
33834: LD_VAR 0 2
33838: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33839: LD_INT 0
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
// result := [ ] ;
33854: LD_ADDR_VAR 0 7
33858: PUSH
33859: EMPTY
33860: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33861: LD_VAR 0 1
33865: PPUSH
33866: CALL_OW 266
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: IN
33881: NOT
33882: IFFALSE 33886
// exit ;
33884: GO 35520
// if name then
33886: LD_VAR 0 3
33890: IFFALSE 33906
// SetBName ( base_dep , name ) ;
33892: LD_VAR 0 1
33896: PPUSH
33897: LD_VAR 0 3
33901: PPUSH
33902: CALL_OW 500
// base := GetBase ( base_dep ) ;
33906: LD_ADDR_VAR 0 15
33910: PUSH
33911: LD_VAR 0 1
33915: PPUSH
33916: CALL_OW 274
33920: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33921: LD_ADDR_VAR 0 16
33925: PUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 255
33935: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33936: LD_ADDR_VAR 0 17
33940: PUSH
33941: LD_VAR 0 1
33945: PPUSH
33946: CALL_OW 248
33950: ST_TO_ADDR
// if sources then
33951: LD_VAR 0 5
33955: IFFALSE 34002
// for i = 1 to 3 do
33957: LD_ADDR_VAR 0 8
33961: PUSH
33962: DOUBLE
33963: LD_INT 1
33965: DEC
33966: ST_TO_ADDR
33967: LD_INT 3
33969: PUSH
33970: FOR_TO
33971: IFFALSE 34000
// AddResourceType ( base , i , sources [ i ] ) ;
33973: LD_VAR 0 15
33977: PPUSH
33978: LD_VAR 0 8
33982: PPUSH
33983: LD_VAR 0 5
33987: PUSH
33988: LD_VAR 0 8
33992: ARRAY
33993: PPUSH
33994: CALL_OW 276
33998: GO 33970
34000: POP
34001: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34002: LD_ADDR_VAR 0 18
34006: PUSH
34007: LD_VAR 0 15
34011: PPUSH
34012: LD_VAR 0 2
34016: PPUSH
34017: LD_INT 1
34019: PPUSH
34020: CALL 33263 0 3
34024: ST_TO_ADDR
// InitHc ;
34025: CALL_OW 19
// InitUc ;
34029: CALL_OW 18
// uc_side := side ;
34033: LD_ADDR_OWVAR 20
34037: PUSH
34038: LD_VAR 0 16
34042: ST_TO_ADDR
// uc_nation := nation ;
34043: LD_ADDR_OWVAR 21
34047: PUSH
34048: LD_VAR 0 17
34052: ST_TO_ADDR
// if buildings then
34053: LD_VAR 0 18
34057: IFFALSE 35379
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34059: LD_ADDR_VAR 0 19
34063: PUSH
34064: LD_VAR 0 18
34068: PPUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 30
34074: PUSH
34075: LD_INT 29
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 30
34084: PUSH
34085: LD_INT 30
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: PPUSH
34097: CALL_OW 72
34101: ST_TO_ADDR
// if tmp then
34102: LD_VAR 0 19
34106: IFFALSE 34154
// for i in tmp do
34108: LD_ADDR_VAR 0 8
34112: PUSH
34113: LD_VAR 0 19
34117: PUSH
34118: FOR_IN
34119: IFFALSE 34152
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34121: LD_VAR 0 8
34125: PPUSH
34126: CALL_OW 250
34130: PPUSH
34131: LD_VAR 0 8
34135: PPUSH
34136: CALL_OW 251
34140: PPUSH
34141: LD_VAR 0 16
34145: PPUSH
34146: CALL_OW 441
34150: GO 34118
34152: POP
34153: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34154: LD_VAR 0 18
34158: PPUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 30
34164: PUSH
34165: LD_INT 32
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 30
34174: PUSH
34175: LD_INT 33
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: PPUSH
34187: CALL_OW 72
34191: IFFALSE 34279
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34193: LD_ADDR_VAR 0 8
34197: PUSH
34198: LD_VAR 0 18
34202: PPUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 30
34208: PUSH
34209: LD_INT 32
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 30
34218: PUSH
34219: LD_INT 33
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: PPUSH
34231: CALL_OW 72
34235: PUSH
34236: FOR_IN
34237: IFFALSE 34277
// begin if not GetBWeapon ( i ) then
34239: LD_VAR 0 8
34243: PPUSH
34244: CALL_OW 269
34248: NOT
34249: IFFALSE 34275
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34251: LD_VAR 0 8
34255: PPUSH
34256: LD_VAR 0 8
34260: PPUSH
34261: LD_VAR 0 2
34265: PPUSH
34266: CALL 35525 0 2
34270: PPUSH
34271: CALL_OW 431
// end ;
34275: GO 34236
34277: POP
34278: POP
// end ; for i = 1 to personel do
34279: LD_ADDR_VAR 0 8
34283: PUSH
34284: DOUBLE
34285: LD_INT 1
34287: DEC
34288: ST_TO_ADDR
34289: LD_VAR 0 6
34293: PUSH
34294: FOR_TO
34295: IFFALSE 35359
// begin if i > 4 then
34297: LD_VAR 0 8
34301: PUSH
34302: LD_INT 4
34304: GREATER
34305: IFFALSE 34309
// break ;
34307: GO 35359
// case i of 1 :
34309: LD_VAR 0 8
34313: PUSH
34314: LD_INT 1
34316: DOUBLE
34317: EQUAL
34318: IFTRUE 34322
34320: GO 34402
34322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34323: LD_ADDR_VAR 0 12
34327: PUSH
34328: LD_VAR 0 18
34332: PPUSH
34333: LD_INT 22
34335: PUSH
34336: LD_VAR 0 16
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 58
34347: PUSH
34348: EMPTY
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 30
34356: PUSH
34357: LD_INT 32
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 30
34366: PUSH
34367: LD_INT 4
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 30
34376: PUSH
34377: LD_INT 5
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: PPUSH
34395: CALL_OW 72
34399: ST_TO_ADDR
34400: GO 34624
34402: LD_INT 2
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34472
34410: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34411: LD_ADDR_VAR 0 12
34415: PUSH
34416: LD_VAR 0 18
34420: PPUSH
34421: LD_INT 22
34423: PUSH
34424: LD_VAR 0 16
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 30
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 30
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PPUSH
34465: CALL_OW 72
34469: ST_TO_ADDR
34470: GO 34624
34472: LD_INT 3
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34542
34480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34481: LD_ADDR_VAR 0 12
34485: PUSH
34486: LD_VAR 0 18
34490: PPUSH
34491: LD_INT 22
34493: PUSH
34494: LD_VAR 0 16
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 30
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 30
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PPUSH
34535: CALL_OW 72
34539: ST_TO_ADDR
34540: GO 34624
34542: LD_INT 4
34544: DOUBLE
34545: EQUAL
34546: IFTRUE 34550
34548: GO 34623
34550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34551: LD_ADDR_VAR 0 12
34555: PUSH
34556: LD_VAR 0 18
34560: PPUSH
34561: LD_INT 22
34563: PUSH
34564: LD_VAR 0 16
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 30
34578: PUSH
34579: LD_INT 6
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 30
34588: PUSH
34589: LD_INT 7
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 30
34598: PUSH
34599: LD_INT 8
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PPUSH
34616: CALL_OW 72
34620: ST_TO_ADDR
34621: GO 34624
34623: POP
// if i = 1 then
34624: LD_VAR 0 8
34628: PUSH
34629: LD_INT 1
34631: EQUAL
34632: IFFALSE 34743
// begin tmp := [ ] ;
34634: LD_ADDR_VAR 0 19
34638: PUSH
34639: EMPTY
34640: ST_TO_ADDR
// for j in f do
34641: LD_ADDR_VAR 0 9
34645: PUSH
34646: LD_VAR 0 12
34650: PUSH
34651: FOR_IN
34652: IFFALSE 34725
// if GetBType ( j ) = b_bunker then
34654: LD_VAR 0 9
34658: PPUSH
34659: CALL_OW 266
34663: PUSH
34664: LD_INT 32
34666: EQUAL
34667: IFFALSE 34694
// tmp := Insert ( tmp , 1 , j ) else
34669: LD_ADDR_VAR 0 19
34673: PUSH
34674: LD_VAR 0 19
34678: PPUSH
34679: LD_INT 1
34681: PPUSH
34682: LD_VAR 0 9
34686: PPUSH
34687: CALL_OW 2
34691: ST_TO_ADDR
34692: GO 34723
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34694: LD_ADDR_VAR 0 19
34698: PUSH
34699: LD_VAR 0 19
34703: PPUSH
34704: LD_VAR 0 19
34708: PUSH
34709: LD_INT 1
34711: PLUS
34712: PPUSH
34713: LD_VAR 0 9
34717: PPUSH
34718: CALL_OW 2
34722: ST_TO_ADDR
34723: GO 34651
34725: POP
34726: POP
// if tmp then
34727: LD_VAR 0 19
34731: IFFALSE 34743
// f := tmp ;
34733: LD_ADDR_VAR 0 12
34737: PUSH
34738: LD_VAR 0 19
34742: ST_TO_ADDR
// end ; x := personel [ i ] ;
34743: LD_ADDR_VAR 0 13
34747: PUSH
34748: LD_VAR 0 6
34752: PUSH
34753: LD_VAR 0 8
34757: ARRAY
34758: ST_TO_ADDR
// if x = - 1 then
34759: LD_VAR 0 13
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: EQUAL
34768: IFFALSE 34977
// begin for j in f do
34770: LD_ADDR_VAR 0 9
34774: PUSH
34775: LD_VAR 0 12
34779: PUSH
34780: FOR_IN
34781: IFFALSE 34973
// repeat InitHc ;
34783: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34787: LD_VAR 0 9
34791: PPUSH
34792: CALL_OW 266
34796: PUSH
34797: LD_INT 5
34799: EQUAL
34800: IFFALSE 34870
// begin if UnitsInside ( j ) < 3 then
34802: LD_VAR 0 9
34806: PPUSH
34807: CALL_OW 313
34811: PUSH
34812: LD_INT 3
34814: LESS
34815: IFFALSE 34851
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34817: LD_INT 0
34819: PPUSH
34820: LD_INT 5
34822: PUSH
34823: LD_INT 8
34825: PUSH
34826: LD_INT 9
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: PUSH
34834: LD_VAR 0 17
34838: ARRAY
34839: PPUSH
34840: LD_VAR 0 4
34844: PPUSH
34845: CALL_OW 380
34849: GO 34868
// PrepareHuman ( false , i , skill ) ;
34851: LD_INT 0
34853: PPUSH
34854: LD_VAR 0 8
34858: PPUSH
34859: LD_VAR 0 4
34863: PPUSH
34864: CALL_OW 380
// end else
34868: GO 34887
// PrepareHuman ( false , i , skill ) ;
34870: LD_INT 0
34872: PPUSH
34873: LD_VAR 0 8
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: CALL_OW 380
// un := CreateHuman ;
34887: LD_ADDR_VAR 0 14
34891: PUSH
34892: CALL_OW 44
34896: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34897: LD_ADDR_VAR 0 7
34901: PUSH
34902: LD_VAR 0 7
34906: PPUSH
34907: LD_INT 1
34909: PPUSH
34910: LD_VAR 0 14
34914: PPUSH
34915: CALL_OW 2
34919: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34920: LD_VAR 0 14
34924: PPUSH
34925: LD_VAR 0 9
34929: PPUSH
34930: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34934: LD_VAR 0 9
34938: PPUSH
34939: CALL_OW 313
34943: PUSH
34944: LD_INT 6
34946: EQUAL
34947: PUSH
34948: LD_VAR 0 9
34952: PPUSH
34953: CALL_OW 266
34957: PUSH
34958: LD_INT 32
34960: PUSH
34961: LD_INT 31
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: IN
34968: OR
34969: IFFALSE 34783
34971: GO 34780
34973: POP
34974: POP
// end else
34975: GO 35357
// for j = 1 to x do
34977: LD_ADDR_VAR 0 9
34981: PUSH
34982: DOUBLE
34983: LD_INT 1
34985: DEC
34986: ST_TO_ADDR
34987: LD_VAR 0 13
34991: PUSH
34992: FOR_TO
34993: IFFALSE 35355
// begin InitHc ;
34995: CALL_OW 19
// if not f then
34999: LD_VAR 0 12
35003: NOT
35004: IFFALSE 35093
// begin PrepareHuman ( false , i , skill ) ;
35006: LD_INT 0
35008: PPUSH
35009: LD_VAR 0 8
35013: PPUSH
35014: LD_VAR 0 4
35018: PPUSH
35019: CALL_OW 380
// un := CreateHuman ;
35023: LD_ADDR_VAR 0 14
35027: PUSH
35028: CALL_OW 44
35032: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35033: LD_ADDR_VAR 0 7
35037: PUSH
35038: LD_VAR 0 7
35042: PPUSH
35043: LD_INT 1
35045: PPUSH
35046: LD_VAR 0 14
35050: PPUSH
35051: CALL_OW 2
35055: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35056: LD_VAR 0 14
35060: PPUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 250
35070: PPUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 251
35080: PPUSH
35081: LD_INT 10
35083: PPUSH
35084: LD_INT 0
35086: PPUSH
35087: CALL_OW 50
// continue ;
35091: GO 34992
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35093: LD_VAR 0 12
35097: PUSH
35098: LD_INT 1
35100: ARRAY
35101: PPUSH
35102: CALL_OW 313
35106: PUSH
35107: LD_VAR 0 12
35111: PUSH
35112: LD_INT 1
35114: ARRAY
35115: PPUSH
35116: CALL_OW 266
35120: PUSH
35121: LD_INT 32
35123: PUSH
35124: LD_INT 31
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: IN
35131: AND
35132: PUSH
35133: LD_VAR 0 12
35137: PUSH
35138: LD_INT 1
35140: ARRAY
35141: PPUSH
35142: CALL_OW 313
35146: PUSH
35147: LD_INT 6
35149: EQUAL
35150: OR
35151: IFFALSE 35171
// f := Delete ( f , 1 ) ;
35153: LD_ADDR_VAR 0 12
35157: PUSH
35158: LD_VAR 0 12
35162: PPUSH
35163: LD_INT 1
35165: PPUSH
35166: CALL_OW 3
35170: ST_TO_ADDR
// if not f then
35171: LD_VAR 0 12
35175: NOT
35176: IFFALSE 35194
// begin x := x + 2 ;
35178: LD_ADDR_VAR 0 13
35182: PUSH
35183: LD_VAR 0 13
35187: PUSH
35188: LD_INT 2
35190: PLUS
35191: ST_TO_ADDR
// continue ;
35192: GO 34992
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35194: LD_VAR 0 12
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PPUSH
35203: CALL_OW 266
35207: PUSH
35208: LD_INT 5
35210: EQUAL
35211: IFFALSE 35285
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35213: LD_VAR 0 12
35217: PUSH
35218: LD_INT 1
35220: ARRAY
35221: PPUSH
35222: CALL_OW 313
35226: PUSH
35227: LD_INT 3
35229: LESS
35230: IFFALSE 35266
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35232: LD_INT 0
35234: PPUSH
35235: LD_INT 5
35237: PUSH
35238: LD_INT 8
35240: PUSH
35241: LD_INT 9
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: PUSH
35249: LD_VAR 0 17
35253: ARRAY
35254: PPUSH
35255: LD_VAR 0 4
35259: PPUSH
35260: CALL_OW 380
35264: GO 35283
// PrepareHuman ( false , i , skill ) ;
35266: LD_INT 0
35268: PPUSH
35269: LD_VAR 0 8
35273: PPUSH
35274: LD_VAR 0 4
35278: PPUSH
35279: CALL_OW 380
// end else
35283: GO 35302
// PrepareHuman ( false , i , skill ) ;
35285: LD_INT 0
35287: PPUSH
35288: LD_VAR 0 8
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: CALL_OW 380
// un := CreateHuman ;
35302: LD_ADDR_VAR 0 14
35306: PUSH
35307: CALL_OW 44
35311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35312: LD_ADDR_VAR 0 7
35316: PUSH
35317: LD_VAR 0 7
35321: PPUSH
35322: LD_INT 1
35324: PPUSH
35325: LD_VAR 0 14
35329: PPUSH
35330: CALL_OW 2
35334: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35335: LD_VAR 0 14
35339: PPUSH
35340: LD_VAR 0 12
35344: PUSH
35345: LD_INT 1
35347: ARRAY
35348: PPUSH
35349: CALL_OW 52
// end ;
35353: GO 34992
35355: POP
35356: POP
// end ;
35357: GO 34294
35359: POP
35360: POP
// result := result ^ buildings ;
35361: LD_ADDR_VAR 0 7
35365: PUSH
35366: LD_VAR 0 7
35370: PUSH
35371: LD_VAR 0 18
35375: ADD
35376: ST_TO_ADDR
// end else
35377: GO 35520
// begin for i = 1 to personel do
35379: LD_ADDR_VAR 0 8
35383: PUSH
35384: DOUBLE
35385: LD_INT 1
35387: DEC
35388: ST_TO_ADDR
35389: LD_VAR 0 6
35393: PUSH
35394: FOR_TO
35395: IFFALSE 35518
// begin if i > 4 then
35397: LD_VAR 0 8
35401: PUSH
35402: LD_INT 4
35404: GREATER
35405: IFFALSE 35409
// break ;
35407: GO 35518
// x := personel [ i ] ;
35409: LD_ADDR_VAR 0 13
35413: PUSH
35414: LD_VAR 0 6
35418: PUSH
35419: LD_VAR 0 8
35423: ARRAY
35424: ST_TO_ADDR
// if x = - 1 then
35425: LD_VAR 0 13
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: EQUAL
35434: IFFALSE 35438
// continue ;
35436: GO 35394
// PrepareHuman ( false , i , skill ) ;
35438: LD_INT 0
35440: PPUSH
35441: LD_VAR 0 8
35445: PPUSH
35446: LD_VAR 0 4
35450: PPUSH
35451: CALL_OW 380
// un := CreateHuman ;
35455: LD_ADDR_VAR 0 14
35459: PUSH
35460: CALL_OW 44
35464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35465: LD_VAR 0 14
35469: PPUSH
35470: LD_VAR 0 1
35474: PPUSH
35475: CALL_OW 250
35479: PPUSH
35480: LD_VAR 0 1
35484: PPUSH
35485: CALL_OW 251
35489: PPUSH
35490: LD_INT 10
35492: PPUSH
35493: LD_INT 0
35495: PPUSH
35496: CALL_OW 50
// result := result ^ un ;
35500: LD_ADDR_VAR 0 7
35504: PUSH
35505: LD_VAR 0 7
35509: PUSH
35510: LD_VAR 0 14
35514: ADD
35515: ST_TO_ADDR
// end ;
35516: GO 35394
35518: POP
35519: POP
// end ; end ;
35520: LD_VAR 0 7
35524: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35525: LD_INT 0
35527: PPUSH
35528: PPUSH
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
35533: PPUSH
35534: PPUSH
35535: PPUSH
35536: PPUSH
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
// result := false ;
35543: LD_ADDR_VAR 0 3
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35551: LD_VAR 0 1
35555: NOT
35556: PUSH
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL_OW 266
35566: PUSH
35567: LD_INT 32
35569: PUSH
35570: LD_INT 33
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: IN
35577: NOT
35578: OR
35579: IFFALSE 35583
// exit ;
35581: GO 36692
// nat := GetNation ( tower ) ;
35583: LD_ADDR_VAR 0 12
35587: PUSH
35588: LD_VAR 0 1
35592: PPUSH
35593: CALL_OW 248
35597: ST_TO_ADDR
// side := GetSide ( tower ) ;
35598: LD_ADDR_VAR 0 16
35602: PUSH
35603: LD_VAR 0 1
35607: PPUSH
35608: CALL_OW 255
35612: ST_TO_ADDR
// x := GetX ( tower ) ;
35613: LD_ADDR_VAR 0 10
35617: PUSH
35618: LD_VAR 0 1
35622: PPUSH
35623: CALL_OW 250
35627: ST_TO_ADDR
// y := GetY ( tower ) ;
35628: LD_ADDR_VAR 0 11
35632: PUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: CALL_OW 251
35642: ST_TO_ADDR
// if not x or not y then
35643: LD_VAR 0 10
35647: NOT
35648: PUSH
35649: LD_VAR 0 11
35653: NOT
35654: OR
35655: IFFALSE 35659
// exit ;
35657: GO 36692
// weapon := 0 ;
35659: LD_ADDR_VAR 0 18
35663: PUSH
35664: LD_INT 0
35666: ST_TO_ADDR
// fac_list := [ ] ;
35667: LD_ADDR_VAR 0 17
35671: PUSH
35672: EMPTY
35673: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35674: LD_ADDR_VAR 0 6
35678: PUSH
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL_OW 274
35688: PPUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_INT 0
35696: PPUSH
35697: CALL 33263 0 3
35701: PPUSH
35702: LD_INT 30
35704: PUSH
35705: LD_INT 3
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PPUSH
35712: CALL_OW 72
35716: ST_TO_ADDR
// if not factories then
35717: LD_VAR 0 6
35721: NOT
35722: IFFALSE 35726
// exit ;
35724: GO 36692
// for i in factories do
35726: LD_ADDR_VAR 0 8
35730: PUSH
35731: LD_VAR 0 6
35735: PUSH
35736: FOR_IN
35737: IFFALSE 35762
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35739: LD_ADDR_VAR 0 17
35743: PUSH
35744: LD_VAR 0 17
35748: PUSH
35749: LD_VAR 0 8
35753: PPUSH
35754: CALL_OW 478
35758: UNION
35759: ST_TO_ADDR
35760: GO 35736
35762: POP
35763: POP
// if not fac_list then
35764: LD_VAR 0 17
35768: NOT
35769: IFFALSE 35773
// exit ;
35771: GO 36692
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35773: LD_ADDR_VAR 0 5
35777: PUSH
35778: LD_INT 4
35780: PUSH
35781: LD_INT 5
35783: PUSH
35784: LD_INT 9
35786: PUSH
35787: LD_INT 10
35789: PUSH
35790: LD_INT 6
35792: PUSH
35793: LD_INT 7
35795: PUSH
35796: LD_INT 11
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 27
35810: PUSH
35811: LD_INT 28
35813: PUSH
35814: LD_INT 26
35816: PUSH
35817: LD_INT 30
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 43
35828: PUSH
35829: LD_INT 44
35831: PUSH
35832: LD_INT 46
35834: PUSH
35835: LD_INT 45
35837: PUSH
35838: LD_INT 47
35840: PUSH
35841: LD_INT 49
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: PUSH
35857: LD_VAR 0 12
35861: ARRAY
35862: ST_TO_ADDR
// list := list isect fac_list ;
35863: LD_ADDR_VAR 0 5
35867: PUSH
35868: LD_VAR 0 5
35872: PUSH
35873: LD_VAR 0 17
35877: ISECT
35878: ST_TO_ADDR
// if not list then
35879: LD_VAR 0 5
35883: NOT
35884: IFFALSE 35888
// exit ;
35886: GO 36692
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35888: LD_VAR 0 12
35892: PUSH
35893: LD_INT 3
35895: EQUAL
35896: PUSH
35897: LD_INT 49
35899: PUSH
35900: LD_VAR 0 5
35904: IN
35905: AND
35906: PUSH
35907: LD_INT 31
35909: PPUSH
35910: LD_VAR 0 16
35914: PPUSH
35915: CALL_OW 321
35919: PUSH
35920: LD_INT 2
35922: EQUAL
35923: AND
35924: IFFALSE 35984
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35926: LD_INT 22
35928: PUSH
35929: LD_VAR 0 16
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 35
35940: PUSH
35941: LD_INT 49
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 91
35950: PUSH
35951: LD_VAR 0 1
35955: PUSH
35956: LD_INT 10
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: PPUSH
35969: CALL_OW 69
35973: NOT
35974: IFFALSE 35984
// weapon := ru_time_lapser ;
35976: LD_ADDR_VAR 0 18
35980: PUSH
35981: LD_INT 49
35983: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35984: LD_VAR 0 12
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: IN
35999: PUSH
36000: LD_INT 11
36002: PUSH
36003: LD_VAR 0 5
36007: IN
36008: PUSH
36009: LD_INT 30
36011: PUSH
36012: LD_VAR 0 5
36016: IN
36017: OR
36018: AND
36019: PUSH
36020: LD_INT 6
36022: PPUSH
36023: LD_VAR 0 16
36027: PPUSH
36028: CALL_OW 321
36032: PUSH
36033: LD_INT 2
36035: EQUAL
36036: AND
36037: IFFALSE 36202
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36039: LD_INT 22
36041: PUSH
36042: LD_VAR 0 16
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 35
36056: PUSH
36057: LD_INT 11
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 35
36066: PUSH
36067: LD_INT 30
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 91
36081: PUSH
36082: LD_VAR 0 1
36086: PUSH
36087: LD_INT 18
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: PPUSH
36100: CALL_OW 69
36104: NOT
36105: PUSH
36106: LD_INT 22
36108: PUSH
36109: LD_VAR 0 16
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 30
36123: PUSH
36124: LD_INT 32
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 30
36133: PUSH
36134: LD_INT 33
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 91
36148: PUSH
36149: LD_VAR 0 1
36153: PUSH
36154: LD_INT 12
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: PPUSH
36170: CALL_OW 69
36174: PUSH
36175: LD_INT 2
36177: GREATER
36178: AND
36179: IFFALSE 36202
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36181: LD_ADDR_VAR 0 18
36185: PUSH
36186: LD_INT 11
36188: PUSH
36189: LD_INT 30
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_VAR 0 12
36200: ARRAY
36201: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36202: LD_VAR 0 18
36206: NOT
36207: PUSH
36208: LD_INT 40
36210: PPUSH
36211: LD_VAR 0 16
36215: PPUSH
36216: CALL_OW 321
36220: PUSH
36221: LD_INT 2
36223: EQUAL
36224: AND
36225: PUSH
36226: LD_INT 7
36228: PUSH
36229: LD_VAR 0 5
36233: IN
36234: PUSH
36235: LD_INT 28
36237: PUSH
36238: LD_VAR 0 5
36242: IN
36243: OR
36244: PUSH
36245: LD_INT 45
36247: PUSH
36248: LD_VAR 0 5
36252: IN
36253: OR
36254: AND
36255: IFFALSE 36509
// begin hex := GetHexInfo ( x , y ) ;
36257: LD_ADDR_VAR 0 4
36261: PUSH
36262: LD_VAR 0 10
36266: PPUSH
36267: LD_VAR 0 11
36271: PPUSH
36272: CALL_OW 546
36276: ST_TO_ADDR
// if hex [ 1 ] then
36277: LD_VAR 0 4
36281: PUSH
36282: LD_INT 1
36284: ARRAY
36285: IFFALSE 36289
// exit ;
36287: GO 36692
// height := hex [ 2 ] ;
36289: LD_ADDR_VAR 0 15
36293: PUSH
36294: LD_VAR 0 4
36298: PUSH
36299: LD_INT 2
36301: ARRAY
36302: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36303: LD_ADDR_VAR 0 14
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 3
36316: PUSH
36317: LD_INT 5
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: ST_TO_ADDR
// for i in tmp do
36326: LD_ADDR_VAR 0 8
36330: PUSH
36331: LD_VAR 0 14
36335: PUSH
36336: FOR_IN
36337: IFFALSE 36507
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36339: LD_ADDR_VAR 0 9
36343: PUSH
36344: LD_VAR 0 10
36348: PPUSH
36349: LD_VAR 0 8
36353: PPUSH
36354: LD_INT 5
36356: PPUSH
36357: CALL_OW 272
36361: PUSH
36362: LD_VAR 0 11
36366: PPUSH
36367: LD_VAR 0 8
36371: PPUSH
36372: LD_INT 5
36374: PPUSH
36375: CALL_OW 273
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36384: LD_VAR 0 9
36388: PUSH
36389: LD_INT 1
36391: ARRAY
36392: PPUSH
36393: LD_VAR 0 9
36397: PUSH
36398: LD_INT 2
36400: ARRAY
36401: PPUSH
36402: CALL_OW 488
36406: IFFALSE 36505
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36408: LD_ADDR_VAR 0 4
36412: PUSH
36413: LD_VAR 0 9
36417: PUSH
36418: LD_INT 1
36420: ARRAY
36421: PPUSH
36422: LD_VAR 0 9
36426: PUSH
36427: LD_INT 2
36429: ARRAY
36430: PPUSH
36431: CALL_OW 546
36435: ST_TO_ADDR
// if hex [ 1 ] then
36436: LD_VAR 0 4
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: IFFALSE 36448
// continue ;
36446: GO 36336
// h := hex [ 2 ] ;
36448: LD_ADDR_VAR 0 13
36452: PUSH
36453: LD_VAR 0 4
36457: PUSH
36458: LD_INT 2
36460: ARRAY
36461: ST_TO_ADDR
// if h + 7 < height then
36462: LD_VAR 0 13
36466: PUSH
36467: LD_INT 7
36469: PLUS
36470: PUSH
36471: LD_VAR 0 15
36475: LESS
36476: IFFALSE 36505
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36478: LD_ADDR_VAR 0 18
36482: PUSH
36483: LD_INT 7
36485: PUSH
36486: LD_INT 28
36488: PUSH
36489: LD_INT 45
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: PUSH
36497: LD_VAR 0 12
36501: ARRAY
36502: ST_TO_ADDR
// break ;
36503: GO 36507
// end ; end ; end ;
36505: GO 36336
36507: POP
36508: POP
// end ; if not weapon then
36509: LD_VAR 0 18
36513: NOT
36514: IFFALSE 36574
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: LD_VAR 0 5
36525: PUSH
36526: LD_INT 11
36528: PUSH
36529: LD_INT 30
36531: PUSH
36532: LD_INT 49
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: DIFF
36540: ST_TO_ADDR
// if not list then
36541: LD_VAR 0 5
36545: NOT
36546: IFFALSE 36550
// exit ;
36548: GO 36692
// weapon := list [ rand ( 1 , list ) ] ;
36550: LD_ADDR_VAR 0 18
36554: PUSH
36555: LD_VAR 0 5
36559: PUSH
36560: LD_INT 1
36562: PPUSH
36563: LD_VAR 0 5
36567: PPUSH
36568: CALL_OW 12
36572: ARRAY
36573: ST_TO_ADDR
// end ; if weapon then
36574: LD_VAR 0 18
36578: IFFALSE 36692
// begin tmp := CostOfWeapon ( weapon ) ;
36580: LD_ADDR_VAR 0 14
36584: PUSH
36585: LD_VAR 0 18
36589: PPUSH
36590: CALL_OW 451
36594: ST_TO_ADDR
// j := GetBase ( tower ) ;
36595: LD_ADDR_VAR 0 9
36599: PUSH
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL_OW 274
36609: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36610: LD_VAR 0 9
36614: PPUSH
36615: LD_INT 1
36617: PPUSH
36618: CALL_OW 275
36622: PUSH
36623: LD_VAR 0 14
36627: PUSH
36628: LD_INT 1
36630: ARRAY
36631: GREATEREQUAL
36632: PUSH
36633: LD_VAR 0 9
36637: PPUSH
36638: LD_INT 2
36640: PPUSH
36641: CALL_OW 275
36645: PUSH
36646: LD_VAR 0 14
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: GREATEREQUAL
36655: AND
36656: PUSH
36657: LD_VAR 0 9
36661: PPUSH
36662: LD_INT 3
36664: PPUSH
36665: CALL_OW 275
36669: PUSH
36670: LD_VAR 0 14
36674: PUSH
36675: LD_INT 3
36677: ARRAY
36678: GREATEREQUAL
36679: AND
36680: IFFALSE 36692
// result := weapon ;
36682: LD_ADDR_VAR 0 3
36686: PUSH
36687: LD_VAR 0 18
36691: ST_TO_ADDR
// end ; end ;
36692: LD_VAR 0 3
36696: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36697: LD_INT 0
36699: PPUSH
36700: PPUSH
// result := true ;
36701: LD_ADDR_VAR 0 3
36705: PUSH
36706: LD_INT 1
36708: ST_TO_ADDR
// if array1 = array2 then
36709: LD_VAR 0 1
36713: PUSH
36714: LD_VAR 0 2
36718: EQUAL
36719: IFFALSE 36779
// begin for i = 1 to array1 do
36721: LD_ADDR_VAR 0 4
36725: PUSH
36726: DOUBLE
36727: LD_INT 1
36729: DEC
36730: ST_TO_ADDR
36731: LD_VAR 0 1
36735: PUSH
36736: FOR_TO
36737: IFFALSE 36775
// if array1 [ i ] <> array2 [ i ] then
36739: LD_VAR 0 1
36743: PUSH
36744: LD_VAR 0 4
36748: ARRAY
36749: PUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_VAR 0 4
36759: ARRAY
36760: NONEQUAL
36761: IFFALSE 36773
// begin result := false ;
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: LD_INT 0
36770: ST_TO_ADDR
// break ;
36771: GO 36775
// end ;
36773: GO 36736
36775: POP
36776: POP
// end else
36777: GO 36787
// result := false ;
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_INT 0
36786: ST_TO_ADDR
// end ;
36787: LD_VAR 0 3
36791: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36792: LD_INT 0
36794: PPUSH
36795: PPUSH
// if not array1 or not array2 then
36796: LD_VAR 0 1
36800: NOT
36801: PUSH
36802: LD_VAR 0 2
36806: NOT
36807: OR
36808: IFFALSE 36812
// exit ;
36810: GO 36876
// result := true ;
36812: LD_ADDR_VAR 0 3
36816: PUSH
36817: LD_INT 1
36819: ST_TO_ADDR
// for i = 1 to array1 do
36820: LD_ADDR_VAR 0 4
36824: PUSH
36825: DOUBLE
36826: LD_INT 1
36828: DEC
36829: ST_TO_ADDR
36830: LD_VAR 0 1
36834: PUSH
36835: FOR_TO
36836: IFFALSE 36874
// if array1 [ i ] <> array2 [ i ] then
36838: LD_VAR 0 1
36842: PUSH
36843: LD_VAR 0 4
36847: ARRAY
36848: PUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_VAR 0 4
36858: ARRAY
36859: NONEQUAL
36860: IFFALSE 36872
// begin result := false ;
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_INT 0
36869: ST_TO_ADDR
// break ;
36870: GO 36874
// end ;
36872: GO 36835
36874: POP
36875: POP
// end ;
36876: LD_VAR 0 3
36880: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
36885: PPUSH
// pom := GetBase ( fac ) ;
36886: LD_ADDR_VAR 0 5
36890: PUSH
36891: LD_VAR 0 1
36895: PPUSH
36896: CALL_OW 274
36900: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36901: LD_ADDR_VAR 0 4
36905: PUSH
36906: LD_VAR 0 2
36910: PUSH
36911: LD_INT 1
36913: ARRAY
36914: PPUSH
36915: LD_VAR 0 2
36919: PUSH
36920: LD_INT 2
36922: ARRAY
36923: PPUSH
36924: LD_VAR 0 2
36928: PUSH
36929: LD_INT 3
36931: ARRAY
36932: PPUSH
36933: LD_VAR 0 2
36937: PUSH
36938: LD_INT 4
36940: ARRAY
36941: PPUSH
36942: CALL_OW 449
36946: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36947: LD_ADDR_VAR 0 3
36951: PUSH
36952: LD_VAR 0 5
36956: PPUSH
36957: LD_INT 1
36959: PPUSH
36960: CALL_OW 275
36964: PUSH
36965: LD_VAR 0 4
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: GREATEREQUAL
36974: PUSH
36975: LD_VAR 0 5
36979: PPUSH
36980: LD_INT 2
36982: PPUSH
36983: CALL_OW 275
36987: PUSH
36988: LD_VAR 0 4
36992: PUSH
36993: LD_INT 2
36995: ARRAY
36996: GREATEREQUAL
36997: AND
36998: PUSH
36999: LD_VAR 0 5
37003: PPUSH
37004: LD_INT 3
37006: PPUSH
37007: CALL_OW 275
37011: PUSH
37012: LD_VAR 0 4
37016: PUSH
37017: LD_INT 3
37019: ARRAY
37020: GREATEREQUAL
37021: AND
37022: ST_TO_ADDR
// end ;
37023: LD_VAR 0 3
37027: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37028: LD_INT 0
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
// pom := GetBase ( building ) ;
37034: LD_ADDR_VAR 0 3
37038: PUSH
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 274
37048: ST_TO_ADDR
// if not pom then
37049: LD_VAR 0 3
37053: NOT
37054: IFFALSE 37058
// exit ;
37056: GO 37228
// btype := GetBType ( building ) ;
37058: LD_ADDR_VAR 0 5
37062: PUSH
37063: LD_VAR 0 1
37067: PPUSH
37068: CALL_OW 266
37072: ST_TO_ADDR
// if btype = b_armoury then
37073: LD_VAR 0 5
37077: PUSH
37078: LD_INT 4
37080: EQUAL
37081: IFFALSE 37091
// btype := b_barracks ;
37083: LD_ADDR_VAR 0 5
37087: PUSH
37088: LD_INT 5
37090: ST_TO_ADDR
// if btype = b_depot then
37091: LD_VAR 0 5
37095: PUSH
37096: LD_INT 0
37098: EQUAL
37099: IFFALSE 37109
// btype := b_warehouse ;
37101: LD_ADDR_VAR 0 5
37105: PUSH
37106: LD_INT 1
37108: ST_TO_ADDR
// if btype = b_workshop then
37109: LD_VAR 0 5
37113: PUSH
37114: LD_INT 2
37116: EQUAL
37117: IFFALSE 37127
// btype := b_factory ;
37119: LD_ADDR_VAR 0 5
37123: PUSH
37124: LD_INT 3
37126: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: LD_VAR 0 5
37136: PPUSH
37137: LD_VAR 0 1
37141: PPUSH
37142: CALL_OW 248
37146: PPUSH
37147: CALL_OW 450
37151: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37152: LD_ADDR_VAR 0 2
37156: PUSH
37157: LD_VAR 0 3
37161: PPUSH
37162: LD_INT 1
37164: PPUSH
37165: CALL_OW 275
37169: PUSH
37170: LD_VAR 0 4
37174: PUSH
37175: LD_INT 1
37177: ARRAY
37178: GREATEREQUAL
37179: PUSH
37180: LD_VAR 0 3
37184: PPUSH
37185: LD_INT 2
37187: PPUSH
37188: CALL_OW 275
37192: PUSH
37193: LD_VAR 0 4
37197: PUSH
37198: LD_INT 2
37200: ARRAY
37201: GREATEREQUAL
37202: AND
37203: PUSH
37204: LD_VAR 0 3
37208: PPUSH
37209: LD_INT 3
37211: PPUSH
37212: CALL_OW 275
37216: PUSH
37217: LD_VAR 0 4
37221: PUSH
37222: LD_INT 3
37224: ARRAY
37225: GREATEREQUAL
37226: AND
37227: ST_TO_ADDR
// end ;
37228: LD_VAR 0 2
37232: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37233: LD_INT 0
37235: PPUSH
37236: PPUSH
37237: PPUSH
// pom := GetBase ( building ) ;
37238: LD_ADDR_VAR 0 4
37242: PUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 274
37252: ST_TO_ADDR
// if not pom then
37253: LD_VAR 0 4
37257: NOT
37258: IFFALSE 37262
// exit ;
37260: GO 37363
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37262: LD_ADDR_VAR 0 5
37266: PUSH
37267: LD_VAR 0 2
37271: PPUSH
37272: LD_VAR 0 1
37276: PPUSH
37277: CALL_OW 248
37281: PPUSH
37282: CALL_OW 450
37286: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_VAR 0 4
37296: PPUSH
37297: LD_INT 1
37299: PPUSH
37300: CALL_OW 275
37304: PUSH
37305: LD_VAR 0 5
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: GREATEREQUAL
37314: PUSH
37315: LD_VAR 0 4
37319: PPUSH
37320: LD_INT 2
37322: PPUSH
37323: CALL_OW 275
37327: PUSH
37328: LD_VAR 0 5
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: GREATEREQUAL
37337: AND
37338: PUSH
37339: LD_VAR 0 4
37343: PPUSH
37344: LD_INT 3
37346: PPUSH
37347: CALL_OW 275
37351: PUSH
37352: LD_VAR 0 5
37356: PUSH
37357: LD_INT 3
37359: ARRAY
37360: GREATEREQUAL
37361: AND
37362: ST_TO_ADDR
// end ;
37363: LD_VAR 0 3
37367: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37368: LD_INT 0
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
37374: PPUSH
37375: PPUSH
37376: PPUSH
37377: PPUSH
37378: PPUSH
37379: PPUSH
37380: PPUSH
// result := false ;
37381: LD_ADDR_VAR 0 8
37385: PUSH
37386: LD_INT 0
37388: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37389: LD_VAR 0 5
37393: NOT
37394: PUSH
37395: LD_VAR 0 1
37399: NOT
37400: OR
37401: PUSH
37402: LD_VAR 0 2
37406: NOT
37407: OR
37408: PUSH
37409: LD_VAR 0 3
37413: NOT
37414: OR
37415: IFFALSE 37419
// exit ;
37417: GO 38233
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37419: LD_ADDR_VAR 0 14
37423: PUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_VAR 0 3
37438: PPUSH
37439: LD_VAR 0 4
37443: PPUSH
37444: LD_VAR 0 5
37448: PUSH
37449: LD_INT 1
37451: ARRAY
37452: PPUSH
37453: CALL_OW 248
37457: PPUSH
37458: LD_INT 0
37460: PPUSH
37461: CALL 39486 0 6
37465: ST_TO_ADDR
// if not hexes then
37466: LD_VAR 0 14
37470: NOT
37471: IFFALSE 37475
// exit ;
37473: GO 38233
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37475: LD_ADDR_VAR 0 17
37479: PUSH
37480: LD_VAR 0 5
37484: PPUSH
37485: LD_INT 22
37487: PUSH
37488: LD_VAR 0 13
37492: PPUSH
37493: CALL_OW 255
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 30
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 30
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PPUSH
37534: CALL_OW 72
37538: ST_TO_ADDR
// for i = 1 to hexes do
37539: LD_ADDR_VAR 0 9
37543: PUSH
37544: DOUBLE
37545: LD_INT 1
37547: DEC
37548: ST_TO_ADDR
37549: LD_VAR 0 14
37553: PUSH
37554: FOR_TO
37555: IFFALSE 38231
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37557: LD_ADDR_VAR 0 13
37561: PUSH
37562: LD_VAR 0 14
37566: PUSH
37567: LD_VAR 0 9
37571: ARRAY
37572: PUSH
37573: LD_INT 1
37575: ARRAY
37576: PPUSH
37577: LD_VAR 0 14
37581: PUSH
37582: LD_VAR 0 9
37586: ARRAY
37587: PUSH
37588: LD_INT 2
37590: ARRAY
37591: PPUSH
37592: CALL_OW 428
37596: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37597: LD_VAR 0 14
37601: PUSH
37602: LD_VAR 0 9
37606: ARRAY
37607: PUSH
37608: LD_INT 1
37610: ARRAY
37611: PPUSH
37612: LD_VAR 0 14
37616: PUSH
37617: LD_VAR 0 9
37621: ARRAY
37622: PUSH
37623: LD_INT 2
37625: ARRAY
37626: PPUSH
37627: CALL_OW 351
37631: PUSH
37632: LD_VAR 0 14
37636: PUSH
37637: LD_VAR 0 9
37641: ARRAY
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: LD_VAR 0 14
37651: PUSH
37652: LD_VAR 0 9
37656: ARRAY
37657: PUSH
37658: LD_INT 2
37660: ARRAY
37661: PPUSH
37662: CALL_OW 488
37666: NOT
37667: OR
37668: PUSH
37669: LD_VAR 0 13
37673: PPUSH
37674: CALL_OW 247
37678: PUSH
37679: LD_INT 3
37681: EQUAL
37682: OR
37683: IFFALSE 37689
// exit ;
37685: POP
37686: POP
37687: GO 38233
// if not tmp then
37689: LD_VAR 0 13
37693: NOT
37694: IFFALSE 37698
// continue ;
37696: GO 37554
// result := true ;
37698: LD_ADDR_VAR 0 8
37702: PUSH
37703: LD_INT 1
37705: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37706: LD_VAR 0 6
37710: PUSH
37711: LD_VAR 0 13
37715: PPUSH
37716: CALL_OW 247
37720: PUSH
37721: LD_INT 2
37723: EQUAL
37724: AND
37725: PUSH
37726: LD_VAR 0 13
37730: PPUSH
37731: CALL_OW 263
37735: PUSH
37736: LD_INT 1
37738: EQUAL
37739: AND
37740: IFFALSE 37904
// begin if IsDrivenBy ( tmp ) then
37742: LD_VAR 0 13
37746: PPUSH
37747: CALL_OW 311
37751: IFFALSE 37755
// continue ;
37753: GO 37554
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37755: LD_VAR 0 6
37759: PPUSH
37760: LD_INT 3
37762: PUSH
37763: LD_INT 60
37765: PUSH
37766: EMPTY
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: LD_INT 55
37778: PUSH
37779: EMPTY
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PPUSH
37790: CALL_OW 72
37794: IFFALSE 37902
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37796: LD_ADDR_VAR 0 18
37800: PUSH
37801: LD_VAR 0 6
37805: PPUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 60
37811: PUSH
37812: EMPTY
37813: LIST
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 55
37824: PUSH
37825: EMPTY
37826: LIST
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PPUSH
37836: CALL_OW 72
37840: PUSH
37841: LD_INT 1
37843: ARRAY
37844: ST_TO_ADDR
// if IsInUnit ( driver ) then
37845: LD_VAR 0 18
37849: PPUSH
37850: CALL_OW 310
37854: IFFALSE 37865
// ComExit ( driver ) ;
37856: LD_VAR 0 18
37860: PPUSH
37861: CALL 63267 0 1
// AddComEnterUnit ( driver , tmp ) ;
37865: LD_VAR 0 18
37869: PPUSH
37870: LD_VAR 0 13
37874: PPUSH
37875: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37879: LD_VAR 0 18
37883: PPUSH
37884: LD_VAR 0 7
37888: PPUSH
37889: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37893: LD_VAR 0 18
37897: PPUSH
37898: CALL_OW 181
// end ; continue ;
37902: GO 37554
// end ; if not cleaners or not tmp in cleaners then
37904: LD_VAR 0 6
37908: NOT
37909: PUSH
37910: LD_VAR 0 13
37914: PUSH
37915: LD_VAR 0 6
37919: IN
37920: NOT
37921: OR
37922: IFFALSE 38229
// begin if dep then
37924: LD_VAR 0 17
37928: IFFALSE 38064
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37930: LD_ADDR_VAR 0 16
37934: PUSH
37935: LD_VAR 0 17
37939: PUSH
37940: LD_INT 1
37942: ARRAY
37943: PPUSH
37944: CALL_OW 250
37948: PPUSH
37949: LD_VAR 0 17
37953: PUSH
37954: LD_INT 1
37956: ARRAY
37957: PPUSH
37958: CALL_OW 254
37962: PPUSH
37963: LD_INT 5
37965: PPUSH
37966: CALL_OW 272
37970: PUSH
37971: LD_VAR 0 17
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: CALL_OW 251
37984: PPUSH
37985: LD_VAR 0 17
37989: PUSH
37990: LD_INT 1
37992: ARRAY
37993: PPUSH
37994: CALL_OW 254
37998: PPUSH
37999: LD_INT 5
38001: PPUSH
38002: CALL_OW 273
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38011: LD_VAR 0 16
38015: PUSH
38016: LD_INT 1
38018: ARRAY
38019: PPUSH
38020: LD_VAR 0 16
38024: PUSH
38025: LD_INT 2
38027: ARRAY
38028: PPUSH
38029: CALL_OW 488
38033: IFFALSE 38064
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38035: LD_VAR 0 13
38039: PPUSH
38040: LD_VAR 0 16
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: PPUSH
38049: LD_VAR 0 16
38053: PUSH
38054: LD_INT 2
38056: ARRAY
38057: PPUSH
38058: CALL_OW 111
// continue ;
38062: GO 37554
// end ; end ; r := GetDir ( tmp ) ;
38064: LD_ADDR_VAR 0 15
38068: PUSH
38069: LD_VAR 0 13
38073: PPUSH
38074: CALL_OW 254
38078: ST_TO_ADDR
// if r = 5 then
38079: LD_VAR 0 15
38083: PUSH
38084: LD_INT 5
38086: EQUAL
38087: IFFALSE 38097
// r := 0 ;
38089: LD_ADDR_VAR 0 15
38093: PUSH
38094: LD_INT 0
38096: ST_TO_ADDR
// for j = r to 5 do
38097: LD_ADDR_VAR 0 10
38101: PUSH
38102: DOUBLE
38103: LD_VAR 0 15
38107: DEC
38108: ST_TO_ADDR
38109: LD_INT 5
38111: PUSH
38112: FOR_TO
38113: IFFALSE 38227
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38115: LD_ADDR_VAR 0 11
38119: PUSH
38120: LD_VAR 0 13
38124: PPUSH
38125: CALL_OW 250
38129: PPUSH
38130: LD_VAR 0 10
38134: PPUSH
38135: LD_INT 2
38137: PPUSH
38138: CALL_OW 272
38142: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38143: LD_ADDR_VAR 0 12
38147: PUSH
38148: LD_VAR 0 13
38152: PPUSH
38153: CALL_OW 251
38157: PPUSH
38158: LD_VAR 0 10
38162: PPUSH
38163: LD_INT 2
38165: PPUSH
38166: CALL_OW 273
38170: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38171: LD_VAR 0 11
38175: PPUSH
38176: LD_VAR 0 12
38180: PPUSH
38181: CALL_OW 488
38185: PUSH
38186: LD_VAR 0 11
38190: PPUSH
38191: LD_VAR 0 12
38195: PPUSH
38196: CALL_OW 428
38200: NOT
38201: AND
38202: IFFALSE 38225
// begin ComMoveXY ( tmp , _x , _y ) ;
38204: LD_VAR 0 13
38208: PPUSH
38209: LD_VAR 0 11
38213: PPUSH
38214: LD_VAR 0 12
38218: PPUSH
38219: CALL_OW 111
// break ;
38223: GO 38227
// end ; end ;
38225: GO 38112
38227: POP
38228: POP
// end ; end ;
38229: GO 37554
38231: POP
38232: POP
// end ;
38233: LD_VAR 0 8
38237: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38238: LD_INT 0
38240: PPUSH
// result := true ;
38241: LD_ADDR_VAR 0 3
38245: PUSH
38246: LD_INT 1
38248: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38249: LD_VAR 0 2
38253: PUSH
38254: LD_INT 24
38256: DOUBLE
38257: EQUAL
38258: IFTRUE 38268
38260: LD_INT 33
38262: DOUBLE
38263: EQUAL
38264: IFTRUE 38268
38266: GO 38293
38268: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38269: LD_ADDR_VAR 0 3
38273: PUSH
38274: LD_INT 32
38276: PPUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 321
38286: PUSH
38287: LD_INT 2
38289: EQUAL
38290: ST_TO_ADDR
38291: GO 38609
38293: LD_INT 20
38295: DOUBLE
38296: EQUAL
38297: IFTRUE 38301
38299: GO 38326
38301: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_INT 6
38309: PPUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 321
38319: PUSH
38320: LD_INT 2
38322: EQUAL
38323: ST_TO_ADDR
38324: GO 38609
38326: LD_INT 22
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38340
38332: LD_INT 36
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38340
38338: GO 38365
38340: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_INT 15
38348: PPUSH
38349: LD_VAR 0 1
38353: PPUSH
38354: CALL_OW 321
38358: PUSH
38359: LD_INT 2
38361: EQUAL
38362: ST_TO_ADDR
38363: GO 38609
38365: LD_INT 30
38367: DOUBLE
38368: EQUAL
38369: IFTRUE 38373
38371: GO 38398
38373: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38374: LD_ADDR_VAR 0 3
38378: PUSH
38379: LD_INT 20
38381: PPUSH
38382: LD_VAR 0 1
38386: PPUSH
38387: CALL_OW 321
38391: PUSH
38392: LD_INT 2
38394: EQUAL
38395: ST_TO_ADDR
38396: GO 38609
38398: LD_INT 28
38400: DOUBLE
38401: EQUAL
38402: IFTRUE 38412
38404: LD_INT 21
38406: DOUBLE
38407: EQUAL
38408: IFTRUE 38412
38410: GO 38437
38412: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: LD_INT 21
38420: PPUSH
38421: LD_VAR 0 1
38425: PPUSH
38426: CALL_OW 321
38430: PUSH
38431: LD_INT 2
38433: EQUAL
38434: ST_TO_ADDR
38435: GO 38609
38437: LD_INT 16
38439: DOUBLE
38440: EQUAL
38441: IFTRUE 38445
38443: GO 38470
38445: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38446: LD_ADDR_VAR 0 3
38450: PUSH
38451: LD_INT 84
38453: PPUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 321
38463: PUSH
38464: LD_INT 2
38466: EQUAL
38467: ST_TO_ADDR
38468: GO 38609
38470: LD_INT 19
38472: DOUBLE
38473: EQUAL
38474: IFTRUE 38484
38476: LD_INT 23
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 38509
38484: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_INT 83
38492: PPUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 321
38502: PUSH
38503: LD_INT 2
38505: EQUAL
38506: ST_TO_ADDR
38507: GO 38609
38509: LD_INT 17
38511: DOUBLE
38512: EQUAL
38513: IFTRUE 38517
38515: GO 38542
38517: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38518: LD_ADDR_VAR 0 3
38522: PUSH
38523: LD_INT 39
38525: PPUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 321
38535: PUSH
38536: LD_INT 2
38538: EQUAL
38539: ST_TO_ADDR
38540: GO 38609
38542: LD_INT 18
38544: DOUBLE
38545: EQUAL
38546: IFTRUE 38550
38548: GO 38575
38550: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_INT 40
38558: PPUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 321
38568: PUSH
38569: LD_INT 2
38571: EQUAL
38572: ST_TO_ADDR
38573: GO 38609
38575: LD_INT 27
38577: DOUBLE
38578: EQUAL
38579: IFTRUE 38583
38581: GO 38608
38583: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_INT 35
38591: PPUSH
38592: LD_VAR 0 1
38596: PPUSH
38597: CALL_OW 321
38601: PUSH
38602: LD_INT 2
38604: EQUAL
38605: ST_TO_ADDR
38606: GO 38609
38608: POP
// end ;
38609: LD_VAR 0 3
38613: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
38626: PPUSH
// result := false ;
38627: LD_ADDR_VAR 0 6
38631: PUSH
38632: LD_INT 0
38634: ST_TO_ADDR
// if btype = b_depot then
38635: LD_VAR 0 2
38639: PUSH
38640: LD_INT 0
38642: EQUAL
38643: IFFALSE 38655
// begin result := true ;
38645: LD_ADDR_VAR 0 6
38649: PUSH
38650: LD_INT 1
38652: ST_TO_ADDR
// exit ;
38653: GO 39481
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38655: LD_VAR 0 1
38659: NOT
38660: PUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 266
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: IN
38681: NOT
38682: OR
38683: PUSH
38684: LD_VAR 0 2
38688: NOT
38689: OR
38690: PUSH
38691: LD_VAR 0 5
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: LD_INT 4
38710: PUSH
38711: LD_INT 5
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: IN
38722: NOT
38723: OR
38724: PUSH
38725: LD_VAR 0 3
38729: PPUSH
38730: LD_VAR 0 4
38734: PPUSH
38735: CALL_OW 488
38739: NOT
38740: OR
38741: IFFALSE 38745
// exit ;
38743: GO 39481
// side := GetSide ( depot ) ;
38745: LD_ADDR_VAR 0 9
38749: PUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 255
38759: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38760: LD_VAR 0 9
38764: PPUSH
38765: LD_VAR 0 2
38769: PPUSH
38770: CALL 38238 0 2
38774: NOT
38775: IFFALSE 38779
// exit ;
38777: GO 39481
// pom := GetBase ( depot ) ;
38779: LD_ADDR_VAR 0 10
38783: PUSH
38784: LD_VAR 0 1
38788: PPUSH
38789: CALL_OW 274
38793: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38794: LD_ADDR_VAR 0 11
38798: PUSH
38799: LD_VAR 0 2
38803: PPUSH
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL_OW 248
38813: PPUSH
38814: CALL_OW 450
38818: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38819: LD_VAR 0 10
38823: PPUSH
38824: LD_INT 1
38826: PPUSH
38827: CALL_OW 275
38831: PUSH
38832: LD_VAR 0 11
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: GREATEREQUAL
38841: PUSH
38842: LD_VAR 0 10
38846: PPUSH
38847: LD_INT 2
38849: PPUSH
38850: CALL_OW 275
38854: PUSH
38855: LD_VAR 0 11
38859: PUSH
38860: LD_INT 2
38862: ARRAY
38863: GREATEREQUAL
38864: AND
38865: PUSH
38866: LD_VAR 0 10
38870: PPUSH
38871: LD_INT 3
38873: PPUSH
38874: CALL_OW 275
38878: PUSH
38879: LD_VAR 0 11
38883: PUSH
38884: LD_INT 3
38886: ARRAY
38887: GREATEREQUAL
38888: AND
38889: NOT
38890: IFFALSE 38894
// exit ;
38892: GO 39481
// if GetBType ( depot ) = b_depot then
38894: LD_VAR 0 1
38898: PPUSH
38899: CALL_OW 266
38903: PUSH
38904: LD_INT 0
38906: EQUAL
38907: IFFALSE 38919
// dist := 28 else
38909: LD_ADDR_VAR 0 14
38913: PUSH
38914: LD_INT 28
38916: ST_TO_ADDR
38917: GO 38927
// dist := 36 ;
38919: LD_ADDR_VAR 0 14
38923: PUSH
38924: LD_INT 36
38926: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38927: LD_VAR 0 1
38931: PPUSH
38932: LD_VAR 0 3
38936: PPUSH
38937: LD_VAR 0 4
38941: PPUSH
38942: CALL_OW 297
38946: PUSH
38947: LD_VAR 0 14
38951: GREATER
38952: IFFALSE 38956
// exit ;
38954: GO 39481
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38956: LD_ADDR_VAR 0 12
38960: PUSH
38961: LD_VAR 0 2
38965: PPUSH
38966: LD_VAR 0 3
38970: PPUSH
38971: LD_VAR 0 4
38975: PPUSH
38976: LD_VAR 0 5
38980: PPUSH
38981: LD_VAR 0 1
38985: PPUSH
38986: CALL_OW 248
38990: PPUSH
38991: LD_INT 0
38993: PPUSH
38994: CALL 39486 0 6
38998: ST_TO_ADDR
// if not hexes then
38999: LD_VAR 0 12
39003: NOT
39004: IFFALSE 39008
// exit ;
39006: GO 39481
// hex := GetHexInfo ( x , y ) ;
39008: LD_ADDR_VAR 0 15
39012: PUSH
39013: LD_VAR 0 3
39017: PPUSH
39018: LD_VAR 0 4
39022: PPUSH
39023: CALL_OW 546
39027: ST_TO_ADDR
// if hex [ 1 ] then
39028: LD_VAR 0 15
39032: PUSH
39033: LD_INT 1
39035: ARRAY
39036: IFFALSE 39040
// exit ;
39038: GO 39481
// height := hex [ 2 ] ;
39040: LD_ADDR_VAR 0 13
39044: PUSH
39045: LD_VAR 0 15
39049: PUSH
39050: LD_INT 2
39052: ARRAY
39053: ST_TO_ADDR
// for i = 1 to hexes do
39054: LD_ADDR_VAR 0 7
39058: PUSH
39059: DOUBLE
39060: LD_INT 1
39062: DEC
39063: ST_TO_ADDR
39064: LD_VAR 0 12
39068: PUSH
39069: FOR_TO
39070: IFFALSE 39400
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39072: LD_VAR 0 12
39076: PUSH
39077: LD_VAR 0 7
39081: ARRAY
39082: PUSH
39083: LD_INT 1
39085: ARRAY
39086: PPUSH
39087: LD_VAR 0 12
39091: PUSH
39092: LD_VAR 0 7
39096: ARRAY
39097: PUSH
39098: LD_INT 2
39100: ARRAY
39101: PPUSH
39102: CALL_OW 488
39106: NOT
39107: PUSH
39108: LD_VAR 0 12
39112: PUSH
39113: LD_VAR 0 7
39117: ARRAY
39118: PUSH
39119: LD_INT 1
39121: ARRAY
39122: PPUSH
39123: LD_VAR 0 12
39127: PUSH
39128: LD_VAR 0 7
39132: ARRAY
39133: PUSH
39134: LD_INT 2
39136: ARRAY
39137: PPUSH
39138: CALL_OW 428
39142: PUSH
39143: LD_INT 0
39145: GREATER
39146: OR
39147: PUSH
39148: LD_VAR 0 12
39152: PUSH
39153: LD_VAR 0 7
39157: ARRAY
39158: PUSH
39159: LD_INT 1
39161: ARRAY
39162: PPUSH
39163: LD_VAR 0 12
39167: PUSH
39168: LD_VAR 0 7
39172: ARRAY
39173: PUSH
39174: LD_INT 2
39176: ARRAY
39177: PPUSH
39178: CALL_OW 351
39182: OR
39183: IFFALSE 39189
// exit ;
39185: POP
39186: POP
39187: GO 39481
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39189: LD_ADDR_VAR 0 8
39193: PUSH
39194: LD_VAR 0 12
39198: PUSH
39199: LD_VAR 0 7
39203: ARRAY
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: LD_VAR 0 12
39213: PUSH
39214: LD_VAR 0 7
39218: ARRAY
39219: PUSH
39220: LD_INT 2
39222: ARRAY
39223: PPUSH
39224: CALL_OW 546
39228: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39229: LD_VAR 0 8
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: PUSH
39238: LD_VAR 0 8
39242: PUSH
39243: LD_INT 2
39245: ARRAY
39246: PUSH
39247: LD_VAR 0 13
39251: PUSH
39252: LD_INT 2
39254: PLUS
39255: GREATER
39256: OR
39257: PUSH
39258: LD_VAR 0 8
39262: PUSH
39263: LD_INT 2
39265: ARRAY
39266: PUSH
39267: LD_VAR 0 13
39271: PUSH
39272: LD_INT 2
39274: MINUS
39275: LESS
39276: OR
39277: PUSH
39278: LD_VAR 0 8
39282: PUSH
39283: LD_INT 3
39285: ARRAY
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: LD_INT 8
39292: PUSH
39293: LD_INT 9
39295: PUSH
39296: LD_INT 10
39298: PUSH
39299: LD_INT 11
39301: PUSH
39302: LD_INT 12
39304: PUSH
39305: LD_INT 13
39307: PUSH
39308: LD_INT 16
39310: PUSH
39311: LD_INT 17
39313: PUSH
39314: LD_INT 18
39316: PUSH
39317: LD_INT 19
39319: PUSH
39320: LD_INT 20
39322: PUSH
39323: LD_INT 21
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: IN
39341: NOT
39342: OR
39343: PUSH
39344: LD_VAR 0 8
39348: PUSH
39349: LD_INT 5
39351: ARRAY
39352: NOT
39353: OR
39354: PUSH
39355: LD_VAR 0 8
39359: PUSH
39360: LD_INT 6
39362: ARRAY
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 7
39372: PUSH
39373: LD_INT 9
39375: PUSH
39376: LD_INT 10
39378: PUSH
39379: LD_INT 11
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: IN
39390: NOT
39391: OR
39392: IFFALSE 39398
// exit ;
39394: POP
39395: POP
39396: GO 39481
// end ;
39398: GO 39069
39400: POP
39401: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39402: LD_VAR 0 9
39406: PPUSH
39407: LD_VAR 0 3
39411: PPUSH
39412: LD_VAR 0 4
39416: PPUSH
39417: LD_INT 20
39419: PPUSH
39420: CALL 31404 0 4
39424: PUSH
39425: LD_INT 4
39427: ARRAY
39428: IFFALSE 39432
// exit ;
39430: GO 39481
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39432: LD_VAR 0 2
39436: PUSH
39437: LD_INT 29
39439: PUSH
39440: LD_INT 30
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: IN
39447: PUSH
39448: LD_VAR 0 3
39452: PPUSH
39453: LD_VAR 0 4
39457: PPUSH
39458: LD_VAR 0 9
39462: PPUSH
39463: CALL_OW 440
39467: NOT
39468: AND
39469: IFFALSE 39473
// exit ;
39471: GO 39481
// result := true ;
39473: LD_ADDR_VAR 0 6
39477: PUSH
39478: LD_INT 1
39480: ST_TO_ADDR
// end ;
39481: LD_VAR 0 6
39485: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
39530: PPUSH
39531: PPUSH
39532: PPUSH
39533: PPUSH
39534: PPUSH
39535: PPUSH
39536: PPUSH
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
// result = [ ] ;
39546: LD_ADDR_VAR 0 7
39550: PUSH
39551: EMPTY
39552: ST_TO_ADDR
// temp_list = [ ] ;
39553: LD_ADDR_VAR 0 9
39557: PUSH
39558: EMPTY
39559: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39560: LD_VAR 0 4
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: LD_INT 4
39579: PUSH
39580: LD_INT 5
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: IN
39591: NOT
39592: PUSH
39593: LD_VAR 0 1
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: IN
39608: PUSH
39609: LD_VAR 0 5
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: IN
39628: NOT
39629: AND
39630: OR
39631: IFFALSE 39635
// exit ;
39633: GO 58026
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39635: LD_VAR 0 1
39639: PUSH
39640: LD_INT 6
39642: PUSH
39643: LD_INT 7
39645: PUSH
39646: LD_INT 8
39648: PUSH
39649: LD_INT 13
39651: PUSH
39652: LD_INT 12
39654: PUSH
39655: LD_INT 15
39657: PUSH
39658: LD_INT 11
39660: PUSH
39661: LD_INT 14
39663: PUSH
39664: LD_INT 10
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: IN
39678: IFFALSE 39688
// btype = b_lab ;
39680: LD_ADDR_VAR 0 1
39684: PUSH
39685: LD_INT 6
39687: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39688: LD_VAR 0 6
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: IN
39707: NOT
39708: PUSH
39709: LD_VAR 0 1
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 6
39728: PUSH
39729: LD_INT 36
39731: PUSH
39732: LD_INT 4
39734: PUSH
39735: LD_INT 5
39737: PUSH
39738: LD_INT 31
39740: PUSH
39741: LD_INT 32
39743: PUSH
39744: LD_INT 33
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: IN
39760: NOT
39761: PUSH
39762: LD_VAR 0 6
39766: PUSH
39767: LD_INT 1
39769: EQUAL
39770: AND
39771: OR
39772: PUSH
39773: LD_VAR 0 1
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: IN
39788: NOT
39789: PUSH
39790: LD_VAR 0 6
39794: PUSH
39795: LD_INT 2
39797: EQUAL
39798: AND
39799: OR
39800: IFFALSE 39810
// mode = 0 ;
39802: LD_ADDR_VAR 0 6
39806: PUSH
39807: LD_INT 0
39809: ST_TO_ADDR
// case mode of 0 :
39810: LD_VAR 0 6
39814: PUSH
39815: LD_INT 0
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 51276
39823: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39824: LD_ADDR_VAR 0 11
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40017: LD_ADDR_VAR 0 12
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 3
40174: NEG
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 3
40185: NEG
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40213: LD_ADDR_VAR 0 13
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: NEG
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40412: LD_ADDR_VAR 0 14
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 3
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 3
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40608: LD_ADDR_VAR 0 15
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40801: LD_ADDR_VAR 0 16
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 3
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 3
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40994: LD_ADDR_VAR 0 17
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41224: LD_ADDR_VAR 0 18
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41454: LD_ADDR_VAR 0 19
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41684: LD_ADDR_VAR 0 20
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41914: LD_ADDR_VAR 0 21
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 2
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42144: LD_ADDR_VAR 0 22
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42374: LD_ADDR_VAR 0 23
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 3
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 3
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42654: LD_ADDR_VAR 0 24
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42930: LD_ADDR_VAR 0 25
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43204: LD_ADDR_VAR 0 26
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 3
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43480: LD_ADDR_VAR 0 27
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 3
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43760: LD_ADDR_VAR 0 28
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 3
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: NEG
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 3
44007: NEG
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44042: LD_ADDR_VAR 0 29
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: NEG
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44321: LD_ADDR_VAR 0 30
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 3
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44599: LD_ADDR_VAR 0 31
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: NEG
44789: PUSH
44790: LD_INT 3
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44877: LD_ADDR_VAR 0 32
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 3
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 3
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 3
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45155: LD_ADDR_VAR 0 33
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 3
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 3
45399: NEG
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45434: LD_ADDR_VAR 0 34
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45714: LD_ADDR_VAR 0 35
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45826: LD_ADDR_VAR 0 36
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45938: LD_ADDR_VAR 0 37
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46050: LD_ADDR_VAR 0 38
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46162: LD_ADDR_VAR 0 39
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46274: LD_ADDR_VAR 0 40
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46386: LD_ADDR_VAR 0 41
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 3
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46736: LD_ADDR_VAR 0 42
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: LD_INT 3
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 3
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: LD_INT 3
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47086: LD_ADDR_VAR 0 43
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 3
47382: NEG
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47434: LD_ADDR_VAR 0 44
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 3
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 3
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: LD_INT 3
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47784: LD_ADDR_VAR 0 45
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 3
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 3
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48134: LD_ADDR_VAR 0 46
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 3
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48482: LD_ADDR_VAR 0 47
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48633: LD_ADDR_VAR 0 48
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48780: LD_ADDR_VAR 0 49
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48924: LD_ADDR_VAR 0 50
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49068: LD_ADDR_VAR 0 51
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49215: LD_ADDR_VAR 0 52
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 2
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49366: LD_ADDR_VAR 0 53
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49596: LD_ADDR_VAR 0 54
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49826: LD_ADDR_VAR 0 55
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50056: LD_ADDR_VAR 0 56
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50286: LD_ADDR_VAR 0 57
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50516: LD_ADDR_VAR 0 58
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50746: LD_ADDR_VAR 0 59
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50834: LD_ADDR_VAR 0 60
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50922: LD_ADDR_VAR 0 61
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51010: LD_ADDR_VAR 0 62
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51098: LD_ADDR_VAR 0 63
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51186: LD_ADDR_VAR 0 64
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// end ; 1 :
51274: GO 57171
51276: LD_INT 1
51278: DOUBLE
51279: EQUAL
51280: IFTRUE 51284
51282: GO 53907
51284: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51285: LD_ADDR_VAR 0 11
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 3
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51329: LD_ADDR_VAR 0 12
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51370: LD_ADDR_VAR 0 13
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51410: LD_ADDR_VAR 0 14
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51451: LD_ADDR_VAR 0 15
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: LIST
51494: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51495: LD_ADDR_VAR 0 16
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51541: LD_ADDR_VAR 0 17
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: LIST
51584: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51585: LD_ADDR_VAR 0 18
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51626: LD_ADDR_VAR 0 19
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51666: LD_ADDR_VAR 0 20
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 3
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51707: LD_ADDR_VAR 0 21
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51751: LD_ADDR_VAR 0 22
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 3
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 3
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51797: LD_ADDR_VAR 0 23
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 4
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51841: LD_ADDR_VAR 0 24
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 4
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51882: LD_ADDR_VAR 0 25
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 4
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51922: LD_ADDR_VAR 0 26
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51963: LD_ADDR_VAR 0 27
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52007: LD_ADDR_VAR 0 28
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: LD_INT 3
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: LD_INT 4
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: NEG
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52053: LD_ADDR_VAR 0 29
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 4
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 5
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 5
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 4
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 6
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 6
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 5
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52208: LD_ADDR_VAR 0 30
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 4
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 4
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 5
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 5
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 5
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 6
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 6
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52351: LD_ADDR_VAR 0 31
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 4
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 4
52398: PUSH
52399: LD_INT 4
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: PUSH
52409: LD_INT 4
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 5
52418: PUSH
52419: LD_INT 4
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 5
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 4
52438: PUSH
52439: LD_INT 5
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 6
52448: PUSH
52449: LD_INT 5
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 6
52458: PUSH
52459: LD_INT 6
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 5
52468: PUSH
52469: LD_INT 6
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52490: LD_ADDR_VAR 0 32
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 4
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 5
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 5
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 4
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: LD_INT 6
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: LD_INT 6
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 5
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52633: LD_ADDR_VAR 0 33
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 4
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 4
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 4
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 5
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 5
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 5
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 6
52753: NEG
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 6
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52788: LD_ADDR_VAR 0 34
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 3
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 4
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 4
52843: NEG
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 4
52855: NEG
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 4
52867: NEG
52868: PUSH
52869: LD_INT 5
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 5
52879: NEG
52880: PUSH
52881: LD_INT 4
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 5
52891: NEG
52892: PUSH
52893: LD_INT 5
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 5
52903: NEG
52904: PUSH
52905: LD_INT 6
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 6
52915: NEG
52916: PUSH
52917: LD_INT 5
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 6
52927: NEG
52928: PUSH
52929: LD_INT 6
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52951: LD_ADDR_VAR 0 41
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52995: LD_ADDR_VAR 0 42
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53036: LD_ADDR_VAR 0 43
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53076: LD_ADDR_VAR 0 44
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 3
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53117: LD_ADDR_VAR 0 45
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53161: LD_ADDR_VAR 0 46
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53207: LD_ADDR_VAR 0 47
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 3
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53240: LD_ADDR_VAR 0 48
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53271: LD_ADDR_VAR 0 49
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53300: LD_ADDR_VAR 0 50
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53329: LD_ADDR_VAR 0 51
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53360: LD_ADDR_VAR 0 52
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53393: LD_ADDR_VAR 0 53
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53437: LD_ADDR_VAR 0 54
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 3
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53478: LD_ADDR_VAR 0 55
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 3
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53518: LD_ADDR_VAR 0 56
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53559: LD_ADDR_VAR 0 57
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53603: LD_ADDR_VAR 0 58
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53649: LD_ADDR_VAR 0 59
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53693: LD_ADDR_VAR 0 60
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53734: LD_ADDR_VAR 0 61
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53774: LD_ADDR_VAR 0 62
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53815: LD_ADDR_VAR 0 63
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53859: LD_ADDR_VAR 0 64
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// end ; 2 :
53905: GO 57171
53907: LD_INT 2
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 57170
53915: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53916: LD_ADDR_VAR 0 29
53920: PUSH
53921: LD_INT 4
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 4
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 5
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 4
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 5
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 3
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 4
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 4
54046: PUSH
54047: LD_INT 4
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 4
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 4
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 4
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 4
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 5
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 5
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 4
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 5
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 4
54301: NEG
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 4
54313: NEG
54314: PUSH
54315: LD_INT 5
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: LD_INT 4
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: LD_INT 3
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 4
54349: NEG
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 5
54361: NEG
54362: PUSH
54363: LD_INT 4
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 5
54373: NEG
54374: PUSH
54375: LD_INT 5
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 5
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 5
54397: NEG
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54454: LD_ADDR_VAR 0 30
54458: PUSH
54459: LD_INT 4
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 4
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 5
54481: PUSH
54482: LD_INT 4
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: PUSH
54492: LD_INT 5
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: LD_INT 5
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: LD_INT 4
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 5
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 5
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 4
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 4
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 4
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 4
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 4
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 4
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: NEG
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 5
54723: NEG
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: NEG
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 3
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: NEG
54759: PUSH
54760: LD_INT 4
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 4
54806: NEG
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: LD_INT 4
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 4
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 4
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 5
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 3
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 3
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 4
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: LD_INT 5
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55001: LD_ADDR_VAR 0 31
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 5
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 5
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 5
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 4
55168: NEG
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 4
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: LD_INT 4
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 4
55215: NEG
55216: PUSH
55217: LD_INT 5
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: NEG
55228: PUSH
55229: LD_INT 4
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 4
55251: NEG
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 5
55263: NEG
55264: PUSH
55265: LD_INT 4
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: NEG
55276: PUSH
55277: LD_INT 5
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: LD_INT 5
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 5
55299: NEG
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 4
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 4
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 4
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 4
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 4
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 5
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 5
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 4
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 5
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55551: LD_ADDR_VAR 0 32
55555: PUSH
55556: LD_INT 4
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 3
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 5
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 5
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 5
55637: NEG
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 3
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 4
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: LD_INT 3
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: NEG
55733: PUSH
55734: LD_INT 4
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 4
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 4
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 5
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 4
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 5
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 5
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 4
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 4
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: LD_INT 4
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 5
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 5
55993: PUSH
55994: LD_INT 5
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 4
56003: PUSH
56004: LD_INT 5
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 4
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 3
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: PUSH
56044: LD_INT 5
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56098: LD_ADDR_VAR 0 33
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: LD_INT 5
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 4
56153: NEG
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 5
56165: NEG
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 5
56177: NEG
56178: PUSH
56179: LD_INT 5
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: LD_INT 5
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 5
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 4
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 4
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 4
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 5
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 4
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 5
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 3
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: LD_INT 4
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 4
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 4
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 5
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 5
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 5
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56636: LD_ADDR_VAR 0 34
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 4
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 5
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 4
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 5
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 5
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 4
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: PUSH
56839: LD_INT 4
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 4
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 5
56858: PUSH
56859: LD_INT 4
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 5
56868: PUSH
56869: LD_INT 5
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 4
56878: PUSH
56879: LD_INT 5
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: LD_INT 4
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 5
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 5
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: LD_INT 4
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 4
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 4
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 4
57066: NEG
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 5
57077: NEG
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 5
57088: NEG
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 5
57100: NEG
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// end ; end ;
57168: GO 57171
57170: POP
// case btype of b_depot , b_warehouse :
57171: LD_VAR 0 1
57175: PUSH
57176: LD_INT 0
57178: DOUBLE
57179: EQUAL
57180: IFTRUE 57190
57182: LD_INT 1
57184: DOUBLE
57185: EQUAL
57186: IFTRUE 57190
57188: GO 57391
57190: POP
// case nation of nation_american :
57191: LD_VAR 0 5
57195: PUSH
57196: LD_INT 1
57198: DOUBLE
57199: EQUAL
57200: IFTRUE 57204
57202: GO 57260
57204: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57205: LD_ADDR_VAR 0 9
57209: PUSH
57210: LD_VAR 0 11
57214: PUSH
57215: LD_VAR 0 12
57219: PUSH
57220: LD_VAR 0 13
57224: PUSH
57225: LD_VAR 0 14
57229: PUSH
57230: LD_VAR 0 15
57234: PUSH
57235: LD_VAR 0 16
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: PUSH
57248: LD_VAR 0 4
57252: PUSH
57253: LD_INT 1
57255: PLUS
57256: ARRAY
57257: ST_TO_ADDR
57258: GO 57389
57260: LD_INT 2
57262: DOUBLE
57263: EQUAL
57264: IFTRUE 57268
57266: GO 57324
57268: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57269: LD_ADDR_VAR 0 9
57273: PUSH
57274: LD_VAR 0 17
57278: PUSH
57279: LD_VAR 0 18
57283: PUSH
57284: LD_VAR 0 19
57288: PUSH
57289: LD_VAR 0 20
57293: PUSH
57294: LD_VAR 0 21
57298: PUSH
57299: LD_VAR 0 22
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: PUSH
57312: LD_VAR 0 4
57316: PUSH
57317: LD_INT 1
57319: PLUS
57320: ARRAY
57321: ST_TO_ADDR
57322: GO 57389
57324: LD_INT 3
57326: DOUBLE
57327: EQUAL
57328: IFTRUE 57332
57330: GO 57388
57332: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57333: LD_ADDR_VAR 0 9
57337: PUSH
57338: LD_VAR 0 23
57342: PUSH
57343: LD_VAR 0 24
57347: PUSH
57348: LD_VAR 0 25
57352: PUSH
57353: LD_VAR 0 26
57357: PUSH
57358: LD_VAR 0 27
57362: PUSH
57363: LD_VAR 0 28
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: PUSH
57376: LD_VAR 0 4
57380: PUSH
57381: LD_INT 1
57383: PLUS
57384: ARRAY
57385: ST_TO_ADDR
57386: GO 57389
57388: POP
57389: GO 57944
57391: LD_INT 2
57393: DOUBLE
57394: EQUAL
57395: IFTRUE 57405
57397: LD_INT 3
57399: DOUBLE
57400: EQUAL
57401: IFTRUE 57405
57403: GO 57461
57405: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57406: LD_ADDR_VAR 0 9
57410: PUSH
57411: LD_VAR 0 29
57415: PUSH
57416: LD_VAR 0 30
57420: PUSH
57421: LD_VAR 0 31
57425: PUSH
57426: LD_VAR 0 32
57430: PUSH
57431: LD_VAR 0 33
57435: PUSH
57436: LD_VAR 0 34
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: PUSH
57449: LD_VAR 0 4
57453: PUSH
57454: LD_INT 1
57456: PLUS
57457: ARRAY
57458: ST_TO_ADDR
57459: GO 57944
57461: LD_INT 16
57463: DOUBLE
57464: EQUAL
57465: IFTRUE 57523
57467: LD_INT 17
57469: DOUBLE
57470: EQUAL
57471: IFTRUE 57523
57473: LD_INT 18
57475: DOUBLE
57476: EQUAL
57477: IFTRUE 57523
57479: LD_INT 19
57481: DOUBLE
57482: EQUAL
57483: IFTRUE 57523
57485: LD_INT 22
57487: DOUBLE
57488: EQUAL
57489: IFTRUE 57523
57491: LD_INT 20
57493: DOUBLE
57494: EQUAL
57495: IFTRUE 57523
57497: LD_INT 21
57499: DOUBLE
57500: EQUAL
57501: IFTRUE 57523
57503: LD_INT 23
57505: DOUBLE
57506: EQUAL
57507: IFTRUE 57523
57509: LD_INT 24
57511: DOUBLE
57512: EQUAL
57513: IFTRUE 57523
57515: LD_INT 25
57517: DOUBLE
57518: EQUAL
57519: IFTRUE 57523
57521: GO 57579
57523: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57524: LD_ADDR_VAR 0 9
57528: PUSH
57529: LD_VAR 0 35
57533: PUSH
57534: LD_VAR 0 36
57538: PUSH
57539: LD_VAR 0 37
57543: PUSH
57544: LD_VAR 0 38
57548: PUSH
57549: LD_VAR 0 39
57553: PUSH
57554: LD_VAR 0 40
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: PUSH
57567: LD_VAR 0 4
57571: PUSH
57572: LD_INT 1
57574: PLUS
57575: ARRAY
57576: ST_TO_ADDR
57577: GO 57944
57579: LD_INT 6
57581: DOUBLE
57582: EQUAL
57583: IFTRUE 57635
57585: LD_INT 7
57587: DOUBLE
57588: EQUAL
57589: IFTRUE 57635
57591: LD_INT 8
57593: DOUBLE
57594: EQUAL
57595: IFTRUE 57635
57597: LD_INT 13
57599: DOUBLE
57600: EQUAL
57601: IFTRUE 57635
57603: LD_INT 12
57605: DOUBLE
57606: EQUAL
57607: IFTRUE 57635
57609: LD_INT 15
57611: DOUBLE
57612: EQUAL
57613: IFTRUE 57635
57615: LD_INT 11
57617: DOUBLE
57618: EQUAL
57619: IFTRUE 57635
57621: LD_INT 14
57623: DOUBLE
57624: EQUAL
57625: IFTRUE 57635
57627: LD_INT 10
57629: DOUBLE
57630: EQUAL
57631: IFTRUE 57635
57633: GO 57691
57635: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57636: LD_ADDR_VAR 0 9
57640: PUSH
57641: LD_VAR 0 41
57645: PUSH
57646: LD_VAR 0 42
57650: PUSH
57651: LD_VAR 0 43
57655: PUSH
57656: LD_VAR 0 44
57660: PUSH
57661: LD_VAR 0 45
57665: PUSH
57666: LD_VAR 0 46
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_VAR 0 4
57683: PUSH
57684: LD_INT 1
57686: PLUS
57687: ARRAY
57688: ST_TO_ADDR
57689: GO 57944
57691: LD_INT 36
57693: DOUBLE
57694: EQUAL
57695: IFTRUE 57699
57697: GO 57755
57699: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57700: LD_ADDR_VAR 0 9
57704: PUSH
57705: LD_VAR 0 47
57709: PUSH
57710: LD_VAR 0 48
57714: PUSH
57715: LD_VAR 0 49
57719: PUSH
57720: LD_VAR 0 50
57724: PUSH
57725: LD_VAR 0 51
57729: PUSH
57730: LD_VAR 0 52
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: PUSH
57743: LD_VAR 0 4
57747: PUSH
57748: LD_INT 1
57750: PLUS
57751: ARRAY
57752: ST_TO_ADDR
57753: GO 57944
57755: LD_INT 4
57757: DOUBLE
57758: EQUAL
57759: IFTRUE 57781
57761: LD_INT 5
57763: DOUBLE
57764: EQUAL
57765: IFTRUE 57781
57767: LD_INT 34
57769: DOUBLE
57770: EQUAL
57771: IFTRUE 57781
57773: LD_INT 37
57775: DOUBLE
57776: EQUAL
57777: IFTRUE 57781
57779: GO 57837
57781: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57782: LD_ADDR_VAR 0 9
57786: PUSH
57787: LD_VAR 0 53
57791: PUSH
57792: LD_VAR 0 54
57796: PUSH
57797: LD_VAR 0 55
57801: PUSH
57802: LD_VAR 0 56
57806: PUSH
57807: LD_VAR 0 57
57811: PUSH
57812: LD_VAR 0 58
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: PUSH
57825: LD_VAR 0 4
57829: PUSH
57830: LD_INT 1
57832: PLUS
57833: ARRAY
57834: ST_TO_ADDR
57835: GO 57944
57837: LD_INT 31
57839: DOUBLE
57840: EQUAL
57841: IFTRUE 57887
57843: LD_INT 32
57845: DOUBLE
57846: EQUAL
57847: IFTRUE 57887
57849: LD_INT 33
57851: DOUBLE
57852: EQUAL
57853: IFTRUE 57887
57855: LD_INT 27
57857: DOUBLE
57858: EQUAL
57859: IFTRUE 57887
57861: LD_INT 26
57863: DOUBLE
57864: EQUAL
57865: IFTRUE 57887
57867: LD_INT 28
57869: DOUBLE
57870: EQUAL
57871: IFTRUE 57887
57873: LD_INT 29
57875: DOUBLE
57876: EQUAL
57877: IFTRUE 57887
57879: LD_INT 30
57881: DOUBLE
57882: EQUAL
57883: IFTRUE 57887
57885: GO 57943
57887: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57888: LD_ADDR_VAR 0 9
57892: PUSH
57893: LD_VAR 0 59
57897: PUSH
57898: LD_VAR 0 60
57902: PUSH
57903: LD_VAR 0 61
57907: PUSH
57908: LD_VAR 0 62
57912: PUSH
57913: LD_VAR 0 63
57917: PUSH
57918: LD_VAR 0 64
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: PUSH
57931: LD_VAR 0 4
57935: PUSH
57936: LD_INT 1
57938: PLUS
57939: ARRAY
57940: ST_TO_ADDR
57941: GO 57944
57943: POP
// temp_list2 = [ ] ;
57944: LD_ADDR_VAR 0 10
57948: PUSH
57949: EMPTY
57950: ST_TO_ADDR
// for i in temp_list do
57951: LD_ADDR_VAR 0 8
57955: PUSH
57956: LD_VAR 0 9
57960: PUSH
57961: FOR_IN
57962: IFFALSE 58014
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57964: LD_ADDR_VAR 0 10
57968: PUSH
57969: LD_VAR 0 10
57973: PUSH
57974: LD_VAR 0 8
57978: PUSH
57979: LD_INT 1
57981: ARRAY
57982: PUSH
57983: LD_VAR 0 2
57987: PLUS
57988: PUSH
57989: LD_VAR 0 8
57993: PUSH
57994: LD_INT 2
57996: ARRAY
57997: PUSH
57998: LD_VAR 0 3
58002: PLUS
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: EMPTY
58009: LIST
58010: ADD
58011: ST_TO_ADDR
58012: GO 57961
58014: POP
58015: POP
// result = temp_list2 ;
58016: LD_ADDR_VAR 0 7
58020: PUSH
58021: LD_VAR 0 10
58025: ST_TO_ADDR
// end ;
58026: LD_VAR 0 7
58030: RET
// export function EnemyInRange ( unit , dist ) ; begin
58031: LD_INT 0
58033: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58034: LD_ADDR_VAR 0 3
58038: PUSH
58039: LD_VAR 0 1
58043: PPUSH
58044: CALL_OW 255
58048: PPUSH
58049: LD_VAR 0 1
58053: PPUSH
58054: CALL_OW 250
58058: PPUSH
58059: LD_VAR 0 1
58063: PPUSH
58064: CALL_OW 251
58068: PPUSH
58069: LD_VAR 0 2
58073: PPUSH
58074: CALL 31404 0 4
58078: PUSH
58079: LD_INT 4
58081: ARRAY
58082: ST_TO_ADDR
// end ;
58083: LD_VAR 0 3
58087: RET
// export function PlayerSeeMe ( unit ) ; begin
58088: LD_INT 0
58090: PPUSH
// result := See ( your_side , unit ) ;
58091: LD_ADDR_VAR 0 2
58095: PUSH
58096: LD_OWVAR 2
58100: PPUSH
58101: LD_VAR 0 1
58105: PPUSH
58106: CALL_OW 292
58110: ST_TO_ADDR
// end ;
58111: LD_VAR 0 2
58115: RET
// export function ReverseDir ( unit ) ; begin
58116: LD_INT 0
58118: PPUSH
// if not unit then
58119: LD_VAR 0 1
58123: NOT
58124: IFFALSE 58128
// exit ;
58126: GO 58151
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58128: LD_ADDR_VAR 0 2
58132: PUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 254
58142: PUSH
58143: LD_INT 3
58145: PLUS
58146: PUSH
58147: LD_INT 6
58149: MOD
58150: ST_TO_ADDR
// end ;
58151: LD_VAR 0 2
58155: RET
// export function ReverseArray ( array ) ; var i ; begin
58156: LD_INT 0
58158: PPUSH
58159: PPUSH
// if not array then
58160: LD_VAR 0 1
58164: NOT
58165: IFFALSE 58169
// exit ;
58167: GO 58224
// result := [ ] ;
58169: LD_ADDR_VAR 0 2
58173: PUSH
58174: EMPTY
58175: ST_TO_ADDR
// for i := array downto 1 do
58176: LD_ADDR_VAR 0 3
58180: PUSH
58181: DOUBLE
58182: LD_VAR 0 1
58186: INC
58187: ST_TO_ADDR
58188: LD_INT 1
58190: PUSH
58191: FOR_DOWNTO
58192: IFFALSE 58222
// result := Join ( result , array [ i ] ) ;
58194: LD_ADDR_VAR 0 2
58198: PUSH
58199: LD_VAR 0 2
58203: PPUSH
58204: LD_VAR 0 1
58208: PUSH
58209: LD_VAR 0 3
58213: ARRAY
58214: PPUSH
58215: CALL 62869 0 2
58219: ST_TO_ADDR
58220: GO 58191
58222: POP
58223: POP
// end ;
58224: LD_VAR 0 2
58228: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58229: LD_INT 0
58231: PPUSH
58232: PPUSH
58233: PPUSH
58234: PPUSH
58235: PPUSH
58236: PPUSH
// if not unit or not hexes then
58237: LD_VAR 0 1
58241: NOT
58242: PUSH
58243: LD_VAR 0 2
58247: NOT
58248: OR
58249: IFFALSE 58253
// exit ;
58251: GO 58376
// dist := 9999 ;
58253: LD_ADDR_VAR 0 5
58257: PUSH
58258: LD_INT 9999
58260: ST_TO_ADDR
// for i = 1 to hexes do
58261: LD_ADDR_VAR 0 4
58265: PUSH
58266: DOUBLE
58267: LD_INT 1
58269: DEC
58270: ST_TO_ADDR
58271: LD_VAR 0 2
58275: PUSH
58276: FOR_TO
58277: IFFALSE 58364
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58279: LD_ADDR_VAR 0 6
58283: PUSH
58284: LD_VAR 0 1
58288: PPUSH
58289: LD_VAR 0 2
58293: PUSH
58294: LD_VAR 0 4
58298: ARRAY
58299: PUSH
58300: LD_INT 1
58302: ARRAY
58303: PPUSH
58304: LD_VAR 0 2
58308: PUSH
58309: LD_VAR 0 4
58313: ARRAY
58314: PUSH
58315: LD_INT 2
58317: ARRAY
58318: PPUSH
58319: CALL_OW 297
58323: ST_TO_ADDR
// if tdist < dist then
58324: LD_VAR 0 6
58328: PUSH
58329: LD_VAR 0 5
58333: LESS
58334: IFFALSE 58362
// begin hex := hexes [ i ] ;
58336: LD_ADDR_VAR 0 8
58340: PUSH
58341: LD_VAR 0 2
58345: PUSH
58346: LD_VAR 0 4
58350: ARRAY
58351: ST_TO_ADDR
// dist := tdist ;
58352: LD_ADDR_VAR 0 5
58356: PUSH
58357: LD_VAR 0 6
58361: ST_TO_ADDR
// end ; end ;
58362: GO 58276
58364: POP
58365: POP
// result := hex ;
58366: LD_ADDR_VAR 0 3
58370: PUSH
58371: LD_VAR 0 8
58375: ST_TO_ADDR
// end ;
58376: LD_VAR 0 3
58380: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58381: LD_INT 0
58383: PPUSH
58384: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58385: LD_VAR 0 1
58389: NOT
58390: PUSH
58391: LD_VAR 0 1
58395: PUSH
58396: LD_INT 21
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 23
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PPUSH
58420: CALL_OW 69
58424: IN
58425: NOT
58426: OR
58427: IFFALSE 58431
// exit ;
58429: GO 58478
// for i = 1 to 3 do
58431: LD_ADDR_VAR 0 3
58435: PUSH
58436: DOUBLE
58437: LD_INT 1
58439: DEC
58440: ST_TO_ADDR
58441: LD_INT 3
58443: PUSH
58444: FOR_TO
58445: IFFALSE 58476
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58447: LD_VAR 0 1
58451: PPUSH
58452: CALL_OW 250
58456: PPUSH
58457: LD_VAR 0 1
58461: PPUSH
58462: CALL_OW 251
58466: PPUSH
58467: LD_INT 1
58469: PPUSH
58470: CALL_OW 453
58474: GO 58444
58476: POP
58477: POP
// end ;
58478: LD_VAR 0 2
58482: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58483: LD_INT 0
58485: PPUSH
58486: PPUSH
58487: PPUSH
58488: PPUSH
58489: PPUSH
58490: PPUSH
// if not unit or not enemy_unit then
58491: LD_VAR 0 1
58495: NOT
58496: PUSH
58497: LD_VAR 0 2
58501: NOT
58502: OR
58503: IFFALSE 58507
// exit ;
58505: GO 58974
// if GetLives ( i ) < 250 then
58507: LD_VAR 0 4
58511: PPUSH
58512: CALL_OW 256
58516: PUSH
58517: LD_INT 250
58519: LESS
58520: IFFALSE 58533
// begin ComAutodestruct ( i ) ;
58522: LD_VAR 0 4
58526: PPUSH
58527: CALL 58381 0 1
// exit ;
58531: GO 58974
// end ; x := GetX ( enemy_unit ) ;
58533: LD_ADDR_VAR 0 7
58537: PUSH
58538: LD_VAR 0 2
58542: PPUSH
58543: CALL_OW 250
58547: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58548: LD_ADDR_VAR 0 8
58552: PUSH
58553: LD_VAR 0 2
58557: PPUSH
58558: CALL_OW 251
58562: ST_TO_ADDR
// if not x or not y then
58563: LD_VAR 0 7
58567: NOT
58568: PUSH
58569: LD_VAR 0 8
58573: NOT
58574: OR
58575: IFFALSE 58579
// exit ;
58577: GO 58974
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58579: LD_ADDR_VAR 0 6
58583: PUSH
58584: LD_VAR 0 7
58588: PPUSH
58589: LD_INT 0
58591: PPUSH
58592: LD_INT 4
58594: PPUSH
58595: CALL_OW 272
58599: PUSH
58600: LD_VAR 0 8
58604: PPUSH
58605: LD_INT 0
58607: PPUSH
58608: LD_INT 4
58610: PPUSH
58611: CALL_OW 273
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_VAR 0 7
58624: PPUSH
58625: LD_INT 1
58627: PPUSH
58628: LD_INT 4
58630: PPUSH
58631: CALL_OW 272
58635: PUSH
58636: LD_VAR 0 8
58640: PPUSH
58641: LD_INT 1
58643: PPUSH
58644: LD_INT 4
58646: PPUSH
58647: CALL_OW 273
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_VAR 0 7
58660: PPUSH
58661: LD_INT 2
58663: PPUSH
58664: LD_INT 4
58666: PPUSH
58667: CALL_OW 272
58671: PUSH
58672: LD_VAR 0 8
58676: PPUSH
58677: LD_INT 2
58679: PPUSH
58680: LD_INT 4
58682: PPUSH
58683: CALL_OW 273
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_VAR 0 7
58696: PPUSH
58697: LD_INT 3
58699: PPUSH
58700: LD_INT 4
58702: PPUSH
58703: CALL_OW 272
58707: PUSH
58708: LD_VAR 0 8
58712: PPUSH
58713: LD_INT 3
58715: PPUSH
58716: LD_INT 4
58718: PPUSH
58719: CALL_OW 273
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_VAR 0 7
58732: PPUSH
58733: LD_INT 4
58735: PPUSH
58736: LD_INT 4
58738: PPUSH
58739: CALL_OW 272
58743: PUSH
58744: LD_VAR 0 8
58748: PPUSH
58749: LD_INT 4
58751: PPUSH
58752: LD_INT 4
58754: PPUSH
58755: CALL_OW 273
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_VAR 0 7
58768: PPUSH
58769: LD_INT 5
58771: PPUSH
58772: LD_INT 4
58774: PPUSH
58775: CALL_OW 272
58779: PUSH
58780: LD_VAR 0 8
58784: PPUSH
58785: LD_INT 5
58787: PPUSH
58788: LD_INT 4
58790: PPUSH
58791: CALL_OW 273
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// for i = tmp downto 1 do
58808: LD_ADDR_VAR 0 4
58812: PUSH
58813: DOUBLE
58814: LD_VAR 0 6
58818: INC
58819: ST_TO_ADDR
58820: LD_INT 1
58822: PUSH
58823: FOR_DOWNTO
58824: IFFALSE 58925
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58826: LD_VAR 0 6
58830: PUSH
58831: LD_VAR 0 4
58835: ARRAY
58836: PUSH
58837: LD_INT 1
58839: ARRAY
58840: PPUSH
58841: LD_VAR 0 6
58845: PUSH
58846: LD_VAR 0 4
58850: ARRAY
58851: PUSH
58852: LD_INT 2
58854: ARRAY
58855: PPUSH
58856: CALL_OW 488
58860: NOT
58861: PUSH
58862: LD_VAR 0 6
58866: PUSH
58867: LD_VAR 0 4
58871: ARRAY
58872: PUSH
58873: LD_INT 1
58875: ARRAY
58876: PPUSH
58877: LD_VAR 0 6
58881: PUSH
58882: LD_VAR 0 4
58886: ARRAY
58887: PUSH
58888: LD_INT 2
58890: ARRAY
58891: PPUSH
58892: CALL_OW 428
58896: PUSH
58897: LD_INT 0
58899: NONEQUAL
58900: OR
58901: IFFALSE 58923
// tmp := Delete ( tmp , i ) ;
58903: LD_ADDR_VAR 0 6
58907: PUSH
58908: LD_VAR 0 6
58912: PPUSH
58913: LD_VAR 0 4
58917: PPUSH
58918: CALL_OW 3
58922: ST_TO_ADDR
58923: GO 58823
58925: POP
58926: POP
// j := GetClosestHex ( unit , tmp ) ;
58927: LD_ADDR_VAR 0 5
58931: PUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: LD_VAR 0 6
58941: PPUSH
58942: CALL 58229 0 2
58946: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58947: LD_VAR 0 1
58951: PPUSH
58952: LD_VAR 0 5
58956: PUSH
58957: LD_INT 1
58959: ARRAY
58960: PPUSH
58961: LD_VAR 0 5
58965: PUSH
58966: LD_INT 2
58968: ARRAY
58969: PPUSH
58970: CALL_OW 111
// end ;
58974: LD_VAR 0 3
58978: RET
// export function PrepareApemanSoldier ( ) ; begin
58979: LD_INT 0
58981: PPUSH
// uc_nation := 0 ;
58982: LD_ADDR_OWVAR 21
58986: PUSH
58987: LD_INT 0
58989: ST_TO_ADDR
// hc_sex := sex_male ;
58990: LD_ADDR_OWVAR 27
58994: PUSH
58995: LD_INT 1
58997: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58998: LD_ADDR_OWVAR 28
59002: PUSH
59003: LD_INT 15
59005: ST_TO_ADDR
// hc_gallery :=  ;
59006: LD_ADDR_OWVAR 33
59010: PUSH
59011: LD_STRING 
59013: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59014: LD_ADDR_OWVAR 31
59018: PUSH
59019: LD_INT 0
59021: PPUSH
59022: LD_INT 3
59024: PPUSH
59025: CALL_OW 12
59029: PUSH
59030: LD_INT 0
59032: PPUSH
59033: LD_INT 3
59035: PPUSH
59036: CALL_OW 12
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: ST_TO_ADDR
// end ;
59053: LD_VAR 0 1
59057: RET
// export function PrepareApemanEngineer ( ) ; begin
59058: LD_INT 0
59060: PPUSH
// uc_nation := 0 ;
59061: LD_ADDR_OWVAR 21
59065: PUSH
59066: LD_INT 0
59068: ST_TO_ADDR
// hc_sex := sex_male ;
59069: LD_ADDR_OWVAR 27
59073: PUSH
59074: LD_INT 1
59076: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59077: LD_ADDR_OWVAR 28
59081: PUSH
59082: LD_INT 16
59084: ST_TO_ADDR
// hc_gallery :=  ;
59085: LD_ADDR_OWVAR 33
59089: PUSH
59090: LD_STRING 
59092: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59093: LD_ADDR_OWVAR 31
59097: PUSH
59098: LD_INT 0
59100: PPUSH
59101: LD_INT 3
59103: PPUSH
59104: CALL_OW 12
59108: PUSH
59109: LD_INT 0
59111: PPUSH
59112: LD_INT 3
59114: PPUSH
59115: CALL_OW 12
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: ST_TO_ADDR
// end ;
59132: LD_VAR 0 1
59136: RET
// export function PrepareApeman ( agressivity ) ; begin
59137: LD_INT 0
59139: PPUSH
// uc_side := 0 ;
59140: LD_ADDR_OWVAR 20
59144: PUSH
59145: LD_INT 0
59147: ST_TO_ADDR
// uc_nation := 0 ;
59148: LD_ADDR_OWVAR 21
59152: PUSH
59153: LD_INT 0
59155: ST_TO_ADDR
// hc_sex := sex_male ;
59156: LD_ADDR_OWVAR 27
59160: PUSH
59161: LD_INT 1
59163: ST_TO_ADDR
// hc_class := class_apeman ;
59164: LD_ADDR_OWVAR 28
59168: PUSH
59169: LD_INT 12
59171: ST_TO_ADDR
// hc_gallery :=  ;
59172: LD_ADDR_OWVAR 33
59176: PUSH
59177: LD_STRING 
59179: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59180: LD_ADDR_OWVAR 35
59184: PUSH
59185: LD_VAR 0 1
59189: NEG
59190: PPUSH
59191: LD_VAR 0 1
59195: PPUSH
59196: CALL_OW 12
59200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59201: LD_ADDR_OWVAR 31
59205: PUSH
59206: LD_INT 0
59208: PPUSH
59209: LD_INT 3
59211: PPUSH
59212: CALL_OW 12
59216: PUSH
59217: LD_INT 0
59219: PPUSH
59220: LD_INT 3
59222: PPUSH
59223: CALL_OW 12
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: ST_TO_ADDR
// end ;
59240: LD_VAR 0 2
59244: RET
// export function PrepareTiger ( agressivity ) ; begin
59245: LD_INT 0
59247: PPUSH
// uc_side := 0 ;
59248: LD_ADDR_OWVAR 20
59252: PUSH
59253: LD_INT 0
59255: ST_TO_ADDR
// uc_nation := 0 ;
59256: LD_ADDR_OWVAR 21
59260: PUSH
59261: LD_INT 0
59263: ST_TO_ADDR
// hc_class := class_tiger ;
59264: LD_ADDR_OWVAR 28
59268: PUSH
59269: LD_INT 14
59271: ST_TO_ADDR
// hc_gallery :=  ;
59272: LD_ADDR_OWVAR 33
59276: PUSH
59277: LD_STRING 
59279: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59280: LD_ADDR_OWVAR 35
59284: PUSH
59285: LD_VAR 0 1
59289: NEG
59290: PPUSH
59291: LD_VAR 0 1
59295: PPUSH
59296: CALL_OW 12
59300: ST_TO_ADDR
// end ;
59301: LD_VAR 0 2
59305: RET
// export function PrepareEnchidna ( ) ; begin
59306: LD_INT 0
59308: PPUSH
// uc_side := 0 ;
59309: LD_ADDR_OWVAR 20
59313: PUSH
59314: LD_INT 0
59316: ST_TO_ADDR
// uc_nation := 0 ;
59317: LD_ADDR_OWVAR 21
59321: PUSH
59322: LD_INT 0
59324: ST_TO_ADDR
// hc_class := class_baggie ;
59325: LD_ADDR_OWVAR 28
59329: PUSH
59330: LD_INT 13
59332: ST_TO_ADDR
// hc_gallery :=  ;
59333: LD_ADDR_OWVAR 33
59337: PUSH
59338: LD_STRING 
59340: ST_TO_ADDR
// end ;
59341: LD_VAR 0 1
59345: RET
// export function PrepareFrog ( ) ; begin
59346: LD_INT 0
59348: PPUSH
// uc_side := 0 ;
59349: LD_ADDR_OWVAR 20
59353: PUSH
59354: LD_INT 0
59356: ST_TO_ADDR
// uc_nation := 0 ;
59357: LD_ADDR_OWVAR 21
59361: PUSH
59362: LD_INT 0
59364: ST_TO_ADDR
// hc_class := class_frog ;
59365: LD_ADDR_OWVAR 28
59369: PUSH
59370: LD_INT 19
59372: ST_TO_ADDR
// hc_gallery :=  ;
59373: LD_ADDR_OWVAR 33
59377: PUSH
59378: LD_STRING 
59380: ST_TO_ADDR
// end ;
59381: LD_VAR 0 1
59385: RET
// export function PrepareFish ( ) ; begin
59386: LD_INT 0
59388: PPUSH
// uc_side := 0 ;
59389: LD_ADDR_OWVAR 20
59393: PUSH
59394: LD_INT 0
59396: ST_TO_ADDR
// uc_nation := 0 ;
59397: LD_ADDR_OWVAR 21
59401: PUSH
59402: LD_INT 0
59404: ST_TO_ADDR
// hc_class := class_fish ;
59405: LD_ADDR_OWVAR 28
59409: PUSH
59410: LD_INT 20
59412: ST_TO_ADDR
// hc_gallery :=  ;
59413: LD_ADDR_OWVAR 33
59417: PUSH
59418: LD_STRING 
59420: ST_TO_ADDR
// end ;
59421: LD_VAR 0 1
59425: RET
// export function PrepareBird ( ) ; begin
59426: LD_INT 0
59428: PPUSH
// uc_side := 0 ;
59429: LD_ADDR_OWVAR 20
59433: PUSH
59434: LD_INT 0
59436: ST_TO_ADDR
// uc_nation := 0 ;
59437: LD_ADDR_OWVAR 21
59441: PUSH
59442: LD_INT 0
59444: ST_TO_ADDR
// hc_class := class_phororhacos ;
59445: LD_ADDR_OWVAR 28
59449: PUSH
59450: LD_INT 18
59452: ST_TO_ADDR
// hc_gallery :=  ;
59453: LD_ADDR_OWVAR 33
59457: PUSH
59458: LD_STRING 
59460: ST_TO_ADDR
// end ;
59461: LD_VAR 0 1
59465: RET
// export function PrepareHorse ( ) ; begin
59466: LD_INT 0
59468: PPUSH
// uc_side := 0 ;
59469: LD_ADDR_OWVAR 20
59473: PUSH
59474: LD_INT 0
59476: ST_TO_ADDR
// uc_nation := 0 ;
59477: LD_ADDR_OWVAR 21
59481: PUSH
59482: LD_INT 0
59484: ST_TO_ADDR
// hc_class := class_horse ;
59485: LD_ADDR_OWVAR 28
59489: PUSH
59490: LD_INT 21
59492: ST_TO_ADDR
// hc_gallery :=  ;
59493: LD_ADDR_OWVAR 33
59497: PUSH
59498: LD_STRING 
59500: ST_TO_ADDR
// end ;
59501: LD_VAR 0 1
59505: RET
// export function PrepareMastodont ( ) ; begin
59506: LD_INT 0
59508: PPUSH
// uc_side := 0 ;
59509: LD_ADDR_OWVAR 20
59513: PUSH
59514: LD_INT 0
59516: ST_TO_ADDR
// uc_nation := 0 ;
59517: LD_ADDR_OWVAR 21
59521: PUSH
59522: LD_INT 0
59524: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59525: LD_ADDR_OWVAR 37
59529: PUSH
59530: LD_INT 31
59532: ST_TO_ADDR
// vc_control := control_rider ;
59533: LD_ADDR_OWVAR 38
59537: PUSH
59538: LD_INT 4
59540: ST_TO_ADDR
// end ;
59541: LD_VAR 0 1
59545: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59546: LD_INT 0
59548: PPUSH
59549: PPUSH
59550: PPUSH
// uc_side = 0 ;
59551: LD_ADDR_OWVAR 20
59555: PUSH
59556: LD_INT 0
59558: ST_TO_ADDR
// uc_nation = 0 ;
59559: LD_ADDR_OWVAR 21
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// InitHc_All ( ) ;
59567: CALL_OW 584
// InitVc ;
59571: CALL_OW 20
// if mastodonts then
59575: LD_VAR 0 6
59579: IFFALSE 59646
// for i = 1 to mastodonts do
59581: LD_ADDR_VAR 0 11
59585: PUSH
59586: DOUBLE
59587: LD_INT 1
59589: DEC
59590: ST_TO_ADDR
59591: LD_VAR 0 6
59595: PUSH
59596: FOR_TO
59597: IFFALSE 59644
// begin vc_chassis := 31 ;
59599: LD_ADDR_OWVAR 37
59603: PUSH
59604: LD_INT 31
59606: ST_TO_ADDR
// vc_control := control_rider ;
59607: LD_ADDR_OWVAR 38
59611: PUSH
59612: LD_INT 4
59614: ST_TO_ADDR
// animal := CreateVehicle ;
59615: LD_ADDR_VAR 0 12
59619: PUSH
59620: CALL_OW 45
59624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59625: LD_VAR 0 12
59629: PPUSH
59630: LD_VAR 0 8
59634: PPUSH
59635: LD_INT 0
59637: PPUSH
59638: CALL 61774 0 3
// end ;
59642: GO 59596
59644: POP
59645: POP
// if horses then
59646: LD_VAR 0 5
59650: IFFALSE 59717
// for i = 1 to horses do
59652: LD_ADDR_VAR 0 11
59656: PUSH
59657: DOUBLE
59658: LD_INT 1
59660: DEC
59661: ST_TO_ADDR
59662: LD_VAR 0 5
59666: PUSH
59667: FOR_TO
59668: IFFALSE 59715
// begin hc_class := 21 ;
59670: LD_ADDR_OWVAR 28
59674: PUSH
59675: LD_INT 21
59677: ST_TO_ADDR
// hc_gallery :=  ;
59678: LD_ADDR_OWVAR 33
59682: PUSH
59683: LD_STRING 
59685: ST_TO_ADDR
// animal := CreateHuman ;
59686: LD_ADDR_VAR 0 12
59690: PUSH
59691: CALL_OW 44
59695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59696: LD_VAR 0 12
59700: PPUSH
59701: LD_VAR 0 8
59705: PPUSH
59706: LD_INT 0
59708: PPUSH
59709: CALL 61774 0 3
// end ;
59713: GO 59667
59715: POP
59716: POP
// if birds then
59717: LD_VAR 0 1
59721: IFFALSE 59788
// for i = 1 to birds do
59723: LD_ADDR_VAR 0 11
59727: PUSH
59728: DOUBLE
59729: LD_INT 1
59731: DEC
59732: ST_TO_ADDR
59733: LD_VAR 0 1
59737: PUSH
59738: FOR_TO
59739: IFFALSE 59786
// begin hc_class := 18 ;
59741: LD_ADDR_OWVAR 28
59745: PUSH
59746: LD_INT 18
59748: ST_TO_ADDR
// hc_gallery =  ;
59749: LD_ADDR_OWVAR 33
59753: PUSH
59754: LD_STRING 
59756: ST_TO_ADDR
// animal := CreateHuman ;
59757: LD_ADDR_VAR 0 12
59761: PUSH
59762: CALL_OW 44
59766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59767: LD_VAR 0 12
59771: PPUSH
59772: LD_VAR 0 8
59776: PPUSH
59777: LD_INT 0
59779: PPUSH
59780: CALL 61774 0 3
// end ;
59784: GO 59738
59786: POP
59787: POP
// if tigers then
59788: LD_VAR 0 2
59792: IFFALSE 59876
// for i = 1 to tigers do
59794: LD_ADDR_VAR 0 11
59798: PUSH
59799: DOUBLE
59800: LD_INT 1
59802: DEC
59803: ST_TO_ADDR
59804: LD_VAR 0 2
59808: PUSH
59809: FOR_TO
59810: IFFALSE 59874
// begin hc_class = class_tiger ;
59812: LD_ADDR_OWVAR 28
59816: PUSH
59817: LD_INT 14
59819: ST_TO_ADDR
// hc_gallery =  ;
59820: LD_ADDR_OWVAR 33
59824: PUSH
59825: LD_STRING 
59827: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59828: LD_ADDR_OWVAR 35
59832: PUSH
59833: LD_INT 7
59835: NEG
59836: PPUSH
59837: LD_INT 7
59839: PPUSH
59840: CALL_OW 12
59844: ST_TO_ADDR
// animal := CreateHuman ;
59845: LD_ADDR_VAR 0 12
59849: PUSH
59850: CALL_OW 44
59854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59855: LD_VAR 0 12
59859: PPUSH
59860: LD_VAR 0 8
59864: PPUSH
59865: LD_INT 0
59867: PPUSH
59868: CALL 61774 0 3
// end ;
59872: GO 59809
59874: POP
59875: POP
// if apemans then
59876: LD_VAR 0 3
59880: IFFALSE 60003
// for i = 1 to apemans do
59882: LD_ADDR_VAR 0 11
59886: PUSH
59887: DOUBLE
59888: LD_INT 1
59890: DEC
59891: ST_TO_ADDR
59892: LD_VAR 0 3
59896: PUSH
59897: FOR_TO
59898: IFFALSE 60001
// begin hc_class = class_apeman ;
59900: LD_ADDR_OWVAR 28
59904: PUSH
59905: LD_INT 12
59907: ST_TO_ADDR
// hc_gallery =  ;
59908: LD_ADDR_OWVAR 33
59912: PUSH
59913: LD_STRING 
59915: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59916: LD_ADDR_OWVAR 35
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PPUSH
59925: LD_INT 2
59927: PPUSH
59928: CALL_OW 12
59932: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59933: LD_ADDR_OWVAR 31
59937: PUSH
59938: LD_INT 1
59940: PPUSH
59941: LD_INT 3
59943: PPUSH
59944: CALL_OW 12
59948: PUSH
59949: LD_INT 1
59951: PPUSH
59952: LD_INT 3
59954: PPUSH
59955: CALL_OW 12
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// animal := CreateHuman ;
59972: LD_ADDR_VAR 0 12
59976: PUSH
59977: CALL_OW 44
59981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59982: LD_VAR 0 12
59986: PPUSH
59987: LD_VAR 0 8
59991: PPUSH
59992: LD_INT 0
59994: PPUSH
59995: CALL 61774 0 3
// end ;
59999: GO 59897
60001: POP
60002: POP
// if enchidnas then
60003: LD_VAR 0 4
60007: IFFALSE 60074
// for i = 1 to enchidnas do
60009: LD_ADDR_VAR 0 11
60013: PUSH
60014: DOUBLE
60015: LD_INT 1
60017: DEC
60018: ST_TO_ADDR
60019: LD_VAR 0 4
60023: PUSH
60024: FOR_TO
60025: IFFALSE 60072
// begin hc_class = 13 ;
60027: LD_ADDR_OWVAR 28
60031: PUSH
60032: LD_INT 13
60034: ST_TO_ADDR
// hc_gallery =  ;
60035: LD_ADDR_OWVAR 33
60039: PUSH
60040: LD_STRING 
60042: ST_TO_ADDR
// animal := CreateHuman ;
60043: LD_ADDR_VAR 0 12
60047: PUSH
60048: CALL_OW 44
60052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60053: LD_VAR 0 12
60057: PPUSH
60058: LD_VAR 0 8
60062: PPUSH
60063: LD_INT 0
60065: PPUSH
60066: CALL 61774 0 3
// end ;
60070: GO 60024
60072: POP
60073: POP
// if fishes then
60074: LD_VAR 0 7
60078: IFFALSE 60145
// for i = 1 to fishes do
60080: LD_ADDR_VAR 0 11
60084: PUSH
60085: DOUBLE
60086: LD_INT 1
60088: DEC
60089: ST_TO_ADDR
60090: LD_VAR 0 7
60094: PUSH
60095: FOR_TO
60096: IFFALSE 60143
// begin hc_class = 20 ;
60098: LD_ADDR_OWVAR 28
60102: PUSH
60103: LD_INT 20
60105: ST_TO_ADDR
// hc_gallery =  ;
60106: LD_ADDR_OWVAR 33
60110: PUSH
60111: LD_STRING 
60113: ST_TO_ADDR
// animal := CreateHuman ;
60114: LD_ADDR_VAR 0 12
60118: PUSH
60119: CALL_OW 44
60123: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60124: LD_VAR 0 12
60128: PPUSH
60129: LD_VAR 0 9
60133: PPUSH
60134: LD_INT 0
60136: PPUSH
60137: CALL 61774 0 3
// end ;
60141: GO 60095
60143: POP
60144: POP
// end ;
60145: LD_VAR 0 10
60149: RET
// export function WantHeal ( sci , unit ) ; begin
60150: LD_INT 0
60152: PPUSH
// if GetTaskList ( sci ) > 0 then
60153: LD_VAR 0 1
60157: PPUSH
60158: CALL_OW 437
60162: PUSH
60163: LD_INT 0
60165: GREATER
60166: IFFALSE 60236
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60168: LD_VAR 0 1
60172: PPUSH
60173: CALL_OW 437
60177: PUSH
60178: LD_INT 1
60180: ARRAY
60181: PUSH
60182: LD_INT 1
60184: ARRAY
60185: PUSH
60186: LD_STRING l
60188: EQUAL
60189: PUSH
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL_OW 437
60199: PUSH
60200: LD_INT 1
60202: ARRAY
60203: PUSH
60204: LD_INT 4
60206: ARRAY
60207: PUSH
60208: LD_VAR 0 2
60212: EQUAL
60213: AND
60214: IFFALSE 60226
// result := true else
60216: LD_ADDR_VAR 0 3
60220: PUSH
60221: LD_INT 1
60223: ST_TO_ADDR
60224: GO 60234
// result := false ;
60226: LD_ADDR_VAR 0 3
60230: PUSH
60231: LD_INT 0
60233: ST_TO_ADDR
// end else
60234: GO 60244
// result := false ;
60236: LD_ADDR_VAR 0 3
60240: PUSH
60241: LD_INT 0
60243: ST_TO_ADDR
// end ;
60244: LD_VAR 0 3
60248: RET
// export function HealTarget ( sci ) ; begin
60249: LD_INT 0
60251: PPUSH
// if not sci then
60252: LD_VAR 0 1
60256: NOT
60257: IFFALSE 60261
// exit ;
60259: GO 60326
// result := 0 ;
60261: LD_ADDR_VAR 0 2
60265: PUSH
60266: LD_INT 0
60268: ST_TO_ADDR
// if GetTaskList ( sci ) then
60269: LD_VAR 0 1
60273: PPUSH
60274: CALL_OW 437
60278: IFFALSE 60326
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60280: LD_VAR 0 1
60284: PPUSH
60285: CALL_OW 437
60289: PUSH
60290: LD_INT 1
60292: ARRAY
60293: PUSH
60294: LD_INT 1
60296: ARRAY
60297: PUSH
60298: LD_STRING l
60300: EQUAL
60301: IFFALSE 60326
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60303: LD_ADDR_VAR 0 2
60307: PUSH
60308: LD_VAR 0 1
60312: PPUSH
60313: CALL_OW 437
60317: PUSH
60318: LD_INT 1
60320: ARRAY
60321: PUSH
60322: LD_INT 4
60324: ARRAY
60325: ST_TO_ADDR
// end ;
60326: LD_VAR 0 2
60330: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60331: LD_INT 0
60333: PPUSH
60334: PPUSH
60335: PPUSH
60336: PPUSH
// if not base_units then
60337: LD_VAR 0 1
60341: NOT
60342: IFFALSE 60346
// exit ;
60344: GO 60433
// result := false ;
60346: LD_ADDR_VAR 0 2
60350: PUSH
60351: LD_INT 0
60353: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60354: LD_ADDR_VAR 0 5
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: LD_INT 21
60366: PUSH
60367: LD_INT 3
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PPUSH
60374: CALL_OW 72
60378: ST_TO_ADDR
// if not tmp then
60379: LD_VAR 0 5
60383: NOT
60384: IFFALSE 60388
// exit ;
60386: GO 60433
// for i in tmp do
60388: LD_ADDR_VAR 0 3
60392: PUSH
60393: LD_VAR 0 5
60397: PUSH
60398: FOR_IN
60399: IFFALSE 60431
// begin result := EnemyInRange ( i , 22 ) ;
60401: LD_ADDR_VAR 0 2
60405: PUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: LD_INT 22
60413: PPUSH
60414: CALL 58031 0 2
60418: ST_TO_ADDR
// if result then
60419: LD_VAR 0 2
60423: IFFALSE 60429
// exit ;
60425: POP
60426: POP
60427: GO 60433
// end ;
60429: GO 60398
60431: POP
60432: POP
// end ;
60433: LD_VAR 0 2
60437: RET
// export function FilterByTag ( units , tag ) ; begin
60438: LD_INT 0
60440: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60441: LD_ADDR_VAR 0 3
60445: PUSH
60446: LD_VAR 0 1
60450: PPUSH
60451: LD_INT 120
60453: PUSH
60454: LD_VAR 0 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PPUSH
60463: CALL_OW 72
60467: ST_TO_ADDR
// end ;
60468: LD_VAR 0 3
60472: RET
// export function IsDriver ( un ) ; begin
60473: LD_INT 0
60475: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60476: LD_ADDR_VAR 0 2
60480: PUSH
60481: LD_VAR 0 1
60485: PUSH
60486: LD_INT 55
60488: PUSH
60489: EMPTY
60490: LIST
60491: PPUSH
60492: CALL_OW 69
60496: IN
60497: ST_TO_ADDR
// end ;
60498: LD_VAR 0 2
60502: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60503: LD_INT 0
60505: PPUSH
60506: PPUSH
// list := [ ] ;
60507: LD_ADDR_VAR 0 5
60511: PUSH
60512: EMPTY
60513: ST_TO_ADDR
// case d of 0 :
60514: LD_VAR 0 3
60518: PUSH
60519: LD_INT 0
60521: DOUBLE
60522: EQUAL
60523: IFTRUE 60527
60525: GO 60660
60527: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60528: LD_ADDR_VAR 0 5
60532: PUSH
60533: LD_VAR 0 1
60537: PUSH
60538: LD_INT 4
60540: MINUS
60541: PUSH
60542: LD_VAR 0 2
60546: PUSH
60547: LD_INT 4
60549: MINUS
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: PUSH
60559: LD_VAR 0 1
60563: PUSH
60564: LD_INT 3
60566: MINUS
60567: PUSH
60568: LD_VAR 0 2
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: PUSH
60581: LD_VAR 0 1
60585: PUSH
60586: LD_INT 4
60588: PLUS
60589: PUSH
60590: LD_VAR 0 2
60594: PUSH
60595: LD_INT 4
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: PUSH
60603: LD_VAR 0 1
60607: PUSH
60608: LD_INT 3
60610: PLUS
60611: PUSH
60612: LD_VAR 0 2
60616: PUSH
60617: LD_INT 3
60619: PLUS
60620: PUSH
60621: LD_INT 5
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: PUSH
60629: LD_VAR 0 1
60633: PUSH
60634: LD_VAR 0 2
60638: PUSH
60639: LD_INT 4
60641: PLUS
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// end ; 1 :
60658: GO 61358
60660: LD_INT 1
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60668
60666: GO 60801
60668: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60669: LD_ADDR_VAR 0 5
60673: PUSH
60674: LD_VAR 0 1
60678: PUSH
60679: LD_VAR 0 2
60683: PUSH
60684: LD_INT 4
60686: MINUS
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: PUSH
60696: LD_VAR 0 1
60700: PUSH
60701: LD_INT 3
60703: MINUS
60704: PUSH
60705: LD_VAR 0 2
60709: PUSH
60710: LD_INT 3
60712: MINUS
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: PUSH
60722: LD_VAR 0 1
60726: PUSH
60727: LD_INT 4
60729: MINUS
60730: PUSH
60731: LD_VAR 0 2
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: LD_VAR 0 2
60753: PUSH
60754: LD_INT 3
60756: PLUS
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: PUSH
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 4
60773: PLUS
60774: PUSH
60775: LD_VAR 0 2
60779: PUSH
60780: LD_INT 4
60782: PLUS
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: ST_TO_ADDR
// end ; 2 :
60799: GO 61358
60801: LD_INT 2
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60809
60807: GO 60938
60809: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60810: LD_ADDR_VAR 0 5
60814: PUSH
60815: LD_VAR 0 1
60819: PUSH
60820: LD_VAR 0 2
60824: PUSH
60825: LD_INT 3
60827: MINUS
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: PUSH
60837: LD_VAR 0 1
60841: PUSH
60842: LD_INT 4
60844: PLUS
60845: PUSH
60846: LD_VAR 0 2
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: PUSH
60859: LD_VAR 0 1
60863: PUSH
60864: LD_VAR 0 2
60868: PUSH
60869: LD_INT 4
60871: PLUS
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: PUSH
60881: LD_VAR 0 1
60885: PUSH
60886: LD_INT 3
60888: MINUS
60889: PUSH
60890: LD_VAR 0 2
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: PUSH
60903: LD_VAR 0 1
60907: PUSH
60908: LD_INT 4
60910: MINUS
60911: PUSH
60912: LD_VAR 0 2
60916: PUSH
60917: LD_INT 4
60919: MINUS
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: ST_TO_ADDR
// end ; 3 :
60936: GO 61358
60938: LD_INT 3
60940: DOUBLE
60941: EQUAL
60942: IFTRUE 60946
60944: GO 61079
60946: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60947: LD_ADDR_VAR 0 5
60951: PUSH
60952: LD_VAR 0 1
60956: PUSH
60957: LD_INT 3
60959: PLUS
60960: PUSH
60961: LD_VAR 0 2
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: LIST
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: LD_INT 4
60981: PLUS
60982: PUSH
60983: LD_VAR 0 2
60987: PUSH
60988: LD_INT 4
60990: PLUS
60991: PUSH
60992: LD_INT 5
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: LIST
60999: PUSH
61000: LD_VAR 0 1
61004: PUSH
61005: LD_INT 4
61007: MINUS
61008: PUSH
61009: LD_VAR 0 2
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: PUSH
61022: LD_VAR 0 1
61026: PUSH
61027: LD_VAR 0 2
61031: PUSH
61032: LD_INT 4
61034: MINUS
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: PUSH
61044: LD_VAR 0 1
61048: PUSH
61049: LD_INT 3
61051: MINUS
61052: PUSH
61053: LD_VAR 0 2
61057: PUSH
61058: LD_INT 3
61060: MINUS
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// end ; 4 :
61077: GO 61358
61079: LD_INT 4
61081: DOUBLE
61082: EQUAL
61083: IFTRUE 61087
61085: GO 61220
61087: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61088: LD_ADDR_VAR 0 5
61092: PUSH
61093: LD_VAR 0 1
61097: PUSH
61098: LD_VAR 0 2
61102: PUSH
61103: LD_INT 4
61105: PLUS
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: PUSH
61115: LD_VAR 0 1
61119: PUSH
61120: LD_INT 3
61122: PLUS
61123: PUSH
61124: LD_VAR 0 2
61128: PUSH
61129: LD_INT 3
61131: PLUS
61132: PUSH
61133: LD_INT 5
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: PUSH
61141: LD_VAR 0 1
61145: PUSH
61146: LD_INT 4
61148: PLUS
61149: PUSH
61150: LD_VAR 0 2
61154: PUSH
61155: LD_INT 4
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: PUSH
61163: LD_VAR 0 1
61167: PUSH
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 3
61175: MINUS
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: PUSH
61185: LD_VAR 0 1
61189: PUSH
61190: LD_INT 4
61192: MINUS
61193: PUSH
61194: LD_VAR 0 2
61198: PUSH
61199: LD_INT 4
61201: MINUS
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: ST_TO_ADDR
// end ; 5 :
61218: GO 61358
61220: LD_INT 5
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61228
61226: GO 61357
61228: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61229: LD_ADDR_VAR 0 5
61233: PUSH
61234: LD_VAR 0 1
61238: PUSH
61239: LD_INT 4
61241: MINUS
61242: PUSH
61243: LD_VAR 0 2
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: PUSH
61256: LD_VAR 0 1
61260: PUSH
61261: LD_VAR 0 2
61265: PUSH
61266: LD_INT 4
61268: MINUS
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: PUSH
61278: LD_VAR 0 1
61282: PUSH
61283: LD_INT 4
61285: PLUS
61286: PUSH
61287: LD_VAR 0 2
61291: PUSH
61292: LD_INT 4
61294: PLUS
61295: PUSH
61296: LD_INT 5
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: LIST
61303: PUSH
61304: LD_VAR 0 1
61308: PUSH
61309: LD_INT 3
61311: PLUS
61312: PUSH
61313: LD_VAR 0 2
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: PUSH
61326: LD_VAR 0 1
61330: PUSH
61331: LD_VAR 0 2
61335: PUSH
61336: LD_INT 3
61338: PLUS
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// end ; end ;
61355: GO 61358
61357: POP
// result := list ;
61358: LD_ADDR_VAR 0 4
61362: PUSH
61363: LD_VAR 0 5
61367: ST_TO_ADDR
// end ;
61368: LD_VAR 0 4
61372: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61373: LD_INT 0
61375: PPUSH
61376: PPUSH
61377: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61378: LD_VAR 0 1
61382: NOT
61383: PUSH
61384: LD_VAR 0 2
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: IN
61407: NOT
61408: OR
61409: IFFALSE 61413
// exit ;
61411: GO 61496
// tmp := [ ] ;
61413: LD_ADDR_VAR 0 5
61417: PUSH
61418: EMPTY
61419: ST_TO_ADDR
// for i in units do
61420: LD_ADDR_VAR 0 4
61424: PUSH
61425: LD_VAR 0 1
61429: PUSH
61430: FOR_IN
61431: IFFALSE 61465
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61433: LD_ADDR_VAR 0 5
61437: PUSH
61438: LD_VAR 0 5
61442: PPUSH
61443: LD_VAR 0 4
61447: PPUSH
61448: LD_VAR 0 2
61452: PPUSH
61453: CALL_OW 259
61457: PPUSH
61458: CALL 62869 0 2
61462: ST_TO_ADDR
61463: GO 61430
61465: POP
61466: POP
// if not tmp then
61467: LD_VAR 0 5
61471: NOT
61472: IFFALSE 61476
// exit ;
61474: GO 61496
// result := SortListByListDesc ( units , tmp ) ;
61476: LD_ADDR_VAR 0 3
61480: PUSH
61481: LD_VAR 0 1
61485: PPUSH
61486: LD_VAR 0 5
61490: PPUSH
61491: CALL_OW 77
61495: ST_TO_ADDR
// end ;
61496: LD_VAR 0 3
61500: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61501: LD_INT 0
61503: PPUSH
61504: PPUSH
61505: PPUSH
// result := false ;
61506: LD_ADDR_VAR 0 3
61510: PUSH
61511: LD_INT 0
61513: ST_TO_ADDR
// if not building then
61514: LD_VAR 0 2
61518: NOT
61519: IFFALSE 61523
// exit ;
61521: GO 61661
// x := GetX ( building ) ;
61523: LD_ADDR_VAR 0 4
61527: PUSH
61528: LD_VAR 0 2
61532: PPUSH
61533: CALL_OW 250
61537: ST_TO_ADDR
// y := GetY ( building ) ;
61538: LD_ADDR_VAR 0 5
61542: PUSH
61543: LD_VAR 0 2
61547: PPUSH
61548: CALL_OW 251
61552: ST_TO_ADDR
// if not x or not y then
61553: LD_VAR 0 4
61557: NOT
61558: PUSH
61559: LD_VAR 0 5
61563: NOT
61564: OR
61565: IFFALSE 61569
// exit ;
61567: GO 61661
// if GetTaskList ( unit ) then
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 437
61578: IFFALSE 61661
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61580: LD_STRING e
61582: PUSH
61583: LD_VAR 0 1
61587: PPUSH
61588: CALL_OW 437
61592: PUSH
61593: LD_INT 1
61595: ARRAY
61596: PUSH
61597: LD_INT 1
61599: ARRAY
61600: EQUAL
61601: PUSH
61602: LD_VAR 0 4
61606: PUSH
61607: LD_VAR 0 1
61611: PPUSH
61612: CALL_OW 437
61616: PUSH
61617: LD_INT 1
61619: ARRAY
61620: PUSH
61621: LD_INT 2
61623: ARRAY
61624: EQUAL
61625: AND
61626: PUSH
61627: LD_VAR 0 5
61631: PUSH
61632: LD_VAR 0 1
61636: PPUSH
61637: CALL_OW 437
61641: PUSH
61642: LD_INT 1
61644: ARRAY
61645: PUSH
61646: LD_INT 3
61648: ARRAY
61649: EQUAL
61650: AND
61651: IFFALSE 61661
// result := true end ;
61653: LD_ADDR_VAR 0 3
61657: PUSH
61658: LD_INT 1
61660: ST_TO_ADDR
// end ;
61661: LD_VAR 0 3
61665: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61666: LD_INT 0
61668: PPUSH
// result := false ;
61669: LD_ADDR_VAR 0 4
61673: PUSH
61674: LD_INT 0
61676: ST_TO_ADDR
// if GetTaskList ( unit ) then
61677: LD_VAR 0 1
61681: PPUSH
61682: CALL_OW 437
61686: IFFALSE 61769
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61688: LD_STRING M
61690: PUSH
61691: LD_VAR 0 1
61695: PPUSH
61696: CALL_OW 437
61700: PUSH
61701: LD_INT 1
61703: ARRAY
61704: PUSH
61705: LD_INT 1
61707: ARRAY
61708: EQUAL
61709: PUSH
61710: LD_VAR 0 2
61714: PUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL_OW 437
61724: PUSH
61725: LD_INT 1
61727: ARRAY
61728: PUSH
61729: LD_INT 2
61731: ARRAY
61732: EQUAL
61733: AND
61734: PUSH
61735: LD_VAR 0 3
61739: PUSH
61740: LD_VAR 0 1
61744: PPUSH
61745: CALL_OW 437
61749: PUSH
61750: LD_INT 1
61752: ARRAY
61753: PUSH
61754: LD_INT 3
61756: ARRAY
61757: EQUAL
61758: AND
61759: IFFALSE 61769
// result := true ;
61761: LD_ADDR_VAR 0 4
61765: PUSH
61766: LD_INT 1
61768: ST_TO_ADDR
// end ; end ;
61769: LD_VAR 0 4
61773: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61774: LD_INT 0
61776: PPUSH
61777: PPUSH
61778: PPUSH
61779: PPUSH
// if not unit or not area then
61780: LD_VAR 0 1
61784: NOT
61785: PUSH
61786: LD_VAR 0 2
61790: NOT
61791: OR
61792: IFFALSE 61796
// exit ;
61794: GO 61972
// tmp := AreaToList ( area , i ) ;
61796: LD_ADDR_VAR 0 6
61800: PUSH
61801: LD_VAR 0 2
61805: PPUSH
61806: LD_VAR 0 5
61810: PPUSH
61811: CALL_OW 517
61815: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61816: LD_ADDR_VAR 0 5
61820: PUSH
61821: DOUBLE
61822: LD_INT 1
61824: DEC
61825: ST_TO_ADDR
61826: LD_VAR 0 6
61830: PUSH
61831: LD_INT 1
61833: ARRAY
61834: PUSH
61835: FOR_TO
61836: IFFALSE 61970
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61838: LD_ADDR_VAR 0 7
61842: PUSH
61843: LD_VAR 0 6
61847: PUSH
61848: LD_INT 1
61850: ARRAY
61851: PUSH
61852: LD_VAR 0 5
61856: ARRAY
61857: PUSH
61858: LD_VAR 0 6
61862: PUSH
61863: LD_INT 2
61865: ARRAY
61866: PUSH
61867: LD_VAR 0 5
61871: ARRAY
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61877: LD_INT 92
61879: PUSH
61880: LD_VAR 0 7
61884: PUSH
61885: LD_INT 1
61887: ARRAY
61888: PUSH
61889: LD_VAR 0 7
61893: PUSH
61894: LD_INT 2
61896: ARRAY
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: PPUSH
61907: CALL_OW 69
61911: PUSH
61912: LD_INT 0
61914: EQUAL
61915: IFFALSE 61968
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61917: LD_VAR 0 1
61921: PPUSH
61922: LD_VAR 0 7
61926: PUSH
61927: LD_INT 1
61929: ARRAY
61930: PPUSH
61931: LD_VAR 0 7
61935: PUSH
61936: LD_INT 2
61938: ARRAY
61939: PPUSH
61940: LD_VAR 0 3
61944: PPUSH
61945: CALL_OW 48
// result := IsPlaced ( unit ) ;
61949: LD_ADDR_VAR 0 4
61953: PUSH
61954: LD_VAR 0 1
61958: PPUSH
61959: CALL_OW 305
61963: ST_TO_ADDR
// exit ;
61964: POP
61965: POP
61966: GO 61972
// end ; end ;
61968: GO 61835
61970: POP
61971: POP
// end ;
61972: LD_VAR 0 4
61976: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61977: LD_INT 0
61979: PPUSH
61980: PPUSH
61981: PPUSH
// if not side or side > 8 then
61982: LD_VAR 0 1
61986: NOT
61987: PUSH
61988: LD_VAR 0 1
61992: PUSH
61993: LD_INT 8
61995: GREATER
61996: OR
61997: IFFALSE 62001
// exit ;
61999: GO 62188
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62001: LD_ADDR_VAR 0 4
62005: PUSH
62006: LD_INT 22
62008: PUSH
62009: LD_VAR 0 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 21
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PPUSH
62032: CALL_OW 69
62036: ST_TO_ADDR
// if not tmp then
62037: LD_VAR 0 4
62041: NOT
62042: IFFALSE 62046
// exit ;
62044: GO 62188
// enable_addtolog := true ;
62046: LD_ADDR_OWVAR 81
62050: PUSH
62051: LD_INT 1
62053: ST_TO_ADDR
// AddToLog ( [ ) ;
62054: LD_STRING [
62056: PPUSH
62057: CALL_OW 561
// for i in tmp do
62061: LD_ADDR_VAR 0 3
62065: PUSH
62066: LD_VAR 0 4
62070: PUSH
62071: FOR_IN
62072: IFFALSE 62179
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62074: LD_STRING [
62076: PUSH
62077: LD_VAR 0 3
62081: PPUSH
62082: CALL_OW 266
62086: STR
62087: PUSH
62088: LD_STRING , 
62090: STR
62091: PUSH
62092: LD_VAR 0 3
62096: PPUSH
62097: CALL_OW 250
62101: STR
62102: PUSH
62103: LD_STRING , 
62105: STR
62106: PUSH
62107: LD_VAR 0 3
62111: PPUSH
62112: CALL_OW 251
62116: STR
62117: PUSH
62118: LD_STRING , 
62120: STR
62121: PUSH
62122: LD_VAR 0 3
62126: PPUSH
62127: CALL_OW 254
62131: STR
62132: PUSH
62133: LD_STRING , 
62135: STR
62136: PUSH
62137: LD_VAR 0 3
62141: PPUSH
62142: LD_INT 1
62144: PPUSH
62145: CALL_OW 268
62149: STR
62150: PUSH
62151: LD_STRING , 
62153: STR
62154: PUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_INT 2
62162: PPUSH
62163: CALL_OW 268
62167: STR
62168: PUSH
62169: LD_STRING ],
62171: STR
62172: PPUSH
62173: CALL_OW 561
// end ;
62177: GO 62071
62179: POP
62180: POP
// AddToLog ( ]; ) ;
62181: LD_STRING ];
62183: PPUSH
62184: CALL_OW 561
// end ;
62188: LD_VAR 0 2
62192: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62193: LD_INT 0
62195: PPUSH
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
// if not area or not rate or not max then
62200: LD_VAR 0 1
62204: NOT
62205: PUSH
62206: LD_VAR 0 2
62210: NOT
62211: OR
62212: PUSH
62213: LD_VAR 0 4
62217: NOT
62218: OR
62219: IFFALSE 62223
// exit ;
62221: GO 62412
// while 1 do
62223: LD_INT 1
62225: IFFALSE 62412
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62227: LD_ADDR_VAR 0 9
62231: PUSH
62232: LD_VAR 0 1
62236: PPUSH
62237: LD_INT 1
62239: PPUSH
62240: CALL_OW 287
62244: PUSH
62245: LD_INT 10
62247: MUL
62248: ST_TO_ADDR
// r := rate / 10 ;
62249: LD_ADDR_VAR 0 7
62253: PUSH
62254: LD_VAR 0 2
62258: PUSH
62259: LD_INT 10
62261: DIVREAL
62262: ST_TO_ADDR
// time := 1 1$00 ;
62263: LD_ADDR_VAR 0 8
62267: PUSH
62268: LD_INT 2100
62270: ST_TO_ADDR
// if amount < min then
62271: LD_VAR 0 9
62275: PUSH
62276: LD_VAR 0 3
62280: LESS
62281: IFFALSE 62299
// r := r * 2 else
62283: LD_ADDR_VAR 0 7
62287: PUSH
62288: LD_VAR 0 7
62292: PUSH
62293: LD_INT 2
62295: MUL
62296: ST_TO_ADDR
62297: GO 62325
// if amount > max then
62299: LD_VAR 0 9
62303: PUSH
62304: LD_VAR 0 4
62308: GREATER
62309: IFFALSE 62325
// r := r / 2 ;
62311: LD_ADDR_VAR 0 7
62315: PUSH
62316: LD_VAR 0 7
62320: PUSH
62321: LD_INT 2
62323: DIVREAL
62324: ST_TO_ADDR
// time := time / r ;
62325: LD_ADDR_VAR 0 8
62329: PUSH
62330: LD_VAR 0 8
62334: PUSH
62335: LD_VAR 0 7
62339: DIVREAL
62340: ST_TO_ADDR
// if time < 0 then
62341: LD_VAR 0 8
62345: PUSH
62346: LD_INT 0
62348: LESS
62349: IFFALSE 62366
// time := time * - 1 ;
62351: LD_ADDR_VAR 0 8
62355: PUSH
62356: LD_VAR 0 8
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: MUL
62365: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62366: LD_VAR 0 8
62370: PUSH
62371: LD_INT 35
62373: PPUSH
62374: LD_INT 875
62376: PPUSH
62377: CALL_OW 12
62381: PLUS
62382: PPUSH
62383: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62387: LD_INT 1
62389: PPUSH
62390: LD_INT 5
62392: PPUSH
62393: CALL_OW 12
62397: PPUSH
62398: LD_VAR 0 1
62402: PPUSH
62403: LD_INT 1
62405: PPUSH
62406: CALL_OW 55
// end ;
62410: GO 62223
// end ;
62412: LD_VAR 0 5
62416: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62417: LD_INT 0
62419: PPUSH
62420: PPUSH
62421: PPUSH
62422: PPUSH
62423: PPUSH
62424: PPUSH
62425: PPUSH
62426: PPUSH
// if not turrets or not factories then
62427: LD_VAR 0 1
62431: NOT
62432: PUSH
62433: LD_VAR 0 2
62437: NOT
62438: OR
62439: IFFALSE 62443
// exit ;
62441: GO 62750
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62443: LD_ADDR_VAR 0 10
62447: PUSH
62448: LD_INT 5
62450: PUSH
62451: LD_INT 6
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 4
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 5
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 24
62485: PUSH
62486: LD_INT 25
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 23
62495: PUSH
62496: LD_INT 27
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 42
62509: PUSH
62510: LD_INT 43
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 44
62519: PUSH
62520: LD_INT 46
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 45
62529: PUSH
62530: LD_INT 47
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: ST_TO_ADDR
// result := [ ] ;
62547: LD_ADDR_VAR 0 3
62551: PUSH
62552: EMPTY
62553: ST_TO_ADDR
// for i in turrets do
62554: LD_ADDR_VAR 0 4
62558: PUSH
62559: LD_VAR 0 1
62563: PUSH
62564: FOR_IN
62565: IFFALSE 62748
// begin nat := GetNation ( i ) ;
62567: LD_ADDR_VAR 0 7
62571: PUSH
62572: LD_VAR 0 4
62576: PPUSH
62577: CALL_OW 248
62581: ST_TO_ADDR
// weapon := 0 ;
62582: LD_ADDR_VAR 0 8
62586: PUSH
62587: LD_INT 0
62589: ST_TO_ADDR
// if not nat then
62590: LD_VAR 0 7
62594: NOT
62595: IFFALSE 62599
// continue ;
62597: GO 62564
// for j in list [ nat ] do
62599: LD_ADDR_VAR 0 5
62603: PUSH
62604: LD_VAR 0 10
62608: PUSH
62609: LD_VAR 0 7
62613: ARRAY
62614: PUSH
62615: FOR_IN
62616: IFFALSE 62657
// if GetBWeapon ( i ) = j [ 1 ] then
62618: LD_VAR 0 4
62622: PPUSH
62623: CALL_OW 269
62627: PUSH
62628: LD_VAR 0 5
62632: PUSH
62633: LD_INT 1
62635: ARRAY
62636: EQUAL
62637: IFFALSE 62655
// begin weapon := j [ 2 ] ;
62639: LD_ADDR_VAR 0 8
62643: PUSH
62644: LD_VAR 0 5
62648: PUSH
62649: LD_INT 2
62651: ARRAY
62652: ST_TO_ADDR
// break ;
62653: GO 62657
// end ;
62655: GO 62615
62657: POP
62658: POP
// if not weapon then
62659: LD_VAR 0 8
62663: NOT
62664: IFFALSE 62668
// continue ;
62666: GO 62564
// for k in factories do
62668: LD_ADDR_VAR 0 6
62672: PUSH
62673: LD_VAR 0 2
62677: PUSH
62678: FOR_IN
62679: IFFALSE 62744
// begin weapons := AvailableWeaponList ( k ) ;
62681: LD_ADDR_VAR 0 9
62685: PUSH
62686: LD_VAR 0 6
62690: PPUSH
62691: CALL_OW 478
62695: ST_TO_ADDR
// if not weapons then
62696: LD_VAR 0 9
62700: NOT
62701: IFFALSE 62705
// continue ;
62703: GO 62678
// if weapon in weapons then
62705: LD_VAR 0 8
62709: PUSH
62710: LD_VAR 0 9
62714: IN
62715: IFFALSE 62742
// begin result := [ i , weapon ] ;
62717: LD_ADDR_VAR 0 3
62721: PUSH
62722: LD_VAR 0 4
62726: PUSH
62727: LD_VAR 0 8
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: ST_TO_ADDR
// exit ;
62736: POP
62737: POP
62738: POP
62739: POP
62740: GO 62750
// end ; end ;
62742: GO 62678
62744: POP
62745: POP
// end ;
62746: GO 62564
62748: POP
62749: POP
// end ;
62750: LD_VAR 0 3
62754: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62755: LD_INT 0
62757: PPUSH
// if not side or side > 8 then
62758: LD_VAR 0 3
62762: NOT
62763: PUSH
62764: LD_VAR 0 3
62768: PUSH
62769: LD_INT 8
62771: GREATER
62772: OR
62773: IFFALSE 62777
// exit ;
62775: GO 62836
// if not range then
62777: LD_VAR 0 4
62781: NOT
62782: IFFALSE 62793
// range := - 12 ;
62784: LD_ADDR_VAR 0 4
62788: PUSH
62789: LD_INT 12
62791: NEG
62792: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62793: LD_VAR 0 1
62797: PPUSH
62798: LD_VAR 0 2
62802: PPUSH
62803: LD_VAR 0 3
62807: PPUSH
62808: LD_VAR 0 4
62812: PPUSH
62813: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62817: LD_VAR 0 1
62821: PPUSH
62822: LD_VAR 0 2
62826: PPUSH
62827: LD_VAR 0 3
62831: PPUSH
62832: CALL_OW 331
// end ;
62836: LD_VAR 0 5
62840: RET
// export function Video ( mode ) ; begin
62841: LD_INT 0
62843: PPUSH
// ingame_video = mode ;
62844: LD_ADDR_OWVAR 52
62848: PUSH
62849: LD_VAR 0 1
62853: ST_TO_ADDR
// interface_hidden = mode ;
62854: LD_ADDR_OWVAR 54
62858: PUSH
62859: LD_VAR 0 1
62863: ST_TO_ADDR
// end ;
62864: LD_VAR 0 2
62868: RET
// export function Join ( array , element ) ; begin
62869: LD_INT 0
62871: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 1
62889: PLUS
62890: PPUSH
62891: LD_VAR 0 2
62895: PPUSH
62896: CALL_OW 1
62900: ST_TO_ADDR
// end ;
62901: LD_VAR 0 3
62905: RET
// export function JoinUnion ( array , element ) ; begin
62906: LD_INT 0
62908: PPUSH
// result := array union element ;
62909: LD_ADDR_VAR 0 3
62913: PUSH
62914: LD_VAR 0 1
62918: PUSH
62919: LD_VAR 0 2
62923: UNION
62924: ST_TO_ADDR
// end ;
62925: LD_VAR 0 3
62929: RET
// export function GetBehemoths ( side ) ; begin
62930: LD_INT 0
62932: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62933: LD_ADDR_VAR 0 2
62937: PUSH
62938: LD_INT 22
62940: PUSH
62941: LD_VAR 0 1
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 31
62952: PUSH
62953: LD_INT 25
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PPUSH
62964: CALL_OW 69
62968: ST_TO_ADDR
// end ;
62969: LD_VAR 0 2
62973: RET
// export function Shuffle ( array ) ; var i , index ; begin
62974: LD_INT 0
62976: PPUSH
62977: PPUSH
62978: PPUSH
// result := [ ] ;
62979: LD_ADDR_VAR 0 2
62983: PUSH
62984: EMPTY
62985: ST_TO_ADDR
// if not array then
62986: LD_VAR 0 1
62990: NOT
62991: IFFALSE 62995
// exit ;
62993: GO 63094
// Randomize ;
62995: CALL_OW 10
// for i = array downto 1 do
62999: LD_ADDR_VAR 0 3
63003: PUSH
63004: DOUBLE
63005: LD_VAR 0 1
63009: INC
63010: ST_TO_ADDR
63011: LD_INT 1
63013: PUSH
63014: FOR_DOWNTO
63015: IFFALSE 63092
// begin index := rand ( 1 , array ) ;
63017: LD_ADDR_VAR 0 4
63021: PUSH
63022: LD_INT 1
63024: PPUSH
63025: LD_VAR 0 1
63029: PPUSH
63030: CALL_OW 12
63034: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63035: LD_ADDR_VAR 0 2
63039: PUSH
63040: LD_VAR 0 2
63044: PPUSH
63045: LD_VAR 0 2
63049: PUSH
63050: LD_INT 1
63052: PLUS
63053: PPUSH
63054: LD_VAR 0 1
63058: PUSH
63059: LD_VAR 0 4
63063: ARRAY
63064: PPUSH
63065: CALL_OW 2
63069: ST_TO_ADDR
// array := Delete ( array , index ) ;
63070: LD_ADDR_VAR 0 1
63074: PUSH
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_VAR 0 4
63084: PPUSH
63085: CALL_OW 3
63089: ST_TO_ADDR
// end ;
63090: GO 63014
63092: POP
63093: POP
// end ;
63094: LD_VAR 0 2
63098: RET
// export function GetBaseMaterials ( base ) ; begin
63099: LD_INT 0
63101: PPUSH
// result := [ 0 , 0 , 0 ] ;
63102: LD_ADDR_VAR 0 2
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: LIST
63120: ST_TO_ADDR
// if not base then
63121: LD_VAR 0 1
63125: NOT
63126: IFFALSE 63130
// exit ;
63128: GO 63179
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63130: LD_ADDR_VAR 0 2
63134: PUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: LD_INT 1
63142: PPUSH
63143: CALL_OW 275
63147: PUSH
63148: LD_VAR 0 1
63152: PPUSH
63153: LD_INT 2
63155: PPUSH
63156: CALL_OW 275
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: LD_INT 3
63168: PPUSH
63169: CALL_OW 275
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// end ;
63179: LD_VAR 0 2
63183: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63184: LD_INT 0
63186: PPUSH
63187: PPUSH
// result := array ;
63188: LD_ADDR_VAR 0 3
63192: PUSH
63193: LD_VAR 0 1
63197: ST_TO_ADDR
// if size >= result then
63198: LD_VAR 0 2
63202: PUSH
63203: LD_VAR 0 3
63207: GREATEREQUAL
63208: IFFALSE 63212
// exit ;
63210: GO 63262
// if size then
63212: LD_VAR 0 2
63216: IFFALSE 63262
// for i := array downto size do
63218: LD_ADDR_VAR 0 4
63222: PUSH
63223: DOUBLE
63224: LD_VAR 0 1
63228: INC
63229: ST_TO_ADDR
63230: LD_VAR 0 2
63234: PUSH
63235: FOR_DOWNTO
63236: IFFALSE 63260
// result := Delete ( result , result ) ;
63238: LD_ADDR_VAR 0 3
63242: PUSH
63243: LD_VAR 0 3
63247: PPUSH
63248: LD_VAR 0 3
63252: PPUSH
63253: CALL_OW 3
63257: ST_TO_ADDR
63258: GO 63235
63260: POP
63261: POP
// end ;
63262: LD_VAR 0 3
63266: RET
// export function ComExit ( unit ) ; var tmp ; begin
63267: LD_INT 0
63269: PPUSH
63270: PPUSH
// if not IsInUnit ( unit ) then
63271: LD_VAR 0 1
63275: PPUSH
63276: CALL_OW 310
63280: NOT
63281: IFFALSE 63285
// exit ;
63283: GO 63345
// tmp := IsInUnit ( unit ) ;
63285: LD_ADDR_VAR 0 3
63289: PUSH
63290: LD_VAR 0 1
63294: PPUSH
63295: CALL_OW 310
63299: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63300: LD_VAR 0 3
63304: PPUSH
63305: CALL_OW 247
63309: PUSH
63310: LD_INT 2
63312: EQUAL
63313: IFFALSE 63326
// ComExitVehicle ( unit ) else
63315: LD_VAR 0 1
63319: PPUSH
63320: CALL_OW 121
63324: GO 63335
// ComExitBuilding ( unit ) ;
63326: LD_VAR 0 1
63330: PPUSH
63331: CALL_OW 122
// result := tmp ;
63335: LD_ADDR_VAR 0 2
63339: PUSH
63340: LD_VAR 0 3
63344: ST_TO_ADDR
// end ;
63345: LD_VAR 0 2
63349: RET
// export function ComExitAll ( units ) ; var i ; begin
63350: LD_INT 0
63352: PPUSH
63353: PPUSH
// if not units then
63354: LD_VAR 0 1
63358: NOT
63359: IFFALSE 63363
// exit ;
63361: GO 63389
// for i in units do
63363: LD_ADDR_VAR 0 3
63367: PUSH
63368: LD_VAR 0 1
63372: PUSH
63373: FOR_IN
63374: IFFALSE 63387
// ComExit ( i ) ;
63376: LD_VAR 0 3
63380: PPUSH
63381: CALL 63267 0 1
63385: GO 63373
63387: POP
63388: POP
// end ;
63389: LD_VAR 0 2
63393: RET
// export function ResetHc ; begin
63394: LD_INT 0
63396: PPUSH
// InitHc ;
63397: CALL_OW 19
// hc_importance := 0 ;
63401: LD_ADDR_OWVAR 32
63405: PUSH
63406: LD_INT 0
63408: ST_TO_ADDR
// end ;
63409: LD_VAR 0 1
63413: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63414: LD_INT 0
63416: PPUSH
63417: PPUSH
63418: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63419: LD_ADDR_VAR 0 6
63423: PUSH
63424: LD_VAR 0 1
63428: PUSH
63429: LD_VAR 0 3
63433: PLUS
63434: PUSH
63435: LD_INT 2
63437: DIV
63438: ST_TO_ADDR
// if _x < 0 then
63439: LD_VAR 0 6
63443: PUSH
63444: LD_INT 0
63446: LESS
63447: IFFALSE 63464
// _x := _x * - 1 ;
63449: LD_ADDR_VAR 0 6
63453: PUSH
63454: LD_VAR 0 6
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: MUL
63463: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63464: LD_ADDR_VAR 0 7
63468: PUSH
63469: LD_VAR 0 2
63473: PUSH
63474: LD_VAR 0 4
63478: PLUS
63479: PUSH
63480: LD_INT 2
63482: DIV
63483: ST_TO_ADDR
// if _y < 0 then
63484: LD_VAR 0 7
63488: PUSH
63489: LD_INT 0
63491: LESS
63492: IFFALSE 63509
// _y := _y * - 1 ;
63494: LD_ADDR_VAR 0 7
63498: PUSH
63499: LD_VAR 0 7
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: MUL
63508: ST_TO_ADDR
// result := [ _x , _y ] ;
63509: LD_ADDR_VAR 0 5
63513: PUSH
63514: LD_VAR 0 6
63518: PUSH
63519: LD_VAR 0 7
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// end ;
63528: LD_VAR 0 5
63532: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63533: LD_INT 0
63535: PPUSH
63536: PPUSH
63537: PPUSH
63538: PPUSH
// task := GetTaskList ( unit ) ;
63539: LD_ADDR_VAR 0 7
63543: PUSH
63544: LD_VAR 0 1
63548: PPUSH
63549: CALL_OW 437
63553: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63554: LD_VAR 0 7
63558: NOT
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: LD_VAR 0 2
63569: PPUSH
63570: CALL_OW 308
63574: NOT
63575: AND
63576: IFFALSE 63580
// exit ;
63578: GO 63698
// if IsInArea ( unit , area ) then
63580: LD_VAR 0 1
63584: PPUSH
63585: LD_VAR 0 2
63589: PPUSH
63590: CALL_OW 308
63594: IFFALSE 63612
// begin ComMoveToArea ( unit , goAway ) ;
63596: LD_VAR 0 1
63600: PPUSH
63601: LD_VAR 0 3
63605: PPUSH
63606: CALL_OW 113
// exit ;
63610: GO 63698
// end ; if task [ 1 ] [ 1 ] <> M then
63612: LD_VAR 0 7
63616: PUSH
63617: LD_INT 1
63619: ARRAY
63620: PUSH
63621: LD_INT 1
63623: ARRAY
63624: PUSH
63625: LD_STRING M
63627: NONEQUAL
63628: IFFALSE 63632
// exit ;
63630: GO 63698
// x := task [ 1 ] [ 2 ] ;
63632: LD_ADDR_VAR 0 5
63636: PUSH
63637: LD_VAR 0 7
63641: PUSH
63642: LD_INT 1
63644: ARRAY
63645: PUSH
63646: LD_INT 2
63648: ARRAY
63649: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63650: LD_ADDR_VAR 0 6
63654: PUSH
63655: LD_VAR 0 7
63659: PUSH
63660: LD_INT 1
63662: ARRAY
63663: PUSH
63664: LD_INT 3
63666: ARRAY
63667: ST_TO_ADDR
// if InArea ( x , y , area ) then
63668: LD_VAR 0 5
63672: PPUSH
63673: LD_VAR 0 6
63677: PPUSH
63678: LD_VAR 0 2
63682: PPUSH
63683: CALL_OW 309
63687: IFFALSE 63698
// ComStop ( unit ) ;
63689: LD_VAR 0 1
63693: PPUSH
63694: CALL_OW 141
// end ;
63698: LD_VAR 0 4
63702: RET
// export function Abs ( value ) ; begin
63703: LD_INT 0
63705: PPUSH
// result := value ;
63706: LD_ADDR_VAR 0 2
63710: PUSH
63711: LD_VAR 0 1
63715: ST_TO_ADDR
// if value < 0 then
63716: LD_VAR 0 1
63720: PUSH
63721: LD_INT 0
63723: LESS
63724: IFFALSE 63741
// result := value * - 1 ;
63726: LD_ADDR_VAR 0 2
63730: PUSH
63731: LD_VAR 0 1
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: MUL
63740: ST_TO_ADDR
// end ;
63741: LD_VAR 0 2
63745: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63746: LD_INT 0
63748: PPUSH
63749: PPUSH
63750: PPUSH
63751: PPUSH
63752: PPUSH
63753: PPUSH
63754: PPUSH
63755: PPUSH
// if not unit or not building then
63756: LD_VAR 0 1
63760: NOT
63761: PUSH
63762: LD_VAR 0 2
63766: NOT
63767: OR
63768: IFFALSE 63772
// exit ;
63770: GO 63998
// x := GetX ( building ) ;
63772: LD_ADDR_VAR 0 4
63776: PUSH
63777: LD_VAR 0 2
63781: PPUSH
63782: CALL_OW 250
63786: ST_TO_ADDR
// y := GetY ( building ) ;
63787: LD_ADDR_VAR 0 6
63791: PUSH
63792: LD_VAR 0 2
63796: PPUSH
63797: CALL_OW 251
63801: ST_TO_ADDR
// d := GetDir ( building ) ;
63802: LD_ADDR_VAR 0 8
63806: PUSH
63807: LD_VAR 0 2
63811: PPUSH
63812: CALL_OW 254
63816: ST_TO_ADDR
// r := 4 ;
63817: LD_ADDR_VAR 0 9
63821: PUSH
63822: LD_INT 4
63824: ST_TO_ADDR
// for i := 1 to 5 do
63825: LD_ADDR_VAR 0 10
63829: PUSH
63830: DOUBLE
63831: LD_INT 1
63833: DEC
63834: ST_TO_ADDR
63835: LD_INT 5
63837: PUSH
63838: FOR_TO
63839: IFFALSE 63996
// begin _x := ShiftX ( x , d , r + i ) ;
63841: LD_ADDR_VAR 0 5
63845: PUSH
63846: LD_VAR 0 4
63850: PPUSH
63851: LD_VAR 0 8
63855: PPUSH
63856: LD_VAR 0 9
63860: PUSH
63861: LD_VAR 0 10
63865: PLUS
63866: PPUSH
63867: CALL_OW 272
63871: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63872: LD_ADDR_VAR 0 7
63876: PUSH
63877: LD_VAR 0 6
63881: PPUSH
63882: LD_VAR 0 8
63886: PPUSH
63887: LD_VAR 0 9
63891: PUSH
63892: LD_VAR 0 10
63896: PLUS
63897: PPUSH
63898: CALL_OW 273
63902: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63903: LD_VAR 0 5
63907: PPUSH
63908: LD_VAR 0 7
63912: PPUSH
63913: CALL_OW 488
63917: PUSH
63918: LD_VAR 0 5
63922: PPUSH
63923: LD_VAR 0 7
63927: PPUSH
63928: CALL_OW 428
63932: PPUSH
63933: CALL_OW 247
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: LD_INT 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: IN
63948: NOT
63949: AND
63950: IFFALSE 63994
// begin ComMoveXY ( unit , _x , _y ) ;
63952: LD_VAR 0 1
63956: PPUSH
63957: LD_VAR 0 5
63961: PPUSH
63962: LD_VAR 0 7
63966: PPUSH
63967: CALL_OW 111
// result := [ _x , _y ] ;
63971: LD_ADDR_VAR 0 3
63975: PUSH
63976: LD_VAR 0 5
63980: PUSH
63981: LD_VAR 0 7
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// exit ;
63990: POP
63991: POP
63992: GO 63998
// end ; end ;
63994: GO 63838
63996: POP
63997: POP
// end ;
63998: LD_VAR 0 3
64002: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64003: LD_INT 0
64005: PPUSH
64006: PPUSH
64007: PPUSH
// result := 0 ;
64008: LD_ADDR_VAR 0 3
64012: PUSH
64013: LD_INT 0
64015: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64016: LD_VAR 0 1
64020: PUSH
64021: LD_INT 0
64023: LESS
64024: PUSH
64025: LD_VAR 0 1
64029: PUSH
64030: LD_INT 8
64032: GREATER
64033: OR
64034: PUSH
64035: LD_VAR 0 2
64039: PUSH
64040: LD_INT 0
64042: LESS
64043: OR
64044: PUSH
64045: LD_VAR 0 2
64049: PUSH
64050: LD_INT 8
64052: GREATER
64053: OR
64054: IFFALSE 64058
// exit ;
64056: GO 64133
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64058: LD_ADDR_VAR 0 4
64062: PUSH
64063: LD_INT 22
64065: PUSH
64066: LD_VAR 0 2
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PPUSH
64075: CALL_OW 69
64079: PUSH
64080: FOR_IN
64081: IFFALSE 64131
// begin un := UnitShoot ( i ) ;
64083: LD_ADDR_VAR 0 5
64087: PUSH
64088: LD_VAR 0 4
64092: PPUSH
64093: CALL_OW 504
64097: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64098: LD_VAR 0 5
64102: PPUSH
64103: CALL_OW 255
64107: PUSH
64108: LD_VAR 0 1
64112: EQUAL
64113: IFFALSE 64129
// begin result := un ;
64115: LD_ADDR_VAR 0 3
64119: PUSH
64120: LD_VAR 0 5
64124: ST_TO_ADDR
// exit ;
64125: POP
64126: POP
64127: GO 64133
// end ; end ;
64129: GO 64080
64131: POP
64132: POP
// end ;
64133: LD_VAR 0 3
64137: RET
// export function GetCargoBay ( units ) ; begin
64138: LD_INT 0
64140: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64141: LD_ADDR_VAR 0 2
64145: PUSH
64146: LD_VAR 0 1
64150: PPUSH
64151: LD_INT 2
64153: PUSH
64154: LD_INT 34
64156: PUSH
64157: LD_INT 12
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 34
64166: PUSH
64167: LD_INT 51
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 34
64176: PUSH
64177: LD_INT 32
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 34
64186: PUSH
64187: LD_INT 89
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: PPUSH
64201: CALL_OW 72
64205: ST_TO_ADDR
// end ;
64206: LD_VAR 0 2
64210: RET
// export function Negate ( value ) ; begin
64211: LD_INT 0
64213: PPUSH
// result := not value ;
64214: LD_ADDR_VAR 0 2
64218: PUSH
64219: LD_VAR 0 1
64223: NOT
64224: ST_TO_ADDR
// end ;
64225: LD_VAR 0 2
64229: RET
// export function Inc ( value ) ; begin
64230: LD_INT 0
64232: PPUSH
// result := value + 1 ;
64233: LD_ADDR_VAR 0 2
64237: PUSH
64238: LD_VAR 0 1
64242: PUSH
64243: LD_INT 1
64245: PLUS
64246: ST_TO_ADDR
// end ;
64247: LD_VAR 0 2
64251: RET
// export function Dec ( value ) ; begin
64252: LD_INT 0
64254: PPUSH
// result := value - 1 ;
64255: LD_ADDR_VAR 0 2
64259: PUSH
64260: LD_VAR 0 1
64264: PUSH
64265: LD_INT 1
64267: MINUS
64268: ST_TO_ADDR
// end ;
64269: LD_VAR 0 2
64273: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64274: LD_INT 0
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
64280: PPUSH
64281: PPUSH
64282: PPUSH
64283: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64284: LD_VAR 0 1
64288: PPUSH
64289: LD_VAR 0 2
64293: PPUSH
64294: CALL_OW 488
64298: NOT
64299: PUSH
64300: LD_VAR 0 3
64304: PPUSH
64305: LD_VAR 0 4
64309: PPUSH
64310: CALL_OW 488
64314: NOT
64315: OR
64316: IFFALSE 64329
// begin result := - 1 ;
64318: LD_ADDR_VAR 0 5
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: ST_TO_ADDR
// exit ;
64327: GO 64564
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64329: LD_ADDR_VAR 0 12
64333: PUSH
64334: LD_VAR 0 1
64338: PPUSH
64339: LD_VAR 0 2
64343: PPUSH
64344: LD_VAR 0 3
64348: PPUSH
64349: LD_VAR 0 4
64353: PPUSH
64354: CALL 63414 0 4
64358: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64359: LD_ADDR_VAR 0 11
64363: PUSH
64364: LD_VAR 0 1
64368: PPUSH
64369: LD_VAR 0 2
64373: PPUSH
64374: LD_VAR 0 12
64378: PUSH
64379: LD_INT 1
64381: ARRAY
64382: PPUSH
64383: LD_VAR 0 12
64387: PUSH
64388: LD_INT 2
64390: ARRAY
64391: PPUSH
64392: CALL_OW 298
64396: ST_TO_ADDR
// distance := 9999 ;
64397: LD_ADDR_VAR 0 10
64401: PUSH
64402: LD_INT 9999
64404: ST_TO_ADDR
// for i := 0 to 5 do
64405: LD_ADDR_VAR 0 6
64409: PUSH
64410: DOUBLE
64411: LD_INT 0
64413: DEC
64414: ST_TO_ADDR
64415: LD_INT 5
64417: PUSH
64418: FOR_TO
64419: IFFALSE 64562
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64421: LD_ADDR_VAR 0 7
64425: PUSH
64426: LD_VAR 0 1
64430: PPUSH
64431: LD_VAR 0 6
64435: PPUSH
64436: LD_VAR 0 11
64440: PPUSH
64441: CALL_OW 272
64445: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64446: LD_ADDR_VAR 0 8
64450: PUSH
64451: LD_VAR 0 2
64455: PPUSH
64456: LD_VAR 0 6
64460: PPUSH
64461: LD_VAR 0 11
64465: PPUSH
64466: CALL_OW 273
64470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64471: LD_VAR 0 7
64475: PPUSH
64476: LD_VAR 0 8
64480: PPUSH
64481: CALL_OW 488
64485: NOT
64486: IFFALSE 64490
// continue ;
64488: GO 64418
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64490: LD_ADDR_VAR 0 9
64494: PUSH
64495: LD_VAR 0 12
64499: PUSH
64500: LD_INT 1
64502: ARRAY
64503: PPUSH
64504: LD_VAR 0 12
64508: PUSH
64509: LD_INT 2
64511: ARRAY
64512: PPUSH
64513: LD_VAR 0 7
64517: PPUSH
64518: LD_VAR 0 8
64522: PPUSH
64523: CALL_OW 298
64527: ST_TO_ADDR
// if tmp < distance then
64528: LD_VAR 0 9
64532: PUSH
64533: LD_VAR 0 10
64537: LESS
64538: IFFALSE 64560
// begin result := i ;
64540: LD_ADDR_VAR 0 5
64544: PUSH
64545: LD_VAR 0 6
64549: ST_TO_ADDR
// distance := tmp ;
64550: LD_ADDR_VAR 0 10
64554: PUSH
64555: LD_VAR 0 9
64559: ST_TO_ADDR
// end ; end ;
64560: GO 64418
64562: POP
64563: POP
// end ;
64564: LD_VAR 0 5
64568: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64569: LD_INT 0
64571: PPUSH
64572: PPUSH
// if not driver or not IsInUnit ( driver ) then
64573: LD_VAR 0 1
64577: NOT
64578: PUSH
64579: LD_VAR 0 1
64583: PPUSH
64584: CALL_OW 310
64588: NOT
64589: OR
64590: IFFALSE 64594
// exit ;
64592: GO 64684
// vehicle := IsInUnit ( driver ) ;
64594: LD_ADDR_VAR 0 3
64598: PUSH
64599: LD_VAR 0 1
64603: PPUSH
64604: CALL_OW 310
64608: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64609: LD_VAR 0 1
64613: PPUSH
64614: LD_STRING \
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: PUSH
64644: LD_STRING E
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_VAR 0 3
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PPUSH
64680: CALL_OW 446
// end ;
64684: LD_VAR 0 2
64688: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64689: LD_INT 0
64691: PPUSH
64692: PPUSH
// if not driver or not IsInUnit ( driver ) then
64693: LD_VAR 0 1
64697: NOT
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 310
64708: NOT
64709: OR
64710: IFFALSE 64714
// exit ;
64712: GO 64804
// vehicle := IsInUnit ( driver ) ;
64714: LD_ADDR_VAR 0 3
64718: PUSH
64719: LD_VAR 0 1
64723: PPUSH
64724: CALL_OW 310
64728: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64729: LD_VAR 0 1
64733: PPUSH
64734: LD_STRING \
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: PUSH
64764: LD_STRING E
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_VAR 0 3
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PPUSH
64800: CALL_OW 447
// end ;
64804: LD_VAR 0 2
64808: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64809: LD_INT 0
64811: PPUSH
64812: PPUSH
64813: PPUSH
// tmp := [ ] ;
64814: LD_ADDR_VAR 0 5
64818: PUSH
64819: EMPTY
64820: ST_TO_ADDR
// for i in units do
64821: LD_ADDR_VAR 0 4
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: FOR_IN
64832: IFFALSE 64870
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64834: LD_ADDR_VAR 0 5
64838: PUSH
64839: LD_VAR 0 5
64843: PPUSH
64844: LD_VAR 0 5
64848: PUSH
64849: LD_INT 1
64851: PLUS
64852: PPUSH
64853: LD_VAR 0 4
64857: PPUSH
64858: CALL_OW 256
64862: PPUSH
64863: CALL_OW 2
64867: ST_TO_ADDR
64868: GO 64831
64870: POP
64871: POP
// if not tmp then
64872: LD_VAR 0 5
64876: NOT
64877: IFFALSE 64881
// exit ;
64879: GO 64929
// if asc then
64881: LD_VAR 0 2
64885: IFFALSE 64909
// result := SortListByListAsc ( units , tmp ) else
64887: LD_ADDR_VAR 0 3
64891: PUSH
64892: LD_VAR 0 1
64896: PPUSH
64897: LD_VAR 0 5
64901: PPUSH
64902: CALL_OW 76
64906: ST_TO_ADDR
64907: GO 64929
// result := SortListByListDesc ( units , tmp ) ;
64909: LD_ADDR_VAR 0 3
64913: PUSH
64914: LD_VAR 0 1
64918: PPUSH
64919: LD_VAR 0 5
64923: PPUSH
64924: CALL_OW 77
64928: ST_TO_ADDR
// end ;
64929: LD_VAR 0 3
64933: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64934: LD_INT 0
64936: PPUSH
64937: PPUSH
// task := GetTaskList ( mech ) ;
64938: LD_ADDR_VAR 0 4
64942: PUSH
64943: LD_VAR 0 1
64947: PPUSH
64948: CALL_OW 437
64952: ST_TO_ADDR
// if not task then
64953: LD_VAR 0 4
64957: NOT
64958: IFFALSE 64962
// exit ;
64960: GO 65004
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64962: LD_ADDR_VAR 0 3
64966: PUSH
64967: LD_VAR 0 4
64971: PUSH
64972: LD_INT 1
64974: ARRAY
64975: PUSH
64976: LD_INT 1
64978: ARRAY
64979: PUSH
64980: LD_STRING r
64982: EQUAL
64983: PUSH
64984: LD_VAR 0 4
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PUSH
64993: LD_INT 4
64995: ARRAY
64996: PUSH
64997: LD_VAR 0 2
65001: EQUAL
65002: AND
65003: ST_TO_ADDR
// end ;
65004: LD_VAR 0 3
65008: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65009: LD_INT 0
65011: PPUSH
// SetDir ( unit , d ) ;
65012: LD_VAR 0 1
65016: PPUSH
65017: LD_VAR 0 4
65021: PPUSH
65022: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65026: LD_VAR 0 1
65030: PPUSH
65031: LD_VAR 0 2
65035: PPUSH
65036: LD_VAR 0 3
65040: PPUSH
65041: LD_VAR 0 5
65045: PPUSH
65046: CALL_OW 48
// end ;
65050: LD_VAR 0 6
65054: RET
// export function ToNaturalNumber ( number ) ; begin
65055: LD_INT 0
65057: PPUSH
// result := number div 1 ;
65058: LD_ADDR_VAR 0 2
65062: PUSH
65063: LD_VAR 0 1
65067: PUSH
65068: LD_INT 1
65070: DIV
65071: ST_TO_ADDR
// if number < 0 then
65072: LD_VAR 0 1
65076: PUSH
65077: LD_INT 0
65079: LESS
65080: IFFALSE 65090
// result := 0 ;
65082: LD_ADDR_VAR 0 2
65086: PUSH
65087: LD_INT 0
65089: ST_TO_ADDR
// end ;
65090: LD_VAR 0 2
65094: RET
// export function SortByClass ( units , class ) ; var un ; begin
65095: LD_INT 0
65097: PPUSH
65098: PPUSH
// if not units or not class then
65099: LD_VAR 0 1
65103: NOT
65104: PUSH
65105: LD_VAR 0 2
65109: NOT
65110: OR
65111: IFFALSE 65115
// exit ;
65113: GO 65210
// result := [ ] ;
65115: LD_ADDR_VAR 0 3
65119: PUSH
65120: EMPTY
65121: ST_TO_ADDR
// for un in units do
65122: LD_ADDR_VAR 0 4
65126: PUSH
65127: LD_VAR 0 1
65131: PUSH
65132: FOR_IN
65133: IFFALSE 65208
// if GetClass ( un ) = class then
65135: LD_VAR 0 4
65139: PPUSH
65140: CALL_OW 257
65144: PUSH
65145: LD_VAR 0 2
65149: EQUAL
65150: IFFALSE 65177
// result := Insert ( result , 1 , un ) else
65152: LD_ADDR_VAR 0 3
65156: PUSH
65157: LD_VAR 0 3
65161: PPUSH
65162: LD_INT 1
65164: PPUSH
65165: LD_VAR 0 4
65169: PPUSH
65170: CALL_OW 2
65174: ST_TO_ADDR
65175: GO 65206
// result := Replace ( result , result + 1 , un ) ;
65177: LD_ADDR_VAR 0 3
65181: PUSH
65182: LD_VAR 0 3
65186: PPUSH
65187: LD_VAR 0 3
65191: PUSH
65192: LD_INT 1
65194: PLUS
65195: PPUSH
65196: LD_VAR 0 4
65200: PPUSH
65201: CALL_OW 1
65205: ST_TO_ADDR
65206: GO 65132
65208: POP
65209: POP
// end ;
65210: LD_VAR 0 3
65214: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65215: LD_INT 0
65217: PPUSH
65218: PPUSH
65219: PPUSH
65220: PPUSH
65221: PPUSH
65222: PPUSH
65223: PPUSH
// result := [ ] ;
65224: LD_ADDR_VAR 0 4
65228: PUSH
65229: EMPTY
65230: ST_TO_ADDR
// if x - r < 0 then
65231: LD_VAR 0 1
65235: PUSH
65236: LD_VAR 0 3
65240: MINUS
65241: PUSH
65242: LD_INT 0
65244: LESS
65245: IFFALSE 65257
// min_x := 0 else
65247: LD_ADDR_VAR 0 8
65251: PUSH
65252: LD_INT 0
65254: ST_TO_ADDR
65255: GO 65273
// min_x := x - r ;
65257: LD_ADDR_VAR 0 8
65261: PUSH
65262: LD_VAR 0 1
65266: PUSH
65267: LD_VAR 0 3
65271: MINUS
65272: ST_TO_ADDR
// if y - r < 0 then
65273: LD_VAR 0 2
65277: PUSH
65278: LD_VAR 0 3
65282: MINUS
65283: PUSH
65284: LD_INT 0
65286: LESS
65287: IFFALSE 65299
// min_y := 0 else
65289: LD_ADDR_VAR 0 7
65293: PUSH
65294: LD_INT 0
65296: ST_TO_ADDR
65297: GO 65315
// min_y := y - r ;
65299: LD_ADDR_VAR 0 7
65303: PUSH
65304: LD_VAR 0 2
65308: PUSH
65309: LD_VAR 0 3
65313: MINUS
65314: ST_TO_ADDR
// max_x := x + r ;
65315: LD_ADDR_VAR 0 9
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_VAR 0 3
65329: PLUS
65330: ST_TO_ADDR
// max_y := y + r ;
65331: LD_ADDR_VAR 0 10
65335: PUSH
65336: LD_VAR 0 2
65340: PUSH
65341: LD_VAR 0 3
65345: PLUS
65346: ST_TO_ADDR
// for _x = min_x to max_x do
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: DOUBLE
65353: LD_VAR 0 8
65357: DEC
65358: ST_TO_ADDR
65359: LD_VAR 0 9
65363: PUSH
65364: FOR_TO
65365: IFFALSE 65466
// for _y = min_y to max_y do
65367: LD_ADDR_VAR 0 6
65371: PUSH
65372: DOUBLE
65373: LD_VAR 0 7
65377: DEC
65378: ST_TO_ADDR
65379: LD_VAR 0 10
65383: PUSH
65384: FOR_TO
65385: IFFALSE 65462
// begin if not ValidHex ( _x , _y ) then
65387: LD_VAR 0 5
65391: PPUSH
65392: LD_VAR 0 6
65396: PPUSH
65397: CALL_OW 488
65401: NOT
65402: IFFALSE 65406
// continue ;
65404: GO 65384
// if GetResourceTypeXY ( _x , _y ) then
65406: LD_VAR 0 5
65410: PPUSH
65411: LD_VAR 0 6
65415: PPUSH
65416: CALL_OW 283
65420: IFFALSE 65460
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65422: LD_ADDR_VAR 0 4
65426: PUSH
65427: LD_VAR 0 4
65431: PPUSH
65432: LD_VAR 0 4
65436: PUSH
65437: LD_INT 1
65439: PLUS
65440: PPUSH
65441: LD_VAR 0 5
65445: PUSH
65446: LD_VAR 0 6
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PPUSH
65455: CALL_OW 1
65459: ST_TO_ADDR
// end ;
65460: GO 65384
65462: POP
65463: POP
65464: GO 65364
65466: POP
65467: POP
// end ;
65468: LD_VAR 0 4
65472: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65473: LD_INT 0
65475: PPUSH
65476: PPUSH
65477: PPUSH
65478: PPUSH
65479: PPUSH
65480: PPUSH
65481: PPUSH
65482: PPUSH
// if not units then
65483: LD_VAR 0 1
65487: NOT
65488: IFFALSE 65492
// exit ;
65490: GO 66016
// result := UnitFilter ( units , [ f_ok ] ) ;
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: LD_VAR 0 1
65501: PPUSH
65502: LD_INT 50
65504: PUSH
65505: EMPTY
65506: LIST
65507: PPUSH
65508: CALL_OW 72
65512: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65513: LD_ADDR_VAR 0 8
65517: PUSH
65518: LD_VAR 0 1
65522: PUSH
65523: LD_INT 1
65525: ARRAY
65526: PPUSH
65527: CALL_OW 255
65531: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65532: LD_ADDR_VAR 0 10
65536: PUSH
65537: LD_INT 29
65539: PUSH
65540: LD_INT 91
65542: PUSH
65543: LD_INT 49
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: ST_TO_ADDR
// if not result then
65551: LD_VAR 0 3
65555: NOT
65556: IFFALSE 65560
// exit ;
65558: GO 66016
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65560: LD_ADDR_VAR 0 5
65564: PUSH
65565: LD_INT 81
65567: PUSH
65568: LD_VAR 0 8
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PPUSH
65577: CALL_OW 69
65581: ST_TO_ADDR
// for i in result do
65582: LD_ADDR_VAR 0 4
65586: PUSH
65587: LD_VAR 0 3
65591: PUSH
65592: FOR_IN
65593: IFFALSE 66014
// begin tag := GetTag ( i ) + 1 ;
65595: LD_ADDR_VAR 0 9
65599: PUSH
65600: LD_VAR 0 4
65604: PPUSH
65605: CALL_OW 110
65609: PUSH
65610: LD_INT 1
65612: PLUS
65613: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65614: LD_ADDR_VAR 0 7
65618: PUSH
65619: LD_VAR 0 4
65623: PPUSH
65624: CALL_OW 250
65628: PPUSH
65629: LD_VAR 0 4
65633: PPUSH
65634: CALL_OW 251
65638: PPUSH
65639: LD_INT 6
65641: PPUSH
65642: CALL 65215 0 3
65646: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65647: LD_VAR 0 4
65651: PPUSH
65652: CALL_OW 247
65656: PUSH
65657: LD_INT 2
65659: EQUAL
65660: PUSH
65661: LD_VAR 0 7
65665: AND
65666: PUSH
65667: LD_VAR 0 4
65671: PPUSH
65672: CALL_OW 264
65676: PUSH
65677: LD_VAR 0 10
65681: IN
65682: NOT
65683: AND
65684: IFFALSE 65723
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65686: LD_VAR 0 4
65690: PPUSH
65691: LD_VAR 0 7
65695: PUSH
65696: LD_INT 1
65698: ARRAY
65699: PUSH
65700: LD_INT 1
65702: ARRAY
65703: PPUSH
65704: LD_VAR 0 7
65708: PUSH
65709: LD_INT 1
65711: ARRAY
65712: PUSH
65713: LD_INT 2
65715: ARRAY
65716: PPUSH
65717: CALL_OW 116
65721: GO 66012
// if path > tag then
65723: LD_VAR 0 2
65727: PUSH
65728: LD_VAR 0 9
65732: GREATER
65733: IFFALSE 65941
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65735: LD_ADDR_VAR 0 6
65739: PUSH
65740: LD_VAR 0 5
65744: PPUSH
65745: LD_INT 91
65747: PUSH
65748: LD_VAR 0 4
65752: PUSH
65753: LD_INT 8
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: PPUSH
65761: CALL_OW 72
65765: ST_TO_ADDR
// if nearEnemy then
65766: LD_VAR 0 6
65770: IFFALSE 65839
// begin if GetWeapon ( i ) = ru_time_lapser then
65772: LD_VAR 0 4
65776: PPUSH
65777: CALL_OW 264
65781: PUSH
65782: LD_INT 49
65784: EQUAL
65785: IFFALSE 65813
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65787: LD_VAR 0 4
65791: PPUSH
65792: LD_VAR 0 6
65796: PPUSH
65797: LD_VAR 0 4
65801: PPUSH
65802: CALL_OW 74
65806: PPUSH
65807: CALL_OW 112
65811: GO 65837
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65813: LD_VAR 0 4
65817: PPUSH
65818: LD_VAR 0 6
65822: PPUSH
65823: LD_VAR 0 4
65827: PPUSH
65828: CALL_OW 74
65832: PPUSH
65833: CALL 66941 0 2
// end else
65837: GO 65939
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65839: LD_VAR 0 4
65843: PPUSH
65844: LD_VAR 0 2
65848: PUSH
65849: LD_VAR 0 9
65853: ARRAY
65854: PUSH
65855: LD_INT 1
65857: ARRAY
65858: PPUSH
65859: LD_VAR 0 2
65863: PUSH
65864: LD_VAR 0 9
65868: ARRAY
65869: PUSH
65870: LD_INT 2
65872: ARRAY
65873: PPUSH
65874: CALL_OW 297
65878: PUSH
65879: LD_INT 6
65881: GREATER
65882: IFFALSE 65925
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65884: LD_VAR 0 4
65888: PPUSH
65889: LD_VAR 0 2
65893: PUSH
65894: LD_VAR 0 9
65898: ARRAY
65899: PUSH
65900: LD_INT 1
65902: ARRAY
65903: PPUSH
65904: LD_VAR 0 2
65908: PUSH
65909: LD_VAR 0 9
65913: ARRAY
65914: PUSH
65915: LD_INT 2
65917: ARRAY
65918: PPUSH
65919: CALL_OW 114
65923: GO 65939
// SetTag ( i , tag ) ;
65925: LD_VAR 0 4
65929: PPUSH
65930: LD_VAR 0 9
65934: PPUSH
65935: CALL_OW 109
// end else
65939: GO 66012
// if enemy then
65941: LD_VAR 0 5
65945: IFFALSE 66012
// begin if GetWeapon ( i ) = ru_time_lapser then
65947: LD_VAR 0 4
65951: PPUSH
65952: CALL_OW 264
65956: PUSH
65957: LD_INT 49
65959: EQUAL
65960: IFFALSE 65988
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65962: LD_VAR 0 4
65966: PPUSH
65967: LD_VAR 0 5
65971: PPUSH
65972: LD_VAR 0 4
65976: PPUSH
65977: CALL_OW 74
65981: PPUSH
65982: CALL_OW 112
65986: GO 66012
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65988: LD_VAR 0 4
65992: PPUSH
65993: LD_VAR 0 5
65997: PPUSH
65998: LD_VAR 0 4
66002: PPUSH
66003: CALL_OW 74
66007: PPUSH
66008: CALL 66941 0 2
// end ; end ;
66012: GO 65592
66014: POP
66015: POP
// end ;
66016: LD_VAR 0 3
66020: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66021: LD_INT 0
66023: PPUSH
66024: PPUSH
66025: PPUSH
// if not unit or IsInUnit ( unit ) then
66026: LD_VAR 0 1
66030: NOT
66031: PUSH
66032: LD_VAR 0 1
66036: PPUSH
66037: CALL_OW 310
66041: OR
66042: IFFALSE 66046
// exit ;
66044: GO 66137
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66046: LD_ADDR_VAR 0 4
66050: PUSH
66051: LD_VAR 0 1
66055: PPUSH
66056: CALL_OW 250
66060: PPUSH
66061: LD_VAR 0 2
66065: PPUSH
66066: LD_INT 1
66068: PPUSH
66069: CALL_OW 272
66073: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66074: LD_ADDR_VAR 0 5
66078: PUSH
66079: LD_VAR 0 1
66083: PPUSH
66084: CALL_OW 251
66088: PPUSH
66089: LD_VAR 0 2
66093: PPUSH
66094: LD_INT 1
66096: PPUSH
66097: CALL_OW 273
66101: ST_TO_ADDR
// if ValidHex ( x , y ) then
66102: LD_VAR 0 4
66106: PPUSH
66107: LD_VAR 0 5
66111: PPUSH
66112: CALL_OW 488
66116: IFFALSE 66137
// ComTurnXY ( unit , x , y ) ;
66118: LD_VAR 0 1
66122: PPUSH
66123: LD_VAR 0 4
66127: PPUSH
66128: LD_VAR 0 5
66132: PPUSH
66133: CALL_OW 118
// end ;
66137: LD_VAR 0 3
66141: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66142: LD_INT 0
66144: PPUSH
66145: PPUSH
// result := false ;
66146: LD_ADDR_VAR 0 3
66150: PUSH
66151: LD_INT 0
66153: ST_TO_ADDR
// if not units then
66154: LD_VAR 0 2
66158: NOT
66159: IFFALSE 66163
// exit ;
66161: GO 66208
// for i in units do
66163: LD_ADDR_VAR 0 4
66167: PUSH
66168: LD_VAR 0 2
66172: PUSH
66173: FOR_IN
66174: IFFALSE 66206
// if See ( side , i ) then
66176: LD_VAR 0 1
66180: PPUSH
66181: LD_VAR 0 4
66185: PPUSH
66186: CALL_OW 292
66190: IFFALSE 66204
// begin result := true ;
66192: LD_ADDR_VAR 0 3
66196: PUSH
66197: LD_INT 1
66199: ST_TO_ADDR
// exit ;
66200: POP
66201: POP
66202: GO 66208
// end ;
66204: GO 66173
66206: POP
66207: POP
// end ;
66208: LD_VAR 0 3
66212: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66213: LD_INT 0
66215: PPUSH
66216: PPUSH
66217: PPUSH
66218: PPUSH
// if not unit or not points then
66219: LD_VAR 0 1
66223: NOT
66224: PUSH
66225: LD_VAR 0 2
66229: NOT
66230: OR
66231: IFFALSE 66235
// exit ;
66233: GO 66325
// dist := 99999 ;
66235: LD_ADDR_VAR 0 5
66239: PUSH
66240: LD_INT 99999
66242: ST_TO_ADDR
// for i in points do
66243: LD_ADDR_VAR 0 4
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: FOR_IN
66254: IFFALSE 66323
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66256: LD_ADDR_VAR 0 6
66260: PUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: LD_VAR 0 4
66270: PUSH
66271: LD_INT 1
66273: ARRAY
66274: PPUSH
66275: LD_VAR 0 4
66279: PUSH
66280: LD_INT 2
66282: ARRAY
66283: PPUSH
66284: CALL_OW 297
66288: ST_TO_ADDR
// if tmpDist < dist then
66289: LD_VAR 0 6
66293: PUSH
66294: LD_VAR 0 5
66298: LESS
66299: IFFALSE 66321
// begin result := i ;
66301: LD_ADDR_VAR 0 3
66305: PUSH
66306: LD_VAR 0 4
66310: ST_TO_ADDR
// dist := tmpDist ;
66311: LD_ADDR_VAR 0 5
66315: PUSH
66316: LD_VAR 0 6
66320: ST_TO_ADDR
// end ; end ;
66321: GO 66253
66323: POP
66324: POP
// end ;
66325: LD_VAR 0 3
66329: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66330: LD_INT 0
66332: PPUSH
// uc_side := side ;
66333: LD_ADDR_OWVAR 20
66337: PUSH
66338: LD_VAR 0 1
66342: ST_TO_ADDR
// uc_nation := 3 ;
66343: LD_ADDR_OWVAR 21
66347: PUSH
66348: LD_INT 3
66350: ST_TO_ADDR
// vc_chassis := 25 ;
66351: LD_ADDR_OWVAR 37
66355: PUSH
66356: LD_INT 25
66358: ST_TO_ADDR
// vc_engine := engine_siberite ;
66359: LD_ADDR_OWVAR 39
66363: PUSH
66364: LD_INT 3
66366: ST_TO_ADDR
// vc_control := control_computer ;
66367: LD_ADDR_OWVAR 38
66371: PUSH
66372: LD_INT 3
66374: ST_TO_ADDR
// vc_weapon := 59 ;
66375: LD_ADDR_OWVAR 40
66379: PUSH
66380: LD_INT 59
66382: ST_TO_ADDR
// result := CreateVehicle ;
66383: LD_ADDR_VAR 0 5
66387: PUSH
66388: CALL_OW 45
66392: ST_TO_ADDR
// SetDir ( result , d ) ;
66393: LD_VAR 0 5
66397: PPUSH
66398: LD_VAR 0 4
66402: PPUSH
66403: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66407: LD_VAR 0 5
66411: PPUSH
66412: LD_VAR 0 2
66416: PPUSH
66417: LD_VAR 0 3
66421: PPUSH
66422: LD_INT 0
66424: PPUSH
66425: CALL_OW 48
// end ;
66429: LD_VAR 0 5
66433: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66434: LD_INT 0
66436: PPUSH
66437: PPUSH
66438: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66439: LD_ADDR_VAR 0 2
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66462: LD_VAR 0 1
66466: NOT
66467: PUSH
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 264
66477: PUSH
66478: LD_INT 12
66480: PUSH
66481: LD_INT 51
66483: PUSH
66484: LD_INT 32
66486: PUSH
66487: LD_INT 89
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: IN
66496: NOT
66497: OR
66498: IFFALSE 66502
// exit ;
66500: GO 66600
// for i := 1 to 3 do
66502: LD_ADDR_VAR 0 3
66506: PUSH
66507: DOUBLE
66508: LD_INT 1
66510: DEC
66511: ST_TO_ADDR
66512: LD_INT 3
66514: PUSH
66515: FOR_TO
66516: IFFALSE 66598
// begin tmp := GetCargo ( cargo , i ) ;
66518: LD_ADDR_VAR 0 4
66522: PUSH
66523: LD_VAR 0 1
66527: PPUSH
66528: LD_VAR 0 3
66532: PPUSH
66533: CALL_OW 289
66537: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66538: LD_ADDR_VAR 0 2
66542: PUSH
66543: LD_VAR 0 2
66547: PPUSH
66548: LD_VAR 0 3
66552: PPUSH
66553: LD_VAR 0 4
66557: PPUSH
66558: CALL_OW 1
66562: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66563: LD_ADDR_VAR 0 2
66567: PUSH
66568: LD_VAR 0 2
66572: PPUSH
66573: LD_INT 4
66575: PPUSH
66576: LD_VAR 0 2
66580: PUSH
66581: LD_INT 4
66583: ARRAY
66584: PUSH
66585: LD_VAR 0 4
66589: PLUS
66590: PPUSH
66591: CALL_OW 1
66595: ST_TO_ADDR
// end ;
66596: GO 66515
66598: POP
66599: POP
// end ;
66600: LD_VAR 0 2
66604: RET
// export function Length ( array ) ; begin
66605: LD_INT 0
66607: PPUSH
// result := array + 0 ;
66608: LD_ADDR_VAR 0 2
66612: PUSH
66613: LD_VAR 0 1
66617: PUSH
66618: LD_INT 0
66620: PLUS
66621: ST_TO_ADDR
// end ;
66622: LD_VAR 0 2
66626: RET
// export function PrepareArray ( array ) ; begin
66627: LD_INT 0
66629: PPUSH
// result := array diff 0 ;
66630: LD_ADDR_VAR 0 2
66634: PUSH
66635: LD_VAR 0 1
66639: PUSH
66640: LD_INT 0
66642: DIFF
66643: ST_TO_ADDR
// if not result [ 1 ] then
66644: LD_VAR 0 2
66648: PUSH
66649: LD_INT 1
66651: ARRAY
66652: NOT
66653: IFFALSE 66673
// result := Delete ( result , 1 ) ;
66655: LD_ADDR_VAR 0 2
66659: PUSH
66660: LD_VAR 0 2
66664: PPUSH
66665: LD_INT 1
66667: PPUSH
66668: CALL_OW 3
66672: ST_TO_ADDR
// end ;
66673: LD_VAR 0 2
66677: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66678: LD_INT 0
66680: PPUSH
66681: PPUSH
66682: PPUSH
66683: PPUSH
// sibRocketRange := 25 ;
66684: LD_ADDR_VAR 0 6
66688: PUSH
66689: LD_INT 25
66691: ST_TO_ADDR
// result := false ;
66692: LD_ADDR_VAR 0 4
66696: PUSH
66697: LD_INT 0
66699: ST_TO_ADDR
// for i := 0 to 5 do
66700: LD_ADDR_VAR 0 5
66704: PUSH
66705: DOUBLE
66706: LD_INT 0
66708: DEC
66709: ST_TO_ADDR
66710: LD_INT 5
66712: PUSH
66713: FOR_TO
66714: IFFALSE 66781
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66716: LD_VAR 0 1
66720: PPUSH
66721: LD_VAR 0 5
66725: PPUSH
66726: LD_VAR 0 6
66730: PPUSH
66731: CALL_OW 272
66735: PPUSH
66736: LD_VAR 0 2
66740: PPUSH
66741: LD_VAR 0 5
66745: PPUSH
66746: LD_VAR 0 6
66750: PPUSH
66751: CALL_OW 273
66755: PPUSH
66756: LD_VAR 0 3
66760: PPUSH
66761: CALL_OW 309
66765: IFFALSE 66779
// begin result := true ;
66767: LD_ADDR_VAR 0 4
66771: PUSH
66772: LD_INT 1
66774: ST_TO_ADDR
// exit ;
66775: POP
66776: POP
66777: GO 66783
// end ;
66779: GO 66713
66781: POP
66782: POP
// end ;
66783: LD_VAR 0 4
66787: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66788: LD_INT 0
66790: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66791: LD_VAR 0 1
66795: PPUSH
66796: LD_VAR 0 2
66800: PPUSH
66801: LD_INT 0
66803: PPUSH
66804: LD_INT 0
66806: PPUSH
66807: LD_INT 1
66809: PPUSH
66810: LD_INT 0
66812: PPUSH
66813: CALL_OW 587
// end ;
66817: LD_VAR 0 3
66821: RET
// export function CenterOnNow ( unit ) ; begin
66822: LD_INT 0
66824: PPUSH
// result := IsInUnit ( unit ) ;
66825: LD_ADDR_VAR 0 2
66829: PUSH
66830: LD_VAR 0 1
66834: PPUSH
66835: CALL_OW 310
66839: ST_TO_ADDR
// if not result then
66840: LD_VAR 0 2
66844: NOT
66845: IFFALSE 66857
// result := unit ;
66847: LD_ADDR_VAR 0 2
66851: PUSH
66852: LD_VAR 0 1
66856: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66857: LD_VAR 0 1
66861: PPUSH
66862: CALL_OW 87
// end ;
66866: LD_VAR 0 2
66870: RET
// export function ComMoveHex ( unit , hex ) ; begin
66871: LD_INT 0
66873: PPUSH
// if not hex then
66874: LD_VAR 0 2
66878: NOT
66879: IFFALSE 66883
// exit ;
66881: GO 66936
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66883: LD_VAR 0 2
66887: PUSH
66888: LD_INT 1
66890: ARRAY
66891: PPUSH
66892: LD_VAR 0 2
66896: PUSH
66897: LD_INT 2
66899: ARRAY
66900: PPUSH
66901: CALL_OW 428
66905: IFFALSE 66909
// exit ;
66907: GO 66936
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66909: LD_VAR 0 1
66913: PPUSH
66914: LD_VAR 0 2
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PPUSH
66923: LD_VAR 0 2
66927: PUSH
66928: LD_INT 2
66930: ARRAY
66931: PPUSH
66932: CALL_OW 111
// end ;
66936: LD_VAR 0 3
66940: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66941: LD_INT 0
66943: PPUSH
66944: PPUSH
66945: PPUSH
// if not unit or not enemy then
66946: LD_VAR 0 1
66950: NOT
66951: PUSH
66952: LD_VAR 0 2
66956: NOT
66957: OR
66958: IFFALSE 66962
// exit ;
66960: GO 67086
// x := GetX ( enemy ) ;
66962: LD_ADDR_VAR 0 4
66966: PUSH
66967: LD_VAR 0 2
66971: PPUSH
66972: CALL_OW 250
66976: ST_TO_ADDR
// y := GetY ( enemy ) ;
66977: LD_ADDR_VAR 0 5
66981: PUSH
66982: LD_VAR 0 2
66986: PPUSH
66987: CALL_OW 251
66991: ST_TO_ADDR
// if ValidHex ( x , y ) then
66992: LD_VAR 0 4
66996: PPUSH
66997: LD_VAR 0 5
67001: PPUSH
67002: CALL_OW 488
67006: IFFALSE 67086
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67008: LD_VAR 0 2
67012: PPUSH
67013: CALL_OW 247
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: IN
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: CALL_OW 255
67038: PPUSH
67039: LD_VAR 0 2
67043: PPUSH
67044: CALL_OW 292
67048: OR
67049: IFFALSE 67067
// ComAttackUnit ( unit , enemy ) else
67051: LD_VAR 0 1
67055: PPUSH
67056: LD_VAR 0 2
67060: PPUSH
67061: CALL_OW 115
67065: GO 67086
// ComAgressiveMove ( unit , x , y ) ;
67067: LD_VAR 0 1
67071: PPUSH
67072: LD_VAR 0 4
67076: PPUSH
67077: LD_VAR 0 5
67081: PPUSH
67082: CALL_OW 114
// end ;
67086: LD_VAR 0 3
67090: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67091: LD_INT 0
67093: PPUSH
67094: PPUSH
67095: PPUSH
// list := AreaToList ( area , 0 ) ;
67096: LD_ADDR_VAR 0 5
67100: PUSH
67101: LD_VAR 0 1
67105: PPUSH
67106: LD_INT 0
67108: PPUSH
67109: CALL_OW 517
67113: ST_TO_ADDR
// if not list then
67114: LD_VAR 0 5
67118: NOT
67119: IFFALSE 67123
// exit ;
67121: GO 67253
// if all then
67123: LD_VAR 0 2
67127: IFFALSE 67215
// begin for i := 1 to list [ 1 ] do
67129: LD_ADDR_VAR 0 4
67133: PUSH
67134: DOUBLE
67135: LD_INT 1
67137: DEC
67138: ST_TO_ADDR
67139: LD_VAR 0 5
67143: PUSH
67144: LD_INT 1
67146: ARRAY
67147: PUSH
67148: FOR_TO
67149: IFFALSE 67211
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67151: LD_ADDR_VAR 0 3
67155: PUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: LD_VAR 0 3
67165: PUSH
67166: LD_INT 1
67168: PLUS
67169: PPUSH
67170: LD_VAR 0 5
67174: PUSH
67175: LD_INT 1
67177: ARRAY
67178: PUSH
67179: LD_VAR 0 4
67183: ARRAY
67184: PUSH
67185: LD_VAR 0 5
67189: PUSH
67190: LD_INT 2
67192: ARRAY
67193: PUSH
67194: LD_VAR 0 4
67198: ARRAY
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PPUSH
67204: CALL_OW 1
67208: ST_TO_ADDR
67209: GO 67148
67211: POP
67212: POP
// exit ;
67213: GO 67253
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67215: LD_ADDR_VAR 0 3
67219: PUSH
67220: LD_VAR 0 5
67224: PUSH
67225: LD_INT 1
67227: ARRAY
67228: PUSH
67229: LD_INT 1
67231: ARRAY
67232: PUSH
67233: LD_VAR 0 5
67237: PUSH
67238: LD_INT 2
67240: ARRAY
67241: PUSH
67242: LD_INT 1
67244: ARRAY
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: ST_TO_ADDR
// end ;
67253: LD_VAR 0 3
67257: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67258: LD_INT 0
67260: PPUSH
67261: PPUSH
// list := AreaToList ( area , 0 ) ;
67262: LD_ADDR_VAR 0 4
67266: PUSH
67267: LD_VAR 0 1
67271: PPUSH
67272: LD_INT 0
67274: PPUSH
67275: CALL_OW 517
67279: ST_TO_ADDR
// if not list then
67280: LD_VAR 0 4
67284: NOT
67285: IFFALSE 67289
// exit ;
67287: GO 67330
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67289: LD_ADDR_VAR 0 3
67293: PUSH
67294: LD_VAR 0 4
67298: PUSH
67299: LD_INT 1
67301: ARRAY
67302: PUSH
67303: LD_INT 1
67305: ARRAY
67306: PUSH
67307: LD_VAR 0 4
67311: PUSH
67312: LD_INT 2
67314: ARRAY
67315: PUSH
67316: LD_INT 1
67318: ARRAY
67319: PUSH
67320: LD_VAR 0 2
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// end ;
67330: LD_VAR 0 3
67334: RET
// export function First ( array ) ; begin
67335: LD_INT 0
67337: PPUSH
// if not array then
67338: LD_VAR 0 1
67342: NOT
67343: IFFALSE 67347
// exit ;
67345: GO 67361
// result := array [ 1 ] ;
67347: LD_ADDR_VAR 0 2
67351: PUSH
67352: LD_VAR 0 1
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: ST_TO_ADDR
// end ;
67361: LD_VAR 0 2
67365: RET
// export function Last ( array ) ; begin
67366: LD_INT 0
67368: PPUSH
// if not array then
67369: LD_VAR 0 1
67373: NOT
67374: IFFALSE 67378
// exit ;
67376: GO 67394
// result := array [ array ] ;
67378: LD_ADDR_VAR 0 2
67382: PUSH
67383: LD_VAR 0 1
67387: PUSH
67388: LD_VAR 0 1
67392: ARRAY
67393: ST_TO_ADDR
// end ;
67394: LD_VAR 0 2
67398: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67399: LD_INT 0
67401: PPUSH
67402: PPUSH
// result := [ ] ;
67403: LD_ADDR_VAR 0 5
67407: PUSH
67408: EMPTY
67409: ST_TO_ADDR
// if not array then
67410: LD_VAR 0 1
67414: NOT
67415: IFFALSE 67419
// exit ;
67417: GO 67531
// for i := 1 to array do
67419: LD_ADDR_VAR 0 6
67423: PUSH
67424: DOUBLE
67425: LD_INT 1
67427: DEC
67428: ST_TO_ADDR
67429: LD_VAR 0 1
67433: PUSH
67434: FOR_TO
67435: IFFALSE 67529
// if array [ i ] [ index ] = value then
67437: LD_VAR 0 1
67441: PUSH
67442: LD_VAR 0 6
67446: ARRAY
67447: PUSH
67448: LD_VAR 0 2
67452: ARRAY
67453: PUSH
67454: LD_VAR 0 3
67458: EQUAL
67459: IFFALSE 67527
// begin if indexColumn then
67461: LD_VAR 0 4
67465: IFFALSE 67501
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67467: LD_ADDR_VAR 0 5
67471: PUSH
67472: LD_VAR 0 5
67476: PPUSH
67477: LD_VAR 0 1
67481: PUSH
67482: LD_VAR 0 6
67486: ARRAY
67487: PUSH
67488: LD_VAR 0 4
67492: ARRAY
67493: PPUSH
67494: CALL 62869 0 2
67498: ST_TO_ADDR
67499: GO 67527
// result := Join ( result , array [ i ] ) ;
67501: LD_ADDR_VAR 0 5
67505: PUSH
67506: LD_VAR 0 5
67510: PPUSH
67511: LD_VAR 0 1
67515: PUSH
67516: LD_VAR 0 6
67520: ARRAY
67521: PPUSH
67522: CALL 62869 0 2
67526: ST_TO_ADDR
// end ;
67527: GO 67434
67529: POP
67530: POP
// end ;
67531: LD_VAR 0 5
67535: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
67536: LD_INT 0
67538: PPUSH
67539: PPUSH
67540: PPUSH
// if btype = b_depot then
67541: LD_VAR 0 2
67545: PUSH
67546: LD_INT 0
67548: EQUAL
67549: IFFALSE 67561
// begin result := true ;
67551: LD_ADDR_VAR 0 3
67555: PUSH
67556: LD_INT 1
67558: ST_TO_ADDR
// exit ;
67559: GO 67677
// end ; pom := GetBase ( depot ) ;
67561: LD_ADDR_VAR 0 4
67565: PUSH
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 274
67575: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67576: LD_ADDR_VAR 0 5
67580: PUSH
67581: LD_VAR 0 2
67585: PPUSH
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 248
67595: PPUSH
67596: CALL_OW 450
67600: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67601: LD_ADDR_VAR 0 3
67605: PUSH
67606: LD_VAR 0 4
67610: PPUSH
67611: LD_INT 1
67613: PPUSH
67614: CALL_OW 275
67618: PUSH
67619: LD_VAR 0 5
67623: PUSH
67624: LD_INT 1
67626: ARRAY
67627: GREATEREQUAL
67628: PUSH
67629: LD_VAR 0 4
67633: PPUSH
67634: LD_INT 2
67636: PPUSH
67637: CALL_OW 275
67641: PUSH
67642: LD_VAR 0 5
67646: PUSH
67647: LD_INT 2
67649: ARRAY
67650: GREATEREQUAL
67651: AND
67652: PUSH
67653: LD_VAR 0 4
67657: PPUSH
67658: LD_INT 3
67660: PPUSH
67661: CALL_OW 275
67665: PUSH
67666: LD_VAR 0 5
67670: PUSH
67671: LD_INT 3
67673: ARRAY
67674: GREATEREQUAL
67675: AND
67676: ST_TO_ADDR
// end ;
67677: LD_VAR 0 3
67681: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67682: LD_INT 0
67684: PPUSH
// if not vehicles or not parkingPoint then
67685: LD_VAR 0 1
67689: NOT
67690: PUSH
67691: LD_VAR 0 2
67695: NOT
67696: OR
67697: IFFALSE 67701
// exit ;
67699: GO 67799
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67701: LD_ADDR_VAR 0 1
67705: PUSH
67706: LD_VAR 0 1
67710: PPUSH
67711: LD_INT 50
67713: PUSH
67714: EMPTY
67715: LIST
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: LD_INT 92
67722: PUSH
67723: LD_VAR 0 2
67727: PUSH
67728: LD_INT 1
67730: ARRAY
67731: PUSH
67732: LD_VAR 0 2
67736: PUSH
67737: LD_INT 2
67739: ARRAY
67740: PUSH
67741: LD_INT 8
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PPUSH
67758: CALL_OW 72
67762: ST_TO_ADDR
// if not vehicles then
67763: LD_VAR 0 1
67767: NOT
67768: IFFALSE 67772
// exit ;
67770: GO 67799
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67772: LD_VAR 0 1
67776: PPUSH
67777: LD_VAR 0 2
67781: PUSH
67782: LD_INT 1
67784: ARRAY
67785: PPUSH
67786: LD_VAR 0 2
67790: PUSH
67791: LD_INT 2
67793: ARRAY
67794: PPUSH
67795: CALL_OW 111
// end ;
67799: LD_VAR 0 3
67803: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67804: LD_INT 0
67806: PPUSH
67807: PPUSH
67808: PPUSH
// if not side or not area then
67809: LD_VAR 0 1
67813: NOT
67814: PUSH
67815: LD_VAR 0 2
67819: NOT
67820: OR
67821: IFFALSE 67825
// exit ;
67823: GO 67944
// tmp := AreaToList ( area , 0 ) ;
67825: LD_ADDR_VAR 0 5
67829: PUSH
67830: LD_VAR 0 2
67834: PPUSH
67835: LD_INT 0
67837: PPUSH
67838: CALL_OW 517
67842: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67843: LD_ADDR_VAR 0 4
67847: PUSH
67848: DOUBLE
67849: LD_INT 1
67851: DEC
67852: ST_TO_ADDR
67853: LD_VAR 0 5
67857: PUSH
67858: LD_INT 1
67860: ARRAY
67861: PUSH
67862: FOR_TO
67863: IFFALSE 67942
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67865: LD_VAR 0 5
67869: PUSH
67870: LD_INT 1
67872: ARRAY
67873: PUSH
67874: LD_VAR 0 4
67878: ARRAY
67879: PPUSH
67880: LD_VAR 0 5
67884: PUSH
67885: LD_INT 2
67887: ARRAY
67888: PUSH
67889: LD_VAR 0 4
67893: ARRAY
67894: PPUSH
67895: CALL_OW 351
67899: IFFALSE 67940
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67901: LD_VAR 0 5
67905: PUSH
67906: LD_INT 1
67908: ARRAY
67909: PUSH
67910: LD_VAR 0 4
67914: ARRAY
67915: PPUSH
67916: LD_VAR 0 5
67920: PUSH
67921: LD_INT 2
67923: ARRAY
67924: PUSH
67925: LD_VAR 0 4
67929: ARRAY
67930: PPUSH
67931: LD_VAR 0 1
67935: PPUSH
67936: CALL_OW 244
// end ;
67940: GO 67862
67942: POP
67943: POP
// end ; end_of_file
67944: LD_VAR 0 3
67948: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 200
67956: DOUBLE
67957: GREATEREQUAL
67958: IFFALSE 67966
67960: LD_INT 299
67962: DOUBLE
67963: LESSEQUAL
67964: IFTRUE 67968
67966: GO 68000
67968: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67969: LD_VAR 0 1
67973: PPUSH
67974: LD_VAR 0 2
67978: PPUSH
67979: LD_VAR 0 3
67983: PPUSH
67984: LD_VAR 0 4
67988: PPUSH
67989: LD_VAR 0 5
67993: PPUSH
67994: CALL 20660 0 5
67998: GO 68077
68000: LD_INT 300
68002: DOUBLE
68003: GREATEREQUAL
68004: IFFALSE 68012
68006: LD_INT 399
68008: DOUBLE
68009: LESSEQUAL
68010: IFTRUE 68014
68012: GO 68076
68014: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68015: LD_VAR 0 1
68019: PPUSH
68020: LD_VAR 0 2
68024: PPUSH
68025: LD_VAR 0 3
68029: PPUSH
68030: LD_VAR 0 4
68034: PPUSH
68035: LD_VAR 0 5
68039: PPUSH
68040: LD_VAR 0 6
68044: PPUSH
68045: LD_VAR 0 7
68049: PPUSH
68050: LD_VAR 0 8
68054: PPUSH
68055: LD_VAR 0 9
68059: PPUSH
68060: LD_VAR 0 10
68064: PPUSH
68065: LD_VAR 0 11
68069: PPUSH
68070: CALL 16985 0 11
68074: GO 68077
68076: POP
// end ;
68077: PPOPN 11
68079: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68080: LD_VAR 0 1
68084: PPUSH
68085: LD_VAR 0 2
68089: PPUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: LD_VAR 0 4
68099: PPUSH
68100: LD_VAR 0 5
68104: PPUSH
68105: CALL 20396 0 5
// end ; end_of_file
68109: PPOPN 5
68111: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68112: LD_VAR 0 1
68116: PPUSH
68117: LD_VAR 0 2
68121: PPUSH
68122: LD_VAR 0 3
68126: PPUSH
68127: LD_VAR 0 4
68131: PPUSH
68132: LD_VAR 0 5
68136: PPUSH
68137: LD_VAR 0 6
68141: PPUSH
68142: CALL 4637 0 6
// end ;
68146: PPOPN 6
68148: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68149: LD_INT 0
68151: PPUSH
// begin if not units then
68152: LD_VAR 0 1
68156: NOT
68157: IFFALSE 68161
// exit ;
68159: GO 68161
// end ;
68161: PPOPN 7
68163: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68164: CALL 4524 0 0
// end ;
68168: PPOPN 1
68170: END
