// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// export pom , hover , attackN ; every 1 do
3063: GO 3065
3065: DISABLE
// begin pom := [ ] ;
3066: LD_ADDR_EXP 4
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// hover := [ ] ;
3073: LD_ADDR_EXP 5
3077: PUSH
3078: EMPTY
3079: ST_TO_ADDR
// attackN := 0 ;
3080: LD_ADDR_EXP 6
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// end ;
3088: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3089: LD_EXP 4
3093: IFFALSE 3515
3095: GO 3097
3097: DISABLE
3098: LD_INT 0
3100: PPUSH
3101: PPUSH
3102: PPUSH
3103: PPUSH
// begin enable ;
3104: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 7
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 69
3124: ST_TO_ADDR
// for i = 1 to pom do
3125: LD_ADDR_VAR 0 1
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_EXP 4
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3199
// if not HasTask ( pom [ i ] ) then
3143: LD_EXP 4
3147: PUSH
3148: LD_VAR 0 1
3152: ARRAY
3153: PPUSH
3154: CALL_OW 314
3158: NOT
3159: IFFALSE 3197
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3161: LD_EXP 4
3165: PUSH
3166: LD_VAR 0 1
3170: ARRAY
3171: PPUSH
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_EXP 4
3181: PUSH
3182: LD_VAR 0 1
3186: ARRAY
3187: PPUSH
3188: CALL_OW 74
3192: PPUSH
3193: CALL_OW 115
3197: GO 3140
3199: POP
3200: POP
// if hover then
3201: LD_EXP 5
3205: IFFALSE 3515
// begin for i = 1 to hover do
3207: LD_ADDR_VAR 0 1
3211: PUSH
3212: DOUBLE
3213: LD_INT 1
3215: DEC
3216: ST_TO_ADDR
3217: LD_EXP 5
3221: PUSH
3222: FOR_TO
3223: IFFALSE 3513
// begin if GetLives ( hover [ i ] ) < 250 then
3225: LD_EXP 5
3229: PUSH
3230: LD_VAR 0 1
3234: ARRAY
3235: PPUSH
3236: CALL_OW 256
3240: PUSH
3241: LD_INT 250
3243: LESS
3244: IFFALSE 3311
// begin for z = 1 to 1 + Difficulty do
3246: LD_ADDR_VAR 0 3
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_INT 1
3258: PUSH
3259: LD_OWVAR 67
3263: PLUS
3264: PUSH
3265: FOR_TO
3266: IFFALSE 3309
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3268: LD_EXP 5
3272: PUSH
3273: LD_VAR 0 1
3277: ARRAY
3278: PPUSH
3279: CALL_OW 250
3283: PPUSH
3284: LD_EXP 5
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 251
3299: PPUSH
3300: LD_INT 10
3302: PPUSH
3303: CALL_OW 453
3307: GO 3265
3309: POP
3310: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3311: LD_VAR 0 2
3315: PPUSH
3316: LD_INT 25
3318: PUSH
3319: LD_INT 2
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: LD_INT 3
3328: PUSH
3329: LD_INT 54
3331: PUSH
3332: EMPTY
3333: LIST
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 72
3347: PUSH
3348: LD_INT 0
3350: GREATER
3351: IFFALSE 3433
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3353: LD_ADDR_VAR 0 4
3357: PUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: LD_INT 25
3365: PUSH
3366: LD_INT 2
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 3
3375: PUSH
3376: LD_INT 54
3378: PUSH
3379: EMPTY
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PPUSH
3390: CALL_OW 72
3394: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3395: LD_EXP 5
3399: PUSH
3400: LD_VAR 0 1
3404: ARRAY
3405: PPUSH
3406: LD_VAR 0 4
3410: PPUSH
3411: LD_EXP 5
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 74
3426: PPUSH
3427: CALL_OW 115
// end else
3431: GO 3511
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3433: LD_ADDR_VAR 0 4
3437: PUSH
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 3
3455: PUSH
3456: LD_INT 54
3458: PUSH
3459: EMPTY
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 72
3474: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3475: LD_EXP 5
3479: PUSH
3480: LD_VAR 0 1
3484: ARRAY
3485: PPUSH
3486: LD_VAR 0 4
3490: PPUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_VAR 0 1
3500: ARRAY
3501: PPUSH
3502: CALL_OW 74
3506: PPUSH
3507: CALL_OW 115
// end ; end ;
3511: GO 3222
3513: POP
3514: POP
// end ; end ;
3515: PPOPN 4
3517: END
// every 3 3$10 do var i , un ;
3518: GO 3520
3520: DISABLE
3521: LD_INT 0
3523: PPUSH
3524: PPUSH
// begin uc_side := 7 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 7
3532: ST_TO_ADDR
// uc_nation := 1 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 1
3540: ST_TO_ADDR
// for i = 1 to 2 do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_INT 2
3553: PUSH
3554: FOR_TO
3555: IFFALSE 3720
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: LD_INT 7
3565: PUSH
3566: LD_INT 6
3568: PUSH
3569: LD_INT 6
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_OWVAR 67
3581: ARRAY
3582: PPUSH
3583: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3587: LD_ADDR_OWVAR 37
3591: PUSH
3592: LD_INT 1
3594: ST_TO_ADDR
// vc_engine := engine_combustion ;
3595: LD_ADDR_OWVAR 39
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// vc_control := control_manual ;
3603: LD_ADDR_OWVAR 38
3607: PUSH
3608: LD_INT 1
3610: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3611: LD_ADDR_OWVAR 41
3615: PUSH
3616: LD_INT 66
3618: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3619: LD_ADDR_OWVAR 40
3623: PUSH
3624: LD_INT 2
3626: ST_TO_ADDR
// un := CreateVehicle ;
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: CALL_OW 45
3636: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3637: LD_VAR 0 2
3641: PPUSH
3642: LD_INT 3
3644: PPUSH
3645: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3649: LD_VAR 0 2
3653: PPUSH
3654: LD_INT 48
3656: PPUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_INT 0
3662: PPUSH
3663: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3667: CALL_OW 44
3671: PPUSH
3672: LD_VAR 0 2
3676: PPUSH
3677: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3681: LD_VAR 0 2
3685: PPUSH
3686: LD_INT 49
3688: PPUSH
3689: LD_INT 17
3691: PPUSH
3692: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 48
3703: PPUSH
3704: LD_INT 36
3706: PPUSH
3707: CALL_OW 171
// Wait ( 0 0$02 ) ;
3711: LD_INT 70
3713: PPUSH
3714: CALL_OW 67
// end ;
3718: GO 3554
3720: POP
3721: POP
// end ;
3722: PPOPN 2
3724: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3725: LD_EXP 6
3729: PUSH
3730: LD_INT 10
3732: PUSH
3733: LD_INT 12
3735: PUSH
3736: LD_INT 14
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: LESS
3750: IFFALSE 4452
3752: GO 3754
3754: DISABLE
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
// begin enable ;
3759: ENABLE
// Randomize ;
3760: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3764: LD_INT 35
3766: PPUSH
3767: LD_INT 6265
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3779: LD_EXP 6
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 4
3789: PUSH
3790: LD_INT 5
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: LESS
3804: IFFALSE 3824
// c := Rand ( 1 , 2 ) else
3806: LD_ADDR_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
3822: GO 3840
// c := Rand ( 1 , 3 ) ;
3824: LD_ADDR_VAR 0 1
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 3
3834: PPUSH
3835: CALL_OW 12
3839: ST_TO_ADDR
// if attackN = 0 then
3840: LD_EXP 6
3844: PUSH
3845: LD_INT 0
3847: EQUAL
3848: IFFALSE 3864
// Say ( com , DJackAttack ) else
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DJackAttack
3857: PPUSH
3858: CALL_OW 88
3862: GO 3868
// DSay ;
3864: CALL 2844 0 0
// case c of 1 :
3868: LD_VAR 0 1
3872: PUSH
3873: LD_INT 1
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 4063
3881: POP
// begin pom := pom ^ Attack ( 1 ) ;
3882: LD_ADDR_EXP 4
3886: PUSH
3887: LD_EXP 4
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: CALL 1355 0 1
3899: ADD
3900: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3901: LD_INT 420
3903: PPUSH
3904: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 2 then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 2
3934: GREATER
3935: IFFALSE 3963
// begin Wait ( 0 0$46 ) ;
3937: LD_INT 1610
3939: PPUSH
3940: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3944: LD_ADDR_EXP 4
3948: PUSH
3949: LD_EXP 4
3953: PUSH
3954: LD_INT 4
3956: PPUSH
3957: CALL 1355 0 1
3961: ADD
3962: ST_TO_ADDR
// end ; if attackN > 4 then
3963: LD_EXP 6
3967: PUSH
3968: LD_INT 4
3970: GREATER
3971: IFFALSE 3999
// begin Wait ( 0 0$12 ) ;
3973: LD_INT 420
3975: PPUSH
3976: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3980: LD_ADDR_EXP 4
3984: PUSH
3985: LD_EXP 4
3989: PUSH
3990: LD_INT 3
3992: PPUSH
3993: CALL 1355 0 1
3997: ADD
3998: ST_TO_ADDR
// end ; if attackN > 8 then
3999: LD_EXP 6
4003: PUSH
4004: LD_INT 8
4006: GREATER
4007: IFFALSE 4061
// begin Wait ( 0 0$12 ) ;
4009: LD_INT 420
4011: PPUSH
4012: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_INT 0
4023: PPUSH
4024: LD_INT 100
4026: PPUSH
4027: CALL_OW 12
4031: ST_TO_ADDR
// if l < 45 then
4032: LD_VAR 0 2
4036: PUSH
4037: LD_INT 45
4039: LESS
4040: IFFALSE 4061
// pom := pom ^ Attack ( 2 ) ;
4042: LD_ADDR_EXP 4
4046: PUSH
4047: LD_EXP 4
4051: PUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL 1355 0 1
4059: ADD
4060: ST_TO_ADDR
// end ; end ; 2 :
4061: GO 4350
4063: LD_INT 2
4065: DOUBLE
4066: EQUAL
4067: IFTRUE 4071
4069: GO 4219
4071: POP
// begin pom := pom ^ Attack ( 2 ) ;
4072: LD_ADDR_EXP 4
4076: PUSH
4077: LD_EXP 4
4081: PUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL 1355 0 1
4089: ADD
4090: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4091: LD_ADDR_EXP 4
4095: PUSH
4096: LD_EXP 4
4100: PUSH
4101: LD_INT 3
4103: PPUSH
4104: CALL 1355 0 1
4108: ADD
4109: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4110: LD_OWVAR 67
4114: PUSH
4115: LD_INT 1
4117: GREATER
4118: PUSH
4119: LD_INT 63
4121: PPUSH
4122: LD_INT 37
4124: PPUSH
4125: CALL_OW 428
4129: PPUSH
4130: CALL_OW 266
4134: PUSH
4135: LD_INT 30
4137: EQUAL
4138: AND
4139: IFFALSE 4145
// ComitSib ;
4141: CALL 2766 0 0
// if Difficulty > 2 then
4145: LD_OWVAR 67
4149: PUSH
4150: LD_INT 2
4152: GREATER
4153: IFFALSE 4181
// begin Wait ( 0 0$25 ) ;
4155: LD_INT 875
4157: PPUSH
4158: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4162: LD_ADDR_EXP 4
4166: PUSH
4167: LD_EXP 4
4171: PUSH
4172: LD_INT 4
4174: PPUSH
4175: CALL 1355 0 1
4179: ADD
4180: ST_TO_ADDR
// end ; if attackN > 7 then
4181: LD_EXP 6
4185: PUSH
4186: LD_INT 7
4188: GREATER
4189: IFFALSE 4217
// begin Wait ( 0 0$15 ) ;
4191: LD_INT 525
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 2
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// end ; end ; 3 :
4217: GO 4350
4219: LD_INT 3
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4349
4227: POP
// begin pom := pom ^ Attack ( 1 ) ;
4228: LD_ADDR_EXP 4
4232: PUSH
4233: LD_EXP 4
4237: PUSH
4238: LD_INT 1
4240: PPUSH
4241: CALL 1355 0 1
4245: ADD
4246: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4247: LD_INT 70
4249: PPUSH
4250: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4254: LD_ADDR_EXP 4
4258: PUSH
4259: LD_EXP 4
4263: PUSH
4264: LD_INT 2
4266: PPUSH
4267: CALL 1355 0 1
4271: ADD
4272: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4273: LD_INT 2100
4275: PPUSH
4276: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4280: LD_ADDR_EXP 4
4284: PUSH
4285: LD_EXP 4
4289: PUSH
4290: LD_INT 3
4292: PPUSH
4293: CALL 1355 0 1
4297: ADD
4298: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4299: LD_ADDR_EXP 4
4303: PUSH
4304: LD_EXP 4
4308: PUSH
4309: LD_INT 5
4311: PPUSH
4312: CALL 1355 0 1
4316: ADD
4317: ST_TO_ADDR
// if attackN > 10 then
4318: LD_EXP 6
4322: PUSH
4323: LD_INT 10
4325: GREATER
4326: IFFALSE 4347
// pom := pom ^ Attack ( 2 ) ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_EXP 4
4337: PUSH
4338: LD_INT 2
4340: PPUSH
4341: CALL 1355 0 1
4345: ADD
4346: ST_TO_ADDR
// end ; end ;
4347: GO 4350
4349: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4350: LD_OWVAR 67
4354: PUSH
4355: LD_INT 1
4357: GREATER
4358: PUSH
4359: LD_EXP 6
4363: PUSH
4364: LD_INT 4
4366: MOD
4367: PUSH
4368: LD_INT 0
4370: EQUAL
4371: AND
4372: IFFALSE 4438
// begin Wait ( 1 1$45 ) ;
4374: LD_INT 3675
4376: PPUSH
4377: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4381: LD_ADDR_EXP 4
4385: PUSH
4386: LD_EXP 4
4390: PUSH
4391: LD_INT 3
4393: PPUSH
4394: CALL 1355 0 1
4398: ADD
4399: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4400: LD_ADDR_EXP 4
4404: PUSH
4405: LD_EXP 4
4409: PUSH
4410: LD_INT 4
4412: PPUSH
4413: CALL 1355 0 1
4417: ADD
4418: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4419: LD_ADDR_EXP 5
4423: PUSH
4424: LD_EXP 5
4428: PUSH
4429: LD_INT 6
4431: PPUSH
4432: CALL 1355 0 1
4436: ADD
4437: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4438: LD_ADDR_EXP 6
4442: PUSH
4443: LD_EXP 6
4447: PUSH
4448: LD_INT 1
4450: PLUS
4451: ST_TO_ADDR
// end ;
4452: PPOPN 2
4454: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4455: LD_EXP 6
4459: PUSH
4460: LD_INT 10
4462: PUSH
4463: LD_INT 12
4465: PUSH
4466: LD_INT 14
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: PUSH
4474: LD_OWVAR 67
4478: ARRAY
4479: GREATEREQUAL
4480: PUSH
4481: LD_INT 22
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 69
4495: PUSH
4496: LD_INT 0
4498: EQUAL
4499: AND
4500: IFFALSE 4556
4502: GO 4504
4504: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4505: LD_EXP 2
4509: PPUSH
4510: LD_STRING DDocEnd
4512: PPUSH
4513: CALL_OW 94
// Wait ( 0 0$03 ) ;
4517: LD_INT 105
4519: PPUSH
4520: CALL_OW 67
// case Query ( QWin ) of 1 :
4524: LD_STRING QWin
4526: PPUSH
4527: CALL_OW 97
4531: PUSH
4532: LD_INT 1
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4543
4540: POP
// ; end ;
4541: GO 4544
4543: POP
// music_nat := 5 ;
4544: LD_ADDR_OWVAR 71
4548: PUSH
4549: LD_INT 5
4551: ST_TO_ADDR
// YouWin ;
4552: CALL_OW 103
// end ; end_of_file
4556: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4557: LD_VAR 0 1
4561: PPUSH
4562: CALL 20310 0 1
// if un = brave or un = com then
4566: LD_VAR 0 1
4570: PUSH
4571: LD_INT 1
4573: EQUAL
4574: PUSH
4575: LD_VAR 0 1
4579: PUSH
4580: LD_EXP 1
4584: EQUAL
4585: OR
4586: IFFALSE 4607
// begin SayRadio ( doc , DDocWin ) ;
4588: LD_EXP 2
4592: PPUSH
4593: LD_STRING DDocWin
4595: PPUSH
4596: CALL_OW 94
// YouLost (  ) ;
4600: LD_STRING 
4602: PPUSH
4603: CALL_OW 104
// end ; end ;
4607: PPOPN 1
4609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: CALL 20406 0 3
// end ;
4629: PPOPN 3
4631: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: CALL 20414 0 1
// end ;
4641: PPOPN 1
4643: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4644: LD_VAR 0 1
4648: PPUSH
4649: LD_VAR 0 2
4653: PPUSH
4654: CALL 20430 0 2
// end ; end_of_file end_of_file
4658: PPOPN 2
4660: END
// every 0 0$1 do
4661: GO 4663
4663: DISABLE
// begin enable ;
4664: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4665: LD_STRING updateTimer(
4667: PUSH
4668: LD_OWVAR 1
4672: STR
4673: PUSH
4674: LD_STRING );
4676: STR
4677: PPUSH
4678: CALL_OW 559
// end ;
4682: END
// export function SOS_MapStart ( ) ; begin
4683: LD_INT 0
4685: PPUSH
// if streamModeActive then
4686: LD_EXP 7
4690: IFFALSE 4699
// DefineStreamItems ( true ) ;
4692: LD_INT 1
4694: PPUSH
4695: CALL 6353 0 1
// UpdateFactoryWaypoints ( ) ;
4699: CALL 19214 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4703: CALL 19471 0 0
// end ;
4707: LD_VAR 0 1
4711: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4712: LD_INT 0
4714: PPUSH
// if p2 = 100 then
4715: LD_VAR 0 2
4719: PUSH
4720: LD_INT 100
4722: EQUAL
4723: IFFALSE 5726
// begin if not StreamModeActive then
4725: LD_EXP 7
4729: NOT
4730: IFFALSE 4740
// StreamModeActive := true ;
4732: LD_ADDR_EXP 7
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// if p3 = 0 then
4740: LD_VAR 0 3
4744: PUSH
4745: LD_INT 0
4747: EQUAL
4748: IFFALSE 4754
// InitStreamMode ;
4750: CALL 5889 0 0
// if p3 = 1 then
4754: LD_VAR 0 3
4758: PUSH
4759: LD_INT 1
4761: EQUAL
4762: IFFALSE 4772
// sRocket := true ;
4764: LD_ADDR_EXP 12
4768: PUSH
4769: LD_INT 1
4771: ST_TO_ADDR
// if p3 = 2 then
4772: LD_VAR 0 3
4776: PUSH
4777: LD_INT 2
4779: EQUAL
4780: IFFALSE 4790
// sSpeed := true ;
4782: LD_ADDR_EXP 11
4786: PUSH
4787: LD_INT 1
4789: ST_TO_ADDR
// if p3 = 3 then
4790: LD_VAR 0 3
4794: PUSH
4795: LD_INT 3
4797: EQUAL
4798: IFFALSE 4808
// sEngine := true ;
4800: LD_ADDR_EXP 13
4804: PUSH
4805: LD_INT 1
4807: ST_TO_ADDR
// if p3 = 4 then
4808: LD_VAR 0 3
4812: PUSH
4813: LD_INT 4
4815: EQUAL
4816: IFFALSE 4826
// sSpec := true ;
4818: LD_ADDR_EXP 10
4822: PUSH
4823: LD_INT 1
4825: ST_TO_ADDR
// if p3 = 5 then
4826: LD_VAR 0 3
4830: PUSH
4831: LD_INT 5
4833: EQUAL
4834: IFFALSE 4844
// sLevel := true ;
4836: LD_ADDR_EXP 14
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// if p3 = 6 then
4844: LD_VAR 0 3
4848: PUSH
4849: LD_INT 6
4851: EQUAL
4852: IFFALSE 4862
// sArmoury := true ;
4854: LD_ADDR_EXP 15
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// if p3 = 7 then
4862: LD_VAR 0 3
4866: PUSH
4867: LD_INT 7
4869: EQUAL
4870: IFFALSE 4880
// sRadar := true ;
4872: LD_ADDR_EXP 16
4876: PUSH
4877: LD_INT 1
4879: ST_TO_ADDR
// if p3 = 8 then
4880: LD_VAR 0 3
4884: PUSH
4885: LD_INT 8
4887: EQUAL
4888: IFFALSE 4898
// sBunker := true ;
4890: LD_ADDR_EXP 17
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// if p3 = 9 then
4898: LD_VAR 0 3
4902: PUSH
4903: LD_INT 9
4905: EQUAL
4906: IFFALSE 4916
// sHack := true ;
4908: LD_ADDR_EXP 18
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// if p3 = 10 then
4916: LD_VAR 0 3
4920: PUSH
4921: LD_INT 10
4923: EQUAL
4924: IFFALSE 4934
// sFire := true ;
4926: LD_ADDR_EXP 19
4930: PUSH
4931: LD_INT 1
4933: ST_TO_ADDR
// if p3 = 11 then
4934: LD_VAR 0 3
4938: PUSH
4939: LD_INT 11
4941: EQUAL
4942: IFFALSE 4952
// sRefresh := true ;
4944: LD_ADDR_EXP 20
4948: PUSH
4949: LD_INT 1
4951: ST_TO_ADDR
// if p3 = 12 then
4952: LD_VAR 0 3
4956: PUSH
4957: LD_INT 12
4959: EQUAL
4960: IFFALSE 4970
// sExp := true ;
4962: LD_ADDR_EXP 21
4966: PUSH
4967: LD_INT 1
4969: ST_TO_ADDR
// if p3 = 13 then
4970: LD_VAR 0 3
4974: PUSH
4975: LD_INT 13
4977: EQUAL
4978: IFFALSE 4988
// sDepot := true ;
4980: LD_ADDR_EXP 22
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 14 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 14
4995: EQUAL
4996: IFFALSE 5006
// sFlag := true ;
4998: LD_ADDR_EXP 23
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// if p3 = 15 then
5006: LD_VAR 0 3
5010: PUSH
5011: LD_INT 15
5013: EQUAL
5014: IFFALSE 5024
// sKamikadze := true ;
5016: LD_ADDR_EXP 31
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// if p3 = 16 then
5024: LD_VAR 0 3
5028: PUSH
5029: LD_INT 16
5031: EQUAL
5032: IFFALSE 5042
// sTroll := true ;
5034: LD_ADDR_EXP 32
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if p3 = 17 then
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 17
5049: EQUAL
5050: IFFALSE 5060
// sSlow := true ;
5052: LD_ADDR_EXP 33
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// if p3 = 18 then
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 18
5067: EQUAL
5068: IFFALSE 5078
// sLack := true ;
5070: LD_ADDR_EXP 34
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// if p3 = 19 then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 19
5085: EQUAL
5086: IFFALSE 5096
// sTank := true ;
5088: LD_ADDR_EXP 36
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// if p3 = 20 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 20
5103: EQUAL
5104: IFFALSE 5114
// sRemote := true ;
5106: LD_ADDR_EXP 37
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 21 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 21
5121: EQUAL
5122: IFFALSE 5132
// sPowell := true ;
5124: LD_ADDR_EXP 38
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 22 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 22
5139: EQUAL
5140: IFFALSE 5150
// sTeleport := true ;
5142: LD_ADDR_EXP 41
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 23 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 23
5157: EQUAL
5158: IFFALSE 5168
// sOilTower := true ;
5160: LD_ADDR_EXP 43
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 24 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 24
5175: EQUAL
5176: IFFALSE 5186
// sShovel := true ;
5178: LD_ADDR_EXP 44
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 25 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 25
5193: EQUAL
5194: IFFALSE 5204
// sSheik := true ;
5196: LD_ADDR_EXP 45
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 26 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 26
5211: EQUAL
5212: IFFALSE 5222
// sEarthquake := true ;
5214: LD_ADDR_EXP 47
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 27 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 27
5229: EQUAL
5230: IFFALSE 5240
// sAI := true ;
5232: LD_ADDR_EXP 48
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 28 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 28
5247: EQUAL
5248: IFFALSE 5258
// sCargo := true ;
5250: LD_ADDR_EXP 51
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// if p3 = 29 then
5258: LD_VAR 0 3
5262: PUSH
5263: LD_INT 29
5265: EQUAL
5266: IFFALSE 5276
// sDLaser := true ;
5268: LD_ADDR_EXP 52
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// if p3 = 30 then
5276: LD_VAR 0 3
5280: PUSH
5281: LD_INT 30
5283: EQUAL
5284: IFFALSE 5294
// sExchange := true ;
5286: LD_ADDR_EXP 53
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// if p3 = 31 then
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 31
5301: EQUAL
5302: IFFALSE 5312
// sFac := true ;
5304: LD_ADDR_EXP 54
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// if p3 = 32 then
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 32
5319: EQUAL
5320: IFFALSE 5330
// sPower := true ;
5322: LD_ADDR_EXP 55
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// if p3 = 33 then
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 33
5337: EQUAL
5338: IFFALSE 5348
// sRandom := true ;
5340: LD_ADDR_EXP 56
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if p3 = 34 then
5348: LD_VAR 0 3
5352: PUSH
5353: LD_INT 34
5355: EQUAL
5356: IFFALSE 5366
// sShield := true ;
5358: LD_ADDR_EXP 57
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// if p3 = 35 then
5366: LD_VAR 0 3
5370: PUSH
5371: LD_INT 35
5373: EQUAL
5374: IFFALSE 5384
// sTime := true ;
5376: LD_ADDR_EXP 58
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if p3 = 36 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 36
5391: EQUAL
5392: IFFALSE 5402
// sTools := true ;
5394: LD_ADDR_EXP 59
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 101 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 101
5409: EQUAL
5410: IFFALSE 5420
// sSold := true ;
5412: LD_ADDR_EXP 24
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// if p3 = 102 then
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 102
5427: EQUAL
5428: IFFALSE 5438
// sDiff := true ;
5430: LD_ADDR_EXP 25
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// if p3 = 103 then
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 103
5445: EQUAL
5446: IFFALSE 5456
// sFog := true ;
5448: LD_ADDR_EXP 28
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// if p3 = 104 then
5456: LD_VAR 0 3
5460: PUSH
5461: LD_INT 104
5463: EQUAL
5464: IFFALSE 5474
// sReset := true ;
5466: LD_ADDR_EXP 29
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// if p3 = 105 then
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 105
5481: EQUAL
5482: IFFALSE 5492
// sSun := true ;
5484: LD_ADDR_EXP 30
5488: PUSH
5489: LD_INT 1
5491: ST_TO_ADDR
// if p3 = 106 then
5492: LD_VAR 0 3
5496: PUSH
5497: LD_INT 106
5499: EQUAL
5500: IFFALSE 5510
// sTiger := true ;
5502: LD_ADDR_EXP 26
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// if p3 = 107 then
5510: LD_VAR 0 3
5514: PUSH
5515: LD_INT 107
5517: EQUAL
5518: IFFALSE 5528
// sBomb := true ;
5520: LD_ADDR_EXP 27
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// if p3 = 108 then
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 108
5535: EQUAL
5536: IFFALSE 5546
// sWound := true ;
5538: LD_ADDR_EXP 35
5542: PUSH
5543: LD_INT 1
5545: ST_TO_ADDR
// if p3 = 109 then
5546: LD_VAR 0 3
5550: PUSH
5551: LD_INT 109
5553: EQUAL
5554: IFFALSE 5564
// sBetray := true ;
5556: LD_ADDR_EXP 39
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// if p3 = 110 then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 110
5571: EQUAL
5572: IFFALSE 5582
// sContamin := true ;
5574: LD_ADDR_EXP 40
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// if p3 = 111 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 111
5589: EQUAL
5590: IFFALSE 5600
// sOil := true ;
5592: LD_ADDR_EXP 42
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if p3 = 112 then
5600: LD_VAR 0 3
5604: PUSH
5605: LD_INT 112
5607: EQUAL
5608: IFFALSE 5618
// sStu := true ;
5610: LD_ADDR_EXP 46
5614: PUSH
5615: LD_INT 1
5617: ST_TO_ADDR
// if p3 = 113 then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 113
5625: EQUAL
5626: IFFALSE 5636
// sBazooka := true ;
5628: LD_ADDR_EXP 49
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// if p3 = 114 then
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 114
5643: EQUAL
5644: IFFALSE 5654
// sMortar := true ;
5646: LD_ADDR_EXP 50
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// if p3 = 115 then
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 115
5661: EQUAL
5662: IFFALSE 5672
// sRanger := true ;
5664: LD_ADDR_EXP 60
5668: PUSH
5669: LD_INT 1
5671: ST_TO_ADDR
// if p3 = 116 then
5672: LD_VAR 0 3
5676: PUSH
5677: LD_INT 116
5679: EQUAL
5680: IFFALSE 5690
// sComputer := true ;
5682: LD_ADDR_EXP 61
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if p3 = 117 then
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 117
5697: EQUAL
5698: IFFALSE 5708
// s30 := true ;
5700: LD_ADDR_EXP 62
5704: PUSH
5705: LD_INT 1
5707: ST_TO_ADDR
// if p3 = 118 then
5708: LD_VAR 0 3
5712: PUSH
5713: LD_INT 118
5715: EQUAL
5716: IFFALSE 5726
// s60 := true ;
5718: LD_ADDR_EXP 63
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// end ; if p2 = 101 then
5726: LD_VAR 0 2
5730: PUSH
5731: LD_INT 101
5733: EQUAL
5734: IFFALSE 5862
// begin case p3 of 1 :
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 1
5743: DOUBLE
5744: EQUAL
5745: IFTRUE 5749
5747: GO 5756
5749: POP
// hHackUnlimitedResources ; 2 :
5750: CALL 17960 0 0
5754: GO 5862
5756: LD_INT 2
5758: DOUBLE
5759: EQUAL
5760: IFTRUE 5764
5762: GO 5771
5764: POP
// hHackSetLevel10 ; 3 :
5765: CALL 18093 0 0
5769: GO 5862
5771: LD_INT 3
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5786
5779: POP
// hHackSetLevel10YourUnits ; 4 :
5780: CALL 18178 0 0
5784: GO 5862
5786: LD_INT 4
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5801
5794: POP
// hHackInvincible ; 5 :
5795: CALL 18626 0 0
5799: GO 5862
5801: LD_INT 5
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5816
5809: POP
// hHackInvisible ; 6 :
5810: CALL 18737 0 0
5814: GO 5862
5816: LD_INT 6
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5831
5824: POP
// hHackChangeYourSide ; 7 :
5825: CALL 18794 0 0
5829: GO 5862
5831: LD_INT 7
5833: DOUBLE
5834: EQUAL
5835: IFTRUE 5839
5837: GO 5846
5839: POP
// hHackChangeUnitSide ; 8 :
5840: CALL 18836 0 0
5844: GO 5862
5846: LD_INT 8
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5854
5852: GO 5861
5854: POP
// hHackFog ; end ;
5855: CALL 18937 0 0
5859: GO 5862
5861: POP
// end ; end ;
5862: LD_VAR 0 7
5866: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5867: GO 5869
5869: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5870: LD_STRING initStreamRollete();
5872: PPUSH
5873: CALL_OW 559
// InitStreamMode ;
5877: CALL 5889 0 0
// DefineStreamItems ( false ) ;
5881: LD_INT 0
5883: PPUSH
5884: CALL 6353 0 1
// end ;
5888: END
// function InitStreamMode ; begin
5889: LD_INT 0
5891: PPUSH
// streamModeActive := false ;
5892: LD_ADDR_EXP 7
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// normalCounter := 36 ;
5900: LD_ADDR_EXP 8
5904: PUSH
5905: LD_INT 36
5907: ST_TO_ADDR
// hardcoreCounter := 18 ;
5908: LD_ADDR_EXP 9
5912: PUSH
5913: LD_INT 18
5915: ST_TO_ADDR
// sRocket := false ;
5916: LD_ADDR_EXP 12
5920: PUSH
5921: LD_INT 0
5923: ST_TO_ADDR
// sSpeed := false ;
5924: LD_ADDR_EXP 11
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// sEngine := false ;
5932: LD_ADDR_EXP 13
5936: PUSH
5937: LD_INT 0
5939: ST_TO_ADDR
// sSpec := false ;
5940: LD_ADDR_EXP 10
5944: PUSH
5945: LD_INT 0
5947: ST_TO_ADDR
// sLevel := false ;
5948: LD_ADDR_EXP 14
5952: PUSH
5953: LD_INT 0
5955: ST_TO_ADDR
// sArmoury := false ;
5956: LD_ADDR_EXP 15
5960: PUSH
5961: LD_INT 0
5963: ST_TO_ADDR
// sRadar := false ;
5964: LD_ADDR_EXP 16
5968: PUSH
5969: LD_INT 0
5971: ST_TO_ADDR
// sBunker := false ;
5972: LD_ADDR_EXP 17
5976: PUSH
5977: LD_INT 0
5979: ST_TO_ADDR
// sHack := false ;
5980: LD_ADDR_EXP 18
5984: PUSH
5985: LD_INT 0
5987: ST_TO_ADDR
// sFire := false ;
5988: LD_ADDR_EXP 19
5992: PUSH
5993: LD_INT 0
5995: ST_TO_ADDR
// sRefresh := false ;
5996: LD_ADDR_EXP 20
6000: PUSH
6001: LD_INT 0
6003: ST_TO_ADDR
// sExp := false ;
6004: LD_ADDR_EXP 21
6008: PUSH
6009: LD_INT 0
6011: ST_TO_ADDR
// sDepot := false ;
6012: LD_ADDR_EXP 22
6016: PUSH
6017: LD_INT 0
6019: ST_TO_ADDR
// sFlag := false ;
6020: LD_ADDR_EXP 23
6024: PUSH
6025: LD_INT 0
6027: ST_TO_ADDR
// sKamikadze := false ;
6028: LD_ADDR_EXP 31
6032: PUSH
6033: LD_INT 0
6035: ST_TO_ADDR
// sTroll := false ;
6036: LD_ADDR_EXP 32
6040: PUSH
6041: LD_INT 0
6043: ST_TO_ADDR
// sSlow := false ;
6044: LD_ADDR_EXP 33
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// sLack := false ;
6052: LD_ADDR_EXP 34
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// sTank := false ;
6060: LD_ADDR_EXP 36
6064: PUSH
6065: LD_INT 0
6067: ST_TO_ADDR
// sRemote := false ;
6068: LD_ADDR_EXP 37
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// sPowell := false ;
6076: LD_ADDR_EXP 38
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// sTeleport := false ;
6084: LD_ADDR_EXP 41
6088: PUSH
6089: LD_INT 0
6091: ST_TO_ADDR
// sOilTower := false ;
6092: LD_ADDR_EXP 43
6096: PUSH
6097: LD_INT 0
6099: ST_TO_ADDR
// sShovel := false ;
6100: LD_ADDR_EXP 44
6104: PUSH
6105: LD_INT 0
6107: ST_TO_ADDR
// sSheik := false ;
6108: LD_ADDR_EXP 45
6112: PUSH
6113: LD_INT 0
6115: ST_TO_ADDR
// sEarthquake := false ;
6116: LD_ADDR_EXP 47
6120: PUSH
6121: LD_INT 0
6123: ST_TO_ADDR
// sAI := false ;
6124: LD_ADDR_EXP 48
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// sCargo := false ;
6132: LD_ADDR_EXP 51
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// sDLaser := false ;
6140: LD_ADDR_EXP 52
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// sExchange := false ;
6148: LD_ADDR_EXP 53
6152: PUSH
6153: LD_INT 0
6155: ST_TO_ADDR
// sFac := false ;
6156: LD_ADDR_EXP 54
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// sPower := false ;
6164: LD_ADDR_EXP 55
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// sRandom := false ;
6172: LD_ADDR_EXP 56
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// sShield := false ;
6180: LD_ADDR_EXP 57
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sTime := false ;
6188: LD_ADDR_EXP 58
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sTools := false ;
6196: LD_ADDR_EXP 59
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sSold := false ;
6204: LD_ADDR_EXP 24
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sDiff := false ;
6212: LD_ADDR_EXP 25
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sFog := false ;
6220: LD_ADDR_EXP 28
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sReset := false ;
6228: LD_ADDR_EXP 29
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sSun := false ;
6236: LD_ADDR_EXP 30
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sTiger := false ;
6244: LD_ADDR_EXP 26
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sBomb := false ;
6252: LD_ADDR_EXP 27
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sWound := false ;
6260: LD_ADDR_EXP 35
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sBetray := false ;
6268: LD_ADDR_EXP 39
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sContamin := false ;
6276: LD_ADDR_EXP 40
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sOil := false ;
6284: LD_ADDR_EXP 42
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sStu := false ;
6292: LD_ADDR_EXP 46
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sBazooka := false ;
6300: LD_ADDR_EXP 49
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sMortar := false ;
6308: LD_ADDR_EXP 50
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sRanger := false ;
6316: LD_ADDR_EXP 60
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sComputer := false ;
6324: LD_ADDR_EXP 61
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// s30 := false ;
6332: LD_ADDR_EXP 62
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// s60 := false ;
6340: LD_ADDR_EXP 63
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// end ;
6348: LD_VAR 0 1
6352: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6353: LD_INT 0
6355: PPUSH
6356: PPUSH
6357: PPUSH
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// result := [ ] ;
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: EMPTY
6368: ST_TO_ADDR
// if campaign_id = 1 then
6369: LD_OWVAR 69
6373: PUSH
6374: LD_INT 1
6376: EQUAL
6377: IFFALSE 9543
// begin case mission_number of 1 :
6379: LD_OWVAR 70
6383: PUSH
6384: LD_INT 1
6386: DOUBLE
6387: EQUAL
6388: IFTRUE 6392
6390: GO 6468
6392: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6393: LD_ADDR_VAR 0 2
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 11
6406: PUSH
6407: LD_INT 12
6409: PUSH
6410: LD_INT 15
6412: PUSH
6413: LD_INT 16
6415: PUSH
6416: LD_INT 22
6418: PUSH
6419: LD_INT 23
6421: PUSH
6422: LD_INT 26
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 101
6438: PUSH
6439: LD_INT 102
6441: PUSH
6442: LD_INT 106
6444: PUSH
6445: LD_INT 116
6447: PUSH
6448: LD_INT 117
6450: PUSH
6451: LD_INT 118
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: ST_TO_ADDR
6466: GO 9541
6468: LD_INT 2
6470: DOUBLE
6471: EQUAL
6472: IFTRUE 6476
6474: GO 6560
6476: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 4
6487: PUSH
6488: LD_INT 11
6490: PUSH
6491: LD_INT 12
6493: PUSH
6494: LD_INT 15
6496: PUSH
6497: LD_INT 16
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 23
6505: PUSH
6506: LD_INT 26
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 101
6522: PUSH
6523: LD_INT 102
6525: PUSH
6526: LD_INT 105
6528: PUSH
6529: LD_INT 106
6531: PUSH
6532: LD_INT 108
6534: PUSH
6535: LD_INT 116
6537: PUSH
6538: LD_INT 117
6540: PUSH
6541: LD_INT 118
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: ST_TO_ADDR
6558: GO 9541
6560: LD_INT 3
6562: DOUBLE
6563: EQUAL
6564: IFTRUE 6568
6566: GO 6656
6568: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 4
6579: PUSH
6580: LD_INT 5
6582: PUSH
6583: LD_INT 11
6585: PUSH
6586: LD_INT 12
6588: PUSH
6589: LD_INT 15
6591: PUSH
6592: LD_INT 16
6594: PUSH
6595: LD_INT 22
6597: PUSH
6598: LD_INT 26
6600: PUSH
6601: LD_INT 36
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 101
6618: PUSH
6619: LD_INT 102
6621: PUSH
6622: LD_INT 105
6624: PUSH
6625: LD_INT 106
6627: PUSH
6628: LD_INT 108
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 117
6636: PUSH
6637: LD_INT 118
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: ST_TO_ADDR
6654: GO 9541
6656: LD_INT 4
6658: DOUBLE
6659: EQUAL
6660: IFTRUE 6664
6662: GO 6760
6664: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6665: LD_ADDR_VAR 0 2
6669: PUSH
6670: LD_INT 2
6672: PUSH
6673: LD_INT 4
6675: PUSH
6676: LD_INT 5
6678: PUSH
6679: LD_INT 8
6681: PUSH
6682: LD_INT 11
6684: PUSH
6685: LD_INT 12
6687: PUSH
6688: LD_INT 15
6690: PUSH
6691: LD_INT 16
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_INT 23
6699: PUSH
6700: LD_INT 26
6702: PUSH
6703: LD_INT 36
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 101
6722: PUSH
6723: LD_INT 102
6725: PUSH
6726: LD_INT 105
6728: PUSH
6729: LD_INT 106
6731: PUSH
6732: LD_INT 108
6734: PUSH
6735: LD_INT 116
6737: PUSH
6738: LD_INT 117
6740: PUSH
6741: LD_INT 118
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: ST_TO_ADDR
6758: GO 9541
6760: LD_INT 5
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6880
6768: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6769: LD_ADDR_VAR 0 2
6773: PUSH
6774: LD_INT 2
6776: PUSH
6777: LD_INT 4
6779: PUSH
6780: LD_INT 5
6782: PUSH
6783: LD_INT 6
6785: PUSH
6786: LD_INT 8
6788: PUSH
6789: LD_INT 11
6791: PUSH
6792: LD_INT 12
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 23
6806: PUSH
6807: LD_INT 25
6809: PUSH
6810: LD_INT 26
6812: PUSH
6813: LD_INT 36
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 101
6834: PUSH
6835: LD_INT 102
6837: PUSH
6838: LD_INT 105
6840: PUSH
6841: LD_INT 106
6843: PUSH
6844: LD_INT 108
6846: PUSH
6847: LD_INT 109
6849: PUSH
6850: LD_INT 112
6852: PUSH
6853: LD_INT 116
6855: PUSH
6856: LD_INT 117
6858: PUSH
6859: LD_INT 118
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 9541
6880: LD_INT 6
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 7020
6888: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 2
6896: PUSH
6897: LD_INT 4
6899: PUSH
6900: LD_INT 5
6902: PUSH
6903: LD_INT 6
6905: PUSH
6906: LD_INT 8
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 15
6917: PUSH
6918: LD_INT 16
6920: PUSH
6921: LD_INT 20
6923: PUSH
6924: LD_INT 21
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_INT 23
6932: PUSH
6933: LD_INT 25
6935: PUSH
6936: LD_INT 26
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 31
6944: PUSH
6945: LD_INT 32
6947: PUSH
6948: LD_INT 36
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 101
6974: PUSH
6975: LD_INT 102
6977: PUSH
6978: LD_INT 105
6980: PUSH
6981: LD_INT 106
6983: PUSH
6984: LD_INT 108
6986: PUSH
6987: LD_INT 109
6989: PUSH
6990: LD_INT 112
6992: PUSH
6993: LD_INT 116
6995: PUSH
6996: LD_INT 117
6998: PUSH
6999: LD_INT 118
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: ST_TO_ADDR
7018: GO 9541
7020: LD_INT 7
7022: DOUBLE
7023: EQUAL
7024: IFTRUE 7028
7026: GO 7140
7028: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7029: LD_ADDR_VAR 0 2
7033: PUSH
7034: LD_INT 2
7036: PUSH
7037: LD_INT 4
7039: PUSH
7040: LD_INT 5
7042: PUSH
7043: LD_INT 7
7045: PUSH
7046: LD_INT 11
7048: PUSH
7049: LD_INT 12
7051: PUSH
7052: LD_INT 15
7054: PUSH
7055: LD_INT 16
7057: PUSH
7058: LD_INT 20
7060: PUSH
7061: LD_INT 21
7063: PUSH
7064: LD_INT 22
7066: PUSH
7067: LD_INT 23
7069: PUSH
7070: LD_INT 25
7072: PUSH
7073: LD_INT 26
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 101
7094: PUSH
7095: LD_INT 102
7097: PUSH
7098: LD_INT 103
7100: PUSH
7101: LD_INT 105
7103: PUSH
7104: LD_INT 106
7106: PUSH
7107: LD_INT 108
7109: PUSH
7110: LD_INT 112
7112: PUSH
7113: LD_INT 116
7115: PUSH
7116: LD_INT 117
7118: PUSH
7119: LD_INT 118
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: ST_TO_ADDR
7138: GO 9541
7140: LD_INT 8
7142: DOUBLE
7143: EQUAL
7144: IFTRUE 7148
7146: GO 7288
7148: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: LD_INT 4
7159: PUSH
7160: LD_INT 5
7162: PUSH
7163: LD_INT 6
7165: PUSH
7166: LD_INT 7
7168: PUSH
7169: LD_INT 8
7171: PUSH
7172: LD_INT 11
7174: PUSH
7175: LD_INT 12
7177: PUSH
7178: LD_INT 15
7180: PUSH
7181: LD_INT 16
7183: PUSH
7184: LD_INT 20
7186: PUSH
7187: LD_INT 21
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 23
7195: PUSH
7196: LD_INT 25
7198: PUSH
7199: LD_INT 26
7201: PUSH
7202: LD_INT 30
7204: PUSH
7205: LD_INT 31
7207: PUSH
7208: LD_INT 32
7210: PUSH
7211: LD_INT 36
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 101
7238: PUSH
7239: LD_INT 102
7241: PUSH
7242: LD_INT 103
7244: PUSH
7245: LD_INT 105
7247: PUSH
7248: LD_INT 106
7250: PUSH
7251: LD_INT 108
7253: PUSH
7254: LD_INT 109
7256: PUSH
7257: LD_INT 112
7259: PUSH
7260: LD_INT 116
7262: PUSH
7263: LD_INT 117
7265: PUSH
7266: LD_INT 118
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: ST_TO_ADDR
7286: GO 9541
7288: LD_INT 9
7290: DOUBLE
7291: EQUAL
7292: IFTRUE 7296
7294: GO 7444
7296: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7297: LD_ADDR_VAR 0 2
7301: PUSH
7302: LD_INT 2
7304: PUSH
7305: LD_INT 4
7307: PUSH
7308: LD_INT 5
7310: PUSH
7311: LD_INT 6
7313: PUSH
7314: LD_INT 7
7316: PUSH
7317: LD_INT 8
7319: PUSH
7320: LD_INT 11
7322: PUSH
7323: LD_INT 12
7325: PUSH
7326: LD_INT 15
7328: PUSH
7329: LD_INT 16
7331: PUSH
7332: LD_INT 20
7334: PUSH
7335: LD_INT 21
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 23
7343: PUSH
7344: LD_INT 25
7346: PUSH
7347: LD_INT 26
7349: PUSH
7350: LD_INT 28
7352: PUSH
7353: LD_INT 30
7355: PUSH
7356: LD_INT 31
7358: PUSH
7359: LD_INT 32
7361: PUSH
7362: LD_INT 36
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 101
7390: PUSH
7391: LD_INT 102
7393: PUSH
7394: LD_INT 103
7396: PUSH
7397: LD_INT 105
7399: PUSH
7400: LD_INT 106
7402: PUSH
7403: LD_INT 108
7405: PUSH
7406: LD_INT 109
7408: PUSH
7409: LD_INT 112
7411: PUSH
7412: LD_INT 114
7414: PUSH
7415: LD_INT 116
7417: PUSH
7418: LD_INT 117
7420: PUSH
7421: LD_INT 118
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: ST_TO_ADDR
7442: GO 9541
7444: LD_INT 10
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7648
7452: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7453: LD_ADDR_VAR 0 2
7457: PUSH
7458: LD_INT 2
7460: PUSH
7461: LD_INT 4
7463: PUSH
7464: LD_INT 5
7466: PUSH
7467: LD_INT 6
7469: PUSH
7470: LD_INT 7
7472: PUSH
7473: LD_INT 8
7475: PUSH
7476: LD_INT 9
7478: PUSH
7479: LD_INT 10
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: LD_INT 15
7496: PUSH
7497: LD_INT 16
7499: PUSH
7500: LD_INT 17
7502: PUSH
7503: LD_INT 18
7505: PUSH
7506: LD_INT 19
7508: PUSH
7509: LD_INT 20
7511: PUSH
7512: LD_INT 21
7514: PUSH
7515: LD_INT 22
7517: PUSH
7518: LD_INT 23
7520: PUSH
7521: LD_INT 24
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 26
7529: PUSH
7530: LD_INT 28
7532: PUSH
7533: LD_INT 30
7535: PUSH
7536: LD_INT 31
7538: PUSH
7539: LD_INT 32
7541: PUSH
7542: LD_INT 36
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 101
7578: PUSH
7579: LD_INT 102
7581: PUSH
7582: LD_INT 103
7584: PUSH
7585: LD_INT 104
7587: PUSH
7588: LD_INT 105
7590: PUSH
7591: LD_INT 106
7593: PUSH
7594: LD_INT 107
7596: PUSH
7597: LD_INT 108
7599: PUSH
7600: LD_INT 109
7602: PUSH
7603: LD_INT 110
7605: PUSH
7606: LD_INT 111
7608: PUSH
7609: LD_INT 112
7611: PUSH
7612: LD_INT 114
7614: PUSH
7615: LD_INT 116
7617: PUSH
7618: LD_INT 117
7620: PUSH
7621: LD_INT 118
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: ST_TO_ADDR
7646: GO 9541
7648: LD_INT 11
7650: DOUBLE
7651: EQUAL
7652: IFTRUE 7656
7654: GO 7860
7656: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7657: LD_ADDR_VAR 0 2
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: LD_INT 4
7670: PUSH
7671: LD_INT 5
7673: PUSH
7674: LD_INT 6
7676: PUSH
7677: LD_INT 7
7679: PUSH
7680: LD_INT 8
7682: PUSH
7683: LD_INT 9
7685: PUSH
7686: LD_INT 10
7688: PUSH
7689: LD_INT 11
7691: PUSH
7692: LD_INT 12
7694: PUSH
7695: LD_INT 13
7697: PUSH
7698: LD_INT 14
7700: PUSH
7701: LD_INT 15
7703: PUSH
7704: LD_INT 16
7706: PUSH
7707: LD_INT 17
7709: PUSH
7710: LD_INT 18
7712: PUSH
7713: LD_INT 19
7715: PUSH
7716: LD_INT 20
7718: PUSH
7719: LD_INT 21
7721: PUSH
7722: LD_INT 22
7724: PUSH
7725: LD_INT 23
7727: PUSH
7728: LD_INT 24
7730: PUSH
7731: LD_INT 25
7733: PUSH
7734: LD_INT 26
7736: PUSH
7737: LD_INT 28
7739: PUSH
7740: LD_INT 30
7742: PUSH
7743: LD_INT 31
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 34
7751: PUSH
7752: LD_INT 36
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 101
7790: PUSH
7791: LD_INT 102
7793: PUSH
7794: LD_INT 103
7796: PUSH
7797: LD_INT 104
7799: PUSH
7800: LD_INT 105
7802: PUSH
7803: LD_INT 106
7805: PUSH
7806: LD_INT 107
7808: PUSH
7809: LD_INT 108
7811: PUSH
7812: LD_INT 109
7814: PUSH
7815: LD_INT 110
7817: PUSH
7818: LD_INT 111
7820: PUSH
7821: LD_INT 112
7823: PUSH
7824: LD_INT 114
7826: PUSH
7827: LD_INT 116
7829: PUSH
7830: LD_INT 117
7832: PUSH
7833: LD_INT 118
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ST_TO_ADDR
7858: GO 9541
7860: LD_INT 12
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 8088
7868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7869: LD_ADDR_VAR 0 2
7873: PUSH
7874: LD_INT 1
7876: PUSH
7877: LD_INT 2
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: LD_INT 5
7888: PUSH
7889: LD_INT 6
7891: PUSH
7892: LD_INT 7
7894: PUSH
7895: LD_INT 8
7897: PUSH
7898: LD_INT 9
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: LD_INT 11
7906: PUSH
7907: LD_INT 12
7909: PUSH
7910: LD_INT 13
7912: PUSH
7913: LD_INT 14
7915: PUSH
7916: LD_INT 15
7918: PUSH
7919: LD_INT 16
7921: PUSH
7922: LD_INT 17
7924: PUSH
7925: LD_INT 18
7927: PUSH
7928: LD_INT 19
7930: PUSH
7931: LD_INT 20
7933: PUSH
7934: LD_INT 21
7936: PUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: LD_INT 25
7948: PUSH
7949: LD_INT 26
7951: PUSH
7952: LD_INT 27
7954: PUSH
7955: LD_INT 28
7957: PUSH
7958: LD_INT 30
7960: PUSH
7961: LD_INT 31
7963: PUSH
7964: LD_INT 32
7966: PUSH
7967: LD_INT 33
7969: PUSH
7970: LD_INT 34
7972: PUSH
7973: LD_INT 36
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: LD_INT 101
8014: PUSH
8015: LD_INT 102
8017: PUSH
8018: LD_INT 103
8020: PUSH
8021: LD_INT 104
8023: PUSH
8024: LD_INT 105
8026: PUSH
8027: LD_INT 106
8029: PUSH
8030: LD_INT 107
8032: PUSH
8033: LD_INT 108
8035: PUSH
8036: LD_INT 109
8038: PUSH
8039: LD_INT 110
8041: PUSH
8042: LD_INT 111
8044: PUSH
8045: LD_INT 112
8047: PUSH
8048: LD_INT 113
8050: PUSH
8051: LD_INT 114
8053: PUSH
8054: LD_INT 116
8056: PUSH
8057: LD_INT 117
8059: PUSH
8060: LD_INT 118
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: ST_TO_ADDR
8086: GO 9541
8088: LD_INT 13
8090: DOUBLE
8091: EQUAL
8092: IFTRUE 8096
8094: GO 8304
8096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_INT 1
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: LD_INT 5
8116: PUSH
8117: LD_INT 8
8119: PUSH
8120: LD_INT 9
8122: PUSH
8123: LD_INT 10
8125: PUSH
8126: LD_INT 11
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: LD_INT 14
8134: PUSH
8135: LD_INT 15
8137: PUSH
8138: LD_INT 16
8140: PUSH
8141: LD_INT 17
8143: PUSH
8144: LD_INT 18
8146: PUSH
8147: LD_INT 19
8149: PUSH
8150: LD_INT 20
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_INT 23
8161: PUSH
8162: LD_INT 24
8164: PUSH
8165: LD_INT 25
8167: PUSH
8168: LD_INT 26
8170: PUSH
8171: LD_INT 27
8173: PUSH
8174: LD_INT 28
8176: PUSH
8177: LD_INT 30
8179: PUSH
8180: LD_INT 31
8182: PUSH
8183: LD_INT 32
8185: PUSH
8186: LD_INT 33
8188: PUSH
8189: LD_INT 34
8191: PUSH
8192: LD_INT 36
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 101
8230: PUSH
8231: LD_INT 102
8233: PUSH
8234: LD_INT 103
8236: PUSH
8237: LD_INT 104
8239: PUSH
8240: LD_INT 105
8242: PUSH
8243: LD_INT 106
8245: PUSH
8246: LD_INT 107
8248: PUSH
8249: LD_INT 108
8251: PUSH
8252: LD_INT 109
8254: PUSH
8255: LD_INT 110
8257: PUSH
8258: LD_INT 111
8260: PUSH
8261: LD_INT 112
8263: PUSH
8264: LD_INT 113
8266: PUSH
8267: LD_INT 114
8269: PUSH
8270: LD_INT 116
8272: PUSH
8273: LD_INT 117
8275: PUSH
8276: LD_INT 118
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: ST_TO_ADDR
8302: GO 9541
8304: LD_INT 14
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8536
8312: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8313: LD_ADDR_VAR 0 2
8317: PUSH
8318: LD_INT 1
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: LD_INT 4
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: LD_INT 6
8335: PUSH
8336: LD_INT 7
8338: PUSH
8339: LD_INT 8
8341: PUSH
8342: LD_INT 9
8344: PUSH
8345: LD_INT 10
8347: PUSH
8348: LD_INT 11
8350: PUSH
8351: LD_INT 12
8353: PUSH
8354: LD_INT 13
8356: PUSH
8357: LD_INT 14
8359: PUSH
8360: LD_INT 15
8362: PUSH
8363: LD_INT 16
8365: PUSH
8366: LD_INT 17
8368: PUSH
8369: LD_INT 18
8371: PUSH
8372: LD_INT 19
8374: PUSH
8375: LD_INT 20
8377: PUSH
8378: LD_INT 21
8380: PUSH
8381: LD_INT 22
8383: PUSH
8384: LD_INT 23
8386: PUSH
8387: LD_INT 24
8389: PUSH
8390: LD_INT 25
8392: PUSH
8393: LD_INT 26
8395: PUSH
8396: LD_INT 27
8398: PUSH
8399: LD_INT 28
8401: PUSH
8402: LD_INT 29
8404: PUSH
8405: LD_INT 30
8407: PUSH
8408: LD_INT 31
8410: PUSH
8411: LD_INT 32
8413: PUSH
8414: LD_INT 33
8416: PUSH
8417: LD_INT 34
8419: PUSH
8420: LD_INT 36
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 101
8462: PUSH
8463: LD_INT 102
8465: PUSH
8466: LD_INT 103
8468: PUSH
8469: LD_INT 104
8471: PUSH
8472: LD_INT 105
8474: PUSH
8475: LD_INT 106
8477: PUSH
8478: LD_INT 107
8480: PUSH
8481: LD_INT 108
8483: PUSH
8484: LD_INT 109
8486: PUSH
8487: LD_INT 110
8489: PUSH
8490: LD_INT 111
8492: PUSH
8493: LD_INT 112
8495: PUSH
8496: LD_INT 113
8498: PUSH
8499: LD_INT 114
8501: PUSH
8502: LD_INT 116
8504: PUSH
8505: LD_INT 117
8507: PUSH
8508: LD_INT 118
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: ST_TO_ADDR
8534: GO 9541
8536: LD_INT 15
8538: DOUBLE
8539: EQUAL
8540: IFTRUE 8544
8542: GO 8768
8544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: LD_INT 1
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 4
8561: PUSH
8562: LD_INT 5
8564: PUSH
8565: LD_INT 6
8567: PUSH
8568: LD_INT 7
8570: PUSH
8571: LD_INT 8
8573: PUSH
8574: LD_INT 9
8576: PUSH
8577: LD_INT 10
8579: PUSH
8580: LD_INT 11
8582: PUSH
8583: LD_INT 12
8585: PUSH
8586: LD_INT 13
8588: PUSH
8589: LD_INT 14
8591: PUSH
8592: LD_INT 15
8594: PUSH
8595: LD_INT 16
8597: PUSH
8598: LD_INT 17
8600: PUSH
8601: LD_INT 18
8603: PUSH
8604: LD_INT 19
8606: PUSH
8607: LD_INT 20
8609: PUSH
8610: LD_INT 21
8612: PUSH
8613: LD_INT 22
8615: PUSH
8616: LD_INT 23
8618: PUSH
8619: LD_INT 24
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 26
8627: PUSH
8628: LD_INT 27
8630: PUSH
8631: LD_INT 28
8633: PUSH
8634: LD_INT 29
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: LD_INT 32
8645: PUSH
8646: LD_INT 33
8648: PUSH
8649: LD_INT 34
8651: PUSH
8652: LD_INT 36
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 101
8694: PUSH
8695: LD_INT 102
8697: PUSH
8698: LD_INT 103
8700: PUSH
8701: LD_INT 104
8703: PUSH
8704: LD_INT 105
8706: PUSH
8707: LD_INT 106
8709: PUSH
8710: LD_INT 107
8712: PUSH
8713: LD_INT 108
8715: PUSH
8716: LD_INT 109
8718: PUSH
8719: LD_INT 110
8721: PUSH
8722: LD_INT 111
8724: PUSH
8725: LD_INT 112
8727: PUSH
8728: LD_INT 113
8730: PUSH
8731: LD_INT 114
8733: PUSH
8734: LD_INT 116
8736: PUSH
8737: LD_INT 117
8739: PUSH
8740: LD_INT 118
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: ST_TO_ADDR
8766: GO 9541
8768: LD_INT 16
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 8912
8776: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_INT 2
8784: PUSH
8785: LD_INT 4
8787: PUSH
8788: LD_INT 5
8790: PUSH
8791: LD_INT 7
8793: PUSH
8794: LD_INT 11
8796: PUSH
8797: LD_INT 12
8799: PUSH
8800: LD_INT 15
8802: PUSH
8803: LD_INT 16
8805: PUSH
8806: LD_INT 20
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_INT 23
8817: PUSH
8818: LD_INT 25
8820: PUSH
8821: LD_INT 26
8823: PUSH
8824: LD_INT 30
8826: PUSH
8827: LD_INT 31
8829: PUSH
8830: LD_INT 32
8832: PUSH
8833: LD_INT 33
8835: PUSH
8836: LD_INT 34
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 101
8862: PUSH
8863: LD_INT 102
8865: PUSH
8866: LD_INT 103
8868: PUSH
8869: LD_INT 106
8871: PUSH
8872: LD_INT 108
8874: PUSH
8875: LD_INT 112
8877: PUSH
8878: LD_INT 113
8880: PUSH
8881: LD_INT 114
8883: PUSH
8884: LD_INT 116
8886: PUSH
8887: LD_INT 117
8889: PUSH
8890: LD_INT 118
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: ST_TO_ADDR
8910: GO 9541
8912: LD_INT 17
8914: DOUBLE
8915: EQUAL
8916: IFTRUE 8920
8918: GO 9144
8920: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8921: LD_ADDR_VAR 0 2
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: LD_INT 4
8937: PUSH
8938: LD_INT 5
8940: PUSH
8941: LD_INT 6
8943: PUSH
8944: LD_INT 7
8946: PUSH
8947: LD_INT 8
8949: PUSH
8950: LD_INT 9
8952: PUSH
8953: LD_INT 10
8955: PUSH
8956: LD_INT 11
8958: PUSH
8959: LD_INT 12
8961: PUSH
8962: LD_INT 13
8964: PUSH
8965: LD_INT 14
8967: PUSH
8968: LD_INT 15
8970: PUSH
8971: LD_INT 16
8973: PUSH
8974: LD_INT 17
8976: PUSH
8977: LD_INT 18
8979: PUSH
8980: LD_INT 19
8982: PUSH
8983: LD_INT 20
8985: PUSH
8986: LD_INT 21
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: LD_INT 23
8994: PUSH
8995: LD_INT 24
8997: PUSH
8998: LD_INT 25
9000: PUSH
9001: LD_INT 26
9003: PUSH
9004: LD_INT 27
9006: PUSH
9007: LD_INT 28
9009: PUSH
9010: LD_INT 29
9012: PUSH
9013: LD_INT 30
9015: PUSH
9016: LD_INT 31
9018: PUSH
9019: LD_INT 32
9021: PUSH
9022: LD_INT 33
9024: PUSH
9025: LD_INT 34
9027: PUSH
9028: LD_INT 36
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: LD_INT 101
9070: PUSH
9071: LD_INT 102
9073: PUSH
9074: LD_INT 103
9076: PUSH
9077: LD_INT 104
9079: PUSH
9080: LD_INT 105
9082: PUSH
9083: LD_INT 106
9085: PUSH
9086: LD_INT 107
9088: PUSH
9089: LD_INT 108
9091: PUSH
9092: LD_INT 109
9094: PUSH
9095: LD_INT 110
9097: PUSH
9098: LD_INT 111
9100: PUSH
9101: LD_INT 112
9103: PUSH
9104: LD_INT 113
9106: PUSH
9107: LD_INT 114
9109: PUSH
9110: LD_INT 116
9112: PUSH
9113: LD_INT 117
9115: PUSH
9116: LD_INT 118
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: ST_TO_ADDR
9142: GO 9541
9144: LD_INT 18
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9300
9152: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: LD_INT 4
9163: PUSH
9164: LD_INT 5
9166: PUSH
9167: LD_INT 7
9169: PUSH
9170: LD_INT 11
9172: PUSH
9173: LD_INT 12
9175: PUSH
9176: LD_INT 15
9178: PUSH
9179: LD_INT 16
9181: PUSH
9182: LD_INT 20
9184: PUSH
9185: LD_INT 21
9187: PUSH
9188: LD_INT 22
9190: PUSH
9191: LD_INT 23
9193: PUSH
9194: LD_INT 25
9196: PUSH
9197: LD_INT 26
9199: PUSH
9200: LD_INT 30
9202: PUSH
9203: LD_INT 31
9205: PUSH
9206: LD_INT 32
9208: PUSH
9209: LD_INT 33
9211: PUSH
9212: LD_INT 34
9214: PUSH
9215: LD_INT 35
9217: PUSH
9218: LD_INT 36
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 101
9246: PUSH
9247: LD_INT 102
9249: PUSH
9250: LD_INT 103
9252: PUSH
9253: LD_INT 106
9255: PUSH
9256: LD_INT 108
9258: PUSH
9259: LD_INT 112
9261: PUSH
9262: LD_INT 113
9264: PUSH
9265: LD_INT 114
9267: PUSH
9268: LD_INT 115
9270: PUSH
9271: LD_INT 116
9273: PUSH
9274: LD_INT 117
9276: PUSH
9277: LD_INT 118
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: ST_TO_ADDR
9298: GO 9541
9300: LD_INT 19
9302: DOUBLE
9303: EQUAL
9304: IFTRUE 9308
9306: GO 9540
9308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9309: LD_ADDR_VAR 0 2
9313: PUSH
9314: LD_INT 1
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: LD_INT 3
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: LD_INT 5
9328: PUSH
9329: LD_INT 6
9331: PUSH
9332: LD_INT 7
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: LD_INT 9
9340: PUSH
9341: LD_INT 10
9343: PUSH
9344: LD_INT 11
9346: PUSH
9347: LD_INT 12
9349: PUSH
9350: LD_INT 13
9352: PUSH
9353: LD_INT 14
9355: PUSH
9356: LD_INT 15
9358: PUSH
9359: LD_INT 16
9361: PUSH
9362: LD_INT 17
9364: PUSH
9365: LD_INT 18
9367: PUSH
9368: LD_INT 19
9370: PUSH
9371: LD_INT 20
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_INT 23
9382: PUSH
9383: LD_INT 24
9385: PUSH
9386: LD_INT 25
9388: PUSH
9389: LD_INT 26
9391: PUSH
9392: LD_INT 27
9394: PUSH
9395: LD_INT 28
9397: PUSH
9398: LD_INT 29
9400: PUSH
9401: LD_INT 30
9403: PUSH
9404: LD_INT 31
9406: PUSH
9407: LD_INT 32
9409: PUSH
9410: LD_INT 33
9412: PUSH
9413: LD_INT 34
9415: PUSH
9416: LD_INT 35
9418: PUSH
9419: LD_INT 36
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 101
9462: PUSH
9463: LD_INT 102
9465: PUSH
9466: LD_INT 103
9468: PUSH
9469: LD_INT 104
9471: PUSH
9472: LD_INT 105
9474: PUSH
9475: LD_INT 106
9477: PUSH
9478: LD_INT 107
9480: PUSH
9481: LD_INT 108
9483: PUSH
9484: LD_INT 109
9486: PUSH
9487: LD_INT 110
9489: PUSH
9490: LD_INT 111
9492: PUSH
9493: LD_INT 112
9495: PUSH
9496: LD_INT 113
9498: PUSH
9499: LD_INT 114
9501: PUSH
9502: LD_INT 115
9504: PUSH
9505: LD_INT 116
9507: PUSH
9508: LD_INT 117
9510: PUSH
9511: LD_INT 118
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: ST_TO_ADDR
9538: GO 9541
9540: POP
// end else
9541: GO 9772
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 1
9550: PUSH
9551: LD_INT 2
9553: PUSH
9554: LD_INT 3
9556: PUSH
9557: LD_INT 4
9559: PUSH
9560: LD_INT 5
9562: PUSH
9563: LD_INT 6
9565: PUSH
9566: LD_INT 7
9568: PUSH
9569: LD_INT 8
9571: PUSH
9572: LD_INT 9
9574: PUSH
9575: LD_INT 10
9577: PUSH
9578: LD_INT 11
9580: PUSH
9581: LD_INT 12
9583: PUSH
9584: LD_INT 13
9586: PUSH
9587: LD_INT 14
9589: PUSH
9590: LD_INT 15
9592: PUSH
9593: LD_INT 16
9595: PUSH
9596: LD_INT 17
9598: PUSH
9599: LD_INT 18
9601: PUSH
9602: LD_INT 19
9604: PUSH
9605: LD_INT 20
9607: PUSH
9608: LD_INT 21
9610: PUSH
9611: LD_INT 22
9613: PUSH
9614: LD_INT 23
9616: PUSH
9617: LD_INT 24
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 26
9625: PUSH
9626: LD_INT 27
9628: PUSH
9629: LD_INT 28
9631: PUSH
9632: LD_INT 29
9634: PUSH
9635: LD_INT 30
9637: PUSH
9638: LD_INT 31
9640: PUSH
9641: LD_INT 32
9643: PUSH
9644: LD_INT 33
9646: PUSH
9647: LD_INT 34
9649: PUSH
9650: LD_INT 35
9652: PUSH
9653: LD_INT 36
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 101
9696: PUSH
9697: LD_INT 102
9699: PUSH
9700: LD_INT 103
9702: PUSH
9703: LD_INT 104
9705: PUSH
9706: LD_INT 105
9708: PUSH
9709: LD_INT 106
9711: PUSH
9712: LD_INT 107
9714: PUSH
9715: LD_INT 108
9717: PUSH
9718: LD_INT 109
9720: PUSH
9721: LD_INT 110
9723: PUSH
9724: LD_INT 111
9726: PUSH
9727: LD_INT 112
9729: PUSH
9730: LD_INT 113
9732: PUSH
9733: LD_INT 114
9735: PUSH
9736: LD_INT 115
9738: PUSH
9739: LD_INT 116
9741: PUSH
9742: LD_INT 117
9744: PUSH
9745: LD_INT 118
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: ST_TO_ADDR
// if result then
9772: LD_VAR 0 2
9776: IFFALSE 10562
// begin normal :=  ;
9778: LD_ADDR_VAR 0 5
9782: PUSH
9783: LD_STRING 
9785: ST_TO_ADDR
// hardcore :=  ;
9786: LD_ADDR_VAR 0 6
9790: PUSH
9791: LD_STRING 
9793: ST_TO_ADDR
// active :=  ;
9794: LD_ADDR_VAR 0 7
9798: PUSH
9799: LD_STRING 
9801: ST_TO_ADDR
// for i = 1 to normalCounter do
9802: LD_ADDR_VAR 0 8
9806: PUSH
9807: DOUBLE
9808: LD_INT 1
9810: DEC
9811: ST_TO_ADDR
9812: LD_EXP 8
9816: PUSH
9817: FOR_TO
9818: IFFALSE 9919
// begin tmp := 0 ;
9820: LD_ADDR_VAR 0 3
9824: PUSH
9825: LD_STRING 0
9827: ST_TO_ADDR
// if result [ 1 ] then
9828: LD_VAR 0 2
9832: PUSH
9833: LD_INT 1
9835: ARRAY
9836: IFFALSE 9901
// if result [ 1 ] [ 1 ] = i then
9838: LD_VAR 0 2
9842: PUSH
9843: LD_INT 1
9845: ARRAY
9846: PUSH
9847: LD_INT 1
9849: ARRAY
9850: PUSH
9851: LD_VAR 0 8
9855: EQUAL
9856: IFFALSE 9901
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9858: LD_ADDR_VAR 0 2
9862: PUSH
9863: LD_VAR 0 2
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: LD_VAR 0 2
9875: PUSH
9876: LD_INT 1
9878: ARRAY
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 3
9887: PPUSH
9888: CALL_OW 1
9892: ST_TO_ADDR
// tmp := 1 ;
9893: LD_ADDR_VAR 0 3
9897: PUSH
9898: LD_STRING 1
9900: ST_TO_ADDR
// end ; normal := normal & tmp ;
9901: LD_ADDR_VAR 0 5
9905: PUSH
9906: LD_VAR 0 5
9910: PUSH
9911: LD_VAR 0 3
9915: STR
9916: ST_TO_ADDR
// end ;
9917: GO 9817
9919: POP
9920: POP
// for i = 1 to hardcoreCounter do
9921: LD_ADDR_VAR 0 8
9925: PUSH
9926: DOUBLE
9927: LD_INT 1
9929: DEC
9930: ST_TO_ADDR
9931: LD_EXP 9
9935: PUSH
9936: FOR_TO
9937: IFFALSE 10042
// begin tmp := 0 ;
9939: LD_ADDR_VAR 0 3
9943: PUSH
9944: LD_STRING 0
9946: ST_TO_ADDR
// if result [ 2 ] then
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 2
9954: ARRAY
9955: IFFALSE 10024
// if result [ 2 ] [ 1 ] = 100 + i then
9957: LD_VAR 0 2
9961: PUSH
9962: LD_INT 2
9964: ARRAY
9965: PUSH
9966: LD_INT 1
9968: ARRAY
9969: PUSH
9970: LD_INT 100
9972: PUSH
9973: LD_VAR 0 8
9977: PLUS
9978: EQUAL
9979: IFFALSE 10024
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9981: LD_ADDR_VAR 0 2
9985: PUSH
9986: LD_VAR 0 2
9990: PPUSH
9991: LD_INT 2
9993: PPUSH
9994: LD_VAR 0 2
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 3
10010: PPUSH
10011: CALL_OW 1
10015: ST_TO_ADDR
// tmp := 1 ;
10016: LD_ADDR_VAR 0 3
10020: PUSH
10021: LD_STRING 1
10023: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10024: LD_ADDR_VAR 0 6
10028: PUSH
10029: LD_VAR 0 6
10033: PUSH
10034: LD_VAR 0 3
10038: STR
10039: ST_TO_ADDR
// end ;
10040: GO 9936
10042: POP
10043: POP
// if isGameLoad then
10044: LD_VAR 0 1
10048: IFFALSE 10523
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10050: LD_ADDR_VAR 0 4
10054: PUSH
10055: LD_EXP 12
10059: PUSH
10060: LD_EXP 11
10064: PUSH
10065: LD_EXP 13
10069: PUSH
10070: LD_EXP 10
10074: PUSH
10075: LD_EXP 14
10079: PUSH
10080: LD_EXP 15
10084: PUSH
10085: LD_EXP 16
10089: PUSH
10090: LD_EXP 17
10094: PUSH
10095: LD_EXP 18
10099: PUSH
10100: LD_EXP 19
10104: PUSH
10105: LD_EXP 20
10109: PUSH
10110: LD_EXP 21
10114: PUSH
10115: LD_EXP 22
10119: PUSH
10120: LD_EXP 23
10124: PUSH
10125: LD_EXP 31
10129: PUSH
10130: LD_EXP 32
10134: PUSH
10135: LD_EXP 33
10139: PUSH
10140: LD_EXP 34
10144: PUSH
10145: LD_EXP 36
10149: PUSH
10150: LD_EXP 37
10154: PUSH
10155: LD_EXP 38
10159: PUSH
10160: LD_EXP 41
10164: PUSH
10165: LD_EXP 43
10169: PUSH
10170: LD_EXP 44
10174: PUSH
10175: LD_EXP 45
10179: PUSH
10180: LD_EXP 47
10184: PUSH
10185: LD_EXP 48
10189: PUSH
10190: LD_EXP 51
10194: PUSH
10195: LD_EXP 52
10199: PUSH
10200: LD_EXP 53
10204: PUSH
10205: LD_EXP 54
10209: PUSH
10210: LD_EXP 55
10214: PUSH
10215: LD_EXP 56
10219: PUSH
10220: LD_EXP 57
10224: PUSH
10225: LD_EXP 58
10229: PUSH
10230: LD_EXP 59
10234: PUSH
10235: LD_EXP 24
10239: PUSH
10240: LD_EXP 25
10244: PUSH
10245: LD_EXP 28
10249: PUSH
10250: LD_EXP 29
10254: PUSH
10255: LD_EXP 30
10259: PUSH
10260: LD_EXP 26
10264: PUSH
10265: LD_EXP 27
10269: PUSH
10270: LD_EXP 35
10274: PUSH
10275: LD_EXP 39
10279: PUSH
10280: LD_EXP 40
10284: PUSH
10285: LD_EXP 42
10289: PUSH
10290: LD_EXP 46
10294: PUSH
10295: LD_EXP 49
10299: PUSH
10300: LD_EXP 50
10304: PUSH
10305: LD_EXP 60
10309: PUSH
10310: LD_EXP 61
10314: PUSH
10315: LD_EXP 62
10319: PUSH
10320: LD_EXP 63
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: ST_TO_ADDR
// tmp :=  ;
10381: LD_ADDR_VAR 0 3
10385: PUSH
10386: LD_STRING 
10388: ST_TO_ADDR
// for i = 1 to normalCounter do
10389: LD_ADDR_VAR 0 8
10393: PUSH
10394: DOUBLE
10395: LD_INT 1
10397: DEC
10398: ST_TO_ADDR
10399: LD_EXP 8
10403: PUSH
10404: FOR_TO
10405: IFFALSE 10441
// begin if flags [ i ] then
10407: LD_VAR 0 4
10411: PUSH
10412: LD_VAR 0 8
10416: ARRAY
10417: IFFALSE 10439
// tmp := tmp & i & ; ;
10419: LD_ADDR_VAR 0 3
10423: PUSH
10424: LD_VAR 0 3
10428: PUSH
10429: LD_VAR 0 8
10433: STR
10434: PUSH
10435: LD_STRING ;
10437: STR
10438: ST_TO_ADDR
// end ;
10439: GO 10404
10441: POP
10442: POP
// for i = 1 to hardcoreCounter do
10443: LD_ADDR_VAR 0 8
10447: PUSH
10448: DOUBLE
10449: LD_INT 1
10451: DEC
10452: ST_TO_ADDR
10453: LD_EXP 9
10457: PUSH
10458: FOR_TO
10459: IFFALSE 10505
// begin if flags [ normalCounter + i ] then
10461: LD_VAR 0 4
10465: PUSH
10466: LD_EXP 8
10470: PUSH
10471: LD_VAR 0 8
10475: PLUS
10476: ARRAY
10477: IFFALSE 10503
// tmp := tmp & ( 100 + i ) & ; ;
10479: LD_ADDR_VAR 0 3
10483: PUSH
10484: LD_VAR 0 3
10488: PUSH
10489: LD_INT 100
10491: PUSH
10492: LD_VAR 0 8
10496: PLUS
10497: STR
10498: PUSH
10499: LD_STRING ;
10501: STR
10502: ST_TO_ADDR
// end ;
10503: GO 10458
10505: POP
10506: POP
// if tmp then
10507: LD_VAR 0 3
10511: IFFALSE 10523
// active := tmp ;
10513: LD_ADDR_VAR 0 7
10517: PUSH
10518: LD_VAR 0 3
10522: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10523: LD_STRING getStreamItemsFromMission("
10525: PUSH
10526: LD_VAR 0 5
10530: STR
10531: PUSH
10532: LD_STRING ","
10534: STR
10535: PUSH
10536: LD_VAR 0 6
10540: STR
10541: PUSH
10542: LD_STRING ","
10544: STR
10545: PUSH
10546: LD_VAR 0 7
10550: STR
10551: PUSH
10552: LD_STRING ")
10554: STR
10555: PPUSH
10556: CALL_OW 559
// end else
10560: GO 10569
// ToLua ( getStreamItemsFromMission("","","") ) ;
10562: LD_STRING getStreamItemsFromMission("","","")
10564: PPUSH
10565: CALL_OW 559
// end ;
10569: LD_VAR 0 2
10573: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10574: LD_EXP 7
10578: PUSH
10579: LD_EXP 12
10583: AND
10584: IFFALSE 10708
10586: GO 10588
10588: DISABLE
10589: LD_INT 0
10591: PPUSH
10592: PPUSH
// begin enable ;
10593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10594: LD_ADDR_VAR 0 2
10598: PUSH
10599: LD_INT 22
10601: PUSH
10602: LD_OWVAR 2
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 2
10613: PUSH
10614: LD_INT 34
10616: PUSH
10617: LD_INT 7
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 34
10626: PUSH
10627: LD_INT 45
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 34
10636: PUSH
10637: LD_INT 28
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 34
10646: PUSH
10647: LD_INT 47
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 69
10669: ST_TO_ADDR
// if not tmp then
10670: LD_VAR 0 2
10674: NOT
10675: IFFALSE 10679
// exit ;
10677: GO 10708
// for i in tmp do
10679: LD_ADDR_VAR 0 1
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: FOR_IN
10690: IFFALSE 10706
// begin SetLives ( i , 0 ) ;
10692: LD_VAR 0 1
10696: PPUSH
10697: LD_INT 0
10699: PPUSH
10700: CALL_OW 234
// end ;
10704: GO 10689
10706: POP
10707: POP
// end ;
10708: PPOPN 2
10710: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10711: LD_EXP 7
10715: PUSH
10716: LD_EXP 13
10720: AND
10721: IFFALSE 10805
10723: GO 10725
10725: DISABLE
10726: LD_INT 0
10728: PPUSH
10729: PPUSH
// begin enable ;
10730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_INT 22
10738: PUSH
10739: LD_OWVAR 2
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 32
10750: PUSH
10751: LD_INT 3
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 69
10766: ST_TO_ADDR
// if not tmp then
10767: LD_VAR 0 2
10771: NOT
10772: IFFALSE 10776
// exit ;
10774: GO 10805
// for i in tmp do
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_VAR 0 2
10785: PUSH
10786: FOR_IN
10787: IFFALSE 10803
// begin SetLives ( i , 0 ) ;
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_INT 0
10796: PPUSH
10797: CALL_OW 234
// end ;
10801: GO 10786
10803: POP
10804: POP
// end ;
10805: PPOPN 2
10807: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10808: LD_EXP 7
10812: PUSH
10813: LD_EXP 10
10817: AND
10818: IFFALSE 10911
10820: GO 10822
10822: DISABLE
10823: LD_INT 0
10825: PPUSH
// begin enable ;
10826: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10827: LD_ADDR_VAR 0 1
10831: PUSH
10832: LD_INT 22
10834: PUSH
10835: LD_OWVAR 2
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 2
10846: PUSH
10847: LD_INT 25
10849: PUSH
10850: LD_INT 5
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 25
10859: PUSH
10860: LD_INT 9
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 25
10869: PUSH
10870: LD_INT 8
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 69
10891: PUSH
10892: FOR_IN
10893: IFFALSE 10909
// begin SetClass ( i , 1 ) ;
10895: LD_VAR 0 1
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 336
// end ;
10907: GO 10892
10909: POP
10910: POP
// end ;
10911: PPOPN 1
10913: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10914: LD_EXP 7
10918: PUSH
10919: LD_EXP 11
10923: AND
10924: PUSH
10925: LD_OWVAR 65
10929: PUSH
10930: LD_INT 7
10932: LESS
10933: AND
10934: IFFALSE 10948
10936: GO 10938
10938: DISABLE
// begin enable ;
10939: ENABLE
// game_speed := 7 ;
10940: LD_ADDR_OWVAR 65
10944: PUSH
10945: LD_INT 7
10947: ST_TO_ADDR
// end ;
10948: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10949: LD_EXP 7
10953: PUSH
10954: LD_EXP 14
10958: AND
10959: IFFALSE 11161
10961: GO 10963
10963: DISABLE
10964: LD_INT 0
10966: PPUSH
10967: PPUSH
10968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10969: LD_ADDR_VAR 0 3
10973: PUSH
10974: LD_INT 81
10976: PUSH
10977: LD_OWVAR 2
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 21
10988: PUSH
10989: LD_INT 1
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PPUSH
11000: CALL_OW 69
11004: ST_TO_ADDR
// if not tmp then
11005: LD_VAR 0 3
11009: NOT
11010: IFFALSE 11014
// exit ;
11012: GO 11161
// if tmp > 5 then
11014: LD_VAR 0 3
11018: PUSH
11019: LD_INT 5
11021: GREATER
11022: IFFALSE 11034
// k := 5 else
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 5
11031: ST_TO_ADDR
11032: GO 11044
// k := tmp ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_VAR 0 3
11043: ST_TO_ADDR
// for i := 1 to k do
11044: LD_ADDR_VAR 0 1
11048: PUSH
11049: DOUBLE
11050: LD_INT 1
11052: DEC
11053: ST_TO_ADDR
11054: LD_VAR 0 2
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11159
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11062: LD_VAR 0 3
11066: PUSH
11067: LD_VAR 0 1
11071: ARRAY
11072: PPUSH
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 4
11080: MOD
11081: PUSH
11082: LD_INT 1
11084: PLUS
11085: PPUSH
11086: CALL_OW 259
11090: PUSH
11091: LD_INT 10
11093: LESS
11094: IFFALSE 11157
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_VAR 0 1
11105: ARRAY
11106: PPUSH
11107: LD_VAR 0 1
11111: PUSH
11112: LD_INT 4
11114: MOD
11115: PUSH
11116: LD_INT 1
11118: PLUS
11119: PPUSH
11120: LD_VAR 0 3
11124: PUSH
11125: LD_VAR 0 1
11129: ARRAY
11130: PPUSH
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 4
11138: MOD
11139: PUSH
11140: LD_INT 1
11142: PLUS
11143: PPUSH
11144: CALL_OW 259
11148: PUSH
11149: LD_INT 1
11151: PLUS
11152: PPUSH
11153: CALL_OW 237
11157: GO 11059
11159: POP
11160: POP
// end ;
11161: PPOPN 3
11163: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11164: LD_EXP 7
11168: PUSH
11169: LD_EXP 15
11173: AND
11174: IFFALSE 11194
11176: GO 11178
11178: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11179: LD_INT 4
11181: PPUSH
11182: LD_OWVAR 2
11186: PPUSH
11187: LD_INT 0
11189: PPUSH
11190: CALL_OW 324
11194: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11195: LD_EXP 7
11199: PUSH
11200: LD_EXP 44
11204: AND
11205: IFFALSE 11225
11207: GO 11209
11209: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11210: LD_INT 19
11212: PPUSH
11213: LD_OWVAR 2
11217: PPUSH
11218: LD_INT 0
11220: PPUSH
11221: CALL_OW 324
11225: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11226: LD_EXP 7
11230: PUSH
11231: LD_EXP 16
11235: AND
11236: IFFALSE 11338
11238: GO 11240
11240: DISABLE
11241: LD_INT 0
11243: PPUSH
11244: PPUSH
// begin enable ;
11245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_OWVAR 2
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: LD_INT 34
11268: PUSH
11269: LD_INT 11
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 34
11278: PUSH
11279: LD_INT 30
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 69
11299: ST_TO_ADDR
// if not tmp then
11300: LD_VAR 0 2
11304: NOT
11305: IFFALSE 11309
// exit ;
11307: GO 11338
// for i in tmp do
11309: LD_ADDR_VAR 0 1
11313: PUSH
11314: LD_VAR 0 2
11318: PUSH
11319: FOR_IN
11320: IFFALSE 11336
// begin SetLives ( i , 0 ) ;
11322: LD_VAR 0 1
11326: PPUSH
11327: LD_INT 0
11329: PPUSH
11330: CALL_OW 234
// end ;
11334: GO 11319
11336: POP
11337: POP
// end ;
11338: PPOPN 2
11340: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11341: LD_EXP 7
11345: PUSH
11346: LD_EXP 17
11350: AND
11351: IFFALSE 11371
11353: GO 11355
11355: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11356: LD_INT 32
11358: PPUSH
11359: LD_OWVAR 2
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 324
11371: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11372: LD_EXP 7
11376: PUSH
11377: LD_EXP 18
11381: AND
11382: IFFALSE 11563
11384: GO 11386
11386: DISABLE
11387: LD_INT 0
11389: PPUSH
11390: PPUSH
11391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11392: LD_ADDR_VAR 0 2
11396: PUSH
11397: LD_INT 22
11399: PUSH
11400: LD_OWVAR 2
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 33
11411: PUSH
11412: LD_INT 3
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 69
11427: ST_TO_ADDR
// if not tmp then
11428: LD_VAR 0 2
11432: NOT
11433: IFFALSE 11437
// exit ;
11435: GO 11563
// side := 0 ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 0
11444: ST_TO_ADDR
// for i := 1 to 8 do
11445: LD_ADDR_VAR 0 1
11449: PUSH
11450: DOUBLE
11451: LD_INT 1
11453: DEC
11454: ST_TO_ADDR
11455: LD_INT 8
11457: PUSH
11458: FOR_TO
11459: IFFALSE 11507
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11461: LD_OWVAR 2
11465: PUSH
11466: LD_VAR 0 1
11470: NONEQUAL
11471: PUSH
11472: LD_OWVAR 2
11476: PPUSH
11477: LD_VAR 0 1
11481: PPUSH
11482: CALL_OW 81
11486: PUSH
11487: LD_INT 2
11489: EQUAL
11490: AND
11491: IFFALSE 11505
// begin side := i ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 1
11502: ST_TO_ADDR
// break ;
11503: GO 11507
// end ;
11505: GO 11458
11507: POP
11508: POP
// if not side then
11509: LD_VAR 0 3
11513: NOT
11514: IFFALSE 11518
// exit ;
11516: GO 11563
// for i := 1 to tmp do
11518: LD_ADDR_VAR 0 1
11522: PUSH
11523: DOUBLE
11524: LD_INT 1
11526: DEC
11527: ST_TO_ADDR
11528: LD_VAR 0 2
11532: PUSH
11533: FOR_TO
11534: IFFALSE 11561
// if Prob ( 60 ) then
11536: LD_INT 60
11538: PPUSH
11539: CALL_OW 13
11543: IFFALSE 11559
// SetSide ( i , side ) ;
11545: LD_VAR 0 1
11549: PPUSH
11550: LD_VAR 0 3
11554: PPUSH
11555: CALL_OW 235
11559: GO 11533
11561: POP
11562: POP
// end ;
11563: PPOPN 3
11565: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11566: LD_EXP 7
11570: PUSH
11571: LD_EXP 20
11575: AND
11576: IFFALSE 11695
11578: GO 11580
11580: DISABLE
11581: LD_INT 0
11583: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11584: LD_ADDR_VAR 0 1
11588: PUSH
11589: LD_INT 22
11591: PUSH
11592: LD_OWVAR 2
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 21
11603: PUSH
11604: LD_INT 1
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 23
11616: PUSH
11617: LD_INT 0
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: PUSH
11638: FOR_IN
11639: IFFALSE 11693
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11641: LD_VAR 0 1
11645: PPUSH
11646: CALL_OW 257
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: LD_INT 3
11659: PUSH
11660: LD_INT 4
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: IN
11669: IFFALSE 11691
// SetClass ( un , rand ( 1 , 4 ) ) ;
11671: LD_VAR 0 1
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: LD_INT 4
11681: PPUSH
11682: CALL_OW 12
11686: PPUSH
11687: CALL_OW 336
11691: GO 11638
11693: POP
11694: POP
// end ;
11695: PPOPN 1
11697: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11698: LD_EXP 7
11702: PUSH
11703: LD_EXP 19
11707: AND
11708: IFFALSE 11787
11710: GO 11712
11712: DISABLE
11713: LD_INT 0
11715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11716: LD_ADDR_VAR 0 1
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_OWVAR 2
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 21
11735: PUSH
11736: LD_INT 3
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: ST_TO_ADDR
// if not tmp then
11752: LD_VAR 0 1
11756: NOT
11757: IFFALSE 11761
// exit ;
11759: GO 11787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11761: LD_VAR 0 1
11765: PUSH
11766: LD_INT 1
11768: PPUSH
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL_OW 12
11778: ARRAY
11779: PPUSH
11780: LD_INT 100
11782: PPUSH
11783: CALL_OW 234
// end ;
11787: PPOPN 1
11789: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11790: LD_EXP 7
11794: PUSH
11795: LD_EXP 21
11799: AND
11800: IFFALSE 11898
11802: GO 11804
11804: DISABLE
11805: LD_INT 0
11807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11808: LD_ADDR_VAR 0 1
11812: PUSH
11813: LD_INT 22
11815: PUSH
11816: LD_OWVAR 2
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 21
11827: PUSH
11828: LD_INT 1
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PPUSH
11839: CALL_OW 69
11843: ST_TO_ADDR
// if not tmp then
11844: LD_VAR 0 1
11848: NOT
11849: IFFALSE 11853
// exit ;
11851: GO 11898
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 1
11860: PPUSH
11861: LD_VAR 0 1
11865: PPUSH
11866: CALL_OW 12
11870: ARRAY
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: LD_INT 4
11877: PPUSH
11878: CALL_OW 12
11882: PPUSH
11883: LD_INT 3000
11885: PPUSH
11886: LD_INT 9000
11888: PPUSH
11889: CALL_OW 12
11893: PPUSH
11894: CALL_OW 492
// end ;
11898: PPOPN 1
11900: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11901: LD_EXP 7
11905: PUSH
11906: LD_EXP 22
11910: AND
11911: IFFALSE 11931
11913: GO 11915
11915: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11916: LD_INT 1
11918: PPUSH
11919: LD_OWVAR 2
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 324
11931: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11932: LD_EXP 7
11936: PUSH
11937: LD_EXP 23
11941: AND
11942: IFFALSE 12025
11944: GO 11946
11946: DISABLE
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: LD_OWVAR 2
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 21
11970: PUSH
11971: LD_INT 3
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: ST_TO_ADDR
// if not tmp then
11987: LD_VAR 0 2
11991: NOT
11992: IFFALSE 11996
// exit ;
11994: GO 12025
// for i in tmp do
11996: LD_ADDR_VAR 0 1
12000: PUSH
12001: LD_VAR 0 2
12005: PUSH
12006: FOR_IN
12007: IFFALSE 12023
// SetBLevel ( i , 10 ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_INT 10
12016: PPUSH
12017: CALL_OW 241
12021: GO 12006
12023: POP
12024: POP
// end ;
12025: PPOPN 2
12027: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12028: LD_EXP 7
12032: PUSH
12033: LD_EXP 24
12037: AND
12038: IFFALSE 12149
12040: GO 12042
12042: DISABLE
12043: LD_INT 0
12045: PPUSH
12046: PPUSH
12047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_OWVAR 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 25
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PPUSH
12079: CALL_OW 69
12083: ST_TO_ADDR
// if not tmp then
12084: LD_VAR 0 3
12088: NOT
12089: IFFALSE 12093
// exit ;
12091: GO 12149
// un := tmp [ rand ( 1 , tmp ) ] ;
12093: LD_ADDR_VAR 0 2
12097: PUSH
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 1
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: CALL_OW 12
12115: ARRAY
12116: ST_TO_ADDR
// if Crawls ( un ) then
12117: LD_VAR 0 2
12121: PPUSH
12122: CALL_OW 318
12126: IFFALSE 12137
// ComWalk ( un ) ;
12128: LD_VAR 0 2
12132: PPUSH
12133: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12137: LD_VAR 0 2
12141: PPUSH
12142: LD_INT 5
12144: PPUSH
12145: CALL_OW 336
// end ;
12149: PPOPN 3
12151: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12152: LD_EXP 7
12156: PUSH
12157: LD_EXP 25
12161: AND
12162: PUSH
12163: LD_OWVAR 67
12167: PUSH
12168: LD_INT 4
12170: LESS
12171: AND
12172: IFFALSE 12191
12174: GO 12176
12176: DISABLE
// begin Difficulty := Difficulty + 1 ;
12177: LD_ADDR_OWVAR 67
12181: PUSH
12182: LD_OWVAR 67
12186: PUSH
12187: LD_INT 1
12189: PLUS
12190: ST_TO_ADDR
// end ;
12191: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12192: LD_EXP 7
12196: PUSH
12197: LD_EXP 26
12201: AND
12202: IFFALSE 12305
12204: GO 12206
12206: DISABLE
12207: LD_INT 0
12209: PPUSH
// begin for i := 1 to 5 do
12210: LD_ADDR_VAR 0 1
12214: PUSH
12215: DOUBLE
12216: LD_INT 1
12218: DEC
12219: ST_TO_ADDR
12220: LD_INT 5
12222: PUSH
12223: FOR_TO
12224: IFFALSE 12303
// begin uc_nation := nation_nature ;
12226: LD_ADDR_OWVAR 21
12230: PUSH
12231: LD_INT 0
12233: ST_TO_ADDR
// uc_side := 0 ;
12234: LD_ADDR_OWVAR 20
12238: PUSH
12239: LD_INT 0
12241: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12242: LD_ADDR_OWVAR 29
12246: PUSH
12247: LD_INT 12
12249: PUSH
12250: LD_INT 12
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: ST_TO_ADDR
// hc_agressivity := 20 ;
12257: LD_ADDR_OWVAR 35
12261: PUSH
12262: LD_INT 20
12264: ST_TO_ADDR
// hc_class := class_tiger ;
12265: LD_ADDR_OWVAR 28
12269: PUSH
12270: LD_INT 14
12272: ST_TO_ADDR
// hc_gallery :=  ;
12273: LD_ADDR_OWVAR 33
12277: PUSH
12278: LD_STRING 
12280: ST_TO_ADDR
// hc_name :=  ;
12281: LD_ADDR_OWVAR 26
12285: PUSH
12286: LD_STRING 
12288: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12289: CALL_OW 44
12293: PPUSH
12294: LD_INT 0
12296: PPUSH
12297: CALL_OW 51
// end ;
12301: GO 12223
12303: POP
12304: POP
// end ;
12305: PPOPN 1
12307: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12308: LD_EXP 7
12312: PUSH
12313: LD_EXP 27
12317: AND
12318: IFFALSE 12327
12320: GO 12322
12322: DISABLE
// StreamSibBomb ;
12323: CALL 12328 0 0
12327: END
// export function StreamSibBomb ; var i , x , y ; begin
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
// result := false ;
12334: LD_ADDR_VAR 0 1
12338: PUSH
12339: LD_INT 0
12341: ST_TO_ADDR
// for i := 1 to 16 do
12342: LD_ADDR_VAR 0 2
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_INT 16
12354: PUSH
12355: FOR_TO
12356: IFFALSE 12555
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12358: LD_ADDR_VAR 0 3
12362: PUSH
12363: LD_INT 10
12365: PUSH
12366: LD_INT 20
12368: PUSH
12369: LD_INT 30
12371: PUSH
12372: LD_INT 40
12374: PUSH
12375: LD_INT 50
12377: PUSH
12378: LD_INT 60
12380: PUSH
12381: LD_INT 70
12383: PUSH
12384: LD_INT 80
12386: PUSH
12387: LD_INT 90
12389: PUSH
12390: LD_INT 100
12392: PUSH
12393: LD_INT 110
12395: PUSH
12396: LD_INT 120
12398: PUSH
12399: LD_INT 130
12401: PUSH
12402: LD_INT 140
12404: PUSH
12405: LD_INT 150
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_INT 15
12430: PPUSH
12431: CALL_OW 12
12435: ARRAY
12436: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12437: LD_ADDR_VAR 0 4
12441: PUSH
12442: LD_INT 10
12444: PUSH
12445: LD_INT 20
12447: PUSH
12448: LD_INT 30
12450: PUSH
12451: LD_INT 40
12453: PUSH
12454: LD_INT 50
12456: PUSH
12457: LD_INT 60
12459: PUSH
12460: LD_INT 70
12462: PUSH
12463: LD_INT 80
12465: PUSH
12466: LD_INT 90
12468: PUSH
12469: LD_INT 100
12471: PUSH
12472: LD_INT 110
12474: PUSH
12475: LD_INT 120
12477: PUSH
12478: LD_INT 130
12480: PUSH
12481: LD_INT 140
12483: PUSH
12484: LD_INT 150
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 1
12506: PPUSH
12507: LD_INT 15
12509: PPUSH
12510: CALL_OW 12
12514: ARRAY
12515: ST_TO_ADDR
// if ValidHex ( x , y ) then
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_VAR 0 4
12525: PPUSH
12526: CALL_OW 488
12530: IFFALSE 12553
// begin result := [ x , y ] ;
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: LD_VAR 0 3
12541: PUSH
12542: LD_VAR 0 4
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// break ;
12551: GO 12555
// end ; end ;
12553: GO 12355
12555: POP
12556: POP
// if result then
12557: LD_VAR 0 1
12561: IFFALSE 12621
// begin ToLua ( playSibBomb() ) ;
12563: LD_STRING playSibBomb()
12565: PPUSH
12566: CALL_OW 559
// wait ( 0 0$14 ) ;
12570: LD_INT 490
12572: PPUSH
12573: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12577: LD_VAR 0 1
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: LD_VAR 0 1
12590: PUSH
12591: LD_INT 2
12593: ARRAY
12594: PPUSH
12595: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12599: LD_VAR 0 1
12603: PUSH
12604: LD_INT 1
12606: ARRAY
12607: PPUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_INT 2
12615: ARRAY
12616: PPUSH
12617: CALL_OW 429
// end ; end ;
12621: LD_VAR 0 1
12625: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12626: LD_EXP 7
12630: PUSH
12631: LD_EXP 29
12635: AND
12636: IFFALSE 12648
12638: GO 12640
12640: DISABLE
// YouLost (  ) ;
12641: LD_STRING 
12643: PPUSH
12644: CALL_OW 104
12648: END
// every 0 0$1 trigger StreamModeActive and sFog do
12649: LD_EXP 7
12653: PUSH
12654: LD_EXP 28
12658: AND
12659: IFFALSE 12673
12661: GO 12663
12663: DISABLE
// FogOff ( your_side ) ;
12664: LD_OWVAR 2
12668: PPUSH
12669: CALL_OW 344
12673: END
// every 0 0$1 trigger StreamModeActive and sSun do
12674: LD_EXP 7
12678: PUSH
12679: LD_EXP 30
12683: AND
12684: IFFALSE 12712
12686: GO 12688
12688: DISABLE
// begin solar_recharge_percent := 0 ;
12689: LD_ADDR_OWVAR 79
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12697: LD_INT 10500
12699: PPUSH
12700: CALL_OW 67
// solar_recharge_percent := 100 ;
12704: LD_ADDR_OWVAR 79
12708: PUSH
12709: LD_INT 100
12711: ST_TO_ADDR
// end ;
12712: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12713: LD_EXP 7
12717: PUSH
12718: LD_EXP 31
12722: AND
12723: IFFALSE 12962
12725: GO 12727
12727: DISABLE
12728: LD_INT 0
12730: PPUSH
12731: PPUSH
12732: PPUSH
// begin tmp := [ ] ;
12733: LD_ADDR_VAR 0 3
12737: PUSH
12738: EMPTY
12739: ST_TO_ADDR
// for i := 1 to 6 do
12740: LD_ADDR_VAR 0 1
12744: PUSH
12745: DOUBLE
12746: LD_INT 1
12748: DEC
12749: ST_TO_ADDR
12750: LD_INT 6
12752: PUSH
12753: FOR_TO
12754: IFFALSE 12859
// begin uc_nation := nation_nature ;
12756: LD_ADDR_OWVAR 21
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// uc_side := 0 ;
12764: LD_ADDR_OWVAR 20
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12772: LD_ADDR_OWVAR 29
12776: PUSH
12777: LD_INT 12
12779: PUSH
12780: LD_INT 12
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: ST_TO_ADDR
// hc_agressivity := 20 ;
12787: LD_ADDR_OWVAR 35
12791: PUSH
12792: LD_INT 20
12794: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12795: LD_ADDR_OWVAR 28
12799: PUSH
12800: LD_INT 17
12802: ST_TO_ADDR
// hc_gallery :=  ;
12803: LD_ADDR_OWVAR 33
12807: PUSH
12808: LD_STRING 
12810: ST_TO_ADDR
// hc_name :=  ;
12811: LD_ADDR_OWVAR 26
12815: PUSH
12816: LD_STRING 
12818: ST_TO_ADDR
// un := CreateHuman ;
12819: LD_ADDR_VAR 0 2
12823: PUSH
12824: CALL_OW 44
12828: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12829: LD_VAR 0 2
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 51
// tmp := tmp ^ un ;
12841: LD_ADDR_VAR 0 3
12845: PUSH
12846: LD_VAR 0 3
12850: PUSH
12851: LD_VAR 0 2
12855: ADD
12856: ST_TO_ADDR
// end ;
12857: GO 12753
12859: POP
12860: POP
// repeat wait ( 0 0$1 ) ;
12861: LD_INT 35
12863: PPUSH
12864: CALL_OW 67
// for un in tmp do
12868: LD_ADDR_VAR 0 2
12872: PUSH
12873: LD_VAR 0 3
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12953
// begin if IsDead ( un ) then
12881: LD_VAR 0 2
12885: PPUSH
12886: CALL_OW 301
12890: IFFALSE 12910
// begin tmp := tmp diff un ;
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_VAR 0 3
12901: PUSH
12902: LD_VAR 0 2
12906: DIFF
12907: ST_TO_ADDR
// continue ;
12908: GO 12878
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12910: LD_VAR 0 2
12914: PPUSH
12915: LD_INT 3
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 0
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: PPUSH
12937: LD_VAR 0 2
12941: PPUSH
12942: CALL_OW 74
12946: PPUSH
12947: CALL_OW 115
// end ;
12951: GO 12878
12953: POP
12954: POP
// until not tmp ;
12955: LD_VAR 0 3
12959: NOT
12960: IFFALSE 12861
// end ;
12962: PPOPN 3
12964: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12965: LD_EXP 7
12969: PUSH
12970: LD_EXP 32
12974: AND
12975: IFFALSE 13029
12977: GO 12979
12979: DISABLE
// begin ToLua ( displayTroll(); ) ;
12980: LD_STRING displayTroll();
12982: PPUSH
12983: CALL_OW 559
// wait ( 3 3$00 ) ;
12987: LD_INT 6300
12989: PPUSH
12990: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12994: LD_STRING hideTroll();
12996: PPUSH
12997: CALL_OW 559
// wait ( 1 1$00 ) ;
13001: LD_INT 2100
13003: PPUSH
13004: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13008: LD_STRING displayTroll();
13010: PPUSH
13011: CALL_OW 559
// wait ( 1 1$00 ) ;
13015: LD_INT 2100
13017: PPUSH
13018: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13022: LD_STRING hideTroll();
13024: PPUSH
13025: CALL_OW 559
// end ;
13029: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13030: LD_EXP 7
13034: PUSH
13035: LD_EXP 33
13039: AND
13040: IFFALSE 13103
13042: GO 13044
13044: DISABLE
13045: LD_INT 0
13047: PPUSH
// begin p := 0 ;
13048: LD_ADDR_VAR 0 1
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// repeat game_speed := 1 ;
13056: LD_ADDR_OWVAR 65
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13064: LD_INT 35
13066: PPUSH
13067: CALL_OW 67
// p := p + 1 ;
13071: LD_ADDR_VAR 0 1
13075: PUSH
13076: LD_VAR 0 1
13080: PUSH
13081: LD_INT 1
13083: PLUS
13084: ST_TO_ADDR
// until p >= 60 ;
13085: LD_VAR 0 1
13089: PUSH
13090: LD_INT 60
13092: GREATEREQUAL
13093: IFFALSE 13056
// game_speed := 4 ;
13095: LD_ADDR_OWVAR 65
13099: PUSH
13100: LD_INT 4
13102: ST_TO_ADDR
// end ;
13103: PPOPN 1
13105: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13106: LD_EXP 7
13110: PUSH
13111: LD_EXP 34
13115: AND
13116: IFFALSE 13262
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
13124: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13125: LD_ADDR_VAR 0 1
13129: PUSH
13130: LD_INT 22
13132: PUSH
13133: LD_OWVAR 2
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 2
13144: PUSH
13145: LD_INT 30
13147: PUSH
13148: LD_INT 0
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 30
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: ST_TO_ADDR
// if not depot then
13179: LD_VAR 0 1
13183: NOT
13184: IFFALSE 13188
// exit ;
13186: GO 13262
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_VAR 0 1
13197: PUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL_OW 12
13210: ARRAY
13211: PPUSH
13212: CALL_OW 274
13216: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13217: LD_VAR 0 2
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: LD_INT 0
13227: PPUSH
13228: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13232: LD_VAR 0 2
13236: PPUSH
13237: LD_INT 2
13239: PPUSH
13240: LD_INT 0
13242: PPUSH
13243: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13247: LD_VAR 0 2
13251: PPUSH
13252: LD_INT 3
13254: PPUSH
13255: LD_INT 0
13257: PPUSH
13258: CALL_OW 277
// end ;
13262: PPOPN 2
13264: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13265: LD_EXP 7
13269: PUSH
13270: LD_EXP 35
13274: AND
13275: IFFALSE 13372
13277: GO 13279
13279: DISABLE
13280: LD_INT 0
13282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13283: LD_ADDR_VAR 0 1
13287: PUSH
13288: LD_INT 22
13290: PUSH
13291: LD_OWVAR 2
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 21
13302: PUSH
13303: LD_INT 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 3
13312: PUSH
13313: LD_INT 23
13315: PUSH
13316: LD_INT 0
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: ST_TO_ADDR
// if not tmp then
13337: LD_VAR 0 1
13341: NOT
13342: IFFALSE 13346
// exit ;
13344: GO 13372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13346: LD_VAR 0 1
13350: PUSH
13351: LD_INT 1
13353: PPUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 12
13363: ARRAY
13364: PPUSH
13365: LD_INT 200
13367: PPUSH
13368: CALL_OW 234
// end ;
13372: PPOPN 1
13374: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13375: LD_EXP 7
13379: PUSH
13380: LD_EXP 36
13384: AND
13385: IFFALSE 13464
13387: GO 13389
13389: DISABLE
13390: LD_INT 0
13392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13393: LD_ADDR_VAR 0 1
13397: PUSH
13398: LD_INT 22
13400: PUSH
13401: LD_OWVAR 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 2
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PPUSH
13424: CALL_OW 69
13428: ST_TO_ADDR
// if not tmp then
13429: LD_VAR 0 1
13433: NOT
13434: IFFALSE 13438
// exit ;
13436: GO 13464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13438: LD_VAR 0 1
13442: PUSH
13443: LD_INT 1
13445: PPUSH
13446: LD_VAR 0 1
13450: PPUSH
13451: CALL_OW 12
13455: ARRAY
13456: PPUSH
13457: LD_INT 60
13459: PPUSH
13460: CALL_OW 234
// end ;
13464: PPOPN 1
13466: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13467: LD_EXP 7
13471: PUSH
13472: LD_EXP 37
13476: AND
13477: IFFALSE 13576
13479: GO 13481
13481: DISABLE
13482: LD_INT 0
13484: PPUSH
13485: PPUSH
// begin enable ;
13486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13487: LD_ADDR_VAR 0 1
13491: PUSH
13492: LD_INT 22
13494: PUSH
13495: LD_OWVAR 2
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 61
13506: PUSH
13507: EMPTY
13508: LIST
13509: PUSH
13510: LD_INT 33
13512: PUSH
13513: LD_INT 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: PPUSH
13525: CALL_OW 69
13529: ST_TO_ADDR
// if not tmp then
13530: LD_VAR 0 1
13534: NOT
13535: IFFALSE 13539
// exit ;
13537: GO 13576
// for i in tmp do
13539: LD_ADDR_VAR 0 2
13543: PUSH
13544: LD_VAR 0 1
13548: PUSH
13549: FOR_IN
13550: IFFALSE 13574
// if IsControledBy ( i ) then
13552: LD_VAR 0 2
13556: PPUSH
13557: CALL_OW 312
13561: IFFALSE 13572
// ComUnlink ( i ) ;
13563: LD_VAR 0 2
13567: PPUSH
13568: CALL_OW 136
13572: GO 13549
13574: POP
13575: POP
// end ;
13576: PPOPN 2
13578: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13579: LD_EXP 7
13583: PUSH
13584: LD_EXP 38
13588: AND
13589: IFFALSE 13729
13591: GO 13593
13593: DISABLE
13594: LD_INT 0
13596: PPUSH
13597: PPUSH
// begin ToLua ( displayPowell(); ) ;
13598: LD_STRING displayPowell();
13600: PPUSH
13601: CALL_OW 559
// uc_side := 0 ;
13605: LD_ADDR_OWVAR 20
13609: PUSH
13610: LD_INT 0
13612: ST_TO_ADDR
// uc_nation := 2 ;
13613: LD_ADDR_OWVAR 21
13617: PUSH
13618: LD_INT 2
13620: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13621: LD_ADDR_OWVAR 37
13625: PUSH
13626: LD_INT 14
13628: ST_TO_ADDR
// vc_engine := engine_siberite ;
13629: LD_ADDR_OWVAR 39
13633: PUSH
13634: LD_INT 3
13636: ST_TO_ADDR
// vc_control := control_apeman ;
13637: LD_ADDR_OWVAR 38
13641: PUSH
13642: LD_INT 5
13644: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13645: LD_ADDR_OWVAR 40
13649: PUSH
13650: LD_INT 29
13652: ST_TO_ADDR
// un := CreateVehicle ;
13653: LD_ADDR_VAR 0 2
13657: PUSH
13658: CALL_OW 45
13662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13663: LD_VAR 0 2
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13675: LD_INT 35
13677: PPUSH
13678: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13682: LD_VAR 0 2
13686: PPUSH
13687: LD_INT 22
13689: PUSH
13690: LD_OWVAR 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PPUSH
13699: CALL_OW 69
13703: PPUSH
13704: LD_VAR 0 2
13708: PPUSH
13709: CALL_OW 74
13713: PPUSH
13714: CALL_OW 115
// until IsDead ( un ) ;
13718: LD_VAR 0 2
13722: PPUSH
13723: CALL_OW 301
13727: IFFALSE 13675
// end ;
13729: PPOPN 2
13731: END
// every 0 0$1 trigger StreamModeActive and sStu do
13732: LD_EXP 7
13736: PUSH
13737: LD_EXP 46
13741: AND
13742: IFFALSE 13758
13744: GO 13746
13746: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13747: LD_STRING displayStucuk();
13749: PPUSH
13750: CALL_OW 559
// ResetFog ;
13754: CALL_OW 335
// end ;
13758: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13759: LD_EXP 7
13763: PUSH
13764: LD_EXP 39
13768: AND
13769: IFFALSE 13910
13771: GO 13773
13773: DISABLE
13774: LD_INT 0
13776: PPUSH
13777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_OWVAR 2
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 21
13797: PUSH
13798: LD_INT 1
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: ST_TO_ADDR
// if not tmp then
13814: LD_VAR 0 2
13818: NOT
13819: IFFALSE 13823
// exit ;
13821: GO 13910
// un := tmp [ rand ( 1 , tmp ) ] ;
13823: LD_ADDR_VAR 0 1
13827: PUSH
13828: LD_VAR 0 2
13832: PUSH
13833: LD_INT 1
13835: PPUSH
13836: LD_VAR 0 2
13840: PPUSH
13841: CALL_OW 12
13845: ARRAY
13846: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13847: LD_VAR 0 1
13851: PPUSH
13852: LD_INT 0
13854: PPUSH
13855: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13859: LD_VAR 0 1
13863: PPUSH
13864: LD_OWVAR 3
13868: PUSH
13869: LD_VAR 0 1
13873: DIFF
13874: PPUSH
13875: LD_VAR 0 1
13879: PPUSH
13880: CALL_OW 74
13884: PPUSH
13885: CALL_OW 115
// wait ( 0 0$20 ) ;
13889: LD_INT 700
13891: PPUSH
13892: CALL_OW 67
// SetSide ( un , your_side ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_OWVAR 2
13905: PPUSH
13906: CALL_OW 235
// end ;
13910: PPOPN 2
13912: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13913: LD_EXP 7
13917: PUSH
13918: LD_EXP 40
13922: AND
13923: IFFALSE 14029
13925: GO 13927
13927: DISABLE
13928: LD_INT 0
13930: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_OWVAR 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: LD_INT 30
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 30
13963: PUSH
13964: LD_INT 1
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PPUSH
13980: CALL_OW 69
13984: ST_TO_ADDR
// if not depot then
13985: LD_VAR 0 1
13989: NOT
13990: IFFALSE 13994
// exit ;
13992: GO 14029
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13994: LD_VAR 0 1
13998: PUSH
13999: LD_INT 1
14001: ARRAY
14002: PPUSH
14003: CALL_OW 250
14007: PPUSH
14008: LD_VAR 0 1
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PPUSH
14017: CALL_OW 251
14021: PPUSH
14022: LD_INT 70
14024: PPUSH
14025: CALL_OW 495
// end ;
14029: PPOPN 1
14031: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14032: LD_EXP 7
14036: PUSH
14037: LD_EXP 41
14041: AND
14042: IFFALSE 14253
14044: GO 14046
14046: DISABLE
14047: LD_INT 0
14049: PPUSH
14050: PPUSH
14051: PPUSH
14052: PPUSH
14053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14054: LD_ADDR_VAR 0 5
14058: PUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 21
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PPUSH
14085: CALL_OW 69
14089: ST_TO_ADDR
// if not tmp then
14090: LD_VAR 0 5
14094: NOT
14095: IFFALSE 14099
// exit ;
14097: GO 14253
// for i in tmp do
14099: LD_ADDR_VAR 0 1
14103: PUSH
14104: LD_VAR 0 5
14108: PUSH
14109: FOR_IN
14110: IFFALSE 14251
// begin d := rand ( 0 , 5 ) ;
14112: LD_ADDR_VAR 0 4
14116: PUSH
14117: LD_INT 0
14119: PPUSH
14120: LD_INT 5
14122: PPUSH
14123: CALL_OW 12
14127: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 250
14142: PPUSH
14143: LD_VAR 0 4
14147: PPUSH
14148: LD_INT 3
14150: PPUSH
14151: LD_INT 12
14153: PPUSH
14154: CALL_OW 12
14158: PPUSH
14159: CALL_OW 272
14163: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 251
14178: PPUSH
14179: LD_VAR 0 4
14183: PPUSH
14184: LD_INT 3
14186: PPUSH
14187: LD_INT 12
14189: PPUSH
14190: CALL_OW 12
14194: PPUSH
14195: CALL_OW 273
14199: ST_TO_ADDR
// if ValidHex ( x , y ) then
14200: LD_VAR 0 2
14204: PPUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: CALL_OW 488
14214: IFFALSE 14249
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14216: LD_VAR 0 1
14220: PPUSH
14221: LD_VAR 0 2
14225: PPUSH
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_INT 3
14233: PPUSH
14234: LD_INT 6
14236: PPUSH
14237: CALL_OW 12
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 483
// end ;
14249: GO 14109
14251: POP
14252: POP
// end ;
14253: PPOPN 5
14255: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14256: LD_EXP 7
14260: PUSH
14261: LD_EXP 42
14265: AND
14266: IFFALSE 14360
14268: GO 14270
14270: DISABLE
14271: LD_INT 0
14273: PPUSH
14274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14275: LD_ADDR_VAR 0 2
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_OWVAR 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 32
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 2
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: PPUSH
14317: CALL_OW 69
14321: ST_TO_ADDR
// if not tmp then
14322: LD_VAR 0 2
14326: NOT
14327: IFFALSE 14331
// exit ;
14329: GO 14360
// for i in tmp do
14331: LD_ADDR_VAR 0 1
14335: PUSH
14336: LD_VAR 0 2
14340: PUSH
14341: FOR_IN
14342: IFFALSE 14358
// SetFuel ( i , 0 ) ;
14344: LD_VAR 0 1
14348: PPUSH
14349: LD_INT 0
14351: PPUSH
14352: CALL_OW 240
14356: GO 14341
14358: POP
14359: POP
// end ;
14360: PPOPN 2
14362: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14363: LD_EXP 7
14367: PUSH
14368: LD_EXP 43
14372: AND
14373: IFFALSE 14439
14375: GO 14377
14377: DISABLE
14378: LD_INT 0
14380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14381: LD_ADDR_VAR 0 1
14385: PUSH
14386: LD_INT 22
14388: PUSH
14389: LD_OWVAR 2
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 30
14400: PUSH
14401: LD_INT 29
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PPUSH
14412: CALL_OW 69
14416: ST_TO_ADDR
// if not tmp then
14417: LD_VAR 0 1
14421: NOT
14422: IFFALSE 14426
// exit ;
14424: GO 14439
// DestroyUnit ( tmp [ 1 ] ) ;
14426: LD_VAR 0 1
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 65
// end ;
14439: PPOPN 1
14441: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14442: LD_EXP 7
14446: PUSH
14447: LD_EXP 45
14451: AND
14452: IFFALSE 14581
14454: GO 14456
14456: DISABLE
14457: LD_INT 0
14459: PPUSH
// begin uc_side := 0 ;
14460: LD_ADDR_OWVAR 20
14464: PUSH
14465: LD_INT 0
14467: ST_TO_ADDR
// uc_nation := nation_arabian ;
14468: LD_ADDR_OWVAR 21
14472: PUSH
14473: LD_INT 2
14475: ST_TO_ADDR
// hc_gallery :=  ;
14476: LD_ADDR_OWVAR 33
14480: PUSH
14481: LD_STRING 
14483: ST_TO_ADDR
// hc_name :=  ;
14484: LD_ADDR_OWVAR 26
14488: PUSH
14489: LD_STRING 
14491: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14492: LD_INT 1
14494: PPUSH
14495: LD_INT 11
14497: PPUSH
14498: LD_INT 10
14500: PPUSH
14501: CALL_OW 380
// un := CreateHuman ;
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: CALL_OW 44
14514: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14515: LD_VAR 0 1
14519: PPUSH
14520: LD_INT 1
14522: PPUSH
14523: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14527: LD_INT 35
14529: PPUSH
14530: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14534: LD_VAR 0 1
14538: PPUSH
14539: LD_INT 22
14541: PUSH
14542: LD_OWVAR 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PPUSH
14551: CALL_OW 69
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 74
14565: PPUSH
14566: CALL_OW 115
// until IsDead ( un ) ;
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 301
14579: IFFALSE 14527
// end ;
14581: PPOPN 1
14583: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14584: LD_EXP 7
14588: PUSH
14589: LD_EXP 47
14593: AND
14594: IFFALSE 14606
14596: GO 14598
14598: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14599: LD_STRING earthquake(getX(game), 0, 32)
14601: PPUSH
14602: CALL_OW 559
14606: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14607: LD_EXP 7
14611: PUSH
14612: LD_EXP 48
14616: AND
14617: IFFALSE 14708
14619: GO 14621
14621: DISABLE
14622: LD_INT 0
14624: PPUSH
// begin enable ;
14625: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14626: LD_ADDR_VAR 0 1
14630: PUSH
14631: LD_INT 22
14633: PUSH
14634: LD_OWVAR 2
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 21
14645: PUSH
14646: LD_INT 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 33
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: PPUSH
14668: CALL_OW 69
14672: ST_TO_ADDR
// if not tmp then
14673: LD_VAR 0 1
14677: NOT
14678: IFFALSE 14682
// exit ;
14680: GO 14708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14682: LD_VAR 0 1
14686: PUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 12
14699: ARRAY
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: CALL_OW 234
// end ;
14708: PPOPN 1
14710: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14711: LD_EXP 7
14715: PUSH
14716: LD_EXP 49
14720: AND
14721: IFFALSE 14862
14723: GO 14725
14725: DISABLE
14726: LD_INT 0
14728: PPUSH
14729: PPUSH
14730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14731: LD_ADDR_VAR 0 3
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 25
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: ST_TO_ADDR
// if not tmp then
14767: LD_VAR 0 3
14771: NOT
14772: IFFALSE 14776
// exit ;
14774: GO 14862
// un := tmp [ rand ( 1 , tmp ) ] ;
14776: LD_ADDR_VAR 0 2
14780: PUSH
14781: LD_VAR 0 3
14785: PUSH
14786: LD_INT 1
14788: PPUSH
14789: LD_VAR 0 3
14793: PPUSH
14794: CALL_OW 12
14798: ARRAY
14799: ST_TO_ADDR
// if Crawls ( un ) then
14800: LD_VAR 0 2
14804: PPUSH
14805: CALL_OW 318
14809: IFFALSE 14820
// ComWalk ( un ) ;
14811: LD_VAR 0 2
14815: PPUSH
14816: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14820: LD_VAR 0 2
14824: PPUSH
14825: LD_INT 9
14827: PPUSH
14828: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14832: LD_INT 28
14834: PPUSH
14835: LD_OWVAR 2
14839: PPUSH
14840: LD_INT 2
14842: PPUSH
14843: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14847: LD_INT 29
14849: PPUSH
14850: LD_OWVAR 2
14854: PPUSH
14855: LD_INT 2
14857: PPUSH
14858: CALL_OW 322
// end ;
14862: PPOPN 3
14864: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14865: LD_EXP 7
14869: PUSH
14870: LD_EXP 50
14874: AND
14875: IFFALSE 14986
14877: GO 14879
14879: DISABLE
14880: LD_INT 0
14882: PPUSH
14883: PPUSH
14884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14885: LD_ADDR_VAR 0 3
14889: PUSH
14890: LD_INT 22
14892: PUSH
14893: LD_OWVAR 2
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 25
14904: PUSH
14905: LD_INT 1
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PPUSH
14916: CALL_OW 69
14920: ST_TO_ADDR
// if not tmp then
14921: LD_VAR 0 3
14925: NOT
14926: IFFALSE 14930
// exit ;
14928: GO 14986
// un := tmp [ rand ( 1 , tmp ) ] ;
14930: LD_ADDR_VAR 0 2
14934: PUSH
14935: LD_VAR 0 3
14939: PUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: CALL_OW 12
14952: ARRAY
14953: ST_TO_ADDR
// if Crawls ( un ) then
14954: LD_VAR 0 2
14958: PPUSH
14959: CALL_OW 318
14963: IFFALSE 14974
// ComWalk ( un ) ;
14965: LD_VAR 0 2
14969: PPUSH
14970: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14974: LD_VAR 0 2
14978: PPUSH
14979: LD_INT 8
14981: PPUSH
14982: CALL_OW 336
// end ;
14986: PPOPN 3
14988: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14989: LD_EXP 7
14993: PUSH
14994: LD_EXP 51
14998: AND
14999: IFFALSE 15143
15001: GO 15003
15003: DISABLE
15004: LD_INT 0
15006: PPUSH
15007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15008: LD_ADDR_VAR 0 2
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_OWVAR 2
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 21
15027: PUSH
15028: LD_INT 2
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 34
15040: PUSH
15041: LD_INT 12
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 34
15050: PUSH
15051: LD_INT 51
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 34
15060: PUSH
15061: LD_INT 32
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: ST_TO_ADDR
// if not tmp then
15084: LD_VAR 0 2
15088: NOT
15089: IFFALSE 15093
// exit ;
15091: GO 15143
// for i in tmp do
15093: LD_ADDR_VAR 0 1
15097: PUSH
15098: LD_VAR 0 2
15102: PUSH
15103: FOR_IN
15104: IFFALSE 15141
// if GetCargo ( i , mat_artifact ) = 0 then
15106: LD_VAR 0 1
15110: PPUSH
15111: LD_INT 4
15113: PPUSH
15114: CALL_OW 289
15118: PUSH
15119: LD_INT 0
15121: EQUAL
15122: IFFALSE 15139
// SetCargo ( i , mat_siberit , 100 ) ;
15124: LD_VAR 0 1
15128: PPUSH
15129: LD_INT 3
15131: PPUSH
15132: LD_INT 100
15134: PPUSH
15135: CALL_OW 290
15139: GO 15103
15141: POP
15142: POP
// end ;
15143: PPOPN 2
15145: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15146: LD_EXP 7
15150: PUSH
15151: LD_EXP 52
15155: AND
15156: IFFALSE 15339
15158: GO 15160
15160: DISABLE
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_INT 22
15172: PUSH
15173: LD_OWVAR 2
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PPUSH
15182: CALL_OW 69
15186: ST_TO_ADDR
// if not tmp then
15187: LD_VAR 0 2
15191: NOT
15192: IFFALSE 15196
// exit ;
15194: GO 15339
// for i := 1 to 2 do
15196: LD_ADDR_VAR 0 1
15200: PUSH
15201: DOUBLE
15202: LD_INT 1
15204: DEC
15205: ST_TO_ADDR
15206: LD_INT 2
15208: PUSH
15209: FOR_TO
15210: IFFALSE 15337
// begin uc_side := your_side ;
15212: LD_ADDR_OWVAR 20
15216: PUSH
15217: LD_OWVAR 2
15221: ST_TO_ADDR
// uc_nation := nation_american ;
15222: LD_ADDR_OWVAR 21
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// vc_chassis := us_morphling ;
15230: LD_ADDR_OWVAR 37
15234: PUSH
15235: LD_INT 5
15237: ST_TO_ADDR
// vc_engine := engine_siberite ;
15238: LD_ADDR_OWVAR 39
15242: PUSH
15243: LD_INT 3
15245: ST_TO_ADDR
// vc_control := control_computer ;
15246: LD_ADDR_OWVAR 38
15250: PUSH
15251: LD_INT 3
15253: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15254: LD_ADDR_OWVAR 40
15258: PUSH
15259: LD_INT 10
15261: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15262: LD_VAR 0 2
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: CALL_OW 310
15275: NOT
15276: IFFALSE 15323
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15278: CALL_OW 45
15282: PPUSH
15283: LD_VAR 0 2
15287: PUSH
15288: LD_INT 1
15290: ARRAY
15291: PPUSH
15292: CALL_OW 250
15296: PPUSH
15297: LD_VAR 0 2
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PPUSH
15306: CALL_OW 251
15310: PPUSH
15311: LD_INT 12
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 50
15321: GO 15335
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15323: CALL_OW 45
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 51
// end ;
15335: GO 15209
15337: POP
15338: POP
// end ;
15339: PPOPN 2
15341: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15342: LD_EXP 7
15346: PUSH
15347: LD_EXP 53
15351: AND
15352: IFFALSE 15574
15354: GO 15356
15356: DISABLE
15357: LD_INT 0
15359: PPUSH
15360: PPUSH
15361: PPUSH
15362: PPUSH
15363: PPUSH
15364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15365: LD_ADDR_VAR 0 6
15369: PUSH
15370: LD_INT 22
15372: PUSH
15373: LD_OWVAR 2
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 3
15394: PUSH
15395: LD_INT 23
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: ST_TO_ADDR
// if not tmp then
15419: LD_VAR 0 6
15423: NOT
15424: IFFALSE 15428
// exit ;
15426: GO 15574
// s1 := rand ( 1 , 4 ) ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: LD_INT 1
15435: PPUSH
15436: LD_INT 4
15438: PPUSH
15439: CALL_OW 12
15443: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15444: LD_ADDR_VAR 0 4
15448: PUSH
15449: LD_VAR 0 6
15453: PUSH
15454: LD_INT 1
15456: ARRAY
15457: PPUSH
15458: LD_VAR 0 2
15462: PPUSH
15463: CALL_OW 259
15467: ST_TO_ADDR
// if s1 = 1 then
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 1
15475: EQUAL
15476: IFFALSE 15496
// s2 := rand ( 2 , 4 ) else
15478: LD_ADDR_VAR 0 3
15482: PUSH
15483: LD_INT 2
15485: PPUSH
15486: LD_INT 4
15488: PPUSH
15489: CALL_OW 12
15493: ST_TO_ADDR
15494: GO 15504
// s2 := 1 ;
15496: LD_ADDR_VAR 0 3
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15504: LD_ADDR_VAR 0 5
15508: PUSH
15509: LD_VAR 0 6
15513: PUSH
15514: LD_INT 1
15516: ARRAY
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: CALL_OW 259
15527: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15528: LD_VAR 0 6
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PPUSH
15537: LD_VAR 0 2
15541: PPUSH
15542: LD_VAR 0 5
15546: PPUSH
15547: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15551: LD_VAR 0 6
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_VAR 0 4
15569: PPUSH
15570: CALL_OW 237
// end ;
15574: PPOPN 6
15576: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15577: LD_EXP 7
15581: PUSH
15582: LD_EXP 54
15586: AND
15587: IFFALSE 15666
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15595: LD_ADDR_VAR 0 1
15599: PUSH
15600: LD_INT 22
15602: PUSH
15603: LD_OWVAR 2
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 30
15614: PUSH
15615: LD_INT 3
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 69
15630: ST_TO_ADDR
// if not tmp then
15631: LD_VAR 0 1
15635: NOT
15636: IFFALSE 15640
// exit ;
15638: GO 15666
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15640: LD_VAR 0 1
15644: PUSH
15645: LD_INT 1
15647: PPUSH
15648: LD_VAR 0 1
15652: PPUSH
15653: CALL_OW 12
15657: ARRAY
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: CALL_OW 234
// end ;
15666: PPOPN 1
15668: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15669: LD_EXP 7
15673: PUSH
15674: LD_EXP 55
15678: AND
15679: IFFALSE 15791
15681: GO 15683
15683: DISABLE
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15688: LD_ADDR_VAR 0 2
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_OWVAR 2
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: PUSH
15708: LD_INT 30
15710: PUSH
15711: LD_INT 27
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 30
15720: PUSH
15721: LD_INT 26
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 30
15730: PUSH
15731: LD_INT 28
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PPUSH
15748: CALL_OW 69
15752: ST_TO_ADDR
// if not tmp then
15753: LD_VAR 0 2
15757: NOT
15758: IFFALSE 15762
// exit ;
15760: GO 15791
// for i in tmp do
15762: LD_ADDR_VAR 0 1
15766: PUSH
15767: LD_VAR 0 2
15771: PUSH
15772: FOR_IN
15773: IFFALSE 15789
// SetLives ( i , 1 ) ;
15775: LD_VAR 0 1
15779: PPUSH
15780: LD_INT 1
15782: PPUSH
15783: CALL_OW 234
15787: GO 15772
15789: POP
15790: POP
// end ;
15791: PPOPN 2
15793: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15794: LD_EXP 7
15798: PUSH
15799: LD_EXP 56
15803: AND
15804: IFFALSE 16091
15806: GO 15808
15808: DISABLE
15809: LD_INT 0
15811: PPUSH
15812: PPUSH
15813: PPUSH
// begin i := rand ( 1 , 7 ) ;
15814: LD_ADDR_VAR 0 1
15818: PUSH
15819: LD_INT 1
15821: PPUSH
15822: LD_INT 7
15824: PPUSH
15825: CALL_OW 12
15829: ST_TO_ADDR
// case i of 1 :
15830: LD_VAR 0 1
15834: PUSH
15835: LD_INT 1
15837: DOUBLE
15838: EQUAL
15839: IFTRUE 15843
15841: GO 15853
15843: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15844: LD_STRING earthquake(getX(game), 0, 32)
15846: PPUSH
15847: CALL_OW 559
15851: GO 16091
15853: LD_INT 2
15855: DOUBLE
15856: EQUAL
15857: IFTRUE 15861
15859: GO 15875
15861: POP
// begin ToLua ( displayStucuk(); ) ;
15862: LD_STRING displayStucuk();
15864: PPUSH
15865: CALL_OW 559
// ResetFog ;
15869: CALL_OW 335
// end ; 3 :
15873: GO 16091
15875: LD_INT 3
15877: DOUBLE
15878: EQUAL
15879: IFTRUE 15883
15881: GO 15987
15883: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15884: LD_ADDR_VAR 0 2
15888: PUSH
15889: LD_INT 22
15891: PUSH
15892: LD_OWVAR 2
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 25
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PPUSH
15915: CALL_OW 69
15919: ST_TO_ADDR
// if not tmp then
15920: LD_VAR 0 2
15924: NOT
15925: IFFALSE 15929
// exit ;
15927: GO 16091
// un := tmp [ rand ( 1 , tmp ) ] ;
15929: LD_ADDR_VAR 0 3
15933: PUSH
15934: LD_VAR 0 2
15938: PUSH
15939: LD_INT 1
15941: PPUSH
15942: LD_VAR 0 2
15946: PPUSH
15947: CALL_OW 12
15951: ARRAY
15952: ST_TO_ADDR
// if Crawls ( un ) then
15953: LD_VAR 0 3
15957: PPUSH
15958: CALL_OW 318
15962: IFFALSE 15973
// ComWalk ( un ) ;
15964: LD_VAR 0 3
15968: PPUSH
15969: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 8
15980: PPUSH
15981: CALL_OW 336
// end ; 4 :
15985: GO 16091
15987: LD_INT 4
15989: DOUBLE
15990: EQUAL
15991: IFTRUE 15995
15993: GO 16069
15995: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15996: LD_ADDR_VAR 0 2
16000: PUSH
16001: LD_INT 22
16003: PUSH
16004: LD_OWVAR 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 30
16015: PUSH
16016: LD_INT 29
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// if not tmp then
16032: LD_VAR 0 2
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16091
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16041: LD_VAR 0 2
16045: PUSH
16046: LD_INT 1
16048: ARRAY
16049: PPUSH
16050: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16054: LD_VAR 0 2
16058: PUSH
16059: LD_INT 1
16061: ARRAY
16062: PPUSH
16063: CALL_OW 65
// end ; 5 .. 7 :
16067: GO 16091
16069: LD_INT 5
16071: DOUBLE
16072: GREATEREQUAL
16073: IFFALSE 16081
16075: LD_INT 7
16077: DOUBLE
16078: LESSEQUAL
16079: IFTRUE 16083
16081: GO 16090
16083: POP
// StreamSibBomb ; end ;
16084: CALL 12328 0 0
16088: GO 16091
16090: POP
// end ;
16091: PPOPN 3
16093: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16094: LD_EXP 7
16098: PUSH
16099: LD_EXP 57
16103: AND
16104: IFFALSE 16260
16106: GO 16108
16108: DISABLE
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16114: LD_ADDR_VAR 0 2
16118: PUSH
16119: LD_INT 81
16121: PUSH
16122: LD_OWVAR 2
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: LD_INT 21
16136: PUSH
16137: LD_INT 1
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 21
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PPUSH
16163: CALL_OW 69
16167: ST_TO_ADDR
// if not tmp then
16168: LD_VAR 0 2
16172: NOT
16173: IFFALSE 16177
// exit ;
16175: GO 16260
// p := 0 ;
16177: LD_ADDR_VAR 0 3
16181: PUSH
16182: LD_INT 0
16184: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16185: LD_INT 35
16187: PPUSH
16188: CALL_OW 67
// p := p + 1 ;
16192: LD_ADDR_VAR 0 3
16196: PUSH
16197: LD_VAR 0 3
16201: PUSH
16202: LD_INT 1
16204: PLUS
16205: ST_TO_ADDR
// for i in tmp do
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_VAR 0 2
16215: PUSH
16216: FOR_IN
16217: IFFALSE 16248
// if GetLives ( i ) < 1000 then
16219: LD_VAR 0 1
16223: PPUSH
16224: CALL_OW 256
16228: PUSH
16229: LD_INT 1000
16231: LESS
16232: IFFALSE 16246
// SetLives ( i , 1000 ) ;
16234: LD_VAR 0 1
16238: PPUSH
16239: LD_INT 1000
16241: PPUSH
16242: CALL_OW 234
16246: GO 16216
16248: POP
16249: POP
// until p > 20 ;
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 20
16257: GREATER
16258: IFFALSE 16185
// end ;
16260: PPOPN 3
16262: END
// every 0 0$1 trigger StreamModeActive and sTime do
16263: LD_EXP 7
16267: PUSH
16268: LD_EXP 58
16272: AND
16273: IFFALSE 16308
16275: GO 16277
16277: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16278: LD_INT 28
16280: PPUSH
16281: LD_OWVAR 2
16285: PPUSH
16286: LD_INT 2
16288: PPUSH
16289: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16293: LD_INT 30
16295: PPUSH
16296: LD_OWVAR 2
16300: PPUSH
16301: LD_INT 2
16303: PPUSH
16304: CALL_OW 322
// end ;
16308: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16309: LD_EXP 7
16313: PUSH
16314: LD_EXP 59
16318: AND
16319: IFFALSE 16440
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16328: LD_ADDR_VAR 0 2
16332: PUSH
16333: LD_INT 22
16335: PUSH
16336: LD_OWVAR 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 3
16357: PUSH
16358: LD_INT 23
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 69
16381: ST_TO_ADDR
// if not tmp then
16382: LD_VAR 0 2
16386: NOT
16387: IFFALSE 16391
// exit ;
16389: GO 16440
// for i in tmp do
16391: LD_ADDR_VAR 0 1
16395: PUSH
16396: LD_VAR 0 2
16400: PUSH
16401: FOR_IN
16402: IFFALSE 16438
// begin if Crawls ( i ) then
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 318
16413: IFFALSE 16424
// ComWalk ( i ) ;
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 138
// SetClass ( i , 2 ) ;
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_INT 2
16431: PPUSH
16432: CALL_OW 336
// end ;
16436: GO 16401
16438: POP
16439: POP
// end ;
16440: PPOPN 2
16442: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16443: LD_EXP 7
16447: PUSH
16448: LD_EXP 60
16452: AND
16453: IFFALSE 16741
16455: GO 16457
16457: DISABLE
16458: LD_INT 0
16460: PPUSH
16461: PPUSH
16462: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16463: LD_OWVAR 2
16467: PPUSH
16468: LD_INT 9
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: LD_INT 1
16476: PPUSH
16477: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16481: LD_INT 9
16483: PPUSH
16484: LD_OWVAR 2
16488: PPUSH
16489: CALL_OW 343
// uc_side := 9 ;
16493: LD_ADDR_OWVAR 20
16497: PUSH
16498: LD_INT 9
16500: ST_TO_ADDR
// uc_nation := 2 ;
16501: LD_ADDR_OWVAR 21
16505: PUSH
16506: LD_INT 2
16508: ST_TO_ADDR
// hc_name := Dark Warrior ;
16509: LD_ADDR_OWVAR 26
16513: PUSH
16514: LD_STRING Dark Warrior
16516: ST_TO_ADDR
// hc_gallery :=  ;
16517: LD_ADDR_OWVAR 33
16521: PUSH
16522: LD_STRING 
16524: ST_TO_ADDR
// hc_noskilllimit := true ;
16525: LD_ADDR_OWVAR 76
16529: PUSH
16530: LD_INT 1
16532: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16533: LD_ADDR_OWVAR 31
16537: PUSH
16538: LD_INT 30
16540: PUSH
16541: LD_INT 30
16543: PUSH
16544: LD_INT 30
16546: PUSH
16547: LD_INT 30
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: ST_TO_ADDR
// un := CreateHuman ;
16556: LD_ADDR_VAR 0 3
16560: PUSH
16561: CALL_OW 44
16565: ST_TO_ADDR
// hc_noskilllimit := false ;
16566: LD_ADDR_OWVAR 76
16570: PUSH
16571: LD_INT 0
16573: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16574: LD_VAR 0 3
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 51
// ToLua ( playRanger() ) ;
16586: LD_STRING playRanger()
16588: PPUSH
16589: CALL_OW 559
// p := 0 ;
16593: LD_ADDR_VAR 0 2
16597: PUSH
16598: LD_INT 0
16600: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16601: LD_INT 35
16603: PPUSH
16604: CALL_OW 67
// p := p + 1 ;
16608: LD_ADDR_VAR 0 2
16612: PUSH
16613: LD_VAR 0 2
16617: PUSH
16618: LD_INT 1
16620: PLUS
16621: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16622: LD_VAR 0 3
16626: PPUSH
16627: CALL_OW 256
16631: PUSH
16632: LD_INT 1000
16634: LESS
16635: IFFALSE 16649
// SetLives ( un , 1000 ) ;
16637: LD_VAR 0 3
16641: PPUSH
16642: LD_INT 1000
16644: PPUSH
16645: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16649: LD_VAR 0 3
16653: PPUSH
16654: LD_INT 81
16656: PUSH
16657: LD_OWVAR 2
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 91
16668: PUSH
16669: LD_VAR 0 3
16673: PUSH
16674: LD_INT 30
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PPUSH
16686: CALL_OW 69
16690: PPUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: CALL_OW 74
16700: PPUSH
16701: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16705: LD_VAR 0 2
16709: PUSH
16710: LD_INT 80
16712: GREATER
16713: PUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: CALL_OW 301
16723: OR
16724: IFFALSE 16601
// if un then
16726: LD_VAR 0 3
16730: IFFALSE 16741
// RemoveUnit ( un ) ;
16732: LD_VAR 0 3
16736: PPUSH
16737: CALL_OW 64
// end ;
16741: PPOPN 3
16743: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16744: LD_EXP 61
16748: IFFALSE 16864
16750: GO 16752
16752: DISABLE
16753: LD_INT 0
16755: PPUSH
16756: PPUSH
16757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_INT 81
16765: PUSH
16766: LD_OWVAR 2
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 21
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PPUSH
16789: CALL_OW 69
16793: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16794: LD_STRING playComputer()
16796: PPUSH
16797: CALL_OW 559
// if not tmp then
16801: LD_VAR 0 2
16805: NOT
16806: IFFALSE 16810
// exit ;
16808: GO 16864
// for i in tmp do
16810: LD_ADDR_VAR 0 1
16814: PUSH
16815: LD_VAR 0 2
16819: PUSH
16820: FOR_IN
16821: IFFALSE 16862
// for j := 1 to 4 do
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: DOUBLE
16829: LD_INT 1
16831: DEC
16832: ST_TO_ADDR
16833: LD_INT 4
16835: PUSH
16836: FOR_TO
16837: IFFALSE 16858
// SetSkill ( i , j , 10 ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_VAR 0 3
16848: PPUSH
16849: LD_INT 10
16851: PPUSH
16852: CALL_OW 237
16856: GO 16836
16858: POP
16859: POP
16860: GO 16820
16862: POP
16863: POP
// end ;
16864: PPOPN 3
16866: END
// every 0 0$1 trigger s30 do var i , tmp ;
16867: LD_EXP 62
16871: IFFALSE 16940
16873: GO 16875
16875: DISABLE
16876: LD_INT 0
16878: PPUSH
16879: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16880: LD_ADDR_VAR 0 2
16884: PUSH
16885: LD_INT 22
16887: PUSH
16888: LD_OWVAR 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: ST_TO_ADDR
// if not tmp then
16902: LD_VAR 0 2
16906: NOT
16907: IFFALSE 16911
// exit ;
16909: GO 16940
// for i in tmp do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_VAR 0 2
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16938
// SetLives ( i , 300 ) ;
16924: LD_VAR 0 1
16928: PPUSH
16929: LD_INT 300
16931: PPUSH
16932: CALL_OW 234
16936: GO 16921
16938: POP
16939: POP
// end ;
16940: PPOPN 2
16942: END
// every 0 0$1 trigger s60 do var i , tmp ;
16943: LD_EXP 63
16947: IFFALSE 17016
16949: GO 16951
16951: DISABLE
16952: LD_INT 0
16954: PPUSH
16955: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16956: LD_ADDR_VAR 0 2
16960: PUSH
16961: LD_INT 22
16963: PUSH
16964: LD_OWVAR 2
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PPUSH
16973: CALL_OW 69
16977: ST_TO_ADDR
// if not tmp then
16978: LD_VAR 0 2
16982: NOT
16983: IFFALSE 16987
// exit ;
16985: GO 17016
// for i in tmp do
16987: LD_ADDR_VAR 0 1
16991: PUSH
16992: LD_VAR 0 2
16996: PUSH
16997: FOR_IN
16998: IFFALSE 17014
// SetLives ( i , 600 ) ;
17000: LD_VAR 0 1
17004: PPUSH
17005: LD_INT 600
17007: PPUSH
17008: CALL_OW 234
17012: GO 16997
17014: POP
17015: POP
// end ;
17016: PPOPN 2
17018: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17019: LD_INT 0
17021: PPUSH
// case cmd of 301 :
17022: LD_VAR 0 1
17026: PUSH
17027: LD_INT 301
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17067
17035: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17036: LD_VAR 0 6
17040: PPUSH
17041: LD_VAR 0 7
17045: PPUSH
17046: LD_VAR 0 8
17050: PPUSH
17051: LD_VAR 0 4
17055: PPUSH
17056: LD_VAR 0 5
17060: PPUSH
17061: CALL 18268 0 5
17065: GO 17188
17067: LD_INT 302
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17112
17075: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17076: LD_VAR 0 6
17080: PPUSH
17081: LD_VAR 0 7
17085: PPUSH
17086: LD_VAR 0 8
17090: PPUSH
17091: LD_VAR 0 9
17095: PPUSH
17096: LD_VAR 0 4
17100: PPUSH
17101: LD_VAR 0 5
17105: PPUSH
17106: CALL 18359 0 6
17110: GO 17188
17112: LD_INT 303
17114: DOUBLE
17115: EQUAL
17116: IFTRUE 17120
17118: GO 17157
17120: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17121: LD_VAR 0 6
17125: PPUSH
17126: LD_VAR 0 7
17130: PPUSH
17131: LD_VAR 0 8
17135: PPUSH
17136: LD_VAR 0 9
17140: PPUSH
17141: LD_VAR 0 4
17145: PPUSH
17146: LD_VAR 0 5
17150: PPUSH
17151: CALL 17193 0 6
17155: GO 17188
17157: LD_INT 304
17159: DOUBLE
17160: EQUAL
17161: IFTRUE 17165
17163: GO 17187
17165: POP
// hHackTeleport ( unit , x , y ) ; end ;
17166: LD_VAR 0 2
17170: PPUSH
17171: LD_VAR 0 4
17175: PPUSH
17176: LD_VAR 0 5
17180: PPUSH
17181: CALL 18952 0 3
17185: GO 17188
17187: POP
// end ;
17188: LD_VAR 0 12
17192: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17193: LD_INT 0
17195: PPUSH
17196: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17197: LD_VAR 0 1
17201: PUSH
17202: LD_INT 1
17204: LESS
17205: PUSH
17206: LD_VAR 0 1
17210: PUSH
17211: LD_INT 3
17213: GREATER
17214: OR
17215: PUSH
17216: LD_VAR 0 5
17220: PPUSH
17221: LD_VAR 0 6
17225: PPUSH
17226: CALL_OW 428
17230: OR
17231: IFFALSE 17235
// exit ;
17233: GO 17955
// uc_side := your_side ;
17235: LD_ADDR_OWVAR 20
17239: PUSH
17240: LD_OWVAR 2
17244: ST_TO_ADDR
// uc_nation := nation ;
17245: LD_ADDR_OWVAR 21
17249: PUSH
17250: LD_VAR 0 1
17254: ST_TO_ADDR
// bc_level = 1 ;
17255: LD_ADDR_OWVAR 43
17259: PUSH
17260: LD_INT 1
17262: ST_TO_ADDR
// case btype of 1 :
17263: LD_VAR 0 2
17267: PUSH
17268: LD_INT 1
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17287
17276: POP
// bc_type := b_depot ; 2 :
17277: LD_ADDR_OWVAR 42
17281: PUSH
17282: LD_INT 0
17284: ST_TO_ADDR
17285: GO 17899
17287: LD_INT 2
17289: DOUBLE
17290: EQUAL
17291: IFTRUE 17295
17293: GO 17306
17295: POP
// bc_type := b_warehouse ; 3 :
17296: LD_ADDR_OWVAR 42
17300: PUSH
17301: LD_INT 1
17303: ST_TO_ADDR
17304: GO 17899
17306: LD_INT 3
17308: DOUBLE
17309: EQUAL
17310: IFTRUE 17314
17312: GO 17325
17314: POP
// bc_type := b_lab ; 4 .. 9 :
17315: LD_ADDR_OWVAR 42
17319: PUSH
17320: LD_INT 6
17322: ST_TO_ADDR
17323: GO 17899
17325: LD_INT 4
17327: DOUBLE
17328: GREATEREQUAL
17329: IFFALSE 17337
17331: LD_INT 9
17333: DOUBLE
17334: LESSEQUAL
17335: IFTRUE 17339
17337: GO 17391
17339: POP
// begin bc_type := b_lab_half ;
17340: LD_ADDR_OWVAR 42
17344: PUSH
17345: LD_INT 7
17347: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17348: LD_ADDR_OWVAR 44
17352: PUSH
17353: LD_INT 10
17355: PUSH
17356: LD_INT 11
17358: PUSH
17359: LD_INT 12
17361: PUSH
17362: LD_INT 15
17364: PUSH
17365: LD_INT 14
17367: PUSH
17368: LD_INT 13
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: PUSH
17379: LD_VAR 0 2
17383: PUSH
17384: LD_INT 3
17386: MINUS
17387: ARRAY
17388: ST_TO_ADDR
// end ; 10 .. 13 :
17389: GO 17899
17391: LD_INT 10
17393: DOUBLE
17394: GREATEREQUAL
17395: IFFALSE 17403
17397: LD_INT 13
17399: DOUBLE
17400: LESSEQUAL
17401: IFTRUE 17405
17403: GO 17482
17405: POP
// begin bc_type := b_lab_full ;
17406: LD_ADDR_OWVAR 42
17410: PUSH
17411: LD_INT 8
17413: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17414: LD_ADDR_OWVAR 44
17418: PUSH
17419: LD_INT 10
17421: PUSH
17422: LD_INT 12
17424: PUSH
17425: LD_INT 14
17427: PUSH
17428: LD_INT 13
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: LD_VAR 0 2
17441: PUSH
17442: LD_INT 9
17444: MINUS
17445: ARRAY
17446: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17447: LD_ADDR_OWVAR 45
17451: PUSH
17452: LD_INT 11
17454: PUSH
17455: LD_INT 15
17457: PUSH
17458: LD_INT 12
17460: PUSH
17461: LD_INT 15
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_VAR 0 2
17474: PUSH
17475: LD_INT 9
17477: MINUS
17478: ARRAY
17479: ST_TO_ADDR
// end ; 14 :
17480: GO 17899
17482: LD_INT 14
17484: DOUBLE
17485: EQUAL
17486: IFTRUE 17490
17488: GO 17501
17490: POP
// bc_type := b_workshop ; 15 :
17491: LD_ADDR_OWVAR 42
17495: PUSH
17496: LD_INT 2
17498: ST_TO_ADDR
17499: GO 17899
17501: LD_INT 15
17503: DOUBLE
17504: EQUAL
17505: IFTRUE 17509
17507: GO 17520
17509: POP
// bc_type := b_factory ; 16 :
17510: LD_ADDR_OWVAR 42
17514: PUSH
17515: LD_INT 3
17517: ST_TO_ADDR
17518: GO 17899
17520: LD_INT 16
17522: DOUBLE
17523: EQUAL
17524: IFTRUE 17528
17526: GO 17539
17528: POP
// bc_type := b_ext_gun ; 17 :
17529: LD_ADDR_OWVAR 42
17533: PUSH
17534: LD_INT 17
17536: ST_TO_ADDR
17537: GO 17899
17539: LD_INT 17
17541: DOUBLE
17542: EQUAL
17543: IFTRUE 17547
17545: GO 17575
17547: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17548: LD_ADDR_OWVAR 42
17552: PUSH
17553: LD_INT 19
17555: PUSH
17556: LD_INT 23
17558: PUSH
17559: LD_INT 19
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: LD_VAR 0 1
17571: ARRAY
17572: ST_TO_ADDR
17573: GO 17899
17575: LD_INT 18
17577: DOUBLE
17578: EQUAL
17579: IFTRUE 17583
17581: GO 17594
17583: POP
// bc_type := b_ext_radar ; 19 :
17584: LD_ADDR_OWVAR 42
17588: PUSH
17589: LD_INT 20
17591: ST_TO_ADDR
17592: GO 17899
17594: LD_INT 19
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17613
17602: POP
// bc_type := b_ext_radio ; 20 :
17603: LD_ADDR_OWVAR 42
17607: PUSH
17608: LD_INT 22
17610: ST_TO_ADDR
17611: GO 17899
17613: LD_INT 20
17615: DOUBLE
17616: EQUAL
17617: IFTRUE 17621
17619: GO 17632
17621: POP
// bc_type := b_ext_siberium ; 21 :
17622: LD_ADDR_OWVAR 42
17626: PUSH
17627: LD_INT 21
17629: ST_TO_ADDR
17630: GO 17899
17632: LD_INT 21
17634: DOUBLE
17635: EQUAL
17636: IFTRUE 17640
17638: GO 17651
17640: POP
// bc_type := b_ext_computer ; 22 :
17641: LD_ADDR_OWVAR 42
17645: PUSH
17646: LD_INT 24
17648: ST_TO_ADDR
17649: GO 17899
17651: LD_INT 22
17653: DOUBLE
17654: EQUAL
17655: IFTRUE 17659
17657: GO 17670
17659: POP
// bc_type := b_ext_track ; 23 :
17660: LD_ADDR_OWVAR 42
17664: PUSH
17665: LD_INT 16
17667: ST_TO_ADDR
17668: GO 17899
17670: LD_INT 23
17672: DOUBLE
17673: EQUAL
17674: IFTRUE 17678
17676: GO 17689
17678: POP
// bc_type := b_ext_laser ; 24 :
17679: LD_ADDR_OWVAR 42
17683: PUSH
17684: LD_INT 25
17686: ST_TO_ADDR
17687: GO 17899
17689: LD_INT 24
17691: DOUBLE
17692: EQUAL
17693: IFTRUE 17697
17695: GO 17708
17697: POP
// bc_type := b_control_tower ; 25 :
17698: LD_ADDR_OWVAR 42
17702: PUSH
17703: LD_INT 36
17705: ST_TO_ADDR
17706: GO 17899
17708: LD_INT 25
17710: DOUBLE
17711: EQUAL
17712: IFTRUE 17716
17714: GO 17727
17716: POP
// bc_type := b_breastwork ; 26 :
17717: LD_ADDR_OWVAR 42
17721: PUSH
17722: LD_INT 31
17724: ST_TO_ADDR
17725: GO 17899
17727: LD_INT 26
17729: DOUBLE
17730: EQUAL
17731: IFTRUE 17735
17733: GO 17746
17735: POP
// bc_type := b_bunker ; 27 :
17736: LD_ADDR_OWVAR 42
17740: PUSH
17741: LD_INT 32
17743: ST_TO_ADDR
17744: GO 17899
17746: LD_INT 27
17748: DOUBLE
17749: EQUAL
17750: IFTRUE 17754
17752: GO 17765
17754: POP
// bc_type := b_turret ; 28 :
17755: LD_ADDR_OWVAR 42
17759: PUSH
17760: LD_INT 33
17762: ST_TO_ADDR
17763: GO 17899
17765: LD_INT 28
17767: DOUBLE
17768: EQUAL
17769: IFTRUE 17773
17771: GO 17784
17773: POP
// bc_type := b_armoury ; 29 :
17774: LD_ADDR_OWVAR 42
17778: PUSH
17779: LD_INT 4
17781: ST_TO_ADDR
17782: GO 17899
17784: LD_INT 29
17786: DOUBLE
17787: EQUAL
17788: IFTRUE 17792
17790: GO 17803
17792: POP
// bc_type := b_barracks ; 30 :
17793: LD_ADDR_OWVAR 42
17797: PUSH
17798: LD_INT 5
17800: ST_TO_ADDR
17801: GO 17899
17803: LD_INT 30
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17822
17811: POP
// bc_type := b_solar_power ; 31 :
17812: LD_ADDR_OWVAR 42
17816: PUSH
17817: LD_INT 27
17819: ST_TO_ADDR
17820: GO 17899
17822: LD_INT 31
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17841
17830: POP
// bc_type := b_oil_power ; 32 :
17831: LD_ADDR_OWVAR 42
17835: PUSH
17836: LD_INT 26
17838: ST_TO_ADDR
17839: GO 17899
17841: LD_INT 32
17843: DOUBLE
17844: EQUAL
17845: IFTRUE 17849
17847: GO 17860
17849: POP
// bc_type := b_siberite_power ; 33 :
17850: LD_ADDR_OWVAR 42
17854: PUSH
17855: LD_INT 28
17857: ST_TO_ADDR
17858: GO 17899
17860: LD_INT 33
17862: DOUBLE
17863: EQUAL
17864: IFTRUE 17868
17866: GO 17879
17868: POP
// bc_type := b_oil_mine ; 34 :
17869: LD_ADDR_OWVAR 42
17873: PUSH
17874: LD_INT 29
17876: ST_TO_ADDR
17877: GO 17899
17879: LD_INT 34
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17887
17885: GO 17898
17887: POP
// bc_type := b_siberite_mine ; end ;
17888: LD_ADDR_OWVAR 42
17892: PUSH
17893: LD_INT 30
17895: ST_TO_ADDR
17896: GO 17899
17898: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17899: LD_ADDR_VAR 0 8
17903: PUSH
17904: LD_VAR 0 5
17908: PPUSH
17909: LD_VAR 0 6
17913: PPUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: CALL_OW 47
17923: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17924: LD_OWVAR 42
17928: PUSH
17929: LD_INT 32
17931: PUSH
17932: LD_INT 33
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: IN
17939: IFFALSE 17955
// PlaceWeaponTurret ( b , weapon ) ;
17941: LD_VAR 0 8
17945: PPUSH
17946: LD_VAR 0 4
17950: PPUSH
17951: CALL_OW 431
// end ;
17955: LD_VAR 0 7
17959: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
17964: PPUSH
17965: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17966: LD_ADDR_VAR 0 4
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_OWVAR 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: LD_INT 30
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 30
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PPUSH
18015: CALL_OW 69
18019: ST_TO_ADDR
// if not tmp then
18020: LD_VAR 0 4
18024: NOT
18025: IFFALSE 18029
// exit ;
18027: GO 18088
// for i in tmp do
18029: LD_ADDR_VAR 0 2
18033: PUSH
18034: LD_VAR 0 4
18038: PUSH
18039: FOR_IN
18040: IFFALSE 18086
// for j = 1 to 3 do
18042: LD_ADDR_VAR 0 3
18046: PUSH
18047: DOUBLE
18048: LD_INT 1
18050: DEC
18051: ST_TO_ADDR
18052: LD_INT 3
18054: PUSH
18055: FOR_TO
18056: IFFALSE 18082
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 274
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: LD_INT 99999
18075: PPUSH
18076: CALL_OW 277
18080: GO 18055
18082: POP
18083: POP
18084: GO 18039
18086: POP
18087: POP
// end ;
18088: LD_VAR 0 1
18092: RET
// export function hHackSetLevel10 ; var i , j ; begin
18093: LD_INT 0
18095: PPUSH
18096: PPUSH
18097: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18098: LD_ADDR_VAR 0 2
18102: PUSH
18103: LD_INT 21
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PPUSH
18113: CALL_OW 69
18117: PUSH
18118: FOR_IN
18119: IFFALSE 18171
// if IsSelected ( i ) then
18121: LD_VAR 0 2
18125: PPUSH
18126: CALL_OW 306
18130: IFFALSE 18169
// begin for j := 1 to 4 do
18132: LD_ADDR_VAR 0 3
18136: PUSH
18137: DOUBLE
18138: LD_INT 1
18140: DEC
18141: ST_TO_ADDR
18142: LD_INT 4
18144: PUSH
18145: FOR_TO
18146: IFFALSE 18167
// SetSkill ( i , j , 10 ) ;
18148: LD_VAR 0 2
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: LD_INT 10
18160: PPUSH
18161: CALL_OW 237
18165: GO 18145
18167: POP
18168: POP
// end ;
18169: GO 18118
18171: POP
18172: POP
// end ;
18173: LD_VAR 0 1
18177: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18178: LD_INT 0
18180: PPUSH
18181: PPUSH
18182: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_OWVAR 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 21
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PPUSH
18214: CALL_OW 69
18218: PUSH
18219: FOR_IN
18220: IFFALSE 18261
// begin for j := 1 to 4 do
18222: LD_ADDR_VAR 0 3
18226: PUSH
18227: DOUBLE
18228: LD_INT 1
18230: DEC
18231: ST_TO_ADDR
18232: LD_INT 4
18234: PUSH
18235: FOR_TO
18236: IFFALSE 18257
// SetSkill ( i , j , 10 ) ;
18238: LD_VAR 0 2
18242: PPUSH
18243: LD_VAR 0 3
18247: PPUSH
18248: LD_INT 10
18250: PPUSH
18251: CALL_OW 237
18255: GO 18235
18257: POP
18258: POP
// end ;
18259: GO 18219
18261: POP
18262: POP
// end ;
18263: LD_VAR 0 1
18267: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18268: LD_INT 0
18270: PPUSH
// uc_side := your_side ;
18271: LD_ADDR_OWVAR 20
18275: PUSH
18276: LD_OWVAR 2
18280: ST_TO_ADDR
// uc_nation := nation ;
18281: LD_ADDR_OWVAR 21
18285: PUSH
18286: LD_VAR 0 1
18290: ST_TO_ADDR
// InitHc ;
18291: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18295: LD_INT 0
18297: PPUSH
18298: LD_VAR 0 2
18302: PPUSH
18303: LD_VAR 0 3
18307: PPUSH
18308: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18312: LD_VAR 0 4
18316: PPUSH
18317: LD_VAR 0 5
18321: PPUSH
18322: CALL_OW 428
18326: PUSH
18327: LD_INT 0
18329: EQUAL
18330: IFFALSE 18354
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18332: CALL_OW 44
18336: PPUSH
18337: LD_VAR 0 4
18341: PPUSH
18342: LD_VAR 0 5
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 48
// end ;
18354: LD_VAR 0 6
18358: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
// uc_side := your_side ;
18363: LD_ADDR_OWVAR 20
18367: PUSH
18368: LD_OWVAR 2
18372: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18373: LD_VAR 0 1
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: LD_INT 4
18389: PUSH
18390: LD_INT 5
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: IN
18400: IFFALSE 18412
// uc_nation := nation_american else
18402: LD_ADDR_OWVAR 21
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
18410: GO 18455
// if chassis in [ 11 , 12 , 13 , 14 ] then
18412: LD_VAR 0 1
18416: PUSH
18417: LD_INT 11
18419: PUSH
18420: LD_INT 12
18422: PUSH
18423: LD_INT 13
18425: PUSH
18426: LD_INT 14
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: IN
18435: IFFALSE 18447
// uc_nation := nation_arabian else
18437: LD_ADDR_OWVAR 21
18441: PUSH
18442: LD_INT 2
18444: ST_TO_ADDR
18445: GO 18455
// uc_nation := nation_russian ;
18447: LD_ADDR_OWVAR 21
18451: PUSH
18452: LD_INT 3
18454: ST_TO_ADDR
// vc_chassis := chassis ;
18455: LD_ADDR_OWVAR 37
18459: PUSH
18460: LD_VAR 0 1
18464: ST_TO_ADDR
// vc_engine := engine ;
18465: LD_ADDR_OWVAR 39
18469: PUSH
18470: LD_VAR 0 2
18474: ST_TO_ADDR
// vc_control := control ;
18475: LD_ADDR_OWVAR 38
18479: PUSH
18480: LD_VAR 0 3
18484: ST_TO_ADDR
// vc_weapon := weapon ;
18485: LD_ADDR_OWVAR 40
18489: PUSH
18490: LD_VAR 0 4
18494: ST_TO_ADDR
// un := CreateVehicle ;
18495: LD_ADDR_VAR 0 8
18499: PUSH
18500: CALL_OW 45
18504: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18505: LD_VAR 0 8
18509: PPUSH
18510: LD_INT 0
18512: PPUSH
18513: LD_INT 5
18515: PPUSH
18516: CALL_OW 12
18520: PPUSH
18521: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18525: LD_VAR 0 8
18529: PPUSH
18530: LD_VAR 0 5
18534: PPUSH
18535: LD_VAR 0 6
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 48
// end ;
18547: LD_VAR 0 7
18551: RET
// export hInvincible ; every 1 do
18552: GO 18554
18554: DISABLE
// hInvincible := [ ] ;
18555: LD_ADDR_EXP 64
18559: PUSH
18560: EMPTY
18561: ST_TO_ADDR
18562: END
// every 10 do var i ;
18563: GO 18565
18565: DISABLE
18566: LD_INT 0
18568: PPUSH
// begin enable ;
18569: ENABLE
// if not hInvincible then
18570: LD_EXP 64
18574: NOT
18575: IFFALSE 18579
// exit ;
18577: GO 18623
// for i in hInvincible do
18579: LD_ADDR_VAR 0 1
18583: PUSH
18584: LD_EXP 64
18588: PUSH
18589: FOR_IN
18590: IFFALSE 18621
// if GetLives ( i ) < 1000 then
18592: LD_VAR 0 1
18596: PPUSH
18597: CALL_OW 256
18601: PUSH
18602: LD_INT 1000
18604: LESS
18605: IFFALSE 18619
// SetLives ( i , 1000 ) ;
18607: LD_VAR 0 1
18611: PPUSH
18612: LD_INT 1000
18614: PPUSH
18615: CALL_OW 234
18619: GO 18589
18621: POP
18622: POP
// end ;
18623: PPOPN 1
18625: END
// export function hHackInvincible ; var i ; begin
18626: LD_INT 0
18628: PPUSH
18629: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: LD_INT 21
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 21
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: PUSH
18668: FOR_IN
18669: IFFALSE 18730
// if IsSelected ( i ) then
18671: LD_VAR 0 2
18675: PPUSH
18676: CALL_OW 306
18680: IFFALSE 18728
// begin if i in hInvincible then
18682: LD_VAR 0 2
18686: PUSH
18687: LD_EXP 64
18691: IN
18692: IFFALSE 18712
// hInvincible := hInvincible diff i else
18694: LD_ADDR_EXP 64
18698: PUSH
18699: LD_EXP 64
18703: PUSH
18704: LD_VAR 0 2
18708: DIFF
18709: ST_TO_ADDR
18710: GO 18728
// hInvincible := hInvincible union i ;
18712: LD_ADDR_EXP 64
18716: PUSH
18717: LD_EXP 64
18721: PUSH
18722: LD_VAR 0 2
18726: UNION
18727: ST_TO_ADDR
// end ;
18728: GO 18668
18730: POP
18731: POP
// end ;
18732: LD_VAR 0 1
18736: RET
// export function hHackInvisible ; var i , j ; begin
18737: LD_INT 0
18739: PPUSH
18740: PPUSH
18741: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18742: LD_ADDR_VAR 0 2
18746: PUSH
18747: LD_INT 21
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: PUSH
18762: FOR_IN
18763: IFFALSE 18787
// if IsSelected ( i ) then
18765: LD_VAR 0 2
18769: PPUSH
18770: CALL_OW 306
18774: IFFALSE 18785
// ComForceInvisible ( i ) ;
18776: LD_VAR 0 2
18780: PPUSH
18781: CALL_OW 496
18785: GO 18762
18787: POP
18788: POP
// end ;
18789: LD_VAR 0 1
18793: RET
// export function hHackChangeYourSide ; begin
18794: LD_INT 0
18796: PPUSH
// if your_side = 8 then
18797: LD_OWVAR 2
18801: PUSH
18802: LD_INT 8
18804: EQUAL
18805: IFFALSE 18817
// your_side := 0 else
18807: LD_ADDR_OWVAR 2
18811: PUSH
18812: LD_INT 0
18814: ST_TO_ADDR
18815: GO 18831
// your_side := your_side + 1 ;
18817: LD_ADDR_OWVAR 2
18821: PUSH
18822: LD_OWVAR 2
18826: PUSH
18827: LD_INT 1
18829: PLUS
18830: ST_TO_ADDR
// end ;
18831: LD_VAR 0 1
18835: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18836: LD_INT 0
18838: PPUSH
18839: PPUSH
18840: PPUSH
// for i in all_units do
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_OWVAR 3
18850: PUSH
18851: FOR_IN
18852: IFFALSE 18930
// if IsSelected ( i ) then
18854: LD_VAR 0 2
18858: PPUSH
18859: CALL_OW 306
18863: IFFALSE 18928
// begin j := GetSide ( i ) ;
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_VAR 0 2
18874: PPUSH
18875: CALL_OW 255
18879: ST_TO_ADDR
// if j = 8 then
18880: LD_VAR 0 3
18884: PUSH
18885: LD_INT 8
18887: EQUAL
18888: IFFALSE 18900
// j := 0 else
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_INT 0
18897: ST_TO_ADDR
18898: GO 18914
// j := j + 1 ;
18900: LD_ADDR_VAR 0 3
18904: PUSH
18905: LD_VAR 0 3
18909: PUSH
18910: LD_INT 1
18912: PLUS
18913: ST_TO_ADDR
// SetSide ( i , j ) ;
18914: LD_VAR 0 2
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: CALL_OW 235
// end ;
18928: GO 18851
18930: POP
18931: POP
// end ;
18932: LD_VAR 0 1
18936: RET
// export function hHackFog ; begin
18937: LD_INT 0
18939: PPUSH
// FogOff ( true ) ;
18940: LD_INT 1
18942: PPUSH
18943: CALL_OW 344
// end ;
18947: LD_VAR 0 1
18951: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18952: LD_INT 0
18954: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18955: LD_VAR 0 1
18959: PPUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: LD_INT 1
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 483
// CenterOnXY ( x , y ) ;
18980: LD_VAR 0 2
18984: PPUSH
18985: LD_VAR 0 3
18989: PPUSH
18990: CALL_OW 84
// end ;
18994: LD_VAR 0 4
18998: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18999: LD_INT 0
19001: PPUSH
19002: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19003: LD_VAR 0 1
19007: NOT
19008: PUSH
19009: LD_VAR 0 2
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: CALL_OW 488
19023: NOT
19024: OR
19025: PUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: CALL_OW 266
19035: PUSH
19036: LD_INT 3
19038: NONEQUAL
19039: PUSH
19040: LD_VAR 0 1
19044: PPUSH
19045: CALL_OW 247
19049: PUSH
19050: LD_INT 1
19052: EQUAL
19053: NOT
19054: AND
19055: OR
19056: IFFALSE 19060
// exit ;
19058: GO 19209
// if GetType ( factory ) = unit_human then
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 247
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19090
// factory := IsInUnit ( factory ) ;
19075: LD_ADDR_VAR 0 1
19079: PUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 310
19089: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 266
19099: PUSH
19100: LD_INT 3
19102: NONEQUAL
19103: IFFALSE 19107
// exit ;
19105: GO 19209
// if HexInfo ( x , y ) = factory then
19107: LD_VAR 0 2
19111: PPUSH
19112: LD_VAR 0 3
19116: PPUSH
19117: CALL_OW 428
19121: PUSH
19122: LD_VAR 0 1
19126: EQUAL
19127: IFFALSE 19154
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19129: LD_ADDR_EXP 65
19133: PUSH
19134: LD_EXP 65
19138: PPUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: LD_INT 0
19146: PPUSH
19147: CALL_OW 1
19151: ST_TO_ADDR
19152: GO 19205
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19154: LD_ADDR_EXP 65
19158: PUSH
19159: LD_EXP 65
19163: PPUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_VAR 0 1
19173: PPUSH
19174: CALL_OW 255
19178: PUSH
19179: LD_VAR 0 1
19183: PUSH
19184: LD_VAR 0 2
19188: PUSH
19189: LD_VAR 0 3
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: PPUSH
19200: CALL_OW 1
19204: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19205: CALL 19214 0 0
// end ;
19209: LD_VAR 0 4
19213: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19214: LD_INT 0
19216: PPUSH
19217: PPUSH
19218: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19219: LD_STRING resetFactoryWaypoint();
19221: PPUSH
19222: CALL_OW 559
// if factoryWaypoints then
19226: LD_EXP 65
19230: IFFALSE 19356
// begin list := PrepareArray ( factoryWaypoints ) ;
19232: LD_ADDR_VAR 0 3
19236: PUSH
19237: LD_EXP 65
19241: PPUSH
19242: CALL 65733 0 1
19246: ST_TO_ADDR
// for i := 1 to list do
19247: LD_ADDR_VAR 0 2
19251: PUSH
19252: DOUBLE
19253: LD_INT 1
19255: DEC
19256: ST_TO_ADDR
19257: LD_VAR 0 3
19261: PUSH
19262: FOR_TO
19263: IFFALSE 19354
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19265: LD_STRING setFactoryWaypointXY(
19267: PUSH
19268: LD_VAR 0 3
19272: PUSH
19273: LD_VAR 0 2
19277: ARRAY
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: STR
19283: PUSH
19284: LD_STRING ,
19286: STR
19287: PUSH
19288: LD_VAR 0 3
19292: PUSH
19293: LD_VAR 0 2
19297: ARRAY
19298: PUSH
19299: LD_INT 2
19301: ARRAY
19302: STR
19303: PUSH
19304: LD_STRING ,
19306: STR
19307: PUSH
19308: LD_VAR 0 3
19312: PUSH
19313: LD_VAR 0 2
19317: ARRAY
19318: PUSH
19319: LD_INT 3
19321: ARRAY
19322: STR
19323: PUSH
19324: LD_STRING ,
19326: STR
19327: PUSH
19328: LD_VAR 0 3
19332: PUSH
19333: LD_VAR 0 2
19337: ARRAY
19338: PUSH
19339: LD_INT 4
19341: ARRAY
19342: STR
19343: PUSH
19344: LD_STRING )
19346: STR
19347: PPUSH
19348: CALL_OW 559
19352: GO 19262
19354: POP
19355: POP
// end ; end ;
19356: LD_VAR 0 1
19360: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19361: LD_INT 0
19363: PPUSH
// if HexInfo ( x , y ) = warehouse then
19364: LD_VAR 0 2
19368: PPUSH
19369: LD_VAR 0 3
19373: PPUSH
19374: CALL_OW 428
19378: PUSH
19379: LD_VAR 0 1
19383: EQUAL
19384: IFFALSE 19411
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19386: LD_ADDR_EXP 66
19390: PUSH
19391: LD_EXP 66
19395: PPUSH
19396: LD_VAR 0 1
19400: PPUSH
19401: LD_INT 0
19403: PPUSH
19404: CALL_OW 1
19408: ST_TO_ADDR
19409: GO 19462
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19411: LD_ADDR_EXP 66
19415: PUSH
19416: LD_EXP 66
19420: PPUSH
19421: LD_VAR 0 1
19425: PPUSH
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 255
19435: PUSH
19436: LD_VAR 0 1
19440: PUSH
19441: LD_VAR 0 2
19445: PUSH
19446: LD_VAR 0 3
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL_OW 1
19461: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19462: CALL 19471 0 0
// end ;
19466: LD_VAR 0 4
19470: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
19475: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19476: LD_STRING resetWarehouseGatheringPoints();
19478: PPUSH
19479: CALL_OW 559
// if warehouseGatheringPoints then
19483: LD_EXP 66
19487: IFFALSE 19613
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19489: LD_ADDR_VAR 0 3
19493: PUSH
19494: LD_EXP 66
19498: PPUSH
19499: CALL 65733 0 1
19503: ST_TO_ADDR
// for i := 1 to list do
19504: LD_ADDR_VAR 0 2
19508: PUSH
19509: DOUBLE
19510: LD_INT 1
19512: DEC
19513: ST_TO_ADDR
19514: LD_VAR 0 3
19518: PUSH
19519: FOR_TO
19520: IFFALSE 19611
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19522: LD_STRING setWarehouseGatheringPointXY(
19524: PUSH
19525: LD_VAR 0 3
19529: PUSH
19530: LD_VAR 0 2
19534: ARRAY
19535: PUSH
19536: LD_INT 1
19538: ARRAY
19539: STR
19540: PUSH
19541: LD_STRING ,
19543: STR
19544: PUSH
19545: LD_VAR 0 3
19549: PUSH
19550: LD_VAR 0 2
19554: ARRAY
19555: PUSH
19556: LD_INT 2
19558: ARRAY
19559: STR
19560: PUSH
19561: LD_STRING ,
19563: STR
19564: PUSH
19565: LD_VAR 0 3
19569: PUSH
19570: LD_VAR 0 2
19574: ARRAY
19575: PUSH
19576: LD_INT 3
19578: ARRAY
19579: STR
19580: PUSH
19581: LD_STRING ,
19583: STR
19584: PUSH
19585: LD_VAR 0 3
19589: PUSH
19590: LD_VAR 0 2
19594: ARRAY
19595: PUSH
19596: LD_INT 4
19598: ARRAY
19599: STR
19600: PUSH
19601: LD_STRING )
19603: STR
19604: PPUSH
19605: CALL_OW 559
19609: GO 19519
19611: POP
19612: POP
// end ; end ;
19613: LD_VAR 0 1
19617: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19618: LD_EXP 66
19622: IFFALSE 20307
19624: GO 19626
19626: DISABLE
19627: LD_INT 0
19629: PPUSH
19630: PPUSH
19631: PPUSH
19632: PPUSH
19633: PPUSH
19634: PPUSH
19635: PPUSH
19636: PPUSH
19637: PPUSH
// begin enable ;
19638: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: LD_EXP 66
19648: PPUSH
19649: CALL 65733 0 1
19653: ST_TO_ADDR
// if not list then
19654: LD_VAR 0 3
19658: NOT
19659: IFFALSE 19663
// exit ;
19661: GO 20307
// for i := 1 to list do
19663: LD_ADDR_VAR 0 1
19667: PUSH
19668: DOUBLE
19669: LD_INT 1
19671: DEC
19672: ST_TO_ADDR
19673: LD_VAR 0 3
19677: PUSH
19678: FOR_TO
19679: IFFALSE 20305
// begin depot := list [ i ] [ 2 ] ;
19681: LD_ADDR_VAR 0 8
19685: PUSH
19686: LD_VAR 0 3
19690: PUSH
19691: LD_VAR 0 1
19695: ARRAY
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19701: LD_ADDR_VAR 0 5
19705: PUSH
19706: LD_VAR 0 3
19710: PUSH
19711: LD_VAR 0 1
19715: ARRAY
19716: PUSH
19717: LD_INT 1
19719: ARRAY
19720: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19721: LD_VAR 0 8
19725: PPUSH
19726: CALL_OW 301
19730: PUSH
19731: LD_VAR 0 5
19735: PUSH
19736: LD_VAR 0 8
19740: PPUSH
19741: CALL_OW 255
19745: NONEQUAL
19746: OR
19747: IFFALSE 19776
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19749: LD_ADDR_EXP 66
19753: PUSH
19754: LD_EXP 66
19758: PPUSH
19759: LD_VAR 0 8
19763: PPUSH
19764: LD_INT 0
19766: PPUSH
19767: CALL_OW 1
19771: ST_TO_ADDR
// exit ;
19772: POP
19773: POP
19774: GO 20307
// end ; x := list [ i ] [ 3 ] ;
19776: LD_ADDR_VAR 0 6
19780: PUSH
19781: LD_VAR 0 3
19785: PUSH
19786: LD_VAR 0 1
19790: ARRAY
19791: PUSH
19792: LD_INT 3
19794: ARRAY
19795: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19796: LD_ADDR_VAR 0 7
19800: PUSH
19801: LD_VAR 0 3
19805: PUSH
19806: LD_VAR 0 1
19810: ARRAY
19811: PUSH
19812: LD_INT 4
19814: ARRAY
19815: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19816: LD_ADDR_VAR 0 9
19820: PUSH
19821: LD_VAR 0 6
19825: PPUSH
19826: LD_VAR 0 7
19830: PPUSH
19831: LD_INT 16
19833: PPUSH
19834: CALL 64321 0 3
19838: ST_TO_ADDR
// if not cratesNearbyPoint then
19839: LD_VAR 0 9
19843: NOT
19844: IFFALSE 19850
// exit ;
19846: POP
19847: POP
19848: GO 20307
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19850: LD_ADDR_VAR 0 4
19854: PUSH
19855: LD_INT 22
19857: PUSH
19858: LD_VAR 0 5
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 3
19869: PUSH
19870: LD_INT 60
19872: PUSH
19873: EMPTY
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 91
19882: PUSH
19883: LD_VAR 0 8
19887: PUSH
19888: LD_INT 6
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: LD_INT 25
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 25
19911: PUSH
19912: LD_INT 16
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: PPUSH
19930: CALL_OW 69
19934: PUSH
19935: LD_VAR 0 8
19939: PPUSH
19940: CALL_OW 313
19944: PPUSH
19945: LD_INT 3
19947: PUSH
19948: LD_INT 60
19950: PUSH
19951: EMPTY
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: LD_INT 25
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 25
19973: PUSH
19974: LD_INT 16
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 72
19994: UNION
19995: ST_TO_ADDR
// if tmp then
19996: LD_VAR 0 4
20000: IFFALSE 20080
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20002: LD_ADDR_VAR 0 4
20006: PUSH
20007: LD_VAR 0 4
20011: PPUSH
20012: LD_INT 3
20014: PPUSH
20015: CALL 62290 0 2
20019: ST_TO_ADDR
// for j in tmp do
20020: LD_ADDR_VAR 0 2
20024: PUSH
20025: LD_VAR 0 4
20029: PUSH
20030: FOR_IN
20031: IFFALSE 20074
// begin if IsInUnit ( j ) then
20033: LD_VAR 0 2
20037: PPUSH
20038: CALL_OW 310
20042: IFFALSE 20053
// ComExit ( j ) ;
20044: LD_VAR 0 2
20048: PPUSH
20049: CALL 62373 0 1
// AddComCollect ( j , x , y ) ;
20053: LD_VAR 0 2
20057: PPUSH
20058: LD_VAR 0 6
20062: PPUSH
20063: LD_VAR 0 7
20067: PPUSH
20068: CALL_OW 177
// end ;
20072: GO 20030
20074: POP
20075: POP
// exit ;
20076: POP
20077: POP
20078: GO 20307
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20080: LD_ADDR_VAR 0 4
20084: PUSH
20085: LD_INT 22
20087: PUSH
20088: LD_VAR 0 5
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 91
20099: PUSH
20100: LD_VAR 0 8
20104: PUSH
20105: LD_INT 8
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: LD_INT 34
20118: PUSH
20119: LD_INT 12
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 34
20128: PUSH
20129: LD_INT 51
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 34
20138: PUSH
20139: LD_INT 32
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 34
20148: PUSH
20149: LD_INT 89
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: LIST
20167: PPUSH
20168: CALL_OW 69
20172: ST_TO_ADDR
// if tmp then
20173: LD_VAR 0 4
20177: IFFALSE 20303
// begin for j in tmp do
20179: LD_ADDR_VAR 0 2
20183: PUSH
20184: LD_VAR 0 4
20188: PUSH
20189: FOR_IN
20190: IFFALSE 20301
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20192: LD_VAR 0 2
20196: PPUSH
20197: CALL_OW 262
20201: PUSH
20202: LD_INT 3
20204: EQUAL
20205: PUSH
20206: LD_VAR 0 2
20210: PPUSH
20211: CALL_OW 261
20215: PUSH
20216: LD_INT 20
20218: GREATER
20219: OR
20220: PUSH
20221: LD_VAR 0 2
20225: PPUSH
20226: CALL_OW 314
20230: NOT
20231: AND
20232: PUSH
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 263
20242: PUSH
20243: LD_INT 1
20245: NONEQUAL
20246: PUSH
20247: LD_VAR 0 2
20251: PPUSH
20252: CALL_OW 311
20256: OR
20257: AND
20258: IFFALSE 20299
// begin ComCollect ( j , x , y ) ;
20260: LD_VAR 0 2
20264: PPUSH
20265: LD_VAR 0 6
20269: PPUSH
20270: LD_VAR 0 7
20274: PPUSH
20275: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20279: LD_VAR 0 2
20283: PPUSH
20284: LD_VAR 0 8
20288: PPUSH
20289: CALL_OW 172
// exit ;
20293: POP
20294: POP
20295: POP
20296: POP
20297: GO 20307
// end ;
20299: GO 20189
20301: POP
20302: POP
// end ; end ;
20303: GO 19678
20305: POP
20306: POP
// end ; end_of_file
20307: PPOPN 9
20309: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20310: LD_INT 0
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 264
20325: PUSH
20326: LD_INT 91
20328: EQUAL
20329: IFFALSE 20401
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20331: LD_INT 68
20333: PPUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 255
20343: PPUSH
20344: CALL_OW 321
20348: PUSH
20349: LD_INT 2
20351: EQUAL
20352: IFFALSE 20364
// eff := 70 else
20354: LD_ADDR_VAR 0 4
20358: PUSH
20359: LD_INT 70
20361: ST_TO_ADDR
20362: GO 20372
// eff := 30 ;
20364: LD_ADDR_VAR 0 4
20368: PUSH
20369: LD_INT 30
20371: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20372: LD_VAR 0 1
20376: PPUSH
20377: CALL_OW 250
20381: PPUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 251
20391: PPUSH
20392: LD_VAR 0 4
20396: PPUSH
20397: CALL_OW 495
// end ; end ;
20401: LD_VAR 0 2
20405: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20406: LD_INT 0
20408: PPUSH
// end ;
20409: LD_VAR 0 4
20413: RET
// export function SOS_Command ( cmd ) ; begin
20414: LD_INT 0
20416: PPUSH
// end ;
20417: LD_VAR 0 2
20421: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20422: LD_INT 0
20424: PPUSH
// end ;
20425: LD_VAR 0 6
20429: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20430: LD_INT 0
20432: PPUSH
20433: PPUSH
// if not vehicle or not factory then
20434: LD_VAR 0 1
20438: NOT
20439: PUSH
20440: LD_VAR 0 2
20444: NOT
20445: OR
20446: IFFALSE 20450
// exit ;
20448: GO 20681
// if factoryWaypoints >= factory then
20450: LD_EXP 65
20454: PUSH
20455: LD_VAR 0 2
20459: GREATEREQUAL
20460: IFFALSE 20681
// if factoryWaypoints [ factory ] then
20462: LD_EXP 65
20466: PUSH
20467: LD_VAR 0 2
20471: ARRAY
20472: IFFALSE 20681
// begin if GetControl ( vehicle ) = control_manual then
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 263
20483: PUSH
20484: LD_INT 1
20486: EQUAL
20487: IFFALSE 20568
// begin driver := IsDrivenBy ( vehicle ) ;
20489: LD_ADDR_VAR 0 4
20493: PUSH
20494: LD_VAR 0 1
20498: PPUSH
20499: CALL_OW 311
20503: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20504: LD_VAR 0 4
20508: PPUSH
20509: LD_EXP 65
20513: PUSH
20514: LD_VAR 0 2
20518: ARRAY
20519: PUSH
20520: LD_INT 3
20522: ARRAY
20523: PPUSH
20524: LD_EXP 65
20528: PUSH
20529: LD_VAR 0 2
20533: ARRAY
20534: PUSH
20535: LD_INT 4
20537: ARRAY
20538: PPUSH
20539: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20543: LD_VAR 0 4
20547: PPUSH
20548: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20552: LD_VAR 0 4
20556: PPUSH
20557: LD_VAR 0 2
20561: PPUSH
20562: CALL_OW 180
// end else
20566: GO 20681
// if GetControl ( vehicle ) = control_remote then
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 263
20577: PUSH
20578: LD_INT 2
20580: EQUAL
20581: IFFALSE 20642
// begin wait ( 0 0$2 ) ;
20583: LD_INT 70
20585: PPUSH
20586: CALL_OW 67
// if Connect ( vehicle ) then
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL 32705 0 1
20599: IFFALSE 20640
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20601: LD_VAR 0 1
20605: PPUSH
20606: LD_EXP 65
20610: PUSH
20611: LD_VAR 0 2
20615: ARRAY
20616: PUSH
20617: LD_INT 3
20619: ARRAY
20620: PPUSH
20621: LD_EXP 65
20625: PUSH
20626: LD_VAR 0 2
20630: ARRAY
20631: PUSH
20632: LD_INT 4
20634: ARRAY
20635: PPUSH
20636: CALL_OW 171
// end else
20640: GO 20681
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20642: LD_VAR 0 1
20646: PPUSH
20647: LD_EXP 65
20651: PUSH
20652: LD_VAR 0 2
20656: ARRAY
20657: PUSH
20658: LD_INT 3
20660: ARRAY
20661: PPUSH
20662: LD_EXP 65
20666: PUSH
20667: LD_VAR 0 2
20671: ARRAY
20672: PUSH
20673: LD_INT 4
20675: ARRAY
20676: PPUSH
20677: CALL_OW 171
// end ; end ;
20681: LD_VAR 0 3
20685: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20686: LD_INT 0
20688: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20689: LD_VAR 0 1
20693: PUSH
20694: LD_INT 250
20696: EQUAL
20697: PUSH
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 264
20707: PUSH
20708: LD_INT 81
20710: EQUAL
20711: AND
20712: IFFALSE 20733
// MinerPlaceMine ( unit , x , y ) ;
20714: LD_VAR 0 2
20718: PPUSH
20719: LD_VAR 0 4
20723: PPUSH
20724: LD_VAR 0 5
20728: PPUSH
20729: CALL 23118 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20733: LD_VAR 0 1
20737: PUSH
20738: LD_INT 251
20740: EQUAL
20741: PUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: CALL_OW 264
20751: PUSH
20752: LD_INT 81
20754: EQUAL
20755: AND
20756: IFFALSE 20777
// MinerDetonateMine ( unit , x , y ) ;
20758: LD_VAR 0 2
20762: PPUSH
20763: LD_VAR 0 4
20767: PPUSH
20768: LD_VAR 0 5
20772: PPUSH
20773: CALL 23393 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20777: LD_VAR 0 1
20781: PUSH
20782: LD_INT 252
20784: EQUAL
20785: PUSH
20786: LD_VAR 0 2
20790: PPUSH
20791: CALL_OW 264
20795: PUSH
20796: LD_INT 81
20798: EQUAL
20799: AND
20800: IFFALSE 20821
// MinerCreateMinefield ( unit , x , y ) ;
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 4
20811: PPUSH
20812: LD_VAR 0 5
20816: PPUSH
20817: CALL 23810 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20821: LD_VAR 0 1
20825: PUSH
20826: LD_INT 253
20828: EQUAL
20829: PUSH
20830: LD_VAR 0 2
20834: PPUSH
20835: CALL_OW 257
20839: PUSH
20840: LD_INT 5
20842: EQUAL
20843: AND
20844: IFFALSE 20865
// ComBinocular ( unit , x , y ) ;
20846: LD_VAR 0 2
20850: PPUSH
20851: LD_VAR 0 4
20855: PPUSH
20856: LD_VAR 0 5
20860: PPUSH
20861: CALL 24179 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20865: LD_VAR 0 1
20869: PUSH
20870: LD_INT 254
20872: EQUAL
20873: PUSH
20874: LD_VAR 0 2
20878: PPUSH
20879: CALL_OW 264
20883: PUSH
20884: LD_INT 99
20886: EQUAL
20887: AND
20888: PUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 263
20898: PUSH
20899: LD_INT 3
20901: EQUAL
20902: AND
20903: IFFALSE 20919
// HackDestroyVehicle ( unit , selectedUnit ) ;
20905: LD_VAR 0 2
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: CALL 22482 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20919: LD_VAR 0 1
20923: PUSH
20924: LD_INT 255
20926: EQUAL
20927: PUSH
20928: LD_VAR 0 2
20932: PPUSH
20933: CALL_OW 264
20937: PUSH
20938: LD_INT 14
20940: PUSH
20941: LD_INT 53
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: IN
20948: AND
20949: PUSH
20950: LD_VAR 0 4
20954: PPUSH
20955: LD_VAR 0 5
20959: PPUSH
20960: CALL_OW 488
20964: AND
20965: IFFALSE 20989
// CutTreeXYR ( unit , x , y , 12 ) ;
20967: LD_VAR 0 2
20971: PPUSH
20972: LD_VAR 0 4
20976: PPUSH
20977: LD_VAR 0 5
20981: PPUSH
20982: LD_INT 12
20984: PPUSH
20985: CALL 21052 0 4
// if cmd = 256 then
20989: LD_VAR 0 1
20993: PUSH
20994: LD_INT 256
20996: EQUAL
20997: IFFALSE 21018
// SetFactoryWaypoint ( unit , x , y ) ;
20999: LD_VAR 0 2
21003: PPUSH
21004: LD_VAR 0 4
21008: PPUSH
21009: LD_VAR 0 5
21013: PPUSH
21014: CALL 18999 0 3
// if cmd = 257 then
21018: LD_VAR 0 1
21022: PUSH
21023: LD_INT 257
21025: EQUAL
21026: IFFALSE 21047
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21028: LD_VAR 0 2
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: LD_VAR 0 5
21042: PPUSH
21043: CALL 19361 0 3
// end ;
21047: LD_VAR 0 6
21051: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21063: LD_VAR 0 1
21067: NOT
21068: PUSH
21069: LD_VAR 0 2
21073: PPUSH
21074: LD_VAR 0 3
21078: PPUSH
21079: CALL_OW 488
21083: NOT
21084: OR
21085: PUSH
21086: LD_VAR 0 4
21090: NOT
21091: OR
21092: IFFALSE 21096
// exit ;
21094: GO 21436
// list := [ ] ;
21096: LD_ADDR_VAR 0 13
21100: PUSH
21101: EMPTY
21102: ST_TO_ADDR
// if x - r < 0 then
21103: LD_VAR 0 2
21107: PUSH
21108: LD_VAR 0 4
21112: MINUS
21113: PUSH
21114: LD_INT 0
21116: LESS
21117: IFFALSE 21129
// min_x := 0 else
21119: LD_ADDR_VAR 0 7
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
21127: GO 21145
// min_x := x - r ;
21129: LD_ADDR_VAR 0 7
21133: PUSH
21134: LD_VAR 0 2
21138: PUSH
21139: LD_VAR 0 4
21143: MINUS
21144: ST_TO_ADDR
// if y - r < 0 then
21145: LD_VAR 0 3
21149: PUSH
21150: LD_VAR 0 4
21154: MINUS
21155: PUSH
21156: LD_INT 0
21158: LESS
21159: IFFALSE 21171
// min_y := 0 else
21161: LD_ADDR_VAR 0 8
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
21169: GO 21187
// min_y := y - r ;
21171: LD_ADDR_VAR 0 8
21175: PUSH
21176: LD_VAR 0 3
21180: PUSH
21181: LD_VAR 0 4
21185: MINUS
21186: ST_TO_ADDR
// max_x := x + r ;
21187: LD_ADDR_VAR 0 9
21191: PUSH
21192: LD_VAR 0 2
21196: PUSH
21197: LD_VAR 0 4
21201: PLUS
21202: ST_TO_ADDR
// max_y := y + r ;
21203: LD_ADDR_VAR 0 10
21207: PUSH
21208: LD_VAR 0 3
21212: PUSH
21213: LD_VAR 0 4
21217: PLUS
21218: ST_TO_ADDR
// for _x = min_x to max_x do
21219: LD_ADDR_VAR 0 11
21223: PUSH
21224: DOUBLE
21225: LD_VAR 0 7
21229: DEC
21230: ST_TO_ADDR
21231: LD_VAR 0 9
21235: PUSH
21236: FOR_TO
21237: IFFALSE 21354
// for _y = min_y to max_y do
21239: LD_ADDR_VAR 0 12
21243: PUSH
21244: DOUBLE
21245: LD_VAR 0 8
21249: DEC
21250: ST_TO_ADDR
21251: LD_VAR 0 10
21255: PUSH
21256: FOR_TO
21257: IFFALSE 21350
// begin if not ValidHex ( _x , _y ) then
21259: LD_VAR 0 11
21263: PPUSH
21264: LD_VAR 0 12
21268: PPUSH
21269: CALL_OW 488
21273: NOT
21274: IFFALSE 21278
// continue ;
21276: GO 21256
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21278: LD_VAR 0 11
21282: PPUSH
21283: LD_VAR 0 12
21287: PPUSH
21288: CALL_OW 351
21292: PUSH
21293: LD_VAR 0 11
21297: PPUSH
21298: LD_VAR 0 12
21302: PPUSH
21303: CALL_OW 554
21307: AND
21308: IFFALSE 21348
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21310: LD_ADDR_VAR 0 13
21314: PUSH
21315: LD_VAR 0 13
21319: PPUSH
21320: LD_VAR 0 13
21324: PUSH
21325: LD_INT 1
21327: PLUS
21328: PPUSH
21329: LD_VAR 0 11
21333: PUSH
21334: LD_VAR 0 12
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 2
21347: ST_TO_ADDR
// end ;
21348: GO 21256
21350: POP
21351: POP
21352: GO 21236
21354: POP
21355: POP
// if not list then
21356: LD_VAR 0 13
21360: NOT
21361: IFFALSE 21365
// exit ;
21363: GO 21436
// for i in list do
21365: LD_ADDR_VAR 0 6
21369: PUSH
21370: LD_VAR 0 13
21374: PUSH
21375: FOR_IN
21376: IFFALSE 21434
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21378: LD_VAR 0 1
21382: PPUSH
21383: LD_STRING M
21385: PUSH
21386: LD_VAR 0 6
21390: PUSH
21391: LD_INT 1
21393: ARRAY
21394: PUSH
21395: LD_VAR 0 6
21399: PUSH
21400: LD_INT 2
21402: ARRAY
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: PPUSH
21428: CALL_OW 447
21432: GO 21375
21434: POP
21435: POP
// end ;
21436: LD_VAR 0 5
21440: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21441: LD_EXP 68
21445: NOT
21446: IFFALSE 21496
21448: GO 21450
21450: DISABLE
// begin initHack := true ;
21451: LD_ADDR_EXP 68
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// hackTanks := [ ] ;
21459: LD_ADDR_EXP 69
21463: PUSH
21464: EMPTY
21465: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21466: LD_ADDR_EXP 70
21470: PUSH
21471: EMPTY
21472: ST_TO_ADDR
// hackLimit := 3 ;
21473: LD_ADDR_EXP 71
21477: PUSH
21478: LD_INT 3
21480: ST_TO_ADDR
// hackDist := 12 ;
21481: LD_ADDR_EXP 72
21485: PUSH
21486: LD_INT 12
21488: ST_TO_ADDR
// hackCounter := [ ] ;
21489: LD_ADDR_EXP 73
21493: PUSH
21494: EMPTY
21495: ST_TO_ADDR
// end ;
21496: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21497: LD_EXP 68
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 99
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: AND
21517: IFFALSE 21770
21519: GO 21521
21521: DISABLE
21522: LD_INT 0
21524: PPUSH
21525: PPUSH
// begin enable ;
21526: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21527: LD_ADDR_VAR 0 1
21531: PUSH
21532: LD_INT 34
21534: PUSH
21535: LD_INT 99
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: PUSH
21547: FOR_IN
21548: IFFALSE 21768
// begin if not i in hackTanks then
21550: LD_VAR 0 1
21554: PUSH
21555: LD_EXP 69
21559: IN
21560: NOT
21561: IFFALSE 21644
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21563: LD_ADDR_EXP 69
21567: PUSH
21568: LD_EXP 69
21572: PPUSH
21573: LD_EXP 69
21577: PUSH
21578: LD_INT 1
21580: PLUS
21581: PPUSH
21582: LD_VAR 0 1
21586: PPUSH
21587: CALL_OW 1
21591: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21592: LD_ADDR_EXP 70
21596: PUSH
21597: LD_EXP 70
21601: PPUSH
21602: LD_EXP 70
21606: PUSH
21607: LD_INT 1
21609: PLUS
21610: PPUSH
21611: EMPTY
21612: PPUSH
21613: CALL_OW 1
21617: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21618: LD_ADDR_EXP 73
21622: PUSH
21623: LD_EXP 73
21627: PPUSH
21628: LD_EXP 73
21632: PUSH
21633: LD_INT 1
21635: PLUS
21636: PPUSH
21637: EMPTY
21638: PPUSH
21639: CALL_OW 1
21643: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 302
21653: NOT
21654: IFFALSE 21667
// begin HackUnlinkAll ( i ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: CALL 21773 0 1
// continue ;
21665: GO 21547
// end ; HackCheckCapturedStatus ( i ) ;
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL 22216 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21676: LD_ADDR_VAR 0 2
21680: PUSH
21681: LD_INT 81
21683: PUSH
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL_OW 255
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 33
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 91
21710: PUSH
21711: LD_VAR 0 1
21715: PUSH
21716: LD_EXP 72
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 50
21728: PUSH
21729: EMPTY
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL_OW 69
21742: ST_TO_ADDR
// if not tmp then
21743: LD_VAR 0 2
21747: NOT
21748: IFFALSE 21752
// continue ;
21750: GO 21547
// HackLink ( i , tmp ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_VAR 0 2
21761: PPUSH
21762: CALL 21909 0 2
// end ;
21766: GO 21547
21768: POP
21769: POP
// end ;
21770: PPOPN 2
21772: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21773: LD_INT 0
21775: PPUSH
21776: PPUSH
21777: PPUSH
// if not hack in hackTanks then
21778: LD_VAR 0 1
21782: PUSH
21783: LD_EXP 69
21787: IN
21788: NOT
21789: IFFALSE 21793
// exit ;
21791: GO 21904
// index := GetElementIndex ( hackTanks , hack ) ;
21793: LD_ADDR_VAR 0 4
21797: PUSH
21798: LD_EXP 69
21802: PPUSH
21803: LD_VAR 0 1
21807: PPUSH
21808: CALL 29521 0 2
21812: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21813: LD_EXP 70
21817: PUSH
21818: LD_VAR 0 4
21822: ARRAY
21823: IFFALSE 21904
// begin for i in hackTanksCaptured [ index ] do
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_EXP 70
21834: PUSH
21835: LD_VAR 0 4
21839: ARRAY
21840: PUSH
21841: FOR_IN
21842: IFFALSE 21868
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21844: LD_VAR 0 3
21848: PUSH
21849: LD_INT 1
21851: ARRAY
21852: PPUSH
21853: LD_VAR 0 3
21857: PUSH
21858: LD_INT 2
21860: ARRAY
21861: PPUSH
21862: CALL_OW 235
21866: GO 21841
21868: POP
21869: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21870: LD_ADDR_EXP 70
21874: PUSH
21875: LD_EXP 70
21879: PPUSH
21880: LD_VAR 0 4
21884: PPUSH
21885: EMPTY
21886: PPUSH
21887: CALL_OW 1
21891: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21892: LD_VAR 0 1
21896: PPUSH
21897: LD_INT 0
21899: PPUSH
21900: CALL_OW 505
// end ; end ;
21904: LD_VAR 0 2
21908: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
21913: PPUSH
// if not hack in hackTanks or not vehicles then
21914: LD_VAR 0 1
21918: PUSH
21919: LD_EXP 69
21923: IN
21924: NOT
21925: PUSH
21926: LD_VAR 0 2
21930: NOT
21931: OR
21932: IFFALSE 21936
// exit ;
21934: GO 22211
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21936: LD_ADDR_VAR 0 2
21940: PUSH
21941: LD_VAR 0 1
21945: PPUSH
21946: LD_VAR 0 2
21950: PPUSH
21951: LD_INT 1
21953: PPUSH
21954: LD_INT 1
21956: PPUSH
21957: CALL 30171 0 4
21961: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21962: LD_ADDR_VAR 0 5
21966: PUSH
21967: LD_EXP 69
21971: PPUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL 29521 0 2
21981: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21982: LD_EXP 70
21986: PUSH
21987: LD_VAR 0 5
21991: ARRAY
21992: PUSH
21993: LD_EXP 71
21997: LESS
21998: IFFALSE 22187
// begin for i := 1 to vehicles do
22000: LD_ADDR_VAR 0 4
22004: PUSH
22005: DOUBLE
22006: LD_INT 1
22008: DEC
22009: ST_TO_ADDR
22010: LD_VAR 0 2
22014: PUSH
22015: FOR_TO
22016: IFFALSE 22185
// begin if hackTanksCaptured [ index ] = hackLimit then
22018: LD_EXP 70
22022: PUSH
22023: LD_VAR 0 5
22027: ARRAY
22028: PUSH
22029: LD_EXP 71
22033: EQUAL
22034: IFFALSE 22038
// break ;
22036: GO 22185
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22038: LD_ADDR_EXP 73
22042: PUSH
22043: LD_EXP 73
22047: PPUSH
22048: LD_VAR 0 5
22052: PPUSH
22053: LD_EXP 73
22057: PUSH
22058: LD_VAR 0 5
22062: ARRAY
22063: PUSH
22064: LD_INT 1
22066: PLUS
22067: PPUSH
22068: CALL_OW 1
22072: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22073: LD_ADDR_EXP 70
22077: PUSH
22078: LD_EXP 70
22082: PPUSH
22083: LD_VAR 0 5
22087: PUSH
22088: LD_EXP 70
22092: PUSH
22093: LD_VAR 0 5
22097: ARRAY
22098: PUSH
22099: LD_INT 1
22101: PLUS
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PPUSH
22107: LD_VAR 0 2
22111: PUSH
22112: LD_VAR 0 4
22116: ARRAY
22117: PUSH
22118: LD_VAR 0 2
22122: PUSH
22123: LD_VAR 0 4
22127: ARRAY
22128: PPUSH
22129: CALL_OW 255
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PPUSH
22138: CALL 29736 0 3
22142: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22143: LD_VAR 0 2
22147: PUSH
22148: LD_VAR 0 4
22152: ARRAY
22153: PPUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 255
22163: PPUSH
22164: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22168: LD_VAR 0 2
22172: PUSH
22173: LD_VAR 0 4
22177: ARRAY
22178: PPUSH
22179: CALL_OW 141
// end ;
22183: GO 22015
22185: POP
22186: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22187: LD_VAR 0 1
22191: PPUSH
22192: LD_EXP 70
22196: PUSH
22197: LD_VAR 0 5
22201: ARRAY
22202: PUSH
22203: LD_INT 0
22205: PLUS
22206: PPUSH
22207: CALL_OW 505
// end ;
22211: LD_VAR 0 3
22215: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22216: LD_INT 0
22218: PPUSH
22219: PPUSH
22220: PPUSH
22221: PPUSH
// if not hack in hackTanks then
22222: LD_VAR 0 1
22226: PUSH
22227: LD_EXP 69
22231: IN
22232: NOT
22233: IFFALSE 22237
// exit ;
22235: GO 22477
// index := GetElementIndex ( hackTanks , hack ) ;
22237: LD_ADDR_VAR 0 4
22241: PUSH
22242: LD_EXP 69
22246: PPUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL 29521 0 2
22256: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22257: LD_ADDR_VAR 0 3
22261: PUSH
22262: DOUBLE
22263: LD_EXP 70
22267: PUSH
22268: LD_VAR 0 4
22272: ARRAY
22273: INC
22274: ST_TO_ADDR
22275: LD_INT 1
22277: PUSH
22278: FOR_DOWNTO
22279: IFFALSE 22451
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22281: LD_ADDR_VAR 0 5
22285: PUSH
22286: LD_EXP 70
22290: PUSH
22291: LD_VAR 0 4
22295: ARRAY
22296: PUSH
22297: LD_VAR 0 3
22301: ARRAY
22302: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22303: LD_VAR 0 5
22307: PUSH
22308: LD_INT 1
22310: ARRAY
22311: PPUSH
22312: CALL_OW 302
22316: NOT
22317: PUSH
22318: LD_VAR 0 5
22322: PUSH
22323: LD_INT 1
22325: ARRAY
22326: PPUSH
22327: CALL_OW 255
22331: PUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 255
22341: NONEQUAL
22342: OR
22343: IFFALSE 22449
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22345: LD_VAR 0 5
22349: PUSH
22350: LD_INT 1
22352: ARRAY
22353: PPUSH
22354: CALL_OW 305
22358: PUSH
22359: LD_VAR 0 5
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PPUSH
22368: CALL_OW 255
22372: PUSH
22373: LD_VAR 0 1
22377: PPUSH
22378: CALL_OW 255
22382: EQUAL
22383: AND
22384: IFFALSE 22408
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22386: LD_VAR 0 5
22390: PUSH
22391: LD_INT 1
22393: ARRAY
22394: PPUSH
22395: LD_VAR 0 5
22399: PUSH
22400: LD_INT 2
22402: ARRAY
22403: PPUSH
22404: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22408: LD_ADDR_EXP 70
22412: PUSH
22413: LD_EXP 70
22417: PPUSH
22418: LD_VAR 0 4
22422: PPUSH
22423: LD_EXP 70
22427: PUSH
22428: LD_VAR 0 4
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 3
22438: PPUSH
22439: CALL_OW 3
22443: PPUSH
22444: CALL_OW 1
22448: ST_TO_ADDR
// end ; end ;
22449: GO 22278
22451: POP
22452: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22453: LD_VAR 0 1
22457: PPUSH
22458: LD_EXP 70
22462: PUSH
22463: LD_VAR 0 4
22467: ARRAY
22468: PUSH
22469: LD_INT 0
22471: PLUS
22472: PPUSH
22473: CALL_OW 505
// end ;
22477: LD_VAR 0 2
22481: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22482: LD_INT 0
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
// if not hack in hackTanks then
22488: LD_VAR 0 1
22492: PUSH
22493: LD_EXP 69
22497: IN
22498: NOT
22499: IFFALSE 22503
// exit ;
22501: GO 22588
// index := GetElementIndex ( hackTanks , hack ) ;
22503: LD_ADDR_VAR 0 5
22507: PUSH
22508: LD_EXP 69
22512: PPUSH
22513: LD_VAR 0 1
22517: PPUSH
22518: CALL 29521 0 2
22522: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22523: LD_ADDR_VAR 0 4
22527: PUSH
22528: DOUBLE
22529: LD_INT 1
22531: DEC
22532: ST_TO_ADDR
22533: LD_EXP 70
22537: PUSH
22538: LD_VAR 0 5
22542: ARRAY
22543: PUSH
22544: FOR_TO
22545: IFFALSE 22586
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22547: LD_EXP 70
22551: PUSH
22552: LD_VAR 0 5
22556: ARRAY
22557: PUSH
22558: LD_VAR 0 4
22562: ARRAY
22563: PUSH
22564: LD_INT 1
22566: ARRAY
22567: PUSH
22568: LD_VAR 0 2
22572: EQUAL
22573: IFFALSE 22584
// KillUnit ( vehicle ) ;
22575: LD_VAR 0 2
22579: PPUSH
22580: CALL_OW 66
22584: GO 22544
22586: POP
22587: POP
// end ;
22588: LD_VAR 0 3
22592: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22593: LD_EXP 74
22597: NOT
22598: IFFALSE 22633
22600: GO 22602
22602: DISABLE
// begin initMiner := true ;
22603: LD_ADDR_EXP 74
22607: PUSH
22608: LD_INT 1
22610: ST_TO_ADDR
// minersList := [ ] ;
22611: LD_ADDR_EXP 75
22615: PUSH
22616: EMPTY
22617: ST_TO_ADDR
// minerMinesList := [ ] ;
22618: LD_ADDR_EXP 76
22622: PUSH
22623: EMPTY
22624: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22625: LD_ADDR_EXP 77
22629: PUSH
22630: LD_INT 5
22632: ST_TO_ADDR
// end ;
22633: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22634: LD_EXP 74
22638: PUSH
22639: LD_INT 34
22641: PUSH
22642: LD_INT 81
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PPUSH
22649: CALL_OW 69
22653: AND
22654: IFFALSE 23115
22656: GO 22658
22658: DISABLE
22659: LD_INT 0
22661: PPUSH
22662: PPUSH
22663: PPUSH
22664: PPUSH
// begin enable ;
22665: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22666: LD_ADDR_VAR 0 1
22670: PUSH
22671: LD_INT 34
22673: PUSH
22674: LD_INT 81
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PPUSH
22681: CALL_OW 69
22685: PUSH
22686: FOR_IN
22687: IFFALSE 22759
// begin if not i in minersList then
22689: LD_VAR 0 1
22693: PUSH
22694: LD_EXP 75
22698: IN
22699: NOT
22700: IFFALSE 22757
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22702: LD_ADDR_EXP 75
22706: PUSH
22707: LD_EXP 75
22711: PPUSH
22712: LD_EXP 75
22716: PUSH
22717: LD_INT 1
22719: PLUS
22720: PPUSH
22721: LD_VAR 0 1
22725: PPUSH
22726: CALL_OW 1
22730: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22731: LD_ADDR_EXP 76
22735: PUSH
22736: LD_EXP 76
22740: PPUSH
22741: LD_EXP 76
22745: PUSH
22746: LD_INT 1
22748: PLUS
22749: PPUSH
22750: EMPTY
22751: PPUSH
22752: CALL_OW 1
22756: ST_TO_ADDR
// end end ;
22757: GO 22686
22759: POP
22760: POP
// for i := minerMinesList downto 1 do
22761: LD_ADDR_VAR 0 1
22765: PUSH
22766: DOUBLE
22767: LD_EXP 76
22771: INC
22772: ST_TO_ADDR
22773: LD_INT 1
22775: PUSH
22776: FOR_DOWNTO
22777: IFFALSE 23113
// begin if IsLive ( minersList [ i ] ) then
22779: LD_EXP 75
22783: PUSH
22784: LD_VAR 0 1
22788: ARRAY
22789: PPUSH
22790: CALL_OW 300
22794: IFFALSE 22822
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22796: LD_EXP 75
22800: PUSH
22801: LD_VAR 0 1
22805: ARRAY
22806: PPUSH
22807: LD_EXP 76
22811: PUSH
22812: LD_VAR 0 1
22816: ARRAY
22817: PPUSH
22818: CALL_OW 505
// if not minerMinesList [ i ] then
22822: LD_EXP 76
22826: PUSH
22827: LD_VAR 0 1
22831: ARRAY
22832: NOT
22833: IFFALSE 22837
// continue ;
22835: GO 22776
// for j := minerMinesList [ i ] downto 1 do
22837: LD_ADDR_VAR 0 2
22841: PUSH
22842: DOUBLE
22843: LD_EXP 76
22847: PUSH
22848: LD_VAR 0 1
22852: ARRAY
22853: INC
22854: ST_TO_ADDR
22855: LD_INT 1
22857: PUSH
22858: FOR_DOWNTO
22859: IFFALSE 23109
// begin side := GetSide ( minersList [ i ] ) ;
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: LD_EXP 75
22870: PUSH
22871: LD_VAR 0 1
22875: ARRAY
22876: PPUSH
22877: CALL_OW 255
22881: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22882: LD_ADDR_VAR 0 4
22886: PUSH
22887: LD_EXP 76
22891: PUSH
22892: LD_VAR 0 1
22896: ARRAY
22897: PUSH
22898: LD_VAR 0 2
22902: ARRAY
22903: PUSH
22904: LD_INT 1
22906: ARRAY
22907: PPUSH
22908: LD_EXP 76
22912: PUSH
22913: LD_VAR 0 1
22917: ARRAY
22918: PUSH
22919: LD_VAR 0 2
22923: ARRAY
22924: PUSH
22925: LD_INT 2
22927: ARRAY
22928: PPUSH
22929: CALL_OW 428
22933: ST_TO_ADDR
// if not tmp then
22934: LD_VAR 0 4
22938: NOT
22939: IFFALSE 22943
// continue ;
22941: GO 22858
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22943: LD_VAR 0 4
22947: PUSH
22948: LD_INT 81
22950: PUSH
22951: LD_VAR 0 3
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PPUSH
22960: CALL_OW 69
22964: IN
22965: PUSH
22966: LD_EXP 76
22970: PUSH
22971: LD_VAR 0 1
22975: ARRAY
22976: PUSH
22977: LD_VAR 0 2
22981: ARRAY
22982: PUSH
22983: LD_INT 1
22985: ARRAY
22986: PPUSH
22987: LD_EXP 76
22991: PUSH
22992: LD_VAR 0 1
22996: ARRAY
22997: PUSH
22998: LD_VAR 0 2
23002: ARRAY
23003: PUSH
23004: LD_INT 2
23006: ARRAY
23007: PPUSH
23008: CALL_OW 458
23012: AND
23013: IFFALSE 23107
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23015: LD_EXP 76
23019: PUSH
23020: LD_VAR 0 1
23024: ARRAY
23025: PUSH
23026: LD_VAR 0 2
23030: ARRAY
23031: PUSH
23032: LD_INT 1
23034: ARRAY
23035: PPUSH
23036: LD_EXP 76
23040: PUSH
23041: LD_VAR 0 1
23045: ARRAY
23046: PUSH
23047: LD_VAR 0 2
23051: ARRAY
23052: PUSH
23053: LD_INT 2
23055: ARRAY
23056: PPUSH
23057: LD_VAR 0 3
23061: PPUSH
23062: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23066: LD_ADDR_EXP 76
23070: PUSH
23071: LD_EXP 76
23075: PPUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: LD_EXP 76
23085: PUSH
23086: LD_VAR 0 1
23090: ARRAY
23091: PPUSH
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 3
23101: PPUSH
23102: CALL_OW 1
23106: ST_TO_ADDR
// end ; end ;
23107: GO 22858
23109: POP
23110: POP
// end ;
23111: GO 22776
23113: POP
23114: POP
// end ;
23115: PPOPN 4
23117: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
// result := false ;
23122: LD_ADDR_VAR 0 4
23126: PUSH
23127: LD_INT 0
23129: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 264
23139: PUSH
23140: LD_INT 81
23142: EQUAL
23143: NOT
23144: IFFALSE 23148
// exit ;
23146: GO 23388
// index := GetElementIndex ( minersList , unit ) ;
23148: LD_ADDR_VAR 0 5
23152: PUSH
23153: LD_EXP 75
23157: PPUSH
23158: LD_VAR 0 1
23162: PPUSH
23163: CALL 29521 0 2
23167: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23168: LD_EXP 76
23172: PUSH
23173: LD_VAR 0 5
23177: ARRAY
23178: PUSH
23179: LD_EXP 77
23183: GREATEREQUAL
23184: IFFALSE 23188
// exit ;
23186: GO 23388
// ComMoveXY ( unit , x , y ) ;
23188: LD_VAR 0 1
23192: PPUSH
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_VAR 0 3
23202: PPUSH
23203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23207: LD_INT 35
23209: PPUSH
23210: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23214: LD_VAR 0 1
23218: PPUSH
23219: LD_VAR 0 2
23223: PPUSH
23224: LD_VAR 0 3
23228: PPUSH
23229: CALL 60784 0 3
23233: NOT
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 314
23244: AND
23245: IFFALSE 23249
// exit ;
23247: GO 23388
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: CALL_OW 428
23263: PUSH
23264: LD_VAR 0 1
23268: EQUAL
23269: PUSH
23270: LD_VAR 0 1
23274: PPUSH
23275: CALL_OW 314
23279: NOT
23280: AND
23281: IFFALSE 23207
// PlaySoundXY ( x , y , PlantMine ) ;
23283: LD_VAR 0 2
23287: PPUSH
23288: LD_VAR 0 3
23292: PPUSH
23293: LD_STRING PlantMine
23295: PPUSH
23296: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23300: LD_VAR 0 2
23304: PPUSH
23305: LD_VAR 0 3
23309: PPUSH
23310: LD_VAR 0 1
23314: PPUSH
23315: CALL_OW 255
23319: PPUSH
23320: LD_INT 0
23322: PPUSH
23323: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23327: LD_ADDR_EXP 76
23331: PUSH
23332: LD_EXP 76
23336: PPUSH
23337: LD_VAR 0 5
23341: PUSH
23342: LD_EXP 76
23346: PUSH
23347: LD_VAR 0 5
23351: ARRAY
23352: PUSH
23353: LD_INT 1
23355: PLUS
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PPUSH
23361: LD_VAR 0 2
23365: PUSH
23366: LD_VAR 0 3
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PPUSH
23375: CALL 29736 0 3
23379: ST_TO_ADDR
// result := true ;
23380: LD_ADDR_VAR 0 4
23384: PUSH
23385: LD_INT 1
23387: ST_TO_ADDR
// end ;
23388: LD_VAR 0 4
23392: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23393: LD_INT 0
23395: PPUSH
23396: PPUSH
23397: PPUSH
// if not unit in minersList then
23398: LD_VAR 0 1
23402: PUSH
23403: LD_EXP 75
23407: IN
23408: NOT
23409: IFFALSE 23413
// exit ;
23411: GO 23805
// index := GetElementIndex ( minersList , unit ) ;
23413: LD_ADDR_VAR 0 6
23417: PUSH
23418: LD_EXP 75
23422: PPUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL 29521 0 2
23432: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23433: LD_ADDR_VAR 0 5
23437: PUSH
23438: DOUBLE
23439: LD_EXP 76
23443: PUSH
23444: LD_VAR 0 6
23448: ARRAY
23449: INC
23450: ST_TO_ADDR
23451: LD_INT 1
23453: PUSH
23454: FOR_DOWNTO
23455: IFFALSE 23616
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23457: LD_EXP 76
23461: PUSH
23462: LD_VAR 0 6
23466: ARRAY
23467: PUSH
23468: LD_VAR 0 5
23472: ARRAY
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: PUSH
23478: LD_VAR 0 2
23482: EQUAL
23483: PUSH
23484: LD_EXP 76
23488: PUSH
23489: LD_VAR 0 6
23493: ARRAY
23494: PUSH
23495: LD_VAR 0 5
23499: ARRAY
23500: PUSH
23501: LD_INT 2
23503: ARRAY
23504: PUSH
23505: LD_VAR 0 3
23509: EQUAL
23510: AND
23511: IFFALSE 23614
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23513: LD_EXP 76
23517: PUSH
23518: LD_VAR 0 6
23522: ARRAY
23523: PUSH
23524: LD_VAR 0 5
23528: ARRAY
23529: PUSH
23530: LD_INT 1
23532: ARRAY
23533: PPUSH
23534: LD_EXP 76
23538: PUSH
23539: LD_VAR 0 6
23543: ARRAY
23544: PUSH
23545: LD_VAR 0 5
23549: ARRAY
23550: PUSH
23551: LD_INT 2
23553: ARRAY
23554: PPUSH
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL_OW 255
23564: PPUSH
23565: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23569: LD_ADDR_EXP 76
23573: PUSH
23574: LD_EXP 76
23578: PPUSH
23579: LD_VAR 0 6
23583: PPUSH
23584: LD_EXP 76
23588: PUSH
23589: LD_VAR 0 6
23593: ARRAY
23594: PPUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: CALL_OW 3
23604: PPUSH
23605: CALL_OW 1
23609: ST_TO_ADDR
// exit ;
23610: POP
23611: POP
23612: GO 23805
// end ; end ;
23614: GO 23454
23616: POP
23617: POP
// for i := minerMinesList [ index ] downto 1 do
23618: LD_ADDR_VAR 0 5
23622: PUSH
23623: DOUBLE
23624: LD_EXP 76
23628: PUSH
23629: LD_VAR 0 6
23633: ARRAY
23634: INC
23635: ST_TO_ADDR
23636: LD_INT 1
23638: PUSH
23639: FOR_DOWNTO
23640: IFFALSE 23803
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23642: LD_EXP 76
23646: PUSH
23647: LD_VAR 0 6
23651: ARRAY
23652: PUSH
23653: LD_VAR 0 5
23657: ARRAY
23658: PUSH
23659: LD_INT 1
23661: ARRAY
23662: PPUSH
23663: LD_EXP 76
23667: PUSH
23668: LD_VAR 0 6
23672: ARRAY
23673: PUSH
23674: LD_VAR 0 5
23678: ARRAY
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: PPUSH
23684: LD_VAR 0 2
23688: PPUSH
23689: LD_VAR 0 3
23693: PPUSH
23694: CALL_OW 298
23698: PUSH
23699: LD_INT 6
23701: LESS
23702: IFFALSE 23801
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23704: LD_EXP 76
23708: PUSH
23709: LD_VAR 0 6
23713: ARRAY
23714: PUSH
23715: LD_VAR 0 5
23719: ARRAY
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PPUSH
23725: LD_EXP 76
23729: PUSH
23730: LD_VAR 0 6
23734: ARRAY
23735: PUSH
23736: LD_VAR 0 5
23740: ARRAY
23741: PUSH
23742: LD_INT 2
23744: ARRAY
23745: PPUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 255
23755: PPUSH
23756: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23760: LD_ADDR_EXP 76
23764: PUSH
23765: LD_EXP 76
23769: PPUSH
23770: LD_VAR 0 6
23774: PPUSH
23775: LD_EXP 76
23779: PUSH
23780: LD_VAR 0 6
23784: ARRAY
23785: PPUSH
23786: LD_VAR 0 5
23790: PPUSH
23791: CALL_OW 3
23795: PPUSH
23796: CALL_OW 1
23800: ST_TO_ADDR
// end ; end ;
23801: GO 23639
23803: POP
23804: POP
// end ;
23805: LD_VAR 0 4
23809: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23810: LD_INT 0
23812: PPUSH
23813: PPUSH
23814: PPUSH
23815: PPUSH
23816: PPUSH
23817: PPUSH
23818: PPUSH
23819: PPUSH
23820: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL_OW 264
23830: PUSH
23831: LD_INT 81
23833: EQUAL
23834: NOT
23835: PUSH
23836: LD_VAR 0 1
23840: PUSH
23841: LD_EXP 75
23845: IN
23846: NOT
23847: OR
23848: IFFALSE 23852
// exit ;
23850: GO 24174
// index := GetElementIndex ( minersList , unit ) ;
23852: LD_ADDR_VAR 0 6
23856: PUSH
23857: LD_EXP 75
23861: PPUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL 29521 0 2
23871: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23872: LD_ADDR_VAR 0 8
23876: PUSH
23877: LD_EXP 77
23881: PUSH
23882: LD_EXP 76
23886: PUSH
23887: LD_VAR 0 6
23891: ARRAY
23892: MINUS
23893: ST_TO_ADDR
// if not minesFreeAmount then
23894: LD_VAR 0 8
23898: NOT
23899: IFFALSE 23903
// exit ;
23901: GO 24174
// tmp := [ ] ;
23903: LD_ADDR_VAR 0 7
23907: PUSH
23908: EMPTY
23909: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23910: LD_ADDR_VAR 0 5
23914: PUSH
23915: DOUBLE
23916: LD_INT 1
23918: DEC
23919: ST_TO_ADDR
23920: LD_VAR 0 8
23924: PUSH
23925: FOR_TO
23926: IFFALSE 24121
// begin _d := rand ( 0 , 5 ) ;
23928: LD_ADDR_VAR 0 11
23932: PUSH
23933: LD_INT 0
23935: PPUSH
23936: LD_INT 5
23938: PPUSH
23939: CALL_OW 12
23943: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23944: LD_ADDR_VAR 0 12
23948: PUSH
23949: LD_INT 2
23951: PPUSH
23952: LD_INT 6
23954: PPUSH
23955: CALL_OW 12
23959: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23960: LD_ADDR_VAR 0 9
23964: PUSH
23965: LD_VAR 0 2
23969: PPUSH
23970: LD_VAR 0 11
23974: PPUSH
23975: LD_VAR 0 12
23979: PPUSH
23980: CALL_OW 272
23984: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23985: LD_ADDR_VAR 0 10
23989: PUSH
23990: LD_VAR 0 3
23994: PPUSH
23995: LD_VAR 0 11
23999: PPUSH
24000: LD_VAR 0 12
24004: PPUSH
24005: CALL_OW 273
24009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24010: LD_VAR 0 9
24014: PPUSH
24015: LD_VAR 0 10
24019: PPUSH
24020: CALL_OW 488
24024: PUSH
24025: LD_VAR 0 9
24029: PUSH
24030: LD_VAR 0 10
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_VAR 0 7
24043: IN
24044: NOT
24045: AND
24046: PUSH
24047: LD_VAR 0 9
24051: PPUSH
24052: LD_VAR 0 10
24056: PPUSH
24057: CALL_OW 458
24061: NOT
24062: AND
24063: IFFALSE 24105
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24065: LD_ADDR_VAR 0 7
24069: PUSH
24070: LD_VAR 0 7
24074: PPUSH
24075: LD_VAR 0 7
24079: PUSH
24080: LD_INT 1
24082: PLUS
24083: PPUSH
24084: LD_VAR 0 9
24088: PUSH
24089: LD_VAR 0 10
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PPUSH
24098: CALL_OW 1
24102: ST_TO_ADDR
24103: GO 24119
// i := i - 1 ;
24105: LD_ADDR_VAR 0 5
24109: PUSH
24110: LD_VAR 0 5
24114: PUSH
24115: LD_INT 1
24117: MINUS
24118: ST_TO_ADDR
// end ;
24119: GO 23925
24121: POP
24122: POP
// for i in tmp do
24123: LD_ADDR_VAR 0 5
24127: PUSH
24128: LD_VAR 0 7
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24172
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24136: LD_VAR 0 1
24140: PPUSH
24141: LD_VAR 0 5
24145: PUSH
24146: LD_INT 1
24148: ARRAY
24149: PPUSH
24150: LD_VAR 0 5
24154: PUSH
24155: LD_INT 2
24157: ARRAY
24158: PPUSH
24159: CALL 23118 0 3
24163: NOT
24164: IFFALSE 24170
// exit ;
24166: POP
24167: POP
24168: GO 24174
24170: GO 24133
24172: POP
24173: POP
// end ;
24174: LD_VAR 0 4
24178: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24179: LD_INT 0
24181: PPUSH
24182: PPUSH
24183: PPUSH
24184: PPUSH
24185: PPUSH
24186: PPUSH
24187: PPUSH
// if not GetClass ( unit ) = class_sniper then
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 257
24197: PUSH
24198: LD_INT 5
24200: EQUAL
24201: NOT
24202: IFFALSE 24206
// exit ;
24204: GO 24594
// dist := 8 ;
24206: LD_ADDR_VAR 0 5
24210: PUSH
24211: LD_INT 8
24213: ST_TO_ADDR
// viewRange := 12 ;
24214: LD_ADDR_VAR 0 7
24218: PUSH
24219: LD_INT 12
24221: ST_TO_ADDR
// side := GetSide ( unit ) ;
24222: LD_ADDR_VAR 0 6
24226: PUSH
24227: LD_VAR 0 1
24231: PPUSH
24232: CALL_OW 255
24236: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24237: LD_INT 61
24239: PPUSH
24240: LD_VAR 0 6
24244: PPUSH
24245: CALL_OW 321
24249: PUSH
24250: LD_INT 2
24252: EQUAL
24253: IFFALSE 24263
// viewRange := 16 ;
24255: LD_ADDR_VAR 0 7
24259: PUSH
24260: LD_INT 16
24262: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24263: LD_VAR 0 1
24267: PPUSH
24268: LD_VAR 0 2
24272: PPUSH
24273: LD_VAR 0 3
24277: PPUSH
24278: CALL_OW 297
24282: PUSH
24283: LD_VAR 0 5
24287: GREATER
24288: IFFALSE 24367
// begin ComMoveXY ( unit , x , y ) ;
24290: LD_VAR 0 1
24294: PPUSH
24295: LD_VAR 0 2
24299: PPUSH
24300: LD_VAR 0 3
24304: PPUSH
24305: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24309: LD_INT 35
24311: PPUSH
24312: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24316: LD_VAR 0 1
24320: PPUSH
24321: LD_VAR 0 2
24325: PPUSH
24326: LD_VAR 0 3
24330: PPUSH
24331: CALL 60784 0 3
24335: NOT
24336: IFFALSE 24340
// exit ;
24338: GO 24594
// until GetDistUnitXY ( unit , x , y ) < dist ;
24340: LD_VAR 0 1
24344: PPUSH
24345: LD_VAR 0 2
24349: PPUSH
24350: LD_VAR 0 3
24354: PPUSH
24355: CALL_OW 297
24359: PUSH
24360: LD_VAR 0 5
24364: LESS
24365: IFFALSE 24309
// end ; ComTurnXY ( unit , x , y ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_VAR 0 2
24376: PPUSH
24377: LD_VAR 0 3
24381: PPUSH
24382: CALL_OW 118
// wait ( 5 ) ;
24386: LD_INT 5
24388: PPUSH
24389: CALL_OW 67
// _d := GetDir ( unit ) ;
24393: LD_ADDR_VAR 0 10
24397: PUSH
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 254
24407: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24408: LD_ADDR_VAR 0 8
24412: PUSH
24413: LD_VAR 0 1
24417: PPUSH
24418: CALL_OW 250
24422: PPUSH
24423: LD_VAR 0 10
24427: PPUSH
24428: LD_VAR 0 5
24432: PPUSH
24433: CALL_OW 272
24437: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24438: LD_ADDR_VAR 0 9
24442: PUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 251
24452: PPUSH
24453: LD_VAR 0 10
24457: PPUSH
24458: LD_VAR 0 5
24462: PPUSH
24463: CALL_OW 273
24467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24468: LD_VAR 0 8
24472: PPUSH
24473: LD_VAR 0 9
24477: PPUSH
24478: CALL_OW 488
24482: NOT
24483: IFFALSE 24487
// exit ;
24485: GO 24594
// ComAnimCustom ( unit , 1 ) ;
24487: LD_VAR 0 1
24491: PPUSH
24492: LD_INT 1
24494: PPUSH
24495: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24499: LD_VAR 0 8
24503: PPUSH
24504: LD_VAR 0 9
24508: PPUSH
24509: LD_VAR 0 6
24513: PPUSH
24514: LD_VAR 0 7
24518: PPUSH
24519: CALL_OW 330
// repeat wait ( 1 ) ;
24523: LD_INT 1
24525: PPUSH
24526: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24530: LD_VAR 0 1
24534: PPUSH
24535: CALL_OW 316
24539: PUSH
24540: LD_VAR 0 1
24544: PPUSH
24545: CALL_OW 314
24549: OR
24550: PUSH
24551: LD_VAR 0 1
24555: PPUSH
24556: CALL_OW 302
24560: NOT
24561: OR
24562: PUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 301
24572: OR
24573: IFFALSE 24523
// RemoveSeeing ( _x , _y , side ) ;
24575: LD_VAR 0 8
24579: PPUSH
24580: LD_VAR 0 9
24584: PPUSH
24585: LD_VAR 0 6
24589: PPUSH
24590: CALL_OW 331
// end ; end_of_file
24594: LD_VAR 0 4
24598: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24599: LD_INT 0
24601: PPUSH
24602: PPUSH
// if exist_mode then
24603: LD_VAR 0 2
24607: IFFALSE 24632
// unit := CreateCharacter ( prefix & ident ) else
24609: LD_ADDR_VAR 0 5
24613: PUSH
24614: LD_VAR 0 3
24618: PUSH
24619: LD_VAR 0 1
24623: STR
24624: PPUSH
24625: CALL_OW 34
24629: ST_TO_ADDR
24630: GO 24647
// unit := NewCharacter ( ident ) ;
24632: LD_ADDR_VAR 0 5
24636: PUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 25
24646: ST_TO_ADDR
// result := unit ;
24647: LD_ADDR_VAR 0 4
24651: PUSH
24652: LD_VAR 0 5
24656: ST_TO_ADDR
// end ;
24657: LD_VAR 0 4
24661: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
// if not side or not nation then
24666: LD_VAR 0 1
24670: NOT
24671: PUSH
24672: LD_VAR 0 2
24676: NOT
24677: OR
24678: IFFALSE 24682
// exit ;
24680: GO 25450
// case nation of nation_american :
24682: LD_VAR 0 2
24686: PUSH
24687: LD_INT 1
24689: DOUBLE
24690: EQUAL
24691: IFTRUE 24695
24693: GO 24909
24695: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24696: LD_ADDR_VAR 0 4
24700: PUSH
24701: LD_INT 35
24703: PUSH
24704: LD_INT 45
24706: PUSH
24707: LD_INT 46
24709: PUSH
24710: LD_INT 47
24712: PUSH
24713: LD_INT 82
24715: PUSH
24716: LD_INT 83
24718: PUSH
24719: LD_INT 84
24721: PUSH
24722: LD_INT 85
24724: PUSH
24725: LD_INT 86
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 6
24736: PUSH
24737: LD_INT 15
24739: PUSH
24740: LD_INT 16
24742: PUSH
24743: LD_INT 7
24745: PUSH
24746: LD_INT 12
24748: PUSH
24749: LD_INT 13
24751: PUSH
24752: LD_INT 10
24754: PUSH
24755: LD_INT 14
24757: PUSH
24758: LD_INT 20
24760: PUSH
24761: LD_INT 21
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_INT 25
24769: PUSH
24770: LD_INT 32
24772: PUSH
24773: LD_INT 27
24775: PUSH
24776: LD_INT 36
24778: PUSH
24779: LD_INT 69
24781: PUSH
24782: LD_INT 39
24784: PUSH
24785: LD_INT 34
24787: PUSH
24788: LD_INT 40
24790: PUSH
24791: LD_INT 48
24793: PUSH
24794: LD_INT 49
24796: PUSH
24797: LD_INT 50
24799: PUSH
24800: LD_INT 51
24802: PUSH
24803: LD_INT 52
24805: PUSH
24806: LD_INT 53
24808: PUSH
24809: LD_INT 54
24811: PUSH
24812: LD_INT 55
24814: PUSH
24815: LD_INT 56
24817: PUSH
24818: LD_INT 57
24820: PUSH
24821: LD_INT 58
24823: PUSH
24824: LD_INT 59
24826: PUSH
24827: LD_INT 60
24829: PUSH
24830: LD_INT 61
24832: PUSH
24833: LD_INT 62
24835: PUSH
24836: LD_INT 80
24838: PUSH
24839: LD_INT 82
24841: PUSH
24842: LD_INT 83
24844: PUSH
24845: LD_INT 84
24847: PUSH
24848: LD_INT 85
24850: PUSH
24851: LD_INT 86
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: ST_TO_ADDR
24907: GO 25374
24909: LD_INT 2
24911: DOUBLE
24912: EQUAL
24913: IFTRUE 24917
24915: GO 25143
24917: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24918: LD_ADDR_VAR 0 4
24922: PUSH
24923: LD_INT 35
24925: PUSH
24926: LD_INT 45
24928: PUSH
24929: LD_INT 46
24931: PUSH
24932: LD_INT 47
24934: PUSH
24935: LD_INT 82
24937: PUSH
24938: LD_INT 83
24940: PUSH
24941: LD_INT 84
24943: PUSH
24944: LD_INT 85
24946: PUSH
24947: LD_INT 87
24949: PUSH
24950: LD_INT 70
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: LD_INT 11
24958: PUSH
24959: LD_INT 3
24961: PUSH
24962: LD_INT 4
24964: PUSH
24965: LD_INT 5
24967: PUSH
24968: LD_INT 6
24970: PUSH
24971: LD_INT 15
24973: PUSH
24974: LD_INT 18
24976: PUSH
24977: LD_INT 7
24979: PUSH
24980: LD_INT 17
24982: PUSH
24983: LD_INT 8
24985: PUSH
24986: LD_INT 20
24988: PUSH
24989: LD_INT 21
24991: PUSH
24992: LD_INT 22
24994: PUSH
24995: LD_INT 72
24997: PUSH
24998: LD_INT 26
25000: PUSH
25001: LD_INT 69
25003: PUSH
25004: LD_INT 39
25006: PUSH
25007: LD_INT 40
25009: PUSH
25010: LD_INT 41
25012: PUSH
25013: LD_INT 42
25015: PUSH
25016: LD_INT 43
25018: PUSH
25019: LD_INT 48
25021: PUSH
25022: LD_INT 49
25024: PUSH
25025: LD_INT 50
25027: PUSH
25028: LD_INT 51
25030: PUSH
25031: LD_INT 52
25033: PUSH
25034: LD_INT 53
25036: PUSH
25037: LD_INT 54
25039: PUSH
25040: LD_INT 55
25042: PUSH
25043: LD_INT 56
25045: PUSH
25046: LD_INT 60
25048: PUSH
25049: LD_INT 61
25051: PUSH
25052: LD_INT 62
25054: PUSH
25055: LD_INT 66
25057: PUSH
25058: LD_INT 67
25060: PUSH
25061: LD_INT 68
25063: PUSH
25064: LD_INT 81
25066: PUSH
25067: LD_INT 82
25069: PUSH
25070: LD_INT 83
25072: PUSH
25073: LD_INT 84
25075: PUSH
25076: LD_INT 85
25078: PUSH
25079: LD_INT 87
25081: PUSH
25082: LD_INT 88
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: ST_TO_ADDR
25141: GO 25374
25143: LD_INT 3
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25373
25151: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25152: LD_ADDR_VAR 0 4
25156: PUSH
25157: LD_INT 46
25159: PUSH
25160: LD_INT 47
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 82
25171: PUSH
25172: LD_INT 83
25174: PUSH
25175: LD_INT 84
25177: PUSH
25178: LD_INT 85
25180: PUSH
25181: LD_INT 86
25183: PUSH
25184: LD_INT 11
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: LD_INT 20
25192: PUSH
25193: LD_INT 19
25195: PUSH
25196: LD_INT 21
25198: PUSH
25199: LD_INT 24
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_INT 25
25207: PUSH
25208: LD_INT 28
25210: PUSH
25211: LD_INT 29
25213: PUSH
25214: LD_INT 30
25216: PUSH
25217: LD_INT 31
25219: PUSH
25220: LD_INT 37
25222: PUSH
25223: LD_INT 38
25225: PUSH
25226: LD_INT 32
25228: PUSH
25229: LD_INT 27
25231: PUSH
25232: LD_INT 33
25234: PUSH
25235: LD_INT 69
25237: PUSH
25238: LD_INT 39
25240: PUSH
25241: LD_INT 34
25243: PUSH
25244: LD_INT 40
25246: PUSH
25247: LD_INT 71
25249: PUSH
25250: LD_INT 23
25252: PUSH
25253: LD_INT 44
25255: PUSH
25256: LD_INT 48
25258: PUSH
25259: LD_INT 49
25261: PUSH
25262: LD_INT 50
25264: PUSH
25265: LD_INT 51
25267: PUSH
25268: LD_INT 52
25270: PUSH
25271: LD_INT 53
25273: PUSH
25274: LD_INT 54
25276: PUSH
25277: LD_INT 55
25279: PUSH
25280: LD_INT 56
25282: PUSH
25283: LD_INT 57
25285: PUSH
25286: LD_INT 58
25288: PUSH
25289: LD_INT 59
25291: PUSH
25292: LD_INT 63
25294: PUSH
25295: LD_INT 64
25297: PUSH
25298: LD_INT 65
25300: PUSH
25301: LD_INT 82
25303: PUSH
25304: LD_INT 83
25306: PUSH
25307: LD_INT 84
25309: PUSH
25310: LD_INT 85
25312: PUSH
25313: LD_INT 86
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: ST_TO_ADDR
25371: GO 25374
25373: POP
// if state > - 1 and state < 3 then
25374: LD_VAR 0 3
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: GREATER
25383: PUSH
25384: LD_VAR 0 3
25388: PUSH
25389: LD_INT 3
25391: LESS
25392: AND
25393: IFFALSE 25450
// for i in result do
25395: LD_ADDR_VAR 0 5
25399: PUSH
25400: LD_VAR 0 4
25404: PUSH
25405: FOR_IN
25406: IFFALSE 25448
// if GetTech ( i , side ) <> state then
25408: LD_VAR 0 5
25412: PPUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 321
25422: PUSH
25423: LD_VAR 0 3
25427: NONEQUAL
25428: IFFALSE 25446
// result := result diff i ;
25430: LD_ADDR_VAR 0 4
25434: PUSH
25435: LD_VAR 0 4
25439: PUSH
25440: LD_VAR 0 5
25444: DIFF
25445: ST_TO_ADDR
25446: GO 25405
25448: POP
25449: POP
// end ;
25450: LD_VAR 0 4
25454: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25455: LD_INT 0
25457: PPUSH
25458: PPUSH
25459: PPUSH
// result := true ;
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 1
25467: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25468: LD_ADDR_VAR 0 5
25472: PUSH
25473: LD_VAR 0 2
25477: PPUSH
25478: CALL_OW 480
25482: ST_TO_ADDR
// if not tmp then
25483: LD_VAR 0 5
25487: NOT
25488: IFFALSE 25492
// exit ;
25490: GO 25541
// for i in tmp do
25492: LD_ADDR_VAR 0 4
25496: PUSH
25497: LD_VAR 0 5
25501: PUSH
25502: FOR_IN
25503: IFFALSE 25539
// if GetTech ( i , side ) <> state_researched then
25505: LD_VAR 0 4
25509: PPUSH
25510: LD_VAR 0 1
25514: PPUSH
25515: CALL_OW 321
25519: PUSH
25520: LD_INT 2
25522: NONEQUAL
25523: IFFALSE 25537
// begin result := false ;
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_INT 0
25532: ST_TO_ADDR
// exit ;
25533: POP
25534: POP
25535: GO 25541
// end ;
25537: GO 25502
25539: POP
25540: POP
// end ;
25541: LD_VAR 0 3
25545: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25546: LD_INT 0
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
25552: PPUSH
25553: PPUSH
25554: PPUSH
25555: PPUSH
25556: PPUSH
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25561: LD_VAR 0 1
25565: NOT
25566: PUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 257
25576: PUSH
25577: LD_INT 9
25579: NONEQUAL
25580: OR
25581: IFFALSE 25585
// exit ;
25583: GO 26158
// side := GetSide ( unit ) ;
25585: LD_ADDR_VAR 0 9
25589: PUSH
25590: LD_VAR 0 1
25594: PPUSH
25595: CALL_OW 255
25599: ST_TO_ADDR
// tech_space := tech_spacanom ;
25600: LD_ADDR_VAR 0 12
25604: PUSH
25605: LD_INT 29
25607: ST_TO_ADDR
// tech_time := tech_taurad ;
25608: LD_ADDR_VAR 0 13
25612: PUSH
25613: LD_INT 28
25615: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25616: LD_ADDR_VAR 0 11
25620: PUSH
25621: LD_VAR 0 1
25625: PPUSH
25626: CALL_OW 310
25630: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25631: LD_VAR 0 11
25635: PPUSH
25636: CALL_OW 247
25640: PUSH
25641: LD_INT 2
25643: EQUAL
25644: IFFALSE 25648
// exit ;
25646: GO 26158
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25648: LD_ADDR_VAR 0 8
25652: PUSH
25653: LD_INT 81
25655: PUSH
25656: LD_VAR 0 9
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 3
25667: PUSH
25668: LD_INT 21
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: ST_TO_ADDR
// if not tmp then
25691: LD_VAR 0 8
25695: NOT
25696: IFFALSE 25700
// exit ;
25698: GO 26158
// if in_unit then
25700: LD_VAR 0 11
25704: IFFALSE 25728
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25706: LD_ADDR_VAR 0 10
25710: PUSH
25711: LD_VAR 0 8
25715: PPUSH
25716: LD_VAR 0 11
25720: PPUSH
25721: CALL_OW 74
25725: ST_TO_ADDR
25726: GO 25748
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25728: LD_ADDR_VAR 0 10
25732: PUSH
25733: LD_VAR 0 8
25737: PPUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: CALL_OW 74
25747: ST_TO_ADDR
// if not enemy then
25748: LD_VAR 0 10
25752: NOT
25753: IFFALSE 25757
// exit ;
25755: GO 26158
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25757: LD_VAR 0 11
25761: PUSH
25762: LD_VAR 0 11
25766: PPUSH
25767: LD_VAR 0 10
25771: PPUSH
25772: CALL_OW 296
25776: PUSH
25777: LD_INT 13
25779: GREATER
25780: AND
25781: PUSH
25782: LD_VAR 0 1
25786: PPUSH
25787: LD_VAR 0 10
25791: PPUSH
25792: CALL_OW 296
25796: PUSH
25797: LD_INT 12
25799: GREATER
25800: OR
25801: IFFALSE 25805
// exit ;
25803: GO 26158
// missile := [ 1 ] ;
25805: LD_ADDR_VAR 0 14
25809: PUSH
25810: LD_INT 1
25812: PUSH
25813: EMPTY
25814: LIST
25815: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25816: LD_VAR 0 9
25820: PPUSH
25821: LD_VAR 0 12
25825: PPUSH
25826: CALL_OW 325
25830: IFFALSE 25859
// missile := Replace ( missile , missile + 1 , 2 ) ;
25832: LD_ADDR_VAR 0 14
25836: PUSH
25837: LD_VAR 0 14
25841: PPUSH
25842: LD_VAR 0 14
25846: PUSH
25847: LD_INT 1
25849: PLUS
25850: PPUSH
25851: LD_INT 2
25853: PPUSH
25854: CALL_OW 1
25858: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25859: LD_VAR 0 9
25863: PPUSH
25864: LD_VAR 0 13
25868: PPUSH
25869: CALL_OW 325
25873: PUSH
25874: LD_VAR 0 10
25878: PPUSH
25879: CALL_OW 255
25883: PPUSH
25884: LD_VAR 0 13
25888: PPUSH
25889: CALL_OW 325
25893: NOT
25894: AND
25895: IFFALSE 25924
// missile := Replace ( missile , missile + 1 , 3 ) ;
25897: LD_ADDR_VAR 0 14
25901: PUSH
25902: LD_VAR 0 14
25906: PPUSH
25907: LD_VAR 0 14
25911: PUSH
25912: LD_INT 1
25914: PLUS
25915: PPUSH
25916: LD_INT 3
25918: PPUSH
25919: CALL_OW 1
25923: ST_TO_ADDR
// if missile < 2 then
25924: LD_VAR 0 14
25928: PUSH
25929: LD_INT 2
25931: LESS
25932: IFFALSE 25936
// exit ;
25934: GO 26158
// x := GetX ( enemy ) ;
25936: LD_ADDR_VAR 0 4
25940: PUSH
25941: LD_VAR 0 10
25945: PPUSH
25946: CALL_OW 250
25950: ST_TO_ADDR
// y := GetY ( enemy ) ;
25951: LD_ADDR_VAR 0 5
25955: PUSH
25956: LD_VAR 0 10
25960: PPUSH
25961: CALL_OW 251
25965: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25966: LD_ADDR_VAR 0 6
25970: PUSH
25971: LD_VAR 0 4
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PPUSH
25980: LD_INT 1
25982: PPUSH
25983: CALL_OW 12
25987: PLUS
25988: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25989: LD_ADDR_VAR 0 7
25993: PUSH
25994: LD_VAR 0 5
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PPUSH
26003: LD_INT 1
26005: PPUSH
26006: CALL_OW 12
26010: PLUS
26011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26012: LD_VAR 0 6
26016: PPUSH
26017: LD_VAR 0 7
26021: PPUSH
26022: CALL_OW 488
26026: NOT
26027: IFFALSE 26049
// begin _x := x ;
26029: LD_ADDR_VAR 0 6
26033: PUSH
26034: LD_VAR 0 4
26038: ST_TO_ADDR
// _y := y ;
26039: LD_ADDR_VAR 0 7
26043: PUSH
26044: LD_VAR 0 5
26048: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_INT 1
26056: PPUSH
26057: LD_VAR 0 14
26061: PPUSH
26062: CALL_OW 12
26066: ST_TO_ADDR
// case i of 1 :
26067: LD_VAR 0 3
26071: PUSH
26072: LD_INT 1
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26097
26080: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26081: LD_VAR 0 1
26085: PPUSH
26086: LD_VAR 0 10
26090: PPUSH
26091: CALL_OW 115
26095: GO 26158
26097: LD_INT 2
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26127
26105: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26106: LD_VAR 0 1
26110: PPUSH
26111: LD_VAR 0 6
26115: PPUSH
26116: LD_VAR 0 7
26120: PPUSH
26121: CALL_OW 153
26125: GO 26158
26127: LD_INT 3
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26135
26133: GO 26157
26135: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_VAR 0 6
26145: PPUSH
26146: LD_VAR 0 7
26150: PPUSH
26151: CALL_OW 154
26155: GO 26158
26157: POP
// end ;
26158: LD_VAR 0 2
26162: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26163: LD_INT 0
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
// if not unit or not building then
26171: LD_VAR 0 1
26175: NOT
26176: PUSH
26177: LD_VAR 0 2
26181: NOT
26182: OR
26183: IFFALSE 26187
// exit ;
26185: GO 26345
// x := GetX ( building ) ;
26187: LD_ADDR_VAR 0 5
26191: PUSH
26192: LD_VAR 0 2
26196: PPUSH
26197: CALL_OW 250
26201: ST_TO_ADDR
// y := GetY ( building ) ;
26202: LD_ADDR_VAR 0 6
26206: PUSH
26207: LD_VAR 0 2
26211: PPUSH
26212: CALL_OW 251
26216: ST_TO_ADDR
// for i = 0 to 5 do
26217: LD_ADDR_VAR 0 4
26221: PUSH
26222: DOUBLE
26223: LD_INT 0
26225: DEC
26226: ST_TO_ADDR
26227: LD_INT 5
26229: PUSH
26230: FOR_TO
26231: IFFALSE 26343
// begin _x := ShiftX ( x , i , 3 ) ;
26233: LD_ADDR_VAR 0 7
26237: PUSH
26238: LD_VAR 0 5
26242: PPUSH
26243: LD_VAR 0 4
26247: PPUSH
26248: LD_INT 3
26250: PPUSH
26251: CALL_OW 272
26255: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26256: LD_ADDR_VAR 0 8
26260: PUSH
26261: LD_VAR 0 6
26265: PPUSH
26266: LD_VAR 0 4
26270: PPUSH
26271: LD_INT 3
26273: PPUSH
26274: CALL_OW 273
26278: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26279: LD_VAR 0 7
26283: PPUSH
26284: LD_VAR 0 8
26288: PPUSH
26289: CALL_OW 488
26293: NOT
26294: IFFALSE 26298
// continue ;
26296: GO 26230
// if HexInfo ( _x , _y ) = 0 then
26298: LD_VAR 0 7
26302: PPUSH
26303: LD_VAR 0 8
26307: PPUSH
26308: CALL_OW 428
26312: PUSH
26313: LD_INT 0
26315: EQUAL
26316: IFFALSE 26341
// begin ComMoveXY ( unit , _x , _y ) ;
26318: LD_VAR 0 1
26322: PPUSH
26323: LD_VAR 0 7
26327: PPUSH
26328: LD_VAR 0 8
26332: PPUSH
26333: CALL_OW 111
// exit ;
26337: POP
26338: POP
26339: GO 26345
// end ; end ;
26341: GO 26230
26343: POP
26344: POP
// end ;
26345: LD_VAR 0 3
26349: RET
// export function ScanBase ( side , base_area ) ; begin
26350: LD_INT 0
26352: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_VAR 0 2
26362: PPUSH
26363: LD_INT 81
26365: PUSH
26366: LD_VAR 0 1
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 70
26379: ST_TO_ADDR
// end ;
26380: LD_VAR 0 3
26384: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26385: LD_INT 0
26387: PPUSH
26388: PPUSH
26389: PPUSH
26390: PPUSH
// result := false ;
26391: LD_ADDR_VAR 0 2
26395: PUSH
26396: LD_INT 0
26398: ST_TO_ADDR
// side := GetSide ( unit ) ;
26399: LD_ADDR_VAR 0 3
26403: PUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 255
26413: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26414: LD_ADDR_VAR 0 4
26418: PUSH
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 248
26428: ST_TO_ADDR
// case nat of 1 :
26429: LD_VAR 0 4
26433: PUSH
26434: LD_INT 1
26436: DOUBLE
26437: EQUAL
26438: IFTRUE 26442
26440: GO 26453
26442: POP
// tech := tech_lassight ; 2 :
26443: LD_ADDR_VAR 0 5
26447: PUSH
26448: LD_INT 12
26450: ST_TO_ADDR
26451: GO 26492
26453: LD_INT 2
26455: DOUBLE
26456: EQUAL
26457: IFTRUE 26461
26459: GO 26472
26461: POP
// tech := tech_mortar ; 3 :
26462: LD_ADDR_VAR 0 5
26466: PUSH
26467: LD_INT 41
26469: ST_TO_ADDR
26470: GO 26492
26472: LD_INT 3
26474: DOUBLE
26475: EQUAL
26476: IFTRUE 26480
26478: GO 26491
26480: POP
// tech := tech_bazooka ; end ;
26481: LD_ADDR_VAR 0 5
26485: PUSH
26486: LD_INT 44
26488: ST_TO_ADDR
26489: GO 26492
26491: POP
// if Researched ( side , tech ) then
26492: LD_VAR 0 3
26496: PPUSH
26497: LD_VAR 0 5
26501: PPUSH
26502: CALL_OW 325
26506: IFFALSE 26533
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26508: LD_ADDR_VAR 0 2
26512: PUSH
26513: LD_INT 5
26515: PUSH
26516: LD_INT 8
26518: PUSH
26519: LD_INT 9
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: LIST
26526: PUSH
26527: LD_VAR 0 4
26531: ARRAY
26532: ST_TO_ADDR
// end ;
26533: LD_VAR 0 2
26537: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
26542: PPUSH
// if not mines then
26543: LD_VAR 0 2
26547: NOT
26548: IFFALSE 26552
// exit ;
26550: GO 26696
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26552: LD_ADDR_VAR 0 5
26556: PUSH
26557: LD_INT 81
26559: PUSH
26560: LD_VAR 0 1
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 3
26571: PUSH
26572: LD_INT 21
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PPUSH
26590: CALL_OW 69
26594: ST_TO_ADDR
// for i in mines do
26595: LD_ADDR_VAR 0 4
26599: PUSH
26600: LD_VAR 0 2
26604: PUSH
26605: FOR_IN
26606: IFFALSE 26694
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26608: LD_VAR 0 4
26612: PUSH
26613: LD_INT 1
26615: ARRAY
26616: PPUSH
26617: LD_VAR 0 4
26621: PUSH
26622: LD_INT 2
26624: ARRAY
26625: PPUSH
26626: CALL_OW 458
26630: NOT
26631: IFFALSE 26635
// continue ;
26633: GO 26605
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26635: LD_VAR 0 4
26639: PUSH
26640: LD_INT 1
26642: ARRAY
26643: PPUSH
26644: LD_VAR 0 4
26648: PUSH
26649: LD_INT 2
26651: ARRAY
26652: PPUSH
26653: CALL_OW 428
26657: PUSH
26658: LD_VAR 0 5
26662: IN
26663: IFFALSE 26692
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26665: LD_VAR 0 4
26669: PUSH
26670: LD_INT 1
26672: ARRAY
26673: PPUSH
26674: LD_VAR 0 4
26678: PUSH
26679: LD_INT 2
26681: ARRAY
26682: PPUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 456
// end ;
26692: GO 26605
26694: POP
26695: POP
// end ;
26696: LD_VAR 0 3
26700: RET
// export function Count ( array ) ; var i ; begin
26701: LD_INT 0
26703: PPUSH
26704: PPUSH
// result := 0 ;
26705: LD_ADDR_VAR 0 2
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
// for i in array do
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_VAR 0 1
26722: PUSH
26723: FOR_IN
26724: IFFALSE 26748
// if i then
26726: LD_VAR 0 3
26730: IFFALSE 26746
// result := result + 1 ;
26732: LD_ADDR_VAR 0 2
26736: PUSH
26737: LD_VAR 0 2
26741: PUSH
26742: LD_INT 1
26744: PLUS
26745: ST_TO_ADDR
26746: GO 26723
26748: POP
26749: POP
// end ;
26750: LD_VAR 0 2
26754: RET
// export function IsEmpty ( building ) ; begin
26755: LD_INT 0
26757: PPUSH
// if not building then
26758: LD_VAR 0 1
26762: NOT
26763: IFFALSE 26767
// exit ;
26765: GO 26810
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26767: LD_ADDR_VAR 0 2
26771: PUSH
26772: LD_VAR 0 1
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 255
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 58
26796: PUSH
26797: EMPTY
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PPUSH
26804: CALL_OW 69
26808: IN
26809: ST_TO_ADDR
// end ;
26810: LD_VAR 0 2
26814: RET
// export function IsNotFull ( building ) ; var places ; begin
26815: LD_INT 0
26817: PPUSH
26818: PPUSH
// if not building then
26819: LD_VAR 0 1
26823: NOT
26824: IFFALSE 26828
// exit ;
26826: GO 26999
// result := false ;
26828: LD_ADDR_VAR 0 2
26832: PUSH
26833: LD_INT 0
26835: ST_TO_ADDR
// places := 0 ;
26836: LD_ADDR_VAR 0 3
26840: PUSH
26841: LD_INT 0
26843: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 266
26853: PUSH
26854: LD_INT 0
26856: DOUBLE
26857: EQUAL
26858: IFTRUE 26916
26860: LD_INT 1
26862: DOUBLE
26863: EQUAL
26864: IFTRUE 26916
26866: LD_INT 6
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26916
26872: LD_INT 7
26874: DOUBLE
26875: EQUAL
26876: IFTRUE 26916
26878: LD_INT 8
26880: DOUBLE
26881: EQUAL
26882: IFTRUE 26916
26884: LD_INT 4
26886: DOUBLE
26887: EQUAL
26888: IFTRUE 26916
26890: LD_INT 5
26892: DOUBLE
26893: EQUAL
26894: IFTRUE 26916
26896: LD_INT 2
26898: DOUBLE
26899: EQUAL
26900: IFTRUE 26916
26902: LD_INT 3
26904: DOUBLE
26905: EQUAL
26906: IFTRUE 26916
26908: LD_INT 35
26910: DOUBLE
26911: EQUAL
26912: IFTRUE 26916
26914: GO 26927
26916: POP
// places := 6 ; b_bunker , b_breastwork :
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: LD_INT 6
26924: ST_TO_ADDR
26925: GO 26972
26927: LD_INT 32
26929: DOUBLE
26930: EQUAL
26931: IFTRUE 26941
26933: LD_INT 31
26935: DOUBLE
26936: EQUAL
26937: IFTRUE 26941
26939: GO 26952
26941: POP
// places := 1 ; b_control_tower :
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_INT 1
26949: ST_TO_ADDR
26950: GO 26972
26952: LD_INT 36
26954: DOUBLE
26955: EQUAL
26956: IFTRUE 26960
26958: GO 26971
26960: POP
// places := 3 ; end ;
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_INT 3
26968: ST_TO_ADDR
26969: GO 26972
26971: POP
// if places then
26972: LD_VAR 0 3
26976: IFFALSE 26999
// result := UnitsInside ( building ) < places ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 313
26992: PUSH
26993: LD_VAR 0 3
26997: LESS
26998: ST_TO_ADDR
// end ;
26999: LD_VAR 0 2
27003: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
// tmp := [ ] ;
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: EMPTY
27016: ST_TO_ADDR
// list := [ ] ;
27017: LD_ADDR_VAR 0 5
27021: PUSH
27022: EMPTY
27023: ST_TO_ADDR
// for i = 16 to 25 do
27024: LD_ADDR_VAR 0 4
27028: PUSH
27029: DOUBLE
27030: LD_INT 16
27032: DEC
27033: ST_TO_ADDR
27034: LD_INT 25
27036: PUSH
27037: FOR_TO
27038: IFFALSE 27111
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: LD_VAR 0 3
27049: PUSH
27050: LD_INT 22
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 255
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 91
27069: PUSH
27070: LD_VAR 0 1
27074: PUSH
27075: LD_INT 6
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 30
27085: PUSH
27086: LD_VAR 0 4
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: PPUSH
27103: CALL_OW 69
27107: ADD
27108: ST_TO_ADDR
27109: GO 27037
27111: POP
27112: POP
// for i = 1 to tmp do
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: DOUBLE
27119: LD_INT 1
27121: DEC
27122: ST_TO_ADDR
27123: LD_VAR 0 3
27127: PUSH
27128: FOR_TO
27129: IFFALSE 27217
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27131: LD_ADDR_VAR 0 5
27135: PUSH
27136: LD_VAR 0 5
27140: PUSH
27141: LD_VAR 0 3
27145: PUSH
27146: LD_VAR 0 4
27150: ARRAY
27151: PPUSH
27152: CALL_OW 266
27156: PUSH
27157: LD_VAR 0 3
27161: PUSH
27162: LD_VAR 0 4
27166: ARRAY
27167: PPUSH
27168: CALL_OW 250
27172: PUSH
27173: LD_VAR 0 3
27177: PUSH
27178: LD_VAR 0 4
27182: ARRAY
27183: PPUSH
27184: CALL_OW 251
27188: PUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_VAR 0 4
27198: ARRAY
27199: PPUSH
27200: CALL_OW 254
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: ADD
27214: ST_TO_ADDR
27215: GO 27128
27217: POP
27218: POP
// result := list ;
27219: LD_ADDR_VAR 0 2
27223: PUSH
27224: LD_VAR 0 5
27228: ST_TO_ADDR
// end ;
27229: LD_VAR 0 2
27233: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
27242: PPUSH
// if not factory then
27243: LD_VAR 0 1
27247: NOT
27248: IFFALSE 27252
// exit ;
27250: GO 27845
// if control = control_apeman then
27252: LD_VAR 0 4
27256: PUSH
27257: LD_INT 5
27259: EQUAL
27260: IFFALSE 27369
// begin tmp := UnitsInside ( factory ) ;
27262: LD_ADDR_VAR 0 8
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 313
27276: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27277: LD_VAR 0 8
27281: PPUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 12
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PPUSH
27292: CALL_OW 72
27296: NOT
27297: IFFALSE 27307
// control := control_manual ;
27299: LD_ADDR_VAR 0 4
27303: PUSH
27304: LD_INT 1
27306: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27307: LD_ADDR_VAR 0 8
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL 27004 0 1
27321: ST_TO_ADDR
// if tmp then
27322: LD_VAR 0 8
27326: IFFALSE 27369
// begin for i in tmp do
27328: LD_ADDR_VAR 0 7
27332: PUSH
27333: LD_VAR 0 8
27337: PUSH
27338: FOR_IN
27339: IFFALSE 27367
// if i [ 1 ] = b_ext_radio then
27341: LD_VAR 0 7
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: LD_INT 22
27352: EQUAL
27353: IFFALSE 27365
// begin control := control_remote ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_INT 2
27362: ST_TO_ADDR
// break ;
27363: GO 27367
// end ;
27365: GO 27338
27367: POP
27368: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27369: LD_VAR 0 1
27373: PPUSH
27374: LD_VAR 0 2
27378: PPUSH
27379: LD_VAR 0 3
27383: PPUSH
27384: LD_VAR 0 4
27388: PPUSH
27389: LD_VAR 0 5
27393: PPUSH
27394: CALL_OW 448
27398: IFFALSE 27433
// begin result := [ chassis , engine , control , weapon ] ;
27400: LD_ADDR_VAR 0 6
27404: PUSH
27405: LD_VAR 0 2
27409: PUSH
27410: LD_VAR 0 3
27414: PUSH
27415: LD_VAR 0 4
27419: PUSH
27420: LD_VAR 0 5
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// exit ;
27431: GO 27845
// end ; _chassis := AvailableChassisList ( factory ) ;
27433: LD_ADDR_VAR 0 9
27437: PUSH
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 475
27447: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27448: LD_ADDR_VAR 0 11
27452: PUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: CALL_OW 476
27462: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27463: LD_ADDR_VAR 0 12
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 477
27477: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27478: LD_ADDR_VAR 0 10
27482: PUSH
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL_OW 478
27492: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27493: LD_VAR 0 9
27497: NOT
27498: PUSH
27499: LD_VAR 0 11
27503: NOT
27504: OR
27505: PUSH
27506: LD_VAR 0 12
27510: NOT
27511: OR
27512: PUSH
27513: LD_VAR 0 10
27517: NOT
27518: OR
27519: IFFALSE 27554
// begin result := [ chassis , engine , control , weapon ] ;
27521: LD_ADDR_VAR 0 6
27525: PUSH
27526: LD_VAR 0 2
27530: PUSH
27531: LD_VAR 0 3
27535: PUSH
27536: LD_VAR 0 4
27540: PUSH
27541: LD_VAR 0 5
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: ST_TO_ADDR
// exit ;
27552: GO 27845
// end ; if not chassis in _chassis then
27554: LD_VAR 0 2
27558: PUSH
27559: LD_VAR 0 9
27563: IN
27564: NOT
27565: IFFALSE 27591
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: LD_VAR 0 9
27576: PUSH
27577: LD_INT 1
27579: PPUSH
27580: LD_VAR 0 9
27584: PPUSH
27585: CALL_OW 12
27589: ARRAY
27590: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27591: LD_VAR 0 2
27595: PPUSH
27596: LD_VAR 0 3
27600: PPUSH
27601: CALL 27850 0 2
27605: NOT
27606: IFFALSE 27665
// repeat engine := _engine [ 1 ] ;
27608: LD_ADDR_VAR 0 3
27612: PUSH
27613: LD_VAR 0 11
27617: PUSH
27618: LD_INT 1
27620: ARRAY
27621: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27622: LD_ADDR_VAR 0 11
27626: PUSH
27627: LD_VAR 0 11
27631: PPUSH
27632: LD_INT 1
27634: PPUSH
27635: CALL_OW 3
27639: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27640: LD_VAR 0 2
27644: PPUSH
27645: LD_VAR 0 3
27649: PPUSH
27650: CALL 27850 0 2
27654: PUSH
27655: LD_VAR 0 11
27659: PUSH
27660: EMPTY
27661: EQUAL
27662: OR
27663: IFFALSE 27608
// if not control in _control then
27665: LD_VAR 0 4
27669: PUSH
27670: LD_VAR 0 12
27674: IN
27675: NOT
27676: IFFALSE 27702
// control := _control [ rand ( 1 , _control ) ] ;
27678: LD_ADDR_VAR 0 4
27682: PUSH
27683: LD_VAR 0 12
27687: PUSH
27688: LD_INT 1
27690: PPUSH
27691: LD_VAR 0 12
27695: PPUSH
27696: CALL_OW 12
27700: ARRAY
27701: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27702: LD_VAR 0 2
27706: PPUSH
27707: LD_VAR 0 5
27711: PPUSH
27712: CALL 28070 0 2
27716: NOT
27717: IFFALSE 27776
// repeat weapon := _weapon [ 1 ] ;
27719: LD_ADDR_VAR 0 5
27723: PUSH
27724: LD_VAR 0 10
27728: PUSH
27729: LD_INT 1
27731: ARRAY
27732: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27733: LD_ADDR_VAR 0 10
27737: PUSH
27738: LD_VAR 0 10
27742: PPUSH
27743: LD_INT 1
27745: PPUSH
27746: CALL_OW 3
27750: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27751: LD_VAR 0 2
27755: PPUSH
27756: LD_VAR 0 5
27760: PPUSH
27761: CALL 28070 0 2
27765: PUSH
27766: LD_VAR 0 10
27770: PUSH
27771: EMPTY
27772: EQUAL
27773: OR
27774: IFFALSE 27719
// result := [ ] ;
27776: LD_ADDR_VAR 0 6
27780: PUSH
27781: EMPTY
27782: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27783: LD_VAR 0 1
27787: PPUSH
27788: LD_VAR 0 2
27792: PPUSH
27793: LD_VAR 0 3
27797: PPUSH
27798: LD_VAR 0 4
27802: PPUSH
27803: LD_VAR 0 5
27807: PPUSH
27808: CALL_OW 448
27812: IFFALSE 27845
// result := [ chassis , engine , control , weapon ] ;
27814: LD_ADDR_VAR 0 6
27818: PUSH
27819: LD_VAR 0 2
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 4
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: ST_TO_ADDR
// end ;
27845: LD_VAR 0 6
27849: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27850: LD_INT 0
27852: PPUSH
// if not chassis or not engine then
27853: LD_VAR 0 1
27857: NOT
27858: PUSH
27859: LD_VAR 0 2
27863: NOT
27864: OR
27865: IFFALSE 27869
// exit ;
27867: GO 28065
// case engine of engine_solar :
27869: LD_VAR 0 2
27873: PUSH
27874: LD_INT 2
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27920
27882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 11
27890: PUSH
27891: LD_INT 12
27893: PUSH
27894: LD_INT 13
27896: PUSH
27897: LD_INT 14
27899: PUSH
27900: LD_INT 1
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 28049
27920: LD_INT 1
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27928
27926: GO 27990
27928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 11
27936: PUSH
27937: LD_INT 12
27939: PUSH
27940: LD_INT 13
27942: PUSH
27943: LD_INT 14
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 3
27954: PUSH
27955: LD_INT 4
27957: PUSH
27958: LD_INT 5
27960: PUSH
27961: LD_INT 21
27963: PUSH
27964: LD_INT 23
27966: PUSH
27967: LD_INT 22
27969: PUSH
27970: LD_INT 24
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
27988: GO 28049
27990: LD_INT 3
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28048
27998: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27999: LD_ADDR_VAR 0 3
28003: PUSH
28004: LD_INT 13
28006: PUSH
28007: LD_INT 14
28009: PUSH
28010: LD_INT 2
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: LD_INT 4
28018: PUSH
28019: LD_INT 5
28021: PUSH
28022: LD_INT 21
28024: PUSH
28025: LD_INT 22
28027: PUSH
28028: LD_INT 23
28030: PUSH
28031: LD_INT 24
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
28046: GO 28049
28048: POP
// result := ( chassis in result ) ;
28049: LD_ADDR_VAR 0 3
28053: PUSH
28054: LD_VAR 0 1
28058: PUSH
28059: LD_VAR 0 3
28063: IN
28064: ST_TO_ADDR
// end ;
28065: LD_VAR 0 3
28069: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28070: LD_INT 0
28072: PPUSH
// if not chassis or not weapon then
28073: LD_VAR 0 1
28077: NOT
28078: PUSH
28079: LD_VAR 0 2
28083: NOT
28084: OR
28085: IFFALSE 28089
// exit ;
28087: GO 29149
// case weapon of us_machine_gun :
28089: LD_VAR 0 2
28093: PUSH
28094: LD_INT 2
28096: DOUBLE
28097: EQUAL
28098: IFTRUE 28102
28100: GO 28132
28102: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 2
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: LD_INT 4
28119: PUSH
28120: LD_INT 5
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
28130: GO 29133
28132: LD_INT 3
28134: DOUBLE
28135: EQUAL
28136: IFTRUE 28140
28138: GO 28170
28140: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28141: LD_ADDR_VAR 0 3
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 3
28154: PUSH
28155: LD_INT 4
28157: PUSH
28158: LD_INT 5
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
28168: GO 29133
28170: LD_INT 11
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28208
28178: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: LD_INT 4
28195: PUSH
28196: LD_INT 5
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: ST_TO_ADDR
28206: GO 29133
28208: LD_INT 4
28210: DOUBLE
28211: EQUAL
28212: IFTRUE 28216
28214: GO 28242
28216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28217: LD_ADDR_VAR 0 3
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: LD_INT 4
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
28240: GO 29133
28242: LD_INT 5
28244: DOUBLE
28245: EQUAL
28246: IFTRUE 28250
28248: GO 28276
28250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28251: LD_ADDR_VAR 0 3
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: LD_INT 3
28261: PUSH
28262: LD_INT 4
28264: PUSH
28265: LD_INT 5
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: ST_TO_ADDR
28274: GO 29133
28276: LD_INT 9
28278: DOUBLE
28279: EQUAL
28280: IFTRUE 28284
28282: GO 28310
28284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28285: LD_ADDR_VAR 0 3
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 3
28295: PUSH
28296: LD_INT 4
28298: PUSH
28299: LD_INT 5
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: ST_TO_ADDR
28308: GO 29133
28310: LD_INT 7
28312: DOUBLE
28313: EQUAL
28314: IFTRUE 28318
28316: GO 28344
28318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28319: LD_ADDR_VAR 0 3
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: LD_INT 4
28332: PUSH
28333: LD_INT 5
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: ST_TO_ADDR
28342: GO 29133
28344: LD_INT 12
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28352
28350: GO 28378
28352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_INT 2
28360: PUSH
28361: LD_INT 3
28363: PUSH
28364: LD_INT 4
28366: PUSH
28367: LD_INT 5
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
28376: GO 29133
28378: LD_INT 13
28380: DOUBLE
28381: EQUAL
28382: IFTRUE 28386
28384: GO 28412
28386: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28387: LD_ADDR_VAR 0 3
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: LD_INT 3
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
28410: GO 29133
28412: LD_INT 14
28414: DOUBLE
28415: EQUAL
28416: IFTRUE 28420
28418: GO 28438
28420: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28421: LD_ADDR_VAR 0 3
28425: PUSH
28426: LD_INT 4
28428: PUSH
28429: LD_INT 5
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: ST_TO_ADDR
28436: GO 29133
28438: LD_INT 6
28440: DOUBLE
28441: EQUAL
28442: IFTRUE 28446
28444: GO 28464
28446: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28447: LD_ADDR_VAR 0 3
28451: PUSH
28452: LD_INT 4
28454: PUSH
28455: LD_INT 5
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: ST_TO_ADDR
28462: GO 29133
28464: LD_INT 10
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28490
28472: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28473: LD_ADDR_VAR 0 3
28477: PUSH
28478: LD_INT 4
28480: PUSH
28481: LD_INT 5
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: ST_TO_ADDR
28488: GO 29133
28490: LD_INT 22
28492: DOUBLE
28493: EQUAL
28494: IFTRUE 28498
28496: GO 28524
28498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28499: LD_ADDR_VAR 0 3
28503: PUSH
28504: LD_INT 11
28506: PUSH
28507: LD_INT 12
28509: PUSH
28510: LD_INT 13
28512: PUSH
28513: LD_INT 14
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
28522: GO 29133
28524: LD_INT 23
28526: DOUBLE
28527: EQUAL
28528: IFTRUE 28532
28530: GO 28558
28532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28533: LD_ADDR_VAR 0 3
28537: PUSH
28538: LD_INT 11
28540: PUSH
28541: LD_INT 12
28543: PUSH
28544: LD_INT 13
28546: PUSH
28547: LD_INT 14
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
28556: GO 29133
28558: LD_INT 24
28560: DOUBLE
28561: EQUAL
28562: IFTRUE 28566
28564: GO 28592
28566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28567: LD_ADDR_VAR 0 3
28571: PUSH
28572: LD_INT 11
28574: PUSH
28575: LD_INT 12
28577: PUSH
28578: LD_INT 13
28580: PUSH
28581: LD_INT 14
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
28590: GO 29133
28592: LD_INT 30
28594: DOUBLE
28595: EQUAL
28596: IFTRUE 28600
28598: GO 28626
28600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28601: LD_ADDR_VAR 0 3
28605: PUSH
28606: LD_INT 11
28608: PUSH
28609: LD_INT 12
28611: PUSH
28612: LD_INT 13
28614: PUSH
28615: LD_INT 14
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: ST_TO_ADDR
28624: GO 29133
28626: LD_INT 25
28628: DOUBLE
28629: EQUAL
28630: IFTRUE 28634
28632: GO 28652
28634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28635: LD_ADDR_VAR 0 3
28639: PUSH
28640: LD_INT 13
28642: PUSH
28643: LD_INT 14
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: ST_TO_ADDR
28650: GO 29133
28652: LD_INT 27
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28678
28660: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_INT 13
28668: PUSH
28669: LD_INT 14
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: ST_TO_ADDR
28676: GO 29133
28678: LD_INT 92
28680: DOUBLE
28681: EQUAL
28682: IFTRUE 28686
28684: GO 28712
28686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28687: LD_ADDR_VAR 0 3
28691: PUSH
28692: LD_INT 11
28694: PUSH
28695: LD_INT 12
28697: PUSH
28698: LD_INT 13
28700: PUSH
28701: LD_INT 14
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: ST_TO_ADDR
28710: GO 29133
28712: LD_INT 28
28714: DOUBLE
28715: EQUAL
28716: IFTRUE 28720
28718: GO 28738
28720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28721: LD_ADDR_VAR 0 3
28725: PUSH
28726: LD_INT 13
28728: PUSH
28729: LD_INT 14
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: ST_TO_ADDR
28736: GO 29133
28738: LD_INT 29
28740: DOUBLE
28741: EQUAL
28742: IFTRUE 28746
28744: GO 28764
28746: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_INT 13
28754: PUSH
28755: LD_INT 14
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: ST_TO_ADDR
28762: GO 29133
28764: LD_INT 31
28766: DOUBLE
28767: EQUAL
28768: IFTRUE 28772
28770: GO 28790
28772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_INT 13
28780: PUSH
28781: LD_INT 14
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: ST_TO_ADDR
28788: GO 29133
28790: LD_INT 26
28792: DOUBLE
28793: EQUAL
28794: IFTRUE 28798
28796: GO 28816
28798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_INT 13
28806: PUSH
28807: LD_INT 14
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: ST_TO_ADDR
28814: GO 29133
28816: LD_INT 42
28818: DOUBLE
28819: EQUAL
28820: IFTRUE 28824
28822: GO 28850
28824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28825: LD_ADDR_VAR 0 3
28829: PUSH
28830: LD_INT 21
28832: PUSH
28833: LD_INT 22
28835: PUSH
28836: LD_INT 23
28838: PUSH
28839: LD_INT 24
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
28848: GO 29133
28850: LD_INT 43
28852: DOUBLE
28853: EQUAL
28854: IFTRUE 28858
28856: GO 28884
28858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28859: LD_ADDR_VAR 0 3
28863: PUSH
28864: LD_INT 21
28866: PUSH
28867: LD_INT 22
28869: PUSH
28870: LD_INT 23
28872: PUSH
28873: LD_INT 24
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: ST_TO_ADDR
28882: GO 29133
28884: LD_INT 44
28886: DOUBLE
28887: EQUAL
28888: IFTRUE 28892
28890: GO 28918
28892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28893: LD_ADDR_VAR 0 3
28897: PUSH
28898: LD_INT 21
28900: PUSH
28901: LD_INT 22
28903: PUSH
28904: LD_INT 23
28906: PUSH
28907: LD_INT 24
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
28916: GO 29133
28918: LD_INT 45
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28926
28924: GO 28952
28926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28927: LD_ADDR_VAR 0 3
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 22
28937: PUSH
28938: LD_INT 23
28940: PUSH
28941: LD_INT 24
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
28950: GO 29133
28952: LD_INT 49
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 28986
28960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28961: LD_ADDR_VAR 0 3
28965: PUSH
28966: LD_INT 21
28968: PUSH
28969: LD_INT 22
28971: PUSH
28972: LD_INT 23
28974: PUSH
28975: LD_INT 24
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
28984: GO 29133
28986: LD_INT 51
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29020
28994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_INT 21
29002: PUSH
29003: LD_INT 22
29005: PUSH
29006: LD_INT 23
29008: PUSH
29009: LD_INT 24
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
29018: GO 29133
29020: LD_INT 52
29022: DOUBLE
29023: EQUAL
29024: IFTRUE 29028
29026: GO 29054
29028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_INT 21
29036: PUSH
29037: LD_INT 22
29039: PUSH
29040: LD_INT 23
29042: PUSH
29043: LD_INT 24
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
29052: GO 29133
29054: LD_INT 53
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29080
29062: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_INT 23
29070: PUSH
29071: LD_INT 24
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: ST_TO_ADDR
29078: GO 29133
29080: LD_INT 46
29082: DOUBLE
29083: EQUAL
29084: IFTRUE 29088
29086: GO 29106
29088: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29089: LD_ADDR_VAR 0 3
29093: PUSH
29094: LD_INT 23
29096: PUSH
29097: LD_INT 24
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: ST_TO_ADDR
29104: GO 29133
29106: LD_INT 47
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29132
29114: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29115: LD_ADDR_VAR 0 3
29119: PUSH
29120: LD_INT 23
29122: PUSH
29123: LD_INT 24
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: ST_TO_ADDR
29130: GO 29133
29132: POP
// result := ( chassis in result ) ;
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_VAR 0 1
29142: PUSH
29143: LD_VAR 0 3
29147: IN
29148: ST_TO_ADDR
// end ;
29149: LD_VAR 0 3
29153: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29154: LD_INT 0
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
// result := array ;
29163: LD_ADDR_VAR 0 5
29167: PUSH
29168: LD_VAR 0 1
29172: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29173: LD_VAR 0 1
29177: NOT
29178: PUSH
29179: LD_VAR 0 2
29183: NOT
29184: OR
29185: PUSH
29186: LD_VAR 0 3
29190: NOT
29191: OR
29192: PUSH
29193: LD_VAR 0 2
29197: PUSH
29198: LD_VAR 0 1
29202: GREATER
29203: OR
29204: PUSH
29205: LD_VAR 0 3
29209: PUSH
29210: LD_VAR 0 1
29214: GREATER
29215: OR
29216: IFFALSE 29220
// exit ;
29218: GO 29516
// if direction then
29220: LD_VAR 0 4
29224: IFFALSE 29288
// begin d := 1 ;
29226: LD_ADDR_VAR 0 9
29230: PUSH
29231: LD_INT 1
29233: ST_TO_ADDR
// if i_from > i_to then
29234: LD_VAR 0 2
29238: PUSH
29239: LD_VAR 0 3
29243: GREATER
29244: IFFALSE 29270
// length := ( array - i_from ) + i_to else
29246: LD_ADDR_VAR 0 11
29250: PUSH
29251: LD_VAR 0 1
29255: PUSH
29256: LD_VAR 0 2
29260: MINUS
29261: PUSH
29262: LD_VAR 0 3
29266: PLUS
29267: ST_TO_ADDR
29268: GO 29286
// length := i_to - i_from ;
29270: LD_ADDR_VAR 0 11
29274: PUSH
29275: LD_VAR 0 3
29279: PUSH
29280: LD_VAR 0 2
29284: MINUS
29285: ST_TO_ADDR
// end else
29286: GO 29349
// begin d := - 1 ;
29288: LD_ADDR_VAR 0 9
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: ST_TO_ADDR
// if i_from > i_to then
29297: LD_VAR 0 2
29301: PUSH
29302: LD_VAR 0 3
29306: GREATER
29307: IFFALSE 29327
// length := i_from - i_to else
29309: LD_ADDR_VAR 0 11
29313: PUSH
29314: LD_VAR 0 2
29318: PUSH
29319: LD_VAR 0 3
29323: MINUS
29324: ST_TO_ADDR
29325: GO 29349
// length := ( array - i_to ) + i_from ;
29327: LD_ADDR_VAR 0 11
29331: PUSH
29332: LD_VAR 0 1
29336: PUSH
29337: LD_VAR 0 3
29341: MINUS
29342: PUSH
29343: LD_VAR 0 2
29347: PLUS
29348: ST_TO_ADDR
// end ; if not length then
29349: LD_VAR 0 11
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29516
// tmp := array ;
29358: LD_ADDR_VAR 0 10
29362: PUSH
29363: LD_VAR 0 1
29367: ST_TO_ADDR
// for i = 1 to length do
29368: LD_ADDR_VAR 0 6
29372: PUSH
29373: DOUBLE
29374: LD_INT 1
29376: DEC
29377: ST_TO_ADDR
29378: LD_VAR 0 11
29382: PUSH
29383: FOR_TO
29384: IFFALSE 29504
// begin for j = 1 to array do
29386: LD_ADDR_VAR 0 7
29390: PUSH
29391: DOUBLE
29392: LD_INT 1
29394: DEC
29395: ST_TO_ADDR
29396: LD_VAR 0 1
29400: PUSH
29401: FOR_TO
29402: IFFALSE 29490
// begin k := j + d ;
29404: LD_ADDR_VAR 0 8
29408: PUSH
29409: LD_VAR 0 7
29413: PUSH
29414: LD_VAR 0 9
29418: PLUS
29419: ST_TO_ADDR
// if k > array then
29420: LD_VAR 0 8
29424: PUSH
29425: LD_VAR 0 1
29429: GREATER
29430: IFFALSE 29440
// k := 1 ;
29432: LD_ADDR_VAR 0 8
29436: PUSH
29437: LD_INT 1
29439: ST_TO_ADDR
// if not k then
29440: LD_VAR 0 8
29444: NOT
29445: IFFALSE 29457
// k := array ;
29447: LD_ADDR_VAR 0 8
29451: PUSH
29452: LD_VAR 0 1
29456: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29457: LD_ADDR_VAR 0 10
29461: PUSH
29462: LD_VAR 0 10
29466: PPUSH
29467: LD_VAR 0 8
29471: PPUSH
29472: LD_VAR 0 1
29476: PUSH
29477: LD_VAR 0 7
29481: ARRAY
29482: PPUSH
29483: CALL_OW 1
29487: ST_TO_ADDR
// end ;
29488: GO 29401
29490: POP
29491: POP
// array := tmp ;
29492: LD_ADDR_VAR 0 1
29496: PUSH
29497: LD_VAR 0 10
29501: ST_TO_ADDR
// end ;
29502: GO 29383
29504: POP
29505: POP
// result := array ;
29506: LD_ADDR_VAR 0 5
29510: PUSH
29511: LD_VAR 0 1
29515: ST_TO_ADDR
// end ;
29516: LD_VAR 0 5
29520: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29521: LD_INT 0
29523: PPUSH
29524: PPUSH
// result := 0 ;
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 0
29532: ST_TO_ADDR
// if not array or not value in array then
29533: LD_VAR 0 1
29537: NOT
29538: PUSH
29539: LD_VAR 0 2
29543: PUSH
29544: LD_VAR 0 1
29548: IN
29549: NOT
29550: OR
29551: IFFALSE 29555
// exit ;
29553: GO 29609
// for i = 1 to array do
29555: LD_ADDR_VAR 0 4
29559: PUSH
29560: DOUBLE
29561: LD_INT 1
29563: DEC
29564: ST_TO_ADDR
29565: LD_VAR 0 1
29569: PUSH
29570: FOR_TO
29571: IFFALSE 29607
// if value = array [ i ] then
29573: LD_VAR 0 2
29577: PUSH
29578: LD_VAR 0 1
29582: PUSH
29583: LD_VAR 0 4
29587: ARRAY
29588: EQUAL
29589: IFFALSE 29605
// begin result := i ;
29591: LD_ADDR_VAR 0 3
29595: PUSH
29596: LD_VAR 0 4
29600: ST_TO_ADDR
// exit ;
29601: POP
29602: POP
29603: GO 29609
// end ;
29605: GO 29570
29607: POP
29608: POP
// end ;
29609: LD_VAR 0 3
29613: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29614: LD_INT 0
29616: PPUSH
// vc_chassis := chassis ;
29617: LD_ADDR_OWVAR 37
29621: PUSH
29622: LD_VAR 0 1
29626: ST_TO_ADDR
// vc_engine := engine ;
29627: LD_ADDR_OWVAR 39
29631: PUSH
29632: LD_VAR 0 2
29636: ST_TO_ADDR
// vc_control := control ;
29637: LD_ADDR_OWVAR 38
29641: PUSH
29642: LD_VAR 0 3
29646: ST_TO_ADDR
// vc_weapon := weapon ;
29647: LD_ADDR_OWVAR 40
29651: PUSH
29652: LD_VAR 0 4
29656: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29657: LD_ADDR_OWVAR 41
29661: PUSH
29662: LD_VAR 0 5
29666: ST_TO_ADDR
// end ;
29667: LD_VAR 0 6
29671: RET
// export function WantPlant ( unit ) ; var task ; begin
29672: LD_INT 0
29674: PPUSH
29675: PPUSH
// result := false ;
29676: LD_ADDR_VAR 0 2
29680: PUSH
29681: LD_INT 0
29683: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29684: LD_ADDR_VAR 0 3
29688: PUSH
29689: LD_VAR 0 1
29693: PPUSH
29694: CALL_OW 437
29698: ST_TO_ADDR
// if task then
29699: LD_VAR 0 3
29703: IFFALSE 29731
// if task [ 1 ] [ 1 ] = p then
29705: LD_VAR 0 3
29709: PUSH
29710: LD_INT 1
29712: ARRAY
29713: PUSH
29714: LD_INT 1
29716: ARRAY
29717: PUSH
29718: LD_STRING p
29720: EQUAL
29721: IFFALSE 29731
// result := true ;
29723: LD_ADDR_VAR 0 2
29727: PUSH
29728: LD_INT 1
29730: ST_TO_ADDR
// end ;
29731: LD_VAR 0 2
29735: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29736: LD_INT 0
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
// if pos < 1 then
29742: LD_VAR 0 2
29746: PUSH
29747: LD_INT 1
29749: LESS
29750: IFFALSE 29754
// exit ;
29752: GO 30057
// if pos = 1 then
29754: LD_VAR 0 2
29758: PUSH
29759: LD_INT 1
29761: EQUAL
29762: IFFALSE 29795
// result := Replace ( arr , pos [ 1 ] , value ) else
29764: LD_ADDR_VAR 0 4
29768: PUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: LD_VAR 0 2
29778: PUSH
29779: LD_INT 1
29781: ARRAY
29782: PPUSH
29783: LD_VAR 0 3
29787: PPUSH
29788: CALL_OW 1
29792: ST_TO_ADDR
29793: GO 30057
// begin tmp := arr ;
29795: LD_ADDR_VAR 0 6
29799: PUSH
29800: LD_VAR 0 1
29804: ST_TO_ADDR
// s_arr := [ tmp ] ;
29805: LD_ADDR_VAR 0 7
29809: PUSH
29810: LD_VAR 0 6
29814: PUSH
29815: EMPTY
29816: LIST
29817: ST_TO_ADDR
// for i = 1 to pos - 1 do
29818: LD_ADDR_VAR 0 5
29822: PUSH
29823: DOUBLE
29824: LD_INT 1
29826: DEC
29827: ST_TO_ADDR
29828: LD_VAR 0 2
29832: PUSH
29833: LD_INT 1
29835: MINUS
29836: PUSH
29837: FOR_TO
29838: IFFALSE 29883
// begin tmp := tmp [ pos [ i ] ] ;
29840: LD_ADDR_VAR 0 6
29844: PUSH
29845: LD_VAR 0 6
29849: PUSH
29850: LD_VAR 0 2
29854: PUSH
29855: LD_VAR 0 5
29859: ARRAY
29860: ARRAY
29861: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29862: LD_ADDR_VAR 0 7
29866: PUSH
29867: LD_VAR 0 7
29871: PUSH
29872: LD_VAR 0 6
29876: PUSH
29877: EMPTY
29878: LIST
29879: ADD
29880: ST_TO_ADDR
// end ;
29881: GO 29837
29883: POP
29884: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29885: LD_ADDR_VAR 0 6
29889: PUSH
29890: LD_VAR 0 6
29894: PPUSH
29895: LD_VAR 0 2
29899: PUSH
29900: LD_VAR 0 2
29904: ARRAY
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: CALL_OW 1
29915: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29916: LD_ADDR_VAR 0 7
29920: PUSH
29921: LD_VAR 0 7
29925: PPUSH
29926: LD_VAR 0 7
29930: PPUSH
29931: LD_VAR 0 6
29935: PPUSH
29936: CALL_OW 1
29940: ST_TO_ADDR
// for i = s_arr downto 2 do
29941: LD_ADDR_VAR 0 5
29945: PUSH
29946: DOUBLE
29947: LD_VAR 0 7
29951: INC
29952: ST_TO_ADDR
29953: LD_INT 2
29955: PUSH
29956: FOR_DOWNTO
29957: IFFALSE 30041
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29959: LD_ADDR_VAR 0 6
29963: PUSH
29964: LD_VAR 0 7
29968: PUSH
29969: LD_VAR 0 5
29973: PUSH
29974: LD_INT 1
29976: MINUS
29977: ARRAY
29978: PPUSH
29979: LD_VAR 0 2
29983: PUSH
29984: LD_VAR 0 5
29988: PUSH
29989: LD_INT 1
29991: MINUS
29992: ARRAY
29993: PPUSH
29994: LD_VAR 0 7
29998: PUSH
29999: LD_VAR 0 5
30003: ARRAY
30004: PPUSH
30005: CALL_OW 1
30009: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30010: LD_ADDR_VAR 0 7
30014: PUSH
30015: LD_VAR 0 7
30019: PPUSH
30020: LD_VAR 0 5
30024: PUSH
30025: LD_INT 1
30027: MINUS
30028: PPUSH
30029: LD_VAR 0 6
30033: PPUSH
30034: CALL_OW 1
30038: ST_TO_ADDR
// end ;
30039: GO 29956
30041: POP
30042: POP
// result := s_arr [ 1 ] ;
30043: LD_ADDR_VAR 0 4
30047: PUSH
30048: LD_VAR 0 7
30052: PUSH
30053: LD_INT 1
30055: ARRAY
30056: ST_TO_ADDR
// end ; end ;
30057: LD_VAR 0 4
30061: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30062: LD_INT 0
30064: PPUSH
30065: PPUSH
// if not list then
30066: LD_VAR 0 1
30070: NOT
30071: IFFALSE 30075
// exit ;
30073: GO 30166
// i := list [ pos1 ] ;
30075: LD_ADDR_VAR 0 5
30079: PUSH
30080: LD_VAR 0 1
30084: PUSH
30085: LD_VAR 0 2
30089: ARRAY
30090: ST_TO_ADDR
// if not i then
30091: LD_VAR 0 5
30095: NOT
30096: IFFALSE 30100
// exit ;
30098: GO 30166
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30100: LD_ADDR_VAR 0 1
30104: PUSH
30105: LD_VAR 0 1
30109: PPUSH
30110: LD_VAR 0 2
30114: PPUSH
30115: LD_VAR 0 1
30119: PUSH
30120: LD_VAR 0 3
30124: ARRAY
30125: PPUSH
30126: CALL_OW 1
30130: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30131: LD_ADDR_VAR 0 1
30135: PUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: LD_VAR 0 3
30145: PPUSH
30146: LD_VAR 0 5
30150: PPUSH
30151: CALL_OW 1
30155: ST_TO_ADDR
// result := list ;
30156: LD_ADDR_VAR 0 4
30160: PUSH
30161: LD_VAR 0 1
30165: ST_TO_ADDR
// end ;
30166: LD_VAR 0 4
30170: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30171: LD_INT 0
30173: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30174: LD_ADDR_VAR 0 5
30178: PUSH
30179: LD_VAR 0 1
30183: PPUSH
30184: CALL_OW 250
30188: PPUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 251
30198: PPUSH
30199: LD_VAR 0 2
30203: PPUSH
30204: LD_VAR 0 3
30208: PPUSH
30209: LD_VAR 0 4
30213: PPUSH
30214: CALL 30224 0 5
30218: ST_TO_ADDR
// end ;
30219: LD_VAR 0 5
30223: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30224: LD_INT 0
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
// if not list then
30230: LD_VAR 0 3
30234: NOT
30235: IFFALSE 30239
// exit ;
30237: GO 30627
// result := [ ] ;
30239: LD_ADDR_VAR 0 6
30243: PUSH
30244: EMPTY
30245: ST_TO_ADDR
// for i in list do
30246: LD_ADDR_VAR 0 7
30250: PUSH
30251: LD_VAR 0 3
30255: PUSH
30256: FOR_IN
30257: IFFALSE 30459
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30259: LD_ADDR_VAR 0 9
30263: PUSH
30264: LD_VAR 0 7
30268: PPUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: LD_VAR 0 2
30278: PPUSH
30279: CALL_OW 297
30283: ST_TO_ADDR
// if not result then
30284: LD_VAR 0 6
30288: NOT
30289: IFFALSE 30315
// result := [ [ i , tmp ] ] else
30291: LD_ADDR_VAR 0 6
30295: PUSH
30296: LD_VAR 0 7
30300: PUSH
30301: LD_VAR 0 9
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: ST_TO_ADDR
30313: GO 30457
// begin if result [ result ] [ 2 ] < tmp then
30315: LD_VAR 0 6
30319: PUSH
30320: LD_VAR 0 6
30324: ARRAY
30325: PUSH
30326: LD_INT 2
30328: ARRAY
30329: PUSH
30330: LD_VAR 0 9
30334: LESS
30335: IFFALSE 30377
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30337: LD_ADDR_VAR 0 6
30341: PUSH
30342: LD_VAR 0 6
30346: PPUSH
30347: LD_VAR 0 6
30351: PUSH
30352: LD_INT 1
30354: PLUS
30355: PPUSH
30356: LD_VAR 0 7
30360: PUSH
30361: LD_VAR 0 9
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PPUSH
30370: CALL_OW 2
30374: ST_TO_ADDR
30375: GO 30457
// for j = 1 to result do
30377: LD_ADDR_VAR 0 8
30381: PUSH
30382: DOUBLE
30383: LD_INT 1
30385: DEC
30386: ST_TO_ADDR
30387: LD_VAR 0 6
30391: PUSH
30392: FOR_TO
30393: IFFALSE 30455
// begin if tmp < result [ j ] [ 2 ] then
30395: LD_VAR 0 9
30399: PUSH
30400: LD_VAR 0 6
30404: PUSH
30405: LD_VAR 0 8
30409: ARRAY
30410: PUSH
30411: LD_INT 2
30413: ARRAY
30414: LESS
30415: IFFALSE 30453
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30417: LD_ADDR_VAR 0 6
30421: PUSH
30422: LD_VAR 0 6
30426: PPUSH
30427: LD_VAR 0 8
30431: PPUSH
30432: LD_VAR 0 7
30436: PUSH
30437: LD_VAR 0 9
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PPUSH
30446: CALL_OW 2
30450: ST_TO_ADDR
// break ;
30451: GO 30455
// end ; end ;
30453: GO 30392
30455: POP
30456: POP
// end ; end ;
30457: GO 30256
30459: POP
30460: POP
// if result and not asc then
30461: LD_VAR 0 6
30465: PUSH
30466: LD_VAR 0 4
30470: NOT
30471: AND
30472: IFFALSE 30547
// begin tmp := result ;
30474: LD_ADDR_VAR 0 9
30478: PUSH
30479: LD_VAR 0 6
30483: ST_TO_ADDR
// for i = tmp downto 1 do
30484: LD_ADDR_VAR 0 7
30488: PUSH
30489: DOUBLE
30490: LD_VAR 0 9
30494: INC
30495: ST_TO_ADDR
30496: LD_INT 1
30498: PUSH
30499: FOR_DOWNTO
30500: IFFALSE 30545
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30502: LD_ADDR_VAR 0 6
30506: PUSH
30507: LD_VAR 0 6
30511: PPUSH
30512: LD_VAR 0 9
30516: PUSH
30517: LD_VAR 0 7
30521: MINUS
30522: PUSH
30523: LD_INT 1
30525: PLUS
30526: PPUSH
30527: LD_VAR 0 9
30531: PUSH
30532: LD_VAR 0 7
30536: ARRAY
30537: PPUSH
30538: CALL_OW 1
30542: ST_TO_ADDR
30543: GO 30499
30545: POP
30546: POP
// end ; tmp := [ ] ;
30547: LD_ADDR_VAR 0 9
30551: PUSH
30552: EMPTY
30553: ST_TO_ADDR
// if mode then
30554: LD_VAR 0 5
30558: IFFALSE 30627
// begin for i = 1 to result do
30560: LD_ADDR_VAR 0 7
30564: PUSH
30565: DOUBLE
30566: LD_INT 1
30568: DEC
30569: ST_TO_ADDR
30570: LD_VAR 0 6
30574: PUSH
30575: FOR_TO
30576: IFFALSE 30615
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30578: LD_ADDR_VAR 0 9
30582: PUSH
30583: LD_VAR 0 9
30587: PPUSH
30588: LD_VAR 0 7
30592: PPUSH
30593: LD_VAR 0 6
30597: PUSH
30598: LD_VAR 0 7
30602: ARRAY
30603: PUSH
30604: LD_INT 1
30606: ARRAY
30607: PPUSH
30608: CALL_OW 1
30612: ST_TO_ADDR
30613: GO 30575
30615: POP
30616: POP
// result := tmp ;
30617: LD_ADDR_VAR 0 6
30621: PUSH
30622: LD_VAR 0 9
30626: ST_TO_ADDR
// end ; end ;
30627: LD_VAR 0 6
30631: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30632: LD_INT 0
30634: PPUSH
30635: PPUSH
30636: PPUSH
30637: PPUSH
30638: PPUSH
30639: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30640: LD_ADDR_VAR 0 5
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// if not x or not y then
30662: LD_VAR 0 2
30666: NOT
30667: PUSH
30668: LD_VAR 0 3
30672: NOT
30673: OR
30674: IFFALSE 30678
// exit ;
30676: GO 32328
// if not range then
30678: LD_VAR 0 4
30682: NOT
30683: IFFALSE 30693
// range := 10 ;
30685: LD_ADDR_VAR 0 4
30689: PUSH
30690: LD_INT 10
30692: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30693: LD_ADDR_VAR 0 8
30697: PUSH
30698: LD_INT 81
30700: PUSH
30701: LD_VAR 0 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 92
30712: PUSH
30713: LD_VAR 0 2
30717: PUSH
30718: LD_VAR 0 3
30722: PUSH
30723: LD_VAR 0 4
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 21
30739: PUSH
30740: LD_INT 3
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: PPUSH
30756: CALL_OW 69
30760: ST_TO_ADDR
// if not tmp then
30761: LD_VAR 0 8
30765: NOT
30766: IFFALSE 30770
// exit ;
30768: GO 32328
// for i in tmp do
30770: LD_ADDR_VAR 0 6
30774: PUSH
30775: LD_VAR 0 8
30779: PUSH
30780: FOR_IN
30781: IFFALSE 32303
// begin points := [ 0 , 0 , 0 ] ;
30783: LD_ADDR_VAR 0 9
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: ST_TO_ADDR
// bpoints := 1 ;
30802: LD_ADDR_VAR 0 10
30806: PUSH
30807: LD_INT 1
30809: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30810: LD_VAR 0 6
30814: PPUSH
30815: CALL_OW 247
30819: PUSH
30820: LD_INT 1
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 31406
30828: POP
// begin if GetClass ( i ) = 1 then
30829: LD_VAR 0 6
30833: PPUSH
30834: CALL_OW 257
30838: PUSH
30839: LD_INT 1
30841: EQUAL
30842: IFFALSE 30863
// points := [ 10 , 5 , 3 ] ;
30844: LD_ADDR_VAR 0 9
30848: PUSH
30849: LD_INT 10
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30863: LD_VAR 0 6
30867: PPUSH
30868: CALL_OW 257
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: LD_INT 4
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: IN
30887: IFFALSE 30908
// points := [ 3 , 2 , 1 ] ;
30889: LD_ADDR_VAR 0 9
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30908: LD_VAR 0 6
30912: PPUSH
30913: CALL_OW 257
30917: PUSH
30918: LD_INT 5
30920: EQUAL
30921: IFFALSE 30942
// points := [ 130 , 5 , 2 ] ;
30923: LD_ADDR_VAR 0 9
30927: PUSH
30928: LD_INT 130
30930: PUSH
30931: LD_INT 5
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30942: LD_VAR 0 6
30946: PPUSH
30947: CALL_OW 257
30951: PUSH
30952: LD_INT 8
30954: EQUAL
30955: IFFALSE 30976
// points := [ 35 , 35 , 30 ] ;
30957: LD_ADDR_VAR 0 9
30961: PUSH
30962: LD_INT 35
30964: PUSH
30965: LD_INT 35
30967: PUSH
30968: LD_INT 30
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30976: LD_VAR 0 6
30980: PPUSH
30981: CALL_OW 257
30985: PUSH
30986: LD_INT 9
30988: EQUAL
30989: IFFALSE 31010
// points := [ 20 , 55 , 40 ] ;
30991: LD_ADDR_VAR 0 9
30995: PUSH
30996: LD_INT 20
30998: PUSH
30999: LD_INT 55
31001: PUSH
31002: LD_INT 40
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31010: LD_VAR 0 6
31014: PPUSH
31015: CALL_OW 257
31019: PUSH
31020: LD_INT 12
31022: PUSH
31023: LD_INT 16
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: IN
31030: IFFALSE 31051
// points := [ 5 , 3 , 2 ] ;
31032: LD_ADDR_VAR 0 9
31036: PUSH
31037: LD_INT 5
31039: PUSH
31040: LD_INT 3
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31051: LD_VAR 0 6
31055: PPUSH
31056: CALL_OW 257
31060: PUSH
31061: LD_INT 17
31063: EQUAL
31064: IFFALSE 31085
// points := [ 100 , 50 , 75 ] ;
31066: LD_ADDR_VAR 0 9
31070: PUSH
31071: LD_INT 100
31073: PUSH
31074: LD_INT 50
31076: PUSH
31077: LD_INT 75
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31085: LD_VAR 0 6
31089: PPUSH
31090: CALL_OW 257
31094: PUSH
31095: LD_INT 15
31097: EQUAL
31098: IFFALSE 31119
// points := [ 10 , 5 , 3 ] ;
31100: LD_ADDR_VAR 0 9
31104: PUSH
31105: LD_INT 10
31107: PUSH
31108: LD_INT 5
31110: PUSH
31111: LD_INT 3
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31119: LD_VAR 0 6
31123: PPUSH
31124: CALL_OW 257
31128: PUSH
31129: LD_INT 14
31131: EQUAL
31132: IFFALSE 31153
// points := [ 10 , 0 , 0 ] ;
31134: LD_ADDR_VAR 0 9
31138: PUSH
31139: LD_INT 10
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31153: LD_VAR 0 6
31157: PPUSH
31158: CALL_OW 257
31162: PUSH
31163: LD_INT 11
31165: EQUAL
31166: IFFALSE 31187
// points := [ 30 , 10 , 5 ] ;
31168: LD_ADDR_VAR 0 9
31172: PUSH
31173: LD_INT 30
31175: PUSH
31176: LD_INT 10
31178: PUSH
31179: LD_INT 5
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31187: LD_VAR 0 1
31191: PPUSH
31192: LD_INT 5
31194: PPUSH
31195: CALL_OW 321
31199: PUSH
31200: LD_INT 2
31202: EQUAL
31203: IFFALSE 31220
// bpoints := bpoints * 1.8 ;
31205: LD_ADDR_VAR 0 10
31209: PUSH
31210: LD_VAR 0 10
31214: PUSH
31215: LD_REAL  1.80000000000000E+0000
31218: MUL
31219: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31220: LD_VAR 0 6
31224: PPUSH
31225: CALL_OW 257
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 4
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: IN
31248: PUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: LD_INT 51
31256: PPUSH
31257: CALL_OW 321
31261: PUSH
31262: LD_INT 2
31264: EQUAL
31265: AND
31266: IFFALSE 31283
// bpoints := bpoints * 1.2 ;
31268: LD_ADDR_VAR 0 10
31272: PUSH
31273: LD_VAR 0 10
31277: PUSH
31278: LD_REAL  1.20000000000000E+0000
31281: MUL
31282: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31283: LD_VAR 0 6
31287: PPUSH
31288: CALL_OW 257
31292: PUSH
31293: LD_INT 5
31295: PUSH
31296: LD_INT 7
31298: PUSH
31299: LD_INT 9
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: IN
31307: PUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: LD_INT 52
31315: PPUSH
31316: CALL_OW 321
31320: PUSH
31321: LD_INT 2
31323: EQUAL
31324: AND
31325: IFFALSE 31342
// bpoints := bpoints * 1.5 ;
31327: LD_ADDR_VAR 0 10
31331: PUSH
31332: LD_VAR 0 10
31336: PUSH
31337: LD_REAL  1.50000000000000E+0000
31340: MUL
31341: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31342: LD_VAR 0 1
31346: PPUSH
31347: LD_INT 66
31349: PPUSH
31350: CALL_OW 321
31354: PUSH
31355: LD_INT 2
31357: EQUAL
31358: IFFALSE 31375
// bpoints := bpoints * 1.1 ;
31360: LD_ADDR_VAR 0 10
31364: PUSH
31365: LD_VAR 0 10
31369: PUSH
31370: LD_REAL  1.10000000000000E+0000
31373: MUL
31374: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31375: LD_ADDR_VAR 0 10
31379: PUSH
31380: LD_VAR 0 10
31384: PUSH
31385: LD_VAR 0 6
31389: PPUSH
31390: LD_INT 1
31392: PPUSH
31393: CALL_OW 259
31397: PUSH
31398: LD_REAL  1.15000000000000E+0000
31401: MUL
31402: MUL
31403: ST_TO_ADDR
// end ; unit_vehicle :
31404: GO 32232
31406: LD_INT 2
31408: DOUBLE
31409: EQUAL
31410: IFTRUE 31414
31412: GO 32220
31414: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31415: LD_VAR 0 6
31419: PPUSH
31420: CALL_OW 264
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: LD_INT 42
31430: PUSH
31431: LD_INT 24
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: IN
31439: IFFALSE 31460
// points := [ 25 , 5 , 3 ] ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_INT 25
31448: PUSH
31449: LD_INT 5
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31460: LD_VAR 0 6
31464: PPUSH
31465: CALL_OW 264
31469: PUSH
31470: LD_INT 4
31472: PUSH
31473: LD_INT 43
31475: PUSH
31476: LD_INT 25
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: IN
31484: IFFALSE 31505
// points := [ 40 , 15 , 5 ] ;
31486: LD_ADDR_VAR 0 9
31490: PUSH
31491: LD_INT 40
31493: PUSH
31494: LD_INT 15
31496: PUSH
31497: LD_INT 5
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31505: LD_VAR 0 6
31509: PPUSH
31510: CALL_OW 264
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: LD_INT 23
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: IN
31525: IFFALSE 31546
// points := [ 7 , 25 , 8 ] ;
31527: LD_ADDR_VAR 0 9
31531: PUSH
31532: LD_INT 7
31534: PUSH
31535: LD_INT 25
31537: PUSH
31538: LD_INT 8
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31546: LD_VAR 0 6
31550: PPUSH
31551: CALL_OW 264
31555: PUSH
31556: LD_INT 5
31558: PUSH
31559: LD_INT 27
31561: PUSH
31562: LD_INT 44
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: IN
31570: IFFALSE 31591
// points := [ 14 , 50 , 16 ] ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_INT 14
31579: PUSH
31580: LD_INT 50
31582: PUSH
31583: LD_INT 16
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 264
31600: PUSH
31601: LD_INT 6
31603: PUSH
31604: LD_INT 46
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: IN
31611: IFFALSE 31632
// points := [ 32 , 120 , 70 ] ;
31613: LD_ADDR_VAR 0 9
31617: PUSH
31618: LD_INT 32
31620: PUSH
31621: LD_INT 120
31623: PUSH
31624: LD_INT 70
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31632: LD_VAR 0 6
31636: PPUSH
31637: CALL_OW 264
31641: PUSH
31642: LD_INT 7
31644: PUSH
31645: LD_INT 28
31647: PUSH
31648: LD_INT 45
31650: PUSH
31651: LD_INT 92
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: IN
31660: IFFALSE 31681
// points := [ 35 , 20 , 45 ] ;
31662: LD_ADDR_VAR 0 9
31666: PUSH
31667: LD_INT 35
31669: PUSH
31670: LD_INT 20
31672: PUSH
31673: LD_INT 45
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31681: LD_VAR 0 6
31685: PPUSH
31686: CALL_OW 264
31690: PUSH
31691: LD_INT 47
31693: PUSH
31694: EMPTY
31695: LIST
31696: IN
31697: IFFALSE 31718
// points := [ 67 , 45 , 75 ] ;
31699: LD_ADDR_VAR 0 9
31703: PUSH
31704: LD_INT 67
31706: PUSH
31707: LD_INT 45
31709: PUSH
31710: LD_INT 75
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31718: LD_VAR 0 6
31722: PPUSH
31723: CALL_OW 264
31727: PUSH
31728: LD_INT 26
31730: PUSH
31731: EMPTY
31732: LIST
31733: IN
31734: IFFALSE 31755
// points := [ 120 , 30 , 80 ] ;
31736: LD_ADDR_VAR 0 9
31740: PUSH
31741: LD_INT 120
31743: PUSH
31744: LD_INT 30
31746: PUSH
31747: LD_INT 80
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31755: LD_VAR 0 6
31759: PPUSH
31760: CALL_OW 264
31764: PUSH
31765: LD_INT 22
31767: PUSH
31768: EMPTY
31769: LIST
31770: IN
31771: IFFALSE 31792
// points := [ 40 , 1 , 1 ] ;
31773: LD_ADDR_VAR 0 9
31777: PUSH
31778: LD_INT 40
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: LIST
31791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31792: LD_VAR 0 6
31796: PPUSH
31797: CALL_OW 264
31801: PUSH
31802: LD_INT 29
31804: PUSH
31805: EMPTY
31806: LIST
31807: IN
31808: IFFALSE 31829
// points := [ 70 , 200 , 400 ] ;
31810: LD_ADDR_VAR 0 9
31814: PUSH
31815: LD_INT 70
31817: PUSH
31818: LD_INT 200
31820: PUSH
31821: LD_INT 400
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31829: LD_VAR 0 6
31833: PPUSH
31834: CALL_OW 264
31838: PUSH
31839: LD_INT 14
31841: PUSH
31842: LD_INT 53
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: IN
31849: IFFALSE 31870
// points := [ 40 , 10 , 20 ] ;
31851: LD_ADDR_VAR 0 9
31855: PUSH
31856: LD_INT 40
31858: PUSH
31859: LD_INT 10
31861: PUSH
31862: LD_INT 20
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31870: LD_VAR 0 6
31874: PPUSH
31875: CALL_OW 264
31879: PUSH
31880: LD_INT 9
31882: PUSH
31883: EMPTY
31884: LIST
31885: IN
31886: IFFALSE 31907
// points := [ 5 , 70 , 20 ] ;
31888: LD_ADDR_VAR 0 9
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: LD_INT 70
31898: PUSH
31899: LD_INT 20
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31907: LD_VAR 0 6
31911: PPUSH
31912: CALL_OW 264
31916: PUSH
31917: LD_INT 10
31919: PUSH
31920: EMPTY
31921: LIST
31922: IN
31923: IFFALSE 31944
// points := [ 35 , 110 , 70 ] ;
31925: LD_ADDR_VAR 0 9
31929: PUSH
31930: LD_INT 35
31932: PUSH
31933: LD_INT 110
31935: PUSH
31936: LD_INT 70
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31944: LD_VAR 0 6
31948: PPUSH
31949: CALL_OW 265
31953: PUSH
31954: LD_INT 25
31956: EQUAL
31957: IFFALSE 31978
// points := [ 80 , 65 , 100 ] ;
31959: LD_ADDR_VAR 0 9
31963: PUSH
31964: LD_INT 80
31966: PUSH
31967: LD_INT 65
31969: PUSH
31970: LD_INT 100
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31978: LD_VAR 0 6
31982: PPUSH
31983: CALL_OW 263
31987: PUSH
31988: LD_INT 1
31990: EQUAL
31991: IFFALSE 32026
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31993: LD_ADDR_VAR 0 10
31997: PUSH
31998: LD_VAR 0 10
32002: PUSH
32003: LD_VAR 0 6
32007: PPUSH
32008: CALL_OW 311
32012: PPUSH
32013: LD_INT 3
32015: PPUSH
32016: CALL_OW 259
32020: PUSH
32021: LD_INT 4
32023: MUL
32024: MUL
32025: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32026: LD_VAR 0 6
32030: PPUSH
32031: CALL_OW 263
32035: PUSH
32036: LD_INT 2
32038: EQUAL
32039: IFFALSE 32090
// begin j := IsControledBy ( i ) ;
32041: LD_ADDR_VAR 0 7
32045: PUSH
32046: LD_VAR 0 6
32050: PPUSH
32051: CALL_OW 312
32055: ST_TO_ADDR
// if j then
32056: LD_VAR 0 7
32060: IFFALSE 32090
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32062: LD_ADDR_VAR 0 10
32066: PUSH
32067: LD_VAR 0 10
32071: PUSH
32072: LD_VAR 0 7
32076: PPUSH
32077: LD_INT 3
32079: PPUSH
32080: CALL_OW 259
32084: PUSH
32085: LD_INT 3
32087: MUL
32088: MUL
32089: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32090: LD_VAR 0 6
32094: PPUSH
32095: CALL_OW 264
32099: PUSH
32100: LD_INT 5
32102: PUSH
32103: LD_INT 6
32105: PUSH
32106: LD_INT 46
32108: PUSH
32109: LD_INT 44
32111: PUSH
32112: LD_INT 47
32114: PUSH
32115: LD_INT 45
32117: PUSH
32118: LD_INT 28
32120: PUSH
32121: LD_INT 7
32123: PUSH
32124: LD_INT 27
32126: PUSH
32127: LD_INT 29
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: IN
32142: PUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: LD_INT 52
32150: PPUSH
32151: CALL_OW 321
32155: PUSH
32156: LD_INT 2
32158: EQUAL
32159: AND
32160: IFFALSE 32177
// bpoints := bpoints * 1.2 ;
32162: LD_ADDR_VAR 0 10
32166: PUSH
32167: LD_VAR 0 10
32171: PUSH
32172: LD_REAL  1.20000000000000E+0000
32175: MUL
32176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32177: LD_VAR 0 6
32181: PPUSH
32182: CALL_OW 264
32186: PUSH
32187: LD_INT 6
32189: PUSH
32190: LD_INT 46
32192: PUSH
32193: LD_INT 47
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: IN
32201: IFFALSE 32218
// bpoints := bpoints * 1.2 ;
32203: LD_ADDR_VAR 0 10
32207: PUSH
32208: LD_VAR 0 10
32212: PUSH
32213: LD_REAL  1.20000000000000E+0000
32216: MUL
32217: ST_TO_ADDR
// end ; unit_building :
32218: GO 32232
32220: LD_INT 3
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32231
32228: POP
// ; end ;
32229: GO 32232
32231: POP
// for j = 1 to 3 do
32232: LD_ADDR_VAR 0 7
32236: PUSH
32237: DOUBLE
32238: LD_INT 1
32240: DEC
32241: ST_TO_ADDR
32242: LD_INT 3
32244: PUSH
32245: FOR_TO
32246: IFFALSE 32299
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32248: LD_ADDR_VAR 0 5
32252: PUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: LD_VAR 0 7
32262: PPUSH
32263: LD_VAR 0 5
32267: PUSH
32268: LD_VAR 0 7
32272: ARRAY
32273: PUSH
32274: LD_VAR 0 9
32278: PUSH
32279: LD_VAR 0 7
32283: ARRAY
32284: PUSH
32285: LD_VAR 0 10
32289: MUL
32290: PLUS
32291: PPUSH
32292: CALL_OW 1
32296: ST_TO_ADDR
32297: GO 32245
32299: POP
32300: POP
// end ;
32301: GO 30780
32303: POP
32304: POP
// result := Replace ( result , 4 , tmp ) ;
32305: LD_ADDR_VAR 0 5
32309: PUSH
32310: LD_VAR 0 5
32314: PPUSH
32315: LD_INT 4
32317: PPUSH
32318: LD_VAR 0 8
32322: PPUSH
32323: CALL_OW 1
32327: ST_TO_ADDR
// end ;
32328: LD_VAR 0 5
32332: RET
// export function DangerAtRange ( unit , range ) ; begin
32333: LD_INT 0
32335: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32336: LD_ADDR_VAR 0 3
32340: PUSH
32341: LD_VAR 0 1
32345: PPUSH
32346: CALL_OW 255
32350: PPUSH
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 250
32360: PPUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 251
32370: PPUSH
32371: LD_VAR 0 2
32375: PPUSH
32376: CALL 30632 0 4
32380: ST_TO_ADDR
// end ;
32381: LD_VAR 0 3
32385: RET
// export function DangerInArea ( side , area ) ; begin
32386: LD_INT 0
32388: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32389: LD_ADDR_VAR 0 3
32393: PUSH
32394: LD_VAR 0 2
32398: PPUSH
32399: LD_INT 81
32401: PUSH
32402: LD_VAR 0 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: CALL_OW 70
32415: ST_TO_ADDR
// end ;
32416: LD_VAR 0 3
32420: RET
// export function IsExtension ( b ) ; begin
32421: LD_INT 0
32423: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32424: LD_ADDR_VAR 0 2
32428: PUSH
32429: LD_VAR 0 1
32433: PUSH
32434: LD_INT 23
32436: PUSH
32437: LD_INT 20
32439: PUSH
32440: LD_INT 22
32442: PUSH
32443: LD_INT 17
32445: PUSH
32446: LD_INT 24
32448: PUSH
32449: LD_INT 21
32451: PUSH
32452: LD_INT 19
32454: PUSH
32455: LD_INT 16
32457: PUSH
32458: LD_INT 25
32460: PUSH
32461: LD_INT 18
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: IN
32476: ST_TO_ADDR
// end ;
32477: LD_VAR 0 2
32481: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
32486: PPUSH
// result := [ ] ;
32487: LD_ADDR_VAR 0 4
32491: PUSH
32492: EMPTY
32493: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32494: LD_ADDR_VAR 0 5
32498: PUSH
32499: LD_VAR 0 2
32503: PPUSH
32504: LD_INT 21
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PPUSH
32514: CALL_OW 70
32518: ST_TO_ADDR
// if not tmp then
32519: LD_VAR 0 5
32523: NOT
32524: IFFALSE 32528
// exit ;
32526: GO 32592
// if checkLink then
32528: LD_VAR 0 3
32532: IFFALSE 32582
// begin for i in tmp do
32534: LD_ADDR_VAR 0 6
32538: PUSH
32539: LD_VAR 0 5
32543: PUSH
32544: FOR_IN
32545: IFFALSE 32580
// if GetBase ( i ) <> base then
32547: LD_VAR 0 6
32551: PPUSH
32552: CALL_OW 274
32556: PUSH
32557: LD_VAR 0 1
32561: NONEQUAL
32562: IFFALSE 32578
// ComLinkToBase ( base , i ) ;
32564: LD_VAR 0 1
32568: PPUSH
32569: LD_VAR 0 6
32573: PPUSH
32574: CALL_OW 169
32578: GO 32544
32580: POP
32581: POP
// end ; result := tmp ;
32582: LD_ADDR_VAR 0 4
32586: PUSH
32587: LD_VAR 0 5
32591: ST_TO_ADDR
// end ;
32592: LD_VAR 0 4
32596: RET
// export function ComComplete ( units , b ) ; var i ; begin
32597: LD_INT 0
32599: PPUSH
32600: PPUSH
// if not units then
32601: LD_VAR 0 1
32605: NOT
32606: IFFALSE 32610
// exit ;
32608: GO 32700
// for i in units do
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_VAR 0 1
32619: PUSH
32620: FOR_IN
32621: IFFALSE 32698
// if BuildingStatus ( b ) = bs_build then
32623: LD_VAR 0 2
32627: PPUSH
32628: CALL_OW 461
32632: PUSH
32633: LD_INT 1
32635: EQUAL
32636: IFFALSE 32696
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32638: LD_VAR 0 4
32642: PPUSH
32643: LD_STRING h
32645: PUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: CALL_OW 250
32655: PUSH
32656: LD_VAR 0 2
32660: PPUSH
32661: CALL_OW 251
32665: PUSH
32666: LD_VAR 0 2
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: PUSH
32689: EMPTY
32690: LIST
32691: PPUSH
32692: CALL_OW 446
32696: GO 32620
32698: POP
32699: POP
// end ;
32700: LD_VAR 0 3
32704: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32705: LD_INT 0
32707: PPUSH
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
32712: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32713: LD_VAR 0 1
32717: NOT
32718: PUSH
32719: LD_VAR 0 1
32723: PPUSH
32724: CALL_OW 263
32728: PUSH
32729: LD_INT 2
32731: NONEQUAL
32732: OR
32733: IFFALSE 32737
// exit ;
32735: GO 33053
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32737: LD_ADDR_VAR 0 6
32741: PUSH
32742: LD_INT 22
32744: PUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 255
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 30
32764: PUSH
32765: LD_INT 36
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 34
32774: PUSH
32775: LD_INT 31
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PPUSH
32791: CALL_OW 69
32795: ST_TO_ADDR
// if not tmp then
32796: LD_VAR 0 6
32800: NOT
32801: IFFALSE 32805
// exit ;
32803: GO 33053
// result := [ ] ;
32805: LD_ADDR_VAR 0 2
32809: PUSH
32810: EMPTY
32811: ST_TO_ADDR
// for i in tmp do
32812: LD_ADDR_VAR 0 3
32816: PUSH
32817: LD_VAR 0 6
32821: PUSH
32822: FOR_IN
32823: IFFALSE 32894
// begin t := UnitsInside ( i ) ;
32825: LD_ADDR_VAR 0 4
32829: PUSH
32830: LD_VAR 0 3
32834: PPUSH
32835: CALL_OW 313
32839: ST_TO_ADDR
// if t then
32840: LD_VAR 0 4
32844: IFFALSE 32892
// for j in t do
32846: LD_ADDR_VAR 0 7
32850: PUSH
32851: LD_VAR 0 4
32855: PUSH
32856: FOR_IN
32857: IFFALSE 32890
// result := Replace ( result , result + 1 , j ) ;
32859: LD_ADDR_VAR 0 2
32863: PUSH
32864: LD_VAR 0 2
32868: PPUSH
32869: LD_VAR 0 2
32873: PUSH
32874: LD_INT 1
32876: PLUS
32877: PPUSH
32878: LD_VAR 0 7
32882: PPUSH
32883: CALL_OW 1
32887: ST_TO_ADDR
32888: GO 32856
32890: POP
32891: POP
// end ;
32892: GO 32822
32894: POP
32895: POP
// if not result then
32896: LD_VAR 0 2
32900: NOT
32901: IFFALSE 32905
// exit ;
32903: GO 33053
// mech := result [ 1 ] ;
32905: LD_ADDR_VAR 0 5
32909: PUSH
32910: LD_VAR 0 2
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: ST_TO_ADDR
// if result > 1 then
32919: LD_VAR 0 2
32923: PUSH
32924: LD_INT 1
32926: GREATER
32927: IFFALSE 33039
// begin for i = 2 to result do
32929: LD_ADDR_VAR 0 3
32933: PUSH
32934: DOUBLE
32935: LD_INT 2
32937: DEC
32938: ST_TO_ADDR
32939: LD_VAR 0 2
32943: PUSH
32944: FOR_TO
32945: IFFALSE 33037
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32947: LD_ADDR_VAR 0 4
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_VAR 0 3
32961: ARRAY
32962: PPUSH
32963: LD_INT 3
32965: PPUSH
32966: CALL_OW 259
32970: PUSH
32971: LD_VAR 0 2
32975: PUSH
32976: LD_VAR 0 3
32980: ARRAY
32981: PPUSH
32982: CALL_OW 432
32986: MINUS
32987: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32988: LD_VAR 0 4
32992: PUSH
32993: LD_VAR 0 5
32997: PPUSH
32998: LD_INT 3
33000: PPUSH
33001: CALL_OW 259
33005: PUSH
33006: LD_VAR 0 5
33010: PPUSH
33011: CALL_OW 432
33015: MINUS
33016: GREATEREQUAL
33017: IFFALSE 33035
// mech := result [ i ] ;
33019: LD_ADDR_VAR 0 5
33023: PUSH
33024: LD_VAR 0 2
33028: PUSH
33029: LD_VAR 0 3
33033: ARRAY
33034: ST_TO_ADDR
// end ;
33035: GO 32944
33037: POP
33038: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33039: LD_VAR 0 1
33043: PPUSH
33044: LD_VAR 0 5
33048: PPUSH
33049: CALL_OW 135
// end ;
33053: LD_VAR 0 2
33057: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33058: LD_INT 0
33060: PPUSH
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
33065: PPUSH
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
33071: PPUSH
33072: PPUSH
// result := [ ] ;
33073: LD_ADDR_VAR 0 7
33077: PUSH
33078: EMPTY
33079: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33080: LD_VAR 0 1
33084: PPUSH
33085: CALL_OW 266
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: IN
33100: NOT
33101: IFFALSE 33105
// exit ;
33103: GO 34739
// if name then
33105: LD_VAR 0 3
33109: IFFALSE 33125
// SetBName ( base_dep , name ) ;
33111: LD_VAR 0 1
33115: PPUSH
33116: LD_VAR 0 3
33120: PPUSH
33121: CALL_OW 500
// base := GetBase ( base_dep ) ;
33125: LD_ADDR_VAR 0 15
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 274
33139: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33140: LD_ADDR_VAR 0 16
33144: PUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 255
33154: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33155: LD_ADDR_VAR 0 17
33159: PUSH
33160: LD_VAR 0 1
33164: PPUSH
33165: CALL_OW 248
33169: ST_TO_ADDR
// if sources then
33170: LD_VAR 0 5
33174: IFFALSE 33221
// for i = 1 to 3 do
33176: LD_ADDR_VAR 0 8
33180: PUSH
33181: DOUBLE
33182: LD_INT 1
33184: DEC
33185: ST_TO_ADDR
33186: LD_INT 3
33188: PUSH
33189: FOR_TO
33190: IFFALSE 33219
// AddResourceType ( base , i , sources [ i ] ) ;
33192: LD_VAR 0 15
33196: PPUSH
33197: LD_VAR 0 8
33201: PPUSH
33202: LD_VAR 0 5
33206: PUSH
33207: LD_VAR 0 8
33211: ARRAY
33212: PPUSH
33213: CALL_OW 276
33217: GO 33189
33219: POP
33220: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33221: LD_ADDR_VAR 0 18
33225: PUSH
33226: LD_VAR 0 15
33230: PPUSH
33231: LD_VAR 0 2
33235: PPUSH
33236: LD_INT 1
33238: PPUSH
33239: CALL 32482 0 3
33243: ST_TO_ADDR
// InitHc ;
33244: CALL_OW 19
// InitUc ;
33248: CALL_OW 18
// uc_side := side ;
33252: LD_ADDR_OWVAR 20
33256: PUSH
33257: LD_VAR 0 16
33261: ST_TO_ADDR
// uc_nation := nation ;
33262: LD_ADDR_OWVAR 21
33266: PUSH
33267: LD_VAR 0 17
33271: ST_TO_ADDR
// if buildings then
33272: LD_VAR 0 18
33276: IFFALSE 34598
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33278: LD_ADDR_VAR 0 19
33282: PUSH
33283: LD_VAR 0 18
33287: PPUSH
33288: LD_INT 2
33290: PUSH
33291: LD_INT 30
33293: PUSH
33294: LD_INT 29
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 30
33303: PUSH
33304: LD_INT 30
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: LIST
33315: PPUSH
33316: CALL_OW 72
33320: ST_TO_ADDR
// if tmp then
33321: LD_VAR 0 19
33325: IFFALSE 33373
// for i in tmp do
33327: LD_ADDR_VAR 0 8
33331: PUSH
33332: LD_VAR 0 19
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33371
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33340: LD_VAR 0 8
33344: PPUSH
33345: CALL_OW 250
33349: PPUSH
33350: LD_VAR 0 8
33354: PPUSH
33355: CALL_OW 251
33359: PPUSH
33360: LD_VAR 0 16
33364: PPUSH
33365: CALL_OW 441
33369: GO 33337
33371: POP
33372: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33373: LD_VAR 0 18
33377: PPUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 30
33383: PUSH
33384: LD_INT 32
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 30
33393: PUSH
33394: LD_INT 33
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: LIST
33405: PPUSH
33406: CALL_OW 72
33410: IFFALSE 33498
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33412: LD_ADDR_VAR 0 8
33416: PUSH
33417: LD_VAR 0 18
33421: PPUSH
33422: LD_INT 2
33424: PUSH
33425: LD_INT 30
33427: PUSH
33428: LD_INT 32
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 30
33437: PUSH
33438: LD_INT 33
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: PPUSH
33450: CALL_OW 72
33454: PUSH
33455: FOR_IN
33456: IFFALSE 33496
// begin if not GetBWeapon ( i ) then
33458: LD_VAR 0 8
33462: PPUSH
33463: CALL_OW 269
33467: NOT
33468: IFFALSE 33494
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33470: LD_VAR 0 8
33474: PPUSH
33475: LD_VAR 0 8
33479: PPUSH
33480: LD_VAR 0 2
33484: PPUSH
33485: CALL 34744 0 2
33489: PPUSH
33490: CALL_OW 431
// end ;
33494: GO 33455
33496: POP
33497: POP
// end ; for i = 1 to personel do
33498: LD_ADDR_VAR 0 8
33502: PUSH
33503: DOUBLE
33504: LD_INT 1
33506: DEC
33507: ST_TO_ADDR
33508: LD_VAR 0 6
33512: PUSH
33513: FOR_TO
33514: IFFALSE 34578
// begin if i > 4 then
33516: LD_VAR 0 8
33520: PUSH
33521: LD_INT 4
33523: GREATER
33524: IFFALSE 33528
// break ;
33526: GO 34578
// case i of 1 :
33528: LD_VAR 0 8
33532: PUSH
33533: LD_INT 1
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33541
33539: GO 33621
33541: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33542: LD_ADDR_VAR 0 12
33546: PUSH
33547: LD_VAR 0 18
33551: PPUSH
33552: LD_INT 22
33554: PUSH
33555: LD_VAR 0 16
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 58
33566: PUSH
33567: EMPTY
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 30
33575: PUSH
33576: LD_INT 32
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 30
33585: PUSH
33586: LD_INT 4
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 30
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 72
33618: ST_TO_ADDR
33619: GO 33843
33621: LD_INT 2
33623: DOUBLE
33624: EQUAL
33625: IFTRUE 33629
33627: GO 33691
33629: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33630: LD_ADDR_VAR 0 12
33634: PUSH
33635: LD_VAR 0 18
33639: PPUSH
33640: LD_INT 22
33642: PUSH
33643: LD_VAR 0 16
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 30
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 30
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 72
33688: ST_TO_ADDR
33689: GO 33843
33691: LD_INT 3
33693: DOUBLE
33694: EQUAL
33695: IFTRUE 33699
33697: GO 33761
33699: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33700: LD_ADDR_VAR 0 12
33704: PUSH
33705: LD_VAR 0 18
33709: PPUSH
33710: LD_INT 22
33712: PUSH
33713: LD_VAR 0 16
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 30
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 30
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PPUSH
33754: CALL_OW 72
33758: ST_TO_ADDR
33759: GO 33843
33761: LD_INT 4
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33769
33767: GO 33842
33769: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33770: LD_ADDR_VAR 0 12
33774: PUSH
33775: LD_VAR 0 18
33779: PPUSH
33780: LD_INT 22
33782: PUSH
33783: LD_VAR 0 16
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 30
33797: PUSH
33798: LD_INT 6
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 30
33807: PUSH
33808: LD_INT 7
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 30
33817: PUSH
33818: LD_INT 8
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PPUSH
33835: CALL_OW 72
33839: ST_TO_ADDR
33840: GO 33843
33842: POP
// if i = 1 then
33843: LD_VAR 0 8
33847: PUSH
33848: LD_INT 1
33850: EQUAL
33851: IFFALSE 33962
// begin tmp := [ ] ;
33853: LD_ADDR_VAR 0 19
33857: PUSH
33858: EMPTY
33859: ST_TO_ADDR
// for j in f do
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_VAR 0 12
33869: PUSH
33870: FOR_IN
33871: IFFALSE 33944
// if GetBType ( j ) = b_bunker then
33873: LD_VAR 0 9
33877: PPUSH
33878: CALL_OW 266
33882: PUSH
33883: LD_INT 32
33885: EQUAL
33886: IFFALSE 33913
// tmp := Insert ( tmp , 1 , j ) else
33888: LD_ADDR_VAR 0 19
33892: PUSH
33893: LD_VAR 0 19
33897: PPUSH
33898: LD_INT 1
33900: PPUSH
33901: LD_VAR 0 9
33905: PPUSH
33906: CALL_OW 2
33910: ST_TO_ADDR
33911: GO 33942
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33913: LD_ADDR_VAR 0 19
33917: PUSH
33918: LD_VAR 0 19
33922: PPUSH
33923: LD_VAR 0 19
33927: PUSH
33928: LD_INT 1
33930: PLUS
33931: PPUSH
33932: LD_VAR 0 9
33936: PPUSH
33937: CALL_OW 2
33941: ST_TO_ADDR
33942: GO 33870
33944: POP
33945: POP
// if tmp then
33946: LD_VAR 0 19
33950: IFFALSE 33962
// f := tmp ;
33952: LD_ADDR_VAR 0 12
33956: PUSH
33957: LD_VAR 0 19
33961: ST_TO_ADDR
// end ; x := personel [ i ] ;
33962: LD_ADDR_VAR 0 13
33966: PUSH
33967: LD_VAR 0 6
33971: PUSH
33972: LD_VAR 0 8
33976: ARRAY
33977: ST_TO_ADDR
// if x = - 1 then
33978: LD_VAR 0 13
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: EQUAL
33987: IFFALSE 34196
// begin for j in f do
33989: LD_ADDR_VAR 0 9
33993: PUSH
33994: LD_VAR 0 12
33998: PUSH
33999: FOR_IN
34000: IFFALSE 34192
// repeat InitHc ;
34002: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34006: LD_VAR 0 9
34010: PPUSH
34011: CALL_OW 266
34015: PUSH
34016: LD_INT 5
34018: EQUAL
34019: IFFALSE 34089
// begin if UnitsInside ( j ) < 3 then
34021: LD_VAR 0 9
34025: PPUSH
34026: CALL_OW 313
34030: PUSH
34031: LD_INT 3
34033: LESS
34034: IFFALSE 34070
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34036: LD_INT 0
34038: PPUSH
34039: LD_INT 5
34041: PUSH
34042: LD_INT 8
34044: PUSH
34045: LD_INT 9
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: PUSH
34053: LD_VAR 0 17
34057: ARRAY
34058: PPUSH
34059: LD_VAR 0 4
34063: PPUSH
34064: CALL_OW 380
34068: GO 34087
// PrepareHuman ( false , i , skill ) ;
34070: LD_INT 0
34072: PPUSH
34073: LD_VAR 0 8
34077: PPUSH
34078: LD_VAR 0 4
34082: PPUSH
34083: CALL_OW 380
// end else
34087: GO 34106
// PrepareHuman ( false , i , skill ) ;
34089: LD_INT 0
34091: PPUSH
34092: LD_VAR 0 8
34096: PPUSH
34097: LD_VAR 0 4
34101: PPUSH
34102: CALL_OW 380
// un := CreateHuman ;
34106: LD_ADDR_VAR 0 14
34110: PUSH
34111: CALL_OW 44
34115: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34116: LD_ADDR_VAR 0 7
34120: PUSH
34121: LD_VAR 0 7
34125: PPUSH
34126: LD_INT 1
34128: PPUSH
34129: LD_VAR 0 14
34133: PPUSH
34134: CALL_OW 2
34138: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34139: LD_VAR 0 14
34143: PPUSH
34144: LD_VAR 0 9
34148: PPUSH
34149: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34153: LD_VAR 0 9
34157: PPUSH
34158: CALL_OW 313
34162: PUSH
34163: LD_INT 6
34165: EQUAL
34166: PUSH
34167: LD_VAR 0 9
34171: PPUSH
34172: CALL_OW 266
34176: PUSH
34177: LD_INT 32
34179: PUSH
34180: LD_INT 31
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: IN
34187: OR
34188: IFFALSE 34002
34190: GO 33999
34192: POP
34193: POP
// end else
34194: GO 34576
// for j = 1 to x do
34196: LD_ADDR_VAR 0 9
34200: PUSH
34201: DOUBLE
34202: LD_INT 1
34204: DEC
34205: ST_TO_ADDR
34206: LD_VAR 0 13
34210: PUSH
34211: FOR_TO
34212: IFFALSE 34574
// begin InitHc ;
34214: CALL_OW 19
// if not f then
34218: LD_VAR 0 12
34222: NOT
34223: IFFALSE 34312
// begin PrepareHuman ( false , i , skill ) ;
34225: LD_INT 0
34227: PPUSH
34228: LD_VAR 0 8
34232: PPUSH
34233: LD_VAR 0 4
34237: PPUSH
34238: CALL_OW 380
// un := CreateHuman ;
34242: LD_ADDR_VAR 0 14
34246: PUSH
34247: CALL_OW 44
34251: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34252: LD_ADDR_VAR 0 7
34256: PUSH
34257: LD_VAR 0 7
34261: PPUSH
34262: LD_INT 1
34264: PPUSH
34265: LD_VAR 0 14
34269: PPUSH
34270: CALL_OW 2
34274: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34275: LD_VAR 0 14
34279: PPUSH
34280: LD_VAR 0 1
34284: PPUSH
34285: CALL_OW 250
34289: PPUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 251
34299: PPUSH
34300: LD_INT 10
34302: PPUSH
34303: LD_INT 0
34305: PPUSH
34306: CALL_OW 50
// continue ;
34310: GO 34211
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34312: LD_VAR 0 12
34316: PUSH
34317: LD_INT 1
34319: ARRAY
34320: PPUSH
34321: CALL_OW 313
34325: PUSH
34326: LD_VAR 0 12
34330: PUSH
34331: LD_INT 1
34333: ARRAY
34334: PPUSH
34335: CALL_OW 266
34339: PUSH
34340: LD_INT 32
34342: PUSH
34343: LD_INT 31
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: IN
34350: AND
34351: PUSH
34352: LD_VAR 0 12
34356: PUSH
34357: LD_INT 1
34359: ARRAY
34360: PPUSH
34361: CALL_OW 313
34365: PUSH
34366: LD_INT 6
34368: EQUAL
34369: OR
34370: IFFALSE 34390
// f := Delete ( f , 1 ) ;
34372: LD_ADDR_VAR 0 12
34376: PUSH
34377: LD_VAR 0 12
34381: PPUSH
34382: LD_INT 1
34384: PPUSH
34385: CALL_OW 3
34389: ST_TO_ADDR
// if not f then
34390: LD_VAR 0 12
34394: NOT
34395: IFFALSE 34413
// begin x := x + 2 ;
34397: LD_ADDR_VAR 0 13
34401: PUSH
34402: LD_VAR 0 13
34406: PUSH
34407: LD_INT 2
34409: PLUS
34410: ST_TO_ADDR
// continue ;
34411: GO 34211
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34413: LD_VAR 0 12
34417: PUSH
34418: LD_INT 1
34420: ARRAY
34421: PPUSH
34422: CALL_OW 266
34426: PUSH
34427: LD_INT 5
34429: EQUAL
34430: IFFALSE 34504
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34432: LD_VAR 0 12
34436: PUSH
34437: LD_INT 1
34439: ARRAY
34440: PPUSH
34441: CALL_OW 313
34445: PUSH
34446: LD_INT 3
34448: LESS
34449: IFFALSE 34485
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34451: LD_INT 0
34453: PPUSH
34454: LD_INT 5
34456: PUSH
34457: LD_INT 8
34459: PUSH
34460: LD_INT 9
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: PUSH
34468: LD_VAR 0 17
34472: ARRAY
34473: PPUSH
34474: LD_VAR 0 4
34478: PPUSH
34479: CALL_OW 380
34483: GO 34502
// PrepareHuman ( false , i , skill ) ;
34485: LD_INT 0
34487: PPUSH
34488: LD_VAR 0 8
34492: PPUSH
34493: LD_VAR 0 4
34497: PPUSH
34498: CALL_OW 380
// end else
34502: GO 34521
// PrepareHuman ( false , i , skill ) ;
34504: LD_INT 0
34506: PPUSH
34507: LD_VAR 0 8
34511: PPUSH
34512: LD_VAR 0 4
34516: PPUSH
34517: CALL_OW 380
// un := CreateHuman ;
34521: LD_ADDR_VAR 0 14
34525: PUSH
34526: CALL_OW 44
34530: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34531: LD_ADDR_VAR 0 7
34535: PUSH
34536: LD_VAR 0 7
34540: PPUSH
34541: LD_INT 1
34543: PPUSH
34544: LD_VAR 0 14
34548: PPUSH
34549: CALL_OW 2
34553: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34554: LD_VAR 0 14
34558: PPUSH
34559: LD_VAR 0 12
34563: PUSH
34564: LD_INT 1
34566: ARRAY
34567: PPUSH
34568: CALL_OW 52
// end ;
34572: GO 34211
34574: POP
34575: POP
// end ;
34576: GO 33513
34578: POP
34579: POP
// result := result ^ buildings ;
34580: LD_ADDR_VAR 0 7
34584: PUSH
34585: LD_VAR 0 7
34589: PUSH
34590: LD_VAR 0 18
34594: ADD
34595: ST_TO_ADDR
// end else
34596: GO 34739
// begin for i = 1 to personel do
34598: LD_ADDR_VAR 0 8
34602: PUSH
34603: DOUBLE
34604: LD_INT 1
34606: DEC
34607: ST_TO_ADDR
34608: LD_VAR 0 6
34612: PUSH
34613: FOR_TO
34614: IFFALSE 34737
// begin if i > 4 then
34616: LD_VAR 0 8
34620: PUSH
34621: LD_INT 4
34623: GREATER
34624: IFFALSE 34628
// break ;
34626: GO 34737
// x := personel [ i ] ;
34628: LD_ADDR_VAR 0 13
34632: PUSH
34633: LD_VAR 0 6
34637: PUSH
34638: LD_VAR 0 8
34642: ARRAY
34643: ST_TO_ADDR
// if x = - 1 then
34644: LD_VAR 0 13
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: EQUAL
34653: IFFALSE 34657
// continue ;
34655: GO 34613
// PrepareHuman ( false , i , skill ) ;
34657: LD_INT 0
34659: PPUSH
34660: LD_VAR 0 8
34664: PPUSH
34665: LD_VAR 0 4
34669: PPUSH
34670: CALL_OW 380
// un := CreateHuman ;
34674: LD_ADDR_VAR 0 14
34678: PUSH
34679: CALL_OW 44
34683: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34684: LD_VAR 0 14
34688: PPUSH
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL_OW 250
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 251
34708: PPUSH
34709: LD_INT 10
34711: PPUSH
34712: LD_INT 0
34714: PPUSH
34715: CALL_OW 50
// result := result ^ un ;
34719: LD_ADDR_VAR 0 7
34723: PUSH
34724: LD_VAR 0 7
34728: PUSH
34729: LD_VAR 0 14
34733: ADD
34734: ST_TO_ADDR
// end ;
34735: GO 34613
34737: POP
34738: POP
// end ; end ;
34739: LD_VAR 0 7
34743: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
// result := false ;
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_INT 0
34769: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34770: LD_VAR 0 1
34774: NOT
34775: PUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 266
34785: PUSH
34786: LD_INT 32
34788: PUSH
34789: LD_INT 33
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: IN
34796: NOT
34797: OR
34798: IFFALSE 34802
// exit ;
34800: GO 35911
// nat := GetNation ( tower ) ;
34802: LD_ADDR_VAR 0 12
34806: PUSH
34807: LD_VAR 0 1
34811: PPUSH
34812: CALL_OW 248
34816: ST_TO_ADDR
// side := GetSide ( tower ) ;
34817: LD_ADDR_VAR 0 16
34821: PUSH
34822: LD_VAR 0 1
34826: PPUSH
34827: CALL_OW 255
34831: ST_TO_ADDR
// x := GetX ( tower ) ;
34832: LD_ADDR_VAR 0 10
34836: PUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 250
34846: ST_TO_ADDR
// y := GetY ( tower ) ;
34847: LD_ADDR_VAR 0 11
34851: PUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 251
34861: ST_TO_ADDR
// if not x or not y then
34862: LD_VAR 0 10
34866: NOT
34867: PUSH
34868: LD_VAR 0 11
34872: NOT
34873: OR
34874: IFFALSE 34878
// exit ;
34876: GO 35911
// weapon := 0 ;
34878: LD_ADDR_VAR 0 18
34882: PUSH
34883: LD_INT 0
34885: ST_TO_ADDR
// fac_list := [ ] ;
34886: LD_ADDR_VAR 0 17
34890: PUSH
34891: EMPTY
34892: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34893: LD_ADDR_VAR 0 6
34897: PUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 274
34907: PPUSH
34908: LD_VAR 0 2
34912: PPUSH
34913: LD_INT 0
34915: PPUSH
34916: CALL 32482 0 3
34920: PPUSH
34921: LD_INT 30
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PPUSH
34931: CALL_OW 72
34935: ST_TO_ADDR
// if not factories then
34936: LD_VAR 0 6
34940: NOT
34941: IFFALSE 34945
// exit ;
34943: GO 35911
// for i in factories do
34945: LD_ADDR_VAR 0 8
34949: PUSH
34950: LD_VAR 0 6
34954: PUSH
34955: FOR_IN
34956: IFFALSE 34981
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34958: LD_ADDR_VAR 0 17
34962: PUSH
34963: LD_VAR 0 17
34967: PUSH
34968: LD_VAR 0 8
34972: PPUSH
34973: CALL_OW 478
34977: UNION
34978: ST_TO_ADDR
34979: GO 34955
34981: POP
34982: POP
// if not fac_list then
34983: LD_VAR 0 17
34987: NOT
34988: IFFALSE 34992
// exit ;
34990: GO 35911
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34992: LD_ADDR_VAR 0 5
34996: PUSH
34997: LD_INT 4
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: LD_INT 9
35005: PUSH
35006: LD_INT 10
35008: PUSH
35009: LD_INT 6
35011: PUSH
35012: LD_INT 7
35014: PUSH
35015: LD_INT 11
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 27
35029: PUSH
35030: LD_INT 28
35032: PUSH
35033: LD_INT 26
35035: PUSH
35036: LD_INT 30
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 43
35047: PUSH
35048: LD_INT 44
35050: PUSH
35051: LD_INT 46
35053: PUSH
35054: LD_INT 45
35056: PUSH
35057: LD_INT 47
35059: PUSH
35060: LD_INT 49
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: PUSH
35076: LD_VAR 0 12
35080: ARRAY
35081: ST_TO_ADDR
// list := list isect fac_list ;
35082: LD_ADDR_VAR 0 5
35086: PUSH
35087: LD_VAR 0 5
35091: PUSH
35092: LD_VAR 0 17
35096: ISECT
35097: ST_TO_ADDR
// if not list then
35098: LD_VAR 0 5
35102: NOT
35103: IFFALSE 35107
// exit ;
35105: GO 35911
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35107: LD_VAR 0 12
35111: PUSH
35112: LD_INT 3
35114: EQUAL
35115: PUSH
35116: LD_INT 49
35118: PUSH
35119: LD_VAR 0 5
35123: IN
35124: AND
35125: PUSH
35126: LD_INT 31
35128: PPUSH
35129: LD_VAR 0 16
35133: PPUSH
35134: CALL_OW 321
35138: PUSH
35139: LD_INT 2
35141: EQUAL
35142: AND
35143: IFFALSE 35203
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35145: LD_INT 22
35147: PUSH
35148: LD_VAR 0 16
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 35
35159: PUSH
35160: LD_INT 49
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 91
35169: PUSH
35170: LD_VAR 0 1
35174: PUSH
35175: LD_INT 10
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: PPUSH
35188: CALL_OW 69
35192: NOT
35193: IFFALSE 35203
// weapon := ru_time_lapser ;
35195: LD_ADDR_VAR 0 18
35199: PUSH
35200: LD_INT 49
35202: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35203: LD_VAR 0 12
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: IN
35218: PUSH
35219: LD_INT 11
35221: PUSH
35222: LD_VAR 0 5
35226: IN
35227: PUSH
35228: LD_INT 30
35230: PUSH
35231: LD_VAR 0 5
35235: IN
35236: OR
35237: AND
35238: PUSH
35239: LD_INT 6
35241: PPUSH
35242: LD_VAR 0 16
35246: PPUSH
35247: CALL_OW 321
35251: PUSH
35252: LD_INT 2
35254: EQUAL
35255: AND
35256: IFFALSE 35421
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35258: LD_INT 22
35260: PUSH
35261: LD_VAR 0 16
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 2
35272: PUSH
35273: LD_INT 35
35275: PUSH
35276: LD_INT 11
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 35
35285: PUSH
35286: LD_INT 30
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 91
35300: PUSH
35301: LD_VAR 0 1
35305: PUSH
35306: LD_INT 18
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: PPUSH
35319: CALL_OW 69
35323: NOT
35324: PUSH
35325: LD_INT 22
35327: PUSH
35328: LD_VAR 0 16
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: LD_INT 30
35342: PUSH
35343: LD_INT 32
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 30
35352: PUSH
35353: LD_INT 33
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 91
35367: PUSH
35368: LD_VAR 0 1
35372: PUSH
35373: LD_INT 12
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: PUSH
35386: EMPTY
35387: LIST
35388: PPUSH
35389: CALL_OW 69
35393: PUSH
35394: LD_INT 2
35396: GREATER
35397: AND
35398: IFFALSE 35421
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35400: LD_ADDR_VAR 0 18
35404: PUSH
35405: LD_INT 11
35407: PUSH
35408: LD_INT 30
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_VAR 0 12
35419: ARRAY
35420: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35421: LD_VAR 0 18
35425: NOT
35426: PUSH
35427: LD_INT 40
35429: PPUSH
35430: LD_VAR 0 16
35434: PPUSH
35435: CALL_OW 321
35439: PUSH
35440: LD_INT 2
35442: EQUAL
35443: AND
35444: PUSH
35445: LD_INT 7
35447: PUSH
35448: LD_VAR 0 5
35452: IN
35453: PUSH
35454: LD_INT 28
35456: PUSH
35457: LD_VAR 0 5
35461: IN
35462: OR
35463: PUSH
35464: LD_INT 45
35466: PUSH
35467: LD_VAR 0 5
35471: IN
35472: OR
35473: AND
35474: IFFALSE 35728
// begin hex := GetHexInfo ( x , y ) ;
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_VAR 0 10
35485: PPUSH
35486: LD_VAR 0 11
35490: PPUSH
35491: CALL_OW 546
35495: ST_TO_ADDR
// if hex [ 1 ] then
35496: LD_VAR 0 4
35500: PUSH
35501: LD_INT 1
35503: ARRAY
35504: IFFALSE 35508
// exit ;
35506: GO 35911
// height := hex [ 2 ] ;
35508: LD_ADDR_VAR 0 15
35512: PUSH
35513: LD_VAR 0 4
35517: PUSH
35518: LD_INT 2
35520: ARRAY
35521: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35522: LD_ADDR_VAR 0 14
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: LD_INT 5
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: ST_TO_ADDR
// for i in tmp do
35545: LD_ADDR_VAR 0 8
35549: PUSH
35550: LD_VAR 0 14
35554: PUSH
35555: FOR_IN
35556: IFFALSE 35726
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35558: LD_ADDR_VAR 0 9
35562: PUSH
35563: LD_VAR 0 10
35567: PPUSH
35568: LD_VAR 0 8
35572: PPUSH
35573: LD_INT 5
35575: PPUSH
35576: CALL_OW 272
35580: PUSH
35581: LD_VAR 0 11
35585: PPUSH
35586: LD_VAR 0 8
35590: PPUSH
35591: LD_INT 5
35593: PPUSH
35594: CALL_OW 273
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35603: LD_VAR 0 9
35607: PUSH
35608: LD_INT 1
35610: ARRAY
35611: PPUSH
35612: LD_VAR 0 9
35616: PUSH
35617: LD_INT 2
35619: ARRAY
35620: PPUSH
35621: CALL_OW 488
35625: IFFALSE 35724
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35627: LD_ADDR_VAR 0 4
35631: PUSH
35632: LD_VAR 0 9
35636: PUSH
35637: LD_INT 1
35639: ARRAY
35640: PPUSH
35641: LD_VAR 0 9
35645: PUSH
35646: LD_INT 2
35648: ARRAY
35649: PPUSH
35650: CALL_OW 546
35654: ST_TO_ADDR
// if hex [ 1 ] then
35655: LD_VAR 0 4
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: IFFALSE 35667
// continue ;
35665: GO 35555
// h := hex [ 2 ] ;
35667: LD_ADDR_VAR 0 13
35671: PUSH
35672: LD_VAR 0 4
35676: PUSH
35677: LD_INT 2
35679: ARRAY
35680: ST_TO_ADDR
// if h + 7 < height then
35681: LD_VAR 0 13
35685: PUSH
35686: LD_INT 7
35688: PLUS
35689: PUSH
35690: LD_VAR 0 15
35694: LESS
35695: IFFALSE 35724
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35697: LD_ADDR_VAR 0 18
35701: PUSH
35702: LD_INT 7
35704: PUSH
35705: LD_INT 28
35707: PUSH
35708: LD_INT 45
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: PUSH
35716: LD_VAR 0 12
35720: ARRAY
35721: ST_TO_ADDR
// break ;
35722: GO 35726
// end ; end ; end ;
35724: GO 35555
35726: POP
35727: POP
// end ; if not weapon then
35728: LD_VAR 0 18
35732: NOT
35733: IFFALSE 35793
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 5
35744: PUSH
35745: LD_INT 11
35747: PUSH
35748: LD_INT 30
35750: PUSH
35751: LD_INT 49
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: DIFF
35759: ST_TO_ADDR
// if not list then
35760: LD_VAR 0 5
35764: NOT
35765: IFFALSE 35769
// exit ;
35767: GO 35911
// weapon := list [ rand ( 1 , list ) ] ;
35769: LD_ADDR_VAR 0 18
35773: PUSH
35774: LD_VAR 0 5
35778: PUSH
35779: LD_INT 1
35781: PPUSH
35782: LD_VAR 0 5
35786: PPUSH
35787: CALL_OW 12
35791: ARRAY
35792: ST_TO_ADDR
// end ; if weapon then
35793: LD_VAR 0 18
35797: IFFALSE 35911
// begin tmp := CostOfWeapon ( weapon ) ;
35799: LD_ADDR_VAR 0 14
35803: PUSH
35804: LD_VAR 0 18
35808: PPUSH
35809: CALL_OW 451
35813: ST_TO_ADDR
// j := GetBase ( tower ) ;
35814: LD_ADDR_VAR 0 9
35818: PUSH
35819: LD_VAR 0 1
35823: PPUSH
35824: CALL_OW 274
35828: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35829: LD_VAR 0 9
35833: PPUSH
35834: LD_INT 1
35836: PPUSH
35837: CALL_OW 275
35841: PUSH
35842: LD_VAR 0 14
35846: PUSH
35847: LD_INT 1
35849: ARRAY
35850: GREATEREQUAL
35851: PUSH
35852: LD_VAR 0 9
35856: PPUSH
35857: LD_INT 2
35859: PPUSH
35860: CALL_OW 275
35864: PUSH
35865: LD_VAR 0 14
35869: PUSH
35870: LD_INT 2
35872: ARRAY
35873: GREATEREQUAL
35874: AND
35875: PUSH
35876: LD_VAR 0 9
35880: PPUSH
35881: LD_INT 3
35883: PPUSH
35884: CALL_OW 275
35888: PUSH
35889: LD_VAR 0 14
35893: PUSH
35894: LD_INT 3
35896: ARRAY
35897: GREATEREQUAL
35898: AND
35899: IFFALSE 35911
// result := weapon ;
35901: LD_ADDR_VAR 0 3
35905: PUSH
35906: LD_VAR 0 18
35910: ST_TO_ADDR
// end ; end ;
35911: LD_VAR 0 3
35915: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35916: LD_INT 0
35918: PPUSH
35919: PPUSH
// result := true ;
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_INT 1
35927: ST_TO_ADDR
// if array1 = array2 then
35928: LD_VAR 0 1
35932: PUSH
35933: LD_VAR 0 2
35937: EQUAL
35938: IFFALSE 35998
// begin for i = 1 to array1 do
35940: LD_ADDR_VAR 0 4
35944: PUSH
35945: DOUBLE
35946: LD_INT 1
35948: DEC
35949: ST_TO_ADDR
35950: LD_VAR 0 1
35954: PUSH
35955: FOR_TO
35956: IFFALSE 35994
// if array1 [ i ] <> array2 [ i ] then
35958: LD_VAR 0 1
35962: PUSH
35963: LD_VAR 0 4
35967: ARRAY
35968: PUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_VAR 0 4
35978: ARRAY
35979: NONEQUAL
35980: IFFALSE 35992
// begin result := false ;
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_INT 0
35989: ST_TO_ADDR
// break ;
35990: GO 35994
// end ;
35992: GO 35955
35994: POP
35995: POP
// end else
35996: GO 36006
// result := false ;
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_INT 0
36005: ST_TO_ADDR
// end ;
36006: LD_VAR 0 3
36010: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
// if not array1 or not array2 then
36015: LD_VAR 0 1
36019: NOT
36020: PUSH
36021: LD_VAR 0 2
36025: NOT
36026: OR
36027: IFFALSE 36031
// exit ;
36029: GO 36095
// result := true ;
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_INT 1
36038: ST_TO_ADDR
// for i = 1 to array1 do
36039: LD_ADDR_VAR 0 4
36043: PUSH
36044: DOUBLE
36045: LD_INT 1
36047: DEC
36048: ST_TO_ADDR
36049: LD_VAR 0 1
36053: PUSH
36054: FOR_TO
36055: IFFALSE 36093
// if array1 [ i ] <> array2 [ i ] then
36057: LD_VAR 0 1
36061: PUSH
36062: LD_VAR 0 4
36066: ARRAY
36067: PUSH
36068: LD_VAR 0 2
36072: PUSH
36073: LD_VAR 0 4
36077: ARRAY
36078: NONEQUAL
36079: IFFALSE 36091
// begin result := false ;
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: LD_INT 0
36088: ST_TO_ADDR
// break ;
36089: GO 36093
// end ;
36091: GO 36054
36093: POP
36094: POP
// end ;
36095: LD_VAR 0 3
36099: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
// pom := GetBase ( fac ) ;
36105: LD_ADDR_VAR 0 5
36109: PUSH
36110: LD_VAR 0 1
36114: PPUSH
36115: CALL_OW 274
36119: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36120: LD_ADDR_VAR 0 4
36124: PUSH
36125: LD_VAR 0 2
36129: PUSH
36130: LD_INT 1
36132: ARRAY
36133: PPUSH
36134: LD_VAR 0 2
36138: PUSH
36139: LD_INT 2
36141: ARRAY
36142: PPUSH
36143: LD_VAR 0 2
36147: PUSH
36148: LD_INT 3
36150: ARRAY
36151: PPUSH
36152: LD_VAR 0 2
36156: PUSH
36157: LD_INT 4
36159: ARRAY
36160: PPUSH
36161: CALL_OW 449
36165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_VAR 0 5
36175: PPUSH
36176: LD_INT 1
36178: PPUSH
36179: CALL_OW 275
36183: PUSH
36184: LD_VAR 0 4
36188: PUSH
36189: LD_INT 1
36191: ARRAY
36192: GREATEREQUAL
36193: PUSH
36194: LD_VAR 0 5
36198: PPUSH
36199: LD_INT 2
36201: PPUSH
36202: CALL_OW 275
36206: PUSH
36207: LD_VAR 0 4
36211: PUSH
36212: LD_INT 2
36214: ARRAY
36215: GREATEREQUAL
36216: AND
36217: PUSH
36218: LD_VAR 0 5
36222: PPUSH
36223: LD_INT 3
36225: PPUSH
36226: CALL_OW 275
36230: PUSH
36231: LD_VAR 0 4
36235: PUSH
36236: LD_INT 3
36238: ARRAY
36239: GREATEREQUAL
36240: AND
36241: ST_TO_ADDR
// end ;
36242: LD_VAR 0 3
36246: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36247: LD_INT 0
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
// pom := GetBase ( building ) ;
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 274
36267: ST_TO_ADDR
// if not pom then
36268: LD_VAR 0 3
36272: NOT
36273: IFFALSE 36277
// exit ;
36275: GO 36447
// btype := GetBType ( building ) ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 266
36291: ST_TO_ADDR
// if btype = b_armoury then
36292: LD_VAR 0 5
36296: PUSH
36297: LD_INT 4
36299: EQUAL
36300: IFFALSE 36310
// btype := b_barracks ;
36302: LD_ADDR_VAR 0 5
36306: PUSH
36307: LD_INT 5
36309: ST_TO_ADDR
// if btype = b_depot then
36310: LD_VAR 0 5
36314: PUSH
36315: LD_INT 0
36317: EQUAL
36318: IFFALSE 36328
// btype := b_warehouse ;
36320: LD_ADDR_VAR 0 5
36324: PUSH
36325: LD_INT 1
36327: ST_TO_ADDR
// if btype = b_workshop then
36328: LD_VAR 0 5
36332: PUSH
36333: LD_INT 2
36335: EQUAL
36336: IFFALSE 36346
// btype := b_factory ;
36338: LD_ADDR_VAR 0 5
36342: PUSH
36343: LD_INT 3
36345: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36346: LD_ADDR_VAR 0 4
36350: PUSH
36351: LD_VAR 0 5
36355: PPUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 248
36365: PPUSH
36366: CALL_OW 450
36370: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36371: LD_ADDR_VAR 0 2
36375: PUSH
36376: LD_VAR 0 3
36380: PPUSH
36381: LD_INT 1
36383: PPUSH
36384: CALL_OW 275
36388: PUSH
36389: LD_VAR 0 4
36393: PUSH
36394: LD_INT 1
36396: ARRAY
36397: GREATEREQUAL
36398: PUSH
36399: LD_VAR 0 3
36403: PPUSH
36404: LD_INT 2
36406: PPUSH
36407: CALL_OW 275
36411: PUSH
36412: LD_VAR 0 4
36416: PUSH
36417: LD_INT 2
36419: ARRAY
36420: GREATEREQUAL
36421: AND
36422: PUSH
36423: LD_VAR 0 3
36427: PPUSH
36428: LD_INT 3
36430: PPUSH
36431: CALL_OW 275
36435: PUSH
36436: LD_VAR 0 4
36440: PUSH
36441: LD_INT 3
36443: ARRAY
36444: GREATEREQUAL
36445: AND
36446: ST_TO_ADDR
// end ;
36447: LD_VAR 0 2
36451: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36452: LD_INT 0
36454: PPUSH
36455: PPUSH
36456: PPUSH
// pom := GetBase ( building ) ;
36457: LD_ADDR_VAR 0 4
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: CALL_OW 274
36471: ST_TO_ADDR
// if not pom then
36472: LD_VAR 0 4
36476: NOT
36477: IFFALSE 36481
// exit ;
36479: GO 36582
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36481: LD_ADDR_VAR 0 5
36485: PUSH
36486: LD_VAR 0 2
36490: PPUSH
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL_OW 248
36500: PPUSH
36501: CALL_OW 450
36505: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: LD_VAR 0 4
36515: PPUSH
36516: LD_INT 1
36518: PPUSH
36519: CALL_OW 275
36523: PUSH
36524: LD_VAR 0 5
36528: PUSH
36529: LD_INT 1
36531: ARRAY
36532: GREATEREQUAL
36533: PUSH
36534: LD_VAR 0 4
36538: PPUSH
36539: LD_INT 2
36541: PPUSH
36542: CALL_OW 275
36546: PUSH
36547: LD_VAR 0 5
36551: PUSH
36552: LD_INT 2
36554: ARRAY
36555: GREATEREQUAL
36556: AND
36557: PUSH
36558: LD_VAR 0 4
36562: PPUSH
36563: LD_INT 3
36565: PPUSH
36566: CALL_OW 275
36570: PUSH
36571: LD_VAR 0 5
36575: PUSH
36576: LD_INT 3
36578: ARRAY
36579: GREATEREQUAL
36580: AND
36581: ST_TO_ADDR
// end ;
36582: LD_VAR 0 3
36586: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36587: LD_INT 0
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
// result := false ;
36600: LD_ADDR_VAR 0 8
36604: PUSH
36605: LD_INT 0
36607: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36608: LD_VAR 0 5
36612: NOT
36613: PUSH
36614: LD_VAR 0 1
36618: NOT
36619: OR
36620: PUSH
36621: LD_VAR 0 2
36625: NOT
36626: OR
36627: PUSH
36628: LD_VAR 0 3
36632: NOT
36633: OR
36634: IFFALSE 36638
// exit ;
36636: GO 37452
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36638: LD_ADDR_VAR 0 14
36642: PUSH
36643: LD_VAR 0 1
36647: PPUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: LD_VAR 0 3
36657: PPUSH
36658: LD_VAR 0 4
36662: PPUSH
36663: LD_VAR 0 5
36667: PUSH
36668: LD_INT 1
36670: ARRAY
36671: PPUSH
36672: CALL_OW 248
36676: PPUSH
36677: LD_INT 0
36679: PPUSH
36680: CALL 38685 0 6
36684: ST_TO_ADDR
// if not hexes then
36685: LD_VAR 0 14
36689: NOT
36690: IFFALSE 36694
// exit ;
36692: GO 37452
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36694: LD_ADDR_VAR 0 17
36698: PUSH
36699: LD_VAR 0 5
36703: PPUSH
36704: LD_INT 22
36706: PUSH
36707: LD_VAR 0 13
36711: PPUSH
36712: CALL_OW 255
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: LD_INT 30
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 30
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: LIST
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PPUSH
36753: CALL_OW 72
36757: ST_TO_ADDR
// for i = 1 to hexes do
36758: LD_ADDR_VAR 0 9
36762: PUSH
36763: DOUBLE
36764: LD_INT 1
36766: DEC
36767: ST_TO_ADDR
36768: LD_VAR 0 14
36772: PUSH
36773: FOR_TO
36774: IFFALSE 37450
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36776: LD_ADDR_VAR 0 13
36780: PUSH
36781: LD_VAR 0 14
36785: PUSH
36786: LD_VAR 0 9
36790: ARRAY
36791: PUSH
36792: LD_INT 1
36794: ARRAY
36795: PPUSH
36796: LD_VAR 0 14
36800: PUSH
36801: LD_VAR 0 9
36805: ARRAY
36806: PUSH
36807: LD_INT 2
36809: ARRAY
36810: PPUSH
36811: CALL_OW 428
36815: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36816: LD_VAR 0 14
36820: PUSH
36821: LD_VAR 0 9
36825: ARRAY
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: PPUSH
36831: LD_VAR 0 14
36835: PUSH
36836: LD_VAR 0 9
36840: ARRAY
36841: PUSH
36842: LD_INT 2
36844: ARRAY
36845: PPUSH
36846: CALL_OW 351
36850: PUSH
36851: LD_VAR 0 14
36855: PUSH
36856: LD_VAR 0 9
36860: ARRAY
36861: PUSH
36862: LD_INT 1
36864: ARRAY
36865: PPUSH
36866: LD_VAR 0 14
36870: PUSH
36871: LD_VAR 0 9
36875: ARRAY
36876: PUSH
36877: LD_INT 2
36879: ARRAY
36880: PPUSH
36881: CALL_OW 488
36885: NOT
36886: OR
36887: PUSH
36888: LD_VAR 0 13
36892: PPUSH
36893: CALL_OW 247
36897: PUSH
36898: LD_INT 3
36900: EQUAL
36901: OR
36902: IFFALSE 36908
// exit ;
36904: POP
36905: POP
36906: GO 37452
// if not tmp then
36908: LD_VAR 0 13
36912: NOT
36913: IFFALSE 36917
// continue ;
36915: GO 36773
// result := true ;
36917: LD_ADDR_VAR 0 8
36921: PUSH
36922: LD_INT 1
36924: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36925: LD_VAR 0 6
36929: PUSH
36930: LD_VAR 0 13
36934: PPUSH
36935: CALL_OW 247
36939: PUSH
36940: LD_INT 2
36942: EQUAL
36943: AND
36944: PUSH
36945: LD_VAR 0 13
36949: PPUSH
36950: CALL_OW 263
36954: PUSH
36955: LD_INT 1
36957: EQUAL
36958: AND
36959: IFFALSE 37123
// begin if IsDrivenBy ( tmp ) then
36961: LD_VAR 0 13
36965: PPUSH
36966: CALL_OW 311
36970: IFFALSE 36974
// continue ;
36972: GO 36773
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36974: LD_VAR 0 6
36978: PPUSH
36979: LD_INT 3
36981: PUSH
36982: LD_INT 60
36984: PUSH
36985: EMPTY
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: LD_INT 55
36997: PUSH
36998: EMPTY
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PPUSH
37009: CALL_OW 72
37013: IFFALSE 37121
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37015: LD_ADDR_VAR 0 18
37019: PUSH
37020: LD_VAR 0 6
37024: PPUSH
37025: LD_INT 3
37027: PUSH
37028: LD_INT 60
37030: PUSH
37031: EMPTY
37032: LIST
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: LD_INT 55
37043: PUSH
37044: EMPTY
37045: LIST
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PPUSH
37055: CALL_OW 72
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: ST_TO_ADDR
// if IsInUnit ( driver ) then
37064: LD_VAR 0 18
37068: PPUSH
37069: CALL_OW 310
37073: IFFALSE 37084
// ComExit ( driver ) ;
37075: LD_VAR 0 18
37079: PPUSH
37080: CALL 62373 0 1
// AddComEnterUnit ( driver , tmp ) ;
37084: LD_VAR 0 18
37088: PPUSH
37089: LD_VAR 0 13
37093: PPUSH
37094: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37098: LD_VAR 0 18
37102: PPUSH
37103: LD_VAR 0 7
37107: PPUSH
37108: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37112: LD_VAR 0 18
37116: PPUSH
37117: CALL_OW 181
// end ; continue ;
37121: GO 36773
// end ; if not cleaners or not tmp in cleaners then
37123: LD_VAR 0 6
37127: NOT
37128: PUSH
37129: LD_VAR 0 13
37133: PUSH
37134: LD_VAR 0 6
37138: IN
37139: NOT
37140: OR
37141: IFFALSE 37448
// begin if dep then
37143: LD_VAR 0 17
37147: IFFALSE 37283
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37149: LD_ADDR_VAR 0 16
37153: PUSH
37154: LD_VAR 0 17
37158: PUSH
37159: LD_INT 1
37161: ARRAY
37162: PPUSH
37163: CALL_OW 250
37167: PPUSH
37168: LD_VAR 0 17
37172: PUSH
37173: LD_INT 1
37175: ARRAY
37176: PPUSH
37177: CALL_OW 254
37181: PPUSH
37182: LD_INT 5
37184: PPUSH
37185: CALL_OW 272
37189: PUSH
37190: LD_VAR 0 17
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: CALL_OW 251
37203: PPUSH
37204: LD_VAR 0 17
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PPUSH
37213: CALL_OW 254
37217: PPUSH
37218: LD_INT 5
37220: PPUSH
37221: CALL_OW 273
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37230: LD_VAR 0 16
37234: PUSH
37235: LD_INT 1
37237: ARRAY
37238: PPUSH
37239: LD_VAR 0 16
37243: PUSH
37244: LD_INT 2
37246: ARRAY
37247: PPUSH
37248: CALL_OW 488
37252: IFFALSE 37283
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37254: LD_VAR 0 13
37258: PPUSH
37259: LD_VAR 0 16
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 16
37272: PUSH
37273: LD_INT 2
37275: ARRAY
37276: PPUSH
37277: CALL_OW 111
// continue ;
37281: GO 36773
// end ; end ; r := GetDir ( tmp ) ;
37283: LD_ADDR_VAR 0 15
37287: PUSH
37288: LD_VAR 0 13
37292: PPUSH
37293: CALL_OW 254
37297: ST_TO_ADDR
// if r = 5 then
37298: LD_VAR 0 15
37302: PUSH
37303: LD_INT 5
37305: EQUAL
37306: IFFALSE 37316
// r := 0 ;
37308: LD_ADDR_VAR 0 15
37312: PUSH
37313: LD_INT 0
37315: ST_TO_ADDR
// for j = r to 5 do
37316: LD_ADDR_VAR 0 10
37320: PUSH
37321: DOUBLE
37322: LD_VAR 0 15
37326: DEC
37327: ST_TO_ADDR
37328: LD_INT 5
37330: PUSH
37331: FOR_TO
37332: IFFALSE 37446
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37334: LD_ADDR_VAR 0 11
37338: PUSH
37339: LD_VAR 0 13
37343: PPUSH
37344: CALL_OW 250
37348: PPUSH
37349: LD_VAR 0 10
37353: PPUSH
37354: LD_INT 2
37356: PPUSH
37357: CALL_OW 272
37361: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37362: LD_ADDR_VAR 0 12
37366: PUSH
37367: LD_VAR 0 13
37371: PPUSH
37372: CALL_OW 251
37376: PPUSH
37377: LD_VAR 0 10
37381: PPUSH
37382: LD_INT 2
37384: PPUSH
37385: CALL_OW 273
37389: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37390: LD_VAR 0 11
37394: PPUSH
37395: LD_VAR 0 12
37399: PPUSH
37400: CALL_OW 488
37404: PUSH
37405: LD_VAR 0 11
37409: PPUSH
37410: LD_VAR 0 12
37414: PPUSH
37415: CALL_OW 428
37419: NOT
37420: AND
37421: IFFALSE 37444
// begin ComMoveXY ( tmp , _x , _y ) ;
37423: LD_VAR 0 13
37427: PPUSH
37428: LD_VAR 0 11
37432: PPUSH
37433: LD_VAR 0 12
37437: PPUSH
37438: CALL_OW 111
// break ;
37442: GO 37446
// end ; end ;
37444: GO 37331
37446: POP
37447: POP
// end ; end ;
37448: GO 36773
37450: POP
37451: POP
// end ;
37452: LD_VAR 0 8
37456: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37457: LD_INT 0
37459: PPUSH
// result := true ;
37460: LD_ADDR_VAR 0 3
37464: PUSH
37465: LD_INT 1
37467: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37468: LD_VAR 0 2
37472: PUSH
37473: LD_INT 24
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37487
37479: LD_INT 33
37481: DOUBLE
37482: EQUAL
37483: IFTRUE 37487
37485: GO 37512
37487: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: LD_INT 32
37495: PPUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 321
37505: PUSH
37506: LD_INT 2
37508: EQUAL
37509: ST_TO_ADDR
37510: GO 37828
37512: LD_INT 20
37514: DOUBLE
37515: EQUAL
37516: IFTRUE 37520
37518: GO 37545
37520: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37521: LD_ADDR_VAR 0 3
37525: PUSH
37526: LD_INT 6
37528: PPUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 321
37538: PUSH
37539: LD_INT 2
37541: EQUAL
37542: ST_TO_ADDR
37543: GO 37828
37545: LD_INT 22
37547: DOUBLE
37548: EQUAL
37549: IFTRUE 37559
37551: LD_INT 36
37553: DOUBLE
37554: EQUAL
37555: IFTRUE 37559
37557: GO 37584
37559: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37560: LD_ADDR_VAR 0 3
37564: PUSH
37565: LD_INT 15
37567: PPUSH
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 321
37577: PUSH
37578: LD_INT 2
37580: EQUAL
37581: ST_TO_ADDR
37582: GO 37828
37584: LD_INT 30
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37592
37590: GO 37617
37592: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_INT 20
37600: PPUSH
37601: LD_VAR 0 1
37605: PPUSH
37606: CALL_OW 321
37610: PUSH
37611: LD_INT 2
37613: EQUAL
37614: ST_TO_ADDR
37615: GO 37828
37617: LD_INT 28
37619: DOUBLE
37620: EQUAL
37621: IFTRUE 37631
37623: LD_INT 21
37625: DOUBLE
37626: EQUAL
37627: IFTRUE 37631
37629: GO 37656
37631: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37632: LD_ADDR_VAR 0 3
37636: PUSH
37637: LD_INT 21
37639: PPUSH
37640: LD_VAR 0 1
37644: PPUSH
37645: CALL_OW 321
37649: PUSH
37650: LD_INT 2
37652: EQUAL
37653: ST_TO_ADDR
37654: GO 37828
37656: LD_INT 16
37658: DOUBLE
37659: EQUAL
37660: IFTRUE 37664
37662: GO 37689
37664: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37665: LD_ADDR_VAR 0 3
37669: PUSH
37670: LD_INT 84
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 321
37682: PUSH
37683: LD_INT 2
37685: EQUAL
37686: ST_TO_ADDR
37687: GO 37828
37689: LD_INT 19
37691: DOUBLE
37692: EQUAL
37693: IFTRUE 37703
37695: LD_INT 23
37697: DOUBLE
37698: EQUAL
37699: IFTRUE 37703
37701: GO 37728
37703: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37704: LD_ADDR_VAR 0 3
37708: PUSH
37709: LD_INT 83
37711: PPUSH
37712: LD_VAR 0 1
37716: PPUSH
37717: CALL_OW 321
37721: PUSH
37722: LD_INT 2
37724: EQUAL
37725: ST_TO_ADDR
37726: GO 37828
37728: LD_INT 17
37730: DOUBLE
37731: EQUAL
37732: IFTRUE 37736
37734: GO 37761
37736: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 39
37744: PPUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL_OW 321
37754: PUSH
37755: LD_INT 2
37757: EQUAL
37758: ST_TO_ADDR
37759: GO 37828
37761: LD_INT 18
37763: DOUBLE
37764: EQUAL
37765: IFTRUE 37769
37767: GO 37794
37769: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_INT 40
37777: PPUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 321
37787: PUSH
37788: LD_INT 2
37790: EQUAL
37791: ST_TO_ADDR
37792: GO 37828
37794: LD_INT 27
37796: DOUBLE
37797: EQUAL
37798: IFTRUE 37802
37800: GO 37827
37802: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37803: LD_ADDR_VAR 0 3
37807: PUSH
37808: LD_INT 35
37810: PPUSH
37811: LD_VAR 0 1
37815: PPUSH
37816: CALL_OW 321
37820: PUSH
37821: LD_INT 2
37823: EQUAL
37824: ST_TO_ADDR
37825: GO 37828
37827: POP
// end ;
37828: LD_VAR 0 3
37832: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37833: LD_INT 0
37835: PPUSH
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
37841: PPUSH
37842: PPUSH
37843: PPUSH
37844: PPUSH
37845: PPUSH
// result := false ;
37846: LD_ADDR_VAR 0 6
37850: PUSH
37851: LD_INT 0
37853: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37854: LD_VAR 0 1
37858: NOT
37859: PUSH
37860: LD_VAR 0 1
37864: PPUSH
37865: CALL_OW 266
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: IN
37880: NOT
37881: OR
37882: PUSH
37883: LD_VAR 0 2
37887: NOT
37888: OR
37889: PUSH
37890: LD_VAR 0 5
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: LD_INT 3
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: LD_INT 5
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: IN
37921: NOT
37922: OR
37923: PUSH
37924: LD_VAR 0 3
37928: PPUSH
37929: LD_VAR 0 4
37933: PPUSH
37934: CALL_OW 488
37938: NOT
37939: OR
37940: IFFALSE 37944
// exit ;
37942: GO 38680
// side := GetSide ( depot ) ;
37944: LD_ADDR_VAR 0 9
37948: PUSH
37949: LD_VAR 0 1
37953: PPUSH
37954: CALL_OW 255
37958: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37959: LD_VAR 0 9
37963: PPUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: CALL 37457 0 2
37973: NOT
37974: IFFALSE 37978
// exit ;
37976: GO 38680
// pom := GetBase ( depot ) ;
37978: LD_ADDR_VAR 0 10
37982: PUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 274
37992: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37993: LD_ADDR_VAR 0 11
37997: PUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 248
38012: PPUSH
38013: CALL_OW 450
38017: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38018: LD_VAR 0 10
38022: PPUSH
38023: LD_INT 1
38025: PPUSH
38026: CALL_OW 275
38030: PUSH
38031: LD_VAR 0 11
38035: PUSH
38036: LD_INT 1
38038: ARRAY
38039: GREATEREQUAL
38040: PUSH
38041: LD_VAR 0 10
38045: PPUSH
38046: LD_INT 2
38048: PPUSH
38049: CALL_OW 275
38053: PUSH
38054: LD_VAR 0 11
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: GREATEREQUAL
38063: AND
38064: PUSH
38065: LD_VAR 0 10
38069: PPUSH
38070: LD_INT 3
38072: PPUSH
38073: CALL_OW 275
38077: PUSH
38078: LD_VAR 0 11
38082: PUSH
38083: LD_INT 3
38085: ARRAY
38086: GREATEREQUAL
38087: AND
38088: NOT
38089: IFFALSE 38093
// exit ;
38091: GO 38680
// if GetBType ( depot ) = b_depot then
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 266
38102: PUSH
38103: LD_INT 0
38105: EQUAL
38106: IFFALSE 38118
// dist := 28 else
38108: LD_ADDR_VAR 0 14
38112: PUSH
38113: LD_INT 28
38115: ST_TO_ADDR
38116: GO 38126
// dist := 36 ;
38118: LD_ADDR_VAR 0 14
38122: PUSH
38123: LD_INT 36
38125: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38126: LD_VAR 0 1
38130: PPUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: LD_VAR 0 4
38140: PPUSH
38141: CALL_OW 297
38145: PUSH
38146: LD_VAR 0 14
38150: GREATER
38151: IFFALSE 38155
// exit ;
38153: GO 38680
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38155: LD_ADDR_VAR 0 12
38159: PUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: LD_VAR 0 3
38169: PPUSH
38170: LD_VAR 0 4
38174: PPUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: LD_VAR 0 1
38184: PPUSH
38185: CALL_OW 248
38189: PPUSH
38190: LD_INT 0
38192: PPUSH
38193: CALL 38685 0 6
38197: ST_TO_ADDR
// if not hexes then
38198: LD_VAR 0 12
38202: NOT
38203: IFFALSE 38207
// exit ;
38205: GO 38680
// hex := GetHexInfo ( x , y ) ;
38207: LD_ADDR_VAR 0 15
38211: PUSH
38212: LD_VAR 0 3
38216: PPUSH
38217: LD_VAR 0 4
38221: PPUSH
38222: CALL_OW 546
38226: ST_TO_ADDR
// if hex [ 1 ] then
38227: LD_VAR 0 15
38231: PUSH
38232: LD_INT 1
38234: ARRAY
38235: IFFALSE 38239
// exit ;
38237: GO 38680
// height := hex [ 2 ] ;
38239: LD_ADDR_VAR 0 13
38243: PUSH
38244: LD_VAR 0 15
38248: PUSH
38249: LD_INT 2
38251: ARRAY
38252: ST_TO_ADDR
// for i = 1 to hexes do
38253: LD_ADDR_VAR 0 7
38257: PUSH
38258: DOUBLE
38259: LD_INT 1
38261: DEC
38262: ST_TO_ADDR
38263: LD_VAR 0 12
38267: PUSH
38268: FOR_TO
38269: IFFALSE 38599
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38271: LD_VAR 0 12
38275: PUSH
38276: LD_VAR 0 7
38280: ARRAY
38281: PUSH
38282: LD_INT 1
38284: ARRAY
38285: PPUSH
38286: LD_VAR 0 12
38290: PUSH
38291: LD_VAR 0 7
38295: ARRAY
38296: PUSH
38297: LD_INT 2
38299: ARRAY
38300: PPUSH
38301: CALL_OW 488
38305: NOT
38306: PUSH
38307: LD_VAR 0 12
38311: PUSH
38312: LD_VAR 0 7
38316: ARRAY
38317: PUSH
38318: LD_INT 1
38320: ARRAY
38321: PPUSH
38322: LD_VAR 0 12
38326: PUSH
38327: LD_VAR 0 7
38331: ARRAY
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: PPUSH
38337: CALL_OW 428
38341: PUSH
38342: LD_INT 0
38344: GREATER
38345: OR
38346: PUSH
38347: LD_VAR 0 12
38351: PUSH
38352: LD_VAR 0 7
38356: ARRAY
38357: PUSH
38358: LD_INT 1
38360: ARRAY
38361: PPUSH
38362: LD_VAR 0 12
38366: PUSH
38367: LD_VAR 0 7
38371: ARRAY
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: PPUSH
38377: CALL_OW 351
38381: OR
38382: IFFALSE 38388
// exit ;
38384: POP
38385: POP
38386: GO 38680
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38388: LD_ADDR_VAR 0 8
38392: PUSH
38393: LD_VAR 0 12
38397: PUSH
38398: LD_VAR 0 7
38402: ARRAY
38403: PUSH
38404: LD_INT 1
38406: ARRAY
38407: PPUSH
38408: LD_VAR 0 12
38412: PUSH
38413: LD_VAR 0 7
38417: ARRAY
38418: PUSH
38419: LD_INT 2
38421: ARRAY
38422: PPUSH
38423: CALL_OW 546
38427: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38428: LD_VAR 0 8
38432: PUSH
38433: LD_INT 1
38435: ARRAY
38436: PUSH
38437: LD_VAR 0 8
38441: PUSH
38442: LD_INT 2
38444: ARRAY
38445: PUSH
38446: LD_VAR 0 13
38450: PUSH
38451: LD_INT 2
38453: PLUS
38454: GREATER
38455: OR
38456: PUSH
38457: LD_VAR 0 8
38461: PUSH
38462: LD_INT 2
38464: ARRAY
38465: PUSH
38466: LD_VAR 0 13
38470: PUSH
38471: LD_INT 2
38473: MINUS
38474: LESS
38475: OR
38476: PUSH
38477: LD_VAR 0 8
38481: PUSH
38482: LD_INT 3
38484: ARRAY
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 8
38491: PUSH
38492: LD_INT 9
38494: PUSH
38495: LD_INT 10
38497: PUSH
38498: LD_INT 11
38500: PUSH
38501: LD_INT 12
38503: PUSH
38504: LD_INT 13
38506: PUSH
38507: LD_INT 16
38509: PUSH
38510: LD_INT 17
38512: PUSH
38513: LD_INT 18
38515: PUSH
38516: LD_INT 19
38518: PUSH
38519: LD_INT 20
38521: PUSH
38522: LD_INT 21
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: IN
38540: NOT
38541: OR
38542: PUSH
38543: LD_VAR 0 8
38547: PUSH
38548: LD_INT 5
38550: ARRAY
38551: NOT
38552: OR
38553: PUSH
38554: LD_VAR 0 8
38558: PUSH
38559: LD_INT 6
38561: ARRAY
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 7
38571: PUSH
38572: LD_INT 9
38574: PUSH
38575: LD_INT 10
38577: PUSH
38578: LD_INT 11
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: IN
38589: NOT
38590: OR
38591: IFFALSE 38597
// exit ;
38593: POP
38594: POP
38595: GO 38680
// end ;
38597: GO 38268
38599: POP
38600: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38601: LD_VAR 0 9
38605: PPUSH
38606: LD_VAR 0 3
38610: PPUSH
38611: LD_VAR 0 4
38615: PPUSH
38616: LD_INT 20
38618: PPUSH
38619: CALL 30632 0 4
38623: PUSH
38624: LD_INT 4
38626: ARRAY
38627: IFFALSE 38631
// exit ;
38629: GO 38680
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38631: LD_VAR 0 2
38635: PUSH
38636: LD_INT 29
38638: PUSH
38639: LD_INT 30
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: IN
38646: PUSH
38647: LD_VAR 0 3
38651: PPUSH
38652: LD_VAR 0 4
38656: PPUSH
38657: LD_VAR 0 9
38661: PPUSH
38662: CALL_OW 440
38666: NOT
38667: AND
38668: IFFALSE 38672
// exit ;
38670: GO 38680
// result := true ;
38672: LD_ADDR_VAR 0 6
38676: PUSH
38677: LD_INT 1
38679: ST_TO_ADDR
// end ;
38680: LD_VAR 0 6
38684: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38685: LD_INT 0
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
38744: PPUSH
// result = [ ] ;
38745: LD_ADDR_VAR 0 7
38749: PUSH
38750: EMPTY
38751: ST_TO_ADDR
// temp_list = [ ] ;
38752: LD_ADDR_VAR 0 9
38756: PUSH
38757: EMPTY
38758: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38759: LD_VAR 0 4
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 3
38775: PUSH
38776: LD_INT 4
38778: PUSH
38779: LD_INT 5
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: IN
38790: NOT
38791: PUSH
38792: LD_VAR 0 1
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: IN
38807: PUSH
38808: LD_VAR 0 5
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: LD_INT 3
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: IN
38827: NOT
38828: AND
38829: OR
38830: IFFALSE 38834
// exit ;
38832: GO 57225
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38834: LD_VAR 0 1
38838: PUSH
38839: LD_INT 6
38841: PUSH
38842: LD_INT 7
38844: PUSH
38845: LD_INT 8
38847: PUSH
38848: LD_INT 13
38850: PUSH
38851: LD_INT 12
38853: PUSH
38854: LD_INT 15
38856: PUSH
38857: LD_INT 11
38859: PUSH
38860: LD_INT 14
38862: PUSH
38863: LD_INT 10
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: IN
38877: IFFALSE 38887
// btype = b_lab ;
38879: LD_ADDR_VAR 0 1
38883: PUSH
38884: LD_INT 6
38886: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38887: LD_VAR 0 6
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: IN
38906: NOT
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: LD_INT 6
38927: PUSH
38928: LD_INT 36
38930: PUSH
38931: LD_INT 4
38933: PUSH
38934: LD_INT 5
38936: PUSH
38937: LD_INT 31
38939: PUSH
38940: LD_INT 32
38942: PUSH
38943: LD_INT 33
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: IN
38959: NOT
38960: PUSH
38961: LD_VAR 0 6
38965: PUSH
38966: LD_INT 1
38968: EQUAL
38969: AND
38970: OR
38971: PUSH
38972: LD_VAR 0 1
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: IN
38987: NOT
38988: PUSH
38989: LD_VAR 0 6
38993: PUSH
38994: LD_INT 2
38996: EQUAL
38997: AND
38998: OR
38999: IFFALSE 39009
// mode = 0 ;
39001: LD_ADDR_VAR 0 6
39005: PUSH
39006: LD_INT 0
39008: ST_TO_ADDR
// case mode of 0 :
39009: LD_VAR 0 6
39013: PUSH
39014: LD_INT 0
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39022
39020: GO 50475
39022: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39023: LD_ADDR_VAR 0 11
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39216: LD_ADDR_VAR 0 12
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 3
39373: NEG
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 3
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39412: LD_ADDR_VAR 0 13
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: LD_INT 3
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 3
39571: NEG
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 3
39583: NEG
39584: PUSH
39585: LD_INT 3
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39611: LD_ADDR_VAR 0 14
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 3
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 3
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39807: LD_ADDR_VAR 0 15
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40000: LD_ADDR_VAR 0 16
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 2
40135: NEG
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 3
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40193: LD_ADDR_VAR 0 17
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40423: LD_ADDR_VAR 0 18
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40653: LD_ADDR_VAR 0 19
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40883: LD_ADDR_VAR 0 20
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41113: LD_ADDR_VAR 0 21
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41343: LD_ADDR_VAR 0 22
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 2
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41573: LD_ADDR_VAR 0 23
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41853: LD_ADDR_VAR 0 24
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42129: LD_ADDR_VAR 0 25
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42403: LD_ADDR_VAR 0 26
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: NEG
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 3
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42679: LD_ADDR_VAR 0 27
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 3
42912: NEG
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42959: LD_ADDR_VAR 0 28
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 3
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 3
43206: NEG
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43241: LD_ADDR_VAR 0 29
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: NEG
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43520: LD_ADDR_VAR 0 30
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 2
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: LD_INT 3
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 3
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43798: LD_ADDR_VAR 0 31
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 3
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 3
44041: NEG
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44076: LD_ADDR_VAR 0 32
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 3
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 3
44319: NEG
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44354: LD_ADDR_VAR 0 33
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 3
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 3
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44633: LD_ADDR_VAR 0 34
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 3
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44913: LD_ADDR_VAR 0 35
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45025: LD_ADDR_VAR 0 36
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45137: LD_ADDR_VAR 0 37
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45249: LD_ADDR_VAR 0 38
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45361: LD_ADDR_VAR 0 39
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45473: LD_ADDR_VAR 0 40
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45585: LD_ADDR_VAR 0 41
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 3
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 3
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 3
45859: NEG
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: NEG
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: LD_INT 3
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45935: LD_ADDR_VAR 0 42
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 3
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 3
46181: PUSH
46182: LD_INT 3
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 3
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 3
46244: NEG
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46285: LD_ADDR_VAR 0 43
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 3
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46633: LD_ADDR_VAR 0 44
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 3
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: NEG
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46983: LD_ADDR_VAR 0 45
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: LD_INT 3
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 3
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47333: LD_ADDR_VAR 0 46
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 3
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47681: LD_ADDR_VAR 0 47
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47832: LD_ADDR_VAR 0 48
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47979: LD_ADDR_VAR 0 49
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48123: LD_ADDR_VAR 0 50
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48267: LD_ADDR_VAR 0 51
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48414: LD_ADDR_VAR 0 52
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48565: LD_ADDR_VAR 0 53
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48795: LD_ADDR_VAR 0 54
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49025: LD_ADDR_VAR 0 55
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49255: LD_ADDR_VAR 0 56
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49485: LD_ADDR_VAR 0 57
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49715: LD_ADDR_VAR 0 58
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49945: LD_ADDR_VAR 0 59
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50033: LD_ADDR_VAR 0 60
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50121: LD_ADDR_VAR 0 61
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50209: LD_ADDR_VAR 0 62
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50297: LD_ADDR_VAR 0 63
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50385: LD_ADDR_VAR 0 64
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: ST_TO_ADDR
// end ; 1 :
50473: GO 56370
50475: LD_INT 1
50477: DOUBLE
50478: EQUAL
50479: IFTRUE 50483
50481: GO 53106
50483: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50484: LD_ADDR_VAR 0 11
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50528: LD_ADDR_VAR 0 12
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50569: LD_ADDR_VAR 0 13
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50609: LD_ADDR_VAR 0 14
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50650: LD_ADDR_VAR 0 15
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50694: LD_ADDR_VAR 0 16
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 3
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: LD_INT 3
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50740: LD_ADDR_VAR 0 17
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50784: LD_ADDR_VAR 0 18
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50825: LD_ADDR_VAR 0 19
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 3
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: LIST
50864: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50865: LD_ADDR_VAR 0 20
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50906: LD_ADDR_VAR 0 21
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50950: LD_ADDR_VAR 0 22
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50996: LD_ADDR_VAR 0 23
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51040: LD_ADDR_VAR 0 24
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 4
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51081: LD_ADDR_VAR 0 25
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 4
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: LD_INT 4
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51121: LD_ADDR_VAR 0 26
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 4
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51162: LD_ADDR_VAR 0 27
51166: PUSH
51167: LD_INT 3
51169: NEG
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51206: LD_ADDR_VAR 0 28
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: NEG
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51252: LD_ADDR_VAR 0 29
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 4
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 4
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 5
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 5
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 4
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 6
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 6
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 5
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51407: LD_ADDR_VAR 0 30
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 4
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 4
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 5
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 5
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 5
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 6
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 6
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51550: LD_ADDR_VAR 0 31
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: LD_INT 4
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 3
51607: PUSH
51608: LD_INT 4
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: LD_INT 4
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 5
51627: PUSH
51628: LD_INT 5
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 4
51637: PUSH
51638: LD_INT 5
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 6
51647: PUSH
51648: LD_INT 5
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 6
51657: PUSH
51658: LD_INT 6
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 5
51667: PUSH
51668: LD_INT 6
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51689: LD_ADDR_VAR 0 32
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 4
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 5
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 5
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 6
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 6
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 5
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51832: LD_ADDR_VAR 0 33
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 4
51884: NEG
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 4
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 5
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 5
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 5
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 6
51952: NEG
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 6
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51987: LD_ADDR_VAR 0 34
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: LD_INT 4
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 4
52042: NEG
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: NEG
52055: PUSH
52056: LD_INT 4
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 4
52066: NEG
52067: PUSH
52068: LD_INT 5
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 5
52078: NEG
52079: PUSH
52080: LD_INT 4
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 5
52090: NEG
52091: PUSH
52092: LD_INT 5
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 5
52102: NEG
52103: PUSH
52104: LD_INT 6
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 6
52114: NEG
52115: PUSH
52116: LD_INT 5
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 6
52126: NEG
52127: PUSH
52128: LD_INT 6
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52150: LD_ADDR_VAR 0 41
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52194: LD_ADDR_VAR 0 42
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 1
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: LIST
52234: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52235: LD_ADDR_VAR 0 43
52239: PUSH
52240: LD_INT 2
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 3
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52275: LD_ADDR_VAR 0 44
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52316: LD_ADDR_VAR 0 45
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52360: LD_ADDR_VAR 0 46
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52406: LD_ADDR_VAR 0 47
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52439: LD_ADDR_VAR 0 48
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52470: LD_ADDR_VAR 0 49
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52499: LD_ADDR_VAR 0 50
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52528: LD_ADDR_VAR 0 51
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52559: LD_ADDR_VAR 0 52
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52592: LD_ADDR_VAR 0 53
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52636: LD_ADDR_VAR 0 54
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52677: LD_ADDR_VAR 0 55
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52717: LD_ADDR_VAR 0 56
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52758: LD_ADDR_VAR 0 57
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52802: LD_ADDR_VAR 0 58
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52848: LD_ADDR_VAR 0 59
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: LIST
52891: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52892: LD_ADDR_VAR 0 60
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52933: LD_ADDR_VAR 0 61
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52973: LD_ADDR_VAR 0 62
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53014: LD_ADDR_VAR 0 63
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53058: LD_ADDR_VAR 0 64
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// end ; 2 :
53104: GO 56370
53106: LD_INT 2
53108: DOUBLE
53109: EQUAL
53110: IFTRUE 53114
53112: GO 56369
53114: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53115: LD_ADDR_VAR 0 29
53119: PUSH
53120: LD_INT 4
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 5
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 5
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 4
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 5
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 4
53235: PUSH
53236: LD_INT 3
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 4
53245: PUSH
53246: LD_INT 4
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: PUSH
53256: LD_INT 4
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 4
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: LD_INT 4
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 4
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 4
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 5
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 5
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 4
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 5
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 4
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 4
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 4
53500: NEG
53501: PUSH
53502: LD_INT 4
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 4
53512: NEG
53513: PUSH
53514: LD_INT 5
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: LD_INT 4
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 4
53548: NEG
53549: PUSH
53550: LD_INT 3
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 5
53560: NEG
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 5
53572: NEG
53573: PUSH
53574: LD_INT 5
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 5
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 5
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53653: LD_ADDR_VAR 0 30
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: LD_INT 4
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 4
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 5
53680: PUSH
53681: LD_INT 4
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 5
53690: PUSH
53691: LD_INT 5
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 5
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 5
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 5
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 4
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 4
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 4
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 4
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: NEG
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 4
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 5
53899: NEG
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 5
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 5
53922: NEG
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: LD_INT 4
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 3
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 4
54005: NEG
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 4
54017: NEG
54018: PUSH
54019: LD_INT 4
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 4
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 4
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 4
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 5
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 4
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 3
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 5
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 5
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54200: LD_ADDR_VAR 0 31
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 4
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 5
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 5
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 4
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 5
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 3
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 4
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 4
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 4
54379: NEG
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: LD_INT 4
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 4
54414: NEG
54415: PUSH
54416: LD_INT 5
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 4
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 5
54462: NEG
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 5
54474: NEG
54475: PUSH
54476: LD_INT 5
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 3
54486: NEG
54487: PUSH
54488: LD_INT 5
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 5
54498: NEG
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 3
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 4
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 4
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 4
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 4
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 4
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 5
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 5
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 4
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 5
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54750: LD_ADDR_VAR 0 32
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 4
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 5
54813: NEG
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 5
54824: NEG
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 5
54836: NEG
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: LD_INT 4
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 4
54919: NEG
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 4
54931: NEG
54932: PUSH
54933: LD_INT 4
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 4
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 4
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 4
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 4
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 5
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 4
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 4
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 4
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 4
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 5
55182: PUSH
55183: LD_INT 4
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 5
55192: PUSH
55193: LD_INT 5
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 4
55202: PUSH
55203: LD_INT 5
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 3
55212: PUSH
55213: LD_INT 4
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: LD_INT 3
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 5
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: LD_INT 5
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55297: LD_ADDR_VAR 0 33
55301: PUSH
55302: LD_INT 4
55304: NEG
55305: PUSH
55306: LD_INT 4
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 4
55316: NEG
55317: PUSH
55318: LD_INT 5
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: NEG
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 4
55352: NEG
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 5
55364: NEG
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 5
55376: NEG
55377: PUSH
55378: LD_INT 5
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: NEG
55389: PUSH
55390: LD_INT 5
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 5
55400: NEG
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 4
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 4
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 4
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 5
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 5
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 4
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 5
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: LD_INT 3
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 4
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: PUSH
55638: LD_INT 4
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: PUSH
55648: LD_INT 4
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 4
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 3
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 4
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 5
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 5
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 5
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55835: LD_ADDR_VAR 0 34
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 4
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 5
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 4
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 5
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 5
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 4
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 4
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 4
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: PUSH
56058: LD_INT 4
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 5
56067: PUSH
56068: LD_INT 5
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: LD_INT 5
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: LD_INT 4
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 5
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 5
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 4
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 4
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: NEG
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 4
56231: NEG
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 5
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 5
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 5
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// end ; end ;
56367: GO 56370
56369: POP
// case btype of b_depot , b_warehouse :
56370: LD_VAR 0 1
56374: PUSH
56375: LD_INT 0
56377: DOUBLE
56378: EQUAL
56379: IFTRUE 56389
56381: LD_INT 1
56383: DOUBLE
56384: EQUAL
56385: IFTRUE 56389
56387: GO 56590
56389: POP
// case nation of nation_american :
56390: LD_VAR 0 5
56394: PUSH
56395: LD_INT 1
56397: DOUBLE
56398: EQUAL
56399: IFTRUE 56403
56401: GO 56459
56403: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56404: LD_ADDR_VAR 0 9
56408: PUSH
56409: LD_VAR 0 11
56413: PUSH
56414: LD_VAR 0 12
56418: PUSH
56419: LD_VAR 0 13
56423: PUSH
56424: LD_VAR 0 14
56428: PUSH
56429: LD_VAR 0 15
56433: PUSH
56434: LD_VAR 0 16
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: PUSH
56447: LD_VAR 0 4
56451: PUSH
56452: LD_INT 1
56454: PLUS
56455: ARRAY
56456: ST_TO_ADDR
56457: GO 56588
56459: LD_INT 2
56461: DOUBLE
56462: EQUAL
56463: IFTRUE 56467
56465: GO 56523
56467: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56468: LD_ADDR_VAR 0 9
56472: PUSH
56473: LD_VAR 0 17
56477: PUSH
56478: LD_VAR 0 18
56482: PUSH
56483: LD_VAR 0 19
56487: PUSH
56488: LD_VAR 0 20
56492: PUSH
56493: LD_VAR 0 21
56497: PUSH
56498: LD_VAR 0 22
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: LD_VAR 0 4
56515: PUSH
56516: LD_INT 1
56518: PLUS
56519: ARRAY
56520: ST_TO_ADDR
56521: GO 56588
56523: LD_INT 3
56525: DOUBLE
56526: EQUAL
56527: IFTRUE 56531
56529: GO 56587
56531: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56532: LD_ADDR_VAR 0 9
56536: PUSH
56537: LD_VAR 0 23
56541: PUSH
56542: LD_VAR 0 24
56546: PUSH
56547: LD_VAR 0 25
56551: PUSH
56552: LD_VAR 0 26
56556: PUSH
56557: LD_VAR 0 27
56561: PUSH
56562: LD_VAR 0 28
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: PUSH
56575: LD_VAR 0 4
56579: PUSH
56580: LD_INT 1
56582: PLUS
56583: ARRAY
56584: ST_TO_ADDR
56585: GO 56588
56587: POP
56588: GO 57143
56590: LD_INT 2
56592: DOUBLE
56593: EQUAL
56594: IFTRUE 56604
56596: LD_INT 3
56598: DOUBLE
56599: EQUAL
56600: IFTRUE 56604
56602: GO 56660
56604: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56605: LD_ADDR_VAR 0 9
56609: PUSH
56610: LD_VAR 0 29
56614: PUSH
56615: LD_VAR 0 30
56619: PUSH
56620: LD_VAR 0 31
56624: PUSH
56625: LD_VAR 0 32
56629: PUSH
56630: LD_VAR 0 33
56634: PUSH
56635: LD_VAR 0 34
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: PUSH
56648: LD_VAR 0 4
56652: PUSH
56653: LD_INT 1
56655: PLUS
56656: ARRAY
56657: ST_TO_ADDR
56658: GO 57143
56660: LD_INT 16
56662: DOUBLE
56663: EQUAL
56664: IFTRUE 56722
56666: LD_INT 17
56668: DOUBLE
56669: EQUAL
56670: IFTRUE 56722
56672: LD_INT 18
56674: DOUBLE
56675: EQUAL
56676: IFTRUE 56722
56678: LD_INT 19
56680: DOUBLE
56681: EQUAL
56682: IFTRUE 56722
56684: LD_INT 22
56686: DOUBLE
56687: EQUAL
56688: IFTRUE 56722
56690: LD_INT 20
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56722
56696: LD_INT 21
56698: DOUBLE
56699: EQUAL
56700: IFTRUE 56722
56702: LD_INT 23
56704: DOUBLE
56705: EQUAL
56706: IFTRUE 56722
56708: LD_INT 24
56710: DOUBLE
56711: EQUAL
56712: IFTRUE 56722
56714: LD_INT 25
56716: DOUBLE
56717: EQUAL
56718: IFTRUE 56722
56720: GO 56778
56722: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56723: LD_ADDR_VAR 0 9
56727: PUSH
56728: LD_VAR 0 35
56732: PUSH
56733: LD_VAR 0 36
56737: PUSH
56738: LD_VAR 0 37
56742: PUSH
56743: LD_VAR 0 38
56747: PUSH
56748: LD_VAR 0 39
56752: PUSH
56753: LD_VAR 0 40
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: PUSH
56766: LD_VAR 0 4
56770: PUSH
56771: LD_INT 1
56773: PLUS
56774: ARRAY
56775: ST_TO_ADDR
56776: GO 57143
56778: LD_INT 6
56780: DOUBLE
56781: EQUAL
56782: IFTRUE 56834
56784: LD_INT 7
56786: DOUBLE
56787: EQUAL
56788: IFTRUE 56834
56790: LD_INT 8
56792: DOUBLE
56793: EQUAL
56794: IFTRUE 56834
56796: LD_INT 13
56798: DOUBLE
56799: EQUAL
56800: IFTRUE 56834
56802: LD_INT 12
56804: DOUBLE
56805: EQUAL
56806: IFTRUE 56834
56808: LD_INT 15
56810: DOUBLE
56811: EQUAL
56812: IFTRUE 56834
56814: LD_INT 11
56816: DOUBLE
56817: EQUAL
56818: IFTRUE 56834
56820: LD_INT 14
56822: DOUBLE
56823: EQUAL
56824: IFTRUE 56834
56826: LD_INT 10
56828: DOUBLE
56829: EQUAL
56830: IFTRUE 56834
56832: GO 56890
56834: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56835: LD_ADDR_VAR 0 9
56839: PUSH
56840: LD_VAR 0 41
56844: PUSH
56845: LD_VAR 0 42
56849: PUSH
56850: LD_VAR 0 43
56854: PUSH
56855: LD_VAR 0 44
56859: PUSH
56860: LD_VAR 0 45
56864: PUSH
56865: LD_VAR 0 46
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: PUSH
56878: LD_VAR 0 4
56882: PUSH
56883: LD_INT 1
56885: PLUS
56886: ARRAY
56887: ST_TO_ADDR
56888: GO 57143
56890: LD_INT 36
56892: DOUBLE
56893: EQUAL
56894: IFTRUE 56898
56896: GO 56954
56898: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56899: LD_ADDR_VAR 0 9
56903: PUSH
56904: LD_VAR 0 47
56908: PUSH
56909: LD_VAR 0 48
56913: PUSH
56914: LD_VAR 0 49
56918: PUSH
56919: LD_VAR 0 50
56923: PUSH
56924: LD_VAR 0 51
56928: PUSH
56929: LD_VAR 0 52
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: PUSH
56942: LD_VAR 0 4
56946: PUSH
56947: LD_INT 1
56949: PLUS
56950: ARRAY
56951: ST_TO_ADDR
56952: GO 57143
56954: LD_INT 4
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 56980
56960: LD_INT 5
56962: DOUBLE
56963: EQUAL
56964: IFTRUE 56980
56966: LD_INT 34
56968: DOUBLE
56969: EQUAL
56970: IFTRUE 56980
56972: LD_INT 37
56974: DOUBLE
56975: EQUAL
56976: IFTRUE 56980
56978: GO 57036
56980: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56981: LD_ADDR_VAR 0 9
56985: PUSH
56986: LD_VAR 0 53
56990: PUSH
56991: LD_VAR 0 54
56995: PUSH
56996: LD_VAR 0 55
57000: PUSH
57001: LD_VAR 0 56
57005: PUSH
57006: LD_VAR 0 57
57010: PUSH
57011: LD_VAR 0 58
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: PUSH
57024: LD_VAR 0 4
57028: PUSH
57029: LD_INT 1
57031: PLUS
57032: ARRAY
57033: ST_TO_ADDR
57034: GO 57143
57036: LD_INT 31
57038: DOUBLE
57039: EQUAL
57040: IFTRUE 57086
57042: LD_INT 32
57044: DOUBLE
57045: EQUAL
57046: IFTRUE 57086
57048: LD_INT 33
57050: DOUBLE
57051: EQUAL
57052: IFTRUE 57086
57054: LD_INT 27
57056: DOUBLE
57057: EQUAL
57058: IFTRUE 57086
57060: LD_INT 26
57062: DOUBLE
57063: EQUAL
57064: IFTRUE 57086
57066: LD_INT 28
57068: DOUBLE
57069: EQUAL
57070: IFTRUE 57086
57072: LD_INT 29
57074: DOUBLE
57075: EQUAL
57076: IFTRUE 57086
57078: LD_INT 30
57080: DOUBLE
57081: EQUAL
57082: IFTRUE 57086
57084: GO 57142
57086: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57087: LD_ADDR_VAR 0 9
57091: PUSH
57092: LD_VAR 0 59
57096: PUSH
57097: LD_VAR 0 60
57101: PUSH
57102: LD_VAR 0 61
57106: PUSH
57107: LD_VAR 0 62
57111: PUSH
57112: LD_VAR 0 63
57116: PUSH
57117: LD_VAR 0 64
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: PUSH
57130: LD_VAR 0 4
57134: PUSH
57135: LD_INT 1
57137: PLUS
57138: ARRAY
57139: ST_TO_ADDR
57140: GO 57143
57142: POP
// temp_list2 = [ ] ;
57143: LD_ADDR_VAR 0 10
57147: PUSH
57148: EMPTY
57149: ST_TO_ADDR
// for i in temp_list do
57150: LD_ADDR_VAR 0 8
57154: PUSH
57155: LD_VAR 0 9
57159: PUSH
57160: FOR_IN
57161: IFFALSE 57213
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57163: LD_ADDR_VAR 0 10
57167: PUSH
57168: LD_VAR 0 10
57172: PUSH
57173: LD_VAR 0 8
57177: PUSH
57178: LD_INT 1
57180: ARRAY
57181: PUSH
57182: LD_VAR 0 2
57186: PLUS
57187: PUSH
57188: LD_VAR 0 8
57192: PUSH
57193: LD_INT 2
57195: ARRAY
57196: PUSH
57197: LD_VAR 0 3
57201: PLUS
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: ADD
57210: ST_TO_ADDR
57211: GO 57160
57213: POP
57214: POP
// result = temp_list2 ;
57215: LD_ADDR_VAR 0 7
57219: PUSH
57220: LD_VAR 0 10
57224: ST_TO_ADDR
// end ;
57225: LD_VAR 0 7
57229: RET
// export function EnemyInRange ( unit , dist ) ; begin
57230: LD_INT 0
57232: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57233: LD_ADDR_VAR 0 3
57237: PUSH
57238: LD_VAR 0 1
57242: PPUSH
57243: CALL_OW 255
57247: PPUSH
57248: LD_VAR 0 1
57252: PPUSH
57253: CALL_OW 250
57257: PPUSH
57258: LD_VAR 0 1
57262: PPUSH
57263: CALL_OW 251
57267: PPUSH
57268: LD_VAR 0 2
57272: PPUSH
57273: CALL 30632 0 4
57277: PUSH
57278: LD_INT 4
57280: ARRAY
57281: ST_TO_ADDR
// end ;
57282: LD_VAR 0 3
57286: RET
// export function PlayerSeeMe ( unit ) ; begin
57287: LD_INT 0
57289: PPUSH
// result := See ( your_side , unit ) ;
57290: LD_ADDR_VAR 0 2
57294: PUSH
57295: LD_OWVAR 2
57299: PPUSH
57300: LD_VAR 0 1
57304: PPUSH
57305: CALL_OW 292
57309: ST_TO_ADDR
// end ;
57310: LD_VAR 0 2
57314: RET
// export function ReverseDir ( unit ) ; begin
57315: LD_INT 0
57317: PPUSH
// if not unit then
57318: LD_VAR 0 1
57322: NOT
57323: IFFALSE 57327
// exit ;
57325: GO 57350
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57327: LD_ADDR_VAR 0 2
57331: PUSH
57332: LD_VAR 0 1
57336: PPUSH
57337: CALL_OW 254
57341: PUSH
57342: LD_INT 3
57344: PLUS
57345: PUSH
57346: LD_INT 6
57348: MOD
57349: ST_TO_ADDR
// end ;
57350: LD_VAR 0 2
57354: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57355: LD_INT 0
57357: PPUSH
57358: PPUSH
57359: PPUSH
57360: PPUSH
57361: PPUSH
57362: PPUSH
// if not unit or not hexes then
57363: LD_VAR 0 1
57367: NOT
57368: PUSH
57369: LD_VAR 0 2
57373: NOT
57374: OR
57375: IFFALSE 57379
// exit ;
57377: GO 57502
// dist := 9999 ;
57379: LD_ADDR_VAR 0 5
57383: PUSH
57384: LD_INT 9999
57386: ST_TO_ADDR
// for i = 1 to hexes do
57387: LD_ADDR_VAR 0 4
57391: PUSH
57392: DOUBLE
57393: LD_INT 1
57395: DEC
57396: ST_TO_ADDR
57397: LD_VAR 0 2
57401: PUSH
57402: FOR_TO
57403: IFFALSE 57490
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57405: LD_ADDR_VAR 0 6
57409: PUSH
57410: LD_VAR 0 1
57414: PPUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_VAR 0 4
57424: ARRAY
57425: PUSH
57426: LD_INT 1
57428: ARRAY
57429: PPUSH
57430: LD_VAR 0 2
57434: PUSH
57435: LD_VAR 0 4
57439: ARRAY
57440: PUSH
57441: LD_INT 2
57443: ARRAY
57444: PPUSH
57445: CALL_OW 297
57449: ST_TO_ADDR
// if tdist < dist then
57450: LD_VAR 0 6
57454: PUSH
57455: LD_VAR 0 5
57459: LESS
57460: IFFALSE 57488
// begin hex := hexes [ i ] ;
57462: LD_ADDR_VAR 0 8
57466: PUSH
57467: LD_VAR 0 2
57471: PUSH
57472: LD_VAR 0 4
57476: ARRAY
57477: ST_TO_ADDR
// dist := tdist ;
57478: LD_ADDR_VAR 0 5
57482: PUSH
57483: LD_VAR 0 6
57487: ST_TO_ADDR
// end ; end ;
57488: GO 57402
57490: POP
57491: POP
// result := hex ;
57492: LD_ADDR_VAR 0 3
57496: PUSH
57497: LD_VAR 0 8
57501: ST_TO_ADDR
// end ;
57502: LD_VAR 0 3
57506: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57507: LD_INT 0
57509: PPUSH
57510: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57511: LD_VAR 0 1
57515: NOT
57516: PUSH
57517: LD_VAR 0 1
57521: PUSH
57522: LD_INT 21
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 23
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PPUSH
57546: CALL_OW 69
57550: IN
57551: NOT
57552: OR
57553: IFFALSE 57557
// exit ;
57555: GO 57604
// for i = 1 to 3 do
57557: LD_ADDR_VAR 0 3
57561: PUSH
57562: DOUBLE
57563: LD_INT 1
57565: DEC
57566: ST_TO_ADDR
57567: LD_INT 3
57569: PUSH
57570: FOR_TO
57571: IFFALSE 57602
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57573: LD_VAR 0 1
57577: PPUSH
57578: CALL_OW 250
57582: PPUSH
57583: LD_VAR 0 1
57587: PPUSH
57588: CALL_OW 251
57592: PPUSH
57593: LD_INT 1
57595: PPUSH
57596: CALL_OW 453
57600: GO 57570
57602: POP
57603: POP
// end ;
57604: LD_VAR 0 2
57608: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57609: LD_INT 0
57611: PPUSH
57612: PPUSH
57613: PPUSH
57614: PPUSH
57615: PPUSH
57616: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57617: LD_VAR 0 1
57621: NOT
57622: PUSH
57623: LD_VAR 0 2
57627: NOT
57628: OR
57629: PUSH
57630: LD_VAR 0 1
57634: PPUSH
57635: CALL_OW 314
57639: OR
57640: IFFALSE 57644
// exit ;
57642: GO 58085
// x := GetX ( enemy_unit ) ;
57644: LD_ADDR_VAR 0 7
57648: PUSH
57649: LD_VAR 0 2
57653: PPUSH
57654: CALL_OW 250
57658: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57659: LD_ADDR_VAR 0 8
57663: PUSH
57664: LD_VAR 0 2
57668: PPUSH
57669: CALL_OW 251
57673: ST_TO_ADDR
// if not x or not y then
57674: LD_VAR 0 7
57678: NOT
57679: PUSH
57680: LD_VAR 0 8
57684: NOT
57685: OR
57686: IFFALSE 57690
// exit ;
57688: GO 58085
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57690: LD_ADDR_VAR 0 6
57694: PUSH
57695: LD_VAR 0 7
57699: PPUSH
57700: LD_INT 0
57702: PPUSH
57703: LD_INT 4
57705: PPUSH
57706: CALL_OW 272
57710: PUSH
57711: LD_VAR 0 8
57715: PPUSH
57716: LD_INT 0
57718: PPUSH
57719: LD_INT 4
57721: PPUSH
57722: CALL_OW 273
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_VAR 0 7
57735: PPUSH
57736: LD_INT 1
57738: PPUSH
57739: LD_INT 4
57741: PPUSH
57742: CALL_OW 272
57746: PUSH
57747: LD_VAR 0 8
57751: PPUSH
57752: LD_INT 1
57754: PPUSH
57755: LD_INT 4
57757: PPUSH
57758: CALL_OW 273
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_VAR 0 7
57771: PPUSH
57772: LD_INT 2
57774: PPUSH
57775: LD_INT 4
57777: PPUSH
57778: CALL_OW 272
57782: PUSH
57783: LD_VAR 0 8
57787: PPUSH
57788: LD_INT 2
57790: PPUSH
57791: LD_INT 4
57793: PPUSH
57794: CALL_OW 273
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_VAR 0 7
57807: PPUSH
57808: LD_INT 3
57810: PPUSH
57811: LD_INT 4
57813: PPUSH
57814: CALL_OW 272
57818: PUSH
57819: LD_VAR 0 8
57823: PPUSH
57824: LD_INT 3
57826: PPUSH
57827: LD_INT 4
57829: PPUSH
57830: CALL_OW 273
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_VAR 0 7
57843: PPUSH
57844: LD_INT 4
57846: PPUSH
57847: LD_INT 4
57849: PPUSH
57850: CALL_OW 272
57854: PUSH
57855: LD_VAR 0 8
57859: PPUSH
57860: LD_INT 4
57862: PPUSH
57863: LD_INT 4
57865: PPUSH
57866: CALL_OW 273
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_VAR 0 7
57879: PPUSH
57880: LD_INT 5
57882: PPUSH
57883: LD_INT 4
57885: PPUSH
57886: CALL_OW 272
57890: PUSH
57891: LD_VAR 0 8
57895: PPUSH
57896: LD_INT 5
57898: PPUSH
57899: LD_INT 4
57901: PPUSH
57902: CALL_OW 273
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: ST_TO_ADDR
// for i = tmp downto 1 do
57919: LD_ADDR_VAR 0 4
57923: PUSH
57924: DOUBLE
57925: LD_VAR 0 6
57929: INC
57930: ST_TO_ADDR
57931: LD_INT 1
57933: PUSH
57934: FOR_DOWNTO
57935: IFFALSE 58036
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57937: LD_VAR 0 6
57941: PUSH
57942: LD_VAR 0 4
57946: ARRAY
57947: PUSH
57948: LD_INT 1
57950: ARRAY
57951: PPUSH
57952: LD_VAR 0 6
57956: PUSH
57957: LD_VAR 0 4
57961: ARRAY
57962: PUSH
57963: LD_INT 2
57965: ARRAY
57966: PPUSH
57967: CALL_OW 488
57971: NOT
57972: PUSH
57973: LD_VAR 0 6
57977: PUSH
57978: LD_VAR 0 4
57982: ARRAY
57983: PUSH
57984: LD_INT 1
57986: ARRAY
57987: PPUSH
57988: LD_VAR 0 6
57992: PUSH
57993: LD_VAR 0 4
57997: ARRAY
57998: PUSH
57999: LD_INT 2
58001: ARRAY
58002: PPUSH
58003: CALL_OW 428
58007: PUSH
58008: LD_INT 0
58010: NONEQUAL
58011: OR
58012: IFFALSE 58034
// tmp := Delete ( tmp , i ) ;
58014: LD_ADDR_VAR 0 6
58018: PUSH
58019: LD_VAR 0 6
58023: PPUSH
58024: LD_VAR 0 4
58028: PPUSH
58029: CALL_OW 3
58033: ST_TO_ADDR
58034: GO 57934
58036: POP
58037: POP
// j := GetClosestHex ( unit , tmp ) ;
58038: LD_ADDR_VAR 0 5
58042: PUSH
58043: LD_VAR 0 1
58047: PPUSH
58048: LD_VAR 0 6
58052: PPUSH
58053: CALL 57355 0 2
58057: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58058: LD_VAR 0 1
58062: PPUSH
58063: LD_VAR 0 5
58067: PUSH
58068: LD_INT 1
58070: ARRAY
58071: PPUSH
58072: LD_VAR 0 5
58076: PUSH
58077: LD_INT 2
58079: ARRAY
58080: PPUSH
58081: CALL_OW 111
// end ;
58085: LD_VAR 0 3
58089: RET
// export function PrepareApemanSoldier ( ) ; begin
58090: LD_INT 0
58092: PPUSH
// uc_nation := 0 ;
58093: LD_ADDR_OWVAR 21
58097: PUSH
58098: LD_INT 0
58100: ST_TO_ADDR
// hc_sex := sex_male ;
58101: LD_ADDR_OWVAR 27
58105: PUSH
58106: LD_INT 1
58108: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58109: LD_ADDR_OWVAR 28
58113: PUSH
58114: LD_INT 15
58116: ST_TO_ADDR
// hc_gallery :=  ;
58117: LD_ADDR_OWVAR 33
58121: PUSH
58122: LD_STRING 
58124: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58125: LD_ADDR_OWVAR 31
58129: PUSH
58130: LD_INT 0
58132: PPUSH
58133: LD_INT 3
58135: PPUSH
58136: CALL_OW 12
58140: PUSH
58141: LD_INT 0
58143: PPUSH
58144: LD_INT 3
58146: PPUSH
58147: CALL_OW 12
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// end ;
58164: LD_VAR 0 1
58168: RET
// export function PrepareApemanEngineer ( ) ; begin
58169: LD_INT 0
58171: PPUSH
// uc_nation := 0 ;
58172: LD_ADDR_OWVAR 21
58176: PUSH
58177: LD_INT 0
58179: ST_TO_ADDR
// hc_sex := sex_male ;
58180: LD_ADDR_OWVAR 27
58184: PUSH
58185: LD_INT 1
58187: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58188: LD_ADDR_OWVAR 28
58192: PUSH
58193: LD_INT 16
58195: ST_TO_ADDR
// hc_gallery :=  ;
58196: LD_ADDR_OWVAR 33
58200: PUSH
58201: LD_STRING 
58203: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58204: LD_ADDR_OWVAR 31
58208: PUSH
58209: LD_INT 0
58211: PPUSH
58212: LD_INT 3
58214: PPUSH
58215: CALL_OW 12
58219: PUSH
58220: LD_INT 0
58222: PPUSH
58223: LD_INT 3
58225: PPUSH
58226: CALL_OW 12
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// end ;
58243: LD_VAR 0 1
58247: RET
// export function PrepareApeman ( agressivity ) ; begin
58248: LD_INT 0
58250: PPUSH
// uc_side := 0 ;
58251: LD_ADDR_OWVAR 20
58255: PUSH
58256: LD_INT 0
58258: ST_TO_ADDR
// uc_nation := 0 ;
58259: LD_ADDR_OWVAR 21
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// hc_sex := sex_male ;
58267: LD_ADDR_OWVAR 27
58271: PUSH
58272: LD_INT 1
58274: ST_TO_ADDR
// hc_class := class_apeman ;
58275: LD_ADDR_OWVAR 28
58279: PUSH
58280: LD_INT 12
58282: ST_TO_ADDR
// hc_gallery :=  ;
58283: LD_ADDR_OWVAR 33
58287: PUSH
58288: LD_STRING 
58290: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58291: LD_ADDR_OWVAR 35
58295: PUSH
58296: LD_VAR 0 1
58300: NEG
58301: PPUSH
58302: LD_VAR 0 1
58306: PPUSH
58307: CALL_OW 12
58311: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58312: LD_ADDR_OWVAR 31
58316: PUSH
58317: LD_INT 0
58319: PPUSH
58320: LD_INT 3
58322: PPUSH
58323: CALL_OW 12
58327: PUSH
58328: LD_INT 0
58330: PPUSH
58331: LD_INT 3
58333: PPUSH
58334: CALL_OW 12
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// end ;
58351: LD_VAR 0 2
58355: RET
// export function PrepareTiger ( agressivity ) ; begin
58356: LD_INT 0
58358: PPUSH
// uc_side := 0 ;
58359: LD_ADDR_OWVAR 20
58363: PUSH
58364: LD_INT 0
58366: ST_TO_ADDR
// uc_nation := 0 ;
58367: LD_ADDR_OWVAR 21
58371: PUSH
58372: LD_INT 0
58374: ST_TO_ADDR
// hc_class := class_tiger ;
58375: LD_ADDR_OWVAR 28
58379: PUSH
58380: LD_INT 14
58382: ST_TO_ADDR
// hc_gallery :=  ;
58383: LD_ADDR_OWVAR 33
58387: PUSH
58388: LD_STRING 
58390: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58391: LD_ADDR_OWVAR 35
58395: PUSH
58396: LD_VAR 0 1
58400: NEG
58401: PPUSH
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL_OW 12
58411: ST_TO_ADDR
// end ;
58412: LD_VAR 0 2
58416: RET
// export function PrepareEnchidna ( ) ; begin
58417: LD_INT 0
58419: PPUSH
// uc_side := 0 ;
58420: LD_ADDR_OWVAR 20
58424: PUSH
58425: LD_INT 0
58427: ST_TO_ADDR
// uc_nation := 0 ;
58428: LD_ADDR_OWVAR 21
58432: PUSH
58433: LD_INT 0
58435: ST_TO_ADDR
// hc_class := class_baggie ;
58436: LD_ADDR_OWVAR 28
58440: PUSH
58441: LD_INT 13
58443: ST_TO_ADDR
// hc_gallery :=  ;
58444: LD_ADDR_OWVAR 33
58448: PUSH
58449: LD_STRING 
58451: ST_TO_ADDR
// end ;
58452: LD_VAR 0 1
58456: RET
// export function PrepareFrog ( ) ; begin
58457: LD_INT 0
58459: PPUSH
// uc_side := 0 ;
58460: LD_ADDR_OWVAR 20
58464: PUSH
58465: LD_INT 0
58467: ST_TO_ADDR
// uc_nation := 0 ;
58468: LD_ADDR_OWVAR 21
58472: PUSH
58473: LD_INT 0
58475: ST_TO_ADDR
// hc_class := class_frog ;
58476: LD_ADDR_OWVAR 28
58480: PUSH
58481: LD_INT 19
58483: ST_TO_ADDR
// hc_gallery :=  ;
58484: LD_ADDR_OWVAR 33
58488: PUSH
58489: LD_STRING 
58491: ST_TO_ADDR
// end ;
58492: LD_VAR 0 1
58496: RET
// export function PrepareFish ( ) ; begin
58497: LD_INT 0
58499: PPUSH
// uc_side := 0 ;
58500: LD_ADDR_OWVAR 20
58504: PUSH
58505: LD_INT 0
58507: ST_TO_ADDR
// uc_nation := 0 ;
58508: LD_ADDR_OWVAR 21
58512: PUSH
58513: LD_INT 0
58515: ST_TO_ADDR
// hc_class := class_fish ;
58516: LD_ADDR_OWVAR 28
58520: PUSH
58521: LD_INT 20
58523: ST_TO_ADDR
// hc_gallery :=  ;
58524: LD_ADDR_OWVAR 33
58528: PUSH
58529: LD_STRING 
58531: ST_TO_ADDR
// end ;
58532: LD_VAR 0 1
58536: RET
// export function PrepareBird ( ) ; begin
58537: LD_INT 0
58539: PPUSH
// uc_side := 0 ;
58540: LD_ADDR_OWVAR 20
58544: PUSH
58545: LD_INT 0
58547: ST_TO_ADDR
// uc_nation := 0 ;
58548: LD_ADDR_OWVAR 21
58552: PUSH
58553: LD_INT 0
58555: ST_TO_ADDR
// hc_class := class_phororhacos ;
58556: LD_ADDR_OWVAR 28
58560: PUSH
58561: LD_INT 18
58563: ST_TO_ADDR
// hc_gallery :=  ;
58564: LD_ADDR_OWVAR 33
58568: PUSH
58569: LD_STRING 
58571: ST_TO_ADDR
// end ;
58572: LD_VAR 0 1
58576: RET
// export function PrepareHorse ( ) ; begin
58577: LD_INT 0
58579: PPUSH
// uc_side := 0 ;
58580: LD_ADDR_OWVAR 20
58584: PUSH
58585: LD_INT 0
58587: ST_TO_ADDR
// uc_nation := 0 ;
58588: LD_ADDR_OWVAR 21
58592: PUSH
58593: LD_INT 0
58595: ST_TO_ADDR
// hc_class := class_horse ;
58596: LD_ADDR_OWVAR 28
58600: PUSH
58601: LD_INT 21
58603: ST_TO_ADDR
// hc_gallery :=  ;
58604: LD_ADDR_OWVAR 33
58608: PUSH
58609: LD_STRING 
58611: ST_TO_ADDR
// end ;
58612: LD_VAR 0 1
58616: RET
// export function PrepareMastodont ( ) ; begin
58617: LD_INT 0
58619: PPUSH
// uc_side := 0 ;
58620: LD_ADDR_OWVAR 20
58624: PUSH
58625: LD_INT 0
58627: ST_TO_ADDR
// uc_nation := 0 ;
58628: LD_ADDR_OWVAR 21
58632: PUSH
58633: LD_INT 0
58635: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58636: LD_ADDR_OWVAR 37
58640: PUSH
58641: LD_INT 31
58643: ST_TO_ADDR
// vc_control := control_rider ;
58644: LD_ADDR_OWVAR 38
58648: PUSH
58649: LD_INT 4
58651: ST_TO_ADDR
// end ;
58652: LD_VAR 0 1
58656: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58657: LD_INT 0
58659: PPUSH
58660: PPUSH
58661: PPUSH
// uc_side = 0 ;
58662: LD_ADDR_OWVAR 20
58666: PUSH
58667: LD_INT 0
58669: ST_TO_ADDR
// uc_nation = 0 ;
58670: LD_ADDR_OWVAR 21
58674: PUSH
58675: LD_INT 0
58677: ST_TO_ADDR
// InitHc_All ( ) ;
58678: CALL_OW 584
// InitVc ;
58682: CALL_OW 20
// if mastodonts then
58686: LD_VAR 0 6
58690: IFFALSE 58757
// for i = 1 to mastodonts do
58692: LD_ADDR_VAR 0 11
58696: PUSH
58697: DOUBLE
58698: LD_INT 1
58700: DEC
58701: ST_TO_ADDR
58702: LD_VAR 0 6
58706: PUSH
58707: FOR_TO
58708: IFFALSE 58755
// begin vc_chassis := 31 ;
58710: LD_ADDR_OWVAR 37
58714: PUSH
58715: LD_INT 31
58717: ST_TO_ADDR
// vc_control := control_rider ;
58718: LD_ADDR_OWVAR 38
58722: PUSH
58723: LD_INT 4
58725: ST_TO_ADDR
// animal := CreateVehicle ;
58726: LD_ADDR_VAR 0 12
58730: PUSH
58731: CALL_OW 45
58735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58736: LD_VAR 0 12
58740: PPUSH
58741: LD_VAR 0 8
58745: PPUSH
58746: LD_INT 0
58748: PPUSH
58749: CALL 60892 0 3
// end ;
58753: GO 58707
58755: POP
58756: POP
// if horses then
58757: LD_VAR 0 5
58761: IFFALSE 58828
// for i = 1 to horses do
58763: LD_ADDR_VAR 0 11
58767: PUSH
58768: DOUBLE
58769: LD_INT 1
58771: DEC
58772: ST_TO_ADDR
58773: LD_VAR 0 5
58777: PUSH
58778: FOR_TO
58779: IFFALSE 58826
// begin hc_class := 21 ;
58781: LD_ADDR_OWVAR 28
58785: PUSH
58786: LD_INT 21
58788: ST_TO_ADDR
// hc_gallery :=  ;
58789: LD_ADDR_OWVAR 33
58793: PUSH
58794: LD_STRING 
58796: ST_TO_ADDR
// animal := CreateHuman ;
58797: LD_ADDR_VAR 0 12
58801: PUSH
58802: CALL_OW 44
58806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58807: LD_VAR 0 12
58811: PPUSH
58812: LD_VAR 0 8
58816: PPUSH
58817: LD_INT 0
58819: PPUSH
58820: CALL 60892 0 3
// end ;
58824: GO 58778
58826: POP
58827: POP
// if birds then
58828: LD_VAR 0 1
58832: IFFALSE 58899
// for i = 1 to birds do
58834: LD_ADDR_VAR 0 11
58838: PUSH
58839: DOUBLE
58840: LD_INT 1
58842: DEC
58843: ST_TO_ADDR
58844: LD_VAR 0 1
58848: PUSH
58849: FOR_TO
58850: IFFALSE 58897
// begin hc_class = 18 ;
58852: LD_ADDR_OWVAR 28
58856: PUSH
58857: LD_INT 18
58859: ST_TO_ADDR
// hc_gallery =  ;
58860: LD_ADDR_OWVAR 33
58864: PUSH
58865: LD_STRING 
58867: ST_TO_ADDR
// animal := CreateHuman ;
58868: LD_ADDR_VAR 0 12
58872: PUSH
58873: CALL_OW 44
58877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58878: LD_VAR 0 12
58882: PPUSH
58883: LD_VAR 0 8
58887: PPUSH
58888: LD_INT 0
58890: PPUSH
58891: CALL 60892 0 3
// end ;
58895: GO 58849
58897: POP
58898: POP
// if tigers then
58899: LD_VAR 0 2
58903: IFFALSE 58987
// for i = 1 to tigers do
58905: LD_ADDR_VAR 0 11
58909: PUSH
58910: DOUBLE
58911: LD_INT 1
58913: DEC
58914: ST_TO_ADDR
58915: LD_VAR 0 2
58919: PUSH
58920: FOR_TO
58921: IFFALSE 58985
// begin hc_class = class_tiger ;
58923: LD_ADDR_OWVAR 28
58927: PUSH
58928: LD_INT 14
58930: ST_TO_ADDR
// hc_gallery =  ;
58931: LD_ADDR_OWVAR 33
58935: PUSH
58936: LD_STRING 
58938: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58939: LD_ADDR_OWVAR 35
58943: PUSH
58944: LD_INT 7
58946: NEG
58947: PPUSH
58948: LD_INT 7
58950: PPUSH
58951: CALL_OW 12
58955: ST_TO_ADDR
// animal := CreateHuman ;
58956: LD_ADDR_VAR 0 12
58960: PUSH
58961: CALL_OW 44
58965: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58966: LD_VAR 0 12
58970: PPUSH
58971: LD_VAR 0 8
58975: PPUSH
58976: LD_INT 0
58978: PPUSH
58979: CALL 60892 0 3
// end ;
58983: GO 58920
58985: POP
58986: POP
// if apemans then
58987: LD_VAR 0 3
58991: IFFALSE 59114
// for i = 1 to apemans do
58993: LD_ADDR_VAR 0 11
58997: PUSH
58998: DOUBLE
58999: LD_INT 1
59001: DEC
59002: ST_TO_ADDR
59003: LD_VAR 0 3
59007: PUSH
59008: FOR_TO
59009: IFFALSE 59112
// begin hc_class = class_apeman ;
59011: LD_ADDR_OWVAR 28
59015: PUSH
59016: LD_INT 12
59018: ST_TO_ADDR
// hc_gallery =  ;
59019: LD_ADDR_OWVAR 33
59023: PUSH
59024: LD_STRING 
59026: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59027: LD_ADDR_OWVAR 35
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PPUSH
59036: LD_INT 2
59038: PPUSH
59039: CALL_OW 12
59043: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59044: LD_ADDR_OWVAR 31
59048: PUSH
59049: LD_INT 1
59051: PPUSH
59052: LD_INT 3
59054: PPUSH
59055: CALL_OW 12
59059: PUSH
59060: LD_INT 1
59062: PPUSH
59063: LD_INT 3
59065: PPUSH
59066: CALL_OW 12
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: ST_TO_ADDR
// animal := CreateHuman ;
59083: LD_ADDR_VAR 0 12
59087: PUSH
59088: CALL_OW 44
59092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59093: LD_VAR 0 12
59097: PPUSH
59098: LD_VAR 0 8
59102: PPUSH
59103: LD_INT 0
59105: PPUSH
59106: CALL 60892 0 3
// end ;
59110: GO 59008
59112: POP
59113: POP
// if enchidnas then
59114: LD_VAR 0 4
59118: IFFALSE 59185
// for i = 1 to enchidnas do
59120: LD_ADDR_VAR 0 11
59124: PUSH
59125: DOUBLE
59126: LD_INT 1
59128: DEC
59129: ST_TO_ADDR
59130: LD_VAR 0 4
59134: PUSH
59135: FOR_TO
59136: IFFALSE 59183
// begin hc_class = 13 ;
59138: LD_ADDR_OWVAR 28
59142: PUSH
59143: LD_INT 13
59145: ST_TO_ADDR
// hc_gallery =  ;
59146: LD_ADDR_OWVAR 33
59150: PUSH
59151: LD_STRING 
59153: ST_TO_ADDR
// animal := CreateHuman ;
59154: LD_ADDR_VAR 0 12
59158: PUSH
59159: CALL_OW 44
59163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59164: LD_VAR 0 12
59168: PPUSH
59169: LD_VAR 0 8
59173: PPUSH
59174: LD_INT 0
59176: PPUSH
59177: CALL 60892 0 3
// end ;
59181: GO 59135
59183: POP
59184: POP
// if fishes then
59185: LD_VAR 0 7
59189: IFFALSE 59256
// for i = 1 to fishes do
59191: LD_ADDR_VAR 0 11
59195: PUSH
59196: DOUBLE
59197: LD_INT 1
59199: DEC
59200: ST_TO_ADDR
59201: LD_VAR 0 7
59205: PUSH
59206: FOR_TO
59207: IFFALSE 59254
// begin hc_class = 20 ;
59209: LD_ADDR_OWVAR 28
59213: PUSH
59214: LD_INT 20
59216: ST_TO_ADDR
// hc_gallery =  ;
59217: LD_ADDR_OWVAR 33
59221: PUSH
59222: LD_STRING 
59224: ST_TO_ADDR
// animal := CreateHuman ;
59225: LD_ADDR_VAR 0 12
59229: PUSH
59230: CALL_OW 44
59234: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59235: LD_VAR 0 12
59239: PPUSH
59240: LD_VAR 0 9
59244: PPUSH
59245: LD_INT 0
59247: PPUSH
59248: CALL 60892 0 3
// end ;
59252: GO 59206
59254: POP
59255: POP
// end ;
59256: LD_VAR 0 10
59260: RET
// export function WantHeal ( sci , unit ) ; begin
59261: LD_INT 0
59263: PPUSH
// if GetTaskList ( sci ) > 0 then
59264: LD_VAR 0 1
59268: PPUSH
59269: CALL_OW 437
59273: PUSH
59274: LD_INT 0
59276: GREATER
59277: IFFALSE 59347
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59279: LD_VAR 0 1
59283: PPUSH
59284: CALL_OW 437
59288: PUSH
59289: LD_INT 1
59291: ARRAY
59292: PUSH
59293: LD_INT 1
59295: ARRAY
59296: PUSH
59297: LD_STRING l
59299: EQUAL
59300: PUSH
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 437
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PUSH
59315: LD_INT 4
59317: ARRAY
59318: PUSH
59319: LD_VAR 0 2
59323: EQUAL
59324: AND
59325: IFFALSE 59337
// result := true else
59327: LD_ADDR_VAR 0 3
59331: PUSH
59332: LD_INT 1
59334: ST_TO_ADDR
59335: GO 59345
// result := false ;
59337: LD_ADDR_VAR 0 3
59341: PUSH
59342: LD_INT 0
59344: ST_TO_ADDR
// end else
59345: GO 59355
// result := false ;
59347: LD_ADDR_VAR 0 3
59351: PUSH
59352: LD_INT 0
59354: ST_TO_ADDR
// end ;
59355: LD_VAR 0 3
59359: RET
// export function HealTarget ( sci ) ; begin
59360: LD_INT 0
59362: PPUSH
// if not sci then
59363: LD_VAR 0 1
59367: NOT
59368: IFFALSE 59372
// exit ;
59370: GO 59437
// result := 0 ;
59372: LD_ADDR_VAR 0 2
59376: PUSH
59377: LD_INT 0
59379: ST_TO_ADDR
// if GetTaskList ( sci ) then
59380: LD_VAR 0 1
59384: PPUSH
59385: CALL_OW 437
59389: IFFALSE 59437
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 437
59400: PUSH
59401: LD_INT 1
59403: ARRAY
59404: PUSH
59405: LD_INT 1
59407: ARRAY
59408: PUSH
59409: LD_STRING l
59411: EQUAL
59412: IFFALSE 59437
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59414: LD_ADDR_VAR 0 2
59418: PUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 437
59428: PUSH
59429: LD_INT 1
59431: ARRAY
59432: PUSH
59433: LD_INT 4
59435: ARRAY
59436: ST_TO_ADDR
// end ;
59437: LD_VAR 0 2
59441: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59442: LD_INT 0
59444: PPUSH
59445: PPUSH
59446: PPUSH
59447: PPUSH
// if not base_units then
59448: LD_VAR 0 1
59452: NOT
59453: IFFALSE 59457
// exit ;
59455: GO 59544
// result := false ;
59457: LD_ADDR_VAR 0 2
59461: PUSH
59462: LD_INT 0
59464: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59465: LD_ADDR_VAR 0 5
59469: PUSH
59470: LD_VAR 0 1
59474: PPUSH
59475: LD_INT 21
59477: PUSH
59478: LD_INT 3
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PPUSH
59485: CALL_OW 72
59489: ST_TO_ADDR
// if not tmp then
59490: LD_VAR 0 5
59494: NOT
59495: IFFALSE 59499
// exit ;
59497: GO 59544
// for i in tmp do
59499: LD_ADDR_VAR 0 3
59503: PUSH
59504: LD_VAR 0 5
59508: PUSH
59509: FOR_IN
59510: IFFALSE 59542
// begin result := EnemyInRange ( i , 22 ) ;
59512: LD_ADDR_VAR 0 2
59516: PUSH
59517: LD_VAR 0 3
59521: PPUSH
59522: LD_INT 22
59524: PPUSH
59525: CALL 57230 0 2
59529: ST_TO_ADDR
// if result then
59530: LD_VAR 0 2
59534: IFFALSE 59540
// exit ;
59536: POP
59537: POP
59538: GO 59544
// end ;
59540: GO 59509
59542: POP
59543: POP
// end ;
59544: LD_VAR 0 2
59548: RET
// export function FilterByTag ( units , tag ) ; begin
59549: LD_INT 0
59551: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_VAR 0 1
59561: PPUSH
59562: LD_INT 120
59564: PUSH
59565: LD_VAR 0 2
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PPUSH
59574: CALL_OW 72
59578: ST_TO_ADDR
// end ;
59579: LD_VAR 0 3
59583: RET
// export function IsDriver ( un ) ; begin
59584: LD_INT 0
59586: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59587: LD_ADDR_VAR 0 2
59591: PUSH
59592: LD_VAR 0 1
59596: PUSH
59597: LD_INT 55
59599: PUSH
59600: EMPTY
59601: LIST
59602: PPUSH
59603: CALL_OW 69
59607: IN
59608: ST_TO_ADDR
// end ;
59609: LD_VAR 0 2
59613: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59614: LD_INT 0
59616: PPUSH
59617: PPUSH
// list := [ ] ;
59618: LD_ADDR_VAR 0 5
59622: PUSH
59623: EMPTY
59624: ST_TO_ADDR
// case d of 0 :
59625: LD_VAR 0 3
59629: PUSH
59630: LD_INT 0
59632: DOUBLE
59633: EQUAL
59634: IFTRUE 59638
59636: GO 59771
59638: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59639: LD_ADDR_VAR 0 5
59643: PUSH
59644: LD_VAR 0 1
59648: PUSH
59649: LD_INT 4
59651: MINUS
59652: PUSH
59653: LD_VAR 0 2
59657: PUSH
59658: LD_INT 4
59660: MINUS
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: LIST
59669: PUSH
59670: LD_VAR 0 1
59674: PUSH
59675: LD_INT 3
59677: MINUS
59678: PUSH
59679: LD_VAR 0 2
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: LD_INT 4
59699: PLUS
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: LIST
59713: PUSH
59714: LD_VAR 0 1
59718: PUSH
59719: LD_INT 3
59721: PLUS
59722: PUSH
59723: LD_VAR 0 2
59727: PUSH
59728: LD_INT 3
59730: PLUS
59731: PUSH
59732: LD_INT 5
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: PUSH
59740: LD_VAR 0 1
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 4
59752: PLUS
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: ST_TO_ADDR
// end ; 1 :
59769: GO 60469
59771: LD_INT 1
59773: DOUBLE
59774: EQUAL
59775: IFTRUE 59779
59777: GO 59912
59779: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59780: LD_ADDR_VAR 0 5
59784: PUSH
59785: LD_VAR 0 1
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: LD_INT 4
59797: MINUS
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 3
59814: MINUS
59815: PUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_INT 3
59823: MINUS
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: PUSH
59833: LD_VAR 0 1
59837: PUSH
59838: LD_INT 4
59840: MINUS
59841: PUSH
59842: LD_VAR 0 2
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_VAR 0 2
59864: PUSH
59865: LD_INT 3
59867: PLUS
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: PUSH
59877: LD_VAR 0 1
59881: PUSH
59882: LD_INT 4
59884: PLUS
59885: PUSH
59886: LD_VAR 0 2
59890: PUSH
59891: LD_INT 4
59893: PLUS
59894: PUSH
59895: LD_INT 5
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: ST_TO_ADDR
// end ; 2 :
59910: GO 60469
59912: LD_INT 2
59914: DOUBLE
59915: EQUAL
59916: IFTRUE 59920
59918: GO 60049
59920: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59921: LD_ADDR_VAR 0 5
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: LD_VAR 0 2
59935: PUSH
59936: LD_INT 3
59938: MINUS
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: PUSH
59948: LD_VAR 0 1
59952: PUSH
59953: LD_INT 4
59955: PLUS
59956: PUSH
59957: LD_VAR 0 2
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_VAR 0 2
59979: PUSH
59980: LD_INT 4
59982: PLUS
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: PUSH
59992: LD_VAR 0 1
59996: PUSH
59997: LD_INT 3
59999: MINUS
60000: PUSH
60001: LD_VAR 0 2
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: PUSH
60014: LD_VAR 0 1
60018: PUSH
60019: LD_INT 4
60021: MINUS
60022: PUSH
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 4
60030: MINUS
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// end ; 3 :
60047: GO 60469
60049: LD_INT 3
60051: DOUBLE
60052: EQUAL
60053: IFTRUE 60057
60055: GO 60190
60057: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60058: LD_ADDR_VAR 0 5
60062: PUSH
60063: LD_VAR 0 1
60067: PUSH
60068: LD_INT 3
60070: PLUS
60071: PUSH
60072: LD_VAR 0 2
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: PUSH
60085: LD_VAR 0 1
60089: PUSH
60090: LD_INT 4
60092: PLUS
60093: PUSH
60094: LD_VAR 0 2
60098: PUSH
60099: LD_INT 4
60101: PLUS
60102: PUSH
60103: LD_INT 5
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 4
60118: MINUS
60119: PUSH
60120: LD_VAR 0 2
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_VAR 0 1
60137: PUSH
60138: LD_VAR 0 2
60142: PUSH
60143: LD_INT 4
60145: MINUS
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: PUSH
60155: LD_VAR 0 1
60159: PUSH
60160: LD_INT 3
60162: MINUS
60163: PUSH
60164: LD_VAR 0 2
60168: PUSH
60169: LD_INT 3
60171: MINUS
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: ST_TO_ADDR
// end ; 4 :
60188: GO 60469
60190: LD_INT 4
60192: DOUBLE
60193: EQUAL
60194: IFTRUE 60198
60196: GO 60331
60198: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60199: LD_ADDR_VAR 0 5
60203: PUSH
60204: LD_VAR 0 1
60208: PUSH
60209: LD_VAR 0 2
60213: PUSH
60214: LD_INT 4
60216: PLUS
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: PUSH
60226: LD_VAR 0 1
60230: PUSH
60231: LD_INT 3
60233: PLUS
60234: PUSH
60235: LD_VAR 0 2
60239: PUSH
60240: LD_INT 3
60242: PLUS
60243: PUSH
60244: LD_INT 5
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: PUSH
60252: LD_VAR 0 1
60256: PUSH
60257: LD_INT 4
60259: PLUS
60260: PUSH
60261: LD_VAR 0 2
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: PUSH
60274: LD_VAR 0 1
60278: PUSH
60279: LD_VAR 0 2
60283: PUSH
60284: LD_INT 3
60286: MINUS
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: PUSH
60296: LD_VAR 0 1
60300: PUSH
60301: LD_INT 4
60303: MINUS
60304: PUSH
60305: LD_VAR 0 2
60309: PUSH
60310: LD_INT 4
60312: MINUS
60313: PUSH
60314: LD_INT 2
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: ST_TO_ADDR
// end ; 5 :
60329: GO 60469
60331: LD_INT 5
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60339
60337: GO 60468
60339: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60340: LD_ADDR_VAR 0 5
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 4
60352: MINUS
60353: PUSH
60354: LD_VAR 0 2
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 4
60379: MINUS
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 1
60393: PUSH
60394: LD_INT 4
60396: PLUS
60397: PUSH
60398: LD_VAR 0 2
60402: PUSH
60403: LD_INT 4
60405: PLUS
60406: PUSH
60407: LD_INT 5
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: PUSH
60415: LD_VAR 0 1
60419: PUSH
60420: LD_INT 3
60422: PLUS
60423: PUSH
60424: LD_VAR 0 2
60428: PUSH
60429: LD_INT 4
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: LIST
60436: PUSH
60437: LD_VAR 0 1
60441: PUSH
60442: LD_VAR 0 2
60446: PUSH
60447: LD_INT 3
60449: PLUS
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: ST_TO_ADDR
// end ; end ;
60466: GO 60469
60468: POP
// result := list ;
60469: LD_ADDR_VAR 0 4
60473: PUSH
60474: LD_VAR 0 5
60478: ST_TO_ADDR
// end ;
60479: LD_VAR 0 4
60483: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60484: LD_INT 0
60486: PPUSH
60487: PPUSH
60488: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60489: LD_VAR 0 1
60493: NOT
60494: PUSH
60495: LD_VAR 0 2
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: LD_INT 3
60508: PUSH
60509: LD_INT 4
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: IN
60518: NOT
60519: OR
60520: IFFALSE 60524
// exit ;
60522: GO 60616
// tmp := [ ] ;
60524: LD_ADDR_VAR 0 5
60528: PUSH
60529: EMPTY
60530: ST_TO_ADDR
// for i in units do
60531: LD_ADDR_VAR 0 4
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: FOR_IN
60542: IFFALSE 60585
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60544: LD_ADDR_VAR 0 5
60548: PUSH
60549: LD_VAR 0 5
60553: PPUSH
60554: LD_VAR 0 5
60558: PUSH
60559: LD_INT 1
60561: PLUS
60562: PPUSH
60563: LD_VAR 0 4
60567: PPUSH
60568: LD_VAR 0 2
60572: PPUSH
60573: CALL_OW 259
60577: PPUSH
60578: CALL_OW 2
60582: ST_TO_ADDR
60583: GO 60541
60585: POP
60586: POP
// if not tmp then
60587: LD_VAR 0 5
60591: NOT
60592: IFFALSE 60596
// exit ;
60594: GO 60616
// result := SortListByListDesc ( units , tmp ) ;
60596: LD_ADDR_VAR 0 3
60600: PUSH
60601: LD_VAR 0 1
60605: PPUSH
60606: LD_VAR 0 5
60610: PPUSH
60611: CALL_OW 77
60615: ST_TO_ADDR
// end ;
60616: LD_VAR 0 3
60620: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60621: LD_INT 0
60623: PPUSH
60624: PPUSH
60625: PPUSH
// result := false ;
60626: LD_ADDR_VAR 0 3
60630: PUSH
60631: LD_INT 0
60633: ST_TO_ADDR
// x := GetX ( building ) ;
60634: LD_ADDR_VAR 0 4
60638: PUSH
60639: LD_VAR 0 2
60643: PPUSH
60644: CALL_OW 250
60648: ST_TO_ADDR
// y := GetY ( building ) ;
60649: LD_ADDR_VAR 0 5
60653: PUSH
60654: LD_VAR 0 2
60658: PPUSH
60659: CALL_OW 251
60663: ST_TO_ADDR
// if not building or not x or not y then
60664: LD_VAR 0 2
60668: NOT
60669: PUSH
60670: LD_VAR 0 4
60674: NOT
60675: OR
60676: PUSH
60677: LD_VAR 0 5
60681: NOT
60682: OR
60683: IFFALSE 60687
// exit ;
60685: GO 60779
// if GetTaskList ( unit ) then
60687: LD_VAR 0 1
60691: PPUSH
60692: CALL_OW 437
60696: IFFALSE 60779
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60698: LD_STRING e
60700: PUSH
60701: LD_VAR 0 1
60705: PPUSH
60706: CALL_OW 437
60710: PUSH
60711: LD_INT 1
60713: ARRAY
60714: PUSH
60715: LD_INT 1
60717: ARRAY
60718: EQUAL
60719: PUSH
60720: LD_VAR 0 4
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 437
60734: PUSH
60735: LD_INT 1
60737: ARRAY
60738: PUSH
60739: LD_INT 2
60741: ARRAY
60742: EQUAL
60743: AND
60744: PUSH
60745: LD_VAR 0 5
60749: PUSH
60750: LD_VAR 0 1
60754: PPUSH
60755: CALL_OW 437
60759: PUSH
60760: LD_INT 1
60762: ARRAY
60763: PUSH
60764: LD_INT 3
60766: ARRAY
60767: EQUAL
60768: AND
60769: IFFALSE 60779
// result := true end ;
60771: LD_ADDR_VAR 0 3
60775: PUSH
60776: LD_INT 1
60778: ST_TO_ADDR
// end ;
60779: LD_VAR 0 3
60783: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60784: LD_INT 0
60786: PPUSH
// result := false ;
60787: LD_ADDR_VAR 0 4
60791: PUSH
60792: LD_INT 0
60794: ST_TO_ADDR
// if GetTaskList ( unit ) then
60795: LD_VAR 0 1
60799: PPUSH
60800: CALL_OW 437
60804: IFFALSE 60887
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60806: LD_STRING M
60808: PUSH
60809: LD_VAR 0 1
60813: PPUSH
60814: CALL_OW 437
60818: PUSH
60819: LD_INT 1
60821: ARRAY
60822: PUSH
60823: LD_INT 1
60825: ARRAY
60826: EQUAL
60827: PUSH
60828: LD_VAR 0 2
60832: PUSH
60833: LD_VAR 0 1
60837: PPUSH
60838: CALL_OW 437
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PUSH
60847: LD_INT 2
60849: ARRAY
60850: EQUAL
60851: AND
60852: PUSH
60853: LD_VAR 0 3
60857: PUSH
60858: LD_VAR 0 1
60862: PPUSH
60863: CALL_OW 437
60867: PUSH
60868: LD_INT 1
60870: ARRAY
60871: PUSH
60872: LD_INT 3
60874: ARRAY
60875: EQUAL
60876: AND
60877: IFFALSE 60887
// result := true ;
60879: LD_ADDR_VAR 0 4
60883: PUSH
60884: LD_INT 1
60886: ST_TO_ADDR
// end ; end ;
60887: LD_VAR 0 4
60891: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60892: LD_INT 0
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
// if not unit or not area then
60898: LD_VAR 0 1
60902: NOT
60903: PUSH
60904: LD_VAR 0 2
60908: NOT
60909: OR
60910: IFFALSE 60914
// exit ;
60912: GO 61078
// tmp := AreaToList ( area , i ) ;
60914: LD_ADDR_VAR 0 6
60918: PUSH
60919: LD_VAR 0 2
60923: PPUSH
60924: LD_VAR 0 5
60928: PPUSH
60929: CALL_OW 517
60933: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60934: LD_ADDR_VAR 0 5
60938: PUSH
60939: DOUBLE
60940: LD_INT 1
60942: DEC
60943: ST_TO_ADDR
60944: LD_VAR 0 6
60948: PUSH
60949: LD_INT 1
60951: ARRAY
60952: PUSH
60953: FOR_TO
60954: IFFALSE 61076
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60956: LD_ADDR_VAR 0 7
60960: PUSH
60961: LD_VAR 0 6
60965: PUSH
60966: LD_INT 1
60968: ARRAY
60969: PUSH
60970: LD_VAR 0 5
60974: ARRAY
60975: PUSH
60976: LD_VAR 0 6
60980: PUSH
60981: LD_INT 2
60983: ARRAY
60984: PUSH
60985: LD_VAR 0 5
60989: ARRAY
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60995: LD_VAR 0 7
60999: PUSH
61000: LD_INT 1
61002: ARRAY
61003: PPUSH
61004: LD_VAR 0 7
61008: PUSH
61009: LD_INT 2
61011: ARRAY
61012: PPUSH
61013: CALL_OW 428
61017: PUSH
61018: LD_INT 0
61020: EQUAL
61021: IFFALSE 61074
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61023: LD_VAR 0 1
61027: PPUSH
61028: LD_VAR 0 7
61032: PUSH
61033: LD_INT 1
61035: ARRAY
61036: PPUSH
61037: LD_VAR 0 7
61041: PUSH
61042: LD_INT 2
61044: ARRAY
61045: PPUSH
61046: LD_VAR 0 3
61050: PPUSH
61051: CALL_OW 48
// result := IsPlaced ( unit ) ;
61055: LD_ADDR_VAR 0 4
61059: PUSH
61060: LD_VAR 0 1
61064: PPUSH
61065: CALL_OW 305
61069: ST_TO_ADDR
// exit ;
61070: POP
61071: POP
61072: GO 61078
// end ; end ;
61074: GO 60953
61076: POP
61077: POP
// end ;
61078: LD_VAR 0 4
61082: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61083: LD_INT 0
61085: PPUSH
61086: PPUSH
61087: PPUSH
// if not side or side > 8 then
61088: LD_VAR 0 1
61092: NOT
61093: PUSH
61094: LD_VAR 0 1
61098: PUSH
61099: LD_INT 8
61101: GREATER
61102: OR
61103: IFFALSE 61107
// exit ;
61105: GO 61294
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61107: LD_ADDR_VAR 0 4
61111: PUSH
61112: LD_INT 22
61114: PUSH
61115: LD_VAR 0 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 21
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PPUSH
61138: CALL_OW 69
61142: ST_TO_ADDR
// if not tmp then
61143: LD_VAR 0 4
61147: NOT
61148: IFFALSE 61152
// exit ;
61150: GO 61294
// enable_addtolog := true ;
61152: LD_ADDR_OWVAR 81
61156: PUSH
61157: LD_INT 1
61159: ST_TO_ADDR
// AddToLog ( [ ) ;
61160: LD_STRING [
61162: PPUSH
61163: CALL_OW 561
// for i in tmp do
61167: LD_ADDR_VAR 0 3
61171: PUSH
61172: LD_VAR 0 4
61176: PUSH
61177: FOR_IN
61178: IFFALSE 61285
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61180: LD_STRING [
61182: PUSH
61183: LD_VAR 0 3
61187: PPUSH
61188: CALL_OW 266
61192: STR
61193: PUSH
61194: LD_STRING , 
61196: STR
61197: PUSH
61198: LD_VAR 0 3
61202: PPUSH
61203: CALL_OW 250
61207: STR
61208: PUSH
61209: LD_STRING , 
61211: STR
61212: PUSH
61213: LD_VAR 0 3
61217: PPUSH
61218: CALL_OW 251
61222: STR
61223: PUSH
61224: LD_STRING , 
61226: STR
61227: PUSH
61228: LD_VAR 0 3
61232: PPUSH
61233: CALL_OW 254
61237: STR
61238: PUSH
61239: LD_STRING , 
61241: STR
61242: PUSH
61243: LD_VAR 0 3
61247: PPUSH
61248: LD_INT 1
61250: PPUSH
61251: CALL_OW 268
61255: STR
61256: PUSH
61257: LD_STRING , 
61259: STR
61260: PUSH
61261: LD_VAR 0 3
61265: PPUSH
61266: LD_INT 2
61268: PPUSH
61269: CALL_OW 268
61273: STR
61274: PUSH
61275: LD_STRING ],
61277: STR
61278: PPUSH
61279: CALL_OW 561
// end ;
61283: GO 61177
61285: POP
61286: POP
// AddToLog ( ]; ) ;
61287: LD_STRING ];
61289: PPUSH
61290: CALL_OW 561
// end ;
61294: LD_VAR 0 2
61298: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61299: LD_INT 0
61301: PPUSH
61302: PPUSH
61303: PPUSH
61304: PPUSH
61305: PPUSH
// if not area or not rate or not max then
61306: LD_VAR 0 1
61310: NOT
61311: PUSH
61312: LD_VAR 0 2
61316: NOT
61317: OR
61318: PUSH
61319: LD_VAR 0 4
61323: NOT
61324: OR
61325: IFFALSE 61329
// exit ;
61327: GO 61518
// while 1 do
61329: LD_INT 1
61331: IFFALSE 61518
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61333: LD_ADDR_VAR 0 9
61337: PUSH
61338: LD_VAR 0 1
61342: PPUSH
61343: LD_INT 1
61345: PPUSH
61346: CALL_OW 287
61350: PUSH
61351: LD_INT 10
61353: MUL
61354: ST_TO_ADDR
// r := rate / 10 ;
61355: LD_ADDR_VAR 0 7
61359: PUSH
61360: LD_VAR 0 2
61364: PUSH
61365: LD_INT 10
61367: DIVREAL
61368: ST_TO_ADDR
// time := 1 1$00 ;
61369: LD_ADDR_VAR 0 8
61373: PUSH
61374: LD_INT 2100
61376: ST_TO_ADDR
// if amount < min then
61377: LD_VAR 0 9
61381: PUSH
61382: LD_VAR 0 3
61386: LESS
61387: IFFALSE 61405
// r := r * 2 else
61389: LD_ADDR_VAR 0 7
61393: PUSH
61394: LD_VAR 0 7
61398: PUSH
61399: LD_INT 2
61401: MUL
61402: ST_TO_ADDR
61403: GO 61431
// if amount > max then
61405: LD_VAR 0 9
61409: PUSH
61410: LD_VAR 0 4
61414: GREATER
61415: IFFALSE 61431
// r := r / 2 ;
61417: LD_ADDR_VAR 0 7
61421: PUSH
61422: LD_VAR 0 7
61426: PUSH
61427: LD_INT 2
61429: DIVREAL
61430: ST_TO_ADDR
// time := time / r ;
61431: LD_ADDR_VAR 0 8
61435: PUSH
61436: LD_VAR 0 8
61440: PUSH
61441: LD_VAR 0 7
61445: DIVREAL
61446: ST_TO_ADDR
// if time < 0 then
61447: LD_VAR 0 8
61451: PUSH
61452: LD_INT 0
61454: LESS
61455: IFFALSE 61472
// time := time * - 1 ;
61457: LD_ADDR_VAR 0 8
61461: PUSH
61462: LD_VAR 0 8
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: MUL
61471: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61472: LD_VAR 0 8
61476: PUSH
61477: LD_INT 35
61479: PPUSH
61480: LD_INT 875
61482: PPUSH
61483: CALL_OW 12
61487: PLUS
61488: PPUSH
61489: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61493: LD_INT 1
61495: PPUSH
61496: LD_INT 5
61498: PPUSH
61499: CALL_OW 12
61503: PPUSH
61504: LD_VAR 0 1
61508: PPUSH
61509: LD_INT 1
61511: PPUSH
61512: CALL_OW 55
// end ;
61516: GO 61329
// end ;
61518: LD_VAR 0 5
61522: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61523: LD_INT 0
61525: PPUSH
61526: PPUSH
61527: PPUSH
61528: PPUSH
61529: PPUSH
61530: PPUSH
61531: PPUSH
61532: PPUSH
// if not turrets or not factories then
61533: LD_VAR 0 1
61537: NOT
61538: PUSH
61539: LD_VAR 0 2
61543: NOT
61544: OR
61545: IFFALSE 61549
// exit ;
61547: GO 61856
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61549: LD_ADDR_VAR 0 10
61553: PUSH
61554: LD_INT 5
61556: PUSH
61557: LD_INT 6
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 2
61566: PUSH
61567: LD_INT 4
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: LD_INT 5
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 24
61591: PUSH
61592: LD_INT 25
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 23
61601: PUSH
61602: LD_INT 27
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 42
61615: PUSH
61616: LD_INT 43
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 44
61625: PUSH
61626: LD_INT 46
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 45
61635: PUSH
61636: LD_INT 47
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: ST_TO_ADDR
// result := [ ] ;
61653: LD_ADDR_VAR 0 3
61657: PUSH
61658: EMPTY
61659: ST_TO_ADDR
// for i in turrets do
61660: LD_ADDR_VAR 0 4
61664: PUSH
61665: LD_VAR 0 1
61669: PUSH
61670: FOR_IN
61671: IFFALSE 61854
// begin nat := GetNation ( i ) ;
61673: LD_ADDR_VAR 0 7
61677: PUSH
61678: LD_VAR 0 4
61682: PPUSH
61683: CALL_OW 248
61687: ST_TO_ADDR
// weapon := 0 ;
61688: LD_ADDR_VAR 0 8
61692: PUSH
61693: LD_INT 0
61695: ST_TO_ADDR
// if not nat then
61696: LD_VAR 0 7
61700: NOT
61701: IFFALSE 61705
// continue ;
61703: GO 61670
// for j in list [ nat ] do
61705: LD_ADDR_VAR 0 5
61709: PUSH
61710: LD_VAR 0 10
61714: PUSH
61715: LD_VAR 0 7
61719: ARRAY
61720: PUSH
61721: FOR_IN
61722: IFFALSE 61763
// if GetBWeapon ( i ) = j [ 1 ] then
61724: LD_VAR 0 4
61728: PPUSH
61729: CALL_OW 269
61733: PUSH
61734: LD_VAR 0 5
61738: PUSH
61739: LD_INT 1
61741: ARRAY
61742: EQUAL
61743: IFFALSE 61761
// begin weapon := j [ 2 ] ;
61745: LD_ADDR_VAR 0 8
61749: PUSH
61750: LD_VAR 0 5
61754: PUSH
61755: LD_INT 2
61757: ARRAY
61758: ST_TO_ADDR
// break ;
61759: GO 61763
// end ;
61761: GO 61721
61763: POP
61764: POP
// if not weapon then
61765: LD_VAR 0 8
61769: NOT
61770: IFFALSE 61774
// continue ;
61772: GO 61670
// for k in factories do
61774: LD_ADDR_VAR 0 6
61778: PUSH
61779: LD_VAR 0 2
61783: PUSH
61784: FOR_IN
61785: IFFALSE 61850
// begin weapons := AvailableWeaponList ( k ) ;
61787: LD_ADDR_VAR 0 9
61791: PUSH
61792: LD_VAR 0 6
61796: PPUSH
61797: CALL_OW 478
61801: ST_TO_ADDR
// if not weapons then
61802: LD_VAR 0 9
61806: NOT
61807: IFFALSE 61811
// continue ;
61809: GO 61784
// if weapon in weapons then
61811: LD_VAR 0 8
61815: PUSH
61816: LD_VAR 0 9
61820: IN
61821: IFFALSE 61848
// begin result := [ i , weapon ] ;
61823: LD_ADDR_VAR 0 3
61827: PUSH
61828: LD_VAR 0 4
61832: PUSH
61833: LD_VAR 0 8
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: ST_TO_ADDR
// exit ;
61842: POP
61843: POP
61844: POP
61845: POP
61846: GO 61856
// end ; end ;
61848: GO 61784
61850: POP
61851: POP
// end ;
61852: GO 61670
61854: POP
61855: POP
// end ;
61856: LD_VAR 0 3
61860: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61861: LD_INT 0
61863: PPUSH
// if not side or side > 8 then
61864: LD_VAR 0 3
61868: NOT
61869: PUSH
61870: LD_VAR 0 3
61874: PUSH
61875: LD_INT 8
61877: GREATER
61878: OR
61879: IFFALSE 61883
// exit ;
61881: GO 61942
// if not range then
61883: LD_VAR 0 4
61887: NOT
61888: IFFALSE 61899
// range := - 12 ;
61890: LD_ADDR_VAR 0 4
61894: PUSH
61895: LD_INT 12
61897: NEG
61898: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61899: LD_VAR 0 1
61903: PPUSH
61904: LD_VAR 0 2
61908: PPUSH
61909: LD_VAR 0 3
61913: PPUSH
61914: LD_VAR 0 4
61918: PPUSH
61919: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61923: LD_VAR 0 1
61927: PPUSH
61928: LD_VAR 0 2
61932: PPUSH
61933: LD_VAR 0 3
61937: PPUSH
61938: CALL_OW 331
// end ;
61942: LD_VAR 0 5
61946: RET
// export function Video ( mode ) ; begin
61947: LD_INT 0
61949: PPUSH
// ingame_video = mode ;
61950: LD_ADDR_OWVAR 52
61954: PUSH
61955: LD_VAR 0 1
61959: ST_TO_ADDR
// interface_hidden = mode ;
61960: LD_ADDR_OWVAR 54
61964: PUSH
61965: LD_VAR 0 1
61969: ST_TO_ADDR
// end ;
61970: LD_VAR 0 2
61974: RET
// export function Join ( array , element ) ; begin
61975: LD_INT 0
61977: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61978: LD_ADDR_VAR 0 3
61982: PUSH
61983: LD_VAR 0 1
61987: PPUSH
61988: LD_VAR 0 1
61992: PUSH
61993: LD_INT 1
61995: PLUS
61996: PPUSH
61997: LD_VAR 0 2
62001: PPUSH
62002: CALL_OW 1
62006: ST_TO_ADDR
// end ;
62007: LD_VAR 0 3
62011: RET
// export function JoinUnion ( array , element ) ; begin
62012: LD_INT 0
62014: PPUSH
// result := array union element ;
62015: LD_ADDR_VAR 0 3
62019: PUSH
62020: LD_VAR 0 1
62024: PUSH
62025: LD_VAR 0 2
62029: UNION
62030: ST_TO_ADDR
// end ;
62031: LD_VAR 0 3
62035: RET
// export function GetBehemoths ( side ) ; begin
62036: LD_INT 0
62038: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62039: LD_ADDR_VAR 0 2
62043: PUSH
62044: LD_INT 22
62046: PUSH
62047: LD_VAR 0 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 31
62058: PUSH
62059: LD_INT 25
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PPUSH
62070: CALL_OW 69
62074: ST_TO_ADDR
// end ;
62075: LD_VAR 0 2
62079: RET
// export function Shuffle ( array ) ; var i , index ; begin
62080: LD_INT 0
62082: PPUSH
62083: PPUSH
62084: PPUSH
// result := [ ] ;
62085: LD_ADDR_VAR 0 2
62089: PUSH
62090: EMPTY
62091: ST_TO_ADDR
// if not array then
62092: LD_VAR 0 1
62096: NOT
62097: IFFALSE 62101
// exit ;
62099: GO 62200
// Randomize ;
62101: CALL_OW 10
// for i = array downto 1 do
62105: LD_ADDR_VAR 0 3
62109: PUSH
62110: DOUBLE
62111: LD_VAR 0 1
62115: INC
62116: ST_TO_ADDR
62117: LD_INT 1
62119: PUSH
62120: FOR_DOWNTO
62121: IFFALSE 62198
// begin index := rand ( 1 , array ) ;
62123: LD_ADDR_VAR 0 4
62127: PUSH
62128: LD_INT 1
62130: PPUSH
62131: LD_VAR 0 1
62135: PPUSH
62136: CALL_OW 12
62140: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62141: LD_ADDR_VAR 0 2
62145: PUSH
62146: LD_VAR 0 2
62150: PPUSH
62151: LD_VAR 0 2
62155: PUSH
62156: LD_INT 1
62158: PLUS
62159: PPUSH
62160: LD_VAR 0 1
62164: PUSH
62165: LD_VAR 0 4
62169: ARRAY
62170: PPUSH
62171: CALL_OW 2
62175: ST_TO_ADDR
// array := Delete ( array , index ) ;
62176: LD_ADDR_VAR 0 1
62180: PUSH
62181: LD_VAR 0 1
62185: PPUSH
62186: LD_VAR 0 4
62190: PPUSH
62191: CALL_OW 3
62195: ST_TO_ADDR
// end ;
62196: GO 62120
62198: POP
62199: POP
// end ;
62200: LD_VAR 0 2
62204: RET
// export function GetBaseMaterials ( base ) ; begin
62205: LD_INT 0
62207: PPUSH
// result := [ 0 , 0 , 0 ] ;
62208: LD_ADDR_VAR 0 2
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// if not base then
62227: LD_VAR 0 1
62231: NOT
62232: IFFALSE 62236
// exit ;
62234: GO 62285
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62236: LD_ADDR_VAR 0 2
62240: PUSH
62241: LD_VAR 0 1
62245: PPUSH
62246: LD_INT 1
62248: PPUSH
62249: CALL_OW 275
62253: PUSH
62254: LD_VAR 0 1
62258: PPUSH
62259: LD_INT 2
62261: PPUSH
62262: CALL_OW 275
62266: PUSH
62267: LD_VAR 0 1
62271: PPUSH
62272: LD_INT 3
62274: PPUSH
62275: CALL_OW 275
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: LIST
62284: ST_TO_ADDR
// end ;
62285: LD_VAR 0 2
62289: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62290: LD_INT 0
62292: PPUSH
62293: PPUSH
// result := array ;
62294: LD_ADDR_VAR 0 3
62298: PUSH
62299: LD_VAR 0 1
62303: ST_TO_ADDR
// if size >= result then
62304: LD_VAR 0 2
62308: PUSH
62309: LD_VAR 0 3
62313: GREATEREQUAL
62314: IFFALSE 62318
// exit ;
62316: GO 62368
// if size then
62318: LD_VAR 0 2
62322: IFFALSE 62368
// for i := array downto size do
62324: LD_ADDR_VAR 0 4
62328: PUSH
62329: DOUBLE
62330: LD_VAR 0 1
62334: INC
62335: ST_TO_ADDR
62336: LD_VAR 0 2
62340: PUSH
62341: FOR_DOWNTO
62342: IFFALSE 62366
// result := Delete ( result , result ) ;
62344: LD_ADDR_VAR 0 3
62348: PUSH
62349: LD_VAR 0 3
62353: PPUSH
62354: LD_VAR 0 3
62358: PPUSH
62359: CALL_OW 3
62363: ST_TO_ADDR
62364: GO 62341
62366: POP
62367: POP
// end ;
62368: LD_VAR 0 3
62372: RET
// export function ComExit ( unit ) ; var tmp ; begin
62373: LD_INT 0
62375: PPUSH
62376: PPUSH
// if not IsInUnit ( unit ) then
62377: LD_VAR 0 1
62381: PPUSH
62382: CALL_OW 310
62386: NOT
62387: IFFALSE 62391
// exit ;
62389: GO 62451
// tmp := IsInUnit ( unit ) ;
62391: LD_ADDR_VAR 0 3
62395: PUSH
62396: LD_VAR 0 1
62400: PPUSH
62401: CALL_OW 310
62405: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62406: LD_VAR 0 3
62410: PPUSH
62411: CALL_OW 247
62415: PUSH
62416: LD_INT 2
62418: EQUAL
62419: IFFALSE 62432
// ComExitVehicle ( unit ) else
62421: LD_VAR 0 1
62425: PPUSH
62426: CALL_OW 121
62430: GO 62441
// ComExitBuilding ( unit ) ;
62432: LD_VAR 0 1
62436: PPUSH
62437: CALL_OW 122
// result := tmp ;
62441: LD_ADDR_VAR 0 2
62445: PUSH
62446: LD_VAR 0 3
62450: ST_TO_ADDR
// end ;
62451: LD_VAR 0 2
62455: RET
// export function ComExitAll ( units ) ; var i ; begin
62456: LD_INT 0
62458: PPUSH
62459: PPUSH
// if not units then
62460: LD_VAR 0 1
62464: NOT
62465: IFFALSE 62469
// exit ;
62467: GO 62495
// for i in units do
62469: LD_ADDR_VAR 0 3
62473: PUSH
62474: LD_VAR 0 1
62478: PUSH
62479: FOR_IN
62480: IFFALSE 62493
// ComExit ( i ) ;
62482: LD_VAR 0 3
62486: PPUSH
62487: CALL 62373 0 1
62491: GO 62479
62493: POP
62494: POP
// end ;
62495: LD_VAR 0 2
62499: RET
// export function ResetHc ; begin
62500: LD_INT 0
62502: PPUSH
// InitHc ;
62503: CALL_OW 19
// hc_importance := 0 ;
62507: LD_ADDR_OWVAR 32
62511: PUSH
62512: LD_INT 0
62514: ST_TO_ADDR
// end ;
62515: LD_VAR 0 1
62519: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62520: LD_INT 0
62522: PPUSH
62523: PPUSH
62524: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62525: LD_ADDR_VAR 0 6
62529: PUSH
62530: LD_VAR 0 1
62534: PUSH
62535: LD_VAR 0 3
62539: PLUS
62540: PUSH
62541: LD_INT 2
62543: DIV
62544: ST_TO_ADDR
// if _x < 0 then
62545: LD_VAR 0 6
62549: PUSH
62550: LD_INT 0
62552: LESS
62553: IFFALSE 62570
// _x := _x * - 1 ;
62555: LD_ADDR_VAR 0 6
62559: PUSH
62560: LD_VAR 0 6
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: MUL
62569: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62570: LD_ADDR_VAR 0 7
62574: PUSH
62575: LD_VAR 0 2
62579: PUSH
62580: LD_VAR 0 4
62584: PLUS
62585: PUSH
62586: LD_INT 2
62588: DIV
62589: ST_TO_ADDR
// if _y < 0 then
62590: LD_VAR 0 7
62594: PUSH
62595: LD_INT 0
62597: LESS
62598: IFFALSE 62615
// _y := _y * - 1 ;
62600: LD_ADDR_VAR 0 7
62604: PUSH
62605: LD_VAR 0 7
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: MUL
62614: ST_TO_ADDR
// result := [ _x , _y ] ;
62615: LD_ADDR_VAR 0 5
62619: PUSH
62620: LD_VAR 0 6
62624: PUSH
62625: LD_VAR 0 7
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: ST_TO_ADDR
// end ;
62634: LD_VAR 0 5
62638: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62639: LD_INT 0
62641: PPUSH
62642: PPUSH
62643: PPUSH
62644: PPUSH
// task := GetTaskList ( unit ) ;
62645: LD_ADDR_VAR 0 7
62649: PUSH
62650: LD_VAR 0 1
62654: PPUSH
62655: CALL_OW 437
62659: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62660: LD_VAR 0 7
62664: NOT
62665: PUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: LD_VAR 0 2
62675: PPUSH
62676: CALL_OW 308
62680: NOT
62681: AND
62682: IFFALSE 62686
// exit ;
62684: GO 62804
// if IsInArea ( unit , area ) then
62686: LD_VAR 0 1
62690: PPUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: CALL_OW 308
62700: IFFALSE 62718
// begin ComMoveToArea ( unit , goAway ) ;
62702: LD_VAR 0 1
62706: PPUSH
62707: LD_VAR 0 3
62711: PPUSH
62712: CALL_OW 113
// exit ;
62716: GO 62804
// end ; if task [ 1 ] [ 1 ] <> M then
62718: LD_VAR 0 7
62722: PUSH
62723: LD_INT 1
62725: ARRAY
62726: PUSH
62727: LD_INT 1
62729: ARRAY
62730: PUSH
62731: LD_STRING M
62733: NONEQUAL
62734: IFFALSE 62738
// exit ;
62736: GO 62804
// x := task [ 1 ] [ 2 ] ;
62738: LD_ADDR_VAR 0 5
62742: PUSH
62743: LD_VAR 0 7
62747: PUSH
62748: LD_INT 1
62750: ARRAY
62751: PUSH
62752: LD_INT 2
62754: ARRAY
62755: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62756: LD_ADDR_VAR 0 6
62760: PUSH
62761: LD_VAR 0 7
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PUSH
62770: LD_INT 3
62772: ARRAY
62773: ST_TO_ADDR
// if InArea ( x , y , area ) then
62774: LD_VAR 0 5
62778: PPUSH
62779: LD_VAR 0 6
62783: PPUSH
62784: LD_VAR 0 2
62788: PPUSH
62789: CALL_OW 309
62793: IFFALSE 62804
// ComStop ( unit ) ;
62795: LD_VAR 0 1
62799: PPUSH
62800: CALL_OW 141
// end ;
62804: LD_VAR 0 4
62808: RET
// export function Abs ( value ) ; begin
62809: LD_INT 0
62811: PPUSH
// result := value ;
62812: LD_ADDR_VAR 0 2
62816: PUSH
62817: LD_VAR 0 1
62821: ST_TO_ADDR
// if value < 0 then
62822: LD_VAR 0 1
62826: PUSH
62827: LD_INT 0
62829: LESS
62830: IFFALSE 62847
// result := value * - 1 ;
62832: LD_ADDR_VAR 0 2
62836: PUSH
62837: LD_VAR 0 1
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: MUL
62846: ST_TO_ADDR
// end ;
62847: LD_VAR 0 2
62851: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62852: LD_INT 0
62854: PPUSH
62855: PPUSH
62856: PPUSH
62857: PPUSH
62858: PPUSH
62859: PPUSH
62860: PPUSH
62861: PPUSH
// if not unit or not building then
62862: LD_VAR 0 1
62866: NOT
62867: PUSH
62868: LD_VAR 0 2
62872: NOT
62873: OR
62874: IFFALSE 62878
// exit ;
62876: GO 63104
// x := GetX ( building ) ;
62878: LD_ADDR_VAR 0 4
62882: PUSH
62883: LD_VAR 0 2
62887: PPUSH
62888: CALL_OW 250
62892: ST_TO_ADDR
// y := GetY ( building ) ;
62893: LD_ADDR_VAR 0 6
62897: PUSH
62898: LD_VAR 0 2
62902: PPUSH
62903: CALL_OW 251
62907: ST_TO_ADDR
// d := GetDir ( building ) ;
62908: LD_ADDR_VAR 0 8
62912: PUSH
62913: LD_VAR 0 2
62917: PPUSH
62918: CALL_OW 254
62922: ST_TO_ADDR
// r := 4 ;
62923: LD_ADDR_VAR 0 9
62927: PUSH
62928: LD_INT 4
62930: ST_TO_ADDR
// for i := 1 to 5 do
62931: LD_ADDR_VAR 0 10
62935: PUSH
62936: DOUBLE
62937: LD_INT 1
62939: DEC
62940: ST_TO_ADDR
62941: LD_INT 5
62943: PUSH
62944: FOR_TO
62945: IFFALSE 63102
// begin _x := ShiftX ( x , d , r + i ) ;
62947: LD_ADDR_VAR 0 5
62951: PUSH
62952: LD_VAR 0 4
62956: PPUSH
62957: LD_VAR 0 8
62961: PPUSH
62962: LD_VAR 0 9
62966: PUSH
62967: LD_VAR 0 10
62971: PLUS
62972: PPUSH
62973: CALL_OW 272
62977: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62978: LD_ADDR_VAR 0 7
62982: PUSH
62983: LD_VAR 0 6
62987: PPUSH
62988: LD_VAR 0 8
62992: PPUSH
62993: LD_VAR 0 9
62997: PUSH
62998: LD_VAR 0 10
63002: PLUS
63003: PPUSH
63004: CALL_OW 273
63008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63009: LD_VAR 0 5
63013: PPUSH
63014: LD_VAR 0 7
63018: PPUSH
63019: CALL_OW 488
63023: PUSH
63024: LD_VAR 0 5
63028: PPUSH
63029: LD_VAR 0 7
63033: PPUSH
63034: CALL_OW 428
63038: PPUSH
63039: CALL_OW 247
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: IN
63054: NOT
63055: AND
63056: IFFALSE 63100
// begin ComMoveXY ( unit , _x , _y ) ;
63058: LD_VAR 0 1
63062: PPUSH
63063: LD_VAR 0 5
63067: PPUSH
63068: LD_VAR 0 7
63072: PPUSH
63073: CALL_OW 111
// result := [ _x , _y ] ;
63077: LD_ADDR_VAR 0 3
63081: PUSH
63082: LD_VAR 0 5
63086: PUSH
63087: LD_VAR 0 7
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// exit ;
63096: POP
63097: POP
63098: GO 63104
// end ; end ;
63100: GO 62944
63102: POP
63103: POP
// end ;
63104: LD_VAR 0 3
63108: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63109: LD_INT 0
63111: PPUSH
63112: PPUSH
63113: PPUSH
// result := 0 ;
63114: LD_ADDR_VAR 0 3
63118: PUSH
63119: LD_INT 0
63121: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63122: LD_VAR 0 1
63126: PUSH
63127: LD_INT 0
63129: LESS
63130: PUSH
63131: LD_VAR 0 1
63135: PUSH
63136: LD_INT 8
63138: GREATER
63139: OR
63140: PUSH
63141: LD_VAR 0 2
63145: PUSH
63146: LD_INT 0
63148: LESS
63149: OR
63150: PUSH
63151: LD_VAR 0 2
63155: PUSH
63156: LD_INT 8
63158: GREATER
63159: OR
63160: IFFALSE 63164
// exit ;
63162: GO 63239
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63164: LD_ADDR_VAR 0 4
63168: PUSH
63169: LD_INT 22
63171: PUSH
63172: LD_VAR 0 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PPUSH
63181: CALL_OW 69
63185: PUSH
63186: FOR_IN
63187: IFFALSE 63237
// begin un := UnitShoot ( i ) ;
63189: LD_ADDR_VAR 0 5
63193: PUSH
63194: LD_VAR 0 4
63198: PPUSH
63199: CALL_OW 504
63203: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63204: LD_VAR 0 5
63208: PPUSH
63209: CALL_OW 255
63213: PUSH
63214: LD_VAR 0 1
63218: EQUAL
63219: IFFALSE 63235
// begin result := un ;
63221: LD_ADDR_VAR 0 3
63225: PUSH
63226: LD_VAR 0 5
63230: ST_TO_ADDR
// exit ;
63231: POP
63232: POP
63233: GO 63239
// end ; end ;
63235: GO 63186
63237: POP
63238: POP
// end ;
63239: LD_VAR 0 3
63243: RET
// export function GetCargoBay ( units ) ; begin
63244: LD_INT 0
63246: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63247: LD_ADDR_VAR 0 2
63251: PUSH
63252: LD_VAR 0 1
63256: PPUSH
63257: LD_INT 2
63259: PUSH
63260: LD_INT 34
63262: PUSH
63263: LD_INT 12
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 34
63272: PUSH
63273: LD_INT 51
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 34
63282: PUSH
63283: LD_INT 32
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 34
63292: PUSH
63293: LD_INT 89
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: PPUSH
63307: CALL_OW 72
63311: ST_TO_ADDR
// end ;
63312: LD_VAR 0 2
63316: RET
// export function Negate ( value ) ; begin
63317: LD_INT 0
63319: PPUSH
// result := not value ;
63320: LD_ADDR_VAR 0 2
63324: PUSH
63325: LD_VAR 0 1
63329: NOT
63330: ST_TO_ADDR
// end ;
63331: LD_VAR 0 2
63335: RET
// export function Inc ( value ) ; begin
63336: LD_INT 0
63338: PPUSH
// result := value + 1 ;
63339: LD_ADDR_VAR 0 2
63343: PUSH
63344: LD_VAR 0 1
63348: PUSH
63349: LD_INT 1
63351: PLUS
63352: ST_TO_ADDR
// end ;
63353: LD_VAR 0 2
63357: RET
// export function Dec ( value ) ; begin
63358: LD_INT 0
63360: PPUSH
// result := value - 1 ;
63361: LD_ADDR_VAR 0 2
63365: PUSH
63366: LD_VAR 0 1
63370: PUSH
63371: LD_INT 1
63373: MINUS
63374: ST_TO_ADDR
// end ;
63375: LD_VAR 0 2
63379: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63380: LD_INT 0
63382: PPUSH
63383: PPUSH
63384: PPUSH
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_VAR 0 2
63399: PPUSH
63400: CALL_OW 488
63404: NOT
63405: PUSH
63406: LD_VAR 0 3
63410: PPUSH
63411: LD_VAR 0 4
63415: PPUSH
63416: CALL_OW 488
63420: NOT
63421: OR
63422: IFFALSE 63435
// begin result := - 1 ;
63424: LD_ADDR_VAR 0 5
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: ST_TO_ADDR
// exit ;
63433: GO 63670
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63435: LD_ADDR_VAR 0 12
63439: PUSH
63440: LD_VAR 0 1
63444: PPUSH
63445: LD_VAR 0 2
63449: PPUSH
63450: LD_VAR 0 3
63454: PPUSH
63455: LD_VAR 0 4
63459: PPUSH
63460: CALL 62520 0 4
63464: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63465: LD_ADDR_VAR 0 11
63469: PUSH
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_VAR 0 2
63479: PPUSH
63480: LD_VAR 0 12
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PPUSH
63489: LD_VAR 0 12
63493: PUSH
63494: LD_INT 2
63496: ARRAY
63497: PPUSH
63498: CALL_OW 298
63502: ST_TO_ADDR
// distance := 9999 ;
63503: LD_ADDR_VAR 0 10
63507: PUSH
63508: LD_INT 9999
63510: ST_TO_ADDR
// for i := 0 to 5 do
63511: LD_ADDR_VAR 0 6
63515: PUSH
63516: DOUBLE
63517: LD_INT 0
63519: DEC
63520: ST_TO_ADDR
63521: LD_INT 5
63523: PUSH
63524: FOR_TO
63525: IFFALSE 63668
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63527: LD_ADDR_VAR 0 7
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: LD_VAR 0 6
63541: PPUSH
63542: LD_VAR 0 11
63546: PPUSH
63547: CALL_OW 272
63551: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63552: LD_ADDR_VAR 0 8
63556: PUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: LD_VAR 0 6
63566: PPUSH
63567: LD_VAR 0 11
63571: PPUSH
63572: CALL_OW 273
63576: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63577: LD_VAR 0 7
63581: PPUSH
63582: LD_VAR 0 8
63586: PPUSH
63587: CALL_OW 488
63591: NOT
63592: IFFALSE 63596
// continue ;
63594: GO 63524
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63596: LD_ADDR_VAR 0 9
63600: PUSH
63601: LD_VAR 0 12
63605: PUSH
63606: LD_INT 1
63608: ARRAY
63609: PPUSH
63610: LD_VAR 0 12
63614: PUSH
63615: LD_INT 2
63617: ARRAY
63618: PPUSH
63619: LD_VAR 0 7
63623: PPUSH
63624: LD_VAR 0 8
63628: PPUSH
63629: CALL_OW 298
63633: ST_TO_ADDR
// if tmp < distance then
63634: LD_VAR 0 9
63638: PUSH
63639: LD_VAR 0 10
63643: LESS
63644: IFFALSE 63666
// begin result := i ;
63646: LD_ADDR_VAR 0 5
63650: PUSH
63651: LD_VAR 0 6
63655: ST_TO_ADDR
// distance := tmp ;
63656: LD_ADDR_VAR 0 10
63660: PUSH
63661: LD_VAR 0 9
63665: ST_TO_ADDR
// end ; end ;
63666: GO 63524
63668: POP
63669: POP
// end ;
63670: LD_VAR 0 5
63674: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63675: LD_INT 0
63677: PPUSH
63678: PPUSH
// if not driver or not IsInUnit ( driver ) then
63679: LD_VAR 0 1
63683: NOT
63684: PUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: CALL_OW 310
63694: NOT
63695: OR
63696: IFFALSE 63700
// exit ;
63698: GO 63790
// vehicle := IsInUnit ( driver ) ;
63700: LD_ADDR_VAR 0 3
63704: PUSH
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL_OW 310
63714: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63715: LD_VAR 0 1
63719: PPUSH
63720: LD_STRING \
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: PUSH
63750: LD_STRING E
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_VAR 0 3
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PPUSH
63786: CALL_OW 446
// end ;
63790: LD_VAR 0 2
63794: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63795: LD_INT 0
63797: PPUSH
63798: PPUSH
// if not driver or not IsInUnit ( driver ) then
63799: LD_VAR 0 1
63803: NOT
63804: PUSH
63805: LD_VAR 0 1
63809: PPUSH
63810: CALL_OW 310
63814: NOT
63815: OR
63816: IFFALSE 63820
// exit ;
63818: GO 63910
// vehicle := IsInUnit ( driver ) ;
63820: LD_ADDR_VAR 0 3
63824: PUSH
63825: LD_VAR 0 1
63829: PPUSH
63830: CALL_OW 310
63834: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63835: LD_VAR 0 1
63839: PPUSH
63840: LD_STRING \
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: PUSH
63870: LD_STRING E
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_VAR 0 3
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PPUSH
63906: CALL_OW 447
// end ;
63910: LD_VAR 0 2
63914: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63915: LD_INT 0
63917: PPUSH
63918: PPUSH
63919: PPUSH
// tmp := [ ] ;
63920: LD_ADDR_VAR 0 5
63924: PUSH
63925: EMPTY
63926: ST_TO_ADDR
// for i in units do
63927: LD_ADDR_VAR 0 4
63931: PUSH
63932: LD_VAR 0 1
63936: PUSH
63937: FOR_IN
63938: IFFALSE 63976
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63940: LD_ADDR_VAR 0 5
63944: PUSH
63945: LD_VAR 0 5
63949: PPUSH
63950: LD_VAR 0 5
63954: PUSH
63955: LD_INT 1
63957: PLUS
63958: PPUSH
63959: LD_VAR 0 4
63963: PPUSH
63964: CALL_OW 256
63968: PPUSH
63969: CALL_OW 2
63973: ST_TO_ADDR
63974: GO 63937
63976: POP
63977: POP
// if not tmp then
63978: LD_VAR 0 5
63982: NOT
63983: IFFALSE 63987
// exit ;
63985: GO 64035
// if asc then
63987: LD_VAR 0 2
63991: IFFALSE 64015
// result := SortListByListAsc ( units , tmp ) else
63993: LD_ADDR_VAR 0 3
63997: PUSH
63998: LD_VAR 0 1
64002: PPUSH
64003: LD_VAR 0 5
64007: PPUSH
64008: CALL_OW 76
64012: ST_TO_ADDR
64013: GO 64035
// result := SortListByListDesc ( units , tmp ) ;
64015: LD_ADDR_VAR 0 3
64019: PUSH
64020: LD_VAR 0 1
64024: PPUSH
64025: LD_VAR 0 5
64029: PPUSH
64030: CALL_OW 77
64034: ST_TO_ADDR
// end ;
64035: LD_VAR 0 3
64039: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64040: LD_INT 0
64042: PPUSH
64043: PPUSH
// task := GetTaskList ( mech ) ;
64044: LD_ADDR_VAR 0 4
64048: PUSH
64049: LD_VAR 0 1
64053: PPUSH
64054: CALL_OW 437
64058: ST_TO_ADDR
// if not task then
64059: LD_VAR 0 4
64063: NOT
64064: IFFALSE 64068
// exit ;
64066: GO 64110
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64068: LD_ADDR_VAR 0 3
64072: PUSH
64073: LD_VAR 0 4
64077: PUSH
64078: LD_INT 1
64080: ARRAY
64081: PUSH
64082: LD_INT 1
64084: ARRAY
64085: PUSH
64086: LD_STRING r
64088: EQUAL
64089: PUSH
64090: LD_VAR 0 4
64094: PUSH
64095: LD_INT 1
64097: ARRAY
64098: PUSH
64099: LD_INT 4
64101: ARRAY
64102: PUSH
64103: LD_VAR 0 2
64107: EQUAL
64108: AND
64109: ST_TO_ADDR
// end ;
64110: LD_VAR 0 3
64114: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64115: LD_INT 0
64117: PPUSH
// SetDir ( unit , d ) ;
64118: LD_VAR 0 1
64122: PPUSH
64123: LD_VAR 0 4
64127: PPUSH
64128: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64132: LD_VAR 0 1
64136: PPUSH
64137: LD_VAR 0 2
64141: PPUSH
64142: LD_VAR 0 3
64146: PPUSH
64147: LD_VAR 0 5
64151: PPUSH
64152: CALL_OW 48
// end ;
64156: LD_VAR 0 6
64160: RET
// export function ToNaturalNumber ( number ) ; begin
64161: LD_INT 0
64163: PPUSH
// result := number div 1 ;
64164: LD_ADDR_VAR 0 2
64168: PUSH
64169: LD_VAR 0 1
64173: PUSH
64174: LD_INT 1
64176: DIV
64177: ST_TO_ADDR
// if number < 0 then
64178: LD_VAR 0 1
64182: PUSH
64183: LD_INT 0
64185: LESS
64186: IFFALSE 64196
// result := 0 ;
64188: LD_ADDR_VAR 0 2
64192: PUSH
64193: LD_INT 0
64195: ST_TO_ADDR
// end ;
64196: LD_VAR 0 2
64200: RET
// export function SortByClass ( units , class ) ; var un ; begin
64201: LD_INT 0
64203: PPUSH
64204: PPUSH
// if not units or not class then
64205: LD_VAR 0 1
64209: NOT
64210: PUSH
64211: LD_VAR 0 2
64215: NOT
64216: OR
64217: IFFALSE 64221
// exit ;
64219: GO 64316
// result := [ ] ;
64221: LD_ADDR_VAR 0 3
64225: PUSH
64226: EMPTY
64227: ST_TO_ADDR
// for un in units do
64228: LD_ADDR_VAR 0 4
64232: PUSH
64233: LD_VAR 0 1
64237: PUSH
64238: FOR_IN
64239: IFFALSE 64314
// if GetClass ( un ) = class then
64241: LD_VAR 0 4
64245: PPUSH
64246: CALL_OW 257
64250: PUSH
64251: LD_VAR 0 2
64255: EQUAL
64256: IFFALSE 64283
// result := Insert ( result , 1 , un ) else
64258: LD_ADDR_VAR 0 3
64262: PUSH
64263: LD_VAR 0 3
64267: PPUSH
64268: LD_INT 1
64270: PPUSH
64271: LD_VAR 0 4
64275: PPUSH
64276: CALL_OW 2
64280: ST_TO_ADDR
64281: GO 64312
// result := Replace ( result , result + 1 , un ) ;
64283: LD_ADDR_VAR 0 3
64287: PUSH
64288: LD_VAR 0 3
64292: PPUSH
64293: LD_VAR 0 3
64297: PUSH
64298: LD_INT 1
64300: PLUS
64301: PPUSH
64302: LD_VAR 0 4
64306: PPUSH
64307: CALL_OW 1
64311: ST_TO_ADDR
64312: GO 64238
64314: POP
64315: POP
// end ;
64316: LD_VAR 0 3
64320: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64321: LD_INT 0
64323: PPUSH
64324: PPUSH
64325: PPUSH
64326: PPUSH
64327: PPUSH
64328: PPUSH
64329: PPUSH
// result := [ ] ;
64330: LD_ADDR_VAR 0 4
64334: PUSH
64335: EMPTY
64336: ST_TO_ADDR
// if x - r < 0 then
64337: LD_VAR 0 1
64341: PUSH
64342: LD_VAR 0 3
64346: MINUS
64347: PUSH
64348: LD_INT 0
64350: LESS
64351: IFFALSE 64363
// min_x := 0 else
64353: LD_ADDR_VAR 0 8
64357: PUSH
64358: LD_INT 0
64360: ST_TO_ADDR
64361: GO 64379
// min_x := x - r ;
64363: LD_ADDR_VAR 0 8
64367: PUSH
64368: LD_VAR 0 1
64372: PUSH
64373: LD_VAR 0 3
64377: MINUS
64378: ST_TO_ADDR
// if y - r < 0 then
64379: LD_VAR 0 2
64383: PUSH
64384: LD_VAR 0 3
64388: MINUS
64389: PUSH
64390: LD_INT 0
64392: LESS
64393: IFFALSE 64405
// min_y := 0 else
64395: LD_ADDR_VAR 0 7
64399: PUSH
64400: LD_INT 0
64402: ST_TO_ADDR
64403: GO 64421
// min_y := y - r ;
64405: LD_ADDR_VAR 0 7
64409: PUSH
64410: LD_VAR 0 2
64414: PUSH
64415: LD_VAR 0 3
64419: MINUS
64420: ST_TO_ADDR
// max_x := x + r ;
64421: LD_ADDR_VAR 0 9
64425: PUSH
64426: LD_VAR 0 1
64430: PUSH
64431: LD_VAR 0 3
64435: PLUS
64436: ST_TO_ADDR
// max_y := y + r ;
64437: LD_ADDR_VAR 0 10
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_VAR 0 3
64451: PLUS
64452: ST_TO_ADDR
// for _x = min_x to max_x do
64453: LD_ADDR_VAR 0 5
64457: PUSH
64458: DOUBLE
64459: LD_VAR 0 8
64463: DEC
64464: ST_TO_ADDR
64465: LD_VAR 0 9
64469: PUSH
64470: FOR_TO
64471: IFFALSE 64572
// for _y = min_y to max_y do
64473: LD_ADDR_VAR 0 6
64477: PUSH
64478: DOUBLE
64479: LD_VAR 0 7
64483: DEC
64484: ST_TO_ADDR
64485: LD_VAR 0 10
64489: PUSH
64490: FOR_TO
64491: IFFALSE 64568
// begin if not ValidHex ( _x , _y ) then
64493: LD_VAR 0 5
64497: PPUSH
64498: LD_VAR 0 6
64502: PPUSH
64503: CALL_OW 488
64507: NOT
64508: IFFALSE 64512
// continue ;
64510: GO 64490
// if GetResourceTypeXY ( _x , _y ) then
64512: LD_VAR 0 5
64516: PPUSH
64517: LD_VAR 0 6
64521: PPUSH
64522: CALL_OW 283
64526: IFFALSE 64566
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64528: LD_ADDR_VAR 0 4
64532: PUSH
64533: LD_VAR 0 4
64537: PPUSH
64538: LD_VAR 0 4
64542: PUSH
64543: LD_INT 1
64545: PLUS
64546: PPUSH
64547: LD_VAR 0 5
64551: PUSH
64552: LD_VAR 0 6
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PPUSH
64561: CALL_OW 1
64565: ST_TO_ADDR
// end ;
64566: GO 64490
64568: POP
64569: POP
64570: GO 64470
64572: POP
64573: POP
// end ;
64574: LD_VAR 0 4
64578: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64579: LD_INT 0
64581: PPUSH
64582: PPUSH
64583: PPUSH
64584: PPUSH
64585: PPUSH
64586: PPUSH
64587: PPUSH
64588: PPUSH
// if not units then
64589: LD_VAR 0 1
64593: NOT
64594: IFFALSE 64598
// exit ;
64596: GO 65122
// result := UnitFilter ( units , [ f_ok ] ) ;
64598: LD_ADDR_VAR 0 3
64602: PUSH
64603: LD_VAR 0 1
64607: PPUSH
64608: LD_INT 50
64610: PUSH
64611: EMPTY
64612: LIST
64613: PPUSH
64614: CALL_OW 72
64618: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64619: LD_ADDR_VAR 0 8
64623: PUSH
64624: LD_VAR 0 1
64628: PUSH
64629: LD_INT 1
64631: ARRAY
64632: PPUSH
64633: CALL_OW 255
64637: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64638: LD_ADDR_VAR 0 10
64642: PUSH
64643: LD_INT 29
64645: PUSH
64646: LD_INT 91
64648: PUSH
64649: LD_INT 49
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: ST_TO_ADDR
// if not result then
64657: LD_VAR 0 3
64661: NOT
64662: IFFALSE 64666
// exit ;
64664: GO 65122
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64666: LD_ADDR_VAR 0 5
64670: PUSH
64671: LD_INT 81
64673: PUSH
64674: LD_VAR 0 8
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PPUSH
64683: CALL_OW 69
64687: ST_TO_ADDR
// for i in result do
64688: LD_ADDR_VAR 0 4
64692: PUSH
64693: LD_VAR 0 3
64697: PUSH
64698: FOR_IN
64699: IFFALSE 65120
// begin tag := GetTag ( i ) + 1 ;
64701: LD_ADDR_VAR 0 9
64705: PUSH
64706: LD_VAR 0 4
64710: PPUSH
64711: CALL_OW 110
64715: PUSH
64716: LD_INT 1
64718: PLUS
64719: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64720: LD_ADDR_VAR 0 7
64724: PUSH
64725: LD_VAR 0 4
64729: PPUSH
64730: CALL_OW 250
64734: PPUSH
64735: LD_VAR 0 4
64739: PPUSH
64740: CALL_OW 251
64744: PPUSH
64745: LD_INT 6
64747: PPUSH
64748: CALL 64321 0 3
64752: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64753: LD_VAR 0 4
64757: PPUSH
64758: CALL_OW 247
64762: PUSH
64763: LD_INT 2
64765: EQUAL
64766: PUSH
64767: LD_VAR 0 7
64771: AND
64772: PUSH
64773: LD_VAR 0 4
64777: PPUSH
64778: CALL_OW 264
64782: PUSH
64783: LD_VAR 0 10
64787: IN
64788: NOT
64789: AND
64790: IFFALSE 64829
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64792: LD_VAR 0 4
64796: PPUSH
64797: LD_VAR 0 7
64801: PUSH
64802: LD_INT 1
64804: ARRAY
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: PPUSH
64810: LD_VAR 0 7
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PUSH
64819: LD_INT 2
64821: ARRAY
64822: PPUSH
64823: CALL_OW 116
64827: GO 65118
// if path > tag then
64829: LD_VAR 0 2
64833: PUSH
64834: LD_VAR 0 9
64838: GREATER
64839: IFFALSE 65047
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64841: LD_ADDR_VAR 0 6
64845: PUSH
64846: LD_VAR 0 5
64850: PPUSH
64851: LD_INT 91
64853: PUSH
64854: LD_VAR 0 4
64858: PUSH
64859: LD_INT 8
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: PPUSH
64867: CALL_OW 72
64871: ST_TO_ADDR
// if nearEnemy then
64872: LD_VAR 0 6
64876: IFFALSE 64945
// begin if GetWeapon ( i ) = ru_time_lapser then
64878: LD_VAR 0 4
64882: PPUSH
64883: CALL_OW 264
64887: PUSH
64888: LD_INT 49
64890: EQUAL
64891: IFFALSE 64919
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64893: LD_VAR 0 4
64897: PPUSH
64898: LD_VAR 0 6
64902: PPUSH
64903: LD_VAR 0 4
64907: PPUSH
64908: CALL_OW 74
64912: PPUSH
64913: CALL_OW 112
64917: GO 64943
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64919: LD_VAR 0 4
64923: PPUSH
64924: LD_VAR 0 6
64928: PPUSH
64929: LD_VAR 0 4
64933: PPUSH
64934: CALL_OW 74
64938: PPUSH
64939: CALL_OW 115
// end else
64943: GO 65045
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64945: LD_VAR 0 4
64949: PPUSH
64950: LD_VAR 0 2
64954: PUSH
64955: LD_VAR 0 9
64959: ARRAY
64960: PUSH
64961: LD_INT 1
64963: ARRAY
64964: PPUSH
64965: LD_VAR 0 2
64969: PUSH
64970: LD_VAR 0 9
64974: ARRAY
64975: PUSH
64976: LD_INT 2
64978: ARRAY
64979: PPUSH
64980: CALL_OW 297
64984: PUSH
64985: LD_INT 6
64987: GREATER
64988: IFFALSE 65031
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64990: LD_VAR 0 4
64994: PPUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_VAR 0 9
65004: ARRAY
65005: PUSH
65006: LD_INT 1
65008: ARRAY
65009: PPUSH
65010: LD_VAR 0 2
65014: PUSH
65015: LD_VAR 0 9
65019: ARRAY
65020: PUSH
65021: LD_INT 2
65023: ARRAY
65024: PPUSH
65025: CALL_OW 114
65029: GO 65045
// SetTag ( i , tag ) ;
65031: LD_VAR 0 4
65035: PPUSH
65036: LD_VAR 0 9
65040: PPUSH
65041: CALL_OW 109
// end else
65045: GO 65118
// if enemy then
65047: LD_VAR 0 5
65051: IFFALSE 65118
// begin if GetWeapon ( i ) = ru_time_lapser then
65053: LD_VAR 0 4
65057: PPUSH
65058: CALL_OW 264
65062: PUSH
65063: LD_INT 49
65065: EQUAL
65066: IFFALSE 65094
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65068: LD_VAR 0 4
65072: PPUSH
65073: LD_VAR 0 5
65077: PPUSH
65078: LD_VAR 0 4
65082: PPUSH
65083: CALL_OW 74
65087: PPUSH
65088: CALL_OW 112
65092: GO 65118
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65094: LD_VAR 0 4
65098: PPUSH
65099: LD_VAR 0 5
65103: PPUSH
65104: LD_VAR 0 4
65108: PPUSH
65109: CALL_OW 74
65113: PPUSH
65114: CALL_OW 115
// end ; end ;
65118: GO 64698
65120: POP
65121: POP
// end ;
65122: LD_VAR 0 3
65126: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65127: LD_INT 0
65129: PPUSH
65130: PPUSH
65131: PPUSH
// if not unit or IsInUnit ( unit ) then
65132: LD_VAR 0 1
65136: NOT
65137: PUSH
65138: LD_VAR 0 1
65142: PPUSH
65143: CALL_OW 310
65147: OR
65148: IFFALSE 65152
// exit ;
65150: GO 65243
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65152: LD_ADDR_VAR 0 4
65156: PUSH
65157: LD_VAR 0 1
65161: PPUSH
65162: CALL_OW 250
65166: PPUSH
65167: LD_VAR 0 2
65171: PPUSH
65172: LD_INT 1
65174: PPUSH
65175: CALL_OW 272
65179: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65180: LD_ADDR_VAR 0 5
65184: PUSH
65185: LD_VAR 0 1
65189: PPUSH
65190: CALL_OW 251
65194: PPUSH
65195: LD_VAR 0 2
65199: PPUSH
65200: LD_INT 1
65202: PPUSH
65203: CALL_OW 273
65207: ST_TO_ADDR
// if ValidHex ( x , y ) then
65208: LD_VAR 0 4
65212: PPUSH
65213: LD_VAR 0 5
65217: PPUSH
65218: CALL_OW 488
65222: IFFALSE 65243
// ComTurnXY ( unit , x , y ) ;
65224: LD_VAR 0 1
65228: PPUSH
65229: LD_VAR 0 4
65233: PPUSH
65234: LD_VAR 0 5
65238: PPUSH
65239: CALL_OW 118
// end ;
65243: LD_VAR 0 3
65247: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65248: LD_INT 0
65250: PPUSH
65251: PPUSH
// result := false ;
65252: LD_ADDR_VAR 0 3
65256: PUSH
65257: LD_INT 0
65259: ST_TO_ADDR
// if not units then
65260: LD_VAR 0 2
65264: NOT
65265: IFFALSE 65269
// exit ;
65267: GO 65314
// for i in units do
65269: LD_ADDR_VAR 0 4
65273: PUSH
65274: LD_VAR 0 2
65278: PUSH
65279: FOR_IN
65280: IFFALSE 65312
// if See ( side , i ) then
65282: LD_VAR 0 1
65286: PPUSH
65287: LD_VAR 0 4
65291: PPUSH
65292: CALL_OW 292
65296: IFFALSE 65310
// begin result := true ;
65298: LD_ADDR_VAR 0 3
65302: PUSH
65303: LD_INT 1
65305: ST_TO_ADDR
// exit ;
65306: POP
65307: POP
65308: GO 65314
// end ;
65310: GO 65279
65312: POP
65313: POP
// end ;
65314: LD_VAR 0 3
65318: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65319: LD_INT 0
65321: PPUSH
65322: PPUSH
65323: PPUSH
65324: PPUSH
// if not unit or not points then
65325: LD_VAR 0 1
65329: NOT
65330: PUSH
65331: LD_VAR 0 2
65335: NOT
65336: OR
65337: IFFALSE 65341
// exit ;
65339: GO 65431
// dist := 99999 ;
65341: LD_ADDR_VAR 0 5
65345: PUSH
65346: LD_INT 99999
65348: ST_TO_ADDR
// for i in points do
65349: LD_ADDR_VAR 0 4
65353: PUSH
65354: LD_VAR 0 2
65358: PUSH
65359: FOR_IN
65360: IFFALSE 65429
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65362: LD_ADDR_VAR 0 6
65366: PUSH
65367: LD_VAR 0 1
65371: PPUSH
65372: LD_VAR 0 4
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PPUSH
65381: LD_VAR 0 4
65385: PUSH
65386: LD_INT 2
65388: ARRAY
65389: PPUSH
65390: CALL_OW 297
65394: ST_TO_ADDR
// if tmpDist < dist then
65395: LD_VAR 0 6
65399: PUSH
65400: LD_VAR 0 5
65404: LESS
65405: IFFALSE 65427
// begin result := i ;
65407: LD_ADDR_VAR 0 3
65411: PUSH
65412: LD_VAR 0 4
65416: ST_TO_ADDR
// dist := tmpDist ;
65417: LD_ADDR_VAR 0 5
65421: PUSH
65422: LD_VAR 0 6
65426: ST_TO_ADDR
// end ; end ;
65427: GO 65359
65429: POP
65430: POP
// end ;
65431: LD_VAR 0 3
65435: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65436: LD_INT 0
65438: PPUSH
// uc_side := side ;
65439: LD_ADDR_OWVAR 20
65443: PUSH
65444: LD_VAR 0 1
65448: ST_TO_ADDR
// uc_nation := 3 ;
65449: LD_ADDR_OWVAR 21
65453: PUSH
65454: LD_INT 3
65456: ST_TO_ADDR
// vc_chassis := 25 ;
65457: LD_ADDR_OWVAR 37
65461: PUSH
65462: LD_INT 25
65464: ST_TO_ADDR
// vc_engine := engine_siberite ;
65465: LD_ADDR_OWVAR 39
65469: PUSH
65470: LD_INT 3
65472: ST_TO_ADDR
// vc_control := control_computer ;
65473: LD_ADDR_OWVAR 38
65477: PUSH
65478: LD_INT 3
65480: ST_TO_ADDR
// vc_weapon := 59 ;
65481: LD_ADDR_OWVAR 40
65485: PUSH
65486: LD_INT 59
65488: ST_TO_ADDR
// result := CreateVehicle ;
65489: LD_ADDR_VAR 0 5
65493: PUSH
65494: CALL_OW 45
65498: ST_TO_ADDR
// SetDir ( result , d ) ;
65499: LD_VAR 0 5
65503: PPUSH
65504: LD_VAR 0 4
65508: PPUSH
65509: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65513: LD_VAR 0 5
65517: PPUSH
65518: LD_VAR 0 2
65522: PPUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: LD_INT 0
65530: PPUSH
65531: CALL_OW 48
// end ;
65535: LD_VAR 0 5
65539: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65540: LD_INT 0
65542: PPUSH
65543: PPUSH
65544: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65545: LD_ADDR_VAR 0 2
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65568: LD_VAR 0 1
65572: NOT
65573: PUSH
65574: LD_VAR 0 1
65578: PPUSH
65579: CALL_OW 264
65583: PUSH
65584: LD_INT 12
65586: PUSH
65587: LD_INT 51
65589: PUSH
65590: LD_INT 32
65592: PUSH
65593: LD_INT 89
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: IN
65602: NOT
65603: OR
65604: IFFALSE 65608
// exit ;
65606: GO 65706
// for i := 1 to 3 do
65608: LD_ADDR_VAR 0 3
65612: PUSH
65613: DOUBLE
65614: LD_INT 1
65616: DEC
65617: ST_TO_ADDR
65618: LD_INT 3
65620: PUSH
65621: FOR_TO
65622: IFFALSE 65704
// begin tmp := GetCargo ( cargo , i ) ;
65624: LD_ADDR_VAR 0 4
65628: PUSH
65629: LD_VAR 0 1
65633: PPUSH
65634: LD_VAR 0 3
65638: PPUSH
65639: CALL_OW 289
65643: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65644: LD_ADDR_VAR 0 2
65648: PUSH
65649: LD_VAR 0 2
65653: PPUSH
65654: LD_VAR 0 3
65658: PPUSH
65659: LD_VAR 0 4
65663: PPUSH
65664: CALL_OW 1
65668: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65669: LD_ADDR_VAR 0 2
65673: PUSH
65674: LD_VAR 0 2
65678: PPUSH
65679: LD_INT 4
65681: PPUSH
65682: LD_VAR 0 2
65686: PUSH
65687: LD_INT 4
65689: ARRAY
65690: PUSH
65691: LD_VAR 0 4
65695: PLUS
65696: PPUSH
65697: CALL_OW 1
65701: ST_TO_ADDR
// end ;
65702: GO 65621
65704: POP
65705: POP
// end ;
65706: LD_VAR 0 2
65710: RET
// export function Length ( array ) ; begin
65711: LD_INT 0
65713: PPUSH
// result := array + 0 ;
65714: LD_ADDR_VAR 0 2
65718: PUSH
65719: LD_VAR 0 1
65723: PUSH
65724: LD_INT 0
65726: PLUS
65727: ST_TO_ADDR
// end ;
65728: LD_VAR 0 2
65732: RET
// export function PrepareArray ( array ) ; begin
65733: LD_INT 0
65735: PPUSH
// result := array diff 0 ;
65736: LD_ADDR_VAR 0 2
65740: PUSH
65741: LD_VAR 0 1
65745: PUSH
65746: LD_INT 0
65748: DIFF
65749: ST_TO_ADDR
// if not result [ 1 ] then
65750: LD_VAR 0 2
65754: PUSH
65755: LD_INT 1
65757: ARRAY
65758: NOT
65759: IFFALSE 65779
// result := Delete ( result , 1 ) ;
65761: LD_ADDR_VAR 0 2
65765: PUSH
65766: LD_VAR 0 2
65770: PPUSH
65771: LD_INT 1
65773: PPUSH
65774: CALL_OW 3
65778: ST_TO_ADDR
// end ; end_of_file
65779: LD_VAR 0 2
65783: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65784: LD_VAR 0 1
65788: PUSH
65789: LD_INT 200
65791: DOUBLE
65792: GREATEREQUAL
65793: IFFALSE 65801
65795: LD_INT 299
65797: DOUBLE
65798: LESSEQUAL
65799: IFTRUE 65803
65801: GO 65835
65803: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65804: LD_VAR 0 1
65808: PPUSH
65809: LD_VAR 0 2
65813: PPUSH
65814: LD_VAR 0 3
65818: PPUSH
65819: LD_VAR 0 4
65823: PPUSH
65824: LD_VAR 0 5
65828: PPUSH
65829: CALL 20686 0 5
65833: GO 65912
65835: LD_INT 300
65837: DOUBLE
65838: GREATEREQUAL
65839: IFFALSE 65847
65841: LD_INT 399
65843: DOUBLE
65844: LESSEQUAL
65845: IFTRUE 65849
65847: GO 65911
65849: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65850: LD_VAR 0 1
65854: PPUSH
65855: LD_VAR 0 2
65859: PPUSH
65860: LD_VAR 0 3
65864: PPUSH
65865: LD_VAR 0 4
65869: PPUSH
65870: LD_VAR 0 5
65874: PPUSH
65875: LD_VAR 0 6
65879: PPUSH
65880: LD_VAR 0 7
65884: PPUSH
65885: LD_VAR 0 8
65889: PPUSH
65890: LD_VAR 0 9
65894: PPUSH
65895: LD_VAR 0 10
65899: PPUSH
65900: LD_VAR 0 11
65904: PPUSH
65905: CALL 17019 0 11
65909: GO 65912
65911: POP
// end ;
65912: PPOPN 11
65914: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65915: LD_VAR 0 1
65919: PPUSH
65920: LD_VAR 0 2
65924: PPUSH
65925: LD_VAR 0 3
65929: PPUSH
65930: LD_VAR 0 4
65934: PPUSH
65935: LD_VAR 0 5
65939: PPUSH
65940: CALL 20422 0 5
// end ; end_of_file
65944: PPOPN 5
65946: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65947: LD_VAR 0 1
65951: PPUSH
65952: LD_VAR 0 2
65956: PPUSH
65957: LD_VAR 0 3
65961: PPUSH
65962: LD_VAR 0 4
65966: PPUSH
65967: LD_VAR 0 5
65971: PPUSH
65972: LD_VAR 0 6
65976: PPUSH
65977: CALL 4712 0 6
// end ;
65981: PPOPN 6
65983: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65984: LD_INT 0
65986: PPUSH
// begin if not units then
65987: LD_VAR 0 1
65991: NOT
65992: IFFALSE 65996
// exit ;
65994: GO 65996
// end ;
65996: PPOPN 7
65998: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65999: CALL 4683 0 0
// end ;
66003: PPOPN 1
66005: END
