// starting begin InitSettings ;
   0: CALL 2932 0 0
// InitGame ;
   4: CALL 2970 0 0
// InitDisplay ;
   8: CALL 9509 0 0
// end ; end_of_file
  12: END
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// if pos < 1 then
  19: LD_VAR 0 2
  23: PUSH
  24: LD_INT 1
  26: LESS
  27: IFFALSE 31
// exit ;
  29: GO 334
// if pos = 1 then
  31: LD_VAR 0 2
  35: PUSH
  36: LD_INT 1
  38: EQUAL
  39: IFFALSE 72
// result := Replace ( arr , pos [ 1 ] , value ) else
  41: LD_ADDR_VAR 0 4
  45: PUSH
  46: LD_VAR 0 1
  50: PPUSH
  51: LD_VAR 0 2
  55: PUSH
  56: LD_INT 1
  58: ARRAY
  59: PPUSH
  60: LD_VAR 0 3
  64: PPUSH
  65: CALL_OW 1
  69: ST_TO_ADDR
  70: GO 334
// begin tmp := arr ;
  72: LD_ADDR_VAR 0 6
  76: PUSH
  77: LD_VAR 0 1
  81: ST_TO_ADDR
// s_arr := [ tmp ] ;
  82: LD_ADDR_VAR 0 7
  86: PUSH
  87: LD_VAR 0 6
  91: PUSH
  92: EMPTY
  93: LIST
  94: ST_TO_ADDR
// for i = 1 to pos - 1 do
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: DOUBLE
 101: LD_INT 1
 103: DEC
 104: ST_TO_ADDR
 105: LD_VAR 0 2
 109: PUSH
 110: LD_INT 1
 112: MINUS
 113: PUSH
 114: FOR_TO
 115: IFFALSE 160
// begin tmp := tmp [ pos [ i ] ] ;
 117: LD_ADDR_VAR 0 6
 121: PUSH
 122: LD_VAR 0 6
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: LD_VAR 0 5
 136: ARRAY
 137: ARRAY
 138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 139: LD_ADDR_VAR 0 7
 143: PUSH
 144: LD_VAR 0 7
 148: PUSH
 149: LD_VAR 0 6
 153: PUSH
 154: EMPTY
 155: LIST
 156: ADD
 157: ST_TO_ADDR
// end ;
 158: GO 114
 160: POP
 161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 162: LD_ADDR_VAR 0 6
 166: PUSH
 167: LD_VAR 0 6
 171: PPUSH
 172: LD_VAR 0 2
 176: PUSH
 177: LD_VAR 0 2
 181: ARRAY
 182: PPUSH
 183: LD_VAR 0 3
 187: PPUSH
 188: CALL_OW 1
 192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 193: LD_ADDR_VAR 0 7
 197: PUSH
 198: LD_VAR 0 7
 202: PPUSH
 203: LD_VAR 0 7
 207: PPUSH
 208: LD_VAR 0 6
 212: PPUSH
 213: CALL_OW 1
 217: ST_TO_ADDR
// for i = s_arr downto 2 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_VAR 0 7
 228: INC
 229: ST_TO_ADDR
 230: LD_INT 2
 232: PUSH
 233: FOR_DOWNTO
 234: IFFALSE 318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
 236: LD_ADDR_VAR 0 6
 240: PUSH
 241: LD_VAR 0 7
 245: PUSH
 246: LD_VAR 0 5
 250: PUSH
 251: LD_INT 1
 253: MINUS
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 2
 260: PUSH
 261: LD_VAR 0 5
 265: PUSH
 266: LD_INT 1
 268: MINUS
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 7
 275: PUSH
 276: LD_VAR 0 5
 280: ARRAY
 281: PPUSH
 282: CALL_OW 1
 286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
 287: LD_ADDR_VAR 0 7
 291: PUSH
 292: LD_VAR 0 7
 296: PPUSH
 297: LD_VAR 0 5
 301: PUSH
 302: LD_INT 1
 304: MINUS
 305: PPUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 1
 315: ST_TO_ADDR
// end ;
 316: GO 233
 318: POP
 319: POP
// result := s_arr [ 1 ] ;
 320: LD_ADDR_VAR 0 4
 324: PUSH
 325: LD_VAR 0 7
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: ST_TO_ADDR
// end ; end ;
 334: LD_VAR 0 4
 338: RET
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// team := [ ] ;
 345: LD_ADDR_VAR 0 8
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// playerSquad := [ ] ;
 352: LD_ADDR_EXP 12
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// uc_side := nation ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_VAR 0 1
 368: ST_TO_ADDR
// uc_nation := nation ;
 369: LD_ADDR_OWVAR 21
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// hc_importance := 100 ;
 379: LD_ADDR_OWVAR 32
 383: PUSH
 384: LD_INT 100
 386: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: LD_VAR 0 8
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 44
 419: PPUSH
 420: CALL_OW 2
 424: ST_TO_ADDR
// hc_importance := 0 ;
 425: LD_ADDR_OWVAR 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to num - 1 do
 433: LD_ADDR_VAR 0 7
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: MINUS
 451: PUSH
 452: FOR_TO
 453: IFFALSE 511
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 7
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 4
 470: DIVREAL
 471: DIV
 472: PUSH
 473: LD_INT 1
 475: PLUS
 476: PPUSH
 477: LD_VAR 0 2
 481: PPUSH
 482: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: LD_VAR 0 8
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 44
 503: PPUSH
 504: CALL_OW 2
 508: ST_TO_ADDR
// end ;
 509: GO 452
 511: POP
 512: POP
// for i in team do
 513: LD_ADDR_VAR 0 7
 517: PUSH
 518: LD_VAR 0 8
 522: PUSH
 523: FOR_IN
 524: IFFALSE 623
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 526: LD_VAR 0 7
 530: PPUSH
 531: LD_VAR 0 4
 535: PPUSH
 536: LD_VAR 0 5
 540: PPUSH
 541: LD_INT 8
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 50
// c := c + 1 ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: LD_VAR 0 9
 560: PUSH
 561: LD_INT 1
 563: PLUS
 564: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 565: LD_VAR 0 7
 569: PPUSH
 570: LD_STRING grave
 572: PUSH
 573: LD_VAR 0 9
 577: STR
 578: PPUSH
 579: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 583: LD_ADDR_EXP 12
 587: PUSH
 588: LD_EXP 12
 592: PPUSH
 593: LD_VAR 0 9
 597: PPUSH
 598: LD_VAR 0 7
 602: PUSH
 603: LD_STRING grave
 605: PUSH
 606: LD_VAR 0 9
 610: STR
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 2
 620: ST_TO_ADDR
// end ;
 621: GO 523
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 6
 629: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// for i = 1 to type_allowed do
 635: LD_ADDR_VAR 0 7
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 790
// while ( num [ i ] > 0 ) do
 653: LD_VAR 0 1
 657: PUSH
 658: LD_VAR 0 7
 662: ARRAY
 663: PUSH
 664: LD_INT 0
 666: GREATER
 667: IFFALSE 788
// begin if num [ i ] > 5 then
 669: LD_VAR 0 1
 673: PUSH
 674: LD_VAR 0 7
 678: ARRAY
 679: PUSH
 680: LD_INT 5
 682: GREATER
 683: IFFALSE 695
// n := 5 else
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_INT 5
 692: ST_TO_ADDR
 693: GO 711
// n := num [ i ] ;
 695: LD_ADDR_VAR 0 8
 699: PUSH
 700: LD_VAR 0 1
 704: PUSH
 705: LD_VAR 0 7
 709: ARRAY
 710: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 711: LD_VAR 0 2
 715: PUSH
 716: LD_VAR 0 7
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 8
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_VAR 0 4
 736: PPUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_VAR 0 1
 758: PPUSH
 759: LD_VAR 0 7
 763: PPUSH
 764: LD_VAR 0 1
 768: PUSH
 769: LD_VAR 0 7
 773: ARRAY
 774: PUSH
 775: LD_VAR 0 8
 779: MINUS
 780: PPUSH
 781: CALL_OW 1
 785: ST_TO_ADDR
// end ;
 786: GO 653
 788: GO 650
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 6
 796: RET
// export function AddPoints ( p ) ; begin
 797: LD_INT 0
 799: PPUSH
// points := points + p ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_EXP 2
 809: PUSH
 810: LD_VAR 0 1
 814: PLUS
 815: ST_TO_ADDR
// end ;
 816: LD_VAR 0 2
 820: RET
// export function LoadColors ; var file ; begin
 821: LD_INT 0
 823: PPUSH
 824: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 825: CALL_OW 545
 829: PUSH
 830: LD_INT 1
 832: DOUBLE
 833: GREATEREQUAL
 834: IFFALSE 842
 836: LD_INT 3
 838: DOUBLE
 839: LESSEQUAL
 840: IFTRUE 850
 842: LD_INT 12
 844: DOUBLE
 845: EQUAL
 846: IFTRUE 850
 848: GO 861
 850: POP
// file = colors.txt ; 4 .. 5 :
 851: LD_ADDR_VAR 0 2
 855: PUSH
 856: LD_STRING colors.txt
 858: ST_TO_ADDR
 859: GO 937
 861: LD_INT 4
 863: DOUBLE
 864: GREATEREQUAL
 865: IFFALSE 873
 867: LD_INT 5
 869: DOUBLE
 870: LESSEQUAL
 871: IFTRUE 875
 873: GO 886
 875: POP
// file = colors-spring.txt ; 6 .. 8 :
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_STRING colors-spring.txt
 883: ST_TO_ADDR
 884: GO 937
 886: LD_INT 6
 888: DOUBLE
 889: GREATEREQUAL
 890: IFFALSE 898
 892: LD_INT 8
 894: DOUBLE
 895: LESSEQUAL
 896: IFTRUE 900
 898: GO 911
 900: POP
// file = colors-summer.txt ; 9 .. 11 :
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_STRING colors-summer.txt
 908: ST_TO_ADDR
 909: GO 937
 911: LD_INT 9
 913: DOUBLE
 914: GREATEREQUAL
 915: IFFALSE 923
 917: LD_INT 11
 919: DOUBLE
 920: LESSEQUAL
 921: IFTRUE 925
 923: GO 936
 925: POP
// file = colors-autumn.txt ; end ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_STRING colors-autumn.txt
 933: ST_TO_ADDR
 934: GO 937
 936: POP
// LoadColorsTxt ( file ) ;
 937: LD_VAR 0 2
 941: PPUSH
 942: CALL_OW 544
// end ;
 946: LD_VAR 0 1
 950: RET
// export function TestColor ; var i ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
// i = 1 ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 963: LD_INT 35
 965: PPUSH
 966: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 970: LD_STRING colors-spring.txt
 972: PUSH
 973: LD_STRING colors-summer.txt
 975: PUSH
 976: LD_STRING colors-autumn.txt
 978: PUSH
 979: LD_STRING colors.txt
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 4
 995: MOD
 996: PUSH
 997: LD_INT 1
 999: PLUS
1000: ARRAY
1001: PPUSH
1002: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
1006: LD_ADDR_OWVAR 47
1010: PUSH
1011: LD_STRING Wiosna
1013: PUSH
1014: LD_STRING Lato
1016: PUSH
1017: LD_STRING Jesien
1019: PUSH
1020: LD_STRING Zima
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: LD_INT 4
1036: MOD
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// i := i + 1 ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ST_TO_ADDR
// end until false ;
1057: LD_INT 0
1059: IFFALSE 963
// end ;
1061: LD_VAR 0 1
1065: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
1066: LD_INT 0
1068: PPUSH
// if x1 = x2 and y1 > y2 then
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 3
1078: EQUAL
1079: PUSH
1080: LD_VAR 0 2
1084: PUSH
1085: LD_VAR 0 4
1089: GREATER
1090: AND
1091: IFFALSE 1101
// result := 0 ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_INT 0
1100: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_VAR 0 3
1110: LESS
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_VAR 0 4
1121: EQUAL
1122: AND
1123: IFFALSE 1133
// result := 1 ;
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
1133: LD_VAR 0 1
1137: PUSH
1138: LD_VAR 0 3
1142: LESS
1143: PUSH
1144: LD_VAR 0 2
1148: PUSH
1149: LD_VAR 0 4
1153: LESS
1154: AND
1155: IFFALSE 1165
// result := 2 ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_VAR 0 3
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: LESS
1186: AND
1187: IFFALSE 1197
// result := 3 ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_INT 3
1196: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
1197: LD_VAR 0 1
1201: PUSH
1202: LD_VAR 0 3
1206: GREATER
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 4
1217: EQUAL
1218: AND
1219: IFFALSE 1229
// result := 4 ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_INT 4
1228: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
1229: LD_VAR 0 1
1233: PUSH
1234: LD_VAR 0 3
1238: GREATER
1239: PUSH
1240: LD_VAR 0 2
1244: PUSH
1245: LD_VAR 0 4
1249: GREATER
1250: AND
1251: IFFALSE 1261
// result := 5 ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_INT 5
1260: ST_TO_ADDR
// end ;
1261: LD_VAR 0 5
1265: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_OWVAR 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 21
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// for i = 1 to amount do
1308: LD_ADDR_VAR 0 3
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 1
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1405
// begin pep := rand ( 1 , team ) ;
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 4
1338: PPUSH
1339: CALL_OW 12
1343: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1344: LD_VAR 0 4
1348: PUSH
1349: LD_VAR 0 5
1353: ARRAY
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 12
1365: PPUSH
1366: LD_INT 1000
1368: PPUSH
1369: LD_INT 10000
1371: PPUSH
1372: CALL_OW 12
1376: PPUSH
1377: CALL_OW 492
// team := team diff team [ pep ] ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_VAR 0 4
1395: PUSH
1396: LD_VAR 0 5
1400: ARRAY
1401: DIFF
1402: ST_TO_ADDR
// end ;
1403: GO 1323
1405: POP
1406: POP
// end ;
1407: LD_VAR 0 2
1411: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1425: LD_ADDR_VAR 0 5
1429: PUSH
1430: LD_INT 7
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_INT 6
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 517
1456: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1559
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1479: LD_ADDR_VAR 0 7
1483: PUSH
1484: LD_VAR 0 7
1488: PPUSH
1489: LD_VAR 0 7
1493: PUSH
1494: LD_INT 1
1496: PLUS
1497: PPUSH
1498: LD_VAR 0 5
1502: PUSH
1503: LD_INT 1
1505: ARRAY
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PPUSH
1513: CALL_OW 1
1517: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: LD_VAR 0 7
1527: PPUSH
1528: LD_VAR 0 7
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PUSH
1546: LD_VAR 0 3
1550: ARRAY
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1476
1559: POP
1560: POP
// uc_side := 4 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 4
1568: ST_TO_ADDR
// case strenght of 1 .. 10 :
1569: LD_VAR 0 1
1573: PUSH
1574: LD_INT 1
1576: DOUBLE
1577: GREATEREQUAL
1578: IFFALSE 1586
1580: LD_INT 10
1582: DOUBLE
1583: LESSEQUAL
1584: IFTRUE 1588
1586: GO 1650
1588: POP
// begin uc_nation := 0 ;
1589: LD_ADDR_OWVAR 21
1593: PUSH
1594: LD_INT 0
1596: ST_TO_ADDR
// for i = 1 to 20 do
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 20
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1646
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 15
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 380
// result := result ^ CreateHuman ;
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: CALL_OW 44
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1610
1646: POP
1647: POP
// end ; 11 .. 40 :
1648: GO 1837
1650: LD_INT 11
1652: DOUBLE
1653: GREATEREQUAL
1654: IFFALSE 1662
1656: LD_INT 40
1658: DOUBLE
1659: LESSEQUAL
1660: IFTRUE 1664
1662: GO 1743
1664: POP
// begin uc_nation := 1 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 1
1672: ST_TO_ADDR
// for i = 1 to 20 do
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 20
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1739
// begin vc_chassis := us_medium_tracked ;
1689: LD_ADDR_OWVAR 37
1693: PUSH
1694: LD_INT 3
1696: ST_TO_ADDR
// vc_engine := engine_siberite ;
1697: LD_ADDR_OWVAR 39
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// vc_control := control_computer ;
1705: LD_ADDR_OWVAR 38
1709: PUSH
1710: LD_INT 3
1712: ST_TO_ADDR
// vc_weapon := us_laser ;
1713: LD_ADDR_OWVAR 40
1717: PUSH
1718: LD_INT 9
1720: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: CALL_OW 45
1735: ADD
1736: ST_TO_ADDR
// end ;
1737: GO 1686
1739: POP
1740: POP
// end ; 41 .. 100 :
1741: GO 1837
1743: LD_INT 41
1745: DOUBLE
1746: GREATEREQUAL
1747: IFFALSE 1755
1749: LD_INT 100
1751: DOUBLE
1752: LESSEQUAL
1753: IFTRUE 1757
1755: GO 1836
1757: POP
// begin uc_nation := 1 ;
1758: LD_ADDR_OWVAR 21
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// for i = 1 to 20 do
1766: LD_ADDR_VAR 0 3
1770: PUSH
1771: DOUBLE
1772: LD_INT 1
1774: DEC
1775: ST_TO_ADDR
1776: LD_INT 20
1778: PUSH
1779: FOR_TO
1780: IFFALSE 1832
// begin vc_chassis := us_morphling ;
1782: LD_ADDR_OWVAR 37
1786: PUSH
1787: LD_INT 5
1789: ST_TO_ADDR
// vc_engine := engine_siberite ;
1790: LD_ADDR_OWVAR 39
1794: PUSH
1795: LD_INT 3
1797: ST_TO_ADDR
// vc_control := control_computer ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_INT 3
1805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1806: LD_ADDR_OWVAR 40
1810: PUSH
1811: LD_INT 10
1813: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: CALL_OW 45
1828: ADD
1829: ST_TO_ADDR
// end ;
1830: GO 1779
1832: POP
1833: POP
// end ; end ;
1834: GO 1837
1836: POP
// for i in result do
1837: LD_ADDR_VAR 0 3
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: FOR_IN
1848: IFFALSE 2065
// begin x := base_area [ 1 ] [ 1 ] ;
1850: LD_ADDR_VAR 0 9
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1868: LD_ADDR_VAR 0 10
1872: PUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 2
1880: ARRAY
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1886: LD_ADDR_VAR 0 8
1890: PUSH
1891: LD_VAR 0 7
1895: PPUSH
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 10
1905: PPUSH
1906: CALL_OW 439
1910: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 10
1925: PPUSH
1926: LD_VAR 0 8
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_VAR 0 8
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: CALL 1066 0 4
1948: PPUSH
1949: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: CALL_OW 48
// ComHold ( i ) ;
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 140
// for c = 1 to 2 do
1984: LD_ADDR_VAR 0 11
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_INT 2
1996: PUSH
1997: FOR_TO
1998: IFFALSE 2061
// begin tmp := base_area [ c ] ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_VAR 0 11
2014: ARRAY
2015: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
2016: LD_ADDR_VAR 0 12
2020: PUSH
2021: LD_VAR 0 12
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 3
2033: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
2034: LD_ADDR_VAR 0 6
2038: PUSH
2039: LD_VAR 0 6
2043: PPUSH
2044: LD_VAR 0 11
2048: PPUSH
2049: LD_VAR 0 12
2053: PPUSH
2054: CALL_OW 1
2058: ST_TO_ADDR
// end ;
2059: GO 1997
2061: POP
2062: POP
// end ;
2063: GO 1847
2065: POP
2066: POP
// end ;
2067: LD_VAR 0 2
2071: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if graveyard = 0 then
2079: LD_EXP 8
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2091
// exit ;
2089: GO 2254
// i := rand ( 1 , graveyard ) ;
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_EXP 8
2103: PPUSH
2104: CALL_OW 12
2108: ST_TO_ADDR
// un := graveyard [ i ] ;
2109: LD_ADDR_VAR 0 4
2113: PUSH
2114: LD_EXP 8
2118: PUSH
2119: LD_VAR 0 2
2123: ARRAY
2124: ST_TO_ADDR
// for c in playerSquad do
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 12
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2172
// if un = c [ 1 ] then
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: EQUAL
2152: IFFALSE 2170
// begin new := c [ 2 ] ;
2154: LD_ADDR_VAR 0 5
2158: PUSH
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: ST_TO_ADDR
// break ;
2168: GO 2172
// end ;
2170: GO 2135
2172: POP
2173: POP
// uc_side := your_side ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_OWVAR 2
2183: ST_TO_ADDR
// uc_nation := playerNation ;
2184: LD_ADDR_OWVAR 21
2188: PUSH
2189: LD_EXP 6
2193: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
2194: LD_ADDR_VAR 0 4
2198: PUSH
2199: LD_VAR 0 5
2203: PPUSH
2204: CALL_OW 34
2208: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_EXP 9
2218: PPUSH
2219: LD_EXP 10
2223: PPUSH
2224: LD_INT 10
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
2234: LD_ADDR_EXP 8
2238: PUSH
2239: LD_EXP 8
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 3
2253: ST_TO_ADDR
// end ;
2254: LD_VAR 0 1
2258: RET
// export function ComEspace ( un ) ; begin
2259: LD_INT 0
2261: PPUSH
// if not IsInArea ( un , zoneOut ) then
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 308
2274: NOT
2275: IFFALSE 2291
// ComMoveToArea ( un , zoneOut ) else
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: CALL_OW 113
2289: GO 2300
// RemoveUnit ( un ) ;
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 64
// end ;
2300: LD_VAR 0 2
2304: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// list := AreaToList ( area , 0 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 517
2329: ST_TO_ADDR
// if not list then
2330: LD_VAR 0 4
2334: NOT
2335: IFFALSE 2339
// exit ;
2337: GO 2501
// for i = 1 to list do
2339: LD_ADDR_VAR 0 6
2343: PUSH
2344: DOUBLE
2345: LD_INT 1
2347: DEC
2348: ST_TO_ADDR
2349: LD_VAR 0 4
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2437
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_VAR 0 6
2389: ARRAY
2390: PPUSH
2391: CALL_OW 1
2395: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2396: LD_ADDR_VAR 0 5
2400: PUSH
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: PLUS
2414: PPUSH
2415: LD_VAR 0 4
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PUSH
2424: LD_VAR 0 6
2428: ARRAY
2429: PPUSH
2430: CALL_OW 1
2434: ST_TO_ADDR
// end ;
2435: GO 2354
2437: POP
2438: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 250
2458: PPUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 251
2468: PPUSH
2469: CALL_OW 439
2473: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_VAR 0 7
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 7
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: CALL_OW 111
// end ;
2501: LD_VAR 0 3
2505: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
// timer := rand ( 2 , 5 ) ;
2511: LD_ADDR_VAR 0 4
2515: PUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 5
2521: PPUSH
2522: CALL_OW 12
2526: ST_TO_ADDR
// while ( timer > 0 ) do
2527: LD_VAR 0 4
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: IFFALSE 2574
// begin SetUnitDisplayNumber ( un , timer ) ;
2537: LD_VAR 0 1
2541: PPUSH
2542: LD_VAR 0 4
2546: PPUSH
2547: CALL_OW 505
// timer := timer - 1 ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: MINUS
2564: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2527
// if timer = 0 then
2574: LD_VAR 0 4
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2631
// for i = 1 to 3 do
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2629
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 250
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 251
2619: PPUSH
2620: LD_INT 10
2622: PPUSH
2623: CALL_OW 453
2627: GO 2597
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 2
2635: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2636: LD_INT 0
2638: PPUSH
// if unit in unreachableList then
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 13
2648: IN
2649: IFFALSE 2667
// unreachableList := unreachableList diff unit ;
2651: LD_ADDR_EXP 13
2655: PUSH
2656: LD_EXP 13
2660: PUSH
2661: LD_VAR 0 1
2665: DIFF
2666: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_VAR 0 3
2681: PPUSH
2682: CALL_OW 428
2686: PPUSH
2687: CALL_OW 115
// Wait ( 1 ) ;
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 67
// if unit in unreachableList then
2698: LD_VAR 0 1
2702: PUSH
2703: LD_EXP 13
2707: IN
2708: IFFALSE 2720
// result := false else
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
2718: GO 2728
// result := true ;
2720: LD_ADDR_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// end ;
2728: LD_VAR 0 4
2732: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 81
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 255
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// if not enemy then
2768: LD_VAR 0 4
2772: NOT
2773: IFFALSE 2777
// exit ;
2775: GO 2927
// if UnitFilter ( enemy , [ f_occupied ] ) then
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 59
2784: PUSH
2785: EMPTY
2786: LIST
2787: PPUSH
2788: CALL_OW 72
2792: IFFALSE 2903
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_VAR 0 4
2803: PPUSH
2804: LD_INT 59
2806: PUSH
2807: EMPTY
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: PPUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 74
2824: ST_TO_ADDR
// x := GetX ( t ) ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 250
2839: ST_TO_ADDR
// y := GetY ( t ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 251
2854: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 6
2864: PPUSH
2865: LD_VAR 0 7
2869: PPUSH
2870: CALL 2636 0 3
2874: NOT
2875: IFFALSE 2901
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 74
2896: PPUSH
2897: CALL_OW 115
// end else
2901: GO 2927
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_VAR 0 1
2917: PPUSH
2918: CALL_OW 74
2922: PPUSH
2923: CALL_OW 115
// end ; end_of_file
2927: LD_VAR 0 2
2931: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2932: LD_INT 0
2934: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2935: LD_ADDR_EXP 3
2939: PUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 426
2947: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2948: LD_ADDR_EXP 6
2952: PUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 426
2960: PUSH
2961: LD_INT 1
2963: MINUS
2964: ST_TO_ADDR
// end ; end_of_file
2965: LD_VAR 0 1
2969: RET
// export function InitGame ; begin
2970: LD_INT 0
2972: PPUSH
// ResetFog ;
2973: CALL_OW 335
// RandomizeAll ;
2977: CALL_OW 11
// LoadColors ;
2981: CALL 821 0 0
// debug := false ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2993: LD_ADDR_EXP 18
2997: PUSH
2998: LD_INT 91
3000: ST_TO_ADDR
// us_artillery := 97 ;
3001: LD_ADDR_EXP 17
3005: PUSH
3006: LD_INT 97
3008: ST_TO_ADDR
// ru_radar := 98 ;
3009: LD_ADDR_EXP 14
3013: PUSH
3014: LD_INT 98
3016: ST_TO_ADDR
// game_started := false ;
3017: LD_ADDR_EXP 7
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// points := 0 ;
3025: LD_ADDR_EXP 2
3029: PUSH
3030: LD_INT 0
3032: ST_TO_ADDR
// waveNumber := 0 ;
3033: LD_ADDR_EXP 5
3037: PUSH
3038: LD_INT 0
3040: ST_TO_ADDR
// timeToNextAttack := 0 ;
3041: LD_ADDR_EXP 4
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// graveyard := [ ] ;
3049: LD_ADDR_EXP 8
3053: PUSH
3054: EMPTY
3055: ST_TO_ADDR
// base_x := 1 ;
3056: LD_ADDR_EXP 9
3060: PUSH
3061: LD_INT 1
3063: ST_TO_ADDR
// base_y := 1 ;
3064: LD_ADDR_EXP 10
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// if difficultyLevel > 2 then
3072: LD_EXP 3
3076: PUSH
3077: LD_INT 2
3079: GREATER
3080: IFFALSE 3095
// SetTech ( 5 , 7 , state_researched ) ;
3082: LD_INT 5
3084: PPUSH
3085: LD_INT 7
3087: PPUSH
3088: LD_INT 2
3090: PPUSH
3091: CALL_OW 322
// if not playerNation then
3095: LD_EXP 6
3099: NOT
3100: IFFALSE 3126
// begin points := 100 ;
3102: LD_ADDR_EXP 2
3106: PUSH
3107: LD_INT 100
3109: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
3110: LD_ADDR_EXP 6
3114: PUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_INT 3
3120: PPUSH
3121: CALL_OW 12
3125: ST_TO_ADDR
// end ; your_side := playerNation ;
3126: LD_ADDR_OWVAR 2
3130: PUSH
3131: LD_EXP 6
3135: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
3136: LD_OWVAR 2
3140: PPUSH
3141: LD_INT 4
3143: PPUSH
3144: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
3148: LD_INT 25
3150: PUSH
3151: LD_INT 20
3153: PUSH
3154: LD_INT 15
3156: PUSH
3157: LD_INT 10
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 3
3170: ARRAY
3171: PUSH
3172: LD_INT 5
3174: PUSH
3175: LD_INT 3
3177: PUSH
3178: LD_INT 2
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_EXP 3
3194: ARRAY
3195: PUSH
3196: LD_INT 5
3198: PUSH
3199: LD_INT 3
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_EXP 3
3218: ARRAY
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 1
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: LIST
3238: PPUSH
3239: LD_INT 88
3241: PPUSH
3242: LD_INT 76
3244: PPUSH
3245: LD_INT 6
3247: PPUSH
3248: CALL 630 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
3252: LD_EXP 6
3256: PPUSH
3257: LD_INT 9
3259: PUSH
3260: LD_INT 7
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 3
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_EXP 3
3279: ARRAY
3280: PPUSH
3281: LD_INT 24
3283: PUSH
3284: LD_INT 16
3286: PUSH
3287: LD_INT 12
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: LD_EXP 3
3303: ARRAY
3304: PPUSH
3305: LD_INT 88
3307: PPUSH
3308: LD_INT 76
3310: PPUSH
3311: CALL 339 0 5
// CenterNowOnXY ( 88 , 76 ) ;
3315: LD_INT 88
3317: PPUSH
3318: LD_INT 76
3320: PPUSH
3321: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
3325: LD_INT 90
3327: PPUSH
3328: LD_INT 79
3330: PPUSH
3331: LD_OWVAR 2
3335: PPUSH
3336: LD_INT 50
3338: NEG
3339: PPUSH
3340: CALL_OW 330
// if debug then
3344: LD_EXP 1
3348: IFFALSE 3359
// FogOff ( your_side ) ;
3350: LD_OWVAR 2
3354: PPUSH
3355: CALL_OW 344
// end ;
3359: LD_VAR 0 1
3363: RET
// every 0 0$01 trigger game_started do var i ;
3364: LD_EXP 7
3368: IFFALSE 3602
3370: GO 3372
3372: DISABLE
3373: LD_INT 0
3375: PPUSH
// begin while ( game_started ) do
3376: LD_EXP 7
3380: IFFALSE 3602
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3382: LD_INT 22
3384: PUSH
3385: LD_INT 7
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PPUSH
3392: CALL_OW 69
3396: PUSH
3397: LD_INT 5
3399: LESS
3400: PUSH
3401: LD_EXP 4
3405: PUSH
3406: LD_INT 0
3408: LESSEQUAL
3409: AND
3410: IFFALSE 3593
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3412: LD_INT 22
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: IFFALSE 3464
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3428: LD_ADDR_VAR 0 1
3432: PUSH
3433: LD_INT 22
3435: PUSH
3436: LD_INT 4
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 69
3447: PUSH
3448: FOR_IN
3449: IFFALSE 3462
// RemoveUnit ( i ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 64
3460: GO 3448
3462: POP
3463: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3464: LD_EXP 5
3468: PUSH
3469: LD_INT 3
3471: MOD
3472: PUSH
3473: LD_INT 0
3475: EQUAL
3476: PUSH
3477: LD_EXP 5
3481: PUSH
3482: LD_INT 10
3484: MOD
3485: PUSH
3486: LD_INT 0
3488: EQUAL
3489: OR
3490: PUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_INT 0
3498: GREATER
3499: AND
3500: IFFALSE 3506
// InitBonus ;
3502: CALL 9606 0 0
// if waveNumber mod 10 = 0 then
3506: LD_EXP 5
3510: PUSH
3511: LD_INT 10
3513: MOD
3514: PUSH
3515: LD_INT 0
3517: EQUAL
3518: IFFALSE 3524
// SaveForQuickRestart ;
3520: CALL_OW 22
// if waveNumber = 100 then
3524: LD_EXP 5
3528: PUSH
3529: LD_INT 100
3531: EQUAL
3532: IFFALSE 3545
// begin FogOff ( your_side ) ;
3534: LD_OWVAR 2
3538: PPUSH
3539: CALL_OW 344
// break ;
3543: GO 3602
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3545: LD_ADDR_EXP 4
3549: PUSH
3550: LD_INT 3150
3552: PPUSH
3553: LD_INT 5250
3555: PPUSH
3556: CALL_OW 12
3560: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3561: LD_EXP 4
3565: PPUSH
3566: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3570: LD_ADDR_EXP 5
3574: PUSH
3575: LD_EXP 5
3579: PUSH
3580: LD_INT 1
3582: PLUS
3583: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3584: LD_EXP 5
3588: PPUSH
3589: CALL 4597 0 1
// end ; Wait ( 0 0$01 ) ;
3593: LD_INT 35
3595: PPUSH
3596: CALL_OW 67
// end ;
3600: GO 3376
// end ;
3602: PPOPN 1
3604: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3605: LD_EXP 4
3609: PUSH
3610: LD_INT 0
3612: GREATER
3613: IFFALSE 3633
3615: GO 3617
3617: DISABLE
// begin enable ;
3618: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3619: LD_ADDR_EXP 4
3623: PUSH
3624: LD_EXP 4
3628: PUSH
3629: LD_INT 35
3631: MINUS
3632: ST_TO_ADDR
// end ; end_of_file
3633: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3634: LD_VAR 0 1
3638: PUSH
3639: LD_EXP 13
3643: IN
3644: NOT
3645: IFFALSE 3676
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3647: LD_ADDR_EXP 13
3651: PUSH
3652: LD_EXP 13
3656: PPUSH
3657: LD_EXP 13
3661: PUSH
3662: LD_INT 1
3664: PLUS
3665: PPUSH
3666: LD_VAR 0 1
3670: PPUSH
3671: CALL_OW 2
3675: ST_TO_ADDR
// end ;
3676: PPOPN 1
3678: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 255
3688: PUSH
3689: LD_OWVAR 2
3693: EQUAL
3694: PUSH
3695: LD_VAR 0 1
3699: PPUSH
3700: CALL_OW 247
3704: PUSH
3705: LD_INT 1
3707: EQUAL
3708: AND
3709: IFFALSE 3740
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3711: LD_ADDR_EXP 8
3715: PUSH
3716: LD_EXP 8
3720: PPUSH
3721: LD_EXP 8
3725: PUSH
3726: LD_INT 1
3728: PLUS
3729: PPUSH
3730: LD_VAR 0 1
3734: PPUSH
3735: CALL_OW 2
3739: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 255
3749: PUSH
3750: LD_INT 7
3752: EQUAL
3753: IFFALSE 4127
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3755: LD_VAR 0 1
3759: PUSH
3760: LD_INT 34
3762: PUSH
3763: LD_INT 91
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PPUSH
3770: CALL_OW 69
3774: IN
3775: IFFALSE 3820
// begin if Rand ( 1 , 100 ) <= 70 then
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 100
3782: PPUSH
3783: CALL_OW 12
3787: PUSH
3788: LD_INT 70
3790: LESSEQUAL
3791: IFFALSE 3820
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 250
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 251
3812: PPUSH
3813: LD_INT 10
3815: PPUSH
3816: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3820: LD_VAR 0 1
3824: PPUSH
3825: CALL_OW 247
3829: PUSH
3830: LD_INT 1
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3838
3836: GO 3972
3838: POP
// begin case GetClass ( un ) of class_apeman :
3839: LD_VAR 0 1
3843: PPUSH
3844: CALL_OW 257
3848: PUSH
3849: LD_INT 12
3851: DOUBLE
3852: EQUAL
3853: IFTRUE 3857
3855: GO 3867
3857: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3858: LD_INT 2
3860: PPUSH
3861: CALL 797 0 1
3865: GO 3970
3867: LD_INT 15
3869: DOUBLE
3870: EQUAL
3871: IFTRUE 3875
3873: GO 3885
3875: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3876: LD_INT 5
3878: PPUSH
3879: CALL 797 0 1
3883: GO 3970
3885: LD_INT 17
3887: DOUBLE
3888: EQUAL
3889: IFTRUE 3893
3891: GO 3903
3893: POP
// AddPoints ( 30 ) ; class_soldier :
3894: LD_INT 30
3896: PPUSH
3897: CALL 797 0 1
3901: GO 3970
3903: LD_INT 1
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 3921
3911: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3912: LD_INT 50
3914: PPUSH
3915: CALL 797 0 1
3919: GO 3970
3921: LD_INT 9
3923: DOUBLE
3924: EQUAL
3925: IFTRUE 3941
3927: LD_INT 5
3929: DOUBLE
3930: EQUAL
3931: IFTRUE 3941
3933: LD_INT 8
3935: DOUBLE
3936: EQUAL
3937: IFTRUE 3941
3939: GO 3951
3941: POP
// AddPoints ( 75 ) ; class_mechanic :
3942: LD_INT 75
3944: PPUSH
3945: CALL 797 0 1
3949: GO 3970
3951: LD_INT 3
3953: DOUBLE
3954: EQUAL
3955: IFTRUE 3959
3957: GO 3969
3959: POP
// AddPoints ( 60 ) ; end ;
3960: LD_INT 60
3962: PPUSH
3963: CALL 797 0 1
3967: GO 3970
3969: POP
// end ; unit_vehicle :
3970: GO 4127
3972: LD_INT 2
3974: DOUBLE
3975: EQUAL
3976: IFTRUE 3980
3978: GO 4126
3980: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3981: LD_VAR 0 1
3985: PPUSH
3986: CALL_OW 265
3990: PUSH
3991: LD_INT 12
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 4011
3997: LD_INT 1
3999: DOUBLE
4000: EQUAL
4001: IFTRUE 4011
4003: LD_INT 11
4005: DOUBLE
4006: EQUAL
4007: IFTRUE 4011
4009: GO 4021
4011: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
4012: LD_INT 100
4014: PPUSH
4015: CALL 797 0 1
4019: GO 4124
4021: LD_INT 13
4023: DOUBLE
4024: EQUAL
4025: IFTRUE 4059
4027: LD_INT 14
4029: DOUBLE
4030: EQUAL
4031: IFTRUE 4059
4033: LD_INT 2
4035: DOUBLE
4036: EQUAL
4037: IFTRUE 4059
4039: LD_INT 3
4041: DOUBLE
4042: EQUAL
4043: IFTRUE 4059
4045: LD_INT 21
4047: DOUBLE
4048: EQUAL
4049: IFTRUE 4059
4051: LD_INT 22
4053: DOUBLE
4054: EQUAL
4055: IFTRUE 4059
4057: GO 4069
4059: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
4060: LD_INT 250
4062: PPUSH
4063: CALL 797 0 1
4067: GO 4124
4069: LD_INT 4
4071: DOUBLE
4072: EQUAL
4073: IFTRUE 4095
4075: LD_INT 5
4077: DOUBLE
4078: EQUAL
4079: IFTRUE 4095
4081: LD_INT 23
4083: DOUBLE
4084: EQUAL
4085: IFTRUE 4095
4087: LD_INT 24
4089: DOUBLE
4090: EQUAL
4091: IFTRUE 4095
4093: GO 4105
4095: POP
// AddPoints ( 500 ) ; 25 :
4096: LD_INT 500
4098: PPUSH
4099: CALL 797 0 1
4103: GO 4124
4105: LD_INT 25
4107: DOUBLE
4108: EQUAL
4109: IFTRUE 4113
4111: GO 4123
4113: POP
// AddPoints ( 1250 ) ; end ;
4114: LD_INT 1250
4116: PPUSH
4117: CALL 797 0 1
4121: GO 4124
4123: POP
// end ; end ;
4124: GO 4127
4126: POP
// end ; end ;
4127: PPOPN 1
4129: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
4130: LD_VAR 0 1
4134: PPUSH
4135: CALL_OW 266
4139: PUSH
4140: LD_INT 0
4142: EQUAL
4143: IFFALSE 4193
// begin base_x := GetX ( b ) ;
4145: LD_ADDR_EXP 9
4149: PUSH
4150: LD_VAR 0 1
4154: PPUSH
4155: CALL_OW 250
4159: ST_TO_ADDR
// base_y := GetY ( b ) ;
4160: LD_ADDR_EXP 10
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 251
4174: ST_TO_ADDR
// base := b ;
4175: LD_ADDR_EXP 11
4179: PUSH
4180: LD_VAR 0 1
4184: ST_TO_ADDR
// game_started := true ;
4185: LD_ADDR_EXP 7
4189: PUSH
4190: LD_INT 1
4192: ST_TO_ADDR
// end ; end ;
4193: PPOPN 1
4195: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 255
4205: PUSH
4206: LD_OWVAR 2
4210: EQUAL
4211: IFFALSE 4215
// exit ;
4213: GO 4362
// if GetType ( un ) = unit_vehicle then
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 247
4224: PUSH
4225: LD_INT 2
4227: EQUAL
4228: IFFALSE 4281
// begin KillUnit ( un ) ;
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 248
4248: PUSH
4249: LD_INT 2
4251: EQUAL
4252: PUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: CALL_OW 264
4262: PUSH
4263: LD_INT 49
4265: PUSH
4266: EMPTY
4267: LIST
4268: IN
4269: OR
4270: IFFALSE 4281
// ExplodeVehicle ( un ) ;
4272: LD_VAR 0 1
4276: PPUSH
4277: CALL 2506 0 1
// end ; if GetType ( un ) = unit_human then
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 247
4290: PUSH
4291: LD_INT 1
4293: EQUAL
4294: IFFALSE 4362
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
4296: LD_VAR 0 1
4300: PPUSH
4301: CALL_OW 248
4305: PUSH
4306: LD_INT 2
4308: EQUAL
4309: PUSH
4310: LD_INT 5
4312: PPUSH
4313: LD_INT 7
4315: PPUSH
4316: CALL_OW 321
4320: PUSH
4321: LD_INT 2
4323: NONEQUAL
4324: AND
4325: PUSH
4326: LD_VAR 0 1
4330: PPUSH
4331: CALL_OW 248
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: IN
4350: OR
4351: IFFALSE 4362
// KillUnit ( un ) ;
4353: LD_VAR 0 1
4357: PPUSH
4358: CALL_OW 66
// end ; end ;
4362: PPOPN 1
4364: END
// every 0 0$1 do
4365: GO 4367
4367: DISABLE
// begin enable ;
4368: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4369: LD_INT 4
4371: PPUSH
4372: LD_INT 5
4374: PPUSH
4375: LD_INT 22
4377: PUSH
4378: LD_OWVAR 2
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PPUSH
4387: CALL_OW 513
// end ;
4391: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4392: LD_EXP 7
4396: PUSH
4397: LD_INT 22
4399: PUSH
4400: LD_OWVAR 2
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 21
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 0
4430: EQUAL
4431: AND
4432: IFFALSE 4444
4434: GO 4436
4436: DISABLE
// YouLost ( die ) ;
4437: LD_STRING die
4439: PPUSH
4440: CALL_OW 104
4444: END
// every 0 0$21 trigger tick <= 15 15$00 do
4445: LD_OWVAR 1
4449: PUSH
4450: LD_INT 31500
4452: LESSEQUAL
4453: IFFALSE 4480
4455: GO 4457
4457: DISABLE
// begin enable ;
4458: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4459: LD_INT 1
4461: PPUSH
4462: LD_INT 5
4464: PPUSH
4465: CALL_OW 12
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: LD_INT 1
4475: PPUSH
4476: CALL_OW 55
// end ;
4480: END
// every 0 0$51 trigger tick > 15 15$00 do
4481: LD_OWVAR 1
4485: PUSH
4486: LD_INT 31500
4488: GREATER
4489: IFFALSE 4536
4491: GO 4493
4493: DISABLE
// begin enable ;
4494: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4495: LD_INT 22
4497: PUSH
4498: LD_INT 7
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 69
4509: PUSH
4510: LD_INT 0
4512: EQUAL
4513: IFFALSE 4536
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4515: LD_INT 1
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL_OW 12
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: CALL_OW 55
// end ;
4536: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4537: LD_VAR 0 1
4541: PPUSH
4542: LD_INT 3
4544: PPUSH
4545: CALL_OW 308
4549: IFFALSE 4560
// KillUnit ( building ) ;
4551: LD_VAR 0 1
4555: PPUSH
4556: CALL_OW 66
// end ;
4560: PPOPN 2
4562: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4563: LD_VAR 0 1
4567: PPUSH
4568: LD_VAR 0 2
4572: PPUSH
4573: LD_VAR 0 3
4577: PPUSH
4578: CALL 22055 0 3
// end ;
4582: PPOPN 3
4584: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL 22153 0 1
// end ; end_of_file
4594: PPOPN 1
4596: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4608: LD_ADDR_VAR 0 7
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: LD_INT 2
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: ST_TO_ADDR
// uc_side := 7 ;
4623: LD_ADDR_OWVAR 20
4627: PUSH
4628: LD_INT 7
4630: ST_TO_ADDR
// l := 0 ;
4631: LD_ADDR_VAR 0 9
4635: PUSH
4636: LD_INT 0
4638: ST_TO_ADDR
// case num of 1 :
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 1
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4652
4650: GO 4671
4652: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: LD_INT 12
4660: PPUSH
4661: LD_INT 1
4663: PPUSH
4664: CALL 7000 0 2
4668: ST_TO_ADDR
4669: GO 6809
4671: LD_INT 2
4673: DOUBLE
4674: EQUAL
4675: IFTRUE 4679
4677: GO 4698
4679: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: LD_INT 12
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL 7071 0 2
4695: ST_TO_ADDR
4696: GO 6809
4698: LD_INT 3
4700: DOUBLE
4701: EQUAL
4702: IFTRUE 4706
4704: GO 4725
4706: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: LD_INT 12
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL 7142 0 2
4722: ST_TO_ADDR
4723: GO 6809
4725: LD_INT 4
4727: DOUBLE
4728: EQUAL
4729: IFTRUE 4733
4731: GO 4752
4733: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: LD_INT 7
4741: PPUSH
4742: LD_INT 1
4744: PPUSH
4745: CALL 7221 0 2
4749: ST_TO_ADDR
4750: GO 6809
4752: LD_INT 5
4754: DOUBLE
4755: EQUAL
4756: IFTRUE 4760
4758: GO 4779
4760: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: LD_INT 7
4768: PPUSH
4769: LD_INT 1
4771: PPUSH
4772: CALL 7617 0 2
4776: ST_TO_ADDR
4777: GO 6809
4779: LD_INT 6
4781: DOUBLE
4782: EQUAL
4783: IFTRUE 4787
4785: GO 4806
4787: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4788: LD_ADDR_VAR 0 2
4792: PUSH
4793: LD_INT 6
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL 8037 0 2
4803: ST_TO_ADDR
4804: GO 6809
4806: LD_INT 7
4808: DOUBLE
4809: EQUAL
4810: IFTRUE 4814
4812: GO 4833
4814: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: LD_INT 15
4822: PPUSH
4823: LD_INT 1
4825: PPUSH
4826: CALL 8457 0 2
4830: ST_TO_ADDR
4831: GO 6809
4833: LD_INT 8
4835: DOUBLE
4836: EQUAL
4837: IFTRUE 4841
4839: GO 4860
4841: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4842: LD_ADDR_VAR 0 2
4846: PUSH
4847: LD_INT 7
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL 8558 0 2
4857: ST_TO_ADDR
4858: GO 6809
4860: LD_INT 9
4862: DOUBLE
4863: EQUAL
4864: IFTRUE 4868
4866: GO 4899
4868: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4869: LD_ADDR_VAR 0 2
4873: PUSH
4874: LD_INT 4
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL 8558 0 2
4884: PUSH
4885: LD_INT 7
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: CALL 7617 0 2
4895: ADD
4896: ST_TO_ADDR
4897: GO 6809
4899: LD_INT 10
4901: DOUBLE
4902: EQUAL
4903: IFTRUE 4907
4905: GO 4938
4907: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_INT 9
4915: PPUSH
4916: LD_INT 1
4918: PPUSH
4919: CALL 8457 0 2
4923: PUSH
4924: LD_INT 14
4926: PPUSH
4927: LD_INT 1
4929: PPUSH
4930: CALL 7142 0 2
4934: ADD
4935: ST_TO_ADDR
4936: GO 6809
4938: LD_INT 11
4940: DOUBLE
4941: EQUAL
4942: IFTRUE 4994
4944: LD_INT 21
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4994
4950: LD_INT 31
4952: DOUBLE
4953: EQUAL
4954: IFTRUE 4994
4956: LD_INT 41
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4994
4962: LD_INT 51
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4994
4968: LD_INT 61
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 4994
4974: LD_INT 71
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 4994
4980: LD_INT 81
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 4994
4986: LD_INT 91
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 4994
4992: GO 5103
4994: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: LD_INT 20
5002: PUSH
5003: LD_INT 30
5005: PUSH
5006: LD_INT 40
5008: PUSH
5009: LD_INT 45
5011: PUSH
5012: LD_INT 50
5014: PUSH
5015: LD_INT 60
5017: PUSH
5018: LD_INT 70
5020: PUSH
5021: LD_INT 80
5023: PUSH
5024: LD_INT 100
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: PUSH
5038: LD_VAR 0 1
5042: PUSH
5043: LD_INT 10
5045: DIV
5046: ARRAY
5047: PPUSH
5048: LD_INT 2
5050: PUSH
5051: LD_INT 3
5053: PUSH
5054: LD_INT 4
5056: PUSH
5057: LD_INT 5
5059: PUSH
5060: LD_INT 6
5062: PUSH
5063: LD_INT 7
5065: PUSH
5066: LD_INT 8
5068: PUSH
5069: LD_INT 9
5071: PUSH
5072: LD_INT 10
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_VAR 0 1
5090: PUSH
5091: LD_INT 10
5093: DIV
5094: ARRAY
5095: PPUSH
5096: CALL 7000 0 2
5100: ST_TO_ADDR
5101: GO 6809
5103: LD_INT 12
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5159
5109: LD_INT 22
5111: DOUBLE
5112: EQUAL
5113: IFTRUE 5159
5115: LD_INT 32
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5159
5121: LD_INT 42
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5159
5127: LD_INT 52
5129: DOUBLE
5130: EQUAL
5131: IFTRUE 5159
5133: LD_INT 62
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5159
5139: LD_INT 72
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5159
5145: LD_INT 82
5147: DOUBLE
5148: EQUAL
5149: IFTRUE 5159
5151: LD_INT 92
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5159
5157: GO 5268
5159: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
5160: LD_ADDR_VAR 0 2
5164: PUSH
5165: LD_INT 16
5167: PUSH
5168: LD_INT 21
5170: PUSH
5171: LD_INT 28
5173: PUSH
5174: LD_INT 33
5176: PUSH
5177: LD_INT 39
5179: PUSH
5180: LD_INT 46
5182: PUSH
5183: LD_INT 56
5185: PUSH
5186: LD_INT 66
5188: PUSH
5189: LD_INT 80
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: PUSH
5203: LD_VAR 0 1
5207: PUSH
5208: LD_INT 10
5210: DIV
5211: ARRAY
5212: PPUSH
5213: LD_INT 2
5215: PUSH
5216: LD_INT 3
5218: PUSH
5219: LD_INT 4
5221: PUSH
5222: LD_INT 5
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 7
5230: PUSH
5231: LD_INT 8
5233: PUSH
5234: LD_INT 9
5236: PUSH
5237: LD_INT 10
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_VAR 0 1
5255: PUSH
5256: LD_INT 10
5258: DIV
5259: ARRAY
5260: PPUSH
5261: CALL 7071 0 2
5265: ST_TO_ADDR
5266: GO 6809
5268: LD_INT 13
5270: DOUBLE
5271: EQUAL
5272: IFTRUE 5324
5274: LD_INT 23
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5324
5280: LD_INT 33
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5324
5286: LD_INT 43
5288: DOUBLE
5289: EQUAL
5290: IFTRUE 5324
5292: LD_INT 53
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5324
5298: LD_INT 63
5300: DOUBLE
5301: EQUAL
5302: IFTRUE 5324
5304: LD_INT 73
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5324
5310: LD_INT 83
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5324
5316: LD_INT 93
5318: DOUBLE
5319: EQUAL
5320: IFTRUE 5324
5322: GO 5433
5324: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5325: LD_ADDR_VAR 0 2
5329: PUSH
5330: LD_INT 14
5332: PUSH
5333: LD_INT 18
5335: PUSH
5336: LD_INT 22
5338: PUSH
5339: LD_INT 27
5341: PUSH
5342: LD_INT 33
5344: PUSH
5345: LD_INT 39
5347: PUSH
5348: LD_INT 44
5350: PUSH
5351: LD_INT 57
5353: PUSH
5354: LD_INT 65
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: LD_INT 10
5375: DIV
5376: ARRAY
5377: PPUSH
5378: LD_INT 2
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: LD_INT 4
5386: PUSH
5387: LD_INT 5
5389: PUSH
5390: LD_INT 6
5392: PUSH
5393: LD_INT 7
5395: PUSH
5396: LD_INT 8
5398: PUSH
5399: LD_INT 9
5401: PUSH
5402: LD_INT 10
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: PUSH
5416: LD_VAR 0 1
5420: PUSH
5421: LD_INT 10
5423: DIV
5424: ARRAY
5425: PPUSH
5426: CALL 7142 0 2
5430: ST_TO_ADDR
5431: GO 6809
5433: LD_INT 14
5435: DOUBLE
5436: EQUAL
5437: IFTRUE 5489
5439: LD_INT 24
5441: DOUBLE
5442: EQUAL
5443: IFTRUE 5489
5445: LD_INT 34
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5489
5451: LD_INT 44
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5489
5457: LD_INT 54
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5489
5463: LD_INT 64
5465: DOUBLE
5466: EQUAL
5467: IFTRUE 5489
5469: LD_INT 74
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5489
5475: LD_INT 84
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5489
5481: LD_INT 94
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5598
5489: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5490: LD_ADDR_VAR 0 2
5494: PUSH
5495: LD_INT 9
5497: PUSH
5498: LD_INT 15
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 30
5506: PUSH
5507: LD_INT 39
5509: PUSH
5510: LD_INT 45
5512: PUSH
5513: LD_INT 56
5515: PUSH
5516: LD_INT 60
5518: PUSH
5519: LD_INT 65
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_VAR 0 1
5537: PUSH
5538: LD_INT 10
5540: DIV
5541: ARRAY
5542: PPUSH
5543: LD_INT 2
5545: PUSH
5546: LD_INT 3
5548: PUSH
5549: LD_INT 4
5551: PUSH
5552: LD_INT 5
5554: PUSH
5555: LD_INT 6
5557: PUSH
5558: LD_INT 7
5560: PUSH
5561: LD_INT 8
5563: PUSH
5564: LD_INT 9
5566: PUSH
5567: LD_INT 10
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: PUSH
5581: LD_VAR 0 1
5585: PUSH
5586: LD_INT 10
5588: DIV
5589: ARRAY
5590: PPUSH
5591: CALL 7221 0 2
5595: ST_TO_ADDR
5596: GO 6809
5598: LD_INT 15
5600: DOUBLE
5601: EQUAL
5602: IFTRUE 5654
5604: LD_INT 25
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5654
5610: LD_INT 35
5612: DOUBLE
5613: EQUAL
5614: IFTRUE 5654
5616: LD_INT 45
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5654
5622: LD_INT 55
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5654
5628: LD_INT 65
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5654
5634: LD_INT 75
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5654
5640: LD_INT 85
5642: DOUBLE
5643: EQUAL
5644: IFTRUE 5654
5646: LD_INT 95
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5654
5652: GO 5763
5654: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5655: LD_ADDR_VAR 0 2
5659: PUSH
5660: LD_INT 6
5662: PUSH
5663: LD_INT 11
5665: PUSH
5666: LD_INT 15
5668: PUSH
5669: LD_INT 20
5671: PUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 35
5680: PUSH
5681: LD_INT 40
5683: PUSH
5684: LD_INT 45
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_INT 10
5705: DIV
5706: ARRAY
5707: PPUSH
5708: LD_INT 2
5710: PUSH
5711: LD_INT 3
5713: PUSH
5714: LD_INT 4
5716: PUSH
5717: LD_INT 5
5719: PUSH
5720: LD_INT 6
5722: PUSH
5723: LD_INT 7
5725: PUSH
5726: LD_INT 8
5728: PUSH
5729: LD_INT 9
5731: PUSH
5732: LD_INT 10
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: PUSH
5746: LD_VAR 0 1
5750: PUSH
5751: LD_INT 10
5753: DIV
5754: ARRAY
5755: PPUSH
5756: CALL 7617 0 2
5760: ST_TO_ADDR
5761: GO 6809
5763: LD_INT 16
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5819
5769: LD_INT 26
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5819
5775: LD_INT 36
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5819
5781: LD_INT 46
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5819
5787: LD_INT 56
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5819
5793: LD_INT 66
5795: DOUBLE
5796: EQUAL
5797: IFTRUE 5819
5799: LD_INT 76
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5819
5805: LD_INT 86
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5819
5811: LD_INT 96
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5819
5817: GO 5928
5819: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5820: LD_ADDR_VAR 0 2
5824: PUSH
5825: LD_INT 9
5827: PUSH
5828: LD_INT 12
5830: PUSH
5831: LD_INT 15
5833: PUSH
5834: LD_INT 18
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 24
5842: PUSH
5843: LD_INT 27
5845: PUSH
5846: LD_INT 30
5848: PUSH
5849: LD_INT 33
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: PUSH
5863: LD_VAR 0 1
5867: PUSH
5868: LD_INT 10
5870: DIV
5871: ARRAY
5872: PPUSH
5873: LD_INT 2
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: LD_INT 4
5881: PUSH
5882: LD_INT 5
5884: PUSH
5885: LD_INT 6
5887: PUSH
5888: LD_INT 7
5890: PUSH
5891: LD_INT 8
5893: PUSH
5894: LD_INT 9
5896: PUSH
5897: LD_INT 10
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_VAR 0 1
5915: PUSH
5916: LD_INT 10
5918: DIV
5919: ARRAY
5920: PPUSH
5921: CALL 8037 0 2
5925: ST_TO_ADDR
5926: GO 6809
5928: LD_INT 17
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5984
5934: LD_INT 27
5936: DOUBLE
5937: EQUAL
5938: IFTRUE 5984
5940: LD_INT 37
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5984
5946: LD_INT 47
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5984
5952: LD_INT 57
5954: DOUBLE
5955: EQUAL
5956: IFTRUE 5984
5958: LD_INT 67
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5984
5964: LD_INT 77
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5984
5970: LD_INT 87
5972: DOUBLE
5973: EQUAL
5974: IFTRUE 5984
5976: LD_INT 97
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5984
5982: GO 6093
5984: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: LD_INT 14
5992: PUSH
5993: LD_INT 16
5995: PUSH
5996: LD_INT 18
5998: PUSH
5999: LD_INT 22
6001: PUSH
6002: LD_INT 24
6004: PUSH
6005: LD_INT 26
6007: PUSH
6008: LD_INT 28
6010: PUSH
6011: LD_INT 32
6013: PUSH
6014: LD_INT 35
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: PUSH
6028: LD_VAR 0 1
6032: PUSH
6033: LD_INT 10
6035: DIV
6036: ARRAY
6037: PPUSH
6038: LD_INT 2
6040: PUSH
6041: LD_INT 3
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: LD_INT 5
6049: PUSH
6050: LD_INT 6
6052: PUSH
6053: LD_INT 7
6055: PUSH
6056: LD_INT 8
6058: PUSH
6059: LD_INT 9
6061: PUSH
6062: LD_INT 10
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: LD_INT 10
6083: DIV
6084: ARRAY
6085: PPUSH
6086: CALL 8457 0 2
6090: ST_TO_ADDR
6091: GO 6809
6093: LD_INT 18
6095: DOUBLE
6096: EQUAL
6097: IFTRUE 6149
6099: LD_INT 28
6101: DOUBLE
6102: EQUAL
6103: IFTRUE 6149
6105: LD_INT 38
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6149
6111: LD_INT 48
6113: DOUBLE
6114: EQUAL
6115: IFTRUE 6149
6117: LD_INT 58
6119: DOUBLE
6120: EQUAL
6121: IFTRUE 6149
6123: LD_INT 68
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6149
6129: LD_INT 78
6131: DOUBLE
6132: EQUAL
6133: IFTRUE 6149
6135: LD_INT 88
6137: DOUBLE
6138: EQUAL
6139: IFTRUE 6149
6141: LD_INT 98
6143: DOUBLE
6144: EQUAL
6145: IFTRUE 6149
6147: GO 6258
6149: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: LD_INT 9
6157: PUSH
6158: LD_INT 12
6160: PUSH
6161: LD_INT 15
6163: PUSH
6164: LD_INT 18
6166: PUSH
6167: LD_INT 21
6169: PUSH
6170: LD_INT 24
6172: PUSH
6173: LD_INT 27
6175: PUSH
6176: LD_INT 30
6178: PUSH
6179: LD_INT 33
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_VAR 0 1
6197: PUSH
6198: LD_INT 10
6200: DIV
6201: ARRAY
6202: PPUSH
6203: LD_INT 2
6205: PUSH
6206: LD_INT 3
6208: PUSH
6209: LD_INT 4
6211: PUSH
6212: LD_INT 5
6214: PUSH
6215: LD_INT 6
6217: PUSH
6218: LD_INT 7
6220: PUSH
6221: LD_INT 8
6223: PUSH
6224: LD_INT 9
6226: PUSH
6227: LD_INT 10
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_VAR 0 1
6245: PUSH
6246: LD_INT 10
6248: DIV
6249: ARRAY
6250: PPUSH
6251: CALL 8558 0 2
6255: ST_TO_ADDR
6256: GO 6809
6258: LD_INT 19
6260: DOUBLE
6261: EQUAL
6262: IFTRUE 6314
6264: LD_INT 29
6266: DOUBLE
6267: EQUAL
6268: IFTRUE 6314
6270: LD_INT 39
6272: DOUBLE
6273: EQUAL
6274: IFTRUE 6314
6276: LD_INT 49
6278: DOUBLE
6279: EQUAL
6280: IFTRUE 6314
6282: LD_INT 59
6284: DOUBLE
6285: EQUAL
6286: IFTRUE 6314
6288: LD_INT 69
6290: DOUBLE
6291: EQUAL
6292: IFTRUE 6314
6294: LD_INT 79
6296: DOUBLE
6297: EQUAL
6298: IFTRUE 6314
6300: LD_INT 89
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6314
6306: LD_INT 99
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6525
6314: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_INT 4
6322: PUSH
6323: LD_INT 7
6325: PUSH
6326: LD_INT 10
6328: PUSH
6329: LD_INT 13
6331: PUSH
6332: LD_INT 14
6334: PUSH
6335: LD_INT 17
6337: PUSH
6338: LD_INT 19
6340: PUSH
6341: LD_INT 21
6343: PUSH
6344: LD_INT 23
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: LD_VAR 0 1
6362: PUSH
6363: LD_INT 10
6365: DIV
6366: ARRAY
6367: PPUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: LD_INT 6
6382: PUSH
6383: LD_INT 7
6385: PUSH
6386: LD_INT 8
6388: PUSH
6389: LD_INT 9
6391: PUSH
6392: LD_INT 10
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: LD_VAR 0 1
6410: PUSH
6411: LD_INT 10
6413: DIV
6414: ARRAY
6415: PPUSH
6416: CALL 8558 0 2
6420: PUSH
6421: LD_INT 4
6423: PUSH
6424: LD_INT 7
6426: PUSH
6427: LD_INT 10
6429: PUSH
6430: LD_INT 13
6432: PUSH
6433: LD_INT 14
6435: PUSH
6436: LD_INT 17
6438: PUSH
6439: LD_INT 19
6441: PUSH
6442: LD_INT 22
6444: PUSH
6445: LD_INT 25
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: PUSH
6459: LD_VAR 0 1
6463: PUSH
6464: LD_INT 10
6466: DIV
6467: ARRAY
6468: PPUSH
6469: LD_INT 2
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 4
6477: PUSH
6478: LD_INT 5
6480: PUSH
6481: LD_INT 6
6483: PUSH
6484: LD_INT 7
6486: PUSH
6487: LD_INT 8
6489: PUSH
6490: LD_INT 9
6492: PUSH
6493: LD_INT 10
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: LD_VAR 0 1
6511: PUSH
6512: LD_INT 10
6514: DIV
6515: ARRAY
6516: PPUSH
6517: CALL 7617 0 2
6521: ADD
6522: ST_TO_ADDR
6523: GO 6809
6525: LD_INT 20
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6581
6531: LD_INT 30
6533: DOUBLE
6534: EQUAL
6535: IFTRUE 6581
6537: LD_INT 40
6539: DOUBLE
6540: EQUAL
6541: IFTRUE 6581
6543: LD_INT 50
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6581
6549: LD_INT 60
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6581
6555: LD_INT 70
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6581
6561: LD_INT 80
6563: DOUBLE
6564: EQUAL
6565: IFTRUE 6581
6567: LD_INT 90
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6581
6573: LD_INT 100
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6808
6581: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: LD_INT 4
6589: PUSH
6590: LD_INT 7
6592: PUSH
6593: LD_INT 10
6595: PUSH
6596: LD_INT 13
6598: PUSH
6599: LD_INT 14
6601: PUSH
6602: LD_INT 17
6604: PUSH
6605: LD_INT 19
6607: PUSH
6608: LD_INT 21
6610: PUSH
6611: LD_INT 23
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_VAR 0 1
6629: PUSH
6630: LD_INT 10
6632: DIVREAL
6633: PUSH
6634: LD_INT 1
6636: MINUS
6637: ARRAY
6638: PPUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 4
6647: PUSH
6648: LD_INT 5
6650: PUSH
6651: LD_INT 6
6653: PUSH
6654: LD_INT 7
6656: PUSH
6657: LD_INT 8
6659: PUSH
6660: LD_INT 9
6662: PUSH
6663: LD_INT 10
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: PUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 10
6684: DIVREAL
6685: PUSH
6686: LD_INT 1
6688: MINUS
6689: ARRAY
6690: PPUSH
6691: CALL 8457 0 2
6695: PUSH
6696: LD_INT 4
6698: PUSH
6699: LD_INT 7
6701: PUSH
6702: LD_INT 10
6704: PUSH
6705: LD_INT 13
6707: PUSH
6708: LD_INT 14
6710: PUSH
6711: LD_INT 17
6713: PUSH
6714: LD_INT 19
6716: PUSH
6717: LD_INT 22
6719: PUSH
6720: LD_INT 25
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: LD_VAR 0 1
6738: PUSH
6739: LD_INT 10
6741: DIVREAL
6742: PUSH
6743: LD_INT 1
6745: MINUS
6746: ARRAY
6747: PPUSH
6748: LD_INT 2
6750: PUSH
6751: LD_INT 3
6753: PUSH
6754: LD_INT 4
6756: PUSH
6757: LD_INT 5
6759: PUSH
6760: LD_INT 6
6762: PUSH
6763: LD_INT 7
6765: PUSH
6766: LD_INT 8
6768: PUSH
6769: LD_INT 9
6771: PUSH
6772: LD_INT 10
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: LD_VAR 0 1
6790: PUSH
6791: LD_INT 10
6793: DIVREAL
6794: PUSH
6795: LD_INT 1
6797: MINUS
6798: ARRAY
6799: PPUSH
6800: CALL 8037 0 2
6804: ADD
6805: ST_TO_ADDR
6806: GO 6809
6808: POP
// for i in result do
6809: LD_ADDR_VAR 0 3
6813: PUSH
6814: LD_VAR 0 2
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6993
// begin a := rand ( 1 , 2 ) ;
6822: LD_ADDR_VAR 0 8
6826: PUSH
6827: LD_INT 1
6829: PPUSH
6830: LD_INT 2
6832: PPUSH
6833: CALL_OW 12
6837: ST_TO_ADDR
// if a = 1 then
6838: LD_VAR 0 8
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 6862
// SetDir ( i , 3 ) else
6848: LD_VAR 0 3
6852: PPUSH
6853: LD_INT 3
6855: PPUSH
6856: CALL_OW 233
6860: GO 6874
// SetDir ( i , 5 ) ;
6862: LD_VAR 0 3
6866: PPUSH
6867: LD_INT 5
6869: PPUSH
6870: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6874: LD_VAR 0 3
6878: PPUSH
6879: LD_VAR 0 7
6883: PUSH
6884: LD_VAR 0 8
6888: ARRAY
6889: PPUSH
6890: LD_INT 0
6892: PPUSH
6893: CALL_OW 49
// if GetControl ( i ) = control_manual then
6897: LD_VAR 0 3
6901: PPUSH
6902: CALL_OW 263
6906: PUSH
6907: LD_INT 1
6909: EQUAL
6910: IFFALSE 6956
// begin uc_nation := GetNation ( i ) ;
6912: LD_ADDR_OWVAR 21
6916: PUSH
6917: LD_VAR 0 3
6921: PPUSH
6922: CALL_OW 248
6926: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6927: LD_INT 0
6929: PPUSH
6930: LD_INT 3
6932: PPUSH
6933: LD_VAR 0 5
6937: PPUSH
6938: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6942: CALL_OW 44
6946: PPUSH
6947: LD_VAR 0 3
6951: PPUSH
6952: CALL_OW 52
// end ; l := l + 1 ;
6956: LD_ADDR_VAR 0 9
6960: PUSH
6961: LD_VAR 0 9
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: ST_TO_ADDR
// if l mod 10 = 0 then
6970: LD_VAR 0 9
6974: PUSH
6975: LD_INT 10
6977: MOD
6978: PUSH
6979: LD_INT 0
6981: EQUAL
6982: IFFALSE 6991
// Wait ( 0 0$02 ) ;
6984: LD_INT 70
6986: PPUSH
6987: CALL_OW 67
// end ;
6991: GO 6819
6993: POP
6994: POP
// end ;
6995: LD_VAR 0 2
6999: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
7000: LD_INT 0
7002: PPUSH
7003: PPUSH
7004: PPUSH
// uc_nation := nation_nature ;
7005: LD_ADDR_OWVAR 21
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// for i = 1 to n do
7013: LD_ADDR_VAR 0 4
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_VAR 0 1
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7064
// begin PrepareHuman ( false , class_apeman , skill ) ;
7031: LD_INT 0
7033: PPUSH
7034: LD_INT 12
7036: PPUSH
7037: LD_VAR 0 2
7041: PPUSH
7042: CALL_OW 380
// result := result ^ CreateHuman ;
7046: LD_ADDR_VAR 0 3
7050: PUSH
7051: LD_VAR 0 3
7055: PUSH
7056: CALL_OW 44
7060: ADD
7061: ST_TO_ADDR
// end ;
7062: GO 7028
7064: POP
7065: POP
// end ;
7066: LD_VAR 0 3
7070: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
7071: LD_INT 0
7073: PPUSH
7074: PPUSH
7075: PPUSH
// uc_nation := nation_nature ;
7076: LD_ADDR_OWVAR 21
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// for i = 1 to n do
7084: LD_ADDR_VAR 0 4
7088: PUSH
7089: DOUBLE
7090: LD_INT 1
7092: DEC
7093: ST_TO_ADDR
7094: LD_VAR 0 1
7098: PUSH
7099: FOR_TO
7100: IFFALSE 7135
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
7102: LD_INT 0
7104: PPUSH
7105: LD_INT 15
7107: PPUSH
7108: LD_VAR 0 2
7112: PPUSH
7113: CALL_OW 380
// result := result ^ CreateHuman ;
7117: LD_ADDR_VAR 0 3
7121: PUSH
7122: LD_VAR 0 3
7126: PUSH
7127: CALL_OW 44
7131: ADD
7132: ST_TO_ADDR
// end ;
7133: GO 7099
7135: POP
7136: POP
// end ;
7137: LD_VAR 0 3
7141: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
7142: LD_INT 0
7144: PPUSH
7145: PPUSH
7146: PPUSH
// for i = 1 to n do
7147: LD_ADDR_VAR 0 4
7151: PUSH
7152: DOUBLE
7153: LD_INT 1
7155: DEC
7156: ST_TO_ADDR
7157: LD_VAR 0 1
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7214
// begin uc_nation := rand ( 1 , 3 ) ;
7165: LD_ADDR_OWVAR 21
7169: PUSH
7170: LD_INT 1
7172: PPUSH
7173: LD_INT 3
7175: PPUSH
7176: CALL_OW 12
7180: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
7181: LD_INT 0
7183: PPUSH
7184: LD_INT 1
7186: PPUSH
7187: LD_VAR 0 2
7191: PPUSH
7192: CALL_OW 380
// result := result ^ CreateHuman ;
7196: LD_ADDR_VAR 0 3
7200: PUSH
7201: LD_VAR 0 3
7205: PUSH
7206: CALL_OW 44
7210: ADD
7211: ST_TO_ADDR
// end ;
7212: GO 7162
7214: POP
7215: POP
// end ;
7216: LD_VAR 0 3
7220: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7221: LD_INT 0
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
// for i = 1 to n do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 1
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 1
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7610
// begin uc_nation := rand ( 1 , 3 ) ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_INT 1
7255: PPUSH
7256: LD_INT 3
7258: PPUSH
7259: CALL_OW 12
7263: ST_TO_ADDR
// case uc_nation of 1 :
7264: LD_OWVAR 21
7268: PUSH
7269: LD_INT 1
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7340
7277: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: LD_INT 1
7285: PUSH
7286: LD_INT 2
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
7293: LD_ADDR_VAR 0 7
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 3
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7308: LD_ADDR_VAR 0 8
7312: PUSH
7313: LD_INT 1
7315: PUSH
7316: LD_INT 3
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7323: LD_ADDR_VAR 0 9
7327: PUSH
7328: LD_INT 1
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: ST_TO_ADDR
// end ; 2 :
7338: GO 7475
7340: LD_INT 2
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7411
7348: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_INT 12
7356: PUSH
7357: LD_INT 11
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7364: LD_ADDR_VAR 0 7
7368: PUSH
7369: LD_INT 23
7371: PUSH
7372: LD_INT 24
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7379: LD_ADDR_VAR 0 8
7383: PUSH
7384: LD_INT 1
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7394: LD_ADDR_VAR 0 9
7398: PUSH
7399: LD_INT 1
7401: PUSH
7402: LD_INT 2
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: ST_TO_ADDR
// end ; 3 :
7409: GO 7475
7411: LD_INT 3
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7474
7419: POP
// begin chassis := [ ru_medium_wheeled ] ;
7420: LD_ADDR_VAR 0 6
7424: PUSH
7425: LD_INT 21
7427: PUSH
7428: EMPTY
7429: LIST
7430: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7431: LD_ADDR_VAR 0 7
7435: PUSH
7436: LD_INT 42
7438: PUSH
7439: LD_INT 44
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7446: LD_ADDR_VAR 0 8
7450: PUSH
7451: LD_INT 1
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7461: LD_ADDR_VAR 0 9
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: ST_TO_ADDR
// end ; end ;
7472: GO 7475
7474: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7475: LD_ADDR_OWVAR 37
7479: PUSH
7480: LD_VAR 0 6
7484: PUSH
7485: LD_INT 1
7487: PPUSH
7488: LD_VAR 0 6
7492: PPUSH
7493: CALL_OW 12
7497: ARRAY
7498: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7499: LD_ADDR_OWVAR 39
7503: PUSH
7504: LD_VAR 0 9
7508: PUSH
7509: LD_INT 1
7511: PPUSH
7512: LD_VAR 0 9
7516: PPUSH
7517: CALL_OW 12
7521: ARRAY
7522: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7523: LD_ADDR_OWVAR 38
7527: PUSH
7528: LD_VAR 0 8
7532: PUSH
7533: LD_INT 1
7535: PPUSH
7536: LD_VAR 0 8
7540: PPUSH
7541: CALL_OW 12
7545: ARRAY
7546: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7547: LD_ADDR_OWVAR 40
7551: PUSH
7552: LD_VAR 0 7
7556: PUSH
7557: LD_INT 1
7559: PPUSH
7560: LD_VAR 0 7
7564: PPUSH
7565: CALL_OW 12
7569: ARRAY
7570: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7571: LD_ADDR_OWVAR 41
7575: PUSH
7576: LD_INT 100
7578: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7579: LD_ADDR_VAR 0 3
7583: PUSH
7584: LD_VAR 0 3
7588: PPUSH
7589: LD_VAR 0 3
7593: PUSH
7594: LD_INT 1
7596: PLUS
7597: PPUSH
7598: CALL_OW 45
7602: PPUSH
7603: CALL_OW 2
7607: ST_TO_ADDR
// end ;
7608: GO 7245
7610: POP
7611: POP
// end ;
7612: LD_VAR 0 3
7616: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7617: LD_INT 0
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
7623: PPUSH
7624: PPUSH
7625: PPUSH
// for i = 1 to n do
7626: LD_ADDR_VAR 0 4
7630: PUSH
7631: DOUBLE
7632: LD_INT 1
7634: DEC
7635: ST_TO_ADDR
7636: LD_VAR 0 1
7640: PUSH
7641: FOR_TO
7642: IFFALSE 8030
// begin uc_nation := rand ( 1 , 3 ) ;
7644: LD_ADDR_OWVAR 21
7648: PUSH
7649: LD_INT 1
7651: PPUSH
7652: LD_INT 3
7654: PPUSH
7655: CALL_OW 12
7659: ST_TO_ADDR
// case uc_nation of 1 :
7660: LD_OWVAR 21
7664: PUSH
7665: LD_INT 1
7667: DOUBLE
7668: EQUAL
7669: IFTRUE 7673
7671: GO 7744
7673: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7674: LD_ADDR_VAR 0 6
7678: PUSH
7679: LD_INT 2
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7689: LD_ADDR_VAR 0 7
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: LD_INT 5
7699: PUSH
7700: LD_INT 9
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7708: LD_ADDR_VAR 0 8
7712: PUSH
7713: LD_INT 1
7715: PUSH
7716: LD_INT 3
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 2
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
// end ; 2 :
7742: GO 7895
7744: LD_INT 2
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7823
7752: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7753: LD_ADDR_VAR 0 6
7757: PUSH
7758: LD_INT 13
7760: PUSH
7761: LD_INT 14
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7768: LD_ADDR_VAR 0 7
7772: PUSH
7773: LD_INT 27
7775: PUSH
7776: LD_INT 26
7778: PUSH
7779: LD_INT 25
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7787: LD_ADDR_VAR 0 8
7791: PUSH
7792: LD_INT 1
7794: PUSH
7795: LD_INT 5
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7802: LD_ADDR_VAR 0 9
7806: PUSH
7807: LD_INT 1
7809: PUSH
7810: LD_INT 2
7812: PUSH
7813: LD_INT 3
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: ST_TO_ADDR
// end ; 3 :
7821: GO 7895
7823: LD_INT 3
7825: DOUBLE
7826: EQUAL
7827: IFTRUE 7831
7829: GO 7894
7831: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7832: LD_ADDR_VAR 0 6
7836: PUSH
7837: LD_INT 22
7839: PUSH
7840: LD_INT 21
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7847: LD_ADDR_VAR 0 7
7851: PUSH
7852: LD_INT 44
7854: PUSH
7855: LD_INT 43
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7862: LD_ADDR_VAR 0 8
7866: PUSH
7867: LD_INT 1
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7877: LD_ADDR_VAR 0 9
7881: PUSH
7882: LD_INT 1
7884: PUSH
7885: LD_INT 3
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: ST_TO_ADDR
// end ; end ;
7892: GO 7895
7894: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7895: LD_ADDR_OWVAR 37
7899: PUSH
7900: LD_VAR 0 6
7904: PUSH
7905: LD_INT 1
7907: PPUSH
7908: LD_VAR 0 6
7912: PPUSH
7913: CALL_OW 12
7917: ARRAY
7918: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7919: LD_ADDR_OWVAR 39
7923: PUSH
7924: LD_VAR 0 9
7928: PUSH
7929: LD_INT 1
7931: PPUSH
7932: LD_VAR 0 9
7936: PPUSH
7937: CALL_OW 12
7941: ARRAY
7942: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7943: LD_ADDR_OWVAR 38
7947: PUSH
7948: LD_VAR 0 8
7952: PUSH
7953: LD_INT 1
7955: PPUSH
7956: LD_VAR 0 8
7960: PPUSH
7961: CALL_OW 12
7965: ARRAY
7966: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7967: LD_ADDR_OWVAR 40
7971: PUSH
7972: LD_VAR 0 7
7976: PUSH
7977: LD_INT 1
7979: PPUSH
7980: LD_VAR 0 7
7984: PPUSH
7985: CALL_OW 12
7989: ARRAY
7990: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7991: LD_ADDR_OWVAR 41
7995: PUSH
7996: LD_INT 100
7998: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_VAR 0 3
8013: PUSH
8014: LD_INT 1
8016: PLUS
8017: PPUSH
8018: CALL_OW 45
8022: PPUSH
8023: CALL_OW 2
8027: ST_TO_ADDR
// end ;
8028: GO 7641
8030: POP
8031: POP
// end ;
8032: LD_VAR 0 3
8036: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8037: LD_INT 0
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
// for i = 1 to n do
8046: LD_ADDR_VAR 0 4
8050: PUSH
8051: DOUBLE
8052: LD_INT 1
8054: DEC
8055: ST_TO_ADDR
8056: LD_VAR 0 1
8060: PUSH
8061: FOR_TO
8062: IFFALSE 8450
// begin uc_nation := rand ( 1 , 3 ) ;
8064: LD_ADDR_OWVAR 21
8068: PUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 3
8074: PPUSH
8075: CALL_OW 12
8079: ST_TO_ADDR
// case uc_nation of 1 :
8080: LD_OWVAR 21
8084: PUSH
8085: LD_INT 1
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8160
8093: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8094: LD_ADDR_VAR 0 6
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: LD_INT 5
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
8109: LD_ADDR_VAR 0 7
8113: PUSH
8114: LD_INT 6
8116: PUSH
8117: LD_INT 7
8119: PUSH
8120: LD_INT 9
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8128: LD_ADDR_VAR 0 8
8132: PUSH
8133: LD_INT 1
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8143: LD_ADDR_VAR 0 9
8147: PUSH
8148: LD_INT 1
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: ST_TO_ADDR
// end ; 2 :
8158: GO 8315
8160: LD_INT 2
8162: DOUBLE
8163: EQUAL
8164: IFTRUE 8168
8166: GO 8243
8168: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
8169: LD_ADDR_VAR 0 6
8173: PUSH
8174: LD_INT 13
8176: PUSH
8177: LD_INT 14
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_INT 27
8191: PUSH
8192: LD_INT 26
8194: PUSH
8195: LD_INT 28
8197: PUSH
8198: LD_INT 29
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8207: LD_ADDR_VAR 0 8
8211: PUSH
8212: LD_INT 1
8214: PUSH
8215: LD_INT 5
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8222: LD_ADDR_VAR 0 9
8226: PUSH
8227: LD_INT 1
8229: PUSH
8230: LD_INT 2
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: ST_TO_ADDR
// end ; 3 :
8241: GO 8315
8243: LD_INT 3
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8314
8251: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8252: LD_ADDR_VAR 0 6
8256: PUSH
8257: LD_INT 23
8259: PUSH
8260: LD_INT 24
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
8267: LD_ADDR_VAR 0 7
8271: PUSH
8272: LD_INT 46
8274: PUSH
8275: LD_INT 45
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8282: LD_ADDR_VAR 0 8
8286: PUSH
8287: LD_INT 1
8289: PUSH
8290: LD_INT 3
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8297: LD_ADDR_VAR 0 9
8301: PUSH
8302: LD_INT 1
8304: PUSH
8305: LD_INT 3
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: ST_TO_ADDR
// end ; end ;
8312: GO 8315
8314: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8315: LD_ADDR_OWVAR 37
8319: PUSH
8320: LD_VAR 0 6
8324: PUSH
8325: LD_INT 1
8327: PPUSH
8328: LD_VAR 0 6
8332: PPUSH
8333: CALL_OW 12
8337: ARRAY
8338: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8339: LD_ADDR_OWVAR 39
8343: PUSH
8344: LD_VAR 0 9
8348: PUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_VAR 0 9
8356: PPUSH
8357: CALL_OW 12
8361: ARRAY
8362: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8363: LD_ADDR_OWVAR 38
8367: PUSH
8368: LD_VAR 0 8
8372: PUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_VAR 0 8
8380: PPUSH
8381: CALL_OW 12
8385: ARRAY
8386: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8387: LD_ADDR_OWVAR 40
8391: PUSH
8392: LD_VAR 0 7
8396: PUSH
8397: LD_INT 1
8399: PPUSH
8400: LD_VAR 0 7
8404: PPUSH
8405: CALL_OW 12
8409: ARRAY
8410: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8411: LD_ADDR_OWVAR 41
8415: PUSH
8416: LD_INT 100
8418: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8419: LD_ADDR_VAR 0 3
8423: PUSH
8424: LD_VAR 0 3
8428: PPUSH
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 1
8436: PLUS
8437: PPUSH
8438: CALL_OW 45
8442: PPUSH
8443: CALL_OW 2
8447: ST_TO_ADDR
// end ;
8448: GO 8061
8450: POP
8451: POP
// end ;
8452: LD_VAR 0 3
8456: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8457: LD_INT 0
8459: PPUSH
8460: PPUSH
// for i = 1 to n do
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_VAR 0 1
8475: PUSH
8476: FOR_TO
8477: IFFALSE 8551
// begin uc_nation := rand ( 1 , 3 ) ;
8479: LD_ADDR_OWVAR 21
8483: PUSH
8484: LD_INT 1
8486: PPUSH
8487: LD_INT 3
8489: PPUSH
8490: CALL_OW 12
8494: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8495: LD_INT 0
8497: PPUSH
8498: LD_INT 8
8500: PUSH
8501: LD_INT 9
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 1
8514: PPUSH
8515: LD_INT 3
8517: PPUSH
8518: CALL_OW 12
8522: ARRAY
8523: PPUSH
8524: LD_VAR 0 2
8528: PPUSH
8529: CALL_OW 380
// result := result ^ CreateHuman ;
8533: LD_ADDR_VAR 0 3
8537: PUSH
8538: LD_VAR 0 3
8542: PUSH
8543: CALL_OW 44
8547: ADD
8548: ST_TO_ADDR
// end ;
8549: GO 8476
8551: POP
8552: POP
// end ;
8553: LD_VAR 0 3
8557: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8558: LD_INT 0
8560: PPUSH
8561: PPUSH
8562: PPUSH
8563: PPUSH
8564: PPUSH
8565: PPUSH
8566: PPUSH
// for i = 1 to n do
8567: LD_ADDR_VAR 0 4
8571: PUSH
8572: DOUBLE
8573: LD_INT 1
8575: DEC
8576: ST_TO_ADDR
8577: LD_VAR 0 1
8581: PUSH
8582: FOR_TO
8583: IFFALSE 8979
// begin uc_nation := rand ( 1 , 3 ) ;
8585: LD_ADDR_OWVAR 21
8589: PUSH
8590: LD_INT 1
8592: PPUSH
8593: LD_INT 3
8595: PPUSH
8596: CALL_OW 12
8600: ST_TO_ADDR
// case uc_nation of 1 :
8601: LD_OWVAR 21
8605: PUSH
8606: LD_INT 1
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8687
8614: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8615: LD_ADDR_VAR 0 6
8619: PUSH
8620: LD_INT 4
8622: PUSH
8623: LD_INT 5
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8630: LD_ADDR_VAR 0 7
8634: PUSH
8635: LD_INT 6
8637: PUSH
8638: LD_INT 7
8640: PUSH
8641: LD_INT 10
8643: PUSH
8644: LD_EXP 17
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8655: LD_ADDR_VAR 0 8
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: LD_INT 3
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8670: LD_ADDR_VAR 0 9
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: LD_INT 3
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: ST_TO_ADDR
// end ; 2 :
8685: GO 8844
8687: LD_INT 2
8689: DOUBLE
8690: EQUAL
8691: IFTRUE 8695
8693: GO 8768
8695: POP
// begin chassis := [ ar_half_tracked ] ;
8696: LD_ADDR_VAR 0 6
8700: PUSH
8701: LD_INT 14
8703: PUSH
8704: EMPTY
8705: LIST
8706: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8707: LD_ADDR_VAR 0 7
8711: PUSH
8712: LD_EXP 18
8716: PUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 28
8722: PUSH
8723: LD_INT 29
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8732: LD_ADDR_VAR 0 8
8736: PUSH
8737: LD_INT 1
8739: PUSH
8740: LD_INT 5
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8747: LD_ADDR_VAR 0 9
8751: PUSH
8752: LD_INT 1
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 3
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: ST_TO_ADDR
// end ; 3 :
8766: GO 8844
8768: LD_INT 3
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 8843
8776: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_INT 23
8784: PUSH
8785: LD_INT 24
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: LD_INT 46
8799: PUSH
8800: LD_INT 45
8802: PUSH
8803: LD_INT 49
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8811: LD_ADDR_VAR 0 8
8815: PUSH
8816: LD_INT 1
8818: PUSH
8819: LD_INT 3
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8826: LD_ADDR_VAR 0 9
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 3
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: ST_TO_ADDR
// end ; end ;
8841: GO 8844
8843: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8844: LD_ADDR_OWVAR 37
8848: PUSH
8849: LD_VAR 0 6
8853: PUSH
8854: LD_INT 1
8856: PPUSH
8857: LD_VAR 0 6
8861: PPUSH
8862: CALL_OW 12
8866: ARRAY
8867: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8868: LD_ADDR_OWVAR 39
8872: PUSH
8873: LD_VAR 0 9
8877: PUSH
8878: LD_INT 1
8880: PPUSH
8881: LD_VAR 0 9
8885: PPUSH
8886: CALL_OW 12
8890: ARRAY
8891: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8892: LD_ADDR_OWVAR 38
8896: PUSH
8897: LD_VAR 0 8
8901: PUSH
8902: LD_INT 1
8904: PPUSH
8905: LD_VAR 0 8
8909: PPUSH
8910: CALL_OW 12
8914: ARRAY
8915: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8916: LD_ADDR_OWVAR 40
8920: PUSH
8921: LD_VAR 0 7
8925: PUSH
8926: LD_INT 1
8928: PPUSH
8929: LD_VAR 0 7
8933: PPUSH
8934: CALL_OW 12
8938: ARRAY
8939: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8940: LD_ADDR_OWVAR 41
8944: PUSH
8945: LD_INT 100
8947: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8948: LD_ADDR_VAR 0 3
8952: PUSH
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_VAR 0 3
8962: PUSH
8963: LD_INT 1
8965: PLUS
8966: PPUSH
8967: CALL_OW 45
8971: PPUSH
8972: CALL_OW 2
8976: ST_TO_ADDR
// end ;
8977: GO 8582
8979: POP
8980: POP
// end ; end_of_file
8981: LD_VAR 0 3
8985: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8986: LD_INT 22
8988: PUSH
8989: LD_INT 7
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 69
9000: IFFALSE 9506
9002: GO 9004
9004: DISABLE
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
// begin enable ;
9010: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
9011: LD_ADDR_VAR 0 3
9015: PUSH
9016: LD_INT 22
9018: PUSH
9019: LD_INT 7
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 69
9030: ST_TO_ADDR
// for i in tmp do
9031: LD_ADDR_VAR 0 1
9035: PUSH
9036: LD_VAR 0 3
9040: PUSH
9041: FOR_IN
9042: IFFALSE 9504
// begin case GetType ( i ) of unit_human :
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 247
9053: PUSH
9054: LD_INT 1
9056: DOUBLE
9057: EQUAL
9058: IFTRUE 9062
9060: GO 9261
9062: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
9063: LD_VAR 0 1
9067: PPUSH
9068: CALL_OW 256
9072: PUSH
9073: LD_INT 250
9075: LESS
9076: PUSH
9077: LD_INT 5
9079: PPUSH
9080: LD_INT 7
9082: PPUSH
9083: CALL_OW 321
9087: PUSH
9088: LD_INT 2
9090: NONEQUAL
9091: AND
9092: IFFALSE 9096
// continue ;
9094: GO 9041
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 257
9105: PUSH
9106: LD_INT 12
9108: PUSH
9109: LD_INT 15
9111: PUSH
9112: LD_INT 16
9114: PUSH
9115: LD_INT 17
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: LD_INT 5
9123: PUSH
9124: LD_INT 6
9126: PUSH
9127: LD_INT 7
9129: PUSH
9130: LD_INT 8
9132: PUSH
9133: LD_INT 9
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: IN
9148: IFFALSE 9186
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 22
9157: PUSH
9158: LD_OWVAR 2
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PPUSH
9167: CALL_OW 69
9171: PPUSH
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 74
9181: PPUSH
9182: CALL_OW 115
// if GetClass ( i ) = 3 then
9186: LD_VAR 0 1
9190: PPUSH
9191: CALL_OW 257
9195: PUSH
9196: LD_INT 3
9198: EQUAL
9199: IFFALSE 9259
// if IsInUnit ( i ) then
9201: LD_VAR 0 1
9205: PPUSH
9206: CALL_OW 310
9210: IFFALSE 9250
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_INT 22
9219: PUSH
9220: LD_OWVAR 2
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PPUSH
9229: CALL_OW 69
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 74
9243: PPUSH
9244: CALL_OW 115
9248: GO 9259
// ComEspace ( i ) ;
9250: LD_VAR 0 1
9254: PPUSH
9255: CALL 2259 0 1
// end ; unit_vehicle :
9259: GO 9502
9261: LD_INT 2
9263: DOUBLE
9264: EQUAL
9265: IFTRUE 9269
9267: GO 9501
9269: POP
// begin if GetLives ( i ) > 250 then
9270: LD_VAR 0 1
9274: PPUSH
9275: CALL_OW 256
9279: PUSH
9280: LD_INT 250
9282: GREATER
9283: IFFALSE 9499
// begin if GetWeapon ( i ) = us_artillery then
9285: LD_VAR 0 1
9289: PPUSH
9290: CALL_OW 264
9294: PUSH
9295: LD_EXP 17
9299: EQUAL
9300: IFFALSE 9368
// begin if IsInArea ( i , zoneOut ) then
9302: LD_VAR 0 1
9306: PPUSH
9307: LD_INT 4
9309: PPUSH
9310: CALL_OW 308
9314: IFFALSE 9330
// ComMoveToArea ( i , zoneBorder ) else
9316: LD_VAR 0 1
9320: PPUSH
9321: LD_INT 9
9323: PPUSH
9324: CALL_OW 113
9328: GO 9366
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9330: LD_VAR 0 1
9334: PPUSH
9335: LD_INT 22
9337: PUSH
9338: LD_OWVAR 2
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 69
9351: PPUSH
9352: LD_VAR 0 1
9356: PPUSH
9357: CALL_OW 74
9361: PPUSH
9362: CALL_OW 115
// end else
9366: GO 9499
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 264
9377: PUSH
9378: LD_INT 11
9380: PUSH
9381: LD_INT 30
9383: PUSH
9384: LD_EXP 14
9388: PUSH
9389: LD_INT 49
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: IN
9398: IFFALSE 9428
// begin if IsInArea ( i , zoneOut ) then
9400: LD_VAR 0 1
9404: PPUSH
9405: LD_INT 4
9407: PPUSH
9408: CALL_OW 308
9412: IFFALSE 9426
// ComSpecMove ( i , specPos ) ;
9414: LD_VAR 0 1
9418: PPUSH
9419: LD_INT 8
9421: PPUSH
9422: CALL 2305 0 2
// end else
9426: GO 9499
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9428: LD_VAR 0 1
9432: PPUSH
9433: CALL_OW 264
9437: PUSH
9438: LD_EXP 18
9442: PUSH
9443: LD_INT 29
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: IN
9450: IFFALSE 9463
// ComSpecAttack ( i ) else
9452: LD_VAR 0 1
9456: PPUSH
9457: CALL 2733 0 1
9461: GO 9499
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: LD_INT 22
9470: PUSH
9471: LD_OWVAR 2
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 69
9484: PPUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 74
9494: PPUSH
9495: CALL_OW 115
// end ; end ; end ;
9499: GO 9502
9501: POP
// end ;
9502: GO 9041
9504: POP
9505: POP
// end ; end_of_file
9506: PPOPN 3
9508: END
// export function InitDisplay ; begin
9509: LD_INT 0
9511: PPUSH
// while true do
9512: LD_INT 1
9514: IFFALSE 9601
// begin if waveNumber < 100 then
9516: LD_EXP 5
9520: PUSH
9521: LD_INT 100
9523: LESS
9524: IFFALSE 9575
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9526: LD_ADDR_OWVAR 47
9530: PUSH
9531: LD_STRING #Tick
9533: PUSH
9534: LD_OWVAR 1
9538: PUSH
9539: LD_STRING #Points
9541: PUSH
9542: LD_EXP 2
9546: PUSH
9547: LD_STRING #Attack
9549: PUSH
9550: LD_EXP 4
9554: PUSH
9555: LD_STRING #Wave
9557: PUSH
9558: LD_EXP 5
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: ST_TO_ADDR
9573: GO 9592
// Display_Strings := [ #Win , points ] ;
9575: LD_ADDR_OWVAR 47
9579: PUSH
9580: LD_STRING #Win
9582: PUSH
9583: LD_EXP 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9592: LD_INT 35
9594: PPUSH
9595: CALL_OW 67
// end ;
9599: GO 9512
// end ; end_of_file
9601: LD_VAR 0 1
9605: RET
// export function InitBonus ; var i , chance ; begin
9606: LD_INT 0
9608: PPUSH
9609: PPUSH
9610: PPUSH
// chance := rand ( 1 , 99 ) ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_INT 1
9618: PPUSH
9619: LD_INT 99
9621: PPUSH
9622: CALL_OW 12
9626: ST_TO_ADDR
// case chance of 1 .. 10 :
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 1
9634: DOUBLE
9635: GREATEREQUAL
9636: IFFALSE 9644
9638: LD_INT 10
9640: DOUBLE
9641: LESSEQUAL
9642: IFTRUE 9646
9644: GO 9657
9646: POP
// i := 5 ; 11 .. 25 :
9647: LD_ADDR_VAR 0 2
9651: PUSH
9652: LD_INT 5
9654: ST_TO_ADDR
9655: GO 9758
9657: LD_INT 11
9659: DOUBLE
9660: GREATEREQUAL
9661: IFFALSE 9669
9663: LD_INT 25
9665: DOUBLE
9666: LESSEQUAL
9667: IFTRUE 9671
9669: GO 9682
9671: POP
// i := 3 ; 26 .. 40 :
9672: LD_ADDR_VAR 0 2
9676: PUSH
9677: LD_INT 3
9679: ST_TO_ADDR
9680: GO 9758
9682: LD_INT 26
9684: DOUBLE
9685: GREATEREQUAL
9686: IFFALSE 9694
9688: LD_INT 40
9690: DOUBLE
9691: LESSEQUAL
9692: IFTRUE 9696
9694: GO 9707
9696: POP
// i := 2 ; 41 .. 60 :
9697: LD_ADDR_VAR 0 2
9701: PUSH
9702: LD_INT 2
9704: ST_TO_ADDR
9705: GO 9758
9707: LD_INT 41
9709: DOUBLE
9710: GREATEREQUAL
9711: IFFALSE 9719
9713: LD_INT 60
9715: DOUBLE
9716: LESSEQUAL
9717: IFTRUE 9721
9719: GO 9732
9721: POP
// i := 4 ; 61 .. 99 :
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_INT 4
9729: ST_TO_ADDR
9730: GO 9758
9732: LD_INT 61
9734: DOUBLE
9735: GREATEREQUAL
9736: IFFALSE 9744
9738: LD_INT 99
9740: DOUBLE
9741: LESSEQUAL
9742: IFTRUE 9746
9744: GO 9757
9746: POP
// i := 1 ; end ;
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
9755: GO 9758
9757: POP
// case i of 1 :
9758: LD_VAR 0 2
9762: PUSH
9763: LD_INT 1
9765: DOUBLE
9766: EQUAL
9767: IFTRUE 9771
9769: GO 9860
9771: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9772: LD_INT 22
9774: PUSH
9775: LD_OWVAR 2
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 2
9786: PUSH
9787: LD_INT 25
9789: PUSH
9790: LD_INT 12
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 25
9799: PUSH
9800: LD_INT 16
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 25
9809: PUSH
9810: LD_INT 15
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 17
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: PUSH
9843: LD_INT 10
9845: GREATEREQUAL
9846: IFFALSE 9854
// BonusIV else
9848: CALL 10433 0 0
9852: GO 9858
// BonusI ;
9854: CALL 9938 0 0
// end ; 2 :
9858: GO 9933
9860: LD_INT 2
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 9875
9868: POP
// begin BonusII ;
9869: CALL 10111 0 0
// end ; 3 :
9873: GO 9933
9875: LD_INT 3
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 9890
9883: POP
// begin BonusIII ;
9884: CALL 10259 0 0
// end ; 4 :
9888: GO 9933
9890: LD_INT 4
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 9905
9898: POP
// begin BonusIV ;
9899: CALL 10433 0 0
// end ; 5 :
9903: GO 9933
9905: LD_INT 5
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 9932
9913: POP
// begin if graveyard then
9914: LD_EXP 8
9918: IFFALSE 9926
// BonusV else
9920: CALL 10851 0 0
9924: GO 9930
// BonusIII ;
9926: CALL 10259 0 0
// end ; end ;
9930: GO 9933
9932: POP
// end ;
9933: LD_VAR 0 1
9937: RET
// export function BonusI ; var i ; begin
9938: LD_INT 0
9940: PPUSH
9941: PPUSH
// case Query ( AddGift1 ) of 1 :
9942: LD_STRING AddGift1
9944: PPUSH
9945: CALL_OW 97
9949: PUSH
9950: LD_INT 1
9952: DOUBLE
9953: EQUAL
9954: IFTRUE 9958
9956: GO 10037
9958: POP
// begin for i = 1 to 3 do
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_INT 3
9971: PUSH
9972: FOR_TO
9973: IFFALSE 10033
// begin uc_side := your_side ;
9975: LD_ADDR_OWVAR 20
9979: PUSH
9980: LD_OWVAR 2
9984: ST_TO_ADDR
// uc_nation := 0 ;
9985: LD_ADDR_OWVAR 21
9989: PUSH
9990: LD_INT 0
9992: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9993: LD_INT 0
9995: PPUSH
9996: LD_INT 12
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
10006: CALL_OW 44
10010: PPUSH
10011: LD_EXP 9
10015: PPUSH
10016: LD_EXP 10
10020: PPUSH
10021: LD_INT 15
10023: PPUSH
10024: LD_INT 1
10026: PPUSH
10027: CALL_OW 50
// end ;
10031: GO 9972
10033: POP
10034: POP
// end ; 2 :
10035: GO 10106
10037: LD_INT 2
10039: DOUBLE
10040: EQUAL
10041: IFTRUE 10045
10043: GO 10087
10045: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10046: LD_EXP 11
10050: PPUSH
10051: CALL_OW 274
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: LD_EXP 11
10063: PPUSH
10064: CALL_OW 274
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 275
10076: PUSH
10077: LD_INT 100
10079: PLUS
10080: PPUSH
10081: CALL_OW 277
// end ; 3 :
10085: GO 10106
10087: LD_INT 3
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10105
10095: POP
// begin SetTeamExp ( 2 ) ;
10096: LD_INT 2
10098: PPUSH
10099: CALL 1266 0 1
// end ; end ;
10103: GO 10106
10105: POP
// end ;
10106: LD_VAR 0 1
10110: RET
// export function BonusII ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// case Query ( AddGift2 ) of 1 :
10115: LD_STRING AddGift2
10117: PPUSH
10118: CALL_OW 97
10122: PUSH
10123: LD_INT 1
10125: DOUBLE
10126: EQUAL
10127: IFTRUE 10131
10129: GO 10173
10131: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10132: LD_EXP 11
10136: PPUSH
10137: CALL_OW 274
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_EXP 11
10149: PPUSH
10150: CALL_OW 274
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 275
10162: PUSH
10163: LD_INT 500
10165: PLUS
10166: PPUSH
10167: CALL_OW 277
// end ; 2 :
10171: GO 10254
10173: LD_INT 2
10175: DOUBLE
10176: EQUAL
10177: IFTRUE 10181
10179: GO 10191
10181: POP
// begin SetTeamExp ( 3 ) ;
10182: LD_INT 3
10184: PPUSH
10185: CALL 1266 0 1
// end ; 3 :
10189: GO 10254
10191: LD_INT 3
10193: DOUBLE
10194: EQUAL
10195: IFTRUE 10199
10197: GO 10253
10199: POP
// begin uc_side = your_side ;
10200: LD_ADDR_OWVAR 20
10204: PUSH
10205: LD_OWVAR 2
10209: ST_TO_ADDR
// uc_nation = nation_russian ;
10210: LD_ADDR_OWVAR 21
10214: PUSH
10215: LD_INT 3
10217: ST_TO_ADDR
// vc_chassis = 25 ;
10218: LD_ADDR_OWVAR 37
10222: PUSH
10223: LD_INT 25
10225: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10226: CALL_OW 45
10230: PPUSH
10231: LD_EXP 9
10235: PPUSH
10236: LD_EXP 10
10240: PPUSH
10241: LD_INT 15
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: CALL_OW 50
// end ; end ;
10251: GO 10254
10253: POP
// end ;
10254: LD_VAR 0 1
10258: RET
// export function BonusIII ; var i ; begin
10259: LD_INT 0
10261: PPUSH
10262: PPUSH
// case Query ( AddGift3 ) of 1 :
10263: LD_STRING AddGift3
10265: PPUSH
10266: CALL_OW 97
10270: PUSH
10271: LD_INT 1
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10321
10279: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
10280: LD_EXP 11
10284: PPUSH
10285: CALL_OW 274
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: LD_EXP 11
10297: PPUSH
10298: CALL_OW 274
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 275
10310: PUSH
10311: LD_INT 1000
10313: PLUS
10314: PPUSH
10315: CALL_OW 277
// end ; 2 :
10319: GO 10428
10321: LD_INT 2
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10341
10329: POP
// begin PrepareGuards ( waveNumber ) ;
10330: LD_EXP 5
10334: PPUSH
10335: CALL 1412 0 1
// end ; 3 :
10339: GO 10428
10341: LD_INT 3
10343: DOUBLE
10344: EQUAL
10345: IFTRUE 10349
10347: GO 10427
10349: POP
// begin uc_side = your_side ;
10350: LD_ADDR_OWVAR 20
10354: PUSH
10355: LD_OWVAR 2
10359: ST_TO_ADDR
// uc_nation = nation_american ;
10360: LD_ADDR_OWVAR 21
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// vc_chassis = us_morphling ;
10368: LD_ADDR_OWVAR 37
10372: PUSH
10373: LD_INT 5
10375: ST_TO_ADDR
// vc_engine := engine_siberite ;
10376: LD_ADDR_OWVAR 39
10380: PUSH
10381: LD_INT 3
10383: ST_TO_ADDR
// vc_control := control_computer ;
10384: LD_ADDR_OWVAR 38
10388: PUSH
10389: LD_INT 3
10391: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10392: LD_ADDR_OWVAR 40
10396: PUSH
10397: LD_INT 8
10399: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10400: CALL_OW 45
10404: PPUSH
10405: LD_EXP 9
10409: PPUSH
10410: LD_EXP 10
10414: PPUSH
10415: LD_INT 15
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: CALL_OW 50
// end ; end ;
10425: GO 10428
10427: POP
// end ;
10428: LD_VAR 0 1
10432: RET
// export function BonusIV ; var i ; begin
10433: LD_INT 0
10435: PPUSH
10436: PPUSH
// case Query ( AddGift4 ) of 1 :
10437: LD_STRING AddGift4
10439: PPUSH
10440: CALL_OW 97
10444: PUSH
10445: LD_INT 1
10447: DOUBLE
10448: EQUAL
10449: IFTRUE 10453
10451: GO 10777
10453: POP
// begin i := rand ( 1 , 3 ) ;
10454: LD_ADDR_VAR 0 2
10458: PUSH
10459: LD_INT 1
10461: PPUSH
10462: LD_INT 3
10464: PPUSH
10465: CALL_OW 12
10469: ST_TO_ADDR
// uc_side := your_side ;
10470: LD_ADDR_OWVAR 20
10474: PUSH
10475: LD_OWVAR 2
10479: ST_TO_ADDR
// case i of 1 :
10480: LD_VAR 0 2
10484: PUSH
10485: LD_INT 1
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10580
10493: POP
// begin uc_nation := nation_arabian ;
10494: LD_ADDR_OWVAR 21
10498: PUSH
10499: LD_INT 2
10501: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10502: LD_ADDR_OWVAR 37
10506: PUSH
10507: LD_INT 14
10509: ST_TO_ADDR
// vc_engine := engine_combustion ;
10510: LD_ADDR_OWVAR 39
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// vc_control := control_manual ;
10518: LD_ADDR_OWVAR 38
10522: PUSH
10523: LD_INT 1
10525: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10526: LD_ADDR_OWVAR 40
10530: PUSH
10531: LD_INT 27
10533: PUSH
10534: LD_INT 28
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 1
10543: PPUSH
10544: LD_INT 2
10546: PPUSH
10547: CALL_OW 12
10551: ARRAY
10552: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10553: CALL_OW 45
10557: PPUSH
10558: LD_EXP 9
10562: PPUSH
10563: LD_EXP 10
10567: PPUSH
10568: LD_INT 15
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: CALL_OW 50
// end ; 2 :
10578: GO 10775
10580: LD_INT 2
10582: DOUBLE
10583: EQUAL
10584: IFTRUE 10588
10586: GO 10679
10588: POP
// begin uc_nation := nation_american ;
10589: LD_ADDR_OWVAR 21
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// vc_chassis := us_morphling ;
10597: LD_ADDR_OWVAR 37
10601: PUSH
10602: LD_INT 5
10604: ST_TO_ADDR
// vc_engine := engine_siberite ;
10605: LD_ADDR_OWVAR 39
10609: PUSH
10610: LD_INT 3
10612: ST_TO_ADDR
// vc_control := control_computer ;
10613: LD_ADDR_OWVAR 38
10617: PUSH
10618: LD_INT 3
10620: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10621: LD_ADDR_OWVAR 40
10625: PUSH
10626: LD_INT 12
10628: PUSH
10629: LD_INT 10
10631: PUSH
10632: LD_INT 7
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 1
10642: PPUSH
10643: LD_INT 3
10645: PPUSH
10646: CALL_OW 12
10650: ARRAY
10651: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10652: CALL_OW 45
10656: PPUSH
10657: LD_EXP 9
10661: PPUSH
10662: LD_EXP 10
10666: PPUSH
10667: LD_INT 15
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 50
// end ; 3 :
10677: GO 10775
10679: LD_INT 3
10681: DOUBLE
10682: EQUAL
10683: IFTRUE 10687
10685: GO 10774
10687: POP
// begin uc_nation := nation_russian ;
10688: LD_ADDR_OWVAR 21
10692: PUSH
10693: LD_INT 3
10695: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10696: LD_ADDR_OWVAR 37
10700: PUSH
10701: LD_INT 22
10703: ST_TO_ADDR
// vc_engine := engine_combustion ;
10704: LD_ADDR_OWVAR 39
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// vc_control := control_manual ;
10712: LD_ADDR_OWVAR 38
10716: PUSH
10717: LD_INT 1
10719: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10720: LD_ADDR_OWVAR 40
10724: PUSH
10725: LD_INT 45
10727: PUSH
10728: LD_INT 44
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 1
10737: PPUSH
10738: LD_INT 2
10740: PPUSH
10741: CALL_OW 12
10745: ARRAY
10746: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10747: CALL_OW 45
10751: PPUSH
10752: LD_EXP 9
10756: PPUSH
10757: LD_EXP 10
10761: PPUSH
10762: LD_INT 15
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 50
// end ; end ;
10772: GO 10775
10774: POP
// end ; 2 :
10775: GO 10846
10777: LD_INT 2
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 10827
10785: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10786: LD_EXP 11
10790: PPUSH
10791: CALL_OW 274
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_EXP 11
10803: PPUSH
10804: CALL_OW 274
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 275
10816: PUSH
10817: LD_INT 100
10819: PLUS
10820: PPUSH
10821: CALL_OW 277
// end ; 3 :
10825: GO 10846
10827: LD_INT 3
10829: DOUBLE
10830: EQUAL
10831: IFTRUE 10835
10833: GO 10845
10835: POP
// begin SetTeamExp ( 2 ) ;
10836: LD_INT 2
10838: PPUSH
10839: CALL 1266 0 1
// end ; end ;
10843: GO 10846
10845: POP
// end ;
10846: LD_VAR 0 1
10850: RET
// export function BonusV ; var i , j ; begin
10851: LD_INT 0
10853: PPUSH
10854: PPUSH
10855: PPUSH
// case Query ( AddGift5 ) of 1 :
10856: LD_STRING AddGift5
10858: PPUSH
10859: CALL_OW 97
10863: PUSH
10864: LD_INT 1
10866: DOUBLE
10867: EQUAL
10868: IFTRUE 10872
10870: GO 11216
10872: POP
// begin for j = 1 to 3 do
10873: LD_ADDR_VAR 0 3
10877: PUSH
10878: DOUBLE
10879: LD_INT 1
10881: DEC
10882: ST_TO_ADDR
10883: LD_INT 3
10885: PUSH
10886: FOR_TO
10887: IFFALSE 11212
// begin i := rand ( 1 , 3 ) ;
10889: LD_ADDR_VAR 0 2
10893: PUSH
10894: LD_INT 1
10896: PPUSH
10897: LD_INT 3
10899: PPUSH
10900: CALL_OW 12
10904: ST_TO_ADDR
// uc_side := your_side ;
10905: LD_ADDR_OWVAR 20
10909: PUSH
10910: LD_OWVAR 2
10914: ST_TO_ADDR
// case i of 1 :
10915: LD_VAR 0 2
10919: PUSH
10920: LD_INT 1
10922: DOUBLE
10923: EQUAL
10924: IFTRUE 10928
10926: GO 11015
10928: POP
// begin uc_nation := nation_arabian ;
10929: LD_ADDR_OWVAR 21
10933: PUSH
10934: LD_INT 2
10936: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10937: LD_ADDR_OWVAR 37
10941: PUSH
10942: LD_INT 14
10944: ST_TO_ADDR
// vc_engine := engine_combustion ;
10945: LD_ADDR_OWVAR 39
10949: PUSH
10950: LD_INT 1
10952: ST_TO_ADDR
// vc_control := control_manual ;
10953: LD_ADDR_OWVAR 38
10957: PUSH
10958: LD_INT 1
10960: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10961: LD_ADDR_OWVAR 40
10965: PUSH
10966: LD_INT 27
10968: PUSH
10969: LD_INT 28
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 1
10978: PPUSH
10979: LD_INT 2
10981: PPUSH
10982: CALL_OW 12
10986: ARRAY
10987: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10988: CALL_OW 45
10992: PPUSH
10993: LD_EXP 9
10997: PPUSH
10998: LD_EXP 10
11002: PPUSH
11003: LD_INT 15
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 50
// end ; 2 :
11013: GO 11210
11015: LD_INT 2
11017: DOUBLE
11018: EQUAL
11019: IFTRUE 11023
11021: GO 11114
11023: POP
// begin uc_nation := nation_american ;
11024: LD_ADDR_OWVAR 21
11028: PUSH
11029: LD_INT 1
11031: ST_TO_ADDR
// vc_chassis := us_morphling ;
11032: LD_ADDR_OWVAR 37
11036: PUSH
11037: LD_INT 5
11039: ST_TO_ADDR
// vc_engine := engine_siberite ;
11040: LD_ADDR_OWVAR 39
11044: PUSH
11045: LD_INT 3
11047: ST_TO_ADDR
// vc_control := control_computer ;
11048: LD_ADDR_OWVAR 38
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11056: LD_ADDR_OWVAR 40
11060: PUSH
11061: LD_INT 12
11063: PUSH
11064: LD_INT 11
11066: PUSH
11067: LD_INT 7
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 1
11077: PPUSH
11078: LD_INT 3
11080: PPUSH
11081: CALL_OW 12
11085: ARRAY
11086: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11087: CALL_OW 45
11091: PPUSH
11092: LD_EXP 9
11096: PPUSH
11097: LD_EXP 10
11101: PPUSH
11102: LD_INT 15
11104: PPUSH
11105: LD_INT 1
11107: PPUSH
11108: CALL_OW 50
// end ; 3 :
11112: GO 11210
11114: LD_INT 3
11116: DOUBLE
11117: EQUAL
11118: IFTRUE 11122
11120: GO 11209
11122: POP
// begin uc_nation := nation_russian ;
11123: LD_ADDR_OWVAR 21
11127: PUSH
11128: LD_INT 3
11130: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
11131: LD_ADDR_OWVAR 37
11135: PUSH
11136: LD_INT 22
11138: ST_TO_ADDR
// vc_engine := engine_combustion ;
11139: LD_ADDR_OWVAR 39
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// vc_control := control_manual ;
11147: LD_ADDR_OWVAR 38
11151: PUSH
11152: LD_INT 1
11154: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
11155: LD_ADDR_OWVAR 40
11159: PUSH
11160: LD_INT 45
11162: PUSH
11163: LD_INT 44
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 1
11172: PPUSH
11173: LD_INT 2
11175: PPUSH
11176: CALL_OW 12
11180: ARRAY
11181: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11182: CALL_OW 45
11186: PPUSH
11187: LD_EXP 9
11191: PPUSH
11192: LD_EXP 10
11196: PPUSH
11197: LD_INT 15
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 50
// end ; end ;
11207: GO 11210
11209: POP
// end ;
11210: GO 10886
11212: POP
11213: POP
// end ; 2 :
11214: GO 11282
11216: LD_INT 2
11218: DOUBLE
11219: EQUAL
11220: IFTRUE 11224
11222: GO 11266
11224: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
11225: LD_EXP 11
11229: PPUSH
11230: CALL_OW 274
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: LD_EXP 11
11242: PPUSH
11243: CALL_OW 274
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 275
11255: PUSH
11256: LD_INT 500
11258: PLUS
11259: PPUSH
11260: CALL_OW 277
// end ; 3 :
11264: GO 11282
11266: LD_INT 3
11268: DOUBLE
11269: EQUAL
11270: IFTRUE 11274
11272: GO 11281
11274: POP
// begin GetBack ( ) ;
11275: CALL 2072 0 0
// end ; end ;
11279: GO 11282
11281: POP
// end ; end_of_file
11282: LD_VAR 0 1
11286: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
11287: GO 11289
11289: DISABLE
// begin ru_radar := 98 ;
11290: LD_ADDR_EXP 14
11294: PUSH
11295: LD_INT 98
11297: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11298: LD_ADDR_EXP 15
11302: PUSH
11303: LD_INT 89
11305: ST_TO_ADDR
// us_hack := 99 ;
11306: LD_ADDR_EXP 16
11310: PUSH
11311: LD_INT 99
11313: ST_TO_ADDR
// us_artillery := 97 ;
11314: LD_ADDR_EXP 17
11318: PUSH
11319: LD_INT 97
11321: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11322: LD_ADDR_EXP 18
11326: PUSH
11327: LD_INT 91
11329: ST_TO_ADDR
// end ; end_of_file end_of_file
11330: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11331: GO 11333
11333: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11334: LD_STRING initStreamRollete();
11336: PPUSH
11337: CALL_OW 559
// InitStreamMode ;
11341: CALL 11350 0 0
// DefineStreamItems ( ) ;
11345: CALL 11790 0 0
// end ;
11349: END
// function InitStreamMode ; begin
11350: LD_INT 0
11352: PPUSH
// streamModeActive := false ;
11353: LD_ADDR_EXP 19
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// normalCounter := 26 ;
11361: LD_ADDR_EXP 20
11365: PUSH
11366: LD_INT 26
11368: ST_TO_ADDR
// hardcoreCounter := 12 ;
11369: LD_ADDR_EXP 21
11373: PUSH
11374: LD_INT 12
11376: ST_TO_ADDR
// sRocket := false ;
11377: LD_ADDR_EXP 24
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sSpeed := false ;
11385: LD_ADDR_EXP 23
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sEngine := false ;
11393: LD_ADDR_EXP 25
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sSpec := false ;
11401: LD_ADDR_EXP 22
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sLevel := false ;
11409: LD_ADDR_EXP 26
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sArmoury := false ;
11417: LD_ADDR_EXP 27
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sRadar := false ;
11425: LD_ADDR_EXP 28
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sBunker := false ;
11433: LD_ADDR_EXP 29
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sHack := false ;
11441: LD_ADDR_EXP 30
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sFire := false ;
11449: LD_ADDR_EXP 31
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// sRefresh := false ;
11457: LD_ADDR_EXP 32
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// sExp := false ;
11465: LD_ADDR_EXP 33
11469: PUSH
11470: LD_INT 0
11472: ST_TO_ADDR
// sDepot := false ;
11473: LD_ADDR_EXP 34
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
// sFlag := false ;
11481: LD_ADDR_EXP 35
11485: PUSH
11486: LD_INT 0
11488: ST_TO_ADDR
// sKamikadze := false ;
11489: LD_ADDR_EXP 43
11493: PUSH
11494: LD_INT 0
11496: ST_TO_ADDR
// sTroll := false ;
11497: LD_ADDR_EXP 44
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// sSlow := false ;
11505: LD_ADDR_EXP 45
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// sLack := false ;
11513: LD_ADDR_EXP 46
11517: PUSH
11518: LD_INT 0
11520: ST_TO_ADDR
// sTank := false ;
11521: LD_ADDR_EXP 48
11525: PUSH
11526: LD_INT 0
11528: ST_TO_ADDR
// sRemote := false ;
11529: LD_ADDR_EXP 49
11533: PUSH
11534: LD_INT 0
11536: ST_TO_ADDR
// sPowell := false ;
11537: LD_ADDR_EXP 50
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// sTeleport := false ;
11545: LD_ADDR_EXP 53
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// sOilTower := false ;
11553: LD_ADDR_EXP 55
11557: PUSH
11558: LD_INT 0
11560: ST_TO_ADDR
// sShovel := false ;
11561: LD_ADDR_EXP 56
11565: PUSH
11566: LD_INT 0
11568: ST_TO_ADDR
// sSheik := false ;
11569: LD_ADDR_EXP 57
11573: PUSH
11574: LD_INT 0
11576: ST_TO_ADDR
// sEarthquake := false ;
11577: LD_ADDR_EXP 59
11581: PUSH
11582: LD_INT 0
11584: ST_TO_ADDR
// sAI := false ;
11585: LD_ADDR_EXP 60
11589: PUSH
11590: LD_INT 0
11592: ST_TO_ADDR
// sCargo := false ;
11593: LD_ADDR_EXP 63
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// sDLaser := false ;
11601: LD_ADDR_EXP 64
11605: PUSH
11606: LD_INT 0
11608: ST_TO_ADDR
// sExchange := false ;
11609: LD_ADDR_EXP 65
11613: PUSH
11614: LD_INT 0
11616: ST_TO_ADDR
// sFac := false ;
11617: LD_ADDR_EXP 66
11621: PUSH
11622: LD_INT 0
11624: ST_TO_ADDR
// sPower := false ;
11625: LD_ADDR_EXP 67
11629: PUSH
11630: LD_INT 0
11632: ST_TO_ADDR
// sRandom := false ;
11633: LD_ADDR_EXP 68
11637: PUSH
11638: LD_INT 0
11640: ST_TO_ADDR
// sShield := false ;
11641: LD_ADDR_EXP 69
11645: PUSH
11646: LD_INT 0
11648: ST_TO_ADDR
// sTime := false ;
11649: LD_ADDR_EXP 70
11653: PUSH
11654: LD_INT 0
11656: ST_TO_ADDR
// sTools := false ;
11657: LD_ADDR_EXP 71
11661: PUSH
11662: LD_INT 0
11664: ST_TO_ADDR
// sSold := false ;
11665: LD_ADDR_EXP 36
11669: PUSH
11670: LD_INT 0
11672: ST_TO_ADDR
// sDiff := false ;
11673: LD_ADDR_EXP 37
11677: PUSH
11678: LD_INT 0
11680: ST_TO_ADDR
// sFog := false ;
11681: LD_ADDR_EXP 40
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// sReset := false ;
11689: LD_ADDR_EXP 41
11693: PUSH
11694: LD_INT 0
11696: ST_TO_ADDR
// sSun := false ;
11697: LD_ADDR_EXP 42
11701: PUSH
11702: LD_INT 0
11704: ST_TO_ADDR
// sTiger := false ;
11705: LD_ADDR_EXP 38
11709: PUSH
11710: LD_INT 0
11712: ST_TO_ADDR
// sBomb := false ;
11713: LD_ADDR_EXP 39
11717: PUSH
11718: LD_INT 0
11720: ST_TO_ADDR
// sWound := false ;
11721: LD_ADDR_EXP 47
11725: PUSH
11726: LD_INT 0
11728: ST_TO_ADDR
// sBetray := false ;
11729: LD_ADDR_EXP 51
11733: PUSH
11734: LD_INT 0
11736: ST_TO_ADDR
// sContamin := false ;
11737: LD_ADDR_EXP 52
11741: PUSH
11742: LD_INT 0
11744: ST_TO_ADDR
// sOil := false ;
11745: LD_ADDR_EXP 54
11749: PUSH
11750: LD_INT 0
11752: ST_TO_ADDR
// sStu := false ;
11753: LD_ADDR_EXP 58
11757: PUSH
11758: LD_INT 0
11760: ST_TO_ADDR
// sBazooka := false ;
11761: LD_ADDR_EXP 61
11765: PUSH
11766: LD_INT 0
11768: ST_TO_ADDR
// sMortar := false ;
11769: LD_ADDR_EXP 62
11773: PUSH
11774: LD_INT 0
11776: ST_TO_ADDR
// sRanger := false ;
11777: LD_ADDR_EXP 72
11781: PUSH
11782: LD_INT 0
11784: ST_TO_ADDR
// end ;
11785: LD_VAR 0 1
11789: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11790: LD_INT 0
11792: PPUSH
11793: PPUSH
11794: PPUSH
11795: PPUSH
11796: PPUSH
// result := [ ] ;
11797: LD_ADDR_VAR 0 1
11801: PUSH
11802: EMPTY
11803: ST_TO_ADDR
// if campaign_id = 1 then
11804: LD_OWVAR 69
11808: PUSH
11809: LD_INT 1
11811: EQUAL
11812: IFFALSE 14760
// begin case mission_number of 1 :
11814: LD_OWVAR 70
11818: PUSH
11819: LD_INT 1
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11891
11827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 4
11838: PUSH
11839: LD_INT 11
11841: PUSH
11842: LD_INT 12
11844: PUSH
11845: LD_INT 15
11847: PUSH
11848: LD_INT 16
11850: PUSH
11851: LD_INT 22
11853: PUSH
11854: LD_INT 23
11856: PUSH
11857: LD_INT 26
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 101
11873: PUSH
11874: LD_INT 102
11876: PUSH
11877: LD_INT 106
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: ST_TO_ADDR
11889: GO 14760
11891: LD_INT 2
11893: DOUBLE
11894: EQUAL
11895: IFTRUE 11899
11897: GO 11971
11899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11900: LD_ADDR_VAR 0 1
11904: PUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 4
11910: PUSH
11911: LD_INT 11
11913: PUSH
11914: LD_INT 12
11916: PUSH
11917: LD_INT 15
11919: PUSH
11920: LD_INT 16
11922: PUSH
11923: LD_INT 22
11925: PUSH
11926: LD_INT 23
11928: PUSH
11929: LD_INT 26
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 101
11945: PUSH
11946: LD_INT 102
11948: PUSH
11949: LD_INT 105
11951: PUSH
11952: LD_INT 106
11954: PUSH
11955: LD_INT 108
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: ST_TO_ADDR
11969: GO 14760
11971: LD_INT 3
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12055
11979: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11980: LD_ADDR_VAR 0 1
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: LD_INT 4
11990: PUSH
11991: LD_INT 5
11993: PUSH
11994: LD_INT 11
11996: PUSH
11997: LD_INT 12
11999: PUSH
12000: LD_INT 15
12002: PUSH
12003: LD_INT 16
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_INT 26
12011: PUSH
12012: LD_INT 36
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 101
12029: PUSH
12030: LD_INT 102
12032: PUSH
12033: LD_INT 105
12035: PUSH
12036: LD_INT 106
12038: PUSH
12039: LD_INT 108
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: ST_TO_ADDR
12053: GO 14760
12055: LD_INT 4
12057: DOUBLE
12058: EQUAL
12059: IFTRUE 12063
12061: GO 12147
12063: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: LD_INT 8
12080: PUSH
12081: LD_INT 11
12083: PUSH
12084: LD_INT 12
12086: PUSH
12087: LD_INT 15
12089: PUSH
12090: LD_INT 16
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 23
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 36
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 101
12121: PUSH
12122: LD_INT 102
12124: PUSH
12125: LD_INT 105
12127: PUSH
12128: LD_INT 106
12130: PUSH
12131: LD_INT 108
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: ST_TO_ADDR
12145: GO 14760
12147: LD_INT 5
12149: DOUBLE
12150: EQUAL
12151: IFTRUE 12155
12153: GO 12255
12155: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12156: LD_ADDR_VAR 0 1
12160: PUSH
12161: LD_INT 2
12163: PUSH
12164: LD_INT 4
12166: PUSH
12167: LD_INT 5
12169: PUSH
12170: LD_INT 6
12172: PUSH
12173: LD_INT 8
12175: PUSH
12176: LD_INT 11
12178: PUSH
12179: LD_INT 12
12181: PUSH
12182: LD_INT 15
12184: PUSH
12185: LD_INT 16
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_INT 23
12193: PUSH
12194: LD_INT 25
12196: PUSH
12197: LD_INT 26
12199: PUSH
12200: LD_INT 36
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 101
12221: PUSH
12222: LD_INT 102
12224: PUSH
12225: LD_INT 105
12227: PUSH
12228: LD_INT 106
12230: PUSH
12231: LD_INT 108
12233: PUSH
12234: LD_INT 109
12236: PUSH
12237: LD_INT 112
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: ST_TO_ADDR
12253: GO 14760
12255: LD_INT 6
12257: DOUBLE
12258: EQUAL
12259: IFTRUE 12263
12261: GO 12383
12263: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12264: LD_ADDR_VAR 0 1
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: LD_INT 4
12274: PUSH
12275: LD_INT 5
12277: PUSH
12278: LD_INT 6
12280: PUSH
12281: LD_INT 8
12283: PUSH
12284: LD_INT 11
12286: PUSH
12287: LD_INT 12
12289: PUSH
12290: LD_INT 15
12292: PUSH
12293: LD_INT 16
12295: PUSH
12296: LD_INT 20
12298: PUSH
12299: LD_INT 21
12301: PUSH
12302: LD_INT 22
12304: PUSH
12305: LD_INT 23
12307: PUSH
12308: LD_INT 25
12310: PUSH
12311: LD_INT 26
12313: PUSH
12314: LD_INT 30
12316: PUSH
12317: LD_INT 31
12319: PUSH
12320: LD_INT 32
12322: PUSH
12323: LD_INT 36
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 101
12349: PUSH
12350: LD_INT 102
12352: PUSH
12353: LD_INT 105
12355: PUSH
12356: LD_INT 106
12358: PUSH
12359: LD_INT 108
12361: PUSH
12362: LD_INT 109
12364: PUSH
12365: LD_INT 112
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: ST_TO_ADDR
12381: GO 14760
12383: LD_INT 7
12385: DOUBLE
12386: EQUAL
12387: IFTRUE 12391
12389: GO 12491
12391: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12392: LD_ADDR_VAR 0 1
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: LD_INT 5
12405: PUSH
12406: LD_INT 7
12408: PUSH
12409: LD_INT 11
12411: PUSH
12412: LD_INT 12
12414: PUSH
12415: LD_INT 15
12417: PUSH
12418: LD_INT 16
12420: PUSH
12421: LD_INT 20
12423: PUSH
12424: LD_INT 21
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_INT 23
12432: PUSH
12433: LD_INT 25
12435: PUSH
12436: LD_INT 26
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 101
12457: PUSH
12458: LD_INT 102
12460: PUSH
12461: LD_INT 103
12463: PUSH
12464: LD_INT 105
12466: PUSH
12467: LD_INT 106
12469: PUSH
12470: LD_INT 108
12472: PUSH
12473: LD_INT 112
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: ST_TO_ADDR
12489: GO 14760
12491: LD_INT 8
12493: DOUBLE
12494: EQUAL
12495: IFTRUE 12499
12497: GO 12627
12499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12500: LD_ADDR_VAR 0 1
12504: PUSH
12505: LD_INT 2
12507: PUSH
12508: LD_INT 4
12510: PUSH
12511: LD_INT 5
12513: PUSH
12514: LD_INT 6
12516: PUSH
12517: LD_INT 7
12519: PUSH
12520: LD_INT 8
12522: PUSH
12523: LD_INT 11
12525: PUSH
12526: LD_INT 12
12528: PUSH
12529: LD_INT 15
12531: PUSH
12532: LD_INT 16
12534: PUSH
12535: LD_INT 20
12537: PUSH
12538: LD_INT 21
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_INT 23
12546: PUSH
12547: LD_INT 25
12549: PUSH
12550: LD_INT 26
12552: PUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 31
12558: PUSH
12559: LD_INT 32
12561: PUSH
12562: LD_INT 36
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 101
12589: PUSH
12590: LD_INT 102
12592: PUSH
12593: LD_INT 103
12595: PUSH
12596: LD_INT 105
12598: PUSH
12599: LD_INT 106
12601: PUSH
12602: LD_INT 108
12604: PUSH
12605: LD_INT 109
12607: PUSH
12608: LD_INT 112
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: ST_TO_ADDR
12625: GO 14760
12627: LD_INT 9
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12771
12635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12636: LD_ADDR_VAR 0 1
12640: PUSH
12641: LD_INT 2
12643: PUSH
12644: LD_INT 4
12646: PUSH
12647: LD_INT 5
12649: PUSH
12650: LD_INT 6
12652: PUSH
12653: LD_INT 7
12655: PUSH
12656: LD_INT 8
12658: PUSH
12659: LD_INT 11
12661: PUSH
12662: LD_INT 12
12664: PUSH
12665: LD_INT 15
12667: PUSH
12668: LD_INT 16
12670: PUSH
12671: LD_INT 20
12673: PUSH
12674: LD_INT 21
12676: PUSH
12677: LD_INT 22
12679: PUSH
12680: LD_INT 23
12682: PUSH
12683: LD_INT 25
12685: PUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 28
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 31
12697: PUSH
12698: LD_INT 32
12700: PUSH
12701: LD_INT 36
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 101
12729: PUSH
12730: LD_INT 102
12732: PUSH
12733: LD_INT 103
12735: PUSH
12736: LD_INT 105
12738: PUSH
12739: LD_INT 106
12741: PUSH
12742: LD_INT 108
12744: PUSH
12745: LD_INT 109
12747: PUSH
12748: LD_INT 112
12750: PUSH
12751: LD_INT 114
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: ST_TO_ADDR
12769: GO 14760
12771: LD_INT 10
12773: DOUBLE
12774: EQUAL
12775: IFTRUE 12779
12777: GO 12963
12779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12780: LD_ADDR_VAR 0 1
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 4
12790: PUSH
12791: LD_INT 5
12793: PUSH
12794: LD_INT 6
12796: PUSH
12797: LD_INT 7
12799: PUSH
12800: LD_INT 8
12802: PUSH
12803: LD_INT 9
12805: PUSH
12806: LD_INT 10
12808: PUSH
12809: LD_INT 11
12811: PUSH
12812: LD_INT 12
12814: PUSH
12815: LD_INT 13
12817: PUSH
12818: LD_INT 14
12820: PUSH
12821: LD_INT 15
12823: PUSH
12824: LD_INT 16
12826: PUSH
12827: LD_INT 17
12829: PUSH
12830: LD_INT 18
12832: PUSH
12833: LD_INT 19
12835: PUSH
12836: LD_INT 20
12838: PUSH
12839: LD_INT 21
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 23
12847: PUSH
12848: LD_INT 24
12850: PUSH
12851: LD_INT 25
12853: PUSH
12854: LD_INT 26
12856: PUSH
12857: LD_INT 28
12859: PUSH
12860: LD_INT 30
12862: PUSH
12863: LD_INT 31
12865: PUSH
12866: LD_INT 32
12868: PUSH
12869: LD_INT 36
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 101
12905: PUSH
12906: LD_INT 102
12908: PUSH
12909: LD_INT 103
12911: PUSH
12912: LD_INT 104
12914: PUSH
12915: LD_INT 105
12917: PUSH
12918: LD_INT 106
12920: PUSH
12921: LD_INT 107
12923: PUSH
12924: LD_INT 108
12926: PUSH
12927: LD_INT 109
12929: PUSH
12930: LD_INT 110
12932: PUSH
12933: LD_INT 111
12935: PUSH
12936: LD_INT 112
12938: PUSH
12939: LD_INT 114
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: ST_TO_ADDR
12961: GO 14760
12963: LD_INT 11
12965: DOUBLE
12966: EQUAL
12967: IFTRUE 12971
12969: GO 13163
12971: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12972: LD_ADDR_VAR 0 1
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: LD_INT 3
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: LD_INT 5
12988: PUSH
12989: LD_INT 6
12991: PUSH
12992: LD_INT 7
12994: PUSH
12995: LD_INT 8
12997: PUSH
12998: LD_INT 9
13000: PUSH
13001: LD_INT 10
13003: PUSH
13004: LD_INT 11
13006: PUSH
13007: LD_INT 12
13009: PUSH
13010: LD_INT 13
13012: PUSH
13013: LD_INT 14
13015: PUSH
13016: LD_INT 15
13018: PUSH
13019: LD_INT 16
13021: PUSH
13022: LD_INT 17
13024: PUSH
13025: LD_INT 18
13027: PUSH
13028: LD_INT 19
13030: PUSH
13031: LD_INT 20
13033: PUSH
13034: LD_INT 21
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 23
13042: PUSH
13043: LD_INT 24
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 26
13051: PUSH
13052: LD_INT 28
13054: PUSH
13055: LD_INT 30
13057: PUSH
13058: LD_INT 31
13060: PUSH
13061: LD_INT 32
13063: PUSH
13064: LD_INT 34
13066: PUSH
13067: LD_INT 36
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 101
13105: PUSH
13106: LD_INT 102
13108: PUSH
13109: LD_INT 103
13111: PUSH
13112: LD_INT 104
13114: PUSH
13115: LD_INT 105
13117: PUSH
13118: LD_INT 106
13120: PUSH
13121: LD_INT 107
13123: PUSH
13124: LD_INT 108
13126: PUSH
13127: LD_INT 109
13129: PUSH
13130: LD_INT 110
13132: PUSH
13133: LD_INT 111
13135: PUSH
13136: LD_INT 112
13138: PUSH
13139: LD_INT 114
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: ST_TO_ADDR
13161: GO 14760
13163: LD_INT 12
13165: DOUBLE
13166: EQUAL
13167: IFTRUE 13171
13169: GO 13379
13171: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13172: LD_ADDR_VAR 0 1
13176: PUSH
13177: LD_INT 1
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: LD_INT 3
13185: PUSH
13186: LD_INT 4
13188: PUSH
13189: LD_INT 5
13191: PUSH
13192: LD_INT 6
13194: PUSH
13195: LD_INT 7
13197: PUSH
13198: LD_INT 8
13200: PUSH
13201: LD_INT 9
13203: PUSH
13204: LD_INT 10
13206: PUSH
13207: LD_INT 11
13209: PUSH
13210: LD_INT 12
13212: PUSH
13213: LD_INT 13
13215: PUSH
13216: LD_INT 14
13218: PUSH
13219: LD_INT 15
13221: PUSH
13222: LD_INT 16
13224: PUSH
13225: LD_INT 17
13227: PUSH
13228: LD_INT 18
13230: PUSH
13231: LD_INT 19
13233: PUSH
13234: LD_INT 20
13236: PUSH
13237: LD_INT 21
13239: PUSH
13240: LD_INT 22
13242: PUSH
13243: LD_INT 23
13245: PUSH
13246: LD_INT 24
13248: PUSH
13249: LD_INT 25
13251: PUSH
13252: LD_INT 26
13254: PUSH
13255: LD_INT 27
13257: PUSH
13258: LD_INT 28
13260: PUSH
13261: LD_INT 30
13263: PUSH
13264: LD_INT 31
13266: PUSH
13267: LD_INT 32
13269: PUSH
13270: LD_INT 33
13272: PUSH
13273: LD_INT 34
13275: PUSH
13276: LD_INT 36
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 101
13317: PUSH
13318: LD_INT 102
13320: PUSH
13321: LD_INT 103
13323: PUSH
13324: LD_INT 104
13326: PUSH
13327: LD_INT 105
13329: PUSH
13330: LD_INT 106
13332: PUSH
13333: LD_INT 107
13335: PUSH
13336: LD_INT 108
13338: PUSH
13339: LD_INT 109
13341: PUSH
13342: LD_INT 110
13344: PUSH
13345: LD_INT 111
13347: PUSH
13348: LD_INT 112
13350: PUSH
13351: LD_INT 113
13353: PUSH
13354: LD_INT 114
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: ST_TO_ADDR
13377: GO 14760
13379: LD_INT 13
13381: DOUBLE
13382: EQUAL
13383: IFTRUE 13387
13385: GO 13595
13387: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13388: LD_ADDR_VAR 0 1
13392: PUSH
13393: LD_INT 1
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: LD_INT 4
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: LD_INT 6
13410: PUSH
13411: LD_INT 7
13413: PUSH
13414: LD_INT 8
13416: PUSH
13417: LD_INT 9
13419: PUSH
13420: LD_INT 10
13422: PUSH
13423: LD_INT 11
13425: PUSH
13426: LD_INT 12
13428: PUSH
13429: LD_INT 13
13431: PUSH
13432: LD_INT 14
13434: PUSH
13435: LD_INT 15
13437: PUSH
13438: LD_INT 16
13440: PUSH
13441: LD_INT 17
13443: PUSH
13444: LD_INT 18
13446: PUSH
13447: LD_INT 19
13449: PUSH
13450: LD_INT 20
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 22
13458: PUSH
13459: LD_INT 23
13461: PUSH
13462: LD_INT 24
13464: PUSH
13465: LD_INT 25
13467: PUSH
13468: LD_INT 26
13470: PUSH
13471: LD_INT 27
13473: PUSH
13474: LD_INT 28
13476: PUSH
13477: LD_INT 30
13479: PUSH
13480: LD_INT 31
13482: PUSH
13483: LD_INT 32
13485: PUSH
13486: LD_INT 33
13488: PUSH
13489: LD_INT 34
13491: PUSH
13492: LD_INT 36
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 101
13533: PUSH
13534: LD_INT 102
13536: PUSH
13537: LD_INT 103
13539: PUSH
13540: LD_INT 104
13542: PUSH
13543: LD_INT 105
13545: PUSH
13546: LD_INT 106
13548: PUSH
13549: LD_INT 107
13551: PUSH
13552: LD_INT 108
13554: PUSH
13555: LD_INT 109
13557: PUSH
13558: LD_INT 110
13560: PUSH
13561: LD_INT 111
13563: PUSH
13564: LD_INT 112
13566: PUSH
13567: LD_INT 113
13569: PUSH
13570: LD_INT 114
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: ST_TO_ADDR
13593: GO 14760
13595: LD_INT 14
13597: DOUBLE
13598: EQUAL
13599: IFTRUE 13603
13601: GO 13815
13603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: LD_INT 3
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: LD_INT 5
13623: PUSH
13624: LD_INT 6
13626: PUSH
13627: LD_INT 7
13629: PUSH
13630: LD_INT 8
13632: PUSH
13633: LD_INT 9
13635: PUSH
13636: LD_INT 10
13638: PUSH
13639: LD_INT 11
13641: PUSH
13642: LD_INT 12
13644: PUSH
13645: LD_INT 13
13647: PUSH
13648: LD_INT 14
13650: PUSH
13651: LD_INT 15
13653: PUSH
13654: LD_INT 16
13656: PUSH
13657: LD_INT 17
13659: PUSH
13660: LD_INT 18
13662: PUSH
13663: LD_INT 19
13665: PUSH
13666: LD_INT 20
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_INT 23
13677: PUSH
13678: LD_INT 24
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 27
13689: PUSH
13690: LD_INT 28
13692: PUSH
13693: LD_INT 29
13695: PUSH
13696: LD_INT 30
13698: PUSH
13699: LD_INT 31
13701: PUSH
13702: LD_INT 32
13704: PUSH
13705: LD_INT 33
13707: PUSH
13708: LD_INT 34
13710: PUSH
13711: LD_INT 36
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 101
13753: PUSH
13754: LD_INT 102
13756: PUSH
13757: LD_INT 103
13759: PUSH
13760: LD_INT 104
13762: PUSH
13763: LD_INT 105
13765: PUSH
13766: LD_INT 106
13768: PUSH
13769: LD_INT 107
13771: PUSH
13772: LD_INT 108
13774: PUSH
13775: LD_INT 109
13777: PUSH
13778: LD_INT 110
13780: PUSH
13781: LD_INT 111
13783: PUSH
13784: LD_INT 112
13786: PUSH
13787: LD_INT 113
13789: PUSH
13790: LD_INT 114
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: ST_TO_ADDR
13813: GO 14760
13815: LD_INT 15
13817: DOUBLE
13818: EQUAL
13819: IFTRUE 13823
13821: GO 14035
13823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13824: LD_ADDR_VAR 0 1
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 3
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 6
13846: PUSH
13847: LD_INT 7
13849: PUSH
13850: LD_INT 8
13852: PUSH
13853: LD_INT 9
13855: PUSH
13856: LD_INT 10
13858: PUSH
13859: LD_INT 11
13861: PUSH
13862: LD_INT 12
13864: PUSH
13865: LD_INT 13
13867: PUSH
13868: LD_INT 14
13870: PUSH
13871: LD_INT 15
13873: PUSH
13874: LD_INT 16
13876: PUSH
13877: LD_INT 17
13879: PUSH
13880: LD_INT 18
13882: PUSH
13883: LD_INT 19
13885: PUSH
13886: LD_INT 20
13888: PUSH
13889: LD_INT 21
13891: PUSH
13892: LD_INT 22
13894: PUSH
13895: LD_INT 23
13897: PUSH
13898: LD_INT 24
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 26
13906: PUSH
13907: LD_INT 27
13909: PUSH
13910: LD_INT 28
13912: PUSH
13913: LD_INT 29
13915: PUSH
13916: LD_INT 30
13918: PUSH
13919: LD_INT 31
13921: PUSH
13922: LD_INT 32
13924: PUSH
13925: LD_INT 33
13927: PUSH
13928: LD_INT 34
13930: PUSH
13931: LD_INT 36
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 101
13973: PUSH
13974: LD_INT 102
13976: PUSH
13977: LD_INT 103
13979: PUSH
13980: LD_INT 104
13982: PUSH
13983: LD_INT 105
13985: PUSH
13986: LD_INT 106
13988: PUSH
13989: LD_INT 107
13991: PUSH
13992: LD_INT 108
13994: PUSH
13995: LD_INT 109
13997: PUSH
13998: LD_INT 110
14000: PUSH
14001: LD_INT 111
14003: PUSH
14004: LD_INT 112
14006: PUSH
14007: LD_INT 113
14009: PUSH
14010: LD_INT 114
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: ST_TO_ADDR
14033: GO 14760
14035: LD_INT 16
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14167
14043: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14044: LD_ADDR_VAR 0 1
14048: PUSH
14049: LD_INT 2
14051: PUSH
14052: LD_INT 4
14054: PUSH
14055: LD_INT 5
14057: PUSH
14058: LD_INT 7
14060: PUSH
14061: LD_INT 11
14063: PUSH
14064: LD_INT 12
14066: PUSH
14067: LD_INT 15
14069: PUSH
14070: LD_INT 16
14072: PUSH
14073: LD_INT 20
14075: PUSH
14076: LD_INT 21
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_INT 23
14084: PUSH
14085: LD_INT 25
14087: PUSH
14088: LD_INT 26
14090: PUSH
14091: LD_INT 30
14093: PUSH
14094: LD_INT 31
14096: PUSH
14097: LD_INT 32
14099: PUSH
14100: LD_INT 33
14102: PUSH
14103: LD_INT 34
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 101
14129: PUSH
14130: LD_INT 102
14132: PUSH
14133: LD_INT 103
14135: PUSH
14136: LD_INT 106
14138: PUSH
14139: LD_INT 108
14141: PUSH
14142: LD_INT 112
14144: PUSH
14145: LD_INT 113
14147: PUSH
14148: LD_INT 114
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: ST_TO_ADDR
14165: GO 14760
14167: LD_INT 17
14169: DOUBLE
14170: EQUAL
14171: IFTRUE 14175
14173: GO 14387
14175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14176: LD_ADDR_VAR 0 1
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: LD_INT 2
14186: PUSH
14187: LD_INT 3
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: LD_INT 5
14195: PUSH
14196: LD_INT 6
14198: PUSH
14199: LD_INT 7
14201: PUSH
14202: LD_INT 8
14204: PUSH
14205: LD_INT 9
14207: PUSH
14208: LD_INT 10
14210: PUSH
14211: LD_INT 11
14213: PUSH
14214: LD_INT 12
14216: PUSH
14217: LD_INT 13
14219: PUSH
14220: LD_INT 14
14222: PUSH
14223: LD_INT 15
14225: PUSH
14226: LD_INT 16
14228: PUSH
14229: LD_INT 17
14231: PUSH
14232: LD_INT 18
14234: PUSH
14235: LD_INT 19
14237: PUSH
14238: LD_INT 20
14240: PUSH
14241: LD_INT 21
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_INT 23
14249: PUSH
14250: LD_INT 24
14252: PUSH
14253: LD_INT 25
14255: PUSH
14256: LD_INT 26
14258: PUSH
14259: LD_INT 27
14261: PUSH
14262: LD_INT 28
14264: PUSH
14265: LD_INT 29
14267: PUSH
14268: LD_INT 30
14270: PUSH
14271: LD_INT 31
14273: PUSH
14274: LD_INT 32
14276: PUSH
14277: LD_INT 33
14279: PUSH
14280: LD_INT 34
14282: PUSH
14283: LD_INT 36
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 101
14325: PUSH
14326: LD_INT 102
14328: PUSH
14329: LD_INT 103
14331: PUSH
14332: LD_INT 104
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 107
14343: PUSH
14344: LD_INT 108
14346: PUSH
14347: LD_INT 109
14349: PUSH
14350: LD_INT 110
14352: PUSH
14353: LD_INT 111
14355: PUSH
14356: LD_INT 112
14358: PUSH
14359: LD_INT 113
14361: PUSH
14362: LD_INT 114
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14760
14387: LD_INT 18
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14531
14395: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14396: LD_ADDR_VAR 0 1
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 5
14409: PUSH
14410: LD_INT 7
14412: PUSH
14413: LD_INT 11
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 15
14421: PUSH
14422: LD_INT 16
14424: PUSH
14425: LD_INT 20
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 25
14439: PUSH
14440: LD_INT 26
14442: PUSH
14443: LD_INT 30
14445: PUSH
14446: LD_INT 31
14448: PUSH
14449: LD_INT 32
14451: PUSH
14452: LD_INT 33
14454: PUSH
14455: LD_INT 34
14457: PUSH
14458: LD_INT 35
14460: PUSH
14461: LD_INT 36
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 101
14489: PUSH
14490: LD_INT 102
14492: PUSH
14493: LD_INT 103
14495: PUSH
14496: LD_INT 106
14498: PUSH
14499: LD_INT 108
14501: PUSH
14502: LD_INT 112
14504: PUSH
14505: LD_INT 113
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 115
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: ST_TO_ADDR
14529: GO 14760
14531: LD_INT 19
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14539
14537: GO 14759
14539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14540: LD_ADDR_VAR 0 1
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: LD_INT 3
14553: PUSH
14554: LD_INT 4
14556: PUSH
14557: LD_INT 5
14559: PUSH
14560: LD_INT 6
14562: PUSH
14563: LD_INT 7
14565: PUSH
14566: LD_INT 8
14568: PUSH
14569: LD_INT 9
14571: PUSH
14572: LD_INT 10
14574: PUSH
14575: LD_INT 11
14577: PUSH
14578: LD_INT 12
14580: PUSH
14581: LD_INT 13
14583: PUSH
14584: LD_INT 14
14586: PUSH
14587: LD_INT 15
14589: PUSH
14590: LD_INT 16
14592: PUSH
14593: LD_INT 17
14595: PUSH
14596: LD_INT 18
14598: PUSH
14599: LD_INT 19
14601: PUSH
14602: LD_INT 20
14604: PUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_INT 23
14613: PUSH
14614: LD_INT 24
14616: PUSH
14617: LD_INT 25
14619: PUSH
14620: LD_INT 26
14622: PUSH
14623: LD_INT 27
14625: PUSH
14626: LD_INT 28
14628: PUSH
14629: LD_INT 29
14631: PUSH
14632: LD_INT 30
14634: PUSH
14635: LD_INT 31
14637: PUSH
14638: LD_INT 32
14640: PUSH
14641: LD_INT 33
14643: PUSH
14644: LD_INT 34
14646: PUSH
14647: LD_INT 35
14649: PUSH
14650: LD_INT 36
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 101
14693: PUSH
14694: LD_INT 102
14696: PUSH
14697: LD_INT 103
14699: PUSH
14700: LD_INT 104
14702: PUSH
14703: LD_INT 105
14705: PUSH
14706: LD_INT 106
14708: PUSH
14709: LD_INT 107
14711: PUSH
14712: LD_INT 108
14714: PUSH
14715: LD_INT 109
14717: PUSH
14718: LD_INT 110
14720: PUSH
14721: LD_INT 111
14723: PUSH
14724: LD_INT 112
14726: PUSH
14727: LD_INT 113
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 115
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: ST_TO_ADDR
14757: GO 14760
14759: POP
// end ; if result then
14760: LD_VAR 0 1
14764: IFFALSE 15053
// begin normal :=  ;
14766: LD_ADDR_VAR 0 3
14770: PUSH
14771: LD_STRING 
14773: ST_TO_ADDR
// hardcore :=  ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_STRING 
14781: ST_TO_ADDR
// for i = 1 to normalCounter do
14782: LD_ADDR_VAR 0 5
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_EXP 20
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14899
// begin tmp := 0 ;
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: LD_STRING 0
14807: ST_TO_ADDR
// if result [ 1 ] then
14808: LD_VAR 0 1
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: IFFALSE 14881
// if result [ 1 ] [ 1 ] = i then
14818: LD_VAR 0 1
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PUSH
14827: LD_INT 1
14829: ARRAY
14830: PUSH
14831: LD_VAR 0 5
14835: EQUAL
14836: IFFALSE 14881
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: LD_VAR 0 1
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_VAR 0 1
14855: PUSH
14856: LD_INT 1
14858: ARRAY
14859: PPUSH
14860: LD_INT 1
14862: PPUSH
14863: CALL_OW 3
14867: PPUSH
14868: CALL_OW 1
14872: ST_TO_ADDR
// tmp := 1 ;
14873: LD_ADDR_VAR 0 2
14877: PUSH
14878: LD_STRING 1
14880: ST_TO_ADDR
// end ; normal := normal & tmp ;
14881: LD_ADDR_VAR 0 3
14885: PUSH
14886: LD_VAR 0 3
14890: PUSH
14891: LD_VAR 0 2
14895: STR
14896: ST_TO_ADDR
// end ;
14897: GO 14797
14899: POP
14900: POP
// for i = 1 to hardcoreCounter do
14901: LD_ADDR_VAR 0 5
14905: PUSH
14906: DOUBLE
14907: LD_INT 1
14909: DEC
14910: ST_TO_ADDR
14911: LD_EXP 21
14915: PUSH
14916: FOR_TO
14917: IFFALSE 15022
// begin tmp := 0 ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_STRING 0
14926: ST_TO_ADDR
// if result [ 2 ] then
14927: LD_VAR 0 1
14931: PUSH
14932: LD_INT 2
14934: ARRAY
14935: IFFALSE 15004
// if result [ 2 ] [ 1 ] = 100 + i then
14937: LD_VAR 0 1
14941: PUSH
14942: LD_INT 2
14944: ARRAY
14945: PUSH
14946: LD_INT 1
14948: ARRAY
14949: PUSH
14950: LD_INT 100
14952: PUSH
14953: LD_VAR 0 5
14957: PLUS
14958: EQUAL
14959: IFFALSE 15004
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14961: LD_ADDR_VAR 0 1
14965: PUSH
14966: LD_VAR 0 1
14970: PPUSH
14971: LD_INT 2
14973: PPUSH
14974: LD_VAR 0 1
14978: PUSH
14979: LD_INT 2
14981: ARRAY
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 3
14990: PPUSH
14991: CALL_OW 1
14995: ST_TO_ADDR
// tmp := 1 ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_STRING 1
15003: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15004: LD_ADDR_VAR 0 4
15008: PUSH
15009: LD_VAR 0 4
15013: PUSH
15014: LD_VAR 0 2
15018: STR
15019: ST_TO_ADDR
// end ;
15020: GO 14916
15022: POP
15023: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15024: LD_STRING getStreamItemsFromMission("
15026: PUSH
15027: LD_VAR 0 3
15031: STR
15032: PUSH
15033: LD_STRING ","
15035: STR
15036: PUSH
15037: LD_VAR 0 4
15041: STR
15042: PUSH
15043: LD_STRING ")
15045: STR
15046: PPUSH
15047: CALL_OW 559
// end else
15051: GO 15060
// ToLua ( getStreamItemsFromMission("","") ) ;
15053: LD_STRING getStreamItemsFromMission("","")
15055: PPUSH
15056: CALL_OW 559
// end ;
15060: LD_VAR 0 1
15064: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15065: LD_VAR 0 2
15069: PUSH
15070: LD_INT 100
15072: EQUAL
15073: IFFALSE 16022
// begin if not StreamModeActive then
15075: LD_EXP 19
15079: NOT
15080: IFFALSE 15090
// StreamModeActive := true ;
15082: LD_ADDR_EXP 19
15086: PUSH
15087: LD_INT 1
15089: ST_TO_ADDR
// if p3 = 0 then
15090: LD_VAR 0 3
15094: PUSH
15095: LD_INT 0
15097: EQUAL
15098: IFFALSE 15104
// InitStreamMode ;
15100: CALL 11350 0 0
// if p3 = 1 then
15104: LD_VAR 0 3
15108: PUSH
15109: LD_INT 1
15111: EQUAL
15112: IFFALSE 15122
// sRocket := true ;
15114: LD_ADDR_EXP 24
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// if p3 = 2 then
15122: LD_VAR 0 3
15126: PUSH
15127: LD_INT 2
15129: EQUAL
15130: IFFALSE 15140
// sSpeed := true ;
15132: LD_ADDR_EXP 23
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// if p3 = 3 then
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 3
15147: EQUAL
15148: IFFALSE 15158
// sEngine := true ;
15150: LD_ADDR_EXP 25
15154: PUSH
15155: LD_INT 1
15157: ST_TO_ADDR
// if p3 = 4 then
15158: LD_VAR 0 3
15162: PUSH
15163: LD_INT 4
15165: EQUAL
15166: IFFALSE 15176
// sSpec := true ;
15168: LD_ADDR_EXP 22
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if p3 = 5 then
15176: LD_VAR 0 3
15180: PUSH
15181: LD_INT 5
15183: EQUAL
15184: IFFALSE 15194
// sLevel := true ;
15186: LD_ADDR_EXP 26
15190: PUSH
15191: LD_INT 1
15193: ST_TO_ADDR
// if p3 = 6 then
15194: LD_VAR 0 3
15198: PUSH
15199: LD_INT 6
15201: EQUAL
15202: IFFALSE 15212
// sArmoury := true ;
15204: LD_ADDR_EXP 27
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// if p3 = 7 then
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 7
15219: EQUAL
15220: IFFALSE 15230
// sRadar := true ;
15222: LD_ADDR_EXP 28
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// if p3 = 8 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 8
15237: EQUAL
15238: IFFALSE 15248
// sBunker := true ;
15240: LD_ADDR_EXP 29
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 9 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 9
15255: EQUAL
15256: IFFALSE 15266
// sHack := true ;
15258: LD_ADDR_EXP 30
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if p3 = 10 then
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 10
15273: EQUAL
15274: IFFALSE 15284
// sFire := true ;
15276: LD_ADDR_EXP 31
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if p3 = 11 then
15284: LD_VAR 0 3
15288: PUSH
15289: LD_INT 11
15291: EQUAL
15292: IFFALSE 15302
// sRefresh := true ;
15294: LD_ADDR_EXP 32
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// if p3 = 12 then
15302: LD_VAR 0 3
15306: PUSH
15307: LD_INT 12
15309: EQUAL
15310: IFFALSE 15320
// sExp := true ;
15312: LD_ADDR_EXP 33
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if p3 = 13 then
15320: LD_VAR 0 3
15324: PUSH
15325: LD_INT 13
15327: EQUAL
15328: IFFALSE 15338
// sDepot := true ;
15330: LD_ADDR_EXP 34
15334: PUSH
15335: LD_INT 1
15337: ST_TO_ADDR
// if p3 = 14 then
15338: LD_VAR 0 3
15342: PUSH
15343: LD_INT 14
15345: EQUAL
15346: IFFALSE 15356
// sFlag := true ;
15348: LD_ADDR_EXP 35
15352: PUSH
15353: LD_INT 1
15355: ST_TO_ADDR
// if p3 = 15 then
15356: LD_VAR 0 3
15360: PUSH
15361: LD_INT 15
15363: EQUAL
15364: IFFALSE 15374
// sKamikadze := true ;
15366: LD_ADDR_EXP 43
15370: PUSH
15371: LD_INT 1
15373: ST_TO_ADDR
// if p3 = 16 then
15374: LD_VAR 0 3
15378: PUSH
15379: LD_INT 16
15381: EQUAL
15382: IFFALSE 15392
// sTroll := true ;
15384: LD_ADDR_EXP 44
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// if p3 = 17 then
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 17
15399: EQUAL
15400: IFFALSE 15410
// sSlow := true ;
15402: LD_ADDR_EXP 45
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// if p3 = 18 then
15410: LD_VAR 0 3
15414: PUSH
15415: LD_INT 18
15417: EQUAL
15418: IFFALSE 15428
// sLack := true ;
15420: LD_ADDR_EXP 46
15424: PUSH
15425: LD_INT 1
15427: ST_TO_ADDR
// if p3 = 19 then
15428: LD_VAR 0 3
15432: PUSH
15433: LD_INT 19
15435: EQUAL
15436: IFFALSE 15446
// sTank := true ;
15438: LD_ADDR_EXP 48
15442: PUSH
15443: LD_INT 1
15445: ST_TO_ADDR
// if p3 = 20 then
15446: LD_VAR 0 3
15450: PUSH
15451: LD_INT 20
15453: EQUAL
15454: IFFALSE 15464
// sRemote := true ;
15456: LD_ADDR_EXP 49
15460: PUSH
15461: LD_INT 1
15463: ST_TO_ADDR
// if p3 = 21 then
15464: LD_VAR 0 3
15468: PUSH
15469: LD_INT 21
15471: EQUAL
15472: IFFALSE 15482
// sPowell := true ;
15474: LD_ADDR_EXP 50
15478: PUSH
15479: LD_INT 1
15481: ST_TO_ADDR
// if p3 = 22 then
15482: LD_VAR 0 3
15486: PUSH
15487: LD_INT 22
15489: EQUAL
15490: IFFALSE 15500
// sTeleport := true ;
15492: LD_ADDR_EXP 53
15496: PUSH
15497: LD_INT 1
15499: ST_TO_ADDR
// if p3 = 23 then
15500: LD_VAR 0 3
15504: PUSH
15505: LD_INT 23
15507: EQUAL
15508: IFFALSE 15518
// sOilTower := true ;
15510: LD_ADDR_EXP 55
15514: PUSH
15515: LD_INT 1
15517: ST_TO_ADDR
// if p3 = 24 then
15518: LD_VAR 0 3
15522: PUSH
15523: LD_INT 24
15525: EQUAL
15526: IFFALSE 15536
// sShovel := true ;
15528: LD_ADDR_EXP 56
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// if p3 = 25 then
15536: LD_VAR 0 3
15540: PUSH
15541: LD_INT 25
15543: EQUAL
15544: IFFALSE 15554
// sSheik := true ;
15546: LD_ADDR_EXP 57
15550: PUSH
15551: LD_INT 1
15553: ST_TO_ADDR
// if p3 = 26 then
15554: LD_VAR 0 3
15558: PUSH
15559: LD_INT 26
15561: EQUAL
15562: IFFALSE 15572
// sEarthquake := true ;
15564: LD_ADDR_EXP 59
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// if p3 = 27 then
15572: LD_VAR 0 3
15576: PUSH
15577: LD_INT 27
15579: EQUAL
15580: IFFALSE 15590
// sAI := true ;
15582: LD_ADDR_EXP 60
15586: PUSH
15587: LD_INT 1
15589: ST_TO_ADDR
// if p3 = 28 then
15590: LD_VAR 0 3
15594: PUSH
15595: LD_INT 28
15597: EQUAL
15598: IFFALSE 15608
// sCargo := true ;
15600: LD_ADDR_EXP 63
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// if p3 = 29 then
15608: LD_VAR 0 3
15612: PUSH
15613: LD_INT 29
15615: EQUAL
15616: IFFALSE 15626
// sDLaser := true ;
15618: LD_ADDR_EXP 64
15622: PUSH
15623: LD_INT 1
15625: ST_TO_ADDR
// if p3 = 30 then
15626: LD_VAR 0 3
15630: PUSH
15631: LD_INT 30
15633: EQUAL
15634: IFFALSE 15644
// sExchange := true ;
15636: LD_ADDR_EXP 65
15640: PUSH
15641: LD_INT 1
15643: ST_TO_ADDR
// if p3 = 31 then
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 31
15651: EQUAL
15652: IFFALSE 15662
// sFac := true ;
15654: LD_ADDR_EXP 66
15658: PUSH
15659: LD_INT 1
15661: ST_TO_ADDR
// if p3 = 32 then
15662: LD_VAR 0 3
15666: PUSH
15667: LD_INT 32
15669: EQUAL
15670: IFFALSE 15680
// sPower := true ;
15672: LD_ADDR_EXP 67
15676: PUSH
15677: LD_INT 1
15679: ST_TO_ADDR
// if p3 = 33 then
15680: LD_VAR 0 3
15684: PUSH
15685: LD_INT 33
15687: EQUAL
15688: IFFALSE 15698
// sRandom := true ;
15690: LD_ADDR_EXP 68
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// if p3 = 34 then
15698: LD_VAR 0 3
15702: PUSH
15703: LD_INT 34
15705: EQUAL
15706: IFFALSE 15716
// sShield := true ;
15708: LD_ADDR_EXP 69
15712: PUSH
15713: LD_INT 1
15715: ST_TO_ADDR
// if p3 = 35 then
15716: LD_VAR 0 3
15720: PUSH
15721: LD_INT 35
15723: EQUAL
15724: IFFALSE 15734
// sTime := true ;
15726: LD_ADDR_EXP 70
15730: PUSH
15731: LD_INT 1
15733: ST_TO_ADDR
// if p3 = 36 then
15734: LD_VAR 0 3
15738: PUSH
15739: LD_INT 36
15741: EQUAL
15742: IFFALSE 15752
// sTools := true ;
15744: LD_ADDR_EXP 71
15748: PUSH
15749: LD_INT 1
15751: ST_TO_ADDR
// if p3 = 101 then
15752: LD_VAR 0 3
15756: PUSH
15757: LD_INT 101
15759: EQUAL
15760: IFFALSE 15770
// sSold := true ;
15762: LD_ADDR_EXP 36
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// if p3 = 102 then
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 102
15777: EQUAL
15778: IFFALSE 15788
// sDiff := true ;
15780: LD_ADDR_EXP 37
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// if p3 = 103 then
15788: LD_VAR 0 3
15792: PUSH
15793: LD_INT 103
15795: EQUAL
15796: IFFALSE 15806
// sFog := true ;
15798: LD_ADDR_EXP 40
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// if p3 = 104 then
15806: LD_VAR 0 3
15810: PUSH
15811: LD_INT 104
15813: EQUAL
15814: IFFALSE 15824
// sReset := true ;
15816: LD_ADDR_EXP 41
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// if p3 = 105 then
15824: LD_VAR 0 3
15828: PUSH
15829: LD_INT 105
15831: EQUAL
15832: IFFALSE 15842
// sSun := true ;
15834: LD_ADDR_EXP 42
15838: PUSH
15839: LD_INT 1
15841: ST_TO_ADDR
// if p3 = 106 then
15842: LD_VAR 0 3
15846: PUSH
15847: LD_INT 106
15849: EQUAL
15850: IFFALSE 15860
// sTiger := true ;
15852: LD_ADDR_EXP 38
15856: PUSH
15857: LD_INT 1
15859: ST_TO_ADDR
// if p3 = 107 then
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 107
15867: EQUAL
15868: IFFALSE 15878
// sBomb := true ;
15870: LD_ADDR_EXP 39
15874: PUSH
15875: LD_INT 1
15877: ST_TO_ADDR
// if p3 = 108 then
15878: LD_VAR 0 3
15882: PUSH
15883: LD_INT 108
15885: EQUAL
15886: IFFALSE 15896
// sWound := true ;
15888: LD_ADDR_EXP 47
15892: PUSH
15893: LD_INT 1
15895: ST_TO_ADDR
// if p3 = 109 then
15896: LD_VAR 0 3
15900: PUSH
15901: LD_INT 109
15903: EQUAL
15904: IFFALSE 15914
// sBetray := true ;
15906: LD_ADDR_EXP 51
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// if p3 = 110 then
15914: LD_VAR 0 3
15918: PUSH
15919: LD_INT 110
15921: EQUAL
15922: IFFALSE 15932
// sContamin := true ;
15924: LD_ADDR_EXP 52
15928: PUSH
15929: LD_INT 1
15931: ST_TO_ADDR
// if p3 = 111 then
15932: LD_VAR 0 3
15936: PUSH
15937: LD_INT 111
15939: EQUAL
15940: IFFALSE 15950
// sOil := true ;
15942: LD_ADDR_EXP 54
15946: PUSH
15947: LD_INT 1
15949: ST_TO_ADDR
// if p3 = 112 then
15950: LD_VAR 0 3
15954: PUSH
15955: LD_INT 112
15957: EQUAL
15958: IFFALSE 15968
// sStu := true ;
15960: LD_ADDR_EXP 58
15964: PUSH
15965: LD_INT 1
15967: ST_TO_ADDR
// if p3 = 113 then
15968: LD_VAR 0 3
15972: PUSH
15973: LD_INT 113
15975: EQUAL
15976: IFFALSE 15986
// sBazooka := true ;
15978: LD_ADDR_EXP 61
15982: PUSH
15983: LD_INT 1
15985: ST_TO_ADDR
// if p3 = 114 then
15986: LD_VAR 0 3
15990: PUSH
15991: LD_INT 114
15993: EQUAL
15994: IFFALSE 16004
// sMortar := true ;
15996: LD_ADDR_EXP 62
16000: PUSH
16001: LD_INT 1
16003: ST_TO_ADDR
// if p3 = 115 then
16004: LD_VAR 0 3
16008: PUSH
16009: LD_INT 115
16011: EQUAL
16012: IFFALSE 16022
// sRanger := true ;
16014: LD_ADDR_EXP 72
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// end ; end ;
16022: PPOPN 6
16024: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16025: LD_EXP 19
16029: PUSH
16030: LD_EXP 24
16034: AND
16035: IFFALSE 16159
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
16043: PPUSH
// begin enable ;
16044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16045: LD_ADDR_VAR 0 2
16049: PUSH
16050: LD_INT 22
16052: PUSH
16053: LD_OWVAR 2
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: LD_INT 34
16067: PUSH
16068: LD_INT 7
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 34
16077: PUSH
16078: LD_INT 45
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 34
16087: PUSH
16088: LD_INT 28
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 34
16097: PUSH
16098: LD_INT 47
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PPUSH
16116: CALL_OW 69
16120: ST_TO_ADDR
// if not tmp then
16121: LD_VAR 0 2
16125: NOT
16126: IFFALSE 16130
// exit ;
16128: GO 16159
// for i in tmp do
16130: LD_ADDR_VAR 0 1
16134: PUSH
16135: LD_VAR 0 2
16139: PUSH
16140: FOR_IN
16141: IFFALSE 16157
// begin SetLives ( i , 0 ) ;
16143: LD_VAR 0 1
16147: PPUSH
16148: LD_INT 0
16150: PPUSH
16151: CALL_OW 234
// end ;
16155: GO 16140
16157: POP
16158: POP
// end ;
16159: PPOPN 2
16161: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16162: LD_EXP 19
16166: PUSH
16167: LD_EXP 25
16171: AND
16172: IFFALSE 16256
16174: GO 16176
16176: DISABLE
16177: LD_INT 0
16179: PPUSH
16180: PPUSH
// begin enable ;
16181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_INT 22
16189: PUSH
16190: LD_OWVAR 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 32
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PPUSH
16213: CALL_OW 69
16217: ST_TO_ADDR
// if not tmp then
16218: LD_VAR 0 2
16222: NOT
16223: IFFALSE 16227
// exit ;
16225: GO 16256
// for i in tmp do
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_VAR 0 2
16236: PUSH
16237: FOR_IN
16238: IFFALSE 16254
// begin SetLives ( i , 0 ) ;
16240: LD_VAR 0 1
16244: PPUSH
16245: LD_INT 0
16247: PPUSH
16248: CALL_OW 234
// end ;
16252: GO 16237
16254: POP
16255: POP
// end ;
16256: PPOPN 2
16258: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16259: LD_EXP 19
16263: PUSH
16264: LD_EXP 22
16268: AND
16269: IFFALSE 16362
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
// begin enable ;
16277: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16278: LD_ADDR_VAR 0 1
16282: PUSH
16283: LD_INT 22
16285: PUSH
16286: LD_OWVAR 2
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: LD_INT 25
16300: PUSH
16301: LD_INT 5
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 25
16310: PUSH
16311: LD_INT 9
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 25
16320: PUSH
16321: LD_INT 8
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PPUSH
16338: CALL_OW 69
16342: PUSH
16343: FOR_IN
16344: IFFALSE 16360
// begin SetClass ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 336
// end ;
16358: GO 16343
16360: POP
16361: POP
// end ;
16362: PPOPN 1
16364: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16365: LD_EXP 19
16369: PUSH
16370: LD_EXP 23
16374: AND
16375: PUSH
16376: LD_OWVAR 65
16380: PUSH
16381: LD_INT 7
16383: LESS
16384: AND
16385: IFFALSE 16399
16387: GO 16389
16389: DISABLE
// begin enable ;
16390: ENABLE
// game_speed := 7 ;
16391: LD_ADDR_OWVAR 65
16395: PUSH
16396: LD_INT 7
16398: ST_TO_ADDR
// end ;
16399: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16400: LD_EXP 19
16404: PUSH
16405: LD_EXP 26
16409: AND
16410: IFFALSE 16612
16412: GO 16414
16414: DISABLE
16415: LD_INT 0
16417: PPUSH
16418: PPUSH
16419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16420: LD_ADDR_VAR 0 3
16424: PUSH
16425: LD_INT 81
16427: PUSH
16428: LD_OWVAR 2
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 21
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: ST_TO_ADDR
// if not tmp then
16456: LD_VAR 0 3
16460: NOT
16461: IFFALSE 16465
// exit ;
16463: GO 16612
// if tmp > 5 then
16465: LD_VAR 0 3
16469: PUSH
16470: LD_INT 5
16472: GREATER
16473: IFFALSE 16485
// k := 5 else
16475: LD_ADDR_VAR 0 2
16479: PUSH
16480: LD_INT 5
16482: ST_TO_ADDR
16483: GO 16495
// k := tmp ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_VAR 0 3
16494: ST_TO_ADDR
// for i := 1 to k do
16495: LD_ADDR_VAR 0 1
16499: PUSH
16500: DOUBLE
16501: LD_INT 1
16503: DEC
16504: ST_TO_ADDR
16505: LD_VAR 0 2
16509: PUSH
16510: FOR_TO
16511: IFFALSE 16610
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16513: LD_VAR 0 3
16517: PUSH
16518: LD_VAR 0 1
16522: ARRAY
16523: PPUSH
16524: LD_VAR 0 1
16528: PUSH
16529: LD_INT 4
16531: MOD
16532: PUSH
16533: LD_INT 1
16535: PLUS
16536: PPUSH
16537: CALL_OW 259
16541: PUSH
16542: LD_INT 10
16544: LESS
16545: IFFALSE 16608
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16547: LD_VAR 0 3
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_VAR 0 1
16562: PUSH
16563: LD_INT 4
16565: MOD
16566: PUSH
16567: LD_INT 1
16569: PLUS
16570: PPUSH
16571: LD_VAR 0 3
16575: PUSH
16576: LD_VAR 0 1
16580: ARRAY
16581: PPUSH
16582: LD_VAR 0 1
16586: PUSH
16587: LD_INT 4
16589: MOD
16590: PUSH
16591: LD_INT 1
16593: PLUS
16594: PPUSH
16595: CALL_OW 259
16599: PUSH
16600: LD_INT 1
16602: PLUS
16603: PPUSH
16604: CALL_OW 237
16608: GO 16510
16610: POP
16611: POP
// end ;
16612: PPOPN 3
16614: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16615: LD_EXP 19
16619: PUSH
16620: LD_EXP 27
16624: AND
16625: IFFALSE 16645
16627: GO 16629
16629: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16630: LD_INT 4
16632: PPUSH
16633: LD_OWVAR 2
16637: PPUSH
16638: LD_INT 0
16640: PPUSH
16641: CALL_OW 324
16645: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16646: LD_EXP 19
16650: PUSH
16651: LD_EXP 56
16655: AND
16656: IFFALSE 16676
16658: GO 16660
16660: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16661: LD_INT 19
16663: PPUSH
16664: LD_OWVAR 2
16668: PPUSH
16669: LD_INT 0
16671: PPUSH
16672: CALL_OW 324
16676: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16677: LD_EXP 19
16681: PUSH
16682: LD_EXP 28
16686: AND
16687: IFFALSE 16789
16689: GO 16691
16691: DISABLE
16692: LD_INT 0
16694: PPUSH
16695: PPUSH
// begin enable ;
16696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: LD_INT 22
16704: PUSH
16705: LD_OWVAR 2
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 2
16716: PUSH
16717: LD_INT 34
16719: PUSH
16720: LD_INT 11
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 34
16729: PUSH
16730: LD_INT 30
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 2
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16789
// for i in tmp do
16760: LD_ADDR_VAR 0 1
16764: PUSH
16765: LD_VAR 0 2
16769: PUSH
16770: FOR_IN
16771: IFFALSE 16787
// begin SetLives ( i , 0 ) ;
16773: LD_VAR 0 1
16777: PPUSH
16778: LD_INT 0
16780: PPUSH
16781: CALL_OW 234
// end ;
16785: GO 16770
16787: POP
16788: POP
// end ;
16789: PPOPN 2
16791: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16792: LD_EXP 19
16796: PUSH
16797: LD_EXP 29
16801: AND
16802: IFFALSE 16822
16804: GO 16806
16806: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16807: LD_INT 32
16809: PPUSH
16810: LD_OWVAR 2
16814: PPUSH
16815: LD_INT 0
16817: PPUSH
16818: CALL_OW 324
16822: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16823: LD_EXP 19
16827: PUSH
16828: LD_EXP 30
16832: AND
16833: IFFALSE 17014
16835: GO 16837
16837: DISABLE
16838: LD_INT 0
16840: PPUSH
16841: PPUSH
16842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16843: LD_ADDR_VAR 0 2
16847: PUSH
16848: LD_INT 22
16850: PUSH
16851: LD_OWVAR 2
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 33
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PPUSH
16874: CALL_OW 69
16878: ST_TO_ADDR
// if not tmp then
16879: LD_VAR 0 2
16883: NOT
16884: IFFALSE 16888
// exit ;
16886: GO 17014
// side := 0 ;
16888: LD_ADDR_VAR 0 3
16892: PUSH
16893: LD_INT 0
16895: ST_TO_ADDR
// for i := 1 to 8 do
16896: LD_ADDR_VAR 0 1
16900: PUSH
16901: DOUBLE
16902: LD_INT 1
16904: DEC
16905: ST_TO_ADDR
16906: LD_INT 8
16908: PUSH
16909: FOR_TO
16910: IFFALSE 16958
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16912: LD_OWVAR 2
16916: PUSH
16917: LD_VAR 0 1
16921: NONEQUAL
16922: PUSH
16923: LD_OWVAR 2
16927: PPUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 81
16937: PUSH
16938: LD_INT 2
16940: EQUAL
16941: AND
16942: IFFALSE 16956
// begin side := i ;
16944: LD_ADDR_VAR 0 3
16948: PUSH
16949: LD_VAR 0 1
16953: ST_TO_ADDR
// break ;
16954: GO 16958
// end ;
16956: GO 16909
16958: POP
16959: POP
// if not side then
16960: LD_VAR 0 3
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17014
// for i := 1 to tmp do
16969: LD_ADDR_VAR 0 1
16973: PUSH
16974: DOUBLE
16975: LD_INT 1
16977: DEC
16978: ST_TO_ADDR
16979: LD_VAR 0 2
16983: PUSH
16984: FOR_TO
16985: IFFALSE 17012
// if Prob ( 30 ) then
16987: LD_INT 30
16989: PPUSH
16990: CALL_OW 13
16994: IFFALSE 17010
// SetSide ( i , side ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_VAR 0 3
17005: PPUSH
17006: CALL_OW 235
17010: GO 16984
17012: POP
17013: POP
// end ;
17014: PPOPN 3
17016: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17017: LD_EXP 19
17021: PUSH
17022: LD_EXP 32
17026: AND
17027: IFFALSE 17146
17029: GO 17031
17031: DISABLE
17032: LD_INT 0
17034: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17035: LD_ADDR_VAR 0 1
17039: PUSH
17040: LD_INT 22
17042: PUSH
17043: LD_OWVAR 2
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 3
17064: PUSH
17065: LD_INT 23
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 69
17088: PUSH
17089: FOR_IN
17090: IFFALSE 17144
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 257
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: LD_INT 4
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: IN
17120: IFFALSE 17142
// SetClass ( un , rand ( 1 , 4 ) ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: LD_INT 4
17132: PPUSH
17133: CALL_OW 12
17137: PPUSH
17138: CALL_OW 336
17142: GO 17089
17144: POP
17145: POP
// end ;
17146: PPOPN 1
17148: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17149: LD_EXP 19
17153: PUSH
17154: LD_EXP 31
17158: AND
17159: IFFALSE 17238
17161: GO 17163
17163: DISABLE
17164: LD_INT 0
17166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17167: LD_ADDR_VAR 0 1
17171: PUSH
17172: LD_INT 22
17174: PUSH
17175: LD_OWVAR 2
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 21
17186: PUSH
17187: LD_INT 3
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PPUSH
17198: CALL_OW 69
17202: ST_TO_ADDR
// if not tmp then
17203: LD_VAR 0 1
17207: NOT
17208: IFFALSE 17212
// exit ;
17210: GO 17238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17212: LD_VAR 0 1
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 12
17229: ARRAY
17230: PPUSH
17231: LD_INT 100
17233: PPUSH
17234: CALL_OW 234
// end ;
17238: PPOPN 1
17240: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17241: LD_EXP 19
17245: PUSH
17246: LD_EXP 33
17250: AND
17251: IFFALSE 17349
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17259: LD_ADDR_VAR 0 1
17263: PUSH
17264: LD_INT 22
17266: PUSH
17267: LD_OWVAR 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 21
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PPUSH
17290: CALL_OW 69
17294: ST_TO_ADDR
// if not tmp then
17295: LD_VAR 0 1
17299: NOT
17300: IFFALSE 17304
// exit ;
17302: GO 17349
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17304: LD_VAR 0 1
17308: PUSH
17309: LD_INT 1
17311: PPUSH
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 12
17321: ARRAY
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: LD_INT 4
17328: PPUSH
17329: CALL_OW 12
17333: PPUSH
17334: LD_INT 3000
17336: PPUSH
17337: LD_INT 9000
17339: PPUSH
17340: CALL_OW 12
17344: PPUSH
17345: CALL_OW 492
// end ;
17349: PPOPN 1
17351: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17352: LD_EXP 19
17356: PUSH
17357: LD_EXP 34
17361: AND
17362: IFFALSE 17382
17364: GO 17366
17366: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17367: LD_INT 1
17369: PPUSH
17370: LD_OWVAR 2
17374: PPUSH
17375: LD_INT 0
17377: PPUSH
17378: CALL_OW 324
17382: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17383: LD_EXP 19
17387: PUSH
17388: LD_EXP 35
17392: AND
17393: IFFALSE 17476
17395: GO 17397
17397: DISABLE
17398: LD_INT 0
17400: PPUSH
17401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_INT 22
17409: PUSH
17410: LD_OWVAR 2
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 21
17421: PUSH
17422: LD_INT 3
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PPUSH
17433: CALL_OW 69
17437: ST_TO_ADDR
// if not tmp then
17438: LD_VAR 0 2
17442: NOT
17443: IFFALSE 17447
// exit ;
17445: GO 17476
// for i in tmp do
17447: LD_ADDR_VAR 0 1
17451: PUSH
17452: LD_VAR 0 2
17456: PUSH
17457: FOR_IN
17458: IFFALSE 17474
// SetBLevel ( i , 10 ) ;
17460: LD_VAR 0 1
17464: PPUSH
17465: LD_INT 10
17467: PPUSH
17468: CALL_OW 241
17472: GO 17457
17474: POP
17475: POP
// end ;
17476: PPOPN 2
17478: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17479: LD_EXP 19
17483: PUSH
17484: LD_EXP 36
17488: AND
17489: IFFALSE 17600
17491: GO 17493
17493: DISABLE
17494: LD_INT 0
17496: PPUSH
17497: PPUSH
17498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17499: LD_ADDR_VAR 0 3
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_OWVAR 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 25
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PPUSH
17530: CALL_OW 69
17534: ST_TO_ADDR
// if not tmp then
17535: LD_VAR 0 3
17539: NOT
17540: IFFALSE 17544
// exit ;
17542: GO 17600
// un := tmp [ rand ( 1 , tmp ) ] ;
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: LD_VAR 0 3
17553: PUSH
17554: LD_INT 1
17556: PPUSH
17557: LD_VAR 0 3
17561: PPUSH
17562: CALL_OW 12
17566: ARRAY
17567: ST_TO_ADDR
// if Crawls ( un ) then
17568: LD_VAR 0 2
17572: PPUSH
17573: CALL_OW 318
17577: IFFALSE 17588
// ComWalk ( un ) ;
17579: LD_VAR 0 2
17583: PPUSH
17584: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 5
17595: PPUSH
17596: CALL_OW 336
// end ;
17600: PPOPN 3
17602: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17603: LD_EXP 19
17607: PUSH
17608: LD_EXP 37
17612: AND
17613: PUSH
17614: LD_OWVAR 67
17618: PUSH
17619: LD_INT 3
17621: LESS
17622: AND
17623: IFFALSE 17642
17625: GO 17627
17627: DISABLE
// Difficulty := Difficulty + 1 ;
17628: LD_ADDR_OWVAR 67
17632: PUSH
17633: LD_OWVAR 67
17637: PUSH
17638: LD_INT 1
17640: PLUS
17641: ST_TO_ADDR
17642: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17643: LD_EXP 19
17647: PUSH
17648: LD_EXP 38
17652: AND
17653: IFFALSE 17756
17655: GO 17657
17657: DISABLE
17658: LD_INT 0
17660: PPUSH
// begin for i := 1 to 5 do
17661: LD_ADDR_VAR 0 1
17665: PUSH
17666: DOUBLE
17667: LD_INT 1
17669: DEC
17670: ST_TO_ADDR
17671: LD_INT 5
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17754
// begin uc_nation := nation_nature ;
17677: LD_ADDR_OWVAR 21
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// uc_side := 0 ;
17685: LD_ADDR_OWVAR 20
17689: PUSH
17690: LD_INT 0
17692: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17693: LD_ADDR_OWVAR 29
17697: PUSH
17698: LD_INT 12
17700: PUSH
17701: LD_INT 12
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: ST_TO_ADDR
// hc_agressivity := 20 ;
17708: LD_ADDR_OWVAR 35
17712: PUSH
17713: LD_INT 20
17715: ST_TO_ADDR
// hc_class := class_tiger ;
17716: LD_ADDR_OWVAR 28
17720: PUSH
17721: LD_INT 14
17723: ST_TO_ADDR
// hc_gallery :=  ;
17724: LD_ADDR_OWVAR 33
17728: PUSH
17729: LD_STRING 
17731: ST_TO_ADDR
// hc_name :=  ;
17732: LD_ADDR_OWVAR 26
17736: PUSH
17737: LD_STRING 
17739: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17740: CALL_OW 44
17744: PPUSH
17745: LD_INT 0
17747: PPUSH
17748: CALL_OW 51
// end ;
17752: GO 17674
17754: POP
17755: POP
// end ;
17756: PPOPN 1
17758: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17759: LD_EXP 19
17763: PUSH
17764: LD_EXP 39
17768: AND
17769: IFFALSE 17778
17771: GO 17773
17773: DISABLE
// StreamSibBomb ;
17774: CALL 17779 0 0
17778: END
// export function StreamSibBomb ; var i , x , y ; begin
17779: LD_INT 0
17781: PPUSH
17782: PPUSH
17783: PPUSH
17784: PPUSH
// result := false ;
17785: LD_ADDR_VAR 0 1
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
// for i := 1 to 16 do
17793: LD_ADDR_VAR 0 2
17797: PUSH
17798: DOUBLE
17799: LD_INT 1
17801: DEC
17802: ST_TO_ADDR
17803: LD_INT 16
17805: PUSH
17806: FOR_TO
17807: IFFALSE 18006
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_INT 10
17816: PUSH
17817: LD_INT 20
17819: PUSH
17820: LD_INT 30
17822: PUSH
17823: LD_INT 40
17825: PUSH
17826: LD_INT 50
17828: PUSH
17829: LD_INT 60
17831: PUSH
17832: LD_INT 70
17834: PUSH
17835: LD_INT 80
17837: PUSH
17838: LD_INT 90
17840: PUSH
17841: LD_INT 100
17843: PUSH
17844: LD_INT 110
17846: PUSH
17847: LD_INT 120
17849: PUSH
17850: LD_INT 130
17852: PUSH
17853: LD_INT 140
17855: PUSH
17856: LD_INT 150
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: PPUSH
17879: LD_INT 15
17881: PPUSH
17882: CALL_OW 12
17886: ARRAY
17887: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_INT 10
17895: PUSH
17896: LD_INT 20
17898: PUSH
17899: LD_INT 30
17901: PUSH
17902: LD_INT 40
17904: PUSH
17905: LD_INT 50
17907: PUSH
17908: LD_INT 60
17910: PUSH
17911: LD_INT 70
17913: PUSH
17914: LD_INT 80
17916: PUSH
17917: LD_INT 90
17919: PUSH
17920: LD_INT 100
17922: PUSH
17923: LD_INT 110
17925: PUSH
17926: LD_INT 120
17928: PUSH
17929: LD_INT 130
17931: PUSH
17932: LD_INT 140
17934: PUSH
17935: LD_INT 150
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: PPUSH
17958: LD_INT 15
17960: PPUSH
17961: CALL_OW 12
17965: ARRAY
17966: ST_TO_ADDR
// if ValidHex ( x , y ) then
17967: LD_VAR 0 3
17971: PPUSH
17972: LD_VAR 0 4
17976: PPUSH
17977: CALL_OW 488
17981: IFFALSE 18004
// begin result := [ x , y ] ;
17983: LD_ADDR_VAR 0 1
17987: PUSH
17988: LD_VAR 0 3
17992: PUSH
17993: LD_VAR 0 4
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: ST_TO_ADDR
// break ;
18002: GO 18006
// end ; end ;
18004: GO 17806
18006: POP
18007: POP
// if result then
18008: LD_VAR 0 1
18012: IFFALSE 18072
// begin ToLua ( playSibBomb() ) ;
18014: LD_STRING playSibBomb()
18016: PPUSH
18017: CALL_OW 559
// wait ( 0 0$14 ) ;
18021: LD_INT 490
18023: PPUSH
18024: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18028: LD_VAR 0 1
18032: PUSH
18033: LD_INT 1
18035: ARRAY
18036: PPUSH
18037: LD_VAR 0 1
18041: PUSH
18042: LD_INT 2
18044: ARRAY
18045: PPUSH
18046: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18050: LD_VAR 0 1
18054: PUSH
18055: LD_INT 1
18057: ARRAY
18058: PPUSH
18059: LD_VAR 0 1
18063: PUSH
18064: LD_INT 2
18066: ARRAY
18067: PPUSH
18068: CALL_OW 429
// end ; end ;
18072: LD_VAR 0 1
18076: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18077: LD_EXP 19
18081: PUSH
18082: LD_EXP 41
18086: AND
18087: IFFALSE 18099
18089: GO 18091
18091: DISABLE
// YouLost (  ) ;
18092: LD_STRING 
18094: PPUSH
18095: CALL_OW 104
18099: END
// every 0 0$1 trigger StreamModeActive and sFog do
18100: LD_EXP 19
18104: PUSH
18105: LD_EXP 40
18109: AND
18110: IFFALSE 18124
18112: GO 18114
18114: DISABLE
// FogOff ( your_side ) ;
18115: LD_OWVAR 2
18119: PPUSH
18120: CALL_OW 344
18124: END
// every 0 0$1 trigger StreamModeActive and sSun do
18125: LD_EXP 19
18129: PUSH
18130: LD_EXP 42
18134: AND
18135: IFFALSE 18163
18137: GO 18139
18139: DISABLE
// begin solar_recharge_percent := 0 ;
18140: LD_ADDR_OWVAR 79
18144: PUSH
18145: LD_INT 0
18147: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18148: LD_INT 10500
18150: PPUSH
18151: CALL_OW 67
// solar_recharge_percent := 100 ;
18155: LD_ADDR_OWVAR 79
18159: PUSH
18160: LD_INT 100
18162: ST_TO_ADDR
// end ;
18163: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18164: LD_EXP 19
18168: PUSH
18169: LD_EXP 43
18173: AND
18174: IFFALSE 18413
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
18183: PPUSH
// begin tmp := [ ] ;
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: EMPTY
18190: ST_TO_ADDR
// for i := 1 to 6 do
18191: LD_ADDR_VAR 0 1
18195: PUSH
18196: DOUBLE
18197: LD_INT 1
18199: DEC
18200: ST_TO_ADDR
18201: LD_INT 6
18203: PUSH
18204: FOR_TO
18205: IFFALSE 18310
// begin uc_nation := nation_nature ;
18207: LD_ADDR_OWVAR 21
18211: PUSH
18212: LD_INT 0
18214: ST_TO_ADDR
// uc_side := 0 ;
18215: LD_ADDR_OWVAR 20
18219: PUSH
18220: LD_INT 0
18222: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18223: LD_ADDR_OWVAR 29
18227: PUSH
18228: LD_INT 12
18230: PUSH
18231: LD_INT 12
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: ST_TO_ADDR
// hc_agressivity := 20 ;
18238: LD_ADDR_OWVAR 35
18242: PUSH
18243: LD_INT 20
18245: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18246: LD_ADDR_OWVAR 28
18250: PUSH
18251: LD_INT 17
18253: ST_TO_ADDR
// hc_gallery :=  ;
18254: LD_ADDR_OWVAR 33
18258: PUSH
18259: LD_STRING 
18261: ST_TO_ADDR
// hc_name :=  ;
18262: LD_ADDR_OWVAR 26
18266: PUSH
18267: LD_STRING 
18269: ST_TO_ADDR
// un := CreateHuman ;
18270: LD_ADDR_VAR 0 2
18274: PUSH
18275: CALL_OW 44
18279: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18280: LD_VAR 0 2
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL_OW 51
// tmp := tmp ^ un ;
18292: LD_ADDR_VAR 0 3
18296: PUSH
18297: LD_VAR 0 3
18301: PUSH
18302: LD_VAR 0 2
18306: ADD
18307: ST_TO_ADDR
// end ;
18308: GO 18204
18310: POP
18311: POP
// repeat wait ( 0 0$1 ) ;
18312: LD_INT 35
18314: PPUSH
18315: CALL_OW 67
// for un in tmp do
18319: LD_ADDR_VAR 0 2
18323: PUSH
18324: LD_VAR 0 3
18328: PUSH
18329: FOR_IN
18330: IFFALSE 18404
// begin if IsDead ( un ) then
18332: LD_VAR 0 2
18336: PPUSH
18337: CALL_OW 301
18341: IFFALSE 18361
// begin tmp := tmp diff un ;
18343: LD_ADDR_VAR 0 3
18347: PUSH
18348: LD_VAR 0 3
18352: PUSH
18353: LD_VAR 0 2
18357: DIFF
18358: ST_TO_ADDR
// continue ;
18359: GO 18329
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18361: LD_VAR 0 2
18365: PPUSH
18366: LD_INT 3
18368: PUSH
18369: LD_INT 22
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 69
18387: PPUSH
18388: LD_VAR 0 2
18392: PPUSH
18393: CALL_OW 74
18397: PPUSH
18398: CALL_OW 115
// end ;
18402: GO 18329
18404: POP
18405: POP
// until not tmp ;
18406: LD_VAR 0 3
18410: NOT
18411: IFFALSE 18312
// end ;
18413: PPOPN 3
18415: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18416: LD_EXP 19
18420: PUSH
18421: LD_EXP 44
18425: AND
18426: IFFALSE 18480
18428: GO 18430
18430: DISABLE
// begin ToLua ( displayTroll(); ) ;
18431: LD_STRING displayTroll();
18433: PPUSH
18434: CALL_OW 559
// wait ( 3 3$00 ) ;
18438: LD_INT 6300
18440: PPUSH
18441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18445: LD_STRING hideTroll();
18447: PPUSH
18448: CALL_OW 559
// wait ( 1 1$00 ) ;
18452: LD_INT 2100
18454: PPUSH
18455: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18459: LD_STRING displayTroll();
18461: PPUSH
18462: CALL_OW 559
// wait ( 1 1$00 ) ;
18466: LD_INT 2100
18468: PPUSH
18469: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18473: LD_STRING hideTroll();
18475: PPUSH
18476: CALL_OW 559
// end ;
18480: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18481: LD_EXP 19
18485: PUSH
18486: LD_EXP 45
18490: AND
18491: IFFALSE 18554
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
// begin p := 0 ;
18499: LD_ADDR_VAR 0 1
18503: PUSH
18504: LD_INT 0
18506: ST_TO_ADDR
// repeat game_speed := 1 ;
18507: LD_ADDR_OWVAR 65
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18515: LD_INT 35
18517: PPUSH
18518: CALL_OW 67
// p := p + 1 ;
18522: LD_ADDR_VAR 0 1
18526: PUSH
18527: LD_VAR 0 1
18531: PUSH
18532: LD_INT 1
18534: PLUS
18535: ST_TO_ADDR
// until p >= 60 ;
18536: LD_VAR 0 1
18540: PUSH
18541: LD_INT 60
18543: GREATEREQUAL
18544: IFFALSE 18507
// game_speed := 4 ;
18546: LD_ADDR_OWVAR 65
18550: PUSH
18551: LD_INT 4
18553: ST_TO_ADDR
// end ;
18554: PPOPN 1
18556: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18557: LD_EXP 19
18561: PUSH
18562: LD_EXP 46
18566: AND
18567: IFFALSE 18713
18569: GO 18571
18571: DISABLE
18572: LD_INT 0
18574: PPUSH
18575: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18576: LD_ADDR_VAR 0 1
18580: PUSH
18581: LD_INT 22
18583: PUSH
18584: LD_OWVAR 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 30
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 30
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: ST_TO_ADDR
// if not depot then
18630: LD_VAR 0 1
18634: NOT
18635: IFFALSE 18639
// exit ;
18637: GO 18713
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18639: LD_ADDR_VAR 0 2
18643: PUSH
18644: LD_VAR 0 1
18648: PUSH
18649: LD_INT 1
18651: PPUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 12
18661: ARRAY
18662: PPUSH
18663: CALL_OW 274
18667: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18668: LD_VAR 0 2
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: LD_INT 0
18678: PPUSH
18679: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18683: LD_VAR 0 2
18687: PPUSH
18688: LD_INT 2
18690: PPUSH
18691: LD_INT 0
18693: PPUSH
18694: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18698: LD_VAR 0 2
18702: PPUSH
18703: LD_INT 3
18705: PPUSH
18706: LD_INT 0
18708: PPUSH
18709: CALL_OW 277
// end ;
18713: PPOPN 2
18715: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18716: LD_EXP 19
18720: PUSH
18721: LD_EXP 47
18725: AND
18726: IFFALSE 18823
18728: GO 18730
18730: DISABLE
18731: LD_INT 0
18733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18734: LD_ADDR_VAR 0 1
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_OWVAR 2
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 21
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: LD_INT 23
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 69
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 1
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18797: LD_VAR 0 1
18801: PUSH
18802: LD_INT 1
18804: PPUSH
18805: LD_VAR 0 1
18809: PPUSH
18810: CALL_OW 12
18814: ARRAY
18815: PPUSH
18816: LD_INT 200
18818: PPUSH
18819: CALL_OW 234
// end ;
18823: PPOPN 1
18825: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18826: LD_EXP 19
18830: PUSH
18831: LD_EXP 48
18835: AND
18836: IFFALSE 18915
18838: GO 18840
18840: DISABLE
18841: LD_INT 0
18843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18844: LD_ADDR_VAR 0 1
18848: PUSH
18849: LD_INT 22
18851: PUSH
18852: LD_OWVAR 2
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 21
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 69
18879: ST_TO_ADDR
// if not tmp then
18880: LD_VAR 0 1
18884: NOT
18885: IFFALSE 18889
// exit ;
18887: GO 18915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18889: LD_VAR 0 1
18893: PUSH
18894: LD_INT 1
18896: PPUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 12
18906: ARRAY
18907: PPUSH
18908: LD_INT 60
18910: PPUSH
18911: CALL_OW 234
// end ;
18915: PPOPN 1
18917: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18918: LD_EXP 19
18922: PUSH
18923: LD_EXP 49
18927: AND
18928: IFFALSE 19027
18930: GO 18932
18932: DISABLE
18933: LD_INT 0
18935: PPUSH
18936: PPUSH
// begin enable ;
18937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18938: LD_ADDR_VAR 0 1
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_OWVAR 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 61
18957: PUSH
18958: EMPTY
18959: LIST
18960: PUSH
18961: LD_INT 33
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: ST_TO_ADDR
// if not tmp then
18981: LD_VAR 0 1
18985: NOT
18986: IFFALSE 18990
// exit ;
18988: GO 19027
// for i in tmp do
18990: LD_ADDR_VAR 0 2
18994: PUSH
18995: LD_VAR 0 1
18999: PUSH
19000: FOR_IN
19001: IFFALSE 19025
// if IsControledBy ( i ) then
19003: LD_VAR 0 2
19007: PPUSH
19008: CALL_OW 312
19012: IFFALSE 19023
// ComUnlink ( i ) ;
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 136
19023: GO 19000
19025: POP
19026: POP
// end ;
19027: PPOPN 2
19029: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19030: LD_EXP 19
19034: PUSH
19035: LD_EXP 50
19039: AND
19040: IFFALSE 19174
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
// begin ToLua ( displayPowell(); ) ;
19049: LD_STRING displayPowell();
19051: PPUSH
19052: CALL_OW 559
// uc_side := 0 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// uc_nation := 2 ;
19064: LD_ADDR_OWVAR 21
19068: PUSH
19069: LD_INT 2
19071: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19072: LD_ADDR_OWVAR 37
19076: PUSH
19077: LD_INT 14
19079: ST_TO_ADDR
// vc_engine := engine_siberite ;
19080: LD_ADDR_OWVAR 39
19084: PUSH
19085: LD_INT 3
19087: ST_TO_ADDR
// vc_control := control_apeman ;
19088: LD_ADDR_OWVAR 38
19092: PUSH
19093: LD_INT 5
19095: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19096: LD_ADDR_OWVAR 40
19100: PUSH
19101: LD_INT 29
19103: ST_TO_ADDR
// un := CreateVehicle ;
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: CALL_OW 45
19113: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19114: LD_VAR 0 2
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19126: LD_INT 35
19128: PPUSH
19129: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19133: LD_VAR 0 2
19137: PPUSH
19138: LD_OWVAR 3
19142: PUSH
19143: LD_VAR 0 2
19147: DIFF
19148: PPUSH
19149: LD_VAR 0 2
19153: PPUSH
19154: CALL_OW 74
19158: PPUSH
19159: CALL_OW 115
// until IsOk ( un ) ;
19163: LD_VAR 0 2
19167: PPUSH
19168: CALL_OW 302
19172: IFFALSE 19126
// end ;
19174: PPOPN 2
19176: END
// every 0 0$1 trigger StreamModeActive and sStu do
19177: LD_EXP 19
19181: PUSH
19182: LD_EXP 58
19186: AND
19187: IFFALSE 19199
19189: GO 19191
19191: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19192: LD_STRING displayStucuk();
19194: PPUSH
19195: CALL_OW 559
// end ;
19199: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19200: LD_EXP 19
19204: PUSH
19205: LD_EXP 51
19209: AND
19210: IFFALSE 19351
19212: GO 19214
19214: DISABLE
19215: LD_INT 0
19217: PPUSH
19218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19219: LD_ADDR_VAR 0 2
19223: PUSH
19224: LD_INT 22
19226: PUSH
19227: LD_OWVAR 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 21
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: ST_TO_ADDR
// if not tmp then
19255: LD_VAR 0 2
19259: NOT
19260: IFFALSE 19264
// exit ;
19262: GO 19351
// un := tmp [ rand ( 1 , tmp ) ] ;
19264: LD_ADDR_VAR 0 1
19268: PUSH
19269: LD_VAR 0 2
19273: PUSH
19274: LD_INT 1
19276: PPUSH
19277: LD_VAR 0 2
19281: PPUSH
19282: CALL_OW 12
19286: ARRAY
19287: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19288: LD_VAR 0 1
19292: PPUSH
19293: LD_INT 0
19295: PPUSH
19296: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19300: LD_VAR 0 1
19304: PPUSH
19305: LD_OWVAR 3
19309: PUSH
19310: LD_VAR 0 1
19314: DIFF
19315: PPUSH
19316: LD_VAR 0 1
19320: PPUSH
19321: CALL_OW 74
19325: PPUSH
19326: CALL_OW 115
// wait ( 0 0$20 ) ;
19330: LD_INT 700
19332: PPUSH
19333: CALL_OW 67
// SetSide ( un , your_side ) ;
19337: LD_VAR 0 1
19341: PPUSH
19342: LD_OWVAR 2
19346: PPUSH
19347: CALL_OW 235
// end ;
19351: PPOPN 2
19353: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19354: LD_EXP 19
19358: PUSH
19359: LD_EXP 52
19363: AND
19364: IFFALSE 19470
19366: GO 19368
19368: DISABLE
19369: LD_INT 0
19371: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19372: LD_ADDR_VAR 0 1
19376: PUSH
19377: LD_INT 22
19379: PUSH
19380: LD_OWVAR 2
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 30
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 30
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PPUSH
19421: CALL_OW 69
19425: ST_TO_ADDR
// if not depot then
19426: LD_VAR 0 1
19430: NOT
19431: IFFALSE 19435
// exit ;
19433: GO 19470
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19435: LD_VAR 0 1
19439: PUSH
19440: LD_INT 1
19442: ARRAY
19443: PPUSH
19444: CALL_OW 250
19448: PPUSH
19449: LD_VAR 0 1
19453: PUSH
19454: LD_INT 1
19456: ARRAY
19457: PPUSH
19458: CALL_OW 251
19462: PPUSH
19463: LD_INT 70
19465: PPUSH
19466: CALL_OW 495
// end ;
19470: PPOPN 1
19472: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19473: LD_EXP 19
19477: PUSH
19478: LD_EXP 53
19482: AND
19483: IFFALSE 19694
19485: GO 19487
19487: DISABLE
19488: LD_INT 0
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19495: LD_ADDR_VAR 0 5
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: ST_TO_ADDR
// if not tmp then
19531: LD_VAR 0 5
19535: NOT
19536: IFFALSE 19540
// exit ;
19538: GO 19694
// for i in tmp do
19540: LD_ADDR_VAR 0 1
19544: PUSH
19545: LD_VAR 0 5
19549: PUSH
19550: FOR_IN
19551: IFFALSE 19692
// begin d := rand ( 0 , 5 ) ;
19553: LD_ADDR_VAR 0 4
19557: PUSH
19558: LD_INT 0
19560: PPUSH
19561: LD_INT 5
19563: PPUSH
19564: CALL_OW 12
19568: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19569: LD_ADDR_VAR 0 2
19573: PUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 250
19583: PPUSH
19584: LD_VAR 0 4
19588: PPUSH
19589: LD_INT 3
19591: PPUSH
19592: LD_INT 12
19594: PPUSH
19595: CALL_OW 12
19599: PPUSH
19600: CALL_OW 272
19604: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19605: LD_ADDR_VAR 0 3
19609: PUSH
19610: LD_VAR 0 1
19614: PPUSH
19615: CALL_OW 251
19619: PPUSH
19620: LD_VAR 0 4
19624: PPUSH
19625: LD_INT 3
19627: PPUSH
19628: LD_INT 12
19630: PPUSH
19631: CALL_OW 12
19635: PPUSH
19636: CALL_OW 273
19640: ST_TO_ADDR
// if ValidHex ( x , y ) then
19641: LD_VAR 0 2
19645: PPUSH
19646: LD_VAR 0 3
19650: PPUSH
19651: CALL_OW 488
19655: IFFALSE 19690
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19657: LD_VAR 0 1
19661: PPUSH
19662: LD_VAR 0 2
19666: PPUSH
19667: LD_VAR 0 3
19671: PPUSH
19672: LD_INT 3
19674: PPUSH
19675: LD_INT 6
19677: PPUSH
19678: CALL_OW 12
19682: PPUSH
19683: LD_INT 1
19685: PPUSH
19686: CALL_OW 483
// end ;
19690: GO 19550
19692: POP
19693: POP
// end ;
19694: PPOPN 5
19696: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19697: LD_EXP 19
19701: PUSH
19702: LD_EXP 54
19706: AND
19707: IFFALSE 19801
19709: GO 19711
19711: DISABLE
19712: LD_INT 0
19714: PPUSH
19715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 32
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 21
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 69
19762: ST_TO_ADDR
// if not tmp then
19763: LD_VAR 0 2
19767: NOT
19768: IFFALSE 19772
// exit ;
19770: GO 19801
// for i in tmp do
19772: LD_ADDR_VAR 0 1
19776: PUSH
19777: LD_VAR 0 2
19781: PUSH
19782: FOR_IN
19783: IFFALSE 19799
// SetFuel ( i , 0 ) ;
19785: LD_VAR 0 1
19789: PPUSH
19790: LD_INT 0
19792: PPUSH
19793: CALL_OW 240
19797: GO 19782
19799: POP
19800: POP
// end ;
19801: PPOPN 2
19803: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19804: LD_EXP 19
19808: PUSH
19809: LD_EXP 55
19813: AND
19814: IFFALSE 19880
19816: GO 19818
19818: DISABLE
19819: LD_INT 0
19821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19822: LD_ADDR_VAR 0 1
19826: PUSH
19827: LD_INT 22
19829: PUSH
19830: LD_OWVAR 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 29
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: ST_TO_ADDR
// if not tmp then
19858: LD_VAR 0 1
19862: NOT
19863: IFFALSE 19867
// exit ;
19865: GO 19880
// DestroyUnit ( tmp [ 1 ] ) ;
19867: LD_VAR 0 1
19871: PUSH
19872: LD_INT 1
19874: ARRAY
19875: PPUSH
19876: CALL_OW 65
// end ;
19880: PPOPN 1
19882: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19883: LD_EXP 19
19887: PUSH
19888: LD_EXP 57
19892: AND
19893: IFFALSE 20022
19895: GO 19897
19897: DISABLE
19898: LD_INT 0
19900: PPUSH
// begin uc_side := 0 ;
19901: LD_ADDR_OWVAR 20
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// uc_nation := nation_arabian ;
19909: LD_ADDR_OWVAR 21
19913: PUSH
19914: LD_INT 2
19916: ST_TO_ADDR
// hc_gallery :=  ;
19917: LD_ADDR_OWVAR 33
19921: PUSH
19922: LD_STRING 
19924: ST_TO_ADDR
// hc_name :=  ;
19925: LD_ADDR_OWVAR 26
19929: PUSH
19930: LD_STRING 
19932: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19933: LD_INT 1
19935: PPUSH
19936: LD_INT 11
19938: PPUSH
19939: LD_INT 10
19941: PPUSH
19942: CALL_OW 380
// un := CreateHuman ;
19946: LD_ADDR_VAR 0 1
19950: PUSH
19951: CALL_OW 44
19955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19956: LD_VAR 0 1
19960: PPUSH
19961: LD_INT 1
19963: PPUSH
19964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19968: LD_INT 35
19970: PPUSH
19971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19975: LD_VAR 0 1
19979: PPUSH
19980: LD_INT 22
19982: PUSH
19983: LD_OWVAR 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 69
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 74
20006: PPUSH
20007: CALL_OW 115
// until IsDead ( un ) ;
20011: LD_VAR 0 1
20015: PPUSH
20016: CALL_OW 301
20020: IFFALSE 19968
// end ;
20022: PPOPN 1
20024: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20025: LD_EXP 19
20029: PUSH
20030: LD_EXP 59
20034: AND
20035: IFFALSE 20047
20037: GO 20039
20039: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20040: LD_STRING earthquake(getX(game), 0, 32)
20042: PPUSH
20043: CALL_OW 559
20047: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20048: LD_EXP 19
20052: PUSH
20053: LD_EXP 60
20057: AND
20058: IFFALSE 20149
20060: GO 20062
20062: DISABLE
20063: LD_INT 0
20065: PPUSH
// begin enable ;
20066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20067: LD_ADDR_VAR 0 1
20071: PUSH
20072: LD_INT 22
20074: PUSH
20075: LD_OWVAR 2
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 21
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 33
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: PPUSH
20109: CALL_OW 69
20113: ST_TO_ADDR
// if not tmp then
20114: LD_VAR 0 1
20118: NOT
20119: IFFALSE 20123
// exit ;
20121: GO 20149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20123: LD_VAR 0 1
20127: PUSH
20128: LD_INT 1
20130: PPUSH
20131: LD_VAR 0 1
20135: PPUSH
20136: CALL_OW 12
20140: ARRAY
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: CALL_OW 234
// end ;
20149: PPOPN 1
20151: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20152: LD_EXP 19
20156: PUSH
20157: LD_EXP 61
20161: AND
20162: IFFALSE 20303
20164: GO 20166
20166: DISABLE
20167: LD_INT 0
20169: PPUSH
20170: PPUSH
20171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20172: LD_ADDR_VAR 0 3
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_OWVAR 2
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 25
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PPUSH
20203: CALL_OW 69
20207: ST_TO_ADDR
// if not tmp then
20208: LD_VAR 0 3
20212: NOT
20213: IFFALSE 20217
// exit ;
20215: GO 20303
// un := tmp [ rand ( 1 , tmp ) ] ;
20217: LD_ADDR_VAR 0 2
20221: PUSH
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 1
20229: PPUSH
20230: LD_VAR 0 3
20234: PPUSH
20235: CALL_OW 12
20239: ARRAY
20240: ST_TO_ADDR
// if Crawls ( un ) then
20241: LD_VAR 0 2
20245: PPUSH
20246: CALL_OW 318
20250: IFFALSE 20261
// ComWalk ( un ) ;
20252: LD_VAR 0 2
20256: PPUSH
20257: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20261: LD_VAR 0 2
20265: PPUSH
20266: LD_INT 9
20268: PPUSH
20269: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20273: LD_INT 28
20275: PPUSH
20276: LD_OWVAR 2
20280: PPUSH
20281: LD_INT 2
20283: PPUSH
20284: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20288: LD_INT 29
20290: PPUSH
20291: LD_OWVAR 2
20295: PPUSH
20296: LD_INT 2
20298: PPUSH
20299: CALL_OW 322
// end ;
20303: PPOPN 3
20305: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20306: LD_EXP 19
20310: PUSH
20311: LD_EXP 62
20315: AND
20316: IFFALSE 20427
20318: GO 20320
20320: DISABLE
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20326: LD_ADDR_VAR 0 3
20330: PUSH
20331: LD_INT 22
20333: PUSH
20334: LD_OWVAR 2
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 25
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: ST_TO_ADDR
// if not tmp then
20362: LD_VAR 0 3
20366: NOT
20367: IFFALSE 20371
// exit ;
20369: GO 20427
// un := tmp [ rand ( 1 , tmp ) ] ;
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: ST_TO_ADDR
// if Crawls ( un ) then
20395: LD_VAR 0 2
20399: PPUSH
20400: CALL_OW 318
20404: IFFALSE 20415
// ComWalk ( un ) ;
20406: LD_VAR 0 2
20410: PPUSH
20411: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20415: LD_VAR 0 2
20419: PPUSH
20420: LD_INT 8
20422: PPUSH
20423: CALL_OW 336
// end ;
20427: PPOPN 3
20429: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20430: LD_EXP 19
20434: PUSH
20435: LD_EXP 63
20439: AND
20440: IFFALSE 20584
20442: GO 20444
20444: DISABLE
20445: LD_INT 0
20447: PPUSH
20448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20449: LD_ADDR_VAR 0 2
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_OWVAR 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 21
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: LD_INT 34
20481: PUSH
20482: LD_INT 12
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 34
20491: PUSH
20492: LD_INT 51
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 34
20501: PUSH
20502: LD_INT 32
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL_OW 69
20524: ST_TO_ADDR
// if not tmp then
20525: LD_VAR 0 2
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20584
// for i in tmp do
20534: LD_ADDR_VAR 0 1
20538: PUSH
20539: LD_VAR 0 2
20543: PUSH
20544: FOR_IN
20545: IFFALSE 20582
// if GetCargo ( i , mat_artifact ) = 0 then
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 4
20554: PPUSH
20555: CALL_OW 289
20559: PUSH
20560: LD_INT 0
20562: EQUAL
20563: IFFALSE 20580
// SetCargo ( i , mat_siberit , 100 ) ;
20565: LD_VAR 0 1
20569: PPUSH
20570: LD_INT 3
20572: PPUSH
20573: LD_INT 100
20575: PPUSH
20576: CALL_OW 290
20580: GO 20544
20582: POP
20583: POP
// end ;
20584: PPOPN 2
20586: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20587: LD_EXP 19
20591: PUSH
20592: LD_EXP 64
20596: AND
20597: IFFALSE 20750
20599: GO 20601
20601: DISABLE
20602: LD_INT 0
20604: PPUSH
20605: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_INT 22
20613: PUSH
20614: LD_OWVAR 2
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 69
20627: ST_TO_ADDR
// if not tmp then
20628: LD_VAR 0 2
20632: NOT
20633: IFFALSE 20637
// exit ;
20635: GO 20750
// for i := 1 to 2 do
20637: LD_ADDR_VAR 0 1
20641: PUSH
20642: DOUBLE
20643: LD_INT 1
20645: DEC
20646: ST_TO_ADDR
20647: LD_INT 2
20649: PUSH
20650: FOR_TO
20651: IFFALSE 20748
// begin uc_side := your_side ;
20653: LD_ADDR_OWVAR 20
20657: PUSH
20658: LD_OWVAR 2
20662: ST_TO_ADDR
// uc_nation := nation_american ;
20663: LD_ADDR_OWVAR 21
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// vc_chassis := us_morphling ;
20671: LD_ADDR_OWVAR 37
20675: PUSH
20676: LD_INT 5
20678: ST_TO_ADDR
// vc_engine := engine_siberite ;
20679: LD_ADDR_OWVAR 39
20683: PUSH
20684: LD_INT 3
20686: ST_TO_ADDR
// vc_control := control_computer ;
20687: LD_ADDR_OWVAR 38
20691: PUSH
20692: LD_INT 3
20694: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20695: LD_ADDR_OWVAR 40
20699: PUSH
20700: LD_INT 10
20702: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
20703: CALL_OW 45
20707: PPUSH
20708: LD_VAR 0 2
20712: PUSH
20713: LD_INT 1
20715: ARRAY
20716: PPUSH
20717: CALL_OW 250
20721: PPUSH
20722: LD_VAR 0 2
20726: PUSH
20727: LD_INT 1
20729: ARRAY
20730: PPUSH
20731: CALL_OW 251
20735: PPUSH
20736: LD_INT 12
20738: PPUSH
20739: LD_INT 1
20741: PPUSH
20742: CALL_OW 50
// end ;
20746: GO 20650
20748: POP
20749: POP
// end ;
20750: PPOPN 2
20752: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20753: LD_EXP 19
20757: PUSH
20758: LD_EXP 65
20762: AND
20763: IFFALSE 20985
20765: GO 20767
20767: DISABLE
20768: LD_INT 0
20770: PPUSH
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20776: LD_ADDR_VAR 0 6
20780: PUSH
20781: LD_INT 22
20783: PUSH
20784: LD_OWVAR 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 21
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 23
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 69
20829: ST_TO_ADDR
// if not tmp then
20830: LD_VAR 0 6
20834: NOT
20835: IFFALSE 20839
// exit ;
20837: GO 20985
// s1 := rand ( 1 , 4 ) ;
20839: LD_ADDR_VAR 0 2
20843: PUSH
20844: LD_INT 1
20846: PPUSH
20847: LD_INT 4
20849: PPUSH
20850: CALL_OW 12
20854: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20855: LD_ADDR_VAR 0 4
20859: PUSH
20860: LD_VAR 0 6
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: LD_VAR 0 2
20873: PPUSH
20874: CALL_OW 259
20878: ST_TO_ADDR
// if s1 = 1 then
20879: LD_VAR 0 2
20883: PUSH
20884: LD_INT 1
20886: EQUAL
20887: IFFALSE 20907
// s2 := rand ( 2 , 4 ) else
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_INT 2
20896: PPUSH
20897: LD_INT 4
20899: PPUSH
20900: CALL_OW 12
20904: ST_TO_ADDR
20905: GO 20915
// s2 := 1 ;
20907: LD_ADDR_VAR 0 3
20911: PUSH
20912: LD_INT 1
20914: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20915: LD_ADDR_VAR 0 5
20919: PUSH
20920: LD_VAR 0 6
20924: PUSH
20925: LD_INT 1
20927: ARRAY
20928: PPUSH
20929: LD_VAR 0 3
20933: PPUSH
20934: CALL_OW 259
20938: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20939: LD_VAR 0 6
20943: PUSH
20944: LD_INT 1
20946: ARRAY
20947: PPUSH
20948: LD_VAR 0 2
20952: PPUSH
20953: LD_VAR 0 5
20957: PPUSH
20958: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20962: LD_VAR 0 6
20966: PUSH
20967: LD_INT 1
20969: ARRAY
20970: PPUSH
20971: LD_VAR 0 3
20975: PPUSH
20976: LD_VAR 0 4
20980: PPUSH
20981: CALL_OW 237
// end ;
20985: PPOPN 6
20987: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20988: LD_EXP 19
20992: PUSH
20993: LD_EXP 66
20997: AND
20998: IFFALSE 21077
21000: GO 21002
21002: DISABLE
21003: LD_INT 0
21005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21006: LD_ADDR_VAR 0 1
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_OWVAR 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 30
21025: PUSH
21026: LD_INT 3
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PPUSH
21037: CALL_OW 69
21041: ST_TO_ADDR
// if not tmp then
21042: LD_VAR 0 1
21046: NOT
21047: IFFALSE 21051
// exit ;
21049: GO 21077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21051: LD_VAR 0 1
21055: PUSH
21056: LD_INT 1
21058: PPUSH
21059: LD_VAR 0 1
21063: PPUSH
21064: CALL_OW 12
21068: ARRAY
21069: PPUSH
21070: LD_INT 1
21072: PPUSH
21073: CALL_OW 234
// end ;
21077: PPOPN 1
21079: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21080: LD_EXP 19
21084: PUSH
21085: LD_EXP 67
21089: AND
21090: IFFALSE 21202
21092: GO 21094
21094: DISABLE
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21099: LD_ADDR_VAR 0 2
21103: PUSH
21104: LD_INT 22
21106: PUSH
21107: LD_OWVAR 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 2
21118: PUSH
21119: LD_INT 30
21121: PUSH
21122: LD_INT 27
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 30
21131: PUSH
21132: LD_INT 26
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 30
21141: PUSH
21142: LD_INT 28
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 69
21163: ST_TO_ADDR
// if not tmp then
21164: LD_VAR 0 2
21168: NOT
21169: IFFALSE 21173
// exit ;
21171: GO 21202
// for i in tmp do
21173: LD_ADDR_VAR 0 1
21177: PUSH
21178: LD_VAR 0 2
21182: PUSH
21183: FOR_IN
21184: IFFALSE 21200
// SetLives ( i , 1 ) ;
21186: LD_VAR 0 1
21190: PPUSH
21191: LD_INT 1
21193: PPUSH
21194: CALL_OW 234
21198: GO 21183
21200: POP
21201: POP
// end ;
21202: PPOPN 2
21204: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21205: LD_EXP 19
21209: PUSH
21210: LD_EXP 68
21214: AND
21215: IFFALSE 21485
21217: GO 21219
21219: DISABLE
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
21224: PPUSH
// begin i := rand ( 1 , 7 ) ;
21225: LD_ADDR_VAR 0 1
21229: PUSH
21230: LD_INT 1
21232: PPUSH
21233: LD_INT 7
21235: PPUSH
21236: CALL_OW 12
21240: ST_TO_ADDR
// case i of 1 :
21241: LD_VAR 0 1
21245: PUSH
21246: LD_INT 1
21248: DOUBLE
21249: EQUAL
21250: IFTRUE 21254
21252: GO 21264
21254: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21255: LD_STRING earthquake(getX(game), 0, 32)
21257: PPUSH
21258: CALL_OW 559
21262: GO 21485
21264: LD_INT 2
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21282
21272: POP
// ToLua ( displayStucuk(); ) ; 3 :
21273: LD_STRING displayStucuk();
21275: PPUSH
21276: CALL_OW 559
21280: GO 21485
21282: LD_INT 3
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21394
21290: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21291: LD_ADDR_VAR 0 2
21295: PUSH
21296: LD_INT 22
21298: PUSH
21299: LD_OWVAR 2
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: ST_TO_ADDR
// if not tmp then
21327: LD_VAR 0 2
21331: NOT
21332: IFFALSE 21336
// exit ;
21334: GO 21485
// un := tmp [ rand ( 1 , tmp ) ] ;
21336: LD_ADDR_VAR 0 3
21340: PUSH
21341: LD_VAR 0 2
21345: PUSH
21346: LD_INT 1
21348: PPUSH
21349: LD_VAR 0 2
21353: PPUSH
21354: CALL_OW 12
21358: ARRAY
21359: ST_TO_ADDR
// if Crawls ( un ) then
21360: LD_VAR 0 3
21364: PPUSH
21365: CALL_OW 318
21369: IFFALSE 21380
// ComWalk ( un ) ;
21371: LD_VAR 0 3
21375: PPUSH
21376: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21380: LD_VAR 0 3
21384: PPUSH
21385: LD_INT 8
21387: PPUSH
21388: CALL_OW 336
// end ; 4 :
21392: GO 21485
21394: LD_INT 4
21396: DOUBLE
21397: EQUAL
21398: IFTRUE 21402
21400: GO 21463
21402: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21403: LD_ADDR_VAR 0 2
21407: PUSH
21408: LD_INT 22
21410: PUSH
21411: LD_OWVAR 2
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 30
21422: PUSH
21423: LD_INT 29
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PPUSH
21434: CALL_OW 69
21438: ST_TO_ADDR
// if not tmp then
21439: LD_VAR 0 2
21443: NOT
21444: IFFALSE 21448
// exit ;
21446: GO 21485
// DestroyUnit ( tmp [ 1 ] ) ;
21448: LD_VAR 0 2
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: CALL_OW 65
// end ; 5 .. 7 :
21461: GO 21485
21463: LD_INT 5
21465: DOUBLE
21466: GREATEREQUAL
21467: IFFALSE 21475
21469: LD_INT 7
21471: DOUBLE
21472: LESSEQUAL
21473: IFTRUE 21477
21475: GO 21484
21477: POP
// StreamSibBomb ; end ;
21478: CALL 17779 0 0
21482: GO 21485
21484: POP
// end ;
21485: PPOPN 3
21487: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21488: LD_EXP 19
21492: PUSH
21493: LD_EXP 69
21497: AND
21498: IFFALSE 21654
21500: GO 21502
21502: DISABLE
21503: LD_INT 0
21505: PPUSH
21506: PPUSH
21507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: LD_INT 81
21515: PUSH
21516: LD_OWVAR 2
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: LD_INT 21
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 21
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PPUSH
21557: CALL_OW 69
21561: ST_TO_ADDR
// if not tmp then
21562: LD_VAR 0 2
21566: NOT
21567: IFFALSE 21571
// exit ;
21569: GO 21654
// p := 0 ;
21571: LD_ADDR_VAR 0 3
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21579: LD_INT 35
21581: PPUSH
21582: CALL_OW 67
// p := p + 1 ;
21586: LD_ADDR_VAR 0 3
21590: PUSH
21591: LD_VAR 0 3
21595: PUSH
21596: LD_INT 1
21598: PLUS
21599: ST_TO_ADDR
// for i in tmp do
21600: LD_ADDR_VAR 0 1
21604: PUSH
21605: LD_VAR 0 2
21609: PUSH
21610: FOR_IN
21611: IFFALSE 21642
// if GetLives ( i ) < 1000 then
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 256
21622: PUSH
21623: LD_INT 1000
21625: LESS
21626: IFFALSE 21640
// SetLives ( i , 1000 ) ;
21628: LD_VAR 0 1
21632: PPUSH
21633: LD_INT 1000
21635: PPUSH
21636: CALL_OW 234
21640: GO 21610
21642: POP
21643: POP
// until p > 20 ;
21644: LD_VAR 0 3
21648: PUSH
21649: LD_INT 20
21651: GREATER
21652: IFFALSE 21579
// end ;
21654: PPOPN 3
21656: END
// every 0 0$1 trigger StreamModeActive and sTime do
21657: LD_EXP 19
21661: PUSH
21662: LD_EXP 70
21666: AND
21667: IFFALSE 21702
21669: GO 21671
21671: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21672: LD_INT 28
21674: PPUSH
21675: LD_OWVAR 2
21679: PPUSH
21680: LD_INT 2
21682: PPUSH
21683: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21687: LD_INT 30
21689: PPUSH
21690: LD_OWVAR 2
21694: PPUSH
21695: LD_INT 2
21697: PPUSH
21698: CALL_OW 322
// end ;
21702: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21703: LD_EXP 19
21707: PUSH
21708: LD_EXP 71
21712: AND
21713: IFFALSE 21834
21715: GO 21717
21717: DISABLE
21718: LD_INT 0
21720: PPUSH
21721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21722: LD_ADDR_VAR 0 2
21726: PUSH
21727: LD_INT 22
21729: PUSH
21730: LD_OWVAR 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: LD_INT 23
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: PPUSH
21771: CALL_OW 69
21775: ST_TO_ADDR
// if not tmp then
21776: LD_VAR 0 2
21780: NOT
21781: IFFALSE 21785
// exit ;
21783: GO 21834
// for i in tmp do
21785: LD_ADDR_VAR 0 1
21789: PUSH
21790: LD_VAR 0 2
21794: PUSH
21795: FOR_IN
21796: IFFALSE 21832
// begin if Crawls ( i ) then
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 318
21807: IFFALSE 21818
// ComWalk ( i ) ;
21809: LD_VAR 0 1
21813: PPUSH
21814: CALL_OW 138
// SetClass ( i , 2 ) ;
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_INT 2
21825: PPUSH
21826: CALL_OW 336
// end ;
21830: GO 21795
21832: POP
21833: POP
// end ;
21834: PPOPN 2
21836: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21837: LD_EXP 19
21841: PUSH
21842: LD_EXP 72
21846: AND
21847: IFFALSE 22052
21849: GO 21851
21851: DISABLE
21852: LD_INT 0
21854: PPUSH
21855: PPUSH
21856: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21857: LD_OWVAR 2
21861: PPUSH
21862: LD_INT 9
21864: PPUSH
21865: LD_INT 1
21867: PPUSH
21868: LD_INT 1
21870: PPUSH
21871: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21875: LD_INT 9
21877: PPUSH
21878: LD_OWVAR 2
21882: PPUSH
21883: CALL_OW 343
// hc_name := Dark Warrior ;
21887: LD_ADDR_OWVAR 26
21891: PUSH
21892: LD_STRING Dark Warrior
21894: ST_TO_ADDR
// hc_gallery :=  ;
21895: LD_ADDR_OWVAR 33
21899: PUSH
21900: LD_STRING 
21902: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
21903: LD_INT 1
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: LD_INT 10
21911: PPUSH
21912: CALL_OW 380
// un := CreateHuman ;
21916: LD_ADDR_VAR 0 3
21920: PUSH
21921: CALL_OW 44
21925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21926: LD_VAR 0 3
21930: PPUSH
21931: LD_INT 1
21933: PPUSH
21934: CALL_OW 51
// p := 0 ;
21938: LD_ADDR_VAR 0 2
21942: PUSH
21943: LD_INT 0
21945: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21946: LD_INT 35
21948: PPUSH
21949: CALL_OW 67
// if GetLives ( un ) < 1000 then
21953: LD_VAR 0 3
21957: PPUSH
21958: CALL_OW 256
21962: PUSH
21963: LD_INT 1000
21965: LESS
21966: IFFALSE 21980
// SetLives ( un , 1000 ) ;
21968: LD_VAR 0 3
21972: PPUSH
21973: LD_INT 1000
21975: PPUSH
21976: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
21980: LD_VAR 0 3
21984: PPUSH
21985: LD_INT 81
21987: PUSH
21988: LD_OWVAR 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 69
22001: PPUSH
22002: LD_VAR 0 3
22006: PPUSH
22007: CALL_OW 74
22011: PPUSH
22012: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22016: LD_VAR 0 2
22020: PUSH
22021: LD_INT 60
22023: GREATER
22024: PUSH
22025: LD_VAR 0 3
22029: PPUSH
22030: CALL_OW 301
22034: OR
22035: IFFALSE 21946
// if un then
22037: LD_VAR 0 3
22041: IFFALSE 22052
// RemoveUnit ( un ) ;
22043: LD_VAR 0 3
22047: PPUSH
22048: CALL_OW 64
// end ; end_of_file
22052: PPOPN 3
22054: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
22055: LD_INT 0
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22061: LD_VAR 0 1
22065: PPUSH
22066: CALL_OW 264
22070: PUSH
22071: LD_EXP 18
22075: EQUAL
22076: IFFALSE 22148
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22078: LD_INT 68
22080: PPUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 255
22090: PPUSH
22091: CALL_OW 321
22095: PUSH
22096: LD_INT 2
22098: EQUAL
22099: IFFALSE 22111
// eff := 70 else
22101: LD_ADDR_VAR 0 6
22105: PUSH
22106: LD_INT 70
22108: ST_TO_ADDR
22109: GO 22119
// eff := 30 ;
22111: LD_ADDR_VAR 0 6
22115: PUSH
22116: LD_INT 30
22118: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22119: LD_VAR 0 1
22123: PPUSH
22124: CALL_OW 250
22128: PPUSH
22129: LD_VAR 0 1
22133: PPUSH
22134: CALL_OW 251
22138: PPUSH
22139: LD_VAR 0 6
22143: PPUSH
22144: CALL_OW 495
// end ; end ;
22148: LD_VAR 0 4
22152: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
22153: LD_INT 0
22155: PPUSH
22156: PPUSH
22157: PPUSH
22158: PPUSH
22159: PPUSH
22160: PPUSH
// if cmd = 124 then
22161: LD_VAR 0 1
22165: PUSH
22166: LD_INT 124
22168: EQUAL
22169: IFFALSE 22375
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
22171: LD_ADDR_VAR 0 5
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 34
22181: PUSH
22182: LD_INT 53
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 34
22191: PUSH
22192: LD_INT 14
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 69
22208: ST_TO_ADDR
// if not tmp then
22209: LD_VAR 0 5
22213: NOT
22214: IFFALSE 22218
// exit ;
22216: GO 22375
// for i in tmp do
22218: LD_ADDR_VAR 0 3
22222: PUSH
22223: LD_VAR 0 5
22227: PUSH
22228: FOR_IN
22229: IFFALSE 22373
// begin taskList := GetTaskList ( i ) ;
22231: LD_ADDR_VAR 0 6
22235: PUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: CALL_OW 437
22245: ST_TO_ADDR
// if not taskList then
22246: LD_VAR 0 6
22250: NOT
22251: IFFALSE 22255
// continue ;
22253: GO 22228
// for j = 1 to taskList do
22255: LD_ADDR_VAR 0 4
22259: PUSH
22260: DOUBLE
22261: LD_INT 1
22263: DEC
22264: ST_TO_ADDR
22265: LD_VAR 0 6
22269: PUSH
22270: FOR_TO
22271: IFFALSE 22369
// if taskList [ j ] [ 1 ] = | then
22273: LD_VAR 0 6
22277: PUSH
22278: LD_VAR 0 4
22282: ARRAY
22283: PUSH
22284: LD_INT 1
22286: ARRAY
22287: PUSH
22288: LD_STRING |
22290: EQUAL
22291: IFFALSE 22367
// begin _taskList := Delete ( taskList , 1 ) ;
22293: LD_ADDR_VAR 0 7
22297: PUSH
22298: LD_VAR 0 6
22302: PPUSH
22303: LD_INT 1
22305: PPUSH
22306: CALL_OW 3
22310: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
22311: LD_VAR 0 3
22315: PPUSH
22316: LD_VAR 0 7
22320: PPUSH
22321: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
22325: LD_VAR 0 3
22329: PPUSH
22330: LD_VAR 0 6
22334: PUSH
22335: LD_VAR 0 4
22339: ARRAY
22340: PUSH
22341: LD_INT 2
22343: ARRAY
22344: PPUSH
22345: LD_VAR 0 6
22349: PUSH
22350: LD_VAR 0 4
22354: ARRAY
22355: PUSH
22356: LD_INT 3
22358: ARRAY
22359: PPUSH
22360: LD_INT 8
22362: PPUSH
22363: CALL 22380 0 4
// end ;
22367: GO 22270
22369: POP
22370: POP
// end ;
22371: GO 22228
22373: POP
22374: POP
// end ; end ;
22375: LD_VAR 0 2
22379: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22380: LD_INT 0
22382: PPUSH
22383: PPUSH
22384: PPUSH
22385: PPUSH
22386: PPUSH
22387: PPUSH
22388: PPUSH
22389: PPUSH
22390: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22391: LD_VAR 0 1
22395: NOT
22396: PUSH
22397: LD_VAR 0 2
22401: PPUSH
22402: LD_VAR 0 3
22406: PPUSH
22407: CALL_OW 488
22411: NOT
22412: OR
22413: PUSH
22414: LD_VAR 0 4
22418: NOT
22419: OR
22420: IFFALSE 22424
// exit ;
22422: GO 22764
// list := [ ] ;
22424: LD_ADDR_VAR 0 13
22428: PUSH
22429: EMPTY
22430: ST_TO_ADDR
// if x - r < 0 then
22431: LD_VAR 0 2
22435: PUSH
22436: LD_VAR 0 4
22440: MINUS
22441: PUSH
22442: LD_INT 0
22444: LESS
22445: IFFALSE 22457
// min_x := 0 else
22447: LD_ADDR_VAR 0 7
22451: PUSH
22452: LD_INT 0
22454: ST_TO_ADDR
22455: GO 22473
// min_x := x - r ;
22457: LD_ADDR_VAR 0 7
22461: PUSH
22462: LD_VAR 0 2
22466: PUSH
22467: LD_VAR 0 4
22471: MINUS
22472: ST_TO_ADDR
// if y - r < 0 then
22473: LD_VAR 0 3
22477: PUSH
22478: LD_VAR 0 4
22482: MINUS
22483: PUSH
22484: LD_INT 0
22486: LESS
22487: IFFALSE 22499
// min_y := 0 else
22489: LD_ADDR_VAR 0 8
22493: PUSH
22494: LD_INT 0
22496: ST_TO_ADDR
22497: GO 22515
// min_y := y - r ;
22499: LD_ADDR_VAR 0 8
22503: PUSH
22504: LD_VAR 0 3
22508: PUSH
22509: LD_VAR 0 4
22513: MINUS
22514: ST_TO_ADDR
// max_x := x + r ;
22515: LD_ADDR_VAR 0 9
22519: PUSH
22520: LD_VAR 0 2
22524: PUSH
22525: LD_VAR 0 4
22529: PLUS
22530: ST_TO_ADDR
// max_y := y + r ;
22531: LD_ADDR_VAR 0 10
22535: PUSH
22536: LD_VAR 0 3
22540: PUSH
22541: LD_VAR 0 4
22545: PLUS
22546: ST_TO_ADDR
// for _x = min_x to max_x do
22547: LD_ADDR_VAR 0 11
22551: PUSH
22552: DOUBLE
22553: LD_VAR 0 7
22557: DEC
22558: ST_TO_ADDR
22559: LD_VAR 0 9
22563: PUSH
22564: FOR_TO
22565: IFFALSE 22682
// for _y = min_y to max_y do
22567: LD_ADDR_VAR 0 12
22571: PUSH
22572: DOUBLE
22573: LD_VAR 0 8
22577: DEC
22578: ST_TO_ADDR
22579: LD_VAR 0 10
22583: PUSH
22584: FOR_TO
22585: IFFALSE 22678
// begin if not ValidHex ( _x , _y ) then
22587: LD_VAR 0 11
22591: PPUSH
22592: LD_VAR 0 12
22596: PPUSH
22597: CALL_OW 488
22601: NOT
22602: IFFALSE 22606
// continue ;
22604: GO 22584
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22606: LD_VAR 0 11
22610: PPUSH
22611: LD_VAR 0 12
22615: PPUSH
22616: CALL_OW 351
22620: PUSH
22621: LD_VAR 0 11
22625: PPUSH
22626: LD_VAR 0 12
22630: PPUSH
22631: CALL_OW 554
22635: AND
22636: IFFALSE 22676
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22638: LD_ADDR_VAR 0 13
22642: PUSH
22643: LD_VAR 0 13
22647: PPUSH
22648: LD_VAR 0 13
22652: PUSH
22653: LD_INT 1
22655: PLUS
22656: PPUSH
22657: LD_VAR 0 11
22661: PUSH
22662: LD_VAR 0 12
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PPUSH
22671: CALL_OW 2
22675: ST_TO_ADDR
// end ;
22676: GO 22584
22678: POP
22679: POP
22680: GO 22564
22682: POP
22683: POP
// if not list then
22684: LD_VAR 0 13
22688: NOT
22689: IFFALSE 22693
// exit ;
22691: GO 22764
// for i in list do
22693: LD_ADDR_VAR 0 6
22697: PUSH
22698: LD_VAR 0 13
22702: PUSH
22703: FOR_IN
22704: IFFALSE 22762
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22706: LD_VAR 0 1
22710: PPUSH
22711: LD_STRING M
22713: PUSH
22714: LD_VAR 0 6
22718: PUSH
22719: LD_INT 1
22721: ARRAY
22722: PUSH
22723: LD_VAR 0 6
22727: PUSH
22728: LD_INT 2
22730: ARRAY
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: PUSH
22753: EMPTY
22754: LIST
22755: PPUSH
22756: CALL_OW 447
22760: GO 22703
22762: POP
22763: POP
// end ;
22764: LD_VAR 0 5
22768: RET
