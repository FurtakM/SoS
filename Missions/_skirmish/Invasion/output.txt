// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 24923 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 25021 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 25029 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_miner := 81 ;
10973: LD_ADDR_EXP 21
10977: PUSH
10978: LD_INT 81
10980: ST_TO_ADDR
// ar_crane := 88 ;
10981: LD_ADDR_EXP 20
10985: PUSH
10986: LD_INT 88
10988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10989: LD_ADDR_EXP 15
10993: PUSH
10994: LD_INT 89
10996: ST_TO_ADDR
// us_hack := 99 ;
10997: LD_ADDR_EXP 16
11001: PUSH
11002: LD_INT 99
11004: ST_TO_ADDR
// us_artillery := 97 ;
11005: LD_ADDR_EXP 17
11009: PUSH
11010: LD_INT 97
11012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11013: LD_ADDR_EXP 18
11017: PUSH
11018: LD_INT 91
11020: ST_TO_ADDR
// ar_mortar := 92 ;
11021: LD_ADDR_EXP 19
11025: PUSH
11026: LD_INT 92
11028: ST_TO_ADDR
// ru_radar := 98 ;
11029: LD_ADDR_EXP 14
11033: PUSH
11034: LD_INT 98
11036: ST_TO_ADDR
// tech_Artillery := 80 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 80
11044: ST_TO_ADDR
// tech_RadMat := 81 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 81
11052: ST_TO_ADDR
// tech_BasicTools := 82 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 82
11060: ST_TO_ADDR
// tech_Cargo := 83 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 83
11068: ST_TO_ADDR
// tech_Track := 84 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 84
11076: ST_TO_ADDR
// tech_Crane := 85 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 85
11084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 86
11092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11093: LD_ADDR_EXP 29
11097: PUSH
11098: LD_INT 87
11100: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11101: LD_ADDR_EXP 30
11105: PUSH
11106: LD_INT 88
11108: ST_TO_ADDR
// class_mastodont := 31 ;
11109: LD_ADDR_EXP 31
11113: PUSH
11114: LD_INT 31
11116: ST_TO_ADDR
// class_horse := 21 ;
11117: LD_ADDR_EXP 32
11121: PUSH
11122: LD_INT 21
11124: ST_TO_ADDR
// end ;
11125: LD_VAR 0 1
11129: RET
// every 1 do
11130: GO 11132
11132: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11133: CALL 10970 0 0
11137: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11138: LD_INT 0
11140: PPUSH
// if p2 = 100 then
11141: LD_VAR 0 2
11145: PUSH
11146: LD_INT 100
11148: EQUAL
11149: IFFALSE 12152
// begin if not StreamModeActive then
11151: LD_EXP 33
11155: NOT
11156: IFFALSE 11166
// StreamModeActive := true ;
11158: LD_ADDR_EXP 33
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// if p3 = 0 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_INT 0
11173: EQUAL
11174: IFFALSE 11180
// InitStreamMode ;
11176: CALL 12312 0 0
// if p3 = 1 then
11180: LD_VAR 0 3
11184: PUSH
11185: LD_INT 1
11187: EQUAL
11188: IFFALSE 11198
// sRocket := true ;
11190: LD_ADDR_EXP 38
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// if p3 = 2 then
11198: LD_VAR 0 3
11202: PUSH
11203: LD_INT 2
11205: EQUAL
11206: IFFALSE 11216
// sSpeed := true ;
11208: LD_ADDR_EXP 37
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// if p3 = 3 then
11216: LD_VAR 0 3
11220: PUSH
11221: LD_INT 3
11223: EQUAL
11224: IFFALSE 11234
// sEngine := true ;
11226: LD_ADDR_EXP 39
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// if p3 = 4 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_INT 4
11241: EQUAL
11242: IFFALSE 11252
// sSpec := true ;
11244: LD_ADDR_EXP 36
11248: PUSH
11249: LD_INT 1
11251: ST_TO_ADDR
// if p3 = 5 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 5
11259: EQUAL
11260: IFFALSE 11270
// sLevel := true ;
11262: LD_ADDR_EXP 40
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// if p3 = 6 then
11270: LD_VAR 0 3
11274: PUSH
11275: LD_INT 6
11277: EQUAL
11278: IFFALSE 11288
// sArmoury := true ;
11280: LD_ADDR_EXP 41
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// if p3 = 7 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 7
11295: EQUAL
11296: IFFALSE 11306
// sRadar := true ;
11298: LD_ADDR_EXP 42
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 8 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 8
11313: EQUAL
11314: IFFALSE 11324
// sBunker := true ;
11316: LD_ADDR_EXP 43
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 9 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 9
11331: EQUAL
11332: IFFALSE 11342
// sHack := true ;
11334: LD_ADDR_EXP 44
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 10 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 10
11349: EQUAL
11350: IFFALSE 11360
// sFire := true ;
11352: LD_ADDR_EXP 45
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 11 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 11
11367: EQUAL
11368: IFFALSE 11378
// sRefresh := true ;
11370: LD_ADDR_EXP 46
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 12 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 12
11385: EQUAL
11386: IFFALSE 11396
// sExp := true ;
11388: LD_ADDR_EXP 47
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 13 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 13
11403: EQUAL
11404: IFFALSE 11414
// sDepot := true ;
11406: LD_ADDR_EXP 48
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 14 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 14
11421: EQUAL
11422: IFFALSE 11432
// sFlag := true ;
11424: LD_ADDR_EXP 49
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 15 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 15
11439: EQUAL
11440: IFFALSE 11450
// sKamikadze := true ;
11442: LD_ADDR_EXP 57
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 16 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 16
11457: EQUAL
11458: IFFALSE 11468
// sTroll := true ;
11460: LD_ADDR_EXP 58
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 17 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 17
11475: EQUAL
11476: IFFALSE 11486
// sSlow := true ;
11478: LD_ADDR_EXP 59
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 18 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 18
11493: EQUAL
11494: IFFALSE 11504
// sLack := true ;
11496: LD_ADDR_EXP 60
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 19 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 19
11511: EQUAL
11512: IFFALSE 11522
// sTank := true ;
11514: LD_ADDR_EXP 62
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 20 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 20
11529: EQUAL
11530: IFFALSE 11540
// sRemote := true ;
11532: LD_ADDR_EXP 63
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 21 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 21
11547: EQUAL
11548: IFFALSE 11558
// sPowell := true ;
11550: LD_ADDR_EXP 64
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 22 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 22
11565: EQUAL
11566: IFFALSE 11576
// sTeleport := true ;
11568: LD_ADDR_EXP 67
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 23 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 23
11583: EQUAL
11584: IFFALSE 11594
// sOilTower := true ;
11586: LD_ADDR_EXP 69
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 24 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 24
11601: EQUAL
11602: IFFALSE 11612
// sShovel := true ;
11604: LD_ADDR_EXP 70
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 25 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 25
11619: EQUAL
11620: IFFALSE 11630
// sSheik := true ;
11622: LD_ADDR_EXP 71
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 26 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 26
11637: EQUAL
11638: IFFALSE 11648
// sEarthquake := true ;
11640: LD_ADDR_EXP 73
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 27 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 27
11655: EQUAL
11656: IFFALSE 11666
// sAI := true ;
11658: LD_ADDR_EXP 74
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 28 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 28
11673: EQUAL
11674: IFFALSE 11684
// sCargo := true ;
11676: LD_ADDR_EXP 77
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 29 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 29
11691: EQUAL
11692: IFFALSE 11702
// sDLaser := true ;
11694: LD_ADDR_EXP 78
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 30 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 30
11709: EQUAL
11710: IFFALSE 11720
// sExchange := true ;
11712: LD_ADDR_EXP 79
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 31 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 31
11727: EQUAL
11728: IFFALSE 11738
// sFac := true ;
11730: LD_ADDR_EXP 80
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 32 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 32
11745: EQUAL
11746: IFFALSE 11756
// sPower := true ;
11748: LD_ADDR_EXP 81
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 33 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 33
11763: EQUAL
11764: IFFALSE 11774
// sRandom := true ;
11766: LD_ADDR_EXP 82
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 34 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 34
11781: EQUAL
11782: IFFALSE 11792
// sShield := true ;
11784: LD_ADDR_EXP 83
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 35 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 35
11799: EQUAL
11800: IFFALSE 11810
// sTime := true ;
11802: LD_ADDR_EXP 84
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 36 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 36
11817: EQUAL
11818: IFFALSE 11828
// sTools := true ;
11820: LD_ADDR_EXP 85
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 101 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 101
11835: EQUAL
11836: IFFALSE 11846
// sSold := true ;
11838: LD_ADDR_EXP 50
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 102 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 102
11853: EQUAL
11854: IFFALSE 11864
// sDiff := true ;
11856: LD_ADDR_EXP 51
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 103 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 103
11871: EQUAL
11872: IFFALSE 11882
// sFog := true ;
11874: LD_ADDR_EXP 54
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 104 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 104
11889: EQUAL
11890: IFFALSE 11900
// sReset := true ;
11892: LD_ADDR_EXP 55
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 105 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 105
11907: EQUAL
11908: IFFALSE 11918
// sSun := true ;
11910: LD_ADDR_EXP 56
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 106 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 106
11925: EQUAL
11926: IFFALSE 11936
// sTiger := true ;
11928: LD_ADDR_EXP 52
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 107 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 107
11943: EQUAL
11944: IFFALSE 11954
// sBomb := true ;
11946: LD_ADDR_EXP 53
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 108 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 108
11961: EQUAL
11962: IFFALSE 11972
// sWound := true ;
11964: LD_ADDR_EXP 61
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 109 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 109
11979: EQUAL
11980: IFFALSE 11990
// sBetray := true ;
11982: LD_ADDR_EXP 65
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 110 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 110
11997: EQUAL
11998: IFFALSE 12008
// sContamin := true ;
12000: LD_ADDR_EXP 66
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 111 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 111
12015: EQUAL
12016: IFFALSE 12026
// sOil := true ;
12018: LD_ADDR_EXP 68
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 112 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 112
12033: EQUAL
12034: IFFALSE 12044
// sStu := true ;
12036: LD_ADDR_EXP 72
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 113 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 113
12051: EQUAL
12052: IFFALSE 12062
// sBazooka := true ;
12054: LD_ADDR_EXP 75
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 114 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 114
12069: EQUAL
12070: IFFALSE 12080
// sMortar := true ;
12072: LD_ADDR_EXP 76
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 115 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 115
12087: EQUAL
12088: IFFALSE 12098
// sRanger := true ;
12090: LD_ADDR_EXP 86
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 116 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 116
12105: EQUAL
12106: IFFALSE 12116
// sComputer := true ;
12108: LD_ADDR_EXP 87
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 117 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 117
12123: EQUAL
12124: IFFALSE 12134
// s30 := true ;
12126: LD_ADDR_EXP 88
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 118 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 118
12141: EQUAL
12142: IFFALSE 12152
// s60 := true ;
12144: LD_ADDR_EXP 89
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// end ; if p2 = 101 then
12152: LD_VAR 0 2
12156: PUSH
12157: LD_INT 101
12159: EQUAL
12160: IFFALSE 12288
// begin case p3 of 1 :
12162: LD_VAR 0 3
12166: PUSH
12167: LD_INT 1
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12182
12175: POP
// hHackUnlimitedResources ; 2 :
12176: CALL 23884 0 0
12180: GO 12288
12182: LD_INT 2
12184: DOUBLE
12185: EQUAL
12186: IFTRUE 12190
12188: GO 12197
12190: POP
// hHackSetLevel10 ; 3 :
12191: CALL 24017 0 0
12195: GO 12288
12197: LD_INT 3
12199: DOUBLE
12200: EQUAL
12201: IFTRUE 12205
12203: GO 12212
12205: POP
// hHackSetLevel10YourUnits ; 4 :
12206: CALL 24102 0 0
12210: GO 12288
12212: LD_INT 4
12214: DOUBLE
12215: EQUAL
12216: IFTRUE 12220
12218: GO 12227
12220: POP
// hHackInvincible ; 5 :
12221: CALL 24550 0 0
12225: GO 12288
12227: LD_INT 5
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12242
12235: POP
// hHackInvisible ; 6 :
12236: CALL 24661 0 0
12240: GO 12288
12242: LD_INT 6
12244: DOUBLE
12245: EQUAL
12246: IFTRUE 12250
12248: GO 12257
12250: POP
// hHackChangeYourSide ; 7 :
12251: CALL 24718 0 0
12255: GO 12288
12257: LD_INT 7
12259: DOUBLE
12260: EQUAL
12261: IFTRUE 12265
12263: GO 12272
12265: POP
// hHackChangeUnitSide ; 8 :
12266: CALL 24760 0 0
12270: GO 12288
12272: LD_INT 8
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12287
12280: POP
// hHackFog ; end ;
12281: CALL 24861 0 0
12285: GO 12288
12287: POP
// end ; end ;
12288: LD_VAR 0 7
12292: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12293: GO 12295
12295: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12296: LD_STRING initStreamRollete();
12298: PPUSH
12299: CALL_OW 559
// InitStreamMode ;
12303: CALL 12312 0 0
// DefineStreamItems ( ) ;
12307: CALL 12776 0 0
// end ;
12311: END
// function InitStreamMode ; begin
12312: LD_INT 0
12314: PPUSH
// streamModeActive := false ;
12315: LD_ADDR_EXP 33
12319: PUSH
12320: LD_INT 0
12322: ST_TO_ADDR
// normalCounter := 36 ;
12323: LD_ADDR_EXP 34
12327: PUSH
12328: LD_INT 36
12330: ST_TO_ADDR
// hardcoreCounter := 16 ;
12331: LD_ADDR_EXP 35
12335: PUSH
12336: LD_INT 16
12338: ST_TO_ADDR
// sRocket := false ;
12339: LD_ADDR_EXP 38
12343: PUSH
12344: LD_INT 0
12346: ST_TO_ADDR
// sSpeed := false ;
12347: LD_ADDR_EXP 37
12351: PUSH
12352: LD_INT 0
12354: ST_TO_ADDR
// sEngine := false ;
12355: LD_ADDR_EXP 39
12359: PUSH
12360: LD_INT 0
12362: ST_TO_ADDR
// sSpec := false ;
12363: LD_ADDR_EXP 36
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// sLevel := false ;
12371: LD_ADDR_EXP 40
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// sArmoury := false ;
12379: LD_ADDR_EXP 41
12383: PUSH
12384: LD_INT 0
12386: ST_TO_ADDR
// sRadar := false ;
12387: LD_ADDR_EXP 42
12391: PUSH
12392: LD_INT 0
12394: ST_TO_ADDR
// sBunker := false ;
12395: LD_ADDR_EXP 43
12399: PUSH
12400: LD_INT 0
12402: ST_TO_ADDR
// sHack := false ;
12403: LD_ADDR_EXP 44
12407: PUSH
12408: LD_INT 0
12410: ST_TO_ADDR
// sFire := false ;
12411: LD_ADDR_EXP 45
12415: PUSH
12416: LD_INT 0
12418: ST_TO_ADDR
// sRefresh := false ;
12419: LD_ADDR_EXP 46
12423: PUSH
12424: LD_INT 0
12426: ST_TO_ADDR
// sExp := false ;
12427: LD_ADDR_EXP 47
12431: PUSH
12432: LD_INT 0
12434: ST_TO_ADDR
// sDepot := false ;
12435: LD_ADDR_EXP 48
12439: PUSH
12440: LD_INT 0
12442: ST_TO_ADDR
// sFlag := false ;
12443: LD_ADDR_EXP 49
12447: PUSH
12448: LD_INT 0
12450: ST_TO_ADDR
// sKamikadze := false ;
12451: LD_ADDR_EXP 57
12455: PUSH
12456: LD_INT 0
12458: ST_TO_ADDR
// sTroll := false ;
12459: LD_ADDR_EXP 58
12463: PUSH
12464: LD_INT 0
12466: ST_TO_ADDR
// sSlow := false ;
12467: LD_ADDR_EXP 59
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// sLack := false ;
12475: LD_ADDR_EXP 60
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// sTank := false ;
12483: LD_ADDR_EXP 62
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// sRemote := false ;
12491: LD_ADDR_EXP 63
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// sPowell := false ;
12499: LD_ADDR_EXP 64
12503: PUSH
12504: LD_INT 0
12506: ST_TO_ADDR
// sTeleport := false ;
12507: LD_ADDR_EXP 67
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// sOilTower := false ;
12515: LD_ADDR_EXP 69
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// sShovel := false ;
12523: LD_ADDR_EXP 70
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// sSheik := false ;
12531: LD_ADDR_EXP 71
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sEarthquake := false ;
12539: LD_ADDR_EXP 73
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sAI := false ;
12547: LD_ADDR_EXP 74
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// sCargo := false ;
12555: LD_ADDR_EXP 77
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// sDLaser := false ;
12563: LD_ADDR_EXP 78
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// sExchange := false ;
12571: LD_ADDR_EXP 79
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// sFac := false ;
12579: LD_ADDR_EXP 80
12583: PUSH
12584: LD_INT 0
12586: ST_TO_ADDR
// sPower := false ;
12587: LD_ADDR_EXP 81
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// sRandom := false ;
12595: LD_ADDR_EXP 82
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// sShield := false ;
12603: LD_ADDR_EXP 83
12607: PUSH
12608: LD_INT 0
12610: ST_TO_ADDR
// sTime := false ;
12611: LD_ADDR_EXP 84
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// sTools := false ;
12619: LD_ADDR_EXP 85
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// sSold := false ;
12627: LD_ADDR_EXP 50
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// sDiff := false ;
12635: LD_ADDR_EXP 51
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// sFog := false ;
12643: LD_ADDR_EXP 54
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// sReset := false ;
12651: LD_ADDR_EXP 55
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// sSun := false ;
12659: LD_ADDR_EXP 56
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// sTiger := false ;
12667: LD_ADDR_EXP 52
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// sBomb := false ;
12675: LD_ADDR_EXP 53
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sWound := false ;
12683: LD_ADDR_EXP 61
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// sBetray := false ;
12691: LD_ADDR_EXP 65
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// sContamin := false ;
12699: LD_ADDR_EXP 66
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// sOil := false ;
12707: LD_ADDR_EXP 68
12711: PUSH
12712: LD_INT 0
12714: ST_TO_ADDR
// sStu := false ;
12715: LD_ADDR_EXP 72
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// sBazooka := false ;
12723: LD_ADDR_EXP 75
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// sMortar := false ;
12731: LD_ADDR_EXP 76
12735: PUSH
12736: LD_INT 0
12738: ST_TO_ADDR
// sRanger := false ;
12739: LD_ADDR_EXP 86
12743: PUSH
12744: LD_INT 0
12746: ST_TO_ADDR
// sComputer := false ;
12747: LD_ADDR_EXP 87
12751: PUSH
12752: LD_INT 0
12754: ST_TO_ADDR
// s30 := false ;
12755: LD_ADDR_EXP 88
12759: PUSH
12760: LD_INT 0
12762: ST_TO_ADDR
// s60 := false ;
12763: LD_ADDR_EXP 89
12767: PUSH
12768: LD_INT 0
12770: ST_TO_ADDR
// end ;
12771: LD_VAR 0 1
12775: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
// result := [ ] ;
12783: LD_ADDR_VAR 0 1
12787: PUSH
12788: EMPTY
12789: ST_TO_ADDR
// if campaign_id = 1 then
12790: LD_OWVAR 69
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: IFFALSE 15964
// begin case mission_number of 1 :
12800: LD_OWVAR 70
12804: PUSH
12805: LD_INT 1
12807: DOUBLE
12808: EQUAL
12809: IFTRUE 12813
12811: GO 12889
12813: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12814: LD_ADDR_VAR 0 1
12818: PUSH
12819: LD_INT 2
12821: PUSH
12822: LD_INT 4
12824: PUSH
12825: LD_INT 11
12827: PUSH
12828: LD_INT 12
12830: PUSH
12831: LD_INT 15
12833: PUSH
12834: LD_INT 16
12836: PUSH
12837: LD_INT 22
12839: PUSH
12840: LD_INT 23
12842: PUSH
12843: LD_INT 26
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 101
12859: PUSH
12860: LD_INT 102
12862: PUSH
12863: LD_INT 106
12865: PUSH
12866: LD_INT 116
12868: PUSH
12869: LD_INT 117
12871: PUSH
12872: LD_INT 118
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 15962
12889: LD_INT 2
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 12981
12897: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 4
12908: PUSH
12909: LD_INT 11
12911: PUSH
12912: LD_INT 12
12914: PUSH
12915: LD_INT 15
12917: PUSH
12918: LD_INT 16
12920: PUSH
12921: LD_INT 22
12923: PUSH
12924: LD_INT 23
12926: PUSH
12927: LD_INT 26
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 101
12943: PUSH
12944: LD_INT 102
12946: PUSH
12947: LD_INT 105
12949: PUSH
12950: LD_INT 106
12952: PUSH
12953: LD_INT 108
12955: PUSH
12956: LD_INT 116
12958: PUSH
12959: LD_INT 117
12961: PUSH
12962: LD_INT 118
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: ST_TO_ADDR
12979: GO 15962
12981: LD_INT 3
12983: DOUBLE
12984: EQUAL
12985: IFTRUE 12989
12987: GO 13077
12989: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12990: LD_ADDR_VAR 0 1
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: LD_INT 4
13000: PUSH
13001: LD_INT 5
13003: PUSH
13004: LD_INT 11
13006: PUSH
13007: LD_INT 12
13009: PUSH
13010: LD_INT 15
13012: PUSH
13013: LD_INT 16
13015: PUSH
13016: LD_INT 22
13018: PUSH
13019: LD_INT 26
13021: PUSH
13022: LD_INT 36
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 101
13039: PUSH
13040: LD_INT 102
13042: PUSH
13043: LD_INT 105
13045: PUSH
13046: LD_INT 106
13048: PUSH
13049: LD_INT 108
13051: PUSH
13052: LD_INT 116
13054: PUSH
13055: LD_INT 117
13057: PUSH
13058: LD_INT 118
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: ST_TO_ADDR
13075: GO 15962
13077: LD_INT 4
13079: DOUBLE
13080: EQUAL
13081: IFTRUE 13085
13083: GO 13181
13085: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13086: LD_ADDR_VAR 0 1
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 4
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: LD_INT 8
13102: PUSH
13103: LD_INT 11
13105: PUSH
13106: LD_INT 12
13108: PUSH
13109: LD_INT 15
13111: PUSH
13112: LD_INT 16
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_INT 23
13120: PUSH
13121: LD_INT 26
13123: PUSH
13124: LD_INT 36
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 101
13143: PUSH
13144: LD_INT 102
13146: PUSH
13147: LD_INT 105
13149: PUSH
13150: LD_INT 106
13152: PUSH
13153: LD_INT 108
13155: PUSH
13156: LD_INT 116
13158: PUSH
13159: LD_INT 117
13161: PUSH
13162: LD_INT 118
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: ST_TO_ADDR
13179: GO 15962
13181: LD_INT 5
13183: DOUBLE
13184: EQUAL
13185: IFTRUE 13189
13187: GO 13301
13189: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13190: LD_ADDR_VAR 0 1
13194: PUSH
13195: LD_INT 2
13197: PUSH
13198: LD_INT 4
13200: PUSH
13201: LD_INT 5
13203: PUSH
13204: LD_INT 6
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: LD_INT 11
13212: PUSH
13213: LD_INT 12
13215: PUSH
13216: LD_INT 15
13218: PUSH
13219: LD_INT 16
13221: PUSH
13222: LD_INT 22
13224: PUSH
13225: LD_INT 23
13227: PUSH
13228: LD_INT 25
13230: PUSH
13231: LD_INT 26
13233: PUSH
13234: LD_INT 36
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 101
13255: PUSH
13256: LD_INT 102
13258: PUSH
13259: LD_INT 105
13261: PUSH
13262: LD_INT 106
13264: PUSH
13265: LD_INT 108
13267: PUSH
13268: LD_INT 109
13270: PUSH
13271: LD_INT 112
13273: PUSH
13274: LD_INT 116
13276: PUSH
13277: LD_INT 117
13279: PUSH
13280: LD_INT 118
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: ST_TO_ADDR
13299: GO 15962
13301: LD_INT 6
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13309
13307: GO 13441
13309: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13310: LD_ADDR_VAR 0 1
13314: PUSH
13315: LD_INT 2
13317: PUSH
13318: LD_INT 4
13320: PUSH
13321: LD_INT 5
13323: PUSH
13324: LD_INT 6
13326: PUSH
13327: LD_INT 8
13329: PUSH
13330: LD_INT 11
13332: PUSH
13333: LD_INT 12
13335: PUSH
13336: LD_INT 15
13338: PUSH
13339: LD_INT 16
13341: PUSH
13342: LD_INT 20
13344: PUSH
13345: LD_INT 21
13347: PUSH
13348: LD_INT 22
13350: PUSH
13351: LD_INT 23
13353: PUSH
13354: LD_INT 25
13356: PUSH
13357: LD_INT 26
13359: PUSH
13360: LD_INT 30
13362: PUSH
13363: LD_INT 31
13365: PUSH
13366: LD_INT 32
13368: PUSH
13369: LD_INT 36
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: PUSH
13393: LD_INT 101
13395: PUSH
13396: LD_INT 102
13398: PUSH
13399: LD_INT 105
13401: PUSH
13402: LD_INT 106
13404: PUSH
13405: LD_INT 108
13407: PUSH
13408: LD_INT 109
13410: PUSH
13411: LD_INT 112
13413: PUSH
13414: LD_INT 116
13416: PUSH
13417: LD_INT 117
13419: PUSH
13420: LD_INT 118
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: ST_TO_ADDR
13439: GO 15962
13441: LD_INT 7
13443: DOUBLE
13444: EQUAL
13445: IFTRUE 13449
13447: GO 13561
13449: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13450: LD_ADDR_VAR 0 1
13454: PUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: LD_INT 5
13463: PUSH
13464: LD_INT 7
13466: PUSH
13467: LD_INT 11
13469: PUSH
13470: LD_INT 12
13472: PUSH
13473: LD_INT 15
13475: PUSH
13476: LD_INT 16
13478: PUSH
13479: LD_INT 20
13481: PUSH
13482: LD_INT 21
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_INT 23
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 101
13515: PUSH
13516: LD_INT 102
13518: PUSH
13519: LD_INT 103
13521: PUSH
13522: LD_INT 105
13524: PUSH
13525: LD_INT 106
13527: PUSH
13528: LD_INT 108
13530: PUSH
13531: LD_INT 112
13533: PUSH
13534: LD_INT 116
13536: PUSH
13537: LD_INT 117
13539: PUSH
13540: LD_INT 118
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: ST_TO_ADDR
13559: GO 15962
13561: LD_INT 8
13563: DOUBLE
13564: EQUAL
13565: IFTRUE 13569
13567: GO 13709
13569: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13570: LD_ADDR_VAR 0 1
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 4
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: LD_INT 6
13586: PUSH
13587: LD_INT 7
13589: PUSH
13590: LD_INT 8
13592: PUSH
13593: LD_INT 11
13595: PUSH
13596: LD_INT 12
13598: PUSH
13599: LD_INT 15
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: LD_INT 20
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 23
13616: PUSH
13617: LD_INT 25
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 31
13628: PUSH
13629: LD_INT 32
13631: PUSH
13632: LD_INT 36
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 101
13659: PUSH
13660: LD_INT 102
13662: PUSH
13663: LD_INT 103
13665: PUSH
13666: LD_INT 105
13668: PUSH
13669: LD_INT 106
13671: PUSH
13672: LD_INT 108
13674: PUSH
13675: LD_INT 109
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 116
13683: PUSH
13684: LD_INT 117
13686: PUSH
13687: LD_INT 118
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: ST_TO_ADDR
13707: GO 15962
13709: LD_INT 9
13711: DOUBLE
13712: EQUAL
13713: IFTRUE 13717
13715: GO 13865
13717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13718: LD_ADDR_VAR 0 1
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: LD_INT 4
13728: PUSH
13729: LD_INT 5
13731: PUSH
13732: LD_INT 6
13734: PUSH
13735: LD_INT 7
13737: PUSH
13738: LD_INT 8
13740: PUSH
13741: LD_INT 11
13743: PUSH
13744: LD_INT 12
13746: PUSH
13747: LD_INT 15
13749: PUSH
13750: LD_INT 16
13752: PUSH
13753: LD_INT 20
13755: PUSH
13756: LD_INT 21
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_INT 23
13764: PUSH
13765: LD_INT 25
13767: PUSH
13768: LD_INT 26
13770: PUSH
13771: LD_INT 28
13773: PUSH
13774: LD_INT 30
13776: PUSH
13777: LD_INT 31
13779: PUSH
13780: LD_INT 32
13782: PUSH
13783: LD_INT 36
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 101
13811: PUSH
13812: LD_INT 102
13814: PUSH
13815: LD_INT 103
13817: PUSH
13818: LD_INT 105
13820: PUSH
13821: LD_INT 106
13823: PUSH
13824: LD_INT 108
13826: PUSH
13827: LD_INT 109
13829: PUSH
13830: LD_INT 112
13832: PUSH
13833: LD_INT 114
13835: PUSH
13836: LD_INT 116
13838: PUSH
13839: LD_INT 117
13841: PUSH
13842: LD_INT 118
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 15962
13865: LD_INT 10
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14069
13873: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_INT 2
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: LD_INT 5
13887: PUSH
13888: LD_INT 6
13890: PUSH
13891: LD_INT 7
13893: PUSH
13894: LD_INT 8
13896: PUSH
13897: LD_INT 9
13899: PUSH
13900: LD_INT 10
13902: PUSH
13903: LD_INT 11
13905: PUSH
13906: LD_INT 12
13908: PUSH
13909: LD_INT 13
13911: PUSH
13912: LD_INT 14
13914: PUSH
13915: LD_INT 15
13917: PUSH
13918: LD_INT 16
13920: PUSH
13921: LD_INT 17
13923: PUSH
13924: LD_INT 18
13926: PUSH
13927: LD_INT 19
13929: PUSH
13930: LD_INT 20
13932: PUSH
13933: LD_INT 21
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 23
13941: PUSH
13942: LD_INT 24
13944: PUSH
13945: LD_INT 25
13947: PUSH
13948: LD_INT 26
13950: PUSH
13951: LD_INT 28
13953: PUSH
13954: LD_INT 30
13956: PUSH
13957: LD_INT 31
13959: PUSH
13960: LD_INT 32
13962: PUSH
13963: LD_INT 36
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 101
13999: PUSH
14000: LD_INT 102
14002: PUSH
14003: LD_INT 103
14005: PUSH
14006: LD_INT 104
14008: PUSH
14009: LD_INT 105
14011: PUSH
14012: LD_INT 106
14014: PUSH
14015: LD_INT 107
14017: PUSH
14018: LD_INT 108
14020: PUSH
14021: LD_INT 109
14023: PUSH
14024: LD_INT 110
14026: PUSH
14027: LD_INT 111
14029: PUSH
14030: LD_INT 112
14032: PUSH
14033: LD_INT 114
14035: PUSH
14036: LD_INT 116
14038: PUSH
14039: LD_INT 117
14041: PUSH
14042: LD_INT 118
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: ST_TO_ADDR
14067: GO 15962
14069: LD_INT 11
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14281
14077: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14078: LD_ADDR_VAR 0 1
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: LD_INT 4
14091: PUSH
14092: LD_INT 5
14094: PUSH
14095: LD_INT 6
14097: PUSH
14098: LD_INT 7
14100: PUSH
14101: LD_INT 8
14103: PUSH
14104: LD_INT 9
14106: PUSH
14107: LD_INT 10
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 12
14115: PUSH
14116: LD_INT 13
14118: PUSH
14119: LD_INT 14
14121: PUSH
14122: LD_INT 15
14124: PUSH
14125: LD_INT 16
14127: PUSH
14128: LD_INT 17
14130: PUSH
14131: LD_INT 18
14133: PUSH
14134: LD_INT 19
14136: PUSH
14137: LD_INT 20
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_INT 23
14148: PUSH
14149: LD_INT 24
14151: PUSH
14152: LD_INT 25
14154: PUSH
14155: LD_INT 26
14157: PUSH
14158: LD_INT 28
14160: PUSH
14161: LD_INT 30
14163: PUSH
14164: LD_INT 31
14166: PUSH
14167: LD_INT 32
14169: PUSH
14170: LD_INT 34
14172: PUSH
14173: LD_INT 36
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 101
14211: PUSH
14212: LD_INT 102
14214: PUSH
14215: LD_INT 103
14217: PUSH
14218: LD_INT 104
14220: PUSH
14221: LD_INT 105
14223: PUSH
14224: LD_INT 106
14226: PUSH
14227: LD_INT 107
14229: PUSH
14230: LD_INT 108
14232: PUSH
14233: LD_INT 109
14235: PUSH
14236: LD_INT 110
14238: PUSH
14239: LD_INT 111
14241: PUSH
14242: LD_INT 112
14244: PUSH
14245: LD_INT 114
14247: PUSH
14248: LD_INT 116
14250: PUSH
14251: LD_INT 117
14253: PUSH
14254: LD_INT 118
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: ST_TO_ADDR
14279: GO 15962
14281: LD_INT 12
14283: DOUBLE
14284: EQUAL
14285: IFTRUE 14289
14287: GO 14509
14289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14290: LD_ADDR_VAR 0 1
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: LD_INT 2
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: LD_INT 4
14306: PUSH
14307: LD_INT 5
14309: PUSH
14310: LD_INT 6
14312: PUSH
14313: LD_INT 7
14315: PUSH
14316: LD_INT 8
14318: PUSH
14319: LD_INT 9
14321: PUSH
14322: LD_INT 10
14324: PUSH
14325: LD_INT 11
14327: PUSH
14328: LD_INT 12
14330: PUSH
14331: LD_INT 13
14333: PUSH
14334: LD_INT 14
14336: PUSH
14337: LD_INT 15
14339: PUSH
14340: LD_INT 16
14342: PUSH
14343: LD_INT 17
14345: PUSH
14346: LD_INT 18
14348: PUSH
14349: LD_INT 19
14351: PUSH
14352: LD_INT 20
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 22
14360: PUSH
14361: LD_INT 23
14363: PUSH
14364: LD_INT 24
14366: PUSH
14367: LD_INT 25
14369: PUSH
14370: LD_INT 26
14372: PUSH
14373: LD_INT 27
14375: PUSH
14376: LD_INT 28
14378: PUSH
14379: LD_INT 30
14381: PUSH
14382: LD_INT 31
14384: PUSH
14385: LD_INT 32
14387: PUSH
14388: LD_INT 33
14390: PUSH
14391: LD_INT 34
14393: PUSH
14394: LD_INT 36
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 101
14435: PUSH
14436: LD_INT 102
14438: PUSH
14439: LD_INT 103
14441: PUSH
14442: LD_INT 104
14444: PUSH
14445: LD_INT 105
14447: PUSH
14448: LD_INT 106
14450: PUSH
14451: LD_INT 107
14453: PUSH
14454: LD_INT 108
14456: PUSH
14457: LD_INT 109
14459: PUSH
14460: LD_INT 110
14462: PUSH
14463: LD_INT 111
14465: PUSH
14466: LD_INT 112
14468: PUSH
14469: LD_INT 113
14471: PUSH
14472: LD_INT 114
14474: PUSH
14475: LD_INT 116
14477: PUSH
14478: LD_INT 117
14480: PUSH
14481: LD_INT 118
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: ST_TO_ADDR
14507: GO 15962
14509: LD_INT 13
14511: DOUBLE
14512: EQUAL
14513: IFTRUE 14517
14515: GO 14725
14517: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14518: LD_ADDR_VAR 0 1
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: LD_INT 3
14531: PUSH
14532: LD_INT 4
14534: PUSH
14535: LD_INT 5
14537: PUSH
14538: LD_INT 8
14540: PUSH
14541: LD_INT 9
14543: PUSH
14544: LD_INT 10
14546: PUSH
14547: LD_INT 11
14549: PUSH
14550: LD_INT 12
14552: PUSH
14553: LD_INT 14
14555: PUSH
14556: LD_INT 15
14558: PUSH
14559: LD_INT 16
14561: PUSH
14562: LD_INT 17
14564: PUSH
14565: LD_INT 18
14567: PUSH
14568: LD_INT 19
14570: PUSH
14571: LD_INT 20
14573: PUSH
14574: LD_INT 21
14576: PUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 23
14582: PUSH
14583: LD_INT 24
14585: PUSH
14586: LD_INT 25
14588: PUSH
14589: LD_INT 26
14591: PUSH
14592: LD_INT 27
14594: PUSH
14595: LD_INT 28
14597: PUSH
14598: LD_INT 30
14600: PUSH
14601: LD_INT 31
14603: PUSH
14604: LD_INT 32
14606: PUSH
14607: LD_INT 33
14609: PUSH
14610: LD_INT 34
14612: PUSH
14613: LD_INT 36
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 101
14651: PUSH
14652: LD_INT 102
14654: PUSH
14655: LD_INT 103
14657: PUSH
14658: LD_INT 104
14660: PUSH
14661: LD_INT 105
14663: PUSH
14664: LD_INT 106
14666: PUSH
14667: LD_INT 107
14669: PUSH
14670: LD_INT 108
14672: PUSH
14673: LD_INT 109
14675: PUSH
14676: LD_INT 110
14678: PUSH
14679: LD_INT 111
14681: PUSH
14682: LD_INT 112
14684: PUSH
14685: LD_INT 113
14687: PUSH
14688: LD_INT 114
14690: PUSH
14691: LD_INT 116
14693: PUSH
14694: LD_INT 117
14696: PUSH
14697: LD_INT 118
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: ST_TO_ADDR
14723: GO 15962
14725: LD_INT 14
14727: DOUBLE
14728: EQUAL
14729: IFTRUE 14733
14731: GO 14957
14733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14734: LD_ADDR_VAR 0 1
14738: PUSH
14739: LD_INT 1
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 3
14747: PUSH
14748: LD_INT 4
14750: PUSH
14751: LD_INT 5
14753: PUSH
14754: LD_INT 6
14756: PUSH
14757: LD_INT 7
14759: PUSH
14760: LD_INT 8
14762: PUSH
14763: LD_INT 9
14765: PUSH
14766: LD_INT 10
14768: PUSH
14769: LD_INT 11
14771: PUSH
14772: LD_INT 12
14774: PUSH
14775: LD_INT 13
14777: PUSH
14778: LD_INT 14
14780: PUSH
14781: LD_INT 15
14783: PUSH
14784: LD_INT 16
14786: PUSH
14787: LD_INT 17
14789: PUSH
14790: LD_INT 18
14792: PUSH
14793: LD_INT 19
14795: PUSH
14796: LD_INT 20
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 24
14810: PUSH
14811: LD_INT 25
14813: PUSH
14814: LD_INT 26
14816: PUSH
14817: LD_INT 27
14819: PUSH
14820: LD_INT 28
14822: PUSH
14823: LD_INT 29
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: LD_INT 31
14831: PUSH
14832: LD_INT 32
14834: PUSH
14835: LD_INT 33
14837: PUSH
14838: LD_INT 34
14840: PUSH
14841: LD_INT 36
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 101
14883: PUSH
14884: LD_INT 102
14886: PUSH
14887: LD_INT 103
14889: PUSH
14890: LD_INT 104
14892: PUSH
14893: LD_INT 105
14895: PUSH
14896: LD_INT 106
14898: PUSH
14899: LD_INT 107
14901: PUSH
14902: LD_INT 108
14904: PUSH
14905: LD_INT 109
14907: PUSH
14908: LD_INT 110
14910: PUSH
14911: LD_INT 111
14913: PUSH
14914: LD_INT 112
14916: PUSH
14917: LD_INT 113
14919: PUSH
14920: LD_INT 114
14922: PUSH
14923: LD_INT 116
14925: PUSH
14926: LD_INT 117
14928: PUSH
14929: LD_INT 118
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: ST_TO_ADDR
14955: GO 15962
14957: LD_INT 15
14959: DOUBLE
14960: EQUAL
14961: IFTRUE 14965
14963: GO 15189
14965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14966: LD_ADDR_VAR 0 1
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: LD_INT 2
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: LD_INT 4
14982: PUSH
14983: LD_INT 5
14985: PUSH
14986: LD_INT 6
14988: PUSH
14989: LD_INT 7
14991: PUSH
14992: LD_INT 8
14994: PUSH
14995: LD_INT 9
14997: PUSH
14998: LD_INT 10
15000: PUSH
15001: LD_INT 11
15003: PUSH
15004: LD_INT 12
15006: PUSH
15007: LD_INT 13
15009: PUSH
15010: LD_INT 14
15012: PUSH
15013: LD_INT 15
15015: PUSH
15016: LD_INT 16
15018: PUSH
15019: LD_INT 17
15021: PUSH
15022: LD_INT 18
15024: PUSH
15025: LD_INT 19
15027: PUSH
15028: LD_INT 20
15030: PUSH
15031: LD_INT 21
15033: PUSH
15034: LD_INT 22
15036: PUSH
15037: LD_INT 23
15039: PUSH
15040: LD_INT 24
15042: PUSH
15043: LD_INT 25
15045: PUSH
15046: LD_INT 26
15048: PUSH
15049: LD_INT 27
15051: PUSH
15052: LD_INT 28
15054: PUSH
15055: LD_INT 29
15057: PUSH
15058: LD_INT 30
15060: PUSH
15061: LD_INT 31
15063: PUSH
15064: LD_INT 32
15066: PUSH
15067: LD_INT 33
15069: PUSH
15070: LD_INT 34
15072: PUSH
15073: LD_INT 36
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 101
15115: PUSH
15116: LD_INT 102
15118: PUSH
15119: LD_INT 103
15121: PUSH
15122: LD_INT 104
15124: PUSH
15125: LD_INT 105
15127: PUSH
15128: LD_INT 106
15130: PUSH
15131: LD_INT 107
15133: PUSH
15134: LD_INT 108
15136: PUSH
15137: LD_INT 109
15139: PUSH
15140: LD_INT 110
15142: PUSH
15143: LD_INT 111
15145: PUSH
15146: LD_INT 112
15148: PUSH
15149: LD_INT 113
15151: PUSH
15152: LD_INT 114
15154: PUSH
15155: LD_INT 116
15157: PUSH
15158: LD_INT 117
15160: PUSH
15161: LD_INT 118
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: ST_TO_ADDR
15187: GO 15962
15189: LD_INT 16
15191: DOUBLE
15192: EQUAL
15193: IFTRUE 15197
15195: GO 15333
15197: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15198: LD_ADDR_VAR 0 1
15202: PUSH
15203: LD_INT 2
15205: PUSH
15206: LD_INT 4
15208: PUSH
15209: LD_INT 5
15211: PUSH
15212: LD_INT 7
15214: PUSH
15215: LD_INT 11
15217: PUSH
15218: LD_INT 12
15220: PUSH
15221: LD_INT 15
15223: PUSH
15224: LD_INT 16
15226: PUSH
15227: LD_INT 20
15229: PUSH
15230: LD_INT 21
15232: PUSH
15233: LD_INT 22
15235: PUSH
15236: LD_INT 23
15238: PUSH
15239: LD_INT 25
15241: PUSH
15242: LD_INT 26
15244: PUSH
15245: LD_INT 30
15247: PUSH
15248: LD_INT 31
15250: PUSH
15251: LD_INT 32
15253: PUSH
15254: LD_INT 33
15256: PUSH
15257: LD_INT 34
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 101
15283: PUSH
15284: LD_INT 102
15286: PUSH
15287: LD_INT 103
15289: PUSH
15290: LD_INT 106
15292: PUSH
15293: LD_INT 108
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 113
15301: PUSH
15302: LD_INT 114
15304: PUSH
15305: LD_INT 116
15307: PUSH
15308: LD_INT 117
15310: PUSH
15311: LD_INT 118
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: ST_TO_ADDR
15331: GO 15962
15333: LD_INT 17
15335: DOUBLE
15336: EQUAL
15337: IFTRUE 15341
15339: GO 15565
15341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15342: LD_ADDR_VAR 0 1
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: LD_INT 3
15355: PUSH
15356: LD_INT 4
15358: PUSH
15359: LD_INT 5
15361: PUSH
15362: LD_INT 6
15364: PUSH
15365: LD_INT 7
15367: PUSH
15368: LD_INT 8
15370: PUSH
15371: LD_INT 9
15373: PUSH
15374: LD_INT 10
15376: PUSH
15377: LD_INT 11
15379: PUSH
15380: LD_INT 12
15382: PUSH
15383: LD_INT 13
15385: PUSH
15386: LD_INT 14
15388: PUSH
15389: LD_INT 15
15391: PUSH
15392: LD_INT 16
15394: PUSH
15395: LD_INT 17
15397: PUSH
15398: LD_INT 18
15400: PUSH
15401: LD_INT 19
15403: PUSH
15404: LD_INT 20
15406: PUSH
15407: LD_INT 21
15409: PUSH
15410: LD_INT 22
15412: PUSH
15413: LD_INT 23
15415: PUSH
15416: LD_INT 24
15418: PUSH
15419: LD_INT 25
15421: PUSH
15422: LD_INT 26
15424: PUSH
15425: LD_INT 27
15427: PUSH
15428: LD_INT 28
15430: PUSH
15431: LD_INT 29
15433: PUSH
15434: LD_INT 30
15436: PUSH
15437: LD_INT 31
15439: PUSH
15440: LD_INT 32
15442: PUSH
15443: LD_INT 33
15445: PUSH
15446: LD_INT 34
15448: PUSH
15449: LD_INT 36
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 101
15491: PUSH
15492: LD_INT 102
15494: PUSH
15495: LD_INT 103
15497: PUSH
15498: LD_INT 104
15500: PUSH
15501: LD_INT 105
15503: PUSH
15504: LD_INT 106
15506: PUSH
15507: LD_INT 107
15509: PUSH
15510: LD_INT 108
15512: PUSH
15513: LD_INT 109
15515: PUSH
15516: LD_INT 110
15518: PUSH
15519: LD_INT 111
15521: PUSH
15522: LD_INT 112
15524: PUSH
15525: LD_INT 113
15527: PUSH
15528: LD_INT 114
15530: PUSH
15531: LD_INT 116
15533: PUSH
15534: LD_INT 117
15536: PUSH
15537: LD_INT 118
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ST_TO_ADDR
15563: GO 15962
15565: LD_INT 18
15567: DOUBLE
15568: EQUAL
15569: IFTRUE 15573
15571: GO 15721
15573: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15574: LD_ADDR_VAR 0 1
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: LD_INT 4
15584: PUSH
15585: LD_INT 5
15587: PUSH
15588: LD_INT 7
15590: PUSH
15591: LD_INT 11
15593: PUSH
15594: LD_INT 12
15596: PUSH
15597: LD_INT 15
15599: PUSH
15600: LD_INT 16
15602: PUSH
15603: LD_INT 20
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_INT 23
15614: PUSH
15615: LD_INT 25
15617: PUSH
15618: LD_INT 26
15620: PUSH
15621: LD_INT 30
15623: PUSH
15624: LD_INT 31
15626: PUSH
15627: LD_INT 32
15629: PUSH
15630: LD_INT 33
15632: PUSH
15633: LD_INT 34
15635: PUSH
15636: LD_INT 35
15638: PUSH
15639: LD_INT 36
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 101
15667: PUSH
15668: LD_INT 102
15670: PUSH
15671: LD_INT 103
15673: PUSH
15674: LD_INT 106
15676: PUSH
15677: LD_INT 108
15679: PUSH
15680: LD_INT 112
15682: PUSH
15683: LD_INT 113
15685: PUSH
15686: LD_INT 114
15688: PUSH
15689: LD_INT 115
15691: PUSH
15692: LD_INT 116
15694: PUSH
15695: LD_INT 117
15697: PUSH
15698: LD_INT 118
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: ST_TO_ADDR
15719: GO 15962
15721: LD_INT 19
15723: DOUBLE
15724: EQUAL
15725: IFTRUE 15729
15727: GO 15961
15729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15730: LD_ADDR_VAR 0 1
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: LD_INT 2
15740: PUSH
15741: LD_INT 3
15743: PUSH
15744: LD_INT 4
15746: PUSH
15747: LD_INT 5
15749: PUSH
15750: LD_INT 6
15752: PUSH
15753: LD_INT 7
15755: PUSH
15756: LD_INT 8
15758: PUSH
15759: LD_INT 9
15761: PUSH
15762: LD_INT 10
15764: PUSH
15765: LD_INT 11
15767: PUSH
15768: LD_INT 12
15770: PUSH
15771: LD_INT 13
15773: PUSH
15774: LD_INT 14
15776: PUSH
15777: LD_INT 15
15779: PUSH
15780: LD_INT 16
15782: PUSH
15783: LD_INT 17
15785: PUSH
15786: LD_INT 18
15788: PUSH
15789: LD_INT 19
15791: PUSH
15792: LD_INT 20
15794: PUSH
15795: LD_INT 21
15797: PUSH
15798: LD_INT 22
15800: PUSH
15801: LD_INT 23
15803: PUSH
15804: LD_INT 24
15806: PUSH
15807: LD_INT 25
15809: PUSH
15810: LD_INT 26
15812: PUSH
15813: LD_INT 27
15815: PUSH
15816: LD_INT 28
15818: PUSH
15819: LD_INT 29
15821: PUSH
15822: LD_INT 30
15824: PUSH
15825: LD_INT 31
15827: PUSH
15828: LD_INT 32
15830: PUSH
15831: LD_INT 33
15833: PUSH
15834: LD_INT 34
15836: PUSH
15837: LD_INT 35
15839: PUSH
15840: LD_INT 36
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 101
15883: PUSH
15884: LD_INT 102
15886: PUSH
15887: LD_INT 103
15889: PUSH
15890: LD_INT 104
15892: PUSH
15893: LD_INT 105
15895: PUSH
15896: LD_INT 106
15898: PUSH
15899: LD_INT 107
15901: PUSH
15902: LD_INT 108
15904: PUSH
15905: LD_INT 109
15907: PUSH
15908: LD_INT 110
15910: PUSH
15911: LD_INT 111
15913: PUSH
15914: LD_INT 112
15916: PUSH
15917: LD_INT 113
15919: PUSH
15920: LD_INT 114
15922: PUSH
15923: LD_INT 115
15925: PUSH
15926: LD_INT 116
15928: PUSH
15929: LD_INT 117
15931: PUSH
15932: LD_INT 118
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: ST_TO_ADDR
15959: GO 15962
15961: POP
// end else
15962: GO 16193
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15964: LD_ADDR_VAR 0 1
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 4
15980: PUSH
15981: LD_INT 5
15983: PUSH
15984: LD_INT 6
15986: PUSH
15987: LD_INT 7
15989: PUSH
15990: LD_INT 8
15992: PUSH
15993: LD_INT 9
15995: PUSH
15996: LD_INT 10
15998: PUSH
15999: LD_INT 11
16001: PUSH
16002: LD_INT 12
16004: PUSH
16005: LD_INT 13
16007: PUSH
16008: LD_INT 14
16010: PUSH
16011: LD_INT 15
16013: PUSH
16014: LD_INT 16
16016: PUSH
16017: LD_INT 17
16019: PUSH
16020: LD_INT 18
16022: PUSH
16023: LD_INT 19
16025: PUSH
16026: LD_INT 20
16028: PUSH
16029: LD_INT 21
16031: PUSH
16032: LD_INT 22
16034: PUSH
16035: LD_INT 23
16037: PUSH
16038: LD_INT 24
16040: PUSH
16041: LD_INT 25
16043: PUSH
16044: LD_INT 26
16046: PUSH
16047: LD_INT 27
16049: PUSH
16050: LD_INT 28
16052: PUSH
16053: LD_INT 29
16055: PUSH
16056: LD_INT 30
16058: PUSH
16059: LD_INT 31
16061: PUSH
16062: LD_INT 32
16064: PUSH
16065: LD_INT 33
16067: PUSH
16068: LD_INT 34
16070: PUSH
16071: LD_INT 35
16073: PUSH
16074: LD_INT 36
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 101
16117: PUSH
16118: LD_INT 102
16120: PUSH
16121: LD_INT 103
16123: PUSH
16124: LD_INT 104
16126: PUSH
16127: LD_INT 105
16129: PUSH
16130: LD_INT 106
16132: PUSH
16133: LD_INT 107
16135: PUSH
16136: LD_INT 108
16138: PUSH
16139: LD_INT 109
16141: PUSH
16142: LD_INT 110
16144: PUSH
16145: LD_INT 111
16147: PUSH
16148: LD_INT 112
16150: PUSH
16151: LD_INT 113
16153: PUSH
16154: LD_INT 114
16156: PUSH
16157: LD_INT 115
16159: PUSH
16160: LD_INT 116
16162: PUSH
16163: LD_INT 117
16165: PUSH
16166: LD_INT 118
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: ST_TO_ADDR
// if result then
16193: LD_VAR 0 1
16197: IFFALSE 16486
// begin normal :=  ;
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_STRING 
16206: ST_TO_ADDR
// hardcore :=  ;
16207: LD_ADDR_VAR 0 4
16211: PUSH
16212: LD_STRING 
16214: ST_TO_ADDR
// for i = 1 to normalCounter do
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: DOUBLE
16221: LD_INT 1
16223: DEC
16224: ST_TO_ADDR
16225: LD_EXP 34
16229: PUSH
16230: FOR_TO
16231: IFFALSE 16332
// begin tmp := 0 ;
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: LD_STRING 0
16240: ST_TO_ADDR
// if result [ 1 ] then
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 1
16248: ARRAY
16249: IFFALSE 16314
// if result [ 1 ] [ 1 ] = i then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 1
16258: ARRAY
16259: PUSH
16260: LD_INT 1
16262: ARRAY
16263: PUSH
16264: LD_VAR 0 5
16268: EQUAL
16269: IFFALSE 16314
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16271: LD_ADDR_VAR 0 1
16275: PUSH
16276: LD_VAR 0 1
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: LD_VAR 0 1
16288: PUSH
16289: LD_INT 1
16291: ARRAY
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 3
16300: PPUSH
16301: CALL_OW 1
16305: ST_TO_ADDR
// tmp := 1 ;
16306: LD_ADDR_VAR 0 2
16310: PUSH
16311: LD_STRING 1
16313: ST_TO_ADDR
// end ; normal := normal & tmp ;
16314: LD_ADDR_VAR 0 3
16318: PUSH
16319: LD_VAR 0 3
16323: PUSH
16324: LD_VAR 0 2
16328: STR
16329: ST_TO_ADDR
// end ;
16330: GO 16230
16332: POP
16333: POP
// for i = 1 to hardcoreCounter do
16334: LD_ADDR_VAR 0 5
16338: PUSH
16339: DOUBLE
16340: LD_INT 1
16342: DEC
16343: ST_TO_ADDR
16344: LD_EXP 35
16348: PUSH
16349: FOR_TO
16350: IFFALSE 16455
// begin tmp := 0 ;
16352: LD_ADDR_VAR 0 2
16356: PUSH
16357: LD_STRING 0
16359: ST_TO_ADDR
// if result [ 2 ] then
16360: LD_VAR 0 1
16364: PUSH
16365: LD_INT 2
16367: ARRAY
16368: IFFALSE 16437
// if result [ 2 ] [ 1 ] = 100 + i then
16370: LD_VAR 0 1
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PUSH
16379: LD_INT 1
16381: ARRAY
16382: PUSH
16383: LD_INT 100
16385: PUSH
16386: LD_VAR 0 5
16390: PLUS
16391: EQUAL
16392: IFFALSE 16437
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16394: LD_ADDR_VAR 0 1
16398: PUSH
16399: LD_VAR 0 1
16403: PPUSH
16404: LD_INT 2
16406: PPUSH
16407: LD_VAR 0 1
16411: PUSH
16412: LD_INT 2
16414: ARRAY
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 3
16423: PPUSH
16424: CALL_OW 1
16428: ST_TO_ADDR
// tmp := 1 ;
16429: LD_ADDR_VAR 0 2
16433: PUSH
16434: LD_STRING 1
16436: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16437: LD_ADDR_VAR 0 4
16441: PUSH
16442: LD_VAR 0 4
16446: PUSH
16447: LD_VAR 0 2
16451: STR
16452: ST_TO_ADDR
// end ;
16453: GO 16349
16455: POP
16456: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16457: LD_STRING getStreamItemsFromMission("
16459: PUSH
16460: LD_VAR 0 3
16464: STR
16465: PUSH
16466: LD_STRING ","
16468: STR
16469: PUSH
16470: LD_VAR 0 4
16474: STR
16475: PUSH
16476: LD_STRING ")
16478: STR
16479: PPUSH
16480: CALL_OW 559
// end else
16484: GO 16493
// ToLua ( getStreamItemsFromMission("","") ) ;
16486: LD_STRING getStreamItemsFromMission("","")
16488: PPUSH
16489: CALL_OW 559
// end ;
16493: LD_VAR 0 1
16497: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16498: LD_EXP 33
16502: PUSH
16503: LD_EXP 38
16507: AND
16508: IFFALSE 16632
16510: GO 16512
16512: DISABLE
16513: LD_INT 0
16515: PPUSH
16516: PPUSH
// begin enable ;
16517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16518: LD_ADDR_VAR 0 2
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_OWVAR 2
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: LD_INT 34
16540: PUSH
16541: LD_INT 7
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 34
16550: PUSH
16551: LD_INT 45
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 34
16560: PUSH
16561: LD_INT 28
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 34
16570: PUSH
16571: LD_INT 47
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: ST_TO_ADDR
// if not tmp then
16594: LD_VAR 0 2
16598: NOT
16599: IFFALSE 16603
// exit ;
16601: GO 16632
// for i in tmp do
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_VAR 0 2
16612: PUSH
16613: FOR_IN
16614: IFFALSE 16630
// begin SetLives ( i , 0 ) ;
16616: LD_VAR 0 1
16620: PPUSH
16621: LD_INT 0
16623: PPUSH
16624: CALL_OW 234
// end ;
16628: GO 16613
16630: POP
16631: POP
// end ;
16632: PPOPN 2
16634: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16635: LD_EXP 33
16639: PUSH
16640: LD_EXP 39
16644: AND
16645: IFFALSE 16729
16647: GO 16649
16649: DISABLE
16650: LD_INT 0
16652: PPUSH
16653: PPUSH
// begin enable ;
16654: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16655: LD_ADDR_VAR 0 2
16659: PUSH
16660: LD_INT 22
16662: PUSH
16663: LD_OWVAR 2
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 32
16674: PUSH
16675: LD_INT 3
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PPUSH
16686: CALL_OW 69
16690: ST_TO_ADDR
// if not tmp then
16691: LD_VAR 0 2
16695: NOT
16696: IFFALSE 16700
// exit ;
16698: GO 16729
// for i in tmp do
16700: LD_ADDR_VAR 0 1
16704: PUSH
16705: LD_VAR 0 2
16709: PUSH
16710: FOR_IN
16711: IFFALSE 16727
// begin SetLives ( i , 0 ) ;
16713: LD_VAR 0 1
16717: PPUSH
16718: LD_INT 0
16720: PPUSH
16721: CALL_OW 234
// end ;
16725: GO 16710
16727: POP
16728: POP
// end ;
16729: PPOPN 2
16731: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16732: LD_EXP 33
16736: PUSH
16737: LD_EXP 36
16741: AND
16742: IFFALSE 16835
16744: GO 16746
16746: DISABLE
16747: LD_INT 0
16749: PPUSH
// begin enable ;
16750: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16751: LD_ADDR_VAR 0 1
16755: PUSH
16756: LD_INT 22
16758: PUSH
16759: LD_OWVAR 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 25
16773: PUSH
16774: LD_INT 5
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 9
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 8
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PPUSH
16811: CALL_OW 69
16815: PUSH
16816: FOR_IN
16817: IFFALSE 16833
// begin SetClass ( i , 1 ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: CALL_OW 336
// end ;
16831: GO 16816
16833: POP
16834: POP
// end ;
16835: PPOPN 1
16837: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16838: LD_EXP 33
16842: PUSH
16843: LD_EXP 37
16847: AND
16848: PUSH
16849: LD_OWVAR 65
16853: PUSH
16854: LD_INT 7
16856: LESS
16857: AND
16858: IFFALSE 16872
16860: GO 16862
16862: DISABLE
// begin enable ;
16863: ENABLE
// game_speed := 7 ;
16864: LD_ADDR_OWVAR 65
16868: PUSH
16869: LD_INT 7
16871: ST_TO_ADDR
// end ;
16872: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16873: LD_EXP 33
16877: PUSH
16878: LD_EXP 40
16882: AND
16883: IFFALSE 17085
16885: GO 16887
16887: DISABLE
16888: LD_INT 0
16890: PPUSH
16891: PPUSH
16892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16893: LD_ADDR_VAR 0 3
16897: PUSH
16898: LD_INT 81
16900: PUSH
16901: LD_OWVAR 2
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 21
16912: PUSH
16913: LD_INT 1
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PPUSH
16924: CALL_OW 69
16928: ST_TO_ADDR
// if not tmp then
16929: LD_VAR 0 3
16933: NOT
16934: IFFALSE 16938
// exit ;
16936: GO 17085
// if tmp > 5 then
16938: LD_VAR 0 3
16942: PUSH
16943: LD_INT 5
16945: GREATER
16946: IFFALSE 16958
// k := 5 else
16948: LD_ADDR_VAR 0 2
16952: PUSH
16953: LD_INT 5
16955: ST_TO_ADDR
16956: GO 16968
// k := tmp ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_VAR 0 3
16967: ST_TO_ADDR
// for i := 1 to k do
16968: LD_ADDR_VAR 0 1
16972: PUSH
16973: DOUBLE
16974: LD_INT 1
16976: DEC
16977: ST_TO_ADDR
16978: LD_VAR 0 2
16982: PUSH
16983: FOR_TO
16984: IFFALSE 17083
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16986: LD_VAR 0 3
16990: PUSH
16991: LD_VAR 0 1
16995: ARRAY
16996: PPUSH
16997: LD_VAR 0 1
17001: PUSH
17002: LD_INT 4
17004: MOD
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: PPUSH
17010: CALL_OW 259
17014: PUSH
17015: LD_INT 10
17017: LESS
17018: IFFALSE 17081
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17020: LD_VAR 0 3
17024: PUSH
17025: LD_VAR 0 1
17029: ARRAY
17030: PPUSH
17031: LD_VAR 0 1
17035: PUSH
17036: LD_INT 4
17038: MOD
17039: PUSH
17040: LD_INT 1
17042: PLUS
17043: PPUSH
17044: LD_VAR 0 3
17048: PUSH
17049: LD_VAR 0 1
17053: ARRAY
17054: PPUSH
17055: LD_VAR 0 1
17059: PUSH
17060: LD_INT 4
17062: MOD
17063: PUSH
17064: LD_INT 1
17066: PLUS
17067: PPUSH
17068: CALL_OW 259
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: PPUSH
17077: CALL_OW 237
17081: GO 16983
17083: POP
17084: POP
// end ;
17085: PPOPN 3
17087: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17088: LD_EXP 33
17092: PUSH
17093: LD_EXP 41
17097: AND
17098: IFFALSE 17118
17100: GO 17102
17102: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17103: LD_INT 4
17105: PPUSH
17106: LD_OWVAR 2
17110: PPUSH
17111: LD_INT 0
17113: PPUSH
17114: CALL_OW 324
17118: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17119: LD_EXP 33
17123: PUSH
17124: LD_EXP 70
17128: AND
17129: IFFALSE 17149
17131: GO 17133
17133: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17134: LD_INT 19
17136: PPUSH
17137: LD_OWVAR 2
17141: PPUSH
17142: LD_INT 0
17144: PPUSH
17145: CALL_OW 324
17149: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17150: LD_EXP 33
17154: PUSH
17155: LD_EXP 42
17159: AND
17160: IFFALSE 17262
17162: GO 17164
17164: DISABLE
17165: LD_INT 0
17167: PPUSH
17168: PPUSH
// begin enable ;
17169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: LD_INT 22
17177: PUSH
17178: LD_OWVAR 2
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: LD_INT 34
17192: PUSH
17193: LD_INT 11
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 34
17202: PUSH
17203: LD_INT 30
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL_OW 69
17223: ST_TO_ADDR
// if not tmp then
17224: LD_VAR 0 2
17228: NOT
17229: IFFALSE 17233
// exit ;
17231: GO 17262
// for i in tmp do
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: LD_VAR 0 2
17242: PUSH
17243: FOR_IN
17244: IFFALSE 17260
// begin SetLives ( i , 0 ) ;
17246: LD_VAR 0 1
17250: PPUSH
17251: LD_INT 0
17253: PPUSH
17254: CALL_OW 234
// end ;
17258: GO 17243
17260: POP
17261: POP
// end ;
17262: PPOPN 2
17264: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17265: LD_EXP 33
17269: PUSH
17270: LD_EXP 43
17274: AND
17275: IFFALSE 17295
17277: GO 17279
17279: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17280: LD_INT 32
17282: PPUSH
17283: LD_OWVAR 2
17287: PPUSH
17288: LD_INT 0
17290: PPUSH
17291: CALL_OW 324
17295: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17296: LD_EXP 33
17300: PUSH
17301: LD_EXP 44
17305: AND
17306: IFFALSE 17487
17308: GO 17310
17310: DISABLE
17311: LD_INT 0
17313: PPUSH
17314: PPUSH
17315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: LD_INT 22
17323: PUSH
17324: LD_OWVAR 2
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 33
17335: PUSH
17336: LD_INT 3
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: ST_TO_ADDR
// if not tmp then
17352: LD_VAR 0 2
17356: NOT
17357: IFFALSE 17361
// exit ;
17359: GO 17487
// side := 0 ;
17361: LD_ADDR_VAR 0 3
17365: PUSH
17366: LD_INT 0
17368: ST_TO_ADDR
// for i := 1 to 8 do
17369: LD_ADDR_VAR 0 1
17373: PUSH
17374: DOUBLE
17375: LD_INT 1
17377: DEC
17378: ST_TO_ADDR
17379: LD_INT 8
17381: PUSH
17382: FOR_TO
17383: IFFALSE 17431
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17385: LD_OWVAR 2
17389: PUSH
17390: LD_VAR 0 1
17394: NONEQUAL
17395: PUSH
17396: LD_OWVAR 2
17400: PPUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 81
17410: PUSH
17411: LD_INT 2
17413: EQUAL
17414: AND
17415: IFFALSE 17429
// begin side := i ;
17417: LD_ADDR_VAR 0 3
17421: PUSH
17422: LD_VAR 0 1
17426: ST_TO_ADDR
// break ;
17427: GO 17431
// end ;
17429: GO 17382
17431: POP
17432: POP
// if not side then
17433: LD_VAR 0 3
17437: NOT
17438: IFFALSE 17442
// exit ;
17440: GO 17487
// for i := 1 to tmp do
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: DOUBLE
17448: LD_INT 1
17450: DEC
17451: ST_TO_ADDR
17452: LD_VAR 0 2
17456: PUSH
17457: FOR_TO
17458: IFFALSE 17485
// if Prob ( 60 ) then
17460: LD_INT 60
17462: PPUSH
17463: CALL_OW 13
17467: IFFALSE 17483
// SetSide ( i , side ) ;
17469: LD_VAR 0 1
17473: PPUSH
17474: LD_VAR 0 3
17478: PPUSH
17479: CALL_OW 235
17483: GO 17457
17485: POP
17486: POP
// end ;
17487: PPOPN 3
17489: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17490: LD_EXP 33
17494: PUSH
17495: LD_EXP 46
17499: AND
17500: IFFALSE 17619
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 21
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: LD_INT 23
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: PUSH
17562: FOR_IN
17563: IFFALSE 17617
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 257
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: LD_INT 2
17580: PUSH
17581: LD_INT 3
17583: PUSH
17584: LD_INT 4
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: IN
17593: IFFALSE 17615
// SetClass ( un , rand ( 1 , 4 ) ) ;
17595: LD_VAR 0 1
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: LD_INT 4
17605: PPUSH
17606: CALL_OW 12
17610: PPUSH
17611: CALL_OW 336
17615: GO 17562
17617: POP
17618: POP
// end ;
17619: PPOPN 1
17621: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17622: LD_EXP 33
17626: PUSH
17627: LD_EXP 45
17631: AND
17632: IFFALSE 17711
17634: GO 17636
17636: DISABLE
17637: LD_INT 0
17639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_INT 22
17647: PUSH
17648: LD_OWVAR 2
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PPUSH
17671: CALL_OW 69
17675: ST_TO_ADDR
// if not tmp then
17676: LD_VAR 0 1
17680: NOT
17681: IFFALSE 17685
// exit ;
17683: GO 17711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17685: LD_VAR 0 1
17689: PUSH
17690: LD_INT 1
17692: PPUSH
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 12
17702: ARRAY
17703: PPUSH
17704: LD_INT 100
17706: PPUSH
17707: CALL_OW 234
// end ;
17711: PPOPN 1
17713: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17714: LD_EXP 33
17718: PUSH
17719: LD_EXP 47
17723: AND
17724: IFFALSE 17822
17726: GO 17728
17728: DISABLE
17729: LD_INT 0
17731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_INT 22
17739: PUSH
17740: LD_OWVAR 2
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 21
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PPUSH
17763: CALL_OW 69
17767: ST_TO_ADDR
// if not tmp then
17768: LD_VAR 0 1
17772: NOT
17773: IFFALSE 17777
// exit ;
17775: GO 17822
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17777: LD_VAR 0 1
17781: PUSH
17782: LD_INT 1
17784: PPUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 12
17794: ARRAY
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_INT 4
17801: PPUSH
17802: CALL_OW 12
17806: PPUSH
17807: LD_INT 3000
17809: PPUSH
17810: LD_INT 9000
17812: PPUSH
17813: CALL_OW 12
17817: PPUSH
17818: CALL_OW 492
// end ;
17822: PPOPN 1
17824: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17825: LD_EXP 33
17829: PUSH
17830: LD_EXP 48
17834: AND
17835: IFFALSE 17855
17837: GO 17839
17839: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17840: LD_INT 1
17842: PPUSH
17843: LD_OWVAR 2
17847: PPUSH
17848: LD_INT 0
17850: PPUSH
17851: CALL_OW 324
17855: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17856: LD_EXP 33
17860: PUSH
17861: LD_EXP 49
17865: AND
17866: IFFALSE 17949
17868: GO 17870
17870: DISABLE
17871: LD_INT 0
17873: PPUSH
17874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: LD_INT 22
17882: PUSH
17883: LD_OWVAR 2
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 21
17894: PUSH
17895: LD_INT 3
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: ST_TO_ADDR
// if not tmp then
17911: LD_VAR 0 2
17915: NOT
17916: IFFALSE 17920
// exit ;
17918: GO 17949
// for i in tmp do
17920: LD_ADDR_VAR 0 1
17924: PUSH
17925: LD_VAR 0 2
17929: PUSH
17930: FOR_IN
17931: IFFALSE 17947
// SetBLevel ( i , 10 ) ;
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_INT 10
17940: PPUSH
17941: CALL_OW 241
17945: GO 17930
17947: POP
17948: POP
// end ;
17949: PPOPN 2
17951: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17952: LD_EXP 33
17956: PUSH
17957: LD_EXP 50
17961: AND
17962: IFFALSE 18073
17964: GO 17966
17966: DISABLE
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17972: LD_ADDR_VAR 0 3
17976: PUSH
17977: LD_INT 22
17979: PUSH
17980: LD_OWVAR 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 25
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: ST_TO_ADDR
// if not tmp then
18008: LD_VAR 0 3
18012: NOT
18013: IFFALSE 18017
// exit ;
18015: GO 18073
// un := tmp [ rand ( 1 , tmp ) ] ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_VAR 0 3
18026: PUSH
18027: LD_INT 1
18029: PPUSH
18030: LD_VAR 0 3
18034: PPUSH
18035: CALL_OW 12
18039: ARRAY
18040: ST_TO_ADDR
// if Crawls ( un ) then
18041: LD_VAR 0 2
18045: PPUSH
18046: CALL_OW 318
18050: IFFALSE 18061
// ComWalk ( un ) ;
18052: LD_VAR 0 2
18056: PPUSH
18057: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18061: LD_VAR 0 2
18065: PPUSH
18066: LD_INT 5
18068: PPUSH
18069: CALL_OW 336
// end ;
18073: PPOPN 3
18075: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18076: LD_EXP 33
18080: PUSH
18081: LD_EXP 51
18085: AND
18086: PUSH
18087: LD_OWVAR 67
18091: PUSH
18092: LD_INT 4
18094: LESS
18095: AND
18096: IFFALSE 18115
18098: GO 18100
18100: DISABLE
// begin Difficulty := Difficulty + 1 ;
18101: LD_ADDR_OWVAR 67
18105: PUSH
18106: LD_OWVAR 67
18110: PUSH
18111: LD_INT 1
18113: PLUS
18114: ST_TO_ADDR
// end ;
18115: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18116: LD_EXP 33
18120: PUSH
18121: LD_EXP 52
18125: AND
18126: IFFALSE 18229
18128: GO 18130
18130: DISABLE
18131: LD_INT 0
18133: PPUSH
// begin for i := 1 to 5 do
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: DOUBLE
18140: LD_INT 1
18142: DEC
18143: ST_TO_ADDR
18144: LD_INT 5
18146: PUSH
18147: FOR_TO
18148: IFFALSE 18227
// begin uc_nation := nation_nature ;
18150: LD_ADDR_OWVAR 21
18154: PUSH
18155: LD_INT 0
18157: ST_TO_ADDR
// uc_side := 0 ;
18158: LD_ADDR_OWVAR 20
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18166: LD_ADDR_OWVAR 29
18170: PUSH
18171: LD_INT 12
18173: PUSH
18174: LD_INT 12
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: ST_TO_ADDR
// hc_agressivity := 20 ;
18181: LD_ADDR_OWVAR 35
18185: PUSH
18186: LD_INT 20
18188: ST_TO_ADDR
// hc_class := class_tiger ;
18189: LD_ADDR_OWVAR 28
18193: PUSH
18194: LD_INT 14
18196: ST_TO_ADDR
// hc_gallery :=  ;
18197: LD_ADDR_OWVAR 33
18201: PUSH
18202: LD_STRING 
18204: ST_TO_ADDR
// hc_name :=  ;
18205: LD_ADDR_OWVAR 26
18209: PUSH
18210: LD_STRING 
18212: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18213: CALL_OW 44
18217: PPUSH
18218: LD_INT 0
18220: PPUSH
18221: CALL_OW 51
// end ;
18225: GO 18147
18227: POP
18228: POP
// end ;
18229: PPOPN 1
18231: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18232: LD_EXP 33
18236: PUSH
18237: LD_EXP 53
18241: AND
18242: IFFALSE 18251
18244: GO 18246
18246: DISABLE
// StreamSibBomb ;
18247: CALL 18252 0 0
18251: END
// export function StreamSibBomb ; var i , x , y ; begin
18252: LD_INT 0
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
// result := false ;
18258: LD_ADDR_VAR 0 1
18262: PUSH
18263: LD_INT 0
18265: ST_TO_ADDR
// for i := 1 to 16 do
18266: LD_ADDR_VAR 0 2
18270: PUSH
18271: DOUBLE
18272: LD_INT 1
18274: DEC
18275: ST_TO_ADDR
18276: LD_INT 16
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18479
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18282: LD_ADDR_VAR 0 3
18286: PUSH
18287: LD_INT 10
18289: PUSH
18290: LD_INT 20
18292: PUSH
18293: LD_INT 30
18295: PUSH
18296: LD_INT 40
18298: PUSH
18299: LD_INT 50
18301: PUSH
18302: LD_INT 60
18304: PUSH
18305: LD_INT 70
18307: PUSH
18308: LD_INT 80
18310: PUSH
18311: LD_INT 90
18313: PUSH
18314: LD_INT 100
18316: PUSH
18317: LD_INT 110
18319: PUSH
18320: LD_INT 120
18322: PUSH
18323: LD_INT 130
18325: PUSH
18326: LD_INT 140
18328: PUSH
18329: LD_INT 150
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 1
18351: PPUSH
18352: LD_INT 15
18354: PPUSH
18355: CALL_OW 12
18359: ARRAY
18360: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18361: LD_ADDR_VAR 0 4
18365: PUSH
18366: LD_INT 10
18368: PUSH
18369: LD_INT 20
18371: PUSH
18372: LD_INT 30
18374: PUSH
18375: LD_INT 40
18377: PUSH
18378: LD_INT 50
18380: PUSH
18381: LD_INT 60
18383: PUSH
18384: LD_INT 70
18386: PUSH
18387: LD_INT 80
18389: PUSH
18390: LD_INT 90
18392: PUSH
18393: LD_INT 100
18395: PUSH
18396: LD_INT 110
18398: PUSH
18399: LD_INT 120
18401: PUSH
18402: LD_INT 130
18404: PUSH
18405: LD_INT 140
18407: PUSH
18408: LD_INT 150
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: PPUSH
18431: LD_INT 15
18433: PPUSH
18434: CALL_OW 12
18438: ARRAY
18439: ST_TO_ADDR
// if ValidHex ( x , y ) then
18440: LD_VAR 0 3
18444: PPUSH
18445: LD_VAR 0 4
18449: PPUSH
18450: CALL_OW 488
18454: IFFALSE 18477
// begin result := [ x , y ] ;
18456: LD_ADDR_VAR 0 1
18460: PUSH
18461: LD_VAR 0 3
18465: PUSH
18466: LD_VAR 0 4
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: ST_TO_ADDR
// break ;
18475: GO 18479
// end ; end ;
18477: GO 18279
18479: POP
18480: POP
// if result then
18481: LD_VAR 0 1
18485: IFFALSE 18545
// begin ToLua ( playSibBomb() ) ;
18487: LD_STRING playSibBomb()
18489: PPUSH
18490: CALL_OW 559
// wait ( 0 0$14 ) ;
18494: LD_INT 490
18496: PPUSH
18497: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18501: LD_VAR 0 1
18505: PUSH
18506: LD_INT 1
18508: ARRAY
18509: PPUSH
18510: LD_VAR 0 1
18514: PUSH
18515: LD_INT 2
18517: ARRAY
18518: PPUSH
18519: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18523: LD_VAR 0 1
18527: PUSH
18528: LD_INT 1
18530: ARRAY
18531: PPUSH
18532: LD_VAR 0 1
18536: PUSH
18537: LD_INT 2
18539: ARRAY
18540: PPUSH
18541: CALL_OW 429
// end ; end ;
18545: LD_VAR 0 1
18549: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18550: LD_EXP 33
18554: PUSH
18555: LD_EXP 55
18559: AND
18560: IFFALSE 18572
18562: GO 18564
18564: DISABLE
// YouLost (  ) ;
18565: LD_STRING 
18567: PPUSH
18568: CALL_OW 104
18572: END
// every 0 0$1 trigger StreamModeActive and sFog do
18573: LD_EXP 33
18577: PUSH
18578: LD_EXP 54
18582: AND
18583: IFFALSE 18597
18585: GO 18587
18587: DISABLE
// FogOff ( your_side ) ;
18588: LD_OWVAR 2
18592: PPUSH
18593: CALL_OW 344
18597: END
// every 0 0$1 trigger StreamModeActive and sSun do
18598: LD_EXP 33
18602: PUSH
18603: LD_EXP 56
18607: AND
18608: IFFALSE 18636
18610: GO 18612
18612: DISABLE
// begin solar_recharge_percent := 0 ;
18613: LD_ADDR_OWVAR 79
18617: PUSH
18618: LD_INT 0
18620: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18621: LD_INT 10500
18623: PPUSH
18624: CALL_OW 67
// solar_recharge_percent := 100 ;
18628: LD_ADDR_OWVAR 79
18632: PUSH
18633: LD_INT 100
18635: ST_TO_ADDR
// end ;
18636: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18637: LD_EXP 33
18641: PUSH
18642: LD_EXP 57
18646: AND
18647: IFFALSE 18886
18649: GO 18651
18651: DISABLE
18652: LD_INT 0
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin tmp := [ ] ;
18657: LD_ADDR_VAR 0 3
18661: PUSH
18662: EMPTY
18663: ST_TO_ADDR
// for i := 1 to 6 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 6
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18783
// begin uc_nation := nation_nature ;
18680: LD_ADDR_OWVAR 21
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// uc_side := 0 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18696: LD_ADDR_OWVAR 29
18700: PUSH
18701: LD_INT 12
18703: PUSH
18704: LD_INT 12
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: ST_TO_ADDR
// hc_agressivity := 20 ;
18711: LD_ADDR_OWVAR 35
18715: PUSH
18716: LD_INT 20
18718: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18719: LD_ADDR_OWVAR 28
18723: PUSH
18724: LD_INT 17
18726: ST_TO_ADDR
// hc_gallery :=  ;
18727: LD_ADDR_OWVAR 33
18731: PUSH
18732: LD_STRING 
18734: ST_TO_ADDR
// hc_name :=  ;
18735: LD_ADDR_OWVAR 26
18739: PUSH
18740: LD_STRING 
18742: ST_TO_ADDR
// un := CreateHuman ;
18743: LD_ADDR_VAR 0 2
18747: PUSH
18748: CALL_OW 44
18752: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18753: LD_VAR 0 2
18757: PPUSH
18758: LD_INT 1
18760: PPUSH
18761: CALL_OW 51
// tmp := tmp ^ un ;
18765: LD_ADDR_VAR 0 3
18769: PUSH
18770: LD_VAR 0 3
18774: PUSH
18775: LD_VAR 0 2
18779: ADD
18780: ST_TO_ADDR
// end ;
18781: GO 18677
18783: POP
18784: POP
// repeat wait ( 0 0$1 ) ;
18785: LD_INT 35
18787: PPUSH
18788: CALL_OW 67
// for un in tmp do
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_VAR 0 3
18801: PUSH
18802: FOR_IN
18803: IFFALSE 18877
// begin if IsDead ( un ) then
18805: LD_VAR 0 2
18809: PPUSH
18810: CALL_OW 301
18814: IFFALSE 18834
// begin tmp := tmp diff un ;
18816: LD_ADDR_VAR 0 3
18820: PUSH
18821: LD_VAR 0 3
18825: PUSH
18826: LD_VAR 0 2
18830: DIFF
18831: ST_TO_ADDR
// continue ;
18832: GO 18802
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18834: LD_VAR 0 2
18838: PPUSH
18839: LD_INT 3
18841: PUSH
18842: LD_INT 22
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PPUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL_OW 74
18870: PPUSH
18871: CALL_OW 115
// end ;
18875: GO 18802
18877: POP
18878: POP
// until not tmp ;
18879: LD_VAR 0 3
18883: NOT
18884: IFFALSE 18785
// end ;
18886: PPOPN 3
18888: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18889: LD_EXP 33
18893: PUSH
18894: LD_EXP 58
18898: AND
18899: IFFALSE 18953
18901: GO 18903
18903: DISABLE
// begin ToLua ( displayTroll(); ) ;
18904: LD_STRING displayTroll();
18906: PPUSH
18907: CALL_OW 559
// wait ( 3 3$00 ) ;
18911: LD_INT 6300
18913: PPUSH
18914: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18918: LD_STRING hideTroll();
18920: PPUSH
18921: CALL_OW 559
// wait ( 1 1$00 ) ;
18925: LD_INT 2100
18927: PPUSH
18928: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18932: LD_STRING displayTroll();
18934: PPUSH
18935: CALL_OW 559
// wait ( 1 1$00 ) ;
18939: LD_INT 2100
18941: PPUSH
18942: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18946: LD_STRING hideTroll();
18948: PPUSH
18949: CALL_OW 559
// end ;
18953: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18954: LD_EXP 33
18958: PUSH
18959: LD_EXP 59
18963: AND
18964: IFFALSE 19027
18966: GO 18968
18968: DISABLE
18969: LD_INT 0
18971: PPUSH
// begin p := 0 ;
18972: LD_ADDR_VAR 0 1
18976: PUSH
18977: LD_INT 0
18979: ST_TO_ADDR
// repeat game_speed := 1 ;
18980: LD_ADDR_OWVAR 65
18984: PUSH
18985: LD_INT 1
18987: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18988: LD_INT 35
18990: PPUSH
18991: CALL_OW 67
// p := p + 1 ;
18995: LD_ADDR_VAR 0 1
18999: PUSH
19000: LD_VAR 0 1
19004: PUSH
19005: LD_INT 1
19007: PLUS
19008: ST_TO_ADDR
// until p >= 60 ;
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 60
19016: GREATEREQUAL
19017: IFFALSE 18980
// game_speed := 4 ;
19019: LD_ADDR_OWVAR 65
19023: PUSH
19024: LD_INT 4
19026: ST_TO_ADDR
// end ;
19027: PPOPN 1
19029: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19030: LD_EXP 33
19034: PUSH
19035: LD_EXP 60
19039: AND
19040: IFFALSE 19186
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19049: LD_ADDR_VAR 0 1
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 30
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL_OW 69
19102: ST_TO_ADDR
// if not depot then
19103: LD_VAR 0 1
19107: NOT
19108: IFFALSE 19112
// exit ;
19110: GO 19186
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19112: LD_ADDR_VAR 0 2
19116: PUSH
19117: LD_VAR 0 1
19121: PUSH
19122: LD_INT 1
19124: PPUSH
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 12
19134: ARRAY
19135: PPUSH
19136: CALL_OW 274
19140: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19141: LD_VAR 0 2
19145: PPUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 0
19151: PPUSH
19152: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19156: LD_VAR 0 2
19160: PPUSH
19161: LD_INT 2
19163: PPUSH
19164: LD_INT 0
19166: PPUSH
19167: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19171: LD_VAR 0 2
19175: PPUSH
19176: LD_INT 3
19178: PPUSH
19179: LD_INT 0
19181: PPUSH
19182: CALL_OW 277
// end ;
19186: PPOPN 2
19188: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19189: LD_EXP 33
19193: PUSH
19194: LD_EXP 61
19198: AND
19199: IFFALSE 19296
19201: GO 19203
19203: DISABLE
19204: LD_INT 0
19206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19207: LD_ADDR_VAR 0 1
19211: PUSH
19212: LD_INT 22
19214: PUSH
19215: LD_OWVAR 2
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 21
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 3
19236: PUSH
19237: LD_INT 23
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: LIST
19255: PPUSH
19256: CALL_OW 69
19260: ST_TO_ADDR
// if not tmp then
19261: LD_VAR 0 1
19265: NOT
19266: IFFALSE 19270
// exit ;
19268: GO 19296
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 1
19277: PPUSH
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 12
19287: ARRAY
19288: PPUSH
19289: LD_INT 200
19291: PPUSH
19292: CALL_OW 234
// end ;
19296: PPOPN 1
19298: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19299: LD_EXP 33
19303: PUSH
19304: LD_EXP 62
19308: AND
19309: IFFALSE 19388
19311: GO 19313
19313: DISABLE
19314: LD_INT 0
19316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19317: LD_ADDR_VAR 0 1
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_OWVAR 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 69
19352: ST_TO_ADDR
// if not tmp then
19353: LD_VAR 0 1
19357: NOT
19358: IFFALSE 19362
// exit ;
19360: GO 19388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19362: LD_VAR 0 1
19366: PUSH
19367: LD_INT 1
19369: PPUSH
19370: LD_VAR 0 1
19374: PPUSH
19375: CALL_OW 12
19379: ARRAY
19380: PPUSH
19381: LD_INT 60
19383: PPUSH
19384: CALL_OW 234
// end ;
19388: PPOPN 1
19390: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19391: LD_EXP 33
19395: PUSH
19396: LD_EXP 63
19400: AND
19401: IFFALSE 19500
19403: GO 19405
19405: DISABLE
19406: LD_INT 0
19408: PPUSH
19409: PPUSH
// begin enable ;
19410: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19411: LD_ADDR_VAR 0 1
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_OWVAR 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 61
19430: PUSH
19431: EMPTY
19432: LIST
19433: PUSH
19434: LD_INT 33
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: ST_TO_ADDR
// if not tmp then
19454: LD_VAR 0 1
19458: NOT
19459: IFFALSE 19463
// exit ;
19461: GO 19500
// for i in tmp do
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: LD_VAR 0 1
19472: PUSH
19473: FOR_IN
19474: IFFALSE 19498
// if IsControledBy ( i ) then
19476: LD_VAR 0 2
19480: PPUSH
19481: CALL_OW 312
19485: IFFALSE 19496
// ComUnlink ( i ) ;
19487: LD_VAR 0 2
19491: PPUSH
19492: CALL_OW 136
19496: GO 19473
19498: POP
19499: POP
// end ;
19500: PPOPN 2
19502: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19503: LD_EXP 33
19507: PUSH
19508: LD_EXP 64
19512: AND
19513: IFFALSE 19653
19515: GO 19517
19517: DISABLE
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
// begin ToLua ( displayPowell(); ) ;
19522: LD_STRING displayPowell();
19524: PPUSH
19525: CALL_OW 559
// uc_side := 0 ;
19529: LD_ADDR_OWVAR 20
19533: PUSH
19534: LD_INT 0
19536: ST_TO_ADDR
// uc_nation := 2 ;
19537: LD_ADDR_OWVAR 21
19541: PUSH
19542: LD_INT 2
19544: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19545: LD_ADDR_OWVAR 37
19549: PUSH
19550: LD_INT 14
19552: ST_TO_ADDR
// vc_engine := engine_siberite ;
19553: LD_ADDR_OWVAR 39
19557: PUSH
19558: LD_INT 3
19560: ST_TO_ADDR
// vc_control := control_apeman ;
19561: LD_ADDR_OWVAR 38
19565: PUSH
19566: LD_INT 5
19568: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19569: LD_ADDR_OWVAR 40
19573: PUSH
19574: LD_INT 29
19576: ST_TO_ADDR
// un := CreateVehicle ;
19577: LD_ADDR_VAR 0 2
19581: PUSH
19582: CALL_OW 45
19586: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19587: LD_VAR 0 2
19591: PPUSH
19592: LD_INT 1
19594: PPUSH
19595: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19599: LD_INT 35
19601: PPUSH
19602: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_INT 22
19613: PUSH
19614: LD_OWVAR 2
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PPUSH
19623: CALL_OW 69
19627: PPUSH
19628: LD_VAR 0 2
19632: PPUSH
19633: CALL_OW 74
19637: PPUSH
19638: CALL_OW 115
// until IsDead ( un ) ;
19642: LD_VAR 0 2
19646: PPUSH
19647: CALL_OW 301
19651: IFFALSE 19599
// end ;
19653: PPOPN 2
19655: END
// every 0 0$1 trigger StreamModeActive and sStu do
19656: LD_EXP 33
19660: PUSH
19661: LD_EXP 72
19665: AND
19666: IFFALSE 19682
19668: GO 19670
19670: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19671: LD_STRING displayStucuk();
19673: PPUSH
19674: CALL_OW 559
// ResetFog ;
19678: CALL_OW 335
// end ;
19682: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19683: LD_EXP 33
19687: PUSH
19688: LD_EXP 65
19692: AND
19693: IFFALSE 19834
19695: GO 19697
19697: DISABLE
19698: LD_INT 0
19700: PPUSH
19701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19702: LD_ADDR_VAR 0 2
19706: PUSH
19707: LD_INT 22
19709: PUSH
19710: LD_OWVAR 2
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 21
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: ST_TO_ADDR
// if not tmp then
19738: LD_VAR 0 2
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19834
// un := tmp [ rand ( 1 , tmp ) ] ;
19747: LD_ADDR_VAR 0 1
19751: PUSH
19752: LD_VAR 0 2
19756: PUSH
19757: LD_INT 1
19759: PPUSH
19760: LD_VAR 0 2
19764: PPUSH
19765: CALL_OW 12
19769: ARRAY
19770: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19771: LD_VAR 0 1
19775: PPUSH
19776: LD_INT 0
19778: PPUSH
19779: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19783: LD_VAR 0 1
19787: PPUSH
19788: LD_OWVAR 3
19792: PUSH
19793: LD_VAR 0 1
19797: DIFF
19798: PPUSH
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 74
19808: PPUSH
19809: CALL_OW 115
// wait ( 0 0$20 ) ;
19813: LD_INT 700
19815: PPUSH
19816: CALL_OW 67
// SetSide ( un , your_side ) ;
19820: LD_VAR 0 1
19824: PPUSH
19825: LD_OWVAR 2
19829: PPUSH
19830: CALL_OW 235
// end ;
19834: PPOPN 2
19836: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19837: LD_EXP 33
19841: PUSH
19842: LD_EXP 66
19846: AND
19847: IFFALSE 19953
19849: GO 19851
19851: DISABLE
19852: LD_INT 0
19854: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19855: LD_ADDR_VAR 0 1
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_OWVAR 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 30
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 30
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PPUSH
19904: CALL_OW 69
19908: ST_TO_ADDR
// if not depot then
19909: LD_VAR 0 1
19913: NOT
19914: IFFALSE 19918
// exit ;
19916: GO 19953
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19918: LD_VAR 0 1
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PPUSH
19927: CALL_OW 250
19931: PPUSH
19932: LD_VAR 0 1
19936: PUSH
19937: LD_INT 1
19939: ARRAY
19940: PPUSH
19941: CALL_OW 251
19945: PPUSH
19946: LD_INT 70
19948: PPUSH
19949: CALL_OW 495
// end ;
19953: PPOPN 1
19955: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19956: LD_EXP 33
19960: PUSH
19961: LD_EXP 67
19965: AND
19966: IFFALSE 20177
19968: GO 19970
19970: DISABLE
19971: LD_INT 0
19973: PPUSH
19974: PPUSH
19975: PPUSH
19976: PPUSH
19977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19978: LD_ADDR_VAR 0 5
19982: PUSH
19983: LD_INT 22
19985: PUSH
19986: LD_OWVAR 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 21
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PPUSH
20009: CALL_OW 69
20013: ST_TO_ADDR
// if not tmp then
20014: LD_VAR 0 5
20018: NOT
20019: IFFALSE 20023
// exit ;
20021: GO 20177
// for i in tmp do
20023: LD_ADDR_VAR 0 1
20027: PUSH
20028: LD_VAR 0 5
20032: PUSH
20033: FOR_IN
20034: IFFALSE 20175
// begin d := rand ( 0 , 5 ) ;
20036: LD_ADDR_VAR 0 4
20040: PUSH
20041: LD_INT 0
20043: PPUSH
20044: LD_INT 5
20046: PPUSH
20047: CALL_OW 12
20051: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20052: LD_ADDR_VAR 0 2
20056: PUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 250
20066: PPUSH
20067: LD_VAR 0 4
20071: PPUSH
20072: LD_INT 3
20074: PPUSH
20075: LD_INT 12
20077: PPUSH
20078: CALL_OW 12
20082: PPUSH
20083: CALL_OW 272
20087: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20088: LD_ADDR_VAR 0 3
20092: PUSH
20093: LD_VAR 0 1
20097: PPUSH
20098: CALL_OW 251
20102: PPUSH
20103: LD_VAR 0 4
20107: PPUSH
20108: LD_INT 3
20110: PPUSH
20111: LD_INT 12
20113: PPUSH
20114: CALL_OW 12
20118: PPUSH
20119: CALL_OW 273
20123: ST_TO_ADDR
// if ValidHex ( x , y ) then
20124: LD_VAR 0 2
20128: PPUSH
20129: LD_VAR 0 3
20133: PPUSH
20134: CALL_OW 488
20138: IFFALSE 20173
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20140: LD_VAR 0 1
20144: PPUSH
20145: LD_VAR 0 2
20149: PPUSH
20150: LD_VAR 0 3
20154: PPUSH
20155: LD_INT 3
20157: PPUSH
20158: LD_INT 6
20160: PPUSH
20161: CALL_OW 12
20165: PPUSH
20166: LD_INT 1
20168: PPUSH
20169: CALL_OW 483
// end ;
20173: GO 20033
20175: POP
20176: POP
// end ;
20177: PPOPN 5
20179: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20180: LD_EXP 33
20184: PUSH
20185: LD_EXP 68
20189: AND
20190: IFFALSE 20284
20192: GO 20194
20194: DISABLE
20195: LD_INT 0
20197: PPUSH
20198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20199: LD_ADDR_VAR 0 2
20203: PUSH
20204: LD_INT 22
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 32
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 21
20228: PUSH
20229: LD_INT 2
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: ST_TO_ADDR
// if not tmp then
20246: LD_VAR 0 2
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20284
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20282
// SetFuel ( i , 0 ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 0
20275: PPUSH
20276: CALL_OW 240
20280: GO 20265
20282: POP
20283: POP
// end ;
20284: PPOPN 2
20286: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20287: LD_EXP 33
20291: PUSH
20292: LD_EXP 69
20296: AND
20297: IFFALSE 20363
20299: GO 20301
20301: DISABLE
20302: LD_INT 0
20304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20305: LD_ADDR_VAR 0 1
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_OWVAR 2
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 30
20324: PUSH
20325: LD_INT 29
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PPUSH
20336: CALL_OW 69
20340: ST_TO_ADDR
// if not tmp then
20341: LD_VAR 0 1
20345: NOT
20346: IFFALSE 20350
// exit ;
20348: GO 20363
// DestroyUnit ( tmp [ 1 ] ) ;
20350: LD_VAR 0 1
20354: PUSH
20355: LD_INT 1
20357: ARRAY
20358: PPUSH
20359: CALL_OW 65
// end ;
20363: PPOPN 1
20365: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20366: LD_EXP 33
20370: PUSH
20371: LD_EXP 71
20375: AND
20376: IFFALSE 20505
20378: GO 20380
20380: DISABLE
20381: LD_INT 0
20383: PPUSH
// begin uc_side := 0 ;
20384: LD_ADDR_OWVAR 20
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// uc_nation := nation_arabian ;
20392: LD_ADDR_OWVAR 21
20396: PUSH
20397: LD_INT 2
20399: ST_TO_ADDR
// hc_gallery :=  ;
20400: LD_ADDR_OWVAR 33
20404: PUSH
20405: LD_STRING 
20407: ST_TO_ADDR
// hc_name :=  ;
20408: LD_ADDR_OWVAR 26
20412: PUSH
20413: LD_STRING 
20415: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20416: LD_INT 1
20418: PPUSH
20419: LD_INT 11
20421: PPUSH
20422: LD_INT 10
20424: PPUSH
20425: CALL_OW 380
// un := CreateHuman ;
20429: LD_ADDR_VAR 0 1
20433: PUSH
20434: CALL_OW 44
20438: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20439: LD_VAR 0 1
20443: PPUSH
20444: LD_INT 1
20446: PPUSH
20447: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20451: LD_INT 35
20453: PPUSH
20454: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20458: LD_VAR 0 1
20462: PPUSH
20463: LD_INT 22
20465: PUSH
20466: LD_OWVAR 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PPUSH
20475: CALL_OW 69
20479: PPUSH
20480: LD_VAR 0 1
20484: PPUSH
20485: CALL_OW 74
20489: PPUSH
20490: CALL_OW 115
// until IsDead ( un ) ;
20494: LD_VAR 0 1
20498: PPUSH
20499: CALL_OW 301
20503: IFFALSE 20451
// end ;
20505: PPOPN 1
20507: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20508: LD_EXP 33
20512: PUSH
20513: LD_EXP 73
20517: AND
20518: IFFALSE 20530
20520: GO 20522
20522: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20523: LD_STRING earthquake(getX(game), 0, 32)
20525: PPUSH
20526: CALL_OW 559
20530: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20531: LD_EXP 33
20535: PUSH
20536: LD_EXP 74
20540: AND
20541: IFFALSE 20632
20543: GO 20545
20545: DISABLE
20546: LD_INT 0
20548: PPUSH
// begin enable ;
20549: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20550: LD_ADDR_VAR 0 1
20554: PUSH
20555: LD_INT 22
20557: PUSH
20558: LD_OWVAR 2
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 21
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 33
20579: PUSH
20580: LD_INT 3
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 69
20596: ST_TO_ADDR
// if not tmp then
20597: LD_VAR 0 1
20601: NOT
20602: IFFALSE 20606
// exit ;
20604: GO 20632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20606: LD_VAR 0 1
20610: PUSH
20611: LD_INT 1
20613: PPUSH
20614: LD_VAR 0 1
20618: PPUSH
20619: CALL_OW 12
20623: ARRAY
20624: PPUSH
20625: LD_INT 1
20627: PPUSH
20628: CALL_OW 234
// end ;
20632: PPOPN 1
20634: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20635: LD_EXP 33
20639: PUSH
20640: LD_EXP 75
20644: AND
20645: IFFALSE 20786
20647: GO 20649
20649: DISABLE
20650: LD_INT 0
20652: PPUSH
20653: PPUSH
20654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20655: LD_ADDR_VAR 0 3
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_OWVAR 2
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 25
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PPUSH
20686: CALL_OW 69
20690: ST_TO_ADDR
// if not tmp then
20691: LD_VAR 0 3
20695: NOT
20696: IFFALSE 20700
// exit ;
20698: GO 20786
// un := tmp [ rand ( 1 , tmp ) ] ;
20700: LD_ADDR_VAR 0 2
20704: PUSH
20705: LD_VAR 0 3
20709: PUSH
20710: LD_INT 1
20712: PPUSH
20713: LD_VAR 0 3
20717: PPUSH
20718: CALL_OW 12
20722: ARRAY
20723: ST_TO_ADDR
// if Crawls ( un ) then
20724: LD_VAR 0 2
20728: PPUSH
20729: CALL_OW 318
20733: IFFALSE 20744
// ComWalk ( un ) ;
20735: LD_VAR 0 2
20739: PPUSH
20740: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20744: LD_VAR 0 2
20748: PPUSH
20749: LD_INT 9
20751: PPUSH
20752: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20756: LD_INT 28
20758: PPUSH
20759: LD_OWVAR 2
20763: PPUSH
20764: LD_INT 2
20766: PPUSH
20767: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20771: LD_INT 29
20773: PPUSH
20774: LD_OWVAR 2
20778: PPUSH
20779: LD_INT 2
20781: PPUSH
20782: CALL_OW 322
// end ;
20786: PPOPN 3
20788: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20789: LD_EXP 33
20793: PUSH
20794: LD_EXP 76
20798: AND
20799: IFFALSE 20910
20801: GO 20803
20803: DISABLE
20804: LD_INT 0
20806: PPUSH
20807: PPUSH
20808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20809: LD_ADDR_VAR 0 3
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_OWVAR 2
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 25
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PPUSH
20840: CALL_OW 69
20844: ST_TO_ADDR
// if not tmp then
20845: LD_VAR 0 3
20849: NOT
20850: IFFALSE 20854
// exit ;
20852: GO 20910
// un := tmp [ rand ( 1 , tmp ) ] ;
20854: LD_ADDR_VAR 0 2
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 1
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: CALL_OW 12
20876: ARRAY
20877: ST_TO_ADDR
// if Crawls ( un ) then
20878: LD_VAR 0 2
20882: PPUSH
20883: CALL_OW 318
20887: IFFALSE 20898
// ComWalk ( un ) ;
20889: LD_VAR 0 2
20893: PPUSH
20894: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20898: LD_VAR 0 2
20902: PPUSH
20903: LD_INT 8
20905: PPUSH
20906: CALL_OW 336
// end ;
20910: PPOPN 3
20912: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20913: LD_EXP 33
20917: PUSH
20918: LD_EXP 77
20922: AND
20923: IFFALSE 21067
20925: GO 20927
20927: DISABLE
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20932: LD_ADDR_VAR 0 2
20936: PUSH
20937: LD_INT 22
20939: PUSH
20940: LD_OWVAR 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 21
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 34
20964: PUSH
20965: LD_INT 12
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 34
20974: PUSH
20975: LD_INT 51
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 34
20984: PUSH
20985: LD_INT 32
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: ST_TO_ADDR
// if not tmp then
21008: LD_VAR 0 2
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21067
// for i in tmp do
21017: LD_ADDR_VAR 0 1
21021: PUSH
21022: LD_VAR 0 2
21026: PUSH
21027: FOR_IN
21028: IFFALSE 21065
// if GetCargo ( i , mat_artifact ) = 0 then
21030: LD_VAR 0 1
21034: PPUSH
21035: LD_INT 4
21037: PPUSH
21038: CALL_OW 289
21042: PUSH
21043: LD_INT 0
21045: EQUAL
21046: IFFALSE 21063
// SetCargo ( i , mat_siberit , 100 ) ;
21048: LD_VAR 0 1
21052: PPUSH
21053: LD_INT 3
21055: PPUSH
21056: LD_INT 100
21058: PPUSH
21059: CALL_OW 290
21063: GO 21027
21065: POP
21066: POP
// end ;
21067: PPOPN 2
21069: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21070: LD_EXP 33
21074: PUSH
21075: LD_EXP 78
21079: AND
21080: IFFALSE 21263
21082: GO 21084
21084: DISABLE
21085: LD_INT 0
21087: PPUSH
21088: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21089: LD_ADDR_VAR 0 2
21093: PUSH
21094: LD_INT 22
21096: PUSH
21097: LD_OWVAR 2
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PPUSH
21106: CALL_OW 69
21110: ST_TO_ADDR
// if not tmp then
21111: LD_VAR 0 2
21115: NOT
21116: IFFALSE 21120
// exit ;
21118: GO 21263
// for i := 1 to 2 do
21120: LD_ADDR_VAR 0 1
21124: PUSH
21125: DOUBLE
21126: LD_INT 1
21128: DEC
21129: ST_TO_ADDR
21130: LD_INT 2
21132: PUSH
21133: FOR_TO
21134: IFFALSE 21261
// begin uc_side := your_side ;
21136: LD_ADDR_OWVAR 20
21140: PUSH
21141: LD_OWVAR 2
21145: ST_TO_ADDR
// uc_nation := nation_american ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// vc_chassis := us_morphling ;
21154: LD_ADDR_OWVAR 37
21158: PUSH
21159: LD_INT 5
21161: ST_TO_ADDR
// vc_engine := engine_siberite ;
21162: LD_ADDR_OWVAR 39
21166: PUSH
21167: LD_INT 3
21169: ST_TO_ADDR
// vc_control := control_computer ;
21170: LD_ADDR_OWVAR 38
21174: PUSH
21175: LD_INT 3
21177: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21178: LD_ADDR_OWVAR 40
21182: PUSH
21183: LD_INT 10
21185: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21186: LD_VAR 0 2
21190: PUSH
21191: LD_INT 1
21193: ARRAY
21194: PPUSH
21195: CALL_OW 310
21199: NOT
21200: IFFALSE 21247
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21202: CALL_OW 45
21206: PPUSH
21207: LD_VAR 0 2
21211: PUSH
21212: LD_INT 1
21214: ARRAY
21215: PPUSH
21216: CALL_OW 250
21220: PPUSH
21221: LD_VAR 0 2
21225: PUSH
21226: LD_INT 1
21228: ARRAY
21229: PPUSH
21230: CALL_OW 251
21234: PPUSH
21235: LD_INT 12
21237: PPUSH
21238: LD_INT 1
21240: PPUSH
21241: CALL_OW 50
21245: GO 21259
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21247: CALL_OW 45
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: CALL_OW 51
// end ;
21259: GO 21133
21261: POP
21262: POP
// end ;
21263: PPOPN 2
21265: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21266: LD_EXP 33
21270: PUSH
21271: LD_EXP 79
21275: AND
21276: IFFALSE 21498
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21289: LD_ADDR_VAR 0 6
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_OWVAR 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 21
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 3
21318: PUSH
21319: LD_INT 23
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 69
21342: ST_TO_ADDR
// if not tmp then
21343: LD_VAR 0 6
21347: NOT
21348: IFFALSE 21352
// exit ;
21350: GO 21498
// s1 := rand ( 1 , 4 ) ;
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 1
21359: PPUSH
21360: LD_INT 4
21362: PPUSH
21363: CALL_OW 12
21367: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21368: LD_ADDR_VAR 0 4
21372: PUSH
21373: LD_VAR 0 6
21377: PUSH
21378: LD_INT 1
21380: ARRAY
21381: PPUSH
21382: LD_VAR 0 2
21386: PPUSH
21387: CALL_OW 259
21391: ST_TO_ADDR
// if s1 = 1 then
21392: LD_VAR 0 2
21396: PUSH
21397: LD_INT 1
21399: EQUAL
21400: IFFALSE 21420
// s2 := rand ( 2 , 4 ) else
21402: LD_ADDR_VAR 0 3
21406: PUSH
21407: LD_INT 2
21409: PPUSH
21410: LD_INT 4
21412: PPUSH
21413: CALL_OW 12
21417: ST_TO_ADDR
21418: GO 21428
// s2 := 1 ;
21420: LD_ADDR_VAR 0 3
21424: PUSH
21425: LD_INT 1
21427: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21428: LD_ADDR_VAR 0 5
21432: PUSH
21433: LD_VAR 0 6
21437: PUSH
21438: LD_INT 1
21440: ARRAY
21441: PPUSH
21442: LD_VAR 0 3
21446: PPUSH
21447: CALL_OW 259
21451: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21452: LD_VAR 0 6
21456: PUSH
21457: LD_INT 1
21459: ARRAY
21460: PPUSH
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_VAR 0 5
21470: PPUSH
21471: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21475: LD_VAR 0 6
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PPUSH
21484: LD_VAR 0 3
21488: PPUSH
21489: LD_VAR 0 4
21493: PPUSH
21494: CALL_OW 237
// end ;
21498: PPOPN 6
21500: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21501: LD_EXP 33
21505: PUSH
21506: LD_EXP 80
21510: AND
21511: IFFALSE 21590
21513: GO 21515
21515: DISABLE
21516: LD_INT 0
21518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21519: LD_ADDR_VAR 0 1
21523: PUSH
21524: LD_INT 22
21526: PUSH
21527: LD_OWVAR 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 30
21538: PUSH
21539: LD_INT 3
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PPUSH
21550: CALL_OW 69
21554: ST_TO_ADDR
// if not tmp then
21555: LD_VAR 0 1
21559: NOT
21560: IFFALSE 21564
// exit ;
21562: GO 21590
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21564: LD_VAR 0 1
21568: PUSH
21569: LD_INT 1
21571: PPUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 12
21581: ARRAY
21582: PPUSH
21583: LD_INT 1
21585: PPUSH
21586: CALL_OW 234
// end ;
21590: PPOPN 1
21592: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21593: LD_EXP 33
21597: PUSH
21598: LD_EXP 81
21602: AND
21603: IFFALSE 21715
21605: GO 21607
21607: DISABLE
21608: LD_INT 0
21610: PPUSH
21611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: LD_INT 22
21619: PUSH
21620: LD_OWVAR 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 30
21634: PUSH
21635: LD_INT 27
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 30
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 30
21654: PUSH
21655: LD_INT 28
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 69
21676: ST_TO_ADDR
// if not tmp then
21677: LD_VAR 0 2
21681: NOT
21682: IFFALSE 21686
// exit ;
21684: GO 21715
// for i in tmp do
21686: LD_ADDR_VAR 0 1
21690: PUSH
21691: LD_VAR 0 2
21695: PUSH
21696: FOR_IN
21697: IFFALSE 21713
// SetLives ( i , 1 ) ;
21699: LD_VAR 0 1
21703: PPUSH
21704: LD_INT 1
21706: PPUSH
21707: CALL_OW 234
21711: GO 21696
21713: POP
21714: POP
// end ;
21715: PPOPN 2
21717: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21718: LD_EXP 33
21722: PUSH
21723: LD_EXP 82
21727: AND
21728: IFFALSE 22015
21730: GO 21732
21732: DISABLE
21733: LD_INT 0
21735: PPUSH
21736: PPUSH
21737: PPUSH
// begin i := rand ( 1 , 7 ) ;
21738: LD_ADDR_VAR 0 1
21742: PUSH
21743: LD_INT 1
21745: PPUSH
21746: LD_INT 7
21748: PPUSH
21749: CALL_OW 12
21753: ST_TO_ADDR
// case i of 1 :
21754: LD_VAR 0 1
21758: PUSH
21759: LD_INT 1
21761: DOUBLE
21762: EQUAL
21763: IFTRUE 21767
21765: GO 21777
21767: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21768: LD_STRING earthquake(getX(game), 0, 32)
21770: PPUSH
21771: CALL_OW 559
21775: GO 22015
21777: LD_INT 2
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21799
21785: POP
// begin ToLua ( displayStucuk(); ) ;
21786: LD_STRING displayStucuk();
21788: PPUSH
21789: CALL_OW 559
// ResetFog ;
21793: CALL_OW 335
// end ; 3 :
21797: GO 22015
21799: LD_INT 3
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21911
21807: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21808: LD_ADDR_VAR 0 2
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_OWVAR 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 25
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PPUSH
21839: CALL_OW 69
21843: ST_TO_ADDR
// if not tmp then
21844: LD_VAR 0 2
21848: NOT
21849: IFFALSE 21853
// exit ;
21851: GO 22015
// un := tmp [ rand ( 1 , tmp ) ] ;
21853: LD_ADDR_VAR 0 3
21857: PUSH
21858: LD_VAR 0 2
21862: PUSH
21863: LD_INT 1
21865: PPUSH
21866: LD_VAR 0 2
21870: PPUSH
21871: CALL_OW 12
21875: ARRAY
21876: ST_TO_ADDR
// if Crawls ( un ) then
21877: LD_VAR 0 3
21881: PPUSH
21882: CALL_OW 318
21886: IFFALSE 21897
// ComWalk ( un ) ;
21888: LD_VAR 0 3
21892: PPUSH
21893: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21897: LD_VAR 0 3
21901: PPUSH
21902: LD_INT 8
21904: PPUSH
21905: CALL_OW 336
// end ; 4 :
21909: GO 22015
21911: LD_INT 4
21913: DOUBLE
21914: EQUAL
21915: IFTRUE 21919
21917: GO 21993
21919: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: LD_INT 22
21927: PUSH
21928: LD_OWVAR 2
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 30
21939: PUSH
21940: LD_INT 29
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PPUSH
21951: CALL_OW 69
21955: ST_TO_ADDR
// if not tmp then
21956: LD_VAR 0 2
21960: NOT
21961: IFFALSE 21965
// exit ;
21963: GO 22015
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21965: LD_VAR 0 2
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21978: LD_VAR 0 2
21982: PUSH
21983: LD_INT 1
21985: ARRAY
21986: PPUSH
21987: CALL_OW 65
// end ; 5 .. 7 :
21991: GO 22015
21993: LD_INT 5
21995: DOUBLE
21996: GREATEREQUAL
21997: IFFALSE 22005
21999: LD_INT 7
22001: DOUBLE
22002: LESSEQUAL
22003: IFTRUE 22007
22005: GO 22014
22007: POP
// StreamSibBomb ; end ;
22008: CALL 18252 0 0
22012: GO 22015
22014: POP
// end ;
22015: PPOPN 3
22017: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22018: LD_EXP 33
22022: PUSH
22023: LD_EXP 83
22027: AND
22028: IFFALSE 22184
22030: GO 22032
22032: DISABLE
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
22037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22038: LD_ADDR_VAR 0 2
22042: PUSH
22043: LD_INT 81
22045: PUSH
22046: LD_OWVAR 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 21
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 21
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PPUSH
22087: CALL_OW 69
22091: ST_TO_ADDR
// if not tmp then
22092: LD_VAR 0 2
22096: NOT
22097: IFFALSE 22101
// exit ;
22099: GO 22184
// p := 0 ;
22101: LD_ADDR_VAR 0 3
22105: PUSH
22106: LD_INT 0
22108: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22109: LD_INT 35
22111: PPUSH
22112: CALL_OW 67
// p := p + 1 ;
22116: LD_ADDR_VAR 0 3
22120: PUSH
22121: LD_VAR 0 3
22125: PUSH
22126: LD_INT 1
22128: PLUS
22129: ST_TO_ADDR
// for i in tmp do
22130: LD_ADDR_VAR 0 1
22134: PUSH
22135: LD_VAR 0 2
22139: PUSH
22140: FOR_IN
22141: IFFALSE 22172
// if GetLives ( i ) < 1000 then
22143: LD_VAR 0 1
22147: PPUSH
22148: CALL_OW 256
22152: PUSH
22153: LD_INT 1000
22155: LESS
22156: IFFALSE 22170
// SetLives ( i , 1000 ) ;
22158: LD_VAR 0 1
22162: PPUSH
22163: LD_INT 1000
22165: PPUSH
22166: CALL_OW 234
22170: GO 22140
22172: POP
22173: POP
// until p > 20 ;
22174: LD_VAR 0 3
22178: PUSH
22179: LD_INT 20
22181: GREATER
22182: IFFALSE 22109
// end ;
22184: PPOPN 3
22186: END
// every 0 0$1 trigger StreamModeActive and sTime do
22187: LD_EXP 33
22191: PUSH
22192: LD_EXP 84
22196: AND
22197: IFFALSE 22232
22199: GO 22201
22201: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22202: LD_INT 28
22204: PPUSH
22205: LD_OWVAR 2
22209: PPUSH
22210: LD_INT 2
22212: PPUSH
22213: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22217: LD_INT 30
22219: PPUSH
22220: LD_OWVAR 2
22224: PPUSH
22225: LD_INT 2
22227: PPUSH
22228: CALL_OW 322
// end ;
22232: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22233: LD_EXP 33
22237: PUSH
22238: LD_EXP 85
22242: AND
22243: IFFALSE 22364
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
22251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22252: LD_ADDR_VAR 0 2
22256: PUSH
22257: LD_INT 22
22259: PUSH
22260: LD_OWVAR 2
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 21
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 3
22281: PUSH
22282: LD_INT 23
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: PPUSH
22301: CALL_OW 69
22305: ST_TO_ADDR
// if not tmp then
22306: LD_VAR 0 2
22310: NOT
22311: IFFALSE 22315
// exit ;
22313: GO 22364
// for i in tmp do
22315: LD_ADDR_VAR 0 1
22319: PUSH
22320: LD_VAR 0 2
22324: PUSH
22325: FOR_IN
22326: IFFALSE 22362
// begin if Crawls ( i ) then
22328: LD_VAR 0 1
22332: PPUSH
22333: CALL_OW 318
22337: IFFALSE 22348
// ComWalk ( i ) ;
22339: LD_VAR 0 1
22343: PPUSH
22344: CALL_OW 138
// SetClass ( i , 2 ) ;
22348: LD_VAR 0 1
22352: PPUSH
22353: LD_INT 2
22355: PPUSH
22356: CALL_OW 336
// end ;
22360: GO 22325
22362: POP
22363: POP
// end ;
22364: PPOPN 2
22366: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22367: LD_EXP 33
22371: PUSH
22372: LD_EXP 86
22376: AND
22377: IFFALSE 22665
22379: GO 22381
22381: DISABLE
22382: LD_INT 0
22384: PPUSH
22385: PPUSH
22386: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22387: LD_OWVAR 2
22391: PPUSH
22392: LD_INT 9
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22405: LD_INT 9
22407: PPUSH
22408: LD_OWVAR 2
22412: PPUSH
22413: CALL_OW 343
// uc_side := 9 ;
22417: LD_ADDR_OWVAR 20
22421: PUSH
22422: LD_INT 9
22424: ST_TO_ADDR
// uc_nation := 2 ;
22425: LD_ADDR_OWVAR 21
22429: PUSH
22430: LD_INT 2
22432: ST_TO_ADDR
// hc_name := Dark Warrior ;
22433: LD_ADDR_OWVAR 26
22437: PUSH
22438: LD_STRING Dark Warrior
22440: ST_TO_ADDR
// hc_gallery :=  ;
22441: LD_ADDR_OWVAR 33
22445: PUSH
22446: LD_STRING 
22448: ST_TO_ADDR
// hc_noskilllimit := true ;
22449: LD_ADDR_OWVAR 76
22453: PUSH
22454: LD_INT 1
22456: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22457: LD_ADDR_OWVAR 31
22461: PUSH
22462: LD_INT 30
22464: PUSH
22465: LD_INT 30
22467: PUSH
22468: LD_INT 30
22470: PUSH
22471: LD_INT 30
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: ST_TO_ADDR
// un := CreateHuman ;
22480: LD_ADDR_VAR 0 3
22484: PUSH
22485: CALL_OW 44
22489: ST_TO_ADDR
// hc_noskilllimit := false ;
22490: LD_ADDR_OWVAR 76
22494: PUSH
22495: LD_INT 0
22497: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 51
// ToLua ( playRanger() ) ;
22510: LD_STRING playRanger()
22512: PPUSH
22513: CALL_OW 559
// p := 0 ;
22517: LD_ADDR_VAR 0 2
22521: PUSH
22522: LD_INT 0
22524: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22525: LD_INT 35
22527: PPUSH
22528: CALL_OW 67
// p := p + 1 ;
22532: LD_ADDR_VAR 0 2
22536: PUSH
22537: LD_VAR 0 2
22541: PUSH
22542: LD_INT 1
22544: PLUS
22545: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22546: LD_VAR 0 3
22550: PPUSH
22551: CALL_OW 256
22555: PUSH
22556: LD_INT 1000
22558: LESS
22559: IFFALSE 22573
// SetLives ( un , 1000 ) ;
22561: LD_VAR 0 3
22565: PPUSH
22566: LD_INT 1000
22568: PPUSH
22569: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22573: LD_VAR 0 3
22577: PPUSH
22578: LD_INT 81
22580: PUSH
22581: LD_OWVAR 2
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 91
22592: PUSH
22593: LD_VAR 0 3
22597: PUSH
22598: LD_INT 30
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PPUSH
22610: CALL_OW 69
22614: PPUSH
22615: LD_VAR 0 3
22619: PPUSH
22620: CALL_OW 74
22624: PPUSH
22625: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22629: LD_VAR 0 2
22633: PUSH
22634: LD_INT 80
22636: GREATER
22637: PUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: CALL_OW 301
22647: OR
22648: IFFALSE 22525
// if un then
22650: LD_VAR 0 3
22654: IFFALSE 22665
// RemoveUnit ( un ) ;
22656: LD_VAR 0 3
22660: PPUSH
22661: CALL_OW 64
// end ;
22665: PPOPN 3
22667: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22668: LD_EXP 87
22672: IFFALSE 22788
22674: GO 22676
22676: DISABLE
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22682: LD_ADDR_VAR 0 2
22686: PUSH
22687: LD_INT 81
22689: PUSH
22690: LD_OWVAR 2
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 21
22701: PUSH
22702: LD_INT 1
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PPUSH
22713: CALL_OW 69
22717: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22718: LD_STRING playComputer()
22720: PPUSH
22721: CALL_OW 559
// if not tmp then
22725: LD_VAR 0 2
22729: NOT
22730: IFFALSE 22734
// exit ;
22732: GO 22788
// for i in tmp do
22734: LD_ADDR_VAR 0 1
22738: PUSH
22739: LD_VAR 0 2
22743: PUSH
22744: FOR_IN
22745: IFFALSE 22786
// for j := 1 to 4 do
22747: LD_ADDR_VAR 0 3
22751: PUSH
22752: DOUBLE
22753: LD_INT 1
22755: DEC
22756: ST_TO_ADDR
22757: LD_INT 4
22759: PUSH
22760: FOR_TO
22761: IFFALSE 22782
// SetSkill ( i , j , 10 ) ;
22763: LD_VAR 0 1
22767: PPUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: LD_INT 10
22775: PPUSH
22776: CALL_OW 237
22780: GO 22760
22782: POP
22783: POP
22784: GO 22744
22786: POP
22787: POP
// end ;
22788: PPOPN 3
22790: END
// every 0 0$1 trigger s30 do var i , tmp ;
22791: LD_EXP 88
22795: IFFALSE 22864
22797: GO 22799
22799: DISABLE
22800: LD_INT 0
22802: PPUSH
22803: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 22
22811: PUSH
22812: LD_OWVAR 2
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PPUSH
22821: CALL_OW 69
22825: ST_TO_ADDR
// if not tmp then
22826: LD_VAR 0 2
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 22864
// for i in tmp do
22835: LD_ADDR_VAR 0 1
22839: PUSH
22840: LD_VAR 0 2
22844: PUSH
22845: FOR_IN
22846: IFFALSE 22862
// SetLives ( i , 300 ) ;
22848: LD_VAR 0 1
22852: PPUSH
22853: LD_INT 300
22855: PPUSH
22856: CALL_OW 234
22860: GO 22845
22862: POP
22863: POP
// end ;
22864: PPOPN 2
22866: END
// every 0 0$1 trigger s60 do var i , tmp ;
22867: LD_EXP 89
22871: IFFALSE 22940
22873: GO 22875
22875: DISABLE
22876: LD_INT 0
22878: PPUSH
22879: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22880: LD_ADDR_VAR 0 2
22884: PUSH
22885: LD_INT 22
22887: PUSH
22888: LD_OWVAR 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PPUSH
22897: CALL_OW 69
22901: ST_TO_ADDR
// if not tmp then
22902: LD_VAR 0 2
22906: NOT
22907: IFFALSE 22911
// exit ;
22909: GO 22940
// for i in tmp do
22911: LD_ADDR_VAR 0 1
22915: PUSH
22916: LD_VAR 0 2
22920: PUSH
22921: FOR_IN
22922: IFFALSE 22938
// SetLives ( i , 600 ) ;
22924: LD_VAR 0 1
22928: PPUSH
22929: LD_INT 600
22931: PPUSH
22932: CALL_OW 234
22936: GO 22921
22938: POP
22939: POP
// end ;
22940: PPOPN 2
22942: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22943: LD_INT 0
22945: PPUSH
// case cmd of 301 :
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 301
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 22991
22959: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22960: LD_VAR 0 6
22964: PPUSH
22965: LD_VAR 0 7
22969: PPUSH
22970: LD_VAR 0 8
22974: PPUSH
22975: LD_VAR 0 4
22979: PPUSH
22980: LD_VAR 0 5
22984: PPUSH
22985: CALL 24192 0 5
22989: GO 23112
22991: LD_INT 302
22993: DOUBLE
22994: EQUAL
22995: IFTRUE 22999
22997: GO 23036
22999: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23000: LD_VAR 0 6
23004: PPUSH
23005: LD_VAR 0 7
23009: PPUSH
23010: LD_VAR 0 8
23014: PPUSH
23015: LD_VAR 0 9
23019: PPUSH
23020: LD_VAR 0 4
23024: PPUSH
23025: LD_VAR 0 5
23029: PPUSH
23030: CALL 24283 0 6
23034: GO 23112
23036: LD_INT 303
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23081
23044: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23045: LD_VAR 0 6
23049: PPUSH
23050: LD_VAR 0 7
23054: PPUSH
23055: LD_VAR 0 8
23059: PPUSH
23060: LD_VAR 0 9
23064: PPUSH
23065: LD_VAR 0 4
23069: PPUSH
23070: LD_VAR 0 5
23074: PPUSH
23075: CALL 23117 0 6
23079: GO 23112
23081: LD_INT 304
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23111
23089: POP
// hHackTeleport ( unit , x , y ) ; end ;
23090: LD_VAR 0 2
23094: PPUSH
23095: LD_VAR 0 4
23099: PPUSH
23100: LD_VAR 0 5
23104: PPUSH
23105: CALL 24876 0 3
23109: GO 23112
23111: POP
// end ;
23112: LD_VAR 0 12
23116: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23121: LD_VAR 0 1
23125: PUSH
23126: LD_INT 1
23128: LESS
23129: PUSH
23130: LD_VAR 0 1
23134: PUSH
23135: LD_INT 3
23137: GREATER
23138: OR
23139: PUSH
23140: LD_VAR 0 5
23144: PPUSH
23145: LD_VAR 0 6
23149: PPUSH
23150: CALL_OW 428
23154: OR
23155: IFFALSE 23159
// exit ;
23157: GO 23879
// uc_side := your_side ;
23159: LD_ADDR_OWVAR 20
23163: PUSH
23164: LD_OWVAR 2
23168: ST_TO_ADDR
// uc_nation := nation ;
23169: LD_ADDR_OWVAR 21
23173: PUSH
23174: LD_VAR 0 1
23178: ST_TO_ADDR
// bc_level = 1 ;
23179: LD_ADDR_OWVAR 43
23183: PUSH
23184: LD_INT 1
23186: ST_TO_ADDR
// case btype of 1 :
23187: LD_VAR 0 2
23191: PUSH
23192: LD_INT 1
23194: DOUBLE
23195: EQUAL
23196: IFTRUE 23200
23198: GO 23211
23200: POP
// bc_type := b_depot ; 2 :
23201: LD_ADDR_OWVAR 42
23205: PUSH
23206: LD_INT 0
23208: ST_TO_ADDR
23209: GO 23823
23211: LD_INT 2
23213: DOUBLE
23214: EQUAL
23215: IFTRUE 23219
23217: GO 23230
23219: POP
// bc_type := b_warehouse ; 3 :
23220: LD_ADDR_OWVAR 42
23224: PUSH
23225: LD_INT 1
23227: ST_TO_ADDR
23228: GO 23823
23230: LD_INT 3
23232: DOUBLE
23233: EQUAL
23234: IFTRUE 23238
23236: GO 23249
23238: POP
// bc_type := b_lab ; 4 .. 9 :
23239: LD_ADDR_OWVAR 42
23243: PUSH
23244: LD_INT 6
23246: ST_TO_ADDR
23247: GO 23823
23249: LD_INT 4
23251: DOUBLE
23252: GREATEREQUAL
23253: IFFALSE 23261
23255: LD_INT 9
23257: DOUBLE
23258: LESSEQUAL
23259: IFTRUE 23263
23261: GO 23315
23263: POP
// begin bc_type := b_lab_half ;
23264: LD_ADDR_OWVAR 42
23268: PUSH
23269: LD_INT 7
23271: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23272: LD_ADDR_OWVAR 44
23276: PUSH
23277: LD_INT 10
23279: PUSH
23280: LD_INT 11
23282: PUSH
23283: LD_INT 12
23285: PUSH
23286: LD_INT 15
23288: PUSH
23289: LD_INT 14
23291: PUSH
23292: LD_INT 13
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: PUSH
23303: LD_VAR 0 2
23307: PUSH
23308: LD_INT 3
23310: MINUS
23311: ARRAY
23312: ST_TO_ADDR
// end ; 10 .. 13 :
23313: GO 23823
23315: LD_INT 10
23317: DOUBLE
23318: GREATEREQUAL
23319: IFFALSE 23327
23321: LD_INT 13
23323: DOUBLE
23324: LESSEQUAL
23325: IFTRUE 23329
23327: GO 23406
23329: POP
// begin bc_type := b_lab_full ;
23330: LD_ADDR_OWVAR 42
23334: PUSH
23335: LD_INT 8
23337: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23338: LD_ADDR_OWVAR 44
23342: PUSH
23343: LD_INT 10
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: LD_INT 14
23351: PUSH
23352: LD_INT 13
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: LD_VAR 0 2
23365: PUSH
23366: LD_INT 9
23368: MINUS
23369: ARRAY
23370: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23371: LD_ADDR_OWVAR 45
23375: PUSH
23376: LD_INT 11
23378: PUSH
23379: LD_INT 15
23381: PUSH
23382: LD_INT 12
23384: PUSH
23385: LD_INT 15
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: PUSH
23394: LD_VAR 0 2
23398: PUSH
23399: LD_INT 9
23401: MINUS
23402: ARRAY
23403: ST_TO_ADDR
// end ; 14 :
23404: GO 23823
23406: LD_INT 14
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23425
23414: POP
// bc_type := b_workshop ; 15 :
23415: LD_ADDR_OWVAR 42
23419: PUSH
23420: LD_INT 2
23422: ST_TO_ADDR
23423: GO 23823
23425: LD_INT 15
23427: DOUBLE
23428: EQUAL
23429: IFTRUE 23433
23431: GO 23444
23433: POP
// bc_type := b_factory ; 16 :
23434: LD_ADDR_OWVAR 42
23438: PUSH
23439: LD_INT 3
23441: ST_TO_ADDR
23442: GO 23823
23444: LD_INT 16
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23463
23452: POP
// bc_type := b_ext_gun ; 17 :
23453: LD_ADDR_OWVAR 42
23457: PUSH
23458: LD_INT 17
23460: ST_TO_ADDR
23461: GO 23823
23463: LD_INT 17
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23499
23471: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23472: LD_ADDR_OWVAR 42
23476: PUSH
23477: LD_INT 19
23479: PUSH
23480: LD_INT 23
23482: PUSH
23483: LD_INT 19
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: PUSH
23491: LD_VAR 0 1
23495: ARRAY
23496: ST_TO_ADDR
23497: GO 23823
23499: LD_INT 18
23501: DOUBLE
23502: EQUAL
23503: IFTRUE 23507
23505: GO 23518
23507: POP
// bc_type := b_ext_radar ; 19 :
23508: LD_ADDR_OWVAR 42
23512: PUSH
23513: LD_INT 20
23515: ST_TO_ADDR
23516: GO 23823
23518: LD_INT 19
23520: DOUBLE
23521: EQUAL
23522: IFTRUE 23526
23524: GO 23537
23526: POP
// bc_type := b_ext_radio ; 20 :
23527: LD_ADDR_OWVAR 42
23531: PUSH
23532: LD_INT 22
23534: ST_TO_ADDR
23535: GO 23823
23537: LD_INT 20
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23556
23545: POP
// bc_type := b_ext_siberium ; 21 :
23546: LD_ADDR_OWVAR 42
23550: PUSH
23551: LD_INT 21
23553: ST_TO_ADDR
23554: GO 23823
23556: LD_INT 21
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23564
23562: GO 23575
23564: POP
// bc_type := b_ext_computer ; 22 :
23565: LD_ADDR_OWVAR 42
23569: PUSH
23570: LD_INT 24
23572: ST_TO_ADDR
23573: GO 23823
23575: LD_INT 22
23577: DOUBLE
23578: EQUAL
23579: IFTRUE 23583
23581: GO 23594
23583: POP
// bc_type := b_ext_track ; 23 :
23584: LD_ADDR_OWVAR 42
23588: PUSH
23589: LD_INT 16
23591: ST_TO_ADDR
23592: GO 23823
23594: LD_INT 23
23596: DOUBLE
23597: EQUAL
23598: IFTRUE 23602
23600: GO 23613
23602: POP
// bc_type := b_ext_laser ; 24 :
23603: LD_ADDR_OWVAR 42
23607: PUSH
23608: LD_INT 25
23610: ST_TO_ADDR
23611: GO 23823
23613: LD_INT 24
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23632
23621: POP
// bc_type := b_control_tower ; 25 :
23622: LD_ADDR_OWVAR 42
23626: PUSH
23627: LD_INT 36
23629: ST_TO_ADDR
23630: GO 23823
23632: LD_INT 25
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23651
23640: POP
// bc_type := b_breastwork ; 26 :
23641: LD_ADDR_OWVAR 42
23645: PUSH
23646: LD_INT 31
23648: ST_TO_ADDR
23649: GO 23823
23651: LD_INT 26
23653: DOUBLE
23654: EQUAL
23655: IFTRUE 23659
23657: GO 23670
23659: POP
// bc_type := b_bunker ; 27 :
23660: LD_ADDR_OWVAR 42
23664: PUSH
23665: LD_INT 32
23667: ST_TO_ADDR
23668: GO 23823
23670: LD_INT 27
23672: DOUBLE
23673: EQUAL
23674: IFTRUE 23678
23676: GO 23689
23678: POP
// bc_type := b_turret ; 28 :
23679: LD_ADDR_OWVAR 42
23683: PUSH
23684: LD_INT 33
23686: ST_TO_ADDR
23687: GO 23823
23689: LD_INT 28
23691: DOUBLE
23692: EQUAL
23693: IFTRUE 23697
23695: GO 23708
23697: POP
// bc_type := b_armoury ; 29 :
23698: LD_ADDR_OWVAR 42
23702: PUSH
23703: LD_INT 4
23705: ST_TO_ADDR
23706: GO 23823
23708: LD_INT 29
23710: DOUBLE
23711: EQUAL
23712: IFTRUE 23716
23714: GO 23727
23716: POP
// bc_type := b_barracks ; 30 :
23717: LD_ADDR_OWVAR 42
23721: PUSH
23722: LD_INT 5
23724: ST_TO_ADDR
23725: GO 23823
23727: LD_INT 30
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23746
23735: POP
// bc_type := b_solar_power ; 31 :
23736: LD_ADDR_OWVAR 42
23740: PUSH
23741: LD_INT 27
23743: ST_TO_ADDR
23744: GO 23823
23746: LD_INT 31
23748: DOUBLE
23749: EQUAL
23750: IFTRUE 23754
23752: GO 23765
23754: POP
// bc_type := b_oil_power ; 32 :
23755: LD_ADDR_OWVAR 42
23759: PUSH
23760: LD_INT 26
23762: ST_TO_ADDR
23763: GO 23823
23765: LD_INT 32
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 23784
23773: POP
// bc_type := b_siberite_power ; 33 :
23774: LD_ADDR_OWVAR 42
23778: PUSH
23779: LD_INT 28
23781: ST_TO_ADDR
23782: GO 23823
23784: LD_INT 33
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23792
23790: GO 23803
23792: POP
// bc_type := b_oil_mine ; 34 :
23793: LD_ADDR_OWVAR 42
23797: PUSH
23798: LD_INT 29
23800: ST_TO_ADDR
23801: GO 23823
23803: LD_INT 34
23805: DOUBLE
23806: EQUAL
23807: IFTRUE 23811
23809: GO 23822
23811: POP
// bc_type := b_siberite_mine ; end ;
23812: LD_ADDR_OWVAR 42
23816: PUSH
23817: LD_INT 30
23819: ST_TO_ADDR
23820: GO 23823
23822: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23823: LD_ADDR_VAR 0 8
23827: PUSH
23828: LD_VAR 0 5
23832: PPUSH
23833: LD_VAR 0 6
23837: PPUSH
23838: LD_VAR 0 3
23842: PPUSH
23843: CALL_OW 47
23847: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23848: LD_OWVAR 42
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: LD_INT 33
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: IN
23863: IFFALSE 23879
// PlaceWeaponTurret ( b , weapon ) ;
23865: LD_VAR 0 8
23869: PPUSH
23870: LD_VAR 0 4
23874: PPUSH
23875: CALL_OW 431
// end ;
23879: LD_VAR 0 7
23883: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23884: LD_INT 0
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23890: LD_ADDR_VAR 0 4
23894: PUSH
23895: LD_INT 22
23897: PUSH
23898: LD_OWVAR 2
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: LD_INT 30
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 30
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PPUSH
23939: CALL_OW 69
23943: ST_TO_ADDR
// if not tmp then
23944: LD_VAR 0 4
23948: NOT
23949: IFFALSE 23953
// exit ;
23951: GO 24012
// for i in tmp do
23953: LD_ADDR_VAR 0 2
23957: PUSH
23958: LD_VAR 0 4
23962: PUSH
23963: FOR_IN
23964: IFFALSE 24010
// for j = 1 to 3 do
23966: LD_ADDR_VAR 0 3
23970: PUSH
23971: DOUBLE
23972: LD_INT 1
23974: DEC
23975: ST_TO_ADDR
23976: LD_INT 3
23978: PUSH
23979: FOR_TO
23980: IFFALSE 24006
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23982: LD_VAR 0 2
23986: PPUSH
23987: CALL_OW 274
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_INT 99999
23999: PPUSH
24000: CALL_OW 277
24004: GO 23979
24006: POP
24007: POP
24008: GO 23963
24010: POP
24011: POP
// end ;
24012: LD_VAR 0 1
24016: RET
// export function hHackSetLevel10 ; var i , j ; begin
24017: LD_INT 0
24019: PPUSH
24020: PPUSH
24021: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24022: LD_ADDR_VAR 0 2
24026: PUSH
24027: LD_INT 21
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PPUSH
24037: CALL_OW 69
24041: PUSH
24042: FOR_IN
24043: IFFALSE 24095
// if IsSelected ( i ) then
24045: LD_VAR 0 2
24049: PPUSH
24050: CALL_OW 306
24054: IFFALSE 24093
// begin for j := 1 to 4 do
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: DOUBLE
24062: LD_INT 1
24064: DEC
24065: ST_TO_ADDR
24066: LD_INT 4
24068: PUSH
24069: FOR_TO
24070: IFFALSE 24091
// SetSkill ( i , j , 10 ) ;
24072: LD_VAR 0 2
24076: PPUSH
24077: LD_VAR 0 3
24081: PPUSH
24082: LD_INT 10
24084: PPUSH
24085: CALL_OW 237
24089: GO 24069
24091: POP
24092: POP
// end ;
24093: GO 24042
24095: POP
24096: POP
// end ;
24097: LD_VAR 0 1
24101: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24102: LD_INT 0
24104: PPUSH
24105: PPUSH
24106: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24107: LD_ADDR_VAR 0 2
24111: PUSH
24112: LD_INT 22
24114: PUSH
24115: LD_OWVAR 2
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PPUSH
24138: CALL_OW 69
24142: PUSH
24143: FOR_IN
24144: IFFALSE 24185
// begin for j := 1 to 4 do
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: DOUBLE
24152: LD_INT 1
24154: DEC
24155: ST_TO_ADDR
24156: LD_INT 4
24158: PUSH
24159: FOR_TO
24160: IFFALSE 24181
// SetSkill ( i , j , 10 ) ;
24162: LD_VAR 0 2
24166: PPUSH
24167: LD_VAR 0 3
24171: PPUSH
24172: LD_INT 10
24174: PPUSH
24175: CALL_OW 237
24179: GO 24159
24181: POP
24182: POP
// end ;
24183: GO 24143
24185: POP
24186: POP
// end ;
24187: LD_VAR 0 1
24191: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24192: LD_INT 0
24194: PPUSH
// uc_side := your_side ;
24195: LD_ADDR_OWVAR 20
24199: PUSH
24200: LD_OWVAR 2
24204: ST_TO_ADDR
// uc_nation := nation ;
24205: LD_ADDR_OWVAR 21
24209: PUSH
24210: LD_VAR 0 1
24214: ST_TO_ADDR
// InitHc ;
24215: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24219: LD_INT 0
24221: PPUSH
24222: LD_VAR 0 2
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24236: LD_VAR 0 4
24240: PPUSH
24241: LD_VAR 0 5
24245: PPUSH
24246: CALL_OW 428
24250: PUSH
24251: LD_INT 0
24253: EQUAL
24254: IFFALSE 24278
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24256: CALL_OW 44
24260: PPUSH
24261: LD_VAR 0 4
24265: PPUSH
24266: LD_VAR 0 5
24270: PPUSH
24271: LD_INT 1
24273: PPUSH
24274: CALL_OW 48
// end ;
24278: LD_VAR 0 6
24282: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24283: LD_INT 0
24285: PPUSH
24286: PPUSH
// uc_side := your_side ;
24287: LD_ADDR_OWVAR 20
24291: PUSH
24292: LD_OWVAR 2
24296: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24297: LD_VAR 0 1
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 3
24310: PUSH
24311: LD_INT 4
24313: PUSH
24314: LD_INT 5
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: IN
24324: IFFALSE 24336
// uc_nation := nation_american else
24326: LD_ADDR_OWVAR 21
24330: PUSH
24331: LD_INT 1
24333: ST_TO_ADDR
24334: GO 24379
// if chassis in [ 11 , 12 , 13 , 14 ] then
24336: LD_VAR 0 1
24340: PUSH
24341: LD_INT 11
24343: PUSH
24344: LD_INT 12
24346: PUSH
24347: LD_INT 13
24349: PUSH
24350: LD_INT 14
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: IN
24359: IFFALSE 24371
// uc_nation := nation_arabian else
24361: LD_ADDR_OWVAR 21
24365: PUSH
24366: LD_INT 2
24368: ST_TO_ADDR
24369: GO 24379
// uc_nation := nation_russian ;
24371: LD_ADDR_OWVAR 21
24375: PUSH
24376: LD_INT 3
24378: ST_TO_ADDR
// vc_chassis := chassis ;
24379: LD_ADDR_OWVAR 37
24383: PUSH
24384: LD_VAR 0 1
24388: ST_TO_ADDR
// vc_engine := engine ;
24389: LD_ADDR_OWVAR 39
24393: PUSH
24394: LD_VAR 0 2
24398: ST_TO_ADDR
// vc_control := control ;
24399: LD_ADDR_OWVAR 38
24403: PUSH
24404: LD_VAR 0 3
24408: ST_TO_ADDR
// vc_weapon := weapon ;
24409: LD_ADDR_OWVAR 40
24413: PUSH
24414: LD_VAR 0 4
24418: ST_TO_ADDR
// un := CreateVehicle ;
24419: LD_ADDR_VAR 0 8
24423: PUSH
24424: CALL_OW 45
24428: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24429: LD_VAR 0 8
24433: PPUSH
24434: LD_INT 0
24436: PPUSH
24437: LD_INT 5
24439: PPUSH
24440: CALL_OW 12
24444: PPUSH
24445: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24449: LD_VAR 0 8
24453: PPUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: LD_VAR 0 6
24463: PPUSH
24464: LD_INT 1
24466: PPUSH
24467: CALL_OW 48
// end ;
24471: LD_VAR 0 7
24475: RET
// export hInvincible ; every 1 do
24476: GO 24478
24478: DISABLE
// hInvincible := [ ] ;
24479: LD_ADDR_EXP 90
24483: PUSH
24484: EMPTY
24485: ST_TO_ADDR
24486: END
// every 10 do var i ;
24487: GO 24489
24489: DISABLE
24490: LD_INT 0
24492: PPUSH
// begin enable ;
24493: ENABLE
// if not hInvincible then
24494: LD_EXP 90
24498: NOT
24499: IFFALSE 24503
// exit ;
24501: GO 24547
// for i in hInvincible do
24503: LD_ADDR_VAR 0 1
24507: PUSH
24508: LD_EXP 90
24512: PUSH
24513: FOR_IN
24514: IFFALSE 24545
// if GetLives ( i ) < 1000 then
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 256
24525: PUSH
24526: LD_INT 1000
24528: LESS
24529: IFFALSE 24543
// SetLives ( i , 1000 ) ;
24531: LD_VAR 0 1
24535: PPUSH
24536: LD_INT 1000
24538: PPUSH
24539: CALL_OW 234
24543: GO 24513
24545: POP
24546: POP
// end ;
24547: PPOPN 1
24549: END
// export function hHackInvincible ; var i ; begin
24550: LD_INT 0
24552: PPUSH
24553: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: LD_INT 21
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 21
24574: PUSH
24575: LD_INT 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: PPUSH
24587: CALL_OW 69
24591: PUSH
24592: FOR_IN
24593: IFFALSE 24654
// if IsSelected ( i ) then
24595: LD_VAR 0 2
24599: PPUSH
24600: CALL_OW 306
24604: IFFALSE 24652
// begin if i in hInvincible then
24606: LD_VAR 0 2
24610: PUSH
24611: LD_EXP 90
24615: IN
24616: IFFALSE 24636
// hInvincible := hInvincible diff i else
24618: LD_ADDR_EXP 90
24622: PUSH
24623: LD_EXP 90
24627: PUSH
24628: LD_VAR 0 2
24632: DIFF
24633: ST_TO_ADDR
24634: GO 24652
// hInvincible := hInvincible union i ;
24636: LD_ADDR_EXP 90
24640: PUSH
24641: LD_EXP 90
24645: PUSH
24646: LD_VAR 0 2
24650: UNION
24651: ST_TO_ADDR
// end ;
24652: GO 24592
24654: POP
24655: POP
// end ;
24656: LD_VAR 0 1
24660: RET
// export function hHackInvisible ; var i , j ; begin
24661: LD_INT 0
24663: PPUSH
24664: PPUSH
24665: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24666: LD_ADDR_VAR 0 2
24670: PUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PPUSH
24681: CALL_OW 69
24685: PUSH
24686: FOR_IN
24687: IFFALSE 24711
// if IsSelected ( i ) then
24689: LD_VAR 0 2
24693: PPUSH
24694: CALL_OW 306
24698: IFFALSE 24709
// ComForceInvisible ( i ) ;
24700: LD_VAR 0 2
24704: PPUSH
24705: CALL_OW 496
24709: GO 24686
24711: POP
24712: POP
// end ;
24713: LD_VAR 0 1
24717: RET
// export function hHackChangeYourSide ; begin
24718: LD_INT 0
24720: PPUSH
// if your_side = 8 then
24721: LD_OWVAR 2
24725: PUSH
24726: LD_INT 8
24728: EQUAL
24729: IFFALSE 24741
// your_side := 0 else
24731: LD_ADDR_OWVAR 2
24735: PUSH
24736: LD_INT 0
24738: ST_TO_ADDR
24739: GO 24755
// your_side := your_side + 1 ;
24741: LD_ADDR_OWVAR 2
24745: PUSH
24746: LD_OWVAR 2
24750: PUSH
24751: LD_INT 1
24753: PLUS
24754: ST_TO_ADDR
// end ;
24755: LD_VAR 0 1
24759: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24760: LD_INT 0
24762: PPUSH
24763: PPUSH
24764: PPUSH
// for i in all_units do
24765: LD_ADDR_VAR 0 2
24769: PUSH
24770: LD_OWVAR 3
24774: PUSH
24775: FOR_IN
24776: IFFALSE 24854
// if IsSelected ( i ) then
24778: LD_VAR 0 2
24782: PPUSH
24783: CALL_OW 306
24787: IFFALSE 24852
// begin j := GetSide ( i ) ;
24789: LD_ADDR_VAR 0 3
24793: PUSH
24794: LD_VAR 0 2
24798: PPUSH
24799: CALL_OW 255
24803: ST_TO_ADDR
// if j = 8 then
24804: LD_VAR 0 3
24808: PUSH
24809: LD_INT 8
24811: EQUAL
24812: IFFALSE 24824
// j := 0 else
24814: LD_ADDR_VAR 0 3
24818: PUSH
24819: LD_INT 0
24821: ST_TO_ADDR
24822: GO 24838
// j := j + 1 ;
24824: LD_ADDR_VAR 0 3
24828: PUSH
24829: LD_VAR 0 3
24833: PUSH
24834: LD_INT 1
24836: PLUS
24837: ST_TO_ADDR
// SetSide ( i , j ) ;
24838: LD_VAR 0 2
24842: PPUSH
24843: LD_VAR 0 3
24847: PPUSH
24848: CALL_OW 235
// end ;
24852: GO 24775
24854: POP
24855: POP
// end ;
24856: LD_VAR 0 1
24860: RET
// export function hHackFog ; begin
24861: LD_INT 0
24863: PPUSH
// FogOff ( true ) ;
24864: LD_INT 1
24866: PPUSH
24867: CALL_OW 344
// end ;
24871: LD_VAR 0 1
24875: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24876: LD_INT 0
24878: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_VAR 0 2
24888: PPUSH
24889: LD_VAR 0 3
24893: PPUSH
24894: LD_INT 1
24896: PPUSH
24897: LD_INT 1
24899: PPUSH
24900: CALL_OW 483
// CenterOnXY ( x , y ) ;
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 3
24913: PPUSH
24914: CALL_OW 84
// end ; end_of_file
24918: LD_VAR 0 4
24922: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24923: LD_INT 0
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24929: LD_VAR 0 1
24933: PPUSH
24934: CALL_OW 264
24938: PUSH
24939: LD_EXP 18
24943: EQUAL
24944: IFFALSE 25016
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24946: LD_INT 68
24948: PPUSH
24949: LD_VAR 0 1
24953: PPUSH
24954: CALL_OW 255
24958: PPUSH
24959: CALL_OW 321
24963: PUSH
24964: LD_INT 2
24966: EQUAL
24967: IFFALSE 24979
// eff := 70 else
24969: LD_ADDR_VAR 0 4
24973: PUSH
24974: LD_INT 70
24976: ST_TO_ADDR
24977: GO 24987
// eff := 30 ;
24979: LD_ADDR_VAR 0 4
24983: PUSH
24984: LD_INT 30
24986: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24987: LD_VAR 0 1
24991: PPUSH
24992: CALL_OW 250
24996: PPUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 251
25006: PPUSH
25007: LD_VAR 0 4
25011: PPUSH
25012: CALL_OW 495
// end ; end ;
25016: LD_VAR 0 2
25020: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25021: LD_INT 0
25023: PPUSH
// end ;
25024: LD_VAR 0 4
25028: RET
// export function SOS_Command ( cmd ) ; begin
25029: LD_INT 0
25031: PPUSH
// end ;
25032: LD_VAR 0 2
25036: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25037: LD_INT 0
25039: PPUSH
// end ;
25040: LD_VAR 0 6
25044: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25045: LD_INT 0
25047: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25048: LD_VAR 0 1
25052: PUSH
25053: LD_INT 250
25055: EQUAL
25056: PUSH
25057: LD_VAR 0 2
25061: PPUSH
25062: CALL_OW 264
25066: PUSH
25067: LD_EXP 21
25071: EQUAL
25072: AND
25073: IFFALSE 25094
// MinerPlaceMine ( unit , x , y ) ;
25075: LD_VAR 0 2
25079: PPUSH
25080: LD_VAR 0 4
25084: PPUSH
25085: LD_VAR 0 5
25089: PPUSH
25090: CALL 27443 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25094: LD_VAR 0 1
25098: PUSH
25099: LD_INT 251
25101: EQUAL
25102: PUSH
25103: LD_VAR 0 2
25107: PPUSH
25108: CALL_OW 264
25112: PUSH
25113: LD_EXP 21
25117: EQUAL
25118: AND
25119: IFFALSE 25140
// MinerDetonateMine ( unit , x , y ) ;
25121: LD_VAR 0 2
25125: PPUSH
25126: LD_VAR 0 4
25130: PPUSH
25131: LD_VAR 0 5
25135: PPUSH
25136: CALL 27720 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25140: LD_VAR 0 1
25144: PUSH
25145: LD_INT 252
25147: EQUAL
25148: PUSH
25149: LD_VAR 0 2
25153: PPUSH
25154: CALL_OW 264
25158: PUSH
25159: LD_EXP 21
25163: EQUAL
25164: AND
25165: IFFALSE 25186
// MinerCreateMinefield ( unit , x , y ) ;
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_VAR 0 4
25176: PPUSH
25177: LD_VAR 0 5
25181: PPUSH
25182: CALL 28137 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25186: LD_VAR 0 1
25190: PUSH
25191: LD_INT 253
25193: EQUAL
25194: PUSH
25195: LD_VAR 0 2
25199: PPUSH
25200: CALL_OW 257
25204: PUSH
25205: LD_INT 5
25207: EQUAL
25208: AND
25209: IFFALSE 25230
// ComBinocular ( unit , x , y ) ;
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_VAR 0 4
25220: PPUSH
25221: LD_VAR 0 5
25225: PPUSH
25226: CALL 28508 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25230: LD_VAR 0 1
25234: PUSH
25235: LD_INT 254
25237: EQUAL
25238: PUSH
25239: LD_VAR 0 2
25243: PPUSH
25244: CALL_OW 264
25248: PUSH
25249: LD_EXP 16
25253: EQUAL
25254: AND
25255: PUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: CALL_OW 263
25265: PUSH
25266: LD_INT 3
25268: EQUAL
25269: AND
25270: IFFALSE 25286
// HackDestroyVehicle ( unit , selectedUnit ) ;
25272: LD_VAR 0 2
25276: PPUSH
25277: LD_VAR 0 3
25281: PPUSH
25282: CALL 26803 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25286: LD_VAR 0 1
25290: PUSH
25291: LD_INT 255
25293: EQUAL
25294: PUSH
25295: LD_VAR 0 2
25299: PPUSH
25300: CALL_OW 264
25304: PUSH
25305: LD_INT 14
25307: PUSH
25308: LD_INT 53
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: IN
25315: AND
25316: PUSH
25317: LD_VAR 0 4
25321: PPUSH
25322: LD_VAR 0 5
25326: PPUSH
25327: CALL_OW 488
25331: AND
25332: IFFALSE 25356
// CutTreeXYR ( unit , x , y , 12 ) ;
25334: LD_VAR 0 2
25338: PPUSH
25339: LD_VAR 0 4
25343: PPUSH
25344: LD_VAR 0 5
25348: PPUSH
25349: LD_INT 12
25351: PPUSH
25352: CALL 25369 0 4
// end ;
25356: LD_VAR 0 6
25360: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25361: LD_INT 0
25363: PPUSH
// end ;
25364: LD_VAR 0 4
25368: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25369: LD_INT 0
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25380: LD_VAR 0 1
25384: NOT
25385: PUSH
25386: LD_VAR 0 2
25390: PPUSH
25391: LD_VAR 0 3
25395: PPUSH
25396: CALL_OW 488
25400: NOT
25401: OR
25402: PUSH
25403: LD_VAR 0 4
25407: NOT
25408: OR
25409: IFFALSE 25413
// exit ;
25411: GO 25753
// list := [ ] ;
25413: LD_ADDR_VAR 0 13
25417: PUSH
25418: EMPTY
25419: ST_TO_ADDR
// if x - r < 0 then
25420: LD_VAR 0 2
25424: PUSH
25425: LD_VAR 0 4
25429: MINUS
25430: PUSH
25431: LD_INT 0
25433: LESS
25434: IFFALSE 25446
// min_x := 0 else
25436: LD_ADDR_VAR 0 7
25440: PUSH
25441: LD_INT 0
25443: ST_TO_ADDR
25444: GO 25462
// min_x := x - r ;
25446: LD_ADDR_VAR 0 7
25450: PUSH
25451: LD_VAR 0 2
25455: PUSH
25456: LD_VAR 0 4
25460: MINUS
25461: ST_TO_ADDR
// if y - r < 0 then
25462: LD_VAR 0 3
25466: PUSH
25467: LD_VAR 0 4
25471: MINUS
25472: PUSH
25473: LD_INT 0
25475: LESS
25476: IFFALSE 25488
// min_y := 0 else
25478: LD_ADDR_VAR 0 8
25482: PUSH
25483: LD_INT 0
25485: ST_TO_ADDR
25486: GO 25504
// min_y := y - r ;
25488: LD_ADDR_VAR 0 8
25492: PUSH
25493: LD_VAR 0 3
25497: PUSH
25498: LD_VAR 0 4
25502: MINUS
25503: ST_TO_ADDR
// max_x := x + r ;
25504: LD_ADDR_VAR 0 9
25508: PUSH
25509: LD_VAR 0 2
25513: PUSH
25514: LD_VAR 0 4
25518: PLUS
25519: ST_TO_ADDR
// max_y := y + r ;
25520: LD_ADDR_VAR 0 10
25524: PUSH
25525: LD_VAR 0 3
25529: PUSH
25530: LD_VAR 0 4
25534: PLUS
25535: ST_TO_ADDR
// for _x = min_x to max_x do
25536: LD_ADDR_VAR 0 11
25540: PUSH
25541: DOUBLE
25542: LD_VAR 0 7
25546: DEC
25547: ST_TO_ADDR
25548: LD_VAR 0 9
25552: PUSH
25553: FOR_TO
25554: IFFALSE 25671
// for _y = min_y to max_y do
25556: LD_ADDR_VAR 0 12
25560: PUSH
25561: DOUBLE
25562: LD_VAR 0 8
25566: DEC
25567: ST_TO_ADDR
25568: LD_VAR 0 10
25572: PUSH
25573: FOR_TO
25574: IFFALSE 25667
// begin if not ValidHex ( _x , _y ) then
25576: LD_VAR 0 11
25580: PPUSH
25581: LD_VAR 0 12
25585: PPUSH
25586: CALL_OW 488
25590: NOT
25591: IFFALSE 25595
// continue ;
25593: GO 25573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25595: LD_VAR 0 11
25599: PPUSH
25600: LD_VAR 0 12
25604: PPUSH
25605: CALL_OW 351
25609: PUSH
25610: LD_VAR 0 11
25614: PPUSH
25615: LD_VAR 0 12
25619: PPUSH
25620: CALL_OW 554
25624: AND
25625: IFFALSE 25665
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25627: LD_ADDR_VAR 0 13
25631: PUSH
25632: LD_VAR 0 13
25636: PPUSH
25637: LD_VAR 0 13
25641: PUSH
25642: LD_INT 1
25644: PLUS
25645: PPUSH
25646: LD_VAR 0 11
25650: PUSH
25651: LD_VAR 0 12
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PPUSH
25660: CALL_OW 2
25664: ST_TO_ADDR
// end ;
25665: GO 25573
25667: POP
25668: POP
25669: GO 25553
25671: POP
25672: POP
// if not list then
25673: LD_VAR 0 13
25677: NOT
25678: IFFALSE 25682
// exit ;
25680: GO 25753
// for i in list do
25682: LD_ADDR_VAR 0 6
25686: PUSH
25687: LD_VAR 0 13
25691: PUSH
25692: FOR_IN
25693: IFFALSE 25751
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25695: LD_VAR 0 1
25699: PPUSH
25700: LD_STRING M
25702: PUSH
25703: LD_VAR 0 6
25707: PUSH
25708: LD_INT 1
25710: ARRAY
25711: PUSH
25712: LD_VAR 0 6
25716: PUSH
25717: LD_INT 2
25719: ARRAY
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: PPUSH
25745: CALL_OW 447
25749: GO 25692
25751: POP
25752: POP
// end ;
25753: LD_VAR 0 5
25757: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25758: LD_EXP 93
25762: NOT
25763: IFFALSE 25813
25765: GO 25767
25767: DISABLE
// begin initHack := true ;
25768: LD_ADDR_EXP 93
25772: PUSH
25773: LD_INT 1
25775: ST_TO_ADDR
// hackTanks := [ ] ;
25776: LD_ADDR_EXP 94
25780: PUSH
25781: EMPTY
25782: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25783: LD_ADDR_EXP 95
25787: PUSH
25788: EMPTY
25789: ST_TO_ADDR
// hackLimit := 3 ;
25790: LD_ADDR_EXP 96
25794: PUSH
25795: LD_INT 3
25797: ST_TO_ADDR
// hackDist := 12 ;
25798: LD_ADDR_EXP 97
25802: PUSH
25803: LD_INT 12
25805: ST_TO_ADDR
// hackCounter := [ ] ;
25806: LD_ADDR_EXP 98
25810: PUSH
25811: EMPTY
25812: ST_TO_ADDR
// end ;
25813: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25814: LD_EXP 93
25818: PUSH
25819: LD_INT 34
25821: PUSH
25822: LD_EXP 16
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PPUSH
25831: CALL_OW 69
25835: AND
25836: IFFALSE 26091
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
25844: PPUSH
// begin enable ;
25845: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25846: LD_ADDR_VAR 0 1
25850: PUSH
25851: LD_INT 34
25853: PUSH
25854: LD_EXP 16
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 69
25867: PUSH
25868: FOR_IN
25869: IFFALSE 26089
// begin if not i in hackTanks then
25871: LD_VAR 0 1
25875: PUSH
25876: LD_EXP 94
25880: IN
25881: NOT
25882: IFFALSE 25965
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25884: LD_ADDR_EXP 94
25888: PUSH
25889: LD_EXP 94
25893: PPUSH
25894: LD_EXP 94
25898: PUSH
25899: LD_INT 1
25901: PLUS
25902: PPUSH
25903: LD_VAR 0 1
25907: PPUSH
25908: CALL_OW 1
25912: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25913: LD_ADDR_EXP 95
25917: PUSH
25918: LD_EXP 95
25922: PPUSH
25923: LD_EXP 95
25927: PUSH
25928: LD_INT 1
25930: PLUS
25931: PPUSH
25932: EMPTY
25933: PPUSH
25934: CALL_OW 1
25938: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25939: LD_ADDR_EXP 98
25943: PUSH
25944: LD_EXP 98
25948: PPUSH
25949: LD_EXP 98
25953: PUSH
25954: LD_INT 1
25956: PLUS
25957: PPUSH
25958: EMPTY
25959: PPUSH
25960: CALL_OW 1
25964: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25965: LD_VAR 0 1
25969: PPUSH
25970: CALL_OW 302
25974: NOT
25975: IFFALSE 25988
// begin HackUnlinkAll ( i ) ;
25977: LD_VAR 0 1
25981: PPUSH
25982: CALL 26094 0 1
// continue ;
25986: GO 25868
// end ; HackCheckCapturedStatus ( i ) ;
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL 26537 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25997: LD_ADDR_VAR 0 2
26001: PUSH
26002: LD_INT 81
26004: PUSH
26005: LD_VAR 0 1
26009: PPUSH
26010: CALL_OW 255
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 33
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 91
26031: PUSH
26032: LD_VAR 0 1
26036: PUSH
26037: LD_EXP 97
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 50
26049: PUSH
26050: EMPTY
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: ST_TO_ADDR
// if not tmp then
26064: LD_VAR 0 2
26068: NOT
26069: IFFALSE 26073
// continue ;
26071: GO 25868
// HackLink ( i , tmp ) ;
26073: LD_VAR 0 1
26077: PPUSH
26078: LD_VAR 0 2
26082: PPUSH
26083: CALL 26230 0 2
// end ;
26087: GO 25868
26089: POP
26090: POP
// end ;
26091: PPOPN 2
26093: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26094: LD_INT 0
26096: PPUSH
26097: PPUSH
26098: PPUSH
// if not hack in hackTanks then
26099: LD_VAR 0 1
26103: PUSH
26104: LD_EXP 94
26108: IN
26109: NOT
26110: IFFALSE 26114
// exit ;
26112: GO 26225
// index := GetElementIndex ( hackTanks , hack ) ;
26114: LD_ADDR_VAR 0 4
26118: PUSH
26119: LD_EXP 94
26123: PPUSH
26124: LD_VAR 0 1
26128: PPUSH
26129: CALL 33699 0 2
26133: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26134: LD_EXP 95
26138: PUSH
26139: LD_VAR 0 4
26143: ARRAY
26144: IFFALSE 26225
// begin for i in hackTanksCaptured [ index ] do
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_EXP 95
26155: PUSH
26156: LD_VAR 0 4
26160: ARRAY
26161: PUSH
26162: FOR_IN
26163: IFFALSE 26189
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26165: LD_VAR 0 3
26169: PUSH
26170: LD_INT 1
26172: ARRAY
26173: PPUSH
26174: LD_VAR 0 3
26178: PUSH
26179: LD_INT 2
26181: ARRAY
26182: PPUSH
26183: CALL_OW 235
26187: GO 26162
26189: POP
26190: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26191: LD_ADDR_EXP 95
26195: PUSH
26196: LD_EXP 95
26200: PPUSH
26201: LD_VAR 0 4
26205: PPUSH
26206: EMPTY
26207: PPUSH
26208: CALL_OW 1
26212: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26213: LD_VAR 0 1
26217: PPUSH
26218: LD_INT 0
26220: PPUSH
26221: CALL_OW 505
// end ; end ;
26225: LD_VAR 0 2
26229: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26230: LD_INT 0
26232: PPUSH
26233: PPUSH
26234: PPUSH
// if not hack in hackTanks or not vehicles then
26235: LD_VAR 0 1
26239: PUSH
26240: LD_EXP 94
26244: IN
26245: NOT
26246: PUSH
26247: LD_VAR 0 2
26251: NOT
26252: OR
26253: IFFALSE 26257
// exit ;
26255: GO 26532
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26257: LD_ADDR_VAR 0 2
26261: PUSH
26262: LD_VAR 0 1
26266: PPUSH
26267: LD_VAR 0 2
26271: PPUSH
26272: LD_INT 1
26274: PPUSH
26275: LD_INT 1
26277: PPUSH
26278: CALL 34349 0 4
26282: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26283: LD_ADDR_VAR 0 5
26287: PUSH
26288: LD_EXP 94
26292: PPUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL 33699 0 2
26302: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26303: LD_EXP 95
26307: PUSH
26308: LD_VAR 0 5
26312: ARRAY
26313: PUSH
26314: LD_EXP 96
26318: LESS
26319: IFFALSE 26508
// begin for i := 1 to vehicles do
26321: LD_ADDR_VAR 0 4
26325: PUSH
26326: DOUBLE
26327: LD_INT 1
26329: DEC
26330: ST_TO_ADDR
26331: LD_VAR 0 2
26335: PUSH
26336: FOR_TO
26337: IFFALSE 26506
// begin if hackTanksCaptured [ index ] = hackLimit then
26339: LD_EXP 95
26343: PUSH
26344: LD_VAR 0 5
26348: ARRAY
26349: PUSH
26350: LD_EXP 96
26354: EQUAL
26355: IFFALSE 26359
// break ;
26357: GO 26506
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26359: LD_ADDR_EXP 98
26363: PUSH
26364: LD_EXP 98
26368: PPUSH
26369: LD_VAR 0 5
26373: PPUSH
26374: LD_EXP 98
26378: PUSH
26379: LD_VAR 0 5
26383: ARRAY
26384: PUSH
26385: LD_INT 1
26387: PLUS
26388: PPUSH
26389: CALL_OW 1
26393: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26394: LD_ADDR_EXP 95
26398: PUSH
26399: LD_EXP 95
26403: PPUSH
26404: LD_VAR 0 5
26408: PUSH
26409: LD_EXP 95
26413: PUSH
26414: LD_VAR 0 5
26418: ARRAY
26419: PUSH
26420: LD_INT 1
26422: PLUS
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PPUSH
26428: LD_VAR 0 2
26432: PUSH
26433: LD_VAR 0 4
26437: ARRAY
26438: PUSH
26439: LD_VAR 0 2
26443: PUSH
26444: LD_VAR 0 4
26448: ARRAY
26449: PPUSH
26450: CALL_OW 255
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PPUSH
26459: CALL 33914 0 3
26463: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26464: LD_VAR 0 2
26468: PUSH
26469: LD_VAR 0 4
26473: ARRAY
26474: PPUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL_OW 255
26484: PPUSH
26485: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26489: LD_VAR 0 2
26493: PUSH
26494: LD_VAR 0 4
26498: ARRAY
26499: PPUSH
26500: CALL_OW 141
// end ;
26504: GO 26336
26506: POP
26507: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26508: LD_VAR 0 1
26512: PPUSH
26513: LD_EXP 95
26517: PUSH
26518: LD_VAR 0 5
26522: ARRAY
26523: PUSH
26524: LD_INT 0
26526: PLUS
26527: PPUSH
26528: CALL_OW 505
// end ;
26532: LD_VAR 0 3
26536: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26537: LD_INT 0
26539: PPUSH
26540: PPUSH
26541: PPUSH
26542: PPUSH
// if not hack in hackTanks then
26543: LD_VAR 0 1
26547: PUSH
26548: LD_EXP 94
26552: IN
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26798
// index := GetElementIndex ( hackTanks , hack ) ;
26558: LD_ADDR_VAR 0 4
26562: PUSH
26563: LD_EXP 94
26567: PPUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL 33699 0 2
26577: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26578: LD_ADDR_VAR 0 3
26582: PUSH
26583: DOUBLE
26584: LD_EXP 95
26588: PUSH
26589: LD_VAR 0 4
26593: ARRAY
26594: INC
26595: ST_TO_ADDR
26596: LD_INT 1
26598: PUSH
26599: FOR_DOWNTO
26600: IFFALSE 26772
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26602: LD_ADDR_VAR 0 5
26606: PUSH
26607: LD_EXP 95
26611: PUSH
26612: LD_VAR 0 4
26616: ARRAY
26617: PUSH
26618: LD_VAR 0 3
26622: ARRAY
26623: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26624: LD_VAR 0 5
26628: PUSH
26629: LD_INT 1
26631: ARRAY
26632: PPUSH
26633: CALL_OW 302
26637: NOT
26638: PUSH
26639: LD_VAR 0 5
26643: PUSH
26644: LD_INT 1
26646: ARRAY
26647: PPUSH
26648: CALL_OW 255
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 255
26662: NONEQUAL
26663: OR
26664: IFFALSE 26770
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26666: LD_VAR 0 5
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: CALL_OW 305
26679: PUSH
26680: LD_VAR 0 5
26684: PUSH
26685: LD_INT 1
26687: ARRAY
26688: PPUSH
26689: CALL_OW 255
26693: PUSH
26694: LD_VAR 0 1
26698: PPUSH
26699: CALL_OW 255
26703: EQUAL
26704: AND
26705: IFFALSE 26729
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26707: LD_VAR 0 5
26711: PUSH
26712: LD_INT 1
26714: ARRAY
26715: PPUSH
26716: LD_VAR 0 5
26720: PUSH
26721: LD_INT 2
26723: ARRAY
26724: PPUSH
26725: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26729: LD_ADDR_EXP 95
26733: PUSH
26734: LD_EXP 95
26738: PPUSH
26739: LD_VAR 0 4
26743: PPUSH
26744: LD_EXP 95
26748: PUSH
26749: LD_VAR 0 4
26753: ARRAY
26754: PPUSH
26755: LD_VAR 0 3
26759: PPUSH
26760: CALL_OW 3
26764: PPUSH
26765: CALL_OW 1
26769: ST_TO_ADDR
// end ; end ;
26770: GO 26599
26772: POP
26773: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26774: LD_VAR 0 1
26778: PPUSH
26779: LD_EXP 95
26783: PUSH
26784: LD_VAR 0 4
26788: ARRAY
26789: PUSH
26790: LD_INT 0
26792: PLUS
26793: PPUSH
26794: CALL_OW 505
// end ;
26798: LD_VAR 0 2
26802: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26803: LD_INT 0
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
// if not hack in hackTanks then
26809: LD_VAR 0 1
26813: PUSH
26814: LD_EXP 94
26818: IN
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 26909
// index := GetElementIndex ( hackTanks , hack ) ;
26824: LD_ADDR_VAR 0 5
26828: PUSH
26829: LD_EXP 94
26833: PPUSH
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL 33699 0 2
26843: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: DOUBLE
26850: LD_INT 1
26852: DEC
26853: ST_TO_ADDR
26854: LD_EXP 95
26858: PUSH
26859: LD_VAR 0 5
26863: ARRAY
26864: PUSH
26865: FOR_TO
26866: IFFALSE 26907
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26868: LD_EXP 95
26872: PUSH
26873: LD_VAR 0 5
26877: ARRAY
26878: PUSH
26879: LD_VAR 0 4
26883: ARRAY
26884: PUSH
26885: LD_INT 1
26887: ARRAY
26888: PUSH
26889: LD_VAR 0 2
26893: EQUAL
26894: IFFALSE 26905
// KillUnit ( vehicle ) ;
26896: LD_VAR 0 2
26900: PPUSH
26901: CALL_OW 66
26905: GO 26865
26907: POP
26908: POP
// end ;
26909: LD_VAR 0 3
26913: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26914: LD_EXP 99
26918: NOT
26919: IFFALSE 26954
26921: GO 26923
26923: DISABLE
// begin initMiner := true ;
26924: LD_ADDR_EXP 99
26928: PUSH
26929: LD_INT 1
26931: ST_TO_ADDR
// minersList := [ ] ;
26932: LD_ADDR_EXP 100
26936: PUSH
26937: EMPTY
26938: ST_TO_ADDR
// minerMinesList := [ ] ;
26939: LD_ADDR_EXP 101
26943: PUSH
26944: EMPTY
26945: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26946: LD_ADDR_EXP 102
26950: PUSH
26951: LD_INT 5
26953: ST_TO_ADDR
// end ;
26954: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26955: LD_EXP 99
26959: PUSH
26960: LD_INT 34
26962: PUSH
26963: LD_EXP 21
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 69
26976: AND
26977: IFFALSE 27440
26979: GO 26981
26981: DISABLE
26982: LD_INT 0
26984: PPUSH
26985: PPUSH
26986: PPUSH
26987: PPUSH
// begin enable ;
26988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26989: LD_ADDR_VAR 0 1
26993: PUSH
26994: LD_INT 34
26996: PUSH
26997: LD_EXP 21
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: PUSH
27011: FOR_IN
27012: IFFALSE 27084
// begin if not i in minersList then
27014: LD_VAR 0 1
27018: PUSH
27019: LD_EXP 100
27023: IN
27024: NOT
27025: IFFALSE 27082
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27027: LD_ADDR_EXP 100
27031: PUSH
27032: LD_EXP 100
27036: PPUSH
27037: LD_EXP 100
27041: PUSH
27042: LD_INT 1
27044: PLUS
27045: PPUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 1
27055: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27056: LD_ADDR_EXP 101
27060: PUSH
27061: LD_EXP 101
27065: PPUSH
27066: LD_EXP 101
27070: PUSH
27071: LD_INT 1
27073: PLUS
27074: PPUSH
27075: EMPTY
27076: PPUSH
27077: CALL_OW 1
27081: ST_TO_ADDR
// end end ;
27082: GO 27011
27084: POP
27085: POP
// for i := minerMinesList downto 1 do
27086: LD_ADDR_VAR 0 1
27090: PUSH
27091: DOUBLE
27092: LD_EXP 101
27096: INC
27097: ST_TO_ADDR
27098: LD_INT 1
27100: PUSH
27101: FOR_DOWNTO
27102: IFFALSE 27438
// begin if IsLive ( minersList [ i ] ) then
27104: LD_EXP 100
27108: PUSH
27109: LD_VAR 0 1
27113: ARRAY
27114: PPUSH
27115: CALL_OW 300
27119: IFFALSE 27147
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27121: LD_EXP 100
27125: PUSH
27126: LD_VAR 0 1
27130: ARRAY
27131: PPUSH
27132: LD_EXP 101
27136: PUSH
27137: LD_VAR 0 1
27141: ARRAY
27142: PPUSH
27143: CALL_OW 505
// if not minerMinesList [ i ] then
27147: LD_EXP 101
27151: PUSH
27152: LD_VAR 0 1
27156: ARRAY
27157: NOT
27158: IFFALSE 27162
// continue ;
27160: GO 27101
// for j := minerMinesList [ i ] downto 1 do
27162: LD_ADDR_VAR 0 2
27166: PUSH
27167: DOUBLE
27168: LD_EXP 101
27172: PUSH
27173: LD_VAR 0 1
27177: ARRAY
27178: INC
27179: ST_TO_ADDR
27180: LD_INT 1
27182: PUSH
27183: FOR_DOWNTO
27184: IFFALSE 27434
// begin side := GetSide ( minersList [ i ] ) ;
27186: LD_ADDR_VAR 0 3
27190: PUSH
27191: LD_EXP 100
27195: PUSH
27196: LD_VAR 0 1
27200: ARRAY
27201: PPUSH
27202: CALL_OW 255
27206: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27207: LD_ADDR_VAR 0 4
27211: PUSH
27212: LD_EXP 101
27216: PUSH
27217: LD_VAR 0 1
27221: ARRAY
27222: PUSH
27223: LD_VAR 0 2
27227: ARRAY
27228: PUSH
27229: LD_INT 1
27231: ARRAY
27232: PPUSH
27233: LD_EXP 101
27237: PUSH
27238: LD_VAR 0 1
27242: ARRAY
27243: PUSH
27244: LD_VAR 0 2
27248: ARRAY
27249: PUSH
27250: LD_INT 2
27252: ARRAY
27253: PPUSH
27254: CALL_OW 428
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 4
27263: NOT
27264: IFFALSE 27268
// continue ;
27266: GO 27183
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27268: LD_VAR 0 4
27272: PUSH
27273: LD_INT 81
27275: PUSH
27276: LD_VAR 0 3
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PPUSH
27285: CALL_OW 69
27289: IN
27290: PUSH
27291: LD_EXP 101
27295: PUSH
27296: LD_VAR 0 1
27300: ARRAY
27301: PUSH
27302: LD_VAR 0 2
27306: ARRAY
27307: PUSH
27308: LD_INT 1
27310: ARRAY
27311: PPUSH
27312: LD_EXP 101
27316: PUSH
27317: LD_VAR 0 1
27321: ARRAY
27322: PUSH
27323: LD_VAR 0 2
27327: ARRAY
27328: PUSH
27329: LD_INT 2
27331: ARRAY
27332: PPUSH
27333: CALL_OW 458
27337: AND
27338: IFFALSE 27432
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27340: LD_EXP 101
27344: PUSH
27345: LD_VAR 0 1
27349: ARRAY
27350: PUSH
27351: LD_VAR 0 2
27355: ARRAY
27356: PUSH
27357: LD_INT 1
27359: ARRAY
27360: PPUSH
27361: LD_EXP 101
27365: PUSH
27366: LD_VAR 0 1
27370: ARRAY
27371: PUSH
27372: LD_VAR 0 2
27376: ARRAY
27377: PUSH
27378: LD_INT 2
27380: ARRAY
27381: PPUSH
27382: LD_VAR 0 3
27386: PPUSH
27387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27391: LD_ADDR_EXP 101
27395: PUSH
27396: LD_EXP 101
27400: PPUSH
27401: LD_VAR 0 1
27405: PPUSH
27406: LD_EXP 101
27410: PUSH
27411: LD_VAR 0 1
27415: ARRAY
27416: PPUSH
27417: LD_VAR 0 2
27421: PPUSH
27422: CALL_OW 3
27426: PPUSH
27427: CALL_OW 1
27431: ST_TO_ADDR
// end ; end ;
27432: GO 27183
27434: POP
27435: POP
// end ;
27436: GO 27101
27438: POP
27439: POP
// end ;
27440: PPOPN 4
27442: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27443: LD_INT 0
27445: PPUSH
27446: PPUSH
// result := false ;
27447: LD_ADDR_VAR 0 4
27451: PUSH
27452: LD_INT 0
27454: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27455: LD_VAR 0 1
27459: PPUSH
27460: CALL_OW 264
27464: PUSH
27465: LD_EXP 21
27469: EQUAL
27470: NOT
27471: IFFALSE 27475
// exit ;
27473: GO 27715
// index := GetElementIndex ( minersList , unit ) ;
27475: LD_ADDR_VAR 0 5
27479: PUSH
27480: LD_EXP 100
27484: PPUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: CALL 33699 0 2
27494: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27495: LD_EXP 101
27499: PUSH
27500: LD_VAR 0 5
27504: ARRAY
27505: PUSH
27506: LD_EXP 102
27510: GREATEREQUAL
27511: IFFALSE 27515
// exit ;
27513: GO 27715
// ComMoveXY ( unit , x , y ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_VAR 0 3
27529: PPUSH
27530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27534: LD_INT 35
27536: PPUSH
27537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27541: LD_VAR 0 1
27545: PPUSH
27546: LD_VAR 0 2
27550: PPUSH
27551: LD_VAR 0 3
27555: PPUSH
27556: CALL 64471 0 3
27560: NOT
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL_OW 314
27571: AND
27572: IFFALSE 27576
// exit ;
27574: GO 27715
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27576: LD_VAR 0 2
27580: PPUSH
27581: LD_VAR 0 3
27585: PPUSH
27586: CALL_OW 428
27590: PUSH
27591: LD_VAR 0 1
27595: EQUAL
27596: PUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 314
27606: NOT
27607: AND
27608: IFFALSE 27534
// PlaySoundXY ( x , y , PlantMine ) ;
27610: LD_VAR 0 2
27614: PPUSH
27615: LD_VAR 0 3
27619: PPUSH
27620: LD_STRING PlantMine
27622: PPUSH
27623: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 3
27636: PPUSH
27637: LD_VAR 0 1
27641: PPUSH
27642: CALL_OW 255
27646: PPUSH
27647: LD_INT 0
27649: PPUSH
27650: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27654: LD_ADDR_EXP 101
27658: PUSH
27659: LD_EXP 101
27663: PPUSH
27664: LD_VAR 0 5
27668: PUSH
27669: LD_EXP 101
27673: PUSH
27674: LD_VAR 0 5
27678: ARRAY
27679: PUSH
27680: LD_INT 1
27682: PLUS
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PPUSH
27688: LD_VAR 0 2
27692: PUSH
27693: LD_VAR 0 3
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PPUSH
27702: CALL 33914 0 3
27706: ST_TO_ADDR
// result := true ;
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: LD_INT 1
27714: ST_TO_ADDR
// end ;
27715: LD_VAR 0 4
27719: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27720: LD_INT 0
27722: PPUSH
27723: PPUSH
27724: PPUSH
// if not unit in minersList then
27725: LD_VAR 0 1
27729: PUSH
27730: LD_EXP 100
27734: IN
27735: NOT
27736: IFFALSE 27740
// exit ;
27738: GO 28132
// index := GetElementIndex ( minersList , unit ) ;
27740: LD_ADDR_VAR 0 6
27744: PUSH
27745: LD_EXP 100
27749: PPUSH
27750: LD_VAR 0 1
27754: PPUSH
27755: CALL 33699 0 2
27759: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27760: LD_ADDR_VAR 0 5
27764: PUSH
27765: DOUBLE
27766: LD_EXP 101
27770: PUSH
27771: LD_VAR 0 6
27775: ARRAY
27776: INC
27777: ST_TO_ADDR
27778: LD_INT 1
27780: PUSH
27781: FOR_DOWNTO
27782: IFFALSE 27943
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27784: LD_EXP 101
27788: PUSH
27789: LD_VAR 0 6
27793: ARRAY
27794: PUSH
27795: LD_VAR 0 5
27799: ARRAY
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PUSH
27805: LD_VAR 0 2
27809: EQUAL
27810: PUSH
27811: LD_EXP 101
27815: PUSH
27816: LD_VAR 0 6
27820: ARRAY
27821: PUSH
27822: LD_VAR 0 5
27826: ARRAY
27827: PUSH
27828: LD_INT 2
27830: ARRAY
27831: PUSH
27832: LD_VAR 0 3
27836: EQUAL
27837: AND
27838: IFFALSE 27941
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27840: LD_EXP 101
27844: PUSH
27845: LD_VAR 0 6
27849: ARRAY
27850: PUSH
27851: LD_VAR 0 5
27855: ARRAY
27856: PUSH
27857: LD_INT 1
27859: ARRAY
27860: PPUSH
27861: LD_EXP 101
27865: PUSH
27866: LD_VAR 0 6
27870: ARRAY
27871: PUSH
27872: LD_VAR 0 5
27876: ARRAY
27877: PUSH
27878: LD_INT 2
27880: ARRAY
27881: PPUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 255
27891: PPUSH
27892: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27896: LD_ADDR_EXP 101
27900: PUSH
27901: LD_EXP 101
27905: PPUSH
27906: LD_VAR 0 6
27910: PPUSH
27911: LD_EXP 101
27915: PUSH
27916: LD_VAR 0 6
27920: ARRAY
27921: PPUSH
27922: LD_VAR 0 5
27926: PPUSH
27927: CALL_OW 3
27931: PPUSH
27932: CALL_OW 1
27936: ST_TO_ADDR
// exit ;
27937: POP
27938: POP
27939: GO 28132
// end ; end ;
27941: GO 27781
27943: POP
27944: POP
// for i := minerMinesList [ index ] downto 1 do
27945: LD_ADDR_VAR 0 5
27949: PUSH
27950: DOUBLE
27951: LD_EXP 101
27955: PUSH
27956: LD_VAR 0 6
27960: ARRAY
27961: INC
27962: ST_TO_ADDR
27963: LD_INT 1
27965: PUSH
27966: FOR_DOWNTO
27967: IFFALSE 28130
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27969: LD_EXP 101
27973: PUSH
27974: LD_VAR 0 6
27978: ARRAY
27979: PUSH
27980: LD_VAR 0 5
27984: ARRAY
27985: PUSH
27986: LD_INT 1
27988: ARRAY
27989: PPUSH
27990: LD_EXP 101
27994: PUSH
27995: LD_VAR 0 6
27999: ARRAY
28000: PUSH
28001: LD_VAR 0 5
28005: ARRAY
28006: PUSH
28007: LD_INT 2
28009: ARRAY
28010: PPUSH
28011: LD_VAR 0 2
28015: PPUSH
28016: LD_VAR 0 3
28020: PPUSH
28021: CALL_OW 298
28025: PUSH
28026: LD_INT 6
28028: LESS
28029: IFFALSE 28128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28031: LD_EXP 101
28035: PUSH
28036: LD_VAR 0 6
28040: ARRAY
28041: PUSH
28042: LD_VAR 0 5
28046: ARRAY
28047: PUSH
28048: LD_INT 1
28050: ARRAY
28051: PPUSH
28052: LD_EXP 101
28056: PUSH
28057: LD_VAR 0 6
28061: ARRAY
28062: PUSH
28063: LD_VAR 0 5
28067: ARRAY
28068: PUSH
28069: LD_INT 2
28071: ARRAY
28072: PPUSH
28073: LD_VAR 0 1
28077: PPUSH
28078: CALL_OW 255
28082: PPUSH
28083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28087: LD_ADDR_EXP 101
28091: PUSH
28092: LD_EXP 101
28096: PPUSH
28097: LD_VAR 0 6
28101: PPUSH
28102: LD_EXP 101
28106: PUSH
28107: LD_VAR 0 6
28111: ARRAY
28112: PPUSH
28113: LD_VAR 0 5
28117: PPUSH
28118: CALL_OW 3
28122: PPUSH
28123: CALL_OW 1
28127: ST_TO_ADDR
// end ; end ;
28128: GO 27966
28130: POP
28131: POP
// end ;
28132: LD_VAR 0 4
28136: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28137: LD_INT 0
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
28144: PPUSH
28145: PPUSH
28146: PPUSH
28147: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28148: LD_VAR 0 1
28152: PPUSH
28153: CALL_OW 264
28157: PUSH
28158: LD_EXP 21
28162: EQUAL
28163: NOT
28164: PUSH
28165: LD_VAR 0 1
28169: PUSH
28170: LD_EXP 100
28174: IN
28175: NOT
28176: OR
28177: IFFALSE 28181
// exit ;
28179: GO 28503
// index := GetElementIndex ( minersList , unit ) ;
28181: LD_ADDR_VAR 0 6
28185: PUSH
28186: LD_EXP 100
28190: PPUSH
28191: LD_VAR 0 1
28195: PPUSH
28196: CALL 33699 0 2
28200: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28201: LD_ADDR_VAR 0 8
28205: PUSH
28206: LD_EXP 102
28210: PUSH
28211: LD_EXP 101
28215: PUSH
28216: LD_VAR 0 6
28220: ARRAY
28221: MINUS
28222: ST_TO_ADDR
// if not minesFreeAmount then
28223: LD_VAR 0 8
28227: NOT
28228: IFFALSE 28232
// exit ;
28230: GO 28503
// tmp := [ ] ;
28232: LD_ADDR_VAR 0 7
28236: PUSH
28237: EMPTY
28238: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28239: LD_ADDR_VAR 0 5
28243: PUSH
28244: DOUBLE
28245: LD_INT 1
28247: DEC
28248: ST_TO_ADDR
28249: LD_VAR 0 8
28253: PUSH
28254: FOR_TO
28255: IFFALSE 28450
// begin _d := rand ( 0 , 5 ) ;
28257: LD_ADDR_VAR 0 11
28261: PUSH
28262: LD_INT 0
28264: PPUSH
28265: LD_INT 5
28267: PPUSH
28268: CALL_OW 12
28272: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28273: LD_ADDR_VAR 0 12
28277: PUSH
28278: LD_INT 2
28280: PPUSH
28281: LD_INT 6
28283: PPUSH
28284: CALL_OW 12
28288: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28289: LD_ADDR_VAR 0 9
28293: PUSH
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_VAR 0 11
28303: PPUSH
28304: LD_VAR 0 12
28308: PPUSH
28309: CALL_OW 272
28313: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28314: LD_ADDR_VAR 0 10
28318: PUSH
28319: LD_VAR 0 3
28323: PPUSH
28324: LD_VAR 0 11
28328: PPUSH
28329: LD_VAR 0 12
28333: PPUSH
28334: CALL_OW 273
28338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28339: LD_VAR 0 9
28343: PPUSH
28344: LD_VAR 0 10
28348: PPUSH
28349: CALL_OW 488
28353: PUSH
28354: LD_VAR 0 9
28358: PUSH
28359: LD_VAR 0 10
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_VAR 0 7
28372: IN
28373: NOT
28374: AND
28375: PUSH
28376: LD_VAR 0 9
28380: PPUSH
28381: LD_VAR 0 10
28385: PPUSH
28386: CALL_OW 458
28390: NOT
28391: AND
28392: IFFALSE 28434
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28394: LD_ADDR_VAR 0 7
28398: PUSH
28399: LD_VAR 0 7
28403: PPUSH
28404: LD_VAR 0 7
28408: PUSH
28409: LD_INT 1
28411: PLUS
28412: PPUSH
28413: LD_VAR 0 9
28417: PUSH
28418: LD_VAR 0 10
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PPUSH
28427: CALL_OW 1
28431: ST_TO_ADDR
28432: GO 28448
// i := i - 1 ;
28434: LD_ADDR_VAR 0 5
28438: PUSH
28439: LD_VAR 0 5
28443: PUSH
28444: LD_INT 1
28446: MINUS
28447: ST_TO_ADDR
// end ;
28448: GO 28254
28450: POP
28451: POP
// for i in tmp do
28452: LD_ADDR_VAR 0 5
28456: PUSH
28457: LD_VAR 0 7
28461: PUSH
28462: FOR_IN
28463: IFFALSE 28501
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28465: LD_VAR 0 1
28469: PPUSH
28470: LD_VAR 0 5
28474: PUSH
28475: LD_INT 1
28477: ARRAY
28478: PPUSH
28479: LD_VAR 0 5
28483: PUSH
28484: LD_INT 2
28486: ARRAY
28487: PPUSH
28488: CALL 27443 0 3
28492: NOT
28493: IFFALSE 28499
// exit ;
28495: POP
28496: POP
28497: GO 28503
28499: GO 28462
28501: POP
28502: POP
// end ;
28503: LD_VAR 0 4
28507: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28508: LD_INT 0
28510: PPUSH
28511: PPUSH
28512: PPUSH
28513: PPUSH
28514: PPUSH
28515: PPUSH
28516: PPUSH
// if not GetClass ( unit ) = class_sniper then
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 257
28526: PUSH
28527: LD_INT 5
28529: EQUAL
28530: NOT
28531: IFFALSE 28535
// exit ;
28533: GO 28923
// dist := 8 ;
28535: LD_ADDR_VAR 0 5
28539: PUSH
28540: LD_INT 8
28542: ST_TO_ADDR
// viewRange := 12 ;
28543: LD_ADDR_VAR 0 7
28547: PUSH
28548: LD_INT 12
28550: ST_TO_ADDR
// side := GetSide ( unit ) ;
28551: LD_ADDR_VAR 0 6
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 255
28565: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28566: LD_INT 61
28568: PPUSH
28569: LD_VAR 0 6
28573: PPUSH
28574: CALL_OW 321
28578: PUSH
28579: LD_INT 2
28581: EQUAL
28582: IFFALSE 28592
// viewRange := 16 ;
28584: LD_ADDR_VAR 0 7
28588: PUSH
28589: LD_INT 16
28591: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28592: LD_VAR 0 1
28596: PPUSH
28597: LD_VAR 0 2
28601: PPUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: CALL_OW 297
28611: PUSH
28612: LD_VAR 0 5
28616: GREATER
28617: IFFALSE 28696
// begin ComMoveXY ( unit , x , y ) ;
28619: LD_VAR 0 1
28623: PPUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: LD_VAR 0 3
28633: PPUSH
28634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28638: LD_INT 35
28640: PPUSH
28641: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28645: LD_VAR 0 1
28649: PPUSH
28650: LD_VAR 0 2
28654: PPUSH
28655: LD_VAR 0 3
28659: PPUSH
28660: CALL 64471 0 3
28664: NOT
28665: IFFALSE 28669
// exit ;
28667: GO 28923
// until GetDistUnitXY ( unit , x , y ) < dist ;
28669: LD_VAR 0 1
28673: PPUSH
28674: LD_VAR 0 2
28678: PPUSH
28679: LD_VAR 0 3
28683: PPUSH
28684: CALL_OW 297
28688: PUSH
28689: LD_VAR 0 5
28693: LESS
28694: IFFALSE 28638
// end ; ComTurnXY ( unit , x , y ) ;
28696: LD_VAR 0 1
28700: PPUSH
28701: LD_VAR 0 2
28705: PPUSH
28706: LD_VAR 0 3
28710: PPUSH
28711: CALL_OW 118
// wait ( 5 ) ;
28715: LD_INT 5
28717: PPUSH
28718: CALL_OW 67
// _d := GetDir ( unit ) ;
28722: LD_ADDR_VAR 0 10
28726: PUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: CALL_OW 254
28736: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28737: LD_ADDR_VAR 0 8
28741: PUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 250
28751: PPUSH
28752: LD_VAR 0 10
28756: PPUSH
28757: LD_VAR 0 5
28761: PPUSH
28762: CALL_OW 272
28766: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28767: LD_ADDR_VAR 0 9
28771: PUSH
28772: LD_VAR 0 1
28776: PPUSH
28777: CALL_OW 251
28781: PPUSH
28782: LD_VAR 0 10
28786: PPUSH
28787: LD_VAR 0 5
28791: PPUSH
28792: CALL_OW 273
28796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28797: LD_VAR 0 8
28801: PPUSH
28802: LD_VAR 0 9
28806: PPUSH
28807: CALL_OW 488
28811: NOT
28812: IFFALSE 28816
// exit ;
28814: GO 28923
// ComAnimCustom ( unit , 1 ) ;
28816: LD_VAR 0 1
28820: PPUSH
28821: LD_INT 1
28823: PPUSH
28824: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28828: LD_VAR 0 8
28832: PPUSH
28833: LD_VAR 0 9
28837: PPUSH
28838: LD_VAR 0 6
28842: PPUSH
28843: LD_VAR 0 7
28847: PPUSH
28848: CALL_OW 330
// repeat wait ( 1 ) ;
28852: LD_INT 1
28854: PPUSH
28855: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28859: LD_VAR 0 1
28863: PPUSH
28864: CALL_OW 316
28868: PUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL_OW 314
28878: OR
28879: PUSH
28880: LD_VAR 0 1
28884: PPUSH
28885: CALL_OW 302
28889: NOT
28890: OR
28891: PUSH
28892: LD_VAR 0 1
28896: PPUSH
28897: CALL_OW 301
28901: OR
28902: IFFALSE 28852
// RemoveSeeing ( _x , _y , side ) ;
28904: LD_VAR 0 8
28908: PPUSH
28909: LD_VAR 0 9
28913: PPUSH
28914: LD_VAR 0 6
28918: PPUSH
28919: CALL_OW 331
// end ; end_of_file
28923: LD_VAR 0 4
28927: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28928: LD_INT 0
28930: PPUSH
28931: PPUSH
// if exist_mode then
28932: LD_VAR 0 2
28936: IFFALSE 28961
// unit := CreateCharacter ( prefix & ident ) else
28938: LD_ADDR_VAR 0 5
28942: PUSH
28943: LD_VAR 0 3
28947: PUSH
28948: LD_VAR 0 1
28952: STR
28953: PPUSH
28954: CALL_OW 34
28958: ST_TO_ADDR
28959: GO 28976
// unit := NewCharacter ( ident ) ;
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_VAR 0 1
28970: PPUSH
28971: CALL_OW 25
28975: ST_TO_ADDR
// result := unit ;
28976: LD_ADDR_VAR 0 4
28980: PUSH
28981: LD_VAR 0 5
28985: ST_TO_ADDR
// end ;
28986: LD_VAR 0 4
28990: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
// if not side or not nation then
28995: LD_VAR 0 1
28999: NOT
29000: PUSH
29001: LD_VAR 0 2
29005: NOT
29006: OR
29007: IFFALSE 29011
// exit ;
29009: GO 29779
// case nation of nation_american :
29011: LD_VAR 0 2
29015: PUSH
29016: LD_INT 1
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29024
29022: GO 29238
29024: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: LD_INT 35
29032: PUSH
29033: LD_INT 45
29035: PUSH
29036: LD_INT 46
29038: PUSH
29039: LD_INT 47
29041: PUSH
29042: LD_INT 82
29044: PUSH
29045: LD_INT 83
29047: PUSH
29048: LD_INT 84
29050: PUSH
29051: LD_INT 85
29053: PUSH
29054: LD_INT 86
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: LD_INT 6
29065: PUSH
29066: LD_INT 15
29068: PUSH
29069: LD_INT 16
29071: PUSH
29072: LD_INT 7
29074: PUSH
29075: LD_INT 12
29077: PUSH
29078: LD_INT 13
29080: PUSH
29081: LD_INT 10
29083: PUSH
29084: LD_INT 14
29086: PUSH
29087: LD_INT 20
29089: PUSH
29090: LD_INT 21
29092: PUSH
29093: LD_INT 22
29095: PUSH
29096: LD_INT 25
29098: PUSH
29099: LD_INT 32
29101: PUSH
29102: LD_INT 27
29104: PUSH
29105: LD_INT 36
29107: PUSH
29108: LD_INT 69
29110: PUSH
29111: LD_INT 39
29113: PUSH
29114: LD_INT 34
29116: PUSH
29117: LD_INT 40
29119: PUSH
29120: LD_INT 48
29122: PUSH
29123: LD_INT 49
29125: PUSH
29126: LD_INT 50
29128: PUSH
29129: LD_INT 51
29131: PUSH
29132: LD_INT 52
29134: PUSH
29135: LD_INT 53
29137: PUSH
29138: LD_INT 54
29140: PUSH
29141: LD_INT 55
29143: PUSH
29144: LD_INT 56
29146: PUSH
29147: LD_INT 57
29149: PUSH
29150: LD_INT 58
29152: PUSH
29153: LD_INT 59
29155: PUSH
29156: LD_INT 60
29158: PUSH
29159: LD_INT 61
29161: PUSH
29162: LD_INT 62
29164: PUSH
29165: LD_INT 80
29167: PUSH
29168: LD_INT 82
29170: PUSH
29171: LD_INT 83
29173: PUSH
29174: LD_INT 84
29176: PUSH
29177: LD_INT 85
29179: PUSH
29180: LD_INT 86
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
29236: GO 29703
29238: LD_INT 2
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29472
29246: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29247: LD_ADDR_VAR 0 4
29251: PUSH
29252: LD_INT 35
29254: PUSH
29255: LD_INT 45
29257: PUSH
29258: LD_INT 46
29260: PUSH
29261: LD_INT 47
29263: PUSH
29264: LD_INT 82
29266: PUSH
29267: LD_INT 83
29269: PUSH
29270: LD_INT 84
29272: PUSH
29273: LD_INT 85
29275: PUSH
29276: LD_INT 87
29278: PUSH
29279: LD_INT 70
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 11
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: LD_INT 4
29293: PUSH
29294: LD_INT 5
29296: PUSH
29297: LD_INT 6
29299: PUSH
29300: LD_INT 15
29302: PUSH
29303: LD_INT 18
29305: PUSH
29306: LD_INT 7
29308: PUSH
29309: LD_INT 17
29311: PUSH
29312: LD_INT 8
29314: PUSH
29315: LD_INT 20
29317: PUSH
29318: LD_INT 21
29320: PUSH
29321: LD_INT 22
29323: PUSH
29324: LD_INT 72
29326: PUSH
29327: LD_INT 26
29329: PUSH
29330: LD_INT 69
29332: PUSH
29333: LD_INT 39
29335: PUSH
29336: LD_INT 40
29338: PUSH
29339: LD_INT 41
29341: PUSH
29342: LD_INT 42
29344: PUSH
29345: LD_INT 43
29347: PUSH
29348: LD_INT 48
29350: PUSH
29351: LD_INT 49
29353: PUSH
29354: LD_INT 50
29356: PUSH
29357: LD_INT 51
29359: PUSH
29360: LD_INT 52
29362: PUSH
29363: LD_INT 53
29365: PUSH
29366: LD_INT 54
29368: PUSH
29369: LD_INT 55
29371: PUSH
29372: LD_INT 56
29374: PUSH
29375: LD_INT 60
29377: PUSH
29378: LD_INT 61
29380: PUSH
29381: LD_INT 62
29383: PUSH
29384: LD_INT 66
29386: PUSH
29387: LD_INT 67
29389: PUSH
29390: LD_INT 68
29392: PUSH
29393: LD_INT 81
29395: PUSH
29396: LD_INT 82
29398: PUSH
29399: LD_INT 83
29401: PUSH
29402: LD_INT 84
29404: PUSH
29405: LD_INT 85
29407: PUSH
29408: LD_INT 87
29410: PUSH
29411: LD_INT 88
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
29470: GO 29703
29472: LD_INT 3
29474: DOUBLE
29475: EQUAL
29476: IFTRUE 29480
29478: GO 29702
29480: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29481: LD_ADDR_VAR 0 4
29485: PUSH
29486: LD_INT 46
29488: PUSH
29489: LD_INT 47
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 82
29500: PUSH
29501: LD_INT 83
29503: PUSH
29504: LD_INT 84
29506: PUSH
29507: LD_INT 85
29509: PUSH
29510: LD_INT 86
29512: PUSH
29513: LD_INT 11
29515: PUSH
29516: LD_INT 9
29518: PUSH
29519: LD_INT 20
29521: PUSH
29522: LD_INT 19
29524: PUSH
29525: LD_INT 21
29527: PUSH
29528: LD_INT 24
29530: PUSH
29531: LD_INT 22
29533: PUSH
29534: LD_INT 25
29536: PUSH
29537: LD_INT 28
29539: PUSH
29540: LD_INT 29
29542: PUSH
29543: LD_INT 30
29545: PUSH
29546: LD_INT 31
29548: PUSH
29549: LD_INT 37
29551: PUSH
29552: LD_INT 38
29554: PUSH
29555: LD_INT 32
29557: PUSH
29558: LD_INT 27
29560: PUSH
29561: LD_INT 33
29563: PUSH
29564: LD_INT 69
29566: PUSH
29567: LD_INT 39
29569: PUSH
29570: LD_INT 34
29572: PUSH
29573: LD_INT 40
29575: PUSH
29576: LD_INT 71
29578: PUSH
29579: LD_INT 23
29581: PUSH
29582: LD_INT 44
29584: PUSH
29585: LD_INT 48
29587: PUSH
29588: LD_INT 49
29590: PUSH
29591: LD_INT 50
29593: PUSH
29594: LD_INT 51
29596: PUSH
29597: LD_INT 52
29599: PUSH
29600: LD_INT 53
29602: PUSH
29603: LD_INT 54
29605: PUSH
29606: LD_INT 55
29608: PUSH
29609: LD_INT 56
29611: PUSH
29612: LD_INT 57
29614: PUSH
29615: LD_INT 58
29617: PUSH
29618: LD_INT 59
29620: PUSH
29621: LD_INT 63
29623: PUSH
29624: LD_INT 64
29626: PUSH
29627: LD_INT 65
29629: PUSH
29630: LD_INT 82
29632: PUSH
29633: LD_INT 83
29635: PUSH
29636: LD_INT 84
29638: PUSH
29639: LD_INT 85
29641: PUSH
29642: LD_INT 86
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
29700: GO 29703
29702: POP
// if state > - 1 and state < 3 then
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: GREATER
29712: PUSH
29713: LD_VAR 0 3
29717: PUSH
29718: LD_INT 3
29720: LESS
29721: AND
29722: IFFALSE 29779
// for i in result do
29724: LD_ADDR_VAR 0 5
29728: PUSH
29729: LD_VAR 0 4
29733: PUSH
29734: FOR_IN
29735: IFFALSE 29777
// if GetTech ( i , side ) <> state then
29737: LD_VAR 0 5
29741: PPUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 321
29751: PUSH
29752: LD_VAR 0 3
29756: NONEQUAL
29757: IFFALSE 29775
// result := result diff i ;
29759: LD_ADDR_VAR 0 4
29763: PUSH
29764: LD_VAR 0 4
29768: PUSH
29769: LD_VAR 0 5
29773: DIFF
29774: ST_TO_ADDR
29775: GO 29734
29777: POP
29778: POP
// end ;
29779: LD_VAR 0 4
29783: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29784: LD_INT 0
29786: PPUSH
29787: PPUSH
29788: PPUSH
// result := true ;
29789: LD_ADDR_VAR 0 3
29793: PUSH
29794: LD_INT 1
29796: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29797: LD_ADDR_VAR 0 5
29801: PUSH
29802: LD_VAR 0 2
29806: PPUSH
29807: CALL_OW 480
29811: ST_TO_ADDR
// if not tmp then
29812: LD_VAR 0 5
29816: NOT
29817: IFFALSE 29821
// exit ;
29819: GO 29870
// for i in tmp do
29821: LD_ADDR_VAR 0 4
29825: PUSH
29826: LD_VAR 0 5
29830: PUSH
29831: FOR_IN
29832: IFFALSE 29868
// if GetTech ( i , side ) <> state_researched then
29834: LD_VAR 0 4
29838: PPUSH
29839: LD_VAR 0 1
29843: PPUSH
29844: CALL_OW 321
29848: PUSH
29849: LD_INT 2
29851: NONEQUAL
29852: IFFALSE 29866
// begin result := false ;
29854: LD_ADDR_VAR 0 3
29858: PUSH
29859: LD_INT 0
29861: ST_TO_ADDR
// exit ;
29862: POP
29863: POP
29864: GO 29870
// end ;
29866: GO 29831
29868: POP
29869: POP
// end ;
29870: LD_VAR 0 3
29874: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29875: LD_INT 0
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
29886: PPUSH
29887: PPUSH
29888: PPUSH
29889: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29890: LD_VAR 0 1
29894: NOT
29895: PUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 257
29905: PUSH
29906: LD_INT 9
29908: NONEQUAL
29909: OR
29910: IFFALSE 29914
// exit ;
29912: GO 30487
// side := GetSide ( unit ) ;
29914: LD_ADDR_VAR 0 9
29918: PUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 255
29928: ST_TO_ADDR
// tech_space := tech_spacanom ;
29929: LD_ADDR_VAR 0 12
29933: PUSH
29934: LD_INT 29
29936: ST_TO_ADDR
// tech_time := tech_taurad ;
29937: LD_ADDR_VAR 0 13
29941: PUSH
29942: LD_INT 28
29944: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29945: LD_ADDR_VAR 0 11
29949: PUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: CALL_OW 310
29959: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29960: LD_VAR 0 11
29964: PPUSH
29965: CALL_OW 247
29969: PUSH
29970: LD_INT 2
29972: EQUAL
29973: IFFALSE 29977
// exit ;
29975: GO 30487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29977: LD_ADDR_VAR 0 8
29981: PUSH
29982: LD_INT 81
29984: PUSH
29985: LD_VAR 0 9
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 3
29996: PUSH
29997: LD_INT 21
29999: PUSH
30000: LD_INT 3
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PPUSH
30015: CALL_OW 69
30019: ST_TO_ADDR
// if not tmp then
30020: LD_VAR 0 8
30024: NOT
30025: IFFALSE 30029
// exit ;
30027: GO 30487
// if in_unit then
30029: LD_VAR 0 11
30033: IFFALSE 30057
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30035: LD_ADDR_VAR 0 10
30039: PUSH
30040: LD_VAR 0 8
30044: PPUSH
30045: LD_VAR 0 11
30049: PPUSH
30050: CALL_OW 74
30054: ST_TO_ADDR
30055: GO 30077
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30057: LD_ADDR_VAR 0 10
30061: PUSH
30062: LD_VAR 0 8
30066: PPUSH
30067: LD_VAR 0 1
30071: PPUSH
30072: CALL_OW 74
30076: ST_TO_ADDR
// if not enemy then
30077: LD_VAR 0 10
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30487
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30086: LD_VAR 0 11
30090: PUSH
30091: LD_VAR 0 11
30095: PPUSH
30096: LD_VAR 0 10
30100: PPUSH
30101: CALL_OW 296
30105: PUSH
30106: LD_INT 13
30108: GREATER
30109: AND
30110: PUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: LD_VAR 0 10
30120: PPUSH
30121: CALL_OW 296
30125: PUSH
30126: LD_INT 12
30128: GREATER
30129: OR
30130: IFFALSE 30134
// exit ;
30132: GO 30487
// missile := [ 1 ] ;
30134: LD_ADDR_VAR 0 14
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: EMPTY
30143: LIST
30144: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30145: LD_VAR 0 9
30149: PPUSH
30150: LD_VAR 0 12
30154: PPUSH
30155: CALL_OW 325
30159: IFFALSE 30188
// missile := Insert ( missile , missile + 1 , 2 ) ;
30161: LD_ADDR_VAR 0 14
30165: PUSH
30166: LD_VAR 0 14
30170: PPUSH
30171: LD_VAR 0 14
30175: PUSH
30176: LD_INT 1
30178: PLUS
30179: PPUSH
30180: LD_INT 2
30182: PPUSH
30183: CALL_OW 2
30187: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30188: LD_VAR 0 9
30192: PPUSH
30193: LD_VAR 0 13
30197: PPUSH
30198: CALL_OW 325
30202: PUSH
30203: LD_VAR 0 10
30207: PPUSH
30208: CALL_OW 255
30212: PPUSH
30213: LD_VAR 0 13
30217: PPUSH
30218: CALL_OW 325
30222: NOT
30223: AND
30224: IFFALSE 30253
// missile := Insert ( missile , missile + 1 , 3 ) ;
30226: LD_ADDR_VAR 0 14
30230: PUSH
30231: LD_VAR 0 14
30235: PPUSH
30236: LD_VAR 0 14
30240: PUSH
30241: LD_INT 1
30243: PLUS
30244: PPUSH
30245: LD_INT 3
30247: PPUSH
30248: CALL_OW 2
30252: ST_TO_ADDR
// if missile < 2 then
30253: LD_VAR 0 14
30257: PUSH
30258: LD_INT 2
30260: LESS
30261: IFFALSE 30265
// exit ;
30263: GO 30487
// x := GetX ( enemy ) ;
30265: LD_ADDR_VAR 0 4
30269: PUSH
30270: LD_VAR 0 10
30274: PPUSH
30275: CALL_OW 250
30279: ST_TO_ADDR
// y := GetY ( enemy ) ;
30280: LD_ADDR_VAR 0 5
30284: PUSH
30285: LD_VAR 0 10
30289: PPUSH
30290: CALL_OW 251
30294: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_VAR 0 4
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PPUSH
30309: LD_INT 1
30311: PPUSH
30312: CALL_OW 12
30316: PLUS
30317: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30318: LD_ADDR_VAR 0 7
30322: PUSH
30323: LD_VAR 0 5
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PPUSH
30332: LD_INT 1
30334: PPUSH
30335: CALL_OW 12
30339: PLUS
30340: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30341: LD_VAR 0 6
30345: PPUSH
30346: LD_VAR 0 7
30350: PPUSH
30351: CALL_OW 488
30355: NOT
30356: IFFALSE 30378
// begin _x := x ;
30358: LD_ADDR_VAR 0 6
30362: PUSH
30363: LD_VAR 0 4
30367: ST_TO_ADDR
// _y := y ;
30368: LD_ADDR_VAR 0 7
30372: PUSH
30373: LD_VAR 0 5
30377: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 1
30385: PPUSH
30386: LD_VAR 0 14
30390: PPUSH
30391: CALL_OW 12
30395: ST_TO_ADDR
// case i of 1 :
30396: LD_VAR 0 3
30400: PUSH
30401: LD_INT 1
30403: DOUBLE
30404: EQUAL
30405: IFTRUE 30409
30407: GO 30426
30409: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30410: LD_VAR 0 1
30414: PPUSH
30415: LD_VAR 0 10
30419: PPUSH
30420: CALL_OW 115
30424: GO 30487
30426: LD_INT 2
30428: DOUBLE
30429: EQUAL
30430: IFTRUE 30434
30432: GO 30456
30434: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30435: LD_VAR 0 1
30439: PPUSH
30440: LD_VAR 0 6
30444: PPUSH
30445: LD_VAR 0 7
30449: PPUSH
30450: CALL_OW 153
30454: GO 30487
30456: LD_INT 3
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30486
30464: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30465: LD_VAR 0 1
30469: PPUSH
30470: LD_VAR 0 6
30474: PPUSH
30475: LD_VAR 0 7
30479: PPUSH
30480: CALL_OW 154
30484: GO 30487
30486: POP
// end ;
30487: LD_VAR 0 2
30491: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
// if not unit or not building then
30500: LD_VAR 0 1
30504: NOT
30505: PUSH
30506: LD_VAR 0 2
30510: NOT
30511: OR
30512: IFFALSE 30516
// exit ;
30514: GO 30674
// x := GetX ( building ) ;
30516: LD_ADDR_VAR 0 5
30520: PUSH
30521: LD_VAR 0 2
30525: PPUSH
30526: CALL_OW 250
30530: ST_TO_ADDR
// y := GetY ( building ) ;
30531: LD_ADDR_VAR 0 6
30535: PUSH
30536: LD_VAR 0 2
30540: PPUSH
30541: CALL_OW 251
30545: ST_TO_ADDR
// for i = 0 to 5 do
30546: LD_ADDR_VAR 0 4
30550: PUSH
30551: DOUBLE
30552: LD_INT 0
30554: DEC
30555: ST_TO_ADDR
30556: LD_INT 5
30558: PUSH
30559: FOR_TO
30560: IFFALSE 30672
// begin _x := ShiftX ( x , i , 3 ) ;
30562: LD_ADDR_VAR 0 7
30566: PUSH
30567: LD_VAR 0 5
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: LD_INT 3
30579: PPUSH
30580: CALL_OW 272
30584: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30585: LD_ADDR_VAR 0 8
30589: PUSH
30590: LD_VAR 0 6
30594: PPUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_INT 3
30602: PPUSH
30603: CALL_OW 273
30607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30608: LD_VAR 0 7
30612: PPUSH
30613: LD_VAR 0 8
30617: PPUSH
30618: CALL_OW 488
30622: NOT
30623: IFFALSE 30627
// continue ;
30625: GO 30559
// if HexInfo ( _x , _y ) = 0 then
30627: LD_VAR 0 7
30631: PPUSH
30632: LD_VAR 0 8
30636: PPUSH
30637: CALL_OW 428
30641: PUSH
30642: LD_INT 0
30644: EQUAL
30645: IFFALSE 30670
// begin ComMoveXY ( unit , _x , _y ) ;
30647: LD_VAR 0 1
30651: PPUSH
30652: LD_VAR 0 7
30656: PPUSH
30657: LD_VAR 0 8
30661: PPUSH
30662: CALL_OW 111
// exit ;
30666: POP
30667: POP
30668: GO 30674
// end ; end ;
30670: GO 30559
30672: POP
30673: POP
// end ;
30674: LD_VAR 0 3
30678: RET
// export function ScanBase ( side , base_area ) ; begin
30679: LD_INT 0
30681: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30682: LD_ADDR_VAR 0 3
30686: PUSH
30687: LD_VAR 0 2
30691: PPUSH
30692: LD_INT 81
30694: PUSH
30695: LD_VAR 0 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PPUSH
30704: CALL_OW 70
30708: ST_TO_ADDR
// end ;
30709: LD_VAR 0 3
30713: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30714: LD_INT 0
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
// result := false ;
30720: LD_ADDR_VAR 0 2
30724: PUSH
30725: LD_INT 0
30727: ST_TO_ADDR
// side := GetSide ( unit ) ;
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 255
30742: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30743: LD_ADDR_VAR 0 4
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 248
30757: ST_TO_ADDR
// case nat of 1 :
30758: LD_VAR 0 4
30762: PUSH
30763: LD_INT 1
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30782
30771: POP
// tech := tech_lassight ; 2 :
30772: LD_ADDR_VAR 0 5
30776: PUSH
30777: LD_INT 12
30779: ST_TO_ADDR
30780: GO 30821
30782: LD_INT 2
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 30801
30790: POP
// tech := tech_mortar ; 3 :
30791: LD_ADDR_VAR 0 5
30795: PUSH
30796: LD_INT 41
30798: ST_TO_ADDR
30799: GO 30821
30801: LD_INT 3
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30820
30809: POP
// tech := tech_bazooka ; end ;
30810: LD_ADDR_VAR 0 5
30814: PUSH
30815: LD_INT 44
30817: ST_TO_ADDR
30818: GO 30821
30820: POP
// if Researched ( side , tech ) then
30821: LD_VAR 0 3
30825: PPUSH
30826: LD_VAR 0 5
30830: PPUSH
30831: CALL_OW 325
30835: IFFALSE 30862
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_INT 5
30844: PUSH
30845: LD_INT 8
30847: PUSH
30848: LD_INT 9
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: PUSH
30856: LD_VAR 0 4
30860: ARRAY
30861: ST_TO_ADDR
// end ;
30862: LD_VAR 0 2
30866: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30867: LD_INT 0
30869: PPUSH
30870: PPUSH
30871: PPUSH
// if not mines then
30872: LD_VAR 0 2
30876: NOT
30877: IFFALSE 30881
// exit ;
30879: GO 31025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30881: LD_ADDR_VAR 0 5
30885: PUSH
30886: LD_INT 81
30888: PUSH
30889: LD_VAR 0 1
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: PUSH
30901: LD_INT 21
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PPUSH
30919: CALL_OW 69
30923: ST_TO_ADDR
// for i in mines do
30924: LD_ADDR_VAR 0 4
30928: PUSH
30929: LD_VAR 0 2
30933: PUSH
30934: FOR_IN
30935: IFFALSE 31023
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30937: LD_VAR 0 4
30941: PUSH
30942: LD_INT 1
30944: ARRAY
30945: PPUSH
30946: LD_VAR 0 4
30950: PUSH
30951: LD_INT 2
30953: ARRAY
30954: PPUSH
30955: CALL_OW 458
30959: NOT
30960: IFFALSE 30964
// continue ;
30962: GO 30934
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30964: LD_VAR 0 4
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: LD_VAR 0 4
30977: PUSH
30978: LD_INT 2
30980: ARRAY
30981: PPUSH
30982: CALL_OW 428
30986: PUSH
30987: LD_VAR 0 5
30991: IN
30992: IFFALSE 31021
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30994: LD_VAR 0 4
30998: PUSH
30999: LD_INT 1
31001: ARRAY
31002: PPUSH
31003: LD_VAR 0 4
31007: PUSH
31008: LD_INT 2
31010: ARRAY
31011: PPUSH
31012: LD_VAR 0 1
31016: PPUSH
31017: CALL_OW 456
// end ;
31021: GO 30934
31023: POP
31024: POP
// end ;
31025: LD_VAR 0 3
31029: RET
// export function Count ( array ) ; var i ; begin
31030: LD_INT 0
31032: PPUSH
31033: PPUSH
// result := 0 ;
31034: LD_ADDR_VAR 0 2
31038: PUSH
31039: LD_INT 0
31041: ST_TO_ADDR
// for i in array do
31042: LD_ADDR_VAR 0 3
31046: PUSH
31047: LD_VAR 0 1
31051: PUSH
31052: FOR_IN
31053: IFFALSE 31077
// if i then
31055: LD_VAR 0 3
31059: IFFALSE 31075
// result := result + 1 ;
31061: LD_ADDR_VAR 0 2
31065: PUSH
31066: LD_VAR 0 2
31070: PUSH
31071: LD_INT 1
31073: PLUS
31074: ST_TO_ADDR
31075: GO 31052
31077: POP
31078: POP
// end ;
31079: LD_VAR 0 2
31083: RET
// export function IsEmpty ( building ) ; begin
31084: LD_INT 0
31086: PPUSH
// if not building then
31087: LD_VAR 0 1
31091: NOT
31092: IFFALSE 31096
// exit ;
31094: GO 31139
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_VAR 0 1
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 255
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 58
31125: PUSH
31126: EMPTY
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PPUSH
31133: CALL_OW 69
31137: IN
31138: ST_TO_ADDR
// end ;
31139: LD_VAR 0 2
31143: RET
// export function IsNotFull ( building ) ; begin
31144: LD_INT 0
31146: PPUSH
// if not building then
31147: LD_VAR 0 1
31151: NOT
31152: IFFALSE 31156
// exit ;
31154: GO 31175
// result := UnitsInside ( building ) < 6 ;
31156: LD_ADDR_VAR 0 2
31160: PUSH
31161: LD_VAR 0 1
31165: PPUSH
31166: CALL_OW 313
31170: PUSH
31171: LD_INT 6
31173: LESS
31174: ST_TO_ADDR
// end ;
31175: LD_VAR 0 2
31179: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31180: LD_INT 0
31182: PPUSH
31183: PPUSH
31184: PPUSH
31185: PPUSH
// tmp := [ ] ;
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: EMPTY
31192: ST_TO_ADDR
// list := [ ] ;
31193: LD_ADDR_VAR 0 5
31197: PUSH
31198: EMPTY
31199: ST_TO_ADDR
// for i = 16 to 25 do
31200: LD_ADDR_VAR 0 4
31204: PUSH
31205: DOUBLE
31206: LD_INT 16
31208: DEC
31209: ST_TO_ADDR
31210: LD_INT 25
31212: PUSH
31213: FOR_TO
31214: IFFALSE 31287
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_VAR 0 3
31225: PUSH
31226: LD_INT 22
31228: PUSH
31229: LD_VAR 0 1
31233: PPUSH
31234: CALL_OW 255
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 91
31245: PUSH
31246: LD_VAR 0 1
31250: PUSH
31251: LD_INT 6
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 30
31261: PUSH
31262: LD_VAR 0 4
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: PPUSH
31279: CALL_OW 69
31283: ADD
31284: ST_TO_ADDR
31285: GO 31213
31287: POP
31288: POP
// for i = 1 to tmp do
31289: LD_ADDR_VAR 0 4
31293: PUSH
31294: DOUBLE
31295: LD_INT 1
31297: DEC
31298: ST_TO_ADDR
31299: LD_VAR 0 3
31303: PUSH
31304: FOR_TO
31305: IFFALSE 31393
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31307: LD_ADDR_VAR 0 5
31311: PUSH
31312: LD_VAR 0 5
31316: PUSH
31317: LD_VAR 0 3
31321: PUSH
31322: LD_VAR 0 4
31326: ARRAY
31327: PPUSH
31328: CALL_OW 266
31332: PUSH
31333: LD_VAR 0 3
31337: PUSH
31338: LD_VAR 0 4
31342: ARRAY
31343: PPUSH
31344: CALL_OW 250
31348: PUSH
31349: LD_VAR 0 3
31353: PUSH
31354: LD_VAR 0 4
31358: ARRAY
31359: PPUSH
31360: CALL_OW 251
31364: PUSH
31365: LD_VAR 0 3
31369: PUSH
31370: LD_VAR 0 4
31374: ARRAY
31375: PPUSH
31376: CALL_OW 254
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: PUSH
31387: EMPTY
31388: LIST
31389: ADD
31390: ST_TO_ADDR
31391: GO 31304
31393: POP
31394: POP
// result := list ;
31395: LD_ADDR_VAR 0 2
31399: PUSH
31400: LD_VAR 0 5
31404: ST_TO_ADDR
// end ;
31405: LD_VAR 0 2
31409: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
// if not factory then
31419: LD_VAR 0 1
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 32021
// if control = control_apeman then
31428: LD_VAR 0 4
31432: PUSH
31433: LD_INT 5
31435: EQUAL
31436: IFFALSE 31545
// begin tmp := UnitsInside ( factory ) ;
31438: LD_ADDR_VAR 0 8
31442: PUSH
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 313
31452: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31453: LD_VAR 0 8
31457: PPUSH
31458: LD_INT 25
31460: PUSH
31461: LD_INT 12
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PPUSH
31468: CALL_OW 72
31472: NOT
31473: IFFALSE 31483
// control := control_manual ;
31475: LD_ADDR_VAR 0 4
31479: PUSH
31480: LD_INT 1
31482: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31483: LD_ADDR_VAR 0 8
31487: PUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: CALL 31180 0 1
31497: ST_TO_ADDR
// if tmp then
31498: LD_VAR 0 8
31502: IFFALSE 31545
// begin for i in tmp do
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 8
31513: PUSH
31514: FOR_IN
31515: IFFALSE 31543
// if i [ 1 ] = b_ext_radio then
31517: LD_VAR 0 7
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PUSH
31526: LD_INT 22
31528: EQUAL
31529: IFFALSE 31541
// begin control := control_remote ;
31531: LD_ADDR_VAR 0 4
31535: PUSH
31536: LD_INT 2
31538: ST_TO_ADDR
// break ;
31539: GO 31543
// end ;
31541: GO 31514
31543: POP
31544: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31545: LD_VAR 0 1
31549: PPUSH
31550: LD_VAR 0 2
31554: PPUSH
31555: LD_VAR 0 3
31559: PPUSH
31560: LD_VAR 0 4
31564: PPUSH
31565: LD_VAR 0 5
31569: PPUSH
31570: CALL_OW 448
31574: IFFALSE 31609
// begin result := [ chassis , engine , control , weapon ] ;
31576: LD_ADDR_VAR 0 6
31580: PUSH
31581: LD_VAR 0 2
31585: PUSH
31586: LD_VAR 0 3
31590: PUSH
31591: LD_VAR 0 4
31595: PUSH
31596: LD_VAR 0 5
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// exit ;
31607: GO 32021
// end ; _chassis := AvailableChassisList ( factory ) ;
31609: LD_ADDR_VAR 0 9
31613: PUSH
31614: LD_VAR 0 1
31618: PPUSH
31619: CALL_OW 475
31623: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31624: LD_ADDR_VAR 0 11
31628: PUSH
31629: LD_VAR 0 1
31633: PPUSH
31634: CALL_OW 476
31638: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31639: LD_ADDR_VAR 0 12
31643: PUSH
31644: LD_VAR 0 1
31648: PPUSH
31649: CALL_OW 477
31653: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31654: LD_ADDR_VAR 0 10
31658: PUSH
31659: LD_VAR 0 1
31663: PPUSH
31664: CALL_OW 478
31668: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31669: LD_VAR 0 9
31673: NOT
31674: PUSH
31675: LD_VAR 0 11
31679: NOT
31680: OR
31681: PUSH
31682: LD_VAR 0 12
31686: NOT
31687: OR
31688: PUSH
31689: LD_VAR 0 10
31693: NOT
31694: OR
31695: IFFALSE 31730
// begin result := [ chassis , engine , control , weapon ] ;
31697: LD_ADDR_VAR 0 6
31701: PUSH
31702: LD_VAR 0 2
31706: PUSH
31707: LD_VAR 0 3
31711: PUSH
31712: LD_VAR 0 4
31716: PUSH
31717: LD_VAR 0 5
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: ST_TO_ADDR
// exit ;
31728: GO 32021
// end ; if not chassis in _chassis then
31730: LD_VAR 0 2
31734: PUSH
31735: LD_VAR 0 9
31739: IN
31740: NOT
31741: IFFALSE 31767
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31743: LD_ADDR_VAR 0 2
31747: PUSH
31748: LD_VAR 0 9
31752: PUSH
31753: LD_INT 1
31755: PPUSH
31756: LD_VAR 0 9
31760: PPUSH
31761: CALL_OW 12
31765: ARRAY
31766: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31767: LD_VAR 0 2
31771: PPUSH
31772: LD_VAR 0 3
31776: PPUSH
31777: CALL 32026 0 2
31781: NOT
31782: IFFALSE 31841
// repeat engine := _engine [ 1 ] ;
31784: LD_ADDR_VAR 0 3
31788: PUSH
31789: LD_VAR 0 11
31793: PUSH
31794: LD_INT 1
31796: ARRAY
31797: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31798: LD_ADDR_VAR 0 11
31802: PUSH
31803: LD_VAR 0 11
31807: PPUSH
31808: LD_INT 1
31810: PPUSH
31811: CALL_OW 3
31815: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31816: LD_VAR 0 2
31820: PPUSH
31821: LD_VAR 0 3
31825: PPUSH
31826: CALL 32026 0 2
31830: PUSH
31831: LD_VAR 0 11
31835: PUSH
31836: EMPTY
31837: EQUAL
31838: OR
31839: IFFALSE 31784
// if not control in _control then
31841: LD_VAR 0 4
31845: PUSH
31846: LD_VAR 0 12
31850: IN
31851: NOT
31852: IFFALSE 31878
// control := _control [ rand ( 1 , _control ) ] ;
31854: LD_ADDR_VAR 0 4
31858: PUSH
31859: LD_VAR 0 12
31863: PUSH
31864: LD_INT 1
31866: PPUSH
31867: LD_VAR 0 12
31871: PPUSH
31872: CALL_OW 12
31876: ARRAY
31877: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31878: LD_VAR 0 2
31882: PPUSH
31883: LD_VAR 0 5
31887: PPUSH
31888: CALL 32246 0 2
31892: NOT
31893: IFFALSE 31952
// repeat weapon := _weapon [ 1 ] ;
31895: LD_ADDR_VAR 0 5
31899: PUSH
31900: LD_VAR 0 10
31904: PUSH
31905: LD_INT 1
31907: ARRAY
31908: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31909: LD_ADDR_VAR 0 10
31913: PUSH
31914: LD_VAR 0 10
31918: PPUSH
31919: LD_INT 1
31921: PPUSH
31922: CALL_OW 3
31926: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31927: LD_VAR 0 2
31931: PPUSH
31932: LD_VAR 0 5
31936: PPUSH
31937: CALL 32246 0 2
31941: PUSH
31942: LD_VAR 0 10
31946: PUSH
31947: EMPTY
31948: EQUAL
31949: OR
31950: IFFALSE 31895
// result := [ ] ;
31952: LD_ADDR_VAR 0 6
31956: PUSH
31957: EMPTY
31958: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31959: LD_VAR 0 1
31963: PPUSH
31964: LD_VAR 0 2
31968: PPUSH
31969: LD_VAR 0 3
31973: PPUSH
31974: LD_VAR 0 4
31978: PPUSH
31979: LD_VAR 0 5
31983: PPUSH
31984: CALL_OW 448
31988: IFFALSE 32021
// result := [ chassis , engine , control , weapon ] ;
31990: LD_ADDR_VAR 0 6
31994: PUSH
31995: LD_VAR 0 2
31999: PUSH
32000: LD_VAR 0 3
32004: PUSH
32005: LD_VAR 0 4
32009: PUSH
32010: LD_VAR 0 5
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
// end ;
32021: LD_VAR 0 6
32025: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32026: LD_INT 0
32028: PPUSH
// if not chassis or not engine then
32029: LD_VAR 0 1
32033: NOT
32034: PUSH
32035: LD_VAR 0 2
32039: NOT
32040: OR
32041: IFFALSE 32045
// exit ;
32043: GO 32241
// case engine of engine_solar :
32045: LD_VAR 0 2
32049: PUSH
32050: LD_INT 2
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32096
32058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: LD_INT 11
32066: PUSH
32067: LD_INT 12
32069: PUSH
32070: LD_INT 13
32072: PUSH
32073: LD_INT 14
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
32094: GO 32225
32096: LD_INT 1
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32104
32102: GO 32166
32104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_INT 11
32112: PUSH
32113: LD_INT 12
32115: PUSH
32116: LD_INT 13
32118: PUSH
32119: LD_INT 14
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: LD_INT 21
32139: PUSH
32140: LD_INT 23
32142: PUSH
32143: LD_INT 22
32145: PUSH
32146: LD_INT 24
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
32164: GO 32225
32166: LD_INT 3
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32224
32174: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 13
32182: PUSH
32183: LD_INT 14
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: LD_INT 3
32191: PUSH
32192: LD_INT 4
32194: PUSH
32195: LD_INT 5
32197: PUSH
32198: LD_INT 21
32200: PUSH
32201: LD_INT 22
32203: PUSH
32204: LD_INT 23
32206: PUSH
32207: LD_INT 24
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
32222: GO 32225
32224: POP
// result := ( chassis in result ) ;
32225: LD_ADDR_VAR 0 3
32229: PUSH
32230: LD_VAR 0 1
32234: PUSH
32235: LD_VAR 0 3
32239: IN
32240: ST_TO_ADDR
// end ;
32241: LD_VAR 0 3
32245: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32246: LD_INT 0
32248: PPUSH
// if not chassis or not weapon then
32249: LD_VAR 0 1
32253: NOT
32254: PUSH
32255: LD_VAR 0 2
32259: NOT
32260: OR
32261: IFFALSE 32265
// exit ;
32263: GO 33327
// case weapon of us_machine_gun :
32265: LD_VAR 0 2
32269: PUSH
32270: LD_INT 2
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32308
32278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 4
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: ST_TO_ADDR
32306: GO 33311
32308: LD_INT 3
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32346
32316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 4
32333: PUSH
32334: LD_INT 5
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: ST_TO_ADDR
32344: GO 33311
32346: LD_INT 11
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32354
32352: GO 32384
32354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32355: LD_ADDR_VAR 0 3
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 2
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: ST_TO_ADDR
32382: GO 33311
32384: LD_INT 4
32386: DOUBLE
32387: EQUAL
32388: IFTRUE 32392
32390: GO 32418
32392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32393: LD_ADDR_VAR 0 3
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: LD_INT 4
32406: PUSH
32407: LD_INT 5
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: ST_TO_ADDR
32416: GO 33311
32418: LD_INT 5
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32452
32426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32427: LD_ADDR_VAR 0 3
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: LD_INT 3
32437: PUSH
32438: LD_INT 4
32440: PUSH
32441: LD_INT 5
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: ST_TO_ADDR
32450: GO 33311
32452: LD_INT 9
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32486
32460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32461: LD_ADDR_VAR 0 3
32465: PUSH
32466: LD_INT 2
32468: PUSH
32469: LD_INT 3
32471: PUSH
32472: LD_INT 4
32474: PUSH
32475: LD_INT 5
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: ST_TO_ADDR
32484: GO 33311
32486: LD_INT 7
32488: DOUBLE
32489: EQUAL
32490: IFTRUE 32494
32492: GO 32520
32494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: LD_INT 3
32505: PUSH
32506: LD_INT 4
32508: PUSH
32509: LD_INT 5
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: ST_TO_ADDR
32518: GO 33311
32520: LD_INT 12
32522: DOUBLE
32523: EQUAL
32524: IFTRUE 32528
32526: GO 32554
32528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32529: LD_ADDR_VAR 0 3
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: ST_TO_ADDR
32552: GO 33311
32554: LD_INT 13
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32588
32562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: LD_INT 3
32573: PUSH
32574: LD_INT 4
32576: PUSH
32577: LD_INT 5
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
32586: GO 33311
32588: LD_INT 14
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32614
32596: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32597: LD_ADDR_VAR 0 3
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: LD_INT 5
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: ST_TO_ADDR
32612: GO 33311
32614: LD_INT 6
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32640
32622: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 4
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: ST_TO_ADDR
32638: GO 33311
32640: LD_INT 10
32642: DOUBLE
32643: EQUAL
32644: IFTRUE 32648
32646: GO 32666
32648: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: LD_INT 5
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: ST_TO_ADDR
32664: GO 33311
32666: LD_INT 22
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32700
32674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: LD_INT 11
32682: PUSH
32683: LD_INT 12
32685: PUSH
32686: LD_INT 13
32688: PUSH
32689: LD_INT 14
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
32698: GO 33311
32700: LD_INT 23
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32734
32708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32709: LD_ADDR_VAR 0 3
32713: PUSH
32714: LD_INT 11
32716: PUSH
32717: LD_INT 12
32719: PUSH
32720: LD_INT 13
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: ST_TO_ADDR
32732: GO 33311
32734: LD_INT 24
32736: DOUBLE
32737: EQUAL
32738: IFTRUE 32742
32740: GO 32768
32742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32743: LD_ADDR_VAR 0 3
32747: PUSH
32748: LD_INT 11
32750: PUSH
32751: LD_INT 12
32753: PUSH
32754: LD_INT 13
32756: PUSH
32757: LD_INT 14
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: ST_TO_ADDR
32766: GO 33311
32768: LD_INT 30
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 32802
32776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32777: LD_ADDR_VAR 0 3
32781: PUSH
32782: LD_INT 11
32784: PUSH
32785: LD_INT 12
32787: PUSH
32788: LD_INT 13
32790: PUSH
32791: LD_INT 14
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: ST_TO_ADDR
32800: GO 33311
32802: LD_INT 25
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32828
32810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32811: LD_ADDR_VAR 0 3
32815: PUSH
32816: LD_INT 13
32818: PUSH
32819: LD_INT 14
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: ST_TO_ADDR
32826: GO 33311
32828: LD_INT 27
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32854
32836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32837: LD_ADDR_VAR 0 3
32841: PUSH
32842: LD_INT 13
32844: PUSH
32845: LD_INT 14
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: ST_TO_ADDR
32852: GO 33311
32854: LD_EXP 19
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32890
32864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_INT 11
32872: PUSH
32873: LD_INT 12
32875: PUSH
32876: LD_INT 13
32878: PUSH
32879: LD_INT 14
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
32888: GO 33311
32890: LD_INT 28
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32916
32898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_INT 13
32906: PUSH
32907: LD_INT 14
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33311
32916: LD_INT 29
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32942
32924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 13
32932: PUSH
32933: LD_INT 14
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: ST_TO_ADDR
32940: GO 33311
32942: LD_INT 31
32944: DOUBLE
32945: EQUAL
32946: IFTRUE 32950
32948: GO 32968
32950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32951: LD_ADDR_VAR 0 3
32955: PUSH
32956: LD_INT 13
32958: PUSH
32959: LD_INT 14
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: ST_TO_ADDR
32966: GO 33311
32968: LD_INT 26
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32994
32976: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_INT 13
32984: PUSH
32985: LD_INT 14
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: ST_TO_ADDR
32992: GO 33311
32994: LD_INT 42
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33028
33002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33003: LD_ADDR_VAR 0 3
33007: PUSH
33008: LD_INT 21
33010: PUSH
33011: LD_INT 22
33013: PUSH
33014: LD_INT 23
33016: PUSH
33017: LD_INT 24
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
33026: GO 33311
33028: LD_INT 43
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33062
33036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33037: LD_ADDR_VAR 0 3
33041: PUSH
33042: LD_INT 21
33044: PUSH
33045: LD_INT 22
33047: PUSH
33048: LD_INT 23
33050: PUSH
33051: LD_INT 24
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
33060: GO 33311
33062: LD_INT 44
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33096
33070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_INT 21
33078: PUSH
33079: LD_INT 22
33081: PUSH
33082: LD_INT 23
33084: PUSH
33085: LD_INT 24
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: ST_TO_ADDR
33094: GO 33311
33096: LD_INT 45
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33130
33104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_INT 21
33112: PUSH
33113: LD_INT 22
33115: PUSH
33116: LD_INT 23
33118: PUSH
33119: LD_INT 24
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33311
33130: LD_INT 49
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33164
33138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_INT 21
33146: PUSH
33147: LD_INT 22
33149: PUSH
33150: LD_INT 23
33152: PUSH
33153: LD_INT 24
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: ST_TO_ADDR
33162: GO 33311
33164: LD_INT 51
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33198
33172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 21
33180: PUSH
33181: LD_INT 22
33183: PUSH
33184: LD_INT 23
33186: PUSH
33187: LD_INT 24
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33311
33198: LD_INT 52
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33232
33206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_INT 21
33214: PUSH
33215: LD_INT 22
33217: PUSH
33218: LD_INT 23
33220: PUSH
33221: LD_INT 24
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33311
33232: LD_INT 53
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33258
33240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_INT 23
33248: PUSH
33249: LD_INT 24
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: ST_TO_ADDR
33256: GO 33311
33258: LD_INT 46
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33284
33266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33267: LD_ADDR_VAR 0 3
33271: PUSH
33272: LD_INT 23
33274: PUSH
33275: LD_INT 24
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: ST_TO_ADDR
33282: GO 33311
33284: LD_INT 47
33286: DOUBLE
33287: EQUAL
33288: IFTRUE 33292
33290: GO 33310
33292: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: LD_INT 23
33300: PUSH
33301: LD_INT 24
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: ST_TO_ADDR
33308: GO 33311
33310: POP
// result := ( chassis in result ) ;
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_VAR 0 1
33320: PUSH
33321: LD_VAR 0 3
33325: IN
33326: ST_TO_ADDR
// end ;
33327: LD_VAR 0 3
33331: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33332: LD_INT 0
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
// result := array ;
33341: LD_ADDR_VAR 0 5
33345: PUSH
33346: LD_VAR 0 1
33350: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33351: LD_VAR 0 1
33355: NOT
33356: PUSH
33357: LD_VAR 0 2
33361: NOT
33362: OR
33363: PUSH
33364: LD_VAR 0 3
33368: NOT
33369: OR
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: LD_VAR 0 1
33380: GREATER
33381: OR
33382: PUSH
33383: LD_VAR 0 3
33387: PUSH
33388: LD_VAR 0 1
33392: GREATER
33393: OR
33394: IFFALSE 33398
// exit ;
33396: GO 33694
// if direction then
33398: LD_VAR 0 4
33402: IFFALSE 33466
// begin d := 1 ;
33404: LD_ADDR_VAR 0 9
33408: PUSH
33409: LD_INT 1
33411: ST_TO_ADDR
// if i_from > i_to then
33412: LD_VAR 0 2
33416: PUSH
33417: LD_VAR 0 3
33421: GREATER
33422: IFFALSE 33448
// length := ( array - i_from ) + i_to else
33424: LD_ADDR_VAR 0 11
33428: PUSH
33429: LD_VAR 0 1
33433: PUSH
33434: LD_VAR 0 2
33438: MINUS
33439: PUSH
33440: LD_VAR 0 3
33444: PLUS
33445: ST_TO_ADDR
33446: GO 33464
// length := i_to - i_from ;
33448: LD_ADDR_VAR 0 11
33452: PUSH
33453: LD_VAR 0 3
33457: PUSH
33458: LD_VAR 0 2
33462: MINUS
33463: ST_TO_ADDR
// end else
33464: GO 33527
// begin d := - 1 ;
33466: LD_ADDR_VAR 0 9
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: ST_TO_ADDR
// if i_from > i_to then
33475: LD_VAR 0 2
33479: PUSH
33480: LD_VAR 0 3
33484: GREATER
33485: IFFALSE 33505
// length := i_from - i_to else
33487: LD_ADDR_VAR 0 11
33491: PUSH
33492: LD_VAR 0 2
33496: PUSH
33497: LD_VAR 0 3
33501: MINUS
33502: ST_TO_ADDR
33503: GO 33527
// length := ( array - i_to ) + i_from ;
33505: LD_ADDR_VAR 0 11
33509: PUSH
33510: LD_VAR 0 1
33514: PUSH
33515: LD_VAR 0 3
33519: MINUS
33520: PUSH
33521: LD_VAR 0 2
33525: PLUS
33526: ST_TO_ADDR
// end ; if not length then
33527: LD_VAR 0 11
33531: NOT
33532: IFFALSE 33536
// exit ;
33534: GO 33694
// tmp := array ;
33536: LD_ADDR_VAR 0 10
33540: PUSH
33541: LD_VAR 0 1
33545: ST_TO_ADDR
// for i = 1 to length do
33546: LD_ADDR_VAR 0 6
33550: PUSH
33551: DOUBLE
33552: LD_INT 1
33554: DEC
33555: ST_TO_ADDR
33556: LD_VAR 0 11
33560: PUSH
33561: FOR_TO
33562: IFFALSE 33682
// begin for j = 1 to array do
33564: LD_ADDR_VAR 0 7
33568: PUSH
33569: DOUBLE
33570: LD_INT 1
33572: DEC
33573: ST_TO_ADDR
33574: LD_VAR 0 1
33578: PUSH
33579: FOR_TO
33580: IFFALSE 33668
// begin k := j + d ;
33582: LD_ADDR_VAR 0 8
33586: PUSH
33587: LD_VAR 0 7
33591: PUSH
33592: LD_VAR 0 9
33596: PLUS
33597: ST_TO_ADDR
// if k > array then
33598: LD_VAR 0 8
33602: PUSH
33603: LD_VAR 0 1
33607: GREATER
33608: IFFALSE 33618
// k := 1 ;
33610: LD_ADDR_VAR 0 8
33614: PUSH
33615: LD_INT 1
33617: ST_TO_ADDR
// if not k then
33618: LD_VAR 0 8
33622: NOT
33623: IFFALSE 33635
// k := array ;
33625: LD_ADDR_VAR 0 8
33629: PUSH
33630: LD_VAR 0 1
33634: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33635: LD_ADDR_VAR 0 10
33639: PUSH
33640: LD_VAR 0 10
33644: PPUSH
33645: LD_VAR 0 8
33649: PPUSH
33650: LD_VAR 0 1
33654: PUSH
33655: LD_VAR 0 7
33659: ARRAY
33660: PPUSH
33661: CALL_OW 1
33665: ST_TO_ADDR
// end ;
33666: GO 33579
33668: POP
33669: POP
// array := tmp ;
33670: LD_ADDR_VAR 0 1
33674: PUSH
33675: LD_VAR 0 10
33679: ST_TO_ADDR
// end ;
33680: GO 33561
33682: POP
33683: POP
// result := array ;
33684: LD_ADDR_VAR 0 5
33688: PUSH
33689: LD_VAR 0 1
33693: ST_TO_ADDR
// end ;
33694: LD_VAR 0 5
33698: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
// result := 0 ;
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_INT 0
33710: ST_TO_ADDR
// if not array or not value in array then
33711: LD_VAR 0 1
33715: NOT
33716: PUSH
33717: LD_VAR 0 2
33721: PUSH
33722: LD_VAR 0 1
33726: IN
33727: NOT
33728: OR
33729: IFFALSE 33733
// exit ;
33731: GO 33787
// for i = 1 to array do
33733: LD_ADDR_VAR 0 4
33737: PUSH
33738: DOUBLE
33739: LD_INT 1
33741: DEC
33742: ST_TO_ADDR
33743: LD_VAR 0 1
33747: PUSH
33748: FOR_TO
33749: IFFALSE 33785
// if value = array [ i ] then
33751: LD_VAR 0 2
33755: PUSH
33756: LD_VAR 0 1
33760: PUSH
33761: LD_VAR 0 4
33765: ARRAY
33766: EQUAL
33767: IFFALSE 33783
// begin result := i ;
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_VAR 0 4
33778: ST_TO_ADDR
// exit ;
33779: POP
33780: POP
33781: GO 33787
// end ;
33783: GO 33748
33785: POP
33786: POP
// end ;
33787: LD_VAR 0 3
33791: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33792: LD_INT 0
33794: PPUSH
// vc_chassis := chassis ;
33795: LD_ADDR_OWVAR 37
33799: PUSH
33800: LD_VAR 0 1
33804: ST_TO_ADDR
// vc_engine := engine ;
33805: LD_ADDR_OWVAR 39
33809: PUSH
33810: LD_VAR 0 2
33814: ST_TO_ADDR
// vc_control := control ;
33815: LD_ADDR_OWVAR 38
33819: PUSH
33820: LD_VAR 0 3
33824: ST_TO_ADDR
// vc_weapon := weapon ;
33825: LD_ADDR_OWVAR 40
33829: PUSH
33830: LD_VAR 0 4
33834: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33835: LD_ADDR_OWVAR 41
33839: PUSH
33840: LD_VAR 0 5
33844: ST_TO_ADDR
// end ;
33845: LD_VAR 0 6
33849: RET
// export function WantPlant ( unit ) ; var task ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
// result := false ;
33854: LD_ADDR_VAR 0 2
33858: PUSH
33859: LD_INT 0
33861: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33862: LD_ADDR_VAR 0 3
33866: PUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 437
33876: ST_TO_ADDR
// if task then
33877: LD_VAR 0 3
33881: IFFALSE 33909
// if task [ 1 ] [ 1 ] = p then
33883: LD_VAR 0 3
33887: PUSH
33888: LD_INT 1
33890: ARRAY
33891: PUSH
33892: LD_INT 1
33894: ARRAY
33895: PUSH
33896: LD_STRING p
33898: EQUAL
33899: IFFALSE 33909
// result := true ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_INT 1
33908: ST_TO_ADDR
// end ;
33909: LD_VAR 0 2
33913: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33914: LD_INT 0
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
// if pos < 1 then
33920: LD_VAR 0 2
33924: PUSH
33925: LD_INT 1
33927: LESS
33928: IFFALSE 33932
// exit ;
33930: GO 34235
// if pos = 1 then
33932: LD_VAR 0 2
33936: PUSH
33937: LD_INT 1
33939: EQUAL
33940: IFFALSE 33973
// result := Replace ( arr , pos [ 1 ] , value ) else
33942: LD_ADDR_VAR 0 4
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: LD_VAR 0 2
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: PPUSH
33961: LD_VAR 0 3
33965: PPUSH
33966: CALL_OW 1
33970: ST_TO_ADDR
33971: GO 34235
// begin tmp := arr ;
33973: LD_ADDR_VAR 0 6
33977: PUSH
33978: LD_VAR 0 1
33982: ST_TO_ADDR
// s_arr := [ tmp ] ;
33983: LD_ADDR_VAR 0 7
33987: PUSH
33988: LD_VAR 0 6
33992: PUSH
33993: EMPTY
33994: LIST
33995: ST_TO_ADDR
// for i = 1 to pos - 1 do
33996: LD_ADDR_VAR 0 5
34000: PUSH
34001: DOUBLE
34002: LD_INT 1
34004: DEC
34005: ST_TO_ADDR
34006: LD_VAR 0 2
34010: PUSH
34011: LD_INT 1
34013: MINUS
34014: PUSH
34015: FOR_TO
34016: IFFALSE 34061
// begin tmp := tmp [ pos [ i ] ] ;
34018: LD_ADDR_VAR 0 6
34022: PUSH
34023: LD_VAR 0 6
34027: PUSH
34028: LD_VAR 0 2
34032: PUSH
34033: LD_VAR 0 5
34037: ARRAY
34038: ARRAY
34039: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34040: LD_ADDR_VAR 0 7
34044: PUSH
34045: LD_VAR 0 7
34049: PUSH
34050: LD_VAR 0 6
34054: PUSH
34055: EMPTY
34056: LIST
34057: ADD
34058: ST_TO_ADDR
// end ;
34059: GO 34015
34061: POP
34062: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34063: LD_ADDR_VAR 0 6
34067: PUSH
34068: LD_VAR 0 6
34072: PPUSH
34073: LD_VAR 0 2
34077: PUSH
34078: LD_VAR 0 2
34082: ARRAY
34083: PPUSH
34084: LD_VAR 0 3
34088: PPUSH
34089: CALL_OW 1
34093: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34094: LD_ADDR_VAR 0 7
34098: PUSH
34099: LD_VAR 0 7
34103: PPUSH
34104: LD_VAR 0 7
34108: PPUSH
34109: LD_VAR 0 6
34113: PPUSH
34114: CALL_OW 1
34118: ST_TO_ADDR
// for i = s_arr downto 2 do
34119: LD_ADDR_VAR 0 5
34123: PUSH
34124: DOUBLE
34125: LD_VAR 0 7
34129: INC
34130: ST_TO_ADDR
34131: LD_INT 2
34133: PUSH
34134: FOR_DOWNTO
34135: IFFALSE 34219
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34137: LD_ADDR_VAR 0 6
34141: PUSH
34142: LD_VAR 0 7
34146: PUSH
34147: LD_VAR 0 5
34151: PUSH
34152: LD_INT 1
34154: MINUS
34155: ARRAY
34156: PPUSH
34157: LD_VAR 0 2
34161: PUSH
34162: LD_VAR 0 5
34166: PUSH
34167: LD_INT 1
34169: MINUS
34170: ARRAY
34171: PPUSH
34172: LD_VAR 0 7
34176: PUSH
34177: LD_VAR 0 5
34181: ARRAY
34182: PPUSH
34183: CALL_OW 1
34187: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34188: LD_ADDR_VAR 0 7
34192: PUSH
34193: LD_VAR 0 7
34197: PPUSH
34198: LD_VAR 0 5
34202: PUSH
34203: LD_INT 1
34205: MINUS
34206: PPUSH
34207: LD_VAR 0 6
34211: PPUSH
34212: CALL_OW 1
34216: ST_TO_ADDR
// end ;
34217: GO 34134
34219: POP
34220: POP
// result := s_arr [ 1 ] ;
34221: LD_ADDR_VAR 0 4
34225: PUSH
34226: LD_VAR 0 7
34230: PUSH
34231: LD_INT 1
34233: ARRAY
34234: ST_TO_ADDR
// end ; end ;
34235: LD_VAR 0 4
34239: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
// if not list then
34244: LD_VAR 0 1
34248: NOT
34249: IFFALSE 34253
// exit ;
34251: GO 34344
// i := list [ pos1 ] ;
34253: LD_ADDR_VAR 0 5
34257: PUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_VAR 0 2
34267: ARRAY
34268: ST_TO_ADDR
// if not i then
34269: LD_VAR 0 5
34273: NOT
34274: IFFALSE 34278
// exit ;
34276: GO 34344
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34278: LD_ADDR_VAR 0 1
34282: PUSH
34283: LD_VAR 0 1
34287: PPUSH
34288: LD_VAR 0 2
34292: PPUSH
34293: LD_VAR 0 1
34297: PUSH
34298: LD_VAR 0 3
34302: ARRAY
34303: PPUSH
34304: CALL_OW 1
34308: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34309: LD_ADDR_VAR 0 1
34313: PUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_VAR 0 3
34323: PPUSH
34324: LD_VAR 0 5
34328: PPUSH
34329: CALL_OW 1
34333: ST_TO_ADDR
// result := list ;
34334: LD_ADDR_VAR 0 4
34338: PUSH
34339: LD_VAR 0 1
34343: ST_TO_ADDR
// end ;
34344: LD_VAR 0 4
34348: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34349: LD_INT 0
34351: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34352: LD_ADDR_VAR 0 5
34356: PUSH
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL_OW 250
34366: PPUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 251
34376: PPUSH
34377: LD_VAR 0 2
34381: PPUSH
34382: LD_VAR 0 3
34386: PPUSH
34387: LD_VAR 0 4
34391: PPUSH
34392: CALL 34402 0 5
34396: ST_TO_ADDR
// end ;
34397: LD_VAR 0 5
34401: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34402: LD_INT 0
34404: PPUSH
34405: PPUSH
34406: PPUSH
34407: PPUSH
// if not list then
34408: LD_VAR 0 3
34412: NOT
34413: IFFALSE 34417
// exit ;
34415: GO 34805
// result := [ ] ;
34417: LD_ADDR_VAR 0 6
34421: PUSH
34422: EMPTY
34423: ST_TO_ADDR
// for i in list do
34424: LD_ADDR_VAR 0 7
34428: PUSH
34429: LD_VAR 0 3
34433: PUSH
34434: FOR_IN
34435: IFFALSE 34637
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_VAR 0 7
34446: PPUSH
34447: LD_VAR 0 1
34451: PPUSH
34452: LD_VAR 0 2
34456: PPUSH
34457: CALL_OW 297
34461: ST_TO_ADDR
// if not result then
34462: LD_VAR 0 6
34466: NOT
34467: IFFALSE 34493
// result := [ [ i , tmp ] ] else
34469: LD_ADDR_VAR 0 6
34473: PUSH
34474: LD_VAR 0 7
34478: PUSH
34479: LD_VAR 0 9
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: ST_TO_ADDR
34491: GO 34635
// begin if result [ result ] [ 2 ] < tmp then
34493: LD_VAR 0 6
34497: PUSH
34498: LD_VAR 0 6
34502: ARRAY
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: PUSH
34508: LD_VAR 0 9
34512: LESS
34513: IFFALSE 34555
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34515: LD_ADDR_VAR 0 6
34519: PUSH
34520: LD_VAR 0 6
34524: PPUSH
34525: LD_VAR 0 6
34529: PUSH
34530: LD_INT 1
34532: PLUS
34533: PPUSH
34534: LD_VAR 0 7
34538: PUSH
34539: LD_VAR 0 9
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PPUSH
34548: CALL_OW 2
34552: ST_TO_ADDR
34553: GO 34635
// for j = 1 to result do
34555: LD_ADDR_VAR 0 8
34559: PUSH
34560: DOUBLE
34561: LD_INT 1
34563: DEC
34564: ST_TO_ADDR
34565: LD_VAR 0 6
34569: PUSH
34570: FOR_TO
34571: IFFALSE 34633
// begin if tmp < result [ j ] [ 2 ] then
34573: LD_VAR 0 9
34577: PUSH
34578: LD_VAR 0 6
34582: PUSH
34583: LD_VAR 0 8
34587: ARRAY
34588: PUSH
34589: LD_INT 2
34591: ARRAY
34592: LESS
34593: IFFALSE 34631
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34595: LD_ADDR_VAR 0 6
34599: PUSH
34600: LD_VAR 0 6
34604: PPUSH
34605: LD_VAR 0 8
34609: PPUSH
34610: LD_VAR 0 7
34614: PUSH
34615: LD_VAR 0 9
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PPUSH
34624: CALL_OW 2
34628: ST_TO_ADDR
// break ;
34629: GO 34633
// end ; end ;
34631: GO 34570
34633: POP
34634: POP
// end ; end ;
34635: GO 34434
34637: POP
34638: POP
// if result and not asc then
34639: LD_VAR 0 6
34643: PUSH
34644: LD_VAR 0 4
34648: NOT
34649: AND
34650: IFFALSE 34725
// begin tmp := result ;
34652: LD_ADDR_VAR 0 9
34656: PUSH
34657: LD_VAR 0 6
34661: ST_TO_ADDR
// for i = tmp downto 1 do
34662: LD_ADDR_VAR 0 7
34666: PUSH
34667: DOUBLE
34668: LD_VAR 0 9
34672: INC
34673: ST_TO_ADDR
34674: LD_INT 1
34676: PUSH
34677: FOR_DOWNTO
34678: IFFALSE 34723
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34680: LD_ADDR_VAR 0 6
34684: PUSH
34685: LD_VAR 0 6
34689: PPUSH
34690: LD_VAR 0 9
34694: PUSH
34695: LD_VAR 0 7
34699: MINUS
34700: PUSH
34701: LD_INT 1
34703: PLUS
34704: PPUSH
34705: LD_VAR 0 9
34709: PUSH
34710: LD_VAR 0 7
34714: ARRAY
34715: PPUSH
34716: CALL_OW 1
34720: ST_TO_ADDR
34721: GO 34677
34723: POP
34724: POP
// end ; tmp := [ ] ;
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: EMPTY
34731: ST_TO_ADDR
// if mode then
34732: LD_VAR 0 5
34736: IFFALSE 34805
// begin for i = 1 to result do
34738: LD_ADDR_VAR 0 7
34742: PUSH
34743: DOUBLE
34744: LD_INT 1
34746: DEC
34747: ST_TO_ADDR
34748: LD_VAR 0 6
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34793
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34756: LD_ADDR_VAR 0 9
34760: PUSH
34761: LD_VAR 0 9
34765: PPUSH
34766: LD_VAR 0 7
34770: PPUSH
34771: LD_VAR 0 6
34775: PUSH
34776: LD_VAR 0 7
34780: ARRAY
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: PPUSH
34786: CALL_OW 1
34790: ST_TO_ADDR
34791: GO 34753
34793: POP
34794: POP
// result := tmp ;
34795: LD_ADDR_VAR 0 6
34799: PUSH
34800: LD_VAR 0 9
34804: ST_TO_ADDR
// end ; end ;
34805: LD_VAR 0 6
34809: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34810: LD_INT 0
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: ST_TO_ADDR
// if not x or not y then
34840: LD_VAR 0 2
34844: NOT
34845: PUSH
34846: LD_VAR 0 3
34850: NOT
34851: OR
34852: IFFALSE 34856
// exit ;
34854: GO 36508
// if not range then
34856: LD_VAR 0 4
34860: NOT
34861: IFFALSE 34871
// range := 10 ;
34863: LD_ADDR_VAR 0 4
34867: PUSH
34868: LD_INT 10
34870: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34871: LD_ADDR_VAR 0 8
34875: PUSH
34876: LD_INT 81
34878: PUSH
34879: LD_VAR 0 1
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 92
34890: PUSH
34891: LD_VAR 0 2
34895: PUSH
34896: LD_VAR 0 3
34900: PUSH
34901: LD_VAR 0 4
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: LD_INT 21
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: PPUSH
34934: CALL_OW 69
34938: ST_TO_ADDR
// if not tmp then
34939: LD_VAR 0 8
34943: NOT
34944: IFFALSE 34948
// exit ;
34946: GO 36508
// for i in tmp do
34948: LD_ADDR_VAR 0 6
34952: PUSH
34953: LD_VAR 0 8
34957: PUSH
34958: FOR_IN
34959: IFFALSE 36483
// begin points := [ 0 , 0 , 0 ] ;
34961: LD_ADDR_VAR 0 9
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
// bpoints := 1 ;
34980: LD_ADDR_VAR 0 10
34984: PUSH
34985: LD_INT 1
34987: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34988: LD_VAR 0 6
34992: PPUSH
34993: CALL_OW 247
34997: PUSH
34998: LD_INT 1
35000: DOUBLE
35001: EQUAL
35002: IFTRUE 35006
35004: GO 35584
35006: POP
// begin if GetClass ( i ) = 1 then
35007: LD_VAR 0 6
35011: PPUSH
35012: CALL_OW 257
35016: PUSH
35017: LD_INT 1
35019: EQUAL
35020: IFFALSE 35041
// points := [ 10 , 5 , 3 ] ;
35022: LD_ADDR_VAR 0 9
35026: PUSH
35027: LD_INT 10
35029: PUSH
35030: LD_INT 5
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35041: LD_VAR 0 6
35045: PPUSH
35046: CALL_OW 257
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: LD_INT 4
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: IN
35065: IFFALSE 35086
// points := [ 3 , 2 , 1 ] ;
35067: LD_ADDR_VAR 0 9
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35086: LD_VAR 0 6
35090: PPUSH
35091: CALL_OW 257
35095: PUSH
35096: LD_INT 5
35098: EQUAL
35099: IFFALSE 35120
// points := [ 130 , 5 , 2 ] ;
35101: LD_ADDR_VAR 0 9
35105: PUSH
35106: LD_INT 130
35108: PUSH
35109: LD_INT 5
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35120: LD_VAR 0 6
35124: PPUSH
35125: CALL_OW 257
35129: PUSH
35130: LD_INT 8
35132: EQUAL
35133: IFFALSE 35154
// points := [ 35 , 35 , 30 ] ;
35135: LD_ADDR_VAR 0 9
35139: PUSH
35140: LD_INT 35
35142: PUSH
35143: LD_INT 35
35145: PUSH
35146: LD_INT 30
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: LIST
35153: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35154: LD_VAR 0 6
35158: PPUSH
35159: CALL_OW 257
35163: PUSH
35164: LD_INT 9
35166: EQUAL
35167: IFFALSE 35188
// points := [ 20 , 55 , 40 ] ;
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_INT 20
35176: PUSH
35177: LD_INT 55
35179: PUSH
35180: LD_INT 40
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35188: LD_VAR 0 6
35192: PPUSH
35193: CALL_OW 257
35197: PUSH
35198: LD_INT 12
35200: PUSH
35201: LD_INT 16
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: IN
35208: IFFALSE 35229
// points := [ 5 , 3 , 2 ] ;
35210: LD_ADDR_VAR 0 9
35214: PUSH
35215: LD_INT 5
35217: PUSH
35218: LD_INT 3
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35229: LD_VAR 0 6
35233: PPUSH
35234: CALL_OW 257
35238: PUSH
35239: LD_INT 17
35241: EQUAL
35242: IFFALSE 35263
// points := [ 100 , 50 , 75 ] ;
35244: LD_ADDR_VAR 0 9
35248: PUSH
35249: LD_INT 100
35251: PUSH
35252: LD_INT 50
35254: PUSH
35255: LD_INT 75
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35263: LD_VAR 0 6
35267: PPUSH
35268: CALL_OW 257
35272: PUSH
35273: LD_INT 15
35275: EQUAL
35276: IFFALSE 35297
// points := [ 10 , 5 , 3 ] ;
35278: LD_ADDR_VAR 0 9
35282: PUSH
35283: LD_INT 10
35285: PUSH
35286: LD_INT 5
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35297: LD_VAR 0 6
35301: PPUSH
35302: CALL_OW 257
35306: PUSH
35307: LD_INT 14
35309: EQUAL
35310: IFFALSE 35331
// points := [ 10 , 0 , 0 ] ;
35312: LD_ADDR_VAR 0 9
35316: PUSH
35317: LD_INT 10
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35331: LD_VAR 0 6
35335: PPUSH
35336: CALL_OW 257
35340: PUSH
35341: LD_INT 11
35343: EQUAL
35344: IFFALSE 35365
// points := [ 30 , 10 , 5 ] ;
35346: LD_ADDR_VAR 0 9
35350: PUSH
35351: LD_INT 30
35353: PUSH
35354: LD_INT 10
35356: PUSH
35357: LD_INT 5
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35365: LD_VAR 0 1
35369: PPUSH
35370: LD_INT 5
35372: PPUSH
35373: CALL_OW 321
35377: PUSH
35378: LD_INT 2
35380: EQUAL
35381: IFFALSE 35398
// bpoints := bpoints * 1.8 ;
35383: LD_ADDR_VAR 0 10
35387: PUSH
35388: LD_VAR 0 10
35392: PUSH
35393: LD_REAL  1.80000000000000E+0000
35396: MUL
35397: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35398: LD_VAR 0 6
35402: PPUSH
35403: CALL_OW 257
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: LD_INT 4
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: IN
35426: PUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: LD_INT 51
35434: PPUSH
35435: CALL_OW 321
35439: PUSH
35440: LD_INT 2
35442: EQUAL
35443: AND
35444: IFFALSE 35461
// bpoints := bpoints * 1.2 ;
35446: LD_ADDR_VAR 0 10
35450: PUSH
35451: LD_VAR 0 10
35455: PUSH
35456: LD_REAL  1.20000000000000E+0000
35459: MUL
35460: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35461: LD_VAR 0 6
35465: PPUSH
35466: CALL_OW 257
35470: PUSH
35471: LD_INT 5
35473: PUSH
35474: LD_INT 7
35476: PUSH
35477: LD_INT 9
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: IN
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: LD_INT 52
35493: PPUSH
35494: CALL_OW 321
35498: PUSH
35499: LD_INT 2
35501: EQUAL
35502: AND
35503: IFFALSE 35520
// bpoints := bpoints * 1.5 ;
35505: LD_ADDR_VAR 0 10
35509: PUSH
35510: LD_VAR 0 10
35514: PUSH
35515: LD_REAL  1.50000000000000E+0000
35518: MUL
35519: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35520: LD_VAR 0 1
35524: PPUSH
35525: LD_INT 66
35527: PPUSH
35528: CALL_OW 321
35532: PUSH
35533: LD_INT 2
35535: EQUAL
35536: IFFALSE 35553
// bpoints := bpoints * 1.1 ;
35538: LD_ADDR_VAR 0 10
35542: PUSH
35543: LD_VAR 0 10
35547: PUSH
35548: LD_REAL  1.10000000000000E+0000
35551: MUL
35552: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35553: LD_ADDR_VAR 0 10
35557: PUSH
35558: LD_VAR 0 10
35562: PUSH
35563: LD_VAR 0 6
35567: PPUSH
35568: LD_INT 1
35570: PPUSH
35571: CALL_OW 259
35575: PUSH
35576: LD_REAL  1.15000000000000E+0000
35579: MUL
35580: MUL
35581: ST_TO_ADDR
// end ; unit_vehicle :
35582: GO 36412
35584: LD_INT 2
35586: DOUBLE
35587: EQUAL
35588: IFTRUE 35592
35590: GO 36400
35592: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35593: LD_VAR 0 6
35597: PPUSH
35598: CALL_OW 264
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 42
35608: PUSH
35609: LD_INT 24
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: IN
35617: IFFALSE 35638
// points := [ 25 , 5 , 3 ] ;
35619: LD_ADDR_VAR 0 9
35623: PUSH
35624: LD_INT 25
35626: PUSH
35627: LD_INT 5
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35638: LD_VAR 0 6
35642: PPUSH
35643: CALL_OW 264
35647: PUSH
35648: LD_INT 4
35650: PUSH
35651: LD_INT 43
35653: PUSH
35654: LD_INT 25
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: IN
35662: IFFALSE 35683
// points := [ 40 , 15 , 5 ] ;
35664: LD_ADDR_VAR 0 9
35668: PUSH
35669: LD_INT 40
35671: PUSH
35672: LD_INT 15
35674: PUSH
35675: LD_INT 5
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35683: LD_VAR 0 6
35687: PPUSH
35688: CALL_OW 264
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 23
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: IN
35703: IFFALSE 35724
// points := [ 7 , 25 , 8 ] ;
35705: LD_ADDR_VAR 0 9
35709: PUSH
35710: LD_INT 7
35712: PUSH
35713: LD_INT 25
35715: PUSH
35716: LD_INT 8
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35724: LD_VAR 0 6
35728: PPUSH
35729: CALL_OW 264
35733: PUSH
35734: LD_INT 5
35736: PUSH
35737: LD_INT 27
35739: PUSH
35740: LD_INT 44
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: IN
35748: IFFALSE 35769
// points := [ 14 , 50 , 16 ] ;
35750: LD_ADDR_VAR 0 9
35754: PUSH
35755: LD_INT 14
35757: PUSH
35758: LD_INT 50
35760: PUSH
35761: LD_INT 16
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35769: LD_VAR 0 6
35773: PPUSH
35774: CALL_OW 264
35778: PUSH
35779: LD_INT 6
35781: PUSH
35782: LD_INT 46
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: IN
35789: IFFALSE 35810
// points := [ 32 , 120 , 70 ] ;
35791: LD_ADDR_VAR 0 9
35795: PUSH
35796: LD_INT 32
35798: PUSH
35799: LD_INT 120
35801: PUSH
35802: LD_INT 70
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35810: LD_VAR 0 6
35814: PPUSH
35815: CALL_OW 264
35819: PUSH
35820: LD_INT 7
35822: PUSH
35823: LD_INT 28
35825: PUSH
35826: LD_INT 45
35828: PUSH
35829: LD_EXP 19
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: IN
35840: IFFALSE 35861
// points := [ 35 , 20 , 45 ] ;
35842: LD_ADDR_VAR 0 9
35846: PUSH
35847: LD_INT 35
35849: PUSH
35850: LD_INT 20
35852: PUSH
35853: LD_INT 45
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35861: LD_VAR 0 6
35865: PPUSH
35866: CALL_OW 264
35870: PUSH
35871: LD_INT 47
35873: PUSH
35874: EMPTY
35875: LIST
35876: IN
35877: IFFALSE 35898
// points := [ 67 , 45 , 75 ] ;
35879: LD_ADDR_VAR 0 9
35883: PUSH
35884: LD_INT 67
35886: PUSH
35887: LD_INT 45
35889: PUSH
35890: LD_INT 75
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35898: LD_VAR 0 6
35902: PPUSH
35903: CALL_OW 264
35907: PUSH
35908: LD_INT 26
35910: PUSH
35911: EMPTY
35912: LIST
35913: IN
35914: IFFALSE 35935
// points := [ 120 , 30 , 80 ] ;
35916: LD_ADDR_VAR 0 9
35920: PUSH
35921: LD_INT 120
35923: PUSH
35924: LD_INT 30
35926: PUSH
35927: LD_INT 80
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35935: LD_VAR 0 6
35939: PPUSH
35940: CALL_OW 264
35944: PUSH
35945: LD_INT 22
35947: PUSH
35948: EMPTY
35949: LIST
35950: IN
35951: IFFALSE 35972
// points := [ 40 , 1 , 1 ] ;
35953: LD_ADDR_VAR 0 9
35957: PUSH
35958: LD_INT 40
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35972: LD_VAR 0 6
35976: PPUSH
35977: CALL_OW 264
35981: PUSH
35982: LD_INT 29
35984: PUSH
35985: EMPTY
35986: LIST
35987: IN
35988: IFFALSE 36009
// points := [ 70 , 200 , 400 ] ;
35990: LD_ADDR_VAR 0 9
35994: PUSH
35995: LD_INT 70
35997: PUSH
35998: LD_INT 200
36000: PUSH
36001: LD_INT 400
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36009: LD_VAR 0 6
36013: PPUSH
36014: CALL_OW 264
36018: PUSH
36019: LD_INT 14
36021: PUSH
36022: LD_INT 53
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: IN
36029: IFFALSE 36050
// points := [ 40 , 10 , 20 ] ;
36031: LD_ADDR_VAR 0 9
36035: PUSH
36036: LD_INT 40
36038: PUSH
36039: LD_INT 10
36041: PUSH
36042: LD_INT 20
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36050: LD_VAR 0 6
36054: PPUSH
36055: CALL_OW 264
36059: PUSH
36060: LD_INT 9
36062: PUSH
36063: EMPTY
36064: LIST
36065: IN
36066: IFFALSE 36087
// points := [ 5 , 70 , 20 ] ;
36068: LD_ADDR_VAR 0 9
36072: PUSH
36073: LD_INT 5
36075: PUSH
36076: LD_INT 70
36078: PUSH
36079: LD_INT 20
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36087: LD_VAR 0 6
36091: PPUSH
36092: CALL_OW 264
36096: PUSH
36097: LD_INT 10
36099: PUSH
36100: EMPTY
36101: LIST
36102: IN
36103: IFFALSE 36124
// points := [ 35 , 110 , 70 ] ;
36105: LD_ADDR_VAR 0 9
36109: PUSH
36110: LD_INT 35
36112: PUSH
36113: LD_INT 110
36115: PUSH
36116: LD_INT 70
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36124: LD_VAR 0 6
36128: PPUSH
36129: CALL_OW 265
36133: PUSH
36134: LD_INT 25
36136: EQUAL
36137: IFFALSE 36158
// points := [ 80 , 65 , 100 ] ;
36139: LD_ADDR_VAR 0 9
36143: PUSH
36144: LD_INT 80
36146: PUSH
36147: LD_INT 65
36149: PUSH
36150: LD_INT 100
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36158: LD_VAR 0 6
36162: PPUSH
36163: CALL_OW 263
36167: PUSH
36168: LD_INT 1
36170: EQUAL
36171: IFFALSE 36206
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36173: LD_ADDR_VAR 0 10
36177: PUSH
36178: LD_VAR 0 10
36182: PUSH
36183: LD_VAR 0 6
36187: PPUSH
36188: CALL_OW 311
36192: PPUSH
36193: LD_INT 3
36195: PPUSH
36196: CALL_OW 259
36200: PUSH
36201: LD_INT 4
36203: MUL
36204: MUL
36205: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36206: LD_VAR 0 6
36210: PPUSH
36211: CALL_OW 263
36215: PUSH
36216: LD_INT 2
36218: EQUAL
36219: IFFALSE 36270
// begin j := IsControledBy ( i ) ;
36221: LD_ADDR_VAR 0 7
36225: PUSH
36226: LD_VAR 0 6
36230: PPUSH
36231: CALL_OW 312
36235: ST_TO_ADDR
// if j then
36236: LD_VAR 0 7
36240: IFFALSE 36270
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36242: LD_ADDR_VAR 0 10
36246: PUSH
36247: LD_VAR 0 10
36251: PUSH
36252: LD_VAR 0 7
36256: PPUSH
36257: LD_INT 3
36259: PPUSH
36260: CALL_OW 259
36264: PUSH
36265: LD_INT 3
36267: MUL
36268: MUL
36269: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36270: LD_VAR 0 6
36274: PPUSH
36275: CALL_OW 264
36279: PUSH
36280: LD_INT 5
36282: PUSH
36283: LD_INT 6
36285: PUSH
36286: LD_INT 46
36288: PUSH
36289: LD_INT 44
36291: PUSH
36292: LD_INT 47
36294: PUSH
36295: LD_INT 45
36297: PUSH
36298: LD_INT 28
36300: PUSH
36301: LD_INT 7
36303: PUSH
36304: LD_INT 27
36306: PUSH
36307: LD_INT 29
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: IN
36322: PUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: LD_INT 52
36330: PPUSH
36331: CALL_OW 321
36335: PUSH
36336: LD_INT 2
36338: EQUAL
36339: AND
36340: IFFALSE 36357
// bpoints := bpoints * 1.2 ;
36342: LD_ADDR_VAR 0 10
36346: PUSH
36347: LD_VAR 0 10
36351: PUSH
36352: LD_REAL  1.20000000000000E+0000
36355: MUL
36356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36357: LD_VAR 0 6
36361: PPUSH
36362: CALL_OW 264
36366: PUSH
36367: LD_INT 6
36369: PUSH
36370: LD_INT 46
36372: PUSH
36373: LD_INT 47
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: IN
36381: IFFALSE 36398
// bpoints := bpoints * 1.2 ;
36383: LD_ADDR_VAR 0 10
36387: PUSH
36388: LD_VAR 0 10
36392: PUSH
36393: LD_REAL  1.20000000000000E+0000
36396: MUL
36397: ST_TO_ADDR
// end ; unit_building :
36398: GO 36412
36400: LD_INT 3
36402: DOUBLE
36403: EQUAL
36404: IFTRUE 36408
36406: GO 36411
36408: POP
// ; end ;
36409: GO 36412
36411: POP
// for j = 1 to 3 do
36412: LD_ADDR_VAR 0 7
36416: PUSH
36417: DOUBLE
36418: LD_INT 1
36420: DEC
36421: ST_TO_ADDR
36422: LD_INT 3
36424: PUSH
36425: FOR_TO
36426: IFFALSE 36479
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36428: LD_ADDR_VAR 0 5
36432: PUSH
36433: LD_VAR 0 5
36437: PPUSH
36438: LD_VAR 0 7
36442: PPUSH
36443: LD_VAR 0 5
36447: PUSH
36448: LD_VAR 0 7
36452: ARRAY
36453: PUSH
36454: LD_VAR 0 9
36458: PUSH
36459: LD_VAR 0 7
36463: ARRAY
36464: PUSH
36465: LD_VAR 0 10
36469: MUL
36470: PLUS
36471: PPUSH
36472: CALL_OW 1
36476: ST_TO_ADDR
36477: GO 36425
36479: POP
36480: POP
// end ;
36481: GO 34958
36483: POP
36484: POP
// result := Replace ( result , 4 , tmp ) ;
36485: LD_ADDR_VAR 0 5
36489: PUSH
36490: LD_VAR 0 5
36494: PPUSH
36495: LD_INT 4
36497: PPUSH
36498: LD_VAR 0 8
36502: PPUSH
36503: CALL_OW 1
36507: ST_TO_ADDR
// end ;
36508: LD_VAR 0 5
36512: RET
// export function DangerAtRange ( unit , range ) ; begin
36513: LD_INT 0
36515: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 255
36530: PPUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 250
36540: PPUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 251
36550: PPUSH
36551: LD_VAR 0 2
36555: PPUSH
36556: CALL 34810 0 4
36560: ST_TO_ADDR
// end ;
36561: LD_VAR 0 3
36565: RET
// export function DangerInArea ( side , area ) ; begin
36566: LD_INT 0
36568: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36569: LD_ADDR_VAR 0 3
36573: PUSH
36574: LD_VAR 0 2
36578: PPUSH
36579: LD_INT 81
36581: PUSH
36582: LD_VAR 0 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PPUSH
36591: CALL_OW 70
36595: ST_TO_ADDR
// end ;
36596: LD_VAR 0 3
36600: RET
// export function IsExtension ( b ) ; begin
36601: LD_INT 0
36603: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36604: LD_ADDR_VAR 0 2
36608: PUSH
36609: LD_VAR 0 1
36613: PUSH
36614: LD_INT 23
36616: PUSH
36617: LD_INT 20
36619: PUSH
36620: LD_INT 22
36622: PUSH
36623: LD_INT 17
36625: PUSH
36626: LD_INT 24
36628: PUSH
36629: LD_INT 21
36631: PUSH
36632: LD_INT 19
36634: PUSH
36635: LD_INT 16
36637: PUSH
36638: LD_INT 25
36640: PUSH
36641: LD_INT 18
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: IN
36656: ST_TO_ADDR
// end ;
36657: LD_VAR 0 2
36661: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36662: LD_INT 0
36664: PPUSH
36665: PPUSH
36666: PPUSH
// result := [ ] ;
36667: LD_ADDR_VAR 0 4
36671: PUSH
36672: EMPTY
36673: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36674: LD_ADDR_VAR 0 5
36678: PUSH
36679: LD_VAR 0 2
36683: PPUSH
36684: LD_INT 21
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 70
36698: ST_TO_ADDR
// if not tmp then
36699: LD_VAR 0 5
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36772
// if checkLink then
36708: LD_VAR 0 3
36712: IFFALSE 36762
// begin for i in tmp do
36714: LD_ADDR_VAR 0 6
36718: PUSH
36719: LD_VAR 0 5
36723: PUSH
36724: FOR_IN
36725: IFFALSE 36760
// if GetBase ( i ) <> base then
36727: LD_VAR 0 6
36731: PPUSH
36732: CALL_OW 274
36736: PUSH
36737: LD_VAR 0 1
36741: NONEQUAL
36742: IFFALSE 36758
// ComLinkToBase ( base , i ) ;
36744: LD_VAR 0 1
36748: PPUSH
36749: LD_VAR 0 6
36753: PPUSH
36754: CALL_OW 169
36758: GO 36724
36760: POP
36761: POP
// end ; result := tmp ;
36762: LD_ADDR_VAR 0 4
36766: PUSH
36767: LD_VAR 0 5
36771: ST_TO_ADDR
// end ;
36772: LD_VAR 0 4
36776: RET
// export function ComComplete ( units , b ) ; var i ; begin
36777: LD_INT 0
36779: PPUSH
36780: PPUSH
// if not units then
36781: LD_VAR 0 1
36785: NOT
36786: IFFALSE 36790
// exit ;
36788: GO 36880
// for i in units do
36790: LD_ADDR_VAR 0 4
36794: PUSH
36795: LD_VAR 0 1
36799: PUSH
36800: FOR_IN
36801: IFFALSE 36878
// if BuildingStatus ( b ) = bs_build then
36803: LD_VAR 0 2
36807: PPUSH
36808: CALL_OW 461
36812: PUSH
36813: LD_INT 1
36815: EQUAL
36816: IFFALSE 36876
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36818: LD_VAR 0 4
36822: PPUSH
36823: LD_STRING h
36825: PUSH
36826: LD_VAR 0 2
36830: PPUSH
36831: CALL_OW 250
36835: PUSH
36836: LD_VAR 0 2
36840: PPUSH
36841: CALL_OW 251
36845: PUSH
36846: LD_VAR 0 2
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: PUSH
36869: EMPTY
36870: LIST
36871: PPUSH
36872: CALL_OW 446
36876: GO 36800
36878: POP
36879: POP
// end ;
36880: LD_VAR 0 3
36884: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36885: LD_INT 0
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36893: LD_VAR 0 1
36897: NOT
36898: PUSH
36899: LD_VAR 0 1
36903: PPUSH
36904: CALL_OW 263
36908: PUSH
36909: LD_INT 2
36911: NONEQUAL
36912: OR
36913: IFFALSE 36917
// exit ;
36915: GO 37233
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36917: LD_ADDR_VAR 0 6
36921: PUSH
36922: LD_INT 22
36924: PUSH
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL_OW 255
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 30
36944: PUSH
36945: LD_INT 36
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 34
36954: PUSH
36955: LD_INT 31
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PPUSH
36971: CALL_OW 69
36975: ST_TO_ADDR
// if not tmp then
36976: LD_VAR 0 6
36980: NOT
36981: IFFALSE 36985
// exit ;
36983: GO 37233
// result := [ ] ;
36985: LD_ADDR_VAR 0 2
36989: PUSH
36990: EMPTY
36991: ST_TO_ADDR
// for i in tmp do
36992: LD_ADDR_VAR 0 3
36996: PUSH
36997: LD_VAR 0 6
37001: PUSH
37002: FOR_IN
37003: IFFALSE 37074
// begin t := UnitsInside ( i ) ;
37005: LD_ADDR_VAR 0 4
37009: PUSH
37010: LD_VAR 0 3
37014: PPUSH
37015: CALL_OW 313
37019: ST_TO_ADDR
// if t then
37020: LD_VAR 0 4
37024: IFFALSE 37072
// for j in t do
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: LD_VAR 0 4
37035: PUSH
37036: FOR_IN
37037: IFFALSE 37070
// result := Replace ( result , result + 1 , j ) ;
37039: LD_ADDR_VAR 0 2
37043: PUSH
37044: LD_VAR 0 2
37048: PPUSH
37049: LD_VAR 0 2
37053: PUSH
37054: LD_INT 1
37056: PLUS
37057: PPUSH
37058: LD_VAR 0 7
37062: PPUSH
37063: CALL_OW 1
37067: ST_TO_ADDR
37068: GO 37036
37070: POP
37071: POP
// end ;
37072: GO 37002
37074: POP
37075: POP
// if not result then
37076: LD_VAR 0 2
37080: NOT
37081: IFFALSE 37085
// exit ;
37083: GO 37233
// mech := result [ 1 ] ;
37085: LD_ADDR_VAR 0 5
37089: PUSH
37090: LD_VAR 0 2
37094: PUSH
37095: LD_INT 1
37097: ARRAY
37098: ST_TO_ADDR
// if result > 1 then
37099: LD_VAR 0 2
37103: PUSH
37104: LD_INT 1
37106: GREATER
37107: IFFALSE 37219
// begin for i = 2 to result do
37109: LD_ADDR_VAR 0 3
37113: PUSH
37114: DOUBLE
37115: LD_INT 2
37117: DEC
37118: ST_TO_ADDR
37119: LD_VAR 0 2
37123: PUSH
37124: FOR_TO
37125: IFFALSE 37217
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: LD_VAR 0 2
37136: PUSH
37137: LD_VAR 0 3
37141: ARRAY
37142: PPUSH
37143: LD_INT 3
37145: PPUSH
37146: CALL_OW 259
37150: PUSH
37151: LD_VAR 0 2
37155: PUSH
37156: LD_VAR 0 3
37160: ARRAY
37161: PPUSH
37162: CALL_OW 432
37166: MINUS
37167: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37168: LD_VAR 0 4
37172: PUSH
37173: LD_VAR 0 5
37177: PPUSH
37178: LD_INT 3
37180: PPUSH
37181: CALL_OW 259
37185: PUSH
37186: LD_VAR 0 5
37190: PPUSH
37191: CALL_OW 432
37195: MINUS
37196: GREATEREQUAL
37197: IFFALSE 37215
// mech := result [ i ] ;
37199: LD_ADDR_VAR 0 5
37203: PUSH
37204: LD_VAR 0 2
37208: PUSH
37209: LD_VAR 0 3
37213: ARRAY
37214: ST_TO_ADDR
// end ;
37215: GO 37124
37217: POP
37218: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37219: LD_VAR 0 1
37223: PPUSH
37224: LD_VAR 0 5
37228: PPUSH
37229: CALL_OW 135
// end ;
37233: LD_VAR 0 2
37237: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37238: LD_INT 0
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
// result := [ ] ;
37253: LD_ADDR_VAR 0 7
37257: PUSH
37258: EMPTY
37259: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 266
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: IN
37280: NOT
37281: IFFALSE 37285
// exit ;
37283: GO 38919
// if name then
37285: LD_VAR 0 3
37289: IFFALSE 37305
// SetBName ( base_dep , name ) ;
37291: LD_VAR 0 1
37295: PPUSH
37296: LD_VAR 0 3
37300: PPUSH
37301: CALL_OW 500
// base := GetBase ( base_dep ) ;
37305: LD_ADDR_VAR 0 15
37309: PUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 274
37319: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37320: LD_ADDR_VAR 0 16
37324: PUSH
37325: LD_VAR 0 1
37329: PPUSH
37330: CALL_OW 255
37334: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37335: LD_ADDR_VAR 0 17
37339: PUSH
37340: LD_VAR 0 1
37344: PPUSH
37345: CALL_OW 248
37349: ST_TO_ADDR
// if sources then
37350: LD_VAR 0 5
37354: IFFALSE 37401
// for i = 1 to 3 do
37356: LD_ADDR_VAR 0 8
37360: PUSH
37361: DOUBLE
37362: LD_INT 1
37364: DEC
37365: ST_TO_ADDR
37366: LD_INT 3
37368: PUSH
37369: FOR_TO
37370: IFFALSE 37399
// AddResourceType ( base , i , sources [ i ] ) ;
37372: LD_VAR 0 15
37376: PPUSH
37377: LD_VAR 0 8
37381: PPUSH
37382: LD_VAR 0 5
37386: PUSH
37387: LD_VAR 0 8
37391: ARRAY
37392: PPUSH
37393: CALL_OW 276
37397: GO 37369
37399: POP
37400: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37401: LD_ADDR_VAR 0 18
37405: PUSH
37406: LD_VAR 0 15
37410: PPUSH
37411: LD_VAR 0 2
37415: PPUSH
37416: LD_INT 1
37418: PPUSH
37419: CALL 36662 0 3
37423: ST_TO_ADDR
// InitHc ;
37424: CALL_OW 19
// InitUc ;
37428: CALL_OW 18
// uc_side := side ;
37432: LD_ADDR_OWVAR 20
37436: PUSH
37437: LD_VAR 0 16
37441: ST_TO_ADDR
// uc_nation := nation ;
37442: LD_ADDR_OWVAR 21
37446: PUSH
37447: LD_VAR 0 17
37451: ST_TO_ADDR
// if buildings then
37452: LD_VAR 0 18
37456: IFFALSE 38778
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37458: LD_ADDR_VAR 0 19
37462: PUSH
37463: LD_VAR 0 18
37467: PPUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 30
37473: PUSH
37474: LD_INT 29
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 30
37483: PUSH
37484: LD_INT 30
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: PPUSH
37496: CALL_OW 72
37500: ST_TO_ADDR
// if tmp then
37501: LD_VAR 0 19
37505: IFFALSE 37553
// for i in tmp do
37507: LD_ADDR_VAR 0 8
37511: PUSH
37512: LD_VAR 0 19
37516: PUSH
37517: FOR_IN
37518: IFFALSE 37551
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37520: LD_VAR 0 8
37524: PPUSH
37525: CALL_OW 250
37529: PPUSH
37530: LD_VAR 0 8
37534: PPUSH
37535: CALL_OW 251
37539: PPUSH
37540: LD_VAR 0 16
37544: PPUSH
37545: CALL_OW 441
37549: GO 37517
37551: POP
37552: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37553: LD_VAR 0 18
37557: PPUSH
37558: LD_INT 2
37560: PUSH
37561: LD_INT 30
37563: PUSH
37564: LD_INT 32
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 30
37573: PUSH
37574: LD_INT 33
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: PPUSH
37586: CALL_OW 72
37590: IFFALSE 37678
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37592: LD_ADDR_VAR 0 8
37596: PUSH
37597: LD_VAR 0 18
37601: PPUSH
37602: LD_INT 2
37604: PUSH
37605: LD_INT 30
37607: PUSH
37608: LD_INT 32
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 30
37617: PUSH
37618: LD_INT 33
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL_OW 72
37634: PUSH
37635: FOR_IN
37636: IFFALSE 37676
// begin if not GetBWeapon ( i ) then
37638: LD_VAR 0 8
37642: PPUSH
37643: CALL_OW 269
37647: NOT
37648: IFFALSE 37674
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37650: LD_VAR 0 8
37654: PPUSH
37655: LD_VAR 0 8
37659: PPUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: CALL 38924 0 2
37669: PPUSH
37670: CALL_OW 431
// end ;
37674: GO 37635
37676: POP
37677: POP
// end ; for i = 1 to personel do
37678: LD_ADDR_VAR 0 8
37682: PUSH
37683: DOUBLE
37684: LD_INT 1
37686: DEC
37687: ST_TO_ADDR
37688: LD_VAR 0 6
37692: PUSH
37693: FOR_TO
37694: IFFALSE 38758
// begin if i > 4 then
37696: LD_VAR 0 8
37700: PUSH
37701: LD_INT 4
37703: GREATER
37704: IFFALSE 37708
// break ;
37706: GO 38758
// case i of 1 :
37708: LD_VAR 0 8
37712: PUSH
37713: LD_INT 1
37715: DOUBLE
37716: EQUAL
37717: IFTRUE 37721
37719: GO 37801
37721: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37722: LD_ADDR_VAR 0 12
37726: PUSH
37727: LD_VAR 0 18
37731: PPUSH
37732: LD_INT 22
37734: PUSH
37735: LD_VAR 0 16
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 58
37746: PUSH
37747: EMPTY
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 30
37755: PUSH
37756: LD_INT 32
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 30
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 30
37775: PUSH
37776: LD_INT 5
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: PPUSH
37794: CALL_OW 72
37798: ST_TO_ADDR
37799: GO 38023
37801: LD_INT 2
37803: DOUBLE
37804: EQUAL
37805: IFTRUE 37809
37807: GO 37871
37809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37810: LD_ADDR_VAR 0 12
37814: PUSH
37815: LD_VAR 0 18
37819: PPUSH
37820: LD_INT 22
37822: PUSH
37823: LD_VAR 0 16
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 30
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 30
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PPUSH
37864: CALL_OW 72
37868: ST_TO_ADDR
37869: GO 38023
37871: LD_INT 3
37873: DOUBLE
37874: EQUAL
37875: IFTRUE 37879
37877: GO 37941
37879: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37880: LD_ADDR_VAR 0 12
37884: PUSH
37885: LD_VAR 0 18
37889: PPUSH
37890: LD_INT 22
37892: PUSH
37893: LD_VAR 0 16
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: LD_INT 30
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 30
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PPUSH
37934: CALL_OW 72
37938: ST_TO_ADDR
37939: GO 38023
37941: LD_INT 4
37943: DOUBLE
37944: EQUAL
37945: IFTRUE 37949
37947: GO 38022
37949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37950: LD_ADDR_VAR 0 12
37954: PUSH
37955: LD_VAR 0 18
37959: PPUSH
37960: LD_INT 22
37962: PUSH
37963: LD_VAR 0 16
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 30
37977: PUSH
37978: LD_INT 6
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 30
37987: PUSH
37988: LD_INT 7
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 30
37997: PUSH
37998: LD_INT 8
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PPUSH
38015: CALL_OW 72
38019: ST_TO_ADDR
38020: GO 38023
38022: POP
// if i = 1 then
38023: LD_VAR 0 8
38027: PUSH
38028: LD_INT 1
38030: EQUAL
38031: IFFALSE 38142
// begin tmp := [ ] ;
38033: LD_ADDR_VAR 0 19
38037: PUSH
38038: EMPTY
38039: ST_TO_ADDR
// for j in f do
38040: LD_ADDR_VAR 0 9
38044: PUSH
38045: LD_VAR 0 12
38049: PUSH
38050: FOR_IN
38051: IFFALSE 38124
// if GetBType ( j ) = b_bunker then
38053: LD_VAR 0 9
38057: PPUSH
38058: CALL_OW 266
38062: PUSH
38063: LD_INT 32
38065: EQUAL
38066: IFFALSE 38093
// tmp := Insert ( tmp , 1 , j ) else
38068: LD_ADDR_VAR 0 19
38072: PUSH
38073: LD_VAR 0 19
38077: PPUSH
38078: LD_INT 1
38080: PPUSH
38081: LD_VAR 0 9
38085: PPUSH
38086: CALL_OW 2
38090: ST_TO_ADDR
38091: GO 38122
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38093: LD_ADDR_VAR 0 19
38097: PUSH
38098: LD_VAR 0 19
38102: PPUSH
38103: LD_VAR 0 19
38107: PUSH
38108: LD_INT 1
38110: PLUS
38111: PPUSH
38112: LD_VAR 0 9
38116: PPUSH
38117: CALL_OW 2
38121: ST_TO_ADDR
38122: GO 38050
38124: POP
38125: POP
// if tmp then
38126: LD_VAR 0 19
38130: IFFALSE 38142
// f := tmp ;
38132: LD_ADDR_VAR 0 12
38136: PUSH
38137: LD_VAR 0 19
38141: ST_TO_ADDR
// end ; x := personel [ i ] ;
38142: LD_ADDR_VAR 0 13
38146: PUSH
38147: LD_VAR 0 6
38151: PUSH
38152: LD_VAR 0 8
38156: ARRAY
38157: ST_TO_ADDR
// if x = - 1 then
38158: LD_VAR 0 13
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: EQUAL
38167: IFFALSE 38376
// begin for j in f do
38169: LD_ADDR_VAR 0 9
38173: PUSH
38174: LD_VAR 0 12
38178: PUSH
38179: FOR_IN
38180: IFFALSE 38372
// repeat InitHc ;
38182: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38186: LD_VAR 0 9
38190: PPUSH
38191: CALL_OW 266
38195: PUSH
38196: LD_INT 5
38198: EQUAL
38199: IFFALSE 38269
// begin if UnitsInside ( j ) < 3 then
38201: LD_VAR 0 9
38205: PPUSH
38206: CALL_OW 313
38210: PUSH
38211: LD_INT 3
38213: LESS
38214: IFFALSE 38250
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38216: LD_INT 0
38218: PPUSH
38219: LD_INT 5
38221: PUSH
38222: LD_INT 8
38224: PUSH
38225: LD_INT 9
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 17
38237: ARRAY
38238: PPUSH
38239: LD_VAR 0 4
38243: PPUSH
38244: CALL_OW 380
38248: GO 38267
// PrepareHuman ( false , i , skill ) ;
38250: LD_INT 0
38252: PPUSH
38253: LD_VAR 0 8
38257: PPUSH
38258: LD_VAR 0 4
38262: PPUSH
38263: CALL_OW 380
// end else
38267: GO 38286
// PrepareHuman ( false , i , skill ) ;
38269: LD_INT 0
38271: PPUSH
38272: LD_VAR 0 8
38276: PPUSH
38277: LD_VAR 0 4
38281: PPUSH
38282: CALL_OW 380
// un := CreateHuman ;
38286: LD_ADDR_VAR 0 14
38290: PUSH
38291: CALL_OW 44
38295: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38296: LD_ADDR_VAR 0 7
38300: PUSH
38301: LD_VAR 0 7
38305: PPUSH
38306: LD_INT 1
38308: PPUSH
38309: LD_VAR 0 14
38313: PPUSH
38314: CALL_OW 2
38318: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38319: LD_VAR 0 14
38323: PPUSH
38324: LD_VAR 0 9
38328: PPUSH
38329: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38333: LD_VAR 0 9
38337: PPUSH
38338: CALL_OW 313
38342: PUSH
38343: LD_INT 6
38345: EQUAL
38346: PUSH
38347: LD_VAR 0 9
38351: PPUSH
38352: CALL_OW 266
38356: PUSH
38357: LD_INT 32
38359: PUSH
38360: LD_INT 31
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: IN
38367: OR
38368: IFFALSE 38182
38370: GO 38179
38372: POP
38373: POP
// end else
38374: GO 38756
// for j = 1 to x do
38376: LD_ADDR_VAR 0 9
38380: PUSH
38381: DOUBLE
38382: LD_INT 1
38384: DEC
38385: ST_TO_ADDR
38386: LD_VAR 0 13
38390: PUSH
38391: FOR_TO
38392: IFFALSE 38754
// begin InitHc ;
38394: CALL_OW 19
// if not f then
38398: LD_VAR 0 12
38402: NOT
38403: IFFALSE 38492
// begin PrepareHuman ( false , i , skill ) ;
38405: LD_INT 0
38407: PPUSH
38408: LD_VAR 0 8
38412: PPUSH
38413: LD_VAR 0 4
38417: PPUSH
38418: CALL_OW 380
// un := CreateHuman ;
38422: LD_ADDR_VAR 0 14
38426: PUSH
38427: CALL_OW 44
38431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38432: LD_ADDR_VAR 0 7
38436: PUSH
38437: LD_VAR 0 7
38441: PPUSH
38442: LD_INT 1
38444: PPUSH
38445: LD_VAR 0 14
38449: PPUSH
38450: CALL_OW 2
38454: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38455: LD_VAR 0 14
38459: PPUSH
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 250
38469: PPUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 251
38479: PPUSH
38480: LD_INT 10
38482: PPUSH
38483: LD_INT 0
38485: PPUSH
38486: CALL_OW 50
// continue ;
38490: GO 38391
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38492: LD_VAR 0 12
38496: PUSH
38497: LD_INT 1
38499: ARRAY
38500: PPUSH
38501: CALL_OW 313
38505: PUSH
38506: LD_VAR 0 12
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: PPUSH
38515: CALL_OW 266
38519: PUSH
38520: LD_INT 32
38522: PUSH
38523: LD_INT 31
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: IN
38530: AND
38531: PUSH
38532: LD_VAR 0 12
38536: PUSH
38537: LD_INT 1
38539: ARRAY
38540: PPUSH
38541: CALL_OW 313
38545: PUSH
38546: LD_INT 6
38548: EQUAL
38549: OR
38550: IFFALSE 38570
// f := Delete ( f , 1 ) ;
38552: LD_ADDR_VAR 0 12
38556: PUSH
38557: LD_VAR 0 12
38561: PPUSH
38562: LD_INT 1
38564: PPUSH
38565: CALL_OW 3
38569: ST_TO_ADDR
// if not f then
38570: LD_VAR 0 12
38574: NOT
38575: IFFALSE 38593
// begin x := x + 2 ;
38577: LD_ADDR_VAR 0 13
38581: PUSH
38582: LD_VAR 0 13
38586: PUSH
38587: LD_INT 2
38589: PLUS
38590: ST_TO_ADDR
// continue ;
38591: GO 38391
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38593: LD_VAR 0 12
38597: PUSH
38598: LD_INT 1
38600: ARRAY
38601: PPUSH
38602: CALL_OW 266
38606: PUSH
38607: LD_INT 5
38609: EQUAL
38610: IFFALSE 38684
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38612: LD_VAR 0 12
38616: PUSH
38617: LD_INT 1
38619: ARRAY
38620: PPUSH
38621: CALL_OW 313
38625: PUSH
38626: LD_INT 3
38628: LESS
38629: IFFALSE 38665
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38631: LD_INT 0
38633: PPUSH
38634: LD_INT 5
38636: PUSH
38637: LD_INT 8
38639: PUSH
38640: LD_INT 9
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: PUSH
38648: LD_VAR 0 17
38652: ARRAY
38653: PPUSH
38654: LD_VAR 0 4
38658: PPUSH
38659: CALL_OW 380
38663: GO 38682
// PrepareHuman ( false , i , skill ) ;
38665: LD_INT 0
38667: PPUSH
38668: LD_VAR 0 8
38672: PPUSH
38673: LD_VAR 0 4
38677: PPUSH
38678: CALL_OW 380
// end else
38682: GO 38701
// PrepareHuman ( false , i , skill ) ;
38684: LD_INT 0
38686: PPUSH
38687: LD_VAR 0 8
38691: PPUSH
38692: LD_VAR 0 4
38696: PPUSH
38697: CALL_OW 380
// un := CreateHuman ;
38701: LD_ADDR_VAR 0 14
38705: PUSH
38706: CALL_OW 44
38710: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38711: LD_ADDR_VAR 0 7
38715: PUSH
38716: LD_VAR 0 7
38720: PPUSH
38721: LD_INT 1
38723: PPUSH
38724: LD_VAR 0 14
38728: PPUSH
38729: CALL_OW 2
38733: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38734: LD_VAR 0 14
38738: PPUSH
38739: LD_VAR 0 12
38743: PUSH
38744: LD_INT 1
38746: ARRAY
38747: PPUSH
38748: CALL_OW 52
// end ;
38752: GO 38391
38754: POP
38755: POP
// end ;
38756: GO 37693
38758: POP
38759: POP
// result := result ^ buildings ;
38760: LD_ADDR_VAR 0 7
38764: PUSH
38765: LD_VAR 0 7
38769: PUSH
38770: LD_VAR 0 18
38774: ADD
38775: ST_TO_ADDR
// end else
38776: GO 38919
// begin for i = 1 to personel do
38778: LD_ADDR_VAR 0 8
38782: PUSH
38783: DOUBLE
38784: LD_INT 1
38786: DEC
38787: ST_TO_ADDR
38788: LD_VAR 0 6
38792: PUSH
38793: FOR_TO
38794: IFFALSE 38917
// begin if i > 4 then
38796: LD_VAR 0 8
38800: PUSH
38801: LD_INT 4
38803: GREATER
38804: IFFALSE 38808
// break ;
38806: GO 38917
// x := personel [ i ] ;
38808: LD_ADDR_VAR 0 13
38812: PUSH
38813: LD_VAR 0 6
38817: PUSH
38818: LD_VAR 0 8
38822: ARRAY
38823: ST_TO_ADDR
// if x = - 1 then
38824: LD_VAR 0 13
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: EQUAL
38833: IFFALSE 38837
// continue ;
38835: GO 38793
// PrepareHuman ( false , i , skill ) ;
38837: LD_INT 0
38839: PPUSH
38840: LD_VAR 0 8
38844: PPUSH
38845: LD_VAR 0 4
38849: PPUSH
38850: CALL_OW 380
// un := CreateHuman ;
38854: LD_ADDR_VAR 0 14
38858: PUSH
38859: CALL_OW 44
38863: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38864: LD_VAR 0 14
38868: PPUSH
38869: LD_VAR 0 1
38873: PPUSH
38874: CALL_OW 250
38878: PPUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL_OW 251
38888: PPUSH
38889: LD_INT 10
38891: PPUSH
38892: LD_INT 0
38894: PPUSH
38895: CALL_OW 50
// result := result ^ un ;
38899: LD_ADDR_VAR 0 7
38903: PUSH
38904: LD_VAR 0 7
38908: PUSH
38909: LD_VAR 0 14
38913: ADD
38914: ST_TO_ADDR
// end ;
38915: GO 38793
38917: POP
38918: POP
// end ; end ;
38919: LD_VAR 0 7
38923: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38924: LD_INT 0
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
// result := false ;
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_INT 0
38949: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38950: LD_VAR 0 1
38954: NOT
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 266
38965: PUSH
38966: LD_INT 32
38968: PUSH
38969: LD_INT 33
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: IN
38976: NOT
38977: OR
38978: IFFALSE 38982
// exit ;
38980: GO 40091
// nat := GetNation ( tower ) ;
38982: LD_ADDR_VAR 0 12
38986: PUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 248
38996: ST_TO_ADDR
// side := GetSide ( tower ) ;
38997: LD_ADDR_VAR 0 16
39001: PUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 255
39011: ST_TO_ADDR
// x := GetX ( tower ) ;
39012: LD_ADDR_VAR 0 10
39016: PUSH
39017: LD_VAR 0 1
39021: PPUSH
39022: CALL_OW 250
39026: ST_TO_ADDR
// y := GetY ( tower ) ;
39027: LD_ADDR_VAR 0 11
39031: PUSH
39032: LD_VAR 0 1
39036: PPUSH
39037: CALL_OW 251
39041: ST_TO_ADDR
// if not x or not y then
39042: LD_VAR 0 10
39046: NOT
39047: PUSH
39048: LD_VAR 0 11
39052: NOT
39053: OR
39054: IFFALSE 39058
// exit ;
39056: GO 40091
// weapon := 0 ;
39058: LD_ADDR_VAR 0 18
39062: PUSH
39063: LD_INT 0
39065: ST_TO_ADDR
// fac_list := [ ] ;
39066: LD_ADDR_VAR 0 17
39070: PUSH
39071: EMPTY
39072: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39073: LD_ADDR_VAR 0 6
39077: PUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 274
39087: PPUSH
39088: LD_VAR 0 2
39092: PPUSH
39093: LD_INT 0
39095: PPUSH
39096: CALL 36662 0 3
39100: PPUSH
39101: LD_INT 30
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PPUSH
39111: CALL_OW 72
39115: ST_TO_ADDR
// if not factories then
39116: LD_VAR 0 6
39120: NOT
39121: IFFALSE 39125
// exit ;
39123: GO 40091
// for i in factories do
39125: LD_ADDR_VAR 0 8
39129: PUSH
39130: LD_VAR 0 6
39134: PUSH
39135: FOR_IN
39136: IFFALSE 39161
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39138: LD_ADDR_VAR 0 17
39142: PUSH
39143: LD_VAR 0 17
39147: PUSH
39148: LD_VAR 0 8
39152: PPUSH
39153: CALL_OW 478
39157: UNION
39158: ST_TO_ADDR
39159: GO 39135
39161: POP
39162: POP
// if not fac_list then
39163: LD_VAR 0 17
39167: NOT
39168: IFFALSE 39172
// exit ;
39170: GO 40091
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39172: LD_ADDR_VAR 0 5
39176: PUSH
39177: LD_INT 4
39179: PUSH
39180: LD_INT 5
39182: PUSH
39183: LD_INT 9
39185: PUSH
39186: LD_INT 10
39188: PUSH
39189: LD_INT 6
39191: PUSH
39192: LD_INT 7
39194: PUSH
39195: LD_INT 11
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 27
39209: PUSH
39210: LD_INT 28
39212: PUSH
39213: LD_INT 26
39215: PUSH
39216: LD_INT 30
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 43
39227: PUSH
39228: LD_INT 44
39230: PUSH
39231: LD_INT 46
39233: PUSH
39234: LD_INT 45
39236: PUSH
39237: LD_INT 47
39239: PUSH
39240: LD_INT 49
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: LD_VAR 0 12
39260: ARRAY
39261: ST_TO_ADDR
// list := list isect fac_list ;
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: LD_VAR 0 5
39271: PUSH
39272: LD_VAR 0 17
39276: ISECT
39277: ST_TO_ADDR
// if not list then
39278: LD_VAR 0 5
39282: NOT
39283: IFFALSE 39287
// exit ;
39285: GO 40091
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39287: LD_VAR 0 12
39291: PUSH
39292: LD_INT 3
39294: EQUAL
39295: PUSH
39296: LD_INT 49
39298: PUSH
39299: LD_VAR 0 5
39303: IN
39304: AND
39305: PUSH
39306: LD_INT 31
39308: PPUSH
39309: LD_VAR 0 16
39313: PPUSH
39314: CALL_OW 321
39318: PUSH
39319: LD_INT 2
39321: EQUAL
39322: AND
39323: IFFALSE 39383
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39325: LD_INT 22
39327: PUSH
39328: LD_VAR 0 16
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 35
39339: PUSH
39340: LD_INT 49
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 91
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 10
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: PPUSH
39368: CALL_OW 69
39372: NOT
39373: IFFALSE 39383
// weapon := ru_time_lapser ;
39375: LD_ADDR_VAR 0 18
39379: PUSH
39380: LD_INT 49
39382: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39383: LD_VAR 0 12
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: IN
39398: PUSH
39399: LD_INT 11
39401: PUSH
39402: LD_VAR 0 5
39406: IN
39407: PUSH
39408: LD_INT 30
39410: PUSH
39411: LD_VAR 0 5
39415: IN
39416: OR
39417: AND
39418: PUSH
39419: LD_INT 6
39421: PPUSH
39422: LD_VAR 0 16
39426: PPUSH
39427: CALL_OW 321
39431: PUSH
39432: LD_INT 2
39434: EQUAL
39435: AND
39436: IFFALSE 39601
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39438: LD_INT 22
39440: PUSH
39441: LD_VAR 0 16
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 35
39455: PUSH
39456: LD_INT 11
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 35
39465: PUSH
39466: LD_INT 30
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 91
39480: PUSH
39481: LD_VAR 0 1
39485: PUSH
39486: LD_INT 18
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: PPUSH
39499: CALL_OW 69
39503: NOT
39504: PUSH
39505: LD_INT 22
39507: PUSH
39508: LD_VAR 0 16
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 30
39522: PUSH
39523: LD_INT 32
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 30
39532: PUSH
39533: LD_INT 33
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 91
39547: PUSH
39548: LD_VAR 0 1
39552: PUSH
39553: LD_INT 12
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: PPUSH
39569: CALL_OW 69
39573: PUSH
39574: LD_INT 2
39576: GREATER
39577: AND
39578: IFFALSE 39601
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39580: LD_ADDR_VAR 0 18
39584: PUSH
39585: LD_INT 11
39587: PUSH
39588: LD_INT 30
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_VAR 0 12
39599: ARRAY
39600: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39601: LD_VAR 0 18
39605: NOT
39606: PUSH
39607: LD_INT 40
39609: PPUSH
39610: LD_VAR 0 16
39614: PPUSH
39615: CALL_OW 321
39619: PUSH
39620: LD_INT 2
39622: EQUAL
39623: AND
39624: PUSH
39625: LD_INT 7
39627: PUSH
39628: LD_VAR 0 5
39632: IN
39633: PUSH
39634: LD_INT 28
39636: PUSH
39637: LD_VAR 0 5
39641: IN
39642: OR
39643: PUSH
39644: LD_INT 45
39646: PUSH
39647: LD_VAR 0 5
39651: IN
39652: OR
39653: AND
39654: IFFALSE 39908
// begin hex := GetHexInfo ( x , y ) ;
39656: LD_ADDR_VAR 0 4
39660: PUSH
39661: LD_VAR 0 10
39665: PPUSH
39666: LD_VAR 0 11
39670: PPUSH
39671: CALL_OW 546
39675: ST_TO_ADDR
// if hex [ 1 ] then
39676: LD_VAR 0 4
39680: PUSH
39681: LD_INT 1
39683: ARRAY
39684: IFFALSE 39688
// exit ;
39686: GO 40091
// height := hex [ 2 ] ;
39688: LD_ADDR_VAR 0 15
39692: PUSH
39693: LD_VAR 0 4
39697: PUSH
39698: LD_INT 2
39700: ARRAY
39701: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39702: LD_ADDR_VAR 0 14
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: LD_INT 5
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
// for i in tmp do
39725: LD_ADDR_VAR 0 8
39729: PUSH
39730: LD_VAR 0 14
39734: PUSH
39735: FOR_IN
39736: IFFALSE 39906
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39738: LD_ADDR_VAR 0 9
39742: PUSH
39743: LD_VAR 0 10
39747: PPUSH
39748: LD_VAR 0 8
39752: PPUSH
39753: LD_INT 5
39755: PPUSH
39756: CALL_OW 272
39760: PUSH
39761: LD_VAR 0 11
39765: PPUSH
39766: LD_VAR 0 8
39770: PPUSH
39771: LD_INT 5
39773: PPUSH
39774: CALL_OW 273
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39783: LD_VAR 0 9
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: PPUSH
39792: LD_VAR 0 9
39796: PUSH
39797: LD_INT 2
39799: ARRAY
39800: PPUSH
39801: CALL_OW 488
39805: IFFALSE 39904
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39807: LD_ADDR_VAR 0 4
39811: PUSH
39812: LD_VAR 0 9
39816: PUSH
39817: LD_INT 1
39819: ARRAY
39820: PPUSH
39821: LD_VAR 0 9
39825: PUSH
39826: LD_INT 2
39828: ARRAY
39829: PPUSH
39830: CALL_OW 546
39834: ST_TO_ADDR
// if hex [ 1 ] then
39835: LD_VAR 0 4
39839: PUSH
39840: LD_INT 1
39842: ARRAY
39843: IFFALSE 39847
// continue ;
39845: GO 39735
// h := hex [ 2 ] ;
39847: LD_ADDR_VAR 0 13
39851: PUSH
39852: LD_VAR 0 4
39856: PUSH
39857: LD_INT 2
39859: ARRAY
39860: ST_TO_ADDR
// if h + 7 < height then
39861: LD_VAR 0 13
39865: PUSH
39866: LD_INT 7
39868: PLUS
39869: PUSH
39870: LD_VAR 0 15
39874: LESS
39875: IFFALSE 39904
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39877: LD_ADDR_VAR 0 18
39881: PUSH
39882: LD_INT 7
39884: PUSH
39885: LD_INT 28
39887: PUSH
39888: LD_INT 45
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: PUSH
39896: LD_VAR 0 12
39900: ARRAY
39901: ST_TO_ADDR
// break ;
39902: GO 39906
// end ; end ; end ;
39904: GO 39735
39906: POP
39907: POP
// end ; if not weapon then
39908: LD_VAR 0 18
39912: NOT
39913: IFFALSE 39973
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39915: LD_ADDR_VAR 0 5
39919: PUSH
39920: LD_VAR 0 5
39924: PUSH
39925: LD_INT 11
39927: PUSH
39928: LD_INT 30
39930: PUSH
39931: LD_INT 49
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: LIST
39938: DIFF
39939: ST_TO_ADDR
// if not list then
39940: LD_VAR 0 5
39944: NOT
39945: IFFALSE 39949
// exit ;
39947: GO 40091
// weapon := list [ rand ( 1 , list ) ] ;
39949: LD_ADDR_VAR 0 18
39953: PUSH
39954: LD_VAR 0 5
39958: PUSH
39959: LD_INT 1
39961: PPUSH
39962: LD_VAR 0 5
39966: PPUSH
39967: CALL_OW 12
39971: ARRAY
39972: ST_TO_ADDR
// end ; if weapon then
39973: LD_VAR 0 18
39977: IFFALSE 40091
// begin tmp := CostOfWeapon ( weapon ) ;
39979: LD_ADDR_VAR 0 14
39983: PUSH
39984: LD_VAR 0 18
39988: PPUSH
39989: CALL_OW 451
39993: ST_TO_ADDR
// j := GetBase ( tower ) ;
39994: LD_ADDR_VAR 0 9
39998: PUSH
39999: LD_VAR 0 1
40003: PPUSH
40004: CALL_OW 274
40008: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40009: LD_VAR 0 9
40013: PPUSH
40014: LD_INT 1
40016: PPUSH
40017: CALL_OW 275
40021: PUSH
40022: LD_VAR 0 14
40026: PUSH
40027: LD_INT 1
40029: ARRAY
40030: GREATEREQUAL
40031: PUSH
40032: LD_VAR 0 9
40036: PPUSH
40037: LD_INT 2
40039: PPUSH
40040: CALL_OW 275
40044: PUSH
40045: LD_VAR 0 14
40049: PUSH
40050: LD_INT 2
40052: ARRAY
40053: GREATEREQUAL
40054: AND
40055: PUSH
40056: LD_VAR 0 9
40060: PPUSH
40061: LD_INT 3
40063: PPUSH
40064: CALL_OW 275
40068: PUSH
40069: LD_VAR 0 14
40073: PUSH
40074: LD_INT 3
40076: ARRAY
40077: GREATEREQUAL
40078: AND
40079: IFFALSE 40091
// result := weapon ;
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_VAR 0 18
40090: ST_TO_ADDR
// end ; end ;
40091: LD_VAR 0 3
40095: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40096: LD_INT 0
40098: PPUSH
40099: PPUSH
// result := true ;
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: LD_INT 1
40107: ST_TO_ADDR
// if array1 = array2 then
40108: LD_VAR 0 1
40112: PUSH
40113: LD_VAR 0 2
40117: EQUAL
40118: IFFALSE 40178
// begin for i = 1 to array1 do
40120: LD_ADDR_VAR 0 4
40124: PUSH
40125: DOUBLE
40126: LD_INT 1
40128: DEC
40129: ST_TO_ADDR
40130: LD_VAR 0 1
40134: PUSH
40135: FOR_TO
40136: IFFALSE 40174
// if array1 [ i ] <> array2 [ i ] then
40138: LD_VAR 0 1
40142: PUSH
40143: LD_VAR 0 4
40147: ARRAY
40148: PUSH
40149: LD_VAR 0 2
40153: PUSH
40154: LD_VAR 0 4
40158: ARRAY
40159: NONEQUAL
40160: IFFALSE 40172
// begin result := false ;
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_INT 0
40169: ST_TO_ADDR
// break ;
40170: GO 40174
// end ;
40172: GO 40135
40174: POP
40175: POP
// end else
40176: GO 40186
// result := false ;
40178: LD_ADDR_VAR 0 3
40182: PUSH
40183: LD_INT 0
40185: ST_TO_ADDR
// end ;
40186: LD_VAR 0 3
40190: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40191: LD_INT 0
40193: PPUSH
40194: PPUSH
// if not array1 or not array2 then
40195: LD_VAR 0 1
40199: NOT
40200: PUSH
40201: LD_VAR 0 2
40205: NOT
40206: OR
40207: IFFALSE 40211
// exit ;
40209: GO 40275
// result := true ;
40211: LD_ADDR_VAR 0 3
40215: PUSH
40216: LD_INT 1
40218: ST_TO_ADDR
// for i = 1 to array1 do
40219: LD_ADDR_VAR 0 4
40223: PUSH
40224: DOUBLE
40225: LD_INT 1
40227: DEC
40228: ST_TO_ADDR
40229: LD_VAR 0 1
40233: PUSH
40234: FOR_TO
40235: IFFALSE 40273
// if array1 [ i ] <> array2 [ i ] then
40237: LD_VAR 0 1
40241: PUSH
40242: LD_VAR 0 4
40246: ARRAY
40247: PUSH
40248: LD_VAR 0 2
40252: PUSH
40253: LD_VAR 0 4
40257: ARRAY
40258: NONEQUAL
40259: IFFALSE 40271
// begin result := false ;
40261: LD_ADDR_VAR 0 3
40265: PUSH
40266: LD_INT 0
40268: ST_TO_ADDR
// break ;
40269: GO 40273
// end ;
40271: GO 40234
40273: POP
40274: POP
// end ;
40275: LD_VAR 0 3
40279: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40280: LD_INT 0
40282: PPUSH
40283: PPUSH
40284: PPUSH
// pom := GetBase ( fac ) ;
40285: LD_ADDR_VAR 0 5
40289: PUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 274
40299: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40300: LD_ADDR_VAR 0 4
40304: PUSH
40305: LD_VAR 0 2
40309: PUSH
40310: LD_INT 1
40312: ARRAY
40313: PPUSH
40314: LD_VAR 0 2
40318: PUSH
40319: LD_INT 2
40321: ARRAY
40322: PPUSH
40323: LD_VAR 0 2
40327: PUSH
40328: LD_INT 3
40330: ARRAY
40331: PPUSH
40332: LD_VAR 0 2
40336: PUSH
40337: LD_INT 4
40339: ARRAY
40340: PPUSH
40341: CALL_OW 449
40345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40346: LD_ADDR_VAR 0 3
40350: PUSH
40351: LD_VAR 0 5
40355: PPUSH
40356: LD_INT 1
40358: PPUSH
40359: CALL_OW 275
40363: PUSH
40364: LD_VAR 0 4
40368: PUSH
40369: LD_INT 1
40371: ARRAY
40372: GREATEREQUAL
40373: PUSH
40374: LD_VAR 0 5
40378: PPUSH
40379: LD_INT 2
40381: PPUSH
40382: CALL_OW 275
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: GREATEREQUAL
40396: AND
40397: PUSH
40398: LD_VAR 0 5
40402: PPUSH
40403: LD_INT 3
40405: PPUSH
40406: CALL_OW 275
40410: PUSH
40411: LD_VAR 0 4
40415: PUSH
40416: LD_INT 3
40418: ARRAY
40419: GREATEREQUAL
40420: AND
40421: ST_TO_ADDR
// end ;
40422: LD_VAR 0 3
40426: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40427: LD_INT 0
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
// pom := GetBase ( building ) ;
40433: LD_ADDR_VAR 0 3
40437: PUSH
40438: LD_VAR 0 1
40442: PPUSH
40443: CALL_OW 274
40447: ST_TO_ADDR
// if not pom then
40448: LD_VAR 0 3
40452: NOT
40453: IFFALSE 40457
// exit ;
40455: GO 40627
// btype := GetBType ( building ) ;
40457: LD_ADDR_VAR 0 5
40461: PUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: CALL_OW 266
40471: ST_TO_ADDR
// if btype = b_armoury then
40472: LD_VAR 0 5
40476: PUSH
40477: LD_INT 4
40479: EQUAL
40480: IFFALSE 40490
// btype := b_barracks ;
40482: LD_ADDR_VAR 0 5
40486: PUSH
40487: LD_INT 5
40489: ST_TO_ADDR
// if btype = b_depot then
40490: LD_VAR 0 5
40494: PUSH
40495: LD_INT 0
40497: EQUAL
40498: IFFALSE 40508
// btype := b_warehouse ;
40500: LD_ADDR_VAR 0 5
40504: PUSH
40505: LD_INT 1
40507: ST_TO_ADDR
// if btype = b_workshop then
40508: LD_VAR 0 5
40512: PUSH
40513: LD_INT 2
40515: EQUAL
40516: IFFALSE 40526
// btype := b_factory ;
40518: LD_ADDR_VAR 0 5
40522: PUSH
40523: LD_INT 3
40525: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40526: LD_ADDR_VAR 0 4
40530: PUSH
40531: LD_VAR 0 5
40535: PPUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 248
40545: PPUSH
40546: CALL_OW 450
40550: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40551: LD_ADDR_VAR 0 2
40555: PUSH
40556: LD_VAR 0 3
40560: PPUSH
40561: LD_INT 1
40563: PPUSH
40564: CALL_OW 275
40568: PUSH
40569: LD_VAR 0 4
40573: PUSH
40574: LD_INT 1
40576: ARRAY
40577: GREATEREQUAL
40578: PUSH
40579: LD_VAR 0 3
40583: PPUSH
40584: LD_INT 2
40586: PPUSH
40587: CALL_OW 275
40591: PUSH
40592: LD_VAR 0 4
40596: PUSH
40597: LD_INT 2
40599: ARRAY
40600: GREATEREQUAL
40601: AND
40602: PUSH
40603: LD_VAR 0 3
40607: PPUSH
40608: LD_INT 3
40610: PPUSH
40611: CALL_OW 275
40615: PUSH
40616: LD_VAR 0 4
40620: PUSH
40621: LD_INT 3
40623: ARRAY
40624: GREATEREQUAL
40625: AND
40626: ST_TO_ADDR
// end ;
40627: LD_VAR 0 2
40631: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40632: LD_INT 0
40634: PPUSH
40635: PPUSH
40636: PPUSH
// pom := GetBase ( building ) ;
40637: LD_ADDR_VAR 0 4
40641: PUSH
40642: LD_VAR 0 1
40646: PPUSH
40647: CALL_OW 274
40651: ST_TO_ADDR
// if not pom then
40652: LD_VAR 0 4
40656: NOT
40657: IFFALSE 40661
// exit ;
40659: GO 40762
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40661: LD_ADDR_VAR 0 5
40665: PUSH
40666: LD_VAR 0 2
40670: PPUSH
40671: LD_VAR 0 1
40675: PPUSH
40676: CALL_OW 248
40680: PPUSH
40681: CALL_OW 450
40685: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40686: LD_ADDR_VAR 0 3
40690: PUSH
40691: LD_VAR 0 4
40695: PPUSH
40696: LD_INT 1
40698: PPUSH
40699: CALL_OW 275
40703: PUSH
40704: LD_VAR 0 5
40708: PUSH
40709: LD_INT 1
40711: ARRAY
40712: GREATEREQUAL
40713: PUSH
40714: LD_VAR 0 4
40718: PPUSH
40719: LD_INT 2
40721: PPUSH
40722: CALL_OW 275
40726: PUSH
40727: LD_VAR 0 5
40731: PUSH
40732: LD_INT 2
40734: ARRAY
40735: GREATEREQUAL
40736: AND
40737: PUSH
40738: LD_VAR 0 4
40742: PPUSH
40743: LD_INT 3
40745: PPUSH
40746: CALL_OW 275
40750: PUSH
40751: LD_VAR 0 5
40755: PUSH
40756: LD_INT 3
40758: ARRAY
40759: GREATEREQUAL
40760: AND
40761: ST_TO_ADDR
// end ;
40762: LD_VAR 0 3
40766: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40767: LD_INT 0
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
// result := false ;
40780: LD_ADDR_VAR 0 8
40784: PUSH
40785: LD_INT 0
40787: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40788: LD_VAR 0 5
40792: NOT
40793: PUSH
40794: LD_VAR 0 1
40798: NOT
40799: OR
40800: PUSH
40801: LD_VAR 0 2
40805: NOT
40806: OR
40807: PUSH
40808: LD_VAR 0 3
40812: NOT
40813: OR
40814: IFFALSE 40818
// exit ;
40816: GO 41632
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40818: LD_ADDR_VAR 0 14
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: LD_VAR 0 2
40832: PPUSH
40833: LD_VAR 0 3
40837: PPUSH
40838: LD_VAR 0 4
40842: PPUSH
40843: LD_VAR 0 5
40847: PUSH
40848: LD_INT 1
40850: ARRAY
40851: PPUSH
40852: CALL_OW 248
40856: PPUSH
40857: LD_INT 0
40859: PPUSH
40860: CALL 42869 0 6
40864: ST_TO_ADDR
// if not hexes then
40865: LD_VAR 0 14
40869: NOT
40870: IFFALSE 40874
// exit ;
40872: GO 41632
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40874: LD_ADDR_VAR 0 17
40878: PUSH
40879: LD_VAR 0 5
40883: PPUSH
40884: LD_INT 22
40886: PUSH
40887: LD_VAR 0 13
40891: PPUSH
40892: CALL_OW 255
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 30
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 30
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PPUSH
40933: CALL_OW 72
40937: ST_TO_ADDR
// for i = 1 to hexes do
40938: LD_ADDR_VAR 0 9
40942: PUSH
40943: DOUBLE
40944: LD_INT 1
40946: DEC
40947: ST_TO_ADDR
40948: LD_VAR 0 14
40952: PUSH
40953: FOR_TO
40954: IFFALSE 41630
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40956: LD_ADDR_VAR 0 13
40960: PUSH
40961: LD_VAR 0 14
40965: PUSH
40966: LD_VAR 0 9
40970: ARRAY
40971: PUSH
40972: LD_INT 1
40974: ARRAY
40975: PPUSH
40976: LD_VAR 0 14
40980: PUSH
40981: LD_VAR 0 9
40985: ARRAY
40986: PUSH
40987: LD_INT 2
40989: ARRAY
40990: PPUSH
40991: CALL_OW 428
40995: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40996: LD_VAR 0 14
41000: PUSH
41001: LD_VAR 0 9
41005: ARRAY
41006: PUSH
41007: LD_INT 1
41009: ARRAY
41010: PPUSH
41011: LD_VAR 0 14
41015: PUSH
41016: LD_VAR 0 9
41020: ARRAY
41021: PUSH
41022: LD_INT 2
41024: ARRAY
41025: PPUSH
41026: CALL_OW 351
41030: PUSH
41031: LD_VAR 0 14
41035: PUSH
41036: LD_VAR 0 9
41040: ARRAY
41041: PUSH
41042: LD_INT 1
41044: ARRAY
41045: PPUSH
41046: LD_VAR 0 14
41050: PUSH
41051: LD_VAR 0 9
41055: ARRAY
41056: PUSH
41057: LD_INT 2
41059: ARRAY
41060: PPUSH
41061: CALL_OW 488
41065: NOT
41066: OR
41067: PUSH
41068: LD_VAR 0 13
41072: PPUSH
41073: CALL_OW 247
41077: PUSH
41078: LD_INT 3
41080: EQUAL
41081: OR
41082: IFFALSE 41088
// exit ;
41084: POP
41085: POP
41086: GO 41632
// if not tmp then
41088: LD_VAR 0 13
41092: NOT
41093: IFFALSE 41097
// continue ;
41095: GO 40953
// result := true ;
41097: LD_ADDR_VAR 0 8
41101: PUSH
41102: LD_INT 1
41104: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41105: LD_VAR 0 6
41109: PUSH
41110: LD_VAR 0 13
41114: PPUSH
41115: CALL_OW 247
41119: PUSH
41120: LD_INT 2
41122: EQUAL
41123: AND
41124: PUSH
41125: LD_VAR 0 13
41129: PPUSH
41130: CALL_OW 263
41134: PUSH
41135: LD_INT 1
41137: EQUAL
41138: AND
41139: IFFALSE 41303
// begin if IsDrivenBy ( tmp ) then
41141: LD_VAR 0 13
41145: PPUSH
41146: CALL_OW 311
41150: IFFALSE 41154
// continue ;
41152: GO 40953
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41154: LD_VAR 0 6
41158: PPUSH
41159: LD_INT 3
41161: PUSH
41162: LD_INT 60
41164: PUSH
41165: EMPTY
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: LD_INT 55
41177: PUSH
41178: EMPTY
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PPUSH
41189: CALL_OW 72
41193: IFFALSE 41301
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41195: LD_ADDR_VAR 0 18
41199: PUSH
41200: LD_VAR 0 6
41204: PPUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 60
41210: PUSH
41211: EMPTY
41212: LIST
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: LD_INT 55
41223: PUSH
41224: EMPTY
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PPUSH
41235: CALL_OW 72
41239: PUSH
41240: LD_INT 1
41242: ARRAY
41243: ST_TO_ADDR
// if IsInUnit ( driver ) then
41244: LD_VAR 0 18
41248: PPUSH
41249: CALL_OW 310
41253: IFFALSE 41264
// ComExit ( driver ) ;
41255: LD_VAR 0 18
41259: PPUSH
41260: CALL 66053 0 1
// AddComEnterUnit ( driver , tmp ) ;
41264: LD_VAR 0 18
41268: PPUSH
41269: LD_VAR 0 13
41273: PPUSH
41274: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41278: LD_VAR 0 18
41282: PPUSH
41283: LD_VAR 0 7
41287: PPUSH
41288: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41292: LD_VAR 0 18
41296: PPUSH
41297: CALL_OW 181
// end ; continue ;
41301: GO 40953
// end ; if not cleaners or not tmp in cleaners then
41303: LD_VAR 0 6
41307: NOT
41308: PUSH
41309: LD_VAR 0 13
41313: PUSH
41314: LD_VAR 0 6
41318: IN
41319: NOT
41320: OR
41321: IFFALSE 41628
// begin if dep then
41323: LD_VAR 0 17
41327: IFFALSE 41463
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41329: LD_ADDR_VAR 0 16
41333: PUSH
41334: LD_VAR 0 17
41338: PUSH
41339: LD_INT 1
41341: ARRAY
41342: PPUSH
41343: CALL_OW 250
41347: PPUSH
41348: LD_VAR 0 17
41352: PUSH
41353: LD_INT 1
41355: ARRAY
41356: PPUSH
41357: CALL_OW 254
41361: PPUSH
41362: LD_INT 5
41364: PPUSH
41365: CALL_OW 272
41369: PUSH
41370: LD_VAR 0 17
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: PPUSH
41379: CALL_OW 251
41383: PPUSH
41384: LD_VAR 0 17
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: PPUSH
41393: CALL_OW 254
41397: PPUSH
41398: LD_INT 5
41400: PPUSH
41401: CALL_OW 273
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41410: LD_VAR 0 16
41414: PUSH
41415: LD_INT 1
41417: ARRAY
41418: PPUSH
41419: LD_VAR 0 16
41423: PUSH
41424: LD_INT 2
41426: ARRAY
41427: PPUSH
41428: CALL_OW 488
41432: IFFALSE 41463
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41434: LD_VAR 0 13
41438: PPUSH
41439: LD_VAR 0 16
41443: PUSH
41444: LD_INT 1
41446: ARRAY
41447: PPUSH
41448: LD_VAR 0 16
41452: PUSH
41453: LD_INT 2
41455: ARRAY
41456: PPUSH
41457: CALL_OW 111
// continue ;
41461: GO 40953
// end ; end ; r := GetDir ( tmp ) ;
41463: LD_ADDR_VAR 0 15
41467: PUSH
41468: LD_VAR 0 13
41472: PPUSH
41473: CALL_OW 254
41477: ST_TO_ADDR
// if r = 5 then
41478: LD_VAR 0 15
41482: PUSH
41483: LD_INT 5
41485: EQUAL
41486: IFFALSE 41496
// r := 0 ;
41488: LD_ADDR_VAR 0 15
41492: PUSH
41493: LD_INT 0
41495: ST_TO_ADDR
// for j = r to 5 do
41496: LD_ADDR_VAR 0 10
41500: PUSH
41501: DOUBLE
41502: LD_VAR 0 15
41506: DEC
41507: ST_TO_ADDR
41508: LD_INT 5
41510: PUSH
41511: FOR_TO
41512: IFFALSE 41626
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41514: LD_ADDR_VAR 0 11
41518: PUSH
41519: LD_VAR 0 13
41523: PPUSH
41524: CALL_OW 250
41528: PPUSH
41529: LD_VAR 0 10
41533: PPUSH
41534: LD_INT 2
41536: PPUSH
41537: CALL_OW 272
41541: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41542: LD_ADDR_VAR 0 12
41546: PUSH
41547: LD_VAR 0 13
41551: PPUSH
41552: CALL_OW 251
41556: PPUSH
41557: LD_VAR 0 10
41561: PPUSH
41562: LD_INT 2
41564: PPUSH
41565: CALL_OW 273
41569: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41570: LD_VAR 0 11
41574: PPUSH
41575: LD_VAR 0 12
41579: PPUSH
41580: CALL_OW 488
41584: PUSH
41585: LD_VAR 0 11
41589: PPUSH
41590: LD_VAR 0 12
41594: PPUSH
41595: CALL_OW 428
41599: NOT
41600: AND
41601: IFFALSE 41624
// begin ComMoveXY ( tmp , _x , _y ) ;
41603: LD_VAR 0 13
41607: PPUSH
41608: LD_VAR 0 11
41612: PPUSH
41613: LD_VAR 0 12
41617: PPUSH
41618: CALL_OW 111
// break ;
41622: GO 41626
// end ; end ;
41624: GO 41511
41626: POP
41627: POP
// end ; end ;
41628: GO 40953
41630: POP
41631: POP
// end ;
41632: LD_VAR 0 8
41636: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41637: LD_INT 0
41639: PPUSH
// result := true ;
41640: LD_ADDR_VAR 0 3
41644: PUSH
41645: LD_INT 1
41647: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41648: LD_VAR 0 2
41652: PUSH
41653: LD_INT 24
41655: DOUBLE
41656: EQUAL
41657: IFTRUE 41667
41659: LD_INT 33
41661: DOUBLE
41662: EQUAL
41663: IFTRUE 41667
41665: GO 41692
41667: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: LD_INT 32
41675: PPUSH
41676: LD_VAR 0 1
41680: PPUSH
41681: CALL_OW 321
41685: PUSH
41686: LD_INT 2
41688: EQUAL
41689: ST_TO_ADDR
41690: GO 42012
41692: LD_INT 20
41694: DOUBLE
41695: EQUAL
41696: IFTRUE 41700
41698: GO 41725
41700: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41701: LD_ADDR_VAR 0 3
41705: PUSH
41706: LD_INT 6
41708: PPUSH
41709: LD_VAR 0 1
41713: PPUSH
41714: CALL_OW 321
41718: PUSH
41719: LD_INT 2
41721: EQUAL
41722: ST_TO_ADDR
41723: GO 42012
41725: LD_INT 22
41727: DOUBLE
41728: EQUAL
41729: IFTRUE 41739
41731: LD_INT 36
41733: DOUBLE
41734: EQUAL
41735: IFTRUE 41739
41737: GO 41764
41739: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41740: LD_ADDR_VAR 0 3
41744: PUSH
41745: LD_INT 15
41747: PPUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 321
41757: PUSH
41758: LD_INT 2
41760: EQUAL
41761: ST_TO_ADDR
41762: GO 42012
41764: LD_INT 30
41766: DOUBLE
41767: EQUAL
41768: IFTRUE 41772
41770: GO 41797
41772: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41773: LD_ADDR_VAR 0 3
41777: PUSH
41778: LD_INT 20
41780: PPUSH
41781: LD_VAR 0 1
41785: PPUSH
41786: CALL_OW 321
41790: PUSH
41791: LD_INT 2
41793: EQUAL
41794: ST_TO_ADDR
41795: GO 42012
41797: LD_INT 28
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41811
41803: LD_INT 21
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41811
41809: GO 41836
41811: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41812: LD_ADDR_VAR 0 3
41816: PUSH
41817: LD_INT 21
41819: PPUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: CALL_OW 321
41829: PUSH
41830: LD_INT 2
41832: EQUAL
41833: ST_TO_ADDR
41834: GO 42012
41836: LD_INT 16
41838: DOUBLE
41839: EQUAL
41840: IFTRUE 41844
41842: GO 41871
41844: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41845: LD_ADDR_VAR 0 3
41849: PUSH
41850: LD_EXP 26
41854: PPUSH
41855: LD_VAR 0 1
41859: PPUSH
41860: CALL_OW 321
41864: PUSH
41865: LD_INT 2
41867: EQUAL
41868: ST_TO_ADDR
41869: GO 42012
41871: LD_INT 19
41873: DOUBLE
41874: EQUAL
41875: IFTRUE 41885
41877: LD_INT 23
41879: DOUBLE
41880: EQUAL
41881: IFTRUE 41885
41883: GO 41912
41885: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_EXP 25
41895: PPUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 321
41905: PUSH
41906: LD_INT 2
41908: EQUAL
41909: ST_TO_ADDR
41910: GO 42012
41912: LD_INT 17
41914: DOUBLE
41915: EQUAL
41916: IFTRUE 41920
41918: GO 41945
41920: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: LD_INT 39
41928: PPUSH
41929: LD_VAR 0 1
41933: PPUSH
41934: CALL_OW 321
41938: PUSH
41939: LD_INT 2
41941: EQUAL
41942: ST_TO_ADDR
41943: GO 42012
41945: LD_INT 18
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41953
41951: GO 41978
41953: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41954: LD_ADDR_VAR 0 3
41958: PUSH
41959: LD_INT 40
41961: PPUSH
41962: LD_VAR 0 1
41966: PPUSH
41967: CALL_OW 321
41971: PUSH
41972: LD_INT 2
41974: EQUAL
41975: ST_TO_ADDR
41976: GO 42012
41978: LD_INT 27
41980: DOUBLE
41981: EQUAL
41982: IFTRUE 41986
41984: GO 42011
41986: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_INT 35
41994: PPUSH
41995: LD_VAR 0 1
41999: PPUSH
42000: CALL_OW 321
42004: PUSH
42005: LD_INT 2
42007: EQUAL
42008: ST_TO_ADDR
42009: GO 42012
42011: POP
// end ;
42012: LD_VAR 0 3
42016: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42017: LD_INT 0
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
// result := false ;
42030: LD_ADDR_VAR 0 6
42034: PUSH
42035: LD_INT 0
42037: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42038: LD_VAR 0 1
42042: NOT
42043: PUSH
42044: LD_VAR 0 1
42048: PPUSH
42049: CALL_OW 266
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: IN
42064: NOT
42065: OR
42066: PUSH
42067: LD_VAR 0 2
42071: NOT
42072: OR
42073: PUSH
42074: LD_VAR 0 5
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: LD_INT 4
42093: PUSH
42094: LD_INT 5
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: IN
42105: NOT
42106: OR
42107: PUSH
42108: LD_VAR 0 3
42112: PPUSH
42113: LD_VAR 0 4
42117: PPUSH
42118: CALL_OW 488
42122: NOT
42123: OR
42124: IFFALSE 42128
// exit ;
42126: GO 42864
// side := GetSide ( depot ) ;
42128: LD_ADDR_VAR 0 9
42132: PUSH
42133: LD_VAR 0 1
42137: PPUSH
42138: CALL_OW 255
42142: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42143: LD_VAR 0 9
42147: PPUSH
42148: LD_VAR 0 2
42152: PPUSH
42153: CALL 41637 0 2
42157: NOT
42158: IFFALSE 42162
// exit ;
42160: GO 42864
// pom := GetBase ( depot ) ;
42162: LD_ADDR_VAR 0 10
42166: PUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 274
42176: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42177: LD_ADDR_VAR 0 11
42181: PUSH
42182: LD_VAR 0 2
42186: PPUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: CALL_OW 248
42196: PPUSH
42197: CALL_OW 450
42201: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42202: LD_VAR 0 10
42206: PPUSH
42207: LD_INT 1
42209: PPUSH
42210: CALL_OW 275
42214: PUSH
42215: LD_VAR 0 11
42219: PUSH
42220: LD_INT 1
42222: ARRAY
42223: GREATEREQUAL
42224: PUSH
42225: LD_VAR 0 10
42229: PPUSH
42230: LD_INT 2
42232: PPUSH
42233: CALL_OW 275
42237: PUSH
42238: LD_VAR 0 11
42242: PUSH
42243: LD_INT 2
42245: ARRAY
42246: GREATEREQUAL
42247: AND
42248: PUSH
42249: LD_VAR 0 10
42253: PPUSH
42254: LD_INT 3
42256: PPUSH
42257: CALL_OW 275
42261: PUSH
42262: LD_VAR 0 11
42266: PUSH
42267: LD_INT 3
42269: ARRAY
42270: GREATEREQUAL
42271: AND
42272: NOT
42273: IFFALSE 42277
// exit ;
42275: GO 42864
// if GetBType ( depot ) = b_depot then
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 266
42286: PUSH
42287: LD_INT 0
42289: EQUAL
42290: IFFALSE 42302
// dist := 28 else
42292: LD_ADDR_VAR 0 14
42296: PUSH
42297: LD_INT 28
42299: ST_TO_ADDR
42300: GO 42310
// dist := 36 ;
42302: LD_ADDR_VAR 0 14
42306: PUSH
42307: LD_INT 36
42309: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42310: LD_VAR 0 1
42314: PPUSH
42315: LD_VAR 0 3
42319: PPUSH
42320: LD_VAR 0 4
42324: PPUSH
42325: CALL_OW 297
42329: PUSH
42330: LD_VAR 0 14
42334: GREATER
42335: IFFALSE 42339
// exit ;
42337: GO 42864
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42339: LD_ADDR_VAR 0 12
42343: PUSH
42344: LD_VAR 0 2
42348: PPUSH
42349: LD_VAR 0 3
42353: PPUSH
42354: LD_VAR 0 4
42358: PPUSH
42359: LD_VAR 0 5
42363: PPUSH
42364: LD_VAR 0 1
42368: PPUSH
42369: CALL_OW 248
42373: PPUSH
42374: LD_INT 0
42376: PPUSH
42377: CALL 42869 0 6
42381: ST_TO_ADDR
// if not hexes then
42382: LD_VAR 0 12
42386: NOT
42387: IFFALSE 42391
// exit ;
42389: GO 42864
// hex := GetHexInfo ( x , y ) ;
42391: LD_ADDR_VAR 0 15
42395: PUSH
42396: LD_VAR 0 3
42400: PPUSH
42401: LD_VAR 0 4
42405: PPUSH
42406: CALL_OW 546
42410: ST_TO_ADDR
// if hex [ 1 ] then
42411: LD_VAR 0 15
42415: PUSH
42416: LD_INT 1
42418: ARRAY
42419: IFFALSE 42423
// exit ;
42421: GO 42864
// height := hex [ 2 ] ;
42423: LD_ADDR_VAR 0 13
42427: PUSH
42428: LD_VAR 0 15
42432: PUSH
42433: LD_INT 2
42435: ARRAY
42436: ST_TO_ADDR
// for i = 1 to hexes do
42437: LD_ADDR_VAR 0 7
42441: PUSH
42442: DOUBLE
42443: LD_INT 1
42445: DEC
42446: ST_TO_ADDR
42447: LD_VAR 0 12
42451: PUSH
42452: FOR_TO
42453: IFFALSE 42783
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42455: LD_VAR 0 12
42459: PUSH
42460: LD_VAR 0 7
42464: ARRAY
42465: PUSH
42466: LD_INT 1
42468: ARRAY
42469: PPUSH
42470: LD_VAR 0 12
42474: PUSH
42475: LD_VAR 0 7
42479: ARRAY
42480: PUSH
42481: LD_INT 2
42483: ARRAY
42484: PPUSH
42485: CALL_OW 488
42489: NOT
42490: PUSH
42491: LD_VAR 0 12
42495: PUSH
42496: LD_VAR 0 7
42500: ARRAY
42501: PUSH
42502: LD_INT 1
42504: ARRAY
42505: PPUSH
42506: LD_VAR 0 12
42510: PUSH
42511: LD_VAR 0 7
42515: ARRAY
42516: PUSH
42517: LD_INT 2
42519: ARRAY
42520: PPUSH
42521: CALL_OW 428
42525: PUSH
42526: LD_INT 0
42528: GREATER
42529: OR
42530: PUSH
42531: LD_VAR 0 12
42535: PUSH
42536: LD_VAR 0 7
42540: ARRAY
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: PPUSH
42546: LD_VAR 0 12
42550: PUSH
42551: LD_VAR 0 7
42555: ARRAY
42556: PUSH
42557: LD_INT 2
42559: ARRAY
42560: PPUSH
42561: CALL_OW 351
42565: OR
42566: IFFALSE 42572
// exit ;
42568: POP
42569: POP
42570: GO 42864
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42572: LD_ADDR_VAR 0 8
42576: PUSH
42577: LD_VAR 0 12
42581: PUSH
42582: LD_VAR 0 7
42586: ARRAY
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: PPUSH
42592: LD_VAR 0 12
42596: PUSH
42597: LD_VAR 0 7
42601: ARRAY
42602: PUSH
42603: LD_INT 2
42605: ARRAY
42606: PPUSH
42607: CALL_OW 546
42611: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42612: LD_VAR 0 8
42616: PUSH
42617: LD_INT 1
42619: ARRAY
42620: PUSH
42621: LD_VAR 0 8
42625: PUSH
42626: LD_INT 2
42628: ARRAY
42629: PUSH
42630: LD_VAR 0 13
42634: PUSH
42635: LD_INT 2
42637: PLUS
42638: GREATER
42639: OR
42640: PUSH
42641: LD_VAR 0 8
42645: PUSH
42646: LD_INT 2
42648: ARRAY
42649: PUSH
42650: LD_VAR 0 13
42654: PUSH
42655: LD_INT 2
42657: MINUS
42658: LESS
42659: OR
42660: PUSH
42661: LD_VAR 0 8
42665: PUSH
42666: LD_INT 3
42668: ARRAY
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 8
42675: PUSH
42676: LD_INT 9
42678: PUSH
42679: LD_INT 10
42681: PUSH
42682: LD_INT 11
42684: PUSH
42685: LD_INT 12
42687: PUSH
42688: LD_INT 13
42690: PUSH
42691: LD_INT 16
42693: PUSH
42694: LD_INT 17
42696: PUSH
42697: LD_INT 18
42699: PUSH
42700: LD_INT 19
42702: PUSH
42703: LD_INT 20
42705: PUSH
42706: LD_INT 21
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: IN
42724: NOT
42725: OR
42726: PUSH
42727: LD_VAR 0 8
42731: PUSH
42732: LD_INT 5
42734: ARRAY
42735: NOT
42736: OR
42737: PUSH
42738: LD_VAR 0 8
42742: PUSH
42743: LD_INT 6
42745: ARRAY
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 7
42755: PUSH
42756: LD_INT 9
42758: PUSH
42759: LD_INT 10
42761: PUSH
42762: LD_INT 11
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: IN
42773: NOT
42774: OR
42775: IFFALSE 42781
// exit ;
42777: POP
42778: POP
42779: GO 42864
// end ;
42781: GO 42452
42783: POP
42784: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42785: LD_VAR 0 9
42789: PPUSH
42790: LD_VAR 0 3
42794: PPUSH
42795: LD_VAR 0 4
42799: PPUSH
42800: LD_INT 20
42802: PPUSH
42803: CALL 34810 0 4
42807: PUSH
42808: LD_INT 4
42810: ARRAY
42811: IFFALSE 42815
// exit ;
42813: GO 42864
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42815: LD_VAR 0 2
42819: PUSH
42820: LD_INT 29
42822: PUSH
42823: LD_INT 30
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: IN
42830: PUSH
42831: LD_VAR 0 3
42835: PPUSH
42836: LD_VAR 0 4
42840: PPUSH
42841: LD_VAR 0 9
42845: PPUSH
42846: CALL_OW 440
42850: NOT
42851: AND
42852: IFFALSE 42856
// exit ;
42854: GO 42864
// result := true ;
42856: LD_ADDR_VAR 0 6
42860: PUSH
42861: LD_INT 1
42863: ST_TO_ADDR
// end ;
42864: LD_VAR 0 6
42868: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42869: LD_INT 0
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
42898: PPUSH
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
42913: PPUSH
42914: PPUSH
42915: PPUSH
42916: PPUSH
42917: PPUSH
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
// result = [ ] ;
42929: LD_ADDR_VAR 0 7
42933: PUSH
42934: EMPTY
42935: ST_TO_ADDR
// temp_list = [ ] ;
42936: LD_ADDR_VAR 0 9
42940: PUSH
42941: EMPTY
42942: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42943: LD_VAR 0 4
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 4
42962: PUSH
42963: LD_INT 5
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: IN
42974: NOT
42975: PUSH
42976: LD_VAR 0 1
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: IN
42991: PUSH
42992: LD_VAR 0 5
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: IN
43011: NOT
43012: AND
43013: OR
43014: IFFALSE 43018
// exit ;
43016: GO 61409
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43018: LD_VAR 0 1
43022: PUSH
43023: LD_INT 6
43025: PUSH
43026: LD_INT 7
43028: PUSH
43029: LD_INT 8
43031: PUSH
43032: LD_INT 13
43034: PUSH
43035: LD_INT 12
43037: PUSH
43038: LD_INT 15
43040: PUSH
43041: LD_INT 11
43043: PUSH
43044: LD_INT 14
43046: PUSH
43047: LD_INT 10
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: IN
43061: IFFALSE 43071
// btype = b_lab ;
43063: LD_ADDR_VAR 0 1
43067: PUSH
43068: LD_INT 6
43070: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43071: LD_VAR 0 6
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: IN
43090: NOT
43091: PUSH
43092: LD_VAR 0 1
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 6
43111: PUSH
43112: LD_INT 36
43114: PUSH
43115: LD_INT 4
43117: PUSH
43118: LD_INT 5
43120: PUSH
43121: LD_INT 31
43123: PUSH
43124: LD_INT 32
43126: PUSH
43127: LD_INT 33
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: IN
43143: NOT
43144: PUSH
43145: LD_VAR 0 6
43149: PUSH
43150: LD_INT 1
43152: EQUAL
43153: AND
43154: OR
43155: PUSH
43156: LD_VAR 0 1
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: IN
43171: NOT
43172: PUSH
43173: LD_VAR 0 6
43177: PUSH
43178: LD_INT 2
43180: EQUAL
43181: AND
43182: OR
43183: IFFALSE 43193
// mode = 0 ;
43185: LD_ADDR_VAR 0 6
43189: PUSH
43190: LD_INT 0
43192: ST_TO_ADDR
// case mode of 0 :
43193: LD_VAR 0 6
43197: PUSH
43198: LD_INT 0
43200: DOUBLE
43201: EQUAL
43202: IFTRUE 43206
43204: GO 54659
43206: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43207: LD_ADDR_VAR 0 11
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43400: LD_ADDR_VAR 0 12
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 3
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43596: LD_ADDR_VAR 0 13
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 3
43767: NEG
43768: PUSH
43769: LD_INT 3
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43795: LD_ADDR_VAR 0 14
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43991: LD_ADDR_VAR 0 15
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 3
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44184: LD_ADDR_VAR 0 16
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 3
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44377: LD_ADDR_VAR 0 17
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44607: LD_ADDR_VAR 0 18
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44837: LD_ADDR_VAR 0 19
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45067: LD_ADDR_VAR 0 20
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45297: LD_ADDR_VAR 0 21
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45527: LD_ADDR_VAR 0 22
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45757: LD_ADDR_VAR 0 23
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46037: LD_ADDR_VAR 0 24
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46313: LD_ADDR_VAR 0 25
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46587: LD_ADDR_VAR 0 26
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46863: LD_ADDR_VAR 0 27
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47143: LD_ADDR_VAR 0 28
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47425: LD_ADDR_VAR 0 29
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47704: LD_ADDR_VAR 0 30
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 3
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 3
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47982: LD_ADDR_VAR 0 31
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: LD_INT 2
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48260: LD_ADDR_VAR 0 32
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48538: LD_ADDR_VAR 0 33
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48817: LD_ADDR_VAR 0 34
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 2
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 3
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49097: LD_ADDR_VAR 0 35
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49209: LD_ADDR_VAR 0 36
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49321: LD_ADDR_VAR 0 37
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49433: LD_ADDR_VAR 0 38
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49545: LD_ADDR_VAR 0 39
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49657: LD_ADDR_VAR 0 40
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49769: LD_ADDR_VAR 0 41
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: LD_INT 3
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 3
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 3
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 3
50078: NEG
50079: PUSH
50080: LD_INT 3
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50119: LD_ADDR_VAR 0 42
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 3
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 3
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 3
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: LD_INT 3
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50469: LD_ADDR_VAR 0 43
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50817: LD_ADDR_VAR 0 44
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: NEG
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51167: LD_ADDR_VAR 0 45
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51517: LD_ADDR_VAR 0 46
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 3
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51865: LD_ADDR_VAR 0 47
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52016: LD_ADDR_VAR 0 48
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52163: LD_ADDR_VAR 0 49
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52307: LD_ADDR_VAR 0 50
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52451: LD_ADDR_VAR 0 51
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52598: LD_ADDR_VAR 0 52
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52749: LD_ADDR_VAR 0 53
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52979: LD_ADDR_VAR 0 54
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53209: LD_ADDR_VAR 0 55
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53439: LD_ADDR_VAR 0 56
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53669: LD_ADDR_VAR 0 57
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53899: LD_ADDR_VAR 0 58
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54129: LD_ADDR_VAR 0 59
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54217: LD_ADDR_VAR 0 60
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54305: LD_ADDR_VAR 0 61
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54393: LD_ADDR_VAR 0 62
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54481: LD_ADDR_VAR 0 63
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54569: LD_ADDR_VAR 0 64
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
// end ; 1 :
54657: GO 60554
54659: LD_INT 1
54661: DOUBLE
54662: EQUAL
54663: IFTRUE 54667
54665: GO 57290
54667: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54668: LD_ADDR_VAR 0 11
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54712: LD_ADDR_VAR 0 12
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54753: LD_ADDR_VAR 0 13
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 3
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54793: LD_ADDR_VAR 0 14
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54834: LD_ADDR_VAR 0 15
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: LIST
54877: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54878: LD_ADDR_VAR 0 16
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: NEG
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54924: LD_ADDR_VAR 0 17
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54968: LD_ADDR_VAR 0 18
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55009: LD_ADDR_VAR 0 19
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: LIST
55048: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55049: LD_ADDR_VAR 0 20
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55090: LD_ADDR_VAR 0 21
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55134: LD_ADDR_VAR 0 22
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55180: LD_ADDR_VAR 0 23
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 3
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 4
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 3
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55224: LD_ADDR_VAR 0 24
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 4
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55265: LD_ADDR_VAR 0 25
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 4
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55305: LD_ADDR_VAR 0 26
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55346: LD_ADDR_VAR 0 27
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55390: LD_ADDR_VAR 0 28
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 4
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55436: LD_ADDR_VAR 0 29
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 4
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 4
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 5
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 5
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 4
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 6
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 6
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 5
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55591: LD_ADDR_VAR 0 30
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 4
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 4
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 5
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 6
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 6
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55734: LD_ADDR_VAR 0 31
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 4
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 5
55801: PUSH
55802: LD_INT 4
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 5
55811: PUSH
55812: LD_INT 5
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: LD_INT 5
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 6
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 6
55841: PUSH
55842: LD_INT 6
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: LD_INT 6
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55873: LD_ADDR_VAR 0 32
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 4
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 4
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 5
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 4
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 6
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 6
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 5
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56016: LD_ADDR_VAR 0 33
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 4
56068: NEG
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 4
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 5
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 6
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 6
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56171: LD_ADDR_VAR 0 34
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 4
56226: NEG
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 4
56238: NEG
56239: PUSH
56240: LD_INT 4
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 4
56250: NEG
56251: PUSH
56252: LD_INT 5
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 5
56262: NEG
56263: PUSH
56264: LD_INT 4
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 5
56274: NEG
56275: PUSH
56276: LD_INT 5
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 5
56286: NEG
56287: PUSH
56288: LD_INT 6
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 6
56298: NEG
56299: PUSH
56300: LD_INT 5
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 6
56310: NEG
56311: PUSH
56312: LD_INT 6
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56334: LD_ADDR_VAR 0 41
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56378: LD_ADDR_VAR 0 42
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56419: LD_ADDR_VAR 0 43
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56459: LD_ADDR_VAR 0 44
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56500: LD_ADDR_VAR 0 45
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56544: LD_ADDR_VAR 0 46
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: LIST
56589: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56590: LD_ADDR_VAR 0 47
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56623: LD_ADDR_VAR 0 48
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56654: LD_ADDR_VAR 0 49
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56683: LD_ADDR_VAR 0 50
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56712: LD_ADDR_VAR 0 51
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56743: LD_ADDR_VAR 0 52
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56776: LD_ADDR_VAR 0 53
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56820: LD_ADDR_VAR 0 54
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56861: LD_ADDR_VAR 0 55
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56901: LD_ADDR_VAR 0 56
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56942: LD_ADDR_VAR 0 57
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56986: LD_ADDR_VAR 0 58
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57032: LD_ADDR_VAR 0 59
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57076: LD_ADDR_VAR 0 60
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57117: LD_ADDR_VAR 0 61
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57157: LD_ADDR_VAR 0 62
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57198: LD_ADDR_VAR 0 63
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57242: LD_ADDR_VAR 0 64
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// end ; 2 :
57288: GO 60554
57290: LD_INT 2
57292: DOUBLE
57293: EQUAL
57294: IFTRUE 57298
57296: GO 60553
57298: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57299: LD_ADDR_VAR 0 29
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 5
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 5
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: PUSH
57430: LD_INT 4
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: LD_INT 4
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 4
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 4
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 5
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 5
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 4
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 5
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 4
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 4
57684: NEG
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 4
57696: NEG
57697: PUSH
57698: LD_INT 5
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: LD_INT 4
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 4
57732: NEG
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 5
57744: NEG
57745: PUSH
57746: LD_INT 4
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 5
57756: NEG
57757: PUSH
57758: LD_INT 5
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: LD_INT 5
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 5
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57837: LD_ADDR_VAR 0 30
57841: PUSH
57842: LD_INT 4
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: LD_INT 4
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 5
57874: PUSH
57875: LD_INT 5
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: LD_INT 5
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 4
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: LD_INT 5
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 4
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 4
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 5
58083: NEG
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 5
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 5
58106: NEG
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 4
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: NEG
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 4
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 4
58201: NEG
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: LD_INT 4
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 4
58225: NEG
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: LD_INT 4
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 5
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: LD_INT 4
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 5
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 3
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: NEG
58328: PUSH
58329: LD_INT 5
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58384: LD_ADDR_VAR 0 31
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 5
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 5
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 3
58484: NEG
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 4
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: LD_INT 5
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 3
58610: NEG
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 4
58634: NEG
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 5
58646: NEG
58647: PUSH
58648: LD_INT 4
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 5
58658: NEG
58659: PUSH
58660: LD_INT 5
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 3
58670: NEG
58671: PUSH
58672: LD_INT 5
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 5
58682: NEG
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 3
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 4
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 3
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 4
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 4
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 5
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 5
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58934: LD_ADDR_VAR 0 32
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 4
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 4
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 5
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 5
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 5
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: LD_INT 4
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 4
59103: NEG
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 4
59115: NEG
59116: PUSH
59117: LD_INT 4
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 4
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 4
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 4
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 5
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 4
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 5
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 3
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 5
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 4
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 4
59346: PUSH
59347: LD_INT 4
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 5
59366: PUSH
59367: LD_INT 4
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: LD_INT 5
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 4
59386: PUSH
59387: LD_INT 5
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: LD_INT 4
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: LD_INT 3
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 5
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59481: LD_ADDR_VAR 0 33
59485: PUSH
59486: LD_INT 4
59488: NEG
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: LD_INT 5
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: LD_INT 4
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 3
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 4
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 5
59548: NEG
59549: PUSH
59550: LD_INT 4
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 5
59560: NEG
59561: PUSH
59562: LD_INT 5
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: LD_INT 5
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 5
59584: NEG
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 4
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 2
59632: NEG
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 4
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 5
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 5
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 4
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 5
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 4
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 4
59821: PUSH
59822: LD_INT 4
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: PUSH
59832: LD_INT 4
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 4
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 4
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 4
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 3
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: LD_INT 4
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: LD_INT 5
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60019: LD_ADDR_VAR 0 34
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 4
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 5
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 4
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 3
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 4
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 5
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 5
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 4
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 3
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 4
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 4
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 5
60241: PUSH
60242: LD_INT 4
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 5
60251: PUSH
60252: LD_INT 5
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: LD_INT 5
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 5
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: LD_INT 5
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 4
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 4
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 4
60404: NEG
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 4
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 5
60460: NEG
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 5
60471: NEG
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 5
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: ST_TO_ADDR
// end ; end ;
60551: GO 60554
60553: POP
// case btype of b_depot , b_warehouse :
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 0
60561: DOUBLE
60562: EQUAL
60563: IFTRUE 60573
60565: LD_INT 1
60567: DOUBLE
60568: EQUAL
60569: IFTRUE 60573
60571: GO 60774
60573: POP
// case nation of nation_american :
60574: LD_VAR 0 5
60578: PUSH
60579: LD_INT 1
60581: DOUBLE
60582: EQUAL
60583: IFTRUE 60587
60585: GO 60643
60587: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60588: LD_ADDR_VAR 0 9
60592: PUSH
60593: LD_VAR 0 11
60597: PUSH
60598: LD_VAR 0 12
60602: PUSH
60603: LD_VAR 0 13
60607: PUSH
60608: LD_VAR 0 14
60612: PUSH
60613: LD_VAR 0 15
60617: PUSH
60618: LD_VAR 0 16
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: PUSH
60631: LD_VAR 0 4
60635: PUSH
60636: LD_INT 1
60638: PLUS
60639: ARRAY
60640: ST_TO_ADDR
60641: GO 60772
60643: LD_INT 2
60645: DOUBLE
60646: EQUAL
60647: IFTRUE 60651
60649: GO 60707
60651: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60652: LD_ADDR_VAR 0 9
60656: PUSH
60657: LD_VAR 0 17
60661: PUSH
60662: LD_VAR 0 18
60666: PUSH
60667: LD_VAR 0 19
60671: PUSH
60672: LD_VAR 0 20
60676: PUSH
60677: LD_VAR 0 21
60681: PUSH
60682: LD_VAR 0 22
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: LD_VAR 0 4
60699: PUSH
60700: LD_INT 1
60702: PLUS
60703: ARRAY
60704: ST_TO_ADDR
60705: GO 60772
60707: LD_INT 3
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 60771
60715: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60716: LD_ADDR_VAR 0 9
60720: PUSH
60721: LD_VAR 0 23
60725: PUSH
60726: LD_VAR 0 24
60730: PUSH
60731: LD_VAR 0 25
60735: PUSH
60736: LD_VAR 0 26
60740: PUSH
60741: LD_VAR 0 27
60745: PUSH
60746: LD_VAR 0 28
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: LD_VAR 0 4
60763: PUSH
60764: LD_INT 1
60766: PLUS
60767: ARRAY
60768: ST_TO_ADDR
60769: GO 60772
60771: POP
60772: GO 61327
60774: LD_INT 2
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60788
60780: LD_INT 3
60782: DOUBLE
60783: EQUAL
60784: IFTRUE 60788
60786: GO 60844
60788: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60789: LD_ADDR_VAR 0 9
60793: PUSH
60794: LD_VAR 0 29
60798: PUSH
60799: LD_VAR 0 30
60803: PUSH
60804: LD_VAR 0 31
60808: PUSH
60809: LD_VAR 0 32
60813: PUSH
60814: LD_VAR 0 33
60818: PUSH
60819: LD_VAR 0 34
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: PUSH
60832: LD_VAR 0 4
60836: PUSH
60837: LD_INT 1
60839: PLUS
60840: ARRAY
60841: ST_TO_ADDR
60842: GO 61327
60844: LD_INT 16
60846: DOUBLE
60847: EQUAL
60848: IFTRUE 60906
60850: LD_INT 17
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60906
60856: LD_INT 18
60858: DOUBLE
60859: EQUAL
60860: IFTRUE 60906
60862: LD_INT 19
60864: DOUBLE
60865: EQUAL
60866: IFTRUE 60906
60868: LD_INT 22
60870: DOUBLE
60871: EQUAL
60872: IFTRUE 60906
60874: LD_INT 20
60876: DOUBLE
60877: EQUAL
60878: IFTRUE 60906
60880: LD_INT 21
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60906
60886: LD_INT 23
60888: DOUBLE
60889: EQUAL
60890: IFTRUE 60906
60892: LD_INT 24
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60906
60898: LD_INT 25
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60906
60904: GO 60962
60906: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60907: LD_ADDR_VAR 0 9
60911: PUSH
60912: LD_VAR 0 35
60916: PUSH
60917: LD_VAR 0 36
60921: PUSH
60922: LD_VAR 0 37
60926: PUSH
60927: LD_VAR 0 38
60931: PUSH
60932: LD_VAR 0 39
60936: PUSH
60937: LD_VAR 0 40
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: PUSH
60950: LD_VAR 0 4
60954: PUSH
60955: LD_INT 1
60957: PLUS
60958: ARRAY
60959: ST_TO_ADDR
60960: GO 61327
60962: LD_INT 6
60964: DOUBLE
60965: EQUAL
60966: IFTRUE 61018
60968: LD_INT 7
60970: DOUBLE
60971: EQUAL
60972: IFTRUE 61018
60974: LD_INT 8
60976: DOUBLE
60977: EQUAL
60978: IFTRUE 61018
60980: LD_INT 13
60982: DOUBLE
60983: EQUAL
60984: IFTRUE 61018
60986: LD_INT 12
60988: DOUBLE
60989: EQUAL
60990: IFTRUE 61018
60992: LD_INT 15
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61018
60998: LD_INT 11
61000: DOUBLE
61001: EQUAL
61002: IFTRUE 61018
61004: LD_INT 14
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61018
61010: LD_INT 10
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61018
61016: GO 61074
61018: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61019: LD_ADDR_VAR 0 9
61023: PUSH
61024: LD_VAR 0 41
61028: PUSH
61029: LD_VAR 0 42
61033: PUSH
61034: LD_VAR 0 43
61038: PUSH
61039: LD_VAR 0 44
61043: PUSH
61044: LD_VAR 0 45
61048: PUSH
61049: LD_VAR 0 46
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 4
61066: PUSH
61067: LD_INT 1
61069: PLUS
61070: ARRAY
61071: ST_TO_ADDR
61072: GO 61327
61074: LD_INT 36
61076: DOUBLE
61077: EQUAL
61078: IFTRUE 61082
61080: GO 61138
61082: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61083: LD_ADDR_VAR 0 9
61087: PUSH
61088: LD_VAR 0 47
61092: PUSH
61093: LD_VAR 0 48
61097: PUSH
61098: LD_VAR 0 49
61102: PUSH
61103: LD_VAR 0 50
61107: PUSH
61108: LD_VAR 0 51
61112: PUSH
61113: LD_VAR 0 52
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: PUSH
61126: LD_VAR 0 4
61130: PUSH
61131: LD_INT 1
61133: PLUS
61134: ARRAY
61135: ST_TO_ADDR
61136: GO 61327
61138: LD_INT 4
61140: DOUBLE
61141: EQUAL
61142: IFTRUE 61164
61144: LD_INT 5
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61164
61150: LD_INT 34
61152: DOUBLE
61153: EQUAL
61154: IFTRUE 61164
61156: LD_INT 37
61158: DOUBLE
61159: EQUAL
61160: IFTRUE 61164
61162: GO 61220
61164: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61165: LD_ADDR_VAR 0 9
61169: PUSH
61170: LD_VAR 0 53
61174: PUSH
61175: LD_VAR 0 54
61179: PUSH
61180: LD_VAR 0 55
61184: PUSH
61185: LD_VAR 0 56
61189: PUSH
61190: LD_VAR 0 57
61194: PUSH
61195: LD_VAR 0 58
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: PUSH
61208: LD_VAR 0 4
61212: PUSH
61213: LD_INT 1
61215: PLUS
61216: ARRAY
61217: ST_TO_ADDR
61218: GO 61327
61220: LD_INT 31
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61270
61226: LD_INT 32
61228: DOUBLE
61229: EQUAL
61230: IFTRUE 61270
61232: LD_INT 33
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61270
61238: LD_INT 27
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61270
61244: LD_INT 26
61246: DOUBLE
61247: EQUAL
61248: IFTRUE 61270
61250: LD_INT 28
61252: DOUBLE
61253: EQUAL
61254: IFTRUE 61270
61256: LD_INT 29
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61270
61262: LD_INT 30
61264: DOUBLE
61265: EQUAL
61266: IFTRUE 61270
61268: GO 61326
61270: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61271: LD_ADDR_VAR 0 9
61275: PUSH
61276: LD_VAR 0 59
61280: PUSH
61281: LD_VAR 0 60
61285: PUSH
61286: LD_VAR 0 61
61290: PUSH
61291: LD_VAR 0 62
61295: PUSH
61296: LD_VAR 0 63
61300: PUSH
61301: LD_VAR 0 64
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: PUSH
61314: LD_VAR 0 4
61318: PUSH
61319: LD_INT 1
61321: PLUS
61322: ARRAY
61323: ST_TO_ADDR
61324: GO 61327
61326: POP
// temp_list2 = [ ] ;
61327: LD_ADDR_VAR 0 10
61331: PUSH
61332: EMPTY
61333: ST_TO_ADDR
// for i in temp_list do
61334: LD_ADDR_VAR 0 8
61338: PUSH
61339: LD_VAR 0 9
61343: PUSH
61344: FOR_IN
61345: IFFALSE 61397
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61347: LD_ADDR_VAR 0 10
61351: PUSH
61352: LD_VAR 0 10
61356: PUSH
61357: LD_VAR 0 8
61361: PUSH
61362: LD_INT 1
61364: ARRAY
61365: PUSH
61366: LD_VAR 0 2
61370: PLUS
61371: PUSH
61372: LD_VAR 0 8
61376: PUSH
61377: LD_INT 2
61379: ARRAY
61380: PUSH
61381: LD_VAR 0 3
61385: PLUS
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: ADD
61394: ST_TO_ADDR
61395: GO 61344
61397: POP
61398: POP
// result = temp_list2 ;
61399: LD_ADDR_VAR 0 7
61403: PUSH
61404: LD_VAR 0 10
61408: ST_TO_ADDR
// end ;
61409: LD_VAR 0 7
61413: RET
// export function EnemyInRange ( unit , dist ) ; begin
61414: LD_INT 0
61416: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61417: LD_ADDR_VAR 0 3
61421: PUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 255
61431: PPUSH
61432: LD_VAR 0 1
61436: PPUSH
61437: CALL_OW 250
61441: PPUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 251
61451: PPUSH
61452: LD_VAR 0 2
61456: PPUSH
61457: CALL 34810 0 4
61461: PUSH
61462: LD_INT 4
61464: ARRAY
61465: ST_TO_ADDR
// end ;
61466: LD_VAR 0 3
61470: RET
// export function PlayerSeeMe ( unit ) ; begin
61471: LD_INT 0
61473: PPUSH
// result := See ( your_side , unit ) ;
61474: LD_ADDR_VAR 0 2
61478: PUSH
61479: LD_OWVAR 2
61483: PPUSH
61484: LD_VAR 0 1
61488: PPUSH
61489: CALL_OW 292
61493: ST_TO_ADDR
// end ;
61494: LD_VAR 0 2
61498: RET
// export function ReverseDir ( unit ) ; begin
61499: LD_INT 0
61501: PPUSH
// if not unit then
61502: LD_VAR 0 1
61506: NOT
61507: IFFALSE 61511
// exit ;
61509: GO 61534
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61511: LD_ADDR_VAR 0 2
61515: PUSH
61516: LD_VAR 0 1
61520: PPUSH
61521: CALL_OW 254
61525: PUSH
61526: LD_INT 3
61528: PLUS
61529: PUSH
61530: LD_INT 6
61532: MOD
61533: ST_TO_ADDR
// end ;
61534: LD_VAR 0 2
61538: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61539: LD_INT 0
61541: PPUSH
61542: PPUSH
61543: PPUSH
61544: PPUSH
61545: PPUSH
// if not hexes then
61546: LD_VAR 0 2
61550: NOT
61551: IFFALSE 61555
// exit ;
61553: GO 61703
// dist := 9999 ;
61555: LD_ADDR_VAR 0 5
61559: PUSH
61560: LD_INT 9999
61562: ST_TO_ADDR
// for i = 1 to hexes do
61563: LD_ADDR_VAR 0 4
61567: PUSH
61568: DOUBLE
61569: LD_INT 1
61571: DEC
61572: ST_TO_ADDR
61573: LD_VAR 0 2
61577: PUSH
61578: FOR_TO
61579: IFFALSE 61691
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61581: LD_VAR 0 1
61585: PPUSH
61586: LD_VAR 0 2
61590: PUSH
61591: LD_VAR 0 4
61595: ARRAY
61596: PUSH
61597: LD_INT 1
61599: ARRAY
61600: PPUSH
61601: LD_VAR 0 2
61605: PUSH
61606: LD_VAR 0 4
61610: ARRAY
61611: PUSH
61612: LD_INT 2
61614: ARRAY
61615: PPUSH
61616: CALL_OW 297
61620: PUSH
61621: LD_VAR 0 5
61625: LESS
61626: IFFALSE 61689
// begin hex := hexes [ i ] ;
61628: LD_ADDR_VAR 0 7
61632: PUSH
61633: LD_VAR 0 2
61637: PUSH
61638: LD_VAR 0 4
61642: ARRAY
61643: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61644: LD_ADDR_VAR 0 5
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: LD_VAR 0 2
61658: PUSH
61659: LD_VAR 0 4
61663: ARRAY
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PPUSH
61669: LD_VAR 0 2
61673: PUSH
61674: LD_VAR 0 4
61678: ARRAY
61679: PUSH
61680: LD_INT 2
61682: ARRAY
61683: PPUSH
61684: CALL_OW 297
61688: ST_TO_ADDR
// end ; end ;
61689: GO 61578
61691: POP
61692: POP
// result := hex ;
61693: LD_ADDR_VAR 0 3
61697: PUSH
61698: LD_VAR 0 7
61702: ST_TO_ADDR
// end ;
61703: LD_VAR 0 3
61707: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61708: LD_INT 0
61710: PPUSH
61711: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61712: LD_VAR 0 1
61716: NOT
61717: PUSH
61718: LD_VAR 0 1
61722: PUSH
61723: LD_INT 21
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 23
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PPUSH
61747: CALL_OW 69
61751: IN
61752: NOT
61753: OR
61754: IFFALSE 61758
// exit ;
61756: GO 61805
// for i = 1 to 3 do
61758: LD_ADDR_VAR 0 3
61762: PUSH
61763: DOUBLE
61764: LD_INT 1
61766: DEC
61767: ST_TO_ADDR
61768: LD_INT 3
61770: PUSH
61771: FOR_TO
61772: IFFALSE 61803
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 250
61783: PPUSH
61784: LD_VAR 0 1
61788: PPUSH
61789: CALL_OW 251
61793: PPUSH
61794: LD_INT 1
61796: PPUSH
61797: CALL_OW 453
61801: GO 61771
61803: POP
61804: POP
// end ;
61805: LD_VAR 0 2
61809: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61810: LD_INT 0
61812: PPUSH
61813: PPUSH
61814: PPUSH
61815: PPUSH
61816: PPUSH
61817: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61818: LD_VAR 0 1
61822: NOT
61823: PUSH
61824: LD_VAR 0 2
61828: NOT
61829: OR
61830: PUSH
61831: LD_VAR 0 1
61835: PPUSH
61836: CALL_OW 314
61840: OR
61841: IFFALSE 61845
// exit ;
61843: GO 62286
// x := GetX ( enemy_unit ) ;
61845: LD_ADDR_VAR 0 7
61849: PUSH
61850: LD_VAR 0 2
61854: PPUSH
61855: CALL_OW 250
61859: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61860: LD_ADDR_VAR 0 8
61864: PUSH
61865: LD_VAR 0 2
61869: PPUSH
61870: CALL_OW 251
61874: ST_TO_ADDR
// if not x or not y then
61875: LD_VAR 0 7
61879: NOT
61880: PUSH
61881: LD_VAR 0 8
61885: NOT
61886: OR
61887: IFFALSE 61891
// exit ;
61889: GO 62286
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61891: LD_ADDR_VAR 0 6
61895: PUSH
61896: LD_VAR 0 7
61900: PPUSH
61901: LD_INT 0
61903: PPUSH
61904: LD_INT 4
61906: PPUSH
61907: CALL_OW 272
61911: PUSH
61912: LD_VAR 0 8
61916: PPUSH
61917: LD_INT 0
61919: PPUSH
61920: LD_INT 4
61922: PPUSH
61923: CALL_OW 273
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_VAR 0 7
61936: PPUSH
61937: LD_INT 1
61939: PPUSH
61940: LD_INT 4
61942: PPUSH
61943: CALL_OW 272
61947: PUSH
61948: LD_VAR 0 8
61952: PPUSH
61953: LD_INT 1
61955: PPUSH
61956: LD_INT 4
61958: PPUSH
61959: CALL_OW 273
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_VAR 0 7
61972: PPUSH
61973: LD_INT 2
61975: PPUSH
61976: LD_INT 4
61978: PPUSH
61979: CALL_OW 272
61983: PUSH
61984: LD_VAR 0 8
61988: PPUSH
61989: LD_INT 2
61991: PPUSH
61992: LD_INT 4
61994: PPUSH
61995: CALL_OW 273
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_VAR 0 7
62008: PPUSH
62009: LD_INT 3
62011: PPUSH
62012: LD_INT 4
62014: PPUSH
62015: CALL_OW 272
62019: PUSH
62020: LD_VAR 0 8
62024: PPUSH
62025: LD_INT 3
62027: PPUSH
62028: LD_INT 4
62030: PPUSH
62031: CALL_OW 273
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_VAR 0 7
62044: PPUSH
62045: LD_INT 4
62047: PPUSH
62048: LD_INT 4
62050: PPUSH
62051: CALL_OW 272
62055: PUSH
62056: LD_VAR 0 8
62060: PPUSH
62061: LD_INT 4
62063: PPUSH
62064: LD_INT 4
62066: PPUSH
62067: CALL_OW 273
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_VAR 0 7
62080: PPUSH
62081: LD_INT 5
62083: PPUSH
62084: LD_INT 4
62086: PPUSH
62087: CALL_OW 272
62091: PUSH
62092: LD_VAR 0 8
62096: PPUSH
62097: LD_INT 5
62099: PPUSH
62100: LD_INT 4
62102: PPUSH
62103: CALL_OW 273
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: ST_TO_ADDR
// for i = tmp downto 1 do
62120: LD_ADDR_VAR 0 4
62124: PUSH
62125: DOUBLE
62126: LD_VAR 0 6
62130: INC
62131: ST_TO_ADDR
62132: LD_INT 1
62134: PUSH
62135: FOR_DOWNTO
62136: IFFALSE 62237
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62138: LD_VAR 0 6
62142: PUSH
62143: LD_VAR 0 4
62147: ARRAY
62148: PUSH
62149: LD_INT 1
62151: ARRAY
62152: PPUSH
62153: LD_VAR 0 6
62157: PUSH
62158: LD_VAR 0 4
62162: ARRAY
62163: PUSH
62164: LD_INT 2
62166: ARRAY
62167: PPUSH
62168: CALL_OW 488
62172: NOT
62173: PUSH
62174: LD_VAR 0 6
62178: PUSH
62179: LD_VAR 0 4
62183: ARRAY
62184: PUSH
62185: LD_INT 1
62187: ARRAY
62188: PPUSH
62189: LD_VAR 0 6
62193: PUSH
62194: LD_VAR 0 4
62198: ARRAY
62199: PUSH
62200: LD_INT 2
62202: ARRAY
62203: PPUSH
62204: CALL_OW 428
62208: PUSH
62209: LD_INT 0
62211: NONEQUAL
62212: OR
62213: IFFALSE 62235
// tmp := Delete ( tmp , i ) ;
62215: LD_ADDR_VAR 0 6
62219: PUSH
62220: LD_VAR 0 6
62224: PPUSH
62225: LD_VAR 0 4
62229: PPUSH
62230: CALL_OW 3
62234: ST_TO_ADDR
62235: GO 62135
62237: POP
62238: POP
// j := GetClosestHex ( unit , tmp ) ;
62239: LD_ADDR_VAR 0 5
62243: PUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: LD_VAR 0 6
62253: PPUSH
62254: CALL 61539 0 2
62258: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62259: LD_VAR 0 1
62263: PPUSH
62264: LD_VAR 0 5
62268: PUSH
62269: LD_INT 1
62271: ARRAY
62272: PPUSH
62273: LD_VAR 0 5
62277: PUSH
62278: LD_INT 2
62280: ARRAY
62281: PPUSH
62282: CALL_OW 111
// end ;
62286: LD_VAR 0 3
62290: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62291: LD_INT 0
62293: PPUSH
62294: PPUSH
62295: PPUSH
// uc_side = 0 ;
62296: LD_ADDR_OWVAR 20
62300: PUSH
62301: LD_INT 0
62303: ST_TO_ADDR
// uc_nation = 0 ;
62304: LD_ADDR_OWVAR 21
62308: PUSH
62309: LD_INT 0
62311: ST_TO_ADDR
// InitHc_All ( ) ;
62312: CALL_OW 584
// InitVc ;
62316: CALL_OW 20
// if mastodonts then
62320: LD_VAR 0 6
62324: IFFALSE 62391
// for i = 1 to mastodonts do
62326: LD_ADDR_VAR 0 11
62330: PUSH
62331: DOUBLE
62332: LD_INT 1
62334: DEC
62335: ST_TO_ADDR
62336: LD_VAR 0 6
62340: PUSH
62341: FOR_TO
62342: IFFALSE 62389
// begin vc_chassis := 31 ;
62344: LD_ADDR_OWVAR 37
62348: PUSH
62349: LD_INT 31
62351: ST_TO_ADDR
// vc_control := control_rider ;
62352: LD_ADDR_OWVAR 38
62356: PUSH
62357: LD_INT 4
62359: ST_TO_ADDR
// animal := CreateVehicle ;
62360: LD_ADDR_VAR 0 12
62364: PUSH
62365: CALL_OW 45
62369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62370: LD_VAR 0 12
62374: PPUSH
62375: LD_VAR 0 8
62379: PPUSH
62380: LD_INT 0
62382: PPUSH
62383: CALL 64579 0 3
// end ;
62387: GO 62341
62389: POP
62390: POP
// if horses then
62391: LD_VAR 0 5
62395: IFFALSE 62462
// for i = 1 to horses do
62397: LD_ADDR_VAR 0 11
62401: PUSH
62402: DOUBLE
62403: LD_INT 1
62405: DEC
62406: ST_TO_ADDR
62407: LD_VAR 0 5
62411: PUSH
62412: FOR_TO
62413: IFFALSE 62460
// begin hc_class := 21 ;
62415: LD_ADDR_OWVAR 28
62419: PUSH
62420: LD_INT 21
62422: ST_TO_ADDR
// hc_gallery :=  ;
62423: LD_ADDR_OWVAR 33
62427: PUSH
62428: LD_STRING 
62430: ST_TO_ADDR
// animal := CreateHuman ;
62431: LD_ADDR_VAR 0 12
62435: PUSH
62436: CALL_OW 44
62440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62441: LD_VAR 0 12
62445: PPUSH
62446: LD_VAR 0 8
62450: PPUSH
62451: LD_INT 0
62453: PPUSH
62454: CALL 64579 0 3
// end ;
62458: GO 62412
62460: POP
62461: POP
// if birds then
62462: LD_VAR 0 1
62466: IFFALSE 62533
// for i = 1 to birds do
62468: LD_ADDR_VAR 0 11
62472: PUSH
62473: DOUBLE
62474: LD_INT 1
62476: DEC
62477: ST_TO_ADDR
62478: LD_VAR 0 1
62482: PUSH
62483: FOR_TO
62484: IFFALSE 62531
// begin hc_class = 18 ;
62486: LD_ADDR_OWVAR 28
62490: PUSH
62491: LD_INT 18
62493: ST_TO_ADDR
// hc_gallery =  ;
62494: LD_ADDR_OWVAR 33
62498: PUSH
62499: LD_STRING 
62501: ST_TO_ADDR
// animal := CreateHuman ;
62502: LD_ADDR_VAR 0 12
62506: PUSH
62507: CALL_OW 44
62511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62512: LD_VAR 0 12
62516: PPUSH
62517: LD_VAR 0 8
62521: PPUSH
62522: LD_INT 0
62524: PPUSH
62525: CALL 64579 0 3
// end ;
62529: GO 62483
62531: POP
62532: POP
// if tigers then
62533: LD_VAR 0 2
62537: IFFALSE 62621
// for i = 1 to tigers do
62539: LD_ADDR_VAR 0 11
62543: PUSH
62544: DOUBLE
62545: LD_INT 1
62547: DEC
62548: ST_TO_ADDR
62549: LD_VAR 0 2
62553: PUSH
62554: FOR_TO
62555: IFFALSE 62619
// begin hc_class = class_tiger ;
62557: LD_ADDR_OWVAR 28
62561: PUSH
62562: LD_INT 14
62564: ST_TO_ADDR
// hc_gallery =  ;
62565: LD_ADDR_OWVAR 33
62569: PUSH
62570: LD_STRING 
62572: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62573: LD_ADDR_OWVAR 35
62577: PUSH
62578: LD_INT 7
62580: NEG
62581: PPUSH
62582: LD_INT 7
62584: PPUSH
62585: CALL_OW 12
62589: ST_TO_ADDR
// animal := CreateHuman ;
62590: LD_ADDR_VAR 0 12
62594: PUSH
62595: CALL_OW 44
62599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62600: LD_VAR 0 12
62604: PPUSH
62605: LD_VAR 0 8
62609: PPUSH
62610: LD_INT 0
62612: PPUSH
62613: CALL 64579 0 3
// end ;
62617: GO 62554
62619: POP
62620: POP
// if apemans then
62621: LD_VAR 0 3
62625: IFFALSE 62748
// for i = 1 to apemans do
62627: LD_ADDR_VAR 0 11
62631: PUSH
62632: DOUBLE
62633: LD_INT 1
62635: DEC
62636: ST_TO_ADDR
62637: LD_VAR 0 3
62641: PUSH
62642: FOR_TO
62643: IFFALSE 62746
// begin hc_class = class_apeman ;
62645: LD_ADDR_OWVAR 28
62649: PUSH
62650: LD_INT 12
62652: ST_TO_ADDR
// hc_gallery =  ;
62653: LD_ADDR_OWVAR 33
62657: PUSH
62658: LD_STRING 
62660: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62661: LD_ADDR_OWVAR 35
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PPUSH
62670: LD_INT 2
62672: PPUSH
62673: CALL_OW 12
62677: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62678: LD_ADDR_OWVAR 31
62682: PUSH
62683: LD_INT 1
62685: PPUSH
62686: LD_INT 3
62688: PPUSH
62689: CALL_OW 12
62693: PUSH
62694: LD_INT 1
62696: PPUSH
62697: LD_INT 3
62699: PPUSH
62700: CALL_OW 12
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: ST_TO_ADDR
// animal := CreateHuman ;
62717: LD_ADDR_VAR 0 12
62721: PUSH
62722: CALL_OW 44
62726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62727: LD_VAR 0 12
62731: PPUSH
62732: LD_VAR 0 8
62736: PPUSH
62737: LD_INT 0
62739: PPUSH
62740: CALL 64579 0 3
// end ;
62744: GO 62642
62746: POP
62747: POP
// if enchidnas then
62748: LD_VAR 0 4
62752: IFFALSE 62819
// for i = 1 to enchidnas do
62754: LD_ADDR_VAR 0 11
62758: PUSH
62759: DOUBLE
62760: LD_INT 1
62762: DEC
62763: ST_TO_ADDR
62764: LD_VAR 0 4
62768: PUSH
62769: FOR_TO
62770: IFFALSE 62817
// begin hc_class = 13 ;
62772: LD_ADDR_OWVAR 28
62776: PUSH
62777: LD_INT 13
62779: ST_TO_ADDR
// hc_gallery =  ;
62780: LD_ADDR_OWVAR 33
62784: PUSH
62785: LD_STRING 
62787: ST_TO_ADDR
// animal := CreateHuman ;
62788: LD_ADDR_VAR 0 12
62792: PUSH
62793: CALL_OW 44
62797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62798: LD_VAR 0 12
62802: PPUSH
62803: LD_VAR 0 8
62807: PPUSH
62808: LD_INT 0
62810: PPUSH
62811: CALL 64579 0 3
// end ;
62815: GO 62769
62817: POP
62818: POP
// if fishes then
62819: LD_VAR 0 7
62823: IFFALSE 62890
// for i = 1 to fishes do
62825: LD_ADDR_VAR 0 11
62829: PUSH
62830: DOUBLE
62831: LD_INT 1
62833: DEC
62834: ST_TO_ADDR
62835: LD_VAR 0 7
62839: PUSH
62840: FOR_TO
62841: IFFALSE 62888
// begin hc_class = 20 ;
62843: LD_ADDR_OWVAR 28
62847: PUSH
62848: LD_INT 20
62850: ST_TO_ADDR
// hc_gallery =  ;
62851: LD_ADDR_OWVAR 33
62855: PUSH
62856: LD_STRING 
62858: ST_TO_ADDR
// animal := CreateHuman ;
62859: LD_ADDR_VAR 0 12
62863: PUSH
62864: CALL_OW 44
62868: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62869: LD_VAR 0 12
62873: PPUSH
62874: LD_VAR 0 9
62878: PPUSH
62879: LD_INT 0
62881: PPUSH
62882: CALL 64579 0 3
// end ;
62886: GO 62840
62888: POP
62889: POP
// end ;
62890: LD_VAR 0 10
62894: RET
// export function WantHeal ( sci , unit ) ; begin
62895: LD_INT 0
62897: PPUSH
// if GetTaskList ( sci ) > 0 then
62898: LD_VAR 0 1
62902: PPUSH
62903: CALL_OW 437
62907: PUSH
62908: LD_INT 0
62910: GREATER
62911: IFFALSE 62981
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62913: LD_VAR 0 1
62917: PPUSH
62918: CALL_OW 437
62922: PUSH
62923: LD_INT 1
62925: ARRAY
62926: PUSH
62927: LD_INT 1
62929: ARRAY
62930: PUSH
62931: LD_STRING l
62933: EQUAL
62934: PUSH
62935: LD_VAR 0 1
62939: PPUSH
62940: CALL_OW 437
62944: PUSH
62945: LD_INT 1
62947: ARRAY
62948: PUSH
62949: LD_INT 4
62951: ARRAY
62952: PUSH
62953: LD_VAR 0 2
62957: EQUAL
62958: AND
62959: IFFALSE 62971
// result := true else
62961: LD_ADDR_VAR 0 3
62965: PUSH
62966: LD_INT 1
62968: ST_TO_ADDR
62969: GO 62979
// result := false ;
62971: LD_ADDR_VAR 0 3
62975: PUSH
62976: LD_INT 0
62978: ST_TO_ADDR
// end else
62979: GO 62989
// result := false ;
62981: LD_ADDR_VAR 0 3
62985: PUSH
62986: LD_INT 0
62988: ST_TO_ADDR
// end ;
62989: LD_VAR 0 3
62993: RET
// export function HealTarget ( sci ) ; begin
62994: LD_INT 0
62996: PPUSH
// if not sci then
62997: LD_VAR 0 1
63001: NOT
63002: IFFALSE 63006
// exit ;
63004: GO 63071
// result := 0 ;
63006: LD_ADDR_VAR 0 2
63010: PUSH
63011: LD_INT 0
63013: ST_TO_ADDR
// if GetTaskList ( sci ) then
63014: LD_VAR 0 1
63018: PPUSH
63019: CALL_OW 437
63023: IFFALSE 63071
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63025: LD_VAR 0 1
63029: PPUSH
63030: CALL_OW 437
63034: PUSH
63035: LD_INT 1
63037: ARRAY
63038: PUSH
63039: LD_INT 1
63041: ARRAY
63042: PUSH
63043: LD_STRING l
63045: EQUAL
63046: IFFALSE 63071
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63048: LD_ADDR_VAR 0 2
63052: PUSH
63053: LD_VAR 0 1
63057: PPUSH
63058: CALL_OW 437
63062: PUSH
63063: LD_INT 1
63065: ARRAY
63066: PUSH
63067: LD_INT 4
63069: ARRAY
63070: ST_TO_ADDR
// end ;
63071: LD_VAR 0 2
63075: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63076: LD_INT 0
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
// if not base_units then
63082: LD_VAR 0 1
63086: NOT
63087: IFFALSE 63091
// exit ;
63089: GO 63178
// result := false ;
63091: LD_ADDR_VAR 0 2
63095: PUSH
63096: LD_INT 0
63098: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63099: LD_ADDR_VAR 0 5
63103: PUSH
63104: LD_VAR 0 1
63108: PPUSH
63109: LD_INT 21
63111: PUSH
63112: LD_INT 3
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PPUSH
63119: CALL_OW 72
63123: ST_TO_ADDR
// if not tmp then
63124: LD_VAR 0 5
63128: NOT
63129: IFFALSE 63133
// exit ;
63131: GO 63178
// for i in tmp do
63133: LD_ADDR_VAR 0 3
63137: PUSH
63138: LD_VAR 0 5
63142: PUSH
63143: FOR_IN
63144: IFFALSE 63176
// begin result := EnemyInRange ( i , 22 ) ;
63146: LD_ADDR_VAR 0 2
63150: PUSH
63151: LD_VAR 0 3
63155: PPUSH
63156: LD_INT 22
63158: PPUSH
63159: CALL 61414 0 2
63163: ST_TO_ADDR
// if result then
63164: LD_VAR 0 2
63168: IFFALSE 63174
// exit ;
63170: POP
63171: POP
63172: GO 63178
// end ;
63174: GO 63143
63176: POP
63177: POP
// end ;
63178: LD_VAR 0 2
63182: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
// if not units then
63187: LD_VAR 0 1
63191: NOT
63192: IFFALSE 63196
// exit ;
63194: GO 63266
// result := [ ] ;
63196: LD_ADDR_VAR 0 3
63200: PUSH
63201: EMPTY
63202: ST_TO_ADDR
// for i in units do
63203: LD_ADDR_VAR 0 4
63207: PUSH
63208: LD_VAR 0 1
63212: PUSH
63213: FOR_IN
63214: IFFALSE 63264
// if GetTag ( i ) = tag then
63216: LD_VAR 0 4
63220: PPUSH
63221: CALL_OW 110
63225: PUSH
63226: LD_VAR 0 2
63230: EQUAL
63231: IFFALSE 63262
// result := Replace ( result , result + 1 , i ) ;
63233: LD_ADDR_VAR 0 3
63237: PUSH
63238: LD_VAR 0 3
63242: PPUSH
63243: LD_VAR 0 3
63247: PUSH
63248: LD_INT 1
63250: PLUS
63251: PPUSH
63252: LD_VAR 0 4
63256: PPUSH
63257: CALL_OW 1
63261: ST_TO_ADDR
63262: GO 63213
63264: POP
63265: POP
// end ;
63266: LD_VAR 0 3
63270: RET
// export function IsDriver ( un ) ; begin
63271: LD_INT 0
63273: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63274: LD_ADDR_VAR 0 2
63278: PUSH
63279: LD_VAR 0 1
63283: PUSH
63284: LD_INT 55
63286: PUSH
63287: EMPTY
63288: LIST
63289: PPUSH
63290: CALL_OW 69
63294: IN
63295: ST_TO_ADDR
// end ;
63296: LD_VAR 0 2
63300: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63301: LD_INT 0
63303: PPUSH
63304: PPUSH
// list := [ ] ;
63305: LD_ADDR_VAR 0 5
63309: PUSH
63310: EMPTY
63311: ST_TO_ADDR
// case d of 0 :
63312: LD_VAR 0 3
63316: PUSH
63317: LD_INT 0
63319: DOUBLE
63320: EQUAL
63321: IFTRUE 63325
63323: GO 63458
63325: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63326: LD_ADDR_VAR 0 5
63330: PUSH
63331: LD_VAR 0 1
63335: PUSH
63336: LD_INT 4
63338: MINUS
63339: PUSH
63340: LD_VAR 0 2
63344: PUSH
63345: LD_INT 4
63347: MINUS
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: PUSH
63357: LD_VAR 0 1
63361: PUSH
63362: LD_INT 3
63364: MINUS
63365: PUSH
63366: LD_VAR 0 2
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_INT 4
63386: PLUS
63387: PUSH
63388: LD_VAR 0 2
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 1
63405: PUSH
63406: LD_INT 3
63408: PLUS
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_INT 3
63417: PLUS
63418: PUSH
63419: LD_INT 5
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: LD_VAR 0 1
63431: PUSH
63432: LD_VAR 0 2
63436: PUSH
63437: LD_INT 4
63439: PLUS
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// end ; 1 :
63456: GO 64156
63458: LD_INT 1
63460: DOUBLE
63461: EQUAL
63462: IFTRUE 63466
63464: GO 63599
63466: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63467: LD_ADDR_VAR 0 5
63471: PUSH
63472: LD_VAR 0 1
63476: PUSH
63477: LD_VAR 0 2
63481: PUSH
63482: LD_INT 4
63484: MINUS
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_VAR 0 1
63498: PUSH
63499: LD_INT 3
63501: MINUS
63502: PUSH
63503: LD_VAR 0 2
63507: PUSH
63508: LD_INT 3
63510: MINUS
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: PUSH
63520: LD_VAR 0 1
63524: PUSH
63525: LD_INT 4
63527: MINUS
63528: PUSH
63529: LD_VAR 0 2
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: LD_VAR 0 1
63546: PUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_INT 3
63554: PLUS
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 4
63571: PLUS
63572: PUSH
63573: LD_VAR 0 2
63577: PUSH
63578: LD_INT 4
63580: PLUS
63581: PUSH
63582: LD_INT 5
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: ST_TO_ADDR
// end ; 2 :
63597: GO 64156
63599: LD_INT 2
63601: DOUBLE
63602: EQUAL
63603: IFTRUE 63607
63605: GO 63736
63607: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63608: LD_ADDR_VAR 0 5
63612: PUSH
63613: LD_VAR 0 1
63617: PUSH
63618: LD_VAR 0 2
63622: PUSH
63623: LD_INT 3
63625: MINUS
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: LIST
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: LD_INT 4
63642: PLUS
63643: PUSH
63644: LD_VAR 0 2
63648: PUSH
63649: LD_INT 4
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_VAR 0 1
63661: PUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_INT 4
63669: PLUS
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_INT 3
63686: MINUS
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: LD_VAR 0 1
63705: PUSH
63706: LD_INT 4
63708: MINUS
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 4
63717: MINUS
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: ST_TO_ADDR
// end ; 3 :
63734: GO 64156
63736: LD_INT 3
63738: DOUBLE
63739: EQUAL
63740: IFTRUE 63744
63742: GO 63877
63744: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63745: LD_ADDR_VAR 0 5
63749: PUSH
63750: LD_VAR 0 1
63754: PUSH
63755: LD_INT 3
63757: PLUS
63758: PUSH
63759: LD_VAR 0 2
63763: PUSH
63764: LD_INT 4
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: PUSH
63772: LD_VAR 0 1
63776: PUSH
63777: LD_INT 4
63779: PLUS
63780: PUSH
63781: LD_VAR 0 2
63785: PUSH
63786: LD_INT 4
63788: PLUS
63789: PUSH
63790: LD_INT 5
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: PUSH
63798: LD_VAR 0 1
63802: PUSH
63803: LD_INT 4
63805: MINUS
63806: PUSH
63807: LD_VAR 0 2
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_VAR 0 2
63829: PUSH
63830: LD_INT 4
63832: MINUS
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_INT 3
63849: MINUS
63850: PUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_INT 3
63858: MINUS
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: ST_TO_ADDR
// end ; 4 :
63875: GO 64156
63877: LD_INT 4
63879: DOUBLE
63880: EQUAL
63881: IFTRUE 63885
63883: GO 64018
63885: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63886: LD_ADDR_VAR 0 5
63890: PUSH
63891: LD_VAR 0 1
63895: PUSH
63896: LD_VAR 0 2
63900: PUSH
63901: LD_INT 4
63903: PLUS
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 3
63920: PLUS
63921: PUSH
63922: LD_VAR 0 2
63926: PUSH
63927: LD_INT 3
63929: PLUS
63930: PUSH
63931: LD_INT 5
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: PUSH
63939: LD_VAR 0 1
63943: PUSH
63944: LD_INT 4
63946: PLUS
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_INT 4
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: LD_VAR 0 1
63965: PUSH
63966: LD_VAR 0 2
63970: PUSH
63971: LD_INT 3
63973: MINUS
63974: PUSH
63975: LD_INT 3
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: PUSH
63983: LD_VAR 0 1
63987: PUSH
63988: LD_INT 4
63990: MINUS
63991: PUSH
63992: LD_VAR 0 2
63996: PUSH
63997: LD_INT 4
63999: MINUS
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: ST_TO_ADDR
// end ; 5 :
64016: GO 64156
64018: LD_INT 5
64020: DOUBLE
64021: EQUAL
64022: IFTRUE 64026
64024: GO 64155
64026: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64027: LD_ADDR_VAR 0 5
64031: PUSH
64032: LD_VAR 0 1
64036: PUSH
64037: LD_INT 4
64039: MINUS
64040: PUSH
64041: LD_VAR 0 2
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 1
64058: PUSH
64059: LD_VAR 0 2
64063: PUSH
64064: LD_INT 4
64066: MINUS
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: PUSH
64076: LD_VAR 0 1
64080: PUSH
64081: LD_INT 4
64083: PLUS
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: LD_INT 4
64092: PLUS
64093: PUSH
64094: LD_INT 5
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: PUSH
64102: LD_VAR 0 1
64106: PUSH
64107: LD_INT 3
64109: PLUS
64110: PUSH
64111: LD_VAR 0 2
64115: PUSH
64116: LD_INT 4
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_VAR 0 2
64133: PUSH
64134: LD_INT 3
64136: PLUS
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// end ; end ;
64153: GO 64156
64155: POP
// result := list ;
64156: LD_ADDR_VAR 0 4
64160: PUSH
64161: LD_VAR 0 5
64165: ST_TO_ADDR
// end ;
64166: LD_VAR 0 4
64170: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64171: LD_INT 0
64173: PPUSH
64174: PPUSH
64175: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64176: LD_VAR 0 1
64180: NOT
64181: PUSH
64182: LD_VAR 0 2
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: LD_INT 3
64195: PUSH
64196: LD_INT 4
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: IN
64205: NOT
64206: OR
64207: IFFALSE 64211
// exit ;
64209: GO 64303
// tmp := [ ] ;
64211: LD_ADDR_VAR 0 5
64215: PUSH
64216: EMPTY
64217: ST_TO_ADDR
// for i in units do
64218: LD_ADDR_VAR 0 4
64222: PUSH
64223: LD_VAR 0 1
64227: PUSH
64228: FOR_IN
64229: IFFALSE 64272
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64231: LD_ADDR_VAR 0 5
64235: PUSH
64236: LD_VAR 0 5
64240: PPUSH
64241: LD_VAR 0 5
64245: PUSH
64246: LD_INT 1
64248: PLUS
64249: PPUSH
64250: LD_VAR 0 4
64254: PPUSH
64255: LD_VAR 0 2
64259: PPUSH
64260: CALL_OW 259
64264: PPUSH
64265: CALL_OW 2
64269: ST_TO_ADDR
64270: GO 64228
64272: POP
64273: POP
// if not tmp then
64274: LD_VAR 0 5
64278: NOT
64279: IFFALSE 64283
// exit ;
64281: GO 64303
// result := SortListByListDesc ( units , tmp ) ;
64283: LD_ADDR_VAR 0 3
64287: PUSH
64288: LD_VAR 0 1
64292: PPUSH
64293: LD_VAR 0 5
64297: PPUSH
64298: CALL_OW 77
64302: ST_TO_ADDR
// end ;
64303: LD_VAR 0 3
64307: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64308: LD_INT 0
64310: PPUSH
64311: PPUSH
64312: PPUSH
// result := false ;
64313: LD_ADDR_VAR 0 3
64317: PUSH
64318: LD_INT 0
64320: ST_TO_ADDR
// x := GetX ( building ) ;
64321: LD_ADDR_VAR 0 4
64325: PUSH
64326: LD_VAR 0 2
64330: PPUSH
64331: CALL_OW 250
64335: ST_TO_ADDR
// y := GetY ( building ) ;
64336: LD_ADDR_VAR 0 5
64340: PUSH
64341: LD_VAR 0 2
64345: PPUSH
64346: CALL_OW 251
64350: ST_TO_ADDR
// if not building or not x or not y then
64351: LD_VAR 0 2
64355: NOT
64356: PUSH
64357: LD_VAR 0 4
64361: NOT
64362: OR
64363: PUSH
64364: LD_VAR 0 5
64368: NOT
64369: OR
64370: IFFALSE 64374
// exit ;
64372: GO 64466
// if GetTaskList ( unit ) then
64374: LD_VAR 0 1
64378: PPUSH
64379: CALL_OW 437
64383: IFFALSE 64466
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64385: LD_STRING e
64387: PUSH
64388: LD_VAR 0 1
64392: PPUSH
64393: CALL_OW 437
64397: PUSH
64398: LD_INT 1
64400: ARRAY
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: EQUAL
64406: PUSH
64407: LD_VAR 0 4
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 437
64421: PUSH
64422: LD_INT 1
64424: ARRAY
64425: PUSH
64426: LD_INT 2
64428: ARRAY
64429: EQUAL
64430: AND
64431: PUSH
64432: LD_VAR 0 5
64436: PUSH
64437: LD_VAR 0 1
64441: PPUSH
64442: CALL_OW 437
64446: PUSH
64447: LD_INT 1
64449: ARRAY
64450: PUSH
64451: LD_INT 3
64453: ARRAY
64454: EQUAL
64455: AND
64456: IFFALSE 64466
// result := true end ;
64458: LD_ADDR_VAR 0 3
64462: PUSH
64463: LD_INT 1
64465: ST_TO_ADDR
// end ;
64466: LD_VAR 0 3
64470: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64471: LD_INT 0
64473: PPUSH
// result := false ;
64474: LD_ADDR_VAR 0 4
64478: PUSH
64479: LD_INT 0
64481: ST_TO_ADDR
// if GetTaskList ( unit ) then
64482: LD_VAR 0 1
64486: PPUSH
64487: CALL_OW 437
64491: IFFALSE 64574
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64493: LD_STRING M
64495: PUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 437
64505: PUSH
64506: LD_INT 1
64508: ARRAY
64509: PUSH
64510: LD_INT 1
64512: ARRAY
64513: EQUAL
64514: PUSH
64515: LD_VAR 0 2
64519: PUSH
64520: LD_VAR 0 1
64524: PPUSH
64525: CALL_OW 437
64529: PUSH
64530: LD_INT 1
64532: ARRAY
64533: PUSH
64534: LD_INT 2
64536: ARRAY
64537: EQUAL
64538: AND
64539: PUSH
64540: LD_VAR 0 3
64544: PUSH
64545: LD_VAR 0 1
64549: PPUSH
64550: CALL_OW 437
64554: PUSH
64555: LD_INT 1
64557: ARRAY
64558: PUSH
64559: LD_INT 3
64561: ARRAY
64562: EQUAL
64563: AND
64564: IFFALSE 64574
// result := true ;
64566: LD_ADDR_VAR 0 4
64570: PUSH
64571: LD_INT 1
64573: ST_TO_ADDR
// end ; end ;
64574: LD_VAR 0 4
64578: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64579: LD_INT 0
64581: PPUSH
64582: PPUSH
64583: PPUSH
64584: PPUSH
// if not unit or not area then
64585: LD_VAR 0 1
64589: NOT
64590: PUSH
64591: LD_VAR 0 2
64595: NOT
64596: OR
64597: IFFALSE 64601
// exit ;
64599: GO 64765
// tmp := AreaToList ( area , i ) ;
64601: LD_ADDR_VAR 0 6
64605: PUSH
64606: LD_VAR 0 2
64610: PPUSH
64611: LD_VAR 0 5
64615: PPUSH
64616: CALL_OW 517
64620: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64621: LD_ADDR_VAR 0 5
64625: PUSH
64626: DOUBLE
64627: LD_INT 1
64629: DEC
64630: ST_TO_ADDR
64631: LD_VAR 0 6
64635: PUSH
64636: LD_INT 1
64638: ARRAY
64639: PUSH
64640: FOR_TO
64641: IFFALSE 64763
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64643: LD_ADDR_VAR 0 7
64647: PUSH
64648: LD_VAR 0 6
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PUSH
64657: LD_VAR 0 5
64661: ARRAY
64662: PUSH
64663: LD_VAR 0 6
64667: PUSH
64668: LD_INT 2
64670: ARRAY
64671: PUSH
64672: LD_VAR 0 5
64676: ARRAY
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64682: LD_VAR 0 7
64686: PUSH
64687: LD_INT 1
64689: ARRAY
64690: PPUSH
64691: LD_VAR 0 7
64695: PUSH
64696: LD_INT 2
64698: ARRAY
64699: PPUSH
64700: CALL_OW 428
64704: PUSH
64705: LD_INT 0
64707: EQUAL
64708: IFFALSE 64761
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64710: LD_VAR 0 1
64714: PPUSH
64715: LD_VAR 0 7
64719: PUSH
64720: LD_INT 1
64722: ARRAY
64723: PPUSH
64724: LD_VAR 0 7
64728: PUSH
64729: LD_INT 2
64731: ARRAY
64732: PPUSH
64733: LD_VAR 0 3
64737: PPUSH
64738: CALL_OW 48
// result := IsPlaced ( unit ) ;
64742: LD_ADDR_VAR 0 4
64746: PUSH
64747: LD_VAR 0 1
64751: PPUSH
64752: CALL_OW 305
64756: ST_TO_ADDR
// exit ;
64757: POP
64758: POP
64759: GO 64765
// end ; end ;
64761: GO 64640
64763: POP
64764: POP
// end ;
64765: LD_VAR 0 4
64769: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64770: LD_INT 0
64772: PPUSH
64773: PPUSH
64774: PPUSH
// if not side or side > 8 then
64775: LD_VAR 0 1
64779: NOT
64780: PUSH
64781: LD_VAR 0 1
64785: PUSH
64786: LD_INT 8
64788: GREATER
64789: OR
64790: IFFALSE 64794
// exit ;
64792: GO 64981
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64794: LD_ADDR_VAR 0 4
64798: PUSH
64799: LD_INT 22
64801: PUSH
64802: LD_VAR 0 1
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 21
64813: PUSH
64814: LD_INT 3
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PPUSH
64825: CALL_OW 69
64829: ST_TO_ADDR
// if not tmp then
64830: LD_VAR 0 4
64834: NOT
64835: IFFALSE 64839
// exit ;
64837: GO 64981
// enable_addtolog := true ;
64839: LD_ADDR_OWVAR 81
64843: PUSH
64844: LD_INT 1
64846: ST_TO_ADDR
// AddToLog ( [ ) ;
64847: LD_STRING [
64849: PPUSH
64850: CALL_OW 561
// for i in tmp do
64854: LD_ADDR_VAR 0 3
64858: PUSH
64859: LD_VAR 0 4
64863: PUSH
64864: FOR_IN
64865: IFFALSE 64972
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64867: LD_STRING [
64869: PUSH
64870: LD_VAR 0 3
64874: PPUSH
64875: CALL_OW 266
64879: STR
64880: PUSH
64881: LD_STRING , 
64883: STR
64884: PUSH
64885: LD_VAR 0 3
64889: PPUSH
64890: CALL_OW 250
64894: STR
64895: PUSH
64896: LD_STRING , 
64898: STR
64899: PUSH
64900: LD_VAR 0 3
64904: PPUSH
64905: CALL_OW 251
64909: STR
64910: PUSH
64911: LD_STRING , 
64913: STR
64914: PUSH
64915: LD_VAR 0 3
64919: PPUSH
64920: CALL_OW 254
64924: STR
64925: PUSH
64926: LD_STRING , 
64928: STR
64929: PUSH
64930: LD_VAR 0 3
64934: PPUSH
64935: LD_INT 1
64937: PPUSH
64938: CALL_OW 268
64942: STR
64943: PUSH
64944: LD_STRING , 
64946: STR
64947: PUSH
64948: LD_VAR 0 3
64952: PPUSH
64953: LD_INT 2
64955: PPUSH
64956: CALL_OW 268
64960: STR
64961: PUSH
64962: LD_STRING ],
64964: STR
64965: PPUSH
64966: CALL_OW 561
// end ;
64970: GO 64864
64972: POP
64973: POP
// AddToLog ( ]; ) ;
64974: LD_STRING ];
64976: PPUSH
64977: CALL_OW 561
// end ;
64981: LD_VAR 0 2
64985: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64986: LD_INT 0
64988: PPUSH
64989: PPUSH
64990: PPUSH
64991: PPUSH
64992: PPUSH
// if not area or not rate or not max then
64993: LD_VAR 0 1
64997: NOT
64998: PUSH
64999: LD_VAR 0 2
65003: NOT
65004: OR
65005: PUSH
65006: LD_VAR 0 4
65010: NOT
65011: OR
65012: IFFALSE 65016
// exit ;
65014: GO 65208
// while 1 do
65016: LD_INT 1
65018: IFFALSE 65208
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65020: LD_ADDR_VAR 0 9
65024: PUSH
65025: LD_VAR 0 1
65029: PPUSH
65030: LD_INT 1
65032: PPUSH
65033: CALL_OW 287
65037: PUSH
65038: LD_INT 10
65040: MUL
65041: ST_TO_ADDR
// r := rate / 10 ;
65042: LD_ADDR_VAR 0 7
65046: PUSH
65047: LD_VAR 0 2
65051: PUSH
65052: LD_INT 10
65054: DIVREAL
65055: ST_TO_ADDR
// time := 1 1$00 ;
65056: LD_ADDR_VAR 0 8
65060: PUSH
65061: LD_INT 2100
65063: ST_TO_ADDR
// if amount < min then
65064: LD_VAR 0 9
65068: PUSH
65069: LD_VAR 0 3
65073: LESS
65074: IFFALSE 65092
// r := r * 2 else
65076: LD_ADDR_VAR 0 7
65080: PUSH
65081: LD_VAR 0 7
65085: PUSH
65086: LD_INT 2
65088: MUL
65089: ST_TO_ADDR
65090: GO 65118
// if amount > max then
65092: LD_VAR 0 9
65096: PUSH
65097: LD_VAR 0 4
65101: GREATER
65102: IFFALSE 65118
// r := r / 2 ;
65104: LD_ADDR_VAR 0 7
65108: PUSH
65109: LD_VAR 0 7
65113: PUSH
65114: LD_INT 2
65116: DIVREAL
65117: ST_TO_ADDR
// time := time / r ;
65118: LD_ADDR_VAR 0 8
65122: PUSH
65123: LD_VAR 0 8
65127: PUSH
65128: LD_VAR 0 7
65132: DIVREAL
65133: ST_TO_ADDR
// if time < 0 then
65134: LD_VAR 0 8
65138: PUSH
65139: LD_INT 0
65141: LESS
65142: IFFALSE 65159
// time := time * - 1 ;
65144: LD_ADDR_VAR 0 8
65148: PUSH
65149: LD_VAR 0 8
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: MUL
65158: ST_TO_ADDR
// wait ( time ) ;
65159: LD_VAR 0 8
65163: PPUSH
65164: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65168: LD_INT 35
65170: PPUSH
65171: LD_INT 875
65173: PPUSH
65174: CALL_OW 12
65178: PPUSH
65179: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65183: LD_INT 1
65185: PPUSH
65186: LD_INT 5
65188: PPUSH
65189: CALL_OW 12
65193: PPUSH
65194: LD_VAR 0 1
65198: PPUSH
65199: LD_INT 1
65201: PPUSH
65202: CALL_OW 55
// end ;
65206: GO 65016
// end ;
65208: LD_VAR 0 5
65212: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65213: LD_INT 0
65215: PPUSH
65216: PPUSH
65217: PPUSH
65218: PPUSH
65219: PPUSH
65220: PPUSH
65221: PPUSH
65222: PPUSH
// if not turrets or not factories then
65223: LD_VAR 0 1
65227: NOT
65228: PUSH
65229: LD_VAR 0 2
65233: NOT
65234: OR
65235: IFFALSE 65239
// exit ;
65237: GO 65546
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65239: LD_ADDR_VAR 0 10
65243: PUSH
65244: LD_INT 5
65246: PUSH
65247: LD_INT 6
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: LD_INT 4
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 3
65266: PUSH
65267: LD_INT 5
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 24
65281: PUSH
65282: LD_INT 25
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 23
65291: PUSH
65292: LD_INT 27
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 42
65305: PUSH
65306: LD_INT 43
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 44
65315: PUSH
65316: LD_INT 46
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 45
65325: PUSH
65326: LD_INT 47
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: ST_TO_ADDR
// result := [ ] ;
65343: LD_ADDR_VAR 0 3
65347: PUSH
65348: EMPTY
65349: ST_TO_ADDR
// for i in turrets do
65350: LD_ADDR_VAR 0 4
65354: PUSH
65355: LD_VAR 0 1
65359: PUSH
65360: FOR_IN
65361: IFFALSE 65544
// begin nat := GetNation ( i ) ;
65363: LD_ADDR_VAR 0 7
65367: PUSH
65368: LD_VAR 0 4
65372: PPUSH
65373: CALL_OW 248
65377: ST_TO_ADDR
// weapon := 0 ;
65378: LD_ADDR_VAR 0 8
65382: PUSH
65383: LD_INT 0
65385: ST_TO_ADDR
// if not nat then
65386: LD_VAR 0 7
65390: NOT
65391: IFFALSE 65395
// continue ;
65393: GO 65360
// for j in list [ nat ] do
65395: LD_ADDR_VAR 0 5
65399: PUSH
65400: LD_VAR 0 10
65404: PUSH
65405: LD_VAR 0 7
65409: ARRAY
65410: PUSH
65411: FOR_IN
65412: IFFALSE 65453
// if GetBWeapon ( i ) = j [ 1 ] then
65414: LD_VAR 0 4
65418: PPUSH
65419: CALL_OW 269
65423: PUSH
65424: LD_VAR 0 5
65428: PUSH
65429: LD_INT 1
65431: ARRAY
65432: EQUAL
65433: IFFALSE 65451
// begin weapon := j [ 2 ] ;
65435: LD_ADDR_VAR 0 8
65439: PUSH
65440: LD_VAR 0 5
65444: PUSH
65445: LD_INT 2
65447: ARRAY
65448: ST_TO_ADDR
// break ;
65449: GO 65453
// end ;
65451: GO 65411
65453: POP
65454: POP
// if not weapon then
65455: LD_VAR 0 8
65459: NOT
65460: IFFALSE 65464
// continue ;
65462: GO 65360
// for k in factories do
65464: LD_ADDR_VAR 0 6
65468: PUSH
65469: LD_VAR 0 2
65473: PUSH
65474: FOR_IN
65475: IFFALSE 65540
// begin weapons := AvailableWeaponList ( k ) ;
65477: LD_ADDR_VAR 0 9
65481: PUSH
65482: LD_VAR 0 6
65486: PPUSH
65487: CALL_OW 478
65491: ST_TO_ADDR
// if not weapons then
65492: LD_VAR 0 9
65496: NOT
65497: IFFALSE 65501
// continue ;
65499: GO 65474
// if weapon in weapons then
65501: LD_VAR 0 8
65505: PUSH
65506: LD_VAR 0 9
65510: IN
65511: IFFALSE 65538
// begin result := [ i , weapon ] ;
65513: LD_ADDR_VAR 0 3
65517: PUSH
65518: LD_VAR 0 4
65522: PUSH
65523: LD_VAR 0 8
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: ST_TO_ADDR
// exit ;
65532: POP
65533: POP
65534: POP
65535: POP
65536: GO 65546
// end ; end ;
65538: GO 65474
65540: POP
65541: POP
// end ;
65542: GO 65360
65544: POP
65545: POP
// end ;
65546: LD_VAR 0 3
65550: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65551: LD_INT 0
65553: PPUSH
// if not side or side > 8 then
65554: LD_VAR 0 3
65558: NOT
65559: PUSH
65560: LD_VAR 0 3
65564: PUSH
65565: LD_INT 8
65567: GREATER
65568: OR
65569: IFFALSE 65573
// exit ;
65571: GO 65632
// if not range then
65573: LD_VAR 0 4
65577: NOT
65578: IFFALSE 65589
// range := - 12 ;
65580: LD_ADDR_VAR 0 4
65584: PUSH
65585: LD_INT 12
65587: NEG
65588: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65589: LD_VAR 0 1
65593: PPUSH
65594: LD_VAR 0 2
65598: PPUSH
65599: LD_VAR 0 3
65603: PPUSH
65604: LD_VAR 0 4
65608: PPUSH
65609: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65613: LD_VAR 0 1
65617: PPUSH
65618: LD_VAR 0 2
65622: PPUSH
65623: LD_VAR 0 3
65627: PPUSH
65628: CALL_OW 331
// end ;
65632: LD_VAR 0 5
65636: RET
// export function Video ( mode ) ; begin
65637: LD_INT 0
65639: PPUSH
// ingame_video = mode ;
65640: LD_ADDR_OWVAR 52
65644: PUSH
65645: LD_VAR 0 1
65649: ST_TO_ADDR
// interface_hidden = mode ;
65650: LD_ADDR_OWVAR 54
65654: PUSH
65655: LD_VAR 0 1
65659: ST_TO_ADDR
// end ;
65660: LD_VAR 0 2
65664: RET
// export function Join ( array , element ) ; begin
65665: LD_INT 0
65667: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65668: LD_ADDR_VAR 0 3
65672: PUSH
65673: LD_VAR 0 1
65677: PPUSH
65678: LD_VAR 0 1
65682: PUSH
65683: LD_INT 1
65685: PLUS
65686: PPUSH
65687: LD_VAR 0 2
65691: PPUSH
65692: CALL_OW 1
65696: ST_TO_ADDR
// end ;
65697: LD_VAR 0 3
65701: RET
// export function JoinUnion ( array , element ) ; begin
65702: LD_INT 0
65704: PPUSH
// result := array union element ;
65705: LD_ADDR_VAR 0 3
65709: PUSH
65710: LD_VAR 0 1
65714: PUSH
65715: LD_VAR 0 2
65719: UNION
65720: ST_TO_ADDR
// end ;
65721: LD_VAR 0 3
65725: RET
// export function GetBehemoths ( side ) ; begin
65726: LD_INT 0
65728: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65729: LD_ADDR_VAR 0 2
65733: PUSH
65734: LD_INT 22
65736: PUSH
65737: LD_VAR 0 1
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 31
65748: PUSH
65749: LD_INT 25
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PPUSH
65760: CALL_OW 69
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 2
65769: RET
// export function Shuffle ( array ) ; var i , index ; begin
65770: LD_INT 0
65772: PPUSH
65773: PPUSH
65774: PPUSH
// result := [ ] ;
65775: LD_ADDR_VAR 0 2
65779: PUSH
65780: EMPTY
65781: ST_TO_ADDR
// if not array then
65782: LD_VAR 0 1
65786: NOT
65787: IFFALSE 65791
// exit ;
65789: GO 65890
// Randomize ;
65791: CALL_OW 10
// for i = array downto 1 do
65795: LD_ADDR_VAR 0 3
65799: PUSH
65800: DOUBLE
65801: LD_VAR 0 1
65805: INC
65806: ST_TO_ADDR
65807: LD_INT 1
65809: PUSH
65810: FOR_DOWNTO
65811: IFFALSE 65888
// begin index := rand ( 1 , array ) ;
65813: LD_ADDR_VAR 0 4
65817: PUSH
65818: LD_INT 1
65820: PPUSH
65821: LD_VAR 0 1
65825: PPUSH
65826: CALL_OW 12
65830: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65831: LD_ADDR_VAR 0 2
65835: PUSH
65836: LD_VAR 0 2
65840: PPUSH
65841: LD_VAR 0 2
65845: PUSH
65846: LD_INT 1
65848: PLUS
65849: PPUSH
65850: LD_VAR 0 1
65854: PUSH
65855: LD_VAR 0 4
65859: ARRAY
65860: PPUSH
65861: CALL_OW 2
65865: ST_TO_ADDR
// array := Delete ( array , index ) ;
65866: LD_ADDR_VAR 0 1
65870: PUSH
65871: LD_VAR 0 1
65875: PPUSH
65876: LD_VAR 0 4
65880: PPUSH
65881: CALL_OW 3
65885: ST_TO_ADDR
// end ;
65886: GO 65810
65888: POP
65889: POP
// end ;
65890: LD_VAR 0 2
65894: RET
// export function GetBaseMaterials ( base ) ; begin
65895: LD_INT 0
65897: PPUSH
// result := [ 0 , 0 , 0 ] ;
65898: LD_ADDR_VAR 0 2
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// if not base then
65917: LD_VAR 0 1
65921: NOT
65922: IFFALSE 65926
// exit ;
65924: GO 65975
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65926: LD_ADDR_VAR 0 2
65930: PUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: LD_INT 1
65938: PPUSH
65939: CALL_OW 275
65943: PUSH
65944: LD_VAR 0 1
65948: PPUSH
65949: LD_INT 2
65951: PPUSH
65952: CALL_OW 275
65956: PUSH
65957: LD_VAR 0 1
65961: PPUSH
65962: LD_INT 3
65964: PPUSH
65965: CALL_OW 275
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// end ;
65975: LD_VAR 0 2
65979: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
// result := array ;
65984: LD_ADDR_VAR 0 3
65988: PUSH
65989: LD_VAR 0 1
65993: ST_TO_ADDR
// if size > 0 then
65994: LD_VAR 0 2
65998: PUSH
65999: LD_INT 0
66001: GREATER
66002: IFFALSE 66048
// for i := array downto size do
66004: LD_ADDR_VAR 0 4
66008: PUSH
66009: DOUBLE
66010: LD_VAR 0 1
66014: INC
66015: ST_TO_ADDR
66016: LD_VAR 0 2
66020: PUSH
66021: FOR_DOWNTO
66022: IFFALSE 66046
// result := Delete ( result , result ) ;
66024: LD_ADDR_VAR 0 3
66028: PUSH
66029: LD_VAR 0 3
66033: PPUSH
66034: LD_VAR 0 3
66038: PPUSH
66039: CALL_OW 3
66043: ST_TO_ADDR
66044: GO 66021
66046: POP
66047: POP
// end ;
66048: LD_VAR 0 3
66052: RET
// export function ComExit ( unit ) ; var tmp ; begin
66053: LD_INT 0
66055: PPUSH
66056: PPUSH
// if not IsInUnit ( unit ) then
66057: LD_VAR 0 1
66061: PPUSH
66062: CALL_OW 310
66066: NOT
66067: IFFALSE 66071
// exit ;
66069: GO 66131
// tmp := IsInUnit ( unit ) ;
66071: LD_ADDR_VAR 0 3
66075: PUSH
66076: LD_VAR 0 1
66080: PPUSH
66081: CALL_OW 310
66085: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66086: LD_VAR 0 3
66090: PPUSH
66091: CALL_OW 247
66095: PUSH
66096: LD_INT 2
66098: EQUAL
66099: IFFALSE 66112
// ComExitVehicle ( unit ) else
66101: LD_VAR 0 1
66105: PPUSH
66106: CALL_OW 121
66110: GO 66121
// ComExitBuilding ( unit ) ;
66112: LD_VAR 0 1
66116: PPUSH
66117: CALL_OW 122
// result := tmp ;
66121: LD_ADDR_VAR 0 2
66125: PUSH
66126: LD_VAR 0 3
66130: ST_TO_ADDR
// end ;
66131: LD_VAR 0 2
66135: RET
// export function ComExitAll ( units ) ; var i ; begin
66136: LD_INT 0
66138: PPUSH
66139: PPUSH
// if not units then
66140: LD_VAR 0 1
66144: NOT
66145: IFFALSE 66149
// exit ;
66147: GO 66175
// for i in units do
66149: LD_ADDR_VAR 0 3
66153: PUSH
66154: LD_VAR 0 1
66158: PUSH
66159: FOR_IN
66160: IFFALSE 66173
// ComExit ( i ) ;
66162: LD_VAR 0 3
66166: PPUSH
66167: CALL 66053 0 1
66171: GO 66159
66173: POP
66174: POP
// end ;
66175: LD_VAR 0 2
66179: RET
// export function ResetHc ; begin
66180: LD_INT 0
66182: PPUSH
// InitHc ;
66183: CALL_OW 19
// hc_importance := 0 ;
66187: LD_ADDR_OWVAR 32
66191: PUSH
66192: LD_INT 0
66194: ST_TO_ADDR
// end ;
66195: LD_VAR 0 1
66199: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66200: LD_INT 0
66202: PPUSH
66203: PPUSH
66204: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: LD_VAR 0 1
66214: PUSH
66215: LD_VAR 0 3
66219: PLUS
66220: PUSH
66221: LD_INT 2
66223: DIV
66224: ST_TO_ADDR
// if _x < 0 then
66225: LD_VAR 0 6
66229: PUSH
66230: LD_INT 0
66232: LESS
66233: IFFALSE 66250
// _x := _x * - 1 ;
66235: LD_ADDR_VAR 0 6
66239: PUSH
66240: LD_VAR 0 6
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: MUL
66249: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66250: LD_ADDR_VAR 0 7
66254: PUSH
66255: LD_VAR 0 2
66259: PUSH
66260: LD_VAR 0 4
66264: PLUS
66265: PUSH
66266: LD_INT 2
66268: DIV
66269: ST_TO_ADDR
// if _y < 0 then
66270: LD_VAR 0 7
66274: PUSH
66275: LD_INT 0
66277: LESS
66278: IFFALSE 66295
// _y := _y * - 1 ;
66280: LD_ADDR_VAR 0 7
66284: PUSH
66285: LD_VAR 0 7
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: MUL
66294: ST_TO_ADDR
// result := [ _x , _y ] ;
66295: LD_ADDR_VAR 0 5
66299: PUSH
66300: LD_VAR 0 6
66304: PUSH
66305: LD_VAR 0 7
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: ST_TO_ADDR
// end ;
66314: LD_VAR 0 5
66318: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66319: LD_INT 0
66321: PPUSH
66322: PPUSH
66323: PPUSH
66324: PPUSH
// task := GetTaskList ( unit ) ;
66325: LD_ADDR_VAR 0 7
66329: PUSH
66330: LD_VAR 0 1
66334: PPUSH
66335: CALL_OW 437
66339: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66340: LD_VAR 0 7
66344: NOT
66345: PUSH
66346: LD_VAR 0 1
66350: PPUSH
66351: LD_VAR 0 2
66355: PPUSH
66356: CALL_OW 308
66360: NOT
66361: AND
66362: IFFALSE 66366
// exit ;
66364: GO 66484
// if IsInArea ( unit , area ) then
66366: LD_VAR 0 1
66370: PPUSH
66371: LD_VAR 0 2
66375: PPUSH
66376: CALL_OW 308
66380: IFFALSE 66398
// begin ComMoveToArea ( unit , goAway ) ;
66382: LD_VAR 0 1
66386: PPUSH
66387: LD_VAR 0 3
66391: PPUSH
66392: CALL_OW 113
// exit ;
66396: GO 66484
// end ; if task [ 1 ] [ 1 ] <> M then
66398: LD_VAR 0 7
66402: PUSH
66403: LD_INT 1
66405: ARRAY
66406: PUSH
66407: LD_INT 1
66409: ARRAY
66410: PUSH
66411: LD_STRING M
66413: NONEQUAL
66414: IFFALSE 66418
// exit ;
66416: GO 66484
// x := task [ 1 ] [ 2 ] ;
66418: LD_ADDR_VAR 0 5
66422: PUSH
66423: LD_VAR 0 7
66427: PUSH
66428: LD_INT 1
66430: ARRAY
66431: PUSH
66432: LD_INT 2
66434: ARRAY
66435: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66436: LD_ADDR_VAR 0 6
66440: PUSH
66441: LD_VAR 0 7
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PUSH
66450: LD_INT 3
66452: ARRAY
66453: ST_TO_ADDR
// if InArea ( x , y , area ) then
66454: LD_VAR 0 5
66458: PPUSH
66459: LD_VAR 0 6
66463: PPUSH
66464: LD_VAR 0 2
66468: PPUSH
66469: CALL_OW 309
66473: IFFALSE 66484
// ComStop ( unit ) ;
66475: LD_VAR 0 1
66479: PPUSH
66480: CALL_OW 141
// end ;
66484: LD_VAR 0 4
66488: RET
// export function Abs ( value ) ; begin
66489: LD_INT 0
66491: PPUSH
// result := value ;
66492: LD_ADDR_VAR 0 2
66496: PUSH
66497: LD_VAR 0 1
66501: ST_TO_ADDR
// if value < 0 then
66502: LD_VAR 0 1
66506: PUSH
66507: LD_INT 0
66509: LESS
66510: IFFALSE 66527
// result := value * - 1 ;
66512: LD_ADDR_VAR 0 2
66516: PUSH
66517: LD_VAR 0 1
66521: PUSH
66522: LD_INT 1
66524: NEG
66525: MUL
66526: ST_TO_ADDR
// end ;
66527: LD_VAR 0 2
66531: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66532: LD_INT 0
66534: PPUSH
66535: PPUSH
66536: PPUSH
66537: PPUSH
66538: PPUSH
66539: PPUSH
66540: PPUSH
66541: PPUSH
// if not unit or not building then
66542: LD_VAR 0 1
66546: NOT
66547: PUSH
66548: LD_VAR 0 2
66552: NOT
66553: OR
66554: IFFALSE 66558
// exit ;
66556: GO 66784
// x := GetX ( building ) ;
66558: LD_ADDR_VAR 0 4
66562: PUSH
66563: LD_VAR 0 2
66567: PPUSH
66568: CALL_OW 250
66572: ST_TO_ADDR
// y := GetY ( building ) ;
66573: LD_ADDR_VAR 0 6
66577: PUSH
66578: LD_VAR 0 2
66582: PPUSH
66583: CALL_OW 251
66587: ST_TO_ADDR
// d := GetDir ( building ) ;
66588: LD_ADDR_VAR 0 8
66592: PUSH
66593: LD_VAR 0 2
66597: PPUSH
66598: CALL_OW 254
66602: ST_TO_ADDR
// r := 4 ;
66603: LD_ADDR_VAR 0 9
66607: PUSH
66608: LD_INT 4
66610: ST_TO_ADDR
// for i := 1 to 5 do
66611: LD_ADDR_VAR 0 10
66615: PUSH
66616: DOUBLE
66617: LD_INT 1
66619: DEC
66620: ST_TO_ADDR
66621: LD_INT 5
66623: PUSH
66624: FOR_TO
66625: IFFALSE 66782
// begin _x := ShiftX ( x , d , r + i ) ;
66627: LD_ADDR_VAR 0 5
66631: PUSH
66632: LD_VAR 0 4
66636: PPUSH
66637: LD_VAR 0 8
66641: PPUSH
66642: LD_VAR 0 9
66646: PUSH
66647: LD_VAR 0 10
66651: PLUS
66652: PPUSH
66653: CALL_OW 272
66657: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66658: LD_ADDR_VAR 0 7
66662: PUSH
66663: LD_VAR 0 6
66667: PPUSH
66668: LD_VAR 0 8
66672: PPUSH
66673: LD_VAR 0 9
66677: PUSH
66678: LD_VAR 0 10
66682: PLUS
66683: PPUSH
66684: CALL_OW 273
66688: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66689: LD_VAR 0 5
66693: PPUSH
66694: LD_VAR 0 7
66698: PPUSH
66699: CALL_OW 488
66703: PUSH
66704: LD_VAR 0 5
66708: PPUSH
66709: LD_VAR 0 7
66713: PPUSH
66714: CALL_OW 428
66718: PPUSH
66719: CALL_OW 247
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: IN
66734: NOT
66735: AND
66736: IFFALSE 66780
// begin ComMoveXY ( unit , _x , _y ) ;
66738: LD_VAR 0 1
66742: PPUSH
66743: LD_VAR 0 5
66747: PPUSH
66748: LD_VAR 0 7
66752: PPUSH
66753: CALL_OW 111
// result := [ _x , _y ] ;
66757: LD_ADDR_VAR 0 3
66761: PUSH
66762: LD_VAR 0 5
66766: PUSH
66767: LD_VAR 0 7
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: ST_TO_ADDR
// exit ;
66776: POP
66777: POP
66778: GO 66784
// end ; end ;
66780: GO 66624
66782: POP
66783: POP
// end ;
66784: LD_VAR 0 3
66788: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66789: LD_INT 0
66791: PPUSH
66792: PPUSH
66793: PPUSH
// result := 0 ;
66794: LD_ADDR_VAR 0 3
66798: PUSH
66799: LD_INT 0
66801: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66802: LD_VAR 0 1
66806: PUSH
66807: LD_INT 0
66809: LESS
66810: PUSH
66811: LD_VAR 0 1
66815: PUSH
66816: LD_INT 8
66818: GREATER
66819: OR
66820: PUSH
66821: LD_VAR 0 2
66825: PUSH
66826: LD_INT 0
66828: LESS
66829: OR
66830: PUSH
66831: LD_VAR 0 2
66835: PUSH
66836: LD_INT 8
66838: GREATER
66839: OR
66840: IFFALSE 66844
// exit ;
66842: GO 66919
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66844: LD_ADDR_VAR 0 4
66848: PUSH
66849: LD_INT 22
66851: PUSH
66852: LD_VAR 0 2
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PPUSH
66861: CALL_OW 69
66865: PUSH
66866: FOR_IN
66867: IFFALSE 66917
// begin un := UnitShoot ( i ) ;
66869: LD_ADDR_VAR 0 5
66873: PUSH
66874: LD_VAR 0 4
66878: PPUSH
66879: CALL_OW 504
66883: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66884: LD_VAR 0 5
66888: PPUSH
66889: CALL_OW 255
66893: PUSH
66894: LD_VAR 0 1
66898: EQUAL
66899: IFFALSE 66915
// begin result := un ;
66901: LD_ADDR_VAR 0 3
66905: PUSH
66906: LD_VAR 0 5
66910: ST_TO_ADDR
// exit ;
66911: POP
66912: POP
66913: GO 66919
// end ; end ;
66915: GO 66866
66917: POP
66918: POP
// end ;
66919: LD_VAR 0 3
66923: RET
// export function GetCargoBay ( units ) ; begin
66924: LD_INT 0
66926: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66927: LD_ADDR_VAR 0 2
66931: PUSH
66932: LD_VAR 0 1
66936: PPUSH
66937: LD_INT 2
66939: PUSH
66940: LD_INT 34
66942: PUSH
66943: LD_INT 12
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 34
66952: PUSH
66953: LD_INT 51
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 34
66962: PUSH
66963: LD_INT 32
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 34
66972: PUSH
66973: LD_EXP 15
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: PPUSH
66989: CALL_OW 72
66993: ST_TO_ADDR
// end ;
66994: LD_VAR 0 2
66998: RET
// export function Negate ( value ) ; begin
66999: LD_INT 0
67001: PPUSH
// result := not value ;
67002: LD_ADDR_VAR 0 2
67006: PUSH
67007: LD_VAR 0 1
67011: NOT
67012: ST_TO_ADDR
// end ;
67013: LD_VAR 0 2
67017: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67018: LD_INT 0
67020: PPUSH
// if x1 = x2 then
67021: LD_VAR 0 1
67025: PUSH
67026: LD_VAR 0 3
67030: EQUAL
67031: IFFALSE 67065
// begin if y1 > y2 then
67033: LD_VAR 0 2
67037: PUSH
67038: LD_VAR 0 4
67042: GREATER
67043: IFFALSE 67055
// result := 0 else
67045: LD_ADDR_VAR 0 5
67049: PUSH
67050: LD_INT 0
67052: ST_TO_ADDR
67053: GO 67063
// result := 3 ;
67055: LD_ADDR_VAR 0 5
67059: PUSH
67060: LD_INT 3
67062: ST_TO_ADDR
// exit ;
67063: GO 67151
// end ; if y1 = y2 then
67065: LD_VAR 0 2
67069: PUSH
67070: LD_VAR 0 4
67074: EQUAL
67075: IFFALSE 67109
// begin if x1 > x2 then
67077: LD_VAR 0 1
67081: PUSH
67082: LD_VAR 0 3
67086: GREATER
67087: IFFALSE 67099
// result := 1 else
67089: LD_ADDR_VAR 0 5
67093: PUSH
67094: LD_INT 1
67096: ST_TO_ADDR
67097: GO 67107
// result := 4 ;
67099: LD_ADDR_VAR 0 5
67103: PUSH
67104: LD_INT 4
67106: ST_TO_ADDR
// exit ;
67107: GO 67151
// end ; if x1 > x2 and y1 > y2 then
67109: LD_VAR 0 1
67113: PUSH
67114: LD_VAR 0 3
67118: GREATER
67119: PUSH
67120: LD_VAR 0 2
67124: PUSH
67125: LD_VAR 0 4
67129: GREATER
67130: AND
67131: IFFALSE 67143
// result := 2 else
67133: LD_ADDR_VAR 0 5
67137: PUSH
67138: LD_INT 2
67140: ST_TO_ADDR
67141: GO 67151
// result := 5 ;
67143: LD_ADDR_VAR 0 5
67147: PUSH
67148: LD_INT 5
67150: ST_TO_ADDR
// end ;
67151: LD_VAR 0 5
67155: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67156: LD_INT 0
67158: PPUSH
67159: PPUSH
// if not driver or not IsInUnit ( driver ) then
67160: LD_VAR 0 1
67164: NOT
67165: PUSH
67166: LD_VAR 0 1
67170: PPUSH
67171: CALL_OW 310
67175: NOT
67176: OR
67177: IFFALSE 67181
// exit ;
67179: GO 67271
// vehicle := IsInUnit ( driver ) ;
67181: LD_ADDR_VAR 0 3
67185: PUSH
67186: LD_VAR 0 1
67190: PPUSH
67191: CALL_OW 310
67195: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67196: LD_VAR 0 1
67200: PPUSH
67201: LD_STRING \
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: LD_INT 0
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: PUSH
67231: LD_STRING E
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_VAR 0 3
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PPUSH
67267: CALL_OW 446
// end ;
67271: LD_VAR 0 2
67275: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67276: LD_INT 0
67278: PPUSH
67279: PPUSH
// if not driver or not IsInUnit ( driver ) then
67280: LD_VAR 0 1
67284: NOT
67285: PUSH
67286: LD_VAR 0 1
67290: PPUSH
67291: CALL_OW 310
67295: NOT
67296: OR
67297: IFFALSE 67301
// exit ;
67299: GO 67391
// vehicle := IsInUnit ( driver ) ;
67301: LD_ADDR_VAR 0 3
67305: PUSH
67306: LD_VAR 0 1
67310: PPUSH
67311: CALL_OW 310
67315: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67316: LD_VAR 0 1
67320: PPUSH
67321: LD_STRING \
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: PUSH
67351: LD_STRING E
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: LD_VAR 0 3
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PPUSH
67387: CALL_OW 447
// end ;
67391: LD_VAR 0 2
67395: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67396: LD_INT 0
67398: PPUSH
67399: PPUSH
67400: PPUSH
// tmp := [ ] ;
67401: LD_ADDR_VAR 0 5
67405: PUSH
67406: EMPTY
67407: ST_TO_ADDR
// for i in units do
67408: LD_ADDR_VAR 0 4
67412: PUSH
67413: LD_VAR 0 1
67417: PUSH
67418: FOR_IN
67419: IFFALSE 67457
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67421: LD_ADDR_VAR 0 5
67425: PUSH
67426: LD_VAR 0 5
67430: PPUSH
67431: LD_VAR 0 5
67435: PUSH
67436: LD_INT 1
67438: PLUS
67439: PPUSH
67440: LD_VAR 0 4
67444: PPUSH
67445: CALL_OW 256
67449: PPUSH
67450: CALL_OW 2
67454: ST_TO_ADDR
67455: GO 67418
67457: POP
67458: POP
// if not tmp then
67459: LD_VAR 0 5
67463: NOT
67464: IFFALSE 67468
// exit ;
67466: GO 67516
// if asc then
67468: LD_VAR 0 2
67472: IFFALSE 67496
// result := SortListByListAsc ( units , tmp ) else
67474: LD_ADDR_VAR 0 3
67478: PUSH
67479: LD_VAR 0 1
67483: PPUSH
67484: LD_VAR 0 5
67488: PPUSH
67489: CALL_OW 76
67493: ST_TO_ADDR
67494: GO 67516
// result := SortListByListDesc ( units , tmp ) ;
67496: LD_ADDR_VAR 0 3
67500: PUSH
67501: LD_VAR 0 1
67505: PPUSH
67506: LD_VAR 0 5
67510: PPUSH
67511: CALL_OW 77
67515: ST_TO_ADDR
// end ;
67516: LD_VAR 0 3
67520: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67521: LD_INT 0
67523: PPUSH
67524: PPUSH
// task := GetTaskList ( mech ) ;
67525: LD_ADDR_VAR 0 4
67529: PUSH
67530: LD_VAR 0 1
67534: PPUSH
67535: CALL_OW 437
67539: ST_TO_ADDR
// if not task then
67540: LD_VAR 0 4
67544: NOT
67545: IFFALSE 67549
// exit ;
67547: GO 67591
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67549: LD_ADDR_VAR 0 3
67553: PUSH
67554: LD_VAR 0 4
67558: PUSH
67559: LD_INT 1
67561: ARRAY
67562: PUSH
67563: LD_INT 1
67565: ARRAY
67566: PUSH
67567: LD_STRING r
67569: EQUAL
67570: PUSH
67571: LD_VAR 0 4
67575: PUSH
67576: LD_INT 1
67578: ARRAY
67579: PUSH
67580: LD_INT 4
67582: ARRAY
67583: PUSH
67584: LD_VAR 0 2
67588: EQUAL
67589: AND
67590: ST_TO_ADDR
// end ;
67591: LD_VAR 0 3
67595: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67596: LD_INT 0
67598: PPUSH
// SetDir ( unit , d ) ;
67599: LD_VAR 0 1
67603: PPUSH
67604: LD_VAR 0 4
67608: PPUSH
67609: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67613: LD_VAR 0 1
67617: PPUSH
67618: LD_VAR 0 2
67622: PPUSH
67623: LD_VAR 0 3
67627: PPUSH
67628: LD_VAR 0 5
67632: PPUSH
67633: CALL_OW 48
// end ;
67637: LD_VAR 0 6
67641: RET
// export function ToNaturalNumber ( number ) ; begin
67642: LD_INT 0
67644: PPUSH
// result := number div 1 ;
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: LD_VAR 0 1
67654: PUSH
67655: LD_INT 1
67657: DIV
67658: ST_TO_ADDR
// if number < 0 then
67659: LD_VAR 0 1
67663: PUSH
67664: LD_INT 0
67666: LESS
67667: IFFALSE 67677
// result := 0 ;
67669: LD_ADDR_VAR 0 2
67673: PUSH
67674: LD_INT 0
67676: ST_TO_ADDR
// end ;
67677: LD_VAR 0 2
67681: RET
// export function SortByClass ( units , class ) ; var un ; begin
67682: LD_INT 0
67684: PPUSH
67685: PPUSH
// if not units or not class then
67686: LD_VAR 0 1
67690: NOT
67691: PUSH
67692: LD_VAR 0 2
67696: NOT
67697: OR
67698: IFFALSE 67702
// exit ;
67700: GO 67797
// result := [ ] ;
67702: LD_ADDR_VAR 0 3
67706: PUSH
67707: EMPTY
67708: ST_TO_ADDR
// for un in units do
67709: LD_ADDR_VAR 0 4
67713: PUSH
67714: LD_VAR 0 1
67718: PUSH
67719: FOR_IN
67720: IFFALSE 67795
// if GetClass ( un ) = class then
67722: LD_VAR 0 4
67726: PPUSH
67727: CALL_OW 257
67731: PUSH
67732: LD_VAR 0 2
67736: EQUAL
67737: IFFALSE 67764
// result := Insert ( result , 1 , un ) else
67739: LD_ADDR_VAR 0 3
67743: PUSH
67744: LD_VAR 0 3
67748: PPUSH
67749: LD_INT 1
67751: PPUSH
67752: LD_VAR 0 4
67756: PPUSH
67757: CALL_OW 2
67761: ST_TO_ADDR
67762: GO 67793
// result := Replace ( result , result + 1 , un ) ;
67764: LD_ADDR_VAR 0 3
67768: PUSH
67769: LD_VAR 0 3
67773: PPUSH
67774: LD_VAR 0 3
67778: PUSH
67779: LD_INT 1
67781: PLUS
67782: PPUSH
67783: LD_VAR 0 4
67787: PPUSH
67788: CALL_OW 1
67792: ST_TO_ADDR
67793: GO 67719
67795: POP
67796: POP
// end ;
67797: LD_VAR 0 3
67801: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67802: LD_INT 0
67804: PPUSH
67805: PPUSH
67806: PPUSH
67807: PPUSH
67808: PPUSH
67809: PPUSH
67810: PPUSH
// result := [ ] ;
67811: LD_ADDR_VAR 0 4
67815: PUSH
67816: EMPTY
67817: ST_TO_ADDR
// if x - r < 0 then
67818: LD_VAR 0 1
67822: PUSH
67823: LD_VAR 0 3
67827: MINUS
67828: PUSH
67829: LD_INT 0
67831: LESS
67832: IFFALSE 67844
// min_x := 0 else
67834: LD_ADDR_VAR 0 8
67838: PUSH
67839: LD_INT 0
67841: ST_TO_ADDR
67842: GO 67860
// min_x := x - r ;
67844: LD_ADDR_VAR 0 8
67848: PUSH
67849: LD_VAR 0 1
67853: PUSH
67854: LD_VAR 0 3
67858: MINUS
67859: ST_TO_ADDR
// if y - r < 0 then
67860: LD_VAR 0 2
67864: PUSH
67865: LD_VAR 0 3
67869: MINUS
67870: PUSH
67871: LD_INT 0
67873: LESS
67874: IFFALSE 67886
// min_y := 0 else
67876: LD_ADDR_VAR 0 7
67880: PUSH
67881: LD_INT 0
67883: ST_TO_ADDR
67884: GO 67902
// min_y := y - r ;
67886: LD_ADDR_VAR 0 7
67890: PUSH
67891: LD_VAR 0 2
67895: PUSH
67896: LD_VAR 0 3
67900: MINUS
67901: ST_TO_ADDR
// max_x := x + r ;
67902: LD_ADDR_VAR 0 9
67906: PUSH
67907: LD_VAR 0 1
67911: PUSH
67912: LD_VAR 0 3
67916: PLUS
67917: ST_TO_ADDR
// max_y := y + r ;
67918: LD_ADDR_VAR 0 10
67922: PUSH
67923: LD_VAR 0 2
67927: PUSH
67928: LD_VAR 0 3
67932: PLUS
67933: ST_TO_ADDR
// for _x = min_x to max_x do
67934: LD_ADDR_VAR 0 5
67938: PUSH
67939: DOUBLE
67940: LD_VAR 0 8
67944: DEC
67945: ST_TO_ADDR
67946: LD_VAR 0 9
67950: PUSH
67951: FOR_TO
67952: IFFALSE 68053
// for _y = min_y to max_y do
67954: LD_ADDR_VAR 0 6
67958: PUSH
67959: DOUBLE
67960: LD_VAR 0 7
67964: DEC
67965: ST_TO_ADDR
67966: LD_VAR 0 10
67970: PUSH
67971: FOR_TO
67972: IFFALSE 68049
// begin if not ValidHex ( _x , _y ) then
67974: LD_VAR 0 5
67978: PPUSH
67979: LD_VAR 0 6
67983: PPUSH
67984: CALL_OW 488
67988: NOT
67989: IFFALSE 67993
// continue ;
67991: GO 67971
// if GetResourceTypeXY ( _x , _y ) then
67993: LD_VAR 0 5
67997: PPUSH
67998: LD_VAR 0 6
68002: PPUSH
68003: CALL_OW 283
68007: IFFALSE 68047
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68009: LD_ADDR_VAR 0 4
68013: PUSH
68014: LD_VAR 0 4
68018: PPUSH
68019: LD_VAR 0 4
68023: PUSH
68024: LD_INT 1
68026: PLUS
68027: PPUSH
68028: LD_VAR 0 5
68032: PUSH
68033: LD_VAR 0 6
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PPUSH
68042: CALL_OW 1
68046: ST_TO_ADDR
// end ;
68047: GO 67971
68049: POP
68050: POP
68051: GO 67951
68053: POP
68054: POP
// end ;
68055: LD_VAR 0 4
68059: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
68060: LD_INT 0
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
68066: PPUSH
68067: PPUSH
// if not units then
68068: LD_VAR 0 1
68072: NOT
68073: IFFALSE 68077
// exit ;
68075: GO 68478
// result := UnitFilter ( units , [ f_ok ] ) ;
68077: LD_ADDR_VAR 0 3
68081: PUSH
68082: LD_VAR 0 1
68086: PPUSH
68087: LD_INT 50
68089: PUSH
68090: EMPTY
68091: LIST
68092: PPUSH
68093: CALL_OW 72
68097: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68098: LD_ADDR_VAR 0 7
68102: PUSH
68103: LD_VAR 0 1
68107: PUSH
68108: LD_INT 1
68110: ARRAY
68111: PPUSH
68112: CALL_OW 255
68116: ST_TO_ADDR
// if not result then
68117: LD_VAR 0 3
68121: NOT
68122: IFFALSE 68126
// exit ;
68124: GO 68478
// for i in result do
68126: LD_ADDR_VAR 0 4
68130: PUSH
68131: LD_VAR 0 3
68135: PUSH
68136: FOR_IN
68137: IFFALSE 68476
// begin tag := GetTag ( i ) + 1 ;
68139: LD_ADDR_VAR 0 8
68143: PUSH
68144: LD_VAR 0 4
68148: PPUSH
68149: CALL_OW 110
68153: PUSH
68154: LD_INT 1
68156: PLUS
68157: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68158: LD_ADDR_VAR 0 6
68162: PUSH
68163: LD_VAR 0 4
68167: PPUSH
68168: CALL_OW 250
68172: PPUSH
68173: LD_VAR 0 4
68177: PPUSH
68178: CALL_OW 251
68182: PPUSH
68183: LD_INT 6
68185: PPUSH
68186: CALL 67802 0 3
68190: ST_TO_ADDR
// if cr then
68191: LD_VAR 0 6
68195: IFFALSE 68234
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68197: LD_VAR 0 4
68201: PPUSH
68202: LD_VAR 0 6
68206: PUSH
68207: LD_INT 1
68209: ARRAY
68210: PUSH
68211: LD_INT 1
68213: ARRAY
68214: PPUSH
68215: LD_VAR 0 6
68219: PUSH
68220: LD_INT 1
68222: ARRAY
68223: PUSH
68224: LD_INT 2
68226: ARRAY
68227: PPUSH
68228: CALL_OW 116
68232: GO 68474
// if path > tag then
68234: LD_VAR 0 2
68238: PUSH
68239: LD_VAR 0 8
68243: GREATER
68244: IFFALSE 68422
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
68246: LD_ADDR_VAR 0 5
68250: PUSH
68251: LD_INT 81
68253: PUSH
68254: LD_VAR 0 7
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 91
68265: PUSH
68266: LD_VAR 0 4
68270: PUSH
68271: LD_INT 12
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: LIST
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PPUSH
68283: CALL_OW 69
68287: ST_TO_ADDR
// if enemy then
68288: LD_VAR 0 5
68292: IFFALSE 68320
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68294: LD_VAR 0 4
68298: PPUSH
68299: LD_VAR 0 5
68303: PPUSH
68304: LD_VAR 0 4
68308: PPUSH
68309: CALL_OW 74
68313: PPUSH
68314: CALL_OW 115
68318: GO 68420
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68320: LD_VAR 0 4
68324: PPUSH
68325: LD_VAR 0 2
68329: PUSH
68330: LD_VAR 0 8
68334: ARRAY
68335: PUSH
68336: LD_INT 1
68338: ARRAY
68339: PPUSH
68340: LD_VAR 0 2
68344: PUSH
68345: LD_VAR 0 8
68349: ARRAY
68350: PUSH
68351: LD_INT 2
68353: ARRAY
68354: PPUSH
68355: CALL_OW 297
68359: PUSH
68360: LD_INT 6
68362: GREATER
68363: IFFALSE 68406
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68365: LD_VAR 0 4
68369: PPUSH
68370: LD_VAR 0 2
68374: PUSH
68375: LD_VAR 0 8
68379: ARRAY
68380: PUSH
68381: LD_INT 1
68383: ARRAY
68384: PPUSH
68385: LD_VAR 0 2
68389: PUSH
68390: LD_VAR 0 8
68394: ARRAY
68395: PUSH
68396: LD_INT 2
68398: ARRAY
68399: PPUSH
68400: CALL_OW 114
68404: GO 68420
// SetTag ( i , tag ) ;
68406: LD_VAR 0 4
68410: PPUSH
68411: LD_VAR 0 8
68415: PPUSH
68416: CALL_OW 109
// end else
68420: GO 68474
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68422: LD_ADDR_VAR 0 5
68426: PUSH
68427: LD_INT 81
68429: PUSH
68430: LD_VAR 0 7
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PPUSH
68439: CALL_OW 69
68443: ST_TO_ADDR
// if enemy then
68444: LD_VAR 0 5
68448: IFFALSE 68474
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68450: LD_VAR 0 4
68454: PPUSH
68455: LD_VAR 0 5
68459: PPUSH
68460: LD_VAR 0 4
68464: PPUSH
68465: CALL_OW 74
68469: PPUSH
68470: CALL_OW 115
// end ; end ;
68474: GO 68136
68476: POP
68477: POP
// end ; end_of_file
68478: LD_VAR 0 3
68482: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68483: LD_VAR 0 1
68487: PUSH
68488: LD_INT 200
68490: DOUBLE
68491: GREATEREQUAL
68492: IFFALSE 68500
68494: LD_INT 299
68496: DOUBLE
68497: LESSEQUAL
68498: IFTRUE 68502
68500: GO 68534
68502: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68503: LD_VAR 0 1
68507: PPUSH
68508: LD_VAR 0 2
68512: PPUSH
68513: LD_VAR 0 3
68517: PPUSH
68518: LD_VAR 0 4
68522: PPUSH
68523: LD_VAR 0 5
68527: PPUSH
68528: CALL 25045 0 5
68532: GO 68611
68534: LD_INT 300
68536: DOUBLE
68537: GREATEREQUAL
68538: IFFALSE 68546
68540: LD_INT 399
68542: DOUBLE
68543: LESSEQUAL
68544: IFTRUE 68548
68546: GO 68610
68548: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68549: LD_VAR 0 1
68553: PPUSH
68554: LD_VAR 0 2
68558: PPUSH
68559: LD_VAR 0 3
68563: PPUSH
68564: LD_VAR 0 4
68568: PPUSH
68569: LD_VAR 0 5
68573: PPUSH
68574: LD_VAR 0 6
68578: PPUSH
68579: LD_VAR 0 7
68583: PPUSH
68584: LD_VAR 0 8
68588: PPUSH
68589: LD_VAR 0 9
68593: PPUSH
68594: LD_VAR 0 10
68598: PPUSH
68599: LD_VAR 0 11
68603: PPUSH
68604: CALL 22943 0 11
68608: GO 68611
68610: POP
// end ;
68611: PPOPN 11
68613: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68614: LD_VAR 0 1
68618: PPUSH
68619: LD_VAR 0 2
68623: PPUSH
68624: LD_VAR 0 3
68628: PPUSH
68629: LD_VAR 0 4
68633: PPUSH
68634: LD_VAR 0 5
68638: PPUSH
68639: CALL 25037 0 5
// end ; end_of_file
68643: PPOPN 5
68645: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68646: LD_VAR 0 1
68650: PPUSH
68651: LD_VAR 0 2
68655: PPUSH
68656: LD_VAR 0 3
68660: PPUSH
68661: LD_VAR 0 4
68665: PPUSH
68666: LD_VAR 0 5
68670: PPUSH
68671: LD_VAR 0 6
68675: PPUSH
68676: CALL 11138 0 6
// end ;
68680: PPOPN 6
68682: END
