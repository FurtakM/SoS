// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 24302 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 24400 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 24408 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_miner := 81 ;
10973: LD_ADDR_EXP 21
10977: PUSH
10978: LD_INT 81
10980: ST_TO_ADDR
// ar_crane := 88 ;
10981: LD_ADDR_EXP 20
10985: PUSH
10986: LD_INT 88
10988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10989: LD_ADDR_EXP 15
10993: PUSH
10994: LD_INT 89
10996: ST_TO_ADDR
// us_hack := 99 ;
10997: LD_ADDR_EXP 16
11001: PUSH
11002: LD_INT 99
11004: ST_TO_ADDR
// us_artillery := 97 ;
11005: LD_ADDR_EXP 17
11009: PUSH
11010: LD_INT 97
11012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11013: LD_ADDR_EXP 18
11017: PUSH
11018: LD_INT 91
11020: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11021: LD_ADDR_EXP 19
11025: PUSH
11026: LD_INT 92
11028: ST_TO_ADDR
// ru_radar := 98 ;
11029: LD_ADDR_EXP 14
11033: PUSH
11034: LD_INT 98
11036: ST_TO_ADDR
// tech_Artillery := 80 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 80
11044: ST_TO_ADDR
// tech_RadMat := 81 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 81
11052: ST_TO_ADDR
// tech_BasicTools := 82 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 82
11060: ST_TO_ADDR
// tech_Cargo := 83 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 83
11068: ST_TO_ADDR
// tech_Track := 84 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 84
11076: ST_TO_ADDR
// tech_Crane := 85 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 85
11084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 86
11092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11093: LD_ADDR_EXP 29
11097: PUSH
11098: LD_INT 87
11100: ST_TO_ADDR
// class_mastodont := 31 ;
11101: LD_ADDR_EXP 30
11105: PUSH
11106: LD_INT 31
11108: ST_TO_ADDR
// class_horse := 21 ;
11109: LD_ADDR_EXP 31
11113: PUSH
11114: LD_INT 21
11116: ST_TO_ADDR
// end ;
11117: LD_VAR 0 1
11121: RET
// every 1 do
11122: GO 11124
11124: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11125: CALL 10970 0 0
11129: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11130: LD_INT 0
11132: PPUSH
// if p2 = 100 then
11133: LD_VAR 0 2
11137: PUSH
11138: LD_INT 100
11140: EQUAL
11141: IFFALSE 12090
// begin if not StreamModeActive then
11143: LD_EXP 32
11147: NOT
11148: IFFALSE 11158
// StreamModeActive := true ;
11150: LD_ADDR_EXP 32
11154: PUSH
11155: LD_INT 1
11157: ST_TO_ADDR
// if p3 = 0 then
11158: LD_VAR 0 3
11162: PUSH
11163: LD_INT 0
11165: EQUAL
11166: IFFALSE 11172
// InitStreamMode ;
11168: CALL 12250 0 0
// if p3 = 1 then
11172: LD_VAR 0 3
11176: PUSH
11177: LD_INT 1
11179: EQUAL
11180: IFFALSE 11190
// sRocket := true ;
11182: LD_ADDR_EXP 37
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 2 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 2
11197: EQUAL
11198: IFFALSE 11208
// sSpeed := true ;
11200: LD_ADDR_EXP 36
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 3 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 3
11215: EQUAL
11216: IFFALSE 11226
// sEngine := true ;
11218: LD_ADDR_EXP 38
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 4 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 4
11233: EQUAL
11234: IFFALSE 11244
// sSpec := true ;
11236: LD_ADDR_EXP 35
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// if p3 = 5 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 5
11251: EQUAL
11252: IFFALSE 11262
// sLevel := true ;
11254: LD_ADDR_EXP 39
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 6 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 6
11269: EQUAL
11270: IFFALSE 11280
// sArmoury := true ;
11272: LD_ADDR_EXP 40
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if p3 = 7 then
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 7
11287: EQUAL
11288: IFFALSE 11298
// sRadar := true ;
11290: LD_ADDR_EXP 41
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// if p3 = 8 then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_INT 8
11305: EQUAL
11306: IFFALSE 11316
// sBunker := true ;
11308: LD_ADDR_EXP 42
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 9 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 9
11323: EQUAL
11324: IFFALSE 11334
// sHack := true ;
11326: LD_ADDR_EXP 43
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// if p3 = 10 then
11334: LD_VAR 0 3
11338: PUSH
11339: LD_INT 10
11341: EQUAL
11342: IFFALSE 11352
// sFire := true ;
11344: LD_ADDR_EXP 44
11348: PUSH
11349: LD_INT 1
11351: ST_TO_ADDR
// if p3 = 11 then
11352: LD_VAR 0 3
11356: PUSH
11357: LD_INT 11
11359: EQUAL
11360: IFFALSE 11370
// sRefresh := true ;
11362: LD_ADDR_EXP 45
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// if p3 = 12 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 12
11377: EQUAL
11378: IFFALSE 11388
// sExp := true ;
11380: LD_ADDR_EXP 46
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 13 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 13
11395: EQUAL
11396: IFFALSE 11406
// sDepot := true ;
11398: LD_ADDR_EXP 47
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 14 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 14
11413: EQUAL
11414: IFFALSE 11424
// sFlag := true ;
11416: LD_ADDR_EXP 48
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 15 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 15
11431: EQUAL
11432: IFFALSE 11442
// sKamikadze := true ;
11434: LD_ADDR_EXP 56
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 16 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 16
11449: EQUAL
11450: IFFALSE 11460
// sTroll := true ;
11452: LD_ADDR_EXP 57
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 17 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 17
11467: EQUAL
11468: IFFALSE 11478
// sSlow := true ;
11470: LD_ADDR_EXP 58
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 18 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 18
11485: EQUAL
11486: IFFALSE 11496
// sLack := true ;
11488: LD_ADDR_EXP 59
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 19 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 19
11503: EQUAL
11504: IFFALSE 11514
// sTank := true ;
11506: LD_ADDR_EXP 61
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 20 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 20
11521: EQUAL
11522: IFFALSE 11532
// sRemote := true ;
11524: LD_ADDR_EXP 62
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 21 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 21
11539: EQUAL
11540: IFFALSE 11550
// sPowell := true ;
11542: LD_ADDR_EXP 63
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 22 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 22
11557: EQUAL
11558: IFFALSE 11568
// sTeleport := true ;
11560: LD_ADDR_EXP 66
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 23 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 23
11575: EQUAL
11576: IFFALSE 11586
// sOilTower := true ;
11578: LD_ADDR_EXP 68
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 24 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 24
11593: EQUAL
11594: IFFALSE 11604
// sShovel := true ;
11596: LD_ADDR_EXP 69
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// if p3 = 25 then
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 25
11611: EQUAL
11612: IFFALSE 11622
// sSheik := true ;
11614: LD_ADDR_EXP 70
11618: PUSH
11619: LD_INT 1
11621: ST_TO_ADDR
// if p3 = 26 then
11622: LD_VAR 0 3
11626: PUSH
11627: LD_INT 26
11629: EQUAL
11630: IFFALSE 11640
// sEarthquake := true ;
11632: LD_ADDR_EXP 72
11636: PUSH
11637: LD_INT 1
11639: ST_TO_ADDR
// if p3 = 27 then
11640: LD_VAR 0 3
11644: PUSH
11645: LD_INT 27
11647: EQUAL
11648: IFFALSE 11658
// sAI := true ;
11650: LD_ADDR_EXP 73
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// if p3 = 28 then
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 28
11665: EQUAL
11666: IFFALSE 11676
// sCargo := true ;
11668: LD_ADDR_EXP 76
11672: PUSH
11673: LD_INT 1
11675: ST_TO_ADDR
// if p3 = 29 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 29
11683: EQUAL
11684: IFFALSE 11694
// sDLaser := true ;
11686: LD_ADDR_EXP 77
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// if p3 = 30 then
11694: LD_VAR 0 3
11698: PUSH
11699: LD_INT 30
11701: EQUAL
11702: IFFALSE 11712
// sExchange := true ;
11704: LD_ADDR_EXP 78
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if p3 = 31 then
11712: LD_VAR 0 3
11716: PUSH
11717: LD_INT 31
11719: EQUAL
11720: IFFALSE 11730
// sFac := true ;
11722: LD_ADDR_EXP 79
11726: PUSH
11727: LD_INT 1
11729: ST_TO_ADDR
// if p3 = 32 then
11730: LD_VAR 0 3
11734: PUSH
11735: LD_INT 32
11737: EQUAL
11738: IFFALSE 11748
// sPower := true ;
11740: LD_ADDR_EXP 80
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
// if p3 = 33 then
11748: LD_VAR 0 3
11752: PUSH
11753: LD_INT 33
11755: EQUAL
11756: IFFALSE 11766
// sRandom := true ;
11758: LD_ADDR_EXP 81
11762: PUSH
11763: LD_INT 1
11765: ST_TO_ADDR
// if p3 = 34 then
11766: LD_VAR 0 3
11770: PUSH
11771: LD_INT 34
11773: EQUAL
11774: IFFALSE 11784
// sShield := true ;
11776: LD_ADDR_EXP 82
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// if p3 = 35 then
11784: LD_VAR 0 3
11788: PUSH
11789: LD_INT 35
11791: EQUAL
11792: IFFALSE 11802
// sTime := true ;
11794: LD_ADDR_EXP 83
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// if p3 = 36 then
11802: LD_VAR 0 3
11806: PUSH
11807: LD_INT 36
11809: EQUAL
11810: IFFALSE 11820
// sTools := true ;
11812: LD_ADDR_EXP 84
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// if p3 = 101 then
11820: LD_VAR 0 3
11824: PUSH
11825: LD_INT 101
11827: EQUAL
11828: IFFALSE 11838
// sSold := true ;
11830: LD_ADDR_EXP 49
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// if p3 = 102 then
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 102
11845: EQUAL
11846: IFFALSE 11856
// sDiff := true ;
11848: LD_ADDR_EXP 50
11852: PUSH
11853: LD_INT 1
11855: ST_TO_ADDR
// if p3 = 103 then
11856: LD_VAR 0 3
11860: PUSH
11861: LD_INT 103
11863: EQUAL
11864: IFFALSE 11874
// sFog := true ;
11866: LD_ADDR_EXP 53
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if p3 = 104 then
11874: LD_VAR 0 3
11878: PUSH
11879: LD_INT 104
11881: EQUAL
11882: IFFALSE 11892
// sReset := true ;
11884: LD_ADDR_EXP 54
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// if p3 = 105 then
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 105
11899: EQUAL
11900: IFFALSE 11910
// sSun := true ;
11902: LD_ADDR_EXP 55
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// if p3 = 106 then
11910: LD_VAR 0 3
11914: PUSH
11915: LD_INT 106
11917: EQUAL
11918: IFFALSE 11928
// sTiger := true ;
11920: LD_ADDR_EXP 51
11924: PUSH
11925: LD_INT 1
11927: ST_TO_ADDR
// if p3 = 107 then
11928: LD_VAR 0 3
11932: PUSH
11933: LD_INT 107
11935: EQUAL
11936: IFFALSE 11946
// sBomb := true ;
11938: LD_ADDR_EXP 52
11942: PUSH
11943: LD_INT 1
11945: ST_TO_ADDR
// if p3 = 108 then
11946: LD_VAR 0 3
11950: PUSH
11951: LD_INT 108
11953: EQUAL
11954: IFFALSE 11964
// sWound := true ;
11956: LD_ADDR_EXP 60
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// if p3 = 109 then
11964: LD_VAR 0 3
11968: PUSH
11969: LD_INT 109
11971: EQUAL
11972: IFFALSE 11982
// sBetray := true ;
11974: LD_ADDR_EXP 64
11978: PUSH
11979: LD_INT 1
11981: ST_TO_ADDR
// if p3 = 110 then
11982: LD_VAR 0 3
11986: PUSH
11987: LD_INT 110
11989: EQUAL
11990: IFFALSE 12000
// sContamin := true ;
11992: LD_ADDR_EXP 65
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// if p3 = 111 then
12000: LD_VAR 0 3
12004: PUSH
12005: LD_INT 111
12007: EQUAL
12008: IFFALSE 12018
// sOil := true ;
12010: LD_ADDR_EXP 67
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// if p3 = 112 then
12018: LD_VAR 0 3
12022: PUSH
12023: LD_INT 112
12025: EQUAL
12026: IFFALSE 12036
// sStu := true ;
12028: LD_ADDR_EXP 71
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if p3 = 113 then
12036: LD_VAR 0 3
12040: PUSH
12041: LD_INT 113
12043: EQUAL
12044: IFFALSE 12054
// sBazooka := true ;
12046: LD_ADDR_EXP 74
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// if p3 = 114 then
12054: LD_VAR 0 3
12058: PUSH
12059: LD_INT 114
12061: EQUAL
12062: IFFALSE 12072
// sMortar := true ;
12064: LD_ADDR_EXP 75
12068: PUSH
12069: LD_INT 1
12071: ST_TO_ADDR
// if p3 = 115 then
12072: LD_VAR 0 3
12076: PUSH
12077: LD_INT 115
12079: EQUAL
12080: IFFALSE 12090
// sRanger := true ;
12082: LD_ADDR_EXP 85
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// end ; if p2 = 101 then
12090: LD_VAR 0 2
12094: PUSH
12095: LD_INT 101
12097: EQUAL
12098: IFFALSE 12226
// begin case p3 of 1 :
12100: LD_VAR 0 3
12104: PUSH
12105: LD_INT 1
12107: DOUBLE
12108: EQUAL
12109: IFTRUE 12113
12111: GO 12120
12113: POP
// hHackUnlimitedResources ; 2 :
12114: CALL 23263 0 0
12118: GO 12226
12120: LD_INT 2
12122: DOUBLE
12123: EQUAL
12124: IFTRUE 12128
12126: GO 12135
12128: POP
// hHackSetLevel10 ; 3 :
12129: CALL 23396 0 0
12133: GO 12226
12135: LD_INT 3
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12150
12143: POP
// hHackSetLevel10YourUnits ; 4 :
12144: CALL 23481 0 0
12148: GO 12226
12150: LD_INT 4
12152: DOUBLE
12153: EQUAL
12154: IFTRUE 12158
12156: GO 12165
12158: POP
// hHackInvincible ; 5 :
12159: CALL 23929 0 0
12163: GO 12226
12165: LD_INT 5
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12180
12173: POP
// hHackInvisible ; 6 :
12174: CALL 24040 0 0
12178: GO 12226
12180: LD_INT 6
12182: DOUBLE
12183: EQUAL
12184: IFTRUE 12188
12186: GO 12195
12188: POP
// hHackChangeYourSide ; 7 :
12189: CALL 24097 0 0
12193: GO 12226
12195: LD_INT 7
12197: DOUBLE
12198: EQUAL
12199: IFTRUE 12203
12201: GO 12210
12203: POP
// hHackChangeUnitSide ; 8 :
12204: CALL 24139 0 0
12208: GO 12226
12210: LD_INT 8
12212: DOUBLE
12213: EQUAL
12214: IFTRUE 12218
12216: GO 12225
12218: POP
// hHackFog ; end ;
12219: CALL 24240 0 0
12223: GO 12226
12225: POP
// end ; end ;
12226: LD_VAR 0 7
12230: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12231: GO 12233
12233: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12234: LD_STRING initStreamRollete();
12236: PPUSH
12237: CALL_OW 559
// InitStreamMode ;
12241: CALL 12250 0 0
// DefineStreamItems ( ) ;
12245: CALL 12690 0 0
// end ;
12249: END
// function InitStreamMode ; begin
12250: LD_INT 0
12252: PPUSH
// streamModeActive := false ;
12253: LD_ADDR_EXP 32
12257: PUSH
12258: LD_INT 0
12260: ST_TO_ADDR
// normalCounter := 36 ;
12261: LD_ADDR_EXP 33
12265: PUSH
12266: LD_INT 36
12268: ST_TO_ADDR
// hardcoreCounter := 16 ;
12269: LD_ADDR_EXP 34
12273: PUSH
12274: LD_INT 16
12276: ST_TO_ADDR
// sRocket := false ;
12277: LD_ADDR_EXP 37
12281: PUSH
12282: LD_INT 0
12284: ST_TO_ADDR
// sSpeed := false ;
12285: LD_ADDR_EXP 36
12289: PUSH
12290: LD_INT 0
12292: ST_TO_ADDR
// sEngine := false ;
12293: LD_ADDR_EXP 38
12297: PUSH
12298: LD_INT 0
12300: ST_TO_ADDR
// sSpec := false ;
12301: LD_ADDR_EXP 35
12305: PUSH
12306: LD_INT 0
12308: ST_TO_ADDR
// sLevel := false ;
12309: LD_ADDR_EXP 39
12313: PUSH
12314: LD_INT 0
12316: ST_TO_ADDR
// sArmoury := false ;
12317: LD_ADDR_EXP 40
12321: PUSH
12322: LD_INT 0
12324: ST_TO_ADDR
// sRadar := false ;
12325: LD_ADDR_EXP 41
12329: PUSH
12330: LD_INT 0
12332: ST_TO_ADDR
// sBunker := false ;
12333: LD_ADDR_EXP 42
12337: PUSH
12338: LD_INT 0
12340: ST_TO_ADDR
// sHack := false ;
12341: LD_ADDR_EXP 43
12345: PUSH
12346: LD_INT 0
12348: ST_TO_ADDR
// sFire := false ;
12349: LD_ADDR_EXP 44
12353: PUSH
12354: LD_INT 0
12356: ST_TO_ADDR
// sRefresh := false ;
12357: LD_ADDR_EXP 45
12361: PUSH
12362: LD_INT 0
12364: ST_TO_ADDR
// sExp := false ;
12365: LD_ADDR_EXP 46
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// sDepot := false ;
12373: LD_ADDR_EXP 47
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// sFlag := false ;
12381: LD_ADDR_EXP 48
12385: PUSH
12386: LD_INT 0
12388: ST_TO_ADDR
// sKamikadze := false ;
12389: LD_ADDR_EXP 56
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// sTroll := false ;
12397: LD_ADDR_EXP 57
12401: PUSH
12402: LD_INT 0
12404: ST_TO_ADDR
// sSlow := false ;
12405: LD_ADDR_EXP 58
12409: PUSH
12410: LD_INT 0
12412: ST_TO_ADDR
// sLack := false ;
12413: LD_ADDR_EXP 59
12417: PUSH
12418: LD_INT 0
12420: ST_TO_ADDR
// sTank := false ;
12421: LD_ADDR_EXP 61
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// sRemote := false ;
12429: LD_ADDR_EXP 62
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// sPowell := false ;
12437: LD_ADDR_EXP 63
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// sTeleport := false ;
12445: LD_ADDR_EXP 66
12449: PUSH
12450: LD_INT 0
12452: ST_TO_ADDR
// sOilTower := false ;
12453: LD_ADDR_EXP 68
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
// sShovel := false ;
12461: LD_ADDR_EXP 69
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// sSheik := false ;
12469: LD_ADDR_EXP 70
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// sEarthquake := false ;
12477: LD_ADDR_EXP 72
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// sAI := false ;
12485: LD_ADDR_EXP 73
12489: PUSH
12490: LD_INT 0
12492: ST_TO_ADDR
// sCargo := false ;
12493: LD_ADDR_EXP 76
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// sDLaser := false ;
12501: LD_ADDR_EXP 77
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// sExchange := false ;
12509: LD_ADDR_EXP 78
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// sFac := false ;
12517: LD_ADDR_EXP 79
12521: PUSH
12522: LD_INT 0
12524: ST_TO_ADDR
// sPower := false ;
12525: LD_ADDR_EXP 80
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// sRandom := false ;
12533: LD_ADDR_EXP 81
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// sShield := false ;
12541: LD_ADDR_EXP 82
12545: PUSH
12546: LD_INT 0
12548: ST_TO_ADDR
// sTime := false ;
12549: LD_ADDR_EXP 83
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// sTools := false ;
12557: LD_ADDR_EXP 84
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sSold := false ;
12565: LD_ADDR_EXP 49
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// sDiff := false ;
12573: LD_ADDR_EXP 50
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// sFog := false ;
12581: LD_ADDR_EXP 53
12585: PUSH
12586: LD_INT 0
12588: ST_TO_ADDR
// sReset := false ;
12589: LD_ADDR_EXP 54
12593: PUSH
12594: LD_INT 0
12596: ST_TO_ADDR
// sSun := false ;
12597: LD_ADDR_EXP 55
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sTiger := false ;
12605: LD_ADDR_EXP 51
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sBomb := false ;
12613: LD_ADDR_EXP 52
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sWound := false ;
12621: LD_ADDR_EXP 60
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sBetray := false ;
12629: LD_ADDR_EXP 64
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sContamin := false ;
12637: LD_ADDR_EXP 65
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sOil := false ;
12645: LD_ADDR_EXP 67
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sStu := false ;
12653: LD_ADDR_EXP 71
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sBazooka := false ;
12661: LD_ADDR_EXP 74
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sMortar := false ;
12669: LD_ADDR_EXP 75
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sRanger := false ;
12677: LD_ADDR_EXP 85
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// end ;
12685: LD_VAR 0 1
12689: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
12694: PPUSH
12695: PPUSH
12696: PPUSH
// result := [ ] ;
12697: LD_ADDR_VAR 0 1
12701: PUSH
12702: EMPTY
12703: ST_TO_ADDR
// if campaign_id = 1 then
12704: LD_OWVAR 69
12708: PUSH
12709: LD_INT 1
12711: EQUAL
12712: IFFALSE 15650
// begin case mission_number of 1 :
12714: LD_OWVAR 70
12718: PUSH
12719: LD_INT 1
12721: DOUBLE
12722: EQUAL
12723: IFTRUE 12727
12725: GO 12791
12727: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12728: LD_ADDR_VAR 0 1
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 4
12738: PUSH
12739: LD_INT 11
12741: PUSH
12742: LD_INT 12
12744: PUSH
12745: LD_INT 15
12747: PUSH
12748: LD_INT 16
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 23
12756: PUSH
12757: LD_INT 26
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 101
12773: PUSH
12774: LD_INT 102
12776: PUSH
12777: LD_INT 106
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: ST_TO_ADDR
12789: GO 15648
12791: LD_INT 2
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12871
12799: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12800: LD_ADDR_VAR 0 1
12804: PUSH
12805: LD_INT 2
12807: PUSH
12808: LD_INT 4
12810: PUSH
12811: LD_INT 11
12813: PUSH
12814: LD_INT 12
12816: PUSH
12817: LD_INT 15
12819: PUSH
12820: LD_INT 16
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 23
12828: PUSH
12829: LD_INT 26
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 101
12845: PUSH
12846: LD_INT 102
12848: PUSH
12849: LD_INT 105
12851: PUSH
12852: LD_INT 106
12854: PUSH
12855: LD_INT 108
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: ST_TO_ADDR
12869: GO 15648
12871: LD_INT 3
12873: DOUBLE
12874: EQUAL
12875: IFTRUE 12879
12877: GO 12955
12879: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12880: LD_ADDR_VAR 0 1
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: LD_INT 4
12890: PUSH
12891: LD_INT 5
12893: PUSH
12894: LD_INT 11
12896: PUSH
12897: LD_INT 12
12899: PUSH
12900: LD_INT 15
12902: PUSH
12903: LD_INT 16
12905: PUSH
12906: LD_INT 22
12908: PUSH
12909: LD_INT 26
12911: PUSH
12912: LD_INT 36
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 101
12929: PUSH
12930: LD_INT 102
12932: PUSH
12933: LD_INT 105
12935: PUSH
12936: LD_INT 106
12938: PUSH
12939: LD_INT 108
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: ST_TO_ADDR
12953: GO 15648
12955: LD_INT 4
12957: DOUBLE
12958: EQUAL
12959: IFTRUE 12963
12961: GO 13047
12963: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12964: LD_ADDR_VAR 0 1
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: LD_INT 4
12974: PUSH
12975: LD_INT 5
12977: PUSH
12978: LD_INT 8
12980: PUSH
12981: LD_INT 11
12983: PUSH
12984: LD_INT 12
12986: PUSH
12987: LD_INT 15
12989: PUSH
12990: LD_INT 16
12992: PUSH
12993: LD_INT 22
12995: PUSH
12996: LD_INT 23
12998: PUSH
12999: LD_INT 26
13001: PUSH
13002: LD_INT 36
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 101
13021: PUSH
13022: LD_INT 102
13024: PUSH
13025: LD_INT 105
13027: PUSH
13028: LD_INT 106
13030: PUSH
13031: LD_INT 108
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: ST_TO_ADDR
13045: GO 15648
13047: LD_INT 5
13049: DOUBLE
13050: EQUAL
13051: IFTRUE 13055
13053: GO 13155
13055: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13056: LD_ADDR_VAR 0 1
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 8
13075: PUSH
13076: LD_INT 11
13078: PUSH
13079: LD_INT 12
13081: PUSH
13082: LD_INT 15
13084: PUSH
13085: LD_INT 16
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_INT 23
13093: PUSH
13094: LD_INT 25
13096: PUSH
13097: LD_INT 26
13099: PUSH
13100: LD_INT 36
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 101
13121: PUSH
13122: LD_INT 102
13124: PUSH
13125: LD_INT 105
13127: PUSH
13128: LD_INT 106
13130: PUSH
13131: LD_INT 108
13133: PUSH
13134: LD_INT 109
13136: PUSH
13137: LD_INT 112
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: ST_TO_ADDR
13153: GO 15648
13155: LD_INT 6
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13283
13163: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: LD_INT 4
13174: PUSH
13175: LD_INT 5
13177: PUSH
13178: LD_INT 6
13180: PUSH
13181: LD_INT 8
13183: PUSH
13184: LD_INT 11
13186: PUSH
13187: LD_INT 12
13189: PUSH
13190: LD_INT 15
13192: PUSH
13193: LD_INT 16
13195: PUSH
13196: LD_INT 20
13198: PUSH
13199: LD_INT 21
13201: PUSH
13202: LD_INT 22
13204: PUSH
13205: LD_INT 23
13207: PUSH
13208: LD_INT 25
13210: PUSH
13211: LD_INT 26
13213: PUSH
13214: LD_INT 30
13216: PUSH
13217: LD_INT 31
13219: PUSH
13220: LD_INT 32
13222: PUSH
13223: LD_INT 36
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 101
13249: PUSH
13250: LD_INT 102
13252: PUSH
13253: LD_INT 105
13255: PUSH
13256: LD_INT 106
13258: PUSH
13259: LD_INT 108
13261: PUSH
13262: LD_INT 109
13264: PUSH
13265: LD_INT 112
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: ST_TO_ADDR
13281: GO 15648
13283: LD_INT 7
13285: DOUBLE
13286: EQUAL
13287: IFTRUE 13291
13289: GO 13391
13291: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13292: LD_ADDR_VAR 0 1
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 4
13302: PUSH
13303: LD_INT 5
13305: PUSH
13306: LD_INT 7
13308: PUSH
13309: LD_INT 11
13311: PUSH
13312: LD_INT 12
13314: PUSH
13315: LD_INT 15
13317: PUSH
13318: LD_INT 16
13320: PUSH
13321: LD_INT 20
13323: PUSH
13324: LD_INT 21
13326: PUSH
13327: LD_INT 22
13329: PUSH
13330: LD_INT 23
13332: PUSH
13333: LD_INT 25
13335: PUSH
13336: LD_INT 26
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 101
13357: PUSH
13358: LD_INT 102
13360: PUSH
13361: LD_INT 103
13363: PUSH
13364: LD_INT 105
13366: PUSH
13367: LD_INT 106
13369: PUSH
13370: LD_INT 108
13372: PUSH
13373: LD_INT 112
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: ST_TO_ADDR
13389: GO 15648
13391: LD_INT 8
13393: DOUBLE
13394: EQUAL
13395: IFTRUE 13399
13397: GO 13527
13399: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13400: LD_ADDR_VAR 0 1
13404: PUSH
13405: LD_INT 2
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: LD_INT 6
13416: PUSH
13417: LD_INT 7
13419: PUSH
13420: LD_INT 8
13422: PUSH
13423: LD_INT 11
13425: PUSH
13426: LD_INT 12
13428: PUSH
13429: LD_INT 15
13431: PUSH
13432: LD_INT 16
13434: PUSH
13435: LD_INT 20
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_INT 23
13446: PUSH
13447: LD_INT 25
13449: PUSH
13450: LD_INT 26
13452: PUSH
13453: LD_INT 30
13455: PUSH
13456: LD_INT 31
13458: PUSH
13459: LD_INT 32
13461: PUSH
13462: LD_INT 36
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 101
13489: PUSH
13490: LD_INT 102
13492: PUSH
13493: LD_INT 103
13495: PUSH
13496: LD_INT 105
13498: PUSH
13499: LD_INT 106
13501: PUSH
13502: LD_INT 108
13504: PUSH
13505: LD_INT 109
13507: PUSH
13508: LD_INT 112
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: ST_TO_ADDR
13525: GO 15648
13527: LD_INT 9
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13671
13535: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: LD_INT 4
13546: PUSH
13547: LD_INT 5
13549: PUSH
13550: LD_INT 6
13552: PUSH
13553: LD_INT 7
13555: PUSH
13556: LD_INT 8
13558: PUSH
13559: LD_INT 11
13561: PUSH
13562: LD_INT 12
13564: PUSH
13565: LD_INT 15
13567: PUSH
13568: LD_INT 16
13570: PUSH
13571: LD_INT 20
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 22
13579: PUSH
13580: LD_INT 23
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 26
13588: PUSH
13589: LD_INT 28
13591: PUSH
13592: LD_INT 30
13594: PUSH
13595: LD_INT 31
13597: PUSH
13598: LD_INT 32
13600: PUSH
13601: LD_INT 36
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 101
13629: PUSH
13630: LD_INT 102
13632: PUSH
13633: LD_INT 103
13635: PUSH
13636: LD_INT 105
13638: PUSH
13639: LD_INT 106
13641: PUSH
13642: LD_INT 108
13644: PUSH
13645: LD_INT 109
13647: PUSH
13648: LD_INT 112
13650: PUSH
13651: LD_INT 114
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: ST_TO_ADDR
13669: GO 15648
13671: LD_INT 10
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13863
13679: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13680: LD_ADDR_VAR 0 1
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: LD_INT 4
13690: PUSH
13691: LD_INT 5
13693: PUSH
13694: LD_INT 6
13696: PUSH
13697: LD_INT 7
13699: PUSH
13700: LD_INT 8
13702: PUSH
13703: LD_INT 9
13705: PUSH
13706: LD_INT 10
13708: PUSH
13709: LD_INT 11
13711: PUSH
13712: LD_INT 12
13714: PUSH
13715: LD_INT 13
13717: PUSH
13718: LD_INT 14
13720: PUSH
13721: LD_INT 15
13723: PUSH
13724: LD_INT 16
13726: PUSH
13727: LD_INT 17
13729: PUSH
13730: LD_INT 18
13732: PUSH
13733: LD_INT 19
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 23
13747: PUSH
13748: LD_INT 24
13750: PUSH
13751: LD_INT 25
13753: PUSH
13754: LD_INT 26
13756: PUSH
13757: LD_INT 28
13759: PUSH
13760: LD_INT 30
13762: PUSH
13763: LD_INT 31
13765: PUSH
13766: LD_INT 32
13768: PUSH
13769: LD_INT 36
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 101
13805: PUSH
13806: LD_INT 102
13808: PUSH
13809: LD_INT 103
13811: PUSH
13812: LD_INT 104
13814: PUSH
13815: LD_INT 105
13817: PUSH
13818: LD_INT 106
13820: PUSH
13821: LD_INT 107
13823: PUSH
13824: LD_INT 108
13826: PUSH
13827: LD_INT 109
13829: PUSH
13830: LD_INT 110
13832: PUSH
13833: LD_INT 111
13835: PUSH
13836: LD_INT 112
13838: PUSH
13839: LD_INT 114
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: ST_TO_ADDR
13861: GO 15648
13863: LD_INT 11
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 14063
13871: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13872: LD_ADDR_VAR 0 1
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: LD_INT 3
13882: PUSH
13883: LD_INT 4
13885: PUSH
13886: LD_INT 5
13888: PUSH
13889: LD_INT 6
13891: PUSH
13892: LD_INT 7
13894: PUSH
13895: LD_INT 8
13897: PUSH
13898: LD_INT 9
13900: PUSH
13901: LD_INT 10
13903: PUSH
13904: LD_INT 11
13906: PUSH
13907: LD_INT 12
13909: PUSH
13910: LD_INT 13
13912: PUSH
13913: LD_INT 14
13915: PUSH
13916: LD_INT 15
13918: PUSH
13919: LD_INT 16
13921: PUSH
13922: LD_INT 17
13924: PUSH
13925: LD_INT 18
13927: PUSH
13928: LD_INT 19
13930: PUSH
13931: LD_INT 20
13933: PUSH
13934: LD_INT 21
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_INT 23
13942: PUSH
13943: LD_INT 24
13945: PUSH
13946: LD_INT 25
13948: PUSH
13949: LD_INT 26
13951: PUSH
13952: LD_INT 28
13954: PUSH
13955: LD_INT 30
13957: PUSH
13958: LD_INT 31
13960: PUSH
13961: LD_INT 32
13963: PUSH
13964: LD_INT 34
13966: PUSH
13967: LD_INT 36
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 101
14005: PUSH
14006: LD_INT 102
14008: PUSH
14009: LD_INT 103
14011: PUSH
14012: LD_INT 104
14014: PUSH
14015: LD_INT 105
14017: PUSH
14018: LD_INT 106
14020: PUSH
14021: LD_INT 107
14023: PUSH
14024: LD_INT 108
14026: PUSH
14027: LD_INT 109
14029: PUSH
14030: LD_INT 110
14032: PUSH
14033: LD_INT 111
14035: PUSH
14036: LD_INT 112
14038: PUSH
14039: LD_INT 114
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: ST_TO_ADDR
14061: GO 15648
14063: LD_INT 12
14065: DOUBLE
14066: EQUAL
14067: IFTRUE 14071
14069: GO 14279
14071: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14072: LD_ADDR_VAR 0 1
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: LD_INT 4
14088: PUSH
14089: LD_INT 5
14091: PUSH
14092: LD_INT 6
14094: PUSH
14095: LD_INT 7
14097: PUSH
14098: LD_INT 8
14100: PUSH
14101: LD_INT 9
14103: PUSH
14104: LD_INT 10
14106: PUSH
14107: LD_INT 11
14109: PUSH
14110: LD_INT 12
14112: PUSH
14113: LD_INT 13
14115: PUSH
14116: LD_INT 14
14118: PUSH
14119: LD_INT 15
14121: PUSH
14122: LD_INT 16
14124: PUSH
14125: LD_INT 17
14127: PUSH
14128: LD_INT 18
14130: PUSH
14131: LD_INT 19
14133: PUSH
14134: LD_INT 20
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 22
14142: PUSH
14143: LD_INT 23
14145: PUSH
14146: LD_INT 24
14148: PUSH
14149: LD_INT 25
14151: PUSH
14152: LD_INT 26
14154: PUSH
14155: LD_INT 27
14157: PUSH
14158: LD_INT 28
14160: PUSH
14161: LD_INT 30
14163: PUSH
14164: LD_INT 31
14166: PUSH
14167: LD_INT 32
14169: PUSH
14170: LD_INT 33
14172: PUSH
14173: LD_INT 34
14175: PUSH
14176: LD_INT 36
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 101
14217: PUSH
14218: LD_INT 102
14220: PUSH
14221: LD_INT 103
14223: PUSH
14224: LD_INT 104
14226: PUSH
14227: LD_INT 105
14229: PUSH
14230: LD_INT 106
14232: PUSH
14233: LD_INT 107
14235: PUSH
14236: LD_INT 108
14238: PUSH
14239: LD_INT 109
14241: PUSH
14242: LD_INT 110
14244: PUSH
14245: LD_INT 111
14247: PUSH
14248: LD_INT 112
14250: PUSH
14251: LD_INT 113
14253: PUSH
14254: LD_INT 114
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: ST_TO_ADDR
14277: GO 15648
14279: LD_INT 13
14281: DOUBLE
14282: EQUAL
14283: IFTRUE 14287
14285: GO 14483
14287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 4
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: LD_INT 8
14310: PUSH
14311: LD_INT 9
14313: PUSH
14314: LD_INT 10
14316: PUSH
14317: LD_INT 11
14319: PUSH
14320: LD_INT 12
14322: PUSH
14323: LD_INT 14
14325: PUSH
14326: LD_INT 15
14328: PUSH
14329: LD_INT 16
14331: PUSH
14332: LD_INT 17
14334: PUSH
14335: LD_INT 18
14337: PUSH
14338: LD_INT 19
14340: PUSH
14341: LD_INT 20
14343: PUSH
14344: LD_INT 21
14346: PUSH
14347: LD_INT 22
14349: PUSH
14350: LD_INT 23
14352: PUSH
14353: LD_INT 24
14355: PUSH
14356: LD_INT 25
14358: PUSH
14359: LD_INT 26
14361: PUSH
14362: LD_INT 27
14364: PUSH
14365: LD_INT 28
14367: PUSH
14368: LD_INT 30
14370: PUSH
14371: LD_INT 31
14373: PUSH
14374: LD_INT 32
14376: PUSH
14377: LD_INT 33
14379: PUSH
14380: LD_INT 34
14382: PUSH
14383: LD_INT 36
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 101
14421: PUSH
14422: LD_INT 102
14424: PUSH
14425: LD_INT 103
14427: PUSH
14428: LD_INT 104
14430: PUSH
14431: LD_INT 105
14433: PUSH
14434: LD_INT 106
14436: PUSH
14437: LD_INT 107
14439: PUSH
14440: LD_INT 108
14442: PUSH
14443: LD_INT 109
14445: PUSH
14446: LD_INT 110
14448: PUSH
14449: LD_INT 111
14451: PUSH
14452: LD_INT 112
14454: PUSH
14455: LD_INT 113
14457: PUSH
14458: LD_INT 114
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: ST_TO_ADDR
14481: GO 15648
14483: LD_INT 14
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14703
14491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14492: LD_ADDR_VAR 0 1
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: LD_INT 4
14508: PUSH
14509: LD_INT 5
14511: PUSH
14512: LD_INT 6
14514: PUSH
14515: LD_INT 7
14517: PUSH
14518: LD_INT 8
14520: PUSH
14521: LD_INT 9
14523: PUSH
14524: LD_INT 10
14526: PUSH
14527: LD_INT 11
14529: PUSH
14530: LD_INT 12
14532: PUSH
14533: LD_INT 13
14535: PUSH
14536: LD_INT 14
14538: PUSH
14539: LD_INT 15
14541: PUSH
14542: LD_INT 16
14544: PUSH
14545: LD_INT 17
14547: PUSH
14548: LD_INT 18
14550: PUSH
14551: LD_INT 19
14553: PUSH
14554: LD_INT 20
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 22
14562: PUSH
14563: LD_INT 23
14565: PUSH
14566: LD_INT 24
14568: PUSH
14569: LD_INT 25
14571: PUSH
14572: LD_INT 26
14574: PUSH
14575: LD_INT 27
14577: PUSH
14578: LD_INT 28
14580: PUSH
14581: LD_INT 29
14583: PUSH
14584: LD_INT 30
14586: PUSH
14587: LD_INT 31
14589: PUSH
14590: LD_INT 32
14592: PUSH
14593: LD_INT 33
14595: PUSH
14596: LD_INT 34
14598: PUSH
14599: LD_INT 36
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 101
14641: PUSH
14642: LD_INT 102
14644: PUSH
14645: LD_INT 103
14647: PUSH
14648: LD_INT 104
14650: PUSH
14651: LD_INT 105
14653: PUSH
14654: LD_INT 106
14656: PUSH
14657: LD_INT 107
14659: PUSH
14660: LD_INT 108
14662: PUSH
14663: LD_INT 109
14665: PUSH
14666: LD_INT 110
14668: PUSH
14669: LD_INT 111
14671: PUSH
14672: LD_INT 112
14674: PUSH
14675: LD_INT 113
14677: PUSH
14678: LD_INT 114
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: ST_TO_ADDR
14701: GO 15648
14703: LD_INT 15
14705: DOUBLE
14706: EQUAL
14707: IFTRUE 14711
14709: GO 14923
14711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14712: LD_ADDR_VAR 0 1
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: LD_INT 4
14728: PUSH
14729: LD_INT 5
14731: PUSH
14732: LD_INT 6
14734: PUSH
14735: LD_INT 7
14737: PUSH
14738: LD_INT 8
14740: PUSH
14741: LD_INT 9
14743: PUSH
14744: LD_INT 10
14746: PUSH
14747: LD_INT 11
14749: PUSH
14750: LD_INT 12
14752: PUSH
14753: LD_INT 13
14755: PUSH
14756: LD_INT 14
14758: PUSH
14759: LD_INT 15
14761: PUSH
14762: LD_INT 16
14764: PUSH
14765: LD_INT 17
14767: PUSH
14768: LD_INT 18
14770: PUSH
14771: LD_INT 19
14773: PUSH
14774: LD_INT 20
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 23
14785: PUSH
14786: LD_INT 24
14788: PUSH
14789: LD_INT 25
14791: PUSH
14792: LD_INT 26
14794: PUSH
14795: LD_INT 27
14797: PUSH
14798: LD_INT 28
14800: PUSH
14801: LD_INT 29
14803: PUSH
14804: LD_INT 30
14806: PUSH
14807: LD_INT 31
14809: PUSH
14810: LD_INT 32
14812: PUSH
14813: LD_INT 33
14815: PUSH
14816: LD_INT 34
14818: PUSH
14819: LD_INT 36
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 101
14861: PUSH
14862: LD_INT 102
14864: PUSH
14865: LD_INT 103
14867: PUSH
14868: LD_INT 104
14870: PUSH
14871: LD_INT 105
14873: PUSH
14874: LD_INT 106
14876: PUSH
14877: LD_INT 107
14879: PUSH
14880: LD_INT 108
14882: PUSH
14883: LD_INT 109
14885: PUSH
14886: LD_INT 110
14888: PUSH
14889: LD_INT 111
14891: PUSH
14892: LD_INT 112
14894: PUSH
14895: LD_INT 113
14897: PUSH
14898: LD_INT 114
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: ST_TO_ADDR
14921: GO 15648
14923: LD_INT 16
14925: DOUBLE
14926: EQUAL
14927: IFTRUE 14931
14929: GO 15055
14931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14932: LD_ADDR_VAR 0 1
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: LD_INT 5
14945: PUSH
14946: LD_INT 7
14948: PUSH
14949: LD_INT 11
14951: PUSH
14952: LD_INT 12
14954: PUSH
14955: LD_INT 15
14957: PUSH
14958: LD_INT 16
14960: PUSH
14961: LD_INT 20
14963: PUSH
14964: LD_INT 21
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_INT 23
14972: PUSH
14973: LD_INT 25
14975: PUSH
14976: LD_INT 26
14978: PUSH
14979: LD_INT 30
14981: PUSH
14982: LD_INT 31
14984: PUSH
14985: LD_INT 32
14987: PUSH
14988: LD_INT 33
14990: PUSH
14991: LD_INT 34
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 101
15017: PUSH
15018: LD_INT 102
15020: PUSH
15021: LD_INT 103
15023: PUSH
15024: LD_INT 106
15026: PUSH
15027: LD_INT 108
15029: PUSH
15030: LD_INT 112
15032: PUSH
15033: LD_INT 113
15035: PUSH
15036: LD_INT 114
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: ST_TO_ADDR
15053: GO 15648
15055: LD_INT 17
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15275
15063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15064: LD_ADDR_VAR 0 1
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: LD_INT 2
15074: PUSH
15075: LD_INT 3
15077: PUSH
15078: LD_INT 4
15080: PUSH
15081: LD_INT 5
15083: PUSH
15084: LD_INT 6
15086: PUSH
15087: LD_INT 7
15089: PUSH
15090: LD_INT 8
15092: PUSH
15093: LD_INT 9
15095: PUSH
15096: LD_INT 10
15098: PUSH
15099: LD_INT 11
15101: PUSH
15102: LD_INT 12
15104: PUSH
15105: LD_INT 13
15107: PUSH
15108: LD_INT 14
15110: PUSH
15111: LD_INT 15
15113: PUSH
15114: LD_INT 16
15116: PUSH
15117: LD_INT 17
15119: PUSH
15120: LD_INT 18
15122: PUSH
15123: LD_INT 19
15125: PUSH
15126: LD_INT 20
15128: PUSH
15129: LD_INT 21
15131: PUSH
15132: LD_INT 22
15134: PUSH
15135: LD_INT 23
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 25
15143: PUSH
15144: LD_INT 26
15146: PUSH
15147: LD_INT 27
15149: PUSH
15150: LD_INT 28
15152: PUSH
15153: LD_INT 29
15155: PUSH
15156: LD_INT 30
15158: PUSH
15159: LD_INT 31
15161: PUSH
15162: LD_INT 32
15164: PUSH
15165: LD_INT 33
15167: PUSH
15168: LD_INT 34
15170: PUSH
15171: LD_INT 36
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 101
15213: PUSH
15214: LD_INT 102
15216: PUSH
15217: LD_INT 103
15219: PUSH
15220: LD_INT 104
15222: PUSH
15223: LD_INT 105
15225: PUSH
15226: LD_INT 106
15228: PUSH
15229: LD_INT 107
15231: PUSH
15232: LD_INT 108
15234: PUSH
15235: LD_INT 109
15237: PUSH
15238: LD_INT 110
15240: PUSH
15241: LD_INT 111
15243: PUSH
15244: LD_INT 112
15246: PUSH
15247: LD_INT 113
15249: PUSH
15250: LD_INT 114
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: ST_TO_ADDR
15273: GO 15648
15275: LD_INT 18
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15419
15283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15284: LD_ADDR_VAR 0 1
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: LD_INT 4
15294: PUSH
15295: LD_INT 5
15297: PUSH
15298: LD_INT 7
15300: PUSH
15301: LD_INT 11
15303: PUSH
15304: LD_INT 12
15306: PUSH
15307: LD_INT 15
15309: PUSH
15310: LD_INT 16
15312: PUSH
15313: LD_INT 20
15315: PUSH
15316: LD_INT 21
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_INT 23
15324: PUSH
15325: LD_INT 25
15327: PUSH
15328: LD_INT 26
15330: PUSH
15331: LD_INT 30
15333: PUSH
15334: LD_INT 31
15336: PUSH
15337: LD_INT 32
15339: PUSH
15340: LD_INT 33
15342: PUSH
15343: LD_INT 34
15345: PUSH
15346: LD_INT 35
15348: PUSH
15349: LD_INT 36
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 101
15377: PUSH
15378: LD_INT 102
15380: PUSH
15381: LD_INT 103
15383: PUSH
15384: LD_INT 106
15386: PUSH
15387: LD_INT 108
15389: PUSH
15390: LD_INT 112
15392: PUSH
15393: LD_INT 113
15395: PUSH
15396: LD_INT 114
15398: PUSH
15399: LD_INT 115
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: ST_TO_ADDR
15417: GO 15648
15419: LD_INT 19
15421: DOUBLE
15422: EQUAL
15423: IFTRUE 15427
15425: GO 15647
15427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15428: LD_ADDR_VAR 0 1
15432: PUSH
15433: LD_INT 1
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: LD_INT 4
15444: PUSH
15445: LD_INT 5
15447: PUSH
15448: LD_INT 6
15450: PUSH
15451: LD_INT 7
15453: PUSH
15454: LD_INT 8
15456: PUSH
15457: LD_INT 9
15459: PUSH
15460: LD_INT 10
15462: PUSH
15463: LD_INT 11
15465: PUSH
15466: LD_INT 12
15468: PUSH
15469: LD_INT 13
15471: PUSH
15472: LD_INT 14
15474: PUSH
15475: LD_INT 15
15477: PUSH
15478: LD_INT 16
15480: PUSH
15481: LD_INT 17
15483: PUSH
15484: LD_INT 18
15486: PUSH
15487: LD_INT 19
15489: PUSH
15490: LD_INT 20
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_INT 23
15501: PUSH
15502: LD_INT 24
15504: PUSH
15505: LD_INT 25
15507: PUSH
15508: LD_INT 26
15510: PUSH
15511: LD_INT 27
15513: PUSH
15514: LD_INT 28
15516: PUSH
15517: LD_INT 29
15519: PUSH
15520: LD_INT 30
15522: PUSH
15523: LD_INT 31
15525: PUSH
15526: LD_INT 32
15528: PUSH
15529: LD_INT 33
15531: PUSH
15532: LD_INT 34
15534: PUSH
15535: LD_INT 35
15537: PUSH
15538: LD_INT 36
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 101
15581: PUSH
15582: LD_INT 102
15584: PUSH
15585: LD_INT 103
15587: PUSH
15588: LD_INT 104
15590: PUSH
15591: LD_INT 105
15593: PUSH
15594: LD_INT 106
15596: PUSH
15597: LD_INT 107
15599: PUSH
15600: LD_INT 108
15602: PUSH
15603: LD_INT 109
15605: PUSH
15606: LD_INT 110
15608: PUSH
15609: LD_INT 111
15611: PUSH
15612: LD_INT 112
15614: PUSH
15615: LD_INT 113
15617: PUSH
15618: LD_INT 114
15620: PUSH
15621: LD_INT 115
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: ST_TO_ADDR
15645: GO 15648
15647: POP
// end else
15648: GO 15867
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 3
15663: PUSH
15664: LD_INT 4
15666: PUSH
15667: LD_INT 5
15669: PUSH
15670: LD_INT 6
15672: PUSH
15673: LD_INT 7
15675: PUSH
15676: LD_INT 8
15678: PUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 10
15684: PUSH
15685: LD_INT 11
15687: PUSH
15688: LD_INT 12
15690: PUSH
15691: LD_INT 13
15693: PUSH
15694: LD_INT 14
15696: PUSH
15697: LD_INT 15
15699: PUSH
15700: LD_INT 16
15702: PUSH
15703: LD_INT 17
15705: PUSH
15706: LD_INT 18
15708: PUSH
15709: LD_INT 19
15711: PUSH
15712: LD_INT 20
15714: PUSH
15715: LD_INT 21
15717: PUSH
15718: LD_INT 22
15720: PUSH
15721: LD_INT 23
15723: PUSH
15724: LD_INT 24
15726: PUSH
15727: LD_INT 25
15729: PUSH
15730: LD_INT 26
15732: PUSH
15733: LD_INT 27
15735: PUSH
15736: LD_INT 28
15738: PUSH
15739: LD_INT 29
15741: PUSH
15742: LD_INT 30
15744: PUSH
15745: LD_INT 31
15747: PUSH
15748: LD_INT 32
15750: PUSH
15751: LD_INT 33
15753: PUSH
15754: LD_INT 34
15756: PUSH
15757: LD_INT 35
15759: PUSH
15760: LD_INT 36
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 101
15803: PUSH
15804: LD_INT 102
15806: PUSH
15807: LD_INT 103
15809: PUSH
15810: LD_INT 104
15812: PUSH
15813: LD_INT 105
15815: PUSH
15816: LD_INT 106
15818: PUSH
15819: LD_INT 107
15821: PUSH
15822: LD_INT 108
15824: PUSH
15825: LD_INT 109
15827: PUSH
15828: LD_INT 110
15830: PUSH
15831: LD_INT 111
15833: PUSH
15834: LD_INT 112
15836: PUSH
15837: LD_INT 113
15839: PUSH
15840: LD_INT 114
15842: PUSH
15843: LD_INT 115
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: ST_TO_ADDR
// if result then
15867: LD_VAR 0 1
15871: IFFALSE 16160
// begin normal :=  ;
15873: LD_ADDR_VAR 0 3
15877: PUSH
15878: LD_STRING 
15880: ST_TO_ADDR
// hardcore :=  ;
15881: LD_ADDR_VAR 0 4
15885: PUSH
15886: LD_STRING 
15888: ST_TO_ADDR
// for i = 1 to normalCounter do
15889: LD_ADDR_VAR 0 5
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_EXP 33
15903: PUSH
15904: FOR_TO
15905: IFFALSE 16006
// begin tmp := 0 ;
15907: LD_ADDR_VAR 0 2
15911: PUSH
15912: LD_STRING 0
15914: ST_TO_ADDR
// if result [ 1 ] then
15915: LD_VAR 0 1
15919: PUSH
15920: LD_INT 1
15922: ARRAY
15923: IFFALSE 15988
// if result [ 1 ] [ 1 ] = i then
15925: LD_VAR 0 1
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PUSH
15938: LD_VAR 0 5
15942: EQUAL
15943: IFFALSE 15988
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15945: LD_ADDR_VAR 0 1
15949: PUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: LD_VAR 0 1
15962: PUSH
15963: LD_INT 1
15965: ARRAY
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 3
15974: PPUSH
15975: CALL_OW 1
15979: ST_TO_ADDR
// tmp := 1 ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_STRING 1
15987: ST_TO_ADDR
// end ; normal := normal & tmp ;
15988: LD_ADDR_VAR 0 3
15992: PUSH
15993: LD_VAR 0 3
15997: PUSH
15998: LD_VAR 0 2
16002: STR
16003: ST_TO_ADDR
// end ;
16004: GO 15904
16006: POP
16007: POP
// for i = 1 to hardcoreCounter do
16008: LD_ADDR_VAR 0 5
16012: PUSH
16013: DOUBLE
16014: LD_INT 1
16016: DEC
16017: ST_TO_ADDR
16018: LD_EXP 34
16022: PUSH
16023: FOR_TO
16024: IFFALSE 16129
// begin tmp := 0 ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: LD_STRING 0
16033: ST_TO_ADDR
// if result [ 2 ] then
16034: LD_VAR 0 1
16038: PUSH
16039: LD_INT 2
16041: ARRAY
16042: IFFALSE 16111
// if result [ 2 ] [ 1 ] = 100 + i then
16044: LD_VAR 0 1
16048: PUSH
16049: LD_INT 2
16051: ARRAY
16052: PUSH
16053: LD_INT 1
16055: ARRAY
16056: PUSH
16057: LD_INT 100
16059: PUSH
16060: LD_VAR 0 5
16064: PLUS
16065: EQUAL
16066: IFFALSE 16111
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16068: LD_ADDR_VAR 0 1
16072: PUSH
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_INT 2
16080: PPUSH
16081: LD_VAR 0 1
16085: PUSH
16086: LD_INT 2
16088: ARRAY
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 3
16097: PPUSH
16098: CALL_OW 1
16102: ST_TO_ADDR
// tmp := 1 ;
16103: LD_ADDR_VAR 0 2
16107: PUSH
16108: LD_STRING 1
16110: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16111: LD_ADDR_VAR 0 4
16115: PUSH
16116: LD_VAR 0 4
16120: PUSH
16121: LD_VAR 0 2
16125: STR
16126: ST_TO_ADDR
// end ;
16127: GO 16023
16129: POP
16130: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16131: LD_STRING getStreamItemsFromMission("
16133: PUSH
16134: LD_VAR 0 3
16138: STR
16139: PUSH
16140: LD_STRING ","
16142: STR
16143: PUSH
16144: LD_VAR 0 4
16148: STR
16149: PUSH
16150: LD_STRING ")
16152: STR
16153: PPUSH
16154: CALL_OW 559
// end else
16158: GO 16167
// ToLua ( getStreamItemsFromMission("","") ) ;
16160: LD_STRING getStreamItemsFromMission("","")
16162: PPUSH
16163: CALL_OW 559
// end ;
16167: LD_VAR 0 1
16171: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16172: LD_EXP 32
16176: PUSH
16177: LD_EXP 37
16181: AND
16182: IFFALSE 16306
16184: GO 16186
16186: DISABLE
16187: LD_INT 0
16189: PPUSH
16190: PPUSH
// begin enable ;
16191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: LD_INT 22
16199: PUSH
16200: LD_OWVAR 2
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 2
16211: PUSH
16212: LD_INT 34
16214: PUSH
16215: LD_INT 7
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 34
16224: PUSH
16225: LD_INT 45
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 34
16234: PUSH
16235: LD_INT 28
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 34
16244: PUSH
16245: LD_INT 47
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: ST_TO_ADDR
// if not tmp then
16268: LD_VAR 0 2
16272: NOT
16273: IFFALSE 16277
// exit ;
16275: GO 16306
// for i in tmp do
16277: LD_ADDR_VAR 0 1
16281: PUSH
16282: LD_VAR 0 2
16286: PUSH
16287: FOR_IN
16288: IFFALSE 16304
// begin SetLives ( i , 0 ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_INT 0
16297: PPUSH
16298: CALL_OW 234
// end ;
16302: GO 16287
16304: POP
16305: POP
// end ;
16306: PPOPN 2
16308: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16309: LD_EXP 32
16313: PUSH
16314: LD_EXP 38
16318: AND
16319: IFFALSE 16403
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
// begin enable ;
16328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16329: LD_ADDR_VAR 0 2
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_OWVAR 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 32
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PPUSH
16360: CALL_OW 69
16364: ST_TO_ADDR
// if not tmp then
16365: LD_VAR 0 2
16369: NOT
16370: IFFALSE 16374
// exit ;
16372: GO 16403
// for i in tmp do
16374: LD_ADDR_VAR 0 1
16378: PUSH
16379: LD_VAR 0 2
16383: PUSH
16384: FOR_IN
16385: IFFALSE 16401
// begin SetLives ( i , 0 ) ;
16387: LD_VAR 0 1
16391: PPUSH
16392: LD_INT 0
16394: PPUSH
16395: CALL_OW 234
// end ;
16399: GO 16384
16401: POP
16402: POP
// end ;
16403: PPOPN 2
16405: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16406: LD_EXP 32
16410: PUSH
16411: LD_EXP 35
16415: AND
16416: IFFALSE 16509
16418: GO 16420
16420: DISABLE
16421: LD_INT 0
16423: PPUSH
// begin enable ;
16424: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_INT 22
16432: PUSH
16433: LD_OWVAR 2
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: LD_INT 25
16447: PUSH
16448: LD_INT 5
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 25
16457: PUSH
16458: LD_INT 9
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 25
16467: PUSH
16468: LD_INT 8
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PPUSH
16485: CALL_OW 69
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16507
// begin SetClass ( i , 1 ) ;
16493: LD_VAR 0 1
16497: PPUSH
16498: LD_INT 1
16500: PPUSH
16501: CALL_OW 336
// end ;
16505: GO 16490
16507: POP
16508: POP
// end ;
16509: PPOPN 1
16511: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16512: LD_EXP 32
16516: PUSH
16517: LD_EXP 36
16521: AND
16522: PUSH
16523: LD_OWVAR 65
16527: PUSH
16528: LD_INT 7
16530: LESS
16531: AND
16532: IFFALSE 16546
16534: GO 16536
16536: DISABLE
// begin enable ;
16537: ENABLE
// game_speed := 7 ;
16538: LD_ADDR_OWVAR 65
16542: PUSH
16543: LD_INT 7
16545: ST_TO_ADDR
// end ;
16546: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16547: LD_EXP 32
16551: PUSH
16552: LD_EXP 39
16556: AND
16557: IFFALSE 16759
16559: GO 16561
16561: DISABLE
16562: LD_INT 0
16564: PPUSH
16565: PPUSH
16566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16567: LD_ADDR_VAR 0 3
16571: PUSH
16572: LD_INT 81
16574: PUSH
16575: LD_OWVAR 2
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 21
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PPUSH
16598: CALL_OW 69
16602: ST_TO_ADDR
// if not tmp then
16603: LD_VAR 0 3
16607: NOT
16608: IFFALSE 16612
// exit ;
16610: GO 16759
// if tmp > 5 then
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 5
16619: GREATER
16620: IFFALSE 16632
// k := 5 else
16622: LD_ADDR_VAR 0 2
16626: PUSH
16627: LD_INT 5
16629: ST_TO_ADDR
16630: GO 16642
// k := tmp ;
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: LD_VAR 0 3
16641: ST_TO_ADDR
// for i := 1 to k do
16642: LD_ADDR_VAR 0 1
16646: PUSH
16647: DOUBLE
16648: LD_INT 1
16650: DEC
16651: ST_TO_ADDR
16652: LD_VAR 0 2
16656: PUSH
16657: FOR_TO
16658: IFFALSE 16757
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16660: LD_VAR 0 3
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: PPUSH
16671: LD_VAR 0 1
16675: PUSH
16676: LD_INT 4
16678: MOD
16679: PUSH
16680: LD_INT 1
16682: PLUS
16683: PPUSH
16684: CALL_OW 259
16688: PUSH
16689: LD_INT 10
16691: LESS
16692: IFFALSE 16755
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16694: LD_VAR 0 3
16698: PUSH
16699: LD_VAR 0 1
16703: ARRAY
16704: PPUSH
16705: LD_VAR 0 1
16709: PUSH
16710: LD_INT 4
16712: MOD
16713: PUSH
16714: LD_INT 1
16716: PLUS
16717: PPUSH
16718: LD_VAR 0 3
16722: PUSH
16723: LD_VAR 0 1
16727: ARRAY
16728: PPUSH
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 4
16736: MOD
16737: PUSH
16738: LD_INT 1
16740: PLUS
16741: PPUSH
16742: CALL_OW 259
16746: PUSH
16747: LD_INT 1
16749: PLUS
16750: PPUSH
16751: CALL_OW 237
16755: GO 16657
16757: POP
16758: POP
// end ;
16759: PPOPN 3
16761: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16762: LD_EXP 32
16766: PUSH
16767: LD_EXP 40
16771: AND
16772: IFFALSE 16792
16774: GO 16776
16776: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16777: LD_INT 4
16779: PPUSH
16780: LD_OWVAR 2
16784: PPUSH
16785: LD_INT 0
16787: PPUSH
16788: CALL_OW 324
16792: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16793: LD_EXP 32
16797: PUSH
16798: LD_EXP 69
16802: AND
16803: IFFALSE 16823
16805: GO 16807
16807: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16808: LD_INT 19
16810: PPUSH
16811: LD_OWVAR 2
16815: PPUSH
16816: LD_INT 0
16818: PPUSH
16819: CALL_OW 324
16823: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16824: LD_EXP 32
16828: PUSH
16829: LD_EXP 41
16833: AND
16834: IFFALSE 16936
16836: GO 16838
16838: DISABLE
16839: LD_INT 0
16841: PPUSH
16842: PPUSH
// begin enable ;
16843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_OWVAR 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: LD_INT 34
16866: PUSH
16867: LD_INT 11
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 34
16876: PUSH
16877: LD_INT 30
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 69
16897: ST_TO_ADDR
// if not tmp then
16898: LD_VAR 0 2
16902: NOT
16903: IFFALSE 16907
// exit ;
16905: GO 16936
// for i in tmp do
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_VAR 0 2
16916: PUSH
16917: FOR_IN
16918: IFFALSE 16934
// begin SetLives ( i , 0 ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 0
16927: PPUSH
16928: CALL_OW 234
// end ;
16932: GO 16917
16934: POP
16935: POP
// end ;
16936: PPOPN 2
16938: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16939: LD_EXP 32
16943: PUSH
16944: LD_EXP 42
16948: AND
16949: IFFALSE 16969
16951: GO 16953
16953: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16954: LD_INT 32
16956: PPUSH
16957: LD_OWVAR 2
16961: PPUSH
16962: LD_INT 0
16964: PPUSH
16965: CALL_OW 324
16969: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16970: LD_EXP 32
16974: PUSH
16975: LD_EXP 43
16979: AND
16980: IFFALSE 17161
16982: GO 16984
16984: DISABLE
16985: LD_INT 0
16987: PPUSH
16988: PPUSH
16989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 22
16997: PUSH
16998: LD_OWVAR 2
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 33
17009: PUSH
17010: LD_INT 3
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PPUSH
17021: CALL_OW 69
17025: ST_TO_ADDR
// if not tmp then
17026: LD_VAR 0 2
17030: NOT
17031: IFFALSE 17035
// exit ;
17033: GO 17161
// side := 0 ;
17035: LD_ADDR_VAR 0 3
17039: PUSH
17040: LD_INT 0
17042: ST_TO_ADDR
// for i := 1 to 8 do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: DOUBLE
17049: LD_INT 1
17051: DEC
17052: ST_TO_ADDR
17053: LD_INT 8
17055: PUSH
17056: FOR_TO
17057: IFFALSE 17105
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17059: LD_OWVAR 2
17063: PUSH
17064: LD_VAR 0 1
17068: NONEQUAL
17069: PUSH
17070: LD_OWVAR 2
17074: PPUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 81
17084: PUSH
17085: LD_INT 2
17087: EQUAL
17088: AND
17089: IFFALSE 17103
// begin side := i ;
17091: LD_ADDR_VAR 0 3
17095: PUSH
17096: LD_VAR 0 1
17100: ST_TO_ADDR
// break ;
17101: GO 17105
// end ;
17103: GO 17056
17105: POP
17106: POP
// if not side then
17107: LD_VAR 0 3
17111: NOT
17112: IFFALSE 17116
// exit ;
17114: GO 17161
// for i := 1 to tmp do
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: DOUBLE
17122: LD_INT 1
17124: DEC
17125: ST_TO_ADDR
17126: LD_VAR 0 2
17130: PUSH
17131: FOR_TO
17132: IFFALSE 17159
// if Prob ( 60 ) then
17134: LD_INT 60
17136: PPUSH
17137: CALL_OW 13
17141: IFFALSE 17157
// SetSide ( i , side ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: LD_VAR 0 3
17152: PPUSH
17153: CALL_OW 235
17157: GO 17131
17159: POP
17160: POP
// end ;
17161: PPOPN 3
17163: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17164: LD_EXP 32
17168: PUSH
17169: LD_EXP 45
17173: AND
17174: IFFALSE 17293
17176: GO 17178
17178: DISABLE
17179: LD_INT 0
17181: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17182: LD_ADDR_VAR 0 1
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 21
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: LD_INT 23
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: PUSH
17236: FOR_IN
17237: IFFALSE 17291
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 257
17248: PUSH
17249: LD_INT 1
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: LD_INT 4
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: IN
17267: IFFALSE 17289
// SetClass ( un , rand ( 1 , 4 ) ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: LD_INT 4
17279: PPUSH
17280: CALL_OW 12
17284: PPUSH
17285: CALL_OW 336
17289: GO 17236
17291: POP
17292: POP
// end ;
17293: PPOPN 1
17295: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17296: LD_EXP 32
17300: PUSH
17301: LD_EXP 44
17305: AND
17306: IFFALSE 17385
17308: GO 17310
17310: DISABLE
17311: LD_INT 0
17313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17314: LD_ADDR_VAR 0 1
17318: PUSH
17319: LD_INT 22
17321: PUSH
17322: LD_OWVAR 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PPUSH
17345: CALL_OW 69
17349: ST_TO_ADDR
// if not tmp then
17350: LD_VAR 0 1
17354: NOT
17355: IFFALSE 17359
// exit ;
17357: GO 17385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17359: LD_VAR 0 1
17363: PUSH
17364: LD_INT 1
17366: PPUSH
17367: LD_VAR 0 1
17371: PPUSH
17372: CALL_OW 12
17376: ARRAY
17377: PPUSH
17378: LD_INT 100
17380: PPUSH
17381: CALL_OW 234
// end ;
17385: PPOPN 1
17387: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17388: LD_EXP 32
17392: PUSH
17393: LD_EXP 46
17397: AND
17398: IFFALSE 17496
17400: GO 17402
17402: DISABLE
17403: LD_INT 0
17405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17406: LD_ADDR_VAR 0 1
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_OWVAR 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: ST_TO_ADDR
// if not tmp then
17442: LD_VAR 0 1
17446: NOT
17447: IFFALSE 17451
// exit ;
17449: GO 17496
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17451: LD_VAR 0 1
17455: PUSH
17456: LD_INT 1
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 12
17468: ARRAY
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: LD_INT 4
17475: PPUSH
17476: CALL_OW 12
17480: PPUSH
17481: LD_INT 3000
17483: PPUSH
17484: LD_INT 9000
17486: PPUSH
17487: CALL_OW 12
17491: PPUSH
17492: CALL_OW 492
// end ;
17496: PPOPN 1
17498: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17499: LD_EXP 32
17503: PUSH
17504: LD_EXP 47
17508: AND
17509: IFFALSE 17529
17511: GO 17513
17513: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17514: LD_INT 1
17516: PPUSH
17517: LD_OWVAR 2
17521: PPUSH
17522: LD_INT 0
17524: PPUSH
17525: CALL_OW 324
17529: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17530: LD_EXP 32
17534: PUSH
17535: LD_EXP 48
17539: AND
17540: IFFALSE 17623
17542: GO 17544
17544: DISABLE
17545: LD_INT 0
17547: PPUSH
17548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17549: LD_ADDR_VAR 0 2
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 21
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PPUSH
17580: CALL_OW 69
17584: ST_TO_ADDR
// if not tmp then
17585: LD_VAR 0 2
17589: NOT
17590: IFFALSE 17594
// exit ;
17592: GO 17623
// for i in tmp do
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: FOR_IN
17605: IFFALSE 17621
// SetBLevel ( i , 10 ) ;
17607: LD_VAR 0 1
17611: PPUSH
17612: LD_INT 10
17614: PPUSH
17615: CALL_OW 241
17619: GO 17604
17621: POP
17622: POP
// end ;
17623: PPOPN 2
17625: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17626: LD_EXP 32
17630: PUSH
17631: LD_EXP 49
17635: AND
17636: IFFALSE 17747
17638: GO 17640
17640: DISABLE
17641: LD_INT 0
17643: PPUSH
17644: PPUSH
17645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17646: LD_ADDR_VAR 0 3
17650: PUSH
17651: LD_INT 22
17653: PUSH
17654: LD_OWVAR 2
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 25
17665: PUSH
17666: LD_INT 1
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PPUSH
17677: CALL_OW 69
17681: ST_TO_ADDR
// if not tmp then
17682: LD_VAR 0 3
17686: NOT
17687: IFFALSE 17691
// exit ;
17689: GO 17747
// un := tmp [ rand ( 1 , tmp ) ] ;
17691: LD_ADDR_VAR 0 2
17695: PUSH
17696: LD_VAR 0 3
17700: PUSH
17701: LD_INT 1
17703: PPUSH
17704: LD_VAR 0 3
17708: PPUSH
17709: CALL_OW 12
17713: ARRAY
17714: ST_TO_ADDR
// if Crawls ( un ) then
17715: LD_VAR 0 2
17719: PPUSH
17720: CALL_OW 318
17724: IFFALSE 17735
// ComWalk ( un ) ;
17726: LD_VAR 0 2
17730: PPUSH
17731: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17735: LD_VAR 0 2
17739: PPUSH
17740: LD_INT 5
17742: PPUSH
17743: CALL_OW 336
// end ;
17747: PPOPN 3
17749: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17750: LD_EXP 32
17754: PUSH
17755: LD_EXP 50
17759: AND
17760: PUSH
17761: LD_OWVAR 67
17765: PUSH
17766: LD_INT 3
17768: LESS
17769: AND
17770: IFFALSE 17789
17772: GO 17774
17774: DISABLE
// Difficulty := Difficulty + 1 ;
17775: LD_ADDR_OWVAR 67
17779: PUSH
17780: LD_OWVAR 67
17784: PUSH
17785: LD_INT 1
17787: PLUS
17788: ST_TO_ADDR
17789: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17790: LD_EXP 32
17794: PUSH
17795: LD_EXP 51
17799: AND
17800: IFFALSE 17903
17802: GO 17804
17804: DISABLE
17805: LD_INT 0
17807: PPUSH
// begin for i := 1 to 5 do
17808: LD_ADDR_VAR 0 1
17812: PUSH
17813: DOUBLE
17814: LD_INT 1
17816: DEC
17817: ST_TO_ADDR
17818: LD_INT 5
17820: PUSH
17821: FOR_TO
17822: IFFALSE 17901
// begin uc_nation := nation_nature ;
17824: LD_ADDR_OWVAR 21
17828: PUSH
17829: LD_INT 0
17831: ST_TO_ADDR
// uc_side := 0 ;
17832: LD_ADDR_OWVAR 20
17836: PUSH
17837: LD_INT 0
17839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17840: LD_ADDR_OWVAR 29
17844: PUSH
17845: LD_INT 12
17847: PUSH
17848: LD_INT 12
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: ST_TO_ADDR
// hc_agressivity := 20 ;
17855: LD_ADDR_OWVAR 35
17859: PUSH
17860: LD_INT 20
17862: ST_TO_ADDR
// hc_class := class_tiger ;
17863: LD_ADDR_OWVAR 28
17867: PUSH
17868: LD_INT 14
17870: ST_TO_ADDR
// hc_gallery :=  ;
17871: LD_ADDR_OWVAR 33
17875: PUSH
17876: LD_STRING 
17878: ST_TO_ADDR
// hc_name :=  ;
17879: LD_ADDR_OWVAR 26
17883: PUSH
17884: LD_STRING 
17886: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17887: CALL_OW 44
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: CALL_OW 51
// end ;
17899: GO 17821
17901: POP
17902: POP
// end ;
17903: PPOPN 1
17905: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17906: LD_EXP 32
17910: PUSH
17911: LD_EXP 52
17915: AND
17916: IFFALSE 17925
17918: GO 17920
17920: DISABLE
// StreamSibBomb ;
17921: CALL 17926 0 0
17925: END
// export function StreamSibBomb ; var i , x , y ; begin
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
17931: PPUSH
// result := false ;
17932: LD_ADDR_VAR 0 1
17936: PUSH
17937: LD_INT 0
17939: ST_TO_ADDR
// for i := 1 to 16 do
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: DOUBLE
17946: LD_INT 1
17948: DEC
17949: ST_TO_ADDR
17950: LD_INT 16
17952: PUSH
17953: FOR_TO
17954: IFFALSE 18153
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17956: LD_ADDR_VAR 0 3
17960: PUSH
17961: LD_INT 10
17963: PUSH
17964: LD_INT 20
17966: PUSH
17967: LD_INT 30
17969: PUSH
17970: LD_INT 40
17972: PUSH
17973: LD_INT 50
17975: PUSH
17976: LD_INT 60
17978: PUSH
17979: LD_INT 70
17981: PUSH
17982: LD_INT 80
17984: PUSH
17985: LD_INT 90
17987: PUSH
17988: LD_INT 100
17990: PUSH
17991: LD_INT 110
17993: PUSH
17994: LD_INT 120
17996: PUSH
17997: LD_INT 130
17999: PUSH
18000: LD_INT 140
18002: PUSH
18003: LD_INT 150
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: PPUSH
18026: LD_INT 15
18028: PPUSH
18029: CALL_OW 12
18033: ARRAY
18034: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18035: LD_ADDR_VAR 0 4
18039: PUSH
18040: LD_INT 10
18042: PUSH
18043: LD_INT 20
18045: PUSH
18046: LD_INT 30
18048: PUSH
18049: LD_INT 40
18051: PUSH
18052: LD_INT 50
18054: PUSH
18055: LD_INT 60
18057: PUSH
18058: LD_INT 70
18060: PUSH
18061: LD_INT 80
18063: PUSH
18064: LD_INT 90
18066: PUSH
18067: LD_INT 100
18069: PUSH
18070: LD_INT 110
18072: PUSH
18073: LD_INT 120
18075: PUSH
18076: LD_INT 130
18078: PUSH
18079: LD_INT 140
18081: PUSH
18082: LD_INT 150
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: PPUSH
18105: LD_INT 15
18107: PPUSH
18108: CALL_OW 12
18112: ARRAY
18113: ST_TO_ADDR
// if ValidHex ( x , y ) then
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_VAR 0 4
18123: PPUSH
18124: CALL_OW 488
18128: IFFALSE 18151
// begin result := [ x , y ] ;
18130: LD_ADDR_VAR 0 1
18134: PUSH
18135: LD_VAR 0 3
18139: PUSH
18140: LD_VAR 0 4
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: ST_TO_ADDR
// break ;
18149: GO 18153
// end ; end ;
18151: GO 17953
18153: POP
18154: POP
// if result then
18155: LD_VAR 0 1
18159: IFFALSE 18219
// begin ToLua ( playSibBomb() ) ;
18161: LD_STRING playSibBomb()
18163: PPUSH
18164: CALL_OW 559
// wait ( 0 0$14 ) ;
18168: LD_INT 490
18170: PPUSH
18171: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18175: LD_VAR 0 1
18179: PUSH
18180: LD_INT 1
18182: ARRAY
18183: PPUSH
18184: LD_VAR 0 1
18188: PUSH
18189: LD_INT 2
18191: ARRAY
18192: PPUSH
18193: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18197: LD_VAR 0 1
18201: PUSH
18202: LD_INT 1
18204: ARRAY
18205: PPUSH
18206: LD_VAR 0 1
18210: PUSH
18211: LD_INT 2
18213: ARRAY
18214: PPUSH
18215: CALL_OW 429
// end ; end ;
18219: LD_VAR 0 1
18223: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18224: LD_EXP 32
18228: PUSH
18229: LD_EXP 54
18233: AND
18234: IFFALSE 18246
18236: GO 18238
18238: DISABLE
// YouLost (  ) ;
18239: LD_STRING 
18241: PPUSH
18242: CALL_OW 104
18246: END
// every 0 0$1 trigger StreamModeActive and sFog do
18247: LD_EXP 32
18251: PUSH
18252: LD_EXP 53
18256: AND
18257: IFFALSE 18271
18259: GO 18261
18261: DISABLE
// FogOff ( your_side ) ;
18262: LD_OWVAR 2
18266: PPUSH
18267: CALL_OW 344
18271: END
// every 0 0$1 trigger StreamModeActive and sSun do
18272: LD_EXP 32
18276: PUSH
18277: LD_EXP 55
18281: AND
18282: IFFALSE 18310
18284: GO 18286
18286: DISABLE
// begin solar_recharge_percent := 0 ;
18287: LD_ADDR_OWVAR 79
18291: PUSH
18292: LD_INT 0
18294: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18295: LD_INT 10500
18297: PPUSH
18298: CALL_OW 67
// solar_recharge_percent := 100 ;
18302: LD_ADDR_OWVAR 79
18306: PUSH
18307: LD_INT 100
18309: ST_TO_ADDR
// end ;
18310: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18311: LD_EXP 32
18315: PUSH
18316: LD_EXP 56
18320: AND
18321: IFFALSE 18560
18323: GO 18325
18325: DISABLE
18326: LD_INT 0
18328: PPUSH
18329: PPUSH
18330: PPUSH
// begin tmp := [ ] ;
18331: LD_ADDR_VAR 0 3
18335: PUSH
18336: EMPTY
18337: ST_TO_ADDR
// for i := 1 to 6 do
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: DOUBLE
18344: LD_INT 1
18346: DEC
18347: ST_TO_ADDR
18348: LD_INT 6
18350: PUSH
18351: FOR_TO
18352: IFFALSE 18457
// begin uc_nation := nation_nature ;
18354: LD_ADDR_OWVAR 21
18358: PUSH
18359: LD_INT 0
18361: ST_TO_ADDR
// uc_side := 0 ;
18362: LD_ADDR_OWVAR 20
18366: PUSH
18367: LD_INT 0
18369: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18370: LD_ADDR_OWVAR 29
18374: PUSH
18375: LD_INT 12
18377: PUSH
18378: LD_INT 12
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: ST_TO_ADDR
// hc_agressivity := 20 ;
18385: LD_ADDR_OWVAR 35
18389: PUSH
18390: LD_INT 20
18392: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18393: LD_ADDR_OWVAR 28
18397: PUSH
18398: LD_INT 17
18400: ST_TO_ADDR
// hc_gallery :=  ;
18401: LD_ADDR_OWVAR 33
18405: PUSH
18406: LD_STRING 
18408: ST_TO_ADDR
// hc_name :=  ;
18409: LD_ADDR_OWVAR 26
18413: PUSH
18414: LD_STRING 
18416: ST_TO_ADDR
// un := CreateHuman ;
18417: LD_ADDR_VAR 0 2
18421: PUSH
18422: CALL_OW 44
18426: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_INT 1
18434: PPUSH
18435: CALL_OW 51
// tmp := tmp ^ un ;
18439: LD_ADDR_VAR 0 3
18443: PUSH
18444: LD_VAR 0 3
18448: PUSH
18449: LD_VAR 0 2
18453: ADD
18454: ST_TO_ADDR
// end ;
18455: GO 18351
18457: POP
18458: POP
// repeat wait ( 0 0$1 ) ;
18459: LD_INT 35
18461: PPUSH
18462: CALL_OW 67
// for un in tmp do
18466: LD_ADDR_VAR 0 2
18470: PUSH
18471: LD_VAR 0 3
18475: PUSH
18476: FOR_IN
18477: IFFALSE 18551
// begin if IsDead ( un ) then
18479: LD_VAR 0 2
18483: PPUSH
18484: CALL_OW 301
18488: IFFALSE 18508
// begin tmp := tmp diff un ;
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_VAR 0 3
18499: PUSH
18500: LD_VAR 0 2
18504: DIFF
18505: ST_TO_ADDR
// continue ;
18506: GO 18476
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18508: LD_VAR 0 2
18512: PPUSH
18513: LD_INT 3
18515: PUSH
18516: LD_INT 22
18518: PUSH
18519: LD_INT 0
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PPUSH
18530: CALL_OW 69
18534: PPUSH
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 74
18544: PPUSH
18545: CALL_OW 115
// end ;
18549: GO 18476
18551: POP
18552: POP
// until not tmp ;
18553: LD_VAR 0 3
18557: NOT
18558: IFFALSE 18459
// end ;
18560: PPOPN 3
18562: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18563: LD_EXP 32
18567: PUSH
18568: LD_EXP 57
18572: AND
18573: IFFALSE 18627
18575: GO 18577
18577: DISABLE
// begin ToLua ( displayTroll(); ) ;
18578: LD_STRING displayTroll();
18580: PPUSH
18581: CALL_OW 559
// wait ( 3 3$00 ) ;
18585: LD_INT 6300
18587: PPUSH
18588: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18592: LD_STRING hideTroll();
18594: PPUSH
18595: CALL_OW 559
// wait ( 1 1$00 ) ;
18599: LD_INT 2100
18601: PPUSH
18602: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18606: LD_STRING displayTroll();
18608: PPUSH
18609: CALL_OW 559
// wait ( 1 1$00 ) ;
18613: LD_INT 2100
18615: PPUSH
18616: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18620: LD_STRING hideTroll();
18622: PPUSH
18623: CALL_OW 559
// end ;
18627: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18628: LD_EXP 32
18632: PUSH
18633: LD_EXP 58
18637: AND
18638: IFFALSE 18701
18640: GO 18642
18642: DISABLE
18643: LD_INT 0
18645: PPUSH
// begin p := 0 ;
18646: LD_ADDR_VAR 0 1
18650: PUSH
18651: LD_INT 0
18653: ST_TO_ADDR
// repeat game_speed := 1 ;
18654: LD_ADDR_OWVAR 65
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18662: LD_INT 35
18664: PPUSH
18665: CALL_OW 67
// p := p + 1 ;
18669: LD_ADDR_VAR 0 1
18673: PUSH
18674: LD_VAR 0 1
18678: PUSH
18679: LD_INT 1
18681: PLUS
18682: ST_TO_ADDR
// until p >= 60 ;
18683: LD_VAR 0 1
18687: PUSH
18688: LD_INT 60
18690: GREATEREQUAL
18691: IFFALSE 18654
// game_speed := 4 ;
18693: LD_ADDR_OWVAR 65
18697: PUSH
18698: LD_INT 4
18700: ST_TO_ADDR
// end ;
18701: PPOPN 1
18703: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18704: LD_EXP 32
18708: PUSH
18709: LD_EXP 59
18713: AND
18714: IFFALSE 18860
18716: GO 18718
18718: DISABLE
18719: LD_INT 0
18721: PPUSH
18722: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18723: LD_ADDR_VAR 0 1
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_OWVAR 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 30
18745: PUSH
18746: LD_INT 0
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 30
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL_OW 69
18776: ST_TO_ADDR
// if not depot then
18777: LD_VAR 0 1
18781: NOT
18782: IFFALSE 18786
// exit ;
18784: GO 18860
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18786: LD_ADDR_VAR 0 2
18790: PUSH
18791: LD_VAR 0 1
18795: PUSH
18796: LD_INT 1
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 12
18808: ARRAY
18809: PPUSH
18810: CALL_OW 274
18814: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18815: LD_VAR 0 2
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: LD_INT 0
18825: PPUSH
18826: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18830: LD_VAR 0 2
18834: PPUSH
18835: LD_INT 2
18837: PPUSH
18838: LD_INT 0
18840: PPUSH
18841: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18845: LD_VAR 0 2
18849: PPUSH
18850: LD_INT 3
18852: PPUSH
18853: LD_INT 0
18855: PPUSH
18856: CALL_OW 277
// end ;
18860: PPOPN 2
18862: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18863: LD_EXP 32
18867: PUSH
18868: LD_EXP 60
18872: AND
18873: IFFALSE 18970
18875: GO 18877
18877: DISABLE
18878: LD_INT 0
18880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18881: LD_ADDR_VAR 0 1
18885: PUSH
18886: LD_INT 22
18888: PUSH
18889: LD_OWVAR 2
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 21
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 3
18910: PUSH
18911: LD_INT 23
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: ST_TO_ADDR
// if not tmp then
18935: LD_VAR 0 1
18939: NOT
18940: IFFALSE 18944
// exit ;
18942: GO 18970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18944: LD_VAR 0 1
18948: PUSH
18949: LD_INT 1
18951: PPUSH
18952: LD_VAR 0 1
18956: PPUSH
18957: CALL_OW 12
18961: ARRAY
18962: PPUSH
18963: LD_INT 200
18965: PPUSH
18966: CALL_OW 234
// end ;
18970: PPOPN 1
18972: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18973: LD_EXP 32
18977: PUSH
18978: LD_EXP 61
18982: AND
18983: IFFALSE 19062
18985: GO 18987
18987: DISABLE
18988: LD_INT 0
18990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18991: LD_ADDR_VAR 0 1
18995: PUSH
18996: LD_INT 22
18998: PUSH
18999: LD_OWVAR 2
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 21
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: ST_TO_ADDR
// if not tmp then
19027: LD_VAR 0 1
19031: NOT
19032: IFFALSE 19036
// exit ;
19034: GO 19062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 1
19043: PPUSH
19044: LD_VAR 0 1
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: PPUSH
19055: LD_INT 60
19057: PPUSH
19058: CALL_OW 234
// end ;
19062: PPOPN 1
19064: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19065: LD_EXP 32
19069: PUSH
19070: LD_EXP 62
19074: AND
19075: IFFALSE 19174
19077: GO 19079
19079: DISABLE
19080: LD_INT 0
19082: PPUSH
19083: PPUSH
// begin enable ;
19084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19085: LD_ADDR_VAR 0 1
19089: PUSH
19090: LD_INT 22
19092: PUSH
19093: LD_OWVAR 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 61
19104: PUSH
19105: EMPTY
19106: LIST
19107: PUSH
19108: LD_INT 33
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: ST_TO_ADDR
// if not tmp then
19128: LD_VAR 0 1
19132: NOT
19133: IFFALSE 19137
// exit ;
19135: GO 19174
// for i in tmp do
19137: LD_ADDR_VAR 0 2
19141: PUSH
19142: LD_VAR 0 1
19146: PUSH
19147: FOR_IN
19148: IFFALSE 19172
// if IsControledBy ( i ) then
19150: LD_VAR 0 2
19154: PPUSH
19155: CALL_OW 312
19159: IFFALSE 19170
// ComUnlink ( i ) ;
19161: LD_VAR 0 2
19165: PPUSH
19166: CALL_OW 136
19170: GO 19147
19172: POP
19173: POP
// end ;
19174: PPOPN 2
19176: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19177: LD_EXP 32
19181: PUSH
19182: LD_EXP 63
19186: AND
19187: IFFALSE 19327
19189: GO 19191
19191: DISABLE
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
// begin ToLua ( displayPowell(); ) ;
19196: LD_STRING displayPowell();
19198: PPUSH
19199: CALL_OW 559
// uc_side := 0 ;
19203: LD_ADDR_OWVAR 20
19207: PUSH
19208: LD_INT 0
19210: ST_TO_ADDR
// uc_nation := 2 ;
19211: LD_ADDR_OWVAR 21
19215: PUSH
19216: LD_INT 2
19218: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19219: LD_ADDR_OWVAR 37
19223: PUSH
19224: LD_INT 14
19226: ST_TO_ADDR
// vc_engine := engine_siberite ;
19227: LD_ADDR_OWVAR 39
19231: PUSH
19232: LD_INT 3
19234: ST_TO_ADDR
// vc_control := control_apeman ;
19235: LD_ADDR_OWVAR 38
19239: PUSH
19240: LD_INT 5
19242: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19243: LD_ADDR_OWVAR 40
19247: PUSH
19248: LD_INT 29
19250: ST_TO_ADDR
// un := CreateVehicle ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: CALL_OW 45
19260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19261: LD_VAR 0 2
19265: PPUSH
19266: LD_INT 1
19268: PPUSH
19269: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19273: LD_INT 35
19275: PPUSH
19276: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19280: LD_VAR 0 2
19284: PPUSH
19285: LD_INT 22
19287: PUSH
19288: LD_OWVAR 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PPUSH
19297: CALL_OW 69
19301: PPUSH
19302: LD_VAR 0 2
19306: PPUSH
19307: CALL_OW 74
19311: PPUSH
19312: CALL_OW 115
// until IsDead ( un ) ;
19316: LD_VAR 0 2
19320: PPUSH
19321: CALL_OW 301
19325: IFFALSE 19273
// end ;
19327: PPOPN 2
19329: END
// every 0 0$1 trigger StreamModeActive and sStu do
19330: LD_EXP 32
19334: PUSH
19335: LD_EXP 71
19339: AND
19340: IFFALSE 19356
19342: GO 19344
19344: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19345: LD_STRING displayStucuk();
19347: PPUSH
19348: CALL_OW 559
// ResetFog ;
19352: CALL_OW 335
// end ;
19356: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19357: LD_EXP 32
19361: PUSH
19362: LD_EXP 64
19366: AND
19367: IFFALSE 19508
19369: GO 19371
19371: DISABLE
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19376: LD_ADDR_VAR 0 2
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_OWVAR 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 21
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 2
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19508
// un := tmp [ rand ( 1 , tmp ) ] ;
19421: LD_ADDR_VAR 0 1
19425: PUSH
19426: LD_VAR 0 2
19430: PUSH
19431: LD_INT 1
19433: PPUSH
19434: LD_VAR 0 2
19438: PPUSH
19439: CALL_OW 12
19443: ARRAY
19444: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19445: LD_VAR 0 1
19449: PPUSH
19450: LD_INT 0
19452: PPUSH
19453: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19457: LD_VAR 0 1
19461: PPUSH
19462: LD_OWVAR 3
19466: PUSH
19467: LD_VAR 0 1
19471: DIFF
19472: PPUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 74
19482: PPUSH
19483: CALL_OW 115
// wait ( 0 0$20 ) ;
19487: LD_INT 700
19489: PPUSH
19490: CALL_OW 67
// SetSide ( un , your_side ) ;
19494: LD_VAR 0 1
19498: PPUSH
19499: LD_OWVAR 2
19503: PPUSH
19504: CALL_OW 235
// end ;
19508: PPOPN 2
19510: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19511: LD_EXP 32
19515: PUSH
19516: LD_EXP 65
19520: AND
19521: IFFALSE 19627
19523: GO 19525
19525: DISABLE
19526: LD_INT 0
19528: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19529: LD_ADDR_VAR 0 1
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_OWVAR 2
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: LD_INT 30
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 30
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PPUSH
19578: CALL_OW 69
19582: ST_TO_ADDR
// if not depot then
19583: LD_VAR 0 1
19587: NOT
19588: IFFALSE 19592
// exit ;
19590: GO 19627
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19592: LD_VAR 0 1
19596: PUSH
19597: LD_INT 1
19599: ARRAY
19600: PPUSH
19601: CALL_OW 250
19605: PPUSH
19606: LD_VAR 0 1
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: PPUSH
19615: CALL_OW 251
19619: PPUSH
19620: LD_INT 70
19622: PPUSH
19623: CALL_OW 495
// end ;
19627: PPOPN 1
19629: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19630: LD_EXP 32
19634: PUSH
19635: LD_EXP 66
19639: AND
19640: IFFALSE 19851
19642: GO 19644
19644: DISABLE
19645: LD_INT 0
19647: PPUSH
19648: PPUSH
19649: PPUSH
19650: PPUSH
19651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19652: LD_ADDR_VAR 0 5
19656: PUSH
19657: LD_INT 22
19659: PUSH
19660: LD_OWVAR 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PPUSH
19683: CALL_OW 69
19687: ST_TO_ADDR
// if not tmp then
19688: LD_VAR 0 5
19692: NOT
19693: IFFALSE 19697
// exit ;
19695: GO 19851
// for i in tmp do
19697: LD_ADDR_VAR 0 1
19701: PUSH
19702: LD_VAR 0 5
19706: PUSH
19707: FOR_IN
19708: IFFALSE 19849
// begin d := rand ( 0 , 5 ) ;
19710: LD_ADDR_VAR 0 4
19714: PUSH
19715: LD_INT 0
19717: PPUSH
19718: LD_INT 5
19720: PPUSH
19721: CALL_OW 12
19725: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19726: LD_ADDR_VAR 0 2
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 250
19740: PPUSH
19741: LD_VAR 0 4
19745: PPUSH
19746: LD_INT 3
19748: PPUSH
19749: LD_INT 12
19751: PPUSH
19752: CALL_OW 12
19756: PPUSH
19757: CALL_OW 272
19761: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19762: LD_ADDR_VAR 0 3
19766: PUSH
19767: LD_VAR 0 1
19771: PPUSH
19772: CALL_OW 251
19776: PPUSH
19777: LD_VAR 0 4
19781: PPUSH
19782: LD_INT 3
19784: PPUSH
19785: LD_INT 12
19787: PPUSH
19788: CALL_OW 12
19792: PPUSH
19793: CALL_OW 273
19797: ST_TO_ADDR
// if ValidHex ( x , y ) then
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: CALL_OW 488
19812: IFFALSE 19847
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19814: LD_VAR 0 1
19818: PPUSH
19819: LD_VAR 0 2
19823: PPUSH
19824: LD_VAR 0 3
19828: PPUSH
19829: LD_INT 3
19831: PPUSH
19832: LD_INT 6
19834: PPUSH
19835: CALL_OW 12
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: CALL_OW 483
// end ;
19847: GO 19707
19849: POP
19850: POP
// end ;
19851: PPOPN 5
19853: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19854: LD_EXP 32
19858: PUSH
19859: LD_EXP 67
19863: AND
19864: IFFALSE 19958
19866: GO 19868
19868: DISABLE
19869: LD_INT 0
19871: PPUSH
19872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19873: LD_ADDR_VAR 0 2
19877: PUSH
19878: LD_INT 22
19880: PUSH
19881: LD_OWVAR 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 32
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 21
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: PPUSH
19915: CALL_OW 69
19919: ST_TO_ADDR
// if not tmp then
19920: LD_VAR 0 2
19924: NOT
19925: IFFALSE 19929
// exit ;
19927: GO 19958
// for i in tmp do
19929: LD_ADDR_VAR 0 1
19933: PUSH
19934: LD_VAR 0 2
19938: PUSH
19939: FOR_IN
19940: IFFALSE 19956
// SetFuel ( i , 0 ) ;
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_INT 0
19949: PPUSH
19950: CALL_OW 240
19954: GO 19939
19956: POP
19957: POP
// end ;
19958: PPOPN 2
19960: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19961: LD_EXP 32
19965: PUSH
19966: LD_EXP 68
19970: AND
19971: IFFALSE 20037
19973: GO 19975
19975: DISABLE
19976: LD_INT 0
19978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19979: LD_ADDR_VAR 0 1
19983: PUSH
19984: LD_INT 22
19986: PUSH
19987: LD_OWVAR 2
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 30
19998: PUSH
19999: LD_INT 29
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: ST_TO_ADDR
// if not tmp then
20015: LD_VAR 0 1
20019: NOT
20020: IFFALSE 20024
// exit ;
20022: GO 20037
// DestroyUnit ( tmp [ 1 ] ) ;
20024: LD_VAR 0 1
20028: PUSH
20029: LD_INT 1
20031: ARRAY
20032: PPUSH
20033: CALL_OW 65
// end ;
20037: PPOPN 1
20039: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20040: LD_EXP 32
20044: PUSH
20045: LD_EXP 70
20049: AND
20050: IFFALSE 20179
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
// begin uc_side := 0 ;
20058: LD_ADDR_OWVAR 20
20062: PUSH
20063: LD_INT 0
20065: ST_TO_ADDR
// uc_nation := nation_arabian ;
20066: LD_ADDR_OWVAR 21
20070: PUSH
20071: LD_INT 2
20073: ST_TO_ADDR
// hc_gallery :=  ;
20074: LD_ADDR_OWVAR 33
20078: PUSH
20079: LD_STRING 
20081: ST_TO_ADDR
// hc_name :=  ;
20082: LD_ADDR_OWVAR 26
20086: PUSH
20087: LD_STRING 
20089: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20090: LD_INT 1
20092: PPUSH
20093: LD_INT 11
20095: PPUSH
20096: LD_INT 10
20098: PPUSH
20099: CALL_OW 380
// un := CreateHuman ;
20103: LD_ADDR_VAR 0 1
20107: PUSH
20108: CALL_OW 44
20112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20113: LD_VAR 0 1
20117: PPUSH
20118: LD_INT 1
20120: PPUSH
20121: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20125: LD_INT 35
20127: PPUSH
20128: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20132: LD_VAR 0 1
20136: PPUSH
20137: LD_INT 22
20139: PUSH
20140: LD_OWVAR 2
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PPUSH
20149: CALL_OW 69
20153: PPUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 74
20163: PPUSH
20164: CALL_OW 115
// until IsDead ( un ) ;
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 301
20177: IFFALSE 20125
// end ;
20179: PPOPN 1
20181: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20182: LD_EXP 32
20186: PUSH
20187: LD_EXP 72
20191: AND
20192: IFFALSE 20204
20194: GO 20196
20196: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20197: LD_STRING earthquake(getX(game), 0, 32)
20199: PPUSH
20200: CALL_OW 559
20204: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20205: LD_EXP 32
20209: PUSH
20210: LD_EXP 73
20214: AND
20215: IFFALSE 20306
20217: GO 20219
20219: DISABLE
20220: LD_INT 0
20222: PPUSH
// begin enable ;
20223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20224: LD_ADDR_VAR 0 1
20228: PUSH
20229: LD_INT 22
20231: PUSH
20232: LD_OWVAR 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 21
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 33
20253: PUSH
20254: LD_INT 3
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: PPUSH
20266: CALL_OW 69
20270: ST_TO_ADDR
// if not tmp then
20271: LD_VAR 0 1
20275: NOT
20276: IFFALSE 20280
// exit ;
20278: GO 20306
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20280: LD_VAR 0 1
20284: PUSH
20285: LD_INT 1
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 12
20297: ARRAY
20298: PPUSH
20299: LD_INT 1
20301: PPUSH
20302: CALL_OW 234
// end ;
20306: PPOPN 1
20308: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20309: LD_EXP 32
20313: PUSH
20314: LD_EXP 74
20318: AND
20319: IFFALSE 20460
20321: GO 20323
20323: DISABLE
20324: LD_INT 0
20326: PPUSH
20327: PPUSH
20328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20329: LD_ADDR_VAR 0 3
20333: PUSH
20334: LD_INT 22
20336: PUSH
20337: LD_OWVAR 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 25
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PPUSH
20360: CALL_OW 69
20364: ST_TO_ADDR
// if not tmp then
20365: LD_VAR 0 3
20369: NOT
20370: IFFALSE 20374
// exit ;
20372: GO 20460
// un := tmp [ rand ( 1 , tmp ) ] ;
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 1
20386: PPUSH
20387: LD_VAR 0 3
20391: PPUSH
20392: CALL_OW 12
20396: ARRAY
20397: ST_TO_ADDR
// if Crawls ( un ) then
20398: LD_VAR 0 2
20402: PPUSH
20403: CALL_OW 318
20407: IFFALSE 20418
// ComWalk ( un ) ;
20409: LD_VAR 0 2
20413: PPUSH
20414: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20418: LD_VAR 0 2
20422: PPUSH
20423: LD_INT 9
20425: PPUSH
20426: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20430: LD_INT 28
20432: PPUSH
20433: LD_OWVAR 2
20437: PPUSH
20438: LD_INT 2
20440: PPUSH
20441: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20445: LD_INT 29
20447: PPUSH
20448: LD_OWVAR 2
20452: PPUSH
20453: LD_INT 2
20455: PPUSH
20456: CALL_OW 322
// end ;
20460: PPOPN 3
20462: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20463: LD_EXP 32
20467: PUSH
20468: LD_EXP 75
20472: AND
20473: IFFALSE 20584
20475: GO 20477
20477: DISABLE
20478: LD_INT 0
20480: PPUSH
20481: PPUSH
20482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_INT 22
20490: PUSH
20491: LD_OWVAR 2
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 25
20502: PUSH
20503: LD_INT 1
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PPUSH
20514: CALL_OW 69
20518: ST_TO_ADDR
// if not tmp then
20519: LD_VAR 0 3
20523: NOT
20524: IFFALSE 20528
// exit ;
20526: GO 20584
// un := tmp [ rand ( 1 , tmp ) ] ;
20528: LD_ADDR_VAR 0 2
20532: PUSH
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 1
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: CALL_OW 12
20550: ARRAY
20551: ST_TO_ADDR
// if Crawls ( un ) then
20552: LD_VAR 0 2
20556: PPUSH
20557: CALL_OW 318
20561: IFFALSE 20572
// ComWalk ( un ) ;
20563: LD_VAR 0 2
20567: PPUSH
20568: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_INT 8
20579: PPUSH
20580: CALL_OW 336
// end ;
20584: PPOPN 3
20586: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20587: LD_EXP 32
20591: PUSH
20592: LD_EXP 76
20596: AND
20597: IFFALSE 20741
20599: GO 20601
20601: DISABLE
20602: LD_INT 0
20604: PPUSH
20605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_INT 22
20613: PUSH
20614: LD_OWVAR 2
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 21
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 34
20638: PUSH
20639: LD_INT 12
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 34
20648: PUSH
20649: LD_INT 51
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 34
20658: PUSH
20659: LD_INT 32
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: PPUSH
20677: CALL_OW 69
20681: ST_TO_ADDR
// if not tmp then
20682: LD_VAR 0 2
20686: NOT
20687: IFFALSE 20691
// exit ;
20689: GO 20741
// for i in tmp do
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: LD_VAR 0 2
20700: PUSH
20701: FOR_IN
20702: IFFALSE 20739
// if GetCargo ( i , mat_artifact ) = 0 then
20704: LD_VAR 0 1
20708: PPUSH
20709: LD_INT 4
20711: PPUSH
20712: CALL_OW 289
20716: PUSH
20717: LD_INT 0
20719: EQUAL
20720: IFFALSE 20737
// SetCargo ( i , mat_siberit , 100 ) ;
20722: LD_VAR 0 1
20726: PPUSH
20727: LD_INT 3
20729: PPUSH
20730: LD_INT 100
20732: PPUSH
20733: CALL_OW 290
20737: GO 20701
20739: POP
20740: POP
// end ;
20741: PPOPN 2
20743: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20744: LD_EXP 32
20748: PUSH
20749: LD_EXP 77
20753: AND
20754: IFFALSE 20937
20756: GO 20758
20758: DISABLE
20759: LD_INT 0
20761: PPUSH
20762: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20763: LD_ADDR_VAR 0 2
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_OWVAR 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PPUSH
20780: CALL_OW 69
20784: ST_TO_ADDR
// if not tmp then
20785: LD_VAR 0 2
20789: NOT
20790: IFFALSE 20794
// exit ;
20792: GO 20937
// for i := 1 to 2 do
20794: LD_ADDR_VAR 0 1
20798: PUSH
20799: DOUBLE
20800: LD_INT 1
20802: DEC
20803: ST_TO_ADDR
20804: LD_INT 2
20806: PUSH
20807: FOR_TO
20808: IFFALSE 20935
// begin uc_side := your_side ;
20810: LD_ADDR_OWVAR 20
20814: PUSH
20815: LD_OWVAR 2
20819: ST_TO_ADDR
// uc_nation := nation_american ;
20820: LD_ADDR_OWVAR 21
20824: PUSH
20825: LD_INT 1
20827: ST_TO_ADDR
// vc_chassis := us_morphling ;
20828: LD_ADDR_OWVAR 37
20832: PUSH
20833: LD_INT 5
20835: ST_TO_ADDR
// vc_engine := engine_siberite ;
20836: LD_ADDR_OWVAR 39
20840: PUSH
20841: LD_INT 3
20843: ST_TO_ADDR
// vc_control := control_computer ;
20844: LD_ADDR_OWVAR 38
20848: PUSH
20849: LD_INT 3
20851: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20852: LD_ADDR_OWVAR 40
20856: PUSH
20857: LD_INT 10
20859: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20860: LD_VAR 0 2
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 310
20873: NOT
20874: IFFALSE 20921
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20876: CALL_OW 45
20880: PPUSH
20881: LD_VAR 0 2
20885: PUSH
20886: LD_INT 1
20888: ARRAY
20889: PPUSH
20890: CALL_OW 250
20894: PPUSH
20895: LD_VAR 0 2
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: CALL_OW 251
20908: PPUSH
20909: LD_INT 12
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: CALL_OW 50
20919: GO 20933
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20921: CALL_OW 45
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 51
// end ;
20933: GO 20807
20935: POP
20936: POP
// end ;
20937: PPOPN 2
20939: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20940: LD_EXP 32
20944: PUSH
20945: LD_EXP 78
20949: AND
20950: IFFALSE 21172
20952: GO 20954
20954: DISABLE
20955: LD_INT 0
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20963: LD_ADDR_VAR 0 6
20967: PUSH
20968: LD_INT 22
20970: PUSH
20971: LD_OWVAR 2
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 21
20982: PUSH
20983: LD_INT 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 3
20992: PUSH
20993: LD_INT 23
20995: PUSH
20996: LD_INT 0
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: PPUSH
21012: CALL_OW 69
21016: ST_TO_ADDR
// if not tmp then
21017: LD_VAR 0 6
21021: NOT
21022: IFFALSE 21026
// exit ;
21024: GO 21172
// s1 := rand ( 1 , 4 ) ;
21026: LD_ADDR_VAR 0 2
21030: PUSH
21031: LD_INT 1
21033: PPUSH
21034: LD_INT 4
21036: PPUSH
21037: CALL_OW 12
21041: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21042: LD_ADDR_VAR 0 4
21046: PUSH
21047: LD_VAR 0 6
21051: PUSH
21052: LD_INT 1
21054: ARRAY
21055: PPUSH
21056: LD_VAR 0 2
21060: PPUSH
21061: CALL_OW 259
21065: ST_TO_ADDR
// if s1 = 1 then
21066: LD_VAR 0 2
21070: PUSH
21071: LD_INT 1
21073: EQUAL
21074: IFFALSE 21094
// s2 := rand ( 2 , 4 ) else
21076: LD_ADDR_VAR 0 3
21080: PUSH
21081: LD_INT 2
21083: PPUSH
21084: LD_INT 4
21086: PPUSH
21087: CALL_OW 12
21091: ST_TO_ADDR
21092: GO 21102
// s2 := 1 ;
21094: LD_ADDR_VAR 0 3
21098: PUSH
21099: LD_INT 1
21101: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_VAR 0 6
21111: PUSH
21112: LD_INT 1
21114: ARRAY
21115: PPUSH
21116: LD_VAR 0 3
21120: PPUSH
21121: CALL_OW 259
21125: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21126: LD_VAR 0 6
21130: PUSH
21131: LD_INT 1
21133: ARRAY
21134: PPUSH
21135: LD_VAR 0 2
21139: PPUSH
21140: LD_VAR 0 5
21144: PPUSH
21145: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21149: LD_VAR 0 6
21153: PUSH
21154: LD_INT 1
21156: ARRAY
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: LD_VAR 0 4
21167: PPUSH
21168: CALL_OW 237
// end ;
21172: PPOPN 6
21174: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21175: LD_EXP 32
21179: PUSH
21180: LD_EXP 79
21184: AND
21185: IFFALSE 21264
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21193: LD_ADDR_VAR 0 1
21197: PUSH
21198: LD_INT 22
21200: PUSH
21201: LD_OWVAR 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 30
21212: PUSH
21213: LD_INT 3
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PPUSH
21224: CALL_OW 69
21228: ST_TO_ADDR
// if not tmp then
21229: LD_VAR 0 1
21233: NOT
21234: IFFALSE 21238
// exit ;
21236: GO 21264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21238: LD_VAR 0 1
21242: PUSH
21243: LD_INT 1
21245: PPUSH
21246: LD_VAR 0 1
21250: PPUSH
21251: CALL_OW 12
21255: ARRAY
21256: PPUSH
21257: LD_INT 1
21259: PPUSH
21260: CALL_OW 234
// end ;
21264: PPOPN 1
21266: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21267: LD_EXP 32
21271: PUSH
21272: LD_EXP 80
21276: AND
21277: IFFALSE 21389
21279: GO 21281
21281: DISABLE
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21286: LD_ADDR_VAR 0 2
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_OWVAR 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_INT 27
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 30
21318: PUSH
21319: LD_INT 26
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 30
21328: PUSH
21329: LD_INT 28
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PPUSH
21346: CALL_OW 69
21350: ST_TO_ADDR
// if not tmp then
21351: LD_VAR 0 2
21355: NOT
21356: IFFALSE 21360
// exit ;
21358: GO 21389
// for i in tmp do
21360: LD_ADDR_VAR 0 1
21364: PUSH
21365: LD_VAR 0 2
21369: PUSH
21370: FOR_IN
21371: IFFALSE 21387
// SetLives ( i , 1 ) ;
21373: LD_VAR 0 1
21377: PPUSH
21378: LD_INT 1
21380: PPUSH
21381: CALL_OW 234
21385: GO 21370
21387: POP
21388: POP
// end ;
21389: PPOPN 2
21391: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21392: LD_EXP 32
21396: PUSH
21397: LD_EXP 81
21401: AND
21402: IFFALSE 21676
21404: GO 21406
21406: DISABLE
21407: LD_INT 0
21409: PPUSH
21410: PPUSH
21411: PPUSH
// begin i := rand ( 1 , 7 ) ;
21412: LD_ADDR_VAR 0 1
21416: PUSH
21417: LD_INT 1
21419: PPUSH
21420: LD_INT 7
21422: PPUSH
21423: CALL_OW 12
21427: ST_TO_ADDR
// case i of 1 :
21428: LD_VAR 0 1
21432: PUSH
21433: LD_INT 1
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21451
21441: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21442: LD_STRING earthquake(getX(game), 0, 32)
21444: PPUSH
21445: CALL_OW 559
21449: GO 21676
21451: LD_INT 2
21453: DOUBLE
21454: EQUAL
21455: IFTRUE 21459
21457: GO 21473
21459: POP
// begin ToLua ( displayStucuk(); ) ;
21460: LD_STRING displayStucuk();
21462: PPUSH
21463: CALL_OW 559
// ResetFog ;
21467: CALL_OW 335
// end ; 3 :
21471: GO 21676
21473: LD_INT 3
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21585
21481: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21482: LD_ADDR_VAR 0 2
21486: PUSH
21487: LD_INT 22
21489: PUSH
21490: LD_OWVAR 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 25
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PPUSH
21513: CALL_OW 69
21517: ST_TO_ADDR
// if not tmp then
21518: LD_VAR 0 2
21522: NOT
21523: IFFALSE 21527
// exit ;
21525: GO 21676
// un := tmp [ rand ( 1 , tmp ) ] ;
21527: LD_ADDR_VAR 0 3
21531: PUSH
21532: LD_VAR 0 2
21536: PUSH
21537: LD_INT 1
21539: PPUSH
21540: LD_VAR 0 2
21544: PPUSH
21545: CALL_OW 12
21549: ARRAY
21550: ST_TO_ADDR
// if Crawls ( un ) then
21551: LD_VAR 0 3
21555: PPUSH
21556: CALL_OW 318
21560: IFFALSE 21571
// ComWalk ( un ) ;
21562: LD_VAR 0 3
21566: PPUSH
21567: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21571: LD_VAR 0 3
21575: PPUSH
21576: LD_INT 8
21578: PPUSH
21579: CALL_OW 336
// end ; 4 :
21583: GO 21676
21585: LD_INT 4
21587: DOUBLE
21588: EQUAL
21589: IFTRUE 21593
21591: GO 21654
21593: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_OWVAR 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 30
21613: PUSH
21614: LD_INT 29
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PPUSH
21625: CALL_OW 69
21629: ST_TO_ADDR
// if not tmp then
21630: LD_VAR 0 2
21634: NOT
21635: IFFALSE 21639
// exit ;
21637: GO 21676
// DestroyUnit ( tmp [ 1 ] ) ;
21639: LD_VAR 0 2
21643: PUSH
21644: LD_INT 1
21646: ARRAY
21647: PPUSH
21648: CALL_OW 65
// end ; 5 .. 7 :
21652: GO 21676
21654: LD_INT 5
21656: DOUBLE
21657: GREATEREQUAL
21658: IFFALSE 21666
21660: LD_INT 7
21662: DOUBLE
21663: LESSEQUAL
21664: IFTRUE 21668
21666: GO 21675
21668: POP
// StreamSibBomb ; end ;
21669: CALL 17926 0 0
21673: GO 21676
21675: POP
// end ;
21676: PPOPN 3
21678: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21679: LD_EXP 32
21683: PUSH
21684: LD_EXP 82
21688: AND
21689: IFFALSE 21845
21691: GO 21693
21693: DISABLE
21694: LD_INT 0
21696: PPUSH
21697: PPUSH
21698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_INT 81
21706: PUSH
21707: LD_OWVAR 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: LD_INT 21
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 21
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PPUSH
21748: CALL_OW 69
21752: ST_TO_ADDR
// if not tmp then
21753: LD_VAR 0 2
21757: NOT
21758: IFFALSE 21762
// exit ;
21760: GO 21845
// p := 0 ;
21762: LD_ADDR_VAR 0 3
21766: PUSH
21767: LD_INT 0
21769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21770: LD_INT 35
21772: PPUSH
21773: CALL_OW 67
// p := p + 1 ;
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_VAR 0 3
21786: PUSH
21787: LD_INT 1
21789: PLUS
21790: ST_TO_ADDR
// for i in tmp do
21791: LD_ADDR_VAR 0 1
21795: PUSH
21796: LD_VAR 0 2
21800: PUSH
21801: FOR_IN
21802: IFFALSE 21833
// if GetLives ( i ) < 1000 then
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 256
21813: PUSH
21814: LD_INT 1000
21816: LESS
21817: IFFALSE 21831
// SetLives ( i , 1000 ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_INT 1000
21826: PPUSH
21827: CALL_OW 234
21831: GO 21801
21833: POP
21834: POP
// until p > 20 ;
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 20
21842: GREATER
21843: IFFALSE 21770
// end ;
21845: PPOPN 3
21847: END
// every 0 0$1 trigger StreamModeActive and sTime do
21848: LD_EXP 32
21852: PUSH
21853: LD_EXP 83
21857: AND
21858: IFFALSE 21893
21860: GO 21862
21862: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21863: LD_INT 28
21865: PPUSH
21866: LD_OWVAR 2
21870: PPUSH
21871: LD_INT 2
21873: PPUSH
21874: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21878: LD_INT 30
21880: PPUSH
21881: LD_OWVAR 2
21885: PPUSH
21886: LD_INT 2
21888: PPUSH
21889: CALL_OW 322
// end ;
21893: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21894: LD_EXP 32
21898: PUSH
21899: LD_EXP 84
21903: AND
21904: IFFALSE 22025
21906: GO 21908
21908: DISABLE
21909: LD_INT 0
21911: PPUSH
21912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21913: LD_ADDR_VAR 0 2
21917: PUSH
21918: LD_INT 22
21920: PUSH
21921: LD_OWVAR 2
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 23
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 69
21966: ST_TO_ADDR
// if not tmp then
21967: LD_VAR 0 2
21971: NOT
21972: IFFALSE 21976
// exit ;
21974: GO 22025
// for i in tmp do
21976: LD_ADDR_VAR 0 1
21980: PUSH
21981: LD_VAR 0 2
21985: PUSH
21986: FOR_IN
21987: IFFALSE 22023
// begin if Crawls ( i ) then
21989: LD_VAR 0 1
21993: PPUSH
21994: CALL_OW 318
21998: IFFALSE 22009
// ComWalk ( i ) ;
22000: LD_VAR 0 1
22004: PPUSH
22005: CALL_OW 138
// SetClass ( i , 2 ) ;
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 2
22016: PPUSH
22017: CALL_OW 336
// end ;
22021: GO 21986
22023: POP
22024: POP
// end ;
22025: PPOPN 2
22027: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22028: LD_EXP 32
22032: PUSH
22033: LD_EXP 85
22037: AND
22038: IFFALSE 22319
22040: GO 22042
22042: DISABLE
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
22047: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22048: LD_OWVAR 2
22052: PPUSH
22053: LD_INT 9
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22066: LD_INT 9
22068: PPUSH
22069: LD_OWVAR 2
22073: PPUSH
22074: CALL_OW 343
// uc_side := 9 ;
22078: LD_ADDR_OWVAR 20
22082: PUSH
22083: LD_INT 9
22085: ST_TO_ADDR
// uc_nation := 2 ;
22086: LD_ADDR_OWVAR 21
22090: PUSH
22091: LD_INT 2
22093: ST_TO_ADDR
// hc_name := Dark Warrior ;
22094: LD_ADDR_OWVAR 26
22098: PUSH
22099: LD_STRING Dark Warrior
22101: ST_TO_ADDR
// hc_gallery :=  ;
22102: LD_ADDR_OWVAR 33
22106: PUSH
22107: LD_STRING 
22109: ST_TO_ADDR
// hc_noskilllimit := true ;
22110: LD_ADDR_OWVAR 76
22114: PUSH
22115: LD_INT 1
22117: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22118: LD_ADDR_OWVAR 31
22122: PUSH
22123: LD_INT 30
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: ST_TO_ADDR
// un := CreateHuman ;
22141: LD_ADDR_VAR 0 3
22145: PUSH
22146: CALL_OW 44
22150: ST_TO_ADDR
// hc_noskilllimit := false ;
22151: LD_ADDR_OWVAR 76
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22159: LD_VAR 0 3
22163: PPUSH
22164: LD_INT 1
22166: PPUSH
22167: CALL_OW 51
// p := 0 ;
22171: LD_ADDR_VAR 0 2
22175: PUSH
22176: LD_INT 0
22178: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22179: LD_INT 35
22181: PPUSH
22182: CALL_OW 67
// p := p + 1 ;
22186: LD_ADDR_VAR 0 2
22190: PUSH
22191: LD_VAR 0 2
22195: PUSH
22196: LD_INT 1
22198: PLUS
22199: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22200: LD_VAR 0 3
22204: PPUSH
22205: CALL_OW 256
22209: PUSH
22210: LD_INT 1000
22212: LESS
22213: IFFALSE 22227
// SetLives ( un , 1000 ) ;
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_INT 1000
22222: PPUSH
22223: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22227: LD_VAR 0 3
22231: PPUSH
22232: LD_INT 81
22234: PUSH
22235: LD_OWVAR 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 91
22246: PUSH
22247: LD_VAR 0 3
22251: PUSH
22252: LD_INT 30
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL_OW 69
22268: PPUSH
22269: LD_VAR 0 3
22273: PPUSH
22274: CALL_OW 74
22278: PPUSH
22279: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22283: LD_VAR 0 2
22287: PUSH
22288: LD_INT 60
22290: GREATER
22291: PUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: CALL_OW 301
22301: OR
22302: IFFALSE 22179
// if un then
22304: LD_VAR 0 3
22308: IFFALSE 22319
// RemoveUnit ( un ) ;
22310: LD_VAR 0 3
22314: PPUSH
22315: CALL_OW 64
// end ;
22319: PPOPN 3
22321: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22322: LD_INT 0
22324: PPUSH
// case cmd of 301 :
22325: LD_VAR 0 1
22329: PUSH
22330: LD_INT 301
22332: DOUBLE
22333: EQUAL
22334: IFTRUE 22338
22336: GO 22370
22338: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22339: LD_VAR 0 6
22343: PPUSH
22344: LD_VAR 0 7
22348: PPUSH
22349: LD_VAR 0 8
22353: PPUSH
22354: LD_VAR 0 4
22358: PPUSH
22359: LD_VAR 0 5
22363: PPUSH
22364: CALL 23571 0 5
22368: GO 22491
22370: LD_INT 302
22372: DOUBLE
22373: EQUAL
22374: IFTRUE 22378
22376: GO 22415
22378: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22379: LD_VAR 0 6
22383: PPUSH
22384: LD_VAR 0 7
22388: PPUSH
22389: LD_VAR 0 8
22393: PPUSH
22394: LD_VAR 0 9
22398: PPUSH
22399: LD_VAR 0 4
22403: PPUSH
22404: LD_VAR 0 5
22408: PPUSH
22409: CALL 23662 0 6
22413: GO 22491
22415: LD_INT 303
22417: DOUBLE
22418: EQUAL
22419: IFTRUE 22423
22421: GO 22460
22423: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22424: LD_VAR 0 6
22428: PPUSH
22429: LD_VAR 0 7
22433: PPUSH
22434: LD_VAR 0 8
22438: PPUSH
22439: LD_VAR 0 9
22443: PPUSH
22444: LD_VAR 0 4
22448: PPUSH
22449: LD_VAR 0 5
22453: PPUSH
22454: CALL 22496 0 6
22458: GO 22491
22460: LD_INT 304
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22490
22468: POP
// hHackTeleport ( unit , x , y ) ; end ;
22469: LD_VAR 0 2
22473: PPUSH
22474: LD_VAR 0 4
22478: PPUSH
22479: LD_VAR 0 5
22483: PPUSH
22484: CALL 24255 0 3
22488: GO 22491
22490: POP
// end ;
22491: LD_VAR 0 12
22495: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22496: LD_INT 0
22498: PPUSH
22499: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22500: LD_VAR 0 1
22504: PUSH
22505: LD_INT 1
22507: LESS
22508: PUSH
22509: LD_VAR 0 1
22513: PUSH
22514: LD_INT 3
22516: GREATER
22517: OR
22518: PUSH
22519: LD_VAR 0 5
22523: PPUSH
22524: LD_VAR 0 6
22528: PPUSH
22529: CALL_OW 428
22533: OR
22534: IFFALSE 22538
// exit ;
22536: GO 23258
// uc_side := your_side ;
22538: LD_ADDR_OWVAR 20
22542: PUSH
22543: LD_OWVAR 2
22547: ST_TO_ADDR
// uc_nation := nation ;
22548: LD_ADDR_OWVAR 21
22552: PUSH
22553: LD_VAR 0 1
22557: ST_TO_ADDR
// bc_level = 1 ;
22558: LD_ADDR_OWVAR 43
22562: PUSH
22563: LD_INT 1
22565: ST_TO_ADDR
// case btype of 1 :
22566: LD_VAR 0 2
22570: PUSH
22571: LD_INT 1
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22590
22579: POP
// bc_type := b_depot ; 2 :
22580: LD_ADDR_OWVAR 42
22584: PUSH
22585: LD_INT 0
22587: ST_TO_ADDR
22588: GO 23202
22590: LD_INT 2
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22609
22598: POP
// bc_type := b_warehouse ; 3 :
22599: LD_ADDR_OWVAR 42
22603: PUSH
22604: LD_INT 1
22606: ST_TO_ADDR
22607: GO 23202
22609: LD_INT 3
22611: DOUBLE
22612: EQUAL
22613: IFTRUE 22617
22615: GO 22628
22617: POP
// bc_type := b_lab ; 4 .. 9 :
22618: LD_ADDR_OWVAR 42
22622: PUSH
22623: LD_INT 6
22625: ST_TO_ADDR
22626: GO 23202
22628: LD_INT 4
22630: DOUBLE
22631: GREATEREQUAL
22632: IFFALSE 22640
22634: LD_INT 9
22636: DOUBLE
22637: LESSEQUAL
22638: IFTRUE 22642
22640: GO 22694
22642: POP
// begin bc_type := b_lab_half ;
22643: LD_ADDR_OWVAR 42
22647: PUSH
22648: LD_INT 7
22650: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22651: LD_ADDR_OWVAR 44
22655: PUSH
22656: LD_INT 10
22658: PUSH
22659: LD_INT 11
22661: PUSH
22662: LD_INT 12
22664: PUSH
22665: LD_INT 15
22667: PUSH
22668: LD_INT 14
22670: PUSH
22671: LD_INT 13
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: PUSH
22682: LD_VAR 0 2
22686: PUSH
22687: LD_INT 3
22689: MINUS
22690: ARRAY
22691: ST_TO_ADDR
// end ; 10 .. 13 :
22692: GO 23202
22694: LD_INT 10
22696: DOUBLE
22697: GREATEREQUAL
22698: IFFALSE 22706
22700: LD_INT 13
22702: DOUBLE
22703: LESSEQUAL
22704: IFTRUE 22708
22706: GO 22785
22708: POP
// begin bc_type := b_lab_full ;
22709: LD_ADDR_OWVAR 42
22713: PUSH
22714: LD_INT 8
22716: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22717: LD_ADDR_OWVAR 44
22721: PUSH
22722: LD_INT 10
22724: PUSH
22725: LD_INT 12
22727: PUSH
22728: LD_INT 14
22730: PUSH
22731: LD_INT 13
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: PUSH
22740: LD_VAR 0 2
22744: PUSH
22745: LD_INT 9
22747: MINUS
22748: ARRAY
22749: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22750: LD_ADDR_OWVAR 45
22754: PUSH
22755: LD_INT 11
22757: PUSH
22758: LD_INT 15
22760: PUSH
22761: LD_INT 12
22763: PUSH
22764: LD_INT 15
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: LD_VAR 0 2
22777: PUSH
22778: LD_INT 9
22780: MINUS
22781: ARRAY
22782: ST_TO_ADDR
// end ; 14 :
22783: GO 23202
22785: LD_INT 14
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22804
22793: POP
// bc_type := b_workshop ; 15 :
22794: LD_ADDR_OWVAR 42
22798: PUSH
22799: LD_INT 2
22801: ST_TO_ADDR
22802: GO 23202
22804: LD_INT 15
22806: DOUBLE
22807: EQUAL
22808: IFTRUE 22812
22810: GO 22823
22812: POP
// bc_type := b_factory ; 16 :
22813: LD_ADDR_OWVAR 42
22817: PUSH
22818: LD_INT 3
22820: ST_TO_ADDR
22821: GO 23202
22823: LD_INT 16
22825: DOUBLE
22826: EQUAL
22827: IFTRUE 22831
22829: GO 22842
22831: POP
// bc_type := b_ext_gun ; 17 :
22832: LD_ADDR_OWVAR 42
22836: PUSH
22837: LD_INT 17
22839: ST_TO_ADDR
22840: GO 23202
22842: LD_INT 17
22844: DOUBLE
22845: EQUAL
22846: IFTRUE 22850
22848: GO 22878
22850: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22851: LD_ADDR_OWVAR 42
22855: PUSH
22856: LD_INT 19
22858: PUSH
22859: LD_INT 23
22861: PUSH
22862: LD_INT 19
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: PUSH
22870: LD_VAR 0 1
22874: ARRAY
22875: ST_TO_ADDR
22876: GO 23202
22878: LD_INT 18
22880: DOUBLE
22881: EQUAL
22882: IFTRUE 22886
22884: GO 22897
22886: POP
// bc_type := b_ext_radar ; 19 :
22887: LD_ADDR_OWVAR 42
22891: PUSH
22892: LD_INT 20
22894: ST_TO_ADDR
22895: GO 23202
22897: LD_INT 19
22899: DOUBLE
22900: EQUAL
22901: IFTRUE 22905
22903: GO 22916
22905: POP
// bc_type := b_ext_radio ; 20 :
22906: LD_ADDR_OWVAR 42
22910: PUSH
22911: LD_INT 22
22913: ST_TO_ADDR
22914: GO 23202
22916: LD_INT 20
22918: DOUBLE
22919: EQUAL
22920: IFTRUE 22924
22922: GO 22935
22924: POP
// bc_type := b_ext_siberium ; 21 :
22925: LD_ADDR_OWVAR 42
22929: PUSH
22930: LD_INT 21
22932: ST_TO_ADDR
22933: GO 23202
22935: LD_INT 21
22937: DOUBLE
22938: EQUAL
22939: IFTRUE 22943
22941: GO 22954
22943: POP
// bc_type := b_ext_computer ; 22 :
22944: LD_ADDR_OWVAR 42
22948: PUSH
22949: LD_INT 24
22951: ST_TO_ADDR
22952: GO 23202
22954: LD_INT 22
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 22973
22962: POP
// bc_type := b_ext_track ; 23 :
22963: LD_ADDR_OWVAR 42
22967: PUSH
22968: LD_INT 16
22970: ST_TO_ADDR
22971: GO 23202
22973: LD_INT 23
22975: DOUBLE
22976: EQUAL
22977: IFTRUE 22981
22979: GO 22992
22981: POP
// bc_type := b_ext_laser ; 24 :
22982: LD_ADDR_OWVAR 42
22986: PUSH
22987: LD_INT 25
22989: ST_TO_ADDR
22990: GO 23202
22992: LD_INT 24
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23011
23000: POP
// bc_type := b_control_tower ; 25 :
23001: LD_ADDR_OWVAR 42
23005: PUSH
23006: LD_INT 36
23008: ST_TO_ADDR
23009: GO 23202
23011: LD_INT 25
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23030
23019: POP
// bc_type := b_breastwork ; 26 :
23020: LD_ADDR_OWVAR 42
23024: PUSH
23025: LD_INT 31
23027: ST_TO_ADDR
23028: GO 23202
23030: LD_INT 26
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23049
23038: POP
// bc_type := b_bunker ; 27 :
23039: LD_ADDR_OWVAR 42
23043: PUSH
23044: LD_INT 32
23046: ST_TO_ADDR
23047: GO 23202
23049: LD_INT 27
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23068
23057: POP
// bc_type := b_turret ; 28 :
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 33
23065: ST_TO_ADDR
23066: GO 23202
23068: LD_INT 28
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23087
23076: POP
// bc_type := b_armoury ; 29 :
23077: LD_ADDR_OWVAR 42
23081: PUSH
23082: LD_INT 4
23084: ST_TO_ADDR
23085: GO 23202
23087: LD_INT 29
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23106
23095: POP
// bc_type := b_barracks ; 30 :
23096: LD_ADDR_OWVAR 42
23100: PUSH
23101: LD_INT 5
23103: ST_TO_ADDR
23104: GO 23202
23106: LD_INT 30
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 23125
23114: POP
// bc_type := b_solar_power ; 31 :
23115: LD_ADDR_OWVAR 42
23119: PUSH
23120: LD_INT 27
23122: ST_TO_ADDR
23123: GO 23202
23125: LD_INT 31
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23144
23133: POP
// bc_type := b_oil_power ; 32 :
23134: LD_ADDR_OWVAR 42
23138: PUSH
23139: LD_INT 26
23141: ST_TO_ADDR
23142: GO 23202
23144: LD_INT 32
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23163
23152: POP
// bc_type := b_siberite_power ; 33 :
23153: LD_ADDR_OWVAR 42
23157: PUSH
23158: LD_INT 28
23160: ST_TO_ADDR
23161: GO 23202
23163: LD_INT 33
23165: DOUBLE
23166: EQUAL
23167: IFTRUE 23171
23169: GO 23182
23171: POP
// bc_type := b_oil_mine ; 34 :
23172: LD_ADDR_OWVAR 42
23176: PUSH
23177: LD_INT 29
23179: ST_TO_ADDR
23180: GO 23202
23182: LD_INT 34
23184: DOUBLE
23185: EQUAL
23186: IFTRUE 23190
23188: GO 23201
23190: POP
// bc_type := b_siberite_mine ; end ;
23191: LD_ADDR_OWVAR 42
23195: PUSH
23196: LD_INT 30
23198: ST_TO_ADDR
23199: GO 23202
23201: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23202: LD_ADDR_VAR 0 8
23206: PUSH
23207: LD_VAR 0 5
23211: PPUSH
23212: LD_VAR 0 6
23216: PPUSH
23217: LD_VAR 0 3
23221: PPUSH
23222: CALL_OW 47
23226: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23227: LD_OWVAR 42
23231: PUSH
23232: LD_INT 32
23234: PUSH
23235: LD_INT 33
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: IN
23242: IFFALSE 23258
// PlaceWeaponTurret ( b , weapon ) ;
23244: LD_VAR 0 8
23248: PPUSH
23249: LD_VAR 0 4
23253: PPUSH
23254: CALL_OW 431
// end ;
23258: LD_VAR 0 7
23262: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23263: LD_INT 0
23265: PPUSH
23266: PPUSH
23267: PPUSH
23268: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23269: LD_ADDR_VAR 0 4
23273: PUSH
23274: LD_INT 22
23276: PUSH
23277: LD_OWVAR 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 30
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: CALL_OW 69
23322: ST_TO_ADDR
// if not tmp then
23323: LD_VAR 0 4
23327: NOT
23328: IFFALSE 23332
// exit ;
23330: GO 23391
// for i in tmp do
23332: LD_ADDR_VAR 0 2
23336: PUSH
23337: LD_VAR 0 4
23341: PUSH
23342: FOR_IN
23343: IFFALSE 23389
// for j = 1 to 3 do
23345: LD_ADDR_VAR 0 3
23349: PUSH
23350: DOUBLE
23351: LD_INT 1
23353: DEC
23354: ST_TO_ADDR
23355: LD_INT 3
23357: PUSH
23358: FOR_TO
23359: IFFALSE 23385
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23361: LD_VAR 0 2
23365: PPUSH
23366: CALL_OW 274
23370: PPUSH
23371: LD_VAR 0 3
23375: PPUSH
23376: LD_INT 99999
23378: PPUSH
23379: CALL_OW 277
23383: GO 23358
23385: POP
23386: POP
23387: GO 23342
23389: POP
23390: POP
// end ;
23391: LD_VAR 0 1
23395: RET
// export function hHackSetLevel10 ; var i , j ; begin
23396: LD_INT 0
23398: PPUSH
23399: PPUSH
23400: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23401: LD_ADDR_VAR 0 2
23405: PUSH
23406: LD_INT 21
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PPUSH
23416: CALL_OW 69
23420: PUSH
23421: FOR_IN
23422: IFFALSE 23474
// if IsSelected ( i ) then
23424: LD_VAR 0 2
23428: PPUSH
23429: CALL_OW 306
23433: IFFALSE 23472
// begin for j := 1 to 4 do
23435: LD_ADDR_VAR 0 3
23439: PUSH
23440: DOUBLE
23441: LD_INT 1
23443: DEC
23444: ST_TO_ADDR
23445: LD_INT 4
23447: PUSH
23448: FOR_TO
23449: IFFALSE 23470
// SetSkill ( i , j , 10 ) ;
23451: LD_VAR 0 2
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: LD_INT 10
23463: PPUSH
23464: CALL_OW 237
23468: GO 23448
23470: POP
23471: POP
// end ;
23472: GO 23421
23474: POP
23475: POP
// end ;
23476: LD_VAR 0 1
23480: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23481: LD_INT 0
23483: PPUSH
23484: PPUSH
23485: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_INT 22
23493: PUSH
23494: LD_OWVAR 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 21
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PPUSH
23517: CALL_OW 69
23521: PUSH
23522: FOR_IN
23523: IFFALSE 23564
// begin for j := 1 to 4 do
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: DOUBLE
23531: LD_INT 1
23533: DEC
23534: ST_TO_ADDR
23535: LD_INT 4
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23560
// SetSkill ( i , j , 10 ) ;
23541: LD_VAR 0 2
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: LD_INT 10
23553: PPUSH
23554: CALL_OW 237
23558: GO 23538
23560: POP
23561: POP
// end ;
23562: GO 23522
23564: POP
23565: POP
// end ;
23566: LD_VAR 0 1
23570: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23571: LD_INT 0
23573: PPUSH
// uc_side := your_side ;
23574: LD_ADDR_OWVAR 20
23578: PUSH
23579: LD_OWVAR 2
23583: ST_TO_ADDR
// uc_nation := nation ;
23584: LD_ADDR_OWVAR 21
23588: PUSH
23589: LD_VAR 0 1
23593: ST_TO_ADDR
// InitHc ;
23594: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23598: LD_INT 0
23600: PPUSH
23601: LD_VAR 0 2
23605: PPUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23615: LD_VAR 0 4
23619: PPUSH
23620: LD_VAR 0 5
23624: PPUSH
23625: CALL_OW 428
23629: PUSH
23630: LD_INT 0
23632: EQUAL
23633: IFFALSE 23657
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23635: CALL_OW 44
23639: PPUSH
23640: LD_VAR 0 4
23644: PPUSH
23645: LD_VAR 0 5
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: CALL_OW 48
// end ;
23657: LD_VAR 0 6
23661: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23662: LD_INT 0
23664: PPUSH
23665: PPUSH
// uc_side := your_side ;
23666: LD_ADDR_OWVAR 20
23670: PUSH
23671: LD_OWVAR 2
23675: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23676: LD_VAR 0 1
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 2
23686: PUSH
23687: LD_INT 3
23689: PUSH
23690: LD_INT 4
23692: PUSH
23693: LD_INT 5
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: IN
23703: IFFALSE 23715
// uc_nation := nation_american else
23705: LD_ADDR_OWVAR 21
23709: PUSH
23710: LD_INT 1
23712: ST_TO_ADDR
23713: GO 23758
// if chassis in [ 11 , 12 , 13 , 14 ] then
23715: LD_VAR 0 1
23719: PUSH
23720: LD_INT 11
23722: PUSH
23723: LD_INT 12
23725: PUSH
23726: LD_INT 13
23728: PUSH
23729: LD_INT 14
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: IN
23738: IFFALSE 23750
// uc_nation := nation_arabian else
23740: LD_ADDR_OWVAR 21
23744: PUSH
23745: LD_INT 2
23747: ST_TO_ADDR
23748: GO 23758
// uc_nation := nation_russian ;
23750: LD_ADDR_OWVAR 21
23754: PUSH
23755: LD_INT 3
23757: ST_TO_ADDR
// vc_chassis := chassis ;
23758: LD_ADDR_OWVAR 37
23762: PUSH
23763: LD_VAR 0 1
23767: ST_TO_ADDR
// vc_engine := engine ;
23768: LD_ADDR_OWVAR 39
23772: PUSH
23773: LD_VAR 0 2
23777: ST_TO_ADDR
// vc_control := control ;
23778: LD_ADDR_OWVAR 38
23782: PUSH
23783: LD_VAR 0 3
23787: ST_TO_ADDR
// vc_weapon := weapon ;
23788: LD_ADDR_OWVAR 40
23792: PUSH
23793: LD_VAR 0 4
23797: ST_TO_ADDR
// un := CreateVehicle ;
23798: LD_ADDR_VAR 0 8
23802: PUSH
23803: CALL_OW 45
23807: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23808: LD_VAR 0 8
23812: PPUSH
23813: LD_INT 0
23815: PPUSH
23816: LD_INT 5
23818: PPUSH
23819: CALL_OW 12
23823: PPUSH
23824: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23828: LD_VAR 0 8
23832: PPUSH
23833: LD_VAR 0 5
23837: PPUSH
23838: LD_VAR 0 6
23842: PPUSH
23843: LD_INT 1
23845: PPUSH
23846: CALL_OW 48
// end ;
23850: LD_VAR 0 7
23854: RET
// export hInvincible ; every 1 do
23855: GO 23857
23857: DISABLE
// hInvincible := [ ] ;
23858: LD_ADDR_EXP 86
23862: PUSH
23863: EMPTY
23864: ST_TO_ADDR
23865: END
// every 10 do var i ;
23866: GO 23868
23868: DISABLE
23869: LD_INT 0
23871: PPUSH
// begin enable ;
23872: ENABLE
// if not hInvincible then
23873: LD_EXP 86
23877: NOT
23878: IFFALSE 23882
// exit ;
23880: GO 23926
// for i in hInvincible do
23882: LD_ADDR_VAR 0 1
23886: PUSH
23887: LD_EXP 86
23891: PUSH
23892: FOR_IN
23893: IFFALSE 23924
// if GetLives ( i ) < 1000 then
23895: LD_VAR 0 1
23899: PPUSH
23900: CALL_OW 256
23904: PUSH
23905: LD_INT 1000
23907: LESS
23908: IFFALSE 23922
// SetLives ( i , 1000 ) ;
23910: LD_VAR 0 1
23914: PPUSH
23915: LD_INT 1000
23917: PPUSH
23918: CALL_OW 234
23922: GO 23892
23924: POP
23925: POP
// end ;
23926: PPOPN 1
23928: END
// export function hHackInvincible ; var i ; begin
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23933: LD_ADDR_VAR 0 2
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: LD_INT 21
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 21
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: PPUSH
23966: CALL_OW 69
23970: PUSH
23971: FOR_IN
23972: IFFALSE 24033
// if IsSelected ( i ) then
23974: LD_VAR 0 2
23978: PPUSH
23979: CALL_OW 306
23983: IFFALSE 24031
// begin if i in hInvincible then
23985: LD_VAR 0 2
23989: PUSH
23990: LD_EXP 86
23994: IN
23995: IFFALSE 24015
// hInvincible := hInvincible diff i else
23997: LD_ADDR_EXP 86
24001: PUSH
24002: LD_EXP 86
24006: PUSH
24007: LD_VAR 0 2
24011: DIFF
24012: ST_TO_ADDR
24013: GO 24031
// hInvincible := hInvincible union i ;
24015: LD_ADDR_EXP 86
24019: PUSH
24020: LD_EXP 86
24024: PUSH
24025: LD_VAR 0 2
24029: UNION
24030: ST_TO_ADDR
// end ;
24031: GO 23971
24033: POP
24034: POP
// end ;
24035: LD_VAR 0 1
24039: RET
// export function hHackInvisible ; var i , j ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
24044: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24045: LD_ADDR_VAR 0 2
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PPUSH
24060: CALL_OW 69
24064: PUSH
24065: FOR_IN
24066: IFFALSE 24090
// if IsSelected ( i ) then
24068: LD_VAR 0 2
24072: PPUSH
24073: CALL_OW 306
24077: IFFALSE 24088
// ComForceInvisible ( i ) ;
24079: LD_VAR 0 2
24083: PPUSH
24084: CALL_OW 496
24088: GO 24065
24090: POP
24091: POP
// end ;
24092: LD_VAR 0 1
24096: RET
// export function hHackChangeYourSide ; begin
24097: LD_INT 0
24099: PPUSH
// if your_side = 8 then
24100: LD_OWVAR 2
24104: PUSH
24105: LD_INT 8
24107: EQUAL
24108: IFFALSE 24120
// your_side := 0 else
24110: LD_ADDR_OWVAR 2
24114: PUSH
24115: LD_INT 0
24117: ST_TO_ADDR
24118: GO 24134
// your_side := your_side + 1 ;
24120: LD_ADDR_OWVAR 2
24124: PUSH
24125: LD_OWVAR 2
24129: PUSH
24130: LD_INT 1
24132: PLUS
24133: ST_TO_ADDR
// end ;
24134: LD_VAR 0 1
24138: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24139: LD_INT 0
24141: PPUSH
24142: PPUSH
24143: PPUSH
// for i in all_units do
24144: LD_ADDR_VAR 0 2
24148: PUSH
24149: LD_OWVAR 3
24153: PUSH
24154: FOR_IN
24155: IFFALSE 24233
// if IsSelected ( i ) then
24157: LD_VAR 0 2
24161: PPUSH
24162: CALL_OW 306
24166: IFFALSE 24231
// begin j := GetSide ( i ) ;
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: LD_VAR 0 2
24177: PPUSH
24178: CALL_OW 255
24182: ST_TO_ADDR
// if j = 8 then
24183: LD_VAR 0 3
24187: PUSH
24188: LD_INT 8
24190: EQUAL
24191: IFFALSE 24203
// j := 0 else
24193: LD_ADDR_VAR 0 3
24197: PUSH
24198: LD_INT 0
24200: ST_TO_ADDR
24201: GO 24217
// j := j + 1 ;
24203: LD_ADDR_VAR 0 3
24207: PUSH
24208: LD_VAR 0 3
24212: PUSH
24213: LD_INT 1
24215: PLUS
24216: ST_TO_ADDR
// SetSide ( i , j ) ;
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 3
24226: PPUSH
24227: CALL_OW 235
// end ;
24231: GO 24154
24233: POP
24234: POP
// end ;
24235: LD_VAR 0 1
24239: RET
// export function hHackFog ; begin
24240: LD_INT 0
24242: PPUSH
// FogOff ( true ) ;
24243: LD_INT 1
24245: PPUSH
24246: CALL_OW 344
// end ;
24250: LD_VAR 0 1
24254: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24255: LD_INT 0
24257: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24258: LD_VAR 0 1
24262: PPUSH
24263: LD_VAR 0 2
24267: PPUSH
24268: LD_VAR 0 3
24272: PPUSH
24273: LD_INT 1
24275: PPUSH
24276: LD_INT 1
24278: PPUSH
24279: CALL_OW 483
// CenterOnXY ( x , y ) ;
24283: LD_VAR 0 2
24287: PPUSH
24288: LD_VAR 0 3
24292: PPUSH
24293: CALL_OW 84
// end ; end_of_file
24297: LD_VAR 0 4
24301: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24302: LD_INT 0
24304: PPUSH
24305: PPUSH
24306: PPUSH
24307: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24308: LD_VAR 0 1
24312: PPUSH
24313: CALL_OW 264
24317: PUSH
24318: LD_EXP 18
24322: EQUAL
24323: IFFALSE 24395
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24325: LD_INT 68
24327: PPUSH
24328: LD_VAR 0 1
24332: PPUSH
24333: CALL_OW 255
24337: PPUSH
24338: CALL_OW 321
24342: PUSH
24343: LD_INT 2
24345: EQUAL
24346: IFFALSE 24358
// eff := 70 else
24348: LD_ADDR_VAR 0 4
24352: PUSH
24353: LD_INT 70
24355: ST_TO_ADDR
24356: GO 24366
// eff := 30 ;
24358: LD_ADDR_VAR 0 4
24362: PUSH
24363: LD_INT 30
24365: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 250
24375: PPUSH
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL_OW 251
24385: PPUSH
24386: LD_VAR 0 4
24390: PPUSH
24391: CALL_OW 495
// end ; end ;
24395: LD_VAR 0 2
24399: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24400: LD_INT 0
24402: PPUSH
// end ;
24403: LD_VAR 0 4
24407: RET
// export function SOS_Command ( cmd ) ; begin
24408: LD_INT 0
24410: PPUSH
// end ;
24411: LD_VAR 0 2
24415: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24416: LD_INT 0
24418: PPUSH
// if cmd = 121 then
24419: LD_VAR 0 1
24423: PUSH
24424: LD_INT 121
24426: EQUAL
24427: IFFALSE 24429
// end ;
24429: LD_VAR 0 6
24433: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24434: LD_INT 0
24436: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24437: LD_VAR 0 1
24441: PUSH
24442: LD_INT 250
24444: EQUAL
24445: PUSH
24446: LD_VAR 0 2
24450: PPUSH
24451: CALL_OW 264
24455: PUSH
24456: LD_EXP 21
24460: EQUAL
24461: AND
24462: IFFALSE 24483
// MinerPlaceMine ( unit , x , y ) ;
24464: LD_VAR 0 2
24468: PPUSH
24469: LD_VAR 0 4
24473: PPUSH
24474: LD_VAR 0 5
24478: PPUSH
24479: CALL 26832 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24483: LD_VAR 0 1
24487: PUSH
24488: LD_INT 251
24490: EQUAL
24491: PUSH
24492: LD_VAR 0 2
24496: PPUSH
24497: CALL_OW 264
24501: PUSH
24502: LD_EXP 21
24506: EQUAL
24507: AND
24508: IFFALSE 24529
// MinerDetonateMine ( unit , x , y ) ;
24510: LD_VAR 0 2
24514: PPUSH
24515: LD_VAR 0 4
24519: PPUSH
24520: LD_VAR 0 5
24524: PPUSH
24525: CALL 27109 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24529: LD_VAR 0 1
24533: PUSH
24534: LD_INT 252
24536: EQUAL
24537: PUSH
24538: LD_VAR 0 2
24542: PPUSH
24543: CALL_OW 264
24547: PUSH
24548: LD_EXP 21
24552: EQUAL
24553: AND
24554: IFFALSE 24575
// MinerCreateMinefield ( unit , x , y ) ;
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_VAR 0 4
24565: PPUSH
24566: LD_VAR 0 5
24570: PPUSH
24571: CALL 27526 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24575: LD_VAR 0 1
24579: PUSH
24580: LD_INT 253
24582: EQUAL
24583: PUSH
24584: LD_VAR 0 2
24588: PPUSH
24589: CALL_OW 257
24593: PUSH
24594: LD_INT 5
24596: EQUAL
24597: AND
24598: IFFALSE 24619
// ComBinocular ( unit , x , y ) ;
24600: LD_VAR 0 2
24604: PPUSH
24605: LD_VAR 0 4
24609: PPUSH
24610: LD_VAR 0 5
24614: PPUSH
24615: CALL 27897 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24619: LD_VAR 0 1
24623: PUSH
24624: LD_INT 254
24626: EQUAL
24627: PUSH
24628: LD_VAR 0 2
24632: PPUSH
24633: CALL_OW 264
24637: PUSH
24638: LD_EXP 16
24642: EQUAL
24643: AND
24644: PUSH
24645: LD_VAR 0 3
24649: PPUSH
24650: CALL_OW 263
24654: PUSH
24655: LD_INT 3
24657: EQUAL
24658: AND
24659: IFFALSE 24675
// HackDestroyVehicle ( unit , selectedUnit ) ;
24661: LD_VAR 0 2
24665: PPUSH
24666: LD_VAR 0 3
24670: PPUSH
24671: CALL 26192 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24675: LD_VAR 0 1
24679: PUSH
24680: LD_INT 255
24682: EQUAL
24683: PUSH
24684: LD_VAR 0 2
24688: PPUSH
24689: CALL_OW 264
24693: PUSH
24694: LD_INT 14
24696: PUSH
24697: LD_INT 53
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: IN
24704: AND
24705: PUSH
24706: LD_VAR 0 4
24710: PPUSH
24711: LD_VAR 0 5
24715: PPUSH
24716: CALL_OW 488
24720: AND
24721: IFFALSE 24745
// CutTreeXYR ( unit , x , y , 12 ) ;
24723: LD_VAR 0 2
24727: PPUSH
24728: LD_VAR 0 4
24732: PPUSH
24733: LD_VAR 0 5
24737: PPUSH
24738: LD_INT 12
24740: PPUSH
24741: CALL 24758 0 4
// end ;
24745: LD_VAR 0 6
24749: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24750: LD_INT 0
24752: PPUSH
// end ;
24753: LD_VAR 0 4
24757: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24769: LD_VAR 0 1
24773: NOT
24774: PUSH
24775: LD_VAR 0 2
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: CALL_OW 488
24789: NOT
24790: OR
24791: PUSH
24792: LD_VAR 0 4
24796: NOT
24797: OR
24798: IFFALSE 24802
// exit ;
24800: GO 25142
// list := [ ] ;
24802: LD_ADDR_VAR 0 13
24806: PUSH
24807: EMPTY
24808: ST_TO_ADDR
// if x - r < 0 then
24809: LD_VAR 0 2
24813: PUSH
24814: LD_VAR 0 4
24818: MINUS
24819: PUSH
24820: LD_INT 0
24822: LESS
24823: IFFALSE 24835
// min_x := 0 else
24825: LD_ADDR_VAR 0 7
24829: PUSH
24830: LD_INT 0
24832: ST_TO_ADDR
24833: GO 24851
// min_x := x - r ;
24835: LD_ADDR_VAR 0 7
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: LD_VAR 0 4
24849: MINUS
24850: ST_TO_ADDR
// if y - r < 0 then
24851: LD_VAR 0 3
24855: PUSH
24856: LD_VAR 0 4
24860: MINUS
24861: PUSH
24862: LD_INT 0
24864: LESS
24865: IFFALSE 24877
// min_y := 0 else
24867: LD_ADDR_VAR 0 8
24871: PUSH
24872: LD_INT 0
24874: ST_TO_ADDR
24875: GO 24893
// min_y := y - r ;
24877: LD_ADDR_VAR 0 8
24881: PUSH
24882: LD_VAR 0 3
24886: PUSH
24887: LD_VAR 0 4
24891: MINUS
24892: ST_TO_ADDR
// max_x := x + r ;
24893: LD_ADDR_VAR 0 9
24897: PUSH
24898: LD_VAR 0 2
24902: PUSH
24903: LD_VAR 0 4
24907: PLUS
24908: ST_TO_ADDR
// max_y := y + r ;
24909: LD_ADDR_VAR 0 10
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_VAR 0 4
24923: PLUS
24924: ST_TO_ADDR
// for _x = min_x to max_x do
24925: LD_ADDR_VAR 0 11
24929: PUSH
24930: DOUBLE
24931: LD_VAR 0 7
24935: DEC
24936: ST_TO_ADDR
24937: LD_VAR 0 9
24941: PUSH
24942: FOR_TO
24943: IFFALSE 25060
// for _y = min_y to max_y do
24945: LD_ADDR_VAR 0 12
24949: PUSH
24950: DOUBLE
24951: LD_VAR 0 8
24955: DEC
24956: ST_TO_ADDR
24957: LD_VAR 0 10
24961: PUSH
24962: FOR_TO
24963: IFFALSE 25056
// begin if not ValidHex ( _x , _y ) then
24965: LD_VAR 0 11
24969: PPUSH
24970: LD_VAR 0 12
24974: PPUSH
24975: CALL_OW 488
24979: NOT
24980: IFFALSE 24984
// continue ;
24982: GO 24962
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24984: LD_VAR 0 11
24988: PPUSH
24989: LD_VAR 0 12
24993: PPUSH
24994: CALL_OW 351
24998: PUSH
24999: LD_VAR 0 11
25003: PPUSH
25004: LD_VAR 0 12
25008: PPUSH
25009: CALL_OW 554
25013: AND
25014: IFFALSE 25054
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25016: LD_ADDR_VAR 0 13
25020: PUSH
25021: LD_VAR 0 13
25025: PPUSH
25026: LD_VAR 0 13
25030: PUSH
25031: LD_INT 1
25033: PLUS
25034: PPUSH
25035: LD_VAR 0 11
25039: PUSH
25040: LD_VAR 0 12
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 2
25053: ST_TO_ADDR
// end ;
25054: GO 24962
25056: POP
25057: POP
25058: GO 24942
25060: POP
25061: POP
// if not list then
25062: LD_VAR 0 13
25066: NOT
25067: IFFALSE 25071
// exit ;
25069: GO 25142
// for i in list do
25071: LD_ADDR_VAR 0 6
25075: PUSH
25076: LD_VAR 0 13
25080: PUSH
25081: FOR_IN
25082: IFFALSE 25140
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25084: LD_VAR 0 1
25088: PPUSH
25089: LD_STRING M
25091: PUSH
25092: LD_VAR 0 6
25096: PUSH
25097: LD_INT 1
25099: ARRAY
25100: PUSH
25101: LD_VAR 0 6
25105: PUSH
25106: LD_INT 2
25108: ARRAY
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: PUSH
25131: EMPTY
25132: LIST
25133: PPUSH
25134: CALL_OW 447
25138: GO 25081
25140: POP
25141: POP
// end ;
25142: LD_VAR 0 5
25146: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25147: LD_EXP 89
25151: NOT
25152: IFFALSE 25202
25154: GO 25156
25156: DISABLE
// begin initHack := true ;
25157: LD_ADDR_EXP 89
25161: PUSH
25162: LD_INT 1
25164: ST_TO_ADDR
// hackTanks := [ ] ;
25165: LD_ADDR_EXP 90
25169: PUSH
25170: EMPTY
25171: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25172: LD_ADDR_EXP 91
25176: PUSH
25177: EMPTY
25178: ST_TO_ADDR
// hackLimit := 3 ;
25179: LD_ADDR_EXP 92
25183: PUSH
25184: LD_INT 3
25186: ST_TO_ADDR
// hackDist := 12 ;
25187: LD_ADDR_EXP 93
25191: PUSH
25192: LD_INT 12
25194: ST_TO_ADDR
// hackCounter := [ ] ;
25195: LD_ADDR_EXP 94
25199: PUSH
25200: EMPTY
25201: ST_TO_ADDR
// end ;
25202: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25203: LD_EXP 89
25207: PUSH
25208: LD_INT 34
25210: PUSH
25211: LD_EXP 16
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PPUSH
25220: CALL_OW 69
25224: AND
25225: IFFALSE 25480
25227: GO 25229
25229: DISABLE
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
// begin enable ;
25234: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25235: LD_ADDR_VAR 0 1
25239: PUSH
25240: LD_INT 34
25242: PUSH
25243: LD_EXP 16
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PPUSH
25252: CALL_OW 69
25256: PUSH
25257: FOR_IN
25258: IFFALSE 25478
// begin if not i in hackTanks then
25260: LD_VAR 0 1
25264: PUSH
25265: LD_EXP 90
25269: IN
25270: NOT
25271: IFFALSE 25354
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25273: LD_ADDR_EXP 90
25277: PUSH
25278: LD_EXP 90
25282: PPUSH
25283: LD_EXP 90
25287: PUSH
25288: LD_INT 1
25290: PLUS
25291: PPUSH
25292: LD_VAR 0 1
25296: PPUSH
25297: CALL_OW 1
25301: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25302: LD_ADDR_EXP 91
25306: PUSH
25307: LD_EXP 91
25311: PPUSH
25312: LD_EXP 91
25316: PUSH
25317: LD_INT 1
25319: PLUS
25320: PPUSH
25321: EMPTY
25322: PPUSH
25323: CALL_OW 1
25327: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25328: LD_ADDR_EXP 94
25332: PUSH
25333: LD_EXP 94
25337: PPUSH
25338: LD_EXP 94
25342: PUSH
25343: LD_INT 1
25345: PLUS
25346: PPUSH
25347: EMPTY
25348: PPUSH
25349: CALL_OW 1
25353: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 302
25363: NOT
25364: IFFALSE 25377
// begin HackUnlinkAll ( i ) ;
25366: LD_VAR 0 1
25370: PPUSH
25371: CALL 25483 0 1
// continue ;
25375: GO 25257
// end ; HackCheckCapturedStatus ( i ) ;
25377: LD_VAR 0 1
25381: PPUSH
25382: CALL 25926 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25386: LD_ADDR_VAR 0 2
25390: PUSH
25391: LD_INT 81
25393: PUSH
25394: LD_VAR 0 1
25398: PPUSH
25399: CALL_OW 255
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 33
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 91
25420: PUSH
25421: LD_VAR 0 1
25425: PUSH
25426: LD_EXP 93
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 50
25438: PUSH
25439: EMPTY
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 69
25452: ST_TO_ADDR
// if not tmp then
25453: LD_VAR 0 2
25457: NOT
25458: IFFALSE 25462
// continue ;
25460: GO 25257
// HackLink ( i , tmp ) ;
25462: LD_VAR 0 1
25466: PPUSH
25467: LD_VAR 0 2
25471: PPUSH
25472: CALL 25619 0 2
// end ;
25476: GO 25257
25478: POP
25479: POP
// end ;
25480: PPOPN 2
25482: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25483: LD_INT 0
25485: PPUSH
25486: PPUSH
25487: PPUSH
// if not hack in hackTanks then
25488: LD_VAR 0 1
25492: PUSH
25493: LD_EXP 90
25497: IN
25498: NOT
25499: IFFALSE 25503
// exit ;
25501: GO 25614
// index := GetElementIndex ( hackTanks , hack ) ;
25503: LD_ADDR_VAR 0 4
25507: PUSH
25508: LD_EXP 90
25512: PPUSH
25513: LD_VAR 0 1
25517: PPUSH
25518: CALL 33048 0 2
25522: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25523: LD_EXP 91
25527: PUSH
25528: LD_VAR 0 4
25532: ARRAY
25533: IFFALSE 25614
// begin for i in hackTanksCaptured [ index ] do
25535: LD_ADDR_VAR 0 3
25539: PUSH
25540: LD_EXP 91
25544: PUSH
25545: LD_VAR 0 4
25549: ARRAY
25550: PUSH
25551: FOR_IN
25552: IFFALSE 25578
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25554: LD_VAR 0 3
25558: PUSH
25559: LD_INT 1
25561: ARRAY
25562: PPUSH
25563: LD_VAR 0 3
25567: PUSH
25568: LD_INT 2
25570: ARRAY
25571: PPUSH
25572: CALL_OW 235
25576: GO 25551
25578: POP
25579: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25580: LD_ADDR_EXP 91
25584: PUSH
25585: LD_EXP 91
25589: PPUSH
25590: LD_VAR 0 4
25594: PPUSH
25595: EMPTY
25596: PPUSH
25597: CALL_OW 1
25601: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25602: LD_VAR 0 1
25606: PPUSH
25607: LD_INT 0
25609: PPUSH
25610: CALL_OW 505
// end ; end ;
25614: LD_VAR 0 2
25618: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
25623: PPUSH
// if not hack in hackTanks or not vehicles then
25624: LD_VAR 0 1
25628: PUSH
25629: LD_EXP 90
25633: IN
25634: NOT
25635: PUSH
25636: LD_VAR 0 2
25640: NOT
25641: OR
25642: IFFALSE 25646
// exit ;
25644: GO 25921
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25646: LD_ADDR_VAR 0 2
25650: PUSH
25651: LD_VAR 0 1
25655: PPUSH
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 1
25663: PPUSH
25664: LD_INT 1
25666: PPUSH
25667: CALL 33698 0 4
25671: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25672: LD_ADDR_VAR 0 5
25676: PUSH
25677: LD_EXP 90
25681: PPUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL 33048 0 2
25691: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25692: LD_EXP 91
25696: PUSH
25697: LD_VAR 0 5
25701: ARRAY
25702: PUSH
25703: LD_EXP 92
25707: LESS
25708: IFFALSE 25897
// begin for i := 1 to vehicles do
25710: LD_ADDR_VAR 0 4
25714: PUSH
25715: DOUBLE
25716: LD_INT 1
25718: DEC
25719: ST_TO_ADDR
25720: LD_VAR 0 2
25724: PUSH
25725: FOR_TO
25726: IFFALSE 25895
// begin if hackTanksCaptured [ index ] = hackLimit then
25728: LD_EXP 91
25732: PUSH
25733: LD_VAR 0 5
25737: ARRAY
25738: PUSH
25739: LD_EXP 92
25743: EQUAL
25744: IFFALSE 25748
// break ;
25746: GO 25895
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25748: LD_ADDR_EXP 94
25752: PUSH
25753: LD_EXP 94
25757: PPUSH
25758: LD_VAR 0 5
25762: PPUSH
25763: LD_EXP 94
25767: PUSH
25768: LD_VAR 0 5
25772: ARRAY
25773: PUSH
25774: LD_INT 1
25776: PLUS
25777: PPUSH
25778: CALL_OW 1
25782: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25783: LD_ADDR_EXP 91
25787: PUSH
25788: LD_EXP 91
25792: PPUSH
25793: LD_VAR 0 5
25797: PUSH
25798: LD_EXP 91
25802: PUSH
25803: LD_VAR 0 5
25807: ARRAY
25808: PUSH
25809: LD_INT 1
25811: PLUS
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PPUSH
25817: LD_VAR 0 2
25821: PUSH
25822: LD_VAR 0 4
25826: ARRAY
25827: PUSH
25828: LD_VAR 0 2
25832: PUSH
25833: LD_VAR 0 4
25837: ARRAY
25838: PPUSH
25839: CALL_OW 255
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PPUSH
25848: CALL 33263 0 3
25852: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25853: LD_VAR 0 2
25857: PUSH
25858: LD_VAR 0 4
25862: ARRAY
25863: PPUSH
25864: LD_VAR 0 1
25868: PPUSH
25869: CALL_OW 255
25873: PPUSH
25874: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25878: LD_VAR 0 2
25882: PUSH
25883: LD_VAR 0 4
25887: ARRAY
25888: PPUSH
25889: CALL_OW 141
// end ;
25893: GO 25725
25895: POP
25896: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25897: LD_VAR 0 1
25901: PPUSH
25902: LD_EXP 91
25906: PUSH
25907: LD_VAR 0 5
25911: ARRAY
25912: PUSH
25913: LD_INT 0
25915: PLUS
25916: PPUSH
25917: CALL_OW 505
// end ;
25921: LD_VAR 0 3
25925: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25926: LD_INT 0
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
// if not hack in hackTanks then
25932: LD_VAR 0 1
25936: PUSH
25937: LD_EXP 90
25941: IN
25942: NOT
25943: IFFALSE 25947
// exit ;
25945: GO 26187
// index := GetElementIndex ( hackTanks , hack ) ;
25947: LD_ADDR_VAR 0 4
25951: PUSH
25952: LD_EXP 90
25956: PPUSH
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL 33048 0 2
25966: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25967: LD_ADDR_VAR 0 3
25971: PUSH
25972: DOUBLE
25973: LD_EXP 91
25977: PUSH
25978: LD_VAR 0 4
25982: ARRAY
25983: INC
25984: ST_TO_ADDR
25985: LD_INT 1
25987: PUSH
25988: FOR_DOWNTO
25989: IFFALSE 26161
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25991: LD_ADDR_VAR 0 5
25995: PUSH
25996: LD_EXP 91
26000: PUSH
26001: LD_VAR 0 4
26005: ARRAY
26006: PUSH
26007: LD_VAR 0 3
26011: ARRAY
26012: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26013: LD_VAR 0 5
26017: PUSH
26018: LD_INT 1
26020: ARRAY
26021: PPUSH
26022: CALL_OW 302
26026: NOT
26027: PUSH
26028: LD_VAR 0 5
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: CALL_OW 255
26041: PUSH
26042: LD_VAR 0 1
26046: PPUSH
26047: CALL_OW 255
26051: NONEQUAL
26052: OR
26053: IFFALSE 26159
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26055: LD_VAR 0 5
26059: PUSH
26060: LD_INT 1
26062: ARRAY
26063: PPUSH
26064: CALL_OW 305
26068: PUSH
26069: LD_VAR 0 5
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: CALL_OW 255
26082: PUSH
26083: LD_VAR 0 1
26087: PPUSH
26088: CALL_OW 255
26092: EQUAL
26093: AND
26094: IFFALSE 26118
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26096: LD_VAR 0 5
26100: PUSH
26101: LD_INT 1
26103: ARRAY
26104: PPUSH
26105: LD_VAR 0 5
26109: PUSH
26110: LD_INT 2
26112: ARRAY
26113: PPUSH
26114: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26118: LD_ADDR_EXP 91
26122: PUSH
26123: LD_EXP 91
26127: PPUSH
26128: LD_VAR 0 4
26132: PPUSH
26133: LD_EXP 91
26137: PUSH
26138: LD_VAR 0 4
26142: ARRAY
26143: PPUSH
26144: LD_VAR 0 3
26148: PPUSH
26149: CALL_OW 3
26153: PPUSH
26154: CALL_OW 1
26158: ST_TO_ADDR
// end ; end ;
26159: GO 25988
26161: POP
26162: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26163: LD_VAR 0 1
26167: PPUSH
26168: LD_EXP 91
26172: PUSH
26173: LD_VAR 0 4
26177: ARRAY
26178: PUSH
26179: LD_INT 0
26181: PLUS
26182: PPUSH
26183: CALL_OW 505
// end ;
26187: LD_VAR 0 2
26191: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26192: LD_INT 0
26194: PPUSH
26195: PPUSH
26196: PPUSH
26197: PPUSH
// if not hack in hackTanks then
26198: LD_VAR 0 1
26202: PUSH
26203: LD_EXP 90
26207: IN
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26298
// index := GetElementIndex ( hackTanks , hack ) ;
26213: LD_ADDR_VAR 0 5
26217: PUSH
26218: LD_EXP 90
26222: PPUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL 33048 0 2
26232: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26233: LD_ADDR_VAR 0 4
26237: PUSH
26238: DOUBLE
26239: LD_INT 1
26241: DEC
26242: ST_TO_ADDR
26243: LD_EXP 91
26247: PUSH
26248: LD_VAR 0 5
26252: ARRAY
26253: PUSH
26254: FOR_TO
26255: IFFALSE 26296
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26257: LD_EXP 91
26261: PUSH
26262: LD_VAR 0 5
26266: ARRAY
26267: PUSH
26268: LD_VAR 0 4
26272: ARRAY
26273: PUSH
26274: LD_INT 1
26276: ARRAY
26277: PUSH
26278: LD_VAR 0 2
26282: EQUAL
26283: IFFALSE 26294
// KillUnit ( vehicle ) ;
26285: LD_VAR 0 2
26289: PPUSH
26290: CALL_OW 66
26294: GO 26254
26296: POP
26297: POP
// end ;
26298: LD_VAR 0 3
26302: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26303: LD_EXP 95
26307: NOT
26308: IFFALSE 26343
26310: GO 26312
26312: DISABLE
// begin initMiner := true ;
26313: LD_ADDR_EXP 95
26317: PUSH
26318: LD_INT 1
26320: ST_TO_ADDR
// minersList := [ ] ;
26321: LD_ADDR_EXP 96
26325: PUSH
26326: EMPTY
26327: ST_TO_ADDR
// minerMinesList := [ ] ;
26328: LD_ADDR_EXP 97
26332: PUSH
26333: EMPTY
26334: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26335: LD_ADDR_EXP 98
26339: PUSH
26340: LD_INT 5
26342: ST_TO_ADDR
// end ;
26343: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26344: LD_EXP 95
26348: PUSH
26349: LD_INT 34
26351: PUSH
26352: LD_EXP 21
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL_OW 69
26365: AND
26366: IFFALSE 26829
26368: GO 26370
26370: DISABLE
26371: LD_INT 0
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
// begin enable ;
26377: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26378: LD_ADDR_VAR 0 1
26382: PUSH
26383: LD_INT 34
26385: PUSH
26386: LD_EXP 21
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PPUSH
26395: CALL_OW 69
26399: PUSH
26400: FOR_IN
26401: IFFALSE 26473
// begin if not i in minersList then
26403: LD_VAR 0 1
26407: PUSH
26408: LD_EXP 96
26412: IN
26413: NOT
26414: IFFALSE 26471
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26416: LD_ADDR_EXP 96
26420: PUSH
26421: LD_EXP 96
26425: PPUSH
26426: LD_EXP 96
26430: PUSH
26431: LD_INT 1
26433: PLUS
26434: PPUSH
26435: LD_VAR 0 1
26439: PPUSH
26440: CALL_OW 1
26444: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26445: LD_ADDR_EXP 97
26449: PUSH
26450: LD_EXP 97
26454: PPUSH
26455: LD_EXP 97
26459: PUSH
26460: LD_INT 1
26462: PLUS
26463: PPUSH
26464: EMPTY
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// end end ;
26471: GO 26400
26473: POP
26474: POP
// for i := minerMinesList downto 1 do
26475: LD_ADDR_VAR 0 1
26479: PUSH
26480: DOUBLE
26481: LD_EXP 97
26485: INC
26486: ST_TO_ADDR
26487: LD_INT 1
26489: PUSH
26490: FOR_DOWNTO
26491: IFFALSE 26827
// begin if IsLive ( minersList [ i ] ) then
26493: LD_EXP 96
26497: PUSH
26498: LD_VAR 0 1
26502: ARRAY
26503: PPUSH
26504: CALL_OW 300
26508: IFFALSE 26536
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26510: LD_EXP 96
26514: PUSH
26515: LD_VAR 0 1
26519: ARRAY
26520: PPUSH
26521: LD_EXP 97
26525: PUSH
26526: LD_VAR 0 1
26530: ARRAY
26531: PPUSH
26532: CALL_OW 505
// if not minerMinesList [ i ] then
26536: LD_EXP 97
26540: PUSH
26541: LD_VAR 0 1
26545: ARRAY
26546: NOT
26547: IFFALSE 26551
// continue ;
26549: GO 26490
// for j := minerMinesList [ i ] downto 1 do
26551: LD_ADDR_VAR 0 2
26555: PUSH
26556: DOUBLE
26557: LD_EXP 97
26561: PUSH
26562: LD_VAR 0 1
26566: ARRAY
26567: INC
26568: ST_TO_ADDR
26569: LD_INT 1
26571: PUSH
26572: FOR_DOWNTO
26573: IFFALSE 26823
// begin side := GetSide ( minersList [ i ] ) ;
26575: LD_ADDR_VAR 0 3
26579: PUSH
26580: LD_EXP 96
26584: PUSH
26585: LD_VAR 0 1
26589: ARRAY
26590: PPUSH
26591: CALL_OW 255
26595: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26596: LD_ADDR_VAR 0 4
26600: PUSH
26601: LD_EXP 97
26605: PUSH
26606: LD_VAR 0 1
26610: ARRAY
26611: PUSH
26612: LD_VAR 0 2
26616: ARRAY
26617: PUSH
26618: LD_INT 1
26620: ARRAY
26621: PPUSH
26622: LD_EXP 97
26626: PUSH
26627: LD_VAR 0 1
26631: ARRAY
26632: PUSH
26633: LD_VAR 0 2
26637: ARRAY
26638: PUSH
26639: LD_INT 2
26641: ARRAY
26642: PPUSH
26643: CALL_OW 428
26647: ST_TO_ADDR
// if not tmp then
26648: LD_VAR 0 4
26652: NOT
26653: IFFALSE 26657
// continue ;
26655: GO 26572
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26657: LD_VAR 0 4
26661: PUSH
26662: LD_INT 81
26664: PUSH
26665: LD_VAR 0 3
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: IN
26679: PUSH
26680: LD_EXP 97
26684: PUSH
26685: LD_VAR 0 1
26689: ARRAY
26690: PUSH
26691: LD_VAR 0 2
26695: ARRAY
26696: PUSH
26697: LD_INT 1
26699: ARRAY
26700: PPUSH
26701: LD_EXP 97
26705: PUSH
26706: LD_VAR 0 1
26710: ARRAY
26711: PUSH
26712: LD_VAR 0 2
26716: ARRAY
26717: PUSH
26718: LD_INT 2
26720: ARRAY
26721: PPUSH
26722: CALL_OW 458
26726: AND
26727: IFFALSE 26821
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26729: LD_EXP 97
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PUSH
26740: LD_VAR 0 2
26744: ARRAY
26745: PUSH
26746: LD_INT 1
26748: ARRAY
26749: PPUSH
26750: LD_EXP 97
26754: PUSH
26755: LD_VAR 0 1
26759: ARRAY
26760: PUSH
26761: LD_VAR 0 2
26765: ARRAY
26766: PUSH
26767: LD_INT 2
26769: ARRAY
26770: PPUSH
26771: LD_VAR 0 3
26775: PPUSH
26776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26780: LD_ADDR_EXP 97
26784: PUSH
26785: LD_EXP 97
26789: PPUSH
26790: LD_VAR 0 1
26794: PPUSH
26795: LD_EXP 97
26799: PUSH
26800: LD_VAR 0 1
26804: ARRAY
26805: PPUSH
26806: LD_VAR 0 2
26810: PPUSH
26811: CALL_OW 3
26815: PPUSH
26816: CALL_OW 1
26820: ST_TO_ADDR
// end ; end ;
26821: GO 26572
26823: POP
26824: POP
// end ;
26825: GO 26490
26827: POP
26828: POP
// end ;
26829: PPOPN 4
26831: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
// result := false ;
26836: LD_ADDR_VAR 0 4
26840: PUSH
26841: LD_INT 0
26843: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26844: LD_VAR 0 1
26848: PPUSH
26849: CALL_OW 264
26853: PUSH
26854: LD_EXP 21
26858: EQUAL
26859: NOT
26860: IFFALSE 26864
// exit ;
26862: GO 27104
// index := GetElementIndex ( minersList , unit ) ;
26864: LD_ADDR_VAR 0 5
26868: PUSH
26869: LD_EXP 96
26873: PPUSH
26874: LD_VAR 0 1
26878: PPUSH
26879: CALL 33048 0 2
26883: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26884: LD_EXP 97
26888: PUSH
26889: LD_VAR 0 5
26893: ARRAY
26894: PUSH
26895: LD_EXP 98
26899: GREATEREQUAL
26900: IFFALSE 26904
// exit ;
26902: GO 27104
// ComMoveXY ( unit , x , y ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_VAR 0 2
26913: PPUSH
26914: LD_VAR 0 3
26918: PPUSH
26919: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26923: LD_INT 35
26925: PPUSH
26926: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26930: LD_VAR 0 1
26934: PPUSH
26935: LD_VAR 0 2
26939: PPUSH
26940: LD_VAR 0 3
26944: PPUSH
26945: CALL 63445 0 3
26949: NOT
26950: PUSH
26951: LD_VAR 0 1
26955: PPUSH
26956: CALL_OW 314
26960: AND
26961: IFFALSE 26965
// exit ;
26963: GO 27104
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26965: LD_VAR 0 2
26969: PPUSH
26970: LD_VAR 0 3
26974: PPUSH
26975: CALL_OW 428
26979: PUSH
26980: LD_VAR 0 1
26984: EQUAL
26985: PUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 314
26995: NOT
26996: AND
26997: IFFALSE 26923
// PlaySoundXY ( x , y , PlantMine ) ;
26999: LD_VAR 0 2
27003: PPUSH
27004: LD_VAR 0 3
27008: PPUSH
27009: LD_STRING PlantMine
27011: PPUSH
27012: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27016: LD_VAR 0 2
27020: PPUSH
27021: LD_VAR 0 3
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 255
27035: PPUSH
27036: LD_INT 0
27038: PPUSH
27039: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27043: LD_ADDR_EXP 97
27047: PUSH
27048: LD_EXP 97
27052: PPUSH
27053: LD_VAR 0 5
27057: PUSH
27058: LD_EXP 97
27062: PUSH
27063: LD_VAR 0 5
27067: ARRAY
27068: PUSH
27069: LD_INT 1
27071: PLUS
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PPUSH
27077: LD_VAR 0 2
27081: PUSH
27082: LD_VAR 0 3
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PPUSH
27091: CALL 33263 0 3
27095: ST_TO_ADDR
// result := true ;
27096: LD_ADDR_VAR 0 4
27100: PUSH
27101: LD_INT 1
27103: ST_TO_ADDR
// end ;
27104: LD_VAR 0 4
27108: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27109: LD_INT 0
27111: PPUSH
27112: PPUSH
27113: PPUSH
// if not unit in minersList then
27114: LD_VAR 0 1
27118: PUSH
27119: LD_EXP 96
27123: IN
27124: NOT
27125: IFFALSE 27129
// exit ;
27127: GO 27521
// index := GetElementIndex ( minersList , unit ) ;
27129: LD_ADDR_VAR 0 6
27133: PUSH
27134: LD_EXP 96
27138: PPUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL 33048 0 2
27148: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27149: LD_ADDR_VAR 0 5
27153: PUSH
27154: DOUBLE
27155: LD_EXP 97
27159: PUSH
27160: LD_VAR 0 6
27164: ARRAY
27165: INC
27166: ST_TO_ADDR
27167: LD_INT 1
27169: PUSH
27170: FOR_DOWNTO
27171: IFFALSE 27332
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27173: LD_EXP 97
27177: PUSH
27178: LD_VAR 0 6
27182: ARRAY
27183: PUSH
27184: LD_VAR 0 5
27188: ARRAY
27189: PUSH
27190: LD_INT 1
27192: ARRAY
27193: PUSH
27194: LD_VAR 0 2
27198: EQUAL
27199: PUSH
27200: LD_EXP 97
27204: PUSH
27205: LD_VAR 0 6
27209: ARRAY
27210: PUSH
27211: LD_VAR 0 5
27215: ARRAY
27216: PUSH
27217: LD_INT 2
27219: ARRAY
27220: PUSH
27221: LD_VAR 0 3
27225: EQUAL
27226: AND
27227: IFFALSE 27330
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27229: LD_EXP 97
27233: PUSH
27234: LD_VAR 0 6
27238: ARRAY
27239: PUSH
27240: LD_VAR 0 5
27244: ARRAY
27245: PUSH
27246: LD_INT 1
27248: ARRAY
27249: PPUSH
27250: LD_EXP 97
27254: PUSH
27255: LD_VAR 0 6
27259: ARRAY
27260: PUSH
27261: LD_VAR 0 5
27265: ARRAY
27266: PUSH
27267: LD_INT 2
27269: ARRAY
27270: PPUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 255
27280: PPUSH
27281: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27285: LD_ADDR_EXP 97
27289: PUSH
27290: LD_EXP 97
27294: PPUSH
27295: LD_VAR 0 6
27299: PPUSH
27300: LD_EXP 97
27304: PUSH
27305: LD_VAR 0 6
27309: ARRAY
27310: PPUSH
27311: LD_VAR 0 5
27315: PPUSH
27316: CALL_OW 3
27320: PPUSH
27321: CALL_OW 1
27325: ST_TO_ADDR
// exit ;
27326: POP
27327: POP
27328: GO 27521
// end ; end ;
27330: GO 27170
27332: POP
27333: POP
// for i := minerMinesList [ index ] downto 1 do
27334: LD_ADDR_VAR 0 5
27338: PUSH
27339: DOUBLE
27340: LD_EXP 97
27344: PUSH
27345: LD_VAR 0 6
27349: ARRAY
27350: INC
27351: ST_TO_ADDR
27352: LD_INT 1
27354: PUSH
27355: FOR_DOWNTO
27356: IFFALSE 27519
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27358: LD_EXP 97
27362: PUSH
27363: LD_VAR 0 6
27367: ARRAY
27368: PUSH
27369: LD_VAR 0 5
27373: ARRAY
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PPUSH
27379: LD_EXP 97
27383: PUSH
27384: LD_VAR 0 6
27388: ARRAY
27389: PUSH
27390: LD_VAR 0 5
27394: ARRAY
27395: PUSH
27396: LD_INT 2
27398: ARRAY
27399: PPUSH
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: CALL_OW 298
27414: PUSH
27415: LD_INT 6
27417: LESS
27418: IFFALSE 27517
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27420: LD_EXP 97
27424: PUSH
27425: LD_VAR 0 6
27429: ARRAY
27430: PUSH
27431: LD_VAR 0 5
27435: ARRAY
27436: PUSH
27437: LD_INT 1
27439: ARRAY
27440: PPUSH
27441: LD_EXP 97
27445: PUSH
27446: LD_VAR 0 6
27450: ARRAY
27451: PUSH
27452: LD_VAR 0 5
27456: ARRAY
27457: PUSH
27458: LD_INT 2
27460: ARRAY
27461: PPUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 255
27471: PPUSH
27472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27476: LD_ADDR_EXP 97
27480: PUSH
27481: LD_EXP 97
27485: PPUSH
27486: LD_VAR 0 6
27490: PPUSH
27491: LD_EXP 97
27495: PUSH
27496: LD_VAR 0 6
27500: ARRAY
27501: PPUSH
27502: LD_VAR 0 5
27506: PPUSH
27507: CALL_OW 3
27511: PPUSH
27512: CALL_OW 1
27516: ST_TO_ADDR
// end ; end ;
27517: GO 27355
27519: POP
27520: POP
// end ;
27521: LD_VAR 0 4
27525: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27526: LD_INT 0
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
27536: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27537: LD_VAR 0 1
27541: PPUSH
27542: CALL_OW 264
27546: PUSH
27547: LD_EXP 21
27551: EQUAL
27552: NOT
27553: PUSH
27554: LD_VAR 0 1
27558: PUSH
27559: LD_EXP 96
27563: IN
27564: NOT
27565: OR
27566: IFFALSE 27570
// exit ;
27568: GO 27892
// index := GetElementIndex ( minersList , unit ) ;
27570: LD_ADDR_VAR 0 6
27574: PUSH
27575: LD_EXP 96
27579: PPUSH
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL 33048 0 2
27589: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27590: LD_ADDR_VAR 0 8
27594: PUSH
27595: LD_EXP 98
27599: PUSH
27600: LD_EXP 97
27604: PUSH
27605: LD_VAR 0 6
27609: ARRAY
27610: MINUS
27611: ST_TO_ADDR
// if not minesFreeAmount then
27612: LD_VAR 0 8
27616: NOT
27617: IFFALSE 27621
// exit ;
27619: GO 27892
// tmp := [ ] ;
27621: LD_ADDR_VAR 0 7
27625: PUSH
27626: EMPTY
27627: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27628: LD_ADDR_VAR 0 5
27632: PUSH
27633: DOUBLE
27634: LD_INT 1
27636: DEC
27637: ST_TO_ADDR
27638: LD_VAR 0 8
27642: PUSH
27643: FOR_TO
27644: IFFALSE 27839
// begin _d := rand ( 0 , 5 ) ;
27646: LD_ADDR_VAR 0 11
27650: PUSH
27651: LD_INT 0
27653: PPUSH
27654: LD_INT 5
27656: PPUSH
27657: CALL_OW 12
27661: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27662: LD_ADDR_VAR 0 12
27666: PUSH
27667: LD_INT 2
27669: PPUSH
27670: LD_INT 6
27672: PPUSH
27673: CALL_OW 12
27677: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27678: LD_ADDR_VAR 0 9
27682: PUSH
27683: LD_VAR 0 2
27687: PPUSH
27688: LD_VAR 0 11
27692: PPUSH
27693: LD_VAR 0 12
27697: PPUSH
27698: CALL_OW 272
27702: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27703: LD_ADDR_VAR 0 10
27707: PUSH
27708: LD_VAR 0 3
27712: PPUSH
27713: LD_VAR 0 11
27717: PPUSH
27718: LD_VAR 0 12
27722: PPUSH
27723: CALL_OW 273
27727: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27728: LD_VAR 0 9
27732: PPUSH
27733: LD_VAR 0 10
27737: PPUSH
27738: CALL_OW 488
27742: PUSH
27743: LD_VAR 0 9
27747: PUSH
27748: LD_VAR 0 10
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_VAR 0 7
27761: IN
27762: NOT
27763: AND
27764: PUSH
27765: LD_VAR 0 9
27769: PPUSH
27770: LD_VAR 0 10
27774: PPUSH
27775: CALL_OW 458
27779: NOT
27780: AND
27781: IFFALSE 27823
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27783: LD_ADDR_VAR 0 7
27787: PUSH
27788: LD_VAR 0 7
27792: PPUSH
27793: LD_VAR 0 7
27797: PUSH
27798: LD_INT 1
27800: PLUS
27801: PPUSH
27802: LD_VAR 0 9
27806: PUSH
27807: LD_VAR 0 10
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PPUSH
27816: CALL_OW 1
27820: ST_TO_ADDR
27821: GO 27837
// i := i - 1 ;
27823: LD_ADDR_VAR 0 5
27827: PUSH
27828: LD_VAR 0 5
27832: PUSH
27833: LD_INT 1
27835: MINUS
27836: ST_TO_ADDR
// end ;
27837: GO 27643
27839: POP
27840: POP
// for i in tmp do
27841: LD_ADDR_VAR 0 5
27845: PUSH
27846: LD_VAR 0 7
27850: PUSH
27851: FOR_IN
27852: IFFALSE 27890
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27854: LD_VAR 0 1
27858: PPUSH
27859: LD_VAR 0 5
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PPUSH
27868: LD_VAR 0 5
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PPUSH
27877: CALL 26832 0 3
27881: NOT
27882: IFFALSE 27888
// exit ;
27884: POP
27885: POP
27886: GO 27892
27888: GO 27851
27890: POP
27891: POP
// end ;
27892: LD_VAR 0 4
27896: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27897: LD_INT 0
27899: PPUSH
27900: PPUSH
27901: PPUSH
27902: PPUSH
27903: PPUSH
27904: PPUSH
27905: PPUSH
// if not GetClass ( unit ) = class_sniper then
27906: LD_VAR 0 1
27910: PPUSH
27911: CALL_OW 257
27915: PUSH
27916: LD_INT 5
27918: EQUAL
27919: NOT
27920: IFFALSE 27924
// exit ;
27922: GO 28312
// dist := 8 ;
27924: LD_ADDR_VAR 0 5
27928: PUSH
27929: LD_INT 8
27931: ST_TO_ADDR
// viewRange := 12 ;
27932: LD_ADDR_VAR 0 7
27936: PUSH
27937: LD_INT 12
27939: ST_TO_ADDR
// side := GetSide ( unit ) ;
27940: LD_ADDR_VAR 0 6
27944: PUSH
27945: LD_VAR 0 1
27949: PPUSH
27950: CALL_OW 255
27954: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27955: LD_INT 61
27957: PPUSH
27958: LD_VAR 0 6
27962: PPUSH
27963: CALL_OW 321
27967: PUSH
27968: LD_INT 2
27970: EQUAL
27971: IFFALSE 27981
// viewRange := 16 ;
27973: LD_ADDR_VAR 0 7
27977: PUSH
27978: LD_INT 16
27980: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27981: LD_VAR 0 1
27985: PPUSH
27986: LD_VAR 0 2
27990: PPUSH
27991: LD_VAR 0 3
27995: PPUSH
27996: CALL_OW 297
28000: PUSH
28001: LD_VAR 0 5
28005: GREATER
28006: IFFALSE 28085
// begin ComMoveXY ( unit , x , y ) ;
28008: LD_VAR 0 1
28012: PPUSH
28013: LD_VAR 0 2
28017: PPUSH
28018: LD_VAR 0 3
28022: PPUSH
28023: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28027: LD_INT 35
28029: PPUSH
28030: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28034: LD_VAR 0 1
28038: PPUSH
28039: LD_VAR 0 2
28043: PPUSH
28044: LD_VAR 0 3
28048: PPUSH
28049: CALL 63445 0 3
28053: NOT
28054: IFFALSE 28058
// exit ;
28056: GO 28312
// until GetDistUnitXY ( unit , x , y ) < dist ;
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_VAR 0 2
28067: PPUSH
28068: LD_VAR 0 3
28072: PPUSH
28073: CALL_OW 297
28077: PUSH
28078: LD_VAR 0 5
28082: LESS
28083: IFFALSE 28027
// end ; ComTurnXY ( unit , x , y ) ;
28085: LD_VAR 0 1
28089: PPUSH
28090: LD_VAR 0 2
28094: PPUSH
28095: LD_VAR 0 3
28099: PPUSH
28100: CALL_OW 118
// wait ( 5 ) ;
28104: LD_INT 5
28106: PPUSH
28107: CALL_OW 67
// _d := GetDir ( unit ) ;
28111: LD_ADDR_VAR 0 10
28115: PUSH
28116: LD_VAR 0 1
28120: PPUSH
28121: CALL_OW 254
28125: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28126: LD_ADDR_VAR 0 8
28130: PUSH
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 250
28140: PPUSH
28141: LD_VAR 0 10
28145: PPUSH
28146: LD_VAR 0 5
28150: PPUSH
28151: CALL_OW 272
28155: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28156: LD_ADDR_VAR 0 9
28160: PUSH
28161: LD_VAR 0 1
28165: PPUSH
28166: CALL_OW 251
28170: PPUSH
28171: LD_VAR 0 10
28175: PPUSH
28176: LD_VAR 0 5
28180: PPUSH
28181: CALL_OW 273
28185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28186: LD_VAR 0 8
28190: PPUSH
28191: LD_VAR 0 9
28195: PPUSH
28196: CALL_OW 488
28200: NOT
28201: IFFALSE 28205
// exit ;
28203: GO 28312
// ComAnimCustom ( unit , 1 ) ;
28205: LD_VAR 0 1
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28217: LD_VAR 0 8
28221: PPUSH
28222: LD_VAR 0 9
28226: PPUSH
28227: LD_VAR 0 6
28231: PPUSH
28232: LD_VAR 0 7
28236: PPUSH
28237: CALL_OW 330
// repeat wait ( 1 ) ;
28241: LD_INT 1
28243: PPUSH
28244: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 316
28257: PUSH
28258: LD_VAR 0 1
28262: PPUSH
28263: CALL_OW 314
28267: OR
28268: PUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 302
28278: NOT
28279: OR
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 301
28290: OR
28291: IFFALSE 28241
// RemoveSeeing ( _x , _y , side ) ;
28293: LD_VAR 0 8
28297: PPUSH
28298: LD_VAR 0 9
28302: PPUSH
28303: LD_VAR 0 6
28307: PPUSH
28308: CALL_OW 331
// end ; end_of_file
28312: LD_VAR 0 4
28316: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28317: LD_INT 0
28319: PPUSH
28320: PPUSH
// if exist_mode then
28321: LD_VAR 0 2
28325: IFFALSE 28350
// unit := CreateCharacter ( prefix & ident ) else
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_VAR 0 3
28336: PUSH
28337: LD_VAR 0 1
28341: STR
28342: PPUSH
28343: CALL_OW 34
28347: ST_TO_ADDR
28348: GO 28365
// unit := NewCharacter ( ident ) ;
28350: LD_ADDR_VAR 0 5
28354: PUSH
28355: LD_VAR 0 1
28359: PPUSH
28360: CALL_OW 25
28364: ST_TO_ADDR
// result := unit ;
28365: LD_ADDR_VAR 0 4
28369: PUSH
28370: LD_VAR 0 5
28374: ST_TO_ADDR
// end ;
28375: LD_VAR 0 4
28379: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28380: LD_INT 0
28382: PPUSH
28383: PPUSH
// if not side or not nation then
28384: LD_VAR 0 1
28388: NOT
28389: PUSH
28390: LD_VAR 0 2
28394: NOT
28395: OR
28396: IFFALSE 28400
// exit ;
28398: GO 29164
// case nation of nation_american :
28400: LD_VAR 0 2
28404: PUSH
28405: LD_INT 1
28407: DOUBLE
28408: EQUAL
28409: IFTRUE 28413
28411: GO 28627
28413: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28414: LD_ADDR_VAR 0 4
28418: PUSH
28419: LD_INT 35
28421: PUSH
28422: LD_INT 45
28424: PUSH
28425: LD_INT 46
28427: PUSH
28428: LD_INT 47
28430: PUSH
28431: LD_INT 82
28433: PUSH
28434: LD_INT 83
28436: PUSH
28437: LD_INT 84
28439: PUSH
28440: LD_INT 85
28442: PUSH
28443: LD_INT 86
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 6
28454: PUSH
28455: LD_INT 15
28457: PUSH
28458: LD_INT 16
28460: PUSH
28461: LD_INT 7
28463: PUSH
28464: LD_INT 12
28466: PUSH
28467: LD_INT 13
28469: PUSH
28470: LD_INT 10
28472: PUSH
28473: LD_INT 14
28475: PUSH
28476: LD_INT 20
28478: PUSH
28479: LD_INT 21
28481: PUSH
28482: LD_INT 22
28484: PUSH
28485: LD_INT 25
28487: PUSH
28488: LD_INT 32
28490: PUSH
28491: LD_INT 27
28493: PUSH
28494: LD_INT 36
28496: PUSH
28497: LD_INT 69
28499: PUSH
28500: LD_INT 39
28502: PUSH
28503: LD_INT 34
28505: PUSH
28506: LD_INT 40
28508: PUSH
28509: LD_INT 48
28511: PUSH
28512: LD_INT 49
28514: PUSH
28515: LD_INT 50
28517: PUSH
28518: LD_INT 51
28520: PUSH
28521: LD_INT 52
28523: PUSH
28524: LD_INT 53
28526: PUSH
28527: LD_INT 54
28529: PUSH
28530: LD_INT 55
28532: PUSH
28533: LD_INT 56
28535: PUSH
28536: LD_INT 57
28538: PUSH
28539: LD_INT 58
28541: PUSH
28542: LD_INT 59
28544: PUSH
28545: LD_INT 60
28547: PUSH
28548: LD_INT 61
28550: PUSH
28551: LD_INT 62
28553: PUSH
28554: LD_INT 80
28556: PUSH
28557: LD_INT 82
28559: PUSH
28560: LD_INT 83
28562: PUSH
28563: LD_INT 84
28565: PUSH
28566: LD_INT 85
28568: PUSH
28569: LD_INT 86
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: ST_TO_ADDR
28625: GO 29088
28627: LD_INT 2
28629: DOUBLE
28630: EQUAL
28631: IFTRUE 28635
28633: GO 28857
28635: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28636: LD_ADDR_VAR 0 4
28640: PUSH
28641: LD_INT 35
28643: PUSH
28644: LD_INT 45
28646: PUSH
28647: LD_INT 46
28649: PUSH
28650: LD_INT 47
28652: PUSH
28653: LD_INT 82
28655: PUSH
28656: LD_INT 83
28658: PUSH
28659: LD_INT 84
28661: PUSH
28662: LD_INT 85
28664: PUSH
28665: LD_INT 87
28667: PUSH
28668: LD_INT 70
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 11
28676: PUSH
28677: LD_INT 3
28679: PUSH
28680: LD_INT 4
28682: PUSH
28683: LD_INT 5
28685: PUSH
28686: LD_INT 6
28688: PUSH
28689: LD_INT 15
28691: PUSH
28692: LD_INT 18
28694: PUSH
28695: LD_INT 7
28697: PUSH
28698: LD_INT 17
28700: PUSH
28701: LD_INT 8
28703: PUSH
28704: LD_INT 20
28706: PUSH
28707: LD_INT 21
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_INT 72
28715: PUSH
28716: LD_INT 26
28718: PUSH
28719: LD_INT 69
28721: PUSH
28722: LD_INT 39
28724: PUSH
28725: LD_INT 40
28727: PUSH
28728: LD_INT 41
28730: PUSH
28731: LD_INT 42
28733: PUSH
28734: LD_INT 43
28736: PUSH
28737: LD_INT 48
28739: PUSH
28740: LD_INT 49
28742: PUSH
28743: LD_INT 50
28745: PUSH
28746: LD_INT 51
28748: PUSH
28749: LD_INT 52
28751: PUSH
28752: LD_INT 53
28754: PUSH
28755: LD_INT 54
28757: PUSH
28758: LD_INT 55
28760: PUSH
28761: LD_INT 56
28763: PUSH
28764: LD_INT 60
28766: PUSH
28767: LD_INT 61
28769: PUSH
28770: LD_INT 62
28772: PUSH
28773: LD_INT 66
28775: PUSH
28776: LD_INT 67
28778: PUSH
28779: LD_INT 68
28781: PUSH
28782: LD_INT 81
28784: PUSH
28785: LD_INT 82
28787: PUSH
28788: LD_INT 83
28790: PUSH
28791: LD_INT 84
28793: PUSH
28794: LD_INT 85
28796: PUSH
28797: LD_INT 87
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
28855: GO 29088
28857: LD_INT 3
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 29087
28865: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28866: LD_ADDR_VAR 0 4
28870: PUSH
28871: LD_INT 46
28873: PUSH
28874: LD_INT 47
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 82
28885: PUSH
28886: LD_INT 83
28888: PUSH
28889: LD_INT 84
28891: PUSH
28892: LD_INT 85
28894: PUSH
28895: LD_INT 86
28897: PUSH
28898: LD_INT 11
28900: PUSH
28901: LD_INT 9
28903: PUSH
28904: LD_INT 20
28906: PUSH
28907: LD_INT 19
28909: PUSH
28910: LD_INT 21
28912: PUSH
28913: LD_INT 24
28915: PUSH
28916: LD_INT 22
28918: PUSH
28919: LD_INT 25
28921: PUSH
28922: LD_INT 28
28924: PUSH
28925: LD_INT 29
28927: PUSH
28928: LD_INT 30
28930: PUSH
28931: LD_INT 31
28933: PUSH
28934: LD_INT 37
28936: PUSH
28937: LD_INT 38
28939: PUSH
28940: LD_INT 32
28942: PUSH
28943: LD_INT 27
28945: PUSH
28946: LD_INT 33
28948: PUSH
28949: LD_INT 69
28951: PUSH
28952: LD_INT 39
28954: PUSH
28955: LD_INT 34
28957: PUSH
28958: LD_INT 40
28960: PUSH
28961: LD_INT 71
28963: PUSH
28964: LD_INT 23
28966: PUSH
28967: LD_INT 44
28969: PUSH
28970: LD_INT 48
28972: PUSH
28973: LD_INT 49
28975: PUSH
28976: LD_INT 50
28978: PUSH
28979: LD_INT 51
28981: PUSH
28982: LD_INT 52
28984: PUSH
28985: LD_INT 53
28987: PUSH
28988: LD_INT 54
28990: PUSH
28991: LD_INT 55
28993: PUSH
28994: LD_INT 56
28996: PUSH
28997: LD_INT 57
28999: PUSH
29000: LD_INT 58
29002: PUSH
29003: LD_INT 59
29005: PUSH
29006: LD_INT 63
29008: PUSH
29009: LD_INT 64
29011: PUSH
29012: LD_INT 65
29014: PUSH
29015: LD_INT 82
29017: PUSH
29018: LD_INT 83
29020: PUSH
29021: LD_INT 84
29023: PUSH
29024: LD_INT 85
29026: PUSH
29027: LD_INT 86
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: ST_TO_ADDR
29085: GO 29088
29087: POP
// if state > - 1 and state < 3 then
29088: LD_VAR 0 3
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: GREATER
29097: PUSH
29098: LD_VAR 0 3
29102: PUSH
29103: LD_INT 3
29105: LESS
29106: AND
29107: IFFALSE 29164
// for i in result do
29109: LD_ADDR_VAR 0 5
29113: PUSH
29114: LD_VAR 0 4
29118: PUSH
29119: FOR_IN
29120: IFFALSE 29162
// if GetTech ( i , side ) <> state then
29122: LD_VAR 0 5
29126: PPUSH
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL_OW 321
29136: PUSH
29137: LD_VAR 0 3
29141: NONEQUAL
29142: IFFALSE 29160
// result := result diff i ;
29144: LD_ADDR_VAR 0 4
29148: PUSH
29149: LD_VAR 0 4
29153: PUSH
29154: LD_VAR 0 5
29158: DIFF
29159: ST_TO_ADDR
29160: GO 29119
29162: POP
29163: POP
// end ;
29164: LD_VAR 0 4
29168: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29169: LD_INT 0
29171: PPUSH
29172: PPUSH
29173: PPUSH
// result := true ;
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 1
29181: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29182: LD_ADDR_VAR 0 5
29186: PUSH
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 480
29196: ST_TO_ADDR
// if not tmp then
29197: LD_VAR 0 5
29201: NOT
29202: IFFALSE 29206
// exit ;
29204: GO 29255
// for i in tmp do
29206: LD_ADDR_VAR 0 4
29210: PUSH
29211: LD_VAR 0 5
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29253
// if GetTech ( i , side ) <> state_researched then
29219: LD_VAR 0 4
29223: PPUSH
29224: LD_VAR 0 1
29228: PPUSH
29229: CALL_OW 321
29233: PUSH
29234: LD_INT 2
29236: NONEQUAL
29237: IFFALSE 29251
// begin result := false ;
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: LD_INT 0
29246: ST_TO_ADDR
// exit ;
29247: POP
29248: POP
29249: GO 29255
// end ;
29251: GO 29216
29253: POP
29254: POP
// end ;
29255: LD_VAR 0 3
29259: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29260: LD_INT 0
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29275: LD_VAR 0 1
29279: NOT
29280: PUSH
29281: LD_VAR 0 1
29285: PPUSH
29286: CALL_OW 257
29290: PUSH
29291: LD_INT 9
29293: NONEQUAL
29294: OR
29295: IFFALSE 29299
// exit ;
29297: GO 29872
// side := GetSide ( unit ) ;
29299: LD_ADDR_VAR 0 9
29303: PUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 255
29313: ST_TO_ADDR
// tech_space := tech_spacanom ;
29314: LD_ADDR_VAR 0 12
29318: PUSH
29319: LD_INT 29
29321: ST_TO_ADDR
// tech_time := tech_taurad ;
29322: LD_ADDR_VAR 0 13
29326: PUSH
29327: LD_INT 28
29329: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29330: LD_ADDR_VAR 0 11
29334: PUSH
29335: LD_VAR 0 1
29339: PPUSH
29340: CALL_OW 310
29344: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29345: LD_VAR 0 11
29349: PPUSH
29350: CALL_OW 247
29354: PUSH
29355: LD_INT 2
29357: EQUAL
29358: IFFALSE 29362
// exit ;
29360: GO 29872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29362: LD_ADDR_VAR 0 8
29366: PUSH
29367: LD_INT 81
29369: PUSH
29370: LD_VAR 0 9
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: LD_INT 21
29384: PUSH
29385: LD_INT 3
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PPUSH
29400: CALL_OW 69
29404: ST_TO_ADDR
// if not tmp then
29405: LD_VAR 0 8
29409: NOT
29410: IFFALSE 29414
// exit ;
29412: GO 29872
// if in_unit then
29414: LD_VAR 0 11
29418: IFFALSE 29442
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29420: LD_ADDR_VAR 0 10
29424: PUSH
29425: LD_VAR 0 8
29429: PPUSH
29430: LD_VAR 0 11
29434: PPUSH
29435: CALL_OW 74
29439: ST_TO_ADDR
29440: GO 29462
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29442: LD_ADDR_VAR 0 10
29446: PUSH
29447: LD_VAR 0 8
29451: PPUSH
29452: LD_VAR 0 1
29456: PPUSH
29457: CALL_OW 74
29461: ST_TO_ADDR
// if not enemy then
29462: LD_VAR 0 10
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29872
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29471: LD_VAR 0 11
29475: PUSH
29476: LD_VAR 0 11
29480: PPUSH
29481: LD_VAR 0 10
29485: PPUSH
29486: CALL_OW 296
29490: PUSH
29491: LD_INT 13
29493: GREATER
29494: AND
29495: PUSH
29496: LD_VAR 0 1
29500: PPUSH
29501: LD_VAR 0 10
29505: PPUSH
29506: CALL_OW 296
29510: PUSH
29511: LD_INT 12
29513: GREATER
29514: OR
29515: IFFALSE 29519
// exit ;
29517: GO 29872
// missile := [ 1 ] ;
29519: LD_ADDR_VAR 0 14
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29530: LD_VAR 0 9
29534: PPUSH
29535: LD_VAR 0 12
29539: PPUSH
29540: CALL_OW 325
29544: IFFALSE 29573
// missile := Insert ( missile , missile + 1 , 2 ) ;
29546: LD_ADDR_VAR 0 14
29550: PUSH
29551: LD_VAR 0 14
29555: PPUSH
29556: LD_VAR 0 14
29560: PUSH
29561: LD_INT 1
29563: PLUS
29564: PPUSH
29565: LD_INT 2
29567: PPUSH
29568: CALL_OW 2
29572: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29573: LD_VAR 0 9
29577: PPUSH
29578: LD_VAR 0 13
29582: PPUSH
29583: CALL_OW 325
29587: PUSH
29588: LD_VAR 0 10
29592: PPUSH
29593: CALL_OW 255
29597: PPUSH
29598: LD_VAR 0 13
29602: PPUSH
29603: CALL_OW 325
29607: NOT
29608: AND
29609: IFFALSE 29638
// missile := Insert ( missile , missile + 1 , 3 ) ;
29611: LD_ADDR_VAR 0 14
29615: PUSH
29616: LD_VAR 0 14
29620: PPUSH
29621: LD_VAR 0 14
29625: PUSH
29626: LD_INT 1
29628: PLUS
29629: PPUSH
29630: LD_INT 3
29632: PPUSH
29633: CALL_OW 2
29637: ST_TO_ADDR
// if missile < 2 then
29638: LD_VAR 0 14
29642: PUSH
29643: LD_INT 2
29645: LESS
29646: IFFALSE 29650
// exit ;
29648: GO 29872
// x := GetX ( enemy ) ;
29650: LD_ADDR_VAR 0 4
29654: PUSH
29655: LD_VAR 0 10
29659: PPUSH
29660: CALL_OW 250
29664: ST_TO_ADDR
// y := GetY ( enemy ) ;
29665: LD_ADDR_VAR 0 5
29669: PUSH
29670: LD_VAR 0 10
29674: PPUSH
29675: CALL_OW 251
29679: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29680: LD_ADDR_VAR 0 6
29684: PUSH
29685: LD_VAR 0 4
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PPUSH
29694: LD_INT 1
29696: PPUSH
29697: CALL_OW 12
29701: PLUS
29702: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29703: LD_ADDR_VAR 0 7
29707: PUSH
29708: LD_VAR 0 5
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 12
29724: PLUS
29725: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29726: LD_VAR 0 6
29730: PPUSH
29731: LD_VAR 0 7
29735: PPUSH
29736: CALL_OW 488
29740: NOT
29741: IFFALSE 29763
// begin _x := x ;
29743: LD_ADDR_VAR 0 6
29747: PUSH
29748: LD_VAR 0 4
29752: ST_TO_ADDR
// _y := y ;
29753: LD_ADDR_VAR 0 7
29757: PUSH
29758: LD_VAR 0 5
29762: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29763: LD_ADDR_VAR 0 3
29767: PUSH
29768: LD_INT 1
29770: PPUSH
29771: LD_VAR 0 14
29775: PPUSH
29776: CALL_OW 12
29780: ST_TO_ADDR
// case i of 1 :
29781: LD_VAR 0 3
29785: PUSH
29786: LD_INT 1
29788: DOUBLE
29789: EQUAL
29790: IFTRUE 29794
29792: GO 29811
29794: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29795: LD_VAR 0 1
29799: PPUSH
29800: LD_VAR 0 10
29804: PPUSH
29805: CALL_OW 115
29809: GO 29872
29811: LD_INT 2
29813: DOUBLE
29814: EQUAL
29815: IFTRUE 29819
29817: GO 29841
29819: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_VAR 0 6
29829: PPUSH
29830: LD_VAR 0 7
29834: PPUSH
29835: CALL_OW 153
29839: GO 29872
29841: LD_INT 3
29843: DOUBLE
29844: EQUAL
29845: IFTRUE 29849
29847: GO 29871
29849: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29850: LD_VAR 0 1
29854: PPUSH
29855: LD_VAR 0 6
29859: PPUSH
29860: LD_VAR 0 7
29864: PPUSH
29865: CALL_OW 154
29869: GO 29872
29871: POP
// end ;
29872: LD_VAR 0 2
29876: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29877: LD_INT 0
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
// if not unit or not building then
29885: LD_VAR 0 1
29889: NOT
29890: PUSH
29891: LD_VAR 0 2
29895: NOT
29896: OR
29897: IFFALSE 29901
// exit ;
29899: GO 30059
// x := GetX ( building ) ;
29901: LD_ADDR_VAR 0 5
29905: PUSH
29906: LD_VAR 0 2
29910: PPUSH
29911: CALL_OW 250
29915: ST_TO_ADDR
// y := GetY ( building ) ;
29916: LD_ADDR_VAR 0 6
29920: PUSH
29921: LD_VAR 0 2
29925: PPUSH
29926: CALL_OW 251
29930: ST_TO_ADDR
// for i = 0 to 5 do
29931: LD_ADDR_VAR 0 4
29935: PUSH
29936: DOUBLE
29937: LD_INT 0
29939: DEC
29940: ST_TO_ADDR
29941: LD_INT 5
29943: PUSH
29944: FOR_TO
29945: IFFALSE 30057
// begin _x := ShiftX ( x , i , 3 ) ;
29947: LD_ADDR_VAR 0 7
29951: PUSH
29952: LD_VAR 0 5
29956: PPUSH
29957: LD_VAR 0 4
29961: PPUSH
29962: LD_INT 3
29964: PPUSH
29965: CALL_OW 272
29969: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29970: LD_ADDR_VAR 0 8
29974: PUSH
29975: LD_VAR 0 6
29979: PPUSH
29980: LD_VAR 0 4
29984: PPUSH
29985: LD_INT 3
29987: PPUSH
29988: CALL_OW 273
29992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29993: LD_VAR 0 7
29997: PPUSH
29998: LD_VAR 0 8
30002: PPUSH
30003: CALL_OW 488
30007: NOT
30008: IFFALSE 30012
// continue ;
30010: GO 29944
// if HexInfo ( _x , _y ) = 0 then
30012: LD_VAR 0 7
30016: PPUSH
30017: LD_VAR 0 8
30021: PPUSH
30022: CALL_OW 428
30026: PUSH
30027: LD_INT 0
30029: EQUAL
30030: IFFALSE 30055
// begin ComMoveXY ( unit , _x , _y ) ;
30032: LD_VAR 0 1
30036: PPUSH
30037: LD_VAR 0 7
30041: PPUSH
30042: LD_VAR 0 8
30046: PPUSH
30047: CALL_OW 111
// exit ;
30051: POP
30052: POP
30053: GO 30059
// end ; end ;
30055: GO 29944
30057: POP
30058: POP
// end ;
30059: LD_VAR 0 3
30063: RET
// export function ScanBase ( side , base_area ) ; begin
30064: LD_INT 0
30066: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30067: LD_ADDR_VAR 0 3
30071: PUSH
30072: LD_VAR 0 2
30076: PPUSH
30077: LD_INT 81
30079: PUSH
30080: LD_VAR 0 1
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PPUSH
30089: CALL_OW 70
30093: ST_TO_ADDR
// end ;
30094: LD_VAR 0 3
30098: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
// result := false ;
30105: LD_ADDR_VAR 0 2
30109: PUSH
30110: LD_INT 0
30112: ST_TO_ADDR
// side := GetSide ( unit ) ;
30113: LD_ADDR_VAR 0 3
30117: PUSH
30118: LD_VAR 0 1
30122: PPUSH
30123: CALL_OW 255
30127: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30128: LD_ADDR_VAR 0 4
30132: PUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 248
30142: ST_TO_ADDR
// case nat of 1 :
30143: LD_VAR 0 4
30147: PUSH
30148: LD_INT 1
30150: DOUBLE
30151: EQUAL
30152: IFTRUE 30156
30154: GO 30167
30156: POP
// tech := tech_lassight ; 2 :
30157: LD_ADDR_VAR 0 5
30161: PUSH
30162: LD_INT 12
30164: ST_TO_ADDR
30165: GO 30206
30167: LD_INT 2
30169: DOUBLE
30170: EQUAL
30171: IFTRUE 30175
30173: GO 30186
30175: POP
// tech := tech_mortar ; 3 :
30176: LD_ADDR_VAR 0 5
30180: PUSH
30181: LD_INT 41
30183: ST_TO_ADDR
30184: GO 30206
30186: LD_INT 3
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30205
30194: POP
// tech := tech_bazooka ; end ;
30195: LD_ADDR_VAR 0 5
30199: PUSH
30200: LD_INT 44
30202: ST_TO_ADDR
30203: GO 30206
30205: POP
// if Researched ( side , tech ) then
30206: LD_VAR 0 3
30210: PPUSH
30211: LD_VAR 0 5
30215: PPUSH
30216: CALL_OW 325
30220: IFFALSE 30247
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_INT 5
30229: PUSH
30230: LD_INT 8
30232: PUSH
30233: LD_INT 9
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: LIST
30240: PUSH
30241: LD_VAR 0 4
30245: ARRAY
30246: ST_TO_ADDR
// end ;
30247: LD_VAR 0 2
30251: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30252: LD_INT 0
30254: PPUSH
30255: PPUSH
30256: PPUSH
// if not mines then
30257: LD_VAR 0 2
30261: NOT
30262: IFFALSE 30266
// exit ;
30264: GO 30410
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30266: LD_ADDR_VAR 0 5
30270: PUSH
30271: LD_INT 81
30273: PUSH
30274: LD_VAR 0 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 3
30285: PUSH
30286: LD_INT 21
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PPUSH
30304: CALL_OW 69
30308: ST_TO_ADDR
// for i in mines do
30309: LD_ADDR_VAR 0 4
30313: PUSH
30314: LD_VAR 0 2
30318: PUSH
30319: FOR_IN
30320: IFFALSE 30408
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30322: LD_VAR 0 4
30326: PUSH
30327: LD_INT 1
30329: ARRAY
30330: PPUSH
30331: LD_VAR 0 4
30335: PUSH
30336: LD_INT 2
30338: ARRAY
30339: PPUSH
30340: CALL_OW 458
30344: NOT
30345: IFFALSE 30349
// continue ;
30347: GO 30319
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30349: LD_VAR 0 4
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: PPUSH
30358: LD_VAR 0 4
30362: PUSH
30363: LD_INT 2
30365: ARRAY
30366: PPUSH
30367: CALL_OW 428
30371: PUSH
30372: LD_VAR 0 5
30376: IN
30377: IFFALSE 30406
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30379: LD_VAR 0 4
30383: PUSH
30384: LD_INT 1
30386: ARRAY
30387: PPUSH
30388: LD_VAR 0 4
30392: PUSH
30393: LD_INT 2
30395: ARRAY
30396: PPUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 456
// end ;
30406: GO 30319
30408: POP
30409: POP
// end ;
30410: LD_VAR 0 3
30414: RET
// export function Count ( array ) ; var i ; begin
30415: LD_INT 0
30417: PPUSH
30418: PPUSH
// result := 0 ;
30419: LD_ADDR_VAR 0 2
30423: PUSH
30424: LD_INT 0
30426: ST_TO_ADDR
// for i in array do
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_VAR 0 1
30436: PUSH
30437: FOR_IN
30438: IFFALSE 30462
// if i then
30440: LD_VAR 0 3
30444: IFFALSE 30460
// result := result + 1 ;
30446: LD_ADDR_VAR 0 2
30450: PUSH
30451: LD_VAR 0 2
30455: PUSH
30456: LD_INT 1
30458: PLUS
30459: ST_TO_ADDR
30460: GO 30437
30462: POP
30463: POP
// end ;
30464: LD_VAR 0 2
30468: RET
// export function IsEmpty ( building ) ; begin
30469: LD_INT 0
30471: PPUSH
// if not building then
30472: LD_VAR 0 1
30476: NOT
30477: IFFALSE 30481
// exit ;
30479: GO 30524
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30481: LD_ADDR_VAR 0 2
30485: PUSH
30486: LD_VAR 0 1
30490: PUSH
30491: LD_INT 22
30493: PUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: CALL_OW 255
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 58
30510: PUSH
30511: EMPTY
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PPUSH
30518: CALL_OW 69
30522: IN
30523: ST_TO_ADDR
// end ;
30524: LD_VAR 0 2
30528: RET
// export function IsNotFull ( building ) ; begin
30529: LD_INT 0
30531: PPUSH
// if not building then
30532: LD_VAR 0 1
30536: NOT
30537: IFFALSE 30541
// exit ;
30539: GO 30560
// result := UnitsInside ( building ) < 6 ;
30541: LD_ADDR_VAR 0 2
30545: PUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 313
30555: PUSH
30556: LD_INT 6
30558: LESS
30559: ST_TO_ADDR
// end ;
30560: LD_VAR 0 2
30564: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
// tmp := [ ] ;
30571: LD_ADDR_VAR 0 3
30575: PUSH
30576: EMPTY
30577: ST_TO_ADDR
// list := [ ] ;
30578: LD_ADDR_VAR 0 5
30582: PUSH
30583: EMPTY
30584: ST_TO_ADDR
// for i = 16 to 25 do
30585: LD_ADDR_VAR 0 4
30589: PUSH
30590: DOUBLE
30591: LD_INT 16
30593: DEC
30594: ST_TO_ADDR
30595: LD_INT 25
30597: PUSH
30598: FOR_TO
30599: IFFALSE 30672
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30601: LD_ADDR_VAR 0 3
30605: PUSH
30606: LD_VAR 0 3
30610: PUSH
30611: LD_INT 22
30613: PUSH
30614: LD_VAR 0 1
30618: PPUSH
30619: CALL_OW 255
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 91
30630: PUSH
30631: LD_VAR 0 1
30635: PUSH
30636: LD_INT 6
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 30
30646: PUSH
30647: LD_VAR 0 4
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: PUSH
30661: EMPTY
30662: LIST
30663: PPUSH
30664: CALL_OW 69
30668: ADD
30669: ST_TO_ADDR
30670: GO 30598
30672: POP
30673: POP
// for i = 1 to tmp do
30674: LD_ADDR_VAR 0 4
30678: PUSH
30679: DOUBLE
30680: LD_INT 1
30682: DEC
30683: ST_TO_ADDR
30684: LD_VAR 0 3
30688: PUSH
30689: FOR_TO
30690: IFFALSE 30778
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30692: LD_ADDR_VAR 0 5
30696: PUSH
30697: LD_VAR 0 5
30701: PUSH
30702: LD_VAR 0 3
30706: PUSH
30707: LD_VAR 0 4
30711: ARRAY
30712: PPUSH
30713: CALL_OW 266
30717: PUSH
30718: LD_VAR 0 3
30722: PUSH
30723: LD_VAR 0 4
30727: ARRAY
30728: PPUSH
30729: CALL_OW 250
30733: PUSH
30734: LD_VAR 0 3
30738: PUSH
30739: LD_VAR 0 4
30743: ARRAY
30744: PPUSH
30745: CALL_OW 251
30749: PUSH
30750: LD_VAR 0 3
30754: PUSH
30755: LD_VAR 0 4
30759: ARRAY
30760: PPUSH
30761: CALL_OW 254
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: PUSH
30772: EMPTY
30773: LIST
30774: ADD
30775: ST_TO_ADDR
30776: GO 30689
30778: POP
30779: POP
// result := list ;
30780: LD_ADDR_VAR 0 2
30784: PUSH
30785: LD_VAR 0 5
30789: ST_TO_ADDR
// end ;
30790: LD_VAR 0 2
30794: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
// if not factory then
30804: LD_VAR 0 1
30808: NOT
30809: IFFALSE 30813
// exit ;
30811: GO 31406
// if control = control_apeman then
30813: LD_VAR 0 4
30817: PUSH
30818: LD_INT 5
30820: EQUAL
30821: IFFALSE 30930
// begin tmp := UnitsInside ( factory ) ;
30823: LD_ADDR_VAR 0 8
30827: PUSH
30828: LD_VAR 0 1
30832: PPUSH
30833: CALL_OW 313
30837: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30838: LD_VAR 0 8
30842: PPUSH
30843: LD_INT 25
30845: PUSH
30846: LD_INT 12
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PPUSH
30853: CALL_OW 72
30857: NOT
30858: IFFALSE 30868
// control := control_manual ;
30860: LD_ADDR_VAR 0 4
30864: PUSH
30865: LD_INT 1
30867: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30868: LD_ADDR_VAR 0 8
30872: PUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL 30565 0 1
30882: ST_TO_ADDR
// if tmp then
30883: LD_VAR 0 8
30887: IFFALSE 30930
// begin for i in tmp do
30889: LD_ADDR_VAR 0 7
30893: PUSH
30894: LD_VAR 0 8
30898: PUSH
30899: FOR_IN
30900: IFFALSE 30928
// if i [ 1 ] = b_ext_radio then
30902: LD_VAR 0 7
30906: PUSH
30907: LD_INT 1
30909: ARRAY
30910: PUSH
30911: LD_INT 22
30913: EQUAL
30914: IFFALSE 30926
// begin control := control_remote ;
30916: LD_ADDR_VAR 0 4
30920: PUSH
30921: LD_INT 2
30923: ST_TO_ADDR
// break ;
30924: GO 30928
// end ;
30926: GO 30899
30928: POP
30929: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_VAR 0 2
30939: PPUSH
30940: LD_VAR 0 3
30944: PPUSH
30945: LD_VAR 0 4
30949: PPUSH
30950: LD_VAR 0 5
30954: PPUSH
30955: CALL_OW 448
30959: IFFALSE 30994
// begin result := [ chassis , engine , control , weapon ] ;
30961: LD_ADDR_VAR 0 6
30965: PUSH
30966: LD_VAR 0 2
30970: PUSH
30971: LD_VAR 0 3
30975: PUSH
30976: LD_VAR 0 4
30980: PUSH
30981: LD_VAR 0 5
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: ST_TO_ADDR
// exit ;
30992: GO 31406
// end ; _chassis := AvailableChassisList ( factory ) ;
30994: LD_ADDR_VAR 0 9
30998: PUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: CALL_OW 475
31008: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31009: LD_ADDR_VAR 0 11
31013: PUSH
31014: LD_VAR 0 1
31018: PPUSH
31019: CALL_OW 476
31023: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31024: LD_ADDR_VAR 0 12
31028: PUSH
31029: LD_VAR 0 1
31033: PPUSH
31034: CALL_OW 477
31038: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31039: LD_ADDR_VAR 0 10
31043: PUSH
31044: LD_VAR 0 1
31048: PPUSH
31049: CALL_OW 478
31053: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31054: LD_VAR 0 9
31058: NOT
31059: PUSH
31060: LD_VAR 0 11
31064: NOT
31065: OR
31066: PUSH
31067: LD_VAR 0 12
31071: NOT
31072: OR
31073: PUSH
31074: LD_VAR 0 10
31078: NOT
31079: OR
31080: IFFALSE 31115
// begin result := [ chassis , engine , control , weapon ] ;
31082: LD_ADDR_VAR 0 6
31086: PUSH
31087: LD_VAR 0 2
31091: PUSH
31092: LD_VAR 0 3
31096: PUSH
31097: LD_VAR 0 4
31101: PUSH
31102: LD_VAR 0 5
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: ST_TO_ADDR
// exit ;
31113: GO 31406
// end ; if not chassis in _chassis then
31115: LD_VAR 0 2
31119: PUSH
31120: LD_VAR 0 9
31124: IN
31125: NOT
31126: IFFALSE 31152
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_VAR 0 9
31137: PUSH
31138: LD_INT 1
31140: PPUSH
31141: LD_VAR 0 9
31145: PPUSH
31146: CALL_OW 12
31150: ARRAY
31151: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31152: LD_VAR 0 2
31156: PPUSH
31157: LD_VAR 0 3
31161: PPUSH
31162: CALL 31411 0 2
31166: NOT
31167: IFFALSE 31226
// repeat engine := _engine [ 1 ] ;
31169: LD_ADDR_VAR 0 3
31173: PUSH
31174: LD_VAR 0 11
31178: PUSH
31179: LD_INT 1
31181: ARRAY
31182: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31183: LD_ADDR_VAR 0 11
31187: PUSH
31188: LD_VAR 0 11
31192: PPUSH
31193: LD_INT 1
31195: PPUSH
31196: CALL_OW 3
31200: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31201: LD_VAR 0 2
31205: PPUSH
31206: LD_VAR 0 3
31210: PPUSH
31211: CALL 31411 0 2
31215: PUSH
31216: LD_VAR 0 11
31220: PUSH
31221: EMPTY
31222: EQUAL
31223: OR
31224: IFFALSE 31169
// if not control in _control then
31226: LD_VAR 0 4
31230: PUSH
31231: LD_VAR 0 12
31235: IN
31236: NOT
31237: IFFALSE 31263
// control := _control [ rand ( 1 , _control ) ] ;
31239: LD_ADDR_VAR 0 4
31243: PUSH
31244: LD_VAR 0 12
31248: PUSH
31249: LD_INT 1
31251: PPUSH
31252: LD_VAR 0 12
31256: PPUSH
31257: CALL_OW 12
31261: ARRAY
31262: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31263: LD_VAR 0 2
31267: PPUSH
31268: LD_VAR 0 5
31272: PPUSH
31273: CALL 31631 0 2
31277: NOT
31278: IFFALSE 31337
// repeat weapon := _weapon [ 1 ] ;
31280: LD_ADDR_VAR 0 5
31284: PUSH
31285: LD_VAR 0 10
31289: PUSH
31290: LD_INT 1
31292: ARRAY
31293: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31294: LD_ADDR_VAR 0 10
31298: PUSH
31299: LD_VAR 0 10
31303: PPUSH
31304: LD_INT 1
31306: PPUSH
31307: CALL_OW 3
31311: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31312: LD_VAR 0 2
31316: PPUSH
31317: LD_VAR 0 5
31321: PPUSH
31322: CALL 31631 0 2
31326: PUSH
31327: LD_VAR 0 10
31331: PUSH
31332: EMPTY
31333: EQUAL
31334: OR
31335: IFFALSE 31280
// result := [ ] ;
31337: LD_ADDR_VAR 0 6
31341: PUSH
31342: EMPTY
31343: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31344: LD_VAR 0 1
31348: PPUSH
31349: LD_VAR 0 2
31353: PPUSH
31354: LD_VAR 0 3
31358: PPUSH
31359: LD_VAR 0 4
31363: PPUSH
31364: LD_VAR 0 5
31368: PPUSH
31369: CALL_OW 448
31373: IFFALSE 31406
// result := [ chassis , engine , control , weapon ] ;
31375: LD_ADDR_VAR 0 6
31379: PUSH
31380: LD_VAR 0 2
31384: PUSH
31385: LD_VAR 0 3
31389: PUSH
31390: LD_VAR 0 4
31394: PUSH
31395: LD_VAR 0 5
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// end ;
31406: LD_VAR 0 6
31410: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31411: LD_INT 0
31413: PPUSH
// if not chassis or not engine then
31414: LD_VAR 0 1
31418: NOT
31419: PUSH
31420: LD_VAR 0 2
31424: NOT
31425: OR
31426: IFFALSE 31430
// exit ;
31428: GO 31626
// case engine of engine_solar :
31430: LD_VAR 0 2
31434: PUSH
31435: LD_INT 2
31437: DOUBLE
31438: EQUAL
31439: IFTRUE 31443
31441: GO 31481
31443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31444: LD_ADDR_VAR 0 3
31448: PUSH
31449: LD_INT 11
31451: PUSH
31452: LD_INT 12
31454: PUSH
31455: LD_INT 13
31457: PUSH
31458: LD_INT 14
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
31479: GO 31610
31481: LD_INT 1
31483: DOUBLE
31484: EQUAL
31485: IFTRUE 31489
31487: GO 31551
31489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31490: LD_ADDR_VAR 0 3
31494: PUSH
31495: LD_INT 11
31497: PUSH
31498: LD_INT 12
31500: PUSH
31501: LD_INT 13
31503: PUSH
31504: LD_INT 14
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: LD_INT 4
31518: PUSH
31519: LD_INT 5
31521: PUSH
31522: LD_INT 21
31524: PUSH
31525: LD_INT 23
31527: PUSH
31528: LD_INT 22
31530: PUSH
31531: LD_INT 24
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
31549: GO 31610
31551: LD_INT 3
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31609
31559: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31560: LD_ADDR_VAR 0 3
31564: PUSH
31565: LD_INT 13
31567: PUSH
31568: LD_INT 14
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: LD_INT 4
31579: PUSH
31580: LD_INT 5
31582: PUSH
31583: LD_INT 21
31585: PUSH
31586: LD_INT 22
31588: PUSH
31589: LD_INT 23
31591: PUSH
31592: LD_INT 24
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
31607: GO 31610
31609: POP
// result := ( chassis in result ) ;
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: LD_VAR 0 1
31619: PUSH
31620: LD_VAR 0 3
31624: IN
31625: ST_TO_ADDR
// end ;
31626: LD_VAR 0 3
31630: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31631: LD_INT 0
31633: PPUSH
// if not chassis or not weapon then
31634: LD_VAR 0 1
31638: NOT
31639: PUSH
31640: LD_VAR 0 2
31644: NOT
31645: OR
31646: IFFALSE 31650
// exit ;
31648: GO 32676
// case weapon of us_machine_gun :
31650: LD_VAR 0 2
31654: PUSH
31655: LD_INT 2
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 31693
31663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31664: LD_ADDR_VAR 0 3
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: LD_INT 5
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
31691: GO 32660
31693: LD_INT 3
31695: DOUBLE
31696: EQUAL
31697: IFTRUE 31701
31699: GO 31731
31701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31702: LD_ADDR_VAR 0 3
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 5
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
31729: GO 32660
31731: LD_INT 11
31733: DOUBLE
31734: EQUAL
31735: IFTRUE 31739
31737: GO 31769
31739: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31740: LD_ADDR_VAR 0 3
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: LD_INT 5
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: ST_TO_ADDR
31767: GO 32660
31769: LD_INT 4
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31777
31775: GO 31803
31777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: ST_TO_ADDR
31801: GO 32660
31803: LD_INT 5
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31837
31811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31812: LD_ADDR_VAR 0 3
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: LD_INT 4
31825: PUSH
31826: LD_INT 5
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: ST_TO_ADDR
31835: GO 32660
31837: LD_INT 9
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31845
31843: GO 31871
31845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31846: LD_ADDR_VAR 0 3
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 3
31856: PUSH
31857: LD_INT 4
31859: PUSH
31860: LD_INT 5
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
31869: GO 32660
31871: LD_INT 7
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31905
31879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31880: LD_ADDR_VAR 0 3
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: LD_INT 4
31893: PUSH
31894: LD_INT 5
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
31903: GO 32660
31905: LD_INT 12
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31939
31913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: LD_INT 3
31924: PUSH
31925: LD_INT 4
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
31937: GO 32660
31939: LD_INT 13
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31973
31947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: LD_INT 4
31961: PUSH
31962: LD_INT 5
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 32660
31973: LD_INT 14
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 31999
31981: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: ST_TO_ADDR
31997: GO 32660
31999: LD_INT 6
32001: DOUBLE
32002: EQUAL
32003: IFTRUE 32007
32005: GO 32025
32007: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32008: LD_ADDR_VAR 0 3
32012: PUSH
32013: LD_INT 4
32015: PUSH
32016: LD_INT 5
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: ST_TO_ADDR
32023: GO 32660
32025: LD_INT 10
32027: DOUBLE
32028: EQUAL
32029: IFTRUE 32033
32031: GO 32051
32033: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32034: LD_ADDR_VAR 0 3
32038: PUSH
32039: LD_INT 4
32041: PUSH
32042: LD_INT 5
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: ST_TO_ADDR
32049: GO 32660
32051: LD_INT 22
32053: DOUBLE
32054: EQUAL
32055: IFTRUE 32059
32057: GO 32085
32059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32060: LD_ADDR_VAR 0 3
32064: PUSH
32065: LD_INT 11
32067: PUSH
32068: LD_INT 12
32070: PUSH
32071: LD_INT 13
32073: PUSH
32074: LD_INT 14
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: ST_TO_ADDR
32083: GO 32660
32085: LD_INT 23
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32119
32093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_INT 11
32101: PUSH
32102: LD_INT 12
32104: PUSH
32105: LD_INT 13
32107: PUSH
32108: LD_INT 14
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: ST_TO_ADDR
32117: GO 32660
32119: LD_INT 24
32121: DOUBLE
32122: EQUAL
32123: IFTRUE 32127
32125: GO 32153
32127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32128: LD_ADDR_VAR 0 3
32132: PUSH
32133: LD_INT 11
32135: PUSH
32136: LD_INT 12
32138: PUSH
32139: LD_INT 13
32141: PUSH
32142: LD_INT 14
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
32151: GO 32660
32153: LD_INT 30
32155: DOUBLE
32156: EQUAL
32157: IFTRUE 32161
32159: GO 32187
32161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32162: LD_ADDR_VAR 0 3
32166: PUSH
32167: LD_INT 11
32169: PUSH
32170: LD_INT 12
32172: PUSH
32173: LD_INT 13
32175: PUSH
32176: LD_INT 14
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: ST_TO_ADDR
32185: GO 32660
32187: LD_INT 25
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32213
32195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32196: LD_ADDR_VAR 0 3
32200: PUSH
32201: LD_INT 13
32203: PUSH
32204: LD_INT 14
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 32660
32213: LD_INT 27
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32239
32221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 13
32229: PUSH
32230: LD_INT 14
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: ST_TO_ADDR
32237: GO 32660
32239: LD_INT 28
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32265
32247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_INT 13
32255: PUSH
32256: LD_INT 14
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: ST_TO_ADDR
32263: GO 32660
32265: LD_INT 29
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32291
32273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 13
32281: PUSH
32282: LD_INT 14
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: ST_TO_ADDR
32289: GO 32660
32291: LD_INT 31
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32317
32299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: LD_INT 13
32307: PUSH
32308: LD_INT 14
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: ST_TO_ADDR
32315: GO 32660
32317: LD_INT 26
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32325
32323: GO 32343
32325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32326: LD_ADDR_VAR 0 3
32330: PUSH
32331: LD_INT 13
32333: PUSH
32334: LD_INT 14
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: ST_TO_ADDR
32341: GO 32660
32343: LD_INT 42
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32377
32351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32352: LD_ADDR_VAR 0 3
32356: PUSH
32357: LD_INT 21
32359: PUSH
32360: LD_INT 22
32362: PUSH
32363: LD_INT 23
32365: PUSH
32366: LD_INT 24
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: ST_TO_ADDR
32375: GO 32660
32377: LD_INT 43
32379: DOUBLE
32380: EQUAL
32381: IFTRUE 32385
32383: GO 32411
32385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: LD_INT 21
32393: PUSH
32394: LD_INT 22
32396: PUSH
32397: LD_INT 23
32399: PUSH
32400: LD_INT 24
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: ST_TO_ADDR
32409: GO 32660
32411: LD_INT 44
32413: DOUBLE
32414: EQUAL
32415: IFTRUE 32419
32417: GO 32445
32419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32420: LD_ADDR_VAR 0 3
32424: PUSH
32425: LD_INT 21
32427: PUSH
32428: LD_INT 22
32430: PUSH
32431: LD_INT 23
32433: PUSH
32434: LD_INT 24
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
32443: GO 32660
32445: LD_INT 45
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32479
32453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32454: LD_ADDR_VAR 0 3
32458: PUSH
32459: LD_INT 21
32461: PUSH
32462: LD_INT 22
32464: PUSH
32465: LD_INT 23
32467: PUSH
32468: LD_INT 24
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: ST_TO_ADDR
32477: GO 32660
32479: LD_INT 49
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32513
32487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_INT 21
32495: PUSH
32496: LD_INT 22
32498: PUSH
32499: LD_INT 23
32501: PUSH
32502: LD_INT 24
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: ST_TO_ADDR
32511: GO 32660
32513: LD_INT 51
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32547
32521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_INT 21
32529: PUSH
32530: LD_INT 22
32532: PUSH
32533: LD_INT 23
32535: PUSH
32536: LD_INT 24
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
32545: GO 32660
32547: LD_INT 52
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32581
32555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: LD_INT 21
32563: PUSH
32564: LD_INT 22
32566: PUSH
32567: LD_INT 23
32569: PUSH
32570: LD_INT 24
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: ST_TO_ADDR
32579: GO 32660
32581: LD_INT 53
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32607
32589: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32590: LD_ADDR_VAR 0 3
32594: PUSH
32595: LD_INT 23
32597: PUSH
32598: LD_INT 24
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: ST_TO_ADDR
32605: GO 32660
32607: LD_INT 46
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32615
32613: GO 32633
32615: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32616: LD_ADDR_VAR 0 3
32620: PUSH
32621: LD_INT 23
32623: PUSH
32624: LD_INT 24
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: ST_TO_ADDR
32631: GO 32660
32633: LD_INT 47
32635: DOUBLE
32636: EQUAL
32637: IFTRUE 32641
32639: GO 32659
32641: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32642: LD_ADDR_VAR 0 3
32646: PUSH
32647: LD_INT 23
32649: PUSH
32650: LD_INT 24
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: ST_TO_ADDR
32657: GO 32660
32659: POP
// result := ( chassis in result ) ;
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_VAR 0 1
32669: PUSH
32670: LD_VAR 0 3
32674: IN
32675: ST_TO_ADDR
// end ;
32676: LD_VAR 0 3
32680: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32681: LD_INT 0
32683: PPUSH
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
32689: PPUSH
// result := array ;
32690: LD_ADDR_VAR 0 5
32694: PUSH
32695: LD_VAR 0 1
32699: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32700: LD_VAR 0 1
32704: NOT
32705: PUSH
32706: LD_VAR 0 2
32710: NOT
32711: OR
32712: PUSH
32713: LD_VAR 0 3
32717: NOT
32718: OR
32719: PUSH
32720: LD_VAR 0 2
32724: PUSH
32725: LD_VAR 0 1
32729: GREATER
32730: OR
32731: PUSH
32732: LD_VAR 0 3
32736: PUSH
32737: LD_VAR 0 1
32741: GREATER
32742: OR
32743: IFFALSE 32747
// exit ;
32745: GO 33043
// if direction then
32747: LD_VAR 0 4
32751: IFFALSE 32815
// begin d := 1 ;
32753: LD_ADDR_VAR 0 9
32757: PUSH
32758: LD_INT 1
32760: ST_TO_ADDR
// if i_from > i_to then
32761: LD_VAR 0 2
32765: PUSH
32766: LD_VAR 0 3
32770: GREATER
32771: IFFALSE 32797
// length := ( array - i_from ) + i_to else
32773: LD_ADDR_VAR 0 11
32777: PUSH
32778: LD_VAR 0 1
32782: PUSH
32783: LD_VAR 0 2
32787: MINUS
32788: PUSH
32789: LD_VAR 0 3
32793: PLUS
32794: ST_TO_ADDR
32795: GO 32813
// length := i_to - i_from ;
32797: LD_ADDR_VAR 0 11
32801: PUSH
32802: LD_VAR 0 3
32806: PUSH
32807: LD_VAR 0 2
32811: MINUS
32812: ST_TO_ADDR
// end else
32813: GO 32876
// begin d := - 1 ;
32815: LD_ADDR_VAR 0 9
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: ST_TO_ADDR
// if i_from > i_to then
32824: LD_VAR 0 2
32828: PUSH
32829: LD_VAR 0 3
32833: GREATER
32834: IFFALSE 32854
// length := i_from - i_to else
32836: LD_ADDR_VAR 0 11
32840: PUSH
32841: LD_VAR 0 2
32845: PUSH
32846: LD_VAR 0 3
32850: MINUS
32851: ST_TO_ADDR
32852: GO 32876
// length := ( array - i_to ) + i_from ;
32854: LD_ADDR_VAR 0 11
32858: PUSH
32859: LD_VAR 0 1
32863: PUSH
32864: LD_VAR 0 3
32868: MINUS
32869: PUSH
32870: LD_VAR 0 2
32874: PLUS
32875: ST_TO_ADDR
// end ; if not length then
32876: LD_VAR 0 11
32880: NOT
32881: IFFALSE 32885
// exit ;
32883: GO 33043
// tmp := array ;
32885: LD_ADDR_VAR 0 10
32889: PUSH
32890: LD_VAR 0 1
32894: ST_TO_ADDR
// for i = 1 to length do
32895: LD_ADDR_VAR 0 6
32899: PUSH
32900: DOUBLE
32901: LD_INT 1
32903: DEC
32904: ST_TO_ADDR
32905: LD_VAR 0 11
32909: PUSH
32910: FOR_TO
32911: IFFALSE 33031
// begin for j = 1 to array do
32913: LD_ADDR_VAR 0 7
32917: PUSH
32918: DOUBLE
32919: LD_INT 1
32921: DEC
32922: ST_TO_ADDR
32923: LD_VAR 0 1
32927: PUSH
32928: FOR_TO
32929: IFFALSE 33017
// begin k := j + d ;
32931: LD_ADDR_VAR 0 8
32935: PUSH
32936: LD_VAR 0 7
32940: PUSH
32941: LD_VAR 0 9
32945: PLUS
32946: ST_TO_ADDR
// if k > array then
32947: LD_VAR 0 8
32951: PUSH
32952: LD_VAR 0 1
32956: GREATER
32957: IFFALSE 32967
// k := 1 ;
32959: LD_ADDR_VAR 0 8
32963: PUSH
32964: LD_INT 1
32966: ST_TO_ADDR
// if not k then
32967: LD_VAR 0 8
32971: NOT
32972: IFFALSE 32984
// k := array ;
32974: LD_ADDR_VAR 0 8
32978: PUSH
32979: LD_VAR 0 1
32983: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32984: LD_ADDR_VAR 0 10
32988: PUSH
32989: LD_VAR 0 10
32993: PPUSH
32994: LD_VAR 0 8
32998: PPUSH
32999: LD_VAR 0 1
33003: PUSH
33004: LD_VAR 0 7
33008: ARRAY
33009: PPUSH
33010: CALL_OW 1
33014: ST_TO_ADDR
// end ;
33015: GO 32928
33017: POP
33018: POP
// array := tmp ;
33019: LD_ADDR_VAR 0 1
33023: PUSH
33024: LD_VAR 0 10
33028: ST_TO_ADDR
// end ;
33029: GO 32910
33031: POP
33032: POP
// result := array ;
33033: LD_ADDR_VAR 0 5
33037: PUSH
33038: LD_VAR 0 1
33042: ST_TO_ADDR
// end ;
33043: LD_VAR 0 5
33047: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33048: LD_INT 0
33050: PPUSH
33051: PPUSH
// result := 0 ;
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: LD_INT 0
33059: ST_TO_ADDR
// if not array or not value in array then
33060: LD_VAR 0 1
33064: NOT
33065: PUSH
33066: LD_VAR 0 2
33070: PUSH
33071: LD_VAR 0 1
33075: IN
33076: NOT
33077: OR
33078: IFFALSE 33082
// exit ;
33080: GO 33136
// for i = 1 to array do
33082: LD_ADDR_VAR 0 4
33086: PUSH
33087: DOUBLE
33088: LD_INT 1
33090: DEC
33091: ST_TO_ADDR
33092: LD_VAR 0 1
33096: PUSH
33097: FOR_TO
33098: IFFALSE 33134
// if value = array [ i ] then
33100: LD_VAR 0 2
33104: PUSH
33105: LD_VAR 0 1
33109: PUSH
33110: LD_VAR 0 4
33114: ARRAY
33115: EQUAL
33116: IFFALSE 33132
// begin result := i ;
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_VAR 0 4
33127: ST_TO_ADDR
// exit ;
33128: POP
33129: POP
33130: GO 33136
// end ;
33132: GO 33097
33134: POP
33135: POP
// end ;
33136: LD_VAR 0 3
33140: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33141: LD_INT 0
33143: PPUSH
// vc_chassis := chassis ;
33144: LD_ADDR_OWVAR 37
33148: PUSH
33149: LD_VAR 0 1
33153: ST_TO_ADDR
// vc_engine := engine ;
33154: LD_ADDR_OWVAR 39
33158: PUSH
33159: LD_VAR 0 2
33163: ST_TO_ADDR
// vc_control := control ;
33164: LD_ADDR_OWVAR 38
33168: PUSH
33169: LD_VAR 0 3
33173: ST_TO_ADDR
// vc_weapon := weapon ;
33174: LD_ADDR_OWVAR 40
33178: PUSH
33179: LD_VAR 0 4
33183: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33184: LD_ADDR_OWVAR 41
33188: PUSH
33189: LD_VAR 0 5
33193: ST_TO_ADDR
// end ;
33194: LD_VAR 0 6
33198: RET
// export function WantPlant ( unit ) ; var task ; begin
33199: LD_INT 0
33201: PPUSH
33202: PPUSH
// result := false ;
33203: LD_ADDR_VAR 0 2
33207: PUSH
33208: LD_INT 0
33210: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_VAR 0 1
33220: PPUSH
33221: CALL_OW 437
33225: ST_TO_ADDR
// if task then
33226: LD_VAR 0 3
33230: IFFALSE 33258
// if task [ 1 ] [ 1 ] = p then
33232: LD_VAR 0 3
33236: PUSH
33237: LD_INT 1
33239: ARRAY
33240: PUSH
33241: LD_INT 1
33243: ARRAY
33244: PUSH
33245: LD_STRING p
33247: EQUAL
33248: IFFALSE 33258
// result := true ;
33250: LD_ADDR_VAR 0 2
33254: PUSH
33255: LD_INT 1
33257: ST_TO_ADDR
// end ;
33258: LD_VAR 0 2
33262: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
// if pos < 1 then
33269: LD_VAR 0 2
33273: PUSH
33274: LD_INT 1
33276: LESS
33277: IFFALSE 33281
// exit ;
33279: GO 33584
// if pos = 1 then
33281: LD_VAR 0 2
33285: PUSH
33286: LD_INT 1
33288: EQUAL
33289: IFFALSE 33322
// result := Replace ( arr , pos [ 1 ] , value ) else
33291: LD_ADDR_VAR 0 4
33295: PUSH
33296: LD_VAR 0 1
33300: PPUSH
33301: LD_VAR 0 2
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PPUSH
33310: LD_VAR 0 3
33314: PPUSH
33315: CALL_OW 1
33319: ST_TO_ADDR
33320: GO 33584
// begin tmp := arr ;
33322: LD_ADDR_VAR 0 6
33326: PUSH
33327: LD_VAR 0 1
33331: ST_TO_ADDR
// s_arr := [ tmp ] ;
33332: LD_ADDR_VAR 0 7
33336: PUSH
33337: LD_VAR 0 6
33341: PUSH
33342: EMPTY
33343: LIST
33344: ST_TO_ADDR
// for i = 1 to pos - 1 do
33345: LD_ADDR_VAR 0 5
33349: PUSH
33350: DOUBLE
33351: LD_INT 1
33353: DEC
33354: ST_TO_ADDR
33355: LD_VAR 0 2
33359: PUSH
33360: LD_INT 1
33362: MINUS
33363: PUSH
33364: FOR_TO
33365: IFFALSE 33410
// begin tmp := tmp [ pos [ i ] ] ;
33367: LD_ADDR_VAR 0 6
33371: PUSH
33372: LD_VAR 0 6
33376: PUSH
33377: LD_VAR 0 2
33381: PUSH
33382: LD_VAR 0 5
33386: ARRAY
33387: ARRAY
33388: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33389: LD_ADDR_VAR 0 7
33393: PUSH
33394: LD_VAR 0 7
33398: PUSH
33399: LD_VAR 0 6
33403: PUSH
33404: EMPTY
33405: LIST
33406: ADD
33407: ST_TO_ADDR
// end ;
33408: GO 33364
33410: POP
33411: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33412: LD_ADDR_VAR 0 6
33416: PUSH
33417: LD_VAR 0 6
33421: PPUSH
33422: LD_VAR 0 2
33426: PUSH
33427: LD_VAR 0 2
33431: ARRAY
33432: PPUSH
33433: LD_VAR 0 3
33437: PPUSH
33438: CALL_OW 1
33442: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33443: LD_ADDR_VAR 0 7
33447: PUSH
33448: LD_VAR 0 7
33452: PPUSH
33453: LD_VAR 0 7
33457: PPUSH
33458: LD_VAR 0 6
33462: PPUSH
33463: CALL_OW 1
33467: ST_TO_ADDR
// for i = s_arr downto 2 do
33468: LD_ADDR_VAR 0 5
33472: PUSH
33473: DOUBLE
33474: LD_VAR 0 7
33478: INC
33479: ST_TO_ADDR
33480: LD_INT 2
33482: PUSH
33483: FOR_DOWNTO
33484: IFFALSE 33568
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33486: LD_ADDR_VAR 0 6
33490: PUSH
33491: LD_VAR 0 7
33495: PUSH
33496: LD_VAR 0 5
33500: PUSH
33501: LD_INT 1
33503: MINUS
33504: ARRAY
33505: PPUSH
33506: LD_VAR 0 2
33510: PUSH
33511: LD_VAR 0 5
33515: PUSH
33516: LD_INT 1
33518: MINUS
33519: ARRAY
33520: PPUSH
33521: LD_VAR 0 7
33525: PUSH
33526: LD_VAR 0 5
33530: ARRAY
33531: PPUSH
33532: CALL_OW 1
33536: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 7
33546: PPUSH
33547: LD_VAR 0 5
33551: PUSH
33552: LD_INT 1
33554: MINUS
33555: PPUSH
33556: LD_VAR 0 6
33560: PPUSH
33561: CALL_OW 1
33565: ST_TO_ADDR
// end ;
33566: GO 33483
33568: POP
33569: POP
// result := s_arr [ 1 ] ;
33570: LD_ADDR_VAR 0 4
33574: PUSH
33575: LD_VAR 0 7
33579: PUSH
33580: LD_INT 1
33582: ARRAY
33583: ST_TO_ADDR
// end ; end ;
33584: LD_VAR 0 4
33588: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
// if not list then
33593: LD_VAR 0 1
33597: NOT
33598: IFFALSE 33602
// exit ;
33600: GO 33693
// i := list [ pos1 ] ;
33602: LD_ADDR_VAR 0 5
33606: PUSH
33607: LD_VAR 0 1
33611: PUSH
33612: LD_VAR 0 2
33616: ARRAY
33617: ST_TO_ADDR
// if not i then
33618: LD_VAR 0 5
33622: NOT
33623: IFFALSE 33627
// exit ;
33625: GO 33693
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33627: LD_ADDR_VAR 0 1
33631: PUSH
33632: LD_VAR 0 1
33636: PPUSH
33637: LD_VAR 0 2
33641: PPUSH
33642: LD_VAR 0 1
33646: PUSH
33647: LD_VAR 0 3
33651: ARRAY
33652: PPUSH
33653: CALL_OW 1
33657: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33658: LD_ADDR_VAR 0 1
33662: PUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: LD_VAR 0 3
33672: PPUSH
33673: LD_VAR 0 5
33677: PPUSH
33678: CALL_OW 1
33682: ST_TO_ADDR
// result := list ;
33683: LD_ADDR_VAR 0 4
33687: PUSH
33688: LD_VAR 0 1
33692: ST_TO_ADDR
// end ;
33693: LD_VAR 0 4
33697: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33698: LD_INT 0
33700: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33701: LD_ADDR_VAR 0 5
33705: PUSH
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL_OW 250
33715: PPUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 251
33725: PPUSH
33726: LD_VAR 0 2
33730: PPUSH
33731: LD_VAR 0 3
33735: PPUSH
33736: LD_VAR 0 4
33740: PPUSH
33741: CALL 33751 0 5
33745: ST_TO_ADDR
// end ;
33746: LD_VAR 0 5
33750: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33751: LD_INT 0
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
// if not list then
33757: LD_VAR 0 3
33761: NOT
33762: IFFALSE 33766
// exit ;
33764: GO 34154
// result := [ ] ;
33766: LD_ADDR_VAR 0 6
33770: PUSH
33771: EMPTY
33772: ST_TO_ADDR
// for i in list do
33773: LD_ADDR_VAR 0 7
33777: PUSH
33778: LD_VAR 0 3
33782: PUSH
33783: FOR_IN
33784: IFFALSE 33986
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33786: LD_ADDR_VAR 0 9
33790: PUSH
33791: LD_VAR 0 7
33795: PPUSH
33796: LD_VAR 0 1
33800: PPUSH
33801: LD_VAR 0 2
33805: PPUSH
33806: CALL_OW 297
33810: ST_TO_ADDR
// if not result then
33811: LD_VAR 0 6
33815: NOT
33816: IFFALSE 33842
// result := [ [ i , tmp ] ] else
33818: LD_ADDR_VAR 0 6
33822: PUSH
33823: LD_VAR 0 7
33827: PUSH
33828: LD_VAR 0 9
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: ST_TO_ADDR
33840: GO 33984
// begin if result [ result ] [ 2 ] < tmp then
33842: LD_VAR 0 6
33846: PUSH
33847: LD_VAR 0 6
33851: ARRAY
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: PUSH
33857: LD_VAR 0 9
33861: LESS
33862: IFFALSE 33904
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33864: LD_ADDR_VAR 0 6
33868: PUSH
33869: LD_VAR 0 6
33873: PPUSH
33874: LD_VAR 0 6
33878: PUSH
33879: LD_INT 1
33881: PLUS
33882: PPUSH
33883: LD_VAR 0 7
33887: PUSH
33888: LD_VAR 0 9
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PPUSH
33897: CALL_OW 2
33901: ST_TO_ADDR
33902: GO 33984
// for j = 1 to result do
33904: LD_ADDR_VAR 0 8
33908: PUSH
33909: DOUBLE
33910: LD_INT 1
33912: DEC
33913: ST_TO_ADDR
33914: LD_VAR 0 6
33918: PUSH
33919: FOR_TO
33920: IFFALSE 33982
// begin if tmp < result [ j ] [ 2 ] then
33922: LD_VAR 0 9
33926: PUSH
33927: LD_VAR 0 6
33931: PUSH
33932: LD_VAR 0 8
33936: ARRAY
33937: PUSH
33938: LD_INT 2
33940: ARRAY
33941: LESS
33942: IFFALSE 33980
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33944: LD_ADDR_VAR 0 6
33948: PUSH
33949: LD_VAR 0 6
33953: PPUSH
33954: LD_VAR 0 8
33958: PPUSH
33959: LD_VAR 0 7
33963: PUSH
33964: LD_VAR 0 9
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PPUSH
33973: CALL_OW 2
33977: ST_TO_ADDR
// break ;
33978: GO 33982
// end ; end ;
33980: GO 33919
33982: POP
33983: POP
// end ; end ;
33984: GO 33783
33986: POP
33987: POP
// if result and not asc then
33988: LD_VAR 0 6
33992: PUSH
33993: LD_VAR 0 4
33997: NOT
33998: AND
33999: IFFALSE 34074
// begin tmp := result ;
34001: LD_ADDR_VAR 0 9
34005: PUSH
34006: LD_VAR 0 6
34010: ST_TO_ADDR
// for i = tmp downto 1 do
34011: LD_ADDR_VAR 0 7
34015: PUSH
34016: DOUBLE
34017: LD_VAR 0 9
34021: INC
34022: ST_TO_ADDR
34023: LD_INT 1
34025: PUSH
34026: FOR_DOWNTO
34027: IFFALSE 34072
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34029: LD_ADDR_VAR 0 6
34033: PUSH
34034: LD_VAR 0 6
34038: PPUSH
34039: LD_VAR 0 9
34043: PUSH
34044: LD_VAR 0 7
34048: MINUS
34049: PUSH
34050: LD_INT 1
34052: PLUS
34053: PPUSH
34054: LD_VAR 0 9
34058: PUSH
34059: LD_VAR 0 7
34063: ARRAY
34064: PPUSH
34065: CALL_OW 1
34069: ST_TO_ADDR
34070: GO 34026
34072: POP
34073: POP
// end ; tmp := [ ] ;
34074: LD_ADDR_VAR 0 9
34078: PUSH
34079: EMPTY
34080: ST_TO_ADDR
// if mode then
34081: LD_VAR 0 5
34085: IFFALSE 34154
// begin for i = 1 to result do
34087: LD_ADDR_VAR 0 7
34091: PUSH
34092: DOUBLE
34093: LD_INT 1
34095: DEC
34096: ST_TO_ADDR
34097: LD_VAR 0 6
34101: PUSH
34102: FOR_TO
34103: IFFALSE 34142
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34105: LD_ADDR_VAR 0 9
34109: PUSH
34110: LD_VAR 0 9
34114: PPUSH
34115: LD_VAR 0 7
34119: PPUSH
34120: LD_VAR 0 6
34124: PUSH
34125: LD_VAR 0 7
34129: ARRAY
34130: PUSH
34131: LD_INT 1
34133: ARRAY
34134: PPUSH
34135: CALL_OW 1
34139: ST_TO_ADDR
34140: GO 34102
34142: POP
34143: POP
// result := tmp ;
34144: LD_ADDR_VAR 0 6
34148: PUSH
34149: LD_VAR 0 9
34153: ST_TO_ADDR
// end ; end ;
34154: LD_VAR 0 6
34158: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34159: LD_INT 0
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34167: LD_ADDR_VAR 0 5
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: EMPTY
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
// if not x or not y then
34189: LD_VAR 0 2
34193: NOT
34194: PUSH
34195: LD_VAR 0 3
34199: NOT
34200: OR
34201: IFFALSE 34205
// exit ;
34203: GO 35851
// if not range then
34205: LD_VAR 0 4
34209: NOT
34210: IFFALSE 34220
// range := 10 ;
34212: LD_ADDR_VAR 0 4
34216: PUSH
34217: LD_INT 10
34219: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34220: LD_ADDR_VAR 0 8
34224: PUSH
34225: LD_INT 81
34227: PUSH
34228: LD_VAR 0 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 92
34239: PUSH
34240: LD_VAR 0 2
34244: PUSH
34245: LD_VAR 0 3
34249: PUSH
34250: LD_VAR 0 4
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: PPUSH
34283: CALL_OW 69
34287: ST_TO_ADDR
// if not tmp then
34288: LD_VAR 0 8
34292: NOT
34293: IFFALSE 34297
// exit ;
34295: GO 35851
// for i in tmp do
34297: LD_ADDR_VAR 0 6
34301: PUSH
34302: LD_VAR 0 8
34306: PUSH
34307: FOR_IN
34308: IFFALSE 35826
// begin points := [ 0 , 0 , 0 ] ;
34310: LD_ADDR_VAR 0 9
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// bpoints := 1 ;
34329: LD_ADDR_VAR 0 10
34333: PUSH
34334: LD_INT 1
34336: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34337: LD_VAR 0 6
34341: PPUSH
34342: CALL_OW 247
34346: PUSH
34347: LD_INT 1
34349: DOUBLE
34350: EQUAL
34351: IFTRUE 34355
34353: GO 34933
34355: POP
// begin if GetClass ( i ) = 1 then
34356: LD_VAR 0 6
34360: PPUSH
34361: CALL_OW 257
34365: PUSH
34366: LD_INT 1
34368: EQUAL
34369: IFFALSE 34390
// points := [ 10 , 5 , 3 ] ;
34371: LD_ADDR_VAR 0 9
34375: PUSH
34376: LD_INT 10
34378: PUSH
34379: LD_INT 5
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34390: LD_VAR 0 6
34394: PPUSH
34395: CALL_OW 257
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 3
34405: PUSH
34406: LD_INT 4
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: IN
34414: IFFALSE 34435
// points := [ 3 , 2 , 1 ] ;
34416: LD_ADDR_VAR 0 9
34420: PUSH
34421: LD_INT 3
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34435: LD_VAR 0 6
34439: PPUSH
34440: CALL_OW 257
34444: PUSH
34445: LD_INT 5
34447: EQUAL
34448: IFFALSE 34469
// points := [ 130 , 5 , 2 ] ;
34450: LD_ADDR_VAR 0 9
34454: PUSH
34455: LD_INT 130
34457: PUSH
34458: LD_INT 5
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34469: LD_VAR 0 6
34473: PPUSH
34474: CALL_OW 257
34478: PUSH
34479: LD_INT 8
34481: EQUAL
34482: IFFALSE 34503
// points := [ 35 , 35 , 30 ] ;
34484: LD_ADDR_VAR 0 9
34488: PUSH
34489: LD_INT 35
34491: PUSH
34492: LD_INT 35
34494: PUSH
34495: LD_INT 30
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34503: LD_VAR 0 6
34507: PPUSH
34508: CALL_OW 257
34512: PUSH
34513: LD_INT 9
34515: EQUAL
34516: IFFALSE 34537
// points := [ 20 , 55 , 40 ] ;
34518: LD_ADDR_VAR 0 9
34522: PUSH
34523: LD_INT 20
34525: PUSH
34526: LD_INT 55
34528: PUSH
34529: LD_INT 40
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34537: LD_VAR 0 6
34541: PPUSH
34542: CALL_OW 257
34546: PUSH
34547: LD_INT 12
34549: PUSH
34550: LD_INT 16
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: IN
34557: IFFALSE 34578
// points := [ 5 , 3 , 2 ] ;
34559: LD_ADDR_VAR 0 9
34563: PUSH
34564: LD_INT 5
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34578: LD_VAR 0 6
34582: PPUSH
34583: CALL_OW 257
34587: PUSH
34588: LD_INT 17
34590: EQUAL
34591: IFFALSE 34612
// points := [ 100 , 50 , 75 ] ;
34593: LD_ADDR_VAR 0 9
34597: PUSH
34598: LD_INT 100
34600: PUSH
34601: LD_INT 50
34603: PUSH
34604: LD_INT 75
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34612: LD_VAR 0 6
34616: PPUSH
34617: CALL_OW 257
34621: PUSH
34622: LD_INT 15
34624: EQUAL
34625: IFFALSE 34646
// points := [ 10 , 5 , 3 ] ;
34627: LD_ADDR_VAR 0 9
34631: PUSH
34632: LD_INT 10
34634: PUSH
34635: LD_INT 5
34637: PUSH
34638: LD_INT 3
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34646: LD_VAR 0 6
34650: PPUSH
34651: CALL_OW 257
34655: PUSH
34656: LD_INT 14
34658: EQUAL
34659: IFFALSE 34680
// points := [ 10 , 0 , 0 ] ;
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: LD_INT 10
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34680: LD_VAR 0 6
34684: PPUSH
34685: CALL_OW 257
34689: PUSH
34690: LD_INT 11
34692: EQUAL
34693: IFFALSE 34714
// points := [ 30 , 10 , 5 ] ;
34695: LD_ADDR_VAR 0 9
34699: PUSH
34700: LD_INT 30
34702: PUSH
34703: LD_INT 10
34705: PUSH
34706: LD_INT 5
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34714: LD_VAR 0 1
34718: PPUSH
34719: LD_INT 5
34721: PPUSH
34722: CALL_OW 321
34726: PUSH
34727: LD_INT 2
34729: EQUAL
34730: IFFALSE 34747
// bpoints := bpoints * 1.8 ;
34732: LD_ADDR_VAR 0 10
34736: PUSH
34737: LD_VAR 0 10
34741: PUSH
34742: LD_REAL  1.80000000000000E+0000
34745: MUL
34746: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34747: LD_VAR 0 6
34751: PPUSH
34752: CALL_OW 257
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 3
34765: PUSH
34766: LD_INT 4
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: IN
34775: PUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: LD_INT 51
34783: PPUSH
34784: CALL_OW 321
34788: PUSH
34789: LD_INT 2
34791: EQUAL
34792: AND
34793: IFFALSE 34810
// bpoints := bpoints * 1.2 ;
34795: LD_ADDR_VAR 0 10
34799: PUSH
34800: LD_VAR 0 10
34804: PUSH
34805: LD_REAL  1.20000000000000E+0000
34808: MUL
34809: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34810: LD_VAR 0 6
34814: PPUSH
34815: CALL_OW 257
34819: PUSH
34820: LD_INT 5
34822: PUSH
34823: LD_INT 7
34825: PUSH
34826: LD_INT 9
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: IN
34834: PUSH
34835: LD_VAR 0 1
34839: PPUSH
34840: LD_INT 52
34842: PPUSH
34843: CALL_OW 321
34847: PUSH
34848: LD_INT 2
34850: EQUAL
34851: AND
34852: IFFALSE 34869
// bpoints := bpoints * 1.5 ;
34854: LD_ADDR_VAR 0 10
34858: PUSH
34859: LD_VAR 0 10
34863: PUSH
34864: LD_REAL  1.50000000000000E+0000
34867: MUL
34868: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34869: LD_VAR 0 1
34873: PPUSH
34874: LD_INT 66
34876: PPUSH
34877: CALL_OW 321
34881: PUSH
34882: LD_INT 2
34884: EQUAL
34885: IFFALSE 34902
// bpoints := bpoints * 1.1 ;
34887: LD_ADDR_VAR 0 10
34891: PUSH
34892: LD_VAR 0 10
34896: PUSH
34897: LD_REAL  1.10000000000000E+0000
34900: MUL
34901: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34902: LD_ADDR_VAR 0 10
34906: PUSH
34907: LD_VAR 0 10
34911: PUSH
34912: LD_VAR 0 6
34916: PPUSH
34917: LD_INT 1
34919: PPUSH
34920: CALL_OW 259
34924: PUSH
34925: LD_REAL  1.15000000000000E+0000
34928: MUL
34929: MUL
34930: ST_TO_ADDR
// end ; unit_vehicle :
34931: GO 35755
34933: LD_INT 2
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34941
34939: GO 35743
34941: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34942: LD_VAR 0 6
34946: PPUSH
34947: CALL_OW 264
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 42
34957: PUSH
34958: LD_INT 24
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: IN
34966: IFFALSE 34987
// points := [ 25 , 5 , 3 ] ;
34968: LD_ADDR_VAR 0 9
34972: PUSH
34973: LD_INT 25
34975: PUSH
34976: LD_INT 5
34978: PUSH
34979: LD_INT 3
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34987: LD_VAR 0 6
34991: PPUSH
34992: CALL_OW 264
34996: PUSH
34997: LD_INT 4
34999: PUSH
35000: LD_INT 43
35002: PUSH
35003: LD_INT 25
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: IN
35011: IFFALSE 35032
// points := [ 40 , 15 , 5 ] ;
35013: LD_ADDR_VAR 0 9
35017: PUSH
35018: LD_INT 40
35020: PUSH
35021: LD_INT 15
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35032: LD_VAR 0 6
35036: PPUSH
35037: CALL_OW 264
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: LD_INT 23
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: IN
35052: IFFALSE 35073
// points := [ 7 , 25 , 8 ] ;
35054: LD_ADDR_VAR 0 9
35058: PUSH
35059: LD_INT 7
35061: PUSH
35062: LD_INT 25
35064: PUSH
35065: LD_INT 8
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35073: LD_VAR 0 6
35077: PPUSH
35078: CALL_OW 264
35082: PUSH
35083: LD_INT 5
35085: PUSH
35086: LD_INT 27
35088: PUSH
35089: LD_INT 44
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: IN
35097: IFFALSE 35118
// points := [ 14 , 50 , 16 ] ;
35099: LD_ADDR_VAR 0 9
35103: PUSH
35104: LD_INT 14
35106: PUSH
35107: LD_INT 50
35109: PUSH
35110: LD_INT 16
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35118: LD_VAR 0 6
35122: PPUSH
35123: CALL_OW 264
35127: PUSH
35128: LD_INT 6
35130: PUSH
35131: LD_INT 46
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: IN
35138: IFFALSE 35159
// points := [ 32 , 120 , 70 ] ;
35140: LD_ADDR_VAR 0 9
35144: PUSH
35145: LD_INT 32
35147: PUSH
35148: LD_INT 120
35150: PUSH
35151: LD_INT 70
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35159: LD_VAR 0 6
35163: PPUSH
35164: CALL_OW 264
35168: PUSH
35169: LD_INT 7
35171: PUSH
35172: LD_INT 28
35174: PUSH
35175: LD_INT 45
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: IN
35183: IFFALSE 35204
// points := [ 35 , 20 , 45 ] ;
35185: LD_ADDR_VAR 0 9
35189: PUSH
35190: LD_INT 35
35192: PUSH
35193: LD_INT 20
35195: PUSH
35196: LD_INT 45
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35204: LD_VAR 0 6
35208: PPUSH
35209: CALL_OW 264
35213: PUSH
35214: LD_INT 47
35216: PUSH
35217: EMPTY
35218: LIST
35219: IN
35220: IFFALSE 35241
// points := [ 67 , 45 , 75 ] ;
35222: LD_ADDR_VAR 0 9
35226: PUSH
35227: LD_INT 67
35229: PUSH
35230: LD_INT 45
35232: PUSH
35233: LD_INT 75
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35241: LD_VAR 0 6
35245: PPUSH
35246: CALL_OW 264
35250: PUSH
35251: LD_INT 26
35253: PUSH
35254: EMPTY
35255: LIST
35256: IN
35257: IFFALSE 35278
// points := [ 120 , 30 , 80 ] ;
35259: LD_ADDR_VAR 0 9
35263: PUSH
35264: LD_INT 120
35266: PUSH
35267: LD_INT 30
35269: PUSH
35270: LD_INT 80
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35278: LD_VAR 0 6
35282: PPUSH
35283: CALL_OW 264
35287: PUSH
35288: LD_INT 22
35290: PUSH
35291: EMPTY
35292: LIST
35293: IN
35294: IFFALSE 35315
// points := [ 40 , 1 , 1 ] ;
35296: LD_ADDR_VAR 0 9
35300: PUSH
35301: LD_INT 40
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35315: LD_VAR 0 6
35319: PPUSH
35320: CALL_OW 264
35324: PUSH
35325: LD_INT 29
35327: PUSH
35328: EMPTY
35329: LIST
35330: IN
35331: IFFALSE 35352
// points := [ 70 , 200 , 400 ] ;
35333: LD_ADDR_VAR 0 9
35337: PUSH
35338: LD_INT 70
35340: PUSH
35341: LD_INT 200
35343: PUSH
35344: LD_INT 400
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35352: LD_VAR 0 6
35356: PPUSH
35357: CALL_OW 264
35361: PUSH
35362: LD_INT 14
35364: PUSH
35365: LD_INT 53
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: IN
35372: IFFALSE 35393
// points := [ 40 , 10 , 20 ] ;
35374: LD_ADDR_VAR 0 9
35378: PUSH
35379: LD_INT 40
35381: PUSH
35382: LD_INT 10
35384: PUSH
35385: LD_INT 20
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35393: LD_VAR 0 6
35397: PPUSH
35398: CALL_OW 264
35402: PUSH
35403: LD_INT 9
35405: PUSH
35406: EMPTY
35407: LIST
35408: IN
35409: IFFALSE 35430
// points := [ 5 , 70 , 20 ] ;
35411: LD_ADDR_VAR 0 9
35415: PUSH
35416: LD_INT 5
35418: PUSH
35419: LD_INT 70
35421: PUSH
35422: LD_INT 20
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35430: LD_VAR 0 6
35434: PPUSH
35435: CALL_OW 264
35439: PUSH
35440: LD_INT 10
35442: PUSH
35443: EMPTY
35444: LIST
35445: IN
35446: IFFALSE 35467
// points := [ 35 , 110 , 70 ] ;
35448: LD_ADDR_VAR 0 9
35452: PUSH
35453: LD_INT 35
35455: PUSH
35456: LD_INT 110
35458: PUSH
35459: LD_INT 70
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35467: LD_VAR 0 6
35471: PPUSH
35472: CALL_OW 265
35476: PUSH
35477: LD_INT 25
35479: EQUAL
35480: IFFALSE 35501
// points := [ 80 , 65 , 100 ] ;
35482: LD_ADDR_VAR 0 9
35486: PUSH
35487: LD_INT 80
35489: PUSH
35490: LD_INT 65
35492: PUSH
35493: LD_INT 100
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35501: LD_VAR 0 6
35505: PPUSH
35506: CALL_OW 263
35510: PUSH
35511: LD_INT 1
35513: EQUAL
35514: IFFALSE 35549
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35516: LD_ADDR_VAR 0 10
35520: PUSH
35521: LD_VAR 0 10
35525: PUSH
35526: LD_VAR 0 6
35530: PPUSH
35531: CALL_OW 311
35535: PPUSH
35536: LD_INT 3
35538: PPUSH
35539: CALL_OW 259
35543: PUSH
35544: LD_INT 4
35546: MUL
35547: MUL
35548: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35549: LD_VAR 0 6
35553: PPUSH
35554: CALL_OW 263
35558: PUSH
35559: LD_INT 2
35561: EQUAL
35562: IFFALSE 35613
// begin j := IsControledBy ( i ) ;
35564: LD_ADDR_VAR 0 7
35568: PUSH
35569: LD_VAR 0 6
35573: PPUSH
35574: CALL_OW 312
35578: ST_TO_ADDR
// if j then
35579: LD_VAR 0 7
35583: IFFALSE 35613
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35585: LD_ADDR_VAR 0 10
35589: PUSH
35590: LD_VAR 0 10
35594: PUSH
35595: LD_VAR 0 7
35599: PPUSH
35600: LD_INT 3
35602: PPUSH
35603: CALL_OW 259
35607: PUSH
35608: LD_INT 3
35610: MUL
35611: MUL
35612: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35613: LD_VAR 0 6
35617: PPUSH
35618: CALL_OW 264
35622: PUSH
35623: LD_INT 5
35625: PUSH
35626: LD_INT 6
35628: PUSH
35629: LD_INT 46
35631: PUSH
35632: LD_INT 44
35634: PUSH
35635: LD_INT 47
35637: PUSH
35638: LD_INT 45
35640: PUSH
35641: LD_INT 28
35643: PUSH
35644: LD_INT 7
35646: PUSH
35647: LD_INT 27
35649: PUSH
35650: LD_INT 29
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: IN
35665: PUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: LD_INT 52
35673: PPUSH
35674: CALL_OW 321
35678: PUSH
35679: LD_INT 2
35681: EQUAL
35682: AND
35683: IFFALSE 35700
// bpoints := bpoints * 1.2 ;
35685: LD_ADDR_VAR 0 10
35689: PUSH
35690: LD_VAR 0 10
35694: PUSH
35695: LD_REAL  1.20000000000000E+0000
35698: MUL
35699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35700: LD_VAR 0 6
35704: PPUSH
35705: CALL_OW 264
35709: PUSH
35710: LD_INT 6
35712: PUSH
35713: LD_INT 46
35715: PUSH
35716: LD_INT 47
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: IN
35724: IFFALSE 35741
// bpoints := bpoints * 1.2 ;
35726: LD_ADDR_VAR 0 10
35730: PUSH
35731: LD_VAR 0 10
35735: PUSH
35736: LD_REAL  1.20000000000000E+0000
35739: MUL
35740: ST_TO_ADDR
// end ; unit_building :
35741: GO 35755
35743: LD_INT 3
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35754
35751: POP
// ; end ;
35752: GO 35755
35754: POP
// for j = 1 to 3 do
35755: LD_ADDR_VAR 0 7
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_INT 3
35767: PUSH
35768: FOR_TO
35769: IFFALSE 35822
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35771: LD_ADDR_VAR 0 5
35775: PUSH
35776: LD_VAR 0 5
35780: PPUSH
35781: LD_VAR 0 7
35785: PPUSH
35786: LD_VAR 0 5
35790: PUSH
35791: LD_VAR 0 7
35795: ARRAY
35796: PUSH
35797: LD_VAR 0 9
35801: PUSH
35802: LD_VAR 0 7
35806: ARRAY
35807: PUSH
35808: LD_VAR 0 10
35812: MUL
35813: PLUS
35814: PPUSH
35815: CALL_OW 1
35819: ST_TO_ADDR
35820: GO 35768
35822: POP
35823: POP
// end ;
35824: GO 34307
35826: POP
35827: POP
// result := Replace ( result , 4 , tmp ) ;
35828: LD_ADDR_VAR 0 5
35832: PUSH
35833: LD_VAR 0 5
35837: PPUSH
35838: LD_INT 4
35840: PPUSH
35841: LD_VAR 0 8
35845: PPUSH
35846: CALL_OW 1
35850: ST_TO_ADDR
// end ;
35851: LD_VAR 0 5
35855: RET
// export function DangerAtRange ( unit , range ) ; begin
35856: LD_INT 0
35858: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35859: LD_ADDR_VAR 0 3
35863: PUSH
35864: LD_VAR 0 1
35868: PPUSH
35869: CALL_OW 255
35873: PPUSH
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 250
35883: PPUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 251
35893: PPUSH
35894: LD_VAR 0 2
35898: PPUSH
35899: CALL 34159 0 4
35903: ST_TO_ADDR
// end ;
35904: LD_VAR 0 3
35908: RET
// export function DangerInArea ( side , area ) ; begin
35909: LD_INT 0
35911: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35912: LD_ADDR_VAR 0 3
35916: PUSH
35917: LD_VAR 0 2
35921: PPUSH
35922: LD_INT 81
35924: PUSH
35925: LD_VAR 0 1
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PPUSH
35934: CALL_OW 70
35938: ST_TO_ADDR
// end ;
35939: LD_VAR 0 3
35943: RET
// export function IsExtension ( b ) ; begin
35944: LD_INT 0
35946: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35947: LD_ADDR_VAR 0 2
35951: PUSH
35952: LD_VAR 0 1
35956: PUSH
35957: LD_INT 23
35959: PUSH
35960: LD_INT 20
35962: PUSH
35963: LD_INT 22
35965: PUSH
35966: LD_INT 17
35968: PUSH
35969: LD_INT 24
35971: PUSH
35972: LD_INT 21
35974: PUSH
35975: LD_INT 19
35977: PUSH
35978: LD_INT 16
35980: PUSH
35981: LD_INT 25
35983: PUSH
35984: LD_INT 18
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: IN
35999: ST_TO_ADDR
// end ;
36000: LD_VAR 0 2
36004: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36005: LD_INT 0
36007: PPUSH
36008: PPUSH
36009: PPUSH
// result := [ ] ;
36010: LD_ADDR_VAR 0 4
36014: PUSH
36015: EMPTY
36016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_VAR 0 2
36026: PPUSH
36027: LD_INT 21
36029: PUSH
36030: LD_INT 3
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PPUSH
36037: CALL_OW 70
36041: ST_TO_ADDR
// if not tmp then
36042: LD_VAR 0 5
36046: NOT
36047: IFFALSE 36051
// exit ;
36049: GO 36115
// if checkLink then
36051: LD_VAR 0 3
36055: IFFALSE 36105
// begin for i in tmp do
36057: LD_ADDR_VAR 0 6
36061: PUSH
36062: LD_VAR 0 5
36066: PUSH
36067: FOR_IN
36068: IFFALSE 36103
// if GetBase ( i ) <> base then
36070: LD_VAR 0 6
36074: PPUSH
36075: CALL_OW 274
36079: PUSH
36080: LD_VAR 0 1
36084: NONEQUAL
36085: IFFALSE 36101
// ComLinkToBase ( base , i ) ;
36087: LD_VAR 0 1
36091: PPUSH
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 169
36101: GO 36067
36103: POP
36104: POP
// end ; result := tmp ;
36105: LD_ADDR_VAR 0 4
36109: PUSH
36110: LD_VAR 0 5
36114: ST_TO_ADDR
// end ;
36115: LD_VAR 0 4
36119: RET
// export function ComComplete ( units , b ) ; var i ; begin
36120: LD_INT 0
36122: PPUSH
36123: PPUSH
// if not units then
36124: LD_VAR 0 1
36128: NOT
36129: IFFALSE 36133
// exit ;
36131: GO 36223
// for i in units do
36133: LD_ADDR_VAR 0 4
36137: PUSH
36138: LD_VAR 0 1
36142: PUSH
36143: FOR_IN
36144: IFFALSE 36221
// if BuildingStatus ( b ) = bs_build then
36146: LD_VAR 0 2
36150: PPUSH
36151: CALL_OW 461
36155: PUSH
36156: LD_INT 1
36158: EQUAL
36159: IFFALSE 36219
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36161: LD_VAR 0 4
36165: PPUSH
36166: LD_STRING h
36168: PUSH
36169: LD_VAR 0 2
36173: PPUSH
36174: CALL_OW 250
36178: PUSH
36179: LD_VAR 0 2
36183: PPUSH
36184: CALL_OW 251
36188: PUSH
36189: LD_VAR 0 2
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: PUSH
36212: EMPTY
36213: LIST
36214: PPUSH
36215: CALL_OW 446
36219: GO 36143
36221: POP
36222: POP
// end ;
36223: LD_VAR 0 3
36227: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36236: LD_VAR 0 1
36240: NOT
36241: PUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 263
36251: PUSH
36252: LD_INT 2
36254: EQUAL
36255: NOT
36256: OR
36257: IFFALSE 36261
// exit ;
36259: GO 36577
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36261: LD_ADDR_VAR 0 6
36265: PUSH
36266: LD_INT 22
36268: PUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 255
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 30
36288: PUSH
36289: LD_INT 36
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 34
36298: PUSH
36299: LD_INT 31
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PPUSH
36315: CALL_OW 69
36319: ST_TO_ADDR
// if not tmp then
36320: LD_VAR 0 6
36324: NOT
36325: IFFALSE 36329
// exit ;
36327: GO 36577
// result := [ ] ;
36329: LD_ADDR_VAR 0 2
36333: PUSH
36334: EMPTY
36335: ST_TO_ADDR
// for i in tmp do
36336: LD_ADDR_VAR 0 3
36340: PUSH
36341: LD_VAR 0 6
36345: PUSH
36346: FOR_IN
36347: IFFALSE 36418
// begin t := UnitsInside ( i ) ;
36349: LD_ADDR_VAR 0 4
36353: PUSH
36354: LD_VAR 0 3
36358: PPUSH
36359: CALL_OW 313
36363: ST_TO_ADDR
// if t then
36364: LD_VAR 0 4
36368: IFFALSE 36416
// for j in t do
36370: LD_ADDR_VAR 0 7
36374: PUSH
36375: LD_VAR 0 4
36379: PUSH
36380: FOR_IN
36381: IFFALSE 36414
// result := Insert ( result , result + 1 , j ) ;
36383: LD_ADDR_VAR 0 2
36387: PUSH
36388: LD_VAR 0 2
36392: PPUSH
36393: LD_VAR 0 2
36397: PUSH
36398: LD_INT 1
36400: PLUS
36401: PPUSH
36402: LD_VAR 0 7
36406: PPUSH
36407: CALL_OW 2
36411: ST_TO_ADDR
36412: GO 36380
36414: POP
36415: POP
// end ;
36416: GO 36346
36418: POP
36419: POP
// if not result then
36420: LD_VAR 0 2
36424: NOT
36425: IFFALSE 36429
// exit ;
36427: GO 36577
// mech := result [ 1 ] ;
36429: LD_ADDR_VAR 0 5
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: ST_TO_ADDR
// if result > 1 then
36443: LD_VAR 0 2
36447: PUSH
36448: LD_INT 1
36450: GREATER
36451: IFFALSE 36563
// for i = 2 to result do
36453: LD_ADDR_VAR 0 3
36457: PUSH
36458: DOUBLE
36459: LD_INT 2
36461: DEC
36462: ST_TO_ADDR
36463: LD_VAR 0 2
36467: PUSH
36468: FOR_TO
36469: IFFALSE 36561
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36471: LD_ADDR_VAR 0 4
36475: PUSH
36476: LD_VAR 0 2
36480: PUSH
36481: LD_VAR 0 3
36485: ARRAY
36486: PPUSH
36487: LD_INT 3
36489: PPUSH
36490: CALL_OW 259
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_VAR 0 3
36504: ARRAY
36505: PPUSH
36506: CALL_OW 432
36510: MINUS
36511: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36512: LD_VAR 0 4
36516: PUSH
36517: LD_VAR 0 5
36521: PPUSH
36522: LD_INT 3
36524: PPUSH
36525: CALL_OW 259
36529: PUSH
36530: LD_VAR 0 5
36534: PPUSH
36535: CALL_OW 432
36539: MINUS
36540: GREATEREQUAL
36541: IFFALSE 36559
// mech := result [ i ] ;
36543: LD_ADDR_VAR 0 5
36547: PUSH
36548: LD_VAR 0 2
36552: PUSH
36553: LD_VAR 0 3
36557: ARRAY
36558: ST_TO_ADDR
// end ;
36559: GO 36468
36561: POP
36562: POP
// ComLinkTo ( vehicle , mech ) ;
36563: LD_VAR 0 1
36567: PPUSH
36568: LD_VAR 0 5
36572: PPUSH
36573: CALL_OW 135
// end ;
36577: LD_VAR 0 2
36581: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
36596: PPUSH
// result := [ ] ;
36597: LD_ADDR_VAR 0 7
36601: PUSH
36602: EMPTY
36603: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 266
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: IN
36624: NOT
36625: IFFALSE 36629
// exit ;
36627: GO 38263
// if name then
36629: LD_VAR 0 3
36633: IFFALSE 36649
// SetBName ( base_dep , name ) ;
36635: LD_VAR 0 1
36639: PPUSH
36640: LD_VAR 0 3
36644: PPUSH
36645: CALL_OW 500
// base := GetBase ( base_dep ) ;
36649: LD_ADDR_VAR 0 15
36653: PUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: CALL_OW 274
36663: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36664: LD_ADDR_VAR 0 16
36668: PUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 255
36678: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36679: LD_ADDR_VAR 0 17
36683: PUSH
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 248
36693: ST_TO_ADDR
// if sources then
36694: LD_VAR 0 5
36698: IFFALSE 36745
// for i = 1 to 3 do
36700: LD_ADDR_VAR 0 8
36704: PUSH
36705: DOUBLE
36706: LD_INT 1
36708: DEC
36709: ST_TO_ADDR
36710: LD_INT 3
36712: PUSH
36713: FOR_TO
36714: IFFALSE 36743
// AddResourceType ( base , i , sources [ i ] ) ;
36716: LD_VAR 0 15
36720: PPUSH
36721: LD_VAR 0 8
36725: PPUSH
36726: LD_VAR 0 5
36730: PUSH
36731: LD_VAR 0 8
36735: ARRAY
36736: PPUSH
36737: CALL_OW 276
36741: GO 36713
36743: POP
36744: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36745: LD_ADDR_VAR 0 18
36749: PUSH
36750: LD_VAR 0 15
36754: PPUSH
36755: LD_VAR 0 2
36759: PPUSH
36760: LD_INT 1
36762: PPUSH
36763: CALL 36005 0 3
36767: ST_TO_ADDR
// InitHc ;
36768: CALL_OW 19
// InitUc ;
36772: CALL_OW 18
// uc_side := side ;
36776: LD_ADDR_OWVAR 20
36780: PUSH
36781: LD_VAR 0 16
36785: ST_TO_ADDR
// uc_nation := nation ;
36786: LD_ADDR_OWVAR 21
36790: PUSH
36791: LD_VAR 0 17
36795: ST_TO_ADDR
// if buildings then
36796: LD_VAR 0 18
36800: IFFALSE 38122
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36802: LD_ADDR_VAR 0 19
36806: PUSH
36807: LD_VAR 0 18
36811: PPUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 30
36817: PUSH
36818: LD_INT 29
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 30
36827: PUSH
36828: LD_INT 30
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: PPUSH
36840: CALL_OW 72
36844: ST_TO_ADDR
// if tmp then
36845: LD_VAR 0 19
36849: IFFALSE 36897
// for i in tmp do
36851: LD_ADDR_VAR 0 8
36855: PUSH
36856: LD_VAR 0 19
36860: PUSH
36861: FOR_IN
36862: IFFALSE 36895
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36864: LD_VAR 0 8
36868: PPUSH
36869: CALL_OW 250
36873: PPUSH
36874: LD_VAR 0 8
36878: PPUSH
36879: CALL_OW 251
36883: PPUSH
36884: LD_VAR 0 16
36888: PPUSH
36889: CALL_OW 441
36893: GO 36861
36895: POP
36896: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36897: LD_VAR 0 18
36901: PPUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 30
36907: PUSH
36908: LD_INT 32
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 30
36917: PUSH
36918: LD_INT 33
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PPUSH
36930: CALL_OW 72
36934: IFFALSE 37022
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36936: LD_ADDR_VAR 0 8
36940: PUSH
36941: LD_VAR 0 18
36945: PPUSH
36946: LD_INT 2
36948: PUSH
36949: LD_INT 30
36951: PUSH
36952: LD_INT 32
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 30
36961: PUSH
36962: LD_INT 33
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: PPUSH
36974: CALL_OW 72
36978: PUSH
36979: FOR_IN
36980: IFFALSE 37020
// begin if not GetBWeapon ( i ) then
36982: LD_VAR 0 8
36986: PPUSH
36987: CALL_OW 269
36991: NOT
36992: IFFALSE 37018
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36994: LD_VAR 0 8
36998: PPUSH
36999: LD_VAR 0 8
37003: PPUSH
37004: LD_VAR 0 2
37008: PPUSH
37009: CALL 38268 0 2
37013: PPUSH
37014: CALL_OW 431
// end ;
37018: GO 36979
37020: POP
37021: POP
// end ; for i = 1 to personel do
37022: LD_ADDR_VAR 0 8
37026: PUSH
37027: DOUBLE
37028: LD_INT 1
37030: DEC
37031: ST_TO_ADDR
37032: LD_VAR 0 6
37036: PUSH
37037: FOR_TO
37038: IFFALSE 38102
// begin if i > 4 then
37040: LD_VAR 0 8
37044: PUSH
37045: LD_INT 4
37047: GREATER
37048: IFFALSE 37052
// break ;
37050: GO 38102
// case i of 1 :
37052: LD_VAR 0 8
37056: PUSH
37057: LD_INT 1
37059: DOUBLE
37060: EQUAL
37061: IFTRUE 37065
37063: GO 37145
37065: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37066: LD_ADDR_VAR 0 12
37070: PUSH
37071: LD_VAR 0 18
37075: PPUSH
37076: LD_INT 22
37078: PUSH
37079: LD_VAR 0 16
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 58
37090: PUSH
37091: EMPTY
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: LD_INT 30
37099: PUSH
37100: LD_INT 32
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 30
37109: PUSH
37110: LD_INT 4
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 30
37119: PUSH
37120: LD_INT 5
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: PPUSH
37138: CALL_OW 72
37142: ST_TO_ADDR
37143: GO 37367
37145: LD_INT 2
37147: DOUBLE
37148: EQUAL
37149: IFTRUE 37153
37151: GO 37215
37153: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37154: LD_ADDR_VAR 0 12
37158: PUSH
37159: LD_VAR 0 18
37163: PPUSH
37164: LD_INT 22
37166: PUSH
37167: LD_VAR 0 16
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 30
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 30
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PPUSH
37208: CALL_OW 72
37212: ST_TO_ADDR
37213: GO 37367
37215: LD_INT 3
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37223
37221: GO 37285
37223: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37224: LD_ADDR_VAR 0 12
37228: PUSH
37229: LD_VAR 0 18
37233: PPUSH
37234: LD_INT 22
37236: PUSH
37237: LD_VAR 0 16
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: LD_INT 30
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 30
37261: PUSH
37262: LD_INT 3
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PPUSH
37278: CALL_OW 72
37282: ST_TO_ADDR
37283: GO 37367
37285: LD_INT 4
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 37366
37293: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37294: LD_ADDR_VAR 0 12
37298: PUSH
37299: LD_VAR 0 18
37303: PPUSH
37304: LD_INT 22
37306: PUSH
37307: LD_VAR 0 16
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: LD_INT 30
37321: PUSH
37322: LD_INT 6
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 30
37331: PUSH
37332: LD_INT 7
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 30
37341: PUSH
37342: LD_INT 8
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PPUSH
37359: CALL_OW 72
37363: ST_TO_ADDR
37364: GO 37367
37366: POP
// if i = 1 then
37367: LD_VAR 0 8
37371: PUSH
37372: LD_INT 1
37374: EQUAL
37375: IFFALSE 37486
// begin tmp := [ ] ;
37377: LD_ADDR_VAR 0 19
37381: PUSH
37382: EMPTY
37383: ST_TO_ADDR
// for j in f do
37384: LD_ADDR_VAR 0 9
37388: PUSH
37389: LD_VAR 0 12
37393: PUSH
37394: FOR_IN
37395: IFFALSE 37468
// if GetBType ( j ) = b_bunker then
37397: LD_VAR 0 9
37401: PPUSH
37402: CALL_OW 266
37406: PUSH
37407: LD_INT 32
37409: EQUAL
37410: IFFALSE 37437
// tmp := Insert ( tmp , 1 , j ) else
37412: LD_ADDR_VAR 0 19
37416: PUSH
37417: LD_VAR 0 19
37421: PPUSH
37422: LD_INT 1
37424: PPUSH
37425: LD_VAR 0 9
37429: PPUSH
37430: CALL_OW 2
37434: ST_TO_ADDR
37435: GO 37466
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37437: LD_ADDR_VAR 0 19
37441: PUSH
37442: LD_VAR 0 19
37446: PPUSH
37447: LD_VAR 0 19
37451: PUSH
37452: LD_INT 1
37454: PLUS
37455: PPUSH
37456: LD_VAR 0 9
37460: PPUSH
37461: CALL_OW 2
37465: ST_TO_ADDR
37466: GO 37394
37468: POP
37469: POP
// if tmp then
37470: LD_VAR 0 19
37474: IFFALSE 37486
// f := tmp ;
37476: LD_ADDR_VAR 0 12
37480: PUSH
37481: LD_VAR 0 19
37485: ST_TO_ADDR
// end ; x := personel [ i ] ;
37486: LD_ADDR_VAR 0 13
37490: PUSH
37491: LD_VAR 0 6
37495: PUSH
37496: LD_VAR 0 8
37500: ARRAY
37501: ST_TO_ADDR
// if x = - 1 then
37502: LD_VAR 0 13
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: EQUAL
37511: IFFALSE 37720
// begin for j in f do
37513: LD_ADDR_VAR 0 9
37517: PUSH
37518: LD_VAR 0 12
37522: PUSH
37523: FOR_IN
37524: IFFALSE 37716
// repeat InitHc ;
37526: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37530: LD_VAR 0 9
37534: PPUSH
37535: CALL_OW 266
37539: PUSH
37540: LD_INT 5
37542: EQUAL
37543: IFFALSE 37613
// begin if UnitsInside ( j ) < 3 then
37545: LD_VAR 0 9
37549: PPUSH
37550: CALL_OW 313
37554: PUSH
37555: LD_INT 3
37557: LESS
37558: IFFALSE 37594
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37560: LD_INT 0
37562: PPUSH
37563: LD_INT 5
37565: PUSH
37566: LD_INT 8
37568: PUSH
37569: LD_INT 9
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: PUSH
37577: LD_VAR 0 17
37581: ARRAY
37582: PPUSH
37583: LD_VAR 0 4
37587: PPUSH
37588: CALL_OW 380
37592: GO 37611
// PrepareHuman ( false , i , skill ) ;
37594: LD_INT 0
37596: PPUSH
37597: LD_VAR 0 8
37601: PPUSH
37602: LD_VAR 0 4
37606: PPUSH
37607: CALL_OW 380
// end else
37611: GO 37630
// PrepareHuman ( false , i , skill ) ;
37613: LD_INT 0
37615: PPUSH
37616: LD_VAR 0 8
37620: PPUSH
37621: LD_VAR 0 4
37625: PPUSH
37626: CALL_OW 380
// un := CreateHuman ;
37630: LD_ADDR_VAR 0 14
37634: PUSH
37635: CALL_OW 44
37639: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37640: LD_ADDR_VAR 0 7
37644: PUSH
37645: LD_VAR 0 7
37649: PPUSH
37650: LD_INT 1
37652: PPUSH
37653: LD_VAR 0 14
37657: PPUSH
37658: CALL_OW 2
37662: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37663: LD_VAR 0 14
37667: PPUSH
37668: LD_VAR 0 9
37672: PPUSH
37673: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37677: LD_VAR 0 9
37681: PPUSH
37682: CALL_OW 313
37686: PUSH
37687: LD_INT 6
37689: EQUAL
37690: PUSH
37691: LD_VAR 0 9
37695: PPUSH
37696: CALL_OW 266
37700: PUSH
37701: LD_INT 32
37703: PUSH
37704: LD_INT 31
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: IN
37711: OR
37712: IFFALSE 37526
37714: GO 37523
37716: POP
37717: POP
// end else
37718: GO 38100
// for j = 1 to x do
37720: LD_ADDR_VAR 0 9
37724: PUSH
37725: DOUBLE
37726: LD_INT 1
37728: DEC
37729: ST_TO_ADDR
37730: LD_VAR 0 13
37734: PUSH
37735: FOR_TO
37736: IFFALSE 38098
// begin InitHc ;
37738: CALL_OW 19
// if not f then
37742: LD_VAR 0 12
37746: NOT
37747: IFFALSE 37836
// begin PrepareHuman ( false , i , skill ) ;
37749: LD_INT 0
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: LD_VAR 0 4
37761: PPUSH
37762: CALL_OW 380
// un := CreateHuman ;
37766: LD_ADDR_VAR 0 14
37770: PUSH
37771: CALL_OW 44
37775: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37776: LD_ADDR_VAR 0 7
37780: PUSH
37781: LD_VAR 0 7
37785: PPUSH
37786: LD_INT 1
37788: PPUSH
37789: LD_VAR 0 14
37793: PPUSH
37794: CALL_OW 2
37798: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37799: LD_VAR 0 14
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 250
37813: PPUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 251
37823: PPUSH
37824: LD_INT 10
37826: PPUSH
37827: LD_INT 0
37829: PPUSH
37830: CALL_OW 50
// continue ;
37834: GO 37735
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37836: LD_VAR 0 12
37840: PUSH
37841: LD_INT 1
37843: ARRAY
37844: PPUSH
37845: CALL_OW 313
37849: PUSH
37850: LD_VAR 0 12
37854: PUSH
37855: LD_INT 1
37857: ARRAY
37858: PPUSH
37859: CALL_OW 266
37863: PUSH
37864: LD_INT 32
37866: PUSH
37867: LD_INT 31
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: IN
37874: AND
37875: PUSH
37876: LD_VAR 0 12
37880: PUSH
37881: LD_INT 1
37883: ARRAY
37884: PPUSH
37885: CALL_OW 313
37889: PUSH
37890: LD_INT 6
37892: EQUAL
37893: OR
37894: IFFALSE 37914
// f := Delete ( f , 1 ) ;
37896: LD_ADDR_VAR 0 12
37900: PUSH
37901: LD_VAR 0 12
37905: PPUSH
37906: LD_INT 1
37908: PPUSH
37909: CALL_OW 3
37913: ST_TO_ADDR
// if not f then
37914: LD_VAR 0 12
37918: NOT
37919: IFFALSE 37937
// begin x := x + 2 ;
37921: LD_ADDR_VAR 0 13
37925: PUSH
37926: LD_VAR 0 13
37930: PUSH
37931: LD_INT 2
37933: PLUS
37934: ST_TO_ADDR
// continue ;
37935: GO 37735
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37937: LD_VAR 0 12
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PPUSH
37946: CALL_OW 266
37950: PUSH
37951: LD_INT 5
37953: EQUAL
37954: IFFALSE 38028
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37956: LD_VAR 0 12
37960: PUSH
37961: LD_INT 1
37963: ARRAY
37964: PPUSH
37965: CALL_OW 313
37969: PUSH
37970: LD_INT 3
37972: LESS
37973: IFFALSE 38009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37975: LD_INT 0
37977: PPUSH
37978: LD_INT 5
37980: PUSH
37981: LD_INT 8
37983: PUSH
37984: LD_INT 9
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: PUSH
37992: LD_VAR 0 17
37996: ARRAY
37997: PPUSH
37998: LD_VAR 0 4
38002: PPUSH
38003: CALL_OW 380
38007: GO 38026
// PrepareHuman ( false , i , skill ) ;
38009: LD_INT 0
38011: PPUSH
38012: LD_VAR 0 8
38016: PPUSH
38017: LD_VAR 0 4
38021: PPUSH
38022: CALL_OW 380
// end else
38026: GO 38045
// PrepareHuman ( false , i , skill ) ;
38028: LD_INT 0
38030: PPUSH
38031: LD_VAR 0 8
38035: PPUSH
38036: LD_VAR 0 4
38040: PPUSH
38041: CALL_OW 380
// un := CreateHuman ;
38045: LD_ADDR_VAR 0 14
38049: PUSH
38050: CALL_OW 44
38054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38055: LD_ADDR_VAR 0 7
38059: PUSH
38060: LD_VAR 0 7
38064: PPUSH
38065: LD_INT 1
38067: PPUSH
38068: LD_VAR 0 14
38072: PPUSH
38073: CALL_OW 2
38077: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38078: LD_VAR 0 14
38082: PPUSH
38083: LD_VAR 0 12
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: PPUSH
38092: CALL_OW 52
// end ;
38096: GO 37735
38098: POP
38099: POP
// end ;
38100: GO 37037
38102: POP
38103: POP
// result := result ^ buildings ;
38104: LD_ADDR_VAR 0 7
38108: PUSH
38109: LD_VAR 0 7
38113: PUSH
38114: LD_VAR 0 18
38118: ADD
38119: ST_TO_ADDR
// end else
38120: GO 38263
// begin for i = 1 to personel do
38122: LD_ADDR_VAR 0 8
38126: PUSH
38127: DOUBLE
38128: LD_INT 1
38130: DEC
38131: ST_TO_ADDR
38132: LD_VAR 0 6
38136: PUSH
38137: FOR_TO
38138: IFFALSE 38261
// begin if i > 4 then
38140: LD_VAR 0 8
38144: PUSH
38145: LD_INT 4
38147: GREATER
38148: IFFALSE 38152
// break ;
38150: GO 38261
// x := personel [ i ] ;
38152: LD_ADDR_VAR 0 13
38156: PUSH
38157: LD_VAR 0 6
38161: PUSH
38162: LD_VAR 0 8
38166: ARRAY
38167: ST_TO_ADDR
// if x = - 1 then
38168: LD_VAR 0 13
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: EQUAL
38177: IFFALSE 38181
// continue ;
38179: GO 38137
// PrepareHuman ( false , i , skill ) ;
38181: LD_INT 0
38183: PPUSH
38184: LD_VAR 0 8
38188: PPUSH
38189: LD_VAR 0 4
38193: PPUSH
38194: CALL_OW 380
// un := CreateHuman ;
38198: LD_ADDR_VAR 0 14
38202: PUSH
38203: CALL_OW 44
38207: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38208: LD_VAR 0 14
38212: PPUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 250
38222: PPUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 251
38232: PPUSH
38233: LD_INT 10
38235: PPUSH
38236: LD_INT 0
38238: PPUSH
38239: CALL_OW 50
// result := result ^ un ;
38243: LD_ADDR_VAR 0 7
38247: PUSH
38248: LD_VAR 0 7
38252: PUSH
38253: LD_VAR 0 14
38257: ADD
38258: ST_TO_ADDR
// end ;
38259: GO 38137
38261: POP
38262: POP
// end ; end ;
38263: LD_VAR 0 7
38267: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38268: LD_INT 0
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
38275: PPUSH
38276: PPUSH
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
38281: PPUSH
38282: PPUSH
38283: PPUSH
38284: PPUSH
38285: PPUSH
// result := false ;
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: LD_INT 0
38293: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38294: LD_VAR 0 1
38298: NOT
38299: PUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 266
38309: PUSH
38310: LD_INT 32
38312: PUSH
38313: LD_INT 33
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: IN
38320: NOT
38321: OR
38322: IFFALSE 38326
// exit ;
38324: GO 39465
// nat := GetNation ( tower ) ;
38326: LD_ADDR_VAR 0 12
38330: PUSH
38331: LD_VAR 0 1
38335: PPUSH
38336: CALL_OW 248
38340: ST_TO_ADDR
// side := GetSide ( tower ) ;
38341: LD_ADDR_VAR 0 16
38345: PUSH
38346: LD_VAR 0 1
38350: PPUSH
38351: CALL_OW 255
38355: ST_TO_ADDR
// x := GetX ( tower ) ;
38356: LD_ADDR_VAR 0 10
38360: PUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 250
38370: ST_TO_ADDR
// y := GetY ( tower ) ;
38371: LD_ADDR_VAR 0 11
38375: PUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: CALL_OW 251
38385: ST_TO_ADDR
// if not x or not y then
38386: LD_VAR 0 10
38390: NOT
38391: PUSH
38392: LD_VAR 0 11
38396: NOT
38397: OR
38398: IFFALSE 38402
// exit ;
38400: GO 39465
// weapon := 0 ;
38402: LD_ADDR_VAR 0 18
38406: PUSH
38407: LD_INT 0
38409: ST_TO_ADDR
// fac_list := [ ] ;
38410: LD_ADDR_VAR 0 17
38414: PUSH
38415: EMPTY
38416: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38417: LD_ADDR_VAR 0 6
38421: PUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 274
38431: PPUSH
38432: LD_VAR 0 2
38436: PPUSH
38437: LD_INT 0
38439: PPUSH
38440: CALL 36005 0 3
38444: PPUSH
38445: LD_INT 30
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PPUSH
38455: CALL_OW 72
38459: ST_TO_ADDR
// if not factories then
38460: LD_VAR 0 6
38464: NOT
38465: IFFALSE 38469
// exit ;
38467: GO 39465
// for i in factories do
38469: LD_ADDR_VAR 0 8
38473: PUSH
38474: LD_VAR 0 6
38478: PUSH
38479: FOR_IN
38480: IFFALSE 38505
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38482: LD_ADDR_VAR 0 17
38486: PUSH
38487: LD_VAR 0 17
38491: PUSH
38492: LD_VAR 0 8
38496: PPUSH
38497: CALL_OW 478
38501: UNION
38502: ST_TO_ADDR
38503: GO 38479
38505: POP
38506: POP
// if not fac_list then
38507: LD_VAR 0 17
38511: NOT
38512: IFFALSE 38516
// exit ;
38514: GO 39465
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38516: LD_ADDR_VAR 0 5
38520: PUSH
38521: LD_INT 4
38523: PUSH
38524: LD_INT 5
38526: PUSH
38527: LD_INT 9
38529: PUSH
38530: LD_INT 10
38532: PUSH
38533: LD_INT 6
38535: PUSH
38536: LD_INT 7
38538: PUSH
38539: LD_INT 11
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 27
38553: PUSH
38554: LD_INT 28
38556: PUSH
38557: LD_INT 26
38559: PUSH
38560: LD_INT 30
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 43
38571: PUSH
38572: LD_INT 44
38574: PUSH
38575: LD_INT 46
38577: PUSH
38578: LD_INT 45
38580: PUSH
38581: LD_INT 47
38583: PUSH
38584: LD_INT 49
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: LD_VAR 0 12
38604: ARRAY
38605: ST_TO_ADDR
// for i in list do
38606: LD_ADDR_VAR 0 8
38610: PUSH
38611: LD_VAR 0 5
38615: PUSH
38616: FOR_IN
38617: IFFALSE 38650
// if not i in fac_list then
38619: LD_VAR 0 8
38623: PUSH
38624: LD_VAR 0 17
38628: IN
38629: NOT
38630: IFFALSE 38648
// list := list diff i ;
38632: LD_ADDR_VAR 0 5
38636: PUSH
38637: LD_VAR 0 5
38641: PUSH
38642: LD_VAR 0 8
38646: DIFF
38647: ST_TO_ADDR
38648: GO 38616
38650: POP
38651: POP
// if not list then
38652: LD_VAR 0 5
38656: NOT
38657: IFFALSE 38661
// exit ;
38659: GO 39465
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38661: LD_VAR 0 12
38665: PUSH
38666: LD_INT 3
38668: EQUAL
38669: PUSH
38670: LD_INT 49
38672: PUSH
38673: LD_VAR 0 5
38677: IN
38678: AND
38679: PUSH
38680: LD_INT 31
38682: PPUSH
38683: LD_VAR 0 16
38687: PPUSH
38688: CALL_OW 321
38692: PUSH
38693: LD_INT 2
38695: EQUAL
38696: AND
38697: IFFALSE 38757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38699: LD_INT 22
38701: PUSH
38702: LD_VAR 0 16
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 35
38713: PUSH
38714: LD_INT 49
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 91
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 10
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: PPUSH
38742: CALL_OW 69
38746: NOT
38747: IFFALSE 38757
// weapon := ru_time_lapser ;
38749: LD_ADDR_VAR 0 18
38753: PUSH
38754: LD_INT 49
38756: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38757: LD_VAR 0 12
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: IN
38772: PUSH
38773: LD_INT 11
38775: PUSH
38776: LD_VAR 0 5
38780: IN
38781: PUSH
38782: LD_INT 30
38784: PUSH
38785: LD_VAR 0 5
38789: IN
38790: OR
38791: AND
38792: PUSH
38793: LD_INT 6
38795: PPUSH
38796: LD_VAR 0 16
38800: PPUSH
38801: CALL_OW 321
38805: PUSH
38806: LD_INT 2
38808: EQUAL
38809: AND
38810: IFFALSE 38975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38812: LD_INT 22
38814: PUSH
38815: LD_VAR 0 16
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 35
38829: PUSH
38830: LD_INT 11
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 35
38839: PUSH
38840: LD_INT 30
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 91
38854: PUSH
38855: LD_VAR 0 1
38859: PUSH
38860: LD_INT 18
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: PPUSH
38873: CALL_OW 69
38877: NOT
38878: PUSH
38879: LD_INT 22
38881: PUSH
38882: LD_VAR 0 16
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: LD_INT 30
38896: PUSH
38897: LD_INT 32
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 30
38906: PUSH
38907: LD_INT 33
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 91
38921: PUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_INT 12
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: PPUSH
38943: CALL_OW 69
38947: PUSH
38948: LD_INT 2
38950: GREATER
38951: AND
38952: IFFALSE 38975
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38954: LD_ADDR_VAR 0 18
38958: PUSH
38959: LD_INT 11
38961: PUSH
38962: LD_INT 30
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_VAR 0 12
38973: ARRAY
38974: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38975: LD_VAR 0 18
38979: NOT
38980: PUSH
38981: LD_INT 40
38983: PPUSH
38984: LD_VAR 0 16
38988: PPUSH
38989: CALL_OW 321
38993: PUSH
38994: LD_INT 2
38996: EQUAL
38997: AND
38998: PUSH
38999: LD_INT 7
39001: PUSH
39002: LD_VAR 0 5
39006: IN
39007: PUSH
39008: LD_INT 28
39010: PUSH
39011: LD_VAR 0 5
39015: IN
39016: OR
39017: PUSH
39018: LD_INT 45
39020: PUSH
39021: LD_VAR 0 5
39025: IN
39026: OR
39027: AND
39028: IFFALSE 39282
// begin hex := GetHexInfo ( x , y ) ;
39030: LD_ADDR_VAR 0 4
39034: PUSH
39035: LD_VAR 0 10
39039: PPUSH
39040: LD_VAR 0 11
39044: PPUSH
39045: CALL_OW 546
39049: ST_TO_ADDR
// if hex [ 1 ] then
39050: LD_VAR 0 4
39054: PUSH
39055: LD_INT 1
39057: ARRAY
39058: IFFALSE 39062
// exit ;
39060: GO 39465
// height := hex [ 2 ] ;
39062: LD_ADDR_VAR 0 15
39066: PUSH
39067: LD_VAR 0 4
39071: PUSH
39072: LD_INT 2
39074: ARRAY
39075: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39076: LD_ADDR_VAR 0 14
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 5
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: ST_TO_ADDR
// for i in tmp do
39099: LD_ADDR_VAR 0 8
39103: PUSH
39104: LD_VAR 0 14
39108: PUSH
39109: FOR_IN
39110: IFFALSE 39280
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39112: LD_ADDR_VAR 0 9
39116: PUSH
39117: LD_VAR 0 10
39121: PPUSH
39122: LD_VAR 0 8
39126: PPUSH
39127: LD_INT 5
39129: PPUSH
39130: CALL_OW 272
39134: PUSH
39135: LD_VAR 0 11
39139: PPUSH
39140: LD_VAR 0 8
39144: PPUSH
39145: LD_INT 5
39147: PPUSH
39148: CALL_OW 273
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39157: LD_VAR 0 9
39161: PUSH
39162: LD_INT 1
39164: ARRAY
39165: PPUSH
39166: LD_VAR 0 9
39170: PUSH
39171: LD_INT 2
39173: ARRAY
39174: PPUSH
39175: CALL_OW 488
39179: IFFALSE 39278
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39181: LD_ADDR_VAR 0 4
39185: PUSH
39186: LD_VAR 0 9
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: LD_VAR 0 9
39199: PUSH
39200: LD_INT 2
39202: ARRAY
39203: PPUSH
39204: CALL_OW 546
39208: ST_TO_ADDR
// if hex [ 1 ] then
39209: LD_VAR 0 4
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: IFFALSE 39221
// continue ;
39219: GO 39109
// h := hex [ 2 ] ;
39221: LD_ADDR_VAR 0 13
39225: PUSH
39226: LD_VAR 0 4
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: ST_TO_ADDR
// if h + 7 < height then
39235: LD_VAR 0 13
39239: PUSH
39240: LD_INT 7
39242: PLUS
39243: PUSH
39244: LD_VAR 0 15
39248: LESS
39249: IFFALSE 39278
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39251: LD_ADDR_VAR 0 18
39255: PUSH
39256: LD_INT 7
39258: PUSH
39259: LD_INT 28
39261: PUSH
39262: LD_INT 45
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: PUSH
39270: LD_VAR 0 12
39274: ARRAY
39275: ST_TO_ADDR
// break ;
39276: GO 39280
// end ; end ; end ;
39278: GO 39109
39280: POP
39281: POP
// end ; if not weapon then
39282: LD_VAR 0 18
39286: NOT
39287: IFFALSE 39347
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39289: LD_ADDR_VAR 0 5
39293: PUSH
39294: LD_VAR 0 5
39298: PUSH
39299: LD_INT 11
39301: PUSH
39302: LD_INT 30
39304: PUSH
39305: LD_INT 49
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: DIFF
39313: ST_TO_ADDR
// if not list then
39314: LD_VAR 0 5
39318: NOT
39319: IFFALSE 39323
// exit ;
39321: GO 39465
// weapon := list [ rand ( 1 , list ) ] ;
39323: LD_ADDR_VAR 0 18
39327: PUSH
39328: LD_VAR 0 5
39332: PUSH
39333: LD_INT 1
39335: PPUSH
39336: LD_VAR 0 5
39340: PPUSH
39341: CALL_OW 12
39345: ARRAY
39346: ST_TO_ADDR
// end ; if weapon then
39347: LD_VAR 0 18
39351: IFFALSE 39465
// begin tmp := CostOfWeapon ( weapon ) ;
39353: LD_ADDR_VAR 0 14
39357: PUSH
39358: LD_VAR 0 18
39362: PPUSH
39363: CALL_OW 451
39367: ST_TO_ADDR
// j := GetBase ( tower ) ;
39368: LD_ADDR_VAR 0 9
39372: PUSH
39373: LD_VAR 0 1
39377: PPUSH
39378: CALL_OW 274
39382: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39383: LD_VAR 0 9
39387: PPUSH
39388: LD_INT 1
39390: PPUSH
39391: CALL_OW 275
39395: PUSH
39396: LD_VAR 0 14
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: GREATEREQUAL
39405: PUSH
39406: LD_VAR 0 9
39410: PPUSH
39411: LD_INT 2
39413: PPUSH
39414: CALL_OW 275
39418: PUSH
39419: LD_VAR 0 14
39423: PUSH
39424: LD_INT 2
39426: ARRAY
39427: GREATEREQUAL
39428: AND
39429: PUSH
39430: LD_VAR 0 9
39434: PPUSH
39435: LD_INT 3
39437: PPUSH
39438: CALL_OW 275
39442: PUSH
39443: LD_VAR 0 14
39447: PUSH
39448: LD_INT 3
39450: ARRAY
39451: GREATEREQUAL
39452: AND
39453: IFFALSE 39465
// result := weapon ;
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: LD_VAR 0 18
39464: ST_TO_ADDR
// end ; end ;
39465: LD_VAR 0 3
39469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
// result := true ;
39474: LD_ADDR_VAR 0 3
39478: PUSH
39479: LD_INT 1
39481: ST_TO_ADDR
// if array1 = array2 then
39482: LD_VAR 0 1
39486: PUSH
39487: LD_VAR 0 2
39491: EQUAL
39492: IFFALSE 39552
// begin for i = 1 to array1 do
39494: LD_ADDR_VAR 0 4
39498: PUSH
39499: DOUBLE
39500: LD_INT 1
39502: DEC
39503: ST_TO_ADDR
39504: LD_VAR 0 1
39508: PUSH
39509: FOR_TO
39510: IFFALSE 39548
// if array1 [ i ] <> array2 [ i ] then
39512: LD_VAR 0 1
39516: PUSH
39517: LD_VAR 0 4
39521: ARRAY
39522: PUSH
39523: LD_VAR 0 2
39527: PUSH
39528: LD_VAR 0 4
39532: ARRAY
39533: NONEQUAL
39534: IFFALSE 39546
// begin result := false ;
39536: LD_ADDR_VAR 0 3
39540: PUSH
39541: LD_INT 0
39543: ST_TO_ADDR
// break ;
39544: GO 39548
// end ;
39546: GO 39509
39548: POP
39549: POP
// end else
39550: GO 39560
// result := false ;
39552: LD_ADDR_VAR 0 3
39556: PUSH
39557: LD_INT 0
39559: ST_TO_ADDR
// end ;
39560: LD_VAR 0 3
39564: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39565: LD_INT 0
39567: PPUSH
39568: PPUSH
// if not array1 or not array2 then
39569: LD_VAR 0 1
39573: NOT
39574: PUSH
39575: LD_VAR 0 2
39579: NOT
39580: OR
39581: IFFALSE 39585
// exit ;
39583: GO 39649
// result := true ;
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 1
39592: ST_TO_ADDR
// for i = 1 to array1 do
39593: LD_ADDR_VAR 0 4
39597: PUSH
39598: DOUBLE
39599: LD_INT 1
39601: DEC
39602: ST_TO_ADDR
39603: LD_VAR 0 1
39607: PUSH
39608: FOR_TO
39609: IFFALSE 39647
// if array1 [ i ] <> array2 [ i ] then
39611: LD_VAR 0 1
39615: PUSH
39616: LD_VAR 0 4
39620: ARRAY
39621: PUSH
39622: LD_VAR 0 2
39626: PUSH
39627: LD_VAR 0 4
39631: ARRAY
39632: NONEQUAL
39633: IFFALSE 39645
// begin result := false ;
39635: LD_ADDR_VAR 0 3
39639: PUSH
39640: LD_INT 0
39642: ST_TO_ADDR
// break ;
39643: GO 39647
// end ;
39645: GO 39608
39647: POP
39648: POP
// end ;
39649: LD_VAR 0 3
39653: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
39658: PPUSH
// pom := GetBase ( fac ) ;
39659: LD_ADDR_VAR 0 5
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 274
39673: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: LD_VAR 0 2
39683: PUSH
39684: LD_INT 1
39686: ARRAY
39687: PPUSH
39688: LD_VAR 0 2
39692: PUSH
39693: LD_INT 2
39695: ARRAY
39696: PPUSH
39697: LD_VAR 0 2
39701: PUSH
39702: LD_INT 3
39704: ARRAY
39705: PPUSH
39706: LD_VAR 0 2
39710: PUSH
39711: LD_INT 4
39713: ARRAY
39714: PPUSH
39715: CALL_OW 449
39719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39720: LD_ADDR_VAR 0 3
39724: PUSH
39725: LD_VAR 0 5
39729: PPUSH
39730: LD_INT 1
39732: PPUSH
39733: CALL_OW 275
39737: PUSH
39738: LD_VAR 0 4
39742: PUSH
39743: LD_INT 1
39745: ARRAY
39746: GREATEREQUAL
39747: PUSH
39748: LD_VAR 0 5
39752: PPUSH
39753: LD_INT 2
39755: PPUSH
39756: CALL_OW 275
39760: PUSH
39761: LD_VAR 0 4
39765: PUSH
39766: LD_INT 2
39768: ARRAY
39769: GREATEREQUAL
39770: AND
39771: PUSH
39772: LD_VAR 0 5
39776: PPUSH
39777: LD_INT 3
39779: PPUSH
39780: CALL_OW 275
39784: PUSH
39785: LD_VAR 0 4
39789: PUSH
39790: LD_INT 3
39792: ARRAY
39793: GREATEREQUAL
39794: AND
39795: ST_TO_ADDR
// end ;
39796: LD_VAR 0 3
39800: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39801: LD_INT 0
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
// pom := GetBase ( building ) ;
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 274
39821: ST_TO_ADDR
// if not pom then
39822: LD_VAR 0 3
39826: NOT
39827: IFFALSE 39831
// exit ;
39829: GO 40001
// btype := GetBType ( building ) ;
39831: LD_ADDR_VAR 0 5
39835: PUSH
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 266
39845: ST_TO_ADDR
// if btype = b_armoury then
39846: LD_VAR 0 5
39850: PUSH
39851: LD_INT 4
39853: EQUAL
39854: IFFALSE 39864
// btype := b_barracks ;
39856: LD_ADDR_VAR 0 5
39860: PUSH
39861: LD_INT 5
39863: ST_TO_ADDR
// if btype = b_depot then
39864: LD_VAR 0 5
39868: PUSH
39869: LD_INT 0
39871: EQUAL
39872: IFFALSE 39882
// btype := b_warehouse ;
39874: LD_ADDR_VAR 0 5
39878: PUSH
39879: LD_INT 1
39881: ST_TO_ADDR
// if btype = b_workshop then
39882: LD_VAR 0 5
39886: PUSH
39887: LD_INT 2
39889: EQUAL
39890: IFFALSE 39900
// btype := b_factory ;
39892: LD_ADDR_VAR 0 5
39896: PUSH
39897: LD_INT 3
39899: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39900: LD_ADDR_VAR 0 4
39904: PUSH
39905: LD_VAR 0 5
39909: PPUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 248
39919: PPUSH
39920: CALL_OW 450
39924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39925: LD_ADDR_VAR 0 2
39929: PUSH
39930: LD_VAR 0 3
39934: PPUSH
39935: LD_INT 1
39937: PPUSH
39938: CALL_OW 275
39942: PUSH
39943: LD_VAR 0 4
39947: PUSH
39948: LD_INT 1
39950: ARRAY
39951: GREATEREQUAL
39952: PUSH
39953: LD_VAR 0 3
39957: PPUSH
39958: LD_INT 2
39960: PPUSH
39961: CALL_OW 275
39965: PUSH
39966: LD_VAR 0 4
39970: PUSH
39971: LD_INT 2
39973: ARRAY
39974: GREATEREQUAL
39975: AND
39976: PUSH
39977: LD_VAR 0 3
39981: PPUSH
39982: LD_INT 3
39984: PPUSH
39985: CALL_OW 275
39989: PUSH
39990: LD_VAR 0 4
39994: PUSH
39995: LD_INT 3
39997: ARRAY
39998: GREATEREQUAL
39999: AND
40000: ST_TO_ADDR
// end ;
40001: LD_VAR 0 2
40005: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40006: LD_INT 0
40008: PPUSH
40009: PPUSH
40010: PPUSH
// pom := GetBase ( building ) ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: CALL_OW 274
40025: ST_TO_ADDR
// if not pom then
40026: LD_VAR 0 4
40030: NOT
40031: IFFALSE 40035
// exit ;
40033: GO 40136
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40035: LD_ADDR_VAR 0 5
40039: PUSH
40040: LD_VAR 0 2
40044: PPUSH
40045: LD_VAR 0 1
40049: PPUSH
40050: CALL_OW 248
40054: PPUSH
40055: CALL_OW 450
40059: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_VAR 0 4
40069: PPUSH
40070: LD_INT 1
40072: PPUSH
40073: CALL_OW 275
40077: PUSH
40078: LD_VAR 0 5
40082: PUSH
40083: LD_INT 1
40085: ARRAY
40086: GREATEREQUAL
40087: PUSH
40088: LD_VAR 0 4
40092: PPUSH
40093: LD_INT 2
40095: PPUSH
40096: CALL_OW 275
40100: PUSH
40101: LD_VAR 0 5
40105: PUSH
40106: LD_INT 2
40108: ARRAY
40109: GREATEREQUAL
40110: AND
40111: PUSH
40112: LD_VAR 0 4
40116: PPUSH
40117: LD_INT 3
40119: PPUSH
40120: CALL_OW 275
40124: PUSH
40125: LD_VAR 0 5
40129: PUSH
40130: LD_INT 3
40132: ARRAY
40133: GREATEREQUAL
40134: AND
40135: ST_TO_ADDR
// end ;
40136: LD_VAR 0 3
40140: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40141: LD_INT 0
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
// result := false ;
40154: LD_ADDR_VAR 0 8
40158: PUSH
40159: LD_INT 0
40161: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40162: LD_VAR 0 5
40166: NOT
40167: PUSH
40168: LD_VAR 0 1
40172: NOT
40173: OR
40174: PUSH
40175: LD_VAR 0 2
40179: NOT
40180: OR
40181: PUSH
40182: LD_VAR 0 3
40186: NOT
40187: OR
40188: IFFALSE 40192
// exit ;
40190: GO 41006
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40192: LD_ADDR_VAR 0 14
40196: PUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: LD_VAR 0 2
40206: PPUSH
40207: LD_VAR 0 3
40211: PPUSH
40212: LD_VAR 0 4
40216: PPUSH
40217: LD_VAR 0 5
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PPUSH
40226: CALL_OW 248
40230: PPUSH
40231: LD_INT 0
40233: PPUSH
40234: CALL 41843 0 6
40238: ST_TO_ADDR
// if not hexes then
40239: LD_VAR 0 14
40243: NOT
40244: IFFALSE 40248
// exit ;
40246: GO 41006
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40248: LD_ADDR_VAR 0 17
40252: PUSH
40253: LD_VAR 0 5
40257: PPUSH
40258: LD_INT 22
40260: PUSH
40261: LD_VAR 0 13
40265: PPUSH
40266: CALL_OW 255
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 30
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 30
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PPUSH
40307: CALL_OW 72
40311: ST_TO_ADDR
// for i = 1 to hexes do
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: DOUBLE
40318: LD_INT 1
40320: DEC
40321: ST_TO_ADDR
40322: LD_VAR 0 14
40326: PUSH
40327: FOR_TO
40328: IFFALSE 41004
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40330: LD_ADDR_VAR 0 13
40334: PUSH
40335: LD_VAR 0 14
40339: PUSH
40340: LD_VAR 0 9
40344: ARRAY
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PPUSH
40350: LD_VAR 0 14
40354: PUSH
40355: LD_VAR 0 9
40359: ARRAY
40360: PUSH
40361: LD_INT 2
40363: ARRAY
40364: PPUSH
40365: CALL_OW 428
40369: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40370: LD_VAR 0 14
40374: PUSH
40375: LD_VAR 0 9
40379: ARRAY
40380: PUSH
40381: LD_INT 1
40383: ARRAY
40384: PPUSH
40385: LD_VAR 0 14
40389: PUSH
40390: LD_VAR 0 9
40394: ARRAY
40395: PUSH
40396: LD_INT 2
40398: ARRAY
40399: PPUSH
40400: CALL_OW 351
40404: PUSH
40405: LD_VAR 0 14
40409: PUSH
40410: LD_VAR 0 9
40414: ARRAY
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: PPUSH
40420: LD_VAR 0 14
40424: PUSH
40425: LD_VAR 0 9
40429: ARRAY
40430: PUSH
40431: LD_INT 2
40433: ARRAY
40434: PPUSH
40435: CALL_OW 488
40439: NOT
40440: OR
40441: PUSH
40442: LD_VAR 0 13
40446: PPUSH
40447: CALL_OW 247
40451: PUSH
40452: LD_INT 3
40454: EQUAL
40455: OR
40456: IFFALSE 40462
// exit ;
40458: POP
40459: POP
40460: GO 41006
// if not tmp then
40462: LD_VAR 0 13
40466: NOT
40467: IFFALSE 40471
// continue ;
40469: GO 40327
// result := true ;
40471: LD_ADDR_VAR 0 8
40475: PUSH
40476: LD_INT 1
40478: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40479: LD_VAR 0 6
40483: PUSH
40484: LD_VAR 0 13
40488: PPUSH
40489: CALL_OW 247
40493: PUSH
40494: LD_INT 2
40496: EQUAL
40497: AND
40498: PUSH
40499: LD_VAR 0 13
40503: PPUSH
40504: CALL_OW 263
40508: PUSH
40509: LD_INT 1
40511: EQUAL
40512: AND
40513: IFFALSE 40677
// begin if IsDrivenBy ( tmp ) then
40515: LD_VAR 0 13
40519: PPUSH
40520: CALL_OW 311
40524: IFFALSE 40528
// continue ;
40526: GO 40327
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40528: LD_VAR 0 6
40532: PPUSH
40533: LD_INT 3
40535: PUSH
40536: LD_INT 60
40538: PUSH
40539: EMPTY
40540: LIST
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: PUSH
40549: LD_INT 55
40551: PUSH
40552: EMPTY
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 72
40567: IFFALSE 40675
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40569: LD_ADDR_VAR 0 18
40573: PUSH
40574: LD_VAR 0 6
40578: PPUSH
40579: LD_INT 3
40581: PUSH
40582: LD_INT 60
40584: PUSH
40585: EMPTY
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: LD_INT 55
40597: PUSH
40598: EMPTY
40599: LIST
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PPUSH
40609: CALL_OW 72
40613: PUSH
40614: LD_INT 1
40616: ARRAY
40617: ST_TO_ADDR
// if IsInUnit ( driver ) then
40618: LD_VAR 0 18
40622: PPUSH
40623: CALL_OW 310
40627: IFFALSE 40638
// ComExit ( driver ) ;
40629: LD_VAR 0 18
40633: PPUSH
40634: CALL 65027 0 1
// AddComEnterUnit ( driver , tmp ) ;
40638: LD_VAR 0 18
40642: PPUSH
40643: LD_VAR 0 13
40647: PPUSH
40648: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40652: LD_VAR 0 18
40656: PPUSH
40657: LD_VAR 0 7
40661: PPUSH
40662: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40666: LD_VAR 0 18
40670: PPUSH
40671: CALL_OW 181
// end ; continue ;
40675: GO 40327
// end ; if not cleaners or not tmp in cleaners then
40677: LD_VAR 0 6
40681: NOT
40682: PUSH
40683: LD_VAR 0 13
40687: PUSH
40688: LD_VAR 0 6
40692: IN
40693: NOT
40694: OR
40695: IFFALSE 41002
// begin if dep then
40697: LD_VAR 0 17
40701: IFFALSE 40837
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40703: LD_ADDR_VAR 0 16
40707: PUSH
40708: LD_VAR 0 17
40712: PUSH
40713: LD_INT 1
40715: ARRAY
40716: PPUSH
40717: CALL_OW 250
40721: PPUSH
40722: LD_VAR 0 17
40726: PUSH
40727: LD_INT 1
40729: ARRAY
40730: PPUSH
40731: CALL_OW 254
40735: PPUSH
40736: LD_INT 5
40738: PPUSH
40739: CALL_OW 272
40743: PUSH
40744: LD_VAR 0 17
40748: PUSH
40749: LD_INT 1
40751: ARRAY
40752: PPUSH
40753: CALL_OW 251
40757: PPUSH
40758: LD_VAR 0 17
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: PPUSH
40767: CALL_OW 254
40771: PPUSH
40772: LD_INT 5
40774: PPUSH
40775: CALL_OW 273
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40784: LD_VAR 0 16
40788: PUSH
40789: LD_INT 1
40791: ARRAY
40792: PPUSH
40793: LD_VAR 0 16
40797: PUSH
40798: LD_INT 2
40800: ARRAY
40801: PPUSH
40802: CALL_OW 488
40806: IFFALSE 40837
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40808: LD_VAR 0 13
40812: PPUSH
40813: LD_VAR 0 16
40817: PUSH
40818: LD_INT 1
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 16
40826: PUSH
40827: LD_INT 2
40829: ARRAY
40830: PPUSH
40831: CALL_OW 111
// continue ;
40835: GO 40327
// end ; end ; r := GetDir ( tmp ) ;
40837: LD_ADDR_VAR 0 15
40841: PUSH
40842: LD_VAR 0 13
40846: PPUSH
40847: CALL_OW 254
40851: ST_TO_ADDR
// if r = 5 then
40852: LD_VAR 0 15
40856: PUSH
40857: LD_INT 5
40859: EQUAL
40860: IFFALSE 40870
// r := 0 ;
40862: LD_ADDR_VAR 0 15
40866: PUSH
40867: LD_INT 0
40869: ST_TO_ADDR
// for j = r to 5 do
40870: LD_ADDR_VAR 0 10
40874: PUSH
40875: DOUBLE
40876: LD_VAR 0 15
40880: DEC
40881: ST_TO_ADDR
40882: LD_INT 5
40884: PUSH
40885: FOR_TO
40886: IFFALSE 41000
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40888: LD_ADDR_VAR 0 11
40892: PUSH
40893: LD_VAR 0 13
40897: PPUSH
40898: CALL_OW 250
40902: PPUSH
40903: LD_VAR 0 10
40907: PPUSH
40908: LD_INT 2
40910: PPUSH
40911: CALL_OW 272
40915: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40916: LD_ADDR_VAR 0 12
40920: PUSH
40921: LD_VAR 0 13
40925: PPUSH
40926: CALL_OW 251
40930: PPUSH
40931: LD_VAR 0 10
40935: PPUSH
40936: LD_INT 2
40938: PPUSH
40939: CALL_OW 273
40943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40944: LD_VAR 0 11
40948: PPUSH
40949: LD_VAR 0 12
40953: PPUSH
40954: CALL_OW 488
40958: PUSH
40959: LD_VAR 0 11
40963: PPUSH
40964: LD_VAR 0 12
40968: PPUSH
40969: CALL_OW 428
40973: NOT
40974: AND
40975: IFFALSE 40998
// begin ComMoveXY ( tmp , _x , _y ) ;
40977: LD_VAR 0 13
40981: PPUSH
40982: LD_VAR 0 11
40986: PPUSH
40987: LD_VAR 0 12
40991: PPUSH
40992: CALL_OW 111
// break ;
40996: GO 41000
// end ; end ;
40998: GO 40885
41000: POP
41001: POP
// end ; end ;
41002: GO 40327
41004: POP
41005: POP
// end ;
41006: LD_VAR 0 8
41010: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41011: LD_INT 0
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
// result := false ;
41023: LD_ADDR_VAR 0 6
41027: PUSH
41028: LD_INT 0
41030: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41031: LD_VAR 0 1
41035: NOT
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: CALL_OW 266
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: IN
41057: NOT
41058: OR
41059: PUSH
41060: LD_VAR 0 2
41064: NOT
41065: OR
41066: PUSH
41067: LD_VAR 0 5
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 3
41083: PUSH
41084: LD_INT 4
41086: PUSH
41087: LD_INT 5
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: IN
41098: NOT
41099: OR
41100: PUSH
41101: LD_VAR 0 3
41105: PPUSH
41106: LD_VAR 0 4
41110: PPUSH
41111: CALL_OW 488
41115: NOT
41116: OR
41117: IFFALSE 41121
// exit ;
41119: GO 41838
// pom := GetBase ( depot ) ;
41121: LD_ADDR_VAR 0 10
41125: PUSH
41126: LD_VAR 0 1
41130: PPUSH
41131: CALL_OW 274
41135: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41136: LD_ADDR_VAR 0 11
41140: PUSH
41141: LD_VAR 0 2
41145: PPUSH
41146: LD_VAR 0 1
41150: PPUSH
41151: CALL_OW 248
41155: PPUSH
41156: CALL_OW 450
41160: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41161: LD_VAR 0 10
41165: PPUSH
41166: LD_INT 1
41168: PPUSH
41169: CALL_OW 275
41173: PUSH
41174: LD_VAR 0 11
41178: PUSH
41179: LD_INT 1
41181: ARRAY
41182: GREATEREQUAL
41183: PUSH
41184: LD_VAR 0 10
41188: PPUSH
41189: LD_INT 2
41191: PPUSH
41192: CALL_OW 275
41196: PUSH
41197: LD_VAR 0 11
41201: PUSH
41202: LD_INT 2
41204: ARRAY
41205: GREATEREQUAL
41206: AND
41207: PUSH
41208: LD_VAR 0 10
41212: PPUSH
41213: LD_INT 3
41215: PPUSH
41216: CALL_OW 275
41220: PUSH
41221: LD_VAR 0 11
41225: PUSH
41226: LD_INT 3
41228: ARRAY
41229: GREATEREQUAL
41230: AND
41231: NOT
41232: IFFALSE 41236
// exit ;
41234: GO 41838
// if GetBType ( depot ) = b_depot then
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 266
41245: PUSH
41246: LD_INT 0
41248: EQUAL
41249: IFFALSE 41261
// dist := 28 else
41251: LD_ADDR_VAR 0 14
41255: PUSH
41256: LD_INT 28
41258: ST_TO_ADDR
41259: GO 41269
// dist := 36 ;
41261: LD_ADDR_VAR 0 14
41265: PUSH
41266: LD_INT 36
41268: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41269: LD_VAR 0 1
41273: PPUSH
41274: LD_VAR 0 3
41278: PPUSH
41279: LD_VAR 0 4
41283: PPUSH
41284: CALL_OW 297
41288: PUSH
41289: LD_VAR 0 14
41293: GREATER
41294: IFFALSE 41298
// exit ;
41296: GO 41838
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41298: LD_ADDR_VAR 0 12
41302: PUSH
41303: LD_VAR 0 2
41307: PPUSH
41308: LD_VAR 0 3
41312: PPUSH
41313: LD_VAR 0 4
41317: PPUSH
41318: LD_VAR 0 5
41322: PPUSH
41323: LD_VAR 0 1
41327: PPUSH
41328: CALL_OW 248
41332: PPUSH
41333: LD_INT 0
41335: PPUSH
41336: CALL 41843 0 6
41340: ST_TO_ADDR
// if not hexes then
41341: LD_VAR 0 12
41345: NOT
41346: IFFALSE 41350
// exit ;
41348: GO 41838
// hex := GetHexInfo ( x , y ) ;
41350: LD_ADDR_VAR 0 15
41354: PUSH
41355: LD_VAR 0 3
41359: PPUSH
41360: LD_VAR 0 4
41364: PPUSH
41365: CALL_OW 546
41369: ST_TO_ADDR
// if hex [ 1 ] then
41370: LD_VAR 0 15
41374: PUSH
41375: LD_INT 1
41377: ARRAY
41378: IFFALSE 41382
// exit ;
41380: GO 41838
// height := hex [ 2 ] ;
41382: LD_ADDR_VAR 0 13
41386: PUSH
41387: LD_VAR 0 15
41391: PUSH
41392: LD_INT 2
41394: ARRAY
41395: ST_TO_ADDR
// for i = 1 to hexes do
41396: LD_ADDR_VAR 0 7
41400: PUSH
41401: DOUBLE
41402: LD_INT 1
41404: DEC
41405: ST_TO_ADDR
41406: LD_VAR 0 12
41410: PUSH
41411: FOR_TO
41412: IFFALSE 41742
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41414: LD_VAR 0 12
41418: PUSH
41419: LD_VAR 0 7
41423: ARRAY
41424: PUSH
41425: LD_INT 1
41427: ARRAY
41428: PPUSH
41429: LD_VAR 0 12
41433: PUSH
41434: LD_VAR 0 7
41438: ARRAY
41439: PUSH
41440: LD_INT 2
41442: ARRAY
41443: PPUSH
41444: CALL_OW 488
41448: NOT
41449: PUSH
41450: LD_VAR 0 12
41454: PUSH
41455: LD_VAR 0 7
41459: ARRAY
41460: PUSH
41461: LD_INT 1
41463: ARRAY
41464: PPUSH
41465: LD_VAR 0 12
41469: PUSH
41470: LD_VAR 0 7
41474: ARRAY
41475: PUSH
41476: LD_INT 2
41478: ARRAY
41479: PPUSH
41480: CALL_OW 428
41484: PUSH
41485: LD_INT 0
41487: GREATER
41488: OR
41489: PUSH
41490: LD_VAR 0 12
41494: PUSH
41495: LD_VAR 0 7
41499: ARRAY
41500: PUSH
41501: LD_INT 1
41503: ARRAY
41504: PPUSH
41505: LD_VAR 0 12
41509: PUSH
41510: LD_VAR 0 7
41514: ARRAY
41515: PUSH
41516: LD_INT 2
41518: ARRAY
41519: PPUSH
41520: CALL_OW 351
41524: OR
41525: IFFALSE 41531
// exit ;
41527: POP
41528: POP
41529: GO 41838
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41531: LD_ADDR_VAR 0 8
41535: PUSH
41536: LD_VAR 0 12
41540: PUSH
41541: LD_VAR 0 7
41545: ARRAY
41546: PUSH
41547: LD_INT 1
41549: ARRAY
41550: PPUSH
41551: LD_VAR 0 12
41555: PUSH
41556: LD_VAR 0 7
41560: ARRAY
41561: PUSH
41562: LD_INT 2
41564: ARRAY
41565: PPUSH
41566: CALL_OW 546
41570: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41571: LD_VAR 0 8
41575: PUSH
41576: LD_INT 1
41578: ARRAY
41579: PUSH
41580: LD_VAR 0 8
41584: PUSH
41585: LD_INT 2
41587: ARRAY
41588: PUSH
41589: LD_VAR 0 13
41593: PUSH
41594: LD_INT 2
41596: PLUS
41597: GREATER
41598: OR
41599: PUSH
41600: LD_VAR 0 8
41604: PUSH
41605: LD_INT 2
41607: ARRAY
41608: PUSH
41609: LD_VAR 0 13
41613: PUSH
41614: LD_INT 2
41616: MINUS
41617: LESS
41618: OR
41619: PUSH
41620: LD_VAR 0 8
41624: PUSH
41625: LD_INT 3
41627: ARRAY
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 8
41634: PUSH
41635: LD_INT 9
41637: PUSH
41638: LD_INT 10
41640: PUSH
41641: LD_INT 11
41643: PUSH
41644: LD_INT 12
41646: PUSH
41647: LD_INT 13
41649: PUSH
41650: LD_INT 16
41652: PUSH
41653: LD_INT 17
41655: PUSH
41656: LD_INT 18
41658: PUSH
41659: LD_INT 19
41661: PUSH
41662: LD_INT 20
41664: PUSH
41665: LD_INT 21
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: IN
41683: NOT
41684: OR
41685: PUSH
41686: LD_VAR 0 8
41690: PUSH
41691: LD_INT 5
41693: ARRAY
41694: NOT
41695: OR
41696: PUSH
41697: LD_VAR 0 8
41701: PUSH
41702: LD_INT 6
41704: ARRAY
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: LD_INT 7
41714: PUSH
41715: LD_INT 9
41717: PUSH
41718: LD_INT 10
41720: PUSH
41721: LD_INT 11
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: IN
41732: NOT
41733: OR
41734: IFFALSE 41740
// exit ;
41736: POP
41737: POP
41738: GO 41838
// end ;
41740: GO 41411
41742: POP
41743: POP
// side := GetSide ( depot ) ;
41744: LD_ADDR_VAR 0 9
41748: PUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 255
41758: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41759: LD_VAR 0 9
41763: PPUSH
41764: LD_VAR 0 3
41768: PPUSH
41769: LD_VAR 0 4
41773: PPUSH
41774: LD_INT 20
41776: PPUSH
41777: CALL 34159 0 4
41781: PUSH
41782: LD_INT 4
41784: ARRAY
41785: IFFALSE 41789
// exit ;
41787: GO 41838
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41789: LD_VAR 0 2
41793: PUSH
41794: LD_INT 29
41796: PUSH
41797: LD_INT 30
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: IN
41804: PUSH
41805: LD_VAR 0 3
41809: PPUSH
41810: LD_VAR 0 4
41814: PPUSH
41815: LD_VAR 0 9
41819: PPUSH
41820: CALL_OW 440
41824: NOT
41825: AND
41826: IFFALSE 41830
// exit ;
41828: GO 41838
// result := true ;
41830: LD_ADDR_VAR 0 6
41834: PUSH
41835: LD_INT 1
41837: ST_TO_ADDR
// end ;
41838: LD_VAR 0 6
41842: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41843: LD_INT 0
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
// result = [ ] ;
41903: LD_ADDR_VAR 0 7
41907: PUSH
41908: EMPTY
41909: ST_TO_ADDR
// temp_list = [ ] ;
41910: LD_ADDR_VAR 0 9
41914: PUSH
41915: EMPTY
41916: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41917: LD_VAR 0 4
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 3
41933: PUSH
41934: LD_INT 4
41936: PUSH
41937: LD_INT 5
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: IN
41948: NOT
41949: PUSH
41950: LD_VAR 0 1
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: IN
41965: PUSH
41966: LD_VAR 0 5
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: IN
41985: NOT
41986: AND
41987: OR
41988: IFFALSE 41992
// exit ;
41990: GO 60383
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41992: LD_VAR 0 1
41996: PUSH
41997: LD_INT 6
41999: PUSH
42000: LD_INT 7
42002: PUSH
42003: LD_INT 8
42005: PUSH
42006: LD_INT 13
42008: PUSH
42009: LD_INT 12
42011: PUSH
42012: LD_INT 15
42014: PUSH
42015: LD_INT 11
42017: PUSH
42018: LD_INT 14
42020: PUSH
42021: LD_INT 10
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: IN
42035: IFFALSE 42045
// btype = b_lab ;
42037: LD_ADDR_VAR 0 1
42041: PUSH
42042: LD_INT 6
42044: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42045: LD_VAR 0 6
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: IN
42064: NOT
42065: PUSH
42066: LD_VAR 0 1
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 6
42085: PUSH
42086: LD_INT 36
42088: PUSH
42089: LD_INT 4
42091: PUSH
42092: LD_INT 5
42094: PUSH
42095: LD_INT 31
42097: PUSH
42098: LD_INT 32
42100: PUSH
42101: LD_INT 33
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: IN
42117: NOT
42118: PUSH
42119: LD_VAR 0 6
42123: PUSH
42124: LD_INT 1
42126: EQUAL
42127: AND
42128: OR
42129: PUSH
42130: LD_VAR 0 1
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: IN
42145: NOT
42146: PUSH
42147: LD_VAR 0 6
42151: PUSH
42152: LD_INT 2
42154: EQUAL
42155: AND
42156: OR
42157: IFFALSE 42167
// mode = 0 ;
42159: LD_ADDR_VAR 0 6
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// case mode of 0 :
42167: LD_VAR 0 6
42171: PUSH
42172: LD_INT 0
42174: DOUBLE
42175: EQUAL
42176: IFTRUE 42180
42178: GO 53633
42180: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42181: LD_ADDR_VAR 0 11
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42374: LD_ADDR_VAR 0 12
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42570: LD_ADDR_VAR 0 13
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: LD_INT 3
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: NEG
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: LD_INT 3
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42769: LD_ADDR_VAR 0 14
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 3
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42965: LD_ADDR_VAR 0 15
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43158: LD_ADDR_VAR 0 16
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 3
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43351: LD_ADDR_VAR 0 17
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 2
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43581: LD_ADDR_VAR 0 18
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43811: LD_ADDR_VAR 0 19
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44041: LD_ADDR_VAR 0 20
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44271: LD_ADDR_VAR 0 21
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44501: LD_ADDR_VAR 0 22
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44731: LD_ADDR_VAR 0 23
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 3
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45011: LD_ADDR_VAR 0 24
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 3
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45287: LD_ADDR_VAR 0 25
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 3
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45561: LD_ADDR_VAR 0 26
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: LD_INT 3
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45837: LD_ADDR_VAR 0 27
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 2
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46117: LD_ADDR_VAR 0 28
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 3
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 3
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46399: LD_ADDR_VAR 0 29
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46678: LD_ADDR_VAR 0 30
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46956: LD_ADDR_VAR 0 31
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47234: LD_ADDR_VAR 0 32
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47512: LD_ADDR_VAR 0 33
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 2
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47791: LD_ADDR_VAR 0 34
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 3
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48071: LD_ADDR_VAR 0 35
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48183: LD_ADDR_VAR 0 36
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48295: LD_ADDR_VAR 0 37
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48407: LD_ADDR_VAR 0 38
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48519: LD_ADDR_VAR 0 39
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48631: LD_ADDR_VAR 0 40
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48743: LD_ADDR_VAR 0 41
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 3
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49093: LD_ADDR_VAR 0 42
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 3
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49443: LD_ADDR_VAR 0 43
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 3
49750: NEG
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49791: LD_ADDR_VAR 0 44
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 3
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50141: LD_ADDR_VAR 0 45
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50491: LD_ADDR_VAR 0 46
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50839: LD_ADDR_VAR 0 47
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50990: LD_ADDR_VAR 0 48
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51137: LD_ADDR_VAR 0 49
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51281: LD_ADDR_VAR 0 50
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51425: LD_ADDR_VAR 0 51
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51572: LD_ADDR_VAR 0 52
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51723: LD_ADDR_VAR 0 53
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51953: LD_ADDR_VAR 0 54
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52183: LD_ADDR_VAR 0 55
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52413: LD_ADDR_VAR 0 56
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52643: LD_ADDR_VAR 0 57
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52873: LD_ADDR_VAR 0 58
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53103: LD_ADDR_VAR 0 59
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53191: LD_ADDR_VAR 0 60
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53279: LD_ADDR_VAR 0 61
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53367: LD_ADDR_VAR 0 62
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53455: LD_ADDR_VAR 0 63
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53543: LD_ADDR_VAR 0 64
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// end ; 1 :
53631: GO 59528
53633: LD_INT 1
53635: DOUBLE
53636: EQUAL
53637: IFTRUE 53641
53639: GO 56264
53641: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53642: LD_ADDR_VAR 0 11
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53686: LD_ADDR_VAR 0 12
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53727: LD_ADDR_VAR 0 13
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53767: LD_ADDR_VAR 0 14
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53808: LD_ADDR_VAR 0 15
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53852: LD_ADDR_VAR 0 16
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53898: LD_ADDR_VAR 0 17
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53942: LD_ADDR_VAR 0 18
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53983: LD_ADDR_VAR 0 19
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 3
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54023: LD_ADDR_VAR 0 20
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54064: LD_ADDR_VAR 0 21
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54108: LD_ADDR_VAR 0 22
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54154: LD_ADDR_VAR 0 23
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 3
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54198: LD_ADDR_VAR 0 24
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 4
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54239: LD_ADDR_VAR 0 25
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: LD_INT 3
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 4
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54279: LD_ADDR_VAR 0 26
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 4
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54320: LD_ADDR_VAR 0 27
54324: PUSH
54325: LD_INT 3
54327: NEG
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 4
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54364: LD_ADDR_VAR 0 28
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: NEG
54384: PUSH
54385: LD_INT 4
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 4
54395: NEG
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54410: LD_ADDR_VAR 0 29
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 4
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 5
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 5
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 6
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 6
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 5
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54565: LD_ADDR_VAR 0 30
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 5
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 5
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 6
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 6
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54708: LD_ADDR_VAR 0 31
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 3
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 4
54755: PUSH
54756: LD_INT 4
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 5
54775: PUSH
54776: LD_INT 4
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 5
54785: PUSH
54786: LD_INT 5
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 4
54795: PUSH
54796: LD_INT 5
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 6
54805: PUSH
54806: LD_INT 5
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 6
54815: PUSH
54816: LD_INT 6
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: PUSH
54826: LD_INT 6
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54847: LD_ADDR_VAR 0 32
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 3
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 4
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 4
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 5
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 5
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 4
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 6
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 6
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 5
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54990: LD_ADDR_VAR 0 33
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 4
55042: NEG
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 4
55065: NEG
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 5
55076: NEG
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 5
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 5
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 6
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 6
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55145: LD_ADDR_VAR 0 34
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 4
55200: NEG
55201: PUSH
55202: LD_INT 3
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 4
55212: NEG
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 4
55224: NEG
55225: PUSH
55226: LD_INT 5
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 5
55236: NEG
55237: PUSH
55238: LD_INT 4
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 5
55248: NEG
55249: PUSH
55250: LD_INT 5
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 5
55260: NEG
55261: PUSH
55262: LD_INT 6
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 6
55272: NEG
55273: PUSH
55274: LD_INT 5
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 6
55284: NEG
55285: PUSH
55286: LD_INT 6
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55308: LD_ADDR_VAR 0 41
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 3
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55352: LD_ADDR_VAR 0 42
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55393: LD_ADDR_VAR 0 43
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55433: LD_ADDR_VAR 0 44
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55474: LD_ADDR_VAR 0 45
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55518: LD_ADDR_VAR 0 46
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55564: LD_ADDR_VAR 0 47
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55597: LD_ADDR_VAR 0 48
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55628: LD_ADDR_VAR 0 49
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55657: LD_ADDR_VAR 0 50
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55686: LD_ADDR_VAR 0 51
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55717: LD_ADDR_VAR 0 52
55721: PUSH
55722: LD_INT 3
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: LD_INT 2
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55750: LD_ADDR_VAR 0 53
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 3
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55794: LD_ADDR_VAR 0 54
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 3
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55835: LD_ADDR_VAR 0 55
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55875: LD_ADDR_VAR 0 56
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55916: LD_ADDR_VAR 0 57
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 3
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55960: LD_ADDR_VAR 0 58
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: NEG
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56006: LD_ADDR_VAR 0 59
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: LIST
56049: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56050: LD_ADDR_VAR 0 60
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56091: LD_ADDR_VAR 0 61
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56131: LD_ADDR_VAR 0 62
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56172: LD_ADDR_VAR 0 63
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56216: LD_ADDR_VAR 0 64
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: ST_TO_ADDR
// end ; 2 :
56262: GO 59528
56264: LD_INT 2
56266: DOUBLE
56267: EQUAL
56268: IFTRUE 56272
56270: GO 59527
56272: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56273: LD_ADDR_VAR 0 29
56277: PUSH
56278: LD_INT 4
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 4
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 5
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: LD_INT 3
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 4
56403: PUSH
56404: LD_INT 4
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 4
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 4
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 4
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 5
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 5
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 4
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 5
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 4
56612: NEG
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: NEG
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 4
56658: NEG
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: LD_INT 5
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 3
56682: NEG
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: NEG
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 5
56718: NEG
56719: PUSH
56720: LD_INT 4
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 5
56730: NEG
56731: PUSH
56732: LD_INT 5
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 5
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 5
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56811: LD_ADDR_VAR 0 30
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: LD_INT 4
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: LD_INT 3
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 5
56838: PUSH
56839: LD_INT 4
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: LD_INT 5
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 4
56858: PUSH
56859: LD_INT 5
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 5
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 5
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 4
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 4
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 4
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 4
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 4
57046: NEG
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 5
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 5
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 5
57080: NEG
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: LD_INT 4
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: LD_INT 4
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 4
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 4
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 5
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 4
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 4
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 5
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: LD_INT 5
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57358: LD_ADDR_VAR 0 31
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 4
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 4
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 5
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 5
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 3
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: LD_INT 5
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 4
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 4
57560: NEG
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 4
57572: NEG
57573: PUSH
57574: LD_INT 5
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 3
57584: NEG
57585: PUSH
57586: LD_INT 4
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 4
57608: NEG
57609: PUSH
57610: LD_INT 3
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 5
57620: NEG
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: LD_INT 5
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 5
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 4
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 5
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 5
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57908: LD_ADDR_VAR 0 32
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 4
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 3
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 5
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 5
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 5
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: LD_INT 4
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 3
58065: NEG
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 4
58089: NEG
58090: PUSH
58091: LD_INT 4
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 4
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 5
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 4
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 4
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 3
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 5
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 4
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: LD_INT 4
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 5
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 5
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 5
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58455: LD_ADDR_VAR 0 33
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: LD_INT 4
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: NEG
58475: PUSH
58476: LD_INT 5
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: NEG
58487: PUSH
58488: LD_INT 4
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 4
58510: NEG
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 5
58522: NEG
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 5
58534: NEG
58535: PUSH
58536: LD_INT 5
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: NEG
58547: PUSH
58548: LD_INT 5
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 5
58558: NEG
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 4
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 4
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: LD_INT 4
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 4
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 5
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 5
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: LD_INT 3
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 4
58795: PUSH
58796: LD_INT 4
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 4
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 4
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 4
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58993: LD_ADDR_VAR 0 34
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 5
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 4
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: LD_INT 3
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 4
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 5
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 3
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: LD_INT 5
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 1
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 4
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 4
59195: PUSH
59196: LD_INT 4
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 4
59205: PUSH
59206: LD_INT 3
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 5
59215: PUSH
59216: LD_INT 4
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 5
59225: PUSH
59226: LD_INT 5
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: PUSH
59236: LD_INT 5
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: LD_INT 4
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 5
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 5
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 4
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: NEG
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 4
59423: NEG
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 5
59434: NEG
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 5
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 5
59457: NEG
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// end ; end ;
59525: GO 59528
59527: POP
// case btype of b_depot , b_warehouse :
59528: LD_VAR 0 1
59532: PUSH
59533: LD_INT 0
59535: DOUBLE
59536: EQUAL
59537: IFTRUE 59547
59539: LD_INT 1
59541: DOUBLE
59542: EQUAL
59543: IFTRUE 59547
59545: GO 59748
59547: POP
// case nation of nation_american :
59548: LD_VAR 0 5
59552: PUSH
59553: LD_INT 1
59555: DOUBLE
59556: EQUAL
59557: IFTRUE 59561
59559: GO 59617
59561: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59562: LD_ADDR_VAR 0 9
59566: PUSH
59567: LD_VAR 0 11
59571: PUSH
59572: LD_VAR 0 12
59576: PUSH
59577: LD_VAR 0 13
59581: PUSH
59582: LD_VAR 0 14
59586: PUSH
59587: LD_VAR 0 15
59591: PUSH
59592: LD_VAR 0 16
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: LD_VAR 0 4
59609: PUSH
59610: LD_INT 1
59612: PLUS
59613: ARRAY
59614: ST_TO_ADDR
59615: GO 59746
59617: LD_INT 2
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59625
59623: GO 59681
59625: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59626: LD_ADDR_VAR 0 9
59630: PUSH
59631: LD_VAR 0 17
59635: PUSH
59636: LD_VAR 0 18
59640: PUSH
59641: LD_VAR 0 19
59645: PUSH
59646: LD_VAR 0 20
59650: PUSH
59651: LD_VAR 0 21
59655: PUSH
59656: LD_VAR 0 22
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 4
59673: PUSH
59674: LD_INT 1
59676: PLUS
59677: ARRAY
59678: ST_TO_ADDR
59679: GO 59746
59681: LD_INT 3
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59689
59687: GO 59745
59689: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59690: LD_ADDR_VAR 0 9
59694: PUSH
59695: LD_VAR 0 23
59699: PUSH
59700: LD_VAR 0 24
59704: PUSH
59705: LD_VAR 0 25
59709: PUSH
59710: LD_VAR 0 26
59714: PUSH
59715: LD_VAR 0 27
59719: PUSH
59720: LD_VAR 0 28
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: PUSH
59733: LD_VAR 0 4
59737: PUSH
59738: LD_INT 1
59740: PLUS
59741: ARRAY
59742: ST_TO_ADDR
59743: GO 59746
59745: POP
59746: GO 60301
59748: LD_INT 2
59750: DOUBLE
59751: EQUAL
59752: IFTRUE 59762
59754: LD_INT 3
59756: DOUBLE
59757: EQUAL
59758: IFTRUE 59762
59760: GO 59818
59762: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59763: LD_ADDR_VAR 0 9
59767: PUSH
59768: LD_VAR 0 29
59772: PUSH
59773: LD_VAR 0 30
59777: PUSH
59778: LD_VAR 0 31
59782: PUSH
59783: LD_VAR 0 32
59787: PUSH
59788: LD_VAR 0 33
59792: PUSH
59793: LD_VAR 0 34
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: PUSH
59806: LD_VAR 0 4
59810: PUSH
59811: LD_INT 1
59813: PLUS
59814: ARRAY
59815: ST_TO_ADDR
59816: GO 60301
59818: LD_INT 16
59820: DOUBLE
59821: EQUAL
59822: IFTRUE 59880
59824: LD_INT 17
59826: DOUBLE
59827: EQUAL
59828: IFTRUE 59880
59830: LD_INT 18
59832: DOUBLE
59833: EQUAL
59834: IFTRUE 59880
59836: LD_INT 19
59838: DOUBLE
59839: EQUAL
59840: IFTRUE 59880
59842: LD_INT 22
59844: DOUBLE
59845: EQUAL
59846: IFTRUE 59880
59848: LD_INT 20
59850: DOUBLE
59851: EQUAL
59852: IFTRUE 59880
59854: LD_INT 21
59856: DOUBLE
59857: EQUAL
59858: IFTRUE 59880
59860: LD_INT 23
59862: DOUBLE
59863: EQUAL
59864: IFTRUE 59880
59866: LD_INT 24
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59880
59872: LD_INT 25
59874: DOUBLE
59875: EQUAL
59876: IFTRUE 59880
59878: GO 59936
59880: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59881: LD_ADDR_VAR 0 9
59885: PUSH
59886: LD_VAR 0 35
59890: PUSH
59891: LD_VAR 0 36
59895: PUSH
59896: LD_VAR 0 37
59900: PUSH
59901: LD_VAR 0 38
59905: PUSH
59906: LD_VAR 0 39
59910: PUSH
59911: LD_VAR 0 40
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: PUSH
59924: LD_VAR 0 4
59928: PUSH
59929: LD_INT 1
59931: PLUS
59932: ARRAY
59933: ST_TO_ADDR
59934: GO 60301
59936: LD_INT 6
59938: DOUBLE
59939: EQUAL
59940: IFTRUE 59992
59942: LD_INT 7
59944: DOUBLE
59945: EQUAL
59946: IFTRUE 59992
59948: LD_INT 8
59950: DOUBLE
59951: EQUAL
59952: IFTRUE 59992
59954: LD_INT 13
59956: DOUBLE
59957: EQUAL
59958: IFTRUE 59992
59960: LD_INT 12
59962: DOUBLE
59963: EQUAL
59964: IFTRUE 59992
59966: LD_INT 15
59968: DOUBLE
59969: EQUAL
59970: IFTRUE 59992
59972: LD_INT 11
59974: DOUBLE
59975: EQUAL
59976: IFTRUE 59992
59978: LD_INT 14
59980: DOUBLE
59981: EQUAL
59982: IFTRUE 59992
59984: LD_INT 10
59986: DOUBLE
59987: EQUAL
59988: IFTRUE 59992
59990: GO 60048
59992: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59993: LD_ADDR_VAR 0 9
59997: PUSH
59998: LD_VAR 0 41
60002: PUSH
60003: LD_VAR 0 42
60007: PUSH
60008: LD_VAR 0 43
60012: PUSH
60013: LD_VAR 0 44
60017: PUSH
60018: LD_VAR 0 45
60022: PUSH
60023: LD_VAR 0 46
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: PUSH
60036: LD_VAR 0 4
60040: PUSH
60041: LD_INT 1
60043: PLUS
60044: ARRAY
60045: ST_TO_ADDR
60046: GO 60301
60048: LD_INT 36
60050: DOUBLE
60051: EQUAL
60052: IFTRUE 60056
60054: GO 60112
60056: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60057: LD_ADDR_VAR 0 9
60061: PUSH
60062: LD_VAR 0 47
60066: PUSH
60067: LD_VAR 0 48
60071: PUSH
60072: LD_VAR 0 49
60076: PUSH
60077: LD_VAR 0 50
60081: PUSH
60082: LD_VAR 0 51
60086: PUSH
60087: LD_VAR 0 52
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: LD_VAR 0 4
60104: PUSH
60105: LD_INT 1
60107: PLUS
60108: ARRAY
60109: ST_TO_ADDR
60110: GO 60301
60112: LD_INT 4
60114: DOUBLE
60115: EQUAL
60116: IFTRUE 60138
60118: LD_INT 5
60120: DOUBLE
60121: EQUAL
60122: IFTRUE 60138
60124: LD_INT 34
60126: DOUBLE
60127: EQUAL
60128: IFTRUE 60138
60130: LD_INT 37
60132: DOUBLE
60133: EQUAL
60134: IFTRUE 60138
60136: GO 60194
60138: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60139: LD_ADDR_VAR 0 9
60143: PUSH
60144: LD_VAR 0 53
60148: PUSH
60149: LD_VAR 0 54
60153: PUSH
60154: LD_VAR 0 55
60158: PUSH
60159: LD_VAR 0 56
60163: PUSH
60164: LD_VAR 0 57
60168: PUSH
60169: LD_VAR 0 58
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: PUSH
60182: LD_VAR 0 4
60186: PUSH
60187: LD_INT 1
60189: PLUS
60190: ARRAY
60191: ST_TO_ADDR
60192: GO 60301
60194: LD_INT 31
60196: DOUBLE
60197: EQUAL
60198: IFTRUE 60244
60200: LD_INT 32
60202: DOUBLE
60203: EQUAL
60204: IFTRUE 60244
60206: LD_INT 33
60208: DOUBLE
60209: EQUAL
60210: IFTRUE 60244
60212: LD_INT 27
60214: DOUBLE
60215: EQUAL
60216: IFTRUE 60244
60218: LD_INT 26
60220: DOUBLE
60221: EQUAL
60222: IFTRUE 60244
60224: LD_INT 28
60226: DOUBLE
60227: EQUAL
60228: IFTRUE 60244
60230: LD_INT 29
60232: DOUBLE
60233: EQUAL
60234: IFTRUE 60244
60236: LD_INT 30
60238: DOUBLE
60239: EQUAL
60240: IFTRUE 60244
60242: GO 60300
60244: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60245: LD_ADDR_VAR 0 9
60249: PUSH
60250: LD_VAR 0 59
60254: PUSH
60255: LD_VAR 0 60
60259: PUSH
60260: LD_VAR 0 61
60264: PUSH
60265: LD_VAR 0 62
60269: PUSH
60270: LD_VAR 0 63
60274: PUSH
60275: LD_VAR 0 64
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: PUSH
60288: LD_VAR 0 4
60292: PUSH
60293: LD_INT 1
60295: PLUS
60296: ARRAY
60297: ST_TO_ADDR
60298: GO 60301
60300: POP
// temp_list2 = [ ] ;
60301: LD_ADDR_VAR 0 10
60305: PUSH
60306: EMPTY
60307: ST_TO_ADDR
// for i in temp_list do
60308: LD_ADDR_VAR 0 8
60312: PUSH
60313: LD_VAR 0 9
60317: PUSH
60318: FOR_IN
60319: IFFALSE 60371
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60321: LD_ADDR_VAR 0 10
60325: PUSH
60326: LD_VAR 0 10
60330: PUSH
60331: LD_VAR 0 8
60335: PUSH
60336: LD_INT 1
60338: ARRAY
60339: PUSH
60340: LD_VAR 0 2
60344: PLUS
60345: PUSH
60346: LD_VAR 0 8
60350: PUSH
60351: LD_INT 2
60353: ARRAY
60354: PUSH
60355: LD_VAR 0 3
60359: PLUS
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: EMPTY
60366: LIST
60367: ADD
60368: ST_TO_ADDR
60369: GO 60318
60371: POP
60372: POP
// result = temp_list2 ;
60373: LD_ADDR_VAR 0 7
60377: PUSH
60378: LD_VAR 0 10
60382: ST_TO_ADDR
// end ;
60383: LD_VAR 0 7
60387: RET
// export function EnemyInRange ( unit , dist ) ; begin
60388: LD_INT 0
60390: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60391: LD_ADDR_VAR 0 3
60395: PUSH
60396: LD_VAR 0 1
60400: PPUSH
60401: CALL_OW 255
60405: PPUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 250
60415: PPUSH
60416: LD_VAR 0 1
60420: PPUSH
60421: CALL_OW 251
60425: PPUSH
60426: LD_VAR 0 2
60430: PPUSH
60431: CALL 34159 0 4
60435: PUSH
60436: LD_INT 4
60438: ARRAY
60439: ST_TO_ADDR
// end ;
60440: LD_VAR 0 3
60444: RET
// export function PlayerSeeMe ( unit ) ; begin
60445: LD_INT 0
60447: PPUSH
// result := See ( your_side , unit ) ;
60448: LD_ADDR_VAR 0 2
60452: PUSH
60453: LD_OWVAR 2
60457: PPUSH
60458: LD_VAR 0 1
60462: PPUSH
60463: CALL_OW 292
60467: ST_TO_ADDR
// end ;
60468: LD_VAR 0 2
60472: RET
// export function ReverseDir ( unit ) ; begin
60473: LD_INT 0
60475: PPUSH
// if not unit then
60476: LD_VAR 0 1
60480: NOT
60481: IFFALSE 60485
// exit ;
60483: GO 60508
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60485: LD_ADDR_VAR 0 2
60489: PUSH
60490: LD_VAR 0 1
60494: PPUSH
60495: CALL_OW 254
60499: PUSH
60500: LD_INT 3
60502: PLUS
60503: PUSH
60504: LD_INT 6
60506: MOD
60507: ST_TO_ADDR
// end ;
60508: LD_VAR 0 2
60512: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60513: LD_INT 0
60515: PPUSH
60516: PPUSH
60517: PPUSH
60518: PPUSH
60519: PPUSH
// if not hexes then
60520: LD_VAR 0 2
60524: NOT
60525: IFFALSE 60529
// exit ;
60527: GO 60677
// dist := 9999 ;
60529: LD_ADDR_VAR 0 5
60533: PUSH
60534: LD_INT 9999
60536: ST_TO_ADDR
// for i = 1 to hexes do
60537: LD_ADDR_VAR 0 4
60541: PUSH
60542: DOUBLE
60543: LD_INT 1
60545: DEC
60546: ST_TO_ADDR
60547: LD_VAR 0 2
60551: PUSH
60552: FOR_TO
60553: IFFALSE 60665
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60555: LD_VAR 0 1
60559: PPUSH
60560: LD_VAR 0 2
60564: PUSH
60565: LD_VAR 0 4
60569: ARRAY
60570: PUSH
60571: LD_INT 1
60573: ARRAY
60574: PPUSH
60575: LD_VAR 0 2
60579: PUSH
60580: LD_VAR 0 4
60584: ARRAY
60585: PUSH
60586: LD_INT 2
60588: ARRAY
60589: PPUSH
60590: CALL_OW 297
60594: PUSH
60595: LD_VAR 0 5
60599: LESS
60600: IFFALSE 60663
// begin hex := hexes [ i ] ;
60602: LD_ADDR_VAR 0 7
60606: PUSH
60607: LD_VAR 0 2
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60618: LD_ADDR_VAR 0 5
60622: PUSH
60623: LD_VAR 0 1
60627: PPUSH
60628: LD_VAR 0 2
60632: PUSH
60633: LD_VAR 0 4
60637: ARRAY
60638: PUSH
60639: LD_INT 1
60641: ARRAY
60642: PPUSH
60643: LD_VAR 0 2
60647: PUSH
60648: LD_VAR 0 4
60652: ARRAY
60653: PUSH
60654: LD_INT 2
60656: ARRAY
60657: PPUSH
60658: CALL_OW 297
60662: ST_TO_ADDR
// end ; end ;
60663: GO 60552
60665: POP
60666: POP
// result := hex ;
60667: LD_ADDR_VAR 0 3
60671: PUSH
60672: LD_VAR 0 7
60676: ST_TO_ADDR
// end ;
60677: LD_VAR 0 3
60681: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60682: LD_INT 0
60684: PPUSH
60685: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60686: LD_VAR 0 1
60690: NOT
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: LD_INT 21
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 23
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PPUSH
60721: CALL_OW 69
60725: IN
60726: NOT
60727: OR
60728: IFFALSE 60732
// exit ;
60730: GO 60779
// for i = 1 to 3 do
60732: LD_ADDR_VAR 0 3
60736: PUSH
60737: DOUBLE
60738: LD_INT 1
60740: DEC
60741: ST_TO_ADDR
60742: LD_INT 3
60744: PUSH
60745: FOR_TO
60746: IFFALSE 60777
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60748: LD_VAR 0 1
60752: PPUSH
60753: CALL_OW 250
60757: PPUSH
60758: LD_VAR 0 1
60762: PPUSH
60763: CALL_OW 251
60767: PPUSH
60768: LD_INT 1
60770: PPUSH
60771: CALL_OW 453
60775: GO 60745
60777: POP
60778: POP
// end ;
60779: LD_VAR 0 2
60783: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60784: LD_INT 0
60786: PPUSH
60787: PPUSH
60788: PPUSH
60789: PPUSH
60790: PPUSH
60791: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60792: LD_VAR 0 1
60796: NOT
60797: PUSH
60798: LD_VAR 0 2
60802: NOT
60803: OR
60804: PUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: CALL_OW 314
60814: OR
60815: IFFALSE 60819
// exit ;
60817: GO 61260
// x := GetX ( enemy_unit ) ;
60819: LD_ADDR_VAR 0 7
60823: PUSH
60824: LD_VAR 0 2
60828: PPUSH
60829: CALL_OW 250
60833: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60834: LD_ADDR_VAR 0 8
60838: PUSH
60839: LD_VAR 0 2
60843: PPUSH
60844: CALL_OW 251
60848: ST_TO_ADDR
// if not x or not y then
60849: LD_VAR 0 7
60853: NOT
60854: PUSH
60855: LD_VAR 0 8
60859: NOT
60860: OR
60861: IFFALSE 60865
// exit ;
60863: GO 61260
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60865: LD_ADDR_VAR 0 6
60869: PUSH
60870: LD_VAR 0 7
60874: PPUSH
60875: LD_INT 0
60877: PPUSH
60878: LD_INT 4
60880: PPUSH
60881: CALL_OW 272
60885: PUSH
60886: LD_VAR 0 8
60890: PPUSH
60891: LD_INT 0
60893: PPUSH
60894: LD_INT 4
60896: PPUSH
60897: CALL_OW 273
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_VAR 0 7
60910: PPUSH
60911: LD_INT 1
60913: PPUSH
60914: LD_INT 4
60916: PPUSH
60917: CALL_OW 272
60921: PUSH
60922: LD_VAR 0 8
60926: PPUSH
60927: LD_INT 1
60929: PPUSH
60930: LD_INT 4
60932: PPUSH
60933: CALL_OW 273
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_VAR 0 7
60946: PPUSH
60947: LD_INT 2
60949: PPUSH
60950: LD_INT 4
60952: PPUSH
60953: CALL_OW 272
60957: PUSH
60958: LD_VAR 0 8
60962: PPUSH
60963: LD_INT 2
60965: PPUSH
60966: LD_INT 4
60968: PPUSH
60969: CALL_OW 273
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_VAR 0 7
60982: PPUSH
60983: LD_INT 3
60985: PPUSH
60986: LD_INT 4
60988: PPUSH
60989: CALL_OW 272
60993: PUSH
60994: LD_VAR 0 8
60998: PPUSH
60999: LD_INT 3
61001: PPUSH
61002: LD_INT 4
61004: PPUSH
61005: CALL_OW 273
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_VAR 0 7
61018: PPUSH
61019: LD_INT 4
61021: PPUSH
61022: LD_INT 4
61024: PPUSH
61025: CALL_OW 272
61029: PUSH
61030: LD_VAR 0 8
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: LD_INT 4
61040: PPUSH
61041: CALL_OW 273
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_VAR 0 7
61054: PPUSH
61055: LD_INT 5
61057: PPUSH
61058: LD_INT 4
61060: PPUSH
61061: CALL_OW 272
61065: PUSH
61066: LD_VAR 0 8
61070: PPUSH
61071: LD_INT 5
61073: PPUSH
61074: LD_INT 4
61076: PPUSH
61077: CALL_OW 273
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// for i = tmp downto 1 do
61094: LD_ADDR_VAR 0 4
61098: PUSH
61099: DOUBLE
61100: LD_VAR 0 6
61104: INC
61105: ST_TO_ADDR
61106: LD_INT 1
61108: PUSH
61109: FOR_DOWNTO
61110: IFFALSE 61211
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61112: LD_VAR 0 6
61116: PUSH
61117: LD_VAR 0 4
61121: ARRAY
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: PPUSH
61127: LD_VAR 0 6
61131: PUSH
61132: LD_VAR 0 4
61136: ARRAY
61137: PUSH
61138: LD_INT 2
61140: ARRAY
61141: PPUSH
61142: CALL_OW 488
61146: NOT
61147: PUSH
61148: LD_VAR 0 6
61152: PUSH
61153: LD_VAR 0 4
61157: ARRAY
61158: PUSH
61159: LD_INT 1
61161: ARRAY
61162: PPUSH
61163: LD_VAR 0 6
61167: PUSH
61168: LD_VAR 0 4
61172: ARRAY
61173: PUSH
61174: LD_INT 2
61176: ARRAY
61177: PPUSH
61178: CALL_OW 428
61182: PUSH
61183: LD_INT 0
61185: NONEQUAL
61186: OR
61187: IFFALSE 61209
// tmp := Delete ( tmp , i ) ;
61189: LD_ADDR_VAR 0 6
61193: PUSH
61194: LD_VAR 0 6
61198: PPUSH
61199: LD_VAR 0 4
61203: PPUSH
61204: CALL_OW 3
61208: ST_TO_ADDR
61209: GO 61109
61211: POP
61212: POP
// j := GetClosestHex ( unit , tmp ) ;
61213: LD_ADDR_VAR 0 5
61217: PUSH
61218: LD_VAR 0 1
61222: PPUSH
61223: LD_VAR 0 6
61227: PPUSH
61228: CALL 60513 0 2
61232: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61233: LD_VAR 0 1
61237: PPUSH
61238: LD_VAR 0 5
61242: PUSH
61243: LD_INT 1
61245: ARRAY
61246: PPUSH
61247: LD_VAR 0 5
61251: PUSH
61252: LD_INT 2
61254: ARRAY
61255: PPUSH
61256: CALL_OW 111
// end ;
61260: LD_VAR 0 3
61264: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61265: LD_INT 0
61267: PPUSH
61268: PPUSH
61269: PPUSH
// uc_side = 0 ;
61270: LD_ADDR_OWVAR 20
61274: PUSH
61275: LD_INT 0
61277: ST_TO_ADDR
// uc_nation = 0 ;
61278: LD_ADDR_OWVAR 21
61282: PUSH
61283: LD_INT 0
61285: ST_TO_ADDR
// InitHc_All ( ) ;
61286: CALL_OW 584
// InitVc ;
61290: CALL_OW 20
// if mastodonts then
61294: LD_VAR 0 6
61298: IFFALSE 61365
// for i = 1 to mastodonts do
61300: LD_ADDR_VAR 0 11
61304: PUSH
61305: DOUBLE
61306: LD_INT 1
61308: DEC
61309: ST_TO_ADDR
61310: LD_VAR 0 6
61314: PUSH
61315: FOR_TO
61316: IFFALSE 61363
// begin vc_chassis := 31 ;
61318: LD_ADDR_OWVAR 37
61322: PUSH
61323: LD_INT 31
61325: ST_TO_ADDR
// vc_control := control_rider ;
61326: LD_ADDR_OWVAR 38
61330: PUSH
61331: LD_INT 4
61333: ST_TO_ADDR
// animal := CreateVehicle ;
61334: LD_ADDR_VAR 0 12
61338: PUSH
61339: CALL_OW 45
61343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61344: LD_VAR 0 12
61348: PPUSH
61349: LD_VAR 0 8
61353: PPUSH
61354: LD_INT 0
61356: PPUSH
61357: CALL 63553 0 3
// end ;
61361: GO 61315
61363: POP
61364: POP
// if horses then
61365: LD_VAR 0 5
61369: IFFALSE 61436
// for i = 1 to horses do
61371: LD_ADDR_VAR 0 11
61375: PUSH
61376: DOUBLE
61377: LD_INT 1
61379: DEC
61380: ST_TO_ADDR
61381: LD_VAR 0 5
61385: PUSH
61386: FOR_TO
61387: IFFALSE 61434
// begin hc_class := 21 ;
61389: LD_ADDR_OWVAR 28
61393: PUSH
61394: LD_INT 21
61396: ST_TO_ADDR
// hc_gallery :=  ;
61397: LD_ADDR_OWVAR 33
61401: PUSH
61402: LD_STRING 
61404: ST_TO_ADDR
// animal := CreateHuman ;
61405: LD_ADDR_VAR 0 12
61409: PUSH
61410: CALL_OW 44
61414: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61415: LD_VAR 0 12
61419: PPUSH
61420: LD_VAR 0 8
61424: PPUSH
61425: LD_INT 0
61427: PPUSH
61428: CALL 63553 0 3
// end ;
61432: GO 61386
61434: POP
61435: POP
// if birds then
61436: LD_VAR 0 1
61440: IFFALSE 61507
// for i = 1 to birds do
61442: LD_ADDR_VAR 0 11
61446: PUSH
61447: DOUBLE
61448: LD_INT 1
61450: DEC
61451: ST_TO_ADDR
61452: LD_VAR 0 1
61456: PUSH
61457: FOR_TO
61458: IFFALSE 61505
// begin hc_class = 18 ;
61460: LD_ADDR_OWVAR 28
61464: PUSH
61465: LD_INT 18
61467: ST_TO_ADDR
// hc_gallery =  ;
61468: LD_ADDR_OWVAR 33
61472: PUSH
61473: LD_STRING 
61475: ST_TO_ADDR
// animal := CreateHuman ;
61476: LD_ADDR_VAR 0 12
61480: PUSH
61481: CALL_OW 44
61485: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61486: LD_VAR 0 12
61490: PPUSH
61491: LD_VAR 0 8
61495: PPUSH
61496: LD_INT 0
61498: PPUSH
61499: CALL 63553 0 3
// end ;
61503: GO 61457
61505: POP
61506: POP
// if tigers then
61507: LD_VAR 0 2
61511: IFFALSE 61595
// for i = 1 to tigers do
61513: LD_ADDR_VAR 0 11
61517: PUSH
61518: DOUBLE
61519: LD_INT 1
61521: DEC
61522: ST_TO_ADDR
61523: LD_VAR 0 2
61527: PUSH
61528: FOR_TO
61529: IFFALSE 61593
// begin hc_class = class_tiger ;
61531: LD_ADDR_OWVAR 28
61535: PUSH
61536: LD_INT 14
61538: ST_TO_ADDR
// hc_gallery =  ;
61539: LD_ADDR_OWVAR 33
61543: PUSH
61544: LD_STRING 
61546: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61547: LD_ADDR_OWVAR 35
61551: PUSH
61552: LD_INT 7
61554: NEG
61555: PPUSH
61556: LD_INT 7
61558: PPUSH
61559: CALL_OW 12
61563: ST_TO_ADDR
// animal := CreateHuman ;
61564: LD_ADDR_VAR 0 12
61568: PUSH
61569: CALL_OW 44
61573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61574: LD_VAR 0 12
61578: PPUSH
61579: LD_VAR 0 8
61583: PPUSH
61584: LD_INT 0
61586: PPUSH
61587: CALL 63553 0 3
// end ;
61591: GO 61528
61593: POP
61594: POP
// if apemans then
61595: LD_VAR 0 3
61599: IFFALSE 61722
// for i = 1 to apemans do
61601: LD_ADDR_VAR 0 11
61605: PUSH
61606: DOUBLE
61607: LD_INT 1
61609: DEC
61610: ST_TO_ADDR
61611: LD_VAR 0 3
61615: PUSH
61616: FOR_TO
61617: IFFALSE 61720
// begin hc_class = class_apeman ;
61619: LD_ADDR_OWVAR 28
61623: PUSH
61624: LD_INT 12
61626: ST_TO_ADDR
// hc_gallery =  ;
61627: LD_ADDR_OWVAR 33
61631: PUSH
61632: LD_STRING 
61634: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61635: LD_ADDR_OWVAR 35
61639: PUSH
61640: LD_INT 5
61642: NEG
61643: PPUSH
61644: LD_INT 5
61646: PPUSH
61647: CALL_OW 12
61651: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61652: LD_ADDR_OWVAR 31
61656: PUSH
61657: LD_INT 1
61659: PPUSH
61660: LD_INT 3
61662: PPUSH
61663: CALL_OW 12
61667: PUSH
61668: LD_INT 1
61670: PPUSH
61671: LD_INT 3
61673: PPUSH
61674: CALL_OW 12
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: ST_TO_ADDR
// animal := CreateHuman ;
61691: LD_ADDR_VAR 0 12
61695: PUSH
61696: CALL_OW 44
61700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61701: LD_VAR 0 12
61705: PPUSH
61706: LD_VAR 0 8
61710: PPUSH
61711: LD_INT 0
61713: PPUSH
61714: CALL 63553 0 3
// end ;
61718: GO 61616
61720: POP
61721: POP
// if enchidnas then
61722: LD_VAR 0 4
61726: IFFALSE 61793
// for i = 1 to enchidnas do
61728: LD_ADDR_VAR 0 11
61732: PUSH
61733: DOUBLE
61734: LD_INT 1
61736: DEC
61737: ST_TO_ADDR
61738: LD_VAR 0 4
61742: PUSH
61743: FOR_TO
61744: IFFALSE 61791
// begin hc_class = 13 ;
61746: LD_ADDR_OWVAR 28
61750: PUSH
61751: LD_INT 13
61753: ST_TO_ADDR
// hc_gallery =  ;
61754: LD_ADDR_OWVAR 33
61758: PUSH
61759: LD_STRING 
61761: ST_TO_ADDR
// animal := CreateHuman ;
61762: LD_ADDR_VAR 0 12
61766: PUSH
61767: CALL_OW 44
61771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61772: LD_VAR 0 12
61776: PPUSH
61777: LD_VAR 0 8
61781: PPUSH
61782: LD_INT 0
61784: PPUSH
61785: CALL 63553 0 3
// end ;
61789: GO 61743
61791: POP
61792: POP
// if fishes then
61793: LD_VAR 0 7
61797: IFFALSE 61864
// for i = 1 to fishes do
61799: LD_ADDR_VAR 0 11
61803: PUSH
61804: DOUBLE
61805: LD_INT 1
61807: DEC
61808: ST_TO_ADDR
61809: LD_VAR 0 7
61813: PUSH
61814: FOR_TO
61815: IFFALSE 61862
// begin hc_class = 20 ;
61817: LD_ADDR_OWVAR 28
61821: PUSH
61822: LD_INT 20
61824: ST_TO_ADDR
// hc_gallery =  ;
61825: LD_ADDR_OWVAR 33
61829: PUSH
61830: LD_STRING 
61832: ST_TO_ADDR
// animal := CreateHuman ;
61833: LD_ADDR_VAR 0 12
61837: PUSH
61838: CALL_OW 44
61842: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61843: LD_VAR 0 12
61847: PPUSH
61848: LD_VAR 0 9
61852: PPUSH
61853: LD_INT 0
61855: PPUSH
61856: CALL 63553 0 3
// end ;
61860: GO 61814
61862: POP
61863: POP
// end ;
61864: LD_VAR 0 10
61868: RET
// export function WantHeal ( sci , unit ) ; begin
61869: LD_INT 0
61871: PPUSH
// if GetTaskList ( sci ) > 0 then
61872: LD_VAR 0 1
61876: PPUSH
61877: CALL_OW 437
61881: PUSH
61882: LD_INT 0
61884: GREATER
61885: IFFALSE 61955
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61887: LD_VAR 0 1
61891: PPUSH
61892: CALL_OW 437
61896: PUSH
61897: LD_INT 1
61899: ARRAY
61900: PUSH
61901: LD_INT 1
61903: ARRAY
61904: PUSH
61905: LD_STRING l
61907: EQUAL
61908: PUSH
61909: LD_VAR 0 1
61913: PPUSH
61914: CALL_OW 437
61918: PUSH
61919: LD_INT 1
61921: ARRAY
61922: PUSH
61923: LD_INT 4
61925: ARRAY
61926: PUSH
61927: LD_VAR 0 2
61931: EQUAL
61932: AND
61933: IFFALSE 61945
// result := true else
61935: LD_ADDR_VAR 0 3
61939: PUSH
61940: LD_INT 1
61942: ST_TO_ADDR
61943: GO 61953
// result := false ;
61945: LD_ADDR_VAR 0 3
61949: PUSH
61950: LD_INT 0
61952: ST_TO_ADDR
// end else
61953: GO 61963
// result := false ;
61955: LD_ADDR_VAR 0 3
61959: PUSH
61960: LD_INT 0
61962: ST_TO_ADDR
// end ;
61963: LD_VAR 0 3
61967: RET
// export function HealTarget ( sci ) ; begin
61968: LD_INT 0
61970: PPUSH
// if not sci then
61971: LD_VAR 0 1
61975: NOT
61976: IFFALSE 61980
// exit ;
61978: GO 62045
// result := 0 ;
61980: LD_ADDR_VAR 0 2
61984: PUSH
61985: LD_INT 0
61987: ST_TO_ADDR
// if GetTaskList ( sci ) then
61988: LD_VAR 0 1
61992: PPUSH
61993: CALL_OW 437
61997: IFFALSE 62045
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61999: LD_VAR 0 1
62003: PPUSH
62004: CALL_OW 437
62008: PUSH
62009: LD_INT 1
62011: ARRAY
62012: PUSH
62013: LD_INT 1
62015: ARRAY
62016: PUSH
62017: LD_STRING l
62019: EQUAL
62020: IFFALSE 62045
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62022: LD_ADDR_VAR 0 2
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 437
62036: PUSH
62037: LD_INT 1
62039: ARRAY
62040: PUSH
62041: LD_INT 4
62043: ARRAY
62044: ST_TO_ADDR
// end ;
62045: LD_VAR 0 2
62049: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62050: LD_INT 0
62052: PPUSH
62053: PPUSH
62054: PPUSH
62055: PPUSH
// if not base_units then
62056: LD_VAR 0 1
62060: NOT
62061: IFFALSE 62065
// exit ;
62063: GO 62152
// result := false ;
62065: LD_ADDR_VAR 0 2
62069: PUSH
62070: LD_INT 0
62072: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62073: LD_ADDR_VAR 0 5
62077: PUSH
62078: LD_VAR 0 1
62082: PPUSH
62083: LD_INT 21
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PPUSH
62093: CALL_OW 72
62097: ST_TO_ADDR
// if not tmp then
62098: LD_VAR 0 5
62102: NOT
62103: IFFALSE 62107
// exit ;
62105: GO 62152
// for i in tmp do
62107: LD_ADDR_VAR 0 3
62111: PUSH
62112: LD_VAR 0 5
62116: PUSH
62117: FOR_IN
62118: IFFALSE 62150
// begin result := EnemyInRange ( i , 22 ) ;
62120: LD_ADDR_VAR 0 2
62124: PUSH
62125: LD_VAR 0 3
62129: PPUSH
62130: LD_INT 22
62132: PPUSH
62133: CALL 60388 0 2
62137: ST_TO_ADDR
// if result then
62138: LD_VAR 0 2
62142: IFFALSE 62148
// exit ;
62144: POP
62145: POP
62146: GO 62152
// end ;
62148: GO 62117
62150: POP
62151: POP
// end ;
62152: LD_VAR 0 2
62156: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62157: LD_INT 0
62159: PPUSH
62160: PPUSH
// if not units then
62161: LD_VAR 0 1
62165: NOT
62166: IFFALSE 62170
// exit ;
62168: GO 62240
// result := [ ] ;
62170: LD_ADDR_VAR 0 3
62174: PUSH
62175: EMPTY
62176: ST_TO_ADDR
// for i in units do
62177: LD_ADDR_VAR 0 4
62181: PUSH
62182: LD_VAR 0 1
62186: PUSH
62187: FOR_IN
62188: IFFALSE 62238
// if GetTag ( i ) = tag then
62190: LD_VAR 0 4
62194: PPUSH
62195: CALL_OW 110
62199: PUSH
62200: LD_VAR 0 2
62204: EQUAL
62205: IFFALSE 62236
// result := Insert ( result , result + 1 , i ) ;
62207: LD_ADDR_VAR 0 3
62211: PUSH
62212: LD_VAR 0 3
62216: PPUSH
62217: LD_VAR 0 3
62221: PUSH
62222: LD_INT 1
62224: PLUS
62225: PPUSH
62226: LD_VAR 0 4
62230: PPUSH
62231: CALL_OW 2
62235: ST_TO_ADDR
62236: GO 62187
62238: POP
62239: POP
// end ;
62240: LD_VAR 0 3
62244: RET
// export function IsDriver ( un ) ; begin
62245: LD_INT 0
62247: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62248: LD_ADDR_VAR 0 2
62252: PUSH
62253: LD_VAR 0 1
62257: PUSH
62258: LD_INT 55
62260: PUSH
62261: EMPTY
62262: LIST
62263: PPUSH
62264: CALL_OW 69
62268: IN
62269: ST_TO_ADDR
// end ;
62270: LD_VAR 0 2
62274: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62275: LD_INT 0
62277: PPUSH
62278: PPUSH
// list := [ ] ;
62279: LD_ADDR_VAR 0 5
62283: PUSH
62284: EMPTY
62285: ST_TO_ADDR
// case d of 0 :
62286: LD_VAR 0 3
62290: PUSH
62291: LD_INT 0
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62299
62297: GO 62432
62299: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62300: LD_ADDR_VAR 0 5
62304: PUSH
62305: LD_VAR 0 1
62309: PUSH
62310: LD_INT 4
62312: MINUS
62313: PUSH
62314: LD_VAR 0 2
62318: PUSH
62319: LD_INT 4
62321: MINUS
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 1
62335: PUSH
62336: LD_INT 3
62338: MINUS
62339: PUSH
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: PUSH
62353: LD_VAR 0 1
62357: PUSH
62358: LD_INT 4
62360: PLUS
62361: PUSH
62362: LD_VAR 0 2
62366: PUSH
62367: LD_INT 4
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: PUSH
62375: LD_VAR 0 1
62379: PUSH
62380: LD_INT 3
62382: PLUS
62383: PUSH
62384: LD_VAR 0 2
62388: PUSH
62389: LD_INT 3
62391: PLUS
62392: PUSH
62393: LD_INT 5
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: PUSH
62401: LD_VAR 0 1
62405: PUSH
62406: LD_VAR 0 2
62410: PUSH
62411: LD_INT 4
62413: PLUS
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: ST_TO_ADDR
// end ; 1 :
62430: GO 63130
62432: LD_INT 1
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62440
62438: GO 62573
62440: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62441: LD_ADDR_VAR 0 5
62445: PUSH
62446: LD_VAR 0 1
62450: PUSH
62451: LD_VAR 0 2
62455: PUSH
62456: LD_INT 4
62458: MINUS
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 3
62475: MINUS
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_INT 3
62484: MINUS
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: PUSH
62494: LD_VAR 0 1
62498: PUSH
62499: LD_INT 4
62501: MINUS
62502: PUSH
62503: LD_VAR 0 2
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: PUSH
62516: LD_VAR 0 1
62520: PUSH
62521: LD_VAR 0 2
62525: PUSH
62526: LD_INT 3
62528: PLUS
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: PUSH
62538: LD_VAR 0 1
62542: PUSH
62543: LD_INT 4
62545: PLUS
62546: PUSH
62547: LD_VAR 0 2
62551: PUSH
62552: LD_INT 4
62554: PLUS
62555: PUSH
62556: LD_INT 5
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: ST_TO_ADDR
// end ; 2 :
62571: GO 63130
62573: LD_INT 2
62575: DOUBLE
62576: EQUAL
62577: IFTRUE 62581
62579: GO 62710
62581: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62582: LD_ADDR_VAR 0 5
62586: PUSH
62587: LD_VAR 0 1
62591: PUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_INT 3
62599: MINUS
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: PUSH
62609: LD_VAR 0 1
62613: PUSH
62614: LD_INT 4
62616: PLUS
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 4
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: PUSH
62631: LD_VAR 0 1
62635: PUSH
62636: LD_VAR 0 2
62640: PUSH
62641: LD_INT 4
62643: PLUS
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: PUSH
62653: LD_VAR 0 1
62657: PUSH
62658: LD_INT 3
62660: MINUS
62661: PUSH
62662: LD_VAR 0 2
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 1
62679: PUSH
62680: LD_INT 4
62682: MINUS
62683: PUSH
62684: LD_VAR 0 2
62688: PUSH
62689: LD_INT 4
62691: MINUS
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// end ; 3 :
62708: GO 63130
62710: LD_INT 3
62712: DOUBLE
62713: EQUAL
62714: IFTRUE 62718
62716: GO 62851
62718: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62719: LD_ADDR_VAR 0 5
62723: PUSH
62724: LD_VAR 0 1
62728: PUSH
62729: LD_INT 3
62731: PLUS
62732: PUSH
62733: LD_VAR 0 2
62737: PUSH
62738: LD_INT 4
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: PUSH
62746: LD_VAR 0 1
62750: PUSH
62751: LD_INT 4
62753: PLUS
62754: PUSH
62755: LD_VAR 0 2
62759: PUSH
62760: LD_INT 4
62762: PLUS
62763: PUSH
62764: LD_INT 5
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: PUSH
62772: LD_VAR 0 1
62776: PUSH
62777: LD_INT 4
62779: MINUS
62780: PUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: LD_VAR 0 1
62798: PUSH
62799: LD_VAR 0 2
62803: PUSH
62804: LD_INT 4
62806: MINUS
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: PUSH
62816: LD_VAR 0 1
62820: PUSH
62821: LD_INT 3
62823: MINUS
62824: PUSH
62825: LD_VAR 0 2
62829: PUSH
62830: LD_INT 3
62832: MINUS
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// end ; 4 :
62849: GO 63130
62851: LD_INT 4
62853: DOUBLE
62854: EQUAL
62855: IFTRUE 62859
62857: GO 62992
62859: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62860: LD_ADDR_VAR 0 5
62864: PUSH
62865: LD_VAR 0 1
62869: PUSH
62870: LD_VAR 0 2
62874: PUSH
62875: LD_INT 4
62877: PLUS
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: LIST
62886: PUSH
62887: LD_VAR 0 1
62891: PUSH
62892: LD_INT 3
62894: PLUS
62895: PUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_INT 3
62903: PLUS
62904: PUSH
62905: LD_INT 5
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: PUSH
62913: LD_VAR 0 1
62917: PUSH
62918: LD_INT 4
62920: PLUS
62921: PUSH
62922: LD_VAR 0 2
62926: PUSH
62927: LD_INT 4
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: LD_VAR 0 2
62944: PUSH
62945: LD_INT 3
62947: MINUS
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: PUSH
62957: LD_VAR 0 1
62961: PUSH
62962: LD_INT 4
62964: MINUS
62965: PUSH
62966: LD_VAR 0 2
62970: PUSH
62971: LD_INT 4
62973: MINUS
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: ST_TO_ADDR
// end ; 5 :
62990: GO 63130
62992: LD_INT 5
62994: DOUBLE
62995: EQUAL
62996: IFTRUE 63000
62998: GO 63129
63000: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63001: LD_ADDR_VAR 0 5
63005: PUSH
63006: LD_VAR 0 1
63010: PUSH
63011: LD_INT 4
63013: MINUS
63014: PUSH
63015: LD_VAR 0 2
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: LIST
63027: PUSH
63028: LD_VAR 0 1
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: LD_INT 4
63040: MINUS
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 1
63054: PUSH
63055: LD_INT 4
63057: PLUS
63058: PUSH
63059: LD_VAR 0 2
63063: PUSH
63064: LD_INT 4
63066: PLUS
63067: PUSH
63068: LD_INT 5
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: PUSH
63076: LD_VAR 0 1
63080: PUSH
63081: LD_INT 3
63083: PLUS
63084: PUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_INT 4
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: PUSH
63098: LD_VAR 0 1
63102: PUSH
63103: LD_VAR 0 2
63107: PUSH
63108: LD_INT 3
63110: PLUS
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: ST_TO_ADDR
// end ; end ;
63127: GO 63130
63129: POP
// result := list ;
63130: LD_ADDR_VAR 0 4
63134: PUSH
63135: LD_VAR 0 5
63139: ST_TO_ADDR
// end ;
63140: LD_VAR 0 4
63144: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63145: LD_INT 0
63147: PPUSH
63148: PPUSH
63149: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63150: LD_VAR 0 1
63154: NOT
63155: PUSH
63156: LD_VAR 0 2
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: LD_INT 4
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: IN
63179: NOT
63180: OR
63181: IFFALSE 63185
// exit ;
63183: GO 63277
// tmp := [ ] ;
63185: LD_ADDR_VAR 0 5
63189: PUSH
63190: EMPTY
63191: ST_TO_ADDR
// for i in units do
63192: LD_ADDR_VAR 0 4
63196: PUSH
63197: LD_VAR 0 1
63201: PUSH
63202: FOR_IN
63203: IFFALSE 63246
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63205: LD_ADDR_VAR 0 5
63209: PUSH
63210: LD_VAR 0 5
63214: PPUSH
63215: LD_VAR 0 5
63219: PUSH
63220: LD_INT 1
63222: PLUS
63223: PPUSH
63224: LD_VAR 0 4
63228: PPUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: CALL_OW 259
63238: PPUSH
63239: CALL_OW 2
63243: ST_TO_ADDR
63244: GO 63202
63246: POP
63247: POP
// if not tmp then
63248: LD_VAR 0 5
63252: NOT
63253: IFFALSE 63257
// exit ;
63255: GO 63277
// result := SortListByListDesc ( units , tmp ) ;
63257: LD_ADDR_VAR 0 3
63261: PUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: LD_VAR 0 5
63271: PPUSH
63272: CALL_OW 77
63276: ST_TO_ADDR
// end ;
63277: LD_VAR 0 3
63281: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63282: LD_INT 0
63284: PPUSH
63285: PPUSH
63286: PPUSH
// result := false ;
63287: LD_ADDR_VAR 0 3
63291: PUSH
63292: LD_INT 0
63294: ST_TO_ADDR
// x := GetX ( building ) ;
63295: LD_ADDR_VAR 0 4
63299: PUSH
63300: LD_VAR 0 2
63304: PPUSH
63305: CALL_OW 250
63309: ST_TO_ADDR
// y := GetY ( building ) ;
63310: LD_ADDR_VAR 0 5
63314: PUSH
63315: LD_VAR 0 2
63319: PPUSH
63320: CALL_OW 251
63324: ST_TO_ADDR
// if not building or not x or not y then
63325: LD_VAR 0 2
63329: NOT
63330: PUSH
63331: LD_VAR 0 4
63335: NOT
63336: OR
63337: PUSH
63338: LD_VAR 0 5
63342: NOT
63343: OR
63344: IFFALSE 63348
// exit ;
63346: GO 63440
// if GetTaskList ( unit ) then
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 437
63357: IFFALSE 63440
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63359: LD_STRING e
63361: PUSH
63362: LD_VAR 0 1
63366: PPUSH
63367: CALL_OW 437
63371: PUSH
63372: LD_INT 1
63374: ARRAY
63375: PUSH
63376: LD_INT 1
63378: ARRAY
63379: EQUAL
63380: PUSH
63381: LD_VAR 0 4
63385: PUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 437
63395: PUSH
63396: LD_INT 1
63398: ARRAY
63399: PUSH
63400: LD_INT 2
63402: ARRAY
63403: EQUAL
63404: AND
63405: PUSH
63406: LD_VAR 0 5
63410: PUSH
63411: LD_VAR 0 1
63415: PPUSH
63416: CALL_OW 437
63420: PUSH
63421: LD_INT 1
63423: ARRAY
63424: PUSH
63425: LD_INT 3
63427: ARRAY
63428: EQUAL
63429: AND
63430: IFFALSE 63440
// result := true end ;
63432: LD_ADDR_VAR 0 3
63436: PUSH
63437: LD_INT 1
63439: ST_TO_ADDR
// end ;
63440: LD_VAR 0 3
63444: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63445: LD_INT 0
63447: PPUSH
// result := false ;
63448: LD_ADDR_VAR 0 4
63452: PUSH
63453: LD_INT 0
63455: ST_TO_ADDR
// if GetTaskList ( unit ) then
63456: LD_VAR 0 1
63460: PPUSH
63461: CALL_OW 437
63465: IFFALSE 63548
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63467: LD_STRING M
63469: PUSH
63470: LD_VAR 0 1
63474: PPUSH
63475: CALL_OW 437
63479: PUSH
63480: LD_INT 1
63482: ARRAY
63483: PUSH
63484: LD_INT 1
63486: ARRAY
63487: EQUAL
63488: PUSH
63489: LD_VAR 0 2
63493: PUSH
63494: LD_VAR 0 1
63498: PPUSH
63499: CALL_OW 437
63503: PUSH
63504: LD_INT 1
63506: ARRAY
63507: PUSH
63508: LD_INT 2
63510: ARRAY
63511: EQUAL
63512: AND
63513: PUSH
63514: LD_VAR 0 3
63518: PUSH
63519: LD_VAR 0 1
63523: PPUSH
63524: CALL_OW 437
63528: PUSH
63529: LD_INT 1
63531: ARRAY
63532: PUSH
63533: LD_INT 3
63535: ARRAY
63536: EQUAL
63537: AND
63538: IFFALSE 63548
// result := true ;
63540: LD_ADDR_VAR 0 4
63544: PUSH
63545: LD_INT 1
63547: ST_TO_ADDR
// end ; end ;
63548: LD_VAR 0 4
63552: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63553: LD_INT 0
63555: PPUSH
63556: PPUSH
63557: PPUSH
63558: PPUSH
// if not unit or not area then
63559: LD_VAR 0 1
63563: NOT
63564: PUSH
63565: LD_VAR 0 2
63569: NOT
63570: OR
63571: IFFALSE 63575
// exit ;
63573: GO 63739
// tmp := AreaToList ( area , i ) ;
63575: LD_ADDR_VAR 0 6
63579: PUSH
63580: LD_VAR 0 2
63584: PPUSH
63585: LD_VAR 0 5
63589: PPUSH
63590: CALL_OW 517
63594: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63595: LD_ADDR_VAR 0 5
63599: PUSH
63600: DOUBLE
63601: LD_INT 1
63603: DEC
63604: ST_TO_ADDR
63605: LD_VAR 0 6
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: PUSH
63614: FOR_TO
63615: IFFALSE 63737
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63617: LD_ADDR_VAR 0 7
63621: PUSH
63622: LD_VAR 0 6
63626: PUSH
63627: LD_INT 1
63629: ARRAY
63630: PUSH
63631: LD_VAR 0 5
63635: ARRAY
63636: PUSH
63637: LD_VAR 0 6
63641: PUSH
63642: LD_INT 2
63644: ARRAY
63645: PUSH
63646: LD_VAR 0 5
63650: ARRAY
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 1
63663: ARRAY
63664: PPUSH
63665: LD_VAR 0 7
63669: PUSH
63670: LD_INT 2
63672: ARRAY
63673: PPUSH
63674: CALL_OW 428
63678: PUSH
63679: LD_INT 0
63681: EQUAL
63682: IFFALSE 63735
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63684: LD_VAR 0 1
63688: PPUSH
63689: LD_VAR 0 7
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PPUSH
63698: LD_VAR 0 7
63702: PUSH
63703: LD_INT 2
63705: ARRAY
63706: PPUSH
63707: LD_VAR 0 3
63711: PPUSH
63712: CALL_OW 48
// result := IsPlaced ( unit ) ;
63716: LD_ADDR_VAR 0 4
63720: PUSH
63721: LD_VAR 0 1
63725: PPUSH
63726: CALL_OW 305
63730: ST_TO_ADDR
// exit ;
63731: POP
63732: POP
63733: GO 63739
// end ; end ;
63735: GO 63614
63737: POP
63738: POP
// end ;
63739: LD_VAR 0 4
63743: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63744: LD_INT 0
63746: PPUSH
63747: PPUSH
63748: PPUSH
// if not side or side > 8 then
63749: LD_VAR 0 1
63753: NOT
63754: PUSH
63755: LD_VAR 0 1
63759: PUSH
63760: LD_INT 8
63762: GREATER
63763: OR
63764: IFFALSE 63768
// exit ;
63766: GO 63955
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63768: LD_ADDR_VAR 0 4
63772: PUSH
63773: LD_INT 22
63775: PUSH
63776: LD_VAR 0 1
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 21
63787: PUSH
63788: LD_INT 3
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PPUSH
63799: CALL_OW 69
63803: ST_TO_ADDR
// if not tmp then
63804: LD_VAR 0 4
63808: NOT
63809: IFFALSE 63813
// exit ;
63811: GO 63955
// enable_addtolog := true ;
63813: LD_ADDR_OWVAR 81
63817: PUSH
63818: LD_INT 1
63820: ST_TO_ADDR
// AddToLog ( [ ) ;
63821: LD_STRING [
63823: PPUSH
63824: CALL_OW 561
// for i in tmp do
63828: LD_ADDR_VAR 0 3
63832: PUSH
63833: LD_VAR 0 4
63837: PUSH
63838: FOR_IN
63839: IFFALSE 63946
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63841: LD_STRING [
63843: PUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 266
63853: STR
63854: PUSH
63855: LD_STRING , 
63857: STR
63858: PUSH
63859: LD_VAR 0 3
63863: PPUSH
63864: CALL_OW 250
63868: STR
63869: PUSH
63870: LD_STRING , 
63872: STR
63873: PUSH
63874: LD_VAR 0 3
63878: PPUSH
63879: CALL_OW 251
63883: STR
63884: PUSH
63885: LD_STRING , 
63887: STR
63888: PUSH
63889: LD_VAR 0 3
63893: PPUSH
63894: CALL_OW 254
63898: STR
63899: PUSH
63900: LD_STRING , 
63902: STR
63903: PUSH
63904: LD_VAR 0 3
63908: PPUSH
63909: LD_INT 1
63911: PPUSH
63912: CALL_OW 268
63916: STR
63917: PUSH
63918: LD_STRING , 
63920: STR
63921: PUSH
63922: LD_VAR 0 3
63926: PPUSH
63927: LD_INT 2
63929: PPUSH
63930: CALL_OW 268
63934: STR
63935: PUSH
63936: LD_STRING ],
63938: STR
63939: PPUSH
63940: CALL_OW 561
// end ;
63944: GO 63838
63946: POP
63947: POP
// AddToLog ( ]; ) ;
63948: LD_STRING ];
63950: PPUSH
63951: CALL_OW 561
// end ;
63955: LD_VAR 0 2
63959: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63960: LD_INT 0
63962: PPUSH
63963: PPUSH
63964: PPUSH
63965: PPUSH
63966: PPUSH
// if not area or not rate or not max then
63967: LD_VAR 0 1
63971: NOT
63972: PUSH
63973: LD_VAR 0 2
63977: NOT
63978: OR
63979: PUSH
63980: LD_VAR 0 4
63984: NOT
63985: OR
63986: IFFALSE 63990
// exit ;
63988: GO 64182
// while 1 do
63990: LD_INT 1
63992: IFFALSE 64182
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63994: LD_ADDR_VAR 0 9
63998: PUSH
63999: LD_VAR 0 1
64003: PPUSH
64004: LD_INT 1
64006: PPUSH
64007: CALL_OW 287
64011: PUSH
64012: LD_INT 10
64014: MUL
64015: ST_TO_ADDR
// r := rate / 10 ;
64016: LD_ADDR_VAR 0 7
64020: PUSH
64021: LD_VAR 0 2
64025: PUSH
64026: LD_INT 10
64028: DIVREAL
64029: ST_TO_ADDR
// time := 1 1$00 ;
64030: LD_ADDR_VAR 0 8
64034: PUSH
64035: LD_INT 2100
64037: ST_TO_ADDR
// if amount < min then
64038: LD_VAR 0 9
64042: PUSH
64043: LD_VAR 0 3
64047: LESS
64048: IFFALSE 64066
// r := r * 2 else
64050: LD_ADDR_VAR 0 7
64054: PUSH
64055: LD_VAR 0 7
64059: PUSH
64060: LD_INT 2
64062: MUL
64063: ST_TO_ADDR
64064: GO 64092
// if amount > max then
64066: LD_VAR 0 9
64070: PUSH
64071: LD_VAR 0 4
64075: GREATER
64076: IFFALSE 64092
// r := r / 2 ;
64078: LD_ADDR_VAR 0 7
64082: PUSH
64083: LD_VAR 0 7
64087: PUSH
64088: LD_INT 2
64090: DIVREAL
64091: ST_TO_ADDR
// time := time / r ;
64092: LD_ADDR_VAR 0 8
64096: PUSH
64097: LD_VAR 0 8
64101: PUSH
64102: LD_VAR 0 7
64106: DIVREAL
64107: ST_TO_ADDR
// if time < 0 then
64108: LD_VAR 0 8
64112: PUSH
64113: LD_INT 0
64115: LESS
64116: IFFALSE 64133
// time := time * - 1 ;
64118: LD_ADDR_VAR 0 8
64122: PUSH
64123: LD_VAR 0 8
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: MUL
64132: ST_TO_ADDR
// wait ( time ) ;
64133: LD_VAR 0 8
64137: PPUSH
64138: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64142: LD_INT 35
64144: PPUSH
64145: LD_INT 875
64147: PPUSH
64148: CALL_OW 12
64152: PPUSH
64153: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64157: LD_INT 1
64159: PPUSH
64160: LD_INT 5
64162: PPUSH
64163: CALL_OW 12
64167: PPUSH
64168: LD_VAR 0 1
64172: PPUSH
64173: LD_INT 1
64175: PPUSH
64176: CALL_OW 55
// end ;
64180: GO 63990
// end ;
64182: LD_VAR 0 5
64186: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64187: LD_INT 0
64189: PPUSH
64190: PPUSH
64191: PPUSH
64192: PPUSH
64193: PPUSH
64194: PPUSH
64195: PPUSH
64196: PPUSH
// if not turrets or not factories then
64197: LD_VAR 0 1
64201: NOT
64202: PUSH
64203: LD_VAR 0 2
64207: NOT
64208: OR
64209: IFFALSE 64213
// exit ;
64211: GO 64520
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64213: LD_ADDR_VAR 0 10
64217: PUSH
64218: LD_INT 5
64220: PUSH
64221: LD_INT 6
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 4
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: LD_INT 5
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 24
64255: PUSH
64256: LD_INT 25
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 23
64265: PUSH
64266: LD_INT 27
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 42
64279: PUSH
64280: LD_INT 43
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 44
64289: PUSH
64290: LD_INT 46
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 45
64299: PUSH
64300: LD_INT 47
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// result := [ ] ;
64317: LD_ADDR_VAR 0 3
64321: PUSH
64322: EMPTY
64323: ST_TO_ADDR
// for i in turrets do
64324: LD_ADDR_VAR 0 4
64328: PUSH
64329: LD_VAR 0 1
64333: PUSH
64334: FOR_IN
64335: IFFALSE 64518
// begin nat := GetNation ( i ) ;
64337: LD_ADDR_VAR 0 7
64341: PUSH
64342: LD_VAR 0 4
64346: PPUSH
64347: CALL_OW 248
64351: ST_TO_ADDR
// weapon := 0 ;
64352: LD_ADDR_VAR 0 8
64356: PUSH
64357: LD_INT 0
64359: ST_TO_ADDR
// if not nat then
64360: LD_VAR 0 7
64364: NOT
64365: IFFALSE 64369
// continue ;
64367: GO 64334
// for j in list [ nat ] do
64369: LD_ADDR_VAR 0 5
64373: PUSH
64374: LD_VAR 0 10
64378: PUSH
64379: LD_VAR 0 7
64383: ARRAY
64384: PUSH
64385: FOR_IN
64386: IFFALSE 64427
// if GetBWeapon ( i ) = j [ 1 ] then
64388: LD_VAR 0 4
64392: PPUSH
64393: CALL_OW 269
64397: PUSH
64398: LD_VAR 0 5
64402: PUSH
64403: LD_INT 1
64405: ARRAY
64406: EQUAL
64407: IFFALSE 64425
// begin weapon := j [ 2 ] ;
64409: LD_ADDR_VAR 0 8
64413: PUSH
64414: LD_VAR 0 5
64418: PUSH
64419: LD_INT 2
64421: ARRAY
64422: ST_TO_ADDR
// break ;
64423: GO 64427
// end ;
64425: GO 64385
64427: POP
64428: POP
// if not weapon then
64429: LD_VAR 0 8
64433: NOT
64434: IFFALSE 64438
// continue ;
64436: GO 64334
// for k in factories do
64438: LD_ADDR_VAR 0 6
64442: PUSH
64443: LD_VAR 0 2
64447: PUSH
64448: FOR_IN
64449: IFFALSE 64514
// begin weapons := AvailableWeaponList ( k ) ;
64451: LD_ADDR_VAR 0 9
64455: PUSH
64456: LD_VAR 0 6
64460: PPUSH
64461: CALL_OW 478
64465: ST_TO_ADDR
// if not weapons then
64466: LD_VAR 0 9
64470: NOT
64471: IFFALSE 64475
// continue ;
64473: GO 64448
// if weapon in weapons then
64475: LD_VAR 0 8
64479: PUSH
64480: LD_VAR 0 9
64484: IN
64485: IFFALSE 64512
// begin result := [ i , weapon ] ;
64487: LD_ADDR_VAR 0 3
64491: PUSH
64492: LD_VAR 0 4
64496: PUSH
64497: LD_VAR 0 8
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// exit ;
64506: POP
64507: POP
64508: POP
64509: POP
64510: GO 64520
// end ; end ;
64512: GO 64448
64514: POP
64515: POP
// end ;
64516: GO 64334
64518: POP
64519: POP
// end ;
64520: LD_VAR 0 3
64524: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64525: LD_INT 0
64527: PPUSH
// if not side or side > 8 then
64528: LD_VAR 0 3
64532: NOT
64533: PUSH
64534: LD_VAR 0 3
64538: PUSH
64539: LD_INT 8
64541: GREATER
64542: OR
64543: IFFALSE 64547
// exit ;
64545: GO 64606
// if not range then
64547: LD_VAR 0 4
64551: NOT
64552: IFFALSE 64563
// range := - 12 ;
64554: LD_ADDR_VAR 0 4
64558: PUSH
64559: LD_INT 12
64561: NEG
64562: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64563: LD_VAR 0 1
64567: PPUSH
64568: LD_VAR 0 2
64572: PPUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: LD_VAR 0 4
64582: PPUSH
64583: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64587: LD_VAR 0 1
64591: PPUSH
64592: LD_VAR 0 2
64596: PPUSH
64597: LD_VAR 0 3
64601: PPUSH
64602: CALL_OW 331
// end ;
64606: LD_VAR 0 5
64610: RET
// export function Video ( mode ) ; begin
64611: LD_INT 0
64613: PPUSH
// ingame_video = mode ;
64614: LD_ADDR_OWVAR 52
64618: PUSH
64619: LD_VAR 0 1
64623: ST_TO_ADDR
// interface_hidden = mode ;
64624: LD_ADDR_OWVAR 54
64628: PUSH
64629: LD_VAR 0 1
64633: ST_TO_ADDR
// end ;
64634: LD_VAR 0 2
64638: RET
// export function Join ( array , element ) ; begin
64639: LD_INT 0
64641: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64642: LD_ADDR_VAR 0 3
64646: PUSH
64647: LD_VAR 0 1
64651: PPUSH
64652: LD_VAR 0 1
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: PPUSH
64661: LD_VAR 0 2
64665: PPUSH
64666: CALL_OW 1
64670: ST_TO_ADDR
// end ;
64671: LD_VAR 0 3
64675: RET
// export function JoinUnion ( array , element ) ; begin
64676: LD_INT 0
64678: PPUSH
// result := array union element ;
64679: LD_ADDR_VAR 0 3
64683: PUSH
64684: LD_VAR 0 1
64688: PUSH
64689: LD_VAR 0 2
64693: UNION
64694: ST_TO_ADDR
// end ;
64695: LD_VAR 0 3
64699: RET
// export function GetBehemoths ( side ) ; begin
64700: LD_INT 0
64702: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64703: LD_ADDR_VAR 0 2
64707: PUSH
64708: LD_INT 22
64710: PUSH
64711: LD_VAR 0 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 31
64722: PUSH
64723: LD_INT 25
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PPUSH
64734: CALL_OW 69
64738: ST_TO_ADDR
// end ;
64739: LD_VAR 0 2
64743: RET
// export function Shuffle ( array ) ; var i , index ; begin
64744: LD_INT 0
64746: PPUSH
64747: PPUSH
64748: PPUSH
// result := [ ] ;
64749: LD_ADDR_VAR 0 2
64753: PUSH
64754: EMPTY
64755: ST_TO_ADDR
// if not array then
64756: LD_VAR 0 1
64760: NOT
64761: IFFALSE 64765
// exit ;
64763: GO 64864
// Randomize ;
64765: CALL_OW 10
// for i = array downto 1 do
64769: LD_ADDR_VAR 0 3
64773: PUSH
64774: DOUBLE
64775: LD_VAR 0 1
64779: INC
64780: ST_TO_ADDR
64781: LD_INT 1
64783: PUSH
64784: FOR_DOWNTO
64785: IFFALSE 64862
// begin index := rand ( 1 , array ) ;
64787: LD_ADDR_VAR 0 4
64791: PUSH
64792: LD_INT 1
64794: PPUSH
64795: LD_VAR 0 1
64799: PPUSH
64800: CALL_OW 12
64804: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64805: LD_ADDR_VAR 0 2
64809: PUSH
64810: LD_VAR 0 2
64814: PPUSH
64815: LD_VAR 0 2
64819: PUSH
64820: LD_INT 1
64822: PLUS
64823: PPUSH
64824: LD_VAR 0 1
64828: PUSH
64829: LD_VAR 0 4
64833: ARRAY
64834: PPUSH
64835: CALL_OW 2
64839: ST_TO_ADDR
// array := Delete ( array , index ) ;
64840: LD_ADDR_VAR 0 1
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: LD_VAR 0 4
64854: PPUSH
64855: CALL_OW 3
64859: ST_TO_ADDR
// end ;
64860: GO 64784
64862: POP
64863: POP
// end ;
64864: LD_VAR 0 2
64868: RET
// export function GetBaseMaterials ( base ) ; begin
64869: LD_INT 0
64871: PPUSH
// result := [ 0 , 0 , 0 ] ;
64872: LD_ADDR_VAR 0 2
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// if not base then
64891: LD_VAR 0 1
64895: NOT
64896: IFFALSE 64900
// exit ;
64898: GO 64949
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64900: LD_ADDR_VAR 0 2
64904: PUSH
64905: LD_VAR 0 1
64909: PPUSH
64910: LD_INT 1
64912: PPUSH
64913: CALL_OW 275
64917: PUSH
64918: LD_VAR 0 1
64922: PPUSH
64923: LD_INT 2
64925: PPUSH
64926: CALL_OW 275
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: LD_INT 3
64938: PPUSH
64939: CALL_OW 275
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: ST_TO_ADDR
// end ;
64949: LD_VAR 0 2
64953: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64954: LD_INT 0
64956: PPUSH
64957: PPUSH
// result := array ;
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_VAR 0 1
64967: ST_TO_ADDR
// if size > 0 then
64968: LD_VAR 0 2
64972: PUSH
64973: LD_INT 0
64975: GREATER
64976: IFFALSE 65022
// for i := array downto size do
64978: LD_ADDR_VAR 0 4
64982: PUSH
64983: DOUBLE
64984: LD_VAR 0 1
64988: INC
64989: ST_TO_ADDR
64990: LD_VAR 0 2
64994: PUSH
64995: FOR_DOWNTO
64996: IFFALSE 65020
// result := Delete ( result , result ) ;
64998: LD_ADDR_VAR 0 3
65002: PUSH
65003: LD_VAR 0 3
65007: PPUSH
65008: LD_VAR 0 3
65012: PPUSH
65013: CALL_OW 3
65017: ST_TO_ADDR
65018: GO 64995
65020: POP
65021: POP
// end ;
65022: LD_VAR 0 3
65026: RET
// export function ComExit ( unit ) ; var tmp ; begin
65027: LD_INT 0
65029: PPUSH
65030: PPUSH
// if not IsInUnit ( unit ) then
65031: LD_VAR 0 1
65035: PPUSH
65036: CALL_OW 310
65040: NOT
65041: IFFALSE 65045
// exit ;
65043: GO 65105
// tmp := IsInUnit ( unit ) ;
65045: LD_ADDR_VAR 0 3
65049: PUSH
65050: LD_VAR 0 1
65054: PPUSH
65055: CALL_OW 310
65059: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65060: LD_VAR 0 3
65064: PPUSH
65065: CALL_OW 247
65069: PUSH
65070: LD_INT 2
65072: EQUAL
65073: IFFALSE 65086
// ComExitVehicle ( unit ) else
65075: LD_VAR 0 1
65079: PPUSH
65080: CALL_OW 121
65084: GO 65095
// ComExitBuilding ( unit ) ;
65086: LD_VAR 0 1
65090: PPUSH
65091: CALL_OW 122
// result := tmp ;
65095: LD_ADDR_VAR 0 2
65099: PUSH
65100: LD_VAR 0 3
65104: ST_TO_ADDR
// end ;
65105: LD_VAR 0 2
65109: RET
// export function ComExitAll ( units ) ; var i ; begin
65110: LD_INT 0
65112: PPUSH
65113: PPUSH
// if not units then
65114: LD_VAR 0 1
65118: NOT
65119: IFFALSE 65123
// exit ;
65121: GO 65149
// for i in units do
65123: LD_ADDR_VAR 0 3
65127: PUSH
65128: LD_VAR 0 1
65132: PUSH
65133: FOR_IN
65134: IFFALSE 65147
// ComExit ( i ) ;
65136: LD_VAR 0 3
65140: PPUSH
65141: CALL 65027 0 1
65145: GO 65133
65147: POP
65148: POP
// end ;
65149: LD_VAR 0 2
65153: RET
// export function ResetHc ; begin
65154: LD_INT 0
65156: PPUSH
// InitHc ;
65157: CALL_OW 19
// hc_importance := 0 ;
65161: LD_ADDR_OWVAR 32
65165: PUSH
65166: LD_INT 0
65168: ST_TO_ADDR
// end ;
65169: LD_VAR 0 1
65173: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65174: LD_INT 0
65176: PPUSH
65177: PPUSH
65178: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65179: LD_ADDR_VAR 0 6
65183: PUSH
65184: LD_VAR 0 1
65188: PUSH
65189: LD_VAR 0 3
65193: PLUS
65194: PUSH
65195: LD_INT 2
65197: DIV
65198: ST_TO_ADDR
// if _x < 0 then
65199: LD_VAR 0 6
65203: PUSH
65204: LD_INT 0
65206: LESS
65207: IFFALSE 65224
// _x := _x * - 1 ;
65209: LD_ADDR_VAR 0 6
65213: PUSH
65214: LD_VAR 0 6
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: MUL
65223: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65224: LD_ADDR_VAR 0 7
65228: PUSH
65229: LD_VAR 0 2
65233: PUSH
65234: LD_VAR 0 4
65238: PLUS
65239: PUSH
65240: LD_INT 2
65242: DIV
65243: ST_TO_ADDR
// if _y < 0 then
65244: LD_VAR 0 7
65248: PUSH
65249: LD_INT 0
65251: LESS
65252: IFFALSE 65269
// _y := _y * - 1 ;
65254: LD_ADDR_VAR 0 7
65258: PUSH
65259: LD_VAR 0 7
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: MUL
65268: ST_TO_ADDR
// result := [ _x , _y ] ;
65269: LD_ADDR_VAR 0 5
65273: PUSH
65274: LD_VAR 0 6
65278: PUSH
65279: LD_VAR 0 7
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: ST_TO_ADDR
// end ;
65288: LD_VAR 0 5
65292: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65293: LD_INT 0
65295: PPUSH
65296: PPUSH
65297: PPUSH
65298: PPUSH
// task := GetTaskList ( unit ) ;
65299: LD_ADDR_VAR 0 7
65303: PUSH
65304: LD_VAR 0 1
65308: PPUSH
65309: CALL_OW 437
65313: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65314: LD_VAR 0 7
65318: NOT
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: LD_VAR 0 2
65329: PPUSH
65330: CALL_OW 308
65334: NOT
65335: AND
65336: IFFALSE 65340
// exit ;
65338: GO 65458
// if IsInArea ( unit , area ) then
65340: LD_VAR 0 1
65344: PPUSH
65345: LD_VAR 0 2
65349: PPUSH
65350: CALL_OW 308
65354: IFFALSE 65372
// begin ComMoveToArea ( unit , goAway ) ;
65356: LD_VAR 0 1
65360: PPUSH
65361: LD_VAR 0 3
65365: PPUSH
65366: CALL_OW 113
// exit ;
65370: GO 65458
// end ; if task [ 1 ] [ 1 ] <> M then
65372: LD_VAR 0 7
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: PUSH
65385: LD_STRING M
65387: NONEQUAL
65388: IFFALSE 65392
// exit ;
65390: GO 65458
// x := task [ 1 ] [ 2 ] ;
65392: LD_ADDR_VAR 0 5
65396: PUSH
65397: LD_VAR 0 7
65401: PUSH
65402: LD_INT 1
65404: ARRAY
65405: PUSH
65406: LD_INT 2
65408: ARRAY
65409: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65410: LD_ADDR_VAR 0 6
65414: PUSH
65415: LD_VAR 0 7
65419: PUSH
65420: LD_INT 1
65422: ARRAY
65423: PUSH
65424: LD_INT 3
65426: ARRAY
65427: ST_TO_ADDR
// if InArea ( x , y , area ) then
65428: LD_VAR 0 5
65432: PPUSH
65433: LD_VAR 0 6
65437: PPUSH
65438: LD_VAR 0 2
65442: PPUSH
65443: CALL_OW 309
65447: IFFALSE 65458
// ComStop ( unit ) ;
65449: LD_VAR 0 1
65453: PPUSH
65454: CALL_OW 141
// end ;
65458: LD_VAR 0 4
65462: RET
// export function Abs ( value ) ; begin
65463: LD_INT 0
65465: PPUSH
// result := value ;
65466: LD_ADDR_VAR 0 2
65470: PUSH
65471: LD_VAR 0 1
65475: ST_TO_ADDR
// if value < 0 then
65476: LD_VAR 0 1
65480: PUSH
65481: LD_INT 0
65483: LESS
65484: IFFALSE 65501
// result := value * - 1 ;
65486: LD_ADDR_VAR 0 2
65490: PUSH
65491: LD_VAR 0 1
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: MUL
65500: ST_TO_ADDR
// end ;
65501: LD_VAR 0 2
65505: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65506: LD_INT 0
65508: PPUSH
65509: PPUSH
65510: PPUSH
65511: PPUSH
65512: PPUSH
65513: PPUSH
65514: PPUSH
65515: PPUSH
// if not unit or not building then
65516: LD_VAR 0 1
65520: NOT
65521: PUSH
65522: LD_VAR 0 2
65526: NOT
65527: OR
65528: IFFALSE 65532
// exit ;
65530: GO 65758
// x := GetX ( building ) ;
65532: LD_ADDR_VAR 0 4
65536: PUSH
65537: LD_VAR 0 2
65541: PPUSH
65542: CALL_OW 250
65546: ST_TO_ADDR
// y := GetY ( building ) ;
65547: LD_ADDR_VAR 0 6
65551: PUSH
65552: LD_VAR 0 2
65556: PPUSH
65557: CALL_OW 251
65561: ST_TO_ADDR
// d := GetDir ( building ) ;
65562: LD_ADDR_VAR 0 8
65566: PUSH
65567: LD_VAR 0 2
65571: PPUSH
65572: CALL_OW 254
65576: ST_TO_ADDR
// r := 4 ;
65577: LD_ADDR_VAR 0 9
65581: PUSH
65582: LD_INT 4
65584: ST_TO_ADDR
// for i := 1 to 5 do
65585: LD_ADDR_VAR 0 10
65589: PUSH
65590: DOUBLE
65591: LD_INT 1
65593: DEC
65594: ST_TO_ADDR
65595: LD_INT 5
65597: PUSH
65598: FOR_TO
65599: IFFALSE 65756
// begin _x := ShiftX ( x , d , r + i ) ;
65601: LD_ADDR_VAR 0 5
65605: PUSH
65606: LD_VAR 0 4
65610: PPUSH
65611: LD_VAR 0 8
65615: PPUSH
65616: LD_VAR 0 9
65620: PUSH
65621: LD_VAR 0 10
65625: PLUS
65626: PPUSH
65627: CALL_OW 272
65631: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65632: LD_ADDR_VAR 0 7
65636: PUSH
65637: LD_VAR 0 6
65641: PPUSH
65642: LD_VAR 0 8
65646: PPUSH
65647: LD_VAR 0 9
65651: PUSH
65652: LD_VAR 0 10
65656: PLUS
65657: PPUSH
65658: CALL_OW 273
65662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65663: LD_VAR 0 5
65667: PPUSH
65668: LD_VAR 0 7
65672: PPUSH
65673: CALL_OW 488
65677: PUSH
65678: LD_VAR 0 5
65682: PPUSH
65683: LD_VAR 0 7
65687: PPUSH
65688: CALL_OW 428
65692: PPUSH
65693: CALL_OW 247
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: IN
65708: NOT
65709: AND
65710: IFFALSE 65754
// begin ComMoveXY ( unit , _x , _y ) ;
65712: LD_VAR 0 1
65716: PPUSH
65717: LD_VAR 0 5
65721: PPUSH
65722: LD_VAR 0 7
65726: PPUSH
65727: CALL_OW 111
// result := [ _x , _y ] ;
65731: LD_ADDR_VAR 0 3
65735: PUSH
65736: LD_VAR 0 5
65740: PUSH
65741: LD_VAR 0 7
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: ST_TO_ADDR
// exit ;
65750: POP
65751: POP
65752: GO 65758
// end ; end ;
65754: GO 65598
65756: POP
65757: POP
// end ;
65758: LD_VAR 0 3
65762: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65763: LD_INT 0
65765: PPUSH
65766: PPUSH
65767: PPUSH
// result := 0 ;
65768: LD_ADDR_VAR 0 3
65772: PUSH
65773: LD_INT 0
65775: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65776: LD_VAR 0 1
65780: PUSH
65781: LD_INT 0
65783: LESS
65784: PUSH
65785: LD_VAR 0 1
65789: PUSH
65790: LD_INT 8
65792: GREATER
65793: OR
65794: PUSH
65795: LD_VAR 0 2
65799: PUSH
65800: LD_INT 0
65802: LESS
65803: OR
65804: PUSH
65805: LD_VAR 0 2
65809: PUSH
65810: LD_INT 8
65812: GREATER
65813: OR
65814: IFFALSE 65818
// exit ;
65816: GO 65893
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65818: LD_ADDR_VAR 0 4
65822: PUSH
65823: LD_INT 22
65825: PUSH
65826: LD_VAR 0 2
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PPUSH
65835: CALL_OW 69
65839: PUSH
65840: FOR_IN
65841: IFFALSE 65891
// begin un := UnitShoot ( i ) ;
65843: LD_ADDR_VAR 0 5
65847: PUSH
65848: LD_VAR 0 4
65852: PPUSH
65853: CALL_OW 504
65857: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65858: LD_VAR 0 5
65862: PPUSH
65863: CALL_OW 255
65867: PUSH
65868: LD_VAR 0 1
65872: EQUAL
65873: IFFALSE 65889
// begin result := un ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_VAR 0 5
65884: ST_TO_ADDR
// exit ;
65885: POP
65886: POP
65887: GO 65893
// end ; end ;
65889: GO 65840
65891: POP
65892: POP
// end ;
65893: LD_VAR 0 3
65897: RET
// export function GetCargoBay ( units ) ; begin
65898: LD_INT 0
65900: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65901: LD_ADDR_VAR 0 2
65905: PUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: LD_INT 2
65913: PUSH
65914: LD_INT 34
65916: PUSH
65917: LD_INT 12
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 34
65926: PUSH
65927: LD_INT 51
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 34
65936: PUSH
65937: LD_INT 32
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 34
65946: PUSH
65947: LD_EXP 15
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: PPUSH
65963: CALL_OW 72
65967: ST_TO_ADDR
// end ; end_of_file
65968: LD_VAR 0 2
65972: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65973: LD_VAR 0 1
65977: PUSH
65978: LD_INT 200
65980: DOUBLE
65981: GREATEREQUAL
65982: IFFALSE 65990
65984: LD_INT 299
65986: DOUBLE
65987: LESSEQUAL
65988: IFTRUE 65992
65990: GO 66024
65992: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65993: LD_VAR 0 1
65997: PPUSH
65998: LD_VAR 0 2
66002: PPUSH
66003: LD_VAR 0 3
66007: PPUSH
66008: LD_VAR 0 4
66012: PPUSH
66013: LD_VAR 0 5
66017: PPUSH
66018: CALL 24434 0 5
66022: GO 66101
66024: LD_INT 300
66026: DOUBLE
66027: GREATEREQUAL
66028: IFFALSE 66036
66030: LD_INT 399
66032: DOUBLE
66033: LESSEQUAL
66034: IFTRUE 66038
66036: GO 66100
66038: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66039: LD_VAR 0 1
66043: PPUSH
66044: LD_VAR 0 2
66048: PPUSH
66049: LD_VAR 0 3
66053: PPUSH
66054: LD_VAR 0 4
66058: PPUSH
66059: LD_VAR 0 5
66063: PPUSH
66064: LD_VAR 0 6
66068: PPUSH
66069: LD_VAR 0 7
66073: PPUSH
66074: LD_VAR 0 8
66078: PPUSH
66079: LD_VAR 0 9
66083: PPUSH
66084: LD_VAR 0 10
66088: PPUSH
66089: LD_VAR 0 11
66093: PPUSH
66094: CALL 22322 0 11
66098: GO 66101
66100: POP
// end ;
66101: PPOPN 11
66103: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66104: LD_VAR 0 1
66108: PPUSH
66109: LD_VAR 0 2
66113: PPUSH
66114: LD_VAR 0 3
66118: PPUSH
66119: LD_VAR 0 4
66123: PPUSH
66124: LD_VAR 0 5
66128: PPUSH
66129: CALL 24416 0 5
// end ; end_of_file
66133: PPOPN 5
66135: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66136: LD_VAR 0 1
66140: PPUSH
66141: LD_VAR 0 2
66145: PPUSH
66146: LD_VAR 0 3
66150: PPUSH
66151: LD_VAR 0 4
66155: PPUSH
66156: LD_VAR 0 5
66160: PPUSH
66161: LD_VAR 0 6
66165: PPUSH
66166: CALL 11130 0 6
// end ;
66170: PPOPN 6
66172: END
