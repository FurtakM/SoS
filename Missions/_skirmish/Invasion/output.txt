// starting begin InitSettings ;
   0: CALL 2606 0 0
// InitGame ;
   4: CALL 2644 0 0
// InitDisplay ;
   8: CALL 9192 0 0
// end ; end_of_file
  12: END
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// team := [ ] ;
  19: LD_ADDR_VAR 0 8
  23: PUSH
  24: EMPTY
  25: ST_TO_ADDR
// playerSquad := [ ] ;
  26: LD_ADDR_EXP 12
  30: PUSH
  31: EMPTY
  32: ST_TO_ADDR
// uc_side := nation ;
  33: LD_ADDR_OWVAR 20
  37: PUSH
  38: LD_VAR 0 1
  42: ST_TO_ADDR
// uc_nation := nation ;
  43: LD_ADDR_OWVAR 21
  47: PUSH
  48: LD_VAR 0 1
  52: ST_TO_ADDR
// hc_importance := 100 ;
  53: LD_ADDR_OWVAR 32
  57: PUSH
  58: LD_INT 100
  60: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 1
  66: PPUSH
  67: LD_VAR 0 2
  71: PPUSH
  72: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
  76: LD_ADDR_VAR 0 8
  80: PUSH
  81: LD_VAR 0 8
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 44
  93: PPUSH
  94: CALL_OW 2
  98: ST_TO_ADDR
// hc_importance := 0 ;
  99: LD_ADDR_OWVAR 32
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// for i = 1 to num - 1 do
 107: LD_ADDR_VAR 0 7
 111: PUSH
 112: DOUBLE
 113: LD_INT 1
 115: DEC
 116: ST_TO_ADDR
 117: LD_VAR 0 3
 121: PUSH
 122: LD_INT 1
 124: MINUS
 125: PUSH
 126: FOR_TO
 127: IFFALSE 185
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 129: LD_INT 0
 131: PPUSH
 132: LD_VAR 0 7
 136: PUSH
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 4
 144: DIVREAL
 145: DIV
 146: PUSH
 147: LD_INT 1
 149: PLUS
 150: PPUSH
 151: LD_VAR 0 2
 155: PPUSH
 156: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 160: LD_ADDR_VAR 0 8
 164: PUSH
 165: LD_VAR 0 8
 169: PPUSH
 170: LD_INT 2
 172: PPUSH
 173: CALL_OW 44
 177: PPUSH
 178: CALL_OW 2
 182: ST_TO_ADDR
// end ;
 183: GO 126
 185: POP
 186: POP
// for i in team do
 187: LD_ADDR_VAR 0 7
 191: PUSH
 192: LD_VAR 0 8
 196: PUSH
 197: FOR_IN
 198: IFFALSE 297
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 200: LD_VAR 0 7
 204: PPUSH
 205: LD_VAR 0 4
 209: PPUSH
 210: LD_VAR 0 5
 214: PPUSH
 215: LD_INT 8
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 50
// c := c + 1 ;
 225: LD_ADDR_VAR 0 9
 229: PUSH
 230: LD_VAR 0 9
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 239: LD_VAR 0 7
 243: PPUSH
 244: LD_STRING grave
 246: PUSH
 247: LD_VAR 0 9
 251: STR
 252: PPUSH
 253: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 257: LD_ADDR_EXP 12
 261: PUSH
 262: LD_EXP 12
 266: PPUSH
 267: LD_VAR 0 9
 271: PPUSH
 272: LD_VAR 0 7
 276: PUSH
 277: LD_STRING grave
 279: PUSH
 280: LD_VAR 0 9
 284: STR
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PPUSH
 290: CALL_OW 2
 294: ST_TO_ADDR
// end ;
 295: GO 197
 297: POP
 298: POP
// end ;
 299: LD_VAR 0 6
 303: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 304: LD_INT 0
 306: PPUSH
 307: PPUSH
 308: PPUSH
// for i = 1 to type_allowed do
 309: LD_ADDR_VAR 0 7
 313: PUSH
 314: DOUBLE
 315: LD_INT 1
 317: DEC
 318: ST_TO_ADDR
 319: LD_VAR 0 2
 323: PUSH
 324: FOR_TO
 325: IFFALSE 464
// while ( num [ i ] > 0 ) do
 327: LD_VAR 0 1
 331: PUSH
 332: LD_VAR 0 7
 336: ARRAY
 337: PUSH
 338: LD_INT 0
 340: GREATER
 341: IFFALSE 462
// begin if num [ i ] > 5 then
 343: LD_VAR 0 1
 347: PUSH
 348: LD_VAR 0 7
 352: ARRAY
 353: PUSH
 354: LD_INT 5
 356: GREATER
 357: IFFALSE 369
// n := 5 else
 359: LD_ADDR_VAR 0 8
 363: PUSH
 364: LD_INT 5
 366: ST_TO_ADDR
 367: GO 385
// n := num [ i ] ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: LD_VAR 0 1
 378: PUSH
 379: LD_VAR 0 7
 383: ARRAY
 384: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 385: LD_VAR 0 2
 389: PUSH
 390: LD_VAR 0 7
 394: ARRAY
 395: PPUSH
 396: LD_VAR 0 8
 400: PPUSH
 401: LD_VAR 0 3
 405: PPUSH
 406: LD_VAR 0 4
 410: PPUSH
 411: LD_VAR 0 5
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 423: LD_ADDR_VAR 0 1
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_VAR 0 7
 437: PPUSH
 438: LD_VAR 0 1
 442: PUSH
 443: LD_VAR 0 7
 447: ARRAY
 448: PUSH
 449: LD_VAR 0 8
 453: MINUS
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// end ;
 460: GO 327
 462: GO 324
 464: POP
 465: POP
// end ;
 466: LD_VAR 0 6
 470: RET
// export function AddPoints ( p ) ; begin
 471: LD_INT 0
 473: PPUSH
// points := points + p ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_EXP 2
 483: PUSH
 484: LD_VAR 0 1
 488: PLUS
 489: ST_TO_ADDR
// end ;
 490: LD_VAR 0 2
 494: RET
// export function LoadColors ; var file ; begin
 495: LD_INT 0
 497: PPUSH
 498: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 499: CALL_OW 545
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: GREATEREQUAL
 508: IFFALSE 516
 510: LD_INT 3
 512: DOUBLE
 513: LESSEQUAL
 514: IFTRUE 524
 516: LD_INT 12
 518: DOUBLE
 519: EQUAL
 520: IFTRUE 524
 522: GO 535
 524: POP
// file = colors.txt ; 4 .. 5 :
 525: LD_ADDR_VAR 0 2
 529: PUSH
 530: LD_STRING colors.txt
 532: ST_TO_ADDR
 533: GO 611
 535: LD_INT 4
 537: DOUBLE
 538: GREATEREQUAL
 539: IFFALSE 547
 541: LD_INT 5
 543: DOUBLE
 544: LESSEQUAL
 545: IFTRUE 549
 547: GO 560
 549: POP
// file = colors-spring.txt ; 6 .. 8 :
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_STRING colors-spring.txt
 557: ST_TO_ADDR
 558: GO 611
 560: LD_INT 6
 562: DOUBLE
 563: GREATEREQUAL
 564: IFFALSE 572
 566: LD_INT 8
 568: DOUBLE
 569: LESSEQUAL
 570: IFTRUE 574
 572: GO 585
 574: POP
// file = colors-summer.txt ; 9 .. 11 :
 575: LD_ADDR_VAR 0 2
 579: PUSH
 580: LD_STRING colors-summer.txt
 582: ST_TO_ADDR
 583: GO 611
 585: LD_INT 9
 587: DOUBLE
 588: GREATEREQUAL
 589: IFFALSE 597
 591: LD_INT 11
 593: DOUBLE
 594: LESSEQUAL
 595: IFTRUE 599
 597: GO 610
 599: POP
// file = colors-autumn.txt ; end ;
 600: LD_ADDR_VAR 0 2
 604: PUSH
 605: LD_STRING colors-autumn.txt
 607: ST_TO_ADDR
 608: GO 611
 610: POP
// LoadColorsTxt ( file ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 544
// end ;
 620: LD_VAR 0 1
 624: RET
// export function TestColor ; var i ; begin
 625: LD_INT 0
 627: PPUSH
 628: PPUSH
// i = 1 ;
 629: LD_ADDR_VAR 0 2
 633: PUSH
 634: LD_INT 1
 636: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 637: LD_INT 35
 639: PPUSH
 640: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 644: LD_STRING colors-spring.txt
 646: PUSH
 647: LD_STRING colors-summer.txt
 649: PUSH
 650: LD_STRING colors-autumn.txt
 652: PUSH
 653: LD_STRING colors.txt
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 4
 669: MOD
 670: PUSH
 671: LD_INT 1
 673: PLUS
 674: ARRAY
 675: PPUSH
 676: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
 680: LD_ADDR_OWVAR 47
 684: PUSH
 685: LD_STRING Wiosna
 687: PUSH
 688: LD_STRING Lato
 690: PUSH
 691: LD_STRING Jesien
 693: PUSH
 694: LD_STRING Zima
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: PUSH
 703: LD_VAR 0 2
 707: PUSH
 708: LD_INT 4
 710: MOD
 711: PUSH
 712: LD_INT 1
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// i := i + 1 ;
 717: LD_ADDR_VAR 0 2
 721: PUSH
 722: LD_VAR 0 2
 726: PUSH
 727: LD_INT 1
 729: PLUS
 730: ST_TO_ADDR
// end until false ;
 731: LD_INT 0
 733: IFFALSE 637
// end ;
 735: LD_VAR 0 1
 739: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
 740: LD_INT 0
 742: PPUSH
// if x1 = x2 and y1 > y2 then
 743: LD_VAR 0 1
 747: PUSH
 748: LD_VAR 0 3
 752: EQUAL
 753: PUSH
 754: LD_VAR 0 2
 758: PUSH
 759: LD_VAR 0 4
 763: GREATER
 764: AND
 765: IFFALSE 775
// result := 0 ;
 767: LD_ADDR_VAR 0 5
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
 775: LD_VAR 0 1
 779: PUSH
 780: LD_VAR 0 3
 784: LESS
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_VAR 0 4
 795: EQUAL
 796: AND
 797: IFFALSE 807
// result := 1 ;
 799: LD_ADDR_VAR 0 5
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
 807: LD_VAR 0 1
 811: PUSH
 812: LD_VAR 0 3
 816: LESS
 817: PUSH
 818: LD_VAR 0 2
 822: PUSH
 823: LD_VAR 0 4
 827: LESS
 828: AND
 829: IFFALSE 839
// result := 2 ;
 831: LD_ADDR_VAR 0 5
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
 839: LD_VAR 0 1
 843: PUSH
 844: LD_VAR 0 3
 848: EQUAL
 849: PUSH
 850: LD_VAR 0 2
 854: PUSH
 855: LD_VAR 0 4
 859: LESS
 860: AND
 861: IFFALSE 871
// result := 3 ;
 863: LD_ADDR_VAR 0 5
 867: PUSH
 868: LD_INT 3
 870: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_VAR 0 3
 880: GREATER
 881: PUSH
 882: LD_VAR 0 2
 886: PUSH
 887: LD_VAR 0 4
 891: EQUAL
 892: AND
 893: IFFALSE 903
// result := 4 ;
 895: LD_ADDR_VAR 0 5
 899: PUSH
 900: LD_INT 4
 902: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
 903: LD_VAR 0 1
 907: PUSH
 908: LD_VAR 0 3
 912: GREATER
 913: PUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_VAR 0 4
 923: GREATER
 924: AND
 925: IFFALSE 935
// result := 5 ;
 927: LD_ADDR_VAR 0 5
 931: PUSH
 932: LD_INT 5
 934: ST_TO_ADDR
// end ;
 935: LD_VAR 0 5
 939: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
 940: LD_INT 0
 942: PPUSH
 943: PPUSH
 944: PPUSH
 945: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
 946: LD_ADDR_VAR 0 4
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_OWVAR 2
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PUSH
 963: LD_INT 21
 965: PUSH
 966: LD_INT 1
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: ST_TO_ADDR
// for i = 1 to amount do
 982: LD_ADDR_VAR 0 3
 986: PUSH
 987: DOUBLE
 988: LD_INT 1
 990: DEC
 991: ST_TO_ADDR
 992: LD_VAR 0 1
 996: PUSH
 997: FOR_TO
 998: IFFALSE 1079
// begin pep := rand ( 1 , team ) ;
1000: LD_ADDR_VAR 0 5
1004: PUSH
1005: LD_INT 1
1007: PPUSH
1008: LD_VAR 0 4
1012: PPUSH
1013: CALL_OW 12
1017: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1018: LD_VAR 0 4
1022: PUSH
1023: LD_VAR 0 5
1027: ARRAY
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 4
1034: PPUSH
1035: CALL_OW 12
1039: PPUSH
1040: LD_INT 1000
1042: PPUSH
1043: LD_INT 10000
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 492
// team := team diff team [ pep ] ;
1055: LD_ADDR_VAR 0 4
1059: PUSH
1060: LD_VAR 0 4
1064: PUSH
1065: LD_VAR 0 4
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: DIFF
1076: ST_TO_ADDR
// end ;
1077: GO 997
1079: POP
1080: POP
// end ;
1081: LD_VAR 0 2
1085: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
1097: PPUSH
1098: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_INT 7
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 517
1114: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1115: LD_ADDR_VAR 0 6
1119: PUSH
1120: LD_INT 6
1122: PPUSH
1123: LD_INT 0
1125: PPUSH
1126: CALL_OW 517
1130: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: DOUBLE
1137: LD_INT 1
1139: DEC
1140: ST_TO_ADDR
1141: LD_VAR 0 5
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PUSH
1150: FOR_TO
1151: IFFALSE 1233
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_VAR 0 7
1162: PPUSH
1163: LD_VAR 0 7
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: PPUSH
1172: LD_VAR 0 5
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PUSH
1181: LD_VAR 0 3
1185: ARRAY
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PPUSH
1202: LD_VAR 0 7
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: PPUSH
1211: LD_VAR 0 5
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 1
1230: ST_TO_ADDR
// end ;
1231: GO 1150
1233: POP
1234: POP
// uc_side := 4 ;
1235: LD_ADDR_OWVAR 20
1239: PUSH
1240: LD_INT 4
1242: ST_TO_ADDR
// case strenght of 1 .. 10 :
1243: LD_VAR 0 1
1247: PUSH
1248: LD_INT 1
1250: DOUBLE
1251: GREATEREQUAL
1252: IFFALSE 1260
1254: LD_INT 10
1256: DOUBLE
1257: LESSEQUAL
1258: IFTRUE 1262
1260: GO 1324
1262: POP
// begin uc_nation := 0 ;
1263: LD_ADDR_OWVAR 21
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// for i = 1 to 20 do
1271: LD_ADDR_VAR 0 3
1275: PUSH
1276: DOUBLE
1277: LD_INT 1
1279: DEC
1280: ST_TO_ADDR
1281: LD_INT 20
1283: PUSH
1284: FOR_TO
1285: IFFALSE 1320
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1287: LD_INT 0
1289: PPUSH
1290: LD_INT 15
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 380
// result := result ^ CreateHuman ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_VAR 0 2
1311: PUSH
1312: CALL_OW 44
1316: ADD
1317: ST_TO_ADDR
// end ;
1318: GO 1284
1320: POP
1321: POP
// end ; 11 .. 40 :
1322: GO 1511
1324: LD_INT 11
1326: DOUBLE
1327: GREATEREQUAL
1328: IFFALSE 1336
1330: LD_INT 40
1332: DOUBLE
1333: LESSEQUAL
1334: IFTRUE 1338
1336: GO 1417
1338: POP
// begin uc_nation := 1 ;
1339: LD_ADDR_OWVAR 21
1343: PUSH
1344: LD_INT 1
1346: ST_TO_ADDR
// for i = 1 to 20 do
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: DOUBLE
1353: LD_INT 1
1355: DEC
1356: ST_TO_ADDR
1357: LD_INT 20
1359: PUSH
1360: FOR_TO
1361: IFFALSE 1413
// begin vc_chassis := us_medium_tracked ;
1363: LD_ADDR_OWVAR 37
1367: PUSH
1368: LD_INT 3
1370: ST_TO_ADDR
// vc_engine := engine_siberite ;
1371: LD_ADDR_OWVAR 39
1375: PUSH
1376: LD_INT 3
1378: ST_TO_ADDR
// vc_control := control_computer ;
1379: LD_ADDR_OWVAR 38
1383: PUSH
1384: LD_INT 3
1386: ST_TO_ADDR
// vc_weapon := us_laser ;
1387: LD_ADDR_OWVAR 40
1391: PUSH
1392: LD_INT 9
1394: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1395: LD_ADDR_VAR 0 2
1399: PUSH
1400: LD_VAR 0 2
1404: PUSH
1405: CALL_OW 45
1409: ADD
1410: ST_TO_ADDR
// end ;
1411: GO 1360
1413: POP
1414: POP
// end ; 41 .. 100 :
1415: GO 1511
1417: LD_INT 41
1419: DOUBLE
1420: GREATEREQUAL
1421: IFFALSE 1429
1423: LD_INT 100
1425: DOUBLE
1426: LESSEQUAL
1427: IFTRUE 1431
1429: GO 1510
1431: POP
// begin uc_nation := 1 ;
1432: LD_ADDR_OWVAR 21
1436: PUSH
1437: LD_INT 1
1439: ST_TO_ADDR
// for i = 1 to 20 do
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: DOUBLE
1446: LD_INT 1
1448: DEC
1449: ST_TO_ADDR
1450: LD_INT 20
1452: PUSH
1453: FOR_TO
1454: IFFALSE 1506
// begin vc_chassis := us_morphling ;
1456: LD_ADDR_OWVAR 37
1460: PUSH
1461: LD_INT 5
1463: ST_TO_ADDR
// vc_engine := engine_siberite ;
1464: LD_ADDR_OWVAR 39
1468: PUSH
1469: LD_INT 3
1471: ST_TO_ADDR
// vc_control := control_computer ;
1472: LD_ADDR_OWVAR 38
1476: PUSH
1477: LD_INT 3
1479: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_INT 10
1487: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1488: LD_ADDR_VAR 0 2
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: CALL_OW 45
1502: ADD
1503: ST_TO_ADDR
// end ;
1504: GO 1453
1506: POP
1507: POP
// end ; end ;
1508: GO 1511
1510: POP
// for i in result do
1511: LD_ADDR_VAR 0 3
1515: PUSH
1516: LD_VAR 0 2
1520: PUSH
1521: FOR_IN
1522: IFFALSE 1739
// begin x := base_area [ 1 ] [ 1 ] ;
1524: LD_ADDR_VAR 0 9
1528: PUSH
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1542: LD_ADDR_VAR 0 10
1546: PUSH
1547: LD_VAR 0 6
1551: PUSH
1552: LD_INT 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1560: LD_ADDR_VAR 0 8
1564: PUSH
1565: LD_VAR 0 7
1569: PPUSH
1570: LD_VAR 0 9
1574: PPUSH
1575: LD_VAR 0 10
1579: PPUSH
1580: CALL_OW 439
1584: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1585: LD_VAR 0 3
1589: PPUSH
1590: LD_VAR 0 9
1594: PPUSH
1595: LD_VAR 0 10
1599: PPUSH
1600: LD_VAR 0 8
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: LD_VAR 0 8
1613: PUSH
1614: LD_INT 2
1616: ARRAY
1617: PPUSH
1618: CALL 740 0 4
1622: PPUSH
1623: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 9
1636: PPUSH
1637: LD_VAR 0 10
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 48
// ComHold ( i ) ;
1649: LD_VAR 0 3
1653: PPUSH
1654: CALL_OW 140
// for c = 1 to 2 do
1658: LD_ADDR_VAR 0 11
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1735
// begin tmp := base_area [ c ] ;
1674: LD_ADDR_VAR 0 12
1678: PUSH
1679: LD_VAR 0 6
1683: PUSH
1684: LD_VAR 0 11
1688: ARRAY
1689: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
1690: LD_ADDR_VAR 0 12
1694: PUSH
1695: LD_VAR 0 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL_OW 3
1707: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
1708: LD_ADDR_VAR 0 6
1712: PUSH
1713: LD_VAR 0 6
1717: PPUSH
1718: LD_VAR 0 11
1722: PPUSH
1723: LD_VAR 0 12
1727: PPUSH
1728: CALL_OW 1
1732: ST_TO_ADDR
// end ;
1733: GO 1671
1735: POP
1736: POP
// end ;
1737: GO 1521
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// if graveyard = 0 then
1753: LD_EXP 8
1757: PUSH
1758: LD_INT 0
1760: EQUAL
1761: IFFALSE 1765
// exit ;
1763: GO 1928
// i := rand ( 1 , graveyard ) ;
1765: LD_ADDR_VAR 0 2
1769: PUSH
1770: LD_INT 1
1772: PPUSH
1773: LD_EXP 8
1777: PPUSH
1778: CALL_OW 12
1782: ST_TO_ADDR
// un := graveyard [ i ] ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_EXP 8
1792: PUSH
1793: LD_VAR 0 2
1797: ARRAY
1798: ST_TO_ADDR
// for c in playerSquad do
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: LD_EXP 12
1808: PUSH
1809: FOR_IN
1810: IFFALSE 1846
// if un = c [ 1 ] then
1812: LD_VAR 0 4
1816: PUSH
1817: LD_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: EQUAL
1826: IFFALSE 1844
// begin new := c [ 2 ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 2
1840: ARRAY
1841: ST_TO_ADDR
// break ;
1842: GO 1846
// end ;
1844: GO 1809
1846: POP
1847: POP
// uc_side := your_side ;
1848: LD_ADDR_OWVAR 20
1852: PUSH
1853: LD_OWVAR 2
1857: ST_TO_ADDR
// uc_nation := playerNation ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_EXP 6
1867: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 5
1877: PPUSH
1878: CALL_OW 34
1882: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
1883: LD_VAR 0 4
1887: PPUSH
1888: LD_EXP 9
1892: PPUSH
1893: LD_EXP 10
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
1908: LD_ADDR_EXP 8
1912: PUSH
1913: LD_EXP 8
1917: PPUSH
1918: LD_VAR 0 2
1922: PPUSH
1923: CALL_OW 3
1927: ST_TO_ADDR
// end ;
1928: LD_VAR 0 1
1932: RET
// export function ComEspace ( un ) ; begin
1933: LD_INT 0
1935: PPUSH
// if not IsInArea ( un , zoneOut ) then
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 4
1943: PPUSH
1944: CALL_OW 308
1948: NOT
1949: IFFALSE 1965
// ComMoveToArea ( un , zoneOut ) else
1951: LD_VAR 0 1
1955: PPUSH
1956: LD_INT 4
1958: PPUSH
1959: CALL_OW 113
1963: GO 1974
// RemoveUnit ( un ) ;
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 64
// end ;
1974: LD_VAR 0 2
1978: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
1979: LD_INT 0
1981: PPUSH
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
// list := AreaToList ( area , 0 ) ;
1986: LD_ADDR_VAR 0 4
1990: PUSH
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 517
2003: ST_TO_ADDR
// if not list then
2004: LD_VAR 0 4
2008: NOT
2009: IFFALSE 2013
// exit ;
2011: GO 2175
// for i = 1 to list do
2013: LD_ADDR_VAR 0 6
2017: PUSH
2018: DOUBLE
2019: LD_INT 1
2021: DEC
2022: ST_TO_ADDR
2023: LD_VAR 0 4
2027: PUSH
2028: FOR_TO
2029: IFFALSE 2111
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2031: LD_ADDR_VAR 0 5
2035: PUSH
2036: LD_VAR 0 5
2040: PPUSH
2041: LD_VAR 0 5
2045: PUSH
2046: LD_INT 1
2048: PLUS
2049: PPUSH
2050: LD_VAR 0 4
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PUSH
2059: LD_VAR 0 6
2063: ARRAY
2064: PPUSH
2065: CALL_OW 1
2069: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2070: LD_ADDR_VAR 0 5
2074: PUSH
2075: LD_VAR 0 5
2079: PPUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_INT 1
2087: PLUS
2088: PPUSH
2089: LD_VAR 0 4
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PUSH
2098: LD_VAR 0 6
2102: ARRAY
2103: PPUSH
2104: CALL_OW 1
2108: ST_TO_ADDR
// end ;
2109: GO 2028
2111: POP
2112: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 5
2122: PPUSH
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 250
2132: PPUSH
2133: LD_VAR 0 1
2137: PPUSH
2138: CALL_OW 251
2142: PPUSH
2143: CALL_OW 439
2147: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 2
2169: ARRAY
2170: PPUSH
2171: CALL_OW 111
// end ;
2175: LD_VAR 0 3
2179: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2180: LD_INT 0
2182: PPUSH
2183: PPUSH
2184: PPUSH
// timer := rand ( 2 , 5 ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 2
2192: PPUSH
2193: LD_INT 5
2195: PPUSH
2196: CALL_OW 12
2200: ST_TO_ADDR
// while ( timer > 0 ) do
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 0
2208: GREATER
2209: IFFALSE 2248
// begin SetUnitDisplayNumber ( un , timer ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 505
// timer := timer - 1 ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: MINUS
2238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2239: LD_INT 35
2241: PPUSH
2242: CALL_OW 67
// end ;
2246: GO 2201
// if timer = 0 then
2248: LD_VAR 0 4
2252: PUSH
2253: LD_INT 0
2255: EQUAL
2256: IFFALSE 2305
// for i = 1 to 3 do
2258: LD_ADDR_VAR 0 3
2262: PUSH
2263: DOUBLE
2264: LD_INT 1
2266: DEC
2267: ST_TO_ADDR
2268: LD_INT 3
2270: PUSH
2271: FOR_TO
2272: IFFALSE 2303
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2274: LD_VAR 0 1
2278: PPUSH
2279: CALL_OW 250
2283: PPUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 251
2293: PPUSH
2294: LD_INT 10
2296: PPUSH
2297: CALL_OW 453
2301: GO 2271
2303: POP
2304: POP
// end ;
2305: LD_VAR 0 2
2309: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2310: LD_INT 0
2312: PPUSH
// if unit in unreachableList then
2313: LD_VAR 0 1
2317: PUSH
2318: LD_EXP 13
2322: IN
2323: IFFALSE 2341
// unreachableList := unreachableList diff unit ;
2325: LD_ADDR_EXP 13
2329: PUSH
2330: LD_EXP 13
2334: PUSH
2335: LD_VAR 0 1
2339: DIFF
2340: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: LD_VAR 0 3
2355: PPUSH
2356: CALL_OW 428
2360: PPUSH
2361: CALL_OW 115
// Wait ( 1 ) ;
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 67
// if unit in unreachableList then
2372: LD_VAR 0 1
2376: PUSH
2377: LD_EXP 13
2381: IN
2382: IFFALSE 2394
// result := false else
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_INT 0
2391: ST_TO_ADDR
2392: GO 2402
// result := true ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// end ;
2402: LD_VAR 0 4
2406: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2407: LD_INT 0
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2415: LD_ADDR_VAR 0 4
2419: PUSH
2420: LD_INT 81
2422: PUSH
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PPUSH
2437: CALL_OW 69
2441: ST_TO_ADDR
// if not enemy then
2442: LD_VAR 0 4
2446: NOT
2447: IFFALSE 2451
// exit ;
2449: GO 2601
// if UnitFilter ( enemy , [ f_occupied ] ) then
2451: LD_VAR 0 4
2455: PPUSH
2456: LD_INT 59
2458: PUSH
2459: EMPTY
2460: LIST
2461: PPUSH
2462: CALL_OW 72
2466: IFFALSE 2577
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2468: LD_ADDR_VAR 0 5
2472: PUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: LD_INT 59
2480: PUSH
2481: EMPTY
2482: LIST
2483: PPUSH
2484: CALL_OW 72
2488: PPUSH
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL_OW 74
2498: ST_TO_ADDR
// x := GetX ( t ) ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_VAR 0 5
2508: PPUSH
2509: CALL_OW 250
2513: ST_TO_ADDR
// y := GetY ( t ) ;
2514: LD_ADDR_VAR 0 7
2518: PUSH
2519: LD_VAR 0 5
2523: PPUSH
2524: CALL_OW 251
2528: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2529: LD_VAR 0 1
2533: PPUSH
2534: LD_VAR 0 6
2538: PPUSH
2539: LD_VAR 0 7
2543: PPUSH
2544: CALL 2310 0 3
2548: NOT
2549: IFFALSE 2575
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2551: LD_VAR 0 1
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: CALL_OW 74
2570: PPUSH
2571: CALL_OW 115
// end else
2575: GO 2601
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_VAR 0 1
2591: PPUSH
2592: CALL_OW 74
2596: PPUSH
2597: CALL_OW 115
// end ; end_of_file
2601: LD_VAR 0 2
2605: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; end_of_file export function InitSettings ; begin
2606: LD_INT 0
2608: PPUSH
// difficultyLevel := GetMultiplayerSetting ( 0 ) ;
2609: LD_ADDR_EXP 3
2613: PUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 426
2621: ST_TO_ADDR
// playerNation := GetMultiplayerSetting ( 1 ) - 1 ;
2622: LD_ADDR_EXP 6
2626: PUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 426
2634: PUSH
2635: LD_INT 1
2637: MINUS
2638: ST_TO_ADDR
// end ; end_of_file
2639: LD_VAR 0 1
2643: RET
// export function InitGame ; begin
2644: LD_INT 0
2646: PPUSH
// ResetFog ;
2647: CALL_OW 335
// RandomizeAll ;
2651: CALL_OW 11
// LoadColors ;
2655: CALL 495 0 0
// debug := false ;
2659: LD_ADDR_EXP 1
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: LD_INT 91
2674: ST_TO_ADDR
// us_artillery := 97 ;
2675: LD_ADDR_EXP 17
2679: PUSH
2680: LD_INT 97
2682: ST_TO_ADDR
// ru_radar := 98 ;
2683: LD_ADDR_EXP 14
2687: PUSH
2688: LD_INT 98
2690: ST_TO_ADDR
// game_started := false ;
2691: LD_ADDR_EXP 7
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// points := 0 ;
2699: LD_ADDR_EXP 2
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// waveNumber := 0 ;
2707: LD_ADDR_EXP 5
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// timeToNextAttack := 0 ;
2715: LD_ADDR_EXP 4
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// graveyard := [ ] ;
2723: LD_ADDR_EXP 8
2727: PUSH
2728: EMPTY
2729: ST_TO_ADDR
// base_x := 1 ;
2730: LD_ADDR_EXP 9
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// base_y := 1 ;
2738: LD_ADDR_EXP 10
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if difficultyLevel > 2 then
2746: LD_EXP 3
2750: PUSH
2751: LD_INT 2
2753: GREATER
2754: IFFALSE 2769
// SetTech ( 5 , 7 , state_researched ) ;
2756: LD_INT 5
2758: PPUSH
2759: LD_INT 7
2761: PPUSH
2762: LD_INT 2
2764: PPUSH
2765: CALL_OW 322
// if not playerNation then
2769: LD_EXP 6
2773: NOT
2774: IFFALSE 2800
// begin points := 100 ;
2776: LD_ADDR_EXP 2
2780: PUSH
2781: LD_INT 100
2783: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// end ; your_side := playerNation ;
2800: LD_ADDR_OWVAR 2
2804: PUSH
2805: LD_EXP 6
2809: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
2810: LD_OWVAR 2
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
2822: LD_INT 25
2824: PUSH
2825: LD_INT 20
2827: PUSH
2828: LD_INT 15
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_EXP 3
2844: ARRAY
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 3
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_EXP 3
2868: ARRAY
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 3
2875: PUSH
2876: LD_INT 2
2878: PUSH
2879: LD_INT 1
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_EXP 3
2892: ARRAY
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: LD_INT 1
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: LD_INT 88
2915: PPUSH
2916: LD_INT 76
2918: PPUSH
2919: LD_INT 6
2921: PPUSH
2922: CALL 304 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
2926: LD_EXP 6
2930: PPUSH
2931: LD_INT 9
2933: PUSH
2934: LD_INT 7
2936: PUSH
2937: LD_INT 5
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_EXP 3
2953: ARRAY
2954: PPUSH
2955: LD_INT 24
2957: PUSH
2958: LD_INT 16
2960: PUSH
2961: LD_INT 12
2963: PUSH
2964: LD_INT 8
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_EXP 3
2977: ARRAY
2978: PPUSH
2979: LD_INT 88
2981: PPUSH
2982: LD_INT 76
2984: PPUSH
2985: CALL 13 0 5
// CenterNowOnXY ( 88 , 76 ) ;
2989: LD_INT 88
2991: PPUSH
2992: LD_INT 76
2994: PPUSH
2995: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
2999: LD_INT 90
3001: PPUSH
3002: LD_INT 79
3004: PPUSH
3005: LD_OWVAR 2
3009: PPUSH
3010: LD_INT 50
3012: NEG
3013: PPUSH
3014: CALL_OW 330
// if debug then
3018: LD_EXP 1
3022: IFFALSE 3033
// FogOff ( your_side ) ;
3024: LD_OWVAR 2
3028: PPUSH
3029: CALL_OW 344
// end ;
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 trigger game_started do var i ;
3038: LD_EXP 7
3042: IFFALSE 3276
3044: GO 3046
3046: DISABLE
3047: LD_INT 0
3049: PPUSH
// begin while ( game_started ) do
3050: LD_EXP 7
3054: IFFALSE 3276
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3056: LD_INT 22
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: PPUSH
3066: CALL_OW 69
3070: PUSH
3071: LD_INT 5
3073: LESS
3074: PUSH
3075: LD_EXP 4
3079: PUSH
3080: LD_INT 0
3082: LESSEQUAL
3083: AND
3084: IFFALSE 3267
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3086: LD_INT 22
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: IFFALSE 3138
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: PUSH
3122: FOR_IN
3123: IFFALSE 3136
// RemoveUnit ( i ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 64
3134: GO 3122
3136: POP
3137: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3138: LD_EXP 5
3142: PUSH
3143: LD_INT 3
3145: MOD
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: PUSH
3151: LD_EXP 5
3155: PUSH
3156: LD_INT 10
3158: MOD
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: OR
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: AND
3174: IFFALSE 3180
// InitBonus ;
3176: CALL 9289 0 0
// if waveNumber mod 10 = 0 then
3180: LD_EXP 5
3184: PUSH
3185: LD_INT 10
3187: MOD
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3198
// SaveForQuickRestart ;
3194: CALL_OW 22
// if waveNumber = 100 then
3198: LD_EXP 5
3202: PUSH
3203: LD_INT 100
3205: EQUAL
3206: IFFALSE 3219
// begin FogOff ( your_side ) ;
3208: LD_OWVAR 2
3212: PPUSH
3213: CALL_OW 344
// break ;
3217: GO 3276
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3219: LD_ADDR_EXP 4
3223: PUSH
3224: LD_INT 3150
3226: PPUSH
3227: LD_INT 5250
3229: PPUSH
3230: CALL_OW 12
3234: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3235: LD_EXP 4
3239: PPUSH
3240: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3244: LD_ADDR_EXP 5
3248: PUSH
3249: LD_EXP 5
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3258: LD_EXP 5
3262: PPUSH
3263: CALL 4280 0 1
// end ; Wait ( 0 0$01 ) ;
3267: LD_INT 35
3269: PPUSH
3270: CALL_OW 67
// end ;
3274: GO 3050
// end ;
3276: PPOPN 1
3278: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3279: LD_EXP 4
3283: PUSH
3284: LD_INT 0
3286: GREATER
3287: IFFALSE 3307
3289: GO 3291
3291: DISABLE
// begin enable ;
3292: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3293: LD_ADDR_EXP 4
3297: PUSH
3298: LD_EXP 4
3302: PUSH
3303: LD_INT 35
3305: MINUS
3306: ST_TO_ADDR
// end ; end_of_file
3307: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3308: LD_VAR 0 1
3312: PUSH
3313: LD_EXP 13
3317: IN
3318: NOT
3319: IFFALSE 3350
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3321: LD_ADDR_EXP 13
3325: PUSH
3326: LD_EXP 13
3330: PPUSH
3331: LD_EXP 13
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 1
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// end ;
3350: PPOPN 1
3352: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 24281 0 1
// if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3362: LD_VAR 0 1
3366: PPUSH
3367: CALL_OW 255
3371: PUSH
3372: LD_OWVAR 2
3376: EQUAL
3377: PUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: CALL_OW 247
3387: PUSH
3388: LD_INT 1
3390: EQUAL
3391: AND
3392: IFFALSE 3423
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3394: LD_ADDR_EXP 8
3398: PUSH
3399: LD_EXP 8
3403: PPUSH
3404: LD_EXP 8
3408: PUSH
3409: LD_INT 1
3411: PLUS
3412: PPUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 255
3432: PUSH
3433: LD_INT 7
3435: EQUAL
3436: IFFALSE 3810
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3438: LD_VAR 0 1
3442: PUSH
3443: LD_INT 34
3445: PUSH
3446: LD_INT 91
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PPUSH
3453: CALL_OW 69
3457: IN
3458: IFFALSE 3503
// begin if Rand ( 1 , 100 ) <= 70 then
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 100
3465: PPUSH
3466: CALL_OW 12
3470: PUSH
3471: LD_INT 70
3473: LESSEQUAL
3474: IFFALSE 3503
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 250
3485: PPUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 251
3495: PPUSH
3496: LD_INT 10
3498: PPUSH
3499: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 247
3512: PUSH
3513: LD_INT 1
3515: DOUBLE
3516: EQUAL
3517: IFTRUE 3521
3519: GO 3655
3521: POP
// begin case GetClass ( un ) of class_apeman :
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 257
3531: PUSH
3532: LD_INT 12
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3550
3540: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
3541: LD_INT 2
3543: PPUSH
3544: CALL 471 0 1
3548: GO 3653
3550: LD_INT 15
3552: DOUBLE
3553: EQUAL
3554: IFTRUE 3558
3556: GO 3568
3558: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
3559: LD_INT 5
3561: PPUSH
3562: CALL 471 0 1
3566: GO 3653
3568: LD_INT 17
3570: DOUBLE
3571: EQUAL
3572: IFTRUE 3576
3574: GO 3586
3576: POP
// AddPoints ( 30 ) ; class_soldier :
3577: LD_INT 30
3579: PPUSH
3580: CALL 471 0 1
3584: GO 3653
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3604
3594: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
3595: LD_INT 50
3597: PPUSH
3598: CALL 471 0 1
3602: GO 3653
3604: LD_INT 9
3606: DOUBLE
3607: EQUAL
3608: IFTRUE 3624
3610: LD_INT 5
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3624
3616: LD_INT 8
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3634
3624: POP
// AddPoints ( 75 ) ; class_mechanic :
3625: LD_INT 75
3627: PPUSH
3628: CALL 471 0 1
3632: GO 3653
3634: LD_INT 3
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3652
3642: POP
// AddPoints ( 60 ) ; end ;
3643: LD_INT 60
3645: PPUSH
3646: CALL 471 0 1
3650: GO 3653
3652: POP
// end ; unit_vehicle :
3653: GO 3810
3655: LD_INT 2
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3809
3663: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL_OW 265
3673: PUSH
3674: LD_INT 12
3676: DOUBLE
3677: EQUAL
3678: IFTRUE 3694
3680: LD_INT 1
3682: DOUBLE
3683: EQUAL
3684: IFTRUE 3694
3686: LD_INT 11
3688: DOUBLE
3689: EQUAL
3690: IFTRUE 3694
3692: GO 3704
3694: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
3695: LD_INT 100
3697: PPUSH
3698: CALL 471 0 1
3702: GO 3807
3704: LD_INT 13
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3742
3710: LD_INT 14
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3742
3716: LD_INT 2
3718: DOUBLE
3719: EQUAL
3720: IFTRUE 3742
3722: LD_INT 3
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3742
3728: LD_INT 21
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3742
3734: LD_INT 22
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3752
3742: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
3743: LD_INT 250
3745: PPUSH
3746: CALL 471 0 1
3750: GO 3807
3752: LD_INT 4
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3778
3758: LD_INT 5
3760: DOUBLE
3761: EQUAL
3762: IFTRUE 3778
3764: LD_INT 23
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3778
3770: LD_INT 24
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3788
3778: POP
// AddPoints ( 500 ) ; 25 :
3779: LD_INT 500
3781: PPUSH
3782: CALL 471 0 1
3786: GO 3807
3788: LD_INT 25
3790: DOUBLE
3791: EQUAL
3792: IFTRUE 3796
3794: GO 3806
3796: POP
// AddPoints ( 1250 ) ; end ;
3797: LD_INT 1250
3799: PPUSH
3800: CALL 471 0 1
3804: GO 3807
3806: POP
// end ; end ;
3807: GO 3810
3809: POP
// end ; end ;
3810: PPOPN 1
3812: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
3813: LD_VAR 0 1
3817: PPUSH
3818: CALL_OW 266
3822: PUSH
3823: LD_INT 0
3825: EQUAL
3826: IFFALSE 3876
// begin base_x := GetX ( b ) ;
3828: LD_ADDR_EXP 9
3832: PUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 250
3842: ST_TO_ADDR
// base_y := GetY ( b ) ;
3843: LD_ADDR_EXP 10
3847: PUSH
3848: LD_VAR 0 1
3852: PPUSH
3853: CALL_OW 251
3857: ST_TO_ADDR
// base := b ;
3858: LD_ADDR_EXP 11
3862: PUSH
3863: LD_VAR 0 1
3867: ST_TO_ADDR
// game_started := true ;
3868: LD_ADDR_EXP 7
3872: PUSH
3873: LD_INT 1
3875: ST_TO_ADDR
// end ; end ;
3876: PPOPN 1
3878: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 255
3888: PUSH
3889: LD_OWVAR 2
3893: EQUAL
3894: IFFALSE 3898
// exit ;
3896: GO 4045
// if GetType ( un ) = unit_vehicle then
3898: LD_VAR 0 1
3902: PPUSH
3903: CALL_OW 247
3907: PUSH
3908: LD_INT 2
3910: EQUAL
3911: IFFALSE 3964
// begin KillUnit ( un ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 248
3931: PUSH
3932: LD_INT 2
3934: EQUAL
3935: PUSH
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 264
3945: PUSH
3946: LD_INT 49
3948: PUSH
3949: EMPTY
3950: LIST
3951: IN
3952: OR
3953: IFFALSE 3964
// ExplodeVehicle ( un ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL 2180 0 1
// end ; if GetType ( un ) = unit_human then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 247
3973: PUSH
3974: LD_INT 1
3976: EQUAL
3977: IFFALSE 4045
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 248
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: PUSH
3993: LD_INT 5
3995: PPUSH
3996: LD_INT 7
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: NONEQUAL
4007: AND
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 248
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: LD_INT 3
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: IN
4033: OR
4034: IFFALSE 4045
// KillUnit ( un ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 66
// end ; end ;
4045: PPOPN 1
4047: END
// every 0 0$1 do
4048: GO 4050
4050: DISABLE
// begin enable ;
4051: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4052: LD_INT 4
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 22
4060: PUSH
4061: LD_OWVAR 2
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PPUSH
4070: CALL_OW 513
// end ;
4074: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4075: LD_EXP 7
4079: PUSH
4080: LD_INT 22
4082: PUSH
4083: LD_OWVAR 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PUSH
4111: LD_INT 0
4113: EQUAL
4114: AND
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( die ) ;
4120: LD_STRING die
4122: PPUSH
4123: CALL_OW 104
4127: END
// every 0 0$21 trigger tick <= 15 15$00 do
4128: LD_OWVAR 1
4132: PUSH
4133: LD_INT 31500
4135: LESSEQUAL
4136: IFFALSE 4163
4138: GO 4140
4140: DISABLE
// begin enable ;
4141: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4142: LD_INT 1
4144: PPUSH
4145: LD_INT 5
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: LD_INT 3
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: CALL_OW 55
// end ;
4163: END
// every 0 0$51 trigger tick > 15 15$00 do
4164: LD_OWVAR 1
4168: PUSH
4169: LD_INT 31500
4171: GREATER
4172: IFFALSE 4219
4174: GO 4176
4176: DISABLE
// begin enable ;
4177: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4178: LD_INT 22
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PUSH
4193: LD_INT 0
4195: EQUAL
4196: IFFALSE 4219
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 5
4203: PPUSH
4204: CALL_OW 12
4208: PPUSH
4209: LD_INT 3
4211: PPUSH
4212: LD_INT 1
4214: PPUSH
4215: CALL_OW 55
// end ;
4219: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: CALL_OW 308
4232: IFFALSE 4243
// KillUnit ( building ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 66
// end ;
4243: PPOPN 2
4245: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 24379 0 3
// end ;
4265: PPOPN 3
4267: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL 24387 0 1
// end ; end_of_file
4277: PPOPN 1
4279: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4280: LD_INT 0
4282: PPUSH
4283: PPUSH
4284: PPUSH
4285: PPUSH
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4291: LD_ADDR_VAR 0 7
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 2
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: ST_TO_ADDR
// uc_side := 7 ;
4306: LD_ADDR_OWVAR 20
4310: PUSH
4311: LD_INT 7
4313: ST_TO_ADDR
// l := 0 ;
4314: LD_ADDR_VAR 0 9
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// case num of 1 :
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 1
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4354
4335: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: CALL 6683 0 2
4351: ST_TO_ADDR
4352: GO 6492
4354: LD_INT 2
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4381
4362: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 12
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL 6754 0 2
4378: ST_TO_ADDR
4379: GO 6492
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4408
4389: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4390: LD_ADDR_VAR 0 2
4394: PUSH
4395: LD_INT 12
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: CALL 6825 0 2
4405: ST_TO_ADDR
4406: GO 6492
4408: LD_INT 4
4410: DOUBLE
4411: EQUAL
4412: IFTRUE 4416
4414: GO 4435
4416: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 7
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: CALL 6904 0 2
4432: ST_TO_ADDR
4433: GO 6492
4435: LD_INT 5
4437: DOUBLE
4438: EQUAL
4439: IFTRUE 4443
4441: GO 4462
4443: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 7
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: CALL 7300 0 2
4459: ST_TO_ADDR
4460: GO 6492
4462: LD_INT 6
4464: DOUBLE
4465: EQUAL
4466: IFTRUE 4470
4468: GO 4489
4470: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4471: LD_ADDR_VAR 0 2
4475: PUSH
4476: LD_INT 6
4478: PPUSH
4479: LD_INT 1
4481: PPUSH
4482: CALL 7720 0 2
4486: ST_TO_ADDR
4487: GO 6492
4489: LD_INT 7
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4516
4497: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4498: LD_ADDR_VAR 0 2
4502: PUSH
4503: LD_INT 15
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL 8140 0 2
4513: ST_TO_ADDR
4514: GO 6492
4516: LD_INT 8
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4543
4524: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 7
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 8241 0 2
4540: ST_TO_ADDR
4541: GO 6492
4543: LD_INT 9
4545: DOUBLE
4546: EQUAL
4547: IFTRUE 4551
4549: GO 4582
4551: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL 8241 0 2
4567: PUSH
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL 7300 0 2
4578: ADD
4579: ST_TO_ADDR
4580: GO 6492
4582: LD_INT 10
4584: DOUBLE
4585: EQUAL
4586: IFTRUE 4590
4588: GO 4621
4590: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_INT 9
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL 8140 0 2
4606: PUSH
4607: LD_INT 14
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: CALL 6825 0 2
4617: ADD
4618: ST_TO_ADDR
4619: GO 6492
4621: LD_INT 11
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4677
4627: LD_INT 21
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4677
4633: LD_INT 31
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4677
4639: LD_INT 41
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4677
4645: LD_INT 51
4647: DOUBLE
4648: EQUAL
4649: IFTRUE 4677
4651: LD_INT 61
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4677
4657: LD_INT 71
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4677
4663: LD_INT 81
4665: DOUBLE
4666: EQUAL
4667: IFTRUE 4677
4669: LD_INT 91
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4786
4677: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: LD_INT 20
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 40
4691: PUSH
4692: LD_INT 45
4694: PUSH
4695: LD_INT 50
4697: PUSH
4698: LD_INT 60
4700: PUSH
4701: LD_INT 70
4703: PUSH
4704: LD_INT 80
4706: PUSH
4707: LD_INT 100
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: LD_VAR 0 1
4725: PUSH
4726: LD_INT 10
4728: DIV
4729: ARRAY
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 4
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: LD_INT 6
4745: PUSH
4746: LD_INT 7
4748: PUSH
4749: LD_INT 8
4751: PUSH
4752: LD_INT 9
4754: PUSH
4755: LD_INT 10
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 1
4773: PUSH
4774: LD_INT 10
4776: DIV
4777: ARRAY
4778: PPUSH
4779: CALL 6683 0 2
4783: ST_TO_ADDR
4784: GO 6492
4786: LD_INT 12
4788: DOUBLE
4789: EQUAL
4790: IFTRUE 4842
4792: LD_INT 22
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4842
4798: LD_INT 32
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4842
4804: LD_INT 42
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4842
4810: LD_INT 52
4812: DOUBLE
4813: EQUAL
4814: IFTRUE 4842
4816: LD_INT 62
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4842
4822: LD_INT 72
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4842
4828: LD_INT 82
4830: DOUBLE
4831: EQUAL
4832: IFTRUE 4842
4834: LD_INT 92
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4951
4842: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 16
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 28
4856: PUSH
4857: LD_INT 33
4859: PUSH
4860: LD_INT 39
4862: PUSH
4863: LD_INT 46
4865: PUSH
4866: LD_INT 56
4868: PUSH
4869: LD_INT 66
4871: PUSH
4872: LD_INT 80
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 1
4890: PUSH
4891: LD_INT 10
4893: DIV
4894: ARRAY
4895: PPUSH
4896: LD_INT 2
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 5
4907: PUSH
4908: LD_INT 6
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: LD_INT 8
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: LD_INT 10
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_INT 10
4941: DIV
4942: ARRAY
4943: PPUSH
4944: CALL 6754 0 2
4948: ST_TO_ADDR
4949: GO 6492
4951: LD_INT 13
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 5007
4957: LD_INT 23
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 5007
4963: LD_INT 33
4965: DOUBLE
4966: EQUAL
4967: IFTRUE 5007
4969: LD_INT 43
4971: DOUBLE
4972: EQUAL
4973: IFTRUE 5007
4975: LD_INT 53
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 5007
4981: LD_INT 63
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 5007
4987: LD_INT 73
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 5007
4993: LD_INT 83
4995: DOUBLE
4996: EQUAL
4997: IFTRUE 5007
4999: LD_INT 93
5001: DOUBLE
5002: EQUAL
5003: IFTRUE 5007
5005: GO 5116
5007: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 18
5018: PUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 33
5027: PUSH
5028: LD_INT 39
5030: PUSH
5031: LD_INT 44
5033: PUSH
5034: LD_INT 57
5036: PUSH
5037: LD_INT 65
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 10
5058: DIV
5059: ARRAY
5060: PPUSH
5061: LD_INT 2
5063: PUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 4
5069: PUSH
5070: LD_INT 5
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: LD_INT 7
5078: PUSH
5079: LD_INT 8
5081: PUSH
5082: LD_INT 9
5084: PUSH
5085: LD_INT 10
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: DIV
5107: ARRAY
5108: PPUSH
5109: CALL 6825 0 2
5113: ST_TO_ADDR
5114: GO 6492
5116: LD_INT 14
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5172
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5172
5128: LD_INT 34
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5172
5134: LD_INT 44
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5172
5140: LD_INT 54
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5172
5146: LD_INT 64
5148: DOUBLE
5149: EQUAL
5150: IFTRUE 5172
5152: LD_INT 74
5154: DOUBLE
5155: EQUAL
5156: IFTRUE 5172
5158: LD_INT 84
5160: DOUBLE
5161: EQUAL
5162: IFTRUE 5172
5164: LD_INT 94
5166: DOUBLE
5167: EQUAL
5168: IFTRUE 5172
5170: GO 5281
5172: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: LD_INT 9
5180: PUSH
5181: LD_INT 15
5183: PUSH
5184: LD_INT 22
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 39
5192: PUSH
5193: LD_INT 45
5195: PUSH
5196: LD_INT 56
5198: PUSH
5199: LD_INT 60
5201: PUSH
5202: LD_INT 65
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 10
5223: DIV
5224: ARRAY
5225: PPUSH
5226: LD_INT 2
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 4
5234: PUSH
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: LD_INT 8
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: LD_INT 10
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 10
5271: DIV
5272: ARRAY
5273: PPUSH
5274: CALL 6904 0 2
5278: ST_TO_ADDR
5279: GO 6492
5281: LD_INT 15
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5337
5287: LD_INT 25
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5337
5293: LD_INT 35
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5337
5299: LD_INT 45
5301: DOUBLE
5302: EQUAL
5303: IFTRUE 5337
5305: LD_INT 55
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5337
5311: LD_INT 65
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5337
5317: LD_INT 75
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5337
5323: LD_INT 85
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5337
5329: LD_INT 95
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5446
5337: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: LD_INT 11
5348: PUSH
5349: LD_INT 15
5351: PUSH
5352: LD_INT 20
5354: PUSH
5355: LD_INT 25
5357: PUSH
5358: LD_INT 30
5360: PUSH
5361: LD_INT 35
5363: PUSH
5364: LD_INT 40
5366: PUSH
5367: LD_INT 45
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_VAR 0 1
5385: PUSH
5386: LD_INT 10
5388: DIV
5389: ARRAY
5390: PPUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 6
5405: PUSH
5406: LD_INT 7
5408: PUSH
5409: LD_INT 8
5411: PUSH
5412: LD_INT 9
5414: PUSH
5415: LD_INT 10
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 10
5436: DIV
5437: ARRAY
5438: PPUSH
5439: CALL 7300 0 2
5443: ST_TO_ADDR
5444: GO 6492
5446: LD_INT 16
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5502
5452: LD_INT 26
5454: DOUBLE
5455: EQUAL
5456: IFTRUE 5502
5458: LD_INT 36
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5502
5464: LD_INT 46
5466: DOUBLE
5467: EQUAL
5468: IFTRUE 5502
5470: LD_INT 56
5472: DOUBLE
5473: EQUAL
5474: IFTRUE 5502
5476: LD_INT 66
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5502
5482: LD_INT 76
5484: DOUBLE
5485: EQUAL
5486: IFTRUE 5502
5488: LD_INT 86
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5502
5494: LD_INT 96
5496: DOUBLE
5497: EQUAL
5498: IFTRUE 5502
5500: GO 5611
5502: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 9
5510: PUSH
5511: LD_INT 12
5513: PUSH
5514: LD_INT 15
5516: PUSH
5517: LD_INT 18
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 24
5525: PUSH
5526: LD_INT 27
5528: PUSH
5529: LD_INT 30
5531: PUSH
5532: LD_INT 33
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 10
5553: DIV
5554: ARRAY
5555: PPUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 3
5561: PUSH
5562: LD_INT 4
5564: PUSH
5565: LD_INT 5
5567: PUSH
5568: LD_INT 6
5570: PUSH
5571: LD_INT 7
5573: PUSH
5574: LD_INT 8
5576: PUSH
5577: LD_INT 9
5579: PUSH
5580: LD_INT 10
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_INT 10
5601: DIV
5602: ARRAY
5603: PPUSH
5604: CALL 7720 0 2
5608: ST_TO_ADDR
5609: GO 6492
5611: LD_INT 17
5613: DOUBLE
5614: EQUAL
5615: IFTRUE 5667
5617: LD_INT 27
5619: DOUBLE
5620: EQUAL
5621: IFTRUE 5667
5623: LD_INT 37
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5667
5629: LD_INT 47
5631: DOUBLE
5632: EQUAL
5633: IFTRUE 5667
5635: LD_INT 57
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5667
5641: LD_INT 67
5643: DOUBLE
5644: EQUAL
5645: IFTRUE 5667
5647: LD_INT 77
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5667
5653: LD_INT 87
5655: DOUBLE
5656: EQUAL
5657: IFTRUE 5667
5659: LD_INT 97
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5776
5667: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: LD_INT 14
5675: PUSH
5676: LD_INT 16
5678: PUSH
5679: LD_INT 18
5681: PUSH
5682: LD_INT 22
5684: PUSH
5685: LD_INT 24
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 28
5693: PUSH
5694: LD_INT 32
5696: PUSH
5697: LD_INT 35
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: DIV
5719: ARRAY
5720: PPUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 3
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: LD_INT 6
5735: PUSH
5736: LD_INT 7
5738: PUSH
5739: LD_INT 8
5741: PUSH
5742: LD_INT 9
5744: PUSH
5745: LD_INT 10
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: LD_INT 10
5766: DIV
5767: ARRAY
5768: PPUSH
5769: CALL 8140 0 2
5773: ST_TO_ADDR
5774: GO 6492
5776: LD_INT 18
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5832
5782: LD_INT 28
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5832
5788: LD_INT 38
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5832
5794: LD_INT 48
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5832
5800: LD_INT 58
5802: DOUBLE
5803: EQUAL
5804: IFTRUE 5832
5806: LD_INT 68
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5832
5812: LD_INT 78
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5832
5818: LD_INT 88
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5832
5824: LD_INT 98
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5941
5832: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_INT 9
5840: PUSH
5841: LD_INT 12
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 18
5849: PUSH
5850: LD_INT 21
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 27
5858: PUSH
5859: LD_INT 30
5861: PUSH
5862: LD_INT 33
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 10
5883: DIV
5884: ARRAY
5885: PPUSH
5886: LD_INT 2
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: LD_INT 4
5894: PUSH
5895: LD_INT 5
5897: PUSH
5898: LD_INT 6
5900: PUSH
5901: LD_INT 7
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: LD_INT 9
5909: PUSH
5910: LD_INT 10
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 10
5931: DIV
5932: ARRAY
5933: PPUSH
5934: CALL 8241 0 2
5938: ST_TO_ADDR
5939: GO 6492
5941: LD_INT 19
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5997
5947: LD_INT 29
5949: DOUBLE
5950: EQUAL
5951: IFTRUE 5997
5953: LD_INT 39
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5997
5959: LD_INT 49
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5997
5965: LD_INT 59
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5997
5971: LD_INT 69
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5997
5977: LD_INT 79
5979: DOUBLE
5980: EQUAL
5981: IFTRUE 5997
5983: LD_INT 89
5985: DOUBLE
5986: EQUAL
5987: IFTRUE 5997
5989: LD_INT 99
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6208
5997: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: LD_INT 10
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: LD_INT 17
6020: PUSH
6021: LD_INT 19
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 23
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: LD_INT 10
6048: DIV
6049: ARRAY
6050: PPUSH
6051: LD_INT 2
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 7
6068: PUSH
6069: LD_INT 8
6071: PUSH
6072: LD_INT 9
6074: PUSH
6075: LD_INT 10
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_INT 10
6096: DIV
6097: ARRAY
6098: PPUSH
6099: CALL 8241 0 2
6103: PUSH
6104: LD_INT 4
6106: PUSH
6107: LD_INT 7
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 17
6121: PUSH
6122: LD_INT 19
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 10
6149: DIV
6150: ARRAY
6151: PPUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: LD_INT 6
6166: PUSH
6167: LD_INT 7
6169: PUSH
6170: LD_INT 8
6172: PUSH
6173: LD_INT 9
6175: PUSH
6176: LD_INT 10
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_INT 10
6197: DIV
6198: ARRAY
6199: PPUSH
6200: CALL 7300 0 2
6204: ADD
6205: ST_TO_ADDR
6206: GO 6492
6208: LD_INT 20
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6264
6214: LD_INT 30
6216: DOUBLE
6217: EQUAL
6218: IFTRUE 6264
6220: LD_INT 40
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6264
6226: LD_INT 50
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6264
6232: LD_INT 60
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6264
6238: LD_INT 70
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6264
6244: LD_INT 80
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6264
6250: LD_INT 90
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6264
6256: LD_INT 100
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6491
6264: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_INT 4
6272: PUSH
6273: LD_INT 7
6275: PUSH
6276: LD_INT 10
6278: PUSH
6279: LD_INT 13
6281: PUSH
6282: LD_INT 14
6284: PUSH
6285: LD_INT 17
6287: PUSH
6288: LD_INT 19
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 10
6315: DIVREAL
6316: PUSH
6317: LD_INT 1
6319: MINUS
6320: ARRAY
6321: PPUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: LD_INT 6
6336: PUSH
6337: LD_INT 7
6339: PUSH
6340: LD_INT 8
6342: PUSH
6343: LD_INT 9
6345: PUSH
6346: LD_INT 10
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 10
6367: DIVREAL
6368: PUSH
6369: LD_INT 1
6371: MINUS
6372: ARRAY
6373: PPUSH
6374: CALL 8140 0 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 10
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 17
6396: PUSH
6397: LD_INT 19
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_INT 10
6424: DIVREAL
6425: PUSH
6426: LD_INT 1
6428: MINUS
6429: ARRAY
6430: PPUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 9
6454: PUSH
6455: LD_INT 10
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: LD_INT 10
6476: DIVREAL
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: ARRAY
6482: PPUSH
6483: CALL 7720 0 2
6487: ADD
6488: ST_TO_ADDR
6489: GO 6492
6491: POP
// for i in result do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: FOR_IN
6503: IFFALSE 6676
// begin a := rand ( 1 , 2 ) ;
6505: LD_ADDR_VAR 0 8
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: ST_TO_ADDR
// if a = 1 then
6521: LD_VAR 0 8
6525: PUSH
6526: LD_INT 1
6528: EQUAL
6529: IFFALSE 6545
// SetDir ( i , 3 ) else
6531: LD_VAR 0 3
6535: PPUSH
6536: LD_INT 3
6538: PPUSH
6539: CALL_OW 233
6543: GO 6557
// SetDir ( i , 5 ) ;
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 5
6552: PPUSH
6553: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
6557: LD_VAR 0 3
6561: PPUSH
6562: LD_VAR 0 7
6566: PUSH
6567: LD_VAR 0 8
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 49
// if GetControl ( i ) = control_manual then
6580: LD_VAR 0 3
6584: PPUSH
6585: CALL_OW 263
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6639
// begin uc_nation := GetNation ( i ) ;
6595: LD_ADDR_OWVAR 21
6599: PUSH
6600: LD_VAR 0 3
6604: PPUSH
6605: CALL_OW 248
6609: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
6610: LD_INT 0
6612: PPUSH
6613: LD_INT 3
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
6625: CALL_OW 44
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: CALL_OW 52
// end ; l := l + 1 ;
6639: LD_ADDR_VAR 0 9
6643: PUSH
6644: LD_VAR 0 9
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: ST_TO_ADDR
// if l mod 10 = 0 then
6653: LD_VAR 0 9
6657: PUSH
6658: LD_INT 10
6660: MOD
6661: PUSH
6662: LD_INT 0
6664: EQUAL
6665: IFFALSE 6674
// Wait ( 0 0$02 ) ;
6667: LD_INT 70
6669: PPUSH
6670: CALL_OW 67
// end ;
6674: GO 6502
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 2
6682: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
6683: LD_INT 0
6685: PPUSH
6686: PPUSH
6687: PPUSH
// uc_nation := nation_nature ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// for i = 1 to n do
6696: LD_ADDR_VAR 0 4
6700: PUSH
6701: DOUBLE
6702: LD_INT 1
6704: DEC
6705: ST_TO_ADDR
6706: LD_VAR 0 1
6710: PUSH
6711: FOR_TO
6712: IFFALSE 6747
// begin PrepareHuman ( false , class_apeman , skill ) ;
6714: LD_INT 0
6716: PPUSH
6717: LD_INT 12
6719: PPUSH
6720: LD_VAR 0 2
6724: PPUSH
6725: CALL_OW 380
// result := result ^ CreateHuman ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 3
6738: PUSH
6739: CALL_OW 44
6743: ADD
6744: ST_TO_ADDR
// end ;
6745: GO 6711
6747: POP
6748: POP
// end ;
6749: LD_VAR 0 3
6753: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
6754: LD_INT 0
6756: PPUSH
6757: PPUSH
6758: PPUSH
// uc_nation := nation_nature ;
6759: LD_ADDR_OWVAR 21
6763: PUSH
6764: LD_INT 0
6766: ST_TO_ADDR
// for i = 1 to n do
6767: LD_ADDR_VAR 0 4
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_VAR 0 1
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6818
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
6785: LD_INT 0
6787: PPUSH
6788: LD_INT 15
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 380
// result := result ^ CreateHuman ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_VAR 0 3
6809: PUSH
6810: CALL_OW 44
6814: ADD
6815: ST_TO_ADDR
// end ;
6816: GO 6782
6818: POP
6819: POP
// end ;
6820: LD_VAR 0 3
6824: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
6825: LD_INT 0
6827: PPUSH
6828: PPUSH
6829: PPUSH
// for i = 1 to n do
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: DOUBLE
6836: LD_INT 1
6838: DEC
6839: ST_TO_ADDR
6840: LD_VAR 0 1
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6897
// begin uc_nation := rand ( 1 , 3 ) ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 12
6863: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6864: LD_INT 0
6866: PPUSH
6867: LD_INT 1
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 380
// result := result ^ CreateHuman ;
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_VAR 0 3
6888: PUSH
6889: CALL_OW 44
6893: ADD
6894: ST_TO_ADDR
// end ;
6895: GO 6845
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 3
6903: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
// for i = 1 to n do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 1
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7293
// begin uc_nation := rand ( 1 , 3 ) ;
6931: LD_ADDR_OWVAR 21
6935: PUSH
6936: LD_INT 1
6938: PPUSH
6939: LD_INT 3
6941: PPUSH
6942: CALL_OW 12
6946: ST_TO_ADDR
// case uc_nation of 1 :
6947: LD_OWVAR 21
6951: PUSH
6952: LD_INT 1
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7023
6960: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
6961: LD_ADDR_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
6976: LD_ADDR_VAR 0 7
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
6991: LD_ADDR_VAR 0 8
6995: PUSH
6996: LD_INT 1
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7006: LD_ADDR_VAR 0 9
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: LD_INT 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; 2 :
7021: GO 7158
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7094
7031: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_INT 12
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7047: LD_ADDR_VAR 0 7
7051: PUSH
7052: LD_INT 23
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: LD_INT 1
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7077: LD_ADDR_VAR 0 9
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// end ; 3 :
7092: GO 7158
7094: LD_INT 3
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7157
7102: POP
// begin chassis := [ ru_medium_wheeled ] ;
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: EMPTY
7112: LIST
7113: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7114: LD_ADDR_VAR 0 7
7118: PUSH
7119: LD_INT 42
7121: PUSH
7122: LD_INT 44
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7129: LD_ADDR_VAR 0 8
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: ST_TO_ADDR
// end ; end ;
7155: GO 7158
7157: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7158: LD_ADDR_OWVAR 37
7162: PUSH
7163: LD_VAR 0 6
7167: PUSH
7168: LD_INT 1
7170: PPUSH
7171: LD_VAR 0 6
7175: PPUSH
7176: CALL_OW 12
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_VAR 0 9
7191: PUSH
7192: LD_INT 1
7194: PPUSH
7195: LD_VAR 0 9
7199: PPUSH
7200: CALL_OW 12
7204: ARRAY
7205: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7206: LD_ADDR_OWVAR 38
7210: PUSH
7211: LD_VAR 0 8
7215: PUSH
7216: LD_INT 1
7218: PPUSH
7219: LD_VAR 0 8
7223: PPUSH
7224: CALL_OW 12
7228: ARRAY
7229: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7230: LD_ADDR_OWVAR 40
7234: PUSH
7235: LD_VAR 0 7
7239: PUSH
7240: LD_INT 1
7242: PPUSH
7243: LD_VAR 0 7
7247: PPUSH
7248: CALL_OW 12
7252: ARRAY
7253: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7254: LD_ADDR_OWVAR 41
7258: PUSH
7259: LD_INT 100
7261: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PLUS
7280: PPUSH
7281: CALL_OW 45
7285: PPUSH
7286: CALL_OW 2
7290: ST_TO_ADDR
// end ;
7291: GO 6928
7293: POP
7294: POP
// end ;
7295: LD_VAR 0 3
7299: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
// for i = 1 to n do
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: DOUBLE
7315: LD_INT 1
7317: DEC
7318: ST_TO_ADDR
7319: LD_VAR 0 1
7323: PUSH
7324: FOR_TO
7325: IFFALSE 7713
// begin uc_nation := rand ( 1 , 3 ) ;
7327: LD_ADDR_OWVAR 21
7331: PUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 3
7337: PPUSH
7338: CALL_OW 12
7342: ST_TO_ADDR
// case uc_nation of 1 :
7343: LD_OWVAR 21
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7427
7356: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7357: LD_ADDR_VAR 0 6
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7372: LD_ADDR_VAR 0 7
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 5
7382: PUSH
7383: LD_INT 9
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7391: LD_ADDR_VAR 0 8
7395: PUSH
7396: LD_INT 1
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// end ; 2 :
7425: GO 7578
7427: LD_INT 2
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7506
7435: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_INT 13
7443: PUSH
7444: LD_INT 14
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7451: LD_ADDR_VAR 0 7
7455: PUSH
7456: LD_INT 27
7458: PUSH
7459: LD_INT 26
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7470: LD_ADDR_VAR 0 8
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 5
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7485: LD_ADDR_VAR 0 9
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// end ; 3 :
7504: GO 7578
7506: LD_INT 3
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7577
7514: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7515: LD_ADDR_VAR 0 6
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 21
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7530: LD_ADDR_VAR 0 7
7534: PUSH
7535: LD_INT 44
7537: PUSH
7538: LD_INT 43
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7545: LD_ADDR_VAR 0 8
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// end ; end ;
7575: GO 7578
7577: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7578: LD_ADDR_OWVAR 37
7582: PUSH
7583: LD_VAR 0 6
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 6
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7602: LD_ADDR_OWVAR 39
7606: PUSH
7607: LD_VAR 0 9
7611: PUSH
7612: LD_INT 1
7614: PPUSH
7615: LD_VAR 0 9
7619: PPUSH
7620: CALL_OW 12
7624: ARRAY
7625: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7626: LD_ADDR_OWVAR 38
7630: PUSH
7631: LD_VAR 0 8
7635: PUSH
7636: LD_INT 1
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 12
7648: ARRAY
7649: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7650: LD_ADDR_OWVAR 40
7654: PUSH
7655: LD_VAR 0 7
7659: PUSH
7660: LD_INT 1
7662: PPUSH
7663: LD_VAR 0 7
7667: PPUSH
7668: CALL_OW 12
7672: ARRAY
7673: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7674: LD_ADDR_OWVAR 41
7678: PUSH
7679: LD_INT 100
7681: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7682: LD_ADDR_VAR 0 3
7686: PUSH
7687: LD_VAR 0 3
7691: PPUSH
7692: LD_VAR 0 3
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: PPUSH
7701: CALL_OW 45
7705: PPUSH
7706: CALL_OW 2
7710: ST_TO_ADDR
// end ;
7711: GO 7324
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 3
7719: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// for i = 1 to n do
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: DOUBLE
7735: LD_INT 1
7737: DEC
7738: ST_TO_ADDR
7739: LD_VAR 0 1
7743: PUSH
7744: FOR_TO
7745: IFFALSE 8133
// begin uc_nation := rand ( 1 , 3 ) ;
7747: LD_ADDR_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_INT 3
7757: PPUSH
7758: CALL_OW 12
7762: ST_TO_ADDR
// case uc_nation of 1 :
7763: LD_OWVAR 21
7767: PUSH
7768: LD_INT 1
7770: DOUBLE
7771: EQUAL
7772: IFTRUE 7776
7774: GO 7843
7776: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_INT 4
7784: PUSH
7785: LD_INT 5
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: LD_INT 6
7799: PUSH
7800: LD_INT 7
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7811: LD_ADDR_VAR 0 8
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7826: LD_ADDR_VAR 0 9
7830: PUSH
7831: LD_INT 1
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// end ; 2 :
7841: GO 7998
7843: LD_INT 2
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7926
7851: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7852: LD_ADDR_VAR 0 6
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_INT 27
7874: PUSH
7875: LD_INT 26
7877: PUSH
7878: LD_INT 28
7880: PUSH
7881: LD_INT 29
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7890: LD_ADDR_VAR 0 8
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7905: LD_ADDR_VAR 0 9
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: ST_TO_ADDR
// end ; 3 :
7924: GO 7998
7926: LD_INT 3
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: LD_INT 23
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
7950: LD_ADDR_VAR 0 7
7954: PUSH
7955: LD_INT 46
7957: PUSH
7958: LD_INT 45
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7965: LD_ADDR_VAR 0 8
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
7980: LD_ADDR_VAR 0 9
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: LD_INT 3
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7998: LD_ADDR_OWVAR 37
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_VAR 0 6
8015: PPUSH
8016: CALL_OW 12
8020: ARRAY
8021: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8022: LD_ADDR_OWVAR 39
8026: PUSH
8027: LD_VAR 0 9
8031: PUSH
8032: LD_INT 1
8034: PPUSH
8035: LD_VAR 0 9
8039: PPUSH
8040: CALL_OW 12
8044: ARRAY
8045: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8046: LD_ADDR_OWVAR 38
8050: PUSH
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 1
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 12
8068: ARRAY
8069: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8070: LD_ADDR_OWVAR 40
8074: PUSH
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 7
8087: PPUSH
8088: CALL_OW 12
8092: ARRAY
8093: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8094: LD_ADDR_OWVAR 41
8098: PUSH
8099: LD_INT 100
8101: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8102: LD_ADDR_VAR 0 3
8106: PUSH
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 1
8119: PLUS
8120: PPUSH
8121: CALL_OW 45
8125: PPUSH
8126: CALL_OW 2
8130: ST_TO_ADDR
// end ;
8131: GO 7744
8133: POP
8134: POP
// end ;
8135: LD_VAR 0 3
8139: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// for i = 1 to n do
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 1
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8234
// begin uc_nation := rand ( 1 , 3 ) ;
8162: LD_ADDR_OWVAR 21
8166: PUSH
8167: LD_INT 1
8169: PPUSH
8170: LD_INT 3
8172: PPUSH
8173: CALL_OW 12
8177: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8178: LD_INT 0
8180: PPUSH
8181: LD_INT 8
8183: PUSH
8184: LD_INT 9
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 1
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: CALL_OW 12
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 380
// result := result ^ CreateHuman ;
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_VAR 0 3
8225: PUSH
8226: CALL_OW 44
8230: ADD
8231: ST_TO_ADDR
// end ;
8232: GO 8159
8234: POP
8235: POP
// end ;
8236: LD_VAR 0 3
8240: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
// for i = 1 to n do
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 1
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8662
// begin uc_nation := rand ( 1 , 3 ) ;
8268: LD_ADDR_OWVAR 21
8272: PUSH
8273: LD_INT 1
8275: PPUSH
8276: LD_INT 3
8278: PPUSH
8279: CALL_OW 12
8283: ST_TO_ADDR
// case uc_nation of 1 :
8284: LD_OWVAR 21
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8370
8297: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8298: LD_ADDR_VAR 0 6
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8313: LD_ADDR_VAR 0 7
8317: PUSH
8318: LD_INT 6
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 10
8326: PUSH
8327: LD_EXP 17
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8338: LD_ADDR_VAR 0 8
8342: PUSH
8343: LD_INT 1
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// end ; 2 :
8368: GO 8527
8370: LD_INT 2
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8451
8378: POP
// begin chassis := [ ar_half_tracked ] ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 14
8386: PUSH
8387: EMPTY
8388: LIST
8389: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8390: LD_ADDR_VAR 0 7
8394: PUSH
8395: LD_EXP 18
8399: PUSH
8400: LD_INT 26
8402: PUSH
8403: LD_INT 28
8405: PUSH
8406: LD_INT 29
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8430: LD_ADDR_VAR 0 9
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: ST_TO_ADDR
// end ; 3 :
8449: GO 8527
8451: LD_INT 3
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8526
8459: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8460: LD_ADDR_VAR 0 6
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 24
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8475: LD_ADDR_VAR 0 7
8479: PUSH
8480: LD_INT 46
8482: PUSH
8483: LD_INT 45
8485: PUSH
8486: LD_INT 49
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8494: LD_ADDR_VAR 0 8
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8509: LD_ADDR_VAR 0 9
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: ST_TO_ADDR
// end ; end ;
8524: GO 8527
8526: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8527: LD_ADDR_OWVAR 37
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: PPUSH
8540: LD_VAR 0 6
8544: PPUSH
8545: CALL_OW 12
8549: ARRAY
8550: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8551: LD_ADDR_OWVAR 39
8555: PUSH
8556: LD_VAR 0 9
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_VAR 0 9
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8575: LD_ADDR_OWVAR 38
8579: PUSH
8580: LD_VAR 0 8
8584: PUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 8
8592: PPUSH
8593: CALL_OW 12
8597: ARRAY
8598: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8599: LD_ADDR_OWVAR 40
8603: PUSH
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 7
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8623: LD_ADDR_OWVAR 41
8627: PUSH
8628: LD_INT 100
8630: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 1
8648: PLUS
8649: PPUSH
8650: CALL_OW 45
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
// end ;
8660: GO 8265
8662: POP
8663: POP
// end ; end_of_file
8664: LD_VAR 0 3
8668: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
8669: LD_INT 22
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: IFFALSE 9189
8685: GO 8687
8687: DISABLE
8688: LD_INT 0
8690: PPUSH
8691: PPUSH
8692: PPUSH
// begin enable ;
8693: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
8694: LD_ADDR_VAR 0 3
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// for i in tmp do
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: FOR_IN
8725: IFFALSE 9187
// begin case GetType ( i ) of unit_human :
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 247
8736: PUSH
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8944
8745: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 256
8755: PUSH
8756: LD_INT 250
8758: LESS
8759: PUSH
8760: LD_INT 5
8762: PPUSH
8763: LD_INT 7
8765: PPUSH
8766: CALL_OW 321
8770: PUSH
8771: LD_INT 2
8773: NONEQUAL
8774: AND
8775: IFFALSE 8779
// continue ;
8777: GO 8724
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 257
8788: PUSH
8789: LD_INT 12
8791: PUSH
8792: LD_INT 15
8794: PUSH
8795: LD_INT 16
8797: PUSH
8798: LD_INT 17
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 9
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8869
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 22
8840: PUSH
8841: LD_OWVAR 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: PPUSH
8855: LD_VAR 0 1
8859: PPUSH
8860: CALL_OW 74
8864: PPUSH
8865: CALL_OW 115
// if GetClass ( i ) = 3 then
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 257
8878: PUSH
8879: LD_INT 3
8881: EQUAL
8882: IFFALSE 8942
// if IsInUnit ( i ) then
8884: LD_VAR 0 1
8888: PPUSH
8889: CALL_OW 310
8893: IFFALSE 8933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_OWVAR 2
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 1
8921: PPUSH
8922: CALL_OW 74
8926: PPUSH
8927: CALL_OW 115
8931: GO 8942
// ComEspace ( i ) ;
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL 1933 0 1
// end ; unit_vehicle :
8942: GO 9185
8944: LD_INT 2
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 9184
8952: POP
// begin if GetLives ( i ) > 250 then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 256
8962: PUSH
8963: LD_INT 250
8965: GREATER
8966: IFFALSE 9182
// begin if GetWeapon ( i ) = us_artillery then
8968: LD_VAR 0 1
8972: PPUSH
8973: CALL_OW 264
8977: PUSH
8978: LD_EXP 17
8982: EQUAL
8983: IFFALSE 9051
// begin if IsInArea ( i , zoneOut ) then
8985: LD_VAR 0 1
8989: PPUSH
8990: LD_INT 4
8992: PPUSH
8993: CALL_OW 308
8997: IFFALSE 9013
// ComMoveToArea ( i , zoneBorder ) else
8999: LD_VAR 0 1
9003: PPUSH
9004: LD_INT 9
9006: PPUSH
9007: CALL_OW 113
9011: GO 9049
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_INT 22
9020: PUSH
9021: LD_OWVAR 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PPUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 74
9044: PPUSH
9045: CALL_OW 115
// end else
9049: GO 9182
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 264
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_EXP 14
9071: PUSH
9072: LD_INT 49
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: IN
9081: IFFALSE 9111
// begin if IsInArea ( i , zoneOut ) then
9083: LD_VAR 0 1
9087: PPUSH
9088: LD_INT 4
9090: PPUSH
9091: CALL_OW 308
9095: IFFALSE 9109
// ComSpecMove ( i , specPos ) ;
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_INT 8
9104: PPUSH
9105: CALL 1979 0 2
// end else
9109: GO 9182
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 264
9120: PUSH
9121: LD_EXP 18
9125: PUSH
9126: LD_INT 29
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: IN
9133: IFFALSE 9146
// ComSpecAttack ( i ) else
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL 2407 0 1
9144: GO 9182
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: LD_INT 22
9153: PUSH
9154: LD_OWVAR 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: PPUSH
9168: LD_VAR 0 1
9172: PPUSH
9173: CALL_OW 74
9177: PPUSH
9178: CALL_OW 115
// end ; end ; end ;
9182: GO 9185
9184: POP
// end ;
9185: GO 8724
9187: POP
9188: POP
// end ; end_of_file
9189: PPOPN 3
9191: END
// export function InitDisplay ; begin
9192: LD_INT 0
9194: PPUSH
// while true do
9195: LD_INT 1
9197: IFFALSE 9284
// begin if waveNumber < 100 then
9199: LD_EXP 5
9203: PUSH
9204: LD_INT 100
9206: LESS
9207: IFFALSE 9258
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9209: LD_ADDR_OWVAR 47
9213: PUSH
9214: LD_STRING #Tick
9216: PUSH
9217: LD_OWVAR 1
9221: PUSH
9222: LD_STRING #Points
9224: PUSH
9225: LD_EXP 2
9229: PUSH
9230: LD_STRING #Attack
9232: PUSH
9233: LD_EXP 4
9237: PUSH
9238: LD_STRING #Wave
9240: PUSH
9241: LD_EXP 5
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
9256: GO 9275
// Display_Strings := [ #Win , points ] ;
9258: LD_ADDR_OWVAR 47
9262: PUSH
9263: LD_STRING #Win
9265: PUSH
9266: LD_EXP 2
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9275: LD_INT 35
9277: PPUSH
9278: CALL_OW 67
// end ;
9282: GO 9195
// end ; end_of_file
9284: LD_VAR 0 1
9288: RET
// export function InitBonus ; var i , chance ; begin
9289: LD_INT 0
9291: PPUSH
9292: PPUSH
9293: PPUSH
// chance := rand ( 1 , 99 ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_INT 1
9301: PPUSH
9302: LD_INT 99
9304: PPUSH
9305: CALL_OW 12
9309: ST_TO_ADDR
// case chance of 1 .. 10 :
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 1
9317: DOUBLE
9318: GREATEREQUAL
9319: IFFALSE 9327
9321: LD_INT 10
9323: DOUBLE
9324: LESSEQUAL
9325: IFTRUE 9329
9327: GO 9340
9329: POP
// i := 5 ; 11 .. 25 :
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_INT 5
9337: ST_TO_ADDR
9338: GO 9441
9340: LD_INT 11
9342: DOUBLE
9343: GREATEREQUAL
9344: IFFALSE 9352
9346: LD_INT 25
9348: DOUBLE
9349: LESSEQUAL
9350: IFTRUE 9354
9352: GO 9365
9354: POP
// i := 3 ; 26 .. 40 :
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: LD_INT 3
9362: ST_TO_ADDR
9363: GO 9441
9365: LD_INT 26
9367: DOUBLE
9368: GREATEREQUAL
9369: IFFALSE 9377
9371: LD_INT 40
9373: DOUBLE
9374: LESSEQUAL
9375: IFTRUE 9379
9377: GO 9390
9379: POP
// i := 2 ; 41 .. 60 :
9380: LD_ADDR_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ST_TO_ADDR
9388: GO 9441
9390: LD_INT 41
9392: DOUBLE
9393: GREATEREQUAL
9394: IFFALSE 9402
9396: LD_INT 60
9398: DOUBLE
9399: LESSEQUAL
9400: IFTRUE 9404
9402: GO 9415
9404: POP
// i := 4 ; 61 .. 99 :
9405: LD_ADDR_VAR 0 2
9409: PUSH
9410: LD_INT 4
9412: ST_TO_ADDR
9413: GO 9441
9415: LD_INT 61
9417: DOUBLE
9418: GREATEREQUAL
9419: IFFALSE 9427
9421: LD_INT 99
9423: DOUBLE
9424: LESSEQUAL
9425: IFTRUE 9429
9427: GO 9440
9429: POP
// i := 1 ; end ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
9438: GO 9441
9440: POP
// case i of 1 :
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9543
9454: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9455: LD_INT 22
9457: PUSH
9458: LD_OWVAR 2
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 12
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 25
9482: PUSH
9483: LD_INT 16
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 25
9492: PUSH
9493: LD_INT 15
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 25
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PUSH
9526: LD_INT 10
9528: GREATEREQUAL
9529: IFFALSE 9537
// BonusIV else
9531: CALL 10116 0 0
9535: GO 9541
// BonusI ;
9537: CALL 9621 0 0
// end ; 2 :
9541: GO 9616
9543: LD_INT 2
9545: DOUBLE
9546: EQUAL
9547: IFTRUE 9551
9549: GO 9558
9551: POP
// begin BonusII ;
9552: CALL 9794 0 0
// end ; 3 :
9556: GO 9616
9558: LD_INT 3
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9573
9566: POP
// begin BonusIII ;
9567: CALL 9942 0 0
// end ; 4 :
9571: GO 9616
9573: LD_INT 4
9575: DOUBLE
9576: EQUAL
9577: IFTRUE 9581
9579: GO 9588
9581: POP
// begin BonusIV ;
9582: CALL 10116 0 0
// end ; 5 :
9586: GO 9616
9588: LD_INT 5
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9615
9596: POP
// begin if graveyard then
9597: LD_EXP 8
9601: IFFALSE 9609
// BonusV else
9603: CALL 10534 0 0
9607: GO 9613
// BonusIII ;
9609: CALL 9942 0 0
// end ; end ;
9613: GO 9616
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function BonusI ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// case Query ( AddGift1 ) of 1 :
9625: LD_STRING AddGift1
9627: PPUSH
9628: CALL_OW 97
9632: PUSH
9633: LD_INT 1
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9720
9641: POP
// begin for i = 1 to 3 do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_INT 3
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9716
// begin uc_side := your_side ;
9658: LD_ADDR_OWVAR 20
9662: PUSH
9663: LD_OWVAR 2
9667: ST_TO_ADDR
// uc_nation := 0 ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9676: LD_INT 0
9678: PPUSH
9679: LD_INT 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
9689: CALL_OW 44
9693: PPUSH
9694: LD_EXP 9
9698: PPUSH
9699: LD_EXP 10
9703: PPUSH
9704: LD_INT 15
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 50
// end ;
9714: GO 9655
9716: POP
9717: POP
// end ; 2 :
9718: GO 9789
9720: LD_INT 2
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9770
9728: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
9729: LD_EXP 11
9733: PPUSH
9734: CALL_OW 274
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: LD_EXP 11
9746: PPUSH
9747: CALL_OW 274
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 275
9759: PUSH
9760: LD_INT 100
9762: PLUS
9763: PPUSH
9764: CALL_OW 277
// end ; 3 :
9768: GO 9789
9770: LD_INT 3
9772: DOUBLE
9773: EQUAL
9774: IFTRUE 9778
9776: GO 9788
9778: POP
// begin SetTeamExp ( 2 ) ;
9779: LD_INT 2
9781: PPUSH
9782: CALL 940 0 1
// end ; end ;
9786: GO 9789
9788: POP
// end ;
9789: LD_VAR 0 1
9793: RET
// export function BonusII ; var i ; begin
9794: LD_INT 0
9796: PPUSH
9797: PPUSH
// case Query ( AddGift2 ) of 1 :
9798: LD_STRING AddGift2
9800: PPUSH
9801: CALL_OW 97
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9856
9814: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
9815: LD_EXP 11
9819: PPUSH
9820: CALL_OW 274
9824: PPUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_EXP 11
9832: PPUSH
9833: CALL_OW 274
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 275
9845: PUSH
9846: LD_INT 500
9848: PLUS
9849: PPUSH
9850: CALL_OW 277
// end ; 2 :
9854: GO 9937
9856: LD_INT 2
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9874
9864: POP
// begin SetTeamExp ( 3 ) ;
9865: LD_INT 3
9867: PPUSH
9868: CALL 940 0 1
// end ; 3 :
9872: GO 9937
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 9936
9882: POP
// begin uc_side = your_side ;
9883: LD_ADDR_OWVAR 20
9887: PUSH
9888: LD_OWVAR 2
9892: ST_TO_ADDR
// uc_nation = nation_russian ;
9893: LD_ADDR_OWVAR 21
9897: PUSH
9898: LD_INT 3
9900: ST_TO_ADDR
// vc_chassis = 25 ;
9901: LD_ADDR_OWVAR 37
9905: PUSH
9906: LD_INT 25
9908: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
9909: CALL_OW 45
9913: PPUSH
9914: LD_EXP 9
9918: PPUSH
9919: LD_EXP 10
9923: PPUSH
9924: LD_INT 15
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 50
// end ; end ;
9934: GO 9937
9936: POP
// end ;
9937: LD_VAR 0 1
9941: RET
// export function BonusIII ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// case Query ( AddGift3 ) of 1 :
9946: LD_STRING AddGift3
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10004
9962: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
9963: LD_EXP 11
9967: PPUSH
9968: CALL_OW 274
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_EXP 11
9980: PPUSH
9981: CALL_OW 274
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 275
9993: PUSH
9994: LD_INT 1000
9996: PLUS
9997: PPUSH
9998: CALL_OW 277
// end ; 2 :
10002: GO 10111
10004: LD_INT 2
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10024
10012: POP
// begin PrepareGuards ( waveNumber ) ;
10013: LD_EXP 5
10017: PPUSH
10018: CALL 1086 0 1
// end ; 3 :
10022: GO 10111
10024: LD_INT 3
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10110
10032: POP
// begin uc_side = your_side ;
10033: LD_ADDR_OWVAR 20
10037: PUSH
10038: LD_OWVAR 2
10042: ST_TO_ADDR
// uc_nation = nation_american ;
10043: LD_ADDR_OWVAR 21
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// vc_chassis = us_morphling ;
10051: LD_ADDR_OWVAR 37
10055: PUSH
10056: LD_INT 5
10058: ST_TO_ADDR
// vc_engine := engine_siberite ;
10059: LD_ADDR_OWVAR 39
10063: PUSH
10064: LD_INT 3
10066: ST_TO_ADDR
// vc_control := control_computer ;
10067: LD_ADDR_OWVAR 38
10071: PUSH
10072: LD_INT 3
10074: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10075: LD_ADDR_OWVAR 40
10079: PUSH
10080: LD_INT 8
10082: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10083: CALL_OW 45
10087: PPUSH
10088: LD_EXP 9
10092: PPUSH
10093: LD_EXP 10
10097: PPUSH
10098: LD_INT 15
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 50
// end ; end ;
10108: GO 10111
10110: POP
// end ;
10111: LD_VAR 0 1
10115: RET
// export function BonusIV ; var i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
// case Query ( AddGift4 ) of 1 :
10120: LD_STRING AddGift4
10122: PPUSH
10123: CALL_OW 97
10127: PUSH
10128: LD_INT 1
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10460
10136: POP
// begin i := rand ( 1 , 3 ) ;
10137: LD_ADDR_VAR 0 2
10141: PUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: CALL_OW 12
10152: ST_TO_ADDR
// uc_side := your_side ;
10153: LD_ADDR_OWVAR 20
10157: PUSH
10158: LD_OWVAR 2
10162: ST_TO_ADDR
// case i of 1 :
10163: LD_VAR 0 2
10167: PUSH
10168: LD_INT 1
10170: DOUBLE
10171: EQUAL
10172: IFTRUE 10176
10174: GO 10263
10176: POP
// begin uc_nation := nation_arabian ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10185: LD_ADDR_OWVAR 37
10189: PUSH
10190: LD_INT 14
10192: ST_TO_ADDR
// vc_engine := engine_combustion ;
10193: LD_ADDR_OWVAR 39
10197: PUSH
10198: LD_INT 1
10200: ST_TO_ADDR
// vc_control := control_manual ;
10201: LD_ADDR_OWVAR 38
10205: PUSH
10206: LD_INT 1
10208: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10209: LD_ADDR_OWVAR 40
10213: PUSH
10214: LD_INT 27
10216: PUSH
10217: LD_INT 28
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 1
10226: PPUSH
10227: LD_INT 2
10229: PPUSH
10230: CALL_OW 12
10234: ARRAY
10235: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10236: CALL_OW 45
10240: PPUSH
10241: LD_EXP 9
10245: PPUSH
10246: LD_EXP 10
10250: PPUSH
10251: LD_INT 15
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 50
// end ; 2 :
10261: GO 10458
10263: LD_INT 2
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10362
10271: POP
// begin uc_nation := nation_american ;
10272: LD_ADDR_OWVAR 21
10276: PUSH
10277: LD_INT 1
10279: ST_TO_ADDR
// vc_chassis := us_morphling ;
10280: LD_ADDR_OWVAR 37
10284: PUSH
10285: LD_INT 5
10287: ST_TO_ADDR
// vc_engine := engine_siberite ;
10288: LD_ADDR_OWVAR 39
10292: PUSH
10293: LD_INT 3
10295: ST_TO_ADDR
// vc_control := control_computer ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_INT 3
10303: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10304: LD_ADDR_OWVAR 40
10308: PUSH
10309: LD_INT 12
10311: PUSH
10312: LD_INT 10
10314: PUSH
10315: LD_INT 7
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_INT 3
10328: PPUSH
10329: CALL_OW 12
10333: ARRAY
10334: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10335: CALL_OW 45
10339: PPUSH
10340: LD_EXP 9
10344: PPUSH
10345: LD_EXP 10
10349: PPUSH
10350: LD_INT 15
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 50
// end ; 3 :
10360: GO 10458
10362: LD_INT 3
10364: DOUBLE
10365: EQUAL
10366: IFTRUE 10370
10368: GO 10457
10370: POP
// begin uc_nation := nation_russian ;
10371: LD_ADDR_OWVAR 21
10375: PUSH
10376: LD_INT 3
10378: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10379: LD_ADDR_OWVAR 37
10383: PUSH
10384: LD_INT 22
10386: ST_TO_ADDR
// vc_engine := engine_combustion ;
10387: LD_ADDR_OWVAR 39
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// vc_control := control_manual ;
10395: LD_ADDR_OWVAR 38
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10403: LD_ADDR_OWVAR 40
10407: PUSH
10408: LD_INT 45
10410: PUSH
10411: LD_INT 44
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10430: CALL_OW 45
10434: PPUSH
10435: LD_EXP 9
10439: PPUSH
10440: LD_EXP 10
10444: PPUSH
10445: LD_INT 15
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 50
// end ; end ;
10455: GO 10458
10457: POP
// end ; 2 :
10458: GO 10529
10460: LD_INT 2
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10510
10468: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10469: LD_EXP 11
10473: PPUSH
10474: CALL_OW 274
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: LD_EXP 11
10486: PPUSH
10487: CALL_OW 274
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 275
10499: PUSH
10500: LD_INT 100
10502: PLUS
10503: PPUSH
10504: CALL_OW 277
// end ; 3 :
10508: GO 10529
10510: LD_INT 3
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10528
10518: POP
// begin SetTeamExp ( 2 ) ;
10519: LD_INT 2
10521: PPUSH
10522: CALL 940 0 1
// end ; end ;
10526: GO 10529
10528: POP
// end ;
10529: LD_VAR 0 1
10533: RET
// export function BonusV ; var i , j ; begin
10534: LD_INT 0
10536: PPUSH
10537: PPUSH
10538: PPUSH
// case Query ( AddGift5 ) of 1 :
10539: LD_STRING AddGift5
10541: PPUSH
10542: CALL_OW 97
10546: PUSH
10547: LD_INT 1
10549: DOUBLE
10550: EQUAL
10551: IFTRUE 10555
10553: GO 10899
10555: POP
// begin for j = 1 to 3 do
10556: LD_ADDR_VAR 0 3
10560: PUSH
10561: DOUBLE
10562: LD_INT 1
10564: DEC
10565: ST_TO_ADDR
10566: LD_INT 3
10568: PUSH
10569: FOR_TO
10570: IFFALSE 10895
// begin i := rand ( 1 , 3 ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 1
10579: PPUSH
10580: LD_INT 3
10582: PPUSH
10583: CALL_OW 12
10587: ST_TO_ADDR
// uc_side := your_side ;
10588: LD_ADDR_OWVAR 20
10592: PUSH
10593: LD_OWVAR 2
10597: ST_TO_ADDR
// case i of 1 :
10598: LD_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10698
10611: POP
// begin uc_nation := nation_arabian ;
10612: LD_ADDR_OWVAR 21
10616: PUSH
10617: LD_INT 2
10619: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// vc_engine := engine_combustion ;
10628: LD_ADDR_OWVAR 39
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// vc_control := control_manual ;
10636: LD_ADDR_OWVAR 38
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10644: LD_ADDR_OWVAR 40
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 2
10664: PPUSH
10665: CALL_OW 12
10669: ARRAY
10670: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10671: CALL_OW 45
10675: PPUSH
10676: LD_EXP 9
10680: PPUSH
10681: LD_EXP 10
10685: PPUSH
10686: LD_INT 15
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 50
// end ; 2 :
10696: GO 10893
10698: LD_INT 2
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10797
10706: POP
// begin uc_nation := nation_american ;
10707: LD_ADDR_OWVAR 21
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// vc_chassis := us_morphling ;
10715: LD_ADDR_OWVAR 37
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// vc_engine := engine_siberite ;
10723: LD_ADDR_OWVAR 39
10727: PUSH
10728: LD_INT 3
10730: ST_TO_ADDR
// vc_control := control_computer ;
10731: LD_ADDR_OWVAR 38
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10739: LD_ADDR_OWVAR 40
10743: PUSH
10744: LD_INT 12
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 7
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 1
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: CALL_OW 12
10768: ARRAY
10769: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10770: CALL_OW 45
10774: PPUSH
10775: LD_EXP 9
10779: PPUSH
10780: LD_EXP 10
10784: PPUSH
10785: LD_INT 15
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 50
// end ; 3 :
10795: GO 10893
10797: LD_INT 3
10799: DOUBLE
10800: EQUAL
10801: IFTRUE 10805
10803: GO 10892
10805: POP
// begin uc_nation := nation_russian ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 3
10813: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 22
10821: ST_TO_ADDR
// vc_engine := engine_combustion ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// vc_control := control_manual ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 1
10837: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 45
10845: PUSH
10846: LD_INT 44
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: CALL_OW 12
10863: ARRAY
10864: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10865: CALL_OW 45
10869: PPUSH
10870: LD_EXP 9
10874: PPUSH
10875: LD_EXP 10
10879: PPUSH
10880: LD_INT 15
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 50
// end ; end ;
10890: GO 10893
10892: POP
// end ;
10893: GO 10569
10895: POP
10896: POP
// end ; 2 :
10897: GO 10965
10899: LD_INT 2
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 10949
10907: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10908: LD_EXP 11
10912: PPUSH
10913: CALL_OW 274
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_EXP 11
10925: PPUSH
10926: CALL_OW 274
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 275
10938: PUSH
10939: LD_INT 500
10941: PLUS
10942: PPUSH
10943: CALL_OW 277
// end ; 3 :
10947: GO 10965
10949: LD_INT 3
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10964
10957: POP
// begin GetBack ( ) ;
10958: CALL 1746 0 0
// end ; end ;
10962: GO 10965
10964: POP
// end ; end_of_file
10965: LD_VAR 0 1
10969: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
10970: LD_INT 0
10972: PPUSH
// ar_miner := 81 ;
10973: LD_ADDR_EXP 21
10977: PUSH
10978: LD_INT 81
10980: ST_TO_ADDR
// ar_crane := 88 ;
10981: LD_ADDR_EXP 20
10985: PUSH
10986: LD_INT 88
10988: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10989: LD_ADDR_EXP 15
10993: PUSH
10994: LD_INT 89
10996: ST_TO_ADDR
// us_hack := 99 ;
10997: LD_ADDR_EXP 16
11001: PUSH
11002: LD_INT 99
11004: ST_TO_ADDR
// us_artillery := 97 ;
11005: LD_ADDR_EXP 17
11009: PUSH
11010: LD_INT 97
11012: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11013: LD_ADDR_EXP 18
11017: PUSH
11018: LD_INT 91
11020: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11021: LD_ADDR_EXP 19
11025: PUSH
11026: LD_INT 92
11028: ST_TO_ADDR
// ru_radar := 98 ;
11029: LD_ADDR_EXP 14
11033: PUSH
11034: LD_INT 98
11036: ST_TO_ADDR
// tech_Artillery := 80 ;
11037: LD_ADDR_EXP 22
11041: PUSH
11042: LD_INT 80
11044: ST_TO_ADDR
// tech_RadMat := 81 ;
11045: LD_ADDR_EXP 23
11049: PUSH
11050: LD_INT 81
11052: ST_TO_ADDR
// tech_BasicTools := 82 ;
11053: LD_ADDR_EXP 24
11057: PUSH
11058: LD_INT 82
11060: ST_TO_ADDR
// tech_Cargo := 83 ;
11061: LD_ADDR_EXP 25
11065: PUSH
11066: LD_INT 83
11068: ST_TO_ADDR
// tech_Track := 84 ;
11069: LD_ADDR_EXP 26
11073: PUSH
11074: LD_INT 84
11076: ST_TO_ADDR
// tech_Crane := 85 ;
11077: LD_ADDR_EXP 27
11081: PUSH
11082: LD_INT 85
11084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11085: LD_ADDR_EXP 28
11089: PUSH
11090: LD_INT 86
11092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11093: LD_ADDR_EXP 29
11097: PUSH
11098: LD_INT 87
11100: ST_TO_ADDR
// end ;
11101: LD_VAR 0 1
11105: RET
// every 1 do
11106: GO 11108
11108: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11109: CALL 10970 0 0
11113: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11114: LD_VAR 0 2
11118: PUSH
11119: LD_INT 100
11121: EQUAL
11122: IFFALSE 12071
// begin if not StreamModeActive then
11124: LD_EXP 30
11128: NOT
11129: IFFALSE 11139
// StreamModeActive := true ;
11131: LD_ADDR_EXP 30
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// if p3 = 0 then
11139: LD_VAR 0 3
11143: PUSH
11144: LD_INT 0
11146: EQUAL
11147: IFFALSE 11153
// InitStreamMode ;
11149: CALL 12229 0 0
// if p3 = 1 then
11153: LD_VAR 0 3
11157: PUSH
11158: LD_INT 1
11160: EQUAL
11161: IFFALSE 11171
// sRocket := true ;
11163: LD_ADDR_EXP 35
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// if p3 = 2 then
11171: LD_VAR 0 3
11175: PUSH
11176: LD_INT 2
11178: EQUAL
11179: IFFALSE 11189
// sSpeed := true ;
11181: LD_ADDR_EXP 34
11185: PUSH
11186: LD_INT 1
11188: ST_TO_ADDR
// if p3 = 3 then
11189: LD_VAR 0 3
11193: PUSH
11194: LD_INT 3
11196: EQUAL
11197: IFFALSE 11207
// sEngine := true ;
11199: LD_ADDR_EXP 36
11203: PUSH
11204: LD_INT 1
11206: ST_TO_ADDR
// if p3 = 4 then
11207: LD_VAR 0 3
11211: PUSH
11212: LD_INT 4
11214: EQUAL
11215: IFFALSE 11225
// sSpec := true ;
11217: LD_ADDR_EXP 33
11221: PUSH
11222: LD_INT 1
11224: ST_TO_ADDR
// if p3 = 5 then
11225: LD_VAR 0 3
11229: PUSH
11230: LD_INT 5
11232: EQUAL
11233: IFFALSE 11243
// sLevel := true ;
11235: LD_ADDR_EXP 37
11239: PUSH
11240: LD_INT 1
11242: ST_TO_ADDR
// if p3 = 6 then
11243: LD_VAR 0 3
11247: PUSH
11248: LD_INT 6
11250: EQUAL
11251: IFFALSE 11261
// sArmoury := true ;
11253: LD_ADDR_EXP 38
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if p3 = 7 then
11261: LD_VAR 0 3
11265: PUSH
11266: LD_INT 7
11268: EQUAL
11269: IFFALSE 11279
// sRadar := true ;
11271: LD_ADDR_EXP 39
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// if p3 = 8 then
11279: LD_VAR 0 3
11283: PUSH
11284: LD_INT 8
11286: EQUAL
11287: IFFALSE 11297
// sBunker := true ;
11289: LD_ADDR_EXP 40
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// if p3 = 9 then
11297: LD_VAR 0 3
11301: PUSH
11302: LD_INT 9
11304: EQUAL
11305: IFFALSE 11315
// sHack := true ;
11307: LD_ADDR_EXP 41
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
// if p3 = 10 then
11315: LD_VAR 0 3
11319: PUSH
11320: LD_INT 10
11322: EQUAL
11323: IFFALSE 11333
// sFire := true ;
11325: LD_ADDR_EXP 42
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// if p3 = 11 then
11333: LD_VAR 0 3
11337: PUSH
11338: LD_INT 11
11340: EQUAL
11341: IFFALSE 11351
// sRefresh := true ;
11343: LD_ADDR_EXP 43
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// if p3 = 12 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 12
11358: EQUAL
11359: IFFALSE 11369
// sExp := true ;
11361: LD_ADDR_EXP 44
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// if p3 = 13 then
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 13
11376: EQUAL
11377: IFFALSE 11387
// sDepot := true ;
11379: LD_ADDR_EXP 45
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// if p3 = 14 then
11387: LD_VAR 0 3
11391: PUSH
11392: LD_INT 14
11394: EQUAL
11395: IFFALSE 11405
// sFlag := true ;
11397: LD_ADDR_EXP 46
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
// if p3 = 15 then
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 15
11412: EQUAL
11413: IFFALSE 11423
// sKamikadze := true ;
11415: LD_ADDR_EXP 54
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// if p3 = 16 then
11423: LD_VAR 0 3
11427: PUSH
11428: LD_INT 16
11430: EQUAL
11431: IFFALSE 11441
// sTroll := true ;
11433: LD_ADDR_EXP 55
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// if p3 = 17 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 17
11448: EQUAL
11449: IFFALSE 11459
// sSlow := true ;
11451: LD_ADDR_EXP 56
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// if p3 = 18 then
11459: LD_VAR 0 3
11463: PUSH
11464: LD_INT 18
11466: EQUAL
11467: IFFALSE 11477
// sLack := true ;
11469: LD_ADDR_EXP 57
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 19 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 19
11484: EQUAL
11485: IFFALSE 11495
// sTank := true ;
11487: LD_ADDR_EXP 59
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// if p3 = 20 then
11495: LD_VAR 0 3
11499: PUSH
11500: LD_INT 20
11502: EQUAL
11503: IFFALSE 11513
// sRemote := true ;
11505: LD_ADDR_EXP 60
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// if p3 = 21 then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 21
11520: EQUAL
11521: IFFALSE 11531
// sPowell := true ;
11523: LD_ADDR_EXP 61
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// if p3 = 22 then
11531: LD_VAR 0 3
11535: PUSH
11536: LD_INT 22
11538: EQUAL
11539: IFFALSE 11549
// sTeleport := true ;
11541: LD_ADDR_EXP 64
11545: PUSH
11546: LD_INT 1
11548: ST_TO_ADDR
// if p3 = 23 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 23
11556: EQUAL
11557: IFFALSE 11567
// sOilTower := true ;
11559: LD_ADDR_EXP 66
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// if p3 = 24 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 24
11574: EQUAL
11575: IFFALSE 11585
// sShovel := true ;
11577: LD_ADDR_EXP 67
11581: PUSH
11582: LD_INT 1
11584: ST_TO_ADDR
// if p3 = 25 then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_INT 25
11592: EQUAL
11593: IFFALSE 11603
// sSheik := true ;
11595: LD_ADDR_EXP 68
11599: PUSH
11600: LD_INT 1
11602: ST_TO_ADDR
// if p3 = 26 then
11603: LD_VAR 0 3
11607: PUSH
11608: LD_INT 26
11610: EQUAL
11611: IFFALSE 11621
// sEarthquake := true ;
11613: LD_ADDR_EXP 70
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// if p3 = 27 then
11621: LD_VAR 0 3
11625: PUSH
11626: LD_INT 27
11628: EQUAL
11629: IFFALSE 11639
// sAI := true ;
11631: LD_ADDR_EXP 71
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// if p3 = 28 then
11639: LD_VAR 0 3
11643: PUSH
11644: LD_INT 28
11646: EQUAL
11647: IFFALSE 11657
// sCargo := true ;
11649: LD_ADDR_EXP 74
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// if p3 = 29 then
11657: LD_VAR 0 3
11661: PUSH
11662: LD_INT 29
11664: EQUAL
11665: IFFALSE 11675
// sDLaser := true ;
11667: LD_ADDR_EXP 75
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// if p3 = 30 then
11675: LD_VAR 0 3
11679: PUSH
11680: LD_INT 30
11682: EQUAL
11683: IFFALSE 11693
// sExchange := true ;
11685: LD_ADDR_EXP 76
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// if p3 = 31 then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_INT 31
11700: EQUAL
11701: IFFALSE 11711
// sFac := true ;
11703: LD_ADDR_EXP 77
11707: PUSH
11708: LD_INT 1
11710: ST_TO_ADDR
// if p3 = 32 then
11711: LD_VAR 0 3
11715: PUSH
11716: LD_INT 32
11718: EQUAL
11719: IFFALSE 11729
// sPower := true ;
11721: LD_ADDR_EXP 78
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// if p3 = 33 then
11729: LD_VAR 0 3
11733: PUSH
11734: LD_INT 33
11736: EQUAL
11737: IFFALSE 11747
// sRandom := true ;
11739: LD_ADDR_EXP 79
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// if p3 = 34 then
11747: LD_VAR 0 3
11751: PUSH
11752: LD_INT 34
11754: EQUAL
11755: IFFALSE 11765
// sShield := true ;
11757: LD_ADDR_EXP 80
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// if p3 = 35 then
11765: LD_VAR 0 3
11769: PUSH
11770: LD_INT 35
11772: EQUAL
11773: IFFALSE 11783
// sTime := true ;
11775: LD_ADDR_EXP 81
11779: PUSH
11780: LD_INT 1
11782: ST_TO_ADDR
// if p3 = 36 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 36
11790: EQUAL
11791: IFFALSE 11801
// sTools := true ;
11793: LD_ADDR_EXP 82
11797: PUSH
11798: LD_INT 1
11800: ST_TO_ADDR
// if p3 = 101 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 101
11808: EQUAL
11809: IFFALSE 11819
// sSold := true ;
11811: LD_ADDR_EXP 47
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// if p3 = 102 then
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 102
11826: EQUAL
11827: IFFALSE 11837
// sDiff := true ;
11829: LD_ADDR_EXP 48
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// if p3 = 103 then
11837: LD_VAR 0 3
11841: PUSH
11842: LD_INT 103
11844: EQUAL
11845: IFFALSE 11855
// sFog := true ;
11847: LD_ADDR_EXP 51
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// if p3 = 104 then
11855: LD_VAR 0 3
11859: PUSH
11860: LD_INT 104
11862: EQUAL
11863: IFFALSE 11873
// sReset := true ;
11865: LD_ADDR_EXP 52
11869: PUSH
11870: LD_INT 1
11872: ST_TO_ADDR
// if p3 = 105 then
11873: LD_VAR 0 3
11877: PUSH
11878: LD_INT 105
11880: EQUAL
11881: IFFALSE 11891
// sSun := true ;
11883: LD_ADDR_EXP 53
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// if p3 = 106 then
11891: LD_VAR 0 3
11895: PUSH
11896: LD_INT 106
11898: EQUAL
11899: IFFALSE 11909
// sTiger := true ;
11901: LD_ADDR_EXP 49
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// if p3 = 107 then
11909: LD_VAR 0 3
11913: PUSH
11914: LD_INT 107
11916: EQUAL
11917: IFFALSE 11927
// sBomb := true ;
11919: LD_ADDR_EXP 50
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// if p3 = 108 then
11927: LD_VAR 0 3
11931: PUSH
11932: LD_INT 108
11934: EQUAL
11935: IFFALSE 11945
// sWound := true ;
11937: LD_ADDR_EXP 58
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// if p3 = 109 then
11945: LD_VAR 0 3
11949: PUSH
11950: LD_INT 109
11952: EQUAL
11953: IFFALSE 11963
// sBetray := true ;
11955: LD_ADDR_EXP 62
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// if p3 = 110 then
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 110
11970: EQUAL
11971: IFFALSE 11981
// sContamin := true ;
11973: LD_ADDR_EXP 63
11977: PUSH
11978: LD_INT 1
11980: ST_TO_ADDR
// if p3 = 111 then
11981: LD_VAR 0 3
11985: PUSH
11986: LD_INT 111
11988: EQUAL
11989: IFFALSE 11999
// sOil := true ;
11991: LD_ADDR_EXP 65
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// if p3 = 112 then
11999: LD_VAR 0 3
12003: PUSH
12004: LD_INT 112
12006: EQUAL
12007: IFFALSE 12017
// sStu := true ;
12009: LD_ADDR_EXP 69
12013: PUSH
12014: LD_INT 1
12016: ST_TO_ADDR
// if p3 = 113 then
12017: LD_VAR 0 3
12021: PUSH
12022: LD_INT 113
12024: EQUAL
12025: IFFALSE 12035
// sBazooka := true ;
12027: LD_ADDR_EXP 72
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// if p3 = 114 then
12035: LD_VAR 0 3
12039: PUSH
12040: LD_INT 114
12042: EQUAL
12043: IFFALSE 12053
// sMortar := true ;
12045: LD_ADDR_EXP 73
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// if p3 = 115 then
12053: LD_VAR 0 3
12057: PUSH
12058: LD_INT 115
12060: EQUAL
12061: IFFALSE 12071
// sRanger := true ;
12063: LD_ADDR_EXP 83
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// end ; if p2 = 101 then
12071: LD_VAR 0 2
12075: PUSH
12076: LD_INT 101
12078: EQUAL
12079: IFFALSE 12207
// begin case p3 of 1 :
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 1
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12101
12094: POP
// hHackUnlimitedResources ; 2 :
12095: CALL 23242 0 0
12099: GO 12207
12101: LD_INT 2
12103: DOUBLE
12104: EQUAL
12105: IFTRUE 12109
12107: GO 12116
12109: POP
// hHackSetLevel10 ; 3 :
12110: CALL 23375 0 0
12114: GO 12207
12116: LD_INT 3
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12131
12124: POP
// hHackSetLevel10YourUnits ; 4 :
12125: CALL 23460 0 0
12129: GO 12207
12131: LD_INT 4
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12146
12139: POP
// hHackInvincible ; 5 :
12140: CALL 23908 0 0
12144: GO 12207
12146: LD_INT 5
12148: DOUBLE
12149: EQUAL
12150: IFTRUE 12154
12152: GO 12161
12154: POP
// hHackInvisible ; 6 :
12155: CALL 24019 0 0
12159: GO 12207
12161: LD_INT 6
12163: DOUBLE
12164: EQUAL
12165: IFTRUE 12169
12167: GO 12176
12169: POP
// hHackChangeYourSide ; 7 :
12170: CALL 24076 0 0
12174: GO 12207
12176: LD_INT 7
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12191
12184: POP
// hHackChangeUnitSide ; 8 :
12185: CALL 24118 0 0
12189: GO 12207
12191: LD_INT 8
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12206
12199: POP
// hHackFog ; end ;
12200: CALL 24219 0 0
12204: GO 12207
12206: POP
// end ; end ;
12207: PPOPN 6
12209: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
12210: GO 12212
12212: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12213: LD_STRING initStreamRollete();
12215: PPUSH
12216: CALL_OW 559
// InitStreamMode ;
12220: CALL 12229 0 0
// DefineStreamItems ( ) ;
12224: CALL 12669 0 0
// end ;
12228: END
// function InitStreamMode ; begin
12229: LD_INT 0
12231: PPUSH
// streamModeActive := false ;
12232: LD_ADDR_EXP 30
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// normalCounter := 36 ;
12240: LD_ADDR_EXP 31
12244: PUSH
12245: LD_INT 36
12247: ST_TO_ADDR
// hardcoreCounter := 16 ;
12248: LD_ADDR_EXP 32
12252: PUSH
12253: LD_INT 16
12255: ST_TO_ADDR
// sRocket := false ;
12256: LD_ADDR_EXP 35
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sSpeed := false ;
12264: LD_ADDR_EXP 34
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sEngine := false ;
12272: LD_ADDR_EXP 36
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sSpec := false ;
12280: LD_ADDR_EXP 33
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sLevel := false ;
12288: LD_ADDR_EXP 37
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sArmoury := false ;
12296: LD_ADDR_EXP 38
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sRadar := false ;
12304: LD_ADDR_EXP 39
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sBunker := false ;
12312: LD_ADDR_EXP 40
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sHack := false ;
12320: LD_ADDR_EXP 41
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sFire := false ;
12328: LD_ADDR_EXP 42
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sRefresh := false ;
12336: LD_ADDR_EXP 43
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sExp := false ;
12344: LD_ADDR_EXP 44
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sDepot := false ;
12352: LD_ADDR_EXP 45
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sFlag := false ;
12360: LD_ADDR_EXP 46
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sKamikadze := false ;
12368: LD_ADDR_EXP 54
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sTroll := false ;
12376: LD_ADDR_EXP 55
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sSlow := false ;
12384: LD_ADDR_EXP 56
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sLack := false ;
12392: LD_ADDR_EXP 57
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sTank := false ;
12400: LD_ADDR_EXP 59
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sRemote := false ;
12408: LD_ADDR_EXP 60
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sPowell := false ;
12416: LD_ADDR_EXP 61
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sTeleport := false ;
12424: LD_ADDR_EXP 64
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sOilTower := false ;
12432: LD_ADDR_EXP 66
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sShovel := false ;
12440: LD_ADDR_EXP 67
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sSheik := false ;
12448: LD_ADDR_EXP 68
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sEarthquake := false ;
12456: LD_ADDR_EXP 70
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sAI := false ;
12464: LD_ADDR_EXP 71
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sCargo := false ;
12472: LD_ADDR_EXP 74
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sDLaser := false ;
12480: LD_ADDR_EXP 75
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sExchange := false ;
12488: LD_ADDR_EXP 76
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sFac := false ;
12496: LD_ADDR_EXP 77
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sPower := false ;
12504: LD_ADDR_EXP 78
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sRandom := false ;
12512: LD_ADDR_EXP 79
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sShield := false ;
12520: LD_ADDR_EXP 80
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sTime := false ;
12528: LD_ADDR_EXP 81
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sTools := false ;
12536: LD_ADDR_EXP 82
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sSold := false ;
12544: LD_ADDR_EXP 47
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sDiff := false ;
12552: LD_ADDR_EXP 48
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sFog := false ;
12560: LD_ADDR_EXP 51
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sReset := false ;
12568: LD_ADDR_EXP 52
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sSun := false ;
12576: LD_ADDR_EXP 53
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sTiger := false ;
12584: LD_ADDR_EXP 49
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sBomb := false ;
12592: LD_ADDR_EXP 50
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sWound := false ;
12600: LD_ADDR_EXP 58
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sBetray := false ;
12608: LD_ADDR_EXP 62
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sContamin := false ;
12616: LD_ADDR_EXP 63
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sOil := false ;
12624: LD_ADDR_EXP 65
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sStu := false ;
12632: LD_ADDR_EXP 69
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sBazooka := false ;
12640: LD_ADDR_EXP 72
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sMortar := false ;
12648: LD_ADDR_EXP 73
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sRanger := false ;
12656: LD_ADDR_EXP 83
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// end ;
12664: LD_VAR 0 1
12668: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12669: LD_INT 0
12671: PPUSH
12672: PPUSH
12673: PPUSH
12674: PPUSH
12675: PPUSH
// result := [ ] ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: EMPTY
12682: ST_TO_ADDR
// if campaign_id = 1 then
12683: LD_OWVAR 69
12687: PUSH
12688: LD_INT 1
12690: EQUAL
12691: IFFALSE 15629
// begin case mission_number of 1 :
12693: LD_OWVAR 70
12697: PUSH
12698: LD_INT 1
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12770
12706: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_INT 2
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: LD_INT 11
12720: PUSH
12721: LD_INT 12
12723: PUSH
12724: LD_INT 15
12726: PUSH
12727: LD_INT 16
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 26
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 101
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 106
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: ST_TO_ADDR
12768: GO 15627
12770: LD_INT 2
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12850
12778: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: LD_INT 4
12789: PUSH
12790: LD_INT 11
12792: PUSH
12793: LD_INT 12
12795: PUSH
12796: LD_INT 15
12798: PUSH
12799: LD_INT 16
12801: PUSH
12802: LD_INT 22
12804: PUSH
12805: LD_INT 23
12807: PUSH
12808: LD_INT 26
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 101
12824: PUSH
12825: LD_INT 102
12827: PUSH
12828: LD_INT 105
12830: PUSH
12831: LD_INT 106
12833: PUSH
12834: LD_INT 108
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: ST_TO_ADDR
12848: GO 15627
12850: LD_INT 3
12852: DOUBLE
12853: EQUAL
12854: IFTRUE 12858
12856: GO 12934
12858: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: LD_INT 2
12866: PUSH
12867: LD_INT 4
12869: PUSH
12870: LD_INT 5
12872: PUSH
12873: LD_INT 11
12875: PUSH
12876: LD_INT 12
12878: PUSH
12879: LD_INT 15
12881: PUSH
12882: LD_INT 16
12884: PUSH
12885: LD_INT 22
12887: PUSH
12888: LD_INT 26
12890: PUSH
12891: LD_INT 36
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 101
12908: PUSH
12909: LD_INT 102
12911: PUSH
12912: LD_INT 105
12914: PUSH
12915: LD_INT 106
12917: PUSH
12918: LD_INT 108
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: ST_TO_ADDR
12932: GO 15627
12934: LD_INT 4
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 13026
12942: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12943: LD_ADDR_VAR 0 1
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: LD_INT 5
12956: PUSH
12957: LD_INT 8
12959: PUSH
12960: LD_INT 11
12962: PUSH
12963: LD_INT 12
12965: PUSH
12966: LD_INT 15
12968: PUSH
12969: LD_INT 16
12971: PUSH
12972: LD_INT 22
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 26
12980: PUSH
12981: LD_INT 36
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 101
13000: PUSH
13001: LD_INT 102
13003: PUSH
13004: LD_INT 105
13006: PUSH
13007: LD_INT 106
13009: PUSH
13010: LD_INT 108
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: ST_TO_ADDR
13024: GO 15627
13026: LD_INT 5
13028: DOUBLE
13029: EQUAL
13030: IFTRUE 13034
13032: GO 13134
13034: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13035: LD_ADDR_VAR 0 1
13039: PUSH
13040: LD_INT 2
13042: PUSH
13043: LD_INT 4
13045: PUSH
13046: LD_INT 5
13048: PUSH
13049: LD_INT 6
13051: PUSH
13052: LD_INT 8
13054: PUSH
13055: LD_INT 11
13057: PUSH
13058: LD_INT 12
13060: PUSH
13061: LD_INT 15
13063: PUSH
13064: LD_INT 16
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 23
13072: PUSH
13073: LD_INT 25
13075: PUSH
13076: LD_INT 26
13078: PUSH
13079: LD_INT 36
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 101
13100: PUSH
13101: LD_INT 102
13103: PUSH
13104: LD_INT 105
13106: PUSH
13107: LD_INT 106
13109: PUSH
13110: LD_INT 108
13112: PUSH
13113: LD_INT 109
13115: PUSH
13116: LD_INT 112
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: ST_TO_ADDR
13132: GO 15627
13134: LD_INT 6
13136: DOUBLE
13137: EQUAL
13138: IFTRUE 13142
13140: GO 13262
13142: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
13143: LD_ADDR_VAR 0 1
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: LD_INT 6
13159: PUSH
13160: LD_INT 8
13162: PUSH
13163: LD_INT 11
13165: PUSH
13166: LD_INT 12
13168: PUSH
13169: LD_INT 15
13171: PUSH
13172: LD_INT 16
13174: PUSH
13175: LD_INT 20
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 22
13183: PUSH
13184: LD_INT 23
13186: PUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: LD_INT 30
13195: PUSH
13196: LD_INT 31
13198: PUSH
13199: LD_INT 32
13201: PUSH
13202: LD_INT 36
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 101
13228: PUSH
13229: LD_INT 102
13231: PUSH
13232: LD_INT 105
13234: PUSH
13235: LD_INT 106
13237: PUSH
13238: LD_INT 108
13240: PUSH
13241: LD_INT 109
13243: PUSH
13244: LD_INT 112
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 15627
13262: LD_INT 7
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13370
13270: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: LD_INT 4
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: LD_INT 7
13287: PUSH
13288: LD_INT 11
13290: PUSH
13291: LD_INT 12
13293: PUSH
13294: LD_INT 15
13296: PUSH
13297: LD_INT 16
13299: PUSH
13300: LD_INT 20
13302: PUSH
13303: LD_INT 21
13305: PUSH
13306: LD_INT 22
13308: PUSH
13309: LD_INT 23
13311: PUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 26
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 101
13336: PUSH
13337: LD_INT 102
13339: PUSH
13340: LD_INT 103
13342: PUSH
13343: LD_INT 105
13345: PUSH
13346: LD_INT 106
13348: PUSH
13349: LD_INT 108
13351: PUSH
13352: LD_INT 112
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: ST_TO_ADDR
13368: GO 15627
13370: LD_INT 8
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13506
13378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 4
13389: PUSH
13390: LD_INT 5
13392: PUSH
13393: LD_INT 6
13395: PUSH
13396: LD_INT 7
13398: PUSH
13399: LD_INT 8
13401: PUSH
13402: LD_INT 11
13404: PUSH
13405: LD_INT 12
13407: PUSH
13408: LD_INT 15
13410: PUSH
13411: LD_INT 16
13413: PUSH
13414: LD_INT 20
13416: PUSH
13417: LD_INT 21
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 25
13428: PUSH
13429: LD_INT 26
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 31
13437: PUSH
13438: LD_INT 32
13440: PUSH
13441: LD_INT 36
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 101
13468: PUSH
13469: LD_INT 102
13471: PUSH
13472: LD_INT 103
13474: PUSH
13475: LD_INT 105
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: LD_INT 109
13486: PUSH
13487: LD_INT 112
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: ST_TO_ADDR
13504: GO 15627
13506: LD_INT 9
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13650
13514: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13515: LD_ADDR_VAR 0 1
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: LD_INT 4
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 6
13531: PUSH
13532: LD_INT 7
13534: PUSH
13535: LD_INT 8
13537: PUSH
13538: LD_INT 11
13540: PUSH
13541: LD_INT 12
13543: PUSH
13544: LD_INT 15
13546: PUSH
13547: LD_INT 16
13549: PUSH
13550: LD_INT 20
13552: PUSH
13553: LD_INT 21
13555: PUSH
13556: LD_INT 22
13558: PUSH
13559: LD_INT 23
13561: PUSH
13562: LD_INT 25
13564: PUSH
13565: LD_INT 26
13567: PUSH
13568: LD_INT 28
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 32
13579: PUSH
13580: LD_INT 36
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 101
13608: PUSH
13609: LD_INT 102
13611: PUSH
13612: LD_INT 103
13614: PUSH
13615: LD_INT 105
13617: PUSH
13618: LD_INT 106
13620: PUSH
13621: LD_INT 108
13623: PUSH
13624: LD_INT 109
13626: PUSH
13627: LD_INT 112
13629: PUSH
13630: LD_INT 114
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: ST_TO_ADDR
13648: GO 15627
13650: LD_INT 10
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13842
13658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13659: LD_ADDR_VAR 0 1
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 4
13669: PUSH
13670: LD_INT 5
13672: PUSH
13673: LD_INT 6
13675: PUSH
13676: LD_INT 7
13678: PUSH
13679: LD_INT 8
13681: PUSH
13682: LD_INT 9
13684: PUSH
13685: LD_INT 10
13687: PUSH
13688: LD_INT 11
13690: PUSH
13691: LD_INT 12
13693: PUSH
13694: LD_INT 13
13696: PUSH
13697: LD_INT 14
13699: PUSH
13700: LD_INT 15
13702: PUSH
13703: LD_INT 16
13705: PUSH
13706: LD_INT 17
13708: PUSH
13709: LD_INT 18
13711: PUSH
13712: LD_INT 19
13714: PUSH
13715: LD_INT 20
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_INT 23
13726: PUSH
13727: LD_INT 24
13729: PUSH
13730: LD_INT 25
13732: PUSH
13733: LD_INT 26
13735: PUSH
13736: LD_INT 28
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 31
13744: PUSH
13745: LD_INT 32
13747: PUSH
13748: LD_INT 36
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 101
13784: PUSH
13785: LD_INT 102
13787: PUSH
13788: LD_INT 103
13790: PUSH
13791: LD_INT 104
13793: PUSH
13794: LD_INT 105
13796: PUSH
13797: LD_INT 106
13799: PUSH
13800: LD_INT 107
13802: PUSH
13803: LD_INT 108
13805: PUSH
13806: LD_INT 109
13808: PUSH
13809: LD_INT 110
13811: PUSH
13812: LD_INT 111
13814: PUSH
13815: LD_INT 112
13817: PUSH
13818: LD_INT 114
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: ST_TO_ADDR
13840: GO 15627
13842: LD_INT 11
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 14042
13850: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13851: LD_ADDR_VAR 0 1
13855: PUSH
13856: LD_INT 2
13858: PUSH
13859: LD_INT 3
13861: PUSH
13862: LD_INT 4
13864: PUSH
13865: LD_INT 5
13867: PUSH
13868: LD_INT 6
13870: PUSH
13871: LD_INT 7
13873: PUSH
13874: LD_INT 8
13876: PUSH
13877: LD_INT 9
13879: PUSH
13880: LD_INT 10
13882: PUSH
13883: LD_INT 11
13885: PUSH
13886: LD_INT 12
13888: PUSH
13889: LD_INT 13
13891: PUSH
13892: LD_INT 14
13894: PUSH
13895: LD_INT 15
13897: PUSH
13898: LD_INT 16
13900: PUSH
13901: LD_INT 17
13903: PUSH
13904: LD_INT 18
13906: PUSH
13907: LD_INT 19
13909: PUSH
13910: LD_INT 20
13912: PUSH
13913: LD_INT 21
13915: PUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 23
13921: PUSH
13922: LD_INT 24
13924: PUSH
13925: LD_INT 25
13927: PUSH
13928: LD_INT 26
13930: PUSH
13931: LD_INT 28
13933: PUSH
13934: LD_INT 30
13936: PUSH
13937: LD_INT 31
13939: PUSH
13940: LD_INT 32
13942: PUSH
13943: LD_INT 34
13945: PUSH
13946: LD_INT 36
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 101
13984: PUSH
13985: LD_INT 102
13987: PUSH
13988: LD_INT 103
13990: PUSH
13991: LD_INT 104
13993: PUSH
13994: LD_INT 105
13996: PUSH
13997: LD_INT 106
13999: PUSH
14000: LD_INT 107
14002: PUSH
14003: LD_INT 108
14005: PUSH
14006: LD_INT 109
14008: PUSH
14009: LD_INT 110
14011: PUSH
14012: LD_INT 111
14014: PUSH
14015: LD_INT 112
14017: PUSH
14018: LD_INT 114
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: ST_TO_ADDR
14040: GO 15627
14042: LD_INT 12
14044: DOUBLE
14045: EQUAL
14046: IFTRUE 14050
14048: GO 14258
14050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14051: LD_ADDR_VAR 0 1
14055: PUSH
14056: LD_INT 1
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: LD_INT 3
14064: PUSH
14065: LD_INT 4
14067: PUSH
14068: LD_INT 5
14070: PUSH
14071: LD_INT 6
14073: PUSH
14074: LD_INT 7
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: LD_INT 9
14082: PUSH
14083: LD_INT 10
14085: PUSH
14086: LD_INT 11
14088: PUSH
14089: LD_INT 12
14091: PUSH
14092: LD_INT 13
14094: PUSH
14095: LD_INT 14
14097: PUSH
14098: LD_INT 15
14100: PUSH
14101: LD_INT 16
14103: PUSH
14104: LD_INT 17
14106: PUSH
14107: LD_INT 18
14109: PUSH
14110: LD_INT 19
14112: PUSH
14113: LD_INT 20
14115: PUSH
14116: LD_INT 21
14118: PUSH
14119: LD_INT 22
14121: PUSH
14122: LD_INT 23
14124: PUSH
14125: LD_INT 24
14127: PUSH
14128: LD_INT 25
14130: PUSH
14131: LD_INT 26
14133: PUSH
14134: LD_INT 27
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 30
14142: PUSH
14143: LD_INT 31
14145: PUSH
14146: LD_INT 32
14148: PUSH
14149: LD_INT 33
14151: PUSH
14152: LD_INT 34
14154: PUSH
14155: LD_INT 36
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 101
14196: PUSH
14197: LD_INT 102
14199: PUSH
14200: LD_INT 103
14202: PUSH
14203: LD_INT 104
14205: PUSH
14206: LD_INT 105
14208: PUSH
14209: LD_INT 106
14211: PUSH
14212: LD_INT 107
14214: PUSH
14215: LD_INT 108
14217: PUSH
14218: LD_INT 109
14220: PUSH
14221: LD_INT 110
14223: PUSH
14224: LD_INT 111
14226: PUSH
14227: LD_INT 112
14229: PUSH
14230: LD_INT 113
14232: PUSH
14233: LD_INT 114
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 15627
14258: LD_INT 13
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14462
14266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 1
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: LD_INT 4
14283: PUSH
14284: LD_INT 5
14286: PUSH
14287: LD_INT 8
14289: PUSH
14290: LD_INT 9
14292: PUSH
14293: LD_INT 10
14295: PUSH
14296: LD_INT 11
14298: PUSH
14299: LD_INT 12
14301: PUSH
14302: LD_INT 14
14304: PUSH
14305: LD_INT 15
14307: PUSH
14308: LD_INT 16
14310: PUSH
14311: LD_INT 17
14313: PUSH
14314: LD_INT 18
14316: PUSH
14317: LD_INT 19
14319: PUSH
14320: LD_INT 20
14322: PUSH
14323: LD_INT 21
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_INT 23
14331: PUSH
14332: LD_INT 24
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 26
14340: PUSH
14341: LD_INT 27
14343: PUSH
14344: LD_INT 28
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 31
14352: PUSH
14353: LD_INT 32
14355: PUSH
14356: LD_INT 33
14358: PUSH
14359: LD_INT 34
14361: PUSH
14362: LD_INT 36
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 101
14400: PUSH
14401: LD_INT 102
14403: PUSH
14404: LD_INT 103
14406: PUSH
14407: LD_INT 104
14409: PUSH
14410: LD_INT 105
14412: PUSH
14413: LD_INT 106
14415: PUSH
14416: LD_INT 107
14418: PUSH
14419: LD_INT 108
14421: PUSH
14422: LD_INT 109
14424: PUSH
14425: LD_INT 110
14427: PUSH
14428: LD_INT 111
14430: PUSH
14431: LD_INT 112
14433: PUSH
14434: LD_INT 113
14436: PUSH
14437: LD_INT 114
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: ST_TO_ADDR
14460: GO 15627
14462: LD_INT 14
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14682
14470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14471: LD_ADDR_VAR 0 1
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 3
14484: PUSH
14485: LD_INT 4
14487: PUSH
14488: LD_INT 5
14490: PUSH
14491: LD_INT 6
14493: PUSH
14494: LD_INT 7
14496: PUSH
14497: LD_INT 8
14499: PUSH
14500: LD_INT 9
14502: PUSH
14503: LD_INT 10
14505: PUSH
14506: LD_INT 11
14508: PUSH
14509: LD_INT 12
14511: PUSH
14512: LD_INT 13
14514: PUSH
14515: LD_INT 14
14517: PUSH
14518: LD_INT 15
14520: PUSH
14521: LD_INT 16
14523: PUSH
14524: LD_INT 17
14526: PUSH
14527: LD_INT 18
14529: PUSH
14530: LD_INT 19
14532: PUSH
14533: LD_INT 20
14535: PUSH
14536: LD_INT 21
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 24
14547: PUSH
14548: LD_INT 25
14550: PUSH
14551: LD_INT 26
14553: PUSH
14554: LD_INT 27
14556: PUSH
14557: LD_INT 28
14559: PUSH
14560: LD_INT 29
14562: PUSH
14563: LD_INT 30
14565: PUSH
14566: LD_INT 31
14568: PUSH
14569: LD_INT 32
14571: PUSH
14572: LD_INT 33
14574: PUSH
14575: LD_INT 34
14577: PUSH
14578: LD_INT 36
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 101
14620: PUSH
14621: LD_INT 102
14623: PUSH
14624: LD_INT 103
14626: PUSH
14627: LD_INT 104
14629: PUSH
14630: LD_INT 105
14632: PUSH
14633: LD_INT 106
14635: PUSH
14636: LD_INT 107
14638: PUSH
14639: LD_INT 108
14641: PUSH
14642: LD_INT 109
14644: PUSH
14645: LD_INT 110
14647: PUSH
14648: LD_INT 111
14650: PUSH
14651: LD_INT 112
14653: PUSH
14654: LD_INT 113
14656: PUSH
14657: LD_INT 114
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: ST_TO_ADDR
14680: GO 15627
14682: LD_INT 15
14684: DOUBLE
14685: EQUAL
14686: IFTRUE 14690
14688: GO 14902
14690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14691: LD_ADDR_VAR 0 1
14695: PUSH
14696: LD_INT 1
14698: PUSH
14699: LD_INT 2
14701: PUSH
14702: LD_INT 3
14704: PUSH
14705: LD_INT 4
14707: PUSH
14708: LD_INT 5
14710: PUSH
14711: LD_INT 6
14713: PUSH
14714: LD_INT 7
14716: PUSH
14717: LD_INT 8
14719: PUSH
14720: LD_INT 9
14722: PUSH
14723: LD_INT 10
14725: PUSH
14726: LD_INT 11
14728: PUSH
14729: LD_INT 12
14731: PUSH
14732: LD_INT 13
14734: PUSH
14735: LD_INT 14
14737: PUSH
14738: LD_INT 15
14740: PUSH
14741: LD_INT 16
14743: PUSH
14744: LD_INT 17
14746: PUSH
14747: LD_INT 18
14749: PUSH
14750: LD_INT 19
14752: PUSH
14753: LD_INT 20
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_INT 23
14764: PUSH
14765: LD_INT 24
14767: PUSH
14768: LD_INT 25
14770: PUSH
14771: LD_INT 26
14773: PUSH
14774: LD_INT 27
14776: PUSH
14777: LD_INT 28
14779: PUSH
14780: LD_INT 29
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_INT 31
14788: PUSH
14789: LD_INT 32
14791: PUSH
14792: LD_INT 33
14794: PUSH
14795: LD_INT 34
14797: PUSH
14798: LD_INT 36
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 101
14840: PUSH
14841: LD_INT 102
14843: PUSH
14844: LD_INT 103
14846: PUSH
14847: LD_INT 104
14849: PUSH
14850: LD_INT 105
14852: PUSH
14853: LD_INT 106
14855: PUSH
14856: LD_INT 107
14858: PUSH
14859: LD_INT 108
14861: PUSH
14862: LD_INT 109
14864: PUSH
14865: LD_INT 110
14867: PUSH
14868: LD_INT 111
14870: PUSH
14871: LD_INT 112
14873: PUSH
14874: LD_INT 113
14876: PUSH
14877: LD_INT 114
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: ST_TO_ADDR
14900: GO 15627
14902: LD_INT 16
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 15034
14910: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14911: LD_ADDR_VAR 0 1
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: LD_INT 4
14921: PUSH
14922: LD_INT 5
14924: PUSH
14925: LD_INT 7
14927: PUSH
14928: LD_INT 11
14930: PUSH
14931: LD_INT 12
14933: PUSH
14934: LD_INT 15
14936: PUSH
14937: LD_INT 16
14939: PUSH
14940: LD_INT 20
14942: PUSH
14943: LD_INT 21
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_INT 23
14951: PUSH
14952: LD_INT 25
14954: PUSH
14955: LD_INT 26
14957: PUSH
14958: LD_INT 30
14960: PUSH
14961: LD_INT 31
14963: PUSH
14964: LD_INT 32
14966: PUSH
14967: LD_INT 33
14969: PUSH
14970: LD_INT 34
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 101
14996: PUSH
14997: LD_INT 102
14999: PUSH
15000: LD_INT 103
15002: PUSH
15003: LD_INT 106
15005: PUSH
15006: LD_INT 108
15008: PUSH
15009: LD_INT 112
15011: PUSH
15012: LD_INT 113
15014: PUSH
15015: LD_INT 114
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: ST_TO_ADDR
15032: GO 15627
15034: LD_INT 17
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15254
15042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15043: LD_ADDR_VAR 0 1
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 3
15056: PUSH
15057: LD_INT 4
15059: PUSH
15060: LD_INT 5
15062: PUSH
15063: LD_INT 6
15065: PUSH
15066: LD_INT 7
15068: PUSH
15069: LD_INT 8
15071: PUSH
15072: LD_INT 9
15074: PUSH
15075: LD_INT 10
15077: PUSH
15078: LD_INT 11
15080: PUSH
15081: LD_INT 12
15083: PUSH
15084: LD_INT 13
15086: PUSH
15087: LD_INT 14
15089: PUSH
15090: LD_INT 15
15092: PUSH
15093: LD_INT 16
15095: PUSH
15096: LD_INT 17
15098: PUSH
15099: LD_INT 18
15101: PUSH
15102: LD_INT 19
15104: PUSH
15105: LD_INT 20
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 22
15113: PUSH
15114: LD_INT 23
15116: PUSH
15117: LD_INT 24
15119: PUSH
15120: LD_INT 25
15122: PUSH
15123: LD_INT 26
15125: PUSH
15126: LD_INT 27
15128: PUSH
15129: LD_INT 28
15131: PUSH
15132: LD_INT 29
15134: PUSH
15135: LD_INT 30
15137: PUSH
15138: LD_INT 31
15140: PUSH
15141: LD_INT 32
15143: PUSH
15144: LD_INT 33
15146: PUSH
15147: LD_INT 34
15149: PUSH
15150: LD_INT 36
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 101
15192: PUSH
15193: LD_INT 102
15195: PUSH
15196: LD_INT 103
15198: PUSH
15199: LD_INT 104
15201: PUSH
15202: LD_INT 105
15204: PUSH
15205: LD_INT 106
15207: PUSH
15208: LD_INT 107
15210: PUSH
15211: LD_INT 108
15213: PUSH
15214: LD_INT 109
15216: PUSH
15217: LD_INT 110
15219: PUSH
15220: LD_INT 111
15222: PUSH
15223: LD_INT 112
15225: PUSH
15226: LD_INT 113
15228: PUSH
15229: LD_INT 114
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: ST_TO_ADDR
15252: GO 15627
15254: LD_INT 18
15256: DOUBLE
15257: EQUAL
15258: IFTRUE 15262
15260: GO 15398
15262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15263: LD_ADDR_VAR 0 1
15267: PUSH
15268: LD_INT 2
15270: PUSH
15271: LD_INT 4
15273: PUSH
15274: LD_INT 5
15276: PUSH
15277: LD_INT 7
15279: PUSH
15280: LD_INT 11
15282: PUSH
15283: LD_INT 12
15285: PUSH
15286: LD_INT 15
15288: PUSH
15289: LD_INT 16
15291: PUSH
15292: LD_INT 20
15294: PUSH
15295: LD_INT 21
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_INT 23
15303: PUSH
15304: LD_INT 25
15306: PUSH
15307: LD_INT 26
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 31
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: LD_INT 33
15321: PUSH
15322: LD_INT 34
15324: PUSH
15325: LD_INT 35
15327: PUSH
15328: LD_INT 36
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 101
15356: PUSH
15357: LD_INT 102
15359: PUSH
15360: LD_INT 103
15362: PUSH
15363: LD_INT 106
15365: PUSH
15366: LD_INT 108
15368: PUSH
15369: LD_INT 112
15371: PUSH
15372: LD_INT 113
15374: PUSH
15375: LD_INT 114
15377: PUSH
15378: LD_INT 115
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: ST_TO_ADDR
15396: GO 15627
15398: LD_INT 19
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15626
15406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15407: LD_ADDR_VAR 0 1
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 6
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 8
15435: PUSH
15436: LD_INT 9
15438: PUSH
15439: LD_INT 10
15441: PUSH
15442: LD_INT 11
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: LD_INT 13
15450: PUSH
15451: LD_INT 14
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 16
15459: PUSH
15460: LD_INT 17
15462: PUSH
15463: LD_INT 18
15465: PUSH
15466: LD_INT 19
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 24
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 27
15492: PUSH
15493: LD_INT 28
15495: PUSH
15496: LD_INT 29
15498: PUSH
15499: LD_INT 30
15501: PUSH
15502: LD_INT 31
15504: PUSH
15505: LD_INT 32
15507: PUSH
15508: LD_INT 33
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 35
15516: PUSH
15517: LD_INT 36
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 101
15560: PUSH
15561: LD_INT 102
15563: PUSH
15564: LD_INT 103
15566: PUSH
15567: LD_INT 104
15569: PUSH
15570: LD_INT 105
15572: PUSH
15573: LD_INT 106
15575: PUSH
15576: LD_INT 107
15578: PUSH
15579: LD_INT 108
15581: PUSH
15582: LD_INT 109
15584: PUSH
15585: LD_INT 110
15587: PUSH
15588: LD_INT 111
15590: PUSH
15591: LD_INT 112
15593: PUSH
15594: LD_INT 113
15596: PUSH
15597: LD_INT 114
15599: PUSH
15600: LD_INT 115
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: ST_TO_ADDR
15624: GO 15627
15626: POP
// end else
15627: GO 15846
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15629: LD_ADDR_VAR 0 1
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: LD_INT 2
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 4
15645: PUSH
15646: LD_INT 5
15648: PUSH
15649: LD_INT 6
15651: PUSH
15652: LD_INT 7
15654: PUSH
15655: LD_INT 8
15657: PUSH
15658: LD_INT 9
15660: PUSH
15661: LD_INT 10
15663: PUSH
15664: LD_INT 11
15666: PUSH
15667: LD_INT 12
15669: PUSH
15670: LD_INT 13
15672: PUSH
15673: LD_INT 14
15675: PUSH
15676: LD_INT 15
15678: PUSH
15679: LD_INT 16
15681: PUSH
15682: LD_INT 17
15684: PUSH
15685: LD_INT 18
15687: PUSH
15688: LD_INT 19
15690: PUSH
15691: LD_INT 20
15693: PUSH
15694: LD_INT 21
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 23
15702: PUSH
15703: LD_INT 24
15705: PUSH
15706: LD_INT 25
15708: PUSH
15709: LD_INT 26
15711: PUSH
15712: LD_INT 27
15714: PUSH
15715: LD_INT 28
15717: PUSH
15718: LD_INT 29
15720: PUSH
15721: LD_INT 30
15723: PUSH
15724: LD_INT 31
15726: PUSH
15727: LD_INT 32
15729: PUSH
15730: LD_INT 33
15732: PUSH
15733: LD_INT 34
15735: PUSH
15736: LD_INT 35
15738: PUSH
15739: LD_INT 36
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 101
15782: PUSH
15783: LD_INT 102
15785: PUSH
15786: LD_INT 103
15788: PUSH
15789: LD_INT 104
15791: PUSH
15792: LD_INT 105
15794: PUSH
15795: LD_INT 106
15797: PUSH
15798: LD_INT 107
15800: PUSH
15801: LD_INT 108
15803: PUSH
15804: LD_INT 109
15806: PUSH
15807: LD_INT 110
15809: PUSH
15810: LD_INT 111
15812: PUSH
15813: LD_INT 112
15815: PUSH
15816: LD_INT 113
15818: PUSH
15819: LD_INT 114
15821: PUSH
15822: LD_INT 115
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: ST_TO_ADDR
// if result then
15846: LD_VAR 0 1
15850: IFFALSE 16139
// begin normal :=  ;
15852: LD_ADDR_VAR 0 3
15856: PUSH
15857: LD_STRING 
15859: ST_TO_ADDR
// hardcore :=  ;
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: LD_STRING 
15867: ST_TO_ADDR
// for i = 1 to normalCounter do
15868: LD_ADDR_VAR 0 5
15872: PUSH
15873: DOUBLE
15874: LD_INT 1
15876: DEC
15877: ST_TO_ADDR
15878: LD_EXP 31
15882: PUSH
15883: FOR_TO
15884: IFFALSE 15985
// begin tmp := 0 ;
15886: LD_ADDR_VAR 0 2
15890: PUSH
15891: LD_STRING 0
15893: ST_TO_ADDR
// if result [ 1 ] then
15894: LD_VAR 0 1
15898: PUSH
15899: LD_INT 1
15901: ARRAY
15902: IFFALSE 15967
// if result [ 1 ] [ 1 ] = i then
15904: LD_VAR 0 1
15908: PUSH
15909: LD_INT 1
15911: ARRAY
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: PUSH
15917: LD_VAR 0 5
15921: EQUAL
15922: IFFALSE 15967
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15924: LD_ADDR_VAR 0 1
15928: PUSH
15929: LD_VAR 0 1
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: LD_VAR 0 1
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 3
15953: PPUSH
15954: CALL_OW 1
15958: ST_TO_ADDR
// tmp := 1 ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_STRING 1
15966: ST_TO_ADDR
// end ; normal := normal & tmp ;
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_VAR 0 3
15976: PUSH
15977: LD_VAR 0 2
15981: STR
15982: ST_TO_ADDR
// end ;
15983: GO 15883
15985: POP
15986: POP
// for i = 1 to hardcoreCounter do
15987: LD_ADDR_VAR 0 5
15991: PUSH
15992: DOUBLE
15993: LD_INT 1
15995: DEC
15996: ST_TO_ADDR
15997: LD_EXP 32
16001: PUSH
16002: FOR_TO
16003: IFFALSE 16108
// begin tmp := 0 ;
16005: LD_ADDR_VAR 0 2
16009: PUSH
16010: LD_STRING 0
16012: ST_TO_ADDR
// if result [ 2 ] then
16013: LD_VAR 0 1
16017: PUSH
16018: LD_INT 2
16020: ARRAY
16021: IFFALSE 16090
// if result [ 2 ] [ 1 ] = 100 + i then
16023: LD_VAR 0 1
16027: PUSH
16028: LD_INT 2
16030: ARRAY
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PUSH
16036: LD_INT 100
16038: PUSH
16039: LD_VAR 0 5
16043: PLUS
16044: EQUAL
16045: IFFALSE 16090
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16047: LD_ADDR_VAR 0 1
16051: PUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 2
16059: PPUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PPUSH
16069: LD_INT 1
16071: PPUSH
16072: CALL_OW 3
16076: PPUSH
16077: CALL_OW 1
16081: ST_TO_ADDR
// tmp := 1 ;
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: LD_STRING 1
16089: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16090: LD_ADDR_VAR 0 4
16094: PUSH
16095: LD_VAR 0 4
16099: PUSH
16100: LD_VAR 0 2
16104: STR
16105: ST_TO_ADDR
// end ;
16106: GO 16002
16108: POP
16109: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16110: LD_STRING getStreamItemsFromMission("
16112: PUSH
16113: LD_VAR 0 3
16117: STR
16118: PUSH
16119: LD_STRING ","
16121: STR
16122: PUSH
16123: LD_VAR 0 4
16127: STR
16128: PUSH
16129: LD_STRING ")
16131: STR
16132: PPUSH
16133: CALL_OW 559
// end else
16137: GO 16146
// ToLua ( getStreamItemsFromMission("","") ) ;
16139: LD_STRING getStreamItemsFromMission("","")
16141: PPUSH
16142: CALL_OW 559
// end ;
16146: LD_VAR 0 1
16150: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16151: LD_EXP 30
16155: PUSH
16156: LD_EXP 35
16160: AND
16161: IFFALSE 16285
16163: GO 16165
16165: DISABLE
16166: LD_INT 0
16168: PPUSH
16169: PPUSH
// begin enable ;
16170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_INT 22
16178: PUSH
16179: LD_OWVAR 2
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 34
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 34
16203: PUSH
16204: LD_INT 45
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 34
16213: PUSH
16214: LD_INT 28
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 34
16223: PUSH
16224: LD_INT 47
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: ST_TO_ADDR
// if not tmp then
16247: LD_VAR 0 2
16251: NOT
16252: IFFALSE 16256
// exit ;
16254: GO 16285
// for i in tmp do
16256: LD_ADDR_VAR 0 1
16260: PUSH
16261: LD_VAR 0 2
16265: PUSH
16266: FOR_IN
16267: IFFALSE 16283
// begin SetLives ( i , 0 ) ;
16269: LD_VAR 0 1
16273: PPUSH
16274: LD_INT 0
16276: PPUSH
16277: CALL_OW 234
// end ;
16281: GO 16266
16283: POP
16284: POP
// end ;
16285: PPOPN 2
16287: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16288: LD_EXP 30
16292: PUSH
16293: LD_EXP 36
16297: AND
16298: IFFALSE 16382
16300: GO 16302
16302: DISABLE
16303: LD_INT 0
16305: PPUSH
16306: PPUSH
// begin enable ;
16307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16308: LD_ADDR_VAR 0 2
16312: PUSH
16313: LD_INT 22
16315: PUSH
16316: LD_OWVAR 2
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 32
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 69
16343: ST_TO_ADDR
// if not tmp then
16344: LD_VAR 0 2
16348: NOT
16349: IFFALSE 16353
// exit ;
16351: GO 16382
// for i in tmp do
16353: LD_ADDR_VAR 0 1
16357: PUSH
16358: LD_VAR 0 2
16362: PUSH
16363: FOR_IN
16364: IFFALSE 16380
// begin SetLives ( i , 0 ) ;
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_INT 0
16373: PPUSH
16374: CALL_OW 234
// end ;
16378: GO 16363
16380: POP
16381: POP
// end ;
16382: PPOPN 2
16384: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16385: LD_EXP 30
16389: PUSH
16390: LD_EXP 33
16394: AND
16395: IFFALSE 16488
16397: GO 16399
16399: DISABLE
16400: LD_INT 0
16402: PPUSH
// begin enable ;
16403: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16404: LD_ADDR_VAR 0 1
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_OWVAR 2
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 2
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 5
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 25
16436: PUSH
16437: LD_INT 9
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 25
16446: PUSH
16447: LD_INT 8
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PPUSH
16464: CALL_OW 69
16468: PUSH
16469: FOR_IN
16470: IFFALSE 16486
// begin SetClass ( i , 1 ) ;
16472: LD_VAR 0 1
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: CALL_OW 336
// end ;
16484: GO 16469
16486: POP
16487: POP
// end ;
16488: PPOPN 1
16490: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16491: LD_EXP 30
16495: PUSH
16496: LD_EXP 34
16500: AND
16501: PUSH
16502: LD_OWVAR 65
16506: PUSH
16507: LD_INT 7
16509: LESS
16510: AND
16511: IFFALSE 16525
16513: GO 16515
16515: DISABLE
// begin enable ;
16516: ENABLE
// game_speed := 7 ;
16517: LD_ADDR_OWVAR 65
16521: PUSH
16522: LD_INT 7
16524: ST_TO_ADDR
// end ;
16525: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16526: LD_EXP 30
16530: PUSH
16531: LD_EXP 37
16535: AND
16536: IFFALSE 16738
16538: GO 16540
16540: DISABLE
16541: LD_INT 0
16543: PPUSH
16544: PPUSH
16545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 81
16553: PUSH
16554: LD_OWVAR 2
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 21
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: ST_TO_ADDR
// if not tmp then
16582: LD_VAR 0 3
16586: NOT
16587: IFFALSE 16591
// exit ;
16589: GO 16738
// if tmp > 5 then
16591: LD_VAR 0 3
16595: PUSH
16596: LD_INT 5
16598: GREATER
16599: IFFALSE 16611
// k := 5 else
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: LD_INT 5
16608: ST_TO_ADDR
16609: GO 16621
// k := tmp ;
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: LD_VAR 0 3
16620: ST_TO_ADDR
// for i := 1 to k do
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: DOUBLE
16627: LD_INT 1
16629: DEC
16630: ST_TO_ADDR
16631: LD_VAR 0 2
16635: PUSH
16636: FOR_TO
16637: IFFALSE 16736
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16639: LD_VAR 0 3
16643: PUSH
16644: LD_VAR 0 1
16648: ARRAY
16649: PPUSH
16650: LD_VAR 0 1
16654: PUSH
16655: LD_INT 4
16657: MOD
16658: PUSH
16659: LD_INT 1
16661: PLUS
16662: PPUSH
16663: CALL_OW 259
16667: PUSH
16668: LD_INT 10
16670: LESS
16671: IFFALSE 16734
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16673: LD_VAR 0 3
16677: PUSH
16678: LD_VAR 0 1
16682: ARRAY
16683: PPUSH
16684: LD_VAR 0 1
16688: PUSH
16689: LD_INT 4
16691: MOD
16692: PUSH
16693: LD_INT 1
16695: PLUS
16696: PPUSH
16697: LD_VAR 0 3
16701: PUSH
16702: LD_VAR 0 1
16706: ARRAY
16707: PPUSH
16708: LD_VAR 0 1
16712: PUSH
16713: LD_INT 4
16715: MOD
16716: PUSH
16717: LD_INT 1
16719: PLUS
16720: PPUSH
16721: CALL_OW 259
16725: PUSH
16726: LD_INT 1
16728: PLUS
16729: PPUSH
16730: CALL_OW 237
16734: GO 16636
16736: POP
16737: POP
// end ;
16738: PPOPN 3
16740: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16741: LD_EXP 30
16745: PUSH
16746: LD_EXP 38
16750: AND
16751: IFFALSE 16771
16753: GO 16755
16755: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16756: LD_INT 4
16758: PPUSH
16759: LD_OWVAR 2
16763: PPUSH
16764: LD_INT 0
16766: PPUSH
16767: CALL_OW 324
16771: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16772: LD_EXP 30
16776: PUSH
16777: LD_EXP 67
16781: AND
16782: IFFALSE 16802
16784: GO 16786
16786: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16787: LD_INT 19
16789: PPUSH
16790: LD_OWVAR 2
16794: PPUSH
16795: LD_INT 0
16797: PPUSH
16798: CALL_OW 324
16802: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16803: LD_EXP 30
16807: PUSH
16808: LD_EXP 39
16812: AND
16813: IFFALSE 16915
16815: GO 16817
16817: DISABLE
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// begin enable ;
16822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16823: LD_ADDR_VAR 0 2
16827: PUSH
16828: LD_INT 22
16830: PUSH
16831: LD_OWVAR 2
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: LD_INT 34
16845: PUSH
16846: LD_INT 11
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 34
16855: PUSH
16856: LD_INT 30
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL_OW 69
16876: ST_TO_ADDR
// if not tmp then
16877: LD_VAR 0 2
16881: NOT
16882: IFFALSE 16886
// exit ;
16884: GO 16915
// for i in tmp do
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_VAR 0 2
16895: PUSH
16896: FOR_IN
16897: IFFALSE 16913
// begin SetLives ( i , 0 ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 0
16906: PPUSH
16907: CALL_OW 234
// end ;
16911: GO 16896
16913: POP
16914: POP
// end ;
16915: PPOPN 2
16917: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16918: LD_EXP 30
16922: PUSH
16923: LD_EXP 40
16927: AND
16928: IFFALSE 16948
16930: GO 16932
16932: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16933: LD_INT 32
16935: PPUSH
16936: LD_OWVAR 2
16940: PPUSH
16941: LD_INT 0
16943: PPUSH
16944: CALL_OW 324
16948: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16949: LD_EXP 30
16953: PUSH
16954: LD_EXP 41
16958: AND
16959: IFFALSE 17140
16961: GO 16963
16963: DISABLE
16964: LD_INT 0
16966: PPUSH
16967: PPUSH
16968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16969: LD_ADDR_VAR 0 2
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_OWVAR 2
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 33
16988: PUSH
16989: LD_INT 3
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: ST_TO_ADDR
// if not tmp then
17005: LD_VAR 0 2
17009: NOT
17010: IFFALSE 17014
// exit ;
17012: GO 17140
// side := 0 ;
17014: LD_ADDR_VAR 0 3
17018: PUSH
17019: LD_INT 0
17021: ST_TO_ADDR
// for i := 1 to 8 do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: DOUBLE
17028: LD_INT 1
17030: DEC
17031: ST_TO_ADDR
17032: LD_INT 8
17034: PUSH
17035: FOR_TO
17036: IFFALSE 17084
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17038: LD_OWVAR 2
17042: PUSH
17043: LD_VAR 0 1
17047: NONEQUAL
17048: PUSH
17049: LD_OWVAR 2
17053: PPUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 81
17063: PUSH
17064: LD_INT 2
17066: EQUAL
17067: AND
17068: IFFALSE 17082
// begin side := i ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_VAR 0 1
17079: ST_TO_ADDR
// break ;
17080: GO 17084
// end ;
17082: GO 17035
17084: POP
17085: POP
// if not side then
17086: LD_VAR 0 3
17090: NOT
17091: IFFALSE 17095
// exit ;
17093: GO 17140
// for i := 1 to tmp do
17095: LD_ADDR_VAR 0 1
17099: PUSH
17100: DOUBLE
17101: LD_INT 1
17103: DEC
17104: ST_TO_ADDR
17105: LD_VAR 0 2
17109: PUSH
17110: FOR_TO
17111: IFFALSE 17138
// if Prob ( 60 ) then
17113: LD_INT 60
17115: PPUSH
17116: CALL_OW 13
17120: IFFALSE 17136
// SetSide ( i , side ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: CALL_OW 235
17136: GO 17110
17138: POP
17139: POP
// end ;
17140: PPOPN 3
17142: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17143: LD_EXP 30
17147: PUSH
17148: LD_EXP 43
17152: AND
17153: IFFALSE 17272
17155: GO 17157
17157: DISABLE
17158: LD_INT 0
17160: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17161: LD_ADDR_VAR 0 1
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_OWVAR 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: LD_INT 23
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PUSH
17215: FOR_IN
17216: IFFALSE 17270
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 257
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: LD_INT 2
17233: PUSH
17234: LD_INT 3
17236: PUSH
17237: LD_INT 4
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: IN
17246: IFFALSE 17268
// SetClass ( un , rand ( 1 , 4 ) ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: LD_INT 4
17258: PPUSH
17259: CALL_OW 12
17263: PPUSH
17264: CALL_OW 336
17268: GO 17215
17270: POP
17271: POP
// end ;
17272: PPOPN 1
17274: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17275: LD_EXP 30
17279: PUSH
17280: LD_EXP 42
17284: AND
17285: IFFALSE 17364
17287: GO 17289
17289: DISABLE
17290: LD_INT 0
17292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_INT 22
17300: PUSH
17301: LD_OWVAR 2
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 21
17312: PUSH
17313: LD_INT 3
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: ST_TO_ADDR
// if not tmp then
17329: LD_VAR 0 1
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17338: LD_VAR 0 1
17342: PUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 12
17355: ARRAY
17356: PPUSH
17357: LD_INT 100
17359: PPUSH
17360: CALL_OW 234
// end ;
17364: PPOPN 1
17366: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17367: LD_EXP 30
17371: PUSH
17372: LD_EXP 44
17376: AND
17377: IFFALSE 17475
17379: GO 17381
17381: DISABLE
17382: LD_INT 0
17384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_INT 22
17392: PUSH
17393: LD_OWVAR 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 21
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PPUSH
17416: CALL_OW 69
17420: ST_TO_ADDR
// if not tmp then
17421: LD_VAR 0 1
17425: NOT
17426: IFFALSE 17430
// exit ;
17428: GO 17475
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17430: LD_VAR 0 1
17434: PUSH
17435: LD_INT 1
17437: PPUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 12
17447: ARRAY
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 4
17454: PPUSH
17455: CALL_OW 12
17459: PPUSH
17460: LD_INT 3000
17462: PPUSH
17463: LD_INT 9000
17465: PPUSH
17466: CALL_OW 12
17470: PPUSH
17471: CALL_OW 492
// end ;
17475: PPOPN 1
17477: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17478: LD_EXP 30
17482: PUSH
17483: LD_EXP 45
17487: AND
17488: IFFALSE 17508
17490: GO 17492
17492: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17493: LD_INT 1
17495: PPUSH
17496: LD_OWVAR 2
17500: PPUSH
17501: LD_INT 0
17503: PPUSH
17504: CALL_OW 324
17508: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17509: LD_EXP 30
17513: PUSH
17514: LD_EXP 46
17518: AND
17519: IFFALSE 17602
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17528: LD_ADDR_VAR 0 2
17532: PUSH
17533: LD_INT 22
17535: PUSH
17536: LD_OWVAR 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: ST_TO_ADDR
// if not tmp then
17564: LD_VAR 0 2
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17602
// for i in tmp do
17573: LD_ADDR_VAR 0 1
17577: PUSH
17578: LD_VAR 0 2
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17600
// SetBLevel ( i , 10 ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: LD_INT 10
17593: PPUSH
17594: CALL_OW 241
17598: GO 17583
17600: POP
17601: POP
// end ;
17602: PPOPN 2
17604: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17605: LD_EXP 30
17609: PUSH
17610: LD_EXP 47
17614: AND
17615: IFFALSE 17726
17617: GO 17619
17619: DISABLE
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
17624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17625: LD_ADDR_VAR 0 3
17629: PUSH
17630: LD_INT 22
17632: PUSH
17633: LD_OWVAR 2
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 25
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: ST_TO_ADDR
// if not tmp then
17661: LD_VAR 0 3
17665: NOT
17666: IFFALSE 17670
// exit ;
17668: GO 17726
// un := tmp [ rand ( 1 , tmp ) ] ;
17670: LD_ADDR_VAR 0 2
17674: PUSH
17675: LD_VAR 0 3
17679: PUSH
17680: LD_INT 1
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: CALL_OW 12
17692: ARRAY
17693: ST_TO_ADDR
// if Crawls ( un ) then
17694: LD_VAR 0 2
17698: PPUSH
17699: CALL_OW 318
17703: IFFALSE 17714
// ComWalk ( un ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_INT 5
17721: PPUSH
17722: CALL_OW 336
// end ;
17726: PPOPN 3
17728: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17729: LD_EXP 30
17733: PUSH
17734: LD_EXP 48
17738: AND
17739: PUSH
17740: LD_OWVAR 67
17744: PUSH
17745: LD_INT 3
17747: LESS
17748: AND
17749: IFFALSE 17768
17751: GO 17753
17753: DISABLE
// Difficulty := Difficulty + 1 ;
17754: LD_ADDR_OWVAR 67
17758: PUSH
17759: LD_OWVAR 67
17763: PUSH
17764: LD_INT 1
17766: PLUS
17767: ST_TO_ADDR
17768: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17769: LD_EXP 30
17773: PUSH
17774: LD_EXP 49
17778: AND
17779: IFFALSE 17882
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
// begin for i := 1 to 5 do
17787: LD_ADDR_VAR 0 1
17791: PUSH
17792: DOUBLE
17793: LD_INT 1
17795: DEC
17796: ST_TO_ADDR
17797: LD_INT 5
17799: PUSH
17800: FOR_TO
17801: IFFALSE 17880
// begin uc_nation := nation_nature ;
17803: LD_ADDR_OWVAR 21
17807: PUSH
17808: LD_INT 0
17810: ST_TO_ADDR
// uc_side := 0 ;
17811: LD_ADDR_OWVAR 20
17815: PUSH
17816: LD_INT 0
17818: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17819: LD_ADDR_OWVAR 29
17823: PUSH
17824: LD_INT 12
17826: PUSH
17827: LD_INT 12
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// hc_agressivity := 20 ;
17834: LD_ADDR_OWVAR 35
17838: PUSH
17839: LD_INT 20
17841: ST_TO_ADDR
// hc_class := class_tiger ;
17842: LD_ADDR_OWVAR 28
17846: PUSH
17847: LD_INT 14
17849: ST_TO_ADDR
// hc_gallery :=  ;
17850: LD_ADDR_OWVAR 33
17854: PUSH
17855: LD_STRING 
17857: ST_TO_ADDR
// hc_name :=  ;
17858: LD_ADDR_OWVAR 26
17862: PUSH
17863: LD_STRING 
17865: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17866: CALL_OW 44
17870: PPUSH
17871: LD_INT 0
17873: PPUSH
17874: CALL_OW 51
// end ;
17878: GO 17800
17880: POP
17881: POP
// end ;
17882: PPOPN 1
17884: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17885: LD_EXP 30
17889: PUSH
17890: LD_EXP 50
17894: AND
17895: IFFALSE 17904
17897: GO 17899
17899: DISABLE
// StreamSibBomb ;
17900: CALL 17905 0 0
17904: END
// export function StreamSibBomb ; var i , x , y ; begin
17905: LD_INT 0
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
// result := false ;
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: LD_INT 0
17918: ST_TO_ADDR
// for i := 1 to 16 do
17919: LD_ADDR_VAR 0 2
17923: PUSH
17924: DOUBLE
17925: LD_INT 1
17927: DEC
17928: ST_TO_ADDR
17929: LD_INT 16
17931: PUSH
17932: FOR_TO
17933: IFFALSE 18132
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_INT 10
17942: PUSH
17943: LD_INT 20
17945: PUSH
17946: LD_INT 30
17948: PUSH
17949: LD_INT 40
17951: PUSH
17952: LD_INT 50
17954: PUSH
17955: LD_INT 60
17957: PUSH
17958: LD_INT 70
17960: PUSH
17961: LD_INT 80
17963: PUSH
17964: LD_INT 90
17966: PUSH
17967: LD_INT 100
17969: PUSH
17970: LD_INT 110
17972: PUSH
17973: LD_INT 120
17975: PUSH
17976: LD_INT 130
17978: PUSH
17979: LD_INT 140
17981: PUSH
17982: LD_INT 150
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: PPUSH
18005: LD_INT 15
18007: PPUSH
18008: CALL_OW 12
18012: ARRAY
18013: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18014: LD_ADDR_VAR 0 4
18018: PUSH
18019: LD_INT 10
18021: PUSH
18022: LD_INT 20
18024: PUSH
18025: LD_INT 30
18027: PUSH
18028: LD_INT 40
18030: PUSH
18031: LD_INT 50
18033: PUSH
18034: LD_INT 60
18036: PUSH
18037: LD_INT 70
18039: PUSH
18040: LD_INT 80
18042: PUSH
18043: LD_INT 90
18045: PUSH
18046: LD_INT 100
18048: PUSH
18049: LD_INT 110
18051: PUSH
18052: LD_INT 120
18054: PUSH
18055: LD_INT 130
18057: PUSH
18058: LD_INT 140
18060: PUSH
18061: LD_INT 150
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PPUSH
18084: LD_INT 15
18086: PPUSH
18087: CALL_OW 12
18091: ARRAY
18092: ST_TO_ADDR
// if ValidHex ( x , y ) then
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_VAR 0 4
18102: PPUSH
18103: CALL_OW 488
18107: IFFALSE 18130
// begin result := [ x , y ] ;
18109: LD_ADDR_VAR 0 1
18113: PUSH
18114: LD_VAR 0 3
18118: PUSH
18119: LD_VAR 0 4
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: ST_TO_ADDR
// break ;
18128: GO 18132
// end ; end ;
18130: GO 17932
18132: POP
18133: POP
// if result then
18134: LD_VAR 0 1
18138: IFFALSE 18198
// begin ToLua ( playSibBomb() ) ;
18140: LD_STRING playSibBomb()
18142: PPUSH
18143: CALL_OW 559
// wait ( 0 0$14 ) ;
18147: LD_INT 490
18149: PPUSH
18150: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PPUSH
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 2
18170: ARRAY
18171: PPUSH
18172: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_VAR 0 1
18189: PUSH
18190: LD_INT 2
18192: ARRAY
18193: PPUSH
18194: CALL_OW 429
// end ; end ;
18198: LD_VAR 0 1
18202: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18203: LD_EXP 30
18207: PUSH
18208: LD_EXP 52
18212: AND
18213: IFFALSE 18225
18215: GO 18217
18217: DISABLE
// YouLost (  ) ;
18218: LD_STRING 
18220: PPUSH
18221: CALL_OW 104
18225: END
// every 0 0$1 trigger StreamModeActive and sFog do
18226: LD_EXP 30
18230: PUSH
18231: LD_EXP 51
18235: AND
18236: IFFALSE 18250
18238: GO 18240
18240: DISABLE
// FogOff ( your_side ) ;
18241: LD_OWVAR 2
18245: PPUSH
18246: CALL_OW 344
18250: END
// every 0 0$1 trigger StreamModeActive and sSun do
18251: LD_EXP 30
18255: PUSH
18256: LD_EXP 53
18260: AND
18261: IFFALSE 18289
18263: GO 18265
18265: DISABLE
// begin solar_recharge_percent := 0 ;
18266: LD_ADDR_OWVAR 79
18270: PUSH
18271: LD_INT 0
18273: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18274: LD_INT 10500
18276: PPUSH
18277: CALL_OW 67
// solar_recharge_percent := 100 ;
18281: LD_ADDR_OWVAR 79
18285: PUSH
18286: LD_INT 100
18288: ST_TO_ADDR
// end ;
18289: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18290: LD_EXP 30
18294: PUSH
18295: LD_EXP 54
18299: AND
18300: IFFALSE 18539
18302: GO 18304
18304: DISABLE
18305: LD_INT 0
18307: PPUSH
18308: PPUSH
18309: PPUSH
// begin tmp := [ ] ;
18310: LD_ADDR_VAR 0 3
18314: PUSH
18315: EMPTY
18316: ST_TO_ADDR
// for i := 1 to 6 do
18317: LD_ADDR_VAR 0 1
18321: PUSH
18322: DOUBLE
18323: LD_INT 1
18325: DEC
18326: ST_TO_ADDR
18327: LD_INT 6
18329: PUSH
18330: FOR_TO
18331: IFFALSE 18436
// begin uc_nation := nation_nature ;
18333: LD_ADDR_OWVAR 21
18337: PUSH
18338: LD_INT 0
18340: ST_TO_ADDR
// uc_side := 0 ;
18341: LD_ADDR_OWVAR 20
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18349: LD_ADDR_OWVAR 29
18353: PUSH
18354: LD_INT 12
18356: PUSH
18357: LD_INT 12
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: ST_TO_ADDR
// hc_agressivity := 20 ;
18364: LD_ADDR_OWVAR 35
18368: PUSH
18369: LD_INT 20
18371: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18372: LD_ADDR_OWVAR 28
18376: PUSH
18377: LD_INT 17
18379: ST_TO_ADDR
// hc_gallery :=  ;
18380: LD_ADDR_OWVAR 33
18384: PUSH
18385: LD_STRING 
18387: ST_TO_ADDR
// hc_name :=  ;
18388: LD_ADDR_OWVAR 26
18392: PUSH
18393: LD_STRING 
18395: ST_TO_ADDR
// un := CreateHuman ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: CALL_OW 44
18405: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18406: LD_VAR 0 2
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 51
// tmp := tmp ^ un ;
18418: LD_ADDR_VAR 0 3
18422: PUSH
18423: LD_VAR 0 3
18427: PUSH
18428: LD_VAR 0 2
18432: ADD
18433: ST_TO_ADDR
// end ;
18434: GO 18330
18436: POP
18437: POP
// repeat wait ( 0 0$1 ) ;
18438: LD_INT 35
18440: PPUSH
18441: CALL_OW 67
// for un in tmp do
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_VAR 0 3
18454: PUSH
18455: FOR_IN
18456: IFFALSE 18530
// begin if IsDead ( un ) then
18458: LD_VAR 0 2
18462: PPUSH
18463: CALL_OW 301
18467: IFFALSE 18487
// begin tmp := tmp diff un ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_VAR 0 3
18478: PUSH
18479: LD_VAR 0 2
18483: DIFF
18484: ST_TO_ADDR
// continue ;
18485: GO 18455
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18487: LD_VAR 0 2
18491: PPUSH
18492: LD_INT 3
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PPUSH
18509: CALL_OW 69
18513: PPUSH
18514: LD_VAR 0 2
18518: PPUSH
18519: CALL_OW 74
18523: PPUSH
18524: CALL_OW 115
// end ;
18528: GO 18455
18530: POP
18531: POP
// until not tmp ;
18532: LD_VAR 0 3
18536: NOT
18537: IFFALSE 18438
// end ;
18539: PPOPN 3
18541: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18542: LD_EXP 30
18546: PUSH
18547: LD_EXP 55
18551: AND
18552: IFFALSE 18606
18554: GO 18556
18556: DISABLE
// begin ToLua ( displayTroll(); ) ;
18557: LD_STRING displayTroll();
18559: PPUSH
18560: CALL_OW 559
// wait ( 3 3$00 ) ;
18564: LD_INT 6300
18566: PPUSH
18567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18571: LD_STRING hideTroll();
18573: PPUSH
18574: CALL_OW 559
// wait ( 1 1$00 ) ;
18578: LD_INT 2100
18580: PPUSH
18581: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18585: LD_STRING displayTroll();
18587: PPUSH
18588: CALL_OW 559
// wait ( 1 1$00 ) ;
18592: LD_INT 2100
18594: PPUSH
18595: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18599: LD_STRING hideTroll();
18601: PPUSH
18602: CALL_OW 559
// end ;
18606: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18607: LD_EXP 30
18611: PUSH
18612: LD_EXP 56
18616: AND
18617: IFFALSE 18680
18619: GO 18621
18621: DISABLE
18622: LD_INT 0
18624: PPUSH
// begin p := 0 ;
18625: LD_ADDR_VAR 0 1
18629: PUSH
18630: LD_INT 0
18632: ST_TO_ADDR
// repeat game_speed := 1 ;
18633: LD_ADDR_OWVAR 65
18637: PUSH
18638: LD_INT 1
18640: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18641: LD_INT 35
18643: PPUSH
18644: CALL_OW 67
// p := p + 1 ;
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_VAR 0 1
18657: PUSH
18658: LD_INT 1
18660: PLUS
18661: ST_TO_ADDR
// until p >= 60 ;
18662: LD_VAR 0 1
18666: PUSH
18667: LD_INT 60
18669: GREATEREQUAL
18670: IFFALSE 18633
// game_speed := 4 ;
18672: LD_ADDR_OWVAR 65
18676: PUSH
18677: LD_INT 4
18679: ST_TO_ADDR
// end ;
18680: PPOPN 1
18682: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18683: LD_EXP 30
18687: PUSH
18688: LD_EXP 57
18692: AND
18693: IFFALSE 18839
18695: GO 18697
18697: DISABLE
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18702: LD_ADDR_VAR 0 1
18706: PUSH
18707: LD_INT 22
18709: PUSH
18710: LD_OWVAR 2
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: LD_INT 30
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 30
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: ST_TO_ADDR
// if not depot then
18756: LD_VAR 0 1
18760: NOT
18761: IFFALSE 18765
// exit ;
18763: GO 18839
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_VAR 0 1
18774: PUSH
18775: LD_INT 1
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 12
18787: ARRAY
18788: PPUSH
18789: CALL_OW 274
18793: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: LD_INT 0
18804: PPUSH
18805: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18809: LD_VAR 0 2
18813: PPUSH
18814: LD_INT 2
18816: PPUSH
18817: LD_INT 0
18819: PPUSH
18820: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18824: LD_VAR 0 2
18828: PPUSH
18829: LD_INT 3
18831: PPUSH
18832: LD_INT 0
18834: PPUSH
18835: CALL_OW 277
// end ;
18839: PPOPN 2
18841: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18842: LD_EXP 30
18846: PUSH
18847: LD_EXP 58
18851: AND
18852: IFFALSE 18949
18854: GO 18856
18856: DISABLE
18857: LD_INT 0
18859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18860: LD_ADDR_VAR 0 1
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_OWVAR 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: LD_INT 23
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: ST_TO_ADDR
// if not tmp then
18914: LD_VAR 0 1
18918: NOT
18919: IFFALSE 18923
// exit ;
18921: GO 18949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 12
18940: ARRAY
18941: PPUSH
18942: LD_INT 200
18944: PPUSH
18945: CALL_OW 234
// end ;
18949: PPOPN 1
18951: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18952: LD_EXP 30
18956: PUSH
18957: LD_EXP 59
18961: AND
18962: IFFALSE 19041
18964: GO 18966
18966: DISABLE
18967: LD_INT 0
18969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_OWVAR 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 21
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 69
19005: ST_TO_ADDR
// if not tmp then
19006: LD_VAR 0 1
19010: NOT
19011: IFFALSE 19015
// exit ;
19013: GO 19041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 1
19022: PPUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 12
19032: ARRAY
19033: PPUSH
19034: LD_INT 60
19036: PPUSH
19037: CALL_OW 234
// end ;
19041: PPOPN 1
19043: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19044: LD_EXP 30
19048: PUSH
19049: LD_EXP 60
19053: AND
19054: IFFALSE 19153
19056: GO 19058
19058: DISABLE
19059: LD_INT 0
19061: PPUSH
19062: PPUSH
// begin enable ;
19063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19064: LD_ADDR_VAR 0 1
19068: PUSH
19069: LD_INT 22
19071: PUSH
19072: LD_OWVAR 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 61
19083: PUSH
19084: EMPTY
19085: LIST
19086: PUSH
19087: LD_INT 33
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 69
19106: ST_TO_ADDR
// if not tmp then
19107: LD_VAR 0 1
19111: NOT
19112: IFFALSE 19116
// exit ;
19114: GO 19153
// for i in tmp do
19116: LD_ADDR_VAR 0 2
19120: PUSH
19121: LD_VAR 0 1
19125: PUSH
19126: FOR_IN
19127: IFFALSE 19151
// if IsControledBy ( i ) then
19129: LD_VAR 0 2
19133: PPUSH
19134: CALL_OW 312
19138: IFFALSE 19149
// ComUnlink ( i ) ;
19140: LD_VAR 0 2
19144: PPUSH
19145: CALL_OW 136
19149: GO 19126
19151: POP
19152: POP
// end ;
19153: PPOPN 2
19155: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19156: LD_EXP 30
19160: PUSH
19161: LD_EXP 61
19165: AND
19166: IFFALSE 19306
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
// begin ToLua ( displayPowell(); ) ;
19175: LD_STRING displayPowell();
19177: PPUSH
19178: CALL_OW 559
// uc_side := 0 ;
19182: LD_ADDR_OWVAR 20
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// uc_nation := 2 ;
19190: LD_ADDR_OWVAR 21
19194: PUSH
19195: LD_INT 2
19197: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19198: LD_ADDR_OWVAR 37
19202: PUSH
19203: LD_INT 14
19205: ST_TO_ADDR
// vc_engine := engine_siberite ;
19206: LD_ADDR_OWVAR 39
19210: PUSH
19211: LD_INT 3
19213: ST_TO_ADDR
// vc_control := control_apeman ;
19214: LD_ADDR_OWVAR 38
19218: PUSH
19219: LD_INT 5
19221: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19222: LD_ADDR_OWVAR 40
19226: PUSH
19227: LD_INT 29
19229: ST_TO_ADDR
// un := CreateVehicle ;
19230: LD_ADDR_VAR 0 2
19234: PUSH
19235: CALL_OW 45
19239: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19240: LD_VAR 0 2
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19252: LD_INT 35
19254: PPUSH
19255: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19259: LD_VAR 0 2
19263: PPUSH
19264: LD_INT 22
19266: PUSH
19267: LD_OWVAR 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PPUSH
19276: CALL_OW 69
19280: PPUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 74
19290: PPUSH
19291: CALL_OW 115
// until IsDead ( un ) ;
19295: LD_VAR 0 2
19299: PPUSH
19300: CALL_OW 301
19304: IFFALSE 19252
// end ;
19306: PPOPN 2
19308: END
// every 0 0$1 trigger StreamModeActive and sStu do
19309: LD_EXP 30
19313: PUSH
19314: LD_EXP 69
19318: AND
19319: IFFALSE 19335
19321: GO 19323
19323: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19324: LD_STRING displayStucuk();
19326: PPUSH
19327: CALL_OW 559
// ResetFog ;
19331: CALL_OW 335
// end ;
19335: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19336: LD_EXP 30
19340: PUSH
19341: LD_EXP 62
19345: AND
19346: IFFALSE 19487
19348: GO 19350
19350: DISABLE
19351: LD_INT 0
19353: PPUSH
19354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19355: LD_ADDR_VAR 0 2
19359: PUSH
19360: LD_INT 22
19362: PUSH
19363: LD_OWVAR 2
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 21
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 69
19390: ST_TO_ADDR
// if not tmp then
19391: LD_VAR 0 2
19395: NOT
19396: IFFALSE 19400
// exit ;
19398: GO 19487
// un := tmp [ rand ( 1 , tmp ) ] ;
19400: LD_ADDR_VAR 0 1
19404: PUSH
19405: LD_VAR 0 2
19409: PUSH
19410: LD_INT 1
19412: PPUSH
19413: LD_VAR 0 2
19417: PPUSH
19418: CALL_OW 12
19422: ARRAY
19423: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19424: LD_VAR 0 1
19428: PPUSH
19429: LD_INT 0
19431: PPUSH
19432: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19436: LD_VAR 0 1
19440: PPUSH
19441: LD_OWVAR 3
19445: PUSH
19446: LD_VAR 0 1
19450: DIFF
19451: PPUSH
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 74
19461: PPUSH
19462: CALL_OW 115
// wait ( 0 0$20 ) ;
19466: LD_INT 700
19468: PPUSH
19469: CALL_OW 67
// SetSide ( un , your_side ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_OWVAR 2
19482: PPUSH
19483: CALL_OW 235
// end ;
19487: PPOPN 2
19489: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19490: LD_EXP 30
19494: PUSH
19495: LD_EXP 63
19499: AND
19500: IFFALSE 19606
19502: GO 19504
19504: DISABLE
19505: LD_INT 0
19507: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19508: LD_ADDR_VAR 0 1
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_OWVAR 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PPUSH
19557: CALL_OW 69
19561: ST_TO_ADDR
// if not depot then
19562: LD_VAR 0 1
19566: NOT
19567: IFFALSE 19571
// exit ;
19569: GO 19606
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19571: LD_VAR 0 1
19575: PUSH
19576: LD_INT 1
19578: ARRAY
19579: PPUSH
19580: CALL_OW 250
19584: PPUSH
19585: LD_VAR 0 1
19589: PUSH
19590: LD_INT 1
19592: ARRAY
19593: PPUSH
19594: CALL_OW 251
19598: PPUSH
19599: LD_INT 70
19601: PPUSH
19602: CALL_OW 495
// end ;
19606: PPOPN 1
19608: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19609: LD_EXP 30
19613: PUSH
19614: LD_EXP 64
19618: AND
19619: IFFALSE 19830
19621: GO 19623
19623: DISABLE
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
19628: PPUSH
19629: PPUSH
19630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19631: LD_ADDR_VAR 0 5
19635: PUSH
19636: LD_INT 22
19638: PUSH
19639: LD_OWVAR 2
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 21
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PPUSH
19662: CALL_OW 69
19666: ST_TO_ADDR
// if not tmp then
19667: LD_VAR 0 5
19671: NOT
19672: IFFALSE 19676
// exit ;
19674: GO 19830
// for i in tmp do
19676: LD_ADDR_VAR 0 1
19680: PUSH
19681: LD_VAR 0 5
19685: PUSH
19686: FOR_IN
19687: IFFALSE 19828
// begin d := rand ( 0 , 5 ) ;
19689: LD_ADDR_VAR 0 4
19693: PUSH
19694: LD_INT 0
19696: PPUSH
19697: LD_INT 5
19699: PPUSH
19700: CALL_OW 12
19704: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 250
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 12
19730: PPUSH
19731: CALL_OW 12
19735: PPUSH
19736: CALL_OW 272
19740: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19741: LD_ADDR_VAR 0 3
19745: PUSH
19746: LD_VAR 0 1
19750: PPUSH
19751: CALL_OW 251
19755: PPUSH
19756: LD_VAR 0 4
19760: PPUSH
19761: LD_INT 3
19763: PPUSH
19764: LD_INT 12
19766: PPUSH
19767: CALL_OW 12
19771: PPUSH
19772: CALL_OW 273
19776: ST_TO_ADDR
// if ValidHex ( x , y ) then
19777: LD_VAR 0 2
19781: PPUSH
19782: LD_VAR 0 3
19786: PPUSH
19787: CALL_OW 488
19791: IFFALSE 19826
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: LD_INT 3
19810: PPUSH
19811: LD_INT 6
19813: PPUSH
19814: CALL_OW 12
19818: PPUSH
19819: LD_INT 1
19821: PPUSH
19822: CALL_OW 483
// end ;
19826: GO 19686
19828: POP
19829: POP
// end ;
19830: PPOPN 5
19832: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19833: LD_EXP 30
19837: PUSH
19838: LD_EXP 65
19842: AND
19843: IFFALSE 19937
19845: GO 19847
19847: DISABLE
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19852: LD_ADDR_VAR 0 2
19856: PUSH
19857: LD_INT 22
19859: PUSH
19860: LD_OWVAR 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 32
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 21
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: PPUSH
19894: CALL_OW 69
19898: ST_TO_ADDR
// if not tmp then
19899: LD_VAR 0 2
19903: NOT
19904: IFFALSE 19908
// exit ;
19906: GO 19937
// for i in tmp do
19908: LD_ADDR_VAR 0 1
19912: PUSH
19913: LD_VAR 0 2
19917: PUSH
19918: FOR_IN
19919: IFFALSE 19935
// SetFuel ( i , 0 ) ;
19921: LD_VAR 0 1
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 240
19933: GO 19918
19935: POP
19936: POP
// end ;
19937: PPOPN 2
19939: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19940: LD_EXP 30
19944: PUSH
19945: LD_EXP 66
19949: AND
19950: IFFALSE 20016
19952: GO 19954
19954: DISABLE
19955: LD_INT 0
19957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19958: LD_ADDR_VAR 0 1
19962: PUSH
19963: LD_INT 22
19965: PUSH
19966: LD_OWVAR 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 30
19977: PUSH
19978: LD_INT 29
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PPUSH
19989: CALL_OW 69
19993: ST_TO_ADDR
// if not tmp then
19994: LD_VAR 0 1
19998: NOT
19999: IFFALSE 20003
// exit ;
20001: GO 20016
// DestroyUnit ( tmp [ 1 ] ) ;
20003: LD_VAR 0 1
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: PPUSH
20012: CALL_OW 65
// end ;
20016: PPOPN 1
20018: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20019: LD_EXP 30
20023: PUSH
20024: LD_EXP 68
20028: AND
20029: IFFALSE 20158
20031: GO 20033
20033: DISABLE
20034: LD_INT 0
20036: PPUSH
// begin uc_side := 0 ;
20037: LD_ADDR_OWVAR 20
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// uc_nation := nation_arabian ;
20045: LD_ADDR_OWVAR 21
20049: PUSH
20050: LD_INT 2
20052: ST_TO_ADDR
// hc_gallery :=  ;
20053: LD_ADDR_OWVAR 33
20057: PUSH
20058: LD_STRING 
20060: ST_TO_ADDR
// hc_name :=  ;
20061: LD_ADDR_OWVAR 26
20065: PUSH
20066: LD_STRING 
20068: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20069: LD_INT 1
20071: PPUSH
20072: LD_INT 11
20074: PPUSH
20075: LD_INT 10
20077: PPUSH
20078: CALL_OW 380
// un := CreateHuman ;
20082: LD_ADDR_VAR 0 1
20086: PUSH
20087: CALL_OW 44
20091: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20104: LD_INT 35
20106: PPUSH
20107: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20111: LD_VAR 0 1
20115: PPUSH
20116: LD_INT 22
20118: PUSH
20119: LD_OWVAR 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PPUSH
20128: CALL_OW 69
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 74
20142: PPUSH
20143: CALL_OW 115
// until IsDead ( un ) ;
20147: LD_VAR 0 1
20151: PPUSH
20152: CALL_OW 301
20156: IFFALSE 20104
// end ;
20158: PPOPN 1
20160: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20161: LD_EXP 30
20165: PUSH
20166: LD_EXP 70
20170: AND
20171: IFFALSE 20183
20173: GO 20175
20175: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20176: LD_STRING earthquake(getX(game), 0, 32)
20178: PPUSH
20179: CALL_OW 559
20183: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20184: LD_EXP 30
20188: PUSH
20189: LD_EXP 71
20193: AND
20194: IFFALSE 20285
20196: GO 20198
20198: DISABLE
20199: LD_INT 0
20201: PPUSH
// begin enable ;
20202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20203: LD_ADDR_VAR 0 1
20207: PUSH
20208: LD_INT 22
20210: PUSH
20211: LD_OWVAR 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 21
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 33
20232: PUSH
20233: LD_INT 3
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: ST_TO_ADDR
// if not tmp then
20250: LD_VAR 0 1
20254: NOT
20255: IFFALSE 20259
// exit ;
20257: GO 20285
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20259: LD_VAR 0 1
20263: PUSH
20264: LD_INT 1
20266: PPUSH
20267: LD_VAR 0 1
20271: PPUSH
20272: CALL_OW 12
20276: ARRAY
20277: PPUSH
20278: LD_INT 1
20280: PPUSH
20281: CALL_OW 234
// end ;
20285: PPOPN 1
20287: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20288: LD_EXP 30
20292: PUSH
20293: LD_EXP 72
20297: AND
20298: IFFALSE 20439
20300: GO 20302
20302: DISABLE
20303: LD_INT 0
20305: PPUSH
20306: PPUSH
20307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_INT 22
20315: PUSH
20316: LD_OWVAR 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 25
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 69
20343: ST_TO_ADDR
// if not tmp then
20344: LD_VAR 0 3
20348: NOT
20349: IFFALSE 20353
// exit ;
20351: GO 20439
// un := tmp [ rand ( 1 , tmp ) ] ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 1
20365: PPUSH
20366: LD_VAR 0 3
20370: PPUSH
20371: CALL_OW 12
20375: ARRAY
20376: ST_TO_ADDR
// if Crawls ( un ) then
20377: LD_VAR 0 2
20381: PPUSH
20382: CALL_OW 318
20386: IFFALSE 20397
// ComWalk ( un ) ;
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20397: LD_VAR 0 2
20401: PPUSH
20402: LD_INT 9
20404: PPUSH
20405: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20409: LD_INT 28
20411: PPUSH
20412: LD_OWVAR 2
20416: PPUSH
20417: LD_INT 2
20419: PPUSH
20420: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20424: LD_INT 29
20426: PPUSH
20427: LD_OWVAR 2
20431: PPUSH
20432: LD_INT 2
20434: PPUSH
20435: CALL_OW 322
// end ;
20439: PPOPN 3
20441: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20442: LD_EXP 30
20446: PUSH
20447: LD_EXP 73
20451: AND
20452: IFFALSE 20563
20454: GO 20456
20456: DISABLE
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 25
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 3
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20563
// un := tmp [ rand ( 1 , tmp ) ] ;
20507: LD_ADDR_VAR 0 2
20511: PUSH
20512: LD_VAR 0 3
20516: PUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: CALL_OW 12
20529: ARRAY
20530: ST_TO_ADDR
// if Crawls ( un ) then
20531: LD_VAR 0 2
20535: PPUSH
20536: CALL_OW 318
20540: IFFALSE 20551
// ComWalk ( un ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20551: LD_VAR 0 2
20555: PPUSH
20556: LD_INT 8
20558: PPUSH
20559: CALL_OW 336
// end ;
20563: PPOPN 3
20565: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20566: LD_EXP 30
20570: PUSH
20571: LD_EXP 74
20575: AND
20576: IFFALSE 20720
20578: GO 20580
20580: DISABLE
20581: LD_INT 0
20583: PPUSH
20584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20585: LD_ADDR_VAR 0 2
20589: PUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 21
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: LD_INT 34
20617: PUSH
20618: LD_INT 12
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 34
20627: PUSH
20628: LD_INT 51
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 34
20637: PUSH
20638: LD_INT 32
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: PPUSH
20656: CALL_OW 69
20660: ST_TO_ADDR
// if not tmp then
20661: LD_VAR 0 2
20665: NOT
20666: IFFALSE 20670
// exit ;
20668: GO 20720
// for i in tmp do
20670: LD_ADDR_VAR 0 1
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: FOR_IN
20681: IFFALSE 20718
// if GetCargo ( i , mat_artifact ) = 0 then
20683: LD_VAR 0 1
20687: PPUSH
20688: LD_INT 4
20690: PPUSH
20691: CALL_OW 289
20695: PUSH
20696: LD_INT 0
20698: EQUAL
20699: IFFALSE 20716
// SetCargo ( i , mat_siberit , 100 ) ;
20701: LD_VAR 0 1
20705: PPUSH
20706: LD_INT 3
20708: PPUSH
20709: LD_INT 100
20711: PPUSH
20712: CALL_OW 290
20716: GO 20680
20718: POP
20719: POP
// end ;
20720: PPOPN 2
20722: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20723: LD_EXP 30
20727: PUSH
20728: LD_EXP 75
20732: AND
20733: IFFALSE 20916
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_INT 22
20749: PUSH
20750: LD_OWVAR 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: ST_TO_ADDR
// if not tmp then
20764: LD_VAR 0 2
20768: NOT
20769: IFFALSE 20773
// exit ;
20771: GO 20916
// for i := 1 to 2 do
20773: LD_ADDR_VAR 0 1
20777: PUSH
20778: DOUBLE
20779: LD_INT 1
20781: DEC
20782: ST_TO_ADDR
20783: LD_INT 2
20785: PUSH
20786: FOR_TO
20787: IFFALSE 20914
// begin uc_side := your_side ;
20789: LD_ADDR_OWVAR 20
20793: PUSH
20794: LD_OWVAR 2
20798: ST_TO_ADDR
// uc_nation := nation_american ;
20799: LD_ADDR_OWVAR 21
20803: PUSH
20804: LD_INT 1
20806: ST_TO_ADDR
// vc_chassis := us_morphling ;
20807: LD_ADDR_OWVAR 37
20811: PUSH
20812: LD_INT 5
20814: ST_TO_ADDR
// vc_engine := engine_siberite ;
20815: LD_ADDR_OWVAR 39
20819: PUSH
20820: LD_INT 3
20822: ST_TO_ADDR
// vc_control := control_computer ;
20823: LD_ADDR_OWVAR 38
20827: PUSH
20828: LD_INT 3
20830: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20831: LD_ADDR_OWVAR 40
20835: PUSH
20836: LD_INT 10
20838: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20839: LD_VAR 0 2
20843: PUSH
20844: LD_INT 1
20846: ARRAY
20847: PPUSH
20848: CALL_OW 310
20852: NOT
20853: IFFALSE 20900
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20855: CALL_OW 45
20859: PPUSH
20860: LD_VAR 0 2
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 250
20873: PPUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: PPUSH
20883: CALL_OW 251
20887: PPUSH
20888: LD_INT 12
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 50
20898: GO 20912
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20900: CALL_OW 45
20904: PPUSH
20905: LD_INT 1
20907: PPUSH
20908: CALL_OW 51
// end ;
20912: GO 20786
20914: POP
20915: POP
// end ;
20916: PPOPN 2
20918: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20919: LD_EXP 30
20923: PUSH
20924: LD_EXP 76
20928: AND
20929: IFFALSE 21151
20931: GO 20933
20933: DISABLE
20934: LD_INT 0
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20942: LD_ADDR_VAR 0 6
20946: PUSH
20947: LD_INT 22
20949: PUSH
20950: LD_OWVAR 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: LD_INT 23
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: LIST
20990: PPUSH
20991: CALL_OW 69
20995: ST_TO_ADDR
// if not tmp then
20996: LD_VAR 0 6
21000: NOT
21001: IFFALSE 21005
// exit ;
21003: GO 21151
// s1 := rand ( 1 , 4 ) ;
21005: LD_ADDR_VAR 0 2
21009: PUSH
21010: LD_INT 1
21012: PPUSH
21013: LD_INT 4
21015: PPUSH
21016: CALL_OW 12
21020: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21021: LD_ADDR_VAR 0 4
21025: PUSH
21026: LD_VAR 0 6
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: PPUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: CALL_OW 259
21044: ST_TO_ADDR
// if s1 = 1 then
21045: LD_VAR 0 2
21049: PUSH
21050: LD_INT 1
21052: EQUAL
21053: IFFALSE 21073
// s2 := rand ( 2 , 4 ) else
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_INT 2
21062: PPUSH
21063: LD_INT 4
21065: PPUSH
21066: CALL_OW 12
21070: ST_TO_ADDR
21071: GO 21081
// s2 := 1 ;
21073: LD_ADDR_VAR 0 3
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21081: LD_ADDR_VAR 0 5
21085: PUSH
21086: LD_VAR 0 6
21090: PUSH
21091: LD_INT 1
21093: ARRAY
21094: PPUSH
21095: LD_VAR 0 3
21099: PPUSH
21100: CALL_OW 259
21104: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21105: LD_VAR 0 6
21109: PUSH
21110: LD_INT 1
21112: ARRAY
21113: PPUSH
21114: LD_VAR 0 2
21118: PPUSH
21119: LD_VAR 0 5
21123: PPUSH
21124: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21128: LD_VAR 0 6
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_VAR 0 4
21146: PPUSH
21147: CALL_OW 237
// end ;
21151: PPOPN 6
21153: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21154: LD_EXP 30
21158: PUSH
21159: LD_EXP 77
21163: AND
21164: IFFALSE 21243
21166: GO 21168
21168: DISABLE
21169: LD_INT 0
21171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21172: LD_ADDR_VAR 0 1
21176: PUSH
21177: LD_INT 22
21179: PUSH
21180: LD_OWVAR 2
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 30
21191: PUSH
21192: LD_INT 3
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 69
21207: ST_TO_ADDR
// if not tmp then
21208: LD_VAR 0 1
21212: NOT
21213: IFFALSE 21217
// exit ;
21215: GO 21243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21217: LD_VAR 0 1
21221: PUSH
21222: LD_INT 1
21224: PPUSH
21225: LD_VAR 0 1
21229: PPUSH
21230: CALL_OW 12
21234: ARRAY
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 234
// end ;
21243: PPOPN 1
21245: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21246: LD_EXP 30
21250: PUSH
21251: LD_EXP 78
21255: AND
21256: IFFALSE 21368
21258: GO 21260
21260: DISABLE
21261: LD_INT 0
21263: PPUSH
21264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21265: LD_ADDR_VAR 0 2
21269: PUSH
21270: LD_INT 22
21272: PUSH
21273: LD_OWVAR 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: LD_INT 30
21287: PUSH
21288: LD_INT 27
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 30
21297: PUSH
21298: LD_INT 26
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 30
21307: PUSH
21308: LD_INT 28
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PPUSH
21325: CALL_OW 69
21329: ST_TO_ADDR
// if not tmp then
21330: LD_VAR 0 2
21334: NOT
21335: IFFALSE 21339
// exit ;
21337: GO 21368
// for i in tmp do
21339: LD_ADDR_VAR 0 1
21343: PUSH
21344: LD_VAR 0 2
21348: PUSH
21349: FOR_IN
21350: IFFALSE 21366
// SetLives ( i , 1 ) ;
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_INT 1
21359: PPUSH
21360: CALL_OW 234
21364: GO 21349
21366: POP
21367: POP
// end ;
21368: PPOPN 2
21370: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21371: LD_EXP 30
21375: PUSH
21376: LD_EXP 79
21380: AND
21381: IFFALSE 21655
21383: GO 21385
21385: DISABLE
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
21390: PPUSH
// begin i := rand ( 1 , 7 ) ;
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_INT 1
21398: PPUSH
21399: LD_INT 7
21401: PPUSH
21402: CALL_OW 12
21406: ST_TO_ADDR
// case i of 1 :
21407: LD_VAR 0 1
21411: PUSH
21412: LD_INT 1
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21430
21420: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21421: LD_STRING earthquake(getX(game), 0, 32)
21423: PPUSH
21424: CALL_OW 559
21428: GO 21655
21430: LD_INT 2
21432: DOUBLE
21433: EQUAL
21434: IFTRUE 21438
21436: GO 21452
21438: POP
// begin ToLua ( displayStucuk(); ) ;
21439: LD_STRING displayStucuk();
21441: PPUSH
21442: CALL_OW 559
// ResetFog ;
21446: CALL_OW 335
// end ; 3 :
21450: GO 21655
21452: LD_INT 3
21454: DOUBLE
21455: EQUAL
21456: IFTRUE 21460
21458: GO 21564
21460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21461: LD_ADDR_VAR 0 2
21465: PUSH
21466: LD_INT 22
21468: PUSH
21469: LD_OWVAR 2
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 25
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PPUSH
21492: CALL_OW 69
21496: ST_TO_ADDR
// if not tmp then
21497: LD_VAR 0 2
21501: NOT
21502: IFFALSE 21506
// exit ;
21504: GO 21655
// un := tmp [ rand ( 1 , tmp ) ] ;
21506: LD_ADDR_VAR 0 3
21510: PUSH
21511: LD_VAR 0 2
21515: PUSH
21516: LD_INT 1
21518: PPUSH
21519: LD_VAR 0 2
21523: PPUSH
21524: CALL_OW 12
21528: ARRAY
21529: ST_TO_ADDR
// if Crawls ( un ) then
21530: LD_VAR 0 3
21534: PPUSH
21535: CALL_OW 318
21539: IFFALSE 21550
// ComWalk ( un ) ;
21541: LD_VAR 0 3
21545: PPUSH
21546: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 8
21557: PPUSH
21558: CALL_OW 336
// end ; 4 :
21562: GO 21655
21564: LD_INT 4
21566: DOUBLE
21567: EQUAL
21568: IFTRUE 21572
21570: GO 21633
21572: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21573: LD_ADDR_VAR 0 2
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_OWVAR 2
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 30
21592: PUSH
21593: LD_INT 29
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: CALL_OW 69
21608: ST_TO_ADDR
// if not tmp then
21609: LD_VAR 0 2
21613: NOT
21614: IFFALSE 21618
// exit ;
21616: GO 21655
// DestroyUnit ( tmp [ 1 ] ) ;
21618: LD_VAR 0 2
21622: PUSH
21623: LD_INT 1
21625: ARRAY
21626: PPUSH
21627: CALL_OW 65
// end ; 5 .. 7 :
21631: GO 21655
21633: LD_INT 5
21635: DOUBLE
21636: GREATEREQUAL
21637: IFFALSE 21645
21639: LD_INT 7
21641: DOUBLE
21642: LESSEQUAL
21643: IFTRUE 21647
21645: GO 21654
21647: POP
// StreamSibBomb ; end ;
21648: CALL 17905 0 0
21652: GO 21655
21654: POP
// end ;
21655: PPOPN 3
21657: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21658: LD_EXP 30
21662: PUSH
21663: LD_EXP 80
21667: AND
21668: IFFALSE 21824
21670: GO 21672
21672: DISABLE
21673: LD_INT 0
21675: PPUSH
21676: PPUSH
21677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21678: LD_ADDR_VAR 0 2
21682: PUSH
21683: LD_INT 81
21685: PUSH
21686: LD_OWVAR 2
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 2
21697: PUSH
21698: LD_INT 21
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 21
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PPUSH
21727: CALL_OW 69
21731: ST_TO_ADDR
// if not tmp then
21732: LD_VAR 0 2
21736: NOT
21737: IFFALSE 21741
// exit ;
21739: GO 21824
// p := 0 ;
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21749: LD_INT 35
21751: PPUSH
21752: CALL_OW 67
// p := p + 1 ;
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_VAR 0 3
21765: PUSH
21766: LD_INT 1
21768: PLUS
21769: ST_TO_ADDR
// for i in tmp do
21770: LD_ADDR_VAR 0 1
21774: PUSH
21775: LD_VAR 0 2
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21812
// if GetLives ( i ) < 1000 then
21783: LD_VAR 0 1
21787: PPUSH
21788: CALL_OW 256
21792: PUSH
21793: LD_INT 1000
21795: LESS
21796: IFFALSE 21810
// SetLives ( i , 1000 ) ;
21798: LD_VAR 0 1
21802: PPUSH
21803: LD_INT 1000
21805: PPUSH
21806: CALL_OW 234
21810: GO 21780
21812: POP
21813: POP
// until p > 20 ;
21814: LD_VAR 0 3
21818: PUSH
21819: LD_INT 20
21821: GREATER
21822: IFFALSE 21749
// end ;
21824: PPOPN 3
21826: END
// every 0 0$1 trigger StreamModeActive and sTime do
21827: LD_EXP 30
21831: PUSH
21832: LD_EXP 81
21836: AND
21837: IFFALSE 21872
21839: GO 21841
21841: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21842: LD_INT 28
21844: PPUSH
21845: LD_OWVAR 2
21849: PPUSH
21850: LD_INT 2
21852: PPUSH
21853: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21857: LD_INT 30
21859: PPUSH
21860: LD_OWVAR 2
21864: PPUSH
21865: LD_INT 2
21867: PPUSH
21868: CALL_OW 322
// end ;
21872: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21873: LD_EXP 30
21877: PUSH
21878: LD_EXP 82
21882: AND
21883: IFFALSE 22004
21885: GO 21887
21887: DISABLE
21888: LD_INT 0
21890: PPUSH
21891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21892: LD_ADDR_VAR 0 2
21896: PUSH
21897: LD_INT 22
21899: PUSH
21900: LD_OWVAR 2
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 3
21921: PUSH
21922: LD_INT 23
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: PPUSH
21941: CALL_OW 69
21945: ST_TO_ADDR
// if not tmp then
21946: LD_VAR 0 2
21950: NOT
21951: IFFALSE 21955
// exit ;
21953: GO 22004
// for i in tmp do
21955: LD_ADDR_VAR 0 1
21959: PUSH
21960: LD_VAR 0 2
21964: PUSH
21965: FOR_IN
21966: IFFALSE 22002
// begin if Crawls ( i ) then
21968: LD_VAR 0 1
21972: PPUSH
21973: CALL_OW 318
21977: IFFALSE 21988
// ComWalk ( i ) ;
21979: LD_VAR 0 1
21983: PPUSH
21984: CALL_OW 138
// SetClass ( i , 2 ) ;
21988: LD_VAR 0 1
21992: PPUSH
21993: LD_INT 2
21995: PPUSH
21996: CALL_OW 336
// end ;
22000: GO 21965
22002: POP
22003: POP
// end ;
22004: PPOPN 2
22006: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22007: LD_EXP 30
22011: PUSH
22012: LD_EXP 83
22016: AND
22017: IFFALSE 22298
22019: GO 22021
22021: DISABLE
22022: LD_INT 0
22024: PPUSH
22025: PPUSH
22026: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22027: LD_OWVAR 2
22031: PPUSH
22032: LD_INT 9
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22045: LD_INT 9
22047: PPUSH
22048: LD_OWVAR 2
22052: PPUSH
22053: CALL_OW 343
// uc_side := 9 ;
22057: LD_ADDR_OWVAR 20
22061: PUSH
22062: LD_INT 9
22064: ST_TO_ADDR
// uc_nation := 2 ;
22065: LD_ADDR_OWVAR 21
22069: PUSH
22070: LD_INT 2
22072: ST_TO_ADDR
// hc_name := Dark Warrior ;
22073: LD_ADDR_OWVAR 26
22077: PUSH
22078: LD_STRING Dark Warrior
22080: ST_TO_ADDR
// hc_gallery :=  ;
22081: LD_ADDR_OWVAR 33
22085: PUSH
22086: LD_STRING 
22088: ST_TO_ADDR
// hc_noskilllimit := true ;
22089: LD_ADDR_OWVAR 76
22093: PUSH
22094: LD_INT 1
22096: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22097: LD_ADDR_OWVAR 31
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 30
22107: PUSH
22108: LD_INT 30
22110: PUSH
22111: LD_INT 30
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: ST_TO_ADDR
// un := CreateHuman ;
22120: LD_ADDR_VAR 0 3
22124: PUSH
22125: CALL_OW 44
22129: ST_TO_ADDR
// hc_noskilllimit := false ;
22130: LD_ADDR_OWVAR 76
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: CALL_OW 51
// p := 0 ;
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: LD_INT 0
22157: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22158: LD_INT 35
22160: PPUSH
22161: CALL_OW 67
// p := p + 1 ;
22165: LD_ADDR_VAR 0 2
22169: PUSH
22170: LD_VAR 0 2
22174: PUSH
22175: LD_INT 1
22177: PLUS
22178: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22179: LD_VAR 0 3
22183: PPUSH
22184: CALL_OW 256
22188: PUSH
22189: LD_INT 1000
22191: LESS
22192: IFFALSE 22206
// SetLives ( un , 1000 ) ;
22194: LD_VAR 0 3
22198: PPUSH
22199: LD_INT 1000
22201: PPUSH
22202: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22206: LD_VAR 0 3
22210: PPUSH
22211: LD_INT 81
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 91
22225: PUSH
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 30
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PPUSH
22243: CALL_OW 69
22247: PPUSH
22248: LD_VAR 0 3
22252: PPUSH
22253: CALL_OW 74
22257: PPUSH
22258: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22262: LD_VAR 0 2
22266: PUSH
22267: LD_INT 60
22269: GREATER
22270: PUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: CALL_OW 301
22280: OR
22281: IFFALSE 22158
// if un then
22283: LD_VAR 0 3
22287: IFFALSE 22298
// RemoveUnit ( un ) ;
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL_OW 64
// end ;
22298: PPOPN 3
22300: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22301: LD_INT 0
22303: PPUSH
// case cmd of 301 :
22304: LD_VAR 0 1
22308: PUSH
22309: LD_INT 301
22311: DOUBLE
22312: EQUAL
22313: IFTRUE 22317
22315: GO 22349
22317: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22318: LD_VAR 0 6
22322: PPUSH
22323: LD_VAR 0 7
22327: PPUSH
22328: LD_VAR 0 8
22332: PPUSH
22333: LD_VAR 0 4
22337: PPUSH
22338: LD_VAR 0 5
22342: PPUSH
22343: CALL 23550 0 5
22347: GO 22470
22349: LD_INT 302
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22394
22357: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_VAR 0 7
22367: PPUSH
22368: LD_VAR 0 8
22372: PPUSH
22373: LD_VAR 0 9
22377: PPUSH
22378: LD_VAR 0 4
22382: PPUSH
22383: LD_VAR 0 5
22387: PPUSH
22388: CALL 23641 0 6
22392: GO 22470
22394: LD_INT 303
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22402
22400: GO 22439
22402: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22403: LD_VAR 0 6
22407: PPUSH
22408: LD_VAR 0 7
22412: PPUSH
22413: LD_VAR 0 8
22417: PPUSH
22418: LD_VAR 0 9
22422: PPUSH
22423: LD_VAR 0 4
22427: PPUSH
22428: LD_VAR 0 5
22432: PPUSH
22433: CALL 22475 0 6
22437: GO 22470
22439: LD_INT 304
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22469
22447: POP
// hHackTeleport ( unit , x , y ) ; end ;
22448: LD_VAR 0 2
22452: PPUSH
22453: LD_VAR 0 4
22457: PPUSH
22458: LD_VAR 0 5
22462: PPUSH
22463: CALL 24234 0 3
22467: GO 22470
22469: POP
// end ;
22470: LD_VAR 0 12
22474: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22475: LD_INT 0
22477: PPUSH
22478: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22479: LD_VAR 0 1
22483: PUSH
22484: LD_INT 1
22486: LESS
22487: PUSH
22488: LD_VAR 0 1
22492: PUSH
22493: LD_INT 3
22495: GREATER
22496: OR
22497: PUSH
22498: LD_VAR 0 5
22502: PPUSH
22503: LD_VAR 0 6
22507: PPUSH
22508: CALL_OW 428
22512: OR
22513: IFFALSE 22517
// exit ;
22515: GO 23237
// uc_side := your_side ;
22517: LD_ADDR_OWVAR 20
22521: PUSH
22522: LD_OWVAR 2
22526: ST_TO_ADDR
// uc_nation := nation ;
22527: LD_ADDR_OWVAR 21
22531: PUSH
22532: LD_VAR 0 1
22536: ST_TO_ADDR
// bc_level = 1 ;
22537: LD_ADDR_OWVAR 43
22541: PUSH
22542: LD_INT 1
22544: ST_TO_ADDR
// case btype of 1 :
22545: LD_VAR 0 2
22549: PUSH
22550: LD_INT 1
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22569
22558: POP
// bc_type := b_depot ; 2 :
22559: LD_ADDR_OWVAR 42
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
22567: GO 23181
22569: LD_INT 2
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22588
22577: POP
// bc_type := b_warehouse ; 3 :
22578: LD_ADDR_OWVAR 42
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
22586: GO 23181
22588: LD_INT 3
22590: DOUBLE
22591: EQUAL
22592: IFTRUE 22596
22594: GO 22607
22596: POP
// bc_type := b_lab ; 4 .. 9 :
22597: LD_ADDR_OWVAR 42
22601: PUSH
22602: LD_INT 6
22604: ST_TO_ADDR
22605: GO 23181
22607: LD_INT 4
22609: DOUBLE
22610: GREATEREQUAL
22611: IFFALSE 22619
22613: LD_INT 9
22615: DOUBLE
22616: LESSEQUAL
22617: IFTRUE 22621
22619: GO 22673
22621: POP
// begin bc_type := b_lab_half ;
22622: LD_ADDR_OWVAR 42
22626: PUSH
22627: LD_INT 7
22629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22630: LD_ADDR_OWVAR 44
22634: PUSH
22635: LD_INT 10
22637: PUSH
22638: LD_INT 11
22640: PUSH
22641: LD_INT 12
22643: PUSH
22644: LD_INT 15
22646: PUSH
22647: LD_INT 14
22649: PUSH
22650: LD_INT 13
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: PUSH
22661: LD_VAR 0 2
22665: PUSH
22666: LD_INT 3
22668: MINUS
22669: ARRAY
22670: ST_TO_ADDR
// end ; 10 .. 13 :
22671: GO 23181
22673: LD_INT 10
22675: DOUBLE
22676: GREATEREQUAL
22677: IFFALSE 22685
22679: LD_INT 13
22681: DOUBLE
22682: LESSEQUAL
22683: IFTRUE 22687
22685: GO 22764
22687: POP
// begin bc_type := b_lab_full ;
22688: LD_ADDR_OWVAR 42
22692: PUSH
22693: LD_INT 8
22695: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22696: LD_ADDR_OWVAR 44
22700: PUSH
22701: LD_INT 10
22703: PUSH
22704: LD_INT 12
22706: PUSH
22707: LD_INT 14
22709: PUSH
22710: LD_INT 13
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: PUSH
22719: LD_VAR 0 2
22723: PUSH
22724: LD_INT 9
22726: MINUS
22727: ARRAY
22728: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22729: LD_ADDR_OWVAR 45
22733: PUSH
22734: LD_INT 11
22736: PUSH
22737: LD_INT 15
22739: PUSH
22740: LD_INT 12
22742: PUSH
22743: LD_INT 15
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: LD_VAR 0 2
22756: PUSH
22757: LD_INT 9
22759: MINUS
22760: ARRAY
22761: ST_TO_ADDR
// end ; 14 :
22762: GO 23181
22764: LD_INT 14
22766: DOUBLE
22767: EQUAL
22768: IFTRUE 22772
22770: GO 22783
22772: POP
// bc_type := b_workshop ; 15 :
22773: LD_ADDR_OWVAR 42
22777: PUSH
22778: LD_INT 2
22780: ST_TO_ADDR
22781: GO 23181
22783: LD_INT 15
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22802
22791: POP
// bc_type := b_factory ; 16 :
22792: LD_ADDR_OWVAR 42
22796: PUSH
22797: LD_INT 3
22799: ST_TO_ADDR
22800: GO 23181
22802: LD_INT 16
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22821
22810: POP
// bc_type := b_ext_gun ; 17 :
22811: LD_ADDR_OWVAR 42
22815: PUSH
22816: LD_INT 17
22818: ST_TO_ADDR
22819: GO 23181
22821: LD_INT 17
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22857
22829: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22830: LD_ADDR_OWVAR 42
22834: PUSH
22835: LD_INT 19
22837: PUSH
22838: LD_INT 23
22840: PUSH
22841: LD_INT 19
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: PUSH
22849: LD_VAR 0 1
22853: ARRAY
22854: ST_TO_ADDR
22855: GO 23181
22857: LD_INT 18
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22876
22865: POP
// bc_type := b_ext_radar ; 19 :
22866: LD_ADDR_OWVAR 42
22870: PUSH
22871: LD_INT 20
22873: ST_TO_ADDR
22874: GO 23181
22876: LD_INT 19
22878: DOUBLE
22879: EQUAL
22880: IFTRUE 22884
22882: GO 22895
22884: POP
// bc_type := b_ext_radio ; 20 :
22885: LD_ADDR_OWVAR 42
22889: PUSH
22890: LD_INT 22
22892: ST_TO_ADDR
22893: GO 23181
22895: LD_INT 20
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 22914
22903: POP
// bc_type := b_ext_siberium ; 21 :
22904: LD_ADDR_OWVAR 42
22908: PUSH
22909: LD_INT 21
22911: ST_TO_ADDR
22912: GO 23181
22914: LD_INT 21
22916: DOUBLE
22917: EQUAL
22918: IFTRUE 22922
22920: GO 22933
22922: POP
// bc_type := b_ext_computer ; 22 :
22923: LD_ADDR_OWVAR 42
22927: PUSH
22928: LD_INT 24
22930: ST_TO_ADDR
22931: GO 23181
22933: LD_INT 22
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 22952
22941: POP
// bc_type := b_ext_track ; 23 :
22942: LD_ADDR_OWVAR 42
22946: PUSH
22947: LD_INT 16
22949: ST_TO_ADDR
22950: GO 23181
22952: LD_INT 23
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 22971
22960: POP
// bc_type := b_ext_laser ; 24 :
22961: LD_ADDR_OWVAR 42
22965: PUSH
22966: LD_INT 25
22968: ST_TO_ADDR
22969: GO 23181
22971: LD_INT 24
22973: DOUBLE
22974: EQUAL
22975: IFTRUE 22979
22977: GO 22990
22979: POP
// bc_type := b_control_tower ; 25 :
22980: LD_ADDR_OWVAR 42
22984: PUSH
22985: LD_INT 36
22987: ST_TO_ADDR
22988: GO 23181
22990: LD_INT 25
22992: DOUBLE
22993: EQUAL
22994: IFTRUE 22998
22996: GO 23009
22998: POP
// bc_type := b_breastwork ; 26 :
22999: LD_ADDR_OWVAR 42
23003: PUSH
23004: LD_INT 31
23006: ST_TO_ADDR
23007: GO 23181
23009: LD_INT 26
23011: DOUBLE
23012: EQUAL
23013: IFTRUE 23017
23015: GO 23028
23017: POP
// bc_type := b_bunker ; 27 :
23018: LD_ADDR_OWVAR 42
23022: PUSH
23023: LD_INT 32
23025: ST_TO_ADDR
23026: GO 23181
23028: LD_INT 27
23030: DOUBLE
23031: EQUAL
23032: IFTRUE 23036
23034: GO 23047
23036: POP
// bc_type := b_turret ; 28 :
23037: LD_ADDR_OWVAR 42
23041: PUSH
23042: LD_INT 33
23044: ST_TO_ADDR
23045: GO 23181
23047: LD_INT 28
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23066
23055: POP
// bc_type := b_armoury ; 29 :
23056: LD_ADDR_OWVAR 42
23060: PUSH
23061: LD_INT 4
23063: ST_TO_ADDR
23064: GO 23181
23066: LD_INT 29
23068: DOUBLE
23069: EQUAL
23070: IFTRUE 23074
23072: GO 23085
23074: POP
// bc_type := b_barracks ; 30 :
23075: LD_ADDR_OWVAR 42
23079: PUSH
23080: LD_INT 5
23082: ST_TO_ADDR
23083: GO 23181
23085: LD_INT 30
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23104
23093: POP
// bc_type := b_solar_power ; 31 :
23094: LD_ADDR_OWVAR 42
23098: PUSH
23099: LD_INT 27
23101: ST_TO_ADDR
23102: GO 23181
23104: LD_INT 31
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23123
23112: POP
// bc_type := b_oil_power ; 32 :
23113: LD_ADDR_OWVAR 42
23117: PUSH
23118: LD_INT 26
23120: ST_TO_ADDR
23121: GO 23181
23123: LD_INT 32
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23142
23131: POP
// bc_type := b_siberite_power ; 33 :
23132: LD_ADDR_OWVAR 42
23136: PUSH
23137: LD_INT 28
23139: ST_TO_ADDR
23140: GO 23181
23142: LD_INT 33
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23161
23150: POP
// bc_type := b_oil_mine ; 34 :
23151: LD_ADDR_OWVAR 42
23155: PUSH
23156: LD_INT 29
23158: ST_TO_ADDR
23159: GO 23181
23161: LD_INT 34
23163: DOUBLE
23164: EQUAL
23165: IFTRUE 23169
23167: GO 23180
23169: POP
// bc_type := b_siberite_mine ; end ;
23170: LD_ADDR_OWVAR 42
23174: PUSH
23175: LD_INT 30
23177: ST_TO_ADDR
23178: GO 23181
23180: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23181: LD_ADDR_VAR 0 8
23185: PUSH
23186: LD_VAR 0 5
23190: PPUSH
23191: LD_VAR 0 6
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: CALL_OW 47
23205: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23206: LD_OWVAR 42
23210: PUSH
23211: LD_INT 32
23213: PUSH
23214: LD_INT 33
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: IN
23221: IFFALSE 23237
// PlaceWeaponTurret ( b , weapon ) ;
23223: LD_VAR 0 8
23227: PPUSH
23228: LD_VAR 0 4
23232: PPUSH
23233: CALL_OW 431
// end ;
23237: LD_VAR 0 7
23241: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23242: LD_INT 0
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23248: LD_ADDR_VAR 0 4
23252: PUSH
23253: LD_INT 22
23255: PUSH
23256: LD_OWVAR 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 30
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 30
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 4
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 23370
// for i in tmp do
23311: LD_ADDR_VAR 0 2
23315: PUSH
23316: LD_VAR 0 4
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23368
// for j = 1 to 3 do
23324: LD_ADDR_VAR 0 3
23328: PUSH
23329: DOUBLE
23330: LD_INT 1
23332: DEC
23333: ST_TO_ADDR
23334: LD_INT 3
23336: PUSH
23337: FOR_TO
23338: IFFALSE 23364
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23340: LD_VAR 0 2
23344: PPUSH
23345: CALL_OW 274
23349: PPUSH
23350: LD_VAR 0 3
23354: PPUSH
23355: LD_INT 99999
23357: PPUSH
23358: CALL_OW 277
23362: GO 23337
23364: POP
23365: POP
23366: GO 23321
23368: POP
23369: POP
// end ;
23370: LD_VAR 0 1
23374: RET
// export function hHackSetLevel10 ; var i , j ; begin
23375: LD_INT 0
23377: PPUSH
23378: PPUSH
23379: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23380: LD_ADDR_VAR 0 2
23384: PUSH
23385: LD_INT 21
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PPUSH
23395: CALL_OW 69
23399: PUSH
23400: FOR_IN
23401: IFFALSE 23453
// if IsSelected ( i ) then
23403: LD_VAR 0 2
23407: PPUSH
23408: CALL_OW 306
23412: IFFALSE 23451
// begin for j := 1 to 4 do
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: DOUBLE
23420: LD_INT 1
23422: DEC
23423: ST_TO_ADDR
23424: LD_INT 4
23426: PUSH
23427: FOR_TO
23428: IFFALSE 23449
// SetSkill ( i , j , 10 ) ;
23430: LD_VAR 0 2
23434: PPUSH
23435: LD_VAR 0 3
23439: PPUSH
23440: LD_INT 10
23442: PPUSH
23443: CALL_OW 237
23447: GO 23427
23449: POP
23450: POP
// end ;
23451: GO 23400
23453: POP
23454: POP
// end ;
23455: LD_VAR 0 1
23459: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
23464: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_INT 22
23472: PUSH
23473: LD_OWVAR 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 21
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PPUSH
23496: CALL_OW 69
23500: PUSH
23501: FOR_IN
23502: IFFALSE 23543
// begin for j := 1 to 4 do
23504: LD_ADDR_VAR 0 3
23508: PUSH
23509: DOUBLE
23510: LD_INT 1
23512: DEC
23513: ST_TO_ADDR
23514: LD_INT 4
23516: PUSH
23517: FOR_TO
23518: IFFALSE 23539
// SetSkill ( i , j , 10 ) ;
23520: LD_VAR 0 2
23524: PPUSH
23525: LD_VAR 0 3
23529: PPUSH
23530: LD_INT 10
23532: PPUSH
23533: CALL_OW 237
23537: GO 23517
23539: POP
23540: POP
// end ;
23541: GO 23501
23543: POP
23544: POP
// end ;
23545: LD_VAR 0 1
23549: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23550: LD_INT 0
23552: PPUSH
// uc_side := your_side ;
23553: LD_ADDR_OWVAR 20
23557: PUSH
23558: LD_OWVAR 2
23562: ST_TO_ADDR
// uc_nation := nation ;
23563: LD_ADDR_OWVAR 21
23567: PUSH
23568: LD_VAR 0 1
23572: ST_TO_ADDR
// InitHc ;
23573: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23577: LD_INT 0
23579: PPUSH
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23594: LD_VAR 0 4
23598: PPUSH
23599: LD_VAR 0 5
23603: PPUSH
23604: CALL_OW 428
23608: PUSH
23609: LD_INT 0
23611: EQUAL
23612: IFFALSE 23636
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23614: CALL_OW 44
23618: PPUSH
23619: LD_VAR 0 4
23623: PPUSH
23624: LD_VAR 0 5
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 48
// end ;
23636: LD_VAR 0 6
23640: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
// uc_side := your_side ;
23645: LD_ADDR_OWVAR 20
23649: PUSH
23650: LD_OWVAR 2
23654: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 3
23668: PUSH
23669: LD_INT 4
23671: PUSH
23672: LD_INT 5
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: IN
23682: IFFALSE 23694
// uc_nation := nation_american else
23684: LD_ADDR_OWVAR 21
23688: PUSH
23689: LD_INT 1
23691: ST_TO_ADDR
23692: GO 23737
// if chassis in [ 11 , 12 , 13 , 14 ] then
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 11
23701: PUSH
23702: LD_INT 12
23704: PUSH
23705: LD_INT 13
23707: PUSH
23708: LD_INT 14
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: IN
23717: IFFALSE 23729
// uc_nation := nation_arabian else
23719: LD_ADDR_OWVAR 21
23723: PUSH
23724: LD_INT 2
23726: ST_TO_ADDR
23727: GO 23737
// uc_nation := nation_russian ;
23729: LD_ADDR_OWVAR 21
23733: PUSH
23734: LD_INT 3
23736: ST_TO_ADDR
// vc_chassis := chassis ;
23737: LD_ADDR_OWVAR 37
23741: PUSH
23742: LD_VAR 0 1
23746: ST_TO_ADDR
// vc_engine := engine ;
23747: LD_ADDR_OWVAR 39
23751: PUSH
23752: LD_VAR 0 2
23756: ST_TO_ADDR
// vc_control := control ;
23757: LD_ADDR_OWVAR 38
23761: PUSH
23762: LD_VAR 0 3
23766: ST_TO_ADDR
// vc_weapon := weapon ;
23767: LD_ADDR_OWVAR 40
23771: PUSH
23772: LD_VAR 0 4
23776: ST_TO_ADDR
// un := CreateVehicle ;
23777: LD_ADDR_VAR 0 8
23781: PUSH
23782: CALL_OW 45
23786: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23787: LD_VAR 0 8
23791: PPUSH
23792: LD_INT 0
23794: PPUSH
23795: LD_INT 5
23797: PPUSH
23798: CALL_OW 12
23802: PPUSH
23803: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23807: LD_VAR 0 8
23811: PPUSH
23812: LD_VAR 0 5
23816: PPUSH
23817: LD_VAR 0 6
23821: PPUSH
23822: LD_INT 1
23824: PPUSH
23825: CALL_OW 48
// end ;
23829: LD_VAR 0 7
23833: RET
// export hInvincible ; every 1 do
23834: GO 23836
23836: DISABLE
// hInvincible := [ ] ;
23837: LD_ADDR_EXP 84
23841: PUSH
23842: EMPTY
23843: ST_TO_ADDR
23844: END
// every 10 do var i ;
23845: GO 23847
23847: DISABLE
23848: LD_INT 0
23850: PPUSH
// begin enable ;
23851: ENABLE
// if not hInvincible then
23852: LD_EXP 84
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23905
// for i in hInvincible do
23861: LD_ADDR_VAR 0 1
23865: PUSH
23866: LD_EXP 84
23870: PUSH
23871: FOR_IN
23872: IFFALSE 23903
// if GetLives ( i ) < 1000 then
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 256
23883: PUSH
23884: LD_INT 1000
23886: LESS
23887: IFFALSE 23901
// SetLives ( i , 1000 ) ;
23889: LD_VAR 0 1
23893: PPUSH
23894: LD_INT 1000
23896: PPUSH
23897: CALL_OW 234
23901: GO 23871
23903: POP
23904: POP
// end ;
23905: PPOPN 1
23907: END
// export function hHackInvincible ; var i ; begin
23908: LD_INT 0
23910: PPUSH
23911: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23912: LD_ADDR_VAR 0 2
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 21
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 21
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 69
23949: PUSH
23950: FOR_IN
23951: IFFALSE 24012
// if IsSelected ( i ) then
23953: LD_VAR 0 2
23957: PPUSH
23958: CALL_OW 306
23962: IFFALSE 24010
// begin if i in hInvincible then
23964: LD_VAR 0 2
23968: PUSH
23969: LD_EXP 84
23973: IN
23974: IFFALSE 23994
// hInvincible := hInvincible diff i else
23976: LD_ADDR_EXP 84
23980: PUSH
23981: LD_EXP 84
23985: PUSH
23986: LD_VAR 0 2
23990: DIFF
23991: ST_TO_ADDR
23992: GO 24010
// hInvincible := hInvincible union i ;
23994: LD_ADDR_EXP 84
23998: PUSH
23999: LD_EXP 84
24003: PUSH
24004: LD_VAR 0 2
24008: UNION
24009: ST_TO_ADDR
// end ;
24010: GO 23950
24012: POP
24013: POP
// end ;
24014: LD_VAR 0 1
24018: RET
// export function hHackInvisible ; var i , j ; begin
24019: LD_INT 0
24021: PPUSH
24022: PPUSH
24023: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24024: LD_ADDR_VAR 0 2
24028: PUSH
24029: LD_INT 21
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PPUSH
24039: CALL_OW 69
24043: PUSH
24044: FOR_IN
24045: IFFALSE 24069
// if IsSelected ( i ) then
24047: LD_VAR 0 2
24051: PPUSH
24052: CALL_OW 306
24056: IFFALSE 24067
// ComForceInvisible ( i ) ;
24058: LD_VAR 0 2
24062: PPUSH
24063: CALL_OW 496
24067: GO 24044
24069: POP
24070: POP
// end ;
24071: LD_VAR 0 1
24075: RET
// export function hHackChangeYourSide ; begin
24076: LD_INT 0
24078: PPUSH
// if your_side = 8 then
24079: LD_OWVAR 2
24083: PUSH
24084: LD_INT 8
24086: EQUAL
24087: IFFALSE 24099
// your_side := 0 else
24089: LD_ADDR_OWVAR 2
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
24097: GO 24113
// your_side := your_side + 1 ;
24099: LD_ADDR_OWVAR 2
24103: PUSH
24104: LD_OWVAR 2
24108: PUSH
24109: LD_INT 1
24111: PLUS
24112: ST_TO_ADDR
// end ;
24113: LD_VAR 0 1
24117: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24118: LD_INT 0
24120: PPUSH
24121: PPUSH
24122: PPUSH
// for i in all_units do
24123: LD_ADDR_VAR 0 2
24127: PUSH
24128: LD_OWVAR 3
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24212
// if IsSelected ( i ) then
24136: LD_VAR 0 2
24140: PPUSH
24141: CALL_OW 306
24145: IFFALSE 24210
// begin j := GetSide ( i ) ;
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: LD_VAR 0 2
24156: PPUSH
24157: CALL_OW 255
24161: ST_TO_ADDR
// if j = 8 then
24162: LD_VAR 0 3
24166: PUSH
24167: LD_INT 8
24169: EQUAL
24170: IFFALSE 24182
// j := 0 else
24172: LD_ADDR_VAR 0 3
24176: PUSH
24177: LD_INT 0
24179: ST_TO_ADDR
24180: GO 24196
// j := j + 1 ;
24182: LD_ADDR_VAR 0 3
24186: PUSH
24187: LD_VAR 0 3
24191: PUSH
24192: LD_INT 1
24194: PLUS
24195: ST_TO_ADDR
// SetSide ( i , j ) ;
24196: LD_VAR 0 2
24200: PPUSH
24201: LD_VAR 0 3
24205: PPUSH
24206: CALL_OW 235
// end ;
24210: GO 24133
24212: POP
24213: POP
// end ;
24214: LD_VAR 0 1
24218: RET
// export function hHackFog ; begin
24219: LD_INT 0
24221: PPUSH
// FogOff ( true ) ;
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 344
// end ;
24229: LD_VAR 0 1
24233: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24234: LD_INT 0
24236: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24237: LD_VAR 0 1
24241: PPUSH
24242: LD_VAR 0 2
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 483
// CenterOnXY ( x , y ) ;
24262: LD_VAR 0 2
24266: PPUSH
24267: LD_VAR 0 3
24271: PPUSH
24272: CALL_OW 84
// end ; end_of_file
24276: LD_VAR 0 4
24280: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 264
24296: PUSH
24297: LD_EXP 18
24301: EQUAL
24302: IFFALSE 24374
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24304: LD_INT 68
24306: PPUSH
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 255
24316: PPUSH
24317: CALL_OW 321
24321: PUSH
24322: LD_INT 2
24324: EQUAL
24325: IFFALSE 24337
// eff := 70 else
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_INT 70
24334: ST_TO_ADDR
24335: GO 24345
// eff := 30 ;
24337: LD_ADDR_VAR 0 4
24341: PUSH
24342: LD_INT 30
24344: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 250
24354: PPUSH
24355: LD_VAR 0 1
24359: PPUSH
24360: CALL_OW 251
24364: PPUSH
24365: LD_VAR 0 4
24369: PPUSH
24370: CALL_OW 495
// end ; end ;
24374: LD_VAR 0 2
24378: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24379: LD_INT 0
24381: PPUSH
// end ;
24382: LD_VAR 0 4
24386: RET
// export function SOS_Command ( cmd ) ; begin
24387: LD_INT 0
24389: PPUSH
// end ;
24390: LD_VAR 0 2
24394: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24395: LD_INT 0
24397: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24398: LD_VAR 0 1
24402: PUSH
24403: LD_INT 250
24405: EQUAL
24406: PUSH
24407: LD_VAR 0 2
24411: PPUSH
24412: CALL_OW 264
24416: PUSH
24417: LD_EXP 21
24421: EQUAL
24422: AND
24423: IFFALSE 24444
// MinerPlaceMine ( unit , x , y ) ;
24425: LD_VAR 0 2
24429: PPUSH
24430: LD_VAR 0 4
24434: PPUSH
24435: LD_VAR 0 5
24439: PPUSH
24440: CALL 26785 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24444: LD_VAR 0 1
24448: PUSH
24449: LD_INT 251
24451: EQUAL
24452: PUSH
24453: LD_VAR 0 2
24457: PPUSH
24458: CALL_OW 264
24462: PUSH
24463: LD_EXP 21
24467: EQUAL
24468: AND
24469: IFFALSE 24490
// MinerDetonateMine ( unit , x , y ) ;
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_VAR 0 4
24480: PPUSH
24481: LD_VAR 0 5
24485: PPUSH
24486: CALL 27062 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24490: LD_VAR 0 1
24494: PUSH
24495: LD_INT 252
24497: EQUAL
24498: PUSH
24499: LD_VAR 0 2
24503: PPUSH
24504: CALL_OW 264
24508: PUSH
24509: LD_EXP 21
24513: EQUAL
24514: AND
24515: IFFALSE 24536
// MinerCreateMinefield ( unit , x , y ) ;
24517: LD_VAR 0 2
24521: PPUSH
24522: LD_VAR 0 4
24526: PPUSH
24527: LD_VAR 0 5
24531: PPUSH
24532: CALL 27479 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24536: LD_VAR 0 1
24540: PUSH
24541: LD_INT 253
24543: EQUAL
24544: PUSH
24545: LD_VAR 0 2
24549: PPUSH
24550: CALL_OW 257
24554: PUSH
24555: LD_INT 5
24557: EQUAL
24558: AND
24559: IFFALSE 24580
// ComBinocular ( unit , x , y ) ;
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_VAR 0 4
24570: PPUSH
24571: LD_VAR 0 5
24575: PPUSH
24576: CALL 27850 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24580: LD_VAR 0 1
24584: PUSH
24585: LD_INT 254
24587: EQUAL
24588: PUSH
24589: LD_VAR 0 2
24593: PPUSH
24594: CALL_OW 264
24598: PUSH
24599: LD_EXP 16
24603: EQUAL
24604: AND
24605: PUSH
24606: LD_VAR 0 3
24610: PPUSH
24611: CALL_OW 263
24615: PUSH
24616: LD_INT 3
24618: EQUAL
24619: AND
24620: IFFALSE 24636
// HackDestroyVehicle ( unit , selectedUnit ) ;
24622: LD_VAR 0 2
24626: PPUSH
24627: LD_VAR 0 3
24631: PPUSH
24632: CALL 26145 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24636: LD_VAR 0 1
24640: PUSH
24641: LD_INT 255
24643: EQUAL
24644: PUSH
24645: LD_VAR 0 2
24649: PPUSH
24650: CALL_OW 264
24654: PUSH
24655: LD_INT 14
24657: PUSH
24658: LD_INT 53
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: IN
24665: AND
24666: PUSH
24667: LD_VAR 0 4
24671: PPUSH
24672: LD_VAR 0 5
24676: PPUSH
24677: CALL_OW 488
24681: AND
24682: IFFALSE 24706
// CutTreeXYR ( unit , x , y , 12 ) ;
24684: LD_VAR 0 2
24688: PPUSH
24689: LD_VAR 0 4
24693: PPUSH
24694: LD_VAR 0 5
24698: PPUSH
24699: LD_INT 12
24701: PPUSH
24702: CALL 24711 0 4
// end ;
24706: LD_VAR 0 6
24710: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24711: LD_INT 0
24713: PPUSH
24714: PPUSH
24715: PPUSH
24716: PPUSH
24717: PPUSH
24718: PPUSH
24719: PPUSH
24720: PPUSH
24721: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24722: LD_VAR 0 1
24726: NOT
24727: PUSH
24728: LD_VAR 0 2
24732: PPUSH
24733: LD_VAR 0 3
24737: PPUSH
24738: CALL_OW 488
24742: NOT
24743: OR
24744: PUSH
24745: LD_VAR 0 4
24749: NOT
24750: OR
24751: IFFALSE 24755
// exit ;
24753: GO 25095
// list := [ ] ;
24755: LD_ADDR_VAR 0 13
24759: PUSH
24760: EMPTY
24761: ST_TO_ADDR
// if x - r < 0 then
24762: LD_VAR 0 2
24766: PUSH
24767: LD_VAR 0 4
24771: MINUS
24772: PUSH
24773: LD_INT 0
24775: LESS
24776: IFFALSE 24788
// min_x := 0 else
24778: LD_ADDR_VAR 0 7
24782: PUSH
24783: LD_INT 0
24785: ST_TO_ADDR
24786: GO 24804
// min_x := x - r ;
24788: LD_ADDR_VAR 0 7
24792: PUSH
24793: LD_VAR 0 2
24797: PUSH
24798: LD_VAR 0 4
24802: MINUS
24803: ST_TO_ADDR
// if y - r < 0 then
24804: LD_VAR 0 3
24808: PUSH
24809: LD_VAR 0 4
24813: MINUS
24814: PUSH
24815: LD_INT 0
24817: LESS
24818: IFFALSE 24830
// min_y := 0 else
24820: LD_ADDR_VAR 0 8
24824: PUSH
24825: LD_INT 0
24827: ST_TO_ADDR
24828: GO 24846
// min_y := y - r ;
24830: LD_ADDR_VAR 0 8
24834: PUSH
24835: LD_VAR 0 3
24839: PUSH
24840: LD_VAR 0 4
24844: MINUS
24845: ST_TO_ADDR
// max_x := x + r ;
24846: LD_ADDR_VAR 0 9
24850: PUSH
24851: LD_VAR 0 2
24855: PUSH
24856: LD_VAR 0 4
24860: PLUS
24861: ST_TO_ADDR
// max_y := y + r ;
24862: LD_ADDR_VAR 0 10
24866: PUSH
24867: LD_VAR 0 3
24871: PUSH
24872: LD_VAR 0 4
24876: PLUS
24877: ST_TO_ADDR
// for _x = min_x to max_x do
24878: LD_ADDR_VAR 0 11
24882: PUSH
24883: DOUBLE
24884: LD_VAR 0 7
24888: DEC
24889: ST_TO_ADDR
24890: LD_VAR 0 9
24894: PUSH
24895: FOR_TO
24896: IFFALSE 25013
// for _y = min_y to max_y do
24898: LD_ADDR_VAR 0 12
24902: PUSH
24903: DOUBLE
24904: LD_VAR 0 8
24908: DEC
24909: ST_TO_ADDR
24910: LD_VAR 0 10
24914: PUSH
24915: FOR_TO
24916: IFFALSE 25009
// begin if not ValidHex ( _x , _y ) then
24918: LD_VAR 0 11
24922: PPUSH
24923: LD_VAR 0 12
24927: PPUSH
24928: CALL_OW 488
24932: NOT
24933: IFFALSE 24937
// continue ;
24935: GO 24915
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24937: LD_VAR 0 11
24941: PPUSH
24942: LD_VAR 0 12
24946: PPUSH
24947: CALL_OW 351
24951: PUSH
24952: LD_VAR 0 11
24956: PPUSH
24957: LD_VAR 0 12
24961: PPUSH
24962: CALL_OW 554
24966: AND
24967: IFFALSE 25007
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24969: LD_ADDR_VAR 0 13
24973: PUSH
24974: LD_VAR 0 13
24978: PPUSH
24979: LD_VAR 0 13
24983: PUSH
24984: LD_INT 1
24986: PLUS
24987: PPUSH
24988: LD_VAR 0 11
24992: PUSH
24993: LD_VAR 0 12
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PPUSH
25002: CALL_OW 2
25006: ST_TO_ADDR
// end ;
25007: GO 24915
25009: POP
25010: POP
25011: GO 24895
25013: POP
25014: POP
// if not list then
25015: LD_VAR 0 13
25019: NOT
25020: IFFALSE 25024
// exit ;
25022: GO 25095
// for i in list do
25024: LD_ADDR_VAR 0 6
25028: PUSH
25029: LD_VAR 0 13
25033: PUSH
25034: FOR_IN
25035: IFFALSE 25093
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25037: LD_VAR 0 1
25041: PPUSH
25042: LD_STRING M
25044: PUSH
25045: LD_VAR 0 6
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: PUSH
25054: LD_VAR 0 6
25058: PUSH
25059: LD_INT 2
25061: ARRAY
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: PPUSH
25087: CALL_OW 447
25091: GO 25034
25093: POP
25094: POP
// end ;
25095: LD_VAR 0 5
25099: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25100: LD_EXP 85
25104: NOT
25105: IFFALSE 25155
25107: GO 25109
25109: DISABLE
// begin initHack := true ;
25110: LD_ADDR_EXP 85
25114: PUSH
25115: LD_INT 1
25117: ST_TO_ADDR
// hackTanks := [ ] ;
25118: LD_ADDR_EXP 86
25122: PUSH
25123: EMPTY
25124: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25125: LD_ADDR_EXP 87
25129: PUSH
25130: EMPTY
25131: ST_TO_ADDR
// hackLimit := 3 ;
25132: LD_ADDR_EXP 88
25136: PUSH
25137: LD_INT 3
25139: ST_TO_ADDR
// hackDist := 12 ;
25140: LD_ADDR_EXP 89
25144: PUSH
25145: LD_INT 12
25147: ST_TO_ADDR
// hackCounter := [ ] ;
25148: LD_ADDR_EXP 90
25152: PUSH
25153: EMPTY
25154: ST_TO_ADDR
// end ;
25155: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25156: LD_EXP 85
25160: PUSH
25161: LD_INT 34
25163: PUSH
25164: LD_EXP 16
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: AND
25178: IFFALSE 25433
25180: GO 25182
25182: DISABLE
25183: LD_INT 0
25185: PPUSH
25186: PPUSH
// begin enable ;
25187: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25188: LD_ADDR_VAR 0 1
25192: PUSH
25193: LD_INT 34
25195: PUSH
25196: LD_EXP 16
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PPUSH
25205: CALL_OW 69
25209: PUSH
25210: FOR_IN
25211: IFFALSE 25431
// begin if not i in hackTanks then
25213: LD_VAR 0 1
25217: PUSH
25218: LD_EXP 86
25222: IN
25223: NOT
25224: IFFALSE 25307
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25226: LD_ADDR_EXP 86
25230: PUSH
25231: LD_EXP 86
25235: PPUSH
25236: LD_EXP 86
25240: PUSH
25241: LD_INT 1
25243: PLUS
25244: PPUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 1
25254: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25255: LD_ADDR_EXP 87
25259: PUSH
25260: LD_EXP 87
25264: PPUSH
25265: LD_EXP 87
25269: PUSH
25270: LD_INT 1
25272: PLUS
25273: PPUSH
25274: EMPTY
25275: PPUSH
25276: CALL_OW 1
25280: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25281: LD_ADDR_EXP 90
25285: PUSH
25286: LD_EXP 90
25290: PPUSH
25291: LD_EXP 90
25295: PUSH
25296: LD_INT 1
25298: PLUS
25299: PPUSH
25300: EMPTY
25301: PPUSH
25302: CALL_OW 1
25306: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25307: LD_VAR 0 1
25311: PPUSH
25312: CALL_OW 302
25316: NOT
25317: IFFALSE 25330
// begin HackUnlinkAll ( i ) ;
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL 25436 0 1
// continue ;
25328: GO 25210
// end ; HackCheckCapturedStatus ( i ) ;
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL 25879 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25339: LD_ADDR_VAR 0 2
25343: PUSH
25344: LD_INT 81
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 255
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 33
25363: PUSH
25364: LD_INT 3
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 91
25373: PUSH
25374: LD_VAR 0 1
25378: PUSH
25379: LD_EXP 89
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 50
25391: PUSH
25392: EMPTY
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 69
25405: ST_TO_ADDR
// if not tmp then
25406: LD_VAR 0 2
25410: NOT
25411: IFFALSE 25415
// continue ;
25413: GO 25210
// HackLink ( i , tmp ) ;
25415: LD_VAR 0 1
25419: PPUSH
25420: LD_VAR 0 2
25424: PPUSH
25425: CALL 25572 0 2
// end ;
25429: GO 25210
25431: POP
25432: POP
// end ;
25433: PPOPN 2
25435: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25436: LD_INT 0
25438: PPUSH
25439: PPUSH
25440: PPUSH
// if not hack in hackTanks then
25441: LD_VAR 0 1
25445: PUSH
25446: LD_EXP 86
25450: IN
25451: NOT
25452: IFFALSE 25456
// exit ;
25454: GO 25567
// index := GetElementIndex ( hackTanks , hack ) ;
25456: LD_ADDR_VAR 0 4
25460: PUSH
25461: LD_EXP 86
25465: PPUSH
25466: LD_VAR 0 1
25470: PPUSH
25471: CALL 33001 0 2
25475: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25476: LD_EXP 87
25480: PUSH
25481: LD_VAR 0 4
25485: ARRAY
25486: IFFALSE 25567
// begin for i in hackTanksCaptured [ index ] do
25488: LD_ADDR_VAR 0 3
25492: PUSH
25493: LD_EXP 87
25497: PUSH
25498: LD_VAR 0 4
25502: ARRAY
25503: PUSH
25504: FOR_IN
25505: IFFALSE 25531
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25507: LD_VAR 0 3
25511: PUSH
25512: LD_INT 1
25514: ARRAY
25515: PPUSH
25516: LD_VAR 0 3
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PPUSH
25525: CALL_OW 235
25529: GO 25504
25531: POP
25532: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25533: LD_ADDR_EXP 87
25537: PUSH
25538: LD_EXP 87
25542: PPUSH
25543: LD_VAR 0 4
25547: PPUSH
25548: EMPTY
25549: PPUSH
25550: CALL_OW 1
25554: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25555: LD_VAR 0 1
25559: PPUSH
25560: LD_INT 0
25562: PPUSH
25563: CALL_OW 505
// end ; end ;
25567: LD_VAR 0 2
25571: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25572: LD_INT 0
25574: PPUSH
25575: PPUSH
25576: PPUSH
// if not hack in hackTanks or not vehicles then
25577: LD_VAR 0 1
25581: PUSH
25582: LD_EXP 86
25586: IN
25587: NOT
25588: PUSH
25589: LD_VAR 0 2
25593: NOT
25594: OR
25595: IFFALSE 25599
// exit ;
25597: GO 25874
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25599: LD_ADDR_VAR 0 2
25603: PUSH
25604: LD_VAR 0 1
25608: PPUSH
25609: LD_VAR 0 2
25613: PPUSH
25614: LD_INT 1
25616: PPUSH
25617: LD_INT 1
25619: PPUSH
25620: CALL 33651 0 4
25624: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25625: LD_ADDR_VAR 0 5
25629: PUSH
25630: LD_EXP 86
25634: PPUSH
25635: LD_VAR 0 1
25639: PPUSH
25640: CALL 33001 0 2
25644: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25645: LD_EXP 87
25649: PUSH
25650: LD_VAR 0 5
25654: ARRAY
25655: PUSH
25656: LD_EXP 88
25660: LESS
25661: IFFALSE 25850
// begin for i := 1 to vehicles do
25663: LD_ADDR_VAR 0 4
25667: PUSH
25668: DOUBLE
25669: LD_INT 1
25671: DEC
25672: ST_TO_ADDR
25673: LD_VAR 0 2
25677: PUSH
25678: FOR_TO
25679: IFFALSE 25848
// begin if hackTanksCaptured [ index ] = hackLimit then
25681: LD_EXP 87
25685: PUSH
25686: LD_VAR 0 5
25690: ARRAY
25691: PUSH
25692: LD_EXP 88
25696: EQUAL
25697: IFFALSE 25701
// break ;
25699: GO 25848
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25701: LD_ADDR_EXP 90
25705: PUSH
25706: LD_EXP 90
25710: PPUSH
25711: LD_VAR 0 5
25715: PPUSH
25716: LD_EXP 90
25720: PUSH
25721: LD_VAR 0 5
25725: ARRAY
25726: PUSH
25727: LD_INT 1
25729: PLUS
25730: PPUSH
25731: CALL_OW 1
25735: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25736: LD_ADDR_EXP 87
25740: PUSH
25741: LD_EXP 87
25745: PPUSH
25746: LD_VAR 0 5
25750: PUSH
25751: LD_EXP 87
25755: PUSH
25756: LD_VAR 0 5
25760: ARRAY
25761: PUSH
25762: LD_INT 1
25764: PLUS
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PPUSH
25770: LD_VAR 0 2
25774: PUSH
25775: LD_VAR 0 4
25779: ARRAY
25780: PUSH
25781: LD_VAR 0 2
25785: PUSH
25786: LD_VAR 0 4
25790: ARRAY
25791: PPUSH
25792: CALL_OW 255
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL 33216 0 3
25805: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25806: LD_VAR 0 2
25810: PUSH
25811: LD_VAR 0 4
25815: ARRAY
25816: PPUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 255
25826: PPUSH
25827: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25831: LD_VAR 0 2
25835: PUSH
25836: LD_VAR 0 4
25840: ARRAY
25841: PPUSH
25842: CALL_OW 141
// end ;
25846: GO 25678
25848: POP
25849: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25850: LD_VAR 0 1
25854: PPUSH
25855: LD_EXP 87
25859: PUSH
25860: LD_VAR 0 5
25864: ARRAY
25865: PUSH
25866: LD_INT 0
25868: PLUS
25869: PPUSH
25870: CALL_OW 505
// end ;
25874: LD_VAR 0 3
25878: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25879: LD_INT 0
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
// if not hack in hackTanks then
25885: LD_VAR 0 1
25889: PUSH
25890: LD_EXP 86
25894: IN
25895: NOT
25896: IFFALSE 25900
// exit ;
25898: GO 26140
// index := GetElementIndex ( hackTanks , hack ) ;
25900: LD_ADDR_VAR 0 4
25904: PUSH
25905: LD_EXP 86
25909: PPUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL 33001 0 2
25919: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: DOUBLE
25926: LD_EXP 87
25930: PUSH
25931: LD_VAR 0 4
25935: ARRAY
25936: INC
25937: ST_TO_ADDR
25938: LD_INT 1
25940: PUSH
25941: FOR_DOWNTO
25942: IFFALSE 26114
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25944: LD_ADDR_VAR 0 5
25948: PUSH
25949: LD_EXP 87
25953: PUSH
25954: LD_VAR 0 4
25958: ARRAY
25959: PUSH
25960: LD_VAR 0 3
25964: ARRAY
25965: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25966: LD_VAR 0 5
25970: PUSH
25971: LD_INT 1
25973: ARRAY
25974: PPUSH
25975: CALL_OW 302
25979: NOT
25980: PUSH
25981: LD_VAR 0 5
25985: PUSH
25986: LD_INT 1
25988: ARRAY
25989: PPUSH
25990: CALL_OW 255
25994: PUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: CALL_OW 255
26004: NONEQUAL
26005: OR
26006: IFFALSE 26112
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26008: LD_VAR 0 5
26012: PUSH
26013: LD_INT 1
26015: ARRAY
26016: PPUSH
26017: CALL_OW 305
26021: PUSH
26022: LD_VAR 0 5
26026: PUSH
26027: LD_INT 1
26029: ARRAY
26030: PPUSH
26031: CALL_OW 255
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 255
26045: EQUAL
26046: AND
26047: IFFALSE 26071
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26049: LD_VAR 0 5
26053: PUSH
26054: LD_INT 1
26056: ARRAY
26057: PPUSH
26058: LD_VAR 0 5
26062: PUSH
26063: LD_INT 2
26065: ARRAY
26066: PPUSH
26067: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26071: LD_ADDR_EXP 87
26075: PUSH
26076: LD_EXP 87
26080: PPUSH
26081: LD_VAR 0 4
26085: PPUSH
26086: LD_EXP 87
26090: PUSH
26091: LD_VAR 0 4
26095: ARRAY
26096: PPUSH
26097: LD_VAR 0 3
26101: PPUSH
26102: CALL_OW 3
26106: PPUSH
26107: CALL_OW 1
26111: ST_TO_ADDR
// end ; end ;
26112: GO 25941
26114: POP
26115: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26116: LD_VAR 0 1
26120: PPUSH
26121: LD_EXP 87
26125: PUSH
26126: LD_VAR 0 4
26130: ARRAY
26131: PUSH
26132: LD_INT 0
26134: PLUS
26135: PPUSH
26136: CALL_OW 505
// end ;
26140: LD_VAR 0 2
26144: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26145: LD_INT 0
26147: PPUSH
26148: PPUSH
26149: PPUSH
26150: PPUSH
// if not hack in hackTanks then
26151: LD_VAR 0 1
26155: PUSH
26156: LD_EXP 86
26160: IN
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26251
// index := GetElementIndex ( hackTanks , hack ) ;
26166: LD_ADDR_VAR 0 5
26170: PUSH
26171: LD_EXP 86
26175: PPUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL 33001 0 2
26185: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: DOUBLE
26192: LD_INT 1
26194: DEC
26195: ST_TO_ADDR
26196: LD_EXP 87
26200: PUSH
26201: LD_VAR 0 5
26205: ARRAY
26206: PUSH
26207: FOR_TO
26208: IFFALSE 26249
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26210: LD_EXP 87
26214: PUSH
26215: LD_VAR 0 5
26219: ARRAY
26220: PUSH
26221: LD_VAR 0 4
26225: ARRAY
26226: PUSH
26227: LD_INT 1
26229: ARRAY
26230: PUSH
26231: LD_VAR 0 2
26235: EQUAL
26236: IFFALSE 26247
// KillUnit ( vehicle ) ;
26238: LD_VAR 0 2
26242: PPUSH
26243: CALL_OW 66
26247: GO 26207
26249: POP
26250: POP
// end ;
26251: LD_VAR 0 3
26255: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26256: LD_EXP 91
26260: NOT
26261: IFFALSE 26296
26263: GO 26265
26265: DISABLE
// begin initMiner := true ;
26266: LD_ADDR_EXP 91
26270: PUSH
26271: LD_INT 1
26273: ST_TO_ADDR
// minersList := [ ] ;
26274: LD_ADDR_EXP 92
26278: PUSH
26279: EMPTY
26280: ST_TO_ADDR
// minerMinesList := [ ] ;
26281: LD_ADDR_EXP 93
26285: PUSH
26286: EMPTY
26287: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26288: LD_ADDR_EXP 94
26292: PUSH
26293: LD_INT 5
26295: ST_TO_ADDR
// end ;
26296: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26297: LD_EXP 91
26301: PUSH
26302: LD_INT 34
26304: PUSH
26305: LD_EXP 21
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PPUSH
26314: CALL_OW 69
26318: AND
26319: IFFALSE 26782
26321: GO 26323
26323: DISABLE
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
26328: PPUSH
26329: PPUSH
// begin enable ;
26330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26331: LD_ADDR_VAR 0 1
26335: PUSH
26336: LD_INT 34
26338: PUSH
26339: LD_EXP 21
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PPUSH
26348: CALL_OW 69
26352: PUSH
26353: FOR_IN
26354: IFFALSE 26426
// begin if not i in minersList then
26356: LD_VAR 0 1
26360: PUSH
26361: LD_EXP 92
26365: IN
26366: NOT
26367: IFFALSE 26424
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26369: LD_ADDR_EXP 92
26373: PUSH
26374: LD_EXP 92
26378: PPUSH
26379: LD_EXP 92
26383: PUSH
26384: LD_INT 1
26386: PLUS
26387: PPUSH
26388: LD_VAR 0 1
26392: PPUSH
26393: CALL_OW 1
26397: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26398: LD_ADDR_EXP 93
26402: PUSH
26403: LD_EXP 93
26407: PPUSH
26408: LD_EXP 93
26412: PUSH
26413: LD_INT 1
26415: PLUS
26416: PPUSH
26417: EMPTY
26418: PPUSH
26419: CALL_OW 1
26423: ST_TO_ADDR
// end end ;
26424: GO 26353
26426: POP
26427: POP
// for i := minerMinesList downto 1 do
26428: LD_ADDR_VAR 0 1
26432: PUSH
26433: DOUBLE
26434: LD_EXP 93
26438: INC
26439: ST_TO_ADDR
26440: LD_INT 1
26442: PUSH
26443: FOR_DOWNTO
26444: IFFALSE 26780
// begin if IsLive ( minersList [ i ] ) then
26446: LD_EXP 92
26450: PUSH
26451: LD_VAR 0 1
26455: ARRAY
26456: PPUSH
26457: CALL_OW 300
26461: IFFALSE 26489
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26463: LD_EXP 92
26467: PUSH
26468: LD_VAR 0 1
26472: ARRAY
26473: PPUSH
26474: LD_EXP 93
26478: PUSH
26479: LD_VAR 0 1
26483: ARRAY
26484: PPUSH
26485: CALL_OW 505
// if not minerMinesList [ i ] then
26489: LD_EXP 93
26493: PUSH
26494: LD_VAR 0 1
26498: ARRAY
26499: NOT
26500: IFFALSE 26504
// continue ;
26502: GO 26443
// for j := minerMinesList [ i ] downto 1 do
26504: LD_ADDR_VAR 0 2
26508: PUSH
26509: DOUBLE
26510: LD_EXP 93
26514: PUSH
26515: LD_VAR 0 1
26519: ARRAY
26520: INC
26521: ST_TO_ADDR
26522: LD_INT 1
26524: PUSH
26525: FOR_DOWNTO
26526: IFFALSE 26776
// begin side := GetSide ( minersList [ i ] ) ;
26528: LD_ADDR_VAR 0 3
26532: PUSH
26533: LD_EXP 92
26537: PUSH
26538: LD_VAR 0 1
26542: ARRAY
26543: PPUSH
26544: CALL_OW 255
26548: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26549: LD_ADDR_VAR 0 4
26553: PUSH
26554: LD_EXP 93
26558: PUSH
26559: LD_VAR 0 1
26563: ARRAY
26564: PUSH
26565: LD_VAR 0 2
26569: ARRAY
26570: PUSH
26571: LD_INT 1
26573: ARRAY
26574: PPUSH
26575: LD_EXP 93
26579: PUSH
26580: LD_VAR 0 1
26584: ARRAY
26585: PUSH
26586: LD_VAR 0 2
26590: ARRAY
26591: PUSH
26592: LD_INT 2
26594: ARRAY
26595: PPUSH
26596: CALL_OW 428
26600: ST_TO_ADDR
// if not tmp then
26601: LD_VAR 0 4
26605: NOT
26606: IFFALSE 26610
// continue ;
26608: GO 26525
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26610: LD_VAR 0 4
26614: PUSH
26615: LD_INT 81
26617: PUSH
26618: LD_VAR 0 3
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PPUSH
26627: CALL_OW 69
26631: IN
26632: PUSH
26633: LD_EXP 93
26637: PUSH
26638: LD_VAR 0 1
26642: ARRAY
26643: PUSH
26644: LD_VAR 0 2
26648: ARRAY
26649: PUSH
26650: LD_INT 1
26652: ARRAY
26653: PPUSH
26654: LD_EXP 93
26658: PUSH
26659: LD_VAR 0 1
26663: ARRAY
26664: PUSH
26665: LD_VAR 0 2
26669: ARRAY
26670: PUSH
26671: LD_INT 2
26673: ARRAY
26674: PPUSH
26675: CALL_OW 458
26679: AND
26680: IFFALSE 26774
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26682: LD_EXP 93
26686: PUSH
26687: LD_VAR 0 1
26691: ARRAY
26692: PUSH
26693: LD_VAR 0 2
26697: ARRAY
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: LD_EXP 93
26707: PUSH
26708: LD_VAR 0 1
26712: ARRAY
26713: PUSH
26714: LD_VAR 0 2
26718: ARRAY
26719: PUSH
26720: LD_INT 2
26722: ARRAY
26723: PPUSH
26724: LD_VAR 0 3
26728: PPUSH
26729: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26733: LD_ADDR_EXP 93
26737: PUSH
26738: LD_EXP 93
26742: PPUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: LD_EXP 93
26752: PUSH
26753: LD_VAR 0 1
26757: ARRAY
26758: PPUSH
26759: LD_VAR 0 2
26763: PPUSH
26764: CALL_OW 3
26768: PPUSH
26769: CALL_OW 1
26773: ST_TO_ADDR
// end ; end ;
26774: GO 26525
26776: POP
26777: POP
// end ;
26778: GO 26443
26780: POP
26781: POP
// end ;
26782: PPOPN 4
26784: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26785: LD_INT 0
26787: PPUSH
26788: PPUSH
// result := false ;
26789: LD_ADDR_VAR 0 4
26793: PUSH
26794: LD_INT 0
26796: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26797: LD_VAR 0 1
26801: PPUSH
26802: CALL_OW 264
26806: PUSH
26807: LD_EXP 21
26811: EQUAL
26812: NOT
26813: IFFALSE 26817
// exit ;
26815: GO 27057
// index := GetElementIndex ( minersList , unit ) ;
26817: LD_ADDR_VAR 0 5
26821: PUSH
26822: LD_EXP 92
26826: PPUSH
26827: LD_VAR 0 1
26831: PPUSH
26832: CALL 33001 0 2
26836: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26837: LD_EXP 93
26841: PUSH
26842: LD_VAR 0 5
26846: ARRAY
26847: PUSH
26848: LD_EXP 94
26852: GREATEREQUAL
26853: IFFALSE 26857
// exit ;
26855: GO 27057
// ComMoveXY ( unit , x , y ) ;
26857: LD_VAR 0 1
26861: PPUSH
26862: LD_VAR 0 2
26866: PPUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26876: LD_INT 35
26878: PPUSH
26879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26883: LD_VAR 0 1
26887: PPUSH
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_VAR 0 3
26897: PPUSH
26898: CALL 63065 0 3
26902: NOT
26903: PUSH
26904: LD_VAR 0 1
26908: PPUSH
26909: CALL_OW 314
26913: AND
26914: IFFALSE 26918
// exit ;
26916: GO 27057
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26918: LD_VAR 0 2
26922: PPUSH
26923: LD_VAR 0 3
26927: PPUSH
26928: CALL_OW 428
26932: PUSH
26933: LD_VAR 0 1
26937: EQUAL
26938: PUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 314
26948: NOT
26949: AND
26950: IFFALSE 26876
// PlaySoundXY ( x , y , PlantMine ) ;
26952: LD_VAR 0 2
26956: PPUSH
26957: LD_VAR 0 3
26961: PPUSH
26962: LD_STRING PlantMine
26964: PPUSH
26965: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_VAR 0 3
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 255
26988: PPUSH
26989: LD_INT 0
26991: PPUSH
26992: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26996: LD_ADDR_EXP 93
27000: PUSH
27001: LD_EXP 93
27005: PPUSH
27006: LD_VAR 0 5
27010: PUSH
27011: LD_EXP 93
27015: PUSH
27016: LD_VAR 0 5
27020: ARRAY
27021: PUSH
27022: LD_INT 1
27024: PLUS
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PPUSH
27030: LD_VAR 0 2
27034: PUSH
27035: LD_VAR 0 3
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PPUSH
27044: CALL 33216 0 3
27048: ST_TO_ADDR
// result := true ;
27049: LD_ADDR_VAR 0 4
27053: PUSH
27054: LD_INT 1
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 4
27061: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
27066: PPUSH
// if not unit in minersList then
27067: LD_VAR 0 1
27071: PUSH
27072: LD_EXP 92
27076: IN
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27474
// index := GetElementIndex ( minersList , unit ) ;
27082: LD_ADDR_VAR 0 6
27086: PUSH
27087: LD_EXP 92
27091: PPUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL 33001 0 2
27101: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27102: LD_ADDR_VAR 0 5
27106: PUSH
27107: DOUBLE
27108: LD_EXP 93
27112: PUSH
27113: LD_VAR 0 6
27117: ARRAY
27118: INC
27119: ST_TO_ADDR
27120: LD_INT 1
27122: PUSH
27123: FOR_DOWNTO
27124: IFFALSE 27285
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27126: LD_EXP 93
27130: PUSH
27131: LD_VAR 0 6
27135: ARRAY
27136: PUSH
27137: LD_VAR 0 5
27141: ARRAY
27142: PUSH
27143: LD_INT 1
27145: ARRAY
27146: PUSH
27147: LD_VAR 0 2
27151: EQUAL
27152: PUSH
27153: LD_EXP 93
27157: PUSH
27158: LD_VAR 0 6
27162: ARRAY
27163: PUSH
27164: LD_VAR 0 5
27168: ARRAY
27169: PUSH
27170: LD_INT 2
27172: ARRAY
27173: PUSH
27174: LD_VAR 0 3
27178: EQUAL
27179: AND
27180: IFFALSE 27283
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27182: LD_EXP 93
27186: PUSH
27187: LD_VAR 0 6
27191: ARRAY
27192: PUSH
27193: LD_VAR 0 5
27197: ARRAY
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: LD_EXP 93
27207: PUSH
27208: LD_VAR 0 6
27212: ARRAY
27213: PUSH
27214: LD_VAR 0 5
27218: ARRAY
27219: PUSH
27220: LD_INT 2
27222: ARRAY
27223: PPUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: CALL_OW 255
27233: PPUSH
27234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27238: LD_ADDR_EXP 93
27242: PUSH
27243: LD_EXP 93
27247: PPUSH
27248: LD_VAR 0 6
27252: PPUSH
27253: LD_EXP 93
27257: PUSH
27258: LD_VAR 0 6
27262: ARRAY
27263: PPUSH
27264: LD_VAR 0 5
27268: PPUSH
27269: CALL_OW 3
27273: PPUSH
27274: CALL_OW 1
27278: ST_TO_ADDR
// exit ;
27279: POP
27280: POP
27281: GO 27474
// end ; end ;
27283: GO 27123
27285: POP
27286: POP
// for i := minerMinesList [ index ] downto 1 do
27287: LD_ADDR_VAR 0 5
27291: PUSH
27292: DOUBLE
27293: LD_EXP 93
27297: PUSH
27298: LD_VAR 0 6
27302: ARRAY
27303: INC
27304: ST_TO_ADDR
27305: LD_INT 1
27307: PUSH
27308: FOR_DOWNTO
27309: IFFALSE 27472
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27311: LD_EXP 93
27315: PUSH
27316: LD_VAR 0 6
27320: ARRAY
27321: PUSH
27322: LD_VAR 0 5
27326: ARRAY
27327: PUSH
27328: LD_INT 1
27330: ARRAY
27331: PPUSH
27332: LD_EXP 93
27336: PUSH
27337: LD_VAR 0 6
27341: ARRAY
27342: PUSH
27343: LD_VAR 0 5
27347: ARRAY
27348: PUSH
27349: LD_INT 2
27351: ARRAY
27352: PPUSH
27353: LD_VAR 0 2
27357: PPUSH
27358: LD_VAR 0 3
27362: PPUSH
27363: CALL_OW 298
27367: PUSH
27368: LD_INT 6
27370: LESS
27371: IFFALSE 27470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27373: LD_EXP 93
27377: PUSH
27378: LD_VAR 0 6
27382: ARRAY
27383: PUSH
27384: LD_VAR 0 5
27388: ARRAY
27389: PUSH
27390: LD_INT 1
27392: ARRAY
27393: PPUSH
27394: LD_EXP 93
27398: PUSH
27399: LD_VAR 0 6
27403: ARRAY
27404: PUSH
27405: LD_VAR 0 5
27409: ARRAY
27410: PUSH
27411: LD_INT 2
27413: ARRAY
27414: PPUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 255
27424: PPUSH
27425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27429: LD_ADDR_EXP 93
27433: PUSH
27434: LD_EXP 93
27438: PPUSH
27439: LD_VAR 0 6
27443: PPUSH
27444: LD_EXP 93
27448: PUSH
27449: LD_VAR 0 6
27453: ARRAY
27454: PPUSH
27455: LD_VAR 0 5
27459: PPUSH
27460: CALL_OW 3
27464: PPUSH
27465: CALL_OW 1
27469: ST_TO_ADDR
// end ; end ;
27470: GO 27308
27472: POP
27473: POP
// end ;
27474: LD_VAR 0 4
27478: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27479: LD_INT 0
27481: PPUSH
27482: PPUSH
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
27487: PPUSH
27488: PPUSH
27489: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27490: LD_VAR 0 1
27494: PPUSH
27495: CALL_OW 264
27499: PUSH
27500: LD_EXP 21
27504: EQUAL
27505: NOT
27506: PUSH
27507: LD_VAR 0 1
27511: PUSH
27512: LD_EXP 92
27516: IN
27517: NOT
27518: OR
27519: IFFALSE 27523
// exit ;
27521: GO 27845
// index := GetElementIndex ( minersList , unit ) ;
27523: LD_ADDR_VAR 0 6
27527: PUSH
27528: LD_EXP 92
27532: PPUSH
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL 33001 0 2
27542: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27543: LD_ADDR_VAR 0 8
27547: PUSH
27548: LD_EXP 94
27552: PUSH
27553: LD_EXP 93
27557: PUSH
27558: LD_VAR 0 6
27562: ARRAY
27563: MINUS
27564: ST_TO_ADDR
// if not minesFreeAmount then
27565: LD_VAR 0 8
27569: NOT
27570: IFFALSE 27574
// exit ;
27572: GO 27845
// tmp := [ ] ;
27574: LD_ADDR_VAR 0 7
27578: PUSH
27579: EMPTY
27580: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27581: LD_ADDR_VAR 0 5
27585: PUSH
27586: DOUBLE
27587: LD_INT 1
27589: DEC
27590: ST_TO_ADDR
27591: LD_VAR 0 8
27595: PUSH
27596: FOR_TO
27597: IFFALSE 27792
// begin _d := rand ( 0 , 5 ) ;
27599: LD_ADDR_VAR 0 11
27603: PUSH
27604: LD_INT 0
27606: PPUSH
27607: LD_INT 5
27609: PPUSH
27610: CALL_OW 12
27614: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27615: LD_ADDR_VAR 0 12
27619: PUSH
27620: LD_INT 2
27622: PPUSH
27623: LD_INT 6
27625: PPUSH
27626: CALL_OW 12
27630: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27631: LD_ADDR_VAR 0 9
27635: PUSH
27636: LD_VAR 0 2
27640: PPUSH
27641: LD_VAR 0 11
27645: PPUSH
27646: LD_VAR 0 12
27650: PPUSH
27651: CALL_OW 272
27655: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27656: LD_ADDR_VAR 0 10
27660: PUSH
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_VAR 0 11
27670: PPUSH
27671: LD_VAR 0 12
27675: PPUSH
27676: CALL_OW 273
27680: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27681: LD_VAR 0 9
27685: PPUSH
27686: LD_VAR 0 10
27690: PPUSH
27691: CALL_OW 488
27695: PUSH
27696: LD_VAR 0 9
27700: PUSH
27701: LD_VAR 0 10
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_VAR 0 7
27714: IN
27715: NOT
27716: AND
27717: PUSH
27718: LD_VAR 0 9
27722: PPUSH
27723: LD_VAR 0 10
27727: PPUSH
27728: CALL_OW 458
27732: NOT
27733: AND
27734: IFFALSE 27776
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27736: LD_ADDR_VAR 0 7
27740: PUSH
27741: LD_VAR 0 7
27745: PPUSH
27746: LD_VAR 0 7
27750: PUSH
27751: LD_INT 1
27753: PLUS
27754: PPUSH
27755: LD_VAR 0 9
27759: PUSH
27760: LD_VAR 0 10
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 1
27773: ST_TO_ADDR
27774: GO 27790
// i := i - 1 ;
27776: LD_ADDR_VAR 0 5
27780: PUSH
27781: LD_VAR 0 5
27785: PUSH
27786: LD_INT 1
27788: MINUS
27789: ST_TO_ADDR
// end ;
27790: GO 27596
27792: POP
27793: POP
// for i in tmp do
27794: LD_ADDR_VAR 0 5
27798: PUSH
27799: LD_VAR 0 7
27803: PUSH
27804: FOR_IN
27805: IFFALSE 27843
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27807: LD_VAR 0 1
27811: PPUSH
27812: LD_VAR 0 5
27816: PUSH
27817: LD_INT 1
27819: ARRAY
27820: PPUSH
27821: LD_VAR 0 5
27825: PUSH
27826: LD_INT 2
27828: ARRAY
27829: PPUSH
27830: CALL 26785 0 3
27834: NOT
27835: IFFALSE 27841
// exit ;
27837: POP
27838: POP
27839: GO 27845
27841: GO 27804
27843: POP
27844: POP
// end ;
27845: LD_VAR 0 4
27849: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27850: LD_INT 0
27852: PPUSH
27853: PPUSH
27854: PPUSH
27855: PPUSH
27856: PPUSH
27857: PPUSH
27858: PPUSH
// if not GetClass ( unit ) = class_sniper then
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 257
27868: PUSH
27869: LD_INT 5
27871: EQUAL
27872: NOT
27873: IFFALSE 27877
// exit ;
27875: GO 28265
// dist := 8 ;
27877: LD_ADDR_VAR 0 5
27881: PUSH
27882: LD_INT 8
27884: ST_TO_ADDR
// viewRange := 12 ;
27885: LD_ADDR_VAR 0 7
27889: PUSH
27890: LD_INT 12
27892: ST_TO_ADDR
// side := GetSide ( unit ) ;
27893: LD_ADDR_VAR 0 6
27897: PUSH
27898: LD_VAR 0 1
27902: PPUSH
27903: CALL_OW 255
27907: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27908: LD_INT 61
27910: PPUSH
27911: LD_VAR 0 6
27915: PPUSH
27916: CALL_OW 321
27920: PUSH
27921: LD_INT 2
27923: EQUAL
27924: IFFALSE 27934
// viewRange := 16 ;
27926: LD_ADDR_VAR 0 7
27930: PUSH
27931: LD_INT 16
27933: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27934: LD_VAR 0 1
27938: PPUSH
27939: LD_VAR 0 2
27943: PPUSH
27944: LD_VAR 0 3
27948: PPUSH
27949: CALL_OW 297
27953: PUSH
27954: LD_VAR 0 5
27958: GREATER
27959: IFFALSE 28038
// begin ComMoveXY ( unit , x , y ) ;
27961: LD_VAR 0 1
27965: PPUSH
27966: LD_VAR 0 2
27970: PPUSH
27971: LD_VAR 0 3
27975: PPUSH
27976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27980: LD_INT 35
27982: PPUSH
27983: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27987: LD_VAR 0 1
27991: PPUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 3
28001: PPUSH
28002: CALL 63065 0 3
28006: NOT
28007: IFFALSE 28011
// exit ;
28009: GO 28265
// until GetDistUnitXY ( unit , x , y ) < dist ;
28011: LD_VAR 0 1
28015: PPUSH
28016: LD_VAR 0 2
28020: PPUSH
28021: LD_VAR 0 3
28025: PPUSH
28026: CALL_OW 297
28030: PUSH
28031: LD_VAR 0 5
28035: LESS
28036: IFFALSE 27980
// end ; ComTurnXY ( unit , x , y ) ;
28038: LD_VAR 0 1
28042: PPUSH
28043: LD_VAR 0 2
28047: PPUSH
28048: LD_VAR 0 3
28052: PPUSH
28053: CALL_OW 118
// wait ( 5 ) ;
28057: LD_INT 5
28059: PPUSH
28060: CALL_OW 67
// _d := GetDir ( unit ) ;
28064: LD_ADDR_VAR 0 10
28068: PUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: CALL_OW 254
28078: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28079: LD_ADDR_VAR 0 8
28083: PUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 250
28093: PPUSH
28094: LD_VAR 0 10
28098: PPUSH
28099: LD_VAR 0 5
28103: PPUSH
28104: CALL_OW 272
28108: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28109: LD_ADDR_VAR 0 9
28113: PUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 251
28123: PPUSH
28124: LD_VAR 0 10
28128: PPUSH
28129: LD_VAR 0 5
28133: PPUSH
28134: CALL_OW 273
28138: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28139: LD_VAR 0 8
28143: PPUSH
28144: LD_VAR 0 9
28148: PPUSH
28149: CALL_OW 488
28153: NOT
28154: IFFALSE 28158
// exit ;
28156: GO 28265
// ComAnimCustom ( unit , 1 ) ;
28158: LD_VAR 0 1
28162: PPUSH
28163: LD_INT 1
28165: PPUSH
28166: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28170: LD_VAR 0 8
28174: PPUSH
28175: LD_VAR 0 9
28179: PPUSH
28180: LD_VAR 0 6
28184: PPUSH
28185: LD_VAR 0 7
28189: PPUSH
28190: CALL_OW 330
// repeat wait ( 1 ) ;
28194: LD_INT 1
28196: PPUSH
28197: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28201: LD_VAR 0 1
28205: PPUSH
28206: CALL_OW 316
28210: PUSH
28211: LD_VAR 0 1
28215: PPUSH
28216: CALL_OW 314
28220: OR
28221: PUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 302
28231: NOT
28232: OR
28233: PUSH
28234: LD_VAR 0 1
28238: PPUSH
28239: CALL_OW 301
28243: OR
28244: IFFALSE 28194
// RemoveSeeing ( _x , _y , side ) ;
28246: LD_VAR 0 8
28250: PPUSH
28251: LD_VAR 0 9
28255: PPUSH
28256: LD_VAR 0 6
28260: PPUSH
28261: CALL_OW 331
// end ; end_of_file
28265: LD_VAR 0 4
28269: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28270: LD_INT 0
28272: PPUSH
28273: PPUSH
// if exist_mode then
28274: LD_VAR 0 2
28278: IFFALSE 28303
// unit := CreateCharacter ( prefix & ident ) else
28280: LD_ADDR_VAR 0 5
28284: PUSH
28285: LD_VAR 0 3
28289: PUSH
28290: LD_VAR 0 1
28294: STR
28295: PPUSH
28296: CALL_OW 34
28300: ST_TO_ADDR
28301: GO 28318
// unit := NewCharacter ( ident ) ;
28303: LD_ADDR_VAR 0 5
28307: PUSH
28308: LD_VAR 0 1
28312: PPUSH
28313: CALL_OW 25
28317: ST_TO_ADDR
// result := unit ;
28318: LD_ADDR_VAR 0 4
28322: PUSH
28323: LD_VAR 0 5
28327: ST_TO_ADDR
// end ;
28328: LD_VAR 0 4
28332: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28333: LD_INT 0
28335: PPUSH
28336: PPUSH
// if not side or not nation then
28337: LD_VAR 0 1
28341: NOT
28342: PUSH
28343: LD_VAR 0 2
28347: NOT
28348: OR
28349: IFFALSE 28353
// exit ;
28351: GO 29117
// case nation of nation_american :
28353: LD_VAR 0 2
28357: PUSH
28358: LD_INT 1
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28580
28366: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28367: LD_ADDR_VAR 0 4
28371: PUSH
28372: LD_INT 35
28374: PUSH
28375: LD_INT 45
28377: PUSH
28378: LD_INT 46
28380: PUSH
28381: LD_INT 47
28383: PUSH
28384: LD_INT 82
28386: PUSH
28387: LD_INT 83
28389: PUSH
28390: LD_INT 84
28392: PUSH
28393: LD_INT 85
28395: PUSH
28396: LD_INT 86
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: LD_INT 6
28407: PUSH
28408: LD_INT 15
28410: PUSH
28411: LD_INT 16
28413: PUSH
28414: LD_INT 7
28416: PUSH
28417: LD_INT 12
28419: PUSH
28420: LD_INT 13
28422: PUSH
28423: LD_INT 10
28425: PUSH
28426: LD_INT 14
28428: PUSH
28429: LD_INT 20
28431: PUSH
28432: LD_INT 21
28434: PUSH
28435: LD_INT 22
28437: PUSH
28438: LD_INT 25
28440: PUSH
28441: LD_INT 32
28443: PUSH
28444: LD_INT 27
28446: PUSH
28447: LD_INT 36
28449: PUSH
28450: LD_INT 69
28452: PUSH
28453: LD_INT 39
28455: PUSH
28456: LD_INT 34
28458: PUSH
28459: LD_INT 40
28461: PUSH
28462: LD_INT 48
28464: PUSH
28465: LD_INT 49
28467: PUSH
28468: LD_INT 50
28470: PUSH
28471: LD_INT 51
28473: PUSH
28474: LD_INT 52
28476: PUSH
28477: LD_INT 53
28479: PUSH
28480: LD_INT 54
28482: PUSH
28483: LD_INT 55
28485: PUSH
28486: LD_INT 56
28488: PUSH
28489: LD_INT 57
28491: PUSH
28492: LD_INT 58
28494: PUSH
28495: LD_INT 59
28497: PUSH
28498: LD_INT 60
28500: PUSH
28501: LD_INT 61
28503: PUSH
28504: LD_INT 62
28506: PUSH
28507: LD_INT 80
28509: PUSH
28510: LD_INT 82
28512: PUSH
28513: LD_INT 83
28515: PUSH
28516: LD_INT 84
28518: PUSH
28519: LD_INT 85
28521: PUSH
28522: LD_INT 86
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
28578: GO 29041
28580: LD_INT 2
28582: DOUBLE
28583: EQUAL
28584: IFTRUE 28588
28586: GO 28810
28588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28589: LD_ADDR_VAR 0 4
28593: PUSH
28594: LD_INT 35
28596: PUSH
28597: LD_INT 45
28599: PUSH
28600: LD_INT 46
28602: PUSH
28603: LD_INT 47
28605: PUSH
28606: LD_INT 82
28608: PUSH
28609: LD_INT 83
28611: PUSH
28612: LD_INT 84
28614: PUSH
28615: LD_INT 85
28617: PUSH
28618: LD_INT 87
28620: PUSH
28621: LD_INT 70
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 11
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 4
28635: PUSH
28636: LD_INT 5
28638: PUSH
28639: LD_INT 6
28641: PUSH
28642: LD_INT 15
28644: PUSH
28645: LD_INT 18
28647: PUSH
28648: LD_INT 7
28650: PUSH
28651: LD_INT 17
28653: PUSH
28654: LD_INT 8
28656: PUSH
28657: LD_INT 20
28659: PUSH
28660: LD_INT 21
28662: PUSH
28663: LD_INT 22
28665: PUSH
28666: LD_INT 72
28668: PUSH
28669: LD_INT 26
28671: PUSH
28672: LD_INT 69
28674: PUSH
28675: LD_INT 39
28677: PUSH
28678: LD_INT 40
28680: PUSH
28681: LD_INT 41
28683: PUSH
28684: LD_INT 42
28686: PUSH
28687: LD_INT 43
28689: PUSH
28690: LD_INT 48
28692: PUSH
28693: LD_INT 49
28695: PUSH
28696: LD_INT 50
28698: PUSH
28699: LD_INT 51
28701: PUSH
28702: LD_INT 52
28704: PUSH
28705: LD_INT 53
28707: PUSH
28708: LD_INT 54
28710: PUSH
28711: LD_INT 55
28713: PUSH
28714: LD_INT 56
28716: PUSH
28717: LD_INT 60
28719: PUSH
28720: LD_INT 61
28722: PUSH
28723: LD_INT 62
28725: PUSH
28726: LD_INT 66
28728: PUSH
28729: LD_INT 67
28731: PUSH
28732: LD_INT 68
28734: PUSH
28735: LD_INT 81
28737: PUSH
28738: LD_INT 82
28740: PUSH
28741: LD_INT 83
28743: PUSH
28744: LD_INT 84
28746: PUSH
28747: LD_INT 85
28749: PUSH
28750: LD_INT 87
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: ST_TO_ADDR
28808: GO 29041
28810: LD_INT 3
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 29040
28818: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28819: LD_ADDR_VAR 0 4
28823: PUSH
28824: LD_INT 46
28826: PUSH
28827: LD_INT 47
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 82
28838: PUSH
28839: LD_INT 83
28841: PUSH
28842: LD_INT 84
28844: PUSH
28845: LD_INT 85
28847: PUSH
28848: LD_INT 86
28850: PUSH
28851: LD_INT 11
28853: PUSH
28854: LD_INT 9
28856: PUSH
28857: LD_INT 20
28859: PUSH
28860: LD_INT 19
28862: PUSH
28863: LD_INT 21
28865: PUSH
28866: LD_INT 24
28868: PUSH
28869: LD_INT 22
28871: PUSH
28872: LD_INT 25
28874: PUSH
28875: LD_INT 28
28877: PUSH
28878: LD_INT 29
28880: PUSH
28881: LD_INT 30
28883: PUSH
28884: LD_INT 31
28886: PUSH
28887: LD_INT 37
28889: PUSH
28890: LD_INT 38
28892: PUSH
28893: LD_INT 32
28895: PUSH
28896: LD_INT 27
28898: PUSH
28899: LD_INT 33
28901: PUSH
28902: LD_INT 69
28904: PUSH
28905: LD_INT 39
28907: PUSH
28908: LD_INT 34
28910: PUSH
28911: LD_INT 40
28913: PUSH
28914: LD_INT 71
28916: PUSH
28917: LD_INT 23
28919: PUSH
28920: LD_INT 44
28922: PUSH
28923: LD_INT 48
28925: PUSH
28926: LD_INT 49
28928: PUSH
28929: LD_INT 50
28931: PUSH
28932: LD_INT 51
28934: PUSH
28935: LD_INT 52
28937: PUSH
28938: LD_INT 53
28940: PUSH
28941: LD_INT 54
28943: PUSH
28944: LD_INT 55
28946: PUSH
28947: LD_INT 56
28949: PUSH
28950: LD_INT 57
28952: PUSH
28953: LD_INT 58
28955: PUSH
28956: LD_INT 59
28958: PUSH
28959: LD_INT 63
28961: PUSH
28962: LD_INT 64
28964: PUSH
28965: LD_INT 65
28967: PUSH
28968: LD_INT 82
28970: PUSH
28971: LD_INT 83
28973: PUSH
28974: LD_INT 84
28976: PUSH
28977: LD_INT 85
28979: PUSH
28980: LD_INT 86
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
29038: GO 29041
29040: POP
// if state > - 1 and state < 3 then
29041: LD_VAR 0 3
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: GREATER
29050: PUSH
29051: LD_VAR 0 3
29055: PUSH
29056: LD_INT 3
29058: LESS
29059: AND
29060: IFFALSE 29117
// for i in result do
29062: LD_ADDR_VAR 0 5
29066: PUSH
29067: LD_VAR 0 4
29071: PUSH
29072: FOR_IN
29073: IFFALSE 29115
// if GetTech ( i , side ) <> state then
29075: LD_VAR 0 5
29079: PPUSH
29080: LD_VAR 0 1
29084: PPUSH
29085: CALL_OW 321
29089: PUSH
29090: LD_VAR 0 3
29094: NONEQUAL
29095: IFFALSE 29113
// result := result diff i ;
29097: LD_ADDR_VAR 0 4
29101: PUSH
29102: LD_VAR 0 4
29106: PUSH
29107: LD_VAR 0 5
29111: DIFF
29112: ST_TO_ADDR
29113: GO 29072
29115: POP
29116: POP
// end ;
29117: LD_VAR 0 4
29121: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29122: LD_INT 0
29124: PPUSH
29125: PPUSH
29126: PPUSH
// result := true ;
29127: LD_ADDR_VAR 0 3
29131: PUSH
29132: LD_INT 1
29134: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29135: LD_ADDR_VAR 0 5
29139: PUSH
29140: LD_VAR 0 2
29144: PPUSH
29145: CALL_OW 480
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 5
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29208
// for i in tmp do
29159: LD_ADDR_VAR 0 4
29163: PUSH
29164: LD_VAR 0 5
29168: PUSH
29169: FOR_IN
29170: IFFALSE 29206
// if GetTech ( i , side ) <> state_researched then
29172: LD_VAR 0 4
29176: PPUSH
29177: LD_VAR 0 1
29181: PPUSH
29182: CALL_OW 321
29186: PUSH
29187: LD_INT 2
29189: NONEQUAL
29190: IFFALSE 29204
// begin result := false ;
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 0
29199: ST_TO_ADDR
// exit ;
29200: POP
29201: POP
29202: GO 29208
// end ;
29204: GO 29169
29206: POP
29207: POP
// end ;
29208: LD_VAR 0 3
29212: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29213: LD_INT 0
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
29223: PPUSH
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29228: LD_VAR 0 1
29232: NOT
29233: PUSH
29234: LD_VAR 0 1
29238: PPUSH
29239: CALL_OW 257
29243: PUSH
29244: LD_INT 9
29246: NONEQUAL
29247: OR
29248: IFFALSE 29252
// exit ;
29250: GO 29825
// side := GetSide ( unit ) ;
29252: LD_ADDR_VAR 0 9
29256: PUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 255
29266: ST_TO_ADDR
// tech_space := tech_spacanom ;
29267: LD_ADDR_VAR 0 12
29271: PUSH
29272: LD_INT 29
29274: ST_TO_ADDR
// tech_time := tech_taurad ;
29275: LD_ADDR_VAR 0 13
29279: PUSH
29280: LD_INT 28
29282: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29283: LD_ADDR_VAR 0 11
29287: PUSH
29288: LD_VAR 0 1
29292: PPUSH
29293: CALL_OW 310
29297: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29298: LD_VAR 0 11
29302: PPUSH
29303: CALL_OW 247
29307: PUSH
29308: LD_INT 2
29310: EQUAL
29311: IFFALSE 29315
// exit ;
29313: GO 29825
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29315: LD_ADDR_VAR 0 8
29319: PUSH
29320: LD_INT 81
29322: PUSH
29323: LD_VAR 0 9
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 3
29334: PUSH
29335: LD_INT 21
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 69
29357: ST_TO_ADDR
// if not tmp then
29358: LD_VAR 0 8
29362: NOT
29363: IFFALSE 29367
// exit ;
29365: GO 29825
// if in_unit then
29367: LD_VAR 0 11
29371: IFFALSE 29395
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29373: LD_ADDR_VAR 0 10
29377: PUSH
29378: LD_VAR 0 8
29382: PPUSH
29383: LD_VAR 0 11
29387: PPUSH
29388: CALL_OW 74
29392: ST_TO_ADDR
29393: GO 29415
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29395: LD_ADDR_VAR 0 10
29399: PUSH
29400: LD_VAR 0 8
29404: PPUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 74
29414: ST_TO_ADDR
// if not enemy then
29415: LD_VAR 0 10
29419: NOT
29420: IFFALSE 29424
// exit ;
29422: GO 29825
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29424: LD_VAR 0 11
29428: PUSH
29429: LD_VAR 0 11
29433: PPUSH
29434: LD_VAR 0 10
29438: PPUSH
29439: CALL_OW 296
29443: PUSH
29444: LD_INT 13
29446: GREATER
29447: AND
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: LD_VAR 0 10
29458: PPUSH
29459: CALL_OW 296
29463: PUSH
29464: LD_INT 12
29466: GREATER
29467: OR
29468: IFFALSE 29472
// exit ;
29470: GO 29825
// missile := [ 1 ] ;
29472: LD_ADDR_VAR 0 14
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: EMPTY
29481: LIST
29482: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29483: LD_VAR 0 9
29487: PPUSH
29488: LD_VAR 0 12
29492: PPUSH
29493: CALL_OW 325
29497: IFFALSE 29526
// missile := Insert ( missile , missile + 1 , 2 ) ;
29499: LD_ADDR_VAR 0 14
29503: PUSH
29504: LD_VAR 0 14
29508: PPUSH
29509: LD_VAR 0 14
29513: PUSH
29514: LD_INT 1
29516: PLUS
29517: PPUSH
29518: LD_INT 2
29520: PPUSH
29521: CALL_OW 2
29525: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29526: LD_VAR 0 9
29530: PPUSH
29531: LD_VAR 0 13
29535: PPUSH
29536: CALL_OW 325
29540: PUSH
29541: LD_VAR 0 10
29545: PPUSH
29546: CALL_OW 255
29550: PPUSH
29551: LD_VAR 0 13
29555: PPUSH
29556: CALL_OW 325
29560: NOT
29561: AND
29562: IFFALSE 29591
// missile := Insert ( missile , missile + 1 , 3 ) ;
29564: LD_ADDR_VAR 0 14
29568: PUSH
29569: LD_VAR 0 14
29573: PPUSH
29574: LD_VAR 0 14
29578: PUSH
29579: LD_INT 1
29581: PLUS
29582: PPUSH
29583: LD_INT 3
29585: PPUSH
29586: CALL_OW 2
29590: ST_TO_ADDR
// if missile < 2 then
29591: LD_VAR 0 14
29595: PUSH
29596: LD_INT 2
29598: LESS
29599: IFFALSE 29603
// exit ;
29601: GO 29825
// x := GetX ( enemy ) ;
29603: LD_ADDR_VAR 0 4
29607: PUSH
29608: LD_VAR 0 10
29612: PPUSH
29613: CALL_OW 250
29617: ST_TO_ADDR
// y := GetY ( enemy ) ;
29618: LD_ADDR_VAR 0 5
29622: PUSH
29623: LD_VAR 0 10
29627: PPUSH
29628: CALL_OW 251
29632: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29633: LD_ADDR_VAR 0 6
29637: PUSH
29638: LD_VAR 0 4
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PPUSH
29647: LD_INT 1
29649: PPUSH
29650: CALL_OW 12
29654: PLUS
29655: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29656: LD_ADDR_VAR 0 7
29660: PUSH
29661: LD_VAR 0 5
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PPUSH
29670: LD_INT 1
29672: PPUSH
29673: CALL_OW 12
29677: PLUS
29678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29679: LD_VAR 0 6
29683: PPUSH
29684: LD_VAR 0 7
29688: PPUSH
29689: CALL_OW 488
29693: NOT
29694: IFFALSE 29716
// begin _x := x ;
29696: LD_ADDR_VAR 0 6
29700: PUSH
29701: LD_VAR 0 4
29705: ST_TO_ADDR
// _y := y ;
29706: LD_ADDR_VAR 0 7
29710: PUSH
29711: LD_VAR 0 5
29715: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29716: LD_ADDR_VAR 0 3
29720: PUSH
29721: LD_INT 1
29723: PPUSH
29724: LD_VAR 0 14
29728: PPUSH
29729: CALL_OW 12
29733: ST_TO_ADDR
// case i of 1 :
29734: LD_VAR 0 3
29738: PUSH
29739: LD_INT 1
29741: DOUBLE
29742: EQUAL
29743: IFTRUE 29747
29745: GO 29764
29747: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29748: LD_VAR 0 1
29752: PPUSH
29753: LD_VAR 0 10
29757: PPUSH
29758: CALL_OW 115
29762: GO 29825
29764: LD_INT 2
29766: DOUBLE
29767: EQUAL
29768: IFTRUE 29772
29770: GO 29794
29772: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29773: LD_VAR 0 1
29777: PPUSH
29778: LD_VAR 0 6
29782: PPUSH
29783: LD_VAR 0 7
29787: PPUSH
29788: CALL_OW 153
29792: GO 29825
29794: LD_INT 3
29796: DOUBLE
29797: EQUAL
29798: IFTRUE 29802
29800: GO 29824
29802: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29803: LD_VAR 0 1
29807: PPUSH
29808: LD_VAR 0 6
29812: PPUSH
29813: LD_VAR 0 7
29817: PPUSH
29818: CALL_OW 154
29822: GO 29825
29824: POP
// end ;
29825: LD_VAR 0 2
29829: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29830: LD_INT 0
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
// if not unit or not building then
29838: LD_VAR 0 1
29842: NOT
29843: PUSH
29844: LD_VAR 0 2
29848: NOT
29849: OR
29850: IFFALSE 29854
// exit ;
29852: GO 30012
// x := GetX ( building ) ;
29854: LD_ADDR_VAR 0 5
29858: PUSH
29859: LD_VAR 0 2
29863: PPUSH
29864: CALL_OW 250
29868: ST_TO_ADDR
// y := GetY ( building ) ;
29869: LD_ADDR_VAR 0 6
29873: PUSH
29874: LD_VAR 0 2
29878: PPUSH
29879: CALL_OW 251
29883: ST_TO_ADDR
// for i = 0 to 5 do
29884: LD_ADDR_VAR 0 4
29888: PUSH
29889: DOUBLE
29890: LD_INT 0
29892: DEC
29893: ST_TO_ADDR
29894: LD_INT 5
29896: PUSH
29897: FOR_TO
29898: IFFALSE 30010
// begin _x := ShiftX ( x , i , 3 ) ;
29900: LD_ADDR_VAR 0 7
29904: PUSH
29905: LD_VAR 0 5
29909: PPUSH
29910: LD_VAR 0 4
29914: PPUSH
29915: LD_INT 3
29917: PPUSH
29918: CALL_OW 272
29922: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29923: LD_ADDR_VAR 0 8
29927: PUSH
29928: LD_VAR 0 6
29932: PPUSH
29933: LD_VAR 0 4
29937: PPUSH
29938: LD_INT 3
29940: PPUSH
29941: CALL_OW 273
29945: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29946: LD_VAR 0 7
29950: PPUSH
29951: LD_VAR 0 8
29955: PPUSH
29956: CALL_OW 488
29960: NOT
29961: IFFALSE 29965
// continue ;
29963: GO 29897
// if HexInfo ( _x , _y ) = 0 then
29965: LD_VAR 0 7
29969: PPUSH
29970: LD_VAR 0 8
29974: PPUSH
29975: CALL_OW 428
29979: PUSH
29980: LD_INT 0
29982: EQUAL
29983: IFFALSE 30008
// begin ComMoveXY ( unit , _x , _y ) ;
29985: LD_VAR 0 1
29989: PPUSH
29990: LD_VAR 0 7
29994: PPUSH
29995: LD_VAR 0 8
29999: PPUSH
30000: CALL_OW 111
// exit ;
30004: POP
30005: POP
30006: GO 30012
// end ; end ;
30008: GO 29897
30010: POP
30011: POP
// end ;
30012: LD_VAR 0 3
30016: RET
// export function ScanBase ( side , base_area ) ; begin
30017: LD_INT 0
30019: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30020: LD_ADDR_VAR 0 3
30024: PUSH
30025: LD_VAR 0 2
30029: PPUSH
30030: LD_INT 81
30032: PUSH
30033: LD_VAR 0 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PPUSH
30042: CALL_OW 70
30046: ST_TO_ADDR
// end ;
30047: LD_VAR 0 3
30051: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30052: LD_INT 0
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
// result := false ;
30058: LD_ADDR_VAR 0 2
30062: PUSH
30063: LD_INT 0
30065: ST_TO_ADDR
// side := GetSide ( unit ) ;
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 255
30080: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30081: LD_ADDR_VAR 0 4
30085: PUSH
30086: LD_VAR 0 1
30090: PPUSH
30091: CALL_OW 248
30095: ST_TO_ADDR
// case nat of 1 :
30096: LD_VAR 0 4
30100: PUSH
30101: LD_INT 1
30103: DOUBLE
30104: EQUAL
30105: IFTRUE 30109
30107: GO 30120
30109: POP
// tech := tech_lassight ; 2 :
30110: LD_ADDR_VAR 0 5
30114: PUSH
30115: LD_INT 12
30117: ST_TO_ADDR
30118: GO 30159
30120: LD_INT 2
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30139
30128: POP
// tech := tech_mortar ; 3 :
30129: LD_ADDR_VAR 0 5
30133: PUSH
30134: LD_INT 41
30136: ST_TO_ADDR
30137: GO 30159
30139: LD_INT 3
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30158
30147: POP
// tech := tech_bazooka ; end ;
30148: LD_ADDR_VAR 0 5
30152: PUSH
30153: LD_INT 44
30155: ST_TO_ADDR
30156: GO 30159
30158: POP
// if Researched ( side , tech ) then
30159: LD_VAR 0 3
30163: PPUSH
30164: LD_VAR 0 5
30168: PPUSH
30169: CALL_OW 325
30173: IFFALSE 30200
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30175: LD_ADDR_VAR 0 2
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: LD_INT 8
30185: PUSH
30186: LD_INT 9
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: PUSH
30194: LD_VAR 0 4
30198: ARRAY
30199: ST_TO_ADDR
// end ;
30200: LD_VAR 0 2
30204: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
30209: PPUSH
// if not mines then
30210: LD_VAR 0 2
30214: NOT
30215: IFFALSE 30219
// exit ;
30217: GO 30363
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30219: LD_ADDR_VAR 0 5
30223: PUSH
30224: LD_INT 81
30226: PUSH
30227: LD_VAR 0 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 21
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PPUSH
30257: CALL_OW 69
30261: ST_TO_ADDR
// for i in mines do
30262: LD_ADDR_VAR 0 4
30266: PUSH
30267: LD_VAR 0 2
30271: PUSH
30272: FOR_IN
30273: IFFALSE 30361
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30275: LD_VAR 0 4
30279: PUSH
30280: LD_INT 1
30282: ARRAY
30283: PPUSH
30284: LD_VAR 0 4
30288: PUSH
30289: LD_INT 2
30291: ARRAY
30292: PPUSH
30293: CALL_OW 458
30297: NOT
30298: IFFALSE 30302
// continue ;
30300: GO 30272
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30302: LD_VAR 0 4
30306: PUSH
30307: LD_INT 1
30309: ARRAY
30310: PPUSH
30311: LD_VAR 0 4
30315: PUSH
30316: LD_INT 2
30318: ARRAY
30319: PPUSH
30320: CALL_OW 428
30324: PUSH
30325: LD_VAR 0 5
30329: IN
30330: IFFALSE 30359
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30332: LD_VAR 0 4
30336: PUSH
30337: LD_INT 1
30339: ARRAY
30340: PPUSH
30341: LD_VAR 0 4
30345: PUSH
30346: LD_INT 2
30348: ARRAY
30349: PPUSH
30350: LD_VAR 0 1
30354: PPUSH
30355: CALL_OW 456
// end ;
30359: GO 30272
30361: POP
30362: POP
// end ;
30363: LD_VAR 0 3
30367: RET
// export function Count ( array ) ; var i ; begin
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
// result := 0 ;
30372: LD_ADDR_VAR 0 2
30376: PUSH
30377: LD_INT 0
30379: ST_TO_ADDR
// for i in array do
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_VAR 0 1
30389: PUSH
30390: FOR_IN
30391: IFFALSE 30415
// if i then
30393: LD_VAR 0 3
30397: IFFALSE 30413
// result := result + 1 ;
30399: LD_ADDR_VAR 0 2
30403: PUSH
30404: LD_VAR 0 2
30408: PUSH
30409: LD_INT 1
30411: PLUS
30412: ST_TO_ADDR
30413: GO 30390
30415: POP
30416: POP
// end ;
30417: LD_VAR 0 2
30421: RET
// export function IsEmpty ( building ) ; begin
30422: LD_INT 0
30424: PPUSH
// if not building then
30425: LD_VAR 0 1
30429: NOT
30430: IFFALSE 30434
// exit ;
30432: GO 30477
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30434: LD_ADDR_VAR 0 2
30438: PUSH
30439: LD_VAR 0 1
30443: PUSH
30444: LD_INT 22
30446: PUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 255
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 58
30463: PUSH
30464: EMPTY
30465: LIST
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PPUSH
30471: CALL_OW 69
30475: IN
30476: ST_TO_ADDR
// end ;
30477: LD_VAR 0 2
30481: RET
// export function IsNotFull ( building ) ; begin
30482: LD_INT 0
30484: PPUSH
// if not building then
30485: LD_VAR 0 1
30489: NOT
30490: IFFALSE 30494
// exit ;
30492: GO 30513
// result := UnitsInside ( building ) < 6 ;
30494: LD_ADDR_VAR 0 2
30498: PUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 313
30508: PUSH
30509: LD_INT 6
30511: LESS
30512: ST_TO_ADDR
// end ;
30513: LD_VAR 0 2
30517: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30518: LD_INT 0
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
// tmp := [ ] ;
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: EMPTY
30530: ST_TO_ADDR
// list := [ ] ;
30531: LD_ADDR_VAR 0 5
30535: PUSH
30536: EMPTY
30537: ST_TO_ADDR
// for i = 16 to 25 do
30538: LD_ADDR_VAR 0 4
30542: PUSH
30543: DOUBLE
30544: LD_INT 16
30546: DEC
30547: ST_TO_ADDR
30548: LD_INT 25
30550: PUSH
30551: FOR_TO
30552: IFFALSE 30625
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: LD_VAR 0 3
30563: PUSH
30564: LD_INT 22
30566: PUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 255
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 91
30583: PUSH
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 6
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 30
30599: PUSH
30600: LD_VAR 0 4
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: PPUSH
30617: CALL_OW 69
30621: ADD
30622: ST_TO_ADDR
30623: GO 30551
30625: POP
30626: POP
// for i = 1 to tmp do
30627: LD_ADDR_VAR 0 4
30631: PUSH
30632: DOUBLE
30633: LD_INT 1
30635: DEC
30636: ST_TO_ADDR
30637: LD_VAR 0 3
30641: PUSH
30642: FOR_TO
30643: IFFALSE 30731
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30645: LD_ADDR_VAR 0 5
30649: PUSH
30650: LD_VAR 0 5
30654: PUSH
30655: LD_VAR 0 3
30659: PUSH
30660: LD_VAR 0 4
30664: ARRAY
30665: PPUSH
30666: CALL_OW 266
30670: PUSH
30671: LD_VAR 0 3
30675: PUSH
30676: LD_VAR 0 4
30680: ARRAY
30681: PPUSH
30682: CALL_OW 250
30686: PUSH
30687: LD_VAR 0 3
30691: PUSH
30692: LD_VAR 0 4
30696: ARRAY
30697: PPUSH
30698: CALL_OW 251
30702: PUSH
30703: LD_VAR 0 3
30707: PUSH
30708: LD_VAR 0 4
30712: ARRAY
30713: PPUSH
30714: CALL_OW 254
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: ADD
30728: ST_TO_ADDR
30729: GO 30642
30731: POP
30732: POP
// result := list ;
30733: LD_ADDR_VAR 0 2
30737: PUSH
30738: LD_VAR 0 5
30742: ST_TO_ADDR
// end ;
30743: LD_VAR 0 2
30747: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30748: LD_INT 0
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
// if not factory then
30757: LD_VAR 0 1
30761: NOT
30762: IFFALSE 30766
// exit ;
30764: GO 31359
// if control = control_apeman then
30766: LD_VAR 0 4
30770: PUSH
30771: LD_INT 5
30773: EQUAL
30774: IFFALSE 30883
// begin tmp := UnitsInside ( factory ) ;
30776: LD_ADDR_VAR 0 8
30780: PUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 313
30790: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30791: LD_VAR 0 8
30795: PPUSH
30796: LD_INT 25
30798: PUSH
30799: LD_INT 12
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PPUSH
30806: CALL_OW 72
30810: NOT
30811: IFFALSE 30821
// control := control_manual ;
30813: LD_ADDR_VAR 0 4
30817: PUSH
30818: LD_INT 1
30820: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30821: LD_ADDR_VAR 0 8
30825: PUSH
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL 30518 0 1
30835: ST_TO_ADDR
// if tmp then
30836: LD_VAR 0 8
30840: IFFALSE 30883
// begin for i in tmp do
30842: LD_ADDR_VAR 0 7
30846: PUSH
30847: LD_VAR 0 8
30851: PUSH
30852: FOR_IN
30853: IFFALSE 30881
// if i [ 1 ] = b_ext_radio then
30855: LD_VAR 0 7
30859: PUSH
30860: LD_INT 1
30862: ARRAY
30863: PUSH
30864: LD_INT 22
30866: EQUAL
30867: IFFALSE 30879
// begin control := control_remote ;
30869: LD_ADDR_VAR 0 4
30873: PUSH
30874: LD_INT 2
30876: ST_TO_ADDR
// break ;
30877: GO 30881
// end ;
30879: GO 30852
30881: POP
30882: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30883: LD_VAR 0 1
30887: PPUSH
30888: LD_VAR 0 2
30892: PPUSH
30893: LD_VAR 0 3
30897: PPUSH
30898: LD_VAR 0 4
30902: PPUSH
30903: LD_VAR 0 5
30907: PPUSH
30908: CALL_OW 448
30912: IFFALSE 30947
// begin result := [ chassis , engine , control , weapon ] ;
30914: LD_ADDR_VAR 0 6
30918: PUSH
30919: LD_VAR 0 2
30923: PUSH
30924: LD_VAR 0 3
30928: PUSH
30929: LD_VAR 0 4
30933: PUSH
30934: LD_VAR 0 5
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: ST_TO_ADDR
// exit ;
30945: GO 31359
// end ; _chassis := AvailableChassisList ( factory ) ;
30947: LD_ADDR_VAR 0 9
30951: PUSH
30952: LD_VAR 0 1
30956: PPUSH
30957: CALL_OW 475
30961: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30962: LD_ADDR_VAR 0 11
30966: PUSH
30967: LD_VAR 0 1
30971: PPUSH
30972: CALL_OW 476
30976: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30977: LD_ADDR_VAR 0 12
30981: PUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 477
30991: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30992: LD_ADDR_VAR 0 10
30996: PUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 478
31006: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31007: LD_VAR 0 9
31011: NOT
31012: PUSH
31013: LD_VAR 0 11
31017: NOT
31018: OR
31019: PUSH
31020: LD_VAR 0 12
31024: NOT
31025: OR
31026: PUSH
31027: LD_VAR 0 10
31031: NOT
31032: OR
31033: IFFALSE 31068
// begin result := [ chassis , engine , control , weapon ] ;
31035: LD_ADDR_VAR 0 6
31039: PUSH
31040: LD_VAR 0 2
31044: PUSH
31045: LD_VAR 0 3
31049: PUSH
31050: LD_VAR 0 4
31054: PUSH
31055: LD_VAR 0 5
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// exit ;
31066: GO 31359
// end ; if not chassis in _chassis then
31068: LD_VAR 0 2
31072: PUSH
31073: LD_VAR 0 9
31077: IN
31078: NOT
31079: IFFALSE 31105
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_VAR 0 9
31090: PUSH
31091: LD_INT 1
31093: PPUSH
31094: LD_VAR 0 9
31098: PPUSH
31099: CALL_OW 12
31103: ARRAY
31104: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31105: LD_VAR 0 2
31109: PPUSH
31110: LD_VAR 0 3
31114: PPUSH
31115: CALL 31364 0 2
31119: NOT
31120: IFFALSE 31179
// repeat engine := _engine [ 1 ] ;
31122: LD_ADDR_VAR 0 3
31126: PUSH
31127: LD_VAR 0 11
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31136: LD_ADDR_VAR 0 11
31140: PUSH
31141: LD_VAR 0 11
31145: PPUSH
31146: LD_INT 1
31148: PPUSH
31149: CALL_OW 3
31153: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31154: LD_VAR 0 2
31158: PPUSH
31159: LD_VAR 0 3
31163: PPUSH
31164: CALL 31364 0 2
31168: PUSH
31169: LD_VAR 0 11
31173: PUSH
31174: EMPTY
31175: EQUAL
31176: OR
31177: IFFALSE 31122
// if not control in _control then
31179: LD_VAR 0 4
31183: PUSH
31184: LD_VAR 0 12
31188: IN
31189: NOT
31190: IFFALSE 31216
// control := _control [ rand ( 1 , _control ) ] ;
31192: LD_ADDR_VAR 0 4
31196: PUSH
31197: LD_VAR 0 12
31201: PUSH
31202: LD_INT 1
31204: PPUSH
31205: LD_VAR 0 12
31209: PPUSH
31210: CALL_OW 12
31214: ARRAY
31215: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31216: LD_VAR 0 2
31220: PPUSH
31221: LD_VAR 0 5
31225: PPUSH
31226: CALL 31584 0 2
31230: NOT
31231: IFFALSE 31290
// repeat weapon := _weapon [ 1 ] ;
31233: LD_ADDR_VAR 0 5
31237: PUSH
31238: LD_VAR 0 10
31242: PUSH
31243: LD_INT 1
31245: ARRAY
31246: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31247: LD_ADDR_VAR 0 10
31251: PUSH
31252: LD_VAR 0 10
31256: PPUSH
31257: LD_INT 1
31259: PPUSH
31260: CALL_OW 3
31264: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31265: LD_VAR 0 2
31269: PPUSH
31270: LD_VAR 0 5
31274: PPUSH
31275: CALL 31584 0 2
31279: PUSH
31280: LD_VAR 0 10
31284: PUSH
31285: EMPTY
31286: EQUAL
31287: OR
31288: IFFALSE 31233
// result := [ ] ;
31290: LD_ADDR_VAR 0 6
31294: PUSH
31295: EMPTY
31296: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31297: LD_VAR 0 1
31301: PPUSH
31302: LD_VAR 0 2
31306: PPUSH
31307: LD_VAR 0 3
31311: PPUSH
31312: LD_VAR 0 4
31316: PPUSH
31317: LD_VAR 0 5
31321: PPUSH
31322: CALL_OW 448
31326: IFFALSE 31359
// result := [ chassis , engine , control , weapon ] ;
31328: LD_ADDR_VAR 0 6
31332: PUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 3
31342: PUSH
31343: LD_VAR 0 4
31347: PUSH
31348: LD_VAR 0 5
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// end ;
31359: LD_VAR 0 6
31363: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31364: LD_INT 0
31366: PPUSH
// if not chassis or not engine then
31367: LD_VAR 0 1
31371: NOT
31372: PUSH
31373: LD_VAR 0 2
31377: NOT
31378: OR
31379: IFFALSE 31383
// exit ;
31381: GO 31579
// case engine of engine_solar :
31383: LD_VAR 0 2
31387: PUSH
31388: LD_INT 2
31390: DOUBLE
31391: EQUAL
31392: IFTRUE 31396
31394: GO 31434
31396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31397: LD_ADDR_VAR 0 3
31401: PUSH
31402: LD_INT 11
31404: PUSH
31405: LD_INT 12
31407: PUSH
31408: LD_INT 13
31410: PUSH
31411: LD_INT 14
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
31432: GO 31563
31434: LD_INT 1
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31504
31442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31443: LD_ADDR_VAR 0 3
31447: PUSH
31448: LD_INT 11
31450: PUSH
31451: LD_INT 12
31453: PUSH
31454: LD_INT 13
31456: PUSH
31457: LD_INT 14
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 2
31465: PUSH
31466: LD_INT 3
31468: PUSH
31469: LD_INT 4
31471: PUSH
31472: LD_INT 5
31474: PUSH
31475: LD_INT 21
31477: PUSH
31478: LD_INT 23
31480: PUSH
31481: LD_INT 22
31483: PUSH
31484: LD_INT 24
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
31502: GO 31563
31504: LD_INT 3
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 31562
31512: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31513: LD_ADDR_VAR 0 3
31517: PUSH
31518: LD_INT 13
31520: PUSH
31521: LD_INT 14
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 4
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: LD_INT 21
31538: PUSH
31539: LD_INT 22
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 24
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: ST_TO_ADDR
31560: GO 31563
31562: POP
// result := ( chassis in result ) ;
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_VAR 0 1
31572: PUSH
31573: LD_VAR 0 3
31577: IN
31578: ST_TO_ADDR
// end ;
31579: LD_VAR 0 3
31583: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31584: LD_INT 0
31586: PPUSH
// if not chassis or not weapon then
31587: LD_VAR 0 1
31591: NOT
31592: PUSH
31593: LD_VAR 0 2
31597: NOT
31598: OR
31599: IFFALSE 31603
// exit ;
31601: GO 32629
// case weapon of us_machine_gun :
31603: LD_VAR 0 2
31607: PUSH
31608: LD_INT 2
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31646
31616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31617: LD_ADDR_VAR 0 3
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 3
31630: PUSH
31631: LD_INT 4
31633: PUSH
31634: LD_INT 5
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
31644: GO 32613
31646: LD_INT 3
31648: DOUBLE
31649: EQUAL
31650: IFTRUE 31654
31652: GO 31684
31654: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31655: LD_ADDR_VAR 0 3
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 2
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: LD_INT 5
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: ST_TO_ADDR
31682: GO 32613
31684: LD_INT 11
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31722
31692: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31693: LD_ADDR_VAR 0 3
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 3
31706: PUSH
31707: LD_INT 4
31709: PUSH
31710: LD_INT 5
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
31720: GO 32613
31722: LD_INT 4
31724: DOUBLE
31725: EQUAL
31726: IFTRUE 31730
31728: GO 31756
31730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31731: LD_ADDR_VAR 0 3
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: LD_INT 4
31744: PUSH
31745: LD_INT 5
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
31754: GO 32613
31756: LD_INT 5
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31790
31764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31765: LD_ADDR_VAR 0 3
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: LD_INT 3
31775: PUSH
31776: LD_INT 4
31778: PUSH
31779: LD_INT 5
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
31788: GO 32613
31790: LD_INT 9
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31824
31798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 3
31809: PUSH
31810: LD_INT 4
31812: PUSH
31813: LD_INT 5
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
31822: GO 32613
31824: LD_INT 7
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31858
31832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31833: LD_ADDR_VAR 0 3
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: LD_INT 4
31846: PUSH
31847: LD_INT 5
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
31856: GO 32613
31858: LD_INT 12
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31892
31866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31867: LD_ADDR_VAR 0 3
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 4
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
31890: GO 32613
31892: LD_INT 13
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31926
31900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: LD_INT 5
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
31924: GO 32613
31926: LD_INT 14
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31952
31934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_INT 4
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: ST_TO_ADDR
31950: GO 32613
31952: LD_INT 6
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31978
31960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32613
31978: LD_INT 10
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32004
31986: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: ST_TO_ADDR
32002: GO 32613
32004: LD_INT 22
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32038
32012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32013: LD_ADDR_VAR 0 3
32017: PUSH
32018: LD_INT 11
32020: PUSH
32021: LD_INT 12
32023: PUSH
32024: LD_INT 13
32026: PUSH
32027: LD_INT 14
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: ST_TO_ADDR
32036: GO 32613
32038: LD_INT 23
32040: DOUBLE
32041: EQUAL
32042: IFTRUE 32046
32044: GO 32072
32046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32047: LD_ADDR_VAR 0 3
32051: PUSH
32052: LD_INT 11
32054: PUSH
32055: LD_INT 12
32057: PUSH
32058: LD_INT 13
32060: PUSH
32061: LD_INT 14
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: ST_TO_ADDR
32070: GO 32613
32072: LD_INT 24
32074: DOUBLE
32075: EQUAL
32076: IFTRUE 32080
32078: GO 32106
32080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32081: LD_ADDR_VAR 0 3
32085: PUSH
32086: LD_INT 11
32088: PUSH
32089: LD_INT 12
32091: PUSH
32092: LD_INT 13
32094: PUSH
32095: LD_INT 14
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
32104: GO 32613
32106: LD_INT 30
32108: DOUBLE
32109: EQUAL
32110: IFTRUE 32114
32112: GO 32140
32114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32115: LD_ADDR_VAR 0 3
32119: PUSH
32120: LD_INT 11
32122: PUSH
32123: LD_INT 12
32125: PUSH
32126: LD_INT 13
32128: PUSH
32129: LD_INT 14
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: ST_TO_ADDR
32138: GO 32613
32140: LD_INT 25
32142: DOUBLE
32143: EQUAL
32144: IFTRUE 32148
32146: GO 32166
32148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_INT 13
32156: PUSH
32157: LD_INT 14
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: ST_TO_ADDR
32164: GO 32613
32166: LD_INT 27
32168: DOUBLE
32169: EQUAL
32170: IFTRUE 32174
32172: GO 32192
32174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32175: LD_ADDR_VAR 0 3
32179: PUSH
32180: LD_INT 13
32182: PUSH
32183: LD_INT 14
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: ST_TO_ADDR
32190: GO 32613
32192: LD_INT 28
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32218
32200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 13
32208: PUSH
32209: LD_INT 14
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: ST_TO_ADDR
32216: GO 32613
32218: LD_INT 29
32220: DOUBLE
32221: EQUAL
32222: IFTRUE 32226
32224: GO 32244
32226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32227: LD_ADDR_VAR 0 3
32231: PUSH
32232: LD_INT 13
32234: PUSH
32235: LD_INT 14
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: ST_TO_ADDR
32242: GO 32613
32244: LD_INT 31
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32270
32252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_INT 13
32260: PUSH
32261: LD_INT 14
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: ST_TO_ADDR
32268: GO 32613
32270: LD_INT 26
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32296
32278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: LD_INT 13
32286: PUSH
32287: LD_INT 14
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: ST_TO_ADDR
32294: GO 32613
32296: LD_INT 42
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32330
32304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_INT 21
32312: PUSH
32313: LD_INT 22
32315: PUSH
32316: LD_INT 23
32318: PUSH
32319: LD_INT 24
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
32328: GO 32613
32330: LD_INT 43
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32364
32338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32339: LD_ADDR_VAR 0 3
32343: PUSH
32344: LD_INT 21
32346: PUSH
32347: LD_INT 22
32349: PUSH
32350: LD_INT 23
32352: PUSH
32353: LD_INT 24
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
32362: GO 32613
32364: LD_INT 44
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32372
32370: GO 32398
32372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_INT 21
32380: PUSH
32381: LD_INT 22
32383: PUSH
32384: LD_INT 23
32386: PUSH
32387: LD_INT 24
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
32396: GO 32613
32398: LD_INT 45
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32432
32406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_INT 21
32414: PUSH
32415: LD_INT 22
32417: PUSH
32418: LD_INT 23
32420: PUSH
32421: LD_INT 24
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
32430: GO 32613
32432: LD_INT 49
32434: DOUBLE
32435: EQUAL
32436: IFTRUE 32440
32438: GO 32466
32440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: LD_INT 21
32448: PUSH
32449: LD_INT 22
32451: PUSH
32452: LD_INT 23
32454: PUSH
32455: LD_INT 24
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
32464: GO 32613
32466: LD_INT 51
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32500
32474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 21
32482: PUSH
32483: LD_INT 22
32485: PUSH
32486: LD_INT 23
32488: PUSH
32489: LD_INT 24
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
32498: GO 32613
32500: LD_INT 52
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32534
32508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 21
32516: PUSH
32517: LD_INT 22
32519: PUSH
32520: LD_INT 23
32522: PUSH
32523: LD_INT 24
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 32613
32534: LD_INT 53
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32560
32542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 23
32550: PUSH
32551: LD_INT 24
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: ST_TO_ADDR
32558: GO 32613
32560: LD_INT 46
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32586
32568: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32569: LD_ADDR_VAR 0 3
32573: PUSH
32574: LD_INT 23
32576: PUSH
32577: LD_INT 24
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: ST_TO_ADDR
32584: GO 32613
32586: LD_INT 47
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32612
32594: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32595: LD_ADDR_VAR 0 3
32599: PUSH
32600: LD_INT 23
32602: PUSH
32603: LD_INT 24
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: ST_TO_ADDR
32610: GO 32613
32612: POP
// result := ( chassis in result ) ;
32613: LD_ADDR_VAR 0 3
32617: PUSH
32618: LD_VAR 0 1
32622: PUSH
32623: LD_VAR 0 3
32627: IN
32628: ST_TO_ADDR
// end ;
32629: LD_VAR 0 3
32633: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32634: LD_INT 0
32636: PPUSH
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
// result := array ;
32643: LD_ADDR_VAR 0 5
32647: PUSH
32648: LD_VAR 0 1
32652: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32653: LD_VAR 0 1
32657: NOT
32658: PUSH
32659: LD_VAR 0 2
32663: NOT
32664: OR
32665: PUSH
32666: LD_VAR 0 3
32670: NOT
32671: OR
32672: PUSH
32673: LD_VAR 0 2
32677: PUSH
32678: LD_VAR 0 1
32682: GREATER
32683: OR
32684: PUSH
32685: LD_VAR 0 3
32689: PUSH
32690: LD_VAR 0 1
32694: GREATER
32695: OR
32696: IFFALSE 32700
// exit ;
32698: GO 32996
// if direction then
32700: LD_VAR 0 4
32704: IFFALSE 32768
// begin d := 1 ;
32706: LD_ADDR_VAR 0 9
32710: PUSH
32711: LD_INT 1
32713: ST_TO_ADDR
// if i_from > i_to then
32714: LD_VAR 0 2
32718: PUSH
32719: LD_VAR 0 3
32723: GREATER
32724: IFFALSE 32750
// length := ( array - i_from ) + i_to else
32726: LD_ADDR_VAR 0 11
32730: PUSH
32731: LD_VAR 0 1
32735: PUSH
32736: LD_VAR 0 2
32740: MINUS
32741: PUSH
32742: LD_VAR 0 3
32746: PLUS
32747: ST_TO_ADDR
32748: GO 32766
// length := i_to - i_from ;
32750: LD_ADDR_VAR 0 11
32754: PUSH
32755: LD_VAR 0 3
32759: PUSH
32760: LD_VAR 0 2
32764: MINUS
32765: ST_TO_ADDR
// end else
32766: GO 32829
// begin d := - 1 ;
32768: LD_ADDR_VAR 0 9
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: ST_TO_ADDR
// if i_from > i_to then
32777: LD_VAR 0 2
32781: PUSH
32782: LD_VAR 0 3
32786: GREATER
32787: IFFALSE 32807
// length := i_from - i_to else
32789: LD_ADDR_VAR 0 11
32793: PUSH
32794: LD_VAR 0 2
32798: PUSH
32799: LD_VAR 0 3
32803: MINUS
32804: ST_TO_ADDR
32805: GO 32829
// length := ( array - i_to ) + i_from ;
32807: LD_ADDR_VAR 0 11
32811: PUSH
32812: LD_VAR 0 1
32816: PUSH
32817: LD_VAR 0 3
32821: MINUS
32822: PUSH
32823: LD_VAR 0 2
32827: PLUS
32828: ST_TO_ADDR
// end ; if not length then
32829: LD_VAR 0 11
32833: NOT
32834: IFFALSE 32838
// exit ;
32836: GO 32996
// tmp := array ;
32838: LD_ADDR_VAR 0 10
32842: PUSH
32843: LD_VAR 0 1
32847: ST_TO_ADDR
// for i = 1 to length do
32848: LD_ADDR_VAR 0 6
32852: PUSH
32853: DOUBLE
32854: LD_INT 1
32856: DEC
32857: ST_TO_ADDR
32858: LD_VAR 0 11
32862: PUSH
32863: FOR_TO
32864: IFFALSE 32984
// begin for j = 1 to array do
32866: LD_ADDR_VAR 0 7
32870: PUSH
32871: DOUBLE
32872: LD_INT 1
32874: DEC
32875: ST_TO_ADDR
32876: LD_VAR 0 1
32880: PUSH
32881: FOR_TO
32882: IFFALSE 32970
// begin k := j + d ;
32884: LD_ADDR_VAR 0 8
32888: PUSH
32889: LD_VAR 0 7
32893: PUSH
32894: LD_VAR 0 9
32898: PLUS
32899: ST_TO_ADDR
// if k > array then
32900: LD_VAR 0 8
32904: PUSH
32905: LD_VAR 0 1
32909: GREATER
32910: IFFALSE 32920
// k := 1 ;
32912: LD_ADDR_VAR 0 8
32916: PUSH
32917: LD_INT 1
32919: ST_TO_ADDR
// if not k then
32920: LD_VAR 0 8
32924: NOT
32925: IFFALSE 32937
// k := array ;
32927: LD_ADDR_VAR 0 8
32931: PUSH
32932: LD_VAR 0 1
32936: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32937: LD_ADDR_VAR 0 10
32941: PUSH
32942: LD_VAR 0 10
32946: PPUSH
32947: LD_VAR 0 8
32951: PPUSH
32952: LD_VAR 0 1
32956: PUSH
32957: LD_VAR 0 7
32961: ARRAY
32962: PPUSH
32963: CALL_OW 1
32967: ST_TO_ADDR
// end ;
32968: GO 32881
32970: POP
32971: POP
// array := tmp ;
32972: LD_ADDR_VAR 0 1
32976: PUSH
32977: LD_VAR 0 10
32981: ST_TO_ADDR
// end ;
32982: GO 32863
32984: POP
32985: POP
// result := array ;
32986: LD_ADDR_VAR 0 5
32990: PUSH
32991: LD_VAR 0 1
32995: ST_TO_ADDR
// end ;
32996: LD_VAR 0 5
33000: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33001: LD_INT 0
33003: PPUSH
33004: PPUSH
// result := 0 ;
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: LD_INT 0
33012: ST_TO_ADDR
// if not array or not value in array then
33013: LD_VAR 0 1
33017: NOT
33018: PUSH
33019: LD_VAR 0 2
33023: PUSH
33024: LD_VAR 0 1
33028: IN
33029: NOT
33030: OR
33031: IFFALSE 33035
// exit ;
33033: GO 33089
// for i = 1 to array do
33035: LD_ADDR_VAR 0 4
33039: PUSH
33040: DOUBLE
33041: LD_INT 1
33043: DEC
33044: ST_TO_ADDR
33045: LD_VAR 0 1
33049: PUSH
33050: FOR_TO
33051: IFFALSE 33087
// if value = array [ i ] then
33053: LD_VAR 0 2
33057: PUSH
33058: LD_VAR 0 1
33062: PUSH
33063: LD_VAR 0 4
33067: ARRAY
33068: EQUAL
33069: IFFALSE 33085
// begin result := i ;
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_VAR 0 4
33080: ST_TO_ADDR
// exit ;
33081: POP
33082: POP
33083: GO 33089
// end ;
33085: GO 33050
33087: POP
33088: POP
// end ;
33089: LD_VAR 0 3
33093: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33094: LD_INT 0
33096: PPUSH
// vc_chassis := chassis ;
33097: LD_ADDR_OWVAR 37
33101: PUSH
33102: LD_VAR 0 1
33106: ST_TO_ADDR
// vc_engine := engine ;
33107: LD_ADDR_OWVAR 39
33111: PUSH
33112: LD_VAR 0 2
33116: ST_TO_ADDR
// vc_control := control ;
33117: LD_ADDR_OWVAR 38
33121: PUSH
33122: LD_VAR 0 3
33126: ST_TO_ADDR
// vc_weapon := weapon ;
33127: LD_ADDR_OWVAR 40
33131: PUSH
33132: LD_VAR 0 4
33136: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33137: LD_ADDR_OWVAR 41
33141: PUSH
33142: LD_VAR 0 5
33146: ST_TO_ADDR
// end ;
33147: LD_VAR 0 6
33151: RET
// export function WantPlant ( unit ) ; var task ; begin
33152: LD_INT 0
33154: PPUSH
33155: PPUSH
// result := false ;
33156: LD_ADDR_VAR 0 2
33160: PUSH
33161: LD_INT 0
33163: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 437
33178: ST_TO_ADDR
// if task then
33179: LD_VAR 0 3
33183: IFFALSE 33211
// if task [ 1 ] [ 1 ] = p then
33185: LD_VAR 0 3
33189: PUSH
33190: LD_INT 1
33192: ARRAY
33193: PUSH
33194: LD_INT 1
33196: ARRAY
33197: PUSH
33198: LD_STRING p
33200: EQUAL
33201: IFFALSE 33211
// result := true ;
33203: LD_ADDR_VAR 0 2
33207: PUSH
33208: LD_INT 1
33210: ST_TO_ADDR
// end ;
33211: LD_VAR 0 2
33215: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33216: LD_INT 0
33218: PPUSH
33219: PPUSH
33220: PPUSH
33221: PPUSH
// if pos < 1 then
33222: LD_VAR 0 2
33226: PUSH
33227: LD_INT 1
33229: LESS
33230: IFFALSE 33234
// exit ;
33232: GO 33537
// if pos = 1 then
33234: LD_VAR 0 2
33238: PUSH
33239: LD_INT 1
33241: EQUAL
33242: IFFALSE 33275
// result := Replace ( arr , pos [ 1 ] , value ) else
33244: LD_ADDR_VAR 0 4
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: LD_VAR 0 2
33258: PUSH
33259: LD_INT 1
33261: ARRAY
33262: PPUSH
33263: LD_VAR 0 3
33267: PPUSH
33268: CALL_OW 1
33272: ST_TO_ADDR
33273: GO 33537
// begin tmp := arr ;
33275: LD_ADDR_VAR 0 6
33279: PUSH
33280: LD_VAR 0 1
33284: ST_TO_ADDR
// s_arr := [ tmp ] ;
33285: LD_ADDR_VAR 0 7
33289: PUSH
33290: LD_VAR 0 6
33294: PUSH
33295: EMPTY
33296: LIST
33297: ST_TO_ADDR
// for i = 1 to pos - 1 do
33298: LD_ADDR_VAR 0 5
33302: PUSH
33303: DOUBLE
33304: LD_INT 1
33306: DEC
33307: ST_TO_ADDR
33308: LD_VAR 0 2
33312: PUSH
33313: LD_INT 1
33315: MINUS
33316: PUSH
33317: FOR_TO
33318: IFFALSE 33363
// begin tmp := tmp [ pos [ i ] ] ;
33320: LD_ADDR_VAR 0 6
33324: PUSH
33325: LD_VAR 0 6
33329: PUSH
33330: LD_VAR 0 2
33334: PUSH
33335: LD_VAR 0 5
33339: ARRAY
33340: ARRAY
33341: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33342: LD_ADDR_VAR 0 7
33346: PUSH
33347: LD_VAR 0 7
33351: PUSH
33352: LD_VAR 0 6
33356: PUSH
33357: EMPTY
33358: LIST
33359: ADD
33360: ST_TO_ADDR
// end ;
33361: GO 33317
33363: POP
33364: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33365: LD_ADDR_VAR 0 6
33369: PUSH
33370: LD_VAR 0 6
33374: PPUSH
33375: LD_VAR 0 2
33379: PUSH
33380: LD_VAR 0 2
33384: ARRAY
33385: PPUSH
33386: LD_VAR 0 3
33390: PPUSH
33391: CALL_OW 1
33395: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33396: LD_ADDR_VAR 0 7
33400: PUSH
33401: LD_VAR 0 7
33405: PPUSH
33406: LD_VAR 0 7
33410: PPUSH
33411: LD_VAR 0 6
33415: PPUSH
33416: CALL_OW 1
33420: ST_TO_ADDR
// for i = s_arr downto 2 do
33421: LD_ADDR_VAR 0 5
33425: PUSH
33426: DOUBLE
33427: LD_VAR 0 7
33431: INC
33432: ST_TO_ADDR
33433: LD_INT 2
33435: PUSH
33436: FOR_DOWNTO
33437: IFFALSE 33521
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33439: LD_ADDR_VAR 0 6
33443: PUSH
33444: LD_VAR 0 7
33448: PUSH
33449: LD_VAR 0 5
33453: PUSH
33454: LD_INT 1
33456: MINUS
33457: ARRAY
33458: PPUSH
33459: LD_VAR 0 2
33463: PUSH
33464: LD_VAR 0 5
33468: PUSH
33469: LD_INT 1
33471: MINUS
33472: ARRAY
33473: PPUSH
33474: LD_VAR 0 7
33478: PUSH
33479: LD_VAR 0 5
33483: ARRAY
33484: PPUSH
33485: CALL_OW 1
33489: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33490: LD_ADDR_VAR 0 7
33494: PUSH
33495: LD_VAR 0 7
33499: PPUSH
33500: LD_VAR 0 5
33504: PUSH
33505: LD_INT 1
33507: MINUS
33508: PPUSH
33509: LD_VAR 0 6
33513: PPUSH
33514: CALL_OW 1
33518: ST_TO_ADDR
// end ;
33519: GO 33436
33521: POP
33522: POP
// result := s_arr [ 1 ] ;
33523: LD_ADDR_VAR 0 4
33527: PUSH
33528: LD_VAR 0 7
33532: PUSH
33533: LD_INT 1
33535: ARRAY
33536: ST_TO_ADDR
// end ; end ;
33537: LD_VAR 0 4
33541: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33542: LD_INT 0
33544: PPUSH
33545: PPUSH
// if not list then
33546: LD_VAR 0 1
33550: NOT
33551: IFFALSE 33555
// exit ;
33553: GO 33646
// i := list [ pos1 ] ;
33555: LD_ADDR_VAR 0 5
33559: PUSH
33560: LD_VAR 0 1
33564: PUSH
33565: LD_VAR 0 2
33569: ARRAY
33570: ST_TO_ADDR
// if not i then
33571: LD_VAR 0 5
33575: NOT
33576: IFFALSE 33580
// exit ;
33578: GO 33646
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33580: LD_ADDR_VAR 0 1
33584: PUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: LD_VAR 0 2
33594: PPUSH
33595: LD_VAR 0 1
33599: PUSH
33600: LD_VAR 0 3
33604: ARRAY
33605: PPUSH
33606: CALL_OW 1
33610: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33611: LD_ADDR_VAR 0 1
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: LD_VAR 0 3
33625: PPUSH
33626: LD_VAR 0 5
33630: PPUSH
33631: CALL_OW 1
33635: ST_TO_ADDR
// result := list ;
33636: LD_ADDR_VAR 0 4
33640: PUSH
33641: LD_VAR 0 1
33645: ST_TO_ADDR
// end ;
33646: LD_VAR 0 4
33650: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33651: LD_INT 0
33653: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 250
33668: PPUSH
33669: LD_VAR 0 1
33673: PPUSH
33674: CALL_OW 251
33678: PPUSH
33679: LD_VAR 0 2
33683: PPUSH
33684: LD_VAR 0 3
33688: PPUSH
33689: LD_VAR 0 4
33693: PPUSH
33694: CALL 33704 0 5
33698: ST_TO_ADDR
// end ;
33699: LD_VAR 0 5
33703: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33704: LD_INT 0
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
// if not list then
33710: LD_VAR 0 3
33714: NOT
33715: IFFALSE 33719
// exit ;
33717: GO 34107
// result := [ ] ;
33719: LD_ADDR_VAR 0 6
33723: PUSH
33724: EMPTY
33725: ST_TO_ADDR
// for i in list do
33726: LD_ADDR_VAR 0 7
33730: PUSH
33731: LD_VAR 0 3
33735: PUSH
33736: FOR_IN
33737: IFFALSE 33939
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33739: LD_ADDR_VAR 0 9
33743: PUSH
33744: LD_VAR 0 7
33748: PPUSH
33749: LD_VAR 0 1
33753: PPUSH
33754: LD_VAR 0 2
33758: PPUSH
33759: CALL_OW 297
33763: ST_TO_ADDR
// if not result then
33764: LD_VAR 0 6
33768: NOT
33769: IFFALSE 33795
// result := [ [ i , tmp ] ] else
33771: LD_ADDR_VAR 0 6
33775: PUSH
33776: LD_VAR 0 7
33780: PUSH
33781: LD_VAR 0 9
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: EMPTY
33791: LIST
33792: ST_TO_ADDR
33793: GO 33937
// begin if result [ result ] [ 2 ] < tmp then
33795: LD_VAR 0 6
33799: PUSH
33800: LD_VAR 0 6
33804: ARRAY
33805: PUSH
33806: LD_INT 2
33808: ARRAY
33809: PUSH
33810: LD_VAR 0 9
33814: LESS
33815: IFFALSE 33857
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33817: LD_ADDR_VAR 0 6
33821: PUSH
33822: LD_VAR 0 6
33826: PPUSH
33827: LD_VAR 0 6
33831: PUSH
33832: LD_INT 1
33834: PLUS
33835: PPUSH
33836: LD_VAR 0 7
33840: PUSH
33841: LD_VAR 0 9
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PPUSH
33850: CALL_OW 2
33854: ST_TO_ADDR
33855: GO 33937
// for j = 1 to result do
33857: LD_ADDR_VAR 0 8
33861: PUSH
33862: DOUBLE
33863: LD_INT 1
33865: DEC
33866: ST_TO_ADDR
33867: LD_VAR 0 6
33871: PUSH
33872: FOR_TO
33873: IFFALSE 33935
// begin if tmp < result [ j ] [ 2 ] then
33875: LD_VAR 0 9
33879: PUSH
33880: LD_VAR 0 6
33884: PUSH
33885: LD_VAR 0 8
33889: ARRAY
33890: PUSH
33891: LD_INT 2
33893: ARRAY
33894: LESS
33895: IFFALSE 33933
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33897: LD_ADDR_VAR 0 6
33901: PUSH
33902: LD_VAR 0 6
33906: PPUSH
33907: LD_VAR 0 8
33911: PPUSH
33912: LD_VAR 0 7
33916: PUSH
33917: LD_VAR 0 9
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PPUSH
33926: CALL_OW 2
33930: ST_TO_ADDR
// break ;
33931: GO 33935
// end ; end ;
33933: GO 33872
33935: POP
33936: POP
// end ; end ;
33937: GO 33736
33939: POP
33940: POP
// if result and not asc then
33941: LD_VAR 0 6
33945: PUSH
33946: LD_VAR 0 4
33950: NOT
33951: AND
33952: IFFALSE 34027
// begin tmp := result ;
33954: LD_ADDR_VAR 0 9
33958: PUSH
33959: LD_VAR 0 6
33963: ST_TO_ADDR
// for i = tmp downto 1 do
33964: LD_ADDR_VAR 0 7
33968: PUSH
33969: DOUBLE
33970: LD_VAR 0 9
33974: INC
33975: ST_TO_ADDR
33976: LD_INT 1
33978: PUSH
33979: FOR_DOWNTO
33980: IFFALSE 34025
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33982: LD_ADDR_VAR 0 6
33986: PUSH
33987: LD_VAR 0 6
33991: PPUSH
33992: LD_VAR 0 9
33996: PUSH
33997: LD_VAR 0 7
34001: MINUS
34002: PUSH
34003: LD_INT 1
34005: PLUS
34006: PPUSH
34007: LD_VAR 0 9
34011: PUSH
34012: LD_VAR 0 7
34016: ARRAY
34017: PPUSH
34018: CALL_OW 1
34022: ST_TO_ADDR
34023: GO 33979
34025: POP
34026: POP
// end ; tmp := [ ] ;
34027: LD_ADDR_VAR 0 9
34031: PUSH
34032: EMPTY
34033: ST_TO_ADDR
// if mode then
34034: LD_VAR 0 5
34038: IFFALSE 34107
// begin for i = 1 to result do
34040: LD_ADDR_VAR 0 7
34044: PUSH
34045: DOUBLE
34046: LD_INT 1
34048: DEC
34049: ST_TO_ADDR
34050: LD_VAR 0 6
34054: PUSH
34055: FOR_TO
34056: IFFALSE 34095
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_VAR 0 9
34067: PPUSH
34068: LD_VAR 0 7
34072: PPUSH
34073: LD_VAR 0 6
34077: PUSH
34078: LD_VAR 0 7
34082: ARRAY
34083: PUSH
34084: LD_INT 1
34086: ARRAY
34087: PPUSH
34088: CALL_OW 1
34092: ST_TO_ADDR
34093: GO 34055
34095: POP
34096: POP
// result := tmp ;
34097: LD_ADDR_VAR 0 6
34101: PUSH
34102: LD_VAR 0 9
34106: ST_TO_ADDR
// end ; end ;
34107: LD_VAR 0 6
34111: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34112: LD_INT 0
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34120: LD_ADDR_VAR 0 5
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: ST_TO_ADDR
// if not x or not y then
34142: LD_VAR 0 2
34146: NOT
34147: PUSH
34148: LD_VAR 0 3
34152: NOT
34153: OR
34154: IFFALSE 34158
// exit ;
34156: GO 35804
// if not range then
34158: LD_VAR 0 4
34162: NOT
34163: IFFALSE 34173
// range := 10 ;
34165: LD_ADDR_VAR 0 4
34169: PUSH
34170: LD_INT 10
34172: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34173: LD_ADDR_VAR 0 8
34177: PUSH
34178: LD_INT 81
34180: PUSH
34181: LD_VAR 0 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 92
34192: PUSH
34193: LD_VAR 0 2
34197: PUSH
34198: LD_VAR 0 3
34202: PUSH
34203: LD_VAR 0 4
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: LD_INT 21
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: PPUSH
34236: CALL_OW 69
34240: ST_TO_ADDR
// if not tmp then
34241: LD_VAR 0 8
34245: NOT
34246: IFFALSE 34250
// exit ;
34248: GO 35804
// for i in tmp do
34250: LD_ADDR_VAR 0 6
34254: PUSH
34255: LD_VAR 0 8
34259: PUSH
34260: FOR_IN
34261: IFFALSE 35779
// begin points := [ 0 , 0 , 0 ] ;
34263: LD_ADDR_VAR 0 9
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// bpoints := 1 ;
34282: LD_ADDR_VAR 0 10
34286: PUSH
34287: LD_INT 1
34289: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34290: LD_VAR 0 6
34294: PPUSH
34295: CALL_OW 247
34299: PUSH
34300: LD_INT 1
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34886
34308: POP
// begin if GetClass ( i ) = 1 then
34309: LD_VAR 0 6
34313: PPUSH
34314: CALL_OW 257
34318: PUSH
34319: LD_INT 1
34321: EQUAL
34322: IFFALSE 34343
// points := [ 10 , 5 , 3 ] ;
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_INT 10
34331: PUSH
34332: LD_INT 5
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 257
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: LD_INT 4
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: IN
34367: IFFALSE 34388
// points := [ 3 , 2 , 1 ] ;
34369: LD_ADDR_VAR 0 9
34373: PUSH
34374: LD_INT 3
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 257
34397: PUSH
34398: LD_INT 5
34400: EQUAL
34401: IFFALSE 34422
// points := [ 130 , 5 , 2 ] ;
34403: LD_ADDR_VAR 0 9
34407: PUSH
34408: LD_INT 130
34410: PUSH
34411: LD_INT 5
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34422: LD_VAR 0 6
34426: PPUSH
34427: CALL_OW 257
34431: PUSH
34432: LD_INT 8
34434: EQUAL
34435: IFFALSE 34456
// points := [ 35 , 35 , 30 ] ;
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_INT 35
34444: PUSH
34445: LD_INT 35
34447: PUSH
34448: LD_INT 30
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34456: LD_VAR 0 6
34460: PPUSH
34461: CALL_OW 257
34465: PUSH
34466: LD_INT 9
34468: EQUAL
34469: IFFALSE 34490
// points := [ 20 , 55 , 40 ] ;
34471: LD_ADDR_VAR 0 9
34475: PUSH
34476: LD_INT 20
34478: PUSH
34479: LD_INT 55
34481: PUSH
34482: LD_INT 40
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34490: LD_VAR 0 6
34494: PPUSH
34495: CALL_OW 257
34499: PUSH
34500: LD_INT 12
34502: PUSH
34503: LD_INT 16
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: IN
34510: IFFALSE 34531
// points := [ 5 , 3 , 2 ] ;
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_INT 5
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34531: LD_VAR 0 6
34535: PPUSH
34536: CALL_OW 257
34540: PUSH
34541: LD_INT 17
34543: EQUAL
34544: IFFALSE 34565
// points := [ 100 , 50 , 75 ] ;
34546: LD_ADDR_VAR 0 9
34550: PUSH
34551: LD_INT 100
34553: PUSH
34554: LD_INT 50
34556: PUSH
34557: LD_INT 75
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34565: LD_VAR 0 6
34569: PPUSH
34570: CALL_OW 257
34574: PUSH
34575: LD_INT 15
34577: EQUAL
34578: IFFALSE 34599
// points := [ 10 , 5 , 3 ] ;
34580: LD_ADDR_VAR 0 9
34584: PUSH
34585: LD_INT 10
34587: PUSH
34588: LD_INT 5
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34599: LD_VAR 0 6
34603: PPUSH
34604: CALL_OW 257
34608: PUSH
34609: LD_INT 14
34611: EQUAL
34612: IFFALSE 34633
// points := [ 10 , 0 , 0 ] ;
34614: LD_ADDR_VAR 0 9
34618: PUSH
34619: LD_INT 10
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34633: LD_VAR 0 6
34637: PPUSH
34638: CALL_OW 257
34642: PUSH
34643: LD_INT 11
34645: EQUAL
34646: IFFALSE 34667
// points := [ 30 , 10 , 5 ] ;
34648: LD_ADDR_VAR 0 9
34652: PUSH
34653: LD_INT 30
34655: PUSH
34656: LD_INT 10
34658: PUSH
34659: LD_INT 5
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34667: LD_VAR 0 1
34671: PPUSH
34672: LD_INT 5
34674: PPUSH
34675: CALL_OW 321
34679: PUSH
34680: LD_INT 2
34682: EQUAL
34683: IFFALSE 34700
// bpoints := bpoints * 1.8 ;
34685: LD_ADDR_VAR 0 10
34689: PUSH
34690: LD_VAR 0 10
34694: PUSH
34695: LD_REAL  1.80000000000000E+0000
34698: MUL
34699: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34700: LD_VAR 0 6
34704: PPUSH
34705: CALL_OW 257
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: LD_INT 4
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: IN
34728: PUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: LD_INT 51
34736: PPUSH
34737: CALL_OW 321
34741: PUSH
34742: LD_INT 2
34744: EQUAL
34745: AND
34746: IFFALSE 34763
// bpoints := bpoints * 1.2 ;
34748: LD_ADDR_VAR 0 10
34752: PUSH
34753: LD_VAR 0 10
34757: PUSH
34758: LD_REAL  1.20000000000000E+0000
34761: MUL
34762: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34763: LD_VAR 0 6
34767: PPUSH
34768: CALL_OW 257
34772: PUSH
34773: LD_INT 5
34775: PUSH
34776: LD_INT 7
34778: PUSH
34779: LD_INT 9
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: IN
34787: PUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: LD_INT 52
34795: PPUSH
34796: CALL_OW 321
34800: PUSH
34801: LD_INT 2
34803: EQUAL
34804: AND
34805: IFFALSE 34822
// bpoints := bpoints * 1.5 ;
34807: LD_ADDR_VAR 0 10
34811: PUSH
34812: LD_VAR 0 10
34816: PUSH
34817: LD_REAL  1.50000000000000E+0000
34820: MUL
34821: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34822: LD_VAR 0 1
34826: PPUSH
34827: LD_INT 66
34829: PPUSH
34830: CALL_OW 321
34834: PUSH
34835: LD_INT 2
34837: EQUAL
34838: IFFALSE 34855
// bpoints := bpoints * 1.1 ;
34840: LD_ADDR_VAR 0 10
34844: PUSH
34845: LD_VAR 0 10
34849: PUSH
34850: LD_REAL  1.10000000000000E+0000
34853: MUL
34854: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34855: LD_ADDR_VAR 0 10
34859: PUSH
34860: LD_VAR 0 10
34864: PUSH
34865: LD_VAR 0 6
34869: PPUSH
34870: LD_INT 1
34872: PPUSH
34873: CALL_OW 259
34877: PUSH
34878: LD_REAL  1.15000000000000E+0000
34881: MUL
34882: MUL
34883: ST_TO_ADDR
// end ; unit_vehicle :
34884: GO 35708
34886: LD_INT 2
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 35696
34894: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34895: LD_VAR 0 6
34899: PPUSH
34900: CALL_OW 264
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 42
34910: PUSH
34911: LD_INT 24
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: IN
34919: IFFALSE 34940
// points := [ 25 , 5 , 3 ] ;
34921: LD_ADDR_VAR 0 9
34925: PUSH
34926: LD_INT 25
34928: PUSH
34929: LD_INT 5
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34940: LD_VAR 0 6
34944: PPUSH
34945: CALL_OW 264
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: LD_INT 43
34955: PUSH
34956: LD_INT 25
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: IN
34964: IFFALSE 34985
// points := [ 40 , 15 , 5 ] ;
34966: LD_ADDR_VAR 0 9
34970: PUSH
34971: LD_INT 40
34973: PUSH
34974: LD_INT 15
34976: PUSH
34977: LD_INT 5
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34985: LD_VAR 0 6
34989: PPUSH
34990: CALL_OW 264
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 23
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: IN
35005: IFFALSE 35026
// points := [ 7 , 25 , 8 ] ;
35007: LD_ADDR_VAR 0 9
35011: PUSH
35012: LD_INT 7
35014: PUSH
35015: LD_INT 25
35017: PUSH
35018: LD_INT 8
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35026: LD_VAR 0 6
35030: PPUSH
35031: CALL_OW 264
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: LD_INT 27
35041: PUSH
35042: LD_INT 44
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: IN
35050: IFFALSE 35071
// points := [ 14 , 50 , 16 ] ;
35052: LD_ADDR_VAR 0 9
35056: PUSH
35057: LD_INT 14
35059: PUSH
35060: LD_INT 50
35062: PUSH
35063: LD_INT 16
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35071: LD_VAR 0 6
35075: PPUSH
35076: CALL_OW 264
35080: PUSH
35081: LD_INT 6
35083: PUSH
35084: LD_INT 46
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: IN
35091: IFFALSE 35112
// points := [ 32 , 120 , 70 ] ;
35093: LD_ADDR_VAR 0 9
35097: PUSH
35098: LD_INT 32
35100: PUSH
35101: LD_INT 120
35103: PUSH
35104: LD_INT 70
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35112: LD_VAR 0 6
35116: PPUSH
35117: CALL_OW 264
35121: PUSH
35122: LD_INT 7
35124: PUSH
35125: LD_INT 28
35127: PUSH
35128: LD_INT 45
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: IN
35136: IFFALSE 35157
// points := [ 35 , 20 , 45 ] ;
35138: LD_ADDR_VAR 0 9
35142: PUSH
35143: LD_INT 35
35145: PUSH
35146: LD_INT 20
35148: PUSH
35149: LD_INT 45
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35157: LD_VAR 0 6
35161: PPUSH
35162: CALL_OW 264
35166: PUSH
35167: LD_INT 47
35169: PUSH
35170: EMPTY
35171: LIST
35172: IN
35173: IFFALSE 35194
// points := [ 67 , 45 , 75 ] ;
35175: LD_ADDR_VAR 0 9
35179: PUSH
35180: LD_INT 67
35182: PUSH
35183: LD_INT 45
35185: PUSH
35186: LD_INT 75
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35194: LD_VAR 0 6
35198: PPUSH
35199: CALL_OW 264
35203: PUSH
35204: LD_INT 26
35206: PUSH
35207: EMPTY
35208: LIST
35209: IN
35210: IFFALSE 35231
// points := [ 120 , 30 , 80 ] ;
35212: LD_ADDR_VAR 0 9
35216: PUSH
35217: LD_INT 120
35219: PUSH
35220: LD_INT 30
35222: PUSH
35223: LD_INT 80
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35231: LD_VAR 0 6
35235: PPUSH
35236: CALL_OW 264
35240: PUSH
35241: LD_INT 22
35243: PUSH
35244: EMPTY
35245: LIST
35246: IN
35247: IFFALSE 35268
// points := [ 40 , 1 , 1 ] ;
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: LD_INT 40
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35268: LD_VAR 0 6
35272: PPUSH
35273: CALL_OW 264
35277: PUSH
35278: LD_INT 29
35280: PUSH
35281: EMPTY
35282: LIST
35283: IN
35284: IFFALSE 35305
// points := [ 70 , 200 , 400 ] ;
35286: LD_ADDR_VAR 0 9
35290: PUSH
35291: LD_INT 70
35293: PUSH
35294: LD_INT 200
35296: PUSH
35297: LD_INT 400
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35305: LD_VAR 0 6
35309: PPUSH
35310: CALL_OW 264
35314: PUSH
35315: LD_INT 14
35317: PUSH
35318: LD_INT 53
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: IN
35325: IFFALSE 35346
// points := [ 40 , 10 , 20 ] ;
35327: LD_ADDR_VAR 0 9
35331: PUSH
35332: LD_INT 40
35334: PUSH
35335: LD_INT 10
35337: PUSH
35338: LD_INT 20
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35346: LD_VAR 0 6
35350: PPUSH
35351: CALL_OW 264
35355: PUSH
35356: LD_INT 9
35358: PUSH
35359: EMPTY
35360: LIST
35361: IN
35362: IFFALSE 35383
// points := [ 5 , 70 , 20 ] ;
35364: LD_ADDR_VAR 0 9
35368: PUSH
35369: LD_INT 5
35371: PUSH
35372: LD_INT 70
35374: PUSH
35375: LD_INT 20
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35383: LD_VAR 0 6
35387: PPUSH
35388: CALL_OW 264
35392: PUSH
35393: LD_INT 10
35395: PUSH
35396: EMPTY
35397: LIST
35398: IN
35399: IFFALSE 35420
// points := [ 35 , 110 , 70 ] ;
35401: LD_ADDR_VAR 0 9
35405: PUSH
35406: LD_INT 35
35408: PUSH
35409: LD_INT 110
35411: PUSH
35412: LD_INT 70
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35420: LD_VAR 0 6
35424: PPUSH
35425: CALL_OW 265
35429: PUSH
35430: LD_INT 25
35432: EQUAL
35433: IFFALSE 35454
// points := [ 80 , 65 , 100 ] ;
35435: LD_ADDR_VAR 0 9
35439: PUSH
35440: LD_INT 80
35442: PUSH
35443: LD_INT 65
35445: PUSH
35446: LD_INT 100
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35454: LD_VAR 0 6
35458: PPUSH
35459: CALL_OW 263
35463: PUSH
35464: LD_INT 1
35466: EQUAL
35467: IFFALSE 35502
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35469: LD_ADDR_VAR 0 10
35473: PUSH
35474: LD_VAR 0 10
35478: PUSH
35479: LD_VAR 0 6
35483: PPUSH
35484: CALL_OW 311
35488: PPUSH
35489: LD_INT 3
35491: PPUSH
35492: CALL_OW 259
35496: PUSH
35497: LD_INT 4
35499: MUL
35500: MUL
35501: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35502: LD_VAR 0 6
35506: PPUSH
35507: CALL_OW 263
35511: PUSH
35512: LD_INT 2
35514: EQUAL
35515: IFFALSE 35566
// begin j := IsControledBy ( i ) ;
35517: LD_ADDR_VAR 0 7
35521: PUSH
35522: LD_VAR 0 6
35526: PPUSH
35527: CALL_OW 312
35531: ST_TO_ADDR
// if j then
35532: LD_VAR 0 7
35536: IFFALSE 35566
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35538: LD_ADDR_VAR 0 10
35542: PUSH
35543: LD_VAR 0 10
35547: PUSH
35548: LD_VAR 0 7
35552: PPUSH
35553: LD_INT 3
35555: PPUSH
35556: CALL_OW 259
35560: PUSH
35561: LD_INT 3
35563: MUL
35564: MUL
35565: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35566: LD_VAR 0 6
35570: PPUSH
35571: CALL_OW 264
35575: PUSH
35576: LD_INT 5
35578: PUSH
35579: LD_INT 6
35581: PUSH
35582: LD_INT 46
35584: PUSH
35585: LD_INT 44
35587: PUSH
35588: LD_INT 47
35590: PUSH
35591: LD_INT 45
35593: PUSH
35594: LD_INT 28
35596: PUSH
35597: LD_INT 7
35599: PUSH
35600: LD_INT 27
35602: PUSH
35603: LD_INT 29
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: IN
35618: PUSH
35619: LD_VAR 0 1
35623: PPUSH
35624: LD_INT 52
35626: PPUSH
35627: CALL_OW 321
35631: PUSH
35632: LD_INT 2
35634: EQUAL
35635: AND
35636: IFFALSE 35653
// bpoints := bpoints * 1.2 ;
35638: LD_ADDR_VAR 0 10
35642: PUSH
35643: LD_VAR 0 10
35647: PUSH
35648: LD_REAL  1.20000000000000E+0000
35651: MUL
35652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35653: LD_VAR 0 6
35657: PPUSH
35658: CALL_OW 264
35662: PUSH
35663: LD_INT 6
35665: PUSH
35666: LD_INT 46
35668: PUSH
35669: LD_INT 47
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: IN
35677: IFFALSE 35694
// bpoints := bpoints * 1.2 ;
35679: LD_ADDR_VAR 0 10
35683: PUSH
35684: LD_VAR 0 10
35688: PUSH
35689: LD_REAL  1.20000000000000E+0000
35692: MUL
35693: ST_TO_ADDR
// end ; unit_building :
35694: GO 35708
35696: LD_INT 3
35698: DOUBLE
35699: EQUAL
35700: IFTRUE 35704
35702: GO 35707
35704: POP
// ; end ;
35705: GO 35708
35707: POP
// for j = 1 to 3 do
35708: LD_ADDR_VAR 0 7
35712: PUSH
35713: DOUBLE
35714: LD_INT 1
35716: DEC
35717: ST_TO_ADDR
35718: LD_INT 3
35720: PUSH
35721: FOR_TO
35722: IFFALSE 35775
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35724: LD_ADDR_VAR 0 5
35728: PUSH
35729: LD_VAR 0 5
35733: PPUSH
35734: LD_VAR 0 7
35738: PPUSH
35739: LD_VAR 0 5
35743: PUSH
35744: LD_VAR 0 7
35748: ARRAY
35749: PUSH
35750: LD_VAR 0 9
35754: PUSH
35755: LD_VAR 0 7
35759: ARRAY
35760: PUSH
35761: LD_VAR 0 10
35765: MUL
35766: PLUS
35767: PPUSH
35768: CALL_OW 1
35772: ST_TO_ADDR
35773: GO 35721
35775: POP
35776: POP
// end ;
35777: GO 34260
35779: POP
35780: POP
// result := Replace ( result , 4 , tmp ) ;
35781: LD_ADDR_VAR 0 5
35785: PUSH
35786: LD_VAR 0 5
35790: PPUSH
35791: LD_INT 4
35793: PPUSH
35794: LD_VAR 0 8
35798: PPUSH
35799: CALL_OW 1
35803: ST_TO_ADDR
// end ;
35804: LD_VAR 0 5
35808: RET
// export function DangerAtRange ( unit , range ) ; begin
35809: LD_INT 0
35811: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35812: LD_ADDR_VAR 0 3
35816: PUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 255
35826: PPUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 250
35836: PPUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 251
35846: PPUSH
35847: LD_VAR 0 2
35851: PPUSH
35852: CALL 34112 0 4
35856: ST_TO_ADDR
// end ;
35857: LD_VAR 0 3
35861: RET
// export function DangerInArea ( side , area ) ; begin
35862: LD_INT 0
35864: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_VAR 0 2
35874: PPUSH
35875: LD_INT 81
35877: PUSH
35878: LD_VAR 0 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 70
35891: ST_TO_ADDR
// end ;
35892: LD_VAR 0 3
35896: RET
// export function IsExtension ( b ) ; begin
35897: LD_INT 0
35899: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35900: LD_ADDR_VAR 0 2
35904: PUSH
35905: LD_VAR 0 1
35909: PUSH
35910: LD_INT 23
35912: PUSH
35913: LD_INT 20
35915: PUSH
35916: LD_INT 22
35918: PUSH
35919: LD_INT 17
35921: PUSH
35922: LD_INT 24
35924: PUSH
35925: LD_INT 21
35927: PUSH
35928: LD_INT 19
35930: PUSH
35931: LD_INT 16
35933: PUSH
35934: LD_INT 25
35936: PUSH
35937: LD_INT 18
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: IN
35952: ST_TO_ADDR
// end ;
35953: LD_VAR 0 2
35957: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35958: LD_INT 0
35960: PPUSH
35961: PPUSH
35962: PPUSH
// result := [ ] ;
35963: LD_ADDR_VAR 0 3
35967: PUSH
35968: EMPTY
35969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35970: LD_ADDR_VAR 0 4
35974: PUSH
35975: LD_VAR 0 2
35979: PPUSH
35980: LD_INT 21
35982: PUSH
35983: LD_INT 3
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PPUSH
35990: CALL_OW 70
35994: ST_TO_ADDR
// if not tmp then
35995: LD_VAR 0 4
35999: NOT
36000: IFFALSE 36004
// exit ;
36002: GO 36062
// for i in tmp do
36004: LD_ADDR_VAR 0 5
36008: PUSH
36009: LD_VAR 0 4
36013: PUSH
36014: FOR_IN
36015: IFFALSE 36050
// if GetBase ( i ) <> base then
36017: LD_VAR 0 5
36021: PPUSH
36022: CALL_OW 274
36026: PUSH
36027: LD_VAR 0 1
36031: NONEQUAL
36032: IFFALSE 36048
// ComLinkToBase ( base , i ) ;
36034: LD_VAR 0 1
36038: PPUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL_OW 169
36048: GO 36014
36050: POP
36051: POP
// result := tmp ;
36052: LD_ADDR_VAR 0 3
36056: PUSH
36057: LD_VAR 0 4
36061: ST_TO_ADDR
// end ;
36062: LD_VAR 0 3
36066: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36067: LD_INT 0
36069: PPUSH
36070: PPUSH
// if BuildingStatus ( b ) = bs_build then
36071: LD_VAR 0 2
36075: PPUSH
36076: CALL_OW 461
36080: PUSH
36081: LD_INT 1
36083: EQUAL
36084: IFFALSE 36144
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36086: LD_VAR 0 1
36090: PPUSH
36091: LD_STRING h
36093: PUSH
36094: LD_VAR 0 2
36098: PPUSH
36099: CALL_OW 250
36103: PUSH
36104: LD_VAR 0 2
36108: PPUSH
36109: CALL_OW 251
36113: PUSH
36114: LD_VAR 0 2
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: PUSH
36137: EMPTY
36138: LIST
36139: PPUSH
36140: CALL_OW 446
// end ;
36144: LD_VAR 0 3
36148: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36149: LD_INT 0
36151: PPUSH
36152: PPUSH
36153: PPUSH
36154: PPUSH
36155: PPUSH
36156: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36157: LD_VAR 0 1
36161: NOT
36162: PUSH
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 263
36172: PUSH
36173: LD_INT 2
36175: EQUAL
36176: NOT
36177: OR
36178: IFFALSE 36182
// exit ;
36180: GO 36498
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36182: LD_ADDR_VAR 0 6
36186: PUSH
36187: LD_INT 22
36189: PUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 255
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: LD_INT 30
36209: PUSH
36210: LD_INT 36
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 34
36219: PUSH
36220: LD_INT 31
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PPUSH
36236: CALL_OW 69
36240: ST_TO_ADDR
// if not tmp then
36241: LD_VAR 0 6
36245: NOT
36246: IFFALSE 36250
// exit ;
36248: GO 36498
// result := [ ] ;
36250: LD_ADDR_VAR 0 2
36254: PUSH
36255: EMPTY
36256: ST_TO_ADDR
// for i in tmp do
36257: LD_ADDR_VAR 0 3
36261: PUSH
36262: LD_VAR 0 6
36266: PUSH
36267: FOR_IN
36268: IFFALSE 36339
// begin t := UnitsInside ( i ) ;
36270: LD_ADDR_VAR 0 4
36274: PUSH
36275: LD_VAR 0 3
36279: PPUSH
36280: CALL_OW 313
36284: ST_TO_ADDR
// if t then
36285: LD_VAR 0 4
36289: IFFALSE 36337
// for j in t do
36291: LD_ADDR_VAR 0 7
36295: PUSH
36296: LD_VAR 0 4
36300: PUSH
36301: FOR_IN
36302: IFFALSE 36335
// result := Insert ( result , result + 1 , j ) ;
36304: LD_ADDR_VAR 0 2
36308: PUSH
36309: LD_VAR 0 2
36313: PPUSH
36314: LD_VAR 0 2
36318: PUSH
36319: LD_INT 1
36321: PLUS
36322: PPUSH
36323: LD_VAR 0 7
36327: PPUSH
36328: CALL_OW 2
36332: ST_TO_ADDR
36333: GO 36301
36335: POP
36336: POP
// end ;
36337: GO 36267
36339: POP
36340: POP
// if not result then
36341: LD_VAR 0 2
36345: NOT
36346: IFFALSE 36350
// exit ;
36348: GO 36498
// mech := result [ 1 ] ;
36350: LD_ADDR_VAR 0 5
36354: PUSH
36355: LD_VAR 0 2
36359: PUSH
36360: LD_INT 1
36362: ARRAY
36363: ST_TO_ADDR
// if result > 1 then
36364: LD_VAR 0 2
36368: PUSH
36369: LD_INT 1
36371: GREATER
36372: IFFALSE 36484
// for i = 2 to result do
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: DOUBLE
36380: LD_INT 2
36382: DEC
36383: ST_TO_ADDR
36384: LD_VAR 0 2
36388: PUSH
36389: FOR_TO
36390: IFFALSE 36482
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36392: LD_ADDR_VAR 0 4
36396: PUSH
36397: LD_VAR 0 2
36401: PUSH
36402: LD_VAR 0 3
36406: ARRAY
36407: PPUSH
36408: LD_INT 3
36410: PPUSH
36411: CALL_OW 259
36415: PUSH
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 3
36425: ARRAY
36426: PPUSH
36427: CALL_OW 432
36431: MINUS
36432: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36433: LD_VAR 0 4
36437: PUSH
36438: LD_VAR 0 5
36442: PPUSH
36443: LD_INT 3
36445: PPUSH
36446: CALL_OW 259
36450: PUSH
36451: LD_VAR 0 5
36455: PPUSH
36456: CALL_OW 432
36460: MINUS
36461: GREATEREQUAL
36462: IFFALSE 36480
// mech := result [ i ] ;
36464: LD_ADDR_VAR 0 5
36468: PUSH
36469: LD_VAR 0 2
36473: PUSH
36474: LD_VAR 0 3
36478: ARRAY
36479: ST_TO_ADDR
// end ;
36480: GO 36389
36482: POP
36483: POP
// ComLinkTo ( vehicle , mech ) ;
36484: LD_VAR 0 1
36488: PPUSH
36489: LD_VAR 0 5
36493: PPUSH
36494: CALL_OW 135
// end ;
36498: LD_VAR 0 2
36502: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36503: LD_INT 0
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
// result := [ ] ;
36518: LD_ADDR_VAR 0 7
36522: PUSH
36523: EMPTY
36524: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL_OW 266
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: IN
36545: NOT
36546: IFFALSE 36550
// exit ;
36548: GO 38181
// if name then
36550: LD_VAR 0 3
36554: IFFALSE 36570
// SetBName ( base_dep , name ) ;
36556: LD_VAR 0 1
36560: PPUSH
36561: LD_VAR 0 3
36565: PPUSH
36566: CALL_OW 500
// base := GetBase ( base_dep ) ;
36570: LD_ADDR_VAR 0 15
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 274
36584: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36585: LD_ADDR_VAR 0 16
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 255
36599: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36600: LD_ADDR_VAR 0 17
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 248
36614: ST_TO_ADDR
// if sources then
36615: LD_VAR 0 5
36619: IFFALSE 36666
// for i = 1 to 3 do
36621: LD_ADDR_VAR 0 8
36625: PUSH
36626: DOUBLE
36627: LD_INT 1
36629: DEC
36630: ST_TO_ADDR
36631: LD_INT 3
36633: PUSH
36634: FOR_TO
36635: IFFALSE 36664
// AddResourceType ( base , i , sources [ i ] ) ;
36637: LD_VAR 0 15
36641: PPUSH
36642: LD_VAR 0 8
36646: PPUSH
36647: LD_VAR 0 5
36651: PUSH
36652: LD_VAR 0 8
36656: ARRAY
36657: PPUSH
36658: CALL_OW 276
36662: GO 36634
36664: POP
36665: POP
// buildings := GetBaseBuildings ( base , area ) ;
36666: LD_ADDR_VAR 0 18
36670: PUSH
36671: LD_VAR 0 15
36675: PPUSH
36676: LD_VAR 0 2
36680: PPUSH
36681: CALL 35958 0 2
36685: ST_TO_ADDR
// InitHc ;
36686: CALL_OW 19
// InitUc ;
36690: CALL_OW 18
// uc_side := side ;
36694: LD_ADDR_OWVAR 20
36698: PUSH
36699: LD_VAR 0 16
36703: ST_TO_ADDR
// uc_nation := nation ;
36704: LD_ADDR_OWVAR 21
36708: PUSH
36709: LD_VAR 0 17
36713: ST_TO_ADDR
// if buildings then
36714: LD_VAR 0 18
36718: IFFALSE 38040
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36720: LD_ADDR_VAR 0 19
36724: PUSH
36725: LD_VAR 0 18
36729: PPUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 30
36735: PUSH
36736: LD_INT 29
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 30
36745: PUSH
36746: LD_INT 30
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: PPUSH
36758: CALL_OW 72
36762: ST_TO_ADDR
// if tmp then
36763: LD_VAR 0 19
36767: IFFALSE 36815
// for i in tmp do
36769: LD_ADDR_VAR 0 8
36773: PUSH
36774: LD_VAR 0 19
36778: PUSH
36779: FOR_IN
36780: IFFALSE 36813
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36782: LD_VAR 0 8
36786: PPUSH
36787: CALL_OW 250
36791: PPUSH
36792: LD_VAR 0 8
36796: PPUSH
36797: CALL_OW 251
36801: PPUSH
36802: LD_VAR 0 16
36806: PPUSH
36807: CALL_OW 441
36811: GO 36779
36813: POP
36814: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36815: LD_VAR 0 18
36819: PPUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 30
36825: PUSH
36826: LD_INT 32
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 30
36835: PUSH
36836: LD_INT 33
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: PPUSH
36848: CALL_OW 72
36852: IFFALSE 36940
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36854: LD_ADDR_VAR 0 8
36858: PUSH
36859: LD_VAR 0 18
36863: PPUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 30
36869: PUSH
36870: LD_INT 32
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 30
36879: PUSH
36880: LD_INT 33
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: PPUSH
36892: CALL_OW 72
36896: PUSH
36897: FOR_IN
36898: IFFALSE 36938
// begin if not GetBWeapon ( i ) then
36900: LD_VAR 0 8
36904: PPUSH
36905: CALL_OW 269
36909: NOT
36910: IFFALSE 36936
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36912: LD_VAR 0 8
36916: PPUSH
36917: LD_VAR 0 8
36921: PPUSH
36922: LD_VAR 0 2
36926: PPUSH
36927: CALL 38186 0 2
36931: PPUSH
36932: CALL_OW 431
// end ;
36936: GO 36897
36938: POP
36939: POP
// end ; for i = 1 to personel do
36940: LD_ADDR_VAR 0 8
36944: PUSH
36945: DOUBLE
36946: LD_INT 1
36948: DEC
36949: ST_TO_ADDR
36950: LD_VAR 0 6
36954: PUSH
36955: FOR_TO
36956: IFFALSE 38020
// begin if i > 4 then
36958: LD_VAR 0 8
36962: PUSH
36963: LD_INT 4
36965: GREATER
36966: IFFALSE 36970
// break ;
36968: GO 38020
// case i of 1 :
36970: LD_VAR 0 8
36974: PUSH
36975: LD_INT 1
36977: DOUBLE
36978: EQUAL
36979: IFTRUE 36983
36981: GO 37063
36983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36984: LD_ADDR_VAR 0 12
36988: PUSH
36989: LD_VAR 0 18
36993: PPUSH
36994: LD_INT 22
36996: PUSH
36997: LD_VAR 0 16
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 58
37008: PUSH
37009: EMPTY
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 30
37017: PUSH
37018: LD_INT 32
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 30
37027: PUSH
37028: LD_INT 4
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 30
37037: PUSH
37038: LD_INT 5
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: PPUSH
37056: CALL_OW 72
37060: ST_TO_ADDR
37061: GO 37285
37063: LD_INT 2
37065: DOUBLE
37066: EQUAL
37067: IFTRUE 37071
37069: GO 37133
37071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37072: LD_ADDR_VAR 0 12
37076: PUSH
37077: LD_VAR 0 18
37081: PPUSH
37082: LD_INT 22
37084: PUSH
37085: LD_VAR 0 16
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: LD_INT 30
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 30
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PPUSH
37126: CALL_OW 72
37130: ST_TO_ADDR
37131: GO 37285
37133: LD_INT 3
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37203
37141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37142: LD_ADDR_VAR 0 12
37146: PUSH
37147: LD_VAR 0 18
37151: PPUSH
37152: LD_INT 22
37154: PUSH
37155: LD_VAR 0 16
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: LD_INT 30
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 30
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PPUSH
37196: CALL_OW 72
37200: ST_TO_ADDR
37201: GO 37285
37203: LD_INT 4
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37284
37211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37212: LD_ADDR_VAR 0 12
37216: PUSH
37217: LD_VAR 0 18
37221: PPUSH
37222: LD_INT 22
37224: PUSH
37225: LD_VAR 0 16
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 30
37239: PUSH
37240: LD_INT 6
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 30
37249: PUSH
37250: LD_INT 7
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 30
37259: PUSH
37260: LD_INT 8
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PPUSH
37277: CALL_OW 72
37281: ST_TO_ADDR
37282: GO 37285
37284: POP
// if i = 1 then
37285: LD_VAR 0 8
37289: PUSH
37290: LD_INT 1
37292: EQUAL
37293: IFFALSE 37404
// begin tmp := [ ] ;
37295: LD_ADDR_VAR 0 19
37299: PUSH
37300: EMPTY
37301: ST_TO_ADDR
// for j in f do
37302: LD_ADDR_VAR 0 9
37306: PUSH
37307: LD_VAR 0 12
37311: PUSH
37312: FOR_IN
37313: IFFALSE 37386
// if GetBType ( j ) = b_bunker then
37315: LD_VAR 0 9
37319: PPUSH
37320: CALL_OW 266
37324: PUSH
37325: LD_INT 32
37327: EQUAL
37328: IFFALSE 37355
// tmp := Insert ( tmp , 1 , j ) else
37330: LD_ADDR_VAR 0 19
37334: PUSH
37335: LD_VAR 0 19
37339: PPUSH
37340: LD_INT 1
37342: PPUSH
37343: LD_VAR 0 9
37347: PPUSH
37348: CALL_OW 2
37352: ST_TO_ADDR
37353: GO 37384
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37355: LD_ADDR_VAR 0 19
37359: PUSH
37360: LD_VAR 0 19
37364: PPUSH
37365: LD_VAR 0 19
37369: PUSH
37370: LD_INT 1
37372: PLUS
37373: PPUSH
37374: LD_VAR 0 9
37378: PPUSH
37379: CALL_OW 2
37383: ST_TO_ADDR
37384: GO 37312
37386: POP
37387: POP
// if tmp then
37388: LD_VAR 0 19
37392: IFFALSE 37404
// f := tmp ;
37394: LD_ADDR_VAR 0 12
37398: PUSH
37399: LD_VAR 0 19
37403: ST_TO_ADDR
// end ; x := personel [ i ] ;
37404: LD_ADDR_VAR 0 13
37408: PUSH
37409: LD_VAR 0 6
37413: PUSH
37414: LD_VAR 0 8
37418: ARRAY
37419: ST_TO_ADDR
// if x = - 1 then
37420: LD_VAR 0 13
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: EQUAL
37429: IFFALSE 37638
// begin for j in f do
37431: LD_ADDR_VAR 0 9
37435: PUSH
37436: LD_VAR 0 12
37440: PUSH
37441: FOR_IN
37442: IFFALSE 37634
// repeat InitHc ;
37444: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37448: LD_VAR 0 9
37452: PPUSH
37453: CALL_OW 266
37457: PUSH
37458: LD_INT 5
37460: EQUAL
37461: IFFALSE 37531
// begin if UnitsInside ( j ) < 3 then
37463: LD_VAR 0 9
37467: PPUSH
37468: CALL_OW 313
37472: PUSH
37473: LD_INT 3
37475: LESS
37476: IFFALSE 37512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37478: LD_INT 0
37480: PPUSH
37481: LD_INT 5
37483: PUSH
37484: LD_INT 8
37486: PUSH
37487: LD_INT 9
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: LD_VAR 0 17
37499: ARRAY
37500: PPUSH
37501: LD_VAR 0 4
37505: PPUSH
37506: CALL_OW 380
37510: GO 37529
// PrepareHuman ( false , i , skill ) ;
37512: LD_INT 0
37514: PPUSH
37515: LD_VAR 0 8
37519: PPUSH
37520: LD_VAR 0 4
37524: PPUSH
37525: CALL_OW 380
// end else
37529: GO 37548
// PrepareHuman ( false , i , skill ) ;
37531: LD_INT 0
37533: PPUSH
37534: LD_VAR 0 8
37538: PPUSH
37539: LD_VAR 0 4
37543: PPUSH
37544: CALL_OW 380
// un := CreateHuman ;
37548: LD_ADDR_VAR 0 14
37552: PUSH
37553: CALL_OW 44
37557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37558: LD_ADDR_VAR 0 7
37562: PUSH
37563: LD_VAR 0 7
37567: PPUSH
37568: LD_INT 1
37570: PPUSH
37571: LD_VAR 0 14
37575: PPUSH
37576: CALL_OW 2
37580: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37581: LD_VAR 0 14
37585: PPUSH
37586: LD_VAR 0 9
37590: PPUSH
37591: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37595: LD_VAR 0 9
37599: PPUSH
37600: CALL_OW 313
37604: PUSH
37605: LD_INT 6
37607: EQUAL
37608: PUSH
37609: LD_VAR 0 9
37613: PPUSH
37614: CALL_OW 266
37618: PUSH
37619: LD_INT 32
37621: PUSH
37622: LD_INT 31
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: IN
37629: OR
37630: IFFALSE 37444
37632: GO 37441
37634: POP
37635: POP
// end else
37636: GO 38018
// for j = 1 to x do
37638: LD_ADDR_VAR 0 9
37642: PUSH
37643: DOUBLE
37644: LD_INT 1
37646: DEC
37647: ST_TO_ADDR
37648: LD_VAR 0 13
37652: PUSH
37653: FOR_TO
37654: IFFALSE 38016
// begin InitHc ;
37656: CALL_OW 19
// if not f then
37660: LD_VAR 0 12
37664: NOT
37665: IFFALSE 37754
// begin PrepareHuman ( false , i , skill ) ;
37667: LD_INT 0
37669: PPUSH
37670: LD_VAR 0 8
37674: PPUSH
37675: LD_VAR 0 4
37679: PPUSH
37680: CALL_OW 380
// un := CreateHuman ;
37684: LD_ADDR_VAR 0 14
37688: PUSH
37689: CALL_OW 44
37693: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37694: LD_ADDR_VAR 0 7
37698: PUSH
37699: LD_VAR 0 7
37703: PPUSH
37704: LD_INT 1
37706: PPUSH
37707: LD_VAR 0 14
37711: PPUSH
37712: CALL_OW 2
37716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37717: LD_VAR 0 14
37721: PPUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: CALL_OW 250
37731: PPUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 251
37741: PPUSH
37742: LD_INT 10
37744: PPUSH
37745: LD_INT 0
37747: PPUSH
37748: CALL_OW 50
// continue ;
37752: GO 37653
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37754: LD_VAR 0 12
37758: PUSH
37759: LD_INT 1
37761: ARRAY
37762: PPUSH
37763: CALL_OW 313
37767: PUSH
37768: LD_VAR 0 12
37772: PUSH
37773: LD_INT 1
37775: ARRAY
37776: PPUSH
37777: CALL_OW 266
37781: PUSH
37782: LD_INT 32
37784: PUSH
37785: LD_INT 31
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: IN
37792: AND
37793: PUSH
37794: LD_VAR 0 12
37798: PUSH
37799: LD_INT 1
37801: ARRAY
37802: PPUSH
37803: CALL_OW 313
37807: PUSH
37808: LD_INT 6
37810: EQUAL
37811: OR
37812: IFFALSE 37832
// f := Delete ( f , 1 ) ;
37814: LD_ADDR_VAR 0 12
37818: PUSH
37819: LD_VAR 0 12
37823: PPUSH
37824: LD_INT 1
37826: PPUSH
37827: CALL_OW 3
37831: ST_TO_ADDR
// if not f then
37832: LD_VAR 0 12
37836: NOT
37837: IFFALSE 37855
// begin x := x + 2 ;
37839: LD_ADDR_VAR 0 13
37843: PUSH
37844: LD_VAR 0 13
37848: PUSH
37849: LD_INT 2
37851: PLUS
37852: ST_TO_ADDR
// continue ;
37853: GO 37653
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37855: LD_VAR 0 12
37859: PUSH
37860: LD_INT 1
37862: ARRAY
37863: PPUSH
37864: CALL_OW 266
37868: PUSH
37869: LD_INT 5
37871: EQUAL
37872: IFFALSE 37946
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37874: LD_VAR 0 12
37878: PUSH
37879: LD_INT 1
37881: ARRAY
37882: PPUSH
37883: CALL_OW 313
37887: PUSH
37888: LD_INT 3
37890: LESS
37891: IFFALSE 37927
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37893: LD_INT 0
37895: PPUSH
37896: LD_INT 5
37898: PUSH
37899: LD_INT 8
37901: PUSH
37902: LD_INT 9
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: LD_VAR 0 17
37914: ARRAY
37915: PPUSH
37916: LD_VAR 0 4
37920: PPUSH
37921: CALL_OW 380
37925: GO 37944
// PrepareHuman ( false , i , skill ) ;
37927: LD_INT 0
37929: PPUSH
37930: LD_VAR 0 8
37934: PPUSH
37935: LD_VAR 0 4
37939: PPUSH
37940: CALL_OW 380
// end else
37944: GO 37963
// PrepareHuman ( false , i , skill ) ;
37946: LD_INT 0
37948: PPUSH
37949: LD_VAR 0 8
37953: PPUSH
37954: LD_VAR 0 4
37958: PPUSH
37959: CALL_OW 380
// un := CreateHuman ;
37963: LD_ADDR_VAR 0 14
37967: PUSH
37968: CALL_OW 44
37972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37973: LD_ADDR_VAR 0 7
37977: PUSH
37978: LD_VAR 0 7
37982: PPUSH
37983: LD_INT 1
37985: PPUSH
37986: LD_VAR 0 14
37990: PPUSH
37991: CALL_OW 2
37995: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37996: LD_VAR 0 14
38000: PPUSH
38001: LD_VAR 0 12
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PPUSH
38010: CALL_OW 52
// end ;
38014: GO 37653
38016: POP
38017: POP
// end ;
38018: GO 36955
38020: POP
38021: POP
// result := result ^ buildings ;
38022: LD_ADDR_VAR 0 7
38026: PUSH
38027: LD_VAR 0 7
38031: PUSH
38032: LD_VAR 0 18
38036: ADD
38037: ST_TO_ADDR
// end else
38038: GO 38181
// begin for i = 1 to personel do
38040: LD_ADDR_VAR 0 8
38044: PUSH
38045: DOUBLE
38046: LD_INT 1
38048: DEC
38049: ST_TO_ADDR
38050: LD_VAR 0 6
38054: PUSH
38055: FOR_TO
38056: IFFALSE 38179
// begin if i > 4 then
38058: LD_VAR 0 8
38062: PUSH
38063: LD_INT 4
38065: GREATER
38066: IFFALSE 38070
// break ;
38068: GO 38179
// x := personel [ i ] ;
38070: LD_ADDR_VAR 0 13
38074: PUSH
38075: LD_VAR 0 6
38079: PUSH
38080: LD_VAR 0 8
38084: ARRAY
38085: ST_TO_ADDR
// if x = - 1 then
38086: LD_VAR 0 13
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: EQUAL
38095: IFFALSE 38099
// continue ;
38097: GO 38055
// PrepareHuman ( false , i , skill ) ;
38099: LD_INT 0
38101: PPUSH
38102: LD_VAR 0 8
38106: PPUSH
38107: LD_VAR 0 4
38111: PPUSH
38112: CALL_OW 380
// un := CreateHuman ;
38116: LD_ADDR_VAR 0 14
38120: PUSH
38121: CALL_OW 44
38125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38126: LD_VAR 0 14
38130: PPUSH
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 250
38140: PPUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 251
38150: PPUSH
38151: LD_INT 10
38153: PPUSH
38154: LD_INT 0
38156: PPUSH
38157: CALL_OW 50
// result := result ^ un ;
38161: LD_ADDR_VAR 0 7
38165: PUSH
38166: LD_VAR 0 7
38170: PUSH
38171: LD_VAR 0 14
38175: ADD
38176: ST_TO_ADDR
// end ;
38177: GO 38055
38179: POP
38180: POP
// end ; end ;
38181: LD_VAR 0 7
38185: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38186: LD_INT 0
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
// result := false ;
38204: LD_ADDR_VAR 0 3
38208: PUSH
38209: LD_INT 0
38211: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38212: LD_VAR 0 1
38216: NOT
38217: PUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL_OW 266
38227: PUSH
38228: LD_INT 32
38230: PUSH
38231: LD_INT 33
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: IN
38238: NOT
38239: OR
38240: IFFALSE 38244
// exit ;
38242: GO 39380
// nat := GetNation ( tower ) ;
38244: LD_ADDR_VAR 0 12
38248: PUSH
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 248
38258: ST_TO_ADDR
// side := GetSide ( tower ) ;
38259: LD_ADDR_VAR 0 16
38263: PUSH
38264: LD_VAR 0 1
38268: PPUSH
38269: CALL_OW 255
38273: ST_TO_ADDR
// x := GetX ( tower ) ;
38274: LD_ADDR_VAR 0 10
38278: PUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 250
38288: ST_TO_ADDR
// y := GetY ( tower ) ;
38289: LD_ADDR_VAR 0 11
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 251
38303: ST_TO_ADDR
// if not x or not y then
38304: LD_VAR 0 10
38308: NOT
38309: PUSH
38310: LD_VAR 0 11
38314: NOT
38315: OR
38316: IFFALSE 38320
// exit ;
38318: GO 39380
// weapon := 0 ;
38320: LD_ADDR_VAR 0 18
38324: PUSH
38325: LD_INT 0
38327: ST_TO_ADDR
// fac_list := [ ] ;
38328: LD_ADDR_VAR 0 17
38332: PUSH
38333: EMPTY
38334: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38335: LD_ADDR_VAR 0 6
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 274
38349: PPUSH
38350: LD_VAR 0 2
38354: PPUSH
38355: CALL 35958 0 2
38359: PPUSH
38360: LD_INT 30
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PPUSH
38370: CALL_OW 72
38374: ST_TO_ADDR
// if not factories then
38375: LD_VAR 0 6
38379: NOT
38380: IFFALSE 38384
// exit ;
38382: GO 39380
// for i in factories do
38384: LD_ADDR_VAR 0 8
38388: PUSH
38389: LD_VAR 0 6
38393: PUSH
38394: FOR_IN
38395: IFFALSE 38420
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38397: LD_ADDR_VAR 0 17
38401: PUSH
38402: LD_VAR 0 17
38406: PUSH
38407: LD_VAR 0 8
38411: PPUSH
38412: CALL_OW 478
38416: UNION
38417: ST_TO_ADDR
38418: GO 38394
38420: POP
38421: POP
// if not fac_list then
38422: LD_VAR 0 17
38426: NOT
38427: IFFALSE 38431
// exit ;
38429: GO 39380
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_INT 4
38438: PUSH
38439: LD_INT 5
38441: PUSH
38442: LD_INT 9
38444: PUSH
38445: LD_INT 10
38447: PUSH
38448: LD_INT 6
38450: PUSH
38451: LD_INT 7
38453: PUSH
38454: LD_INT 11
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 27
38468: PUSH
38469: LD_INT 28
38471: PUSH
38472: LD_INT 26
38474: PUSH
38475: LD_INT 30
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 43
38486: PUSH
38487: LD_INT 44
38489: PUSH
38490: LD_INT 46
38492: PUSH
38493: LD_INT 45
38495: PUSH
38496: LD_INT 47
38498: PUSH
38499: LD_INT 49
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: PUSH
38515: LD_VAR 0 12
38519: ARRAY
38520: ST_TO_ADDR
// for i in list do
38521: LD_ADDR_VAR 0 8
38525: PUSH
38526: LD_VAR 0 5
38530: PUSH
38531: FOR_IN
38532: IFFALSE 38565
// if not i in fac_list then
38534: LD_VAR 0 8
38538: PUSH
38539: LD_VAR 0 17
38543: IN
38544: NOT
38545: IFFALSE 38563
// list := list diff i ;
38547: LD_ADDR_VAR 0 5
38551: PUSH
38552: LD_VAR 0 5
38556: PUSH
38557: LD_VAR 0 8
38561: DIFF
38562: ST_TO_ADDR
38563: GO 38531
38565: POP
38566: POP
// if not list then
38567: LD_VAR 0 5
38571: NOT
38572: IFFALSE 38576
// exit ;
38574: GO 39380
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38576: LD_VAR 0 12
38580: PUSH
38581: LD_INT 3
38583: EQUAL
38584: PUSH
38585: LD_INT 49
38587: PUSH
38588: LD_VAR 0 5
38592: IN
38593: AND
38594: PUSH
38595: LD_INT 31
38597: PPUSH
38598: LD_VAR 0 16
38602: PPUSH
38603: CALL_OW 321
38607: PUSH
38608: LD_INT 2
38610: EQUAL
38611: AND
38612: IFFALSE 38672
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38614: LD_INT 22
38616: PUSH
38617: LD_VAR 0 16
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 35
38628: PUSH
38629: LD_INT 49
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 91
38638: PUSH
38639: LD_VAR 0 1
38643: PUSH
38644: LD_INT 10
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: PPUSH
38657: CALL_OW 69
38661: NOT
38662: IFFALSE 38672
// weapon := ru_time_lapser ;
38664: LD_ADDR_VAR 0 18
38668: PUSH
38669: LD_INT 49
38671: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38672: LD_VAR 0 12
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: IN
38687: PUSH
38688: LD_INT 11
38690: PUSH
38691: LD_VAR 0 5
38695: IN
38696: PUSH
38697: LD_INT 30
38699: PUSH
38700: LD_VAR 0 5
38704: IN
38705: OR
38706: AND
38707: PUSH
38708: LD_INT 6
38710: PPUSH
38711: LD_VAR 0 16
38715: PPUSH
38716: CALL_OW 321
38720: PUSH
38721: LD_INT 2
38723: EQUAL
38724: AND
38725: IFFALSE 38890
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38727: LD_INT 22
38729: PUSH
38730: LD_VAR 0 16
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 35
38744: PUSH
38745: LD_INT 11
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 35
38754: PUSH
38755: LD_INT 30
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 91
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 18
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: PPUSH
38788: CALL_OW 69
38792: NOT
38793: PUSH
38794: LD_INT 22
38796: PUSH
38797: LD_VAR 0 16
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 30
38811: PUSH
38812: LD_INT 32
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 30
38821: PUSH
38822: LD_INT 33
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 91
38836: PUSH
38837: LD_VAR 0 1
38841: PUSH
38842: LD_INT 12
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PUSH
38855: EMPTY
38856: LIST
38857: PPUSH
38858: CALL_OW 69
38862: PUSH
38863: LD_INT 2
38865: GREATER
38866: AND
38867: IFFALSE 38890
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38869: LD_ADDR_VAR 0 18
38873: PUSH
38874: LD_INT 11
38876: PUSH
38877: LD_INT 30
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_VAR 0 12
38888: ARRAY
38889: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38890: LD_VAR 0 18
38894: NOT
38895: PUSH
38896: LD_INT 40
38898: PPUSH
38899: LD_VAR 0 16
38903: PPUSH
38904: CALL_OW 321
38908: PUSH
38909: LD_INT 2
38911: EQUAL
38912: AND
38913: PUSH
38914: LD_INT 7
38916: PUSH
38917: LD_VAR 0 5
38921: IN
38922: PUSH
38923: LD_INT 28
38925: PUSH
38926: LD_VAR 0 5
38930: IN
38931: OR
38932: PUSH
38933: LD_INT 45
38935: PUSH
38936: LD_VAR 0 5
38940: IN
38941: OR
38942: AND
38943: IFFALSE 39197
// begin hex := GetHexInfo ( x , y ) ;
38945: LD_ADDR_VAR 0 4
38949: PUSH
38950: LD_VAR 0 10
38954: PPUSH
38955: LD_VAR 0 11
38959: PPUSH
38960: CALL_OW 546
38964: ST_TO_ADDR
// if hex [ 1 ] then
38965: LD_VAR 0 4
38969: PUSH
38970: LD_INT 1
38972: ARRAY
38973: IFFALSE 38977
// exit ;
38975: GO 39380
// height := hex [ 2 ] ;
38977: LD_ADDR_VAR 0 15
38981: PUSH
38982: LD_VAR 0 4
38986: PUSH
38987: LD_INT 2
38989: ARRAY
38990: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38991: LD_ADDR_VAR 0 14
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 3
39004: PUSH
39005: LD_INT 5
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// for i in tmp do
39014: LD_ADDR_VAR 0 8
39018: PUSH
39019: LD_VAR 0 14
39023: PUSH
39024: FOR_IN
39025: IFFALSE 39195
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39027: LD_ADDR_VAR 0 9
39031: PUSH
39032: LD_VAR 0 10
39036: PPUSH
39037: LD_VAR 0 8
39041: PPUSH
39042: LD_INT 5
39044: PPUSH
39045: CALL_OW 272
39049: PUSH
39050: LD_VAR 0 11
39054: PPUSH
39055: LD_VAR 0 8
39059: PPUSH
39060: LD_INT 5
39062: PPUSH
39063: CALL_OW 273
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39072: LD_VAR 0 9
39076: PUSH
39077: LD_INT 1
39079: ARRAY
39080: PPUSH
39081: LD_VAR 0 9
39085: PUSH
39086: LD_INT 2
39088: ARRAY
39089: PPUSH
39090: CALL_OW 488
39094: IFFALSE 39193
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39096: LD_ADDR_VAR 0 4
39100: PUSH
39101: LD_VAR 0 9
39105: PUSH
39106: LD_INT 1
39108: ARRAY
39109: PPUSH
39110: LD_VAR 0 9
39114: PUSH
39115: LD_INT 2
39117: ARRAY
39118: PPUSH
39119: CALL_OW 546
39123: ST_TO_ADDR
// if hex [ 1 ] then
39124: LD_VAR 0 4
39128: PUSH
39129: LD_INT 1
39131: ARRAY
39132: IFFALSE 39136
// continue ;
39134: GO 39024
// h := hex [ 2 ] ;
39136: LD_ADDR_VAR 0 13
39140: PUSH
39141: LD_VAR 0 4
39145: PUSH
39146: LD_INT 2
39148: ARRAY
39149: ST_TO_ADDR
// if h + 7 < height then
39150: LD_VAR 0 13
39154: PUSH
39155: LD_INT 7
39157: PLUS
39158: PUSH
39159: LD_VAR 0 15
39163: LESS
39164: IFFALSE 39193
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39166: LD_ADDR_VAR 0 18
39170: PUSH
39171: LD_INT 7
39173: PUSH
39174: LD_INT 28
39176: PUSH
39177: LD_INT 45
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: LD_VAR 0 12
39189: ARRAY
39190: ST_TO_ADDR
// break ;
39191: GO 39195
// end ; end ; end ;
39193: GO 39024
39195: POP
39196: POP
// end ; if not weapon then
39197: LD_VAR 0 18
39201: NOT
39202: IFFALSE 39262
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39204: LD_ADDR_VAR 0 5
39208: PUSH
39209: LD_VAR 0 5
39213: PUSH
39214: LD_INT 11
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: LD_INT 49
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: DIFF
39228: ST_TO_ADDR
// if not list then
39229: LD_VAR 0 5
39233: NOT
39234: IFFALSE 39238
// exit ;
39236: GO 39380
// weapon := list [ rand ( 1 , list ) ] ;
39238: LD_ADDR_VAR 0 18
39242: PUSH
39243: LD_VAR 0 5
39247: PUSH
39248: LD_INT 1
39250: PPUSH
39251: LD_VAR 0 5
39255: PPUSH
39256: CALL_OW 12
39260: ARRAY
39261: ST_TO_ADDR
// end ; if weapon then
39262: LD_VAR 0 18
39266: IFFALSE 39380
// begin tmp := CostOfWeapon ( weapon ) ;
39268: LD_ADDR_VAR 0 14
39272: PUSH
39273: LD_VAR 0 18
39277: PPUSH
39278: CALL_OW 451
39282: ST_TO_ADDR
// j := GetBase ( tower ) ;
39283: LD_ADDR_VAR 0 9
39287: PUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 274
39297: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39298: LD_VAR 0 9
39302: PPUSH
39303: LD_INT 1
39305: PPUSH
39306: CALL_OW 275
39310: PUSH
39311: LD_VAR 0 14
39315: PUSH
39316: LD_INT 1
39318: ARRAY
39319: GREATEREQUAL
39320: PUSH
39321: LD_VAR 0 9
39325: PPUSH
39326: LD_INT 2
39328: PPUSH
39329: CALL_OW 275
39333: PUSH
39334: LD_VAR 0 14
39338: PUSH
39339: LD_INT 2
39341: ARRAY
39342: GREATEREQUAL
39343: AND
39344: PUSH
39345: LD_VAR 0 9
39349: PPUSH
39350: LD_INT 3
39352: PPUSH
39353: CALL_OW 275
39357: PUSH
39358: LD_VAR 0 14
39362: PUSH
39363: LD_INT 3
39365: ARRAY
39366: GREATEREQUAL
39367: AND
39368: IFFALSE 39380
// result := weapon ;
39370: LD_ADDR_VAR 0 3
39374: PUSH
39375: LD_VAR 0 18
39379: ST_TO_ADDR
// end ; end ;
39380: LD_VAR 0 3
39384: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39385: LD_INT 0
39387: PPUSH
39388: PPUSH
// result := true ;
39389: LD_ADDR_VAR 0 3
39393: PUSH
39394: LD_INT 1
39396: ST_TO_ADDR
// if array1 = array2 then
39397: LD_VAR 0 1
39401: PUSH
39402: LD_VAR 0 2
39406: EQUAL
39407: IFFALSE 39467
// begin for i = 1 to array1 do
39409: LD_ADDR_VAR 0 4
39413: PUSH
39414: DOUBLE
39415: LD_INT 1
39417: DEC
39418: ST_TO_ADDR
39419: LD_VAR 0 1
39423: PUSH
39424: FOR_TO
39425: IFFALSE 39463
// if array1 [ i ] <> array2 [ i ] then
39427: LD_VAR 0 1
39431: PUSH
39432: LD_VAR 0 4
39436: ARRAY
39437: PUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_VAR 0 4
39447: ARRAY
39448: NONEQUAL
39449: IFFALSE 39461
// begin result := false ;
39451: LD_ADDR_VAR 0 3
39455: PUSH
39456: LD_INT 0
39458: ST_TO_ADDR
// break ;
39459: GO 39463
// end ;
39461: GO 39424
39463: POP
39464: POP
// end else
39465: GO 39475
// result := false ;
39467: LD_ADDR_VAR 0 3
39471: PUSH
39472: LD_INT 0
39474: ST_TO_ADDR
// end ;
39475: LD_VAR 0 3
39479: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39480: LD_INT 0
39482: PPUSH
39483: PPUSH
39484: PPUSH
// pom := GetBase ( fac ) ;
39485: LD_ADDR_VAR 0 5
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 274
39499: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39500: LD_ADDR_VAR 0 4
39504: PUSH
39505: LD_VAR 0 2
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: PPUSH
39514: LD_VAR 0 2
39518: PUSH
39519: LD_INT 2
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 2
39527: PUSH
39528: LD_INT 3
39530: ARRAY
39531: PPUSH
39532: LD_VAR 0 2
39536: PUSH
39537: LD_INT 4
39539: ARRAY
39540: PPUSH
39541: CALL_OW 449
39545: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39546: LD_ADDR_VAR 0 3
39550: PUSH
39551: LD_VAR 0 5
39555: PPUSH
39556: LD_INT 1
39558: PPUSH
39559: CALL_OW 275
39563: PUSH
39564: LD_VAR 0 4
39568: PUSH
39569: LD_INT 1
39571: ARRAY
39572: GREATEREQUAL
39573: PUSH
39574: LD_VAR 0 5
39578: PPUSH
39579: LD_INT 2
39581: PPUSH
39582: CALL_OW 275
39586: PUSH
39587: LD_VAR 0 4
39591: PUSH
39592: LD_INT 2
39594: ARRAY
39595: GREATEREQUAL
39596: AND
39597: PUSH
39598: LD_VAR 0 5
39602: PPUSH
39603: LD_INT 3
39605: PPUSH
39606: CALL_OW 275
39610: PUSH
39611: LD_VAR 0 4
39615: PUSH
39616: LD_INT 3
39618: ARRAY
39619: GREATEREQUAL
39620: AND
39621: ST_TO_ADDR
// end ;
39622: LD_VAR 0 3
39626: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39627: LD_INT 0
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
// pom := GetBase ( building ) ;
39633: LD_ADDR_VAR 0 3
39637: PUSH
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 274
39647: ST_TO_ADDR
// if not pom then
39648: LD_VAR 0 3
39652: NOT
39653: IFFALSE 39657
// exit ;
39655: GO 39827
// btype := GetBType ( building ) ;
39657: LD_ADDR_VAR 0 5
39661: PUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 266
39671: ST_TO_ADDR
// if btype = b_armoury then
39672: LD_VAR 0 5
39676: PUSH
39677: LD_INT 4
39679: EQUAL
39680: IFFALSE 39690
// btype := b_barracks ;
39682: LD_ADDR_VAR 0 5
39686: PUSH
39687: LD_INT 5
39689: ST_TO_ADDR
// if btype = b_depot then
39690: LD_VAR 0 5
39694: PUSH
39695: LD_INT 0
39697: EQUAL
39698: IFFALSE 39708
// btype := b_warehouse ;
39700: LD_ADDR_VAR 0 5
39704: PUSH
39705: LD_INT 1
39707: ST_TO_ADDR
// if btype = b_workshop then
39708: LD_VAR 0 5
39712: PUSH
39713: LD_INT 2
39715: EQUAL
39716: IFFALSE 39726
// btype := b_factory ;
39718: LD_ADDR_VAR 0 5
39722: PUSH
39723: LD_INT 3
39725: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39726: LD_ADDR_VAR 0 4
39730: PUSH
39731: LD_VAR 0 5
39735: PPUSH
39736: LD_VAR 0 1
39740: PPUSH
39741: CALL_OW 248
39745: PPUSH
39746: CALL_OW 450
39750: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39751: LD_ADDR_VAR 0 2
39755: PUSH
39756: LD_VAR 0 3
39760: PPUSH
39761: LD_INT 1
39763: PPUSH
39764: CALL_OW 275
39768: PUSH
39769: LD_VAR 0 4
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: GREATEREQUAL
39778: PUSH
39779: LD_VAR 0 3
39783: PPUSH
39784: LD_INT 2
39786: PPUSH
39787: CALL_OW 275
39791: PUSH
39792: LD_VAR 0 4
39796: PUSH
39797: LD_INT 2
39799: ARRAY
39800: GREATEREQUAL
39801: AND
39802: PUSH
39803: LD_VAR 0 3
39807: PPUSH
39808: LD_INT 3
39810: PPUSH
39811: CALL_OW 275
39815: PUSH
39816: LD_VAR 0 4
39820: PUSH
39821: LD_INT 3
39823: ARRAY
39824: GREATEREQUAL
39825: AND
39826: ST_TO_ADDR
// end ;
39827: LD_VAR 0 2
39831: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39832: LD_INT 0
39834: PPUSH
39835: PPUSH
39836: PPUSH
// pom := GetBase ( building ) ;
39837: LD_ADDR_VAR 0 4
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 274
39851: ST_TO_ADDR
// if not pom then
39852: LD_VAR 0 4
39856: NOT
39857: IFFALSE 39861
// exit ;
39859: GO 39962
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39861: LD_ADDR_VAR 0 5
39865: PUSH
39866: LD_VAR 0 2
39870: PPUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 248
39880: PPUSH
39881: CALL_OW 450
39885: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39886: LD_ADDR_VAR 0 3
39890: PUSH
39891: LD_VAR 0 4
39895: PPUSH
39896: LD_INT 1
39898: PPUSH
39899: CALL_OW 275
39903: PUSH
39904: LD_VAR 0 5
39908: PUSH
39909: LD_INT 1
39911: ARRAY
39912: GREATEREQUAL
39913: PUSH
39914: LD_VAR 0 4
39918: PPUSH
39919: LD_INT 2
39921: PPUSH
39922: CALL_OW 275
39926: PUSH
39927: LD_VAR 0 5
39931: PUSH
39932: LD_INT 2
39934: ARRAY
39935: GREATEREQUAL
39936: AND
39937: PUSH
39938: LD_VAR 0 4
39942: PPUSH
39943: LD_INT 3
39945: PPUSH
39946: CALL_OW 275
39950: PUSH
39951: LD_VAR 0 5
39955: PUSH
39956: LD_INT 3
39958: ARRAY
39959: GREATEREQUAL
39960: AND
39961: ST_TO_ADDR
// end ;
39962: LD_VAR 0 3
39966: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39967: LD_INT 0
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
// result := false ;
39979: LD_ADDR_VAR 0 6
39983: PUSH
39984: LD_INT 0
39986: ST_TO_ADDR
// if not base or not btype or not x or not y then
39987: LD_VAR 0 1
39991: NOT
39992: PUSH
39993: LD_VAR 0 2
39997: NOT
39998: OR
39999: PUSH
40000: LD_VAR 0 3
40004: NOT
40005: OR
40006: PUSH
40007: LD_VAR 0 4
40011: NOT
40012: OR
40013: IFFALSE 40017
// exit ;
40015: GO 40626
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40017: LD_ADDR_VAR 0 12
40021: PUSH
40022: LD_VAR 0 2
40026: PPUSH
40027: LD_VAR 0 3
40031: PPUSH
40032: LD_VAR 0 4
40036: PPUSH
40037: LD_VAR 0 5
40041: PPUSH
40042: LD_VAR 0 1
40046: PUSH
40047: LD_INT 1
40049: ARRAY
40050: PPUSH
40051: CALL_OW 248
40055: PPUSH
40056: LD_INT 0
40058: PPUSH
40059: CALL 41463 0 6
40063: ST_TO_ADDR
// if not hexes then
40064: LD_VAR 0 12
40068: NOT
40069: IFFALSE 40073
// exit ;
40071: GO 40626
// for i = 1 to hexes do
40073: LD_ADDR_VAR 0 7
40077: PUSH
40078: DOUBLE
40079: LD_INT 1
40081: DEC
40082: ST_TO_ADDR
40083: LD_VAR 0 12
40087: PUSH
40088: FOR_TO
40089: IFFALSE 40624
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40091: LD_ADDR_VAR 0 11
40095: PUSH
40096: LD_VAR 0 12
40100: PUSH
40101: LD_VAR 0 7
40105: ARRAY
40106: PUSH
40107: LD_INT 1
40109: ARRAY
40110: PPUSH
40111: LD_VAR 0 12
40115: PUSH
40116: LD_VAR 0 7
40120: ARRAY
40121: PUSH
40122: LD_INT 2
40124: ARRAY
40125: PPUSH
40126: CALL_OW 428
40130: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40131: LD_VAR 0 12
40135: PUSH
40136: LD_VAR 0 7
40140: ARRAY
40141: PUSH
40142: LD_INT 1
40144: ARRAY
40145: PPUSH
40146: LD_VAR 0 12
40150: PUSH
40151: LD_VAR 0 7
40155: ARRAY
40156: PUSH
40157: LD_INT 2
40159: ARRAY
40160: PPUSH
40161: CALL_OW 351
40165: PUSH
40166: LD_VAR 0 12
40170: PUSH
40171: LD_VAR 0 7
40175: ARRAY
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: LD_VAR 0 12
40185: PUSH
40186: LD_VAR 0 7
40190: ARRAY
40191: PUSH
40192: LD_INT 2
40194: ARRAY
40195: PPUSH
40196: CALL_OW 488
40200: NOT
40201: OR
40202: PUSH
40203: LD_VAR 0 11
40207: PPUSH
40208: CALL_OW 247
40212: PUSH
40213: LD_INT 3
40215: EQUAL
40216: OR
40217: IFFALSE 40223
// exit ;
40219: POP
40220: POP
40221: GO 40626
// if not tmp or not tmp in base then
40223: LD_VAR 0 11
40227: NOT
40228: PUSH
40229: LD_VAR 0 11
40233: PUSH
40234: LD_VAR 0 1
40238: IN
40239: NOT
40240: OR
40241: IFFALSE 40245
// continue ;
40243: GO 40088
// result := true ;
40245: LD_ADDR_VAR 0 6
40249: PUSH
40250: LD_INT 1
40252: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40253: LD_ADDR_VAR 0 15
40257: PUSH
40258: LD_VAR 0 1
40262: PPUSH
40263: LD_INT 22
40265: PUSH
40266: LD_VAR 0 11
40270: PPUSH
40271: CALL_OW 255
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: PUSH
40283: LD_INT 30
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 30
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PPUSH
40312: CALL_OW 72
40316: ST_TO_ADDR
// if dep then
40317: LD_VAR 0 15
40321: IFFALSE 40457
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40323: LD_ADDR_VAR 0 14
40327: PUSH
40328: LD_VAR 0 15
40332: PUSH
40333: LD_INT 1
40335: ARRAY
40336: PPUSH
40337: CALL_OW 250
40341: PPUSH
40342: LD_VAR 0 15
40346: PUSH
40347: LD_INT 1
40349: ARRAY
40350: PPUSH
40351: CALL_OW 254
40355: PPUSH
40356: LD_INT 5
40358: PPUSH
40359: CALL_OW 272
40363: PUSH
40364: LD_VAR 0 15
40368: PUSH
40369: LD_INT 1
40371: ARRAY
40372: PPUSH
40373: CALL_OW 251
40377: PPUSH
40378: LD_VAR 0 15
40382: PUSH
40383: LD_INT 1
40385: ARRAY
40386: PPUSH
40387: CALL_OW 254
40391: PPUSH
40392: LD_INT 5
40394: PPUSH
40395: CALL_OW 273
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40404: LD_VAR 0 14
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: LD_VAR 0 14
40417: PUSH
40418: LD_INT 2
40420: ARRAY
40421: PPUSH
40422: CALL_OW 488
40426: IFFALSE 40457
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40428: LD_VAR 0 11
40432: PPUSH
40433: LD_VAR 0 14
40437: PUSH
40438: LD_INT 1
40440: ARRAY
40441: PPUSH
40442: LD_VAR 0 14
40446: PUSH
40447: LD_INT 2
40449: ARRAY
40450: PPUSH
40451: CALL_OW 111
// continue ;
40455: GO 40088
// end ; end ; r := GetDir ( tmp ) ;
40457: LD_ADDR_VAR 0 13
40461: PUSH
40462: LD_VAR 0 11
40466: PPUSH
40467: CALL_OW 254
40471: ST_TO_ADDR
// if r = 5 then
40472: LD_VAR 0 13
40476: PUSH
40477: LD_INT 5
40479: EQUAL
40480: IFFALSE 40490
// r := 0 ;
40482: LD_ADDR_VAR 0 13
40486: PUSH
40487: LD_INT 0
40489: ST_TO_ADDR
// for j = r to 5 do
40490: LD_ADDR_VAR 0 8
40494: PUSH
40495: DOUBLE
40496: LD_VAR 0 13
40500: DEC
40501: ST_TO_ADDR
40502: LD_INT 5
40504: PUSH
40505: FOR_TO
40506: IFFALSE 40620
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40508: LD_ADDR_VAR 0 9
40512: PUSH
40513: LD_VAR 0 11
40517: PPUSH
40518: CALL_OW 250
40522: PPUSH
40523: LD_VAR 0 8
40527: PPUSH
40528: LD_INT 2
40530: PPUSH
40531: CALL_OW 272
40535: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40536: LD_ADDR_VAR 0 10
40540: PUSH
40541: LD_VAR 0 11
40545: PPUSH
40546: CALL_OW 251
40550: PPUSH
40551: LD_VAR 0 8
40555: PPUSH
40556: LD_INT 2
40558: PPUSH
40559: CALL_OW 273
40563: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40564: LD_VAR 0 9
40568: PPUSH
40569: LD_VAR 0 10
40573: PPUSH
40574: CALL_OW 488
40578: PUSH
40579: LD_VAR 0 9
40583: PPUSH
40584: LD_VAR 0 10
40588: PPUSH
40589: CALL_OW 428
40593: NOT
40594: AND
40595: IFFALSE 40618
// begin ComMoveXY ( tmp , _x , _y ) ;
40597: LD_VAR 0 11
40601: PPUSH
40602: LD_VAR 0 9
40606: PPUSH
40607: LD_VAR 0 10
40611: PPUSH
40612: CALL_OW 111
// break ;
40616: GO 40620
// end ; end ;
40618: GO 40505
40620: POP
40621: POP
// end ;
40622: GO 40088
40624: POP
40625: POP
// end ;
40626: LD_VAR 0 6
40630: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40631: LD_INT 0
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
// result := false ;
40643: LD_ADDR_VAR 0 6
40647: PUSH
40648: LD_INT 0
40650: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40651: LD_VAR 0 1
40655: NOT
40656: PUSH
40657: LD_VAR 0 1
40661: PPUSH
40662: CALL_OW 266
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: IN
40677: NOT
40678: OR
40679: PUSH
40680: LD_VAR 0 2
40684: NOT
40685: OR
40686: PUSH
40687: LD_VAR 0 5
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: LD_INT 4
40706: PUSH
40707: LD_INT 5
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: IN
40718: NOT
40719: OR
40720: PUSH
40721: LD_VAR 0 3
40725: PPUSH
40726: LD_VAR 0 4
40730: PPUSH
40731: CALL_OW 488
40735: NOT
40736: OR
40737: IFFALSE 40741
// exit ;
40739: GO 41458
// pom := GetBase ( depot ) ;
40741: LD_ADDR_VAR 0 10
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 274
40755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40756: LD_ADDR_VAR 0 11
40760: PUSH
40761: LD_VAR 0 2
40765: PPUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: CALL_OW 248
40775: PPUSH
40776: CALL_OW 450
40780: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40781: LD_VAR 0 10
40785: PPUSH
40786: LD_INT 1
40788: PPUSH
40789: CALL_OW 275
40793: PUSH
40794: LD_VAR 0 11
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: GREATEREQUAL
40803: PUSH
40804: LD_VAR 0 10
40808: PPUSH
40809: LD_INT 2
40811: PPUSH
40812: CALL_OW 275
40816: PUSH
40817: LD_VAR 0 11
40821: PUSH
40822: LD_INT 2
40824: ARRAY
40825: GREATEREQUAL
40826: AND
40827: PUSH
40828: LD_VAR 0 10
40832: PPUSH
40833: LD_INT 3
40835: PPUSH
40836: CALL_OW 275
40840: PUSH
40841: LD_VAR 0 11
40845: PUSH
40846: LD_INT 3
40848: ARRAY
40849: GREATEREQUAL
40850: AND
40851: NOT
40852: IFFALSE 40856
// exit ;
40854: GO 41458
// if GetBType ( depot ) = b_depot then
40856: LD_VAR 0 1
40860: PPUSH
40861: CALL_OW 266
40865: PUSH
40866: LD_INT 0
40868: EQUAL
40869: IFFALSE 40881
// dist := 28 else
40871: LD_ADDR_VAR 0 14
40875: PUSH
40876: LD_INT 28
40878: ST_TO_ADDR
40879: GO 40889
// dist := 36 ;
40881: LD_ADDR_VAR 0 14
40885: PUSH
40886: LD_INT 36
40888: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40889: LD_VAR 0 1
40893: PPUSH
40894: LD_VAR 0 3
40898: PPUSH
40899: LD_VAR 0 4
40903: PPUSH
40904: CALL_OW 297
40908: PUSH
40909: LD_VAR 0 14
40913: GREATER
40914: IFFALSE 40918
// exit ;
40916: GO 41458
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40918: LD_ADDR_VAR 0 12
40922: PUSH
40923: LD_VAR 0 2
40927: PPUSH
40928: LD_VAR 0 3
40932: PPUSH
40933: LD_VAR 0 4
40937: PPUSH
40938: LD_VAR 0 5
40942: PPUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 248
40952: PPUSH
40953: LD_INT 0
40955: PPUSH
40956: CALL 41463 0 6
40960: ST_TO_ADDR
// if not hexes then
40961: LD_VAR 0 12
40965: NOT
40966: IFFALSE 40970
// exit ;
40968: GO 41458
// hex := GetHexInfo ( x , y ) ;
40970: LD_ADDR_VAR 0 15
40974: PUSH
40975: LD_VAR 0 3
40979: PPUSH
40980: LD_VAR 0 4
40984: PPUSH
40985: CALL_OW 546
40989: ST_TO_ADDR
// if hex [ 1 ] then
40990: LD_VAR 0 15
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: IFFALSE 41002
// exit ;
41000: GO 41458
// height := hex [ 2 ] ;
41002: LD_ADDR_VAR 0 13
41006: PUSH
41007: LD_VAR 0 15
41011: PUSH
41012: LD_INT 2
41014: ARRAY
41015: ST_TO_ADDR
// for i = 1 to hexes do
41016: LD_ADDR_VAR 0 7
41020: PUSH
41021: DOUBLE
41022: LD_INT 1
41024: DEC
41025: ST_TO_ADDR
41026: LD_VAR 0 12
41030: PUSH
41031: FOR_TO
41032: IFFALSE 41362
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41034: LD_VAR 0 12
41038: PUSH
41039: LD_VAR 0 7
41043: ARRAY
41044: PUSH
41045: LD_INT 1
41047: ARRAY
41048: PPUSH
41049: LD_VAR 0 12
41053: PUSH
41054: LD_VAR 0 7
41058: ARRAY
41059: PUSH
41060: LD_INT 2
41062: ARRAY
41063: PPUSH
41064: CALL_OW 488
41068: NOT
41069: PUSH
41070: LD_VAR 0 12
41074: PUSH
41075: LD_VAR 0 7
41079: ARRAY
41080: PUSH
41081: LD_INT 1
41083: ARRAY
41084: PPUSH
41085: LD_VAR 0 12
41089: PUSH
41090: LD_VAR 0 7
41094: ARRAY
41095: PUSH
41096: LD_INT 2
41098: ARRAY
41099: PPUSH
41100: CALL_OW 428
41104: PUSH
41105: LD_INT 0
41107: GREATER
41108: OR
41109: PUSH
41110: LD_VAR 0 12
41114: PUSH
41115: LD_VAR 0 7
41119: ARRAY
41120: PUSH
41121: LD_INT 1
41123: ARRAY
41124: PPUSH
41125: LD_VAR 0 12
41129: PUSH
41130: LD_VAR 0 7
41134: ARRAY
41135: PUSH
41136: LD_INT 2
41138: ARRAY
41139: PPUSH
41140: CALL_OW 351
41144: OR
41145: IFFALSE 41151
// exit ;
41147: POP
41148: POP
41149: GO 41458
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41151: LD_ADDR_VAR 0 8
41155: PUSH
41156: LD_VAR 0 12
41160: PUSH
41161: LD_VAR 0 7
41165: ARRAY
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: PPUSH
41171: LD_VAR 0 12
41175: PUSH
41176: LD_VAR 0 7
41180: ARRAY
41181: PUSH
41182: LD_INT 2
41184: ARRAY
41185: PPUSH
41186: CALL_OW 546
41190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41191: LD_VAR 0 8
41195: PUSH
41196: LD_INT 1
41198: ARRAY
41199: PUSH
41200: LD_VAR 0 8
41204: PUSH
41205: LD_INT 2
41207: ARRAY
41208: PUSH
41209: LD_VAR 0 13
41213: PUSH
41214: LD_INT 2
41216: PLUS
41217: GREATER
41218: OR
41219: PUSH
41220: LD_VAR 0 8
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: PUSH
41229: LD_VAR 0 13
41233: PUSH
41234: LD_INT 2
41236: MINUS
41237: LESS
41238: OR
41239: PUSH
41240: LD_VAR 0 8
41244: PUSH
41245: LD_INT 3
41247: ARRAY
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 8
41254: PUSH
41255: LD_INT 9
41257: PUSH
41258: LD_INT 10
41260: PUSH
41261: LD_INT 11
41263: PUSH
41264: LD_INT 12
41266: PUSH
41267: LD_INT 13
41269: PUSH
41270: LD_INT 16
41272: PUSH
41273: LD_INT 17
41275: PUSH
41276: LD_INT 18
41278: PUSH
41279: LD_INT 19
41281: PUSH
41282: LD_INT 20
41284: PUSH
41285: LD_INT 21
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: IN
41303: NOT
41304: OR
41305: PUSH
41306: LD_VAR 0 8
41310: PUSH
41311: LD_INT 5
41313: ARRAY
41314: NOT
41315: OR
41316: PUSH
41317: LD_VAR 0 8
41321: PUSH
41322: LD_INT 6
41324: ARRAY
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 7
41334: PUSH
41335: LD_INT 9
41337: PUSH
41338: LD_INT 10
41340: PUSH
41341: LD_INT 11
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: IN
41352: NOT
41353: OR
41354: IFFALSE 41360
// exit ;
41356: POP
41357: POP
41358: GO 41458
// end ;
41360: GO 41031
41362: POP
41363: POP
// side := GetSide ( depot ) ;
41364: LD_ADDR_VAR 0 9
41368: PUSH
41369: LD_VAR 0 1
41373: PPUSH
41374: CALL_OW 255
41378: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41379: LD_VAR 0 9
41383: PPUSH
41384: LD_VAR 0 3
41388: PPUSH
41389: LD_VAR 0 4
41393: PPUSH
41394: LD_INT 20
41396: PPUSH
41397: CALL 34112 0 4
41401: PUSH
41402: LD_INT 4
41404: ARRAY
41405: IFFALSE 41409
// exit ;
41407: GO 41458
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41409: LD_VAR 0 2
41413: PUSH
41414: LD_INT 29
41416: PUSH
41417: LD_INT 30
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: IN
41424: PUSH
41425: LD_VAR 0 3
41429: PPUSH
41430: LD_VAR 0 4
41434: PPUSH
41435: LD_VAR 0 9
41439: PPUSH
41440: CALL_OW 440
41444: NOT
41445: AND
41446: IFFALSE 41450
// exit ;
41448: GO 41458
// result := true ;
41450: LD_ADDR_VAR 0 6
41454: PUSH
41455: LD_INT 1
41457: ST_TO_ADDR
// end ;
41458: LD_VAR 0 6
41462: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41463: LD_INT 0
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
// result = [ ] ;
41523: LD_ADDR_VAR 0 7
41527: PUSH
41528: EMPTY
41529: ST_TO_ADDR
// temp_list = [ ] ;
41530: LD_ADDR_VAR 0 9
41534: PUSH
41535: EMPTY
41536: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41537: LD_VAR 0 4
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: LD_INT 4
41556: PUSH
41557: LD_INT 5
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: IN
41568: NOT
41569: PUSH
41570: LD_VAR 0 1
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: IN
41585: PUSH
41586: LD_VAR 0 5
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: IN
41605: NOT
41606: AND
41607: OR
41608: IFFALSE 41612
// exit ;
41610: GO 60003
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41612: LD_VAR 0 1
41616: PUSH
41617: LD_INT 6
41619: PUSH
41620: LD_INT 7
41622: PUSH
41623: LD_INT 8
41625: PUSH
41626: LD_INT 13
41628: PUSH
41629: LD_INT 12
41631: PUSH
41632: LD_INT 15
41634: PUSH
41635: LD_INT 11
41637: PUSH
41638: LD_INT 14
41640: PUSH
41641: LD_INT 10
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: IN
41655: IFFALSE 41665
// btype = b_lab ;
41657: LD_ADDR_VAR 0 1
41661: PUSH
41662: LD_INT 6
41664: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41665: LD_VAR 0 6
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: LIST
41683: IN
41684: NOT
41685: PUSH
41686: LD_VAR 0 1
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: LD_INT 6
41705: PUSH
41706: LD_INT 36
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: LD_INT 31
41717: PUSH
41718: LD_INT 32
41720: PUSH
41721: LD_INT 33
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: IN
41737: NOT
41738: PUSH
41739: LD_VAR 0 6
41743: PUSH
41744: LD_INT 1
41746: EQUAL
41747: AND
41748: OR
41749: PUSH
41750: LD_VAR 0 1
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 3
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: IN
41765: NOT
41766: PUSH
41767: LD_VAR 0 6
41771: PUSH
41772: LD_INT 2
41774: EQUAL
41775: AND
41776: OR
41777: IFFALSE 41787
// mode = 0 ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_INT 0
41786: ST_TO_ADDR
// case mode of 0 :
41787: LD_VAR 0 6
41791: PUSH
41792: LD_INT 0
41794: DOUBLE
41795: EQUAL
41796: IFTRUE 41800
41798: GO 53253
41800: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41801: LD_ADDR_VAR 0 11
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: LD_INT 3
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 3
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41994: LD_ADDR_VAR 0 12
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42190: LD_ADDR_VAR 0 13
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: LD_INT 3
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 3
42349: NEG
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 3
42361: NEG
42362: PUSH
42363: LD_INT 3
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42389: LD_ADDR_VAR 0 14
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 3
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 3
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42585: LD_ADDR_VAR 0 15
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42778: LD_ADDR_VAR 0 16
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 3
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42971: LD_ADDR_VAR 0 17
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43201: LD_ADDR_VAR 0 18
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43431: LD_ADDR_VAR 0 19
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43661: LD_ADDR_VAR 0 20
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43891: LD_ADDR_VAR 0 21
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44121: LD_ADDR_VAR 0 22
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44351: LD_ADDR_VAR 0 23
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: LD_INT 3
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44631: LD_ADDR_VAR 0 24
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44907: LD_ADDR_VAR 0 25
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 3
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45181: LD_ADDR_VAR 0 26
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 3
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45457: LD_ADDR_VAR 0 27
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 3
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45737: LD_ADDR_VAR 0 28
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 3
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 3
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46019: LD_ADDR_VAR 0 29
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46298: LD_ADDR_VAR 0 30
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 3
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46576: LD_ADDR_VAR 0 31
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 3
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 3
46819: NEG
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46854: LD_ADDR_VAR 0 32
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47132: LD_ADDR_VAR 0 33
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 2
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47411: LD_ADDR_VAR 0 34
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47691: LD_ADDR_VAR 0 35
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47803: LD_ADDR_VAR 0 36
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47915: LD_ADDR_VAR 0 37
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48027: LD_ADDR_VAR 0 38
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48139: LD_ADDR_VAR 0 39
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48251: LD_ADDR_VAR 0 40
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48363: LD_ADDR_VAR 0 41
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 3
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48713: LD_ADDR_VAR 0 42
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: NEG
48892: PUSH
48893: LD_INT 2
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 3
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 3
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 3
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: NEG
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: LD_INT 3
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49063: LD_ADDR_VAR 0 43
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49411: LD_ADDR_VAR 0 44
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49761: LD_ADDR_VAR 0 45
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: LD_INT 3
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 3
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 3
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50111: LD_ADDR_VAR 0 46
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 3
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 3
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50459: LD_ADDR_VAR 0 47
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50610: LD_ADDR_VAR 0 48
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50757: LD_ADDR_VAR 0 49
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50901: LD_ADDR_VAR 0 50
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51045: LD_ADDR_VAR 0 51
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51192: LD_ADDR_VAR 0 52
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51343: LD_ADDR_VAR 0 53
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51573: LD_ADDR_VAR 0 54
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51803: LD_ADDR_VAR 0 55
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52033: LD_ADDR_VAR 0 56
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: NEG
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52263: LD_ADDR_VAR 0 57
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52493: LD_ADDR_VAR 0 58
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52723: LD_ADDR_VAR 0 59
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52811: LD_ADDR_VAR 0 60
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52899: LD_ADDR_VAR 0 61
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52987: LD_ADDR_VAR 0 62
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53075: LD_ADDR_VAR 0 63
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53163: LD_ADDR_VAR 0 64
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: ST_TO_ADDR
// end ; 1 :
53251: GO 59148
53253: LD_INT 1
53255: DOUBLE
53256: EQUAL
53257: IFTRUE 53261
53259: GO 55884
53261: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53262: LD_ADDR_VAR 0 11
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 3
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53306: LD_ADDR_VAR 0 12
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: LIST
53346: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53347: LD_ADDR_VAR 0 13
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: LD_INT 2
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: LD_INT 3
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: LIST
53386: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53387: LD_ADDR_VAR 0 14
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53428: LD_ADDR_VAR 0 15
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53472: LD_ADDR_VAR 0 16
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53518: LD_ADDR_VAR 0 17
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 3
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53562: LD_ADDR_VAR 0 18
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53603: LD_ADDR_VAR 0 19
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: LD_INT 3
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53643: LD_ADDR_VAR 0 20
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53684: LD_ADDR_VAR 0 21
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53728: LD_ADDR_VAR 0 22
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 3
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53774: LD_ADDR_VAR 0 23
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 4
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53818: LD_ADDR_VAR 0 24
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 4
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53859: LD_ADDR_VAR 0 25
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 4
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53899: LD_ADDR_VAR 0 26
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 4
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53940: LD_ADDR_VAR 0 27
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 4
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53984: LD_ADDR_VAR 0 28
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54030: LD_ADDR_VAR 0 29
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 4
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 4
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 5
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 5
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 6
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 6
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 5
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54185: LD_ADDR_VAR 0 30
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 4
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 4
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 5
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 5
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 5
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 6
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 6
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54328: LD_ADDR_VAR 0 31
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 4
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 4
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: LD_INT 4
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: LD_INT 4
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 5
54405: PUSH
54406: LD_INT 5
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 4
54415: PUSH
54416: LD_INT 5
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 6
54425: PUSH
54426: LD_INT 5
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 6
54435: PUSH
54436: LD_INT 6
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: LD_INT 6
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54467: LD_ADDR_VAR 0 32
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 4
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 5
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 5
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 4
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 6
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 6
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 5
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54610: LD_ADDR_VAR 0 33
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 4
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 4
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 5
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 5
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 5
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 6
54730: NEG
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 6
54741: NEG
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54765: LD_ADDR_VAR 0 34
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: LD_INT 4
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 4
54820: NEG
54821: PUSH
54822: LD_INT 3
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: LD_INT 4
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 4
54844: NEG
54845: PUSH
54846: LD_INT 5
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 5
54856: NEG
54857: PUSH
54858: LD_INT 4
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 5
54868: NEG
54869: PUSH
54870: LD_INT 5
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 5
54880: NEG
54881: PUSH
54882: LD_INT 6
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 6
54892: NEG
54893: PUSH
54894: LD_INT 5
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 6
54904: NEG
54905: PUSH
54906: LD_INT 6
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54928: LD_ADDR_VAR 0 41
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: LD_INT 2
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54972: LD_ADDR_VAR 0 42
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55013: LD_ADDR_VAR 0 43
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55053: LD_ADDR_VAR 0 44
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55094: LD_ADDR_VAR 0 45
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 3
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55138: LD_ADDR_VAR 0 46
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55184: LD_ADDR_VAR 0 47
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 3
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55217: LD_ADDR_VAR 0 48
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55248: LD_ADDR_VAR 0 49
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55277: LD_ADDR_VAR 0 50
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 3
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55306: LD_ADDR_VAR 0 51
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55337: LD_ADDR_VAR 0 52
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55370: LD_ADDR_VAR 0 53
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55414: LD_ADDR_VAR 0 54
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: LIST
55454: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55455: LD_ADDR_VAR 0 55
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 3
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55495: LD_ADDR_VAR 0 56
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55536: LD_ADDR_VAR 0 57
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55580: LD_ADDR_VAR 0 58
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55626: LD_ADDR_VAR 0 59
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55670: LD_ADDR_VAR 0 60
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55711: LD_ADDR_VAR 0 61
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55751: LD_ADDR_VAR 0 62
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55792: LD_ADDR_VAR 0 63
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55836: LD_ADDR_VAR 0 64
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// end ; 2 :
55882: GO 59148
55884: LD_INT 2
55886: DOUBLE
55887: EQUAL
55888: IFTRUE 55892
55890: GO 59147
55892: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55893: LD_ADDR_VAR 0 29
55897: PUSH
55898: LD_INT 4
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 4
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 5
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 5
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 4
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 5
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 3
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 4
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 4
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 4
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 4
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 4
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 4
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 5
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 5
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 4
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 5
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 4
56232: NEG
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: NEG
56279: PUSH
56280: LD_INT 4
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 4
56290: NEG
56291: PUSH
56292: LD_INT 5
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 4
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 4
56326: NEG
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 5
56338: NEG
56339: PUSH
56340: LD_INT 4
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 5
56350: NEG
56351: PUSH
56352: LD_INT 5
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: LD_INT 5
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 5
56374: NEG
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56431: LD_ADDR_VAR 0 30
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 4
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 5
56458: PUSH
56459: LD_INT 4
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: LD_INT 5
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: LD_INT 5
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 4
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 4
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 4
56621: NEG
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 4
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 4
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 5
56677: NEG
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: NEG
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 5
56700: NEG
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 4
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 4
56795: NEG
56796: PUSH
56797: LD_INT 4
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: NEG
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 4
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 5
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 4
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 5
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 5
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56978: LD_ADDR_VAR 0 31
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 4
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 5
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 5
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 5
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 4
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: NEG
57181: PUSH
57182: LD_INT 4
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: NEG
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: LD_INT 4
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: NEG
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 5
57240: NEG
57241: PUSH
57242: LD_INT 4
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 5
57252: NEG
57253: PUSH
57254: LD_INT 5
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 3
57264: NEG
57265: PUSH
57266: LD_INT 5
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 5
57276: NEG
57277: PUSH
57278: LD_INT 3
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 3
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 4
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 4
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 4
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 5
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57528: LD_ADDR_VAR 0 32
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 4
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 5
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 5
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 5
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 3
57637: NEG
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: LD_INT 4
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 4
57697: NEG
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 4
57709: NEG
57710: PUSH
57711: LD_INT 4
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 4
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 4
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 5
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 4
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 4
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 5
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 5
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 4
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: LD_INT 4
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 4
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 5
57960: PUSH
57961: LD_INT 4
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 5
57970: PUSH
57971: LD_INT 5
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 4
57980: PUSH
57981: LD_INT 5
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 4
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 5
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58075: LD_ADDR_VAR 0 33
58079: PUSH
58080: LD_INT 4
58082: NEG
58083: PUSH
58084: LD_INT 4
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: NEG
58095: PUSH
58096: LD_INT 5
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 4
58130: NEG
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 5
58142: NEG
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 5
58154: NEG
58155: PUSH
58156: LD_INT 5
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: LD_INT 5
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 5
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 4
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 4
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 5
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 5
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 4
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 4
58415: PUSH
58416: LD_INT 4
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 4
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 4
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 5
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 5
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 4
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 5
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58613: LD_ADDR_VAR 0 34
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 4
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 5
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 3
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 5
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 5
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 4
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 4
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 4
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: LD_INT 4
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 5
58835: PUSH
58836: LD_INT 4
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 5
58845: PUSH
58846: LD_INT 5
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 4
58855: PUSH
58856: LD_INT 5
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: LD_INT 4
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 3
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 5
58885: PUSH
58886: LD_INT 3
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 4
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 4
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 4
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 4
58998: NEG
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 4
59009: NEG
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 5
59054: NEG
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: NEG
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 5
59077: NEG
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// end ; end ;
59145: GO 59148
59147: POP
// case btype of b_depot , b_warehouse :
59148: LD_VAR 0 1
59152: PUSH
59153: LD_INT 0
59155: DOUBLE
59156: EQUAL
59157: IFTRUE 59167
59159: LD_INT 1
59161: DOUBLE
59162: EQUAL
59163: IFTRUE 59167
59165: GO 59368
59167: POP
// case nation of nation_american :
59168: LD_VAR 0 5
59172: PUSH
59173: LD_INT 1
59175: DOUBLE
59176: EQUAL
59177: IFTRUE 59181
59179: GO 59237
59181: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59182: LD_ADDR_VAR 0 9
59186: PUSH
59187: LD_VAR 0 11
59191: PUSH
59192: LD_VAR 0 12
59196: PUSH
59197: LD_VAR 0 13
59201: PUSH
59202: LD_VAR 0 14
59206: PUSH
59207: LD_VAR 0 15
59211: PUSH
59212: LD_VAR 0 16
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: PUSH
59225: LD_VAR 0 4
59229: PUSH
59230: LD_INT 1
59232: PLUS
59233: ARRAY
59234: ST_TO_ADDR
59235: GO 59366
59237: LD_INT 2
59239: DOUBLE
59240: EQUAL
59241: IFTRUE 59245
59243: GO 59301
59245: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59246: LD_ADDR_VAR 0 9
59250: PUSH
59251: LD_VAR 0 17
59255: PUSH
59256: LD_VAR 0 18
59260: PUSH
59261: LD_VAR 0 19
59265: PUSH
59266: LD_VAR 0 20
59270: PUSH
59271: LD_VAR 0 21
59275: PUSH
59276: LD_VAR 0 22
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: PUSH
59289: LD_VAR 0 4
59293: PUSH
59294: LD_INT 1
59296: PLUS
59297: ARRAY
59298: ST_TO_ADDR
59299: GO 59366
59301: LD_INT 3
59303: DOUBLE
59304: EQUAL
59305: IFTRUE 59309
59307: GO 59365
59309: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59310: LD_ADDR_VAR 0 9
59314: PUSH
59315: LD_VAR 0 23
59319: PUSH
59320: LD_VAR 0 24
59324: PUSH
59325: LD_VAR 0 25
59329: PUSH
59330: LD_VAR 0 26
59334: PUSH
59335: LD_VAR 0 27
59339: PUSH
59340: LD_VAR 0 28
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: PUSH
59353: LD_VAR 0 4
59357: PUSH
59358: LD_INT 1
59360: PLUS
59361: ARRAY
59362: ST_TO_ADDR
59363: GO 59366
59365: POP
59366: GO 59921
59368: LD_INT 2
59370: DOUBLE
59371: EQUAL
59372: IFTRUE 59382
59374: LD_INT 3
59376: DOUBLE
59377: EQUAL
59378: IFTRUE 59382
59380: GO 59438
59382: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59383: LD_ADDR_VAR 0 9
59387: PUSH
59388: LD_VAR 0 29
59392: PUSH
59393: LD_VAR 0 30
59397: PUSH
59398: LD_VAR 0 31
59402: PUSH
59403: LD_VAR 0 32
59407: PUSH
59408: LD_VAR 0 33
59412: PUSH
59413: LD_VAR 0 34
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: PUSH
59426: LD_VAR 0 4
59430: PUSH
59431: LD_INT 1
59433: PLUS
59434: ARRAY
59435: ST_TO_ADDR
59436: GO 59921
59438: LD_INT 16
59440: DOUBLE
59441: EQUAL
59442: IFTRUE 59500
59444: LD_INT 17
59446: DOUBLE
59447: EQUAL
59448: IFTRUE 59500
59450: LD_INT 18
59452: DOUBLE
59453: EQUAL
59454: IFTRUE 59500
59456: LD_INT 19
59458: DOUBLE
59459: EQUAL
59460: IFTRUE 59500
59462: LD_INT 22
59464: DOUBLE
59465: EQUAL
59466: IFTRUE 59500
59468: LD_INT 20
59470: DOUBLE
59471: EQUAL
59472: IFTRUE 59500
59474: LD_INT 21
59476: DOUBLE
59477: EQUAL
59478: IFTRUE 59500
59480: LD_INT 23
59482: DOUBLE
59483: EQUAL
59484: IFTRUE 59500
59486: LD_INT 24
59488: DOUBLE
59489: EQUAL
59490: IFTRUE 59500
59492: LD_INT 25
59494: DOUBLE
59495: EQUAL
59496: IFTRUE 59500
59498: GO 59556
59500: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59501: LD_ADDR_VAR 0 9
59505: PUSH
59506: LD_VAR 0 35
59510: PUSH
59511: LD_VAR 0 36
59515: PUSH
59516: LD_VAR 0 37
59520: PUSH
59521: LD_VAR 0 38
59525: PUSH
59526: LD_VAR 0 39
59530: PUSH
59531: LD_VAR 0 40
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: PUSH
59544: LD_VAR 0 4
59548: PUSH
59549: LD_INT 1
59551: PLUS
59552: ARRAY
59553: ST_TO_ADDR
59554: GO 59921
59556: LD_INT 6
59558: DOUBLE
59559: EQUAL
59560: IFTRUE 59612
59562: LD_INT 7
59564: DOUBLE
59565: EQUAL
59566: IFTRUE 59612
59568: LD_INT 8
59570: DOUBLE
59571: EQUAL
59572: IFTRUE 59612
59574: LD_INT 13
59576: DOUBLE
59577: EQUAL
59578: IFTRUE 59612
59580: LD_INT 12
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59612
59586: LD_INT 15
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59612
59592: LD_INT 11
59594: DOUBLE
59595: EQUAL
59596: IFTRUE 59612
59598: LD_INT 14
59600: DOUBLE
59601: EQUAL
59602: IFTRUE 59612
59604: LD_INT 10
59606: DOUBLE
59607: EQUAL
59608: IFTRUE 59612
59610: GO 59668
59612: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59613: LD_ADDR_VAR 0 9
59617: PUSH
59618: LD_VAR 0 41
59622: PUSH
59623: LD_VAR 0 42
59627: PUSH
59628: LD_VAR 0 43
59632: PUSH
59633: LD_VAR 0 44
59637: PUSH
59638: LD_VAR 0 45
59642: PUSH
59643: LD_VAR 0 46
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: PUSH
59656: LD_VAR 0 4
59660: PUSH
59661: LD_INT 1
59663: PLUS
59664: ARRAY
59665: ST_TO_ADDR
59666: GO 59921
59668: LD_INT 36
59670: DOUBLE
59671: EQUAL
59672: IFTRUE 59676
59674: GO 59732
59676: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59677: LD_ADDR_VAR 0 9
59681: PUSH
59682: LD_VAR 0 47
59686: PUSH
59687: LD_VAR 0 48
59691: PUSH
59692: LD_VAR 0 49
59696: PUSH
59697: LD_VAR 0 50
59701: PUSH
59702: LD_VAR 0 51
59706: PUSH
59707: LD_VAR 0 52
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: PUSH
59720: LD_VAR 0 4
59724: PUSH
59725: LD_INT 1
59727: PLUS
59728: ARRAY
59729: ST_TO_ADDR
59730: GO 59921
59732: LD_INT 4
59734: DOUBLE
59735: EQUAL
59736: IFTRUE 59758
59738: LD_INT 5
59740: DOUBLE
59741: EQUAL
59742: IFTRUE 59758
59744: LD_INT 34
59746: DOUBLE
59747: EQUAL
59748: IFTRUE 59758
59750: LD_INT 37
59752: DOUBLE
59753: EQUAL
59754: IFTRUE 59758
59756: GO 59814
59758: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59759: LD_ADDR_VAR 0 9
59763: PUSH
59764: LD_VAR 0 53
59768: PUSH
59769: LD_VAR 0 54
59773: PUSH
59774: LD_VAR 0 55
59778: PUSH
59779: LD_VAR 0 56
59783: PUSH
59784: LD_VAR 0 57
59788: PUSH
59789: LD_VAR 0 58
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: PUSH
59802: LD_VAR 0 4
59806: PUSH
59807: LD_INT 1
59809: PLUS
59810: ARRAY
59811: ST_TO_ADDR
59812: GO 59921
59814: LD_INT 31
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59864
59820: LD_INT 32
59822: DOUBLE
59823: EQUAL
59824: IFTRUE 59864
59826: LD_INT 33
59828: DOUBLE
59829: EQUAL
59830: IFTRUE 59864
59832: LD_INT 27
59834: DOUBLE
59835: EQUAL
59836: IFTRUE 59864
59838: LD_INT 26
59840: DOUBLE
59841: EQUAL
59842: IFTRUE 59864
59844: LD_INT 28
59846: DOUBLE
59847: EQUAL
59848: IFTRUE 59864
59850: LD_INT 29
59852: DOUBLE
59853: EQUAL
59854: IFTRUE 59864
59856: LD_INT 30
59858: DOUBLE
59859: EQUAL
59860: IFTRUE 59864
59862: GO 59920
59864: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59865: LD_ADDR_VAR 0 9
59869: PUSH
59870: LD_VAR 0 59
59874: PUSH
59875: LD_VAR 0 60
59879: PUSH
59880: LD_VAR 0 61
59884: PUSH
59885: LD_VAR 0 62
59889: PUSH
59890: LD_VAR 0 63
59894: PUSH
59895: LD_VAR 0 64
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: PUSH
59908: LD_VAR 0 4
59912: PUSH
59913: LD_INT 1
59915: PLUS
59916: ARRAY
59917: ST_TO_ADDR
59918: GO 59921
59920: POP
// temp_list2 = [ ] ;
59921: LD_ADDR_VAR 0 10
59925: PUSH
59926: EMPTY
59927: ST_TO_ADDR
// for i in temp_list do
59928: LD_ADDR_VAR 0 8
59932: PUSH
59933: LD_VAR 0 9
59937: PUSH
59938: FOR_IN
59939: IFFALSE 59991
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59941: LD_ADDR_VAR 0 10
59945: PUSH
59946: LD_VAR 0 10
59950: PUSH
59951: LD_VAR 0 8
59955: PUSH
59956: LD_INT 1
59958: ARRAY
59959: PUSH
59960: LD_VAR 0 2
59964: PLUS
59965: PUSH
59966: LD_VAR 0 8
59970: PUSH
59971: LD_INT 2
59973: ARRAY
59974: PUSH
59975: LD_VAR 0 3
59979: PLUS
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: ADD
59988: ST_TO_ADDR
59989: GO 59938
59991: POP
59992: POP
// result = temp_list2 ;
59993: LD_ADDR_VAR 0 7
59997: PUSH
59998: LD_VAR 0 10
60002: ST_TO_ADDR
// end ;
60003: LD_VAR 0 7
60007: RET
// export function EnemyInRange ( unit , dist ) ; begin
60008: LD_INT 0
60010: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60011: LD_ADDR_VAR 0 3
60015: PUSH
60016: LD_VAR 0 1
60020: PPUSH
60021: CALL_OW 255
60025: PPUSH
60026: LD_VAR 0 1
60030: PPUSH
60031: CALL_OW 250
60035: PPUSH
60036: LD_VAR 0 1
60040: PPUSH
60041: CALL_OW 251
60045: PPUSH
60046: LD_VAR 0 2
60050: PPUSH
60051: CALL 34112 0 4
60055: PUSH
60056: LD_INT 4
60058: ARRAY
60059: ST_TO_ADDR
// end ;
60060: LD_VAR 0 3
60064: RET
// export function PlayerSeeMe ( unit ) ; begin
60065: LD_INT 0
60067: PPUSH
// result := See ( your_side , unit ) ;
60068: LD_ADDR_VAR 0 2
60072: PUSH
60073: LD_OWVAR 2
60077: PPUSH
60078: LD_VAR 0 1
60082: PPUSH
60083: CALL_OW 292
60087: ST_TO_ADDR
// end ;
60088: LD_VAR 0 2
60092: RET
// export function ReverseDir ( unit ) ; begin
60093: LD_INT 0
60095: PPUSH
// if not unit then
60096: LD_VAR 0 1
60100: NOT
60101: IFFALSE 60105
// exit ;
60103: GO 60128
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60105: LD_ADDR_VAR 0 2
60109: PUSH
60110: LD_VAR 0 1
60114: PPUSH
60115: CALL_OW 254
60119: PUSH
60120: LD_INT 3
60122: PLUS
60123: PUSH
60124: LD_INT 6
60126: MOD
60127: ST_TO_ADDR
// end ;
60128: LD_VAR 0 2
60132: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60133: LD_INT 0
60135: PPUSH
60136: PPUSH
60137: PPUSH
60138: PPUSH
60139: PPUSH
// if not hexes then
60140: LD_VAR 0 2
60144: NOT
60145: IFFALSE 60149
// exit ;
60147: GO 60297
// dist := 9999 ;
60149: LD_ADDR_VAR 0 5
60153: PUSH
60154: LD_INT 9999
60156: ST_TO_ADDR
// for i = 1 to hexes do
60157: LD_ADDR_VAR 0 4
60161: PUSH
60162: DOUBLE
60163: LD_INT 1
60165: DEC
60166: ST_TO_ADDR
60167: LD_VAR 0 2
60171: PUSH
60172: FOR_TO
60173: IFFALSE 60285
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60175: LD_VAR 0 1
60179: PPUSH
60180: LD_VAR 0 2
60184: PUSH
60185: LD_VAR 0 4
60189: ARRAY
60190: PUSH
60191: LD_INT 1
60193: ARRAY
60194: PPUSH
60195: LD_VAR 0 2
60199: PUSH
60200: LD_VAR 0 4
60204: ARRAY
60205: PUSH
60206: LD_INT 2
60208: ARRAY
60209: PPUSH
60210: CALL_OW 297
60214: PUSH
60215: LD_VAR 0 5
60219: LESS
60220: IFFALSE 60283
// begin hex := hexes [ i ] ;
60222: LD_ADDR_VAR 0 7
60226: PUSH
60227: LD_VAR 0 2
60231: PUSH
60232: LD_VAR 0 4
60236: ARRAY
60237: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60238: LD_ADDR_VAR 0 5
60242: PUSH
60243: LD_VAR 0 1
60247: PPUSH
60248: LD_VAR 0 2
60252: PUSH
60253: LD_VAR 0 4
60257: ARRAY
60258: PUSH
60259: LD_INT 1
60261: ARRAY
60262: PPUSH
60263: LD_VAR 0 2
60267: PUSH
60268: LD_VAR 0 4
60272: ARRAY
60273: PUSH
60274: LD_INT 2
60276: ARRAY
60277: PPUSH
60278: CALL_OW 297
60282: ST_TO_ADDR
// end ; end ;
60283: GO 60172
60285: POP
60286: POP
// result := hex ;
60287: LD_ADDR_VAR 0 3
60291: PUSH
60292: LD_VAR 0 7
60296: ST_TO_ADDR
// end ;
60297: LD_VAR 0 3
60301: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60306: LD_VAR 0 1
60310: NOT
60311: PUSH
60312: LD_VAR 0 1
60316: PUSH
60317: LD_INT 21
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 23
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PPUSH
60341: CALL_OW 69
60345: IN
60346: NOT
60347: OR
60348: IFFALSE 60352
// exit ;
60350: GO 60399
// for i = 1 to 3 do
60352: LD_ADDR_VAR 0 3
60356: PUSH
60357: DOUBLE
60358: LD_INT 1
60360: DEC
60361: ST_TO_ADDR
60362: LD_INT 3
60364: PUSH
60365: FOR_TO
60366: IFFALSE 60397
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60368: LD_VAR 0 1
60372: PPUSH
60373: CALL_OW 250
60377: PPUSH
60378: LD_VAR 0 1
60382: PPUSH
60383: CALL_OW 251
60387: PPUSH
60388: LD_INT 1
60390: PPUSH
60391: CALL_OW 453
60395: GO 60365
60397: POP
60398: POP
// end ;
60399: LD_VAR 0 2
60403: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60404: LD_INT 0
60406: PPUSH
60407: PPUSH
60408: PPUSH
60409: PPUSH
60410: PPUSH
60411: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60412: LD_VAR 0 1
60416: NOT
60417: PUSH
60418: LD_VAR 0 2
60422: NOT
60423: OR
60424: PUSH
60425: LD_VAR 0 1
60429: PPUSH
60430: CALL_OW 314
60434: OR
60435: IFFALSE 60439
// exit ;
60437: GO 60880
// x := GetX ( enemy_unit ) ;
60439: LD_ADDR_VAR 0 7
60443: PUSH
60444: LD_VAR 0 2
60448: PPUSH
60449: CALL_OW 250
60453: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60454: LD_ADDR_VAR 0 8
60458: PUSH
60459: LD_VAR 0 2
60463: PPUSH
60464: CALL_OW 251
60468: ST_TO_ADDR
// if not x or not y then
60469: LD_VAR 0 7
60473: NOT
60474: PUSH
60475: LD_VAR 0 8
60479: NOT
60480: OR
60481: IFFALSE 60485
// exit ;
60483: GO 60880
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60485: LD_ADDR_VAR 0 6
60489: PUSH
60490: LD_VAR 0 7
60494: PPUSH
60495: LD_INT 0
60497: PPUSH
60498: LD_INT 4
60500: PPUSH
60501: CALL_OW 272
60505: PUSH
60506: LD_VAR 0 8
60510: PPUSH
60511: LD_INT 0
60513: PPUSH
60514: LD_INT 4
60516: PPUSH
60517: CALL_OW 273
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_VAR 0 7
60530: PPUSH
60531: LD_INT 1
60533: PPUSH
60534: LD_INT 4
60536: PPUSH
60537: CALL_OW 272
60541: PUSH
60542: LD_VAR 0 8
60546: PPUSH
60547: LD_INT 1
60549: PPUSH
60550: LD_INT 4
60552: PPUSH
60553: CALL_OW 273
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_VAR 0 7
60566: PPUSH
60567: LD_INT 2
60569: PPUSH
60570: LD_INT 4
60572: PPUSH
60573: CALL_OW 272
60577: PUSH
60578: LD_VAR 0 8
60582: PPUSH
60583: LD_INT 2
60585: PPUSH
60586: LD_INT 4
60588: PPUSH
60589: CALL_OW 273
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 7
60602: PPUSH
60603: LD_INT 3
60605: PPUSH
60606: LD_INT 4
60608: PPUSH
60609: CALL_OW 272
60613: PUSH
60614: LD_VAR 0 8
60618: PPUSH
60619: LD_INT 3
60621: PPUSH
60622: LD_INT 4
60624: PPUSH
60625: CALL_OW 273
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_VAR 0 7
60638: PPUSH
60639: LD_INT 4
60641: PPUSH
60642: LD_INT 4
60644: PPUSH
60645: CALL_OW 272
60649: PUSH
60650: LD_VAR 0 8
60654: PPUSH
60655: LD_INT 4
60657: PPUSH
60658: LD_INT 4
60660: PPUSH
60661: CALL_OW 273
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_VAR 0 7
60674: PPUSH
60675: LD_INT 5
60677: PPUSH
60678: LD_INT 4
60680: PPUSH
60681: CALL_OW 272
60685: PUSH
60686: LD_VAR 0 8
60690: PPUSH
60691: LD_INT 5
60693: PPUSH
60694: LD_INT 4
60696: PPUSH
60697: CALL_OW 273
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: ST_TO_ADDR
// for i = tmp downto 1 do
60714: LD_ADDR_VAR 0 4
60718: PUSH
60719: DOUBLE
60720: LD_VAR 0 6
60724: INC
60725: ST_TO_ADDR
60726: LD_INT 1
60728: PUSH
60729: FOR_DOWNTO
60730: IFFALSE 60831
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60732: LD_VAR 0 6
60736: PUSH
60737: LD_VAR 0 4
60741: ARRAY
60742: PUSH
60743: LD_INT 1
60745: ARRAY
60746: PPUSH
60747: LD_VAR 0 6
60751: PUSH
60752: LD_VAR 0 4
60756: ARRAY
60757: PUSH
60758: LD_INT 2
60760: ARRAY
60761: PPUSH
60762: CALL_OW 488
60766: NOT
60767: PUSH
60768: LD_VAR 0 6
60772: PUSH
60773: LD_VAR 0 4
60777: ARRAY
60778: PUSH
60779: LD_INT 1
60781: ARRAY
60782: PPUSH
60783: LD_VAR 0 6
60787: PUSH
60788: LD_VAR 0 4
60792: ARRAY
60793: PUSH
60794: LD_INT 2
60796: ARRAY
60797: PPUSH
60798: CALL_OW 428
60802: PUSH
60803: LD_INT 0
60805: NONEQUAL
60806: OR
60807: IFFALSE 60829
// tmp := Delete ( tmp , i ) ;
60809: LD_ADDR_VAR 0 6
60813: PUSH
60814: LD_VAR 0 6
60818: PPUSH
60819: LD_VAR 0 4
60823: PPUSH
60824: CALL_OW 3
60828: ST_TO_ADDR
60829: GO 60729
60831: POP
60832: POP
// j := GetClosestHex ( unit , tmp ) ;
60833: LD_ADDR_VAR 0 5
60837: PUSH
60838: LD_VAR 0 1
60842: PPUSH
60843: LD_VAR 0 6
60847: PPUSH
60848: CALL 60133 0 2
60852: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60853: LD_VAR 0 1
60857: PPUSH
60858: LD_VAR 0 5
60862: PUSH
60863: LD_INT 1
60865: ARRAY
60866: PPUSH
60867: LD_VAR 0 5
60871: PUSH
60872: LD_INT 2
60874: ARRAY
60875: PPUSH
60876: CALL_OW 111
// end ;
60880: LD_VAR 0 3
60884: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60885: LD_INT 0
60887: PPUSH
60888: PPUSH
60889: PPUSH
// uc_side = 0 ;
60890: LD_ADDR_OWVAR 20
60894: PUSH
60895: LD_INT 0
60897: ST_TO_ADDR
// uc_nation = 0 ;
60898: LD_ADDR_OWVAR 21
60902: PUSH
60903: LD_INT 0
60905: ST_TO_ADDR
// InitHc_All ( ) ;
60906: CALL_OW 584
// InitVc ;
60910: CALL_OW 20
// if mastodonts then
60914: LD_VAR 0 6
60918: IFFALSE 60985
// for i = 1 to mastodonts do
60920: LD_ADDR_VAR 0 11
60924: PUSH
60925: DOUBLE
60926: LD_INT 1
60928: DEC
60929: ST_TO_ADDR
60930: LD_VAR 0 6
60934: PUSH
60935: FOR_TO
60936: IFFALSE 60983
// begin vc_chassis := 31 ;
60938: LD_ADDR_OWVAR 37
60942: PUSH
60943: LD_INT 31
60945: ST_TO_ADDR
// vc_control := control_rider ;
60946: LD_ADDR_OWVAR 38
60950: PUSH
60951: LD_INT 4
60953: ST_TO_ADDR
// animal := CreateVehicle ;
60954: LD_ADDR_VAR 0 12
60958: PUSH
60959: CALL_OW 45
60963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60964: LD_VAR 0 12
60968: PPUSH
60969: LD_VAR 0 8
60973: PPUSH
60974: LD_INT 0
60976: PPUSH
60977: CALL 63173 0 3
// end ;
60981: GO 60935
60983: POP
60984: POP
// if horses then
60985: LD_VAR 0 5
60989: IFFALSE 61056
// for i = 1 to horses do
60991: LD_ADDR_VAR 0 11
60995: PUSH
60996: DOUBLE
60997: LD_INT 1
60999: DEC
61000: ST_TO_ADDR
61001: LD_VAR 0 5
61005: PUSH
61006: FOR_TO
61007: IFFALSE 61054
// begin hc_class := 21 ;
61009: LD_ADDR_OWVAR 28
61013: PUSH
61014: LD_INT 21
61016: ST_TO_ADDR
// hc_gallery :=  ;
61017: LD_ADDR_OWVAR 33
61021: PUSH
61022: LD_STRING 
61024: ST_TO_ADDR
// animal := CreateHuman ;
61025: LD_ADDR_VAR 0 12
61029: PUSH
61030: CALL_OW 44
61034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61035: LD_VAR 0 12
61039: PPUSH
61040: LD_VAR 0 8
61044: PPUSH
61045: LD_INT 0
61047: PPUSH
61048: CALL 63173 0 3
// end ;
61052: GO 61006
61054: POP
61055: POP
// if birds then
61056: LD_VAR 0 1
61060: IFFALSE 61127
// for i = 1 to birds do
61062: LD_ADDR_VAR 0 11
61066: PUSH
61067: DOUBLE
61068: LD_INT 1
61070: DEC
61071: ST_TO_ADDR
61072: LD_VAR 0 1
61076: PUSH
61077: FOR_TO
61078: IFFALSE 61125
// begin hc_class = 18 ;
61080: LD_ADDR_OWVAR 28
61084: PUSH
61085: LD_INT 18
61087: ST_TO_ADDR
// hc_gallery =  ;
61088: LD_ADDR_OWVAR 33
61092: PUSH
61093: LD_STRING 
61095: ST_TO_ADDR
// animal := CreateHuman ;
61096: LD_ADDR_VAR 0 12
61100: PUSH
61101: CALL_OW 44
61105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61106: LD_VAR 0 12
61110: PPUSH
61111: LD_VAR 0 8
61115: PPUSH
61116: LD_INT 0
61118: PPUSH
61119: CALL 63173 0 3
// end ;
61123: GO 61077
61125: POP
61126: POP
// if tigers then
61127: LD_VAR 0 2
61131: IFFALSE 61215
// for i = 1 to tigers do
61133: LD_ADDR_VAR 0 11
61137: PUSH
61138: DOUBLE
61139: LD_INT 1
61141: DEC
61142: ST_TO_ADDR
61143: LD_VAR 0 2
61147: PUSH
61148: FOR_TO
61149: IFFALSE 61213
// begin hc_class = class_tiger ;
61151: LD_ADDR_OWVAR 28
61155: PUSH
61156: LD_INT 14
61158: ST_TO_ADDR
// hc_gallery =  ;
61159: LD_ADDR_OWVAR 33
61163: PUSH
61164: LD_STRING 
61166: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61167: LD_ADDR_OWVAR 35
61171: PUSH
61172: LD_INT 7
61174: NEG
61175: PPUSH
61176: LD_INT 7
61178: PPUSH
61179: CALL_OW 12
61183: ST_TO_ADDR
// animal := CreateHuman ;
61184: LD_ADDR_VAR 0 12
61188: PUSH
61189: CALL_OW 44
61193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61194: LD_VAR 0 12
61198: PPUSH
61199: LD_VAR 0 8
61203: PPUSH
61204: LD_INT 0
61206: PPUSH
61207: CALL 63173 0 3
// end ;
61211: GO 61148
61213: POP
61214: POP
// if apemans then
61215: LD_VAR 0 3
61219: IFFALSE 61342
// for i = 1 to apemans do
61221: LD_ADDR_VAR 0 11
61225: PUSH
61226: DOUBLE
61227: LD_INT 1
61229: DEC
61230: ST_TO_ADDR
61231: LD_VAR 0 3
61235: PUSH
61236: FOR_TO
61237: IFFALSE 61340
// begin hc_class = class_apeman ;
61239: LD_ADDR_OWVAR 28
61243: PUSH
61244: LD_INT 12
61246: ST_TO_ADDR
// hc_gallery =  ;
61247: LD_ADDR_OWVAR 33
61251: PUSH
61252: LD_STRING 
61254: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61255: LD_ADDR_OWVAR 35
61259: PUSH
61260: LD_INT 5
61262: NEG
61263: PPUSH
61264: LD_INT 5
61266: PPUSH
61267: CALL_OW 12
61271: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61272: LD_ADDR_OWVAR 31
61276: PUSH
61277: LD_INT 1
61279: PPUSH
61280: LD_INT 3
61282: PPUSH
61283: CALL_OW 12
61287: PUSH
61288: LD_INT 1
61290: PPUSH
61291: LD_INT 3
61293: PPUSH
61294: CALL_OW 12
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: ST_TO_ADDR
// animal := CreateHuman ;
61311: LD_ADDR_VAR 0 12
61315: PUSH
61316: CALL_OW 44
61320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61321: LD_VAR 0 12
61325: PPUSH
61326: LD_VAR 0 8
61330: PPUSH
61331: LD_INT 0
61333: PPUSH
61334: CALL 63173 0 3
// end ;
61338: GO 61236
61340: POP
61341: POP
// if enchidnas then
61342: LD_VAR 0 4
61346: IFFALSE 61413
// for i = 1 to enchidnas do
61348: LD_ADDR_VAR 0 11
61352: PUSH
61353: DOUBLE
61354: LD_INT 1
61356: DEC
61357: ST_TO_ADDR
61358: LD_VAR 0 4
61362: PUSH
61363: FOR_TO
61364: IFFALSE 61411
// begin hc_class = 13 ;
61366: LD_ADDR_OWVAR 28
61370: PUSH
61371: LD_INT 13
61373: ST_TO_ADDR
// hc_gallery =  ;
61374: LD_ADDR_OWVAR 33
61378: PUSH
61379: LD_STRING 
61381: ST_TO_ADDR
// animal := CreateHuman ;
61382: LD_ADDR_VAR 0 12
61386: PUSH
61387: CALL_OW 44
61391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61392: LD_VAR 0 12
61396: PPUSH
61397: LD_VAR 0 8
61401: PPUSH
61402: LD_INT 0
61404: PPUSH
61405: CALL 63173 0 3
// end ;
61409: GO 61363
61411: POP
61412: POP
// if fishes then
61413: LD_VAR 0 7
61417: IFFALSE 61484
// for i = 1 to fishes do
61419: LD_ADDR_VAR 0 11
61423: PUSH
61424: DOUBLE
61425: LD_INT 1
61427: DEC
61428: ST_TO_ADDR
61429: LD_VAR 0 7
61433: PUSH
61434: FOR_TO
61435: IFFALSE 61482
// begin hc_class = 20 ;
61437: LD_ADDR_OWVAR 28
61441: PUSH
61442: LD_INT 20
61444: ST_TO_ADDR
// hc_gallery =  ;
61445: LD_ADDR_OWVAR 33
61449: PUSH
61450: LD_STRING 
61452: ST_TO_ADDR
// animal := CreateHuman ;
61453: LD_ADDR_VAR 0 12
61457: PUSH
61458: CALL_OW 44
61462: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61463: LD_VAR 0 12
61467: PPUSH
61468: LD_VAR 0 9
61472: PPUSH
61473: LD_INT 0
61475: PPUSH
61476: CALL 63173 0 3
// end ;
61480: GO 61434
61482: POP
61483: POP
// end ;
61484: LD_VAR 0 10
61488: RET
// export function WantHeal ( sci , unit ) ; begin
61489: LD_INT 0
61491: PPUSH
// if GetTaskList ( sci ) > 0 then
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL_OW 437
61501: PUSH
61502: LD_INT 0
61504: GREATER
61505: IFFALSE 61575
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61507: LD_VAR 0 1
61511: PPUSH
61512: CALL_OW 437
61516: PUSH
61517: LD_INT 1
61519: ARRAY
61520: PUSH
61521: LD_INT 1
61523: ARRAY
61524: PUSH
61525: LD_STRING l
61527: EQUAL
61528: PUSH
61529: LD_VAR 0 1
61533: PPUSH
61534: CALL_OW 437
61538: PUSH
61539: LD_INT 1
61541: ARRAY
61542: PUSH
61543: LD_INT 4
61545: ARRAY
61546: PUSH
61547: LD_VAR 0 2
61551: EQUAL
61552: AND
61553: IFFALSE 61565
// result := true else
61555: LD_ADDR_VAR 0 3
61559: PUSH
61560: LD_INT 1
61562: ST_TO_ADDR
61563: GO 61573
// result := false ;
61565: LD_ADDR_VAR 0 3
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
// end else
61573: GO 61583
// result := false ;
61575: LD_ADDR_VAR 0 3
61579: PUSH
61580: LD_INT 0
61582: ST_TO_ADDR
// end ;
61583: LD_VAR 0 3
61587: RET
// export function HealTarget ( sci ) ; begin
61588: LD_INT 0
61590: PPUSH
// if not sci then
61591: LD_VAR 0 1
61595: NOT
61596: IFFALSE 61600
// exit ;
61598: GO 61665
// result := 0 ;
61600: LD_ADDR_VAR 0 2
61604: PUSH
61605: LD_INT 0
61607: ST_TO_ADDR
// if GetTaskList ( sci ) then
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 437
61617: IFFALSE 61665
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61619: LD_VAR 0 1
61623: PPUSH
61624: CALL_OW 437
61628: PUSH
61629: LD_INT 1
61631: ARRAY
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PUSH
61637: LD_STRING l
61639: EQUAL
61640: IFFALSE 61665
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61642: LD_ADDR_VAR 0 2
61646: PUSH
61647: LD_VAR 0 1
61651: PPUSH
61652: CALL_OW 437
61656: PUSH
61657: LD_INT 1
61659: ARRAY
61660: PUSH
61661: LD_INT 4
61663: ARRAY
61664: ST_TO_ADDR
// end ;
61665: LD_VAR 0 2
61669: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61670: LD_INT 0
61672: PPUSH
61673: PPUSH
61674: PPUSH
61675: PPUSH
// if not base_units then
61676: LD_VAR 0 1
61680: NOT
61681: IFFALSE 61685
// exit ;
61683: GO 61772
// result := false ;
61685: LD_ADDR_VAR 0 2
61689: PUSH
61690: LD_INT 0
61692: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61693: LD_ADDR_VAR 0 5
61697: PUSH
61698: LD_VAR 0 1
61702: PPUSH
61703: LD_INT 21
61705: PUSH
61706: LD_INT 3
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PPUSH
61713: CALL_OW 72
61717: ST_TO_ADDR
// if not tmp then
61718: LD_VAR 0 5
61722: NOT
61723: IFFALSE 61727
// exit ;
61725: GO 61772
// for i in tmp do
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: LD_VAR 0 5
61736: PUSH
61737: FOR_IN
61738: IFFALSE 61770
// begin result := EnemyInRange ( i , 22 ) ;
61740: LD_ADDR_VAR 0 2
61744: PUSH
61745: LD_VAR 0 3
61749: PPUSH
61750: LD_INT 22
61752: PPUSH
61753: CALL 60008 0 2
61757: ST_TO_ADDR
// if result then
61758: LD_VAR 0 2
61762: IFFALSE 61768
// exit ;
61764: POP
61765: POP
61766: GO 61772
// end ;
61768: GO 61737
61770: POP
61771: POP
// end ;
61772: LD_VAR 0 2
61776: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61777: LD_INT 0
61779: PPUSH
61780: PPUSH
// if not units then
61781: LD_VAR 0 1
61785: NOT
61786: IFFALSE 61790
// exit ;
61788: GO 61860
// result := [ ] ;
61790: LD_ADDR_VAR 0 3
61794: PUSH
61795: EMPTY
61796: ST_TO_ADDR
// for i in units do
61797: LD_ADDR_VAR 0 4
61801: PUSH
61802: LD_VAR 0 1
61806: PUSH
61807: FOR_IN
61808: IFFALSE 61858
// if GetTag ( i ) = tag then
61810: LD_VAR 0 4
61814: PPUSH
61815: CALL_OW 110
61819: PUSH
61820: LD_VAR 0 2
61824: EQUAL
61825: IFFALSE 61856
// result := Insert ( result , result + 1 , i ) ;
61827: LD_ADDR_VAR 0 3
61831: PUSH
61832: LD_VAR 0 3
61836: PPUSH
61837: LD_VAR 0 3
61841: PUSH
61842: LD_INT 1
61844: PLUS
61845: PPUSH
61846: LD_VAR 0 4
61850: PPUSH
61851: CALL_OW 2
61855: ST_TO_ADDR
61856: GO 61807
61858: POP
61859: POP
// end ;
61860: LD_VAR 0 3
61864: RET
// export function IsDriver ( un ) ; begin
61865: LD_INT 0
61867: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61868: LD_ADDR_VAR 0 2
61872: PUSH
61873: LD_VAR 0 1
61877: PUSH
61878: LD_INT 55
61880: PUSH
61881: EMPTY
61882: LIST
61883: PPUSH
61884: CALL_OW 69
61888: IN
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 2
61894: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
// list := [ ] ;
61899: LD_ADDR_VAR 0 5
61903: PUSH
61904: EMPTY
61905: ST_TO_ADDR
// case d of 0 :
61906: LD_VAR 0 3
61910: PUSH
61911: LD_INT 0
61913: DOUBLE
61914: EQUAL
61915: IFTRUE 61919
61917: GO 62052
61919: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61920: LD_ADDR_VAR 0 5
61924: PUSH
61925: LD_VAR 0 1
61929: PUSH
61930: LD_INT 4
61932: MINUS
61933: PUSH
61934: LD_VAR 0 2
61938: PUSH
61939: LD_INT 4
61941: MINUS
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: PUSH
61951: LD_VAR 0 1
61955: PUSH
61956: LD_INT 3
61958: MINUS
61959: PUSH
61960: LD_VAR 0 2
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: PUSH
61973: LD_VAR 0 1
61977: PUSH
61978: LD_INT 4
61980: PLUS
61981: PUSH
61982: LD_VAR 0 2
61986: PUSH
61987: LD_INT 4
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: PUSH
61995: LD_VAR 0 1
61999: PUSH
62000: LD_INT 3
62002: PLUS
62003: PUSH
62004: LD_VAR 0 2
62008: PUSH
62009: LD_INT 3
62011: PLUS
62012: PUSH
62013: LD_INT 5
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: PUSH
62021: LD_VAR 0 1
62025: PUSH
62026: LD_VAR 0 2
62030: PUSH
62031: LD_INT 4
62033: PLUS
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: ST_TO_ADDR
// end ; 1 :
62050: GO 62750
62052: LD_INT 1
62054: DOUBLE
62055: EQUAL
62056: IFTRUE 62060
62058: GO 62193
62060: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62061: LD_ADDR_VAR 0 5
62065: PUSH
62066: LD_VAR 0 1
62070: PUSH
62071: LD_VAR 0 2
62075: PUSH
62076: LD_INT 4
62078: MINUS
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: PUSH
62088: LD_VAR 0 1
62092: PUSH
62093: LD_INT 3
62095: MINUS
62096: PUSH
62097: LD_VAR 0 2
62101: PUSH
62102: LD_INT 3
62104: MINUS
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: PUSH
62114: LD_VAR 0 1
62118: PUSH
62119: LD_INT 4
62121: MINUS
62122: PUSH
62123: LD_VAR 0 2
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: PUSH
62136: LD_VAR 0 1
62140: PUSH
62141: LD_VAR 0 2
62145: PUSH
62146: LD_INT 3
62148: PLUS
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: PUSH
62158: LD_VAR 0 1
62162: PUSH
62163: LD_INT 4
62165: PLUS
62166: PUSH
62167: LD_VAR 0 2
62171: PUSH
62172: LD_INT 4
62174: PLUS
62175: PUSH
62176: LD_INT 5
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: ST_TO_ADDR
// end ; 2 :
62191: GO 62750
62193: LD_INT 2
62195: DOUBLE
62196: EQUAL
62197: IFTRUE 62201
62199: GO 62330
62201: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62202: LD_ADDR_VAR 0 5
62206: PUSH
62207: LD_VAR 0 1
62211: PUSH
62212: LD_VAR 0 2
62216: PUSH
62217: LD_INT 3
62219: MINUS
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: PUSH
62229: LD_VAR 0 1
62233: PUSH
62234: LD_INT 4
62236: PLUS
62237: PUSH
62238: LD_VAR 0 2
62242: PUSH
62243: LD_INT 4
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: PUSH
62251: LD_VAR 0 1
62255: PUSH
62256: LD_VAR 0 2
62260: PUSH
62261: LD_INT 4
62263: PLUS
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: LIST
62272: PUSH
62273: LD_VAR 0 1
62277: PUSH
62278: LD_INT 3
62280: MINUS
62281: PUSH
62282: LD_VAR 0 2
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: PUSH
62295: LD_VAR 0 1
62299: PUSH
62300: LD_INT 4
62302: MINUS
62303: PUSH
62304: LD_VAR 0 2
62308: PUSH
62309: LD_INT 4
62311: MINUS
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// end ; 3 :
62328: GO 62750
62330: LD_INT 3
62332: DOUBLE
62333: EQUAL
62334: IFTRUE 62338
62336: GO 62471
62338: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62339: LD_ADDR_VAR 0 5
62343: PUSH
62344: LD_VAR 0 1
62348: PUSH
62349: LD_INT 3
62351: PLUS
62352: PUSH
62353: LD_VAR 0 2
62357: PUSH
62358: LD_INT 4
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: PUSH
62366: LD_VAR 0 1
62370: PUSH
62371: LD_INT 4
62373: PLUS
62374: PUSH
62375: LD_VAR 0 2
62379: PUSH
62380: LD_INT 4
62382: PLUS
62383: PUSH
62384: LD_INT 5
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: LIST
62391: PUSH
62392: LD_VAR 0 1
62396: PUSH
62397: LD_INT 4
62399: MINUS
62400: PUSH
62401: LD_VAR 0 2
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: PUSH
62414: LD_VAR 0 1
62418: PUSH
62419: LD_VAR 0 2
62423: PUSH
62424: LD_INT 4
62426: MINUS
62427: PUSH
62428: LD_INT 3
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: PUSH
62436: LD_VAR 0 1
62440: PUSH
62441: LD_INT 3
62443: MINUS
62444: PUSH
62445: LD_VAR 0 2
62449: PUSH
62450: LD_INT 3
62452: MINUS
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: ST_TO_ADDR
// end ; 4 :
62469: GO 62750
62471: LD_INT 4
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62479
62477: GO 62612
62479: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62480: LD_ADDR_VAR 0 5
62484: PUSH
62485: LD_VAR 0 1
62489: PUSH
62490: LD_VAR 0 2
62494: PUSH
62495: LD_INT 4
62497: PLUS
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_VAR 0 1
62511: PUSH
62512: LD_INT 3
62514: PLUS
62515: PUSH
62516: LD_VAR 0 2
62520: PUSH
62521: LD_INT 3
62523: PLUS
62524: PUSH
62525: LD_INT 5
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: PUSH
62533: LD_VAR 0 1
62537: PUSH
62538: LD_INT 4
62540: PLUS
62541: PUSH
62542: LD_VAR 0 2
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: LIST
62554: PUSH
62555: LD_VAR 0 1
62559: PUSH
62560: LD_VAR 0 2
62564: PUSH
62565: LD_INT 3
62567: MINUS
62568: PUSH
62569: LD_INT 3
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: PUSH
62577: LD_VAR 0 1
62581: PUSH
62582: LD_INT 4
62584: MINUS
62585: PUSH
62586: LD_VAR 0 2
62590: PUSH
62591: LD_INT 4
62593: MINUS
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: ST_TO_ADDR
// end ; 5 :
62610: GO 62750
62612: LD_INT 5
62614: DOUBLE
62615: EQUAL
62616: IFTRUE 62620
62618: GO 62749
62620: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62621: LD_ADDR_VAR 0 5
62625: PUSH
62626: LD_VAR 0 1
62630: PUSH
62631: LD_INT 4
62633: MINUS
62634: PUSH
62635: LD_VAR 0 2
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: PUSH
62648: LD_VAR 0 1
62652: PUSH
62653: LD_VAR 0 2
62657: PUSH
62658: LD_INT 4
62660: MINUS
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: LIST
62669: PUSH
62670: LD_VAR 0 1
62674: PUSH
62675: LD_INT 4
62677: PLUS
62678: PUSH
62679: LD_VAR 0 2
62683: PUSH
62684: LD_INT 4
62686: PLUS
62687: PUSH
62688: LD_INT 5
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: PUSH
62696: LD_VAR 0 1
62700: PUSH
62701: LD_INT 3
62703: PLUS
62704: PUSH
62705: LD_VAR 0 2
62709: PUSH
62710: LD_INT 4
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: PUSH
62718: LD_VAR 0 1
62722: PUSH
62723: LD_VAR 0 2
62727: PUSH
62728: LD_INT 3
62730: PLUS
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// end ; end ;
62747: GO 62750
62749: POP
// result := list ;
62750: LD_ADDR_VAR 0 4
62754: PUSH
62755: LD_VAR 0 5
62759: ST_TO_ADDR
// end ;
62760: LD_VAR 0 4
62764: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62765: LD_INT 0
62767: PPUSH
62768: PPUSH
62769: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62770: LD_VAR 0 1
62774: NOT
62775: PUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: LD_INT 4
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: IN
62799: NOT
62800: OR
62801: IFFALSE 62805
// exit ;
62803: GO 62897
// tmp := [ ] ;
62805: LD_ADDR_VAR 0 5
62809: PUSH
62810: EMPTY
62811: ST_TO_ADDR
// for i in units do
62812: LD_ADDR_VAR 0 4
62816: PUSH
62817: LD_VAR 0 1
62821: PUSH
62822: FOR_IN
62823: IFFALSE 62866
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62825: LD_ADDR_VAR 0 5
62829: PUSH
62830: LD_VAR 0 5
62834: PPUSH
62835: LD_VAR 0 5
62839: PUSH
62840: LD_INT 1
62842: PLUS
62843: PPUSH
62844: LD_VAR 0 4
62848: PPUSH
62849: LD_VAR 0 2
62853: PPUSH
62854: CALL_OW 259
62858: PPUSH
62859: CALL_OW 2
62863: ST_TO_ADDR
62864: GO 62822
62866: POP
62867: POP
// if not tmp then
62868: LD_VAR 0 5
62872: NOT
62873: IFFALSE 62877
// exit ;
62875: GO 62897
// result := SortListByListDesc ( units , tmp ) ;
62877: LD_ADDR_VAR 0 3
62881: PUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: LD_VAR 0 5
62891: PPUSH
62892: CALL_OW 77
62896: ST_TO_ADDR
// end ;
62897: LD_VAR 0 3
62901: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62902: LD_INT 0
62904: PPUSH
62905: PPUSH
62906: PPUSH
// result := false ;
62907: LD_ADDR_VAR 0 3
62911: PUSH
62912: LD_INT 0
62914: ST_TO_ADDR
// x := GetX ( building ) ;
62915: LD_ADDR_VAR 0 4
62919: PUSH
62920: LD_VAR 0 2
62924: PPUSH
62925: CALL_OW 250
62929: ST_TO_ADDR
// y := GetY ( building ) ;
62930: LD_ADDR_VAR 0 5
62934: PUSH
62935: LD_VAR 0 2
62939: PPUSH
62940: CALL_OW 251
62944: ST_TO_ADDR
// if not building or not x or not y then
62945: LD_VAR 0 2
62949: NOT
62950: PUSH
62951: LD_VAR 0 4
62955: NOT
62956: OR
62957: PUSH
62958: LD_VAR 0 5
62962: NOT
62963: OR
62964: IFFALSE 62968
// exit ;
62966: GO 63060
// if GetTaskList ( unit ) then
62968: LD_VAR 0 1
62972: PPUSH
62973: CALL_OW 437
62977: IFFALSE 63060
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62979: LD_STRING e
62981: PUSH
62982: LD_VAR 0 1
62986: PPUSH
62987: CALL_OW 437
62991: PUSH
62992: LD_INT 1
62994: ARRAY
62995: PUSH
62996: LD_INT 1
62998: ARRAY
62999: EQUAL
63000: PUSH
63001: LD_VAR 0 4
63005: PUSH
63006: LD_VAR 0 1
63010: PPUSH
63011: CALL_OW 437
63015: PUSH
63016: LD_INT 1
63018: ARRAY
63019: PUSH
63020: LD_INT 2
63022: ARRAY
63023: EQUAL
63024: AND
63025: PUSH
63026: LD_VAR 0 5
63030: PUSH
63031: LD_VAR 0 1
63035: PPUSH
63036: CALL_OW 437
63040: PUSH
63041: LD_INT 1
63043: ARRAY
63044: PUSH
63045: LD_INT 3
63047: ARRAY
63048: EQUAL
63049: AND
63050: IFFALSE 63060
// result := true end ;
63052: LD_ADDR_VAR 0 3
63056: PUSH
63057: LD_INT 1
63059: ST_TO_ADDR
// end ;
63060: LD_VAR 0 3
63064: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63065: LD_INT 0
63067: PPUSH
// result := false ;
63068: LD_ADDR_VAR 0 4
63072: PUSH
63073: LD_INT 0
63075: ST_TO_ADDR
// if GetTaskList ( unit ) then
63076: LD_VAR 0 1
63080: PPUSH
63081: CALL_OW 437
63085: IFFALSE 63168
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63087: LD_STRING M
63089: PUSH
63090: LD_VAR 0 1
63094: PPUSH
63095: CALL_OW 437
63099: PUSH
63100: LD_INT 1
63102: ARRAY
63103: PUSH
63104: LD_INT 1
63106: ARRAY
63107: EQUAL
63108: PUSH
63109: LD_VAR 0 2
63113: PUSH
63114: LD_VAR 0 1
63118: PPUSH
63119: CALL_OW 437
63123: PUSH
63124: LD_INT 1
63126: ARRAY
63127: PUSH
63128: LD_INT 2
63130: ARRAY
63131: EQUAL
63132: AND
63133: PUSH
63134: LD_VAR 0 3
63138: PUSH
63139: LD_VAR 0 1
63143: PPUSH
63144: CALL_OW 437
63148: PUSH
63149: LD_INT 1
63151: ARRAY
63152: PUSH
63153: LD_INT 3
63155: ARRAY
63156: EQUAL
63157: AND
63158: IFFALSE 63168
// result := true ;
63160: LD_ADDR_VAR 0 4
63164: PUSH
63165: LD_INT 1
63167: ST_TO_ADDR
// end ; end ;
63168: LD_VAR 0 4
63172: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63173: LD_INT 0
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
// if not unit or not area then
63179: LD_VAR 0 1
63183: NOT
63184: PUSH
63185: LD_VAR 0 2
63189: NOT
63190: OR
63191: IFFALSE 63195
// exit ;
63193: GO 63359
// tmp := AreaToList ( area , i ) ;
63195: LD_ADDR_VAR 0 6
63199: PUSH
63200: LD_VAR 0 2
63204: PPUSH
63205: LD_VAR 0 5
63209: PPUSH
63210: CALL_OW 517
63214: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63215: LD_ADDR_VAR 0 5
63219: PUSH
63220: DOUBLE
63221: LD_INT 1
63223: DEC
63224: ST_TO_ADDR
63225: LD_VAR 0 6
63229: PUSH
63230: LD_INT 1
63232: ARRAY
63233: PUSH
63234: FOR_TO
63235: IFFALSE 63357
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63237: LD_ADDR_VAR 0 7
63241: PUSH
63242: LD_VAR 0 6
63246: PUSH
63247: LD_INT 1
63249: ARRAY
63250: PUSH
63251: LD_VAR 0 5
63255: ARRAY
63256: PUSH
63257: LD_VAR 0 6
63261: PUSH
63262: LD_INT 2
63264: ARRAY
63265: PUSH
63266: LD_VAR 0 5
63270: ARRAY
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63276: LD_VAR 0 7
63280: PUSH
63281: LD_INT 1
63283: ARRAY
63284: PPUSH
63285: LD_VAR 0 7
63289: PUSH
63290: LD_INT 2
63292: ARRAY
63293: PPUSH
63294: CALL_OW 428
63298: PUSH
63299: LD_INT 0
63301: EQUAL
63302: IFFALSE 63355
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63304: LD_VAR 0 1
63308: PPUSH
63309: LD_VAR 0 7
63313: PUSH
63314: LD_INT 1
63316: ARRAY
63317: PPUSH
63318: LD_VAR 0 7
63322: PUSH
63323: LD_INT 2
63325: ARRAY
63326: PPUSH
63327: LD_VAR 0 3
63331: PPUSH
63332: CALL_OW 48
// result := IsPlaced ( unit ) ;
63336: LD_ADDR_VAR 0 4
63340: PUSH
63341: LD_VAR 0 1
63345: PPUSH
63346: CALL_OW 305
63350: ST_TO_ADDR
// exit ;
63351: POP
63352: POP
63353: GO 63359
// end ; end ;
63355: GO 63234
63357: POP
63358: POP
// end ;
63359: LD_VAR 0 4
63363: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63364: LD_INT 0
63366: PPUSH
63367: PPUSH
63368: PPUSH
// if not side or side > 8 then
63369: LD_VAR 0 1
63373: NOT
63374: PUSH
63375: LD_VAR 0 1
63379: PUSH
63380: LD_INT 8
63382: GREATER
63383: OR
63384: IFFALSE 63388
// exit ;
63386: GO 63575
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63388: LD_ADDR_VAR 0 4
63392: PUSH
63393: LD_INT 22
63395: PUSH
63396: LD_VAR 0 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 21
63407: PUSH
63408: LD_INT 3
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PPUSH
63419: CALL_OW 69
63423: ST_TO_ADDR
// if not tmp then
63424: LD_VAR 0 4
63428: NOT
63429: IFFALSE 63433
// exit ;
63431: GO 63575
// enable_addtolog := true ;
63433: LD_ADDR_OWVAR 81
63437: PUSH
63438: LD_INT 1
63440: ST_TO_ADDR
// AddToLog ( [ ) ;
63441: LD_STRING [
63443: PPUSH
63444: CALL_OW 561
// for i in tmp do
63448: LD_ADDR_VAR 0 3
63452: PUSH
63453: LD_VAR 0 4
63457: PUSH
63458: FOR_IN
63459: IFFALSE 63566
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63461: LD_STRING [
63463: PUSH
63464: LD_VAR 0 3
63468: PPUSH
63469: CALL_OW 266
63473: STR
63474: PUSH
63475: LD_STRING , 
63477: STR
63478: PUSH
63479: LD_VAR 0 3
63483: PPUSH
63484: CALL_OW 250
63488: STR
63489: PUSH
63490: LD_STRING , 
63492: STR
63493: PUSH
63494: LD_VAR 0 3
63498: PPUSH
63499: CALL_OW 251
63503: STR
63504: PUSH
63505: LD_STRING , 
63507: STR
63508: PUSH
63509: LD_VAR 0 3
63513: PPUSH
63514: CALL_OW 254
63518: STR
63519: PUSH
63520: LD_STRING , 
63522: STR
63523: PUSH
63524: LD_VAR 0 3
63528: PPUSH
63529: LD_INT 1
63531: PPUSH
63532: CALL_OW 268
63536: STR
63537: PUSH
63538: LD_STRING , 
63540: STR
63541: PUSH
63542: LD_VAR 0 3
63546: PPUSH
63547: LD_INT 2
63549: PPUSH
63550: CALL_OW 268
63554: STR
63555: PUSH
63556: LD_STRING ],
63558: STR
63559: PPUSH
63560: CALL_OW 561
// end ;
63564: GO 63458
63566: POP
63567: POP
// AddToLog ( ]; ) ;
63568: LD_STRING ];
63570: PPUSH
63571: CALL_OW 561
// end ;
63575: LD_VAR 0 2
63579: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63580: LD_INT 0
63582: PPUSH
63583: PPUSH
63584: PPUSH
63585: PPUSH
63586: PPUSH
// if not area or not rate or not max then
63587: LD_VAR 0 1
63591: NOT
63592: PUSH
63593: LD_VAR 0 2
63597: NOT
63598: OR
63599: PUSH
63600: LD_VAR 0 4
63604: NOT
63605: OR
63606: IFFALSE 63610
// exit ;
63608: GO 63802
// while 1 do
63610: LD_INT 1
63612: IFFALSE 63802
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63614: LD_ADDR_VAR 0 9
63618: PUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: LD_INT 1
63626: PPUSH
63627: CALL_OW 287
63631: PUSH
63632: LD_INT 10
63634: MUL
63635: ST_TO_ADDR
// r := rate / 10 ;
63636: LD_ADDR_VAR 0 7
63640: PUSH
63641: LD_VAR 0 2
63645: PUSH
63646: LD_INT 10
63648: DIVREAL
63649: ST_TO_ADDR
// time := 1 1$00 ;
63650: LD_ADDR_VAR 0 8
63654: PUSH
63655: LD_INT 2100
63657: ST_TO_ADDR
// if amount < min then
63658: LD_VAR 0 9
63662: PUSH
63663: LD_VAR 0 3
63667: LESS
63668: IFFALSE 63686
// r := r * 2 else
63670: LD_ADDR_VAR 0 7
63674: PUSH
63675: LD_VAR 0 7
63679: PUSH
63680: LD_INT 2
63682: MUL
63683: ST_TO_ADDR
63684: GO 63712
// if amount > max then
63686: LD_VAR 0 9
63690: PUSH
63691: LD_VAR 0 4
63695: GREATER
63696: IFFALSE 63712
// r := r / 2 ;
63698: LD_ADDR_VAR 0 7
63702: PUSH
63703: LD_VAR 0 7
63707: PUSH
63708: LD_INT 2
63710: DIVREAL
63711: ST_TO_ADDR
// time := time / r ;
63712: LD_ADDR_VAR 0 8
63716: PUSH
63717: LD_VAR 0 8
63721: PUSH
63722: LD_VAR 0 7
63726: DIVREAL
63727: ST_TO_ADDR
// if time < 0 then
63728: LD_VAR 0 8
63732: PUSH
63733: LD_INT 0
63735: LESS
63736: IFFALSE 63753
// time := time * - 1 ;
63738: LD_ADDR_VAR 0 8
63742: PUSH
63743: LD_VAR 0 8
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: MUL
63752: ST_TO_ADDR
// wait ( time ) ;
63753: LD_VAR 0 8
63757: PPUSH
63758: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63762: LD_INT 35
63764: PPUSH
63765: LD_INT 875
63767: PPUSH
63768: CALL_OW 12
63772: PPUSH
63773: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63777: LD_INT 1
63779: PPUSH
63780: LD_INT 5
63782: PPUSH
63783: CALL_OW 12
63787: PPUSH
63788: LD_VAR 0 1
63792: PPUSH
63793: LD_INT 1
63795: PPUSH
63796: CALL_OW 55
// end ;
63800: GO 63610
// end ;
63802: LD_VAR 0 5
63806: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63807: LD_INT 0
63809: PPUSH
63810: PPUSH
63811: PPUSH
63812: PPUSH
63813: PPUSH
63814: PPUSH
63815: PPUSH
63816: PPUSH
// if not turrets or not factories then
63817: LD_VAR 0 1
63821: NOT
63822: PUSH
63823: LD_VAR 0 2
63827: NOT
63828: OR
63829: IFFALSE 63833
// exit ;
63831: GO 64140
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63833: LD_ADDR_VAR 0 10
63837: PUSH
63838: LD_INT 5
63840: PUSH
63841: LD_INT 6
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 4
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 3
63860: PUSH
63861: LD_INT 5
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 24
63875: PUSH
63876: LD_INT 25
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 23
63885: PUSH
63886: LD_INT 27
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 42
63899: PUSH
63900: LD_INT 43
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 44
63909: PUSH
63910: LD_INT 46
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 45
63919: PUSH
63920: LD_INT 47
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: LIST
63936: ST_TO_ADDR
// result := [ ] ;
63937: LD_ADDR_VAR 0 3
63941: PUSH
63942: EMPTY
63943: ST_TO_ADDR
// for i in turrets do
63944: LD_ADDR_VAR 0 4
63948: PUSH
63949: LD_VAR 0 1
63953: PUSH
63954: FOR_IN
63955: IFFALSE 64138
// begin nat := GetNation ( i ) ;
63957: LD_ADDR_VAR 0 7
63961: PUSH
63962: LD_VAR 0 4
63966: PPUSH
63967: CALL_OW 248
63971: ST_TO_ADDR
// weapon := 0 ;
63972: LD_ADDR_VAR 0 8
63976: PUSH
63977: LD_INT 0
63979: ST_TO_ADDR
// if not nat then
63980: LD_VAR 0 7
63984: NOT
63985: IFFALSE 63989
// continue ;
63987: GO 63954
// for j in list [ nat ] do
63989: LD_ADDR_VAR 0 5
63993: PUSH
63994: LD_VAR 0 10
63998: PUSH
63999: LD_VAR 0 7
64003: ARRAY
64004: PUSH
64005: FOR_IN
64006: IFFALSE 64047
// if GetBWeapon ( i ) = j [ 1 ] then
64008: LD_VAR 0 4
64012: PPUSH
64013: CALL_OW 269
64017: PUSH
64018: LD_VAR 0 5
64022: PUSH
64023: LD_INT 1
64025: ARRAY
64026: EQUAL
64027: IFFALSE 64045
// begin weapon := j [ 2 ] ;
64029: LD_ADDR_VAR 0 8
64033: PUSH
64034: LD_VAR 0 5
64038: PUSH
64039: LD_INT 2
64041: ARRAY
64042: ST_TO_ADDR
// break ;
64043: GO 64047
// end ;
64045: GO 64005
64047: POP
64048: POP
// if not weapon then
64049: LD_VAR 0 8
64053: NOT
64054: IFFALSE 64058
// continue ;
64056: GO 63954
// for k in factories do
64058: LD_ADDR_VAR 0 6
64062: PUSH
64063: LD_VAR 0 2
64067: PUSH
64068: FOR_IN
64069: IFFALSE 64134
// begin weapons := AvailableWeaponList ( k ) ;
64071: LD_ADDR_VAR 0 9
64075: PUSH
64076: LD_VAR 0 6
64080: PPUSH
64081: CALL_OW 478
64085: ST_TO_ADDR
// if not weapons then
64086: LD_VAR 0 9
64090: NOT
64091: IFFALSE 64095
// continue ;
64093: GO 64068
// if weapon in weapons then
64095: LD_VAR 0 8
64099: PUSH
64100: LD_VAR 0 9
64104: IN
64105: IFFALSE 64132
// begin result := [ i , weapon ] ;
64107: LD_ADDR_VAR 0 3
64111: PUSH
64112: LD_VAR 0 4
64116: PUSH
64117: LD_VAR 0 8
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// exit ;
64126: POP
64127: POP
64128: POP
64129: POP
64130: GO 64140
// end ; end ;
64132: GO 64068
64134: POP
64135: POP
// end ;
64136: GO 63954
64138: POP
64139: POP
// end ;
64140: LD_VAR 0 3
64144: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64145: LD_INT 0
64147: PPUSH
// if not side or side > 8 then
64148: LD_VAR 0 3
64152: NOT
64153: PUSH
64154: LD_VAR 0 3
64158: PUSH
64159: LD_INT 8
64161: GREATER
64162: OR
64163: IFFALSE 64167
// exit ;
64165: GO 64226
// if not range then
64167: LD_VAR 0 4
64171: NOT
64172: IFFALSE 64183
// range := - 12 ;
64174: LD_ADDR_VAR 0 4
64178: PUSH
64179: LD_INT 12
64181: NEG
64182: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64183: LD_VAR 0 1
64187: PPUSH
64188: LD_VAR 0 2
64192: PPUSH
64193: LD_VAR 0 3
64197: PPUSH
64198: LD_VAR 0 4
64202: PPUSH
64203: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64207: LD_VAR 0 1
64211: PPUSH
64212: LD_VAR 0 2
64216: PPUSH
64217: LD_VAR 0 3
64221: PPUSH
64222: CALL_OW 331
// end ;
64226: LD_VAR 0 5
64230: RET
// export function Video ( mode ) ; begin
64231: LD_INT 0
64233: PPUSH
// ingame_video = mode ;
64234: LD_ADDR_OWVAR 52
64238: PUSH
64239: LD_VAR 0 1
64243: ST_TO_ADDR
// interface_hidden = mode ;
64244: LD_ADDR_OWVAR 54
64248: PUSH
64249: LD_VAR 0 1
64253: ST_TO_ADDR
// end ;
64254: LD_VAR 0 2
64258: RET
// export function Join ( array , element ) ; begin
64259: LD_INT 0
64261: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64262: LD_ADDR_VAR 0 3
64266: PUSH
64267: LD_VAR 0 1
64271: PPUSH
64272: LD_VAR 0 1
64276: PUSH
64277: LD_INT 1
64279: PLUS
64280: PPUSH
64281: LD_VAR 0 2
64285: PPUSH
64286: CALL_OW 1
64290: ST_TO_ADDR
// end ;
64291: LD_VAR 0 3
64295: RET
// export function JoinUnion ( array , element ) ; begin
64296: LD_INT 0
64298: PPUSH
// result := array union element ;
64299: LD_ADDR_VAR 0 3
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_VAR 0 2
64313: UNION
64314: ST_TO_ADDR
// end ;
64315: LD_VAR 0 3
64319: RET
// export function GetBehemoths ( side ) ; begin
64320: LD_INT 0
64322: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: LD_INT 22
64330: PUSH
64331: LD_VAR 0 1
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 31
64342: PUSH
64343: LD_INT 25
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PPUSH
64354: CALL_OW 69
64358: ST_TO_ADDR
// end ;
64359: LD_VAR 0 2
64363: RET
// export function Shuffle ( array ) ; var i , index ; begin
64364: LD_INT 0
64366: PPUSH
64367: PPUSH
64368: PPUSH
// result := [ ] ;
64369: LD_ADDR_VAR 0 2
64373: PUSH
64374: EMPTY
64375: ST_TO_ADDR
// if not array then
64376: LD_VAR 0 1
64380: NOT
64381: IFFALSE 64385
// exit ;
64383: GO 64484
// Randomize ;
64385: CALL_OW 10
// for i = array downto 1 do
64389: LD_ADDR_VAR 0 3
64393: PUSH
64394: DOUBLE
64395: LD_VAR 0 1
64399: INC
64400: ST_TO_ADDR
64401: LD_INT 1
64403: PUSH
64404: FOR_DOWNTO
64405: IFFALSE 64482
// begin index := rand ( 1 , array ) ;
64407: LD_ADDR_VAR 0 4
64411: PUSH
64412: LD_INT 1
64414: PPUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: CALL_OW 12
64424: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64425: LD_ADDR_VAR 0 2
64429: PUSH
64430: LD_VAR 0 2
64434: PPUSH
64435: LD_VAR 0 2
64439: PUSH
64440: LD_INT 1
64442: PLUS
64443: PPUSH
64444: LD_VAR 0 1
64448: PUSH
64449: LD_VAR 0 4
64453: ARRAY
64454: PPUSH
64455: CALL_OW 2
64459: ST_TO_ADDR
// array := Delete ( array , index ) ;
64460: LD_ADDR_VAR 0 1
64464: PUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: LD_VAR 0 4
64474: PPUSH
64475: CALL_OW 3
64479: ST_TO_ADDR
// end ;
64480: GO 64404
64482: POP
64483: POP
// end ;
64484: LD_VAR 0 2
64488: RET
// export function GetBaseMaterials ( base ) ; begin
64489: LD_INT 0
64491: PPUSH
// result := [ 0 , 0 , 0 ] ;
64492: LD_ADDR_VAR 0 2
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: ST_TO_ADDR
// if not base then
64511: LD_VAR 0 1
64515: NOT
64516: IFFALSE 64520
// exit ;
64518: GO 64569
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64520: LD_ADDR_VAR 0 2
64524: PUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: LD_INT 1
64532: PPUSH
64533: CALL_OW 275
64537: PUSH
64538: LD_VAR 0 1
64542: PPUSH
64543: LD_INT 2
64545: PPUSH
64546: CALL_OW 275
64550: PUSH
64551: LD_VAR 0 1
64555: PPUSH
64556: LD_INT 3
64558: PPUSH
64559: CALL_OW 275
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: LIST
64568: ST_TO_ADDR
// end ;
64569: LD_VAR 0 2
64573: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64574: LD_INT 0
64576: PPUSH
64577: PPUSH
// result := array ;
64578: LD_ADDR_VAR 0 3
64582: PUSH
64583: LD_VAR 0 1
64587: ST_TO_ADDR
// if size > 0 then
64588: LD_VAR 0 2
64592: PUSH
64593: LD_INT 0
64595: GREATER
64596: IFFALSE 64642
// for i := array downto size do
64598: LD_ADDR_VAR 0 4
64602: PUSH
64603: DOUBLE
64604: LD_VAR 0 1
64608: INC
64609: ST_TO_ADDR
64610: LD_VAR 0 2
64614: PUSH
64615: FOR_DOWNTO
64616: IFFALSE 64640
// result := Delete ( result , result ) ;
64618: LD_ADDR_VAR 0 3
64622: PUSH
64623: LD_VAR 0 3
64627: PPUSH
64628: LD_VAR 0 3
64632: PPUSH
64633: CALL_OW 3
64637: ST_TO_ADDR
64638: GO 64615
64640: POP
64641: POP
// end ;
64642: LD_VAR 0 3
64646: RET
// export function ComExit ( unit ) ; var tmp ; begin
64647: LD_INT 0
64649: PPUSH
64650: PPUSH
// if not IsInUnit ( unit ) then
64651: LD_VAR 0 1
64655: PPUSH
64656: CALL_OW 310
64660: NOT
64661: IFFALSE 64665
// exit ;
64663: GO 64725
// tmp := IsInUnit ( unit ) ;
64665: LD_ADDR_VAR 0 3
64669: PUSH
64670: LD_VAR 0 1
64674: PPUSH
64675: CALL_OW 310
64679: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64680: LD_VAR 0 3
64684: PPUSH
64685: CALL_OW 247
64689: PUSH
64690: LD_INT 2
64692: EQUAL
64693: IFFALSE 64706
// ComExitVehicle ( unit ) else
64695: LD_VAR 0 1
64699: PPUSH
64700: CALL_OW 121
64704: GO 64715
// ComExitBuilding ( unit ) ;
64706: LD_VAR 0 1
64710: PPUSH
64711: CALL_OW 122
// result := tmp ;
64715: LD_ADDR_VAR 0 2
64719: PUSH
64720: LD_VAR 0 3
64724: ST_TO_ADDR
// end ;
64725: LD_VAR 0 2
64729: RET
// export function ResetHc ; begin
64730: LD_INT 0
64732: PPUSH
// InitHc ;
64733: CALL_OW 19
// hc_importance := 0 ;
64737: LD_ADDR_OWVAR 32
64741: PUSH
64742: LD_INT 0
64744: ST_TO_ADDR
// end ;
64745: LD_VAR 0 1
64749: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64750: LD_INT 0
64752: PPUSH
64753: PPUSH
64754: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64755: LD_ADDR_VAR 0 6
64759: PUSH
64760: LD_VAR 0 1
64764: PUSH
64765: LD_VAR 0 3
64769: PLUS
64770: PUSH
64771: LD_INT 2
64773: DIV
64774: ST_TO_ADDR
// if _x < 0 then
64775: LD_VAR 0 6
64779: PUSH
64780: LD_INT 0
64782: LESS
64783: IFFALSE 64800
// _x := _x * - 1 ;
64785: LD_ADDR_VAR 0 6
64789: PUSH
64790: LD_VAR 0 6
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: MUL
64799: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64800: LD_ADDR_VAR 0 7
64804: PUSH
64805: LD_VAR 0 2
64809: PUSH
64810: LD_VAR 0 4
64814: PLUS
64815: PUSH
64816: LD_INT 2
64818: DIV
64819: ST_TO_ADDR
// if _y < 0 then
64820: LD_VAR 0 7
64824: PUSH
64825: LD_INT 0
64827: LESS
64828: IFFALSE 64845
// _y := _y * - 1 ;
64830: LD_ADDR_VAR 0 7
64834: PUSH
64835: LD_VAR 0 7
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: MUL
64844: ST_TO_ADDR
// result := [ _x , _y ] ;
64845: LD_ADDR_VAR 0 5
64849: PUSH
64850: LD_VAR 0 6
64854: PUSH
64855: LD_VAR 0 7
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// end ;
64864: LD_VAR 0 5
64868: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64869: LD_INT 0
64871: PPUSH
64872: PPUSH
64873: PPUSH
64874: PPUSH
// task := GetTaskList ( unit ) ;
64875: LD_ADDR_VAR 0 7
64879: PUSH
64880: LD_VAR 0 1
64884: PPUSH
64885: CALL_OW 437
64889: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64890: LD_VAR 0 7
64894: NOT
64895: PUSH
64896: LD_VAR 0 1
64900: PPUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: CALL_OW 308
64910: NOT
64911: AND
64912: IFFALSE 64916
// exit ;
64914: GO 65034
// if IsInArea ( unit , area ) then
64916: LD_VAR 0 1
64920: PPUSH
64921: LD_VAR 0 2
64925: PPUSH
64926: CALL_OW 308
64930: IFFALSE 64948
// begin ComMoveToArea ( unit , goAway ) ;
64932: LD_VAR 0 1
64936: PPUSH
64937: LD_VAR 0 3
64941: PPUSH
64942: CALL_OW 113
// exit ;
64946: GO 65034
// end ; if task [ 1 ] [ 1 ] <> M then
64948: LD_VAR 0 7
64952: PUSH
64953: LD_INT 1
64955: ARRAY
64956: PUSH
64957: LD_INT 1
64959: ARRAY
64960: PUSH
64961: LD_STRING M
64963: NONEQUAL
64964: IFFALSE 64968
// exit ;
64966: GO 65034
// x := task [ 1 ] [ 2 ] ;
64968: LD_ADDR_VAR 0 5
64972: PUSH
64973: LD_VAR 0 7
64977: PUSH
64978: LD_INT 1
64980: ARRAY
64981: PUSH
64982: LD_INT 2
64984: ARRAY
64985: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64986: LD_ADDR_VAR 0 6
64990: PUSH
64991: LD_VAR 0 7
64995: PUSH
64996: LD_INT 1
64998: ARRAY
64999: PUSH
65000: LD_INT 3
65002: ARRAY
65003: ST_TO_ADDR
// if InArea ( x , y , area ) then
65004: LD_VAR 0 5
65008: PPUSH
65009: LD_VAR 0 6
65013: PPUSH
65014: LD_VAR 0 2
65018: PPUSH
65019: CALL_OW 309
65023: IFFALSE 65034
// ComStop ( unit ) ;
65025: LD_VAR 0 1
65029: PPUSH
65030: CALL_OW 141
// end ;
65034: LD_VAR 0 4
65038: RET
// export function Abs ( value ) ; begin
65039: LD_INT 0
65041: PPUSH
// result := value ;
65042: LD_ADDR_VAR 0 2
65046: PUSH
65047: LD_VAR 0 1
65051: ST_TO_ADDR
// if value < 0 then
65052: LD_VAR 0 1
65056: PUSH
65057: LD_INT 0
65059: LESS
65060: IFFALSE 65077
// result := value * - 1 ;
65062: LD_ADDR_VAR 0 2
65066: PUSH
65067: LD_VAR 0 1
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: MUL
65076: ST_TO_ADDR
// end ;
65077: LD_VAR 0 2
65081: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65082: LD_INT 0
65084: PPUSH
65085: PPUSH
65086: PPUSH
65087: PPUSH
65088: PPUSH
65089: PPUSH
65090: PPUSH
65091: PPUSH
// if not unit or not building then
65092: LD_VAR 0 1
65096: NOT
65097: PUSH
65098: LD_VAR 0 2
65102: NOT
65103: OR
65104: IFFALSE 65108
// exit ;
65106: GO 65334
// x := GetX ( building ) ;
65108: LD_ADDR_VAR 0 4
65112: PUSH
65113: LD_VAR 0 2
65117: PPUSH
65118: CALL_OW 250
65122: ST_TO_ADDR
// y := GetY ( building ) ;
65123: LD_ADDR_VAR 0 6
65127: PUSH
65128: LD_VAR 0 2
65132: PPUSH
65133: CALL_OW 251
65137: ST_TO_ADDR
// d := GetDir ( building ) ;
65138: LD_ADDR_VAR 0 8
65142: PUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: CALL_OW 254
65152: ST_TO_ADDR
// r := 4 ;
65153: LD_ADDR_VAR 0 9
65157: PUSH
65158: LD_INT 4
65160: ST_TO_ADDR
// for i := 1 to 5 do
65161: LD_ADDR_VAR 0 10
65165: PUSH
65166: DOUBLE
65167: LD_INT 1
65169: DEC
65170: ST_TO_ADDR
65171: LD_INT 5
65173: PUSH
65174: FOR_TO
65175: IFFALSE 65332
// begin _x := ShiftX ( x , d , r + i ) ;
65177: LD_ADDR_VAR 0 5
65181: PUSH
65182: LD_VAR 0 4
65186: PPUSH
65187: LD_VAR 0 8
65191: PPUSH
65192: LD_VAR 0 9
65196: PUSH
65197: LD_VAR 0 10
65201: PLUS
65202: PPUSH
65203: CALL_OW 272
65207: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65208: LD_ADDR_VAR 0 7
65212: PUSH
65213: LD_VAR 0 6
65217: PPUSH
65218: LD_VAR 0 8
65222: PPUSH
65223: LD_VAR 0 9
65227: PUSH
65228: LD_VAR 0 10
65232: PLUS
65233: PPUSH
65234: CALL_OW 273
65238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65239: LD_VAR 0 5
65243: PPUSH
65244: LD_VAR 0 7
65248: PPUSH
65249: CALL_OW 488
65253: PUSH
65254: LD_VAR 0 5
65258: PPUSH
65259: LD_VAR 0 7
65263: PPUSH
65264: CALL_OW 428
65268: PPUSH
65269: CALL_OW 247
65273: PUSH
65274: LD_INT 3
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: IN
65284: NOT
65285: AND
65286: IFFALSE 65330
// begin ComMoveXY ( unit , _x , _y ) ;
65288: LD_VAR 0 1
65292: PPUSH
65293: LD_VAR 0 5
65297: PPUSH
65298: LD_VAR 0 7
65302: PPUSH
65303: CALL_OW 111
// result := [ _x , _y ] ;
65307: LD_ADDR_VAR 0 3
65311: PUSH
65312: LD_VAR 0 5
65316: PUSH
65317: LD_VAR 0 7
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: ST_TO_ADDR
// exit ;
65326: POP
65327: POP
65328: GO 65334
// end ; end ;
65330: GO 65174
65332: POP
65333: POP
// end ;
65334: LD_VAR 0 3
65338: RET
