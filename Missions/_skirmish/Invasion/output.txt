// starting begin InitMessageWindow ;
   0: CALL 2932 0 0
// InitGame ;
   4: CALL 3153 0 0
// InitDisplay ;
   8: CALL 9654 0 0
// end ; end_of_file
  12: END
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// if pos < 1 then
  19: LD_VAR 0 2
  23: PUSH
  24: LD_INT 1
  26: LESS
  27: IFFALSE 31
// exit ;
  29: GO 334
// if pos = 1 then
  31: LD_VAR 0 2
  35: PUSH
  36: LD_INT 1
  38: EQUAL
  39: IFFALSE 72
// result := Replace ( arr , pos [ 1 ] , value ) else
  41: LD_ADDR_VAR 0 4
  45: PUSH
  46: LD_VAR 0 1
  50: PPUSH
  51: LD_VAR 0 2
  55: PUSH
  56: LD_INT 1
  58: ARRAY
  59: PPUSH
  60: LD_VAR 0 3
  64: PPUSH
  65: CALL_OW 1
  69: ST_TO_ADDR
  70: GO 334
// begin tmp := arr ;
  72: LD_ADDR_VAR 0 6
  76: PUSH
  77: LD_VAR 0 1
  81: ST_TO_ADDR
// s_arr := [ tmp ] ;
  82: LD_ADDR_VAR 0 7
  86: PUSH
  87: LD_VAR 0 6
  91: PUSH
  92: EMPTY
  93: LIST
  94: ST_TO_ADDR
// for i = 1 to pos - 1 do
  95: LD_ADDR_VAR 0 5
  99: PUSH
 100: DOUBLE
 101: LD_INT 1
 103: DEC
 104: ST_TO_ADDR
 105: LD_VAR 0 2
 109: PUSH
 110: LD_INT 1
 112: MINUS
 113: PUSH
 114: FOR_TO
 115: IFFALSE 160
// begin tmp := tmp [ pos [ i ] ] ;
 117: LD_ADDR_VAR 0 6
 121: PUSH
 122: LD_VAR 0 6
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: LD_VAR 0 5
 136: ARRAY
 137: ARRAY
 138: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 139: LD_ADDR_VAR 0 7
 143: PUSH
 144: LD_VAR 0 7
 148: PUSH
 149: LD_VAR 0 6
 153: PUSH
 154: EMPTY
 155: LIST
 156: ADD
 157: ST_TO_ADDR
// end ;
 158: GO 114
 160: POP
 161: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 162: LD_ADDR_VAR 0 6
 166: PUSH
 167: LD_VAR 0 6
 171: PPUSH
 172: LD_VAR 0 2
 176: PUSH
 177: LD_VAR 0 2
 181: ARRAY
 182: PPUSH
 183: LD_VAR 0 3
 187: PPUSH
 188: CALL_OW 1
 192: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 193: LD_ADDR_VAR 0 7
 197: PUSH
 198: LD_VAR 0 7
 202: PPUSH
 203: LD_VAR 0 7
 207: PPUSH
 208: LD_VAR 0 6
 212: PPUSH
 213: CALL_OW 1
 217: ST_TO_ADDR
// for i = s_arr downto 2 do
 218: LD_ADDR_VAR 0 5
 222: PUSH
 223: DOUBLE
 224: LD_VAR 0 7
 228: INC
 229: ST_TO_ADDR
 230: LD_INT 2
 232: PUSH
 233: FOR_DOWNTO
 234: IFFALSE 318
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
 236: LD_ADDR_VAR 0 6
 240: PUSH
 241: LD_VAR 0 7
 245: PUSH
 246: LD_VAR 0 5
 250: PUSH
 251: LD_INT 1
 253: MINUS
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 2
 260: PUSH
 261: LD_VAR 0 5
 265: PUSH
 266: LD_INT 1
 268: MINUS
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 7
 275: PUSH
 276: LD_VAR 0 5
 280: ARRAY
 281: PPUSH
 282: CALL_OW 1
 286: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
 287: LD_ADDR_VAR 0 7
 291: PUSH
 292: LD_VAR 0 7
 296: PPUSH
 297: LD_VAR 0 5
 301: PUSH
 302: LD_INT 1
 304: MINUS
 305: PPUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 1
 315: ST_TO_ADDR
// end ;
 316: GO 233
 318: POP
 319: POP
// result := s_arr [ 1 ] ;
 320: LD_ADDR_VAR 0 4
 324: PUSH
 325: LD_VAR 0 7
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: ST_TO_ADDR
// end ; end ;
 334: LD_VAR 0 4
 338: RET
// export function PrepareSquad ( nation , skill , num , x , y ) ; var i , team , c ; begin
 339: LD_INT 0
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
// team := [ ] ;
 345: LD_ADDR_VAR 0 8
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// playerSquad := [ ] ;
 352: LD_ADDR_EXP 12
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// uc_side := nation ;
 359: LD_ADDR_OWVAR 20
 363: PUSH
 364: LD_VAR 0 1
 368: ST_TO_ADDR
// uc_nation := nation ;
 369: LD_ADDR_OWVAR 21
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// hc_importance := 100 ;
 379: LD_ADDR_OWVAR 32
 383: PUSH
 384: LD_INT 100
 386: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 387: LD_INT 0
 389: PPUSH
 390: LD_INT 1
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 380
// team := Insert ( team , 1 , CreateHuman ) ;
 402: LD_ADDR_VAR 0 8
 406: PUSH
 407: LD_VAR 0 8
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 44
 419: PPUSH
 420: CALL_OW 2
 424: ST_TO_ADDR
// hc_importance := 0 ;
 425: LD_ADDR_OWVAR 32
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to num - 1 do
 433: LD_ADDR_VAR 0 7
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 1
 450: MINUS
 451: PUSH
 452: FOR_TO
 453: IFFALSE 511
// begin PrepareHuman ( false , i div ( num / 4 ) + 1 , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 7
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 4
 470: DIVREAL
 471: DIV
 472: PUSH
 473: LD_INT 1
 475: PLUS
 476: PPUSH
 477: LD_VAR 0 2
 481: PPUSH
 482: CALL_OW 380
// team := Insert ( team , 2 , CreateHuman ) ;
 486: LD_ADDR_VAR 0 8
 490: PUSH
 491: LD_VAR 0 8
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 44
 503: PPUSH
 504: CALL_OW 2
 508: ST_TO_ADDR
// end ;
 509: GO 452
 511: POP
 512: POP
// for i in team do
 513: LD_ADDR_VAR 0 7
 517: PUSH
 518: LD_VAR 0 8
 522: PUSH
 523: FOR_IN
 524: IFFALSE 623
// begin PlaceUnitXYR ( i , x , y , 8 , false ) ;
 526: LD_VAR 0 7
 530: PPUSH
 531: LD_VAR 0 4
 535: PPUSH
 536: LD_VAR 0 5
 540: PPUSH
 541: LD_INT 8
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL_OW 50
// c := c + 1 ;
 551: LD_ADDR_VAR 0 9
 555: PUSH
 556: LD_VAR 0 9
 560: PUSH
 561: LD_INT 1
 563: PLUS
 564: ST_TO_ADDR
// SaveCharacters ( i , grave & c ) ;
 565: LD_VAR 0 7
 569: PPUSH
 570: LD_STRING grave
 572: PUSH
 573: LD_VAR 0 9
 577: STR
 578: PPUSH
 579: CALL_OW 38
// playerSquad := Insert ( playerSquad , c , [ i , grave & c ] ) ;
 583: LD_ADDR_EXP 12
 587: PUSH
 588: LD_EXP 12
 592: PPUSH
 593: LD_VAR 0 9
 597: PPUSH
 598: LD_VAR 0 7
 602: PUSH
 603: LD_STRING grave
 605: PUSH
 606: LD_VAR 0 9
 610: STR
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PPUSH
 616: CALL_OW 2
 620: ST_TO_ADDR
// end ;
 621: GO 523
 623: POP
 624: POP
// end ;
 625: LD_VAR 0 6
 629: RET
// export function PrepareResources ( num , type_allowed , x , y , r ) ; var i , n ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
// for i = 1 to type_allowed do
 635: LD_ADDR_VAR 0 7
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 790
// while ( num [ i ] > 0 ) do
 653: LD_VAR 0 1
 657: PUSH
 658: LD_VAR 0 7
 662: ARRAY
 663: PUSH
 664: LD_INT 0
 666: GREATER
 667: IFFALSE 788
// begin if num [ i ] > 5 then
 669: LD_VAR 0 1
 673: PUSH
 674: LD_VAR 0 7
 678: ARRAY
 679: PUSH
 680: LD_INT 5
 682: GREATER
 683: IFFALSE 695
// n := 5 else
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_INT 5
 692: ST_TO_ADDR
 693: GO 711
// n := num [ i ] ;
 695: LD_ADDR_VAR 0 8
 699: PUSH
 700: LD_VAR 0 1
 704: PUSH
 705: LD_VAR 0 7
 709: ARRAY
 710: ST_TO_ADDR
// CreateResourcesXYR ( type_allowed [ i ] , n , x , y , r , false ) ;
 711: LD_VAR 0 2
 715: PUSH
 716: LD_VAR 0 7
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 8
 726: PPUSH
 727: LD_VAR 0 3
 731: PPUSH
 732: LD_VAR 0 4
 736: PPUSH
 737: LD_VAR 0 5
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 60
// num := Replace ( num , i , num [ i ] - n ) ;
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_VAR 0 1
 758: PPUSH
 759: LD_VAR 0 7
 763: PPUSH
 764: LD_VAR 0 1
 768: PUSH
 769: LD_VAR 0 7
 773: ARRAY
 774: PUSH
 775: LD_VAR 0 8
 779: MINUS
 780: PPUSH
 781: CALL_OW 1
 785: ST_TO_ADDR
// end ;
 786: GO 653
 788: GO 650
 790: POP
 791: POP
// end ;
 792: LD_VAR 0 6
 796: RET
// export function AddPoints ( p ) ; begin
 797: LD_INT 0
 799: PPUSH
// points := points + p ;
 800: LD_ADDR_EXP 2
 804: PUSH
 805: LD_EXP 2
 809: PUSH
 810: LD_VAR 0 1
 814: PLUS
 815: ST_TO_ADDR
// end ;
 816: LD_VAR 0 2
 820: RET
// export function LoadColors ; var file ; begin
 821: LD_INT 0
 823: PPUSH
 824: PPUSH
// case GetMonth of 1 .. 3 , 12 :
 825: CALL_OW 545
 829: PUSH
 830: LD_INT 1
 832: DOUBLE
 833: GREATEREQUAL
 834: IFFALSE 842
 836: LD_INT 3
 838: DOUBLE
 839: LESSEQUAL
 840: IFTRUE 850
 842: LD_INT 12
 844: DOUBLE
 845: EQUAL
 846: IFTRUE 850
 848: GO 861
 850: POP
// file = colors.txt ; 4 .. 5 :
 851: LD_ADDR_VAR 0 2
 855: PUSH
 856: LD_STRING colors.txt
 858: ST_TO_ADDR
 859: GO 937
 861: LD_INT 4
 863: DOUBLE
 864: GREATEREQUAL
 865: IFFALSE 873
 867: LD_INT 5
 869: DOUBLE
 870: LESSEQUAL
 871: IFTRUE 875
 873: GO 886
 875: POP
// file = colors-spring.txt ; 6 .. 8 :
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_STRING colors-spring.txt
 883: ST_TO_ADDR
 884: GO 937
 886: LD_INT 6
 888: DOUBLE
 889: GREATEREQUAL
 890: IFFALSE 898
 892: LD_INT 8
 894: DOUBLE
 895: LESSEQUAL
 896: IFTRUE 900
 898: GO 911
 900: POP
// file = colors-summer.txt ; 9 .. 11 :
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: LD_STRING colors-summer.txt
 908: ST_TO_ADDR
 909: GO 937
 911: LD_INT 9
 913: DOUBLE
 914: GREATEREQUAL
 915: IFFALSE 923
 917: LD_INT 11
 919: DOUBLE
 920: LESSEQUAL
 921: IFTRUE 925
 923: GO 936
 925: POP
// file = colors-autumn.txt ; end ;
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: LD_STRING colors-autumn.txt
 933: ST_TO_ADDR
 934: GO 937
 936: POP
// LoadColorsTxt ( file ) ;
 937: LD_VAR 0 2
 941: PPUSH
 942: CALL_OW 544
// end ;
 946: LD_VAR 0 1
 950: RET
// export function TestColor ; var i ; begin
 951: LD_INT 0
 953: PPUSH
 954: PPUSH
// i = 1 ;
 955: LD_ADDR_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ST_TO_ADDR
// repeat begin wait ( 0 0$01 ) ;
 963: LD_INT 35
 965: PPUSH
 966: CALL_OW 67
// LoadColorsTxt ( [ colors-spring.txt , colors-summer.txt , colors-autumn.txt , colors.txt ] [ i mod 4 + 1 ] ) ;
 970: LD_STRING colors-spring.txt
 972: PUSH
 973: LD_STRING colors-summer.txt
 975: PUSH
 976: LD_STRING colors-autumn.txt
 978: PUSH
 979: LD_STRING colors.txt
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 4
 995: MOD
 996: PUSH
 997: LD_INT 1
 999: PLUS
1000: ARRAY
1001: PPUSH
1002: CALL_OW 544
// display_strings := [ Wiosna , Lato , Jesien , Zima ] [ i mod 4 + 1 ] ;
1006: LD_ADDR_OWVAR 47
1010: PUSH
1011: LD_STRING Wiosna
1013: PUSH
1014: LD_STRING Lato
1016: PUSH
1017: LD_STRING Jesien
1019: PUSH
1020: LD_STRING Zima
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: LD_INT 4
1036: MOD
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: ST_TO_ADDR
// i := i + 1 ;
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ST_TO_ADDR
// end until false ;
1057: LD_INT 0
1059: IFFALSE 963
// end ;
1061: LD_VAR 0 1
1065: RET
// function FindDir ( x1 , y1 , x2 , y2 ) ; begin
1066: LD_INT 0
1068: PPUSH
// if x1 = x2 and y1 > y2 then
1069: LD_VAR 0 1
1073: PUSH
1074: LD_VAR 0 3
1078: EQUAL
1079: PUSH
1080: LD_VAR 0 2
1084: PUSH
1085: LD_VAR 0 4
1089: GREATER
1090: AND
1091: IFFALSE 1101
// result := 0 ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_INT 0
1100: ST_TO_ADDR
// if x1 < x2 and y1 = y2 then
1101: LD_VAR 0 1
1105: PUSH
1106: LD_VAR 0 3
1110: LESS
1111: PUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_VAR 0 4
1121: EQUAL
1122: AND
1123: IFFALSE 1133
// result := 1 ;
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// if x1 < x2 and y1 < y2 then
1133: LD_VAR 0 1
1137: PUSH
1138: LD_VAR 0 3
1142: LESS
1143: PUSH
1144: LD_VAR 0 2
1148: PUSH
1149: LD_VAR 0 4
1153: LESS
1154: AND
1155: IFFALSE 1165
// result := 2 ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_INT 2
1164: ST_TO_ADDR
// if x1 = x2 and y1 < y2 then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_VAR 0 3
1174: EQUAL
1175: PUSH
1176: LD_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: LESS
1186: AND
1187: IFFALSE 1197
// result := 3 ;
1189: LD_ADDR_VAR 0 5
1193: PUSH
1194: LD_INT 3
1196: ST_TO_ADDR
// if x1 > x2 and y1 = y2 then
1197: LD_VAR 0 1
1201: PUSH
1202: LD_VAR 0 3
1206: GREATER
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 4
1217: EQUAL
1218: AND
1219: IFFALSE 1229
// result := 4 ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: LD_INT 4
1228: ST_TO_ADDR
// if x1 > x2 and y1 > y2 then
1229: LD_VAR 0 1
1233: PUSH
1234: LD_VAR 0 3
1238: GREATER
1239: PUSH
1240: LD_VAR 0 2
1244: PUSH
1245: LD_VAR 0 4
1249: GREATER
1250: AND
1251: IFFALSE 1261
// result := 5 ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_INT 5
1260: ST_TO_ADDR
// end ;
1261: LD_VAR 0 5
1265: RET
// export function SetTeamExp ( amount ) ; var i , team , pep ; begin
1266: LD_INT 0
1268: PPUSH
1269: PPUSH
1270: PPUSH
1271: PPUSH
// team := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_INT 22
1279: PUSH
1280: LD_OWVAR 2
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 21
1291: PUSH
1292: LD_INT 1
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: ST_TO_ADDR
// for i = 1 to amount do
1308: LD_ADDR_VAR 0 3
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 1
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1405
// begin pep := rand ( 1 , team ) ;
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_INT 1
1333: PPUSH
1334: LD_VAR 0 4
1338: PPUSH
1339: CALL_OW 12
1343: ST_TO_ADDR
// AddExperience ( team [ pep ] , rand ( 1 , 4 ) , rand ( 1000 , 10000 ) ) ;
1344: LD_VAR 0 4
1348: PUSH
1349: LD_VAR 0 5
1353: ARRAY
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 12
1365: PPUSH
1366: LD_INT 1000
1368: PPUSH
1369: LD_INT 10000
1371: PPUSH
1372: CALL_OW 12
1376: PPUSH
1377: CALL_OW 492
// team := team diff team [ pep ] ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_VAR 0 4
1395: PUSH
1396: LD_VAR 0 5
1400: ARRAY
1401: DIFF
1402: ST_TO_ADDR
// end ;
1403: GO 1323
1405: POP
1406: POP
// end ;
1407: LD_VAR 0 2
1411: RET
// export function PrepareGuards ( strenght ) ; var i , un , area , base_area , points , p , x , y , c , tmp ; begin
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
1416: PPUSH
1417: PPUSH
1418: PPUSH
1419: PPUSH
1420: PPUSH
1421: PPUSH
1422: PPUSH
1423: PPUSH
1424: PPUSH
// area := AreaToList ( guardDir , 0 ) ;
1425: LD_ADDR_VAR 0 5
1429: PUSH
1430: LD_INT 7
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// base_area := AreaToList ( guardArea , 0 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_INT 6
1448: PPUSH
1449: LD_INT 0
1451: PPUSH
1452: CALL_OW 517
1456: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
1457: LD_ADDR_VAR 0 3
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1559
// begin points := Replace ( points , points + 1 , area [ 1 ] [ i ] ) ;
1479: LD_ADDR_VAR 0 7
1483: PUSH
1484: LD_VAR 0 7
1488: PPUSH
1489: LD_VAR 0 7
1493: PUSH
1494: LD_INT 1
1496: PLUS
1497: PPUSH
1498: LD_VAR 0 5
1502: PUSH
1503: LD_INT 1
1505: ARRAY
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PPUSH
1513: CALL_OW 1
1517: ST_TO_ADDR
// points := Replace ( points , points + 1 , area [ 2 ] [ i ] ) ;
1518: LD_ADDR_VAR 0 7
1522: PUSH
1523: LD_VAR 0 7
1527: PPUSH
1528: LD_VAR 0 7
1532: PUSH
1533: LD_INT 1
1535: PLUS
1536: PPUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_INT 2
1544: ARRAY
1545: PUSH
1546: LD_VAR 0 3
1550: ARRAY
1551: PPUSH
1552: CALL_OW 1
1556: ST_TO_ADDR
// end ;
1557: GO 1476
1559: POP
1560: POP
// uc_side := 4 ;
1561: LD_ADDR_OWVAR 20
1565: PUSH
1566: LD_INT 4
1568: ST_TO_ADDR
// case strenght of 1 .. 10 :
1569: LD_VAR 0 1
1573: PUSH
1574: LD_INT 1
1576: DOUBLE
1577: GREATEREQUAL
1578: IFFALSE 1586
1580: LD_INT 10
1582: DOUBLE
1583: LESSEQUAL
1584: IFTRUE 1588
1586: GO 1650
1588: POP
// begin uc_nation := 0 ;
1589: LD_ADDR_OWVAR 21
1593: PUSH
1594: LD_INT 0
1596: ST_TO_ADDR
// for i = 1 to 20 do
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: DOUBLE
1603: LD_INT 1
1605: DEC
1606: ST_TO_ADDR
1607: LD_INT 20
1609: PUSH
1610: FOR_TO
1611: IFFALSE 1646
// begin PrepareHuman ( false , class_apeman_soldier , strenght ) ;
1613: LD_INT 0
1615: PPUSH
1616: LD_INT 15
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 380
// result := result ^ CreateHuman ;
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: CALL_OW 44
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1610
1646: POP
1647: POP
// end ; 11 .. 40 :
1648: GO 1837
1650: LD_INT 11
1652: DOUBLE
1653: GREATEREQUAL
1654: IFFALSE 1662
1656: LD_INT 40
1658: DOUBLE
1659: LESSEQUAL
1660: IFTRUE 1664
1662: GO 1743
1664: POP
// begin uc_nation := 1 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 1
1672: ST_TO_ADDR
// for i = 1 to 20 do
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 20
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1739
// begin vc_chassis := us_medium_tracked ;
1689: LD_ADDR_OWVAR 37
1693: PUSH
1694: LD_INT 3
1696: ST_TO_ADDR
// vc_engine := engine_siberite ;
1697: LD_ADDR_OWVAR 39
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// vc_control := control_computer ;
1705: LD_ADDR_OWVAR 38
1709: PUSH
1710: LD_INT 3
1712: ST_TO_ADDR
// vc_weapon := us_laser ;
1713: LD_ADDR_OWVAR 40
1717: PUSH
1718: LD_INT 9
1720: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: CALL_OW 45
1735: ADD
1736: ST_TO_ADDR
// end ;
1737: GO 1686
1739: POP
1740: POP
// end ; 41 .. 100 :
1741: GO 1837
1743: LD_INT 41
1745: DOUBLE
1746: GREATEREQUAL
1747: IFFALSE 1755
1749: LD_INT 100
1751: DOUBLE
1752: LESSEQUAL
1753: IFTRUE 1757
1755: GO 1836
1757: POP
// begin uc_nation := 1 ;
1758: LD_ADDR_OWVAR 21
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// for i = 1 to 20 do
1766: LD_ADDR_VAR 0 3
1770: PUSH
1771: DOUBLE
1772: LD_INT 1
1774: DEC
1775: ST_TO_ADDR
1776: LD_INT 20
1778: PUSH
1779: FOR_TO
1780: IFFALSE 1832
// begin vc_chassis := us_morphling ;
1782: LD_ADDR_OWVAR 37
1786: PUSH
1787: LD_INT 5
1789: ST_TO_ADDR
// vc_engine := engine_siberite ;
1790: LD_ADDR_OWVAR 39
1794: PUSH
1795: LD_INT 3
1797: ST_TO_ADDR
// vc_control := control_computer ;
1798: LD_ADDR_OWVAR 38
1802: PUSH
1803: LD_INT 3
1805: ST_TO_ADDR
// vc_weapon := us_double_laser ;
1806: LD_ADDR_OWVAR 40
1810: PUSH
1811: LD_INT 10
1813: ST_TO_ADDR
// result := result ^ CreateVehicle ;
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: CALL_OW 45
1828: ADD
1829: ST_TO_ADDR
// end ;
1830: GO 1779
1832: POP
1833: POP
// end ; end ;
1834: GO 1837
1836: POP
// for i in result do
1837: LD_ADDR_VAR 0 3
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: FOR_IN
1848: IFFALSE 2065
// begin x := base_area [ 1 ] [ 1 ] ;
1850: LD_ADDR_VAR 0 9
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: LD_INT 1
1862: ARRAY
1863: PUSH
1864: LD_INT 1
1866: ARRAY
1867: ST_TO_ADDR
// y := base_area [ 2 ] [ 1 ] ;
1868: LD_ADDR_VAR 0 10
1872: PUSH
1873: LD_VAR 0 6
1877: PUSH
1878: LD_INT 2
1880: ARRAY
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: ST_TO_ADDR
// p := FindNearestPoint ( points , x , y ) ;
1886: LD_ADDR_VAR 0 8
1890: PUSH
1891: LD_VAR 0 7
1895: PPUSH
1896: LD_VAR 0 9
1900: PPUSH
1901: LD_VAR 0 10
1905: PPUSH
1906: CALL_OW 439
1910: ST_TO_ADDR
// SetDir ( i , FindDir ( x , y , p [ 1 ] , p [ 2 ] ) ) ;
1911: LD_VAR 0 3
1915: PPUSH
1916: LD_VAR 0 9
1920: PPUSH
1921: LD_VAR 0 10
1925: PPUSH
1926: LD_VAR 0 8
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_VAR 0 8
1939: PUSH
1940: LD_INT 2
1942: ARRAY
1943: PPUSH
1944: CALL 1066 0 4
1948: PPUSH
1949: CALL_OW 233
// PlaceUnitXY ( i , x , y , true ) ;
1953: LD_VAR 0 3
1957: PPUSH
1958: LD_VAR 0 9
1962: PPUSH
1963: LD_VAR 0 10
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: CALL_OW 48
// ComHold ( i ) ;
1975: LD_VAR 0 3
1979: PPUSH
1980: CALL_OW 140
// for c = 1 to 2 do
1984: LD_ADDR_VAR 0 11
1988: PUSH
1989: DOUBLE
1990: LD_INT 1
1992: DEC
1993: ST_TO_ADDR
1994: LD_INT 2
1996: PUSH
1997: FOR_TO
1998: IFFALSE 2061
// begin tmp := base_area [ c ] ;
2000: LD_ADDR_VAR 0 12
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_VAR 0 11
2014: ARRAY
2015: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
2016: LD_ADDR_VAR 0 12
2020: PUSH
2021: LD_VAR 0 12
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: CALL_OW 3
2033: ST_TO_ADDR
// base_area := Replace ( base_area , c , tmp ) ;
2034: LD_ADDR_VAR 0 6
2038: PUSH
2039: LD_VAR 0 6
2043: PPUSH
2044: LD_VAR 0 11
2048: PPUSH
2049: LD_VAR 0 12
2053: PPUSH
2054: CALL_OW 1
2058: ST_TO_ADDR
// end ;
2059: GO 1997
2061: POP
2062: POP
// end ;
2063: GO 1847
2065: POP
2066: POP
// end ;
2067: LD_VAR 0 2
2071: RET
// export function GetBack ( ) ; var i , c , un , new ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// if graveyard = 0 then
2079: LD_EXP 8
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2091
// exit ;
2089: GO 2254
// i := rand ( 1 , graveyard ) ;
2091: LD_ADDR_VAR 0 2
2095: PUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_EXP 8
2103: PPUSH
2104: CALL_OW 12
2108: ST_TO_ADDR
// un := graveyard [ i ] ;
2109: LD_ADDR_VAR 0 4
2113: PUSH
2114: LD_EXP 8
2118: PUSH
2119: LD_VAR 0 2
2123: ARRAY
2124: ST_TO_ADDR
// for c in playerSquad do
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: LD_EXP 12
2134: PUSH
2135: FOR_IN
2136: IFFALSE 2172
// if un = c [ 1 ] then
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: EQUAL
2152: IFFALSE 2170
// begin new := c [ 2 ] ;
2154: LD_ADDR_VAR 0 5
2158: PUSH
2159: LD_VAR 0 3
2163: PUSH
2164: LD_INT 2
2166: ARRAY
2167: ST_TO_ADDR
// break ;
2168: GO 2172
// end ;
2170: GO 2135
2172: POP
2173: POP
// uc_side := your_side ;
2174: LD_ADDR_OWVAR 20
2178: PUSH
2179: LD_OWVAR 2
2183: ST_TO_ADDR
// uc_nation := playerNation ;
2184: LD_ADDR_OWVAR 21
2188: PUSH
2189: LD_EXP 6
2193: ST_TO_ADDR
// un := CreateCharacter ( new ) ;
2194: LD_ADDR_VAR 0 4
2198: PUSH
2199: LD_VAR 0 5
2203: PPUSH
2204: CALL_OW 34
2208: ST_TO_ADDR
// PlaceUnitXYR ( un , base_x , base_y , 10 , true ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_EXP 9
2218: PPUSH
2219: LD_EXP 10
2223: PPUSH
2224: LD_INT 10
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 50
// graveyard := Delete ( graveyard , i ) ;
2234: LD_ADDR_EXP 8
2238: PUSH
2239: LD_EXP 8
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: CALL_OW 3
2253: ST_TO_ADDR
// end ;
2254: LD_VAR 0 1
2258: RET
// export function ComEspace ( un ) ; begin
2259: LD_INT 0
2261: PPUSH
// if not IsInArea ( un , zoneOut ) then
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 308
2274: NOT
2275: IFFALSE 2291
// ComMoveToArea ( un , zoneOut ) else
2277: LD_VAR 0 1
2281: PPUSH
2282: LD_INT 4
2284: PPUSH
2285: CALL_OW 113
2289: GO 2300
// RemoveUnit ( un ) ;
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 64
// end ;
2300: LD_VAR 0 2
2304: RET
// export function ComSpecMove ( un , area ) ; var list , new_list , i , x ; begin
2305: LD_INT 0
2307: PPUSH
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// list := AreaToList ( area , 0 ) ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 517
2329: ST_TO_ADDR
// if not list then
2330: LD_VAR 0 4
2334: NOT
2335: IFFALSE 2339
// exit ;
2337: GO 2501
// for i = 1 to list do
2339: LD_ADDR_VAR 0 6
2343: PUSH
2344: DOUBLE
2345: LD_INT 1
2347: DEC
2348: ST_TO_ADDR
2349: LD_VAR 0 4
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2437
// begin new_list := Replace ( new_list , new_list + 1 , list [ 1 ] [ i ] ) ;
2357: LD_ADDR_VAR 0 5
2361: PUSH
2362: LD_VAR 0 5
2366: PPUSH
2367: LD_VAR 0 5
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PUSH
2385: LD_VAR 0 6
2389: ARRAY
2390: PPUSH
2391: CALL_OW 1
2395: ST_TO_ADDR
// new_list := Replace ( new_list , new_list + 1 , list [ 2 ] [ i ] ) ;
2396: LD_ADDR_VAR 0 5
2400: PUSH
2401: LD_VAR 0 5
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: PLUS
2414: PPUSH
2415: LD_VAR 0 4
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PUSH
2424: LD_VAR 0 6
2428: ARRAY
2429: PPUSH
2430: CALL_OW 1
2434: ST_TO_ADDR
// end ;
2435: GO 2354
2437: POP
2438: POP
// x := FindNearestPoint ( new_list , GetX ( un ) , GetY ( un ) ) ;
2439: LD_ADDR_VAR 0 7
2443: PUSH
2444: LD_VAR 0 5
2448: PPUSH
2449: LD_VAR 0 1
2453: PPUSH
2454: CALL_OW 250
2458: PPUSH
2459: LD_VAR 0 1
2463: PPUSH
2464: CALL_OW 251
2468: PPUSH
2469: CALL_OW 439
2473: ST_TO_ADDR
// ComMoveXY ( un , x [ 1 ] , x [ 2 ] ) ;
2474: LD_VAR 0 1
2478: PPUSH
2479: LD_VAR 0 7
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 7
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: CALL_OW 111
// end ;
2501: LD_VAR 0 3
2505: RET
// export function ExplodeVehicle ( un ) ; var i , timer ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
// timer := rand ( 2 , 5 ) ;
2511: LD_ADDR_VAR 0 4
2515: PUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 5
2521: PPUSH
2522: CALL_OW 12
2526: ST_TO_ADDR
// while ( timer > 0 ) do
2527: LD_VAR 0 4
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: IFFALSE 2574
// begin SetUnitDisplayNumber ( un , timer ) ;
2537: LD_VAR 0 1
2541: PPUSH
2542: LD_VAR 0 4
2546: PPUSH
2547: CALL_OW 505
// timer := timer - 1 ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: LD_VAR 0 4
2560: PUSH
2561: LD_INT 1
2563: MINUS
2564: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
2565: LD_INT 35
2567: PPUSH
2568: CALL_OW 67
// end ;
2572: GO 2527
// if timer = 0 then
2574: LD_VAR 0 4
2578: PUSH
2579: LD_INT 0
2581: EQUAL
2582: IFFALSE 2631
// for i = 1 to 3 do
2584: LD_ADDR_VAR 0 3
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2629
// MineExplosion ( GetX ( un ) , GetY ( un ) , 10 ) ;
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 250
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 251
2619: PPUSH
2620: LD_INT 10
2622: PPUSH
2623: CALL_OW 453
2627: GO 2597
2629: POP
2630: POP
// end ;
2631: LD_VAR 0 2
2635: RET
// export function DestinationReachable ( unit , x , y ) ; begin
2636: LD_INT 0
2638: PPUSH
// if unit in unreachableList then
2639: LD_VAR 0 1
2643: PUSH
2644: LD_EXP 18
2648: IN
2649: IFFALSE 2667
// unreachableList := unreachableList diff unit ;
2651: LD_ADDR_EXP 18
2655: PUSH
2656: LD_EXP 18
2660: PUSH
2661: LD_VAR 0 1
2665: DIFF
2666: ST_TO_ADDR
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: LD_VAR 0 3
2681: PPUSH
2682: CALL_OW 428
2686: PPUSH
2687: CALL_OW 115
// Wait ( 1 ) ;
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 67
// if unit in unreachableList then
2698: LD_VAR 0 1
2702: PUSH
2703: LD_EXP 18
2707: IN
2708: IFFALSE 2720
// result := false else
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
2718: GO 2728
// result := true ;
2720: LD_ADDR_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// end ;
2728: LD_VAR 0 4
2732: RET
// export function ComSpecAttack ( unit ) ; var i , enemy , t , x , y ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// enemy := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 81
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 255
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PPUSH
2763: CALL_OW 69
2767: ST_TO_ADDR
// if not enemy then
2768: LD_VAR 0 4
2772: NOT
2773: IFFALSE 2777
// exit ;
2775: GO 2927
// if UnitFilter ( enemy , [ f_occupied ] ) then
2777: LD_VAR 0 4
2781: PPUSH
2782: LD_INT 59
2784: PUSH
2785: EMPTY
2786: LIST
2787: PPUSH
2788: CALL_OW 72
2792: IFFALSE 2903
// begin t := NearestUnitToUnit ( UnitFilter ( enemy , [ f_occupied ] ) , unit ) ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_VAR 0 4
2803: PPUSH
2804: LD_INT 59
2806: PUSH
2807: EMPTY
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: PPUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 74
2824: ST_TO_ADDR
// x := GetX ( t ) ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 5
2834: PPUSH
2835: CALL_OW 250
2839: ST_TO_ADDR
// y := GetY ( t ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_VAR 0 5
2849: PPUSH
2850: CALL_OW 251
2854: ST_TO_ADDR
// if not DestinationReachable ( unit , x , y ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 6
2864: PPUSH
2865: LD_VAR 0 7
2869: PPUSH
2870: CALL 2636 0 3
2874: NOT
2875: IFFALSE 2901
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 74
2896: PPUSH
2897: CALL_OW 115
// end else
2901: GO 2927
// ComAttackUnit ( unit , NearestUnitToUnit ( enemy , unit ) ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_VAR 0 1
2917: PPUSH
2918: CALL_OW 74
2922: PPUSH
2923: CALL_OW 115
// end ; end_of_file
2927: LD_VAR 0 2
2931: RET
// export debug , points , difficultyLevel , timeToNextAttack , waveNumber , playerNation , game_started , graveyard , base_x , base_y , base , playerSquad ; export ar_bio_bomb , us_artillery , us_hack , ar_miner , ru_radar ; end_of_file export function InitMessageWindow ; begin
2932: LD_INT 0
2934: PPUSH
// Msg_Welcome ;
2935: CALL 2952 0 0
// Msg_Nation ;
2939: CALL 2967 0 0
// Msg_Difficulty ;
2943: CALL 3060 0 0
// end ;
2947: LD_VAR 0 1
2951: RET
// export function Msg_Welcome ; begin
2952: LD_INT 0
2954: PPUSH
// Query ( StartQuery ) ;
2955: LD_STRING StartQuery
2957: PPUSH
2958: CALL_OW 97
// end ;
2962: LD_VAR 0 1
2966: RET
// export function Msg_Nation ; begin
2967: LD_INT 0
2969: PPUSH
// case Query ( SelectNat ) of 1 :
2970: LD_STRING SelectNat
2972: PPUSH
2973: CALL_OW 97
2977: PUSH
2978: LD_INT 1
2980: DOUBLE
2981: EQUAL
2982: IFTRUE 2986
2984: GO 2997
2986: POP
// playerNation := 1 ; 2 :
2987: LD_ADDR_EXP 6
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
2995: GO 3055
2997: LD_INT 2
2999: DOUBLE
3000: EQUAL
3001: IFTRUE 3005
3003: GO 3016
3005: POP
// playerNation := 2 ; 3 :
3006: LD_ADDR_EXP 6
3010: PUSH
3011: LD_INT 2
3013: ST_TO_ADDR
3014: GO 3055
3016: LD_INT 3
3018: DOUBLE
3019: EQUAL
3020: IFTRUE 3024
3022: GO 3035
3024: POP
// playerNation := 3 ; 4 :
3025: LD_ADDR_EXP 6
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
3033: GO 3055
3035: LD_INT 4
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3054
3043: POP
// playerNation := 0 ; end ;
3044: LD_ADDR_EXP 6
3048: PUSH
3049: LD_INT 0
3051: ST_TO_ADDR
3052: GO 3055
3054: POP
// end ;
3055: LD_VAR 0 1
3059: RET
// export function Msg_Difficulty ; begin
3060: LD_INT 0
3062: PPUSH
// case Query ( SelectDif ) of 1 :
3063: LD_STRING SelectDif
3065: PPUSH
3066: CALL_OW 97
3070: PUSH
3071: LD_INT 1
3073: DOUBLE
3074: EQUAL
3075: IFTRUE 3079
3077: GO 3090
3079: POP
// difficultyLevel := 1 ; 2 :
3080: LD_ADDR_EXP 3
3084: PUSH
3085: LD_INT 1
3087: ST_TO_ADDR
3088: GO 3148
3090: LD_INT 2
3092: DOUBLE
3093: EQUAL
3094: IFTRUE 3098
3096: GO 3109
3098: POP
// difficultyLevel := 2 ; 3 :
3099: LD_ADDR_EXP 3
3103: PUSH
3104: LD_INT 2
3106: ST_TO_ADDR
3107: GO 3148
3109: LD_INT 3
3111: DOUBLE
3112: EQUAL
3113: IFTRUE 3117
3115: GO 3128
3117: POP
// difficultyLevel := 3 ; 4 :
3118: LD_ADDR_EXP 3
3122: PUSH
3123: LD_INT 3
3125: ST_TO_ADDR
3126: GO 3148
3128: LD_INT 4
3130: DOUBLE
3131: EQUAL
3132: IFTRUE 3136
3134: GO 3147
3136: POP
// difficultyLevel := 4 ; end ;
3137: LD_ADDR_EXP 3
3141: PUSH
3142: LD_INT 4
3144: ST_TO_ADDR
3145: GO 3148
3147: POP
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function InitGame ; begin
3153: LD_INT 0
3155: PPUSH
// RandomizeAll ;
3156: CALL_OW 11
// LoadColors ;
3160: CALL 821 0 0
// debug := false ;
3164: LD_ADDR_EXP 1
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// ar_bio_bomb := 91 ;
3172: LD_ADDR_EXP 13
3176: PUSH
3177: LD_INT 91
3179: ST_TO_ADDR
// us_artillery := 97 ;
3180: LD_ADDR_EXP 14
3184: PUSH
3185: LD_INT 97
3187: ST_TO_ADDR
// ru_radar := 98 ;
3188: LD_ADDR_EXP 17
3192: PUSH
3193: LD_INT 98
3195: ST_TO_ADDR
// game_started := false ;
3196: LD_ADDR_EXP 7
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// points := 0 ;
3204: LD_ADDR_EXP 2
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// waveNumber := 0 ;
3212: LD_ADDR_EXP 5
3216: PUSH
3217: LD_INT 0
3219: ST_TO_ADDR
// timeToNextAttack := 0 ;
3220: LD_ADDR_EXP 4
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// graveyard := [ ] ;
3228: LD_ADDR_EXP 8
3232: PUSH
3233: EMPTY
3234: ST_TO_ADDR
// base_x := 1 ;
3235: LD_ADDR_EXP 9
3239: PUSH
3240: LD_INT 1
3242: ST_TO_ADDR
// base_y := 1 ;
3243: LD_ADDR_EXP 10
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// if difficultyLevel > 2 then
3251: LD_EXP 3
3255: PUSH
3256: LD_INT 2
3258: GREATER
3259: IFFALSE 3274
// SetTech ( 5 , 7 , state_researched ) ;
3261: LD_INT 5
3263: PPUSH
3264: LD_INT 7
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: CALL_OW 322
// if not playerNation then
3274: LD_EXP 6
3278: NOT
3279: IFFALSE 3305
// begin points := 100 ;
3281: LD_ADDR_EXP 2
3285: PUSH
3286: LD_INT 100
3288: ST_TO_ADDR
// playerNation := rand ( 1 , 3 ) ;
3289: LD_ADDR_EXP 6
3293: PUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: CALL_OW 12
3304: ST_TO_ADDR
// end ; your_side := playerNation ;
3305: LD_ADDR_OWVAR 2
3309: PUSH
3310: LD_EXP 6
3314: ST_TO_ADDR
// ChangeSideFog ( your_side , 4 ) ;
3315: LD_OWVAR 2
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 343
// PrepareResources ( [ [ 25 , 20 , 15 , 10 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] , [ 5 , 3 , 2 , 1 ] [ difficultyLevel ] ] , [ 1 , 2 , 3 ] , 88 , 76 , 6 ) ;
3327: LD_INT 25
3329: PUSH
3330: LD_INT 20
3332: PUSH
3333: LD_INT 15
3335: PUSH
3336: LD_INT 10
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: PUSH
3345: LD_EXP 3
3349: ARRAY
3350: PUSH
3351: LD_INT 5
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: LD_INT 2
3359: PUSH
3360: LD_INT 1
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: LD_EXP 3
3373: ARRAY
3374: PUSH
3375: LD_INT 5
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: LD_INT 2
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_EXP 3
3397: ARRAY
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: PPUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 2
3409: PUSH
3410: LD_INT 3
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: PPUSH
3418: LD_INT 88
3420: PPUSH
3421: LD_INT 76
3423: PPUSH
3424: LD_INT 6
3426: PPUSH
3427: CALL 630 0 5
// PrepareSquad ( playerNation , [ 9 , 7 , 5 , 3 ] [ difficultyLevel ] , [ 24 , 16 , 12 , 8 ] [ difficultyLevel ] , 88 , 76 ) ;
3431: LD_EXP 6
3435: PPUSH
3436: LD_INT 9
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: LD_INT 5
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_EXP 3
3458: ARRAY
3459: PPUSH
3460: LD_INT 24
3462: PUSH
3463: LD_INT 16
3465: PUSH
3466: LD_INT 12
3468: PUSH
3469: LD_INT 8
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_EXP 3
3482: ARRAY
3483: PPUSH
3484: LD_INT 88
3486: PPUSH
3487: LD_INT 76
3489: PPUSH
3490: CALL 339 0 5
// CenterNowOnXY ( 88 , 76 ) ;
3494: LD_INT 88
3496: PPUSH
3497: LD_INT 76
3499: PPUSH
3500: CALL_OW 86
// PlaceSeeing ( 90 , 79 , your_side , - 50 ) ;
3504: LD_INT 90
3506: PPUSH
3507: LD_INT 79
3509: PPUSH
3510: LD_OWVAR 2
3514: PPUSH
3515: LD_INT 50
3517: NEG
3518: PPUSH
3519: CALL_OW 330
// if debug then
3523: LD_EXP 1
3527: IFFALSE 3538
// FogOff ( your_side ) ;
3529: LD_OWVAR 2
3533: PPUSH
3534: CALL_OW 344
// end ;
3538: LD_VAR 0 1
3542: RET
// every 0 0$01 trigger game_started do var i ;
3543: LD_EXP 7
3547: IFFALSE 3781
3549: GO 3551
3551: DISABLE
3552: LD_INT 0
3554: PPUSH
// begin while ( game_started ) do
3555: LD_EXP 7
3559: IFFALSE 3781
// begin if FilterAllUnits ( [ f_side , 7 ] ) < 5 and timeToNextAttack <= 0 0$00 then
3561: LD_INT 22
3563: PUSH
3564: LD_INT 7
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: PUSH
3576: LD_INT 5
3578: LESS
3579: PUSH
3580: LD_EXP 4
3584: PUSH
3585: LD_INT 0
3587: LESSEQUAL
3588: AND
3589: IFFALSE 3772
// begin if FilterAllUnits ( [ f_side , 4 ] ) then
3591: LD_INT 22
3593: PUSH
3594: LD_INT 4
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PPUSH
3601: CALL_OW 69
3605: IFFALSE 3643
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
3607: LD_ADDR_VAR 0 1
3611: PUSH
3612: LD_INT 22
3614: PUSH
3615: LD_INT 4
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PPUSH
3622: CALL_OW 69
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3641
// RemoveUnit ( i ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: CALL_OW 64
3639: GO 3627
3641: POP
3642: POP
// if ( waveNumber mod 3 = 0 or waveNumber mod 10 = 0 ) and waveNumber > 0 then
3643: LD_EXP 5
3647: PUSH
3648: LD_INT 3
3650: MOD
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: PUSH
3656: LD_EXP 5
3660: PUSH
3661: LD_INT 10
3663: MOD
3664: PUSH
3665: LD_INT 0
3667: EQUAL
3668: OR
3669: PUSH
3670: LD_EXP 5
3674: PUSH
3675: LD_INT 0
3677: GREATER
3678: AND
3679: IFFALSE 3685
// InitBonus ;
3681: CALL 9751 0 0
// if waveNumber mod 10 = 0 then
3685: LD_EXP 5
3689: PUSH
3690: LD_INT 10
3692: MOD
3693: PUSH
3694: LD_INT 0
3696: EQUAL
3697: IFFALSE 3703
// SaveForQuickRestart ;
3699: CALL_OW 22
// if waveNumber = 100 then
3703: LD_EXP 5
3707: PUSH
3708: LD_INT 100
3710: EQUAL
3711: IFFALSE 3724
// begin FogOff ( your_side ) ;
3713: LD_OWVAR 2
3717: PPUSH
3718: CALL_OW 344
// break ;
3722: GO 3781
// end ; timeToNextAttack := rand ( 1 1$30 , 2 2$30 ) ;
3724: LD_ADDR_EXP 4
3728: PUSH
3729: LD_INT 3150
3731: PPUSH
3732: LD_INT 5250
3734: PPUSH
3735: CALL_OW 12
3739: ST_TO_ADDR
// Wait ( timeToNextAttack ) ;
3740: LD_EXP 4
3744: PPUSH
3745: CALL_OW 67
// waveNumber := waveNumber + 1 ;
3749: LD_ADDR_EXP 5
3753: PUSH
3754: LD_EXP 5
3758: PUSH
3759: LD_INT 1
3761: PLUS
3762: ST_TO_ADDR
// PrepareWave ( waveNumber ) ;
3763: LD_EXP 5
3767: PPUSH
3768: CALL 4742 0 1
// end ; Wait ( 0 0$01 ) ;
3772: LD_INT 35
3774: PPUSH
3775: CALL_OW 67
// end ;
3779: GO 3555
// end ;
3781: PPOPN 1
3783: END
// every 0 0$01 trigger timeToNextAttack > 0 0$00 do
3784: LD_EXP 4
3788: PUSH
3789: LD_INT 0
3791: GREATER
3792: IFFALSE 3812
3794: GO 3796
3796: DISABLE
// begin enable ;
3797: ENABLE
// timeToNextAttack := timeToNextAttack - 0 0$01 ;
3798: LD_ADDR_EXP 4
3802: PUSH
3803: LD_EXP 4
3807: PUSH
3808: LD_INT 35
3810: MINUS
3811: ST_TO_ADDR
// end ; end_of_file
3812: END
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
3813: LD_VAR 0 1
3817: PUSH
3818: LD_EXP 18
3822: IN
3823: NOT
3824: IFFALSE 3855
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
3826: LD_ADDR_EXP 18
3830: PUSH
3831: LD_EXP 18
3835: PPUSH
3836: LD_EXP 18
3840: PUSH
3841: LD_INT 1
3843: PLUS
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: CALL_OW 2
3854: ST_TO_ADDR
// end ;
3855: PPOPN 1
3857: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = your_side and GetType ( un ) = unit_human then
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 255
3867: PUSH
3868: LD_OWVAR 2
3872: EQUAL
3873: PUSH
3874: LD_VAR 0 1
3878: PPUSH
3879: CALL_OW 247
3883: PUSH
3884: LD_INT 1
3886: EQUAL
3887: AND
3888: IFFALSE 3919
// begin graveyard := Insert ( graveyard , graveyard + 1 , un ) ;
3890: LD_ADDR_EXP 8
3894: PUSH
3895: LD_EXP 8
3899: PPUSH
3900: LD_EXP 8
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 2
3918: ST_TO_ADDR
// end ; if GetSide ( un ) = 7 then
3919: LD_VAR 0 1
3923: PPUSH
3924: CALL_OW 255
3928: PUSH
3929: LD_INT 7
3931: EQUAL
3932: IFFALSE 4306
// begin if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 34
3941: PUSH
3942: LD_INT 91
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: IN
3954: IFFALSE 3999
// begin if Rand ( 1 , 100 ) <= 70 then
3956: LD_INT 1
3958: PPUSH
3959: LD_INT 100
3961: PPUSH
3962: CALL_OW 12
3966: PUSH
3967: LD_INT 70
3969: LESSEQUAL
3970: IFFALSE 3999
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 250
3981: PPUSH
3982: LD_VAR 0 1
3986: PPUSH
3987: CALL_OW 251
3991: PPUSH
3992: LD_INT 10
3994: PPUSH
3995: CALL_OW 495
// end ; case GetType ( un ) of unit_human :
3999: LD_VAR 0 1
4003: PPUSH
4004: CALL_OW 247
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4151
4017: POP
// begin case GetClass ( un ) of class_apeman :
4018: LD_VAR 0 1
4022: PPUSH
4023: CALL_OW 257
4027: PUSH
4028: LD_INT 12
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4046
4036: POP
// AddPoints ( 2 ) ; class_apeman_soldier :
4037: LD_INT 2
4039: PPUSH
4040: CALL 797 0 1
4044: GO 4149
4046: LD_INT 15
4048: DOUBLE
4049: EQUAL
4050: IFTRUE 4054
4052: GO 4064
4054: POP
// AddPoints ( 5 ) ; class_apeman_kamikaze :
4055: LD_INT 5
4057: PPUSH
4058: CALL 797 0 1
4062: GO 4149
4064: LD_INT 17
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4082
4072: POP
// AddPoints ( 30 ) ; class_soldier :
4073: LD_INT 30
4075: PPUSH
4076: CALL 797 0 1
4080: GO 4149
4082: LD_INT 1
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4100
4090: POP
// AddPoints ( 50 ) ; class_bazooker , class_sniper , class_mortar :
4091: LD_INT 50
4093: PPUSH
4094: CALL 797 0 1
4098: GO 4149
4100: LD_INT 9
4102: DOUBLE
4103: EQUAL
4104: IFTRUE 4120
4106: LD_INT 5
4108: DOUBLE
4109: EQUAL
4110: IFTRUE 4120
4112: LD_INT 8
4114: DOUBLE
4115: EQUAL
4116: IFTRUE 4120
4118: GO 4130
4120: POP
// AddPoints ( 75 ) ; class_mechanic :
4121: LD_INT 75
4123: PPUSH
4124: CALL 797 0 1
4128: GO 4149
4130: LD_INT 3
4132: DOUBLE
4133: EQUAL
4134: IFTRUE 4138
4136: GO 4148
4138: POP
// AddPoints ( 60 ) ; end ;
4139: LD_INT 60
4141: PPUSH
4142: CALL 797 0 1
4146: GO 4149
4148: POP
// end ; unit_vehicle :
4149: GO 4306
4151: LD_INT 2
4153: DOUBLE
4154: EQUAL
4155: IFTRUE 4159
4157: GO 4305
4159: POP
// begin case GetChassis ( un ) of ar_light_trike , us_light_wheeled , ar_hovercraft :
4160: LD_VAR 0 1
4164: PPUSH
4165: CALL_OW 265
4169: PUSH
4170: LD_INT 12
4172: DOUBLE
4173: EQUAL
4174: IFTRUE 4190
4176: LD_INT 1
4178: DOUBLE
4179: EQUAL
4180: IFTRUE 4190
4182: LD_INT 11
4184: DOUBLE
4185: EQUAL
4186: IFTRUE 4190
4188: GO 4200
4190: POP
// AddPoints ( 100 ) ; ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , ru_medium_wheeled , ru_medium_tracked :
4191: LD_INT 100
4193: PPUSH
4194: CALL 797 0 1
4198: GO 4303
4200: LD_INT 13
4202: DOUBLE
4203: EQUAL
4204: IFTRUE 4238
4206: LD_INT 14
4208: DOUBLE
4209: EQUAL
4210: IFTRUE 4238
4212: LD_INT 2
4214: DOUBLE
4215: EQUAL
4216: IFTRUE 4238
4218: LD_INT 3
4220: DOUBLE
4221: EQUAL
4222: IFTRUE 4238
4224: LD_INT 21
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4238
4230: LD_INT 22
4232: DOUBLE
4233: EQUAL
4234: IFTRUE 4238
4236: GO 4248
4238: POP
// AddPoints ( 250 ) ; us_heavy_tracked , us_morphling , ru_heavy_wheeled , ru_heavy_tracked :
4239: LD_INT 250
4241: PPUSH
4242: CALL 797 0 1
4246: GO 4303
4248: LD_INT 4
4250: DOUBLE
4251: EQUAL
4252: IFTRUE 4274
4254: LD_INT 5
4256: DOUBLE
4257: EQUAL
4258: IFTRUE 4274
4260: LD_INT 23
4262: DOUBLE
4263: EQUAL
4264: IFTRUE 4274
4266: LD_INT 24
4268: DOUBLE
4269: EQUAL
4270: IFTRUE 4274
4272: GO 4284
4274: POP
// AddPoints ( 500 ) ; 25 :
4275: LD_INT 500
4277: PPUSH
4278: CALL 797 0 1
4282: GO 4303
4284: LD_INT 25
4286: DOUBLE
4287: EQUAL
4288: IFTRUE 4292
4290: GO 4302
4292: POP
// AddPoints ( 1250 ) ; end ;
4293: LD_INT 1250
4295: PPUSH
4296: CALL 797 0 1
4300: GO 4303
4302: POP
// end ; end ;
4303: GO 4306
4305: POP
// end ; end ;
4306: PPOPN 1
4308: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 266
4318: PUSH
4319: LD_INT 0
4321: EQUAL
4322: IFFALSE 4372
// begin base_x := GetX ( b ) ;
4324: LD_ADDR_EXP 9
4328: PUSH
4329: LD_VAR 0 1
4333: PPUSH
4334: CALL_OW 250
4338: ST_TO_ADDR
// base_y := GetY ( b ) ;
4339: LD_ADDR_EXP 10
4343: PUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 251
4353: ST_TO_ADDR
// base := b ;
4354: LD_ADDR_EXP 11
4358: PUSH
4359: LD_VAR 0 1
4363: ST_TO_ADDR
// game_started := true ;
4364: LD_ADDR_EXP 7
4368: PUSH
4369: LD_INT 1
4371: ST_TO_ADDR
// end ; end ;
4372: PPOPN 1
4374: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = your_side then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 255
4384: PUSH
4385: LD_OWVAR 2
4389: EQUAL
4390: IFFALSE 4394
// exit ;
4392: GO 4541
// if GetType ( un ) = unit_vehicle then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 247
4403: PUSH
4404: LD_INT 2
4406: EQUAL
4407: IFFALSE 4460
// begin KillUnit ( un ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 66
// if GetNation ( un ) = nation_arabian or GetWeapon ( un ) in [ ru_time_lapser ] then
4418: LD_VAR 0 1
4422: PPUSH
4423: CALL_OW 248
4427: PUSH
4428: LD_INT 2
4430: EQUAL
4431: PUSH
4432: LD_VAR 0 1
4436: PPUSH
4437: CALL_OW 264
4441: PUSH
4442: LD_INT 49
4444: PUSH
4445: EMPTY
4446: LIST
4447: IN
4448: OR
4449: IFFALSE 4460
// ExplodeVehicle ( un ) ;
4451: LD_VAR 0 1
4455: PPUSH
4456: CALL 2506 0 1
// end ; if GetType ( un ) = unit_human then
4460: LD_VAR 0 1
4464: PPUSH
4465: CALL_OW 247
4469: PUSH
4470: LD_INT 1
4472: EQUAL
4473: IFFALSE 4541
// begin if ( GetNation ( un ) = 2 and GetTech ( 5 , 7 ) <> state_researched ) or GetNation ( un ) in [ 0 , 1 , 3 ] then
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 248
4484: PUSH
4485: LD_INT 2
4487: EQUAL
4488: PUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_INT 7
4494: PPUSH
4495: CALL_OW 321
4499: PUSH
4500: LD_INT 2
4502: NONEQUAL
4503: AND
4504: PUSH
4505: LD_VAR 0 1
4509: PPUSH
4510: CALL_OW 248
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: IN
4529: OR
4530: IFFALSE 4541
// KillUnit ( un ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: CALL_OW 66
// end ; end ;
4541: PPOPN 1
4543: END
// every 0 0$1 do
4544: GO 4546
4546: DISABLE
// begin enable ;
4547: ENABLE
// CheckBuildUpArea ( zoneOut , zoneIn , [ f_side , your_side ] ) ;
4548: LD_INT 4
4550: PPUSH
4551: LD_INT 5
4553: PPUSH
4554: LD_INT 22
4556: PUSH
4557: LD_OWVAR 2
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL_OW 513
// end ;
4570: END
// every 0 0$01 trigger game_started and FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) = 0 do
4571: LD_EXP 7
4575: PUSH
4576: LD_INT 22
4578: PUSH
4579: LD_OWVAR 2
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PUSH
4607: LD_INT 0
4609: EQUAL
4610: AND
4611: IFFALSE 4623
4613: GO 4615
4615: DISABLE
// YouLost ( die ) ;
4616: LD_STRING die
4618: PPUSH
4619: CALL_OW 104
4623: END
// every 0 0$21 trigger tick <= 15 15$00 do
4624: LD_OWVAR 1
4628: PUSH
4629: LD_INT 31500
4631: LESSEQUAL
4632: IFFALSE 4659
4634: GO 4636
4636: DISABLE
// begin enable ;
4637: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4638: LD_INT 1
4640: PPUSH
4641: LD_INT 5
4643: PPUSH
4644: CALL_OW 12
4648: PPUSH
4649: LD_INT 3
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: CALL_OW 55
// end ;
4659: END
// every 0 0$51 trigger tick > 15 15$00 do
4660: LD_OWVAR 1
4664: PUSH
4665: LD_INT 31500
4667: GREATER
4668: IFFALSE 4715
4670: GO 4672
4672: DISABLE
// begin enable ;
4673: ENABLE
// if FilterAllUnits ( [ f_side , 7 ] ) = 0 then
4674: LD_INT 22
4676: PUSH
4677: LD_INT 7
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PPUSH
4684: CALL_OW 69
4688: PUSH
4689: LD_INT 0
4691: EQUAL
4692: IFFALSE 4715
// CreateCratesArea ( Rand ( 1 , 5 ) , cratesSpawn , true ) ;
4694: LD_INT 1
4696: PPUSH
4697: LD_INT 5
4699: PPUSH
4700: CALL_OW 12
4704: PPUSH
4705: LD_INT 3
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: CALL_OW 55
// end ;
4715: END
// on BuildingStarted ( building , builder ) do begin if IsInArea ( building , cratesSpawn ) then
4716: LD_VAR 0 1
4720: PPUSH
4721: LD_INT 3
4723: PPUSH
4724: CALL_OW 308
4728: IFFALSE 4739
// KillUnit ( building ) ;
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 66
// end ; end_of_file
4739: PPOPN 2
4741: END
// export function PrepareWave ( num ) ; var i , un , skill , veh , area , a , l , c ; begin
4742: LD_INT 0
4744: PPUSH
4745: PPUSH
4746: PPUSH
4747: PPUSH
4748: PPUSH
4749: PPUSH
4750: PPUSH
4751: PPUSH
4752: PPUSH
// area := [ Enemy1 , Enemy2 ] ;
4753: LD_ADDR_VAR 0 7
4757: PUSH
4758: LD_INT 1
4760: PUSH
4761: LD_INT 2
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: ST_TO_ADDR
// uc_side := 7 ;
4768: LD_ADDR_OWVAR 20
4772: PUSH
4773: LD_INT 7
4775: ST_TO_ADDR
// l := 0 ;
4776: LD_ADDR_VAR 0 9
4780: PUSH
4781: LD_INT 0
4783: ST_TO_ADDR
// case num of 1 :
4784: LD_VAR 0 1
4788: PUSH
4789: LD_INT 1
4791: DOUBLE
4792: EQUAL
4793: IFTRUE 4797
4795: GO 4816
4797: POP
// result := Wave1 ( 12 , 1 ) ; 2 :
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: LD_INT 12
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL 7145 0 2
4813: ST_TO_ADDR
4814: GO 6954
4816: LD_INT 2
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4824
4822: GO 4843
4824: POP
// result := Wave2 ( 12 , 1 ) ; 3 :
4825: LD_ADDR_VAR 0 2
4829: PUSH
4830: LD_INT 12
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL 7216 0 2
4840: ST_TO_ADDR
4841: GO 6954
4843: LD_INT 3
4845: DOUBLE
4846: EQUAL
4847: IFTRUE 4851
4849: GO 4870
4851: POP
// result := Wave3 ( 12 , 1 ) ; 4 :
4852: LD_ADDR_VAR 0 2
4856: PUSH
4857: LD_INT 12
4859: PPUSH
4860: LD_INT 1
4862: PPUSH
4863: CALL 7287 0 2
4867: ST_TO_ADDR
4868: GO 6954
4870: LD_INT 4
4872: DOUBLE
4873: EQUAL
4874: IFTRUE 4878
4876: GO 4897
4878: POP
// result := Wave4 ( 7 , 1 ) ; 5 :
4879: LD_ADDR_VAR 0 2
4883: PUSH
4884: LD_INT 7
4886: PPUSH
4887: LD_INT 1
4889: PPUSH
4890: CALL 7366 0 2
4894: ST_TO_ADDR
4895: GO 6954
4897: LD_INT 5
4899: DOUBLE
4900: EQUAL
4901: IFTRUE 4905
4903: GO 4924
4905: POP
// result := Wave5 ( 7 , 1 ) ; 6 :
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: LD_INT 7
4913: PPUSH
4914: LD_INT 1
4916: PPUSH
4917: CALL 7762 0 2
4921: ST_TO_ADDR
4922: GO 6954
4924: LD_INT 6
4926: DOUBLE
4927: EQUAL
4928: IFTRUE 4932
4930: GO 4951
4932: POP
// result := Wave6 ( 6 , 1 ) ; 7 :
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_INT 6
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: CALL 8182 0 2
4948: ST_TO_ADDR
4949: GO 6954
4951: LD_INT 7
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 4959
4957: GO 4978
4959: POP
// result := Wave7 ( 15 , 1 ) ; 8 :
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 15
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL 8602 0 2
4975: ST_TO_ADDR
4976: GO 6954
4978: LD_INT 8
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5005
4986: POP
// result := Wave8 ( 7 , 1 ) ; 9 :
4987: LD_ADDR_VAR 0 2
4991: PUSH
4992: LD_INT 7
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL 8703 0 2
5002: ST_TO_ADDR
5003: GO 6954
5005: LD_INT 9
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5044
5013: POP
// result := Wave8 ( 4 , 1 ) ^ Wave5 ( 7 , 1 ) ; 10 :
5014: LD_ADDR_VAR 0 2
5018: PUSH
5019: LD_INT 4
5021: PPUSH
5022: LD_INT 1
5024: PPUSH
5025: CALL 8703 0 2
5029: PUSH
5030: LD_INT 7
5032: PPUSH
5033: LD_INT 1
5035: PPUSH
5036: CALL 7762 0 2
5040: ADD
5041: ST_TO_ADDR
5042: GO 6954
5044: LD_INT 10
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5083
5052: POP
// result := Wave7 ( 9 , 1 ) ^ Wave3 ( 14 , 1 ) ; 11 , 21 , 31 , 41 , 51 , 61 , 71 , 81 , 91 :
5053: LD_ADDR_VAR 0 2
5057: PUSH
5058: LD_INT 9
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL 8602 0 2
5068: PUSH
5069: LD_INT 14
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL 7287 0 2
5079: ADD
5080: ST_TO_ADDR
5081: GO 6954
5083: LD_INT 11
5085: DOUBLE
5086: EQUAL
5087: IFTRUE 5139
5089: LD_INT 21
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5139
5095: LD_INT 31
5097: DOUBLE
5098: EQUAL
5099: IFTRUE 5139
5101: LD_INT 41
5103: DOUBLE
5104: EQUAL
5105: IFTRUE 5139
5107: LD_INT 51
5109: DOUBLE
5110: EQUAL
5111: IFTRUE 5139
5113: LD_INT 61
5115: DOUBLE
5116: EQUAL
5117: IFTRUE 5139
5119: LD_INT 71
5121: DOUBLE
5122: EQUAL
5123: IFTRUE 5139
5125: LD_INT 81
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5139
5131: LD_INT 91
5133: DOUBLE
5134: EQUAL
5135: IFTRUE 5139
5137: GO 5248
5139: POP
// result := Wave1 ( [ 20 , 30 , 40 , 45 , 50 , 60 , 70 , 80 , 100 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 12 , 22 , 32 , 42 , 52 , 62 , 72 , 82 , 92 :
5140: LD_ADDR_VAR 0 2
5144: PUSH
5145: LD_INT 20
5147: PUSH
5148: LD_INT 30
5150: PUSH
5151: LD_INT 40
5153: PUSH
5154: LD_INT 45
5156: PUSH
5157: LD_INT 50
5159: PUSH
5160: LD_INT 60
5162: PUSH
5163: LD_INT 70
5165: PUSH
5166: LD_INT 80
5168: PUSH
5169: LD_INT 100
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: PUSH
5183: LD_VAR 0 1
5187: PUSH
5188: LD_INT 10
5190: DIV
5191: ARRAY
5192: PPUSH
5193: LD_INT 2
5195: PUSH
5196: LD_INT 3
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: LD_INT 5
5204: PUSH
5205: LD_INT 6
5207: PUSH
5208: LD_INT 7
5210: PUSH
5211: LD_INT 8
5213: PUSH
5214: LD_INT 9
5216: PUSH
5217: LD_INT 10
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: PUSH
5231: LD_VAR 0 1
5235: PUSH
5236: LD_INT 10
5238: DIV
5239: ARRAY
5240: PPUSH
5241: CALL 7145 0 2
5245: ST_TO_ADDR
5246: GO 6954
5248: LD_INT 12
5250: DOUBLE
5251: EQUAL
5252: IFTRUE 5304
5254: LD_INT 22
5256: DOUBLE
5257: EQUAL
5258: IFTRUE 5304
5260: LD_INT 32
5262: DOUBLE
5263: EQUAL
5264: IFTRUE 5304
5266: LD_INT 42
5268: DOUBLE
5269: EQUAL
5270: IFTRUE 5304
5272: LD_INT 52
5274: DOUBLE
5275: EQUAL
5276: IFTRUE 5304
5278: LD_INT 62
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5304
5284: LD_INT 72
5286: DOUBLE
5287: EQUAL
5288: IFTRUE 5304
5290: LD_INT 82
5292: DOUBLE
5293: EQUAL
5294: IFTRUE 5304
5296: LD_INT 92
5298: DOUBLE
5299: EQUAL
5300: IFTRUE 5304
5302: GO 5413
5304: POP
// result := Wave2 ( [ 16 , 21 , 28 , 33 , 39 , 46 , 56 , 66 , 80 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 13 , 23 , 33 , 43 , 53 , 63 , 73 , 83 , 93 :
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: LD_INT 16
5312: PUSH
5313: LD_INT 21
5315: PUSH
5316: LD_INT 28
5318: PUSH
5319: LD_INT 33
5321: PUSH
5322: LD_INT 39
5324: PUSH
5325: LD_INT 46
5327: PUSH
5328: LD_INT 56
5330: PUSH
5331: LD_INT 66
5333: PUSH
5334: LD_INT 80
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_VAR 0 1
5352: PUSH
5353: LD_INT 10
5355: DIV
5356: ARRAY
5357: PPUSH
5358: LD_INT 2
5360: PUSH
5361: LD_INT 3
5363: PUSH
5364: LD_INT 4
5366: PUSH
5367: LD_INT 5
5369: PUSH
5370: LD_INT 6
5372: PUSH
5373: LD_INT 7
5375: PUSH
5376: LD_INT 8
5378: PUSH
5379: LD_INT 9
5381: PUSH
5382: LD_INT 10
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: PUSH
5396: LD_VAR 0 1
5400: PUSH
5401: LD_INT 10
5403: DIV
5404: ARRAY
5405: PPUSH
5406: CALL 7216 0 2
5410: ST_TO_ADDR
5411: GO 6954
5413: LD_INT 13
5415: DOUBLE
5416: EQUAL
5417: IFTRUE 5469
5419: LD_INT 23
5421: DOUBLE
5422: EQUAL
5423: IFTRUE 5469
5425: LD_INT 33
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5469
5431: LD_INT 43
5433: DOUBLE
5434: EQUAL
5435: IFTRUE 5469
5437: LD_INT 53
5439: DOUBLE
5440: EQUAL
5441: IFTRUE 5469
5443: LD_INT 63
5445: DOUBLE
5446: EQUAL
5447: IFTRUE 5469
5449: LD_INT 73
5451: DOUBLE
5452: EQUAL
5453: IFTRUE 5469
5455: LD_INT 83
5457: DOUBLE
5458: EQUAL
5459: IFTRUE 5469
5461: LD_INT 93
5463: DOUBLE
5464: EQUAL
5465: IFTRUE 5469
5467: GO 5578
5469: POP
// result := Wave3 ( [ 14 , 18 , 22 , 27 , 33 , 39 , 44 , 57 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 14 , 24 , 34 , 44 , 54 , 64 , 74 , 84 , 94 :
5470: LD_ADDR_VAR 0 2
5474: PUSH
5475: LD_INT 14
5477: PUSH
5478: LD_INT 18
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 27
5486: PUSH
5487: LD_INT 33
5489: PUSH
5490: LD_INT 39
5492: PUSH
5493: LD_INT 44
5495: PUSH
5496: LD_INT 57
5498: PUSH
5499: LD_INT 65
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: LD_VAR 0 1
5517: PUSH
5518: LD_INT 10
5520: DIV
5521: ARRAY
5522: PPUSH
5523: LD_INT 2
5525: PUSH
5526: LD_INT 3
5528: PUSH
5529: LD_INT 4
5531: PUSH
5532: LD_INT 5
5534: PUSH
5535: LD_INT 6
5537: PUSH
5538: LD_INT 7
5540: PUSH
5541: LD_INT 8
5543: PUSH
5544: LD_INT 9
5546: PUSH
5547: LD_INT 10
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: PUSH
5561: LD_VAR 0 1
5565: PUSH
5566: LD_INT 10
5568: DIV
5569: ARRAY
5570: PPUSH
5571: CALL 7287 0 2
5575: ST_TO_ADDR
5576: GO 6954
5578: LD_INT 14
5580: DOUBLE
5581: EQUAL
5582: IFTRUE 5634
5584: LD_INT 24
5586: DOUBLE
5587: EQUAL
5588: IFTRUE 5634
5590: LD_INT 34
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5634
5596: LD_INT 44
5598: DOUBLE
5599: EQUAL
5600: IFTRUE 5634
5602: LD_INT 54
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5634
5608: LD_INT 64
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5634
5614: LD_INT 74
5616: DOUBLE
5617: EQUAL
5618: IFTRUE 5634
5620: LD_INT 84
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5634
5626: LD_INT 94
5628: DOUBLE
5629: EQUAL
5630: IFTRUE 5634
5632: GO 5743
5634: POP
// result := Wave4 ( [ 9 , 15 , 22 , 30 , 39 , 45 , 56 , 60 , 65 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 15 , 25 , 35 , 45 , 55 , 65 , 75 , 85 , 95 :
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_INT 9
5642: PUSH
5643: LD_INT 15
5645: PUSH
5646: LD_INT 22
5648: PUSH
5649: LD_INT 30
5651: PUSH
5652: LD_INT 39
5654: PUSH
5655: LD_INT 45
5657: PUSH
5658: LD_INT 56
5660: PUSH
5661: LD_INT 60
5663: PUSH
5664: LD_INT 65
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: PUSH
5678: LD_VAR 0 1
5682: PUSH
5683: LD_INT 10
5685: DIV
5686: ARRAY
5687: PPUSH
5688: LD_INT 2
5690: PUSH
5691: LD_INT 3
5693: PUSH
5694: LD_INT 4
5696: PUSH
5697: LD_INT 5
5699: PUSH
5700: LD_INT 6
5702: PUSH
5703: LD_INT 7
5705: PUSH
5706: LD_INT 8
5708: PUSH
5709: LD_INT 9
5711: PUSH
5712: LD_INT 10
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: PUSH
5726: LD_VAR 0 1
5730: PUSH
5731: LD_INT 10
5733: DIV
5734: ARRAY
5735: PPUSH
5736: CALL 7366 0 2
5740: ST_TO_ADDR
5741: GO 6954
5743: LD_INT 15
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5799
5749: LD_INT 25
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5799
5755: LD_INT 35
5757: DOUBLE
5758: EQUAL
5759: IFTRUE 5799
5761: LD_INT 45
5763: DOUBLE
5764: EQUAL
5765: IFTRUE 5799
5767: LD_INT 55
5769: DOUBLE
5770: EQUAL
5771: IFTRUE 5799
5773: LD_INT 65
5775: DOUBLE
5776: EQUAL
5777: IFTRUE 5799
5779: LD_INT 75
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5799
5785: LD_INT 85
5787: DOUBLE
5788: EQUAL
5789: IFTRUE 5799
5791: LD_INT 95
5793: DOUBLE
5794: EQUAL
5795: IFTRUE 5799
5797: GO 5908
5799: POP
// result := Wave5 ( [ 6 , 11 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 16 , 26 , 36 , 46 , 56 , 66 , 76 , 86 , 96 :
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: LD_INT 6
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 15
5813: PUSH
5814: LD_INT 20
5816: PUSH
5817: LD_INT 25
5819: PUSH
5820: LD_INT 30
5822: PUSH
5823: LD_INT 35
5825: PUSH
5826: LD_INT 40
5828: PUSH
5829: LD_INT 45
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: PUSH
5843: LD_VAR 0 1
5847: PUSH
5848: LD_INT 10
5850: DIV
5851: ARRAY
5852: PPUSH
5853: LD_INT 2
5855: PUSH
5856: LD_INT 3
5858: PUSH
5859: LD_INT 4
5861: PUSH
5862: LD_INT 5
5864: PUSH
5865: LD_INT 6
5867: PUSH
5868: LD_INT 7
5870: PUSH
5871: LD_INT 8
5873: PUSH
5874: LD_INT 9
5876: PUSH
5877: LD_INT 10
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: LD_VAR 0 1
5895: PUSH
5896: LD_INT 10
5898: DIV
5899: ARRAY
5900: PPUSH
5901: CALL 7762 0 2
5905: ST_TO_ADDR
5906: GO 6954
5908: LD_INT 16
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5964
5914: LD_INT 26
5916: DOUBLE
5917: EQUAL
5918: IFTRUE 5964
5920: LD_INT 36
5922: DOUBLE
5923: EQUAL
5924: IFTRUE 5964
5926: LD_INT 46
5928: DOUBLE
5929: EQUAL
5930: IFTRUE 5964
5932: LD_INT 56
5934: DOUBLE
5935: EQUAL
5936: IFTRUE 5964
5938: LD_INT 66
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5964
5944: LD_INT 76
5946: DOUBLE
5947: EQUAL
5948: IFTRUE 5964
5950: LD_INT 86
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5964
5956: LD_INT 96
5958: DOUBLE
5959: EQUAL
5960: IFTRUE 5964
5962: GO 6073
5964: POP
// result := Wave6 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 17 , 27 , 37 , 47 , 57 , 67 , 77 , 87 , 97 :
5965: LD_ADDR_VAR 0 2
5969: PUSH
5970: LD_INT 9
5972: PUSH
5973: LD_INT 12
5975: PUSH
5976: LD_INT 15
5978: PUSH
5979: LD_INT 18
5981: PUSH
5982: LD_INT 21
5984: PUSH
5985: LD_INT 24
5987: PUSH
5988: LD_INT 27
5990: PUSH
5991: LD_INT 30
5993: PUSH
5994: LD_INT 33
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: PUSH
6008: LD_VAR 0 1
6012: PUSH
6013: LD_INT 10
6015: DIV
6016: ARRAY
6017: PPUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: LD_INT 4
6026: PUSH
6027: LD_INT 5
6029: PUSH
6030: LD_INT 6
6032: PUSH
6033: LD_INT 7
6035: PUSH
6036: LD_INT 8
6038: PUSH
6039: LD_INT 9
6041: PUSH
6042: LD_INT 10
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: LD_VAR 0 1
6060: PUSH
6061: LD_INT 10
6063: DIV
6064: ARRAY
6065: PPUSH
6066: CALL 8182 0 2
6070: ST_TO_ADDR
6071: GO 6954
6073: LD_INT 17
6075: DOUBLE
6076: EQUAL
6077: IFTRUE 6129
6079: LD_INT 27
6081: DOUBLE
6082: EQUAL
6083: IFTRUE 6129
6085: LD_INT 37
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6129
6091: LD_INT 47
6093: DOUBLE
6094: EQUAL
6095: IFTRUE 6129
6097: LD_INT 57
6099: DOUBLE
6100: EQUAL
6101: IFTRUE 6129
6103: LD_INT 67
6105: DOUBLE
6106: EQUAL
6107: IFTRUE 6129
6109: LD_INT 77
6111: DOUBLE
6112: EQUAL
6113: IFTRUE 6129
6115: LD_INT 87
6117: DOUBLE
6118: EQUAL
6119: IFTRUE 6129
6121: LD_INT 97
6123: DOUBLE
6124: EQUAL
6125: IFTRUE 6129
6127: GO 6238
6129: POP
// result := Wave7 ( [ 14 , 16 , 18 , 22 , 24 , 26 , 28 , 32 , 35 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 18 , 28 , 38 , 48 , 58 , 68 , 78 , 88 , 98 :
6130: LD_ADDR_VAR 0 2
6134: PUSH
6135: LD_INT 14
6137: PUSH
6138: LD_INT 16
6140: PUSH
6141: LD_INT 18
6143: PUSH
6144: LD_INT 22
6146: PUSH
6147: LD_INT 24
6149: PUSH
6150: LD_INT 26
6152: PUSH
6153: LD_INT 28
6155: PUSH
6156: LD_INT 32
6158: PUSH
6159: LD_INT 35
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: PUSH
6173: LD_VAR 0 1
6177: PUSH
6178: LD_INT 10
6180: DIV
6181: ARRAY
6182: PPUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: LD_INT 6
6197: PUSH
6198: LD_INT 7
6200: PUSH
6201: LD_INT 8
6203: PUSH
6204: LD_INT 9
6206: PUSH
6207: LD_INT 10
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_VAR 0 1
6225: PUSH
6226: LD_INT 10
6228: DIV
6229: ARRAY
6230: PPUSH
6231: CALL 8602 0 2
6235: ST_TO_ADDR
6236: GO 6954
6238: LD_INT 18
6240: DOUBLE
6241: EQUAL
6242: IFTRUE 6294
6244: LD_INT 28
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6294
6250: LD_INT 38
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6294
6256: LD_INT 48
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6294
6262: LD_INT 58
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6294
6268: LD_INT 68
6270: DOUBLE
6271: EQUAL
6272: IFTRUE 6294
6274: LD_INT 78
6276: DOUBLE
6277: EQUAL
6278: IFTRUE 6294
6280: LD_INT 88
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6294
6286: LD_INT 98
6288: DOUBLE
6289: EQUAL
6290: IFTRUE 6294
6292: GO 6403
6294: POP
// result := Wave8 ( [ 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 19 , 29 , 39 , 49 , 59 , 69 , 79 , 89 , 99 :
6295: LD_ADDR_VAR 0 2
6299: PUSH
6300: LD_INT 9
6302: PUSH
6303: LD_INT 12
6305: PUSH
6306: LD_INT 15
6308: PUSH
6309: LD_INT 18
6311: PUSH
6312: LD_INT 21
6314: PUSH
6315: LD_INT 24
6317: PUSH
6318: LD_INT 27
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 33
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_VAR 0 1
6342: PUSH
6343: LD_INT 10
6345: DIV
6346: ARRAY
6347: PPUSH
6348: LD_INT 2
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: LD_INT 4
6356: PUSH
6357: LD_INT 5
6359: PUSH
6360: LD_INT 6
6362: PUSH
6363: LD_INT 7
6365: PUSH
6366: LD_INT 8
6368: PUSH
6369: LD_INT 9
6371: PUSH
6372: LD_INT 10
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: LD_INT 10
6393: DIV
6394: ARRAY
6395: PPUSH
6396: CALL 8703 0 2
6400: ST_TO_ADDR
6401: GO 6954
6403: LD_INT 19
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6459
6409: LD_INT 29
6411: DOUBLE
6412: EQUAL
6413: IFTRUE 6459
6415: LD_INT 39
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6459
6421: LD_INT 49
6423: DOUBLE
6424: EQUAL
6425: IFTRUE 6459
6427: LD_INT 59
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6459
6433: LD_INT 69
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6459
6439: LD_INT 79
6441: DOUBLE
6442: EQUAL
6443: IFTRUE 6459
6445: LD_INT 89
6447: DOUBLE
6448: EQUAL
6449: IFTRUE 6459
6451: LD_INT 99
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6670
6459: POP
// result := Wave8 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ^ Wave5 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num div 10 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num div 10 ] ) ; 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 :
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: LD_INT 7
6470: PUSH
6471: LD_INT 10
6473: PUSH
6474: LD_INT 13
6476: PUSH
6477: LD_INT 14
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 19
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: LD_INT 23
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_VAR 0 1
6507: PUSH
6508: LD_INT 10
6510: DIV
6511: ARRAY
6512: PPUSH
6513: LD_INT 2
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: LD_INT 4
6521: PUSH
6522: LD_INT 5
6524: PUSH
6525: LD_INT 6
6527: PUSH
6528: LD_INT 7
6530: PUSH
6531: LD_INT 8
6533: PUSH
6534: LD_INT 9
6536: PUSH
6537: LD_INT 10
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: LD_VAR 0 1
6555: PUSH
6556: LD_INT 10
6558: DIV
6559: ARRAY
6560: PPUSH
6561: CALL 8703 0 2
6565: PUSH
6566: LD_INT 4
6568: PUSH
6569: LD_INT 7
6571: PUSH
6572: LD_INT 10
6574: PUSH
6575: LD_INT 13
6577: PUSH
6578: LD_INT 14
6580: PUSH
6581: LD_INT 17
6583: PUSH
6584: LD_INT 19
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_INT 25
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_VAR 0 1
6608: PUSH
6609: LD_INT 10
6611: DIV
6612: ARRAY
6613: PPUSH
6614: LD_INT 2
6616: PUSH
6617: LD_INT 3
6619: PUSH
6620: LD_INT 4
6622: PUSH
6623: LD_INT 5
6625: PUSH
6626: LD_INT 6
6628: PUSH
6629: LD_INT 7
6631: PUSH
6632: LD_INT 8
6634: PUSH
6635: LD_INT 9
6637: PUSH
6638: LD_INT 10
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: LD_VAR 0 1
6656: PUSH
6657: LD_INT 10
6659: DIV
6660: ARRAY
6661: PPUSH
6662: CALL 7762 0 2
6666: ADD
6667: ST_TO_ADDR
6668: GO 6954
6670: LD_INT 20
6672: DOUBLE
6673: EQUAL
6674: IFTRUE 6726
6676: LD_INT 30
6678: DOUBLE
6679: EQUAL
6680: IFTRUE 6726
6682: LD_INT 40
6684: DOUBLE
6685: EQUAL
6686: IFTRUE 6726
6688: LD_INT 50
6690: DOUBLE
6691: EQUAL
6692: IFTRUE 6726
6694: LD_INT 60
6696: DOUBLE
6697: EQUAL
6698: IFTRUE 6726
6700: LD_INT 70
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6726
6706: LD_INT 80
6708: DOUBLE
6709: EQUAL
6710: IFTRUE 6726
6712: LD_INT 90
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6726
6718: LD_INT 100
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6953
6726: POP
// result := Wave7 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 21 , 23 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ^ Wave6 ( [ 4 , 7 , 10 , 13 , 14 , 17 , 19 , 22 , 25 ] [ num / 10 - 1 ] , [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] [ num / 10 - 1 ] ) ; end ;
6727: LD_ADDR_VAR 0 2
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 7
6737: PUSH
6738: LD_INT 10
6740: PUSH
6741: LD_INT 13
6743: PUSH
6744: LD_INT 14
6746: PUSH
6747: LD_INT 17
6749: PUSH
6750: LD_INT 19
6752: PUSH
6753: LD_INT 21
6755: PUSH
6756: LD_INT 23
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: LD_INT 10
6777: DIVREAL
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 3
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: LD_INT 6
6798: PUSH
6799: LD_INT 7
6801: PUSH
6802: LD_INT 8
6804: PUSH
6805: LD_INT 9
6807: PUSH
6808: LD_INT 10
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 10
6829: DIVREAL
6830: PUSH
6831: LD_INT 1
6833: MINUS
6834: ARRAY
6835: PPUSH
6836: CALL 8602 0 2
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: LD_INT 7
6846: PUSH
6847: LD_INT 10
6849: PUSH
6850: LD_INT 13
6852: PUSH
6853: LD_INT 14
6855: PUSH
6856: LD_INT 17
6858: PUSH
6859: LD_INT 19
6861: PUSH
6862: LD_INT 22
6864: PUSH
6865: LD_INT 25
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: LD_VAR 0 1
6883: PUSH
6884: LD_INT 10
6886: DIVREAL
6887: PUSH
6888: LD_INT 1
6890: MINUS
6891: ARRAY
6892: PPUSH
6893: LD_INT 2
6895: PUSH
6896: LD_INT 3
6898: PUSH
6899: LD_INT 4
6901: PUSH
6902: LD_INT 5
6904: PUSH
6905: LD_INT 6
6907: PUSH
6908: LD_INT 7
6910: PUSH
6911: LD_INT 8
6913: PUSH
6914: LD_INT 9
6916: PUSH
6917: LD_INT 10
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: PUSH
6931: LD_VAR 0 1
6935: PUSH
6936: LD_INT 10
6938: DIVREAL
6939: PUSH
6940: LD_INT 1
6942: MINUS
6943: ARRAY
6944: PPUSH
6945: CALL 8182 0 2
6949: ADD
6950: ST_TO_ADDR
6951: GO 6954
6953: POP
// for i in result do
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_VAR 0 2
6963: PUSH
6964: FOR_IN
6965: IFFALSE 7138
// begin a := rand ( 1 , 2 ) ;
6967: LD_ADDR_VAR 0 8
6971: PUSH
6972: LD_INT 1
6974: PPUSH
6975: LD_INT 2
6977: PPUSH
6978: CALL_OW 12
6982: ST_TO_ADDR
// if a = 1 then
6983: LD_VAR 0 8
6987: PUSH
6988: LD_INT 1
6990: EQUAL
6991: IFFALSE 7007
// SetDir ( i , 3 ) else
6993: LD_VAR 0 3
6997: PPUSH
6998: LD_INT 3
7000: PPUSH
7001: CALL_OW 233
7005: GO 7019
// SetDir ( i , 5 ) ;
7007: LD_VAR 0 3
7011: PPUSH
7012: LD_INT 5
7014: PPUSH
7015: CALL_OW 233
// PlaceUnitArea ( i , area [ a ] , false ) ;
7019: LD_VAR 0 3
7023: PPUSH
7024: LD_VAR 0 7
7028: PUSH
7029: LD_VAR 0 8
7033: ARRAY
7034: PPUSH
7035: LD_INT 0
7037: PPUSH
7038: CALL_OW 49
// if GetControl ( i ) = control_manual then
7042: LD_VAR 0 3
7046: PPUSH
7047: CALL_OW 263
7051: PUSH
7052: LD_INT 1
7054: EQUAL
7055: IFFALSE 7101
// begin uc_nation := GetNation ( i ) ;
7057: LD_ADDR_OWVAR 21
7061: PUSH
7062: LD_VAR 0 3
7066: PPUSH
7067: CALL_OW 248
7071: ST_TO_ADDR
// PrepareHuman ( false , 3 , skill ) ;
7072: LD_INT 0
7074: PPUSH
7075: LD_INT 3
7077: PPUSH
7078: LD_VAR 0 5
7082: PPUSH
7083: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
7087: CALL_OW 44
7091: PPUSH
7092: LD_VAR 0 3
7096: PPUSH
7097: CALL_OW 52
// end ; l := l + 1 ;
7101: LD_ADDR_VAR 0 9
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ST_TO_ADDR
// if l mod 10 = 0 then
7115: LD_VAR 0 9
7119: PUSH
7120: LD_INT 10
7122: MOD
7123: PUSH
7124: LD_INT 0
7126: EQUAL
7127: IFFALSE 7136
// Wait ( 0 0$02 ) ;
7129: LD_INT 70
7131: PPUSH
7132: CALL_OW 67
// end ;
7136: GO 6964
7138: POP
7139: POP
// end ;
7140: LD_VAR 0 2
7144: RET
// export function Wave1 ( n , skill ) ; var i , un ; begin
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
7149: PPUSH
// uc_nation := nation_nature ;
7150: LD_ADDR_OWVAR 21
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// for i = 1 to n do
7158: LD_ADDR_VAR 0 4
7162: PUSH
7163: DOUBLE
7164: LD_INT 1
7166: DEC
7167: ST_TO_ADDR
7168: LD_VAR 0 1
7172: PUSH
7173: FOR_TO
7174: IFFALSE 7209
// begin PrepareHuman ( false , class_apeman , skill ) ;
7176: LD_INT 0
7178: PPUSH
7179: LD_INT 12
7181: PPUSH
7182: LD_VAR 0 2
7186: PPUSH
7187: CALL_OW 380
// result := result ^ CreateHuman ;
7191: LD_ADDR_VAR 0 3
7195: PUSH
7196: LD_VAR 0 3
7200: PUSH
7201: CALL_OW 44
7205: ADD
7206: ST_TO_ADDR
// end ;
7207: GO 7173
7209: POP
7210: POP
// end ;
7211: LD_VAR 0 3
7215: RET
// export function Wave2 ( n , skill ) ; var i , un ; begin
7216: LD_INT 0
7218: PPUSH
7219: PPUSH
7220: PPUSH
// uc_nation := nation_nature ;
7221: LD_ADDR_OWVAR 21
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// for i = 1 to n do
7229: LD_ADDR_VAR 0 4
7233: PUSH
7234: DOUBLE
7235: LD_INT 1
7237: DEC
7238: ST_TO_ADDR
7239: LD_VAR 0 1
7243: PUSH
7244: FOR_TO
7245: IFFALSE 7280
// begin PrepareHuman ( false , class_apeman_soldier , skill ) ;
7247: LD_INT 0
7249: PPUSH
7250: LD_INT 15
7252: PPUSH
7253: LD_VAR 0 2
7257: PPUSH
7258: CALL_OW 380
// result := result ^ CreateHuman ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 3
7271: PUSH
7272: CALL_OW 44
7276: ADD
7277: ST_TO_ADDR
// end ;
7278: GO 7244
7280: POP
7281: POP
// end ;
7282: LD_VAR 0 3
7286: RET
// export function Wave3 ( n , skill ) ; var i , un ; begin
7287: LD_INT 0
7289: PPUSH
7290: PPUSH
7291: PPUSH
// for i = 1 to n do
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: DOUBLE
7298: LD_INT 1
7300: DEC
7301: ST_TO_ADDR
7302: LD_VAR 0 1
7306: PUSH
7307: FOR_TO
7308: IFFALSE 7359
// begin uc_nation := rand ( 1 , 3 ) ;
7310: LD_ADDR_OWVAR 21
7314: PUSH
7315: LD_INT 1
7317: PPUSH
7318: LD_INT 3
7320: PPUSH
7321: CALL_OW 12
7325: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
7326: LD_INT 0
7328: PPUSH
7329: LD_INT 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: CALL_OW 380
// result := result ^ CreateHuman ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_VAR 0 3
7350: PUSH
7351: CALL_OW 44
7355: ADD
7356: ST_TO_ADDR
// end ;
7357: GO 7307
7359: POP
7360: POP
// end ;
7361: LD_VAR 0 3
7365: RET
// export function Wave4 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
// for i = 1 to n do
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_VAR 0 1
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7755
// begin uc_nation := rand ( 1 , 3 ) ;
7393: LD_ADDR_OWVAR 21
7397: PUSH
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 3
7403: PPUSH
7404: CALL_OW 12
7408: ST_TO_ADDR
// case uc_nation of 1 :
7409: LD_OWVAR 21
7413: PUSH
7414: LD_INT 1
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7485
7422: POP
// begin chassis := [ us_light_wheeled , us_medium_wheeled ] ;
7423: LD_ADDR_VAR 0 6
7427: PUSH
7428: LD_INT 1
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: ST_TO_ADDR
// weapons := [ us_machine_gun , us_light_gun ] ;
7438: LD_ADDR_VAR 0 7
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 3
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7453: LD_ADDR_VAR 0 8
7457: PUSH
7458: LD_INT 1
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7468: LD_ADDR_VAR 0 9
7472: PUSH
7473: LD_INT 1
7475: PUSH
7476: LD_INT 2
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: ST_TO_ADDR
// end ; 2 :
7483: GO 7620
7485: LD_INT 2
7487: DOUBLE
7488: EQUAL
7489: IFTRUE 7493
7491: GO 7556
7493: POP
// begin chassis := [ ar_light_trike , ar_hovercraft ] ;
7494: LD_ADDR_VAR 0 6
7498: PUSH
7499: LD_INT 12
7501: PUSH
7502: LD_INT 11
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// weapons := [ ar_light_gun , ar_double_machine_gun ] ;
7509: LD_ADDR_VAR 0 7
7513: PUSH
7514: LD_INT 23
7516: PUSH
7517: LD_INT 24
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7524: LD_ADDR_VAR 0 8
7528: PUSH
7529: LD_INT 1
7531: PUSH
7532: LD_INT 5
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar ] ;
7539: LD_ADDR_VAR 0 9
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 2
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// end ; 3 :
7554: GO 7620
7556: LD_INT 3
7558: DOUBLE
7559: EQUAL
7560: IFTRUE 7564
7562: GO 7619
7564: POP
// begin chassis := [ ru_medium_wheeled ] ;
7565: LD_ADDR_VAR 0 6
7569: PUSH
7570: LD_INT 21
7572: PUSH
7573: EMPTY
7574: LIST
7575: ST_TO_ADDR
// weapons := [ ru_heavy_machine_gun , ru_gun ] ;
7576: LD_ADDR_VAR 0 7
7580: PUSH
7581: LD_INT 42
7583: PUSH
7584: LD_INT 44
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7591: LD_ADDR_VAR 0 8
7595: PUSH
7596: LD_INT 1
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: ST_TO_ADDR
// engine := [ engine_combustion ] ;
7606: LD_ADDR_VAR 0 9
7610: PUSH
7611: LD_INT 1
7613: PUSH
7614: EMPTY
7615: LIST
7616: ST_TO_ADDR
// end ; end ;
7617: GO 7620
7619: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
7620: LD_ADDR_OWVAR 37
7624: PUSH
7625: LD_VAR 0 6
7629: PUSH
7630: LD_INT 1
7632: PPUSH
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 12
7642: ARRAY
7643: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
7644: LD_ADDR_OWVAR 39
7648: PUSH
7649: LD_VAR 0 9
7653: PUSH
7654: LD_INT 1
7656: PPUSH
7657: LD_VAR 0 9
7661: PPUSH
7662: CALL_OW 12
7666: ARRAY
7667: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
7668: LD_ADDR_OWVAR 38
7672: PUSH
7673: LD_VAR 0 8
7677: PUSH
7678: LD_INT 1
7680: PPUSH
7681: LD_VAR 0 8
7685: PPUSH
7686: CALL_OW 12
7690: ARRAY
7691: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
7692: LD_ADDR_OWVAR 40
7696: PUSH
7697: LD_VAR 0 7
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_VAR 0 7
7709: PPUSH
7710: CALL_OW 12
7714: ARRAY
7715: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7716: LD_ADDR_OWVAR 41
7720: PUSH
7721: LD_INT 100
7723: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
7724: LD_ADDR_VAR 0 3
7728: PUSH
7729: LD_VAR 0 3
7733: PPUSH
7734: LD_VAR 0 3
7738: PUSH
7739: LD_INT 1
7741: PLUS
7742: PPUSH
7743: CALL_OW 45
7747: PPUSH
7748: CALL_OW 2
7752: ST_TO_ADDR
// end ;
7753: GO 7390
7755: POP
7756: POP
// end ;
7757: LD_VAR 0 3
7761: RET
// export function Wave5 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
7769: PPUSH
7770: PPUSH
// for i = 1 to n do
7771: LD_ADDR_VAR 0 4
7775: PUSH
7776: DOUBLE
7777: LD_INT 1
7779: DEC
7780: ST_TO_ADDR
7781: LD_VAR 0 1
7785: PUSH
7786: FOR_TO
7787: IFFALSE 8175
// begin uc_nation := rand ( 1 , 3 ) ;
7789: LD_ADDR_OWVAR 21
7793: PUSH
7794: LD_INT 1
7796: PPUSH
7797: LD_INT 3
7799: PPUSH
7800: CALL_OW 12
7804: ST_TO_ADDR
// case uc_nation of 1 :
7805: LD_OWVAR 21
7809: PUSH
7810: LD_INT 1
7812: DOUBLE
7813: EQUAL
7814: IFTRUE 7818
7816: GO 7889
7818: POP
// begin chassis := [ us_medium_wheeled , us_medium_tracked ] ;
7819: LD_ADDR_VAR 0 6
7823: PUSH
7824: LD_INT 2
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
// weapons := [ us_gatling_gun , us_double_gun , us_laser ] ;
7834: LD_ADDR_VAR 0 7
7838: PUSH
7839: LD_INT 4
7841: PUSH
7842: LD_INT 5
7844: PUSH
7845: LD_INT 9
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
7853: LD_ADDR_VAR 0 8
7857: PUSH
7858: LD_INT 1
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7868: LD_ADDR_VAR 0 9
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: ST_TO_ADDR
// end ; 2 :
7887: GO 8040
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7968
7897: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
7898: LD_ADDR_VAR 0 6
7902: PUSH
7903: LD_INT 13
7905: PUSH
7906: LD_INT 14
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_gatling_gun ] ;
7913: LD_ADDR_VAR 0 7
7917: PUSH
7918: LD_INT 27
7920: PUSH
7921: LD_INT 26
7923: PUSH
7924: LD_INT 25
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
7932: LD_ADDR_VAR 0 8
7936: PUSH
7937: LD_INT 1
7939: PUSH
7940: LD_INT 5
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
7947: LD_ADDR_VAR 0 9
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 3
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: ST_TO_ADDR
// end ; 3 :
7966: GO 8040
7968: LD_INT 3
7970: DOUBLE
7971: EQUAL
7972: IFTRUE 7976
7974: GO 8039
7976: POP
// begin chassis := [ ru_medium_tracked , ru_medium_wheeled ] ;
7977: LD_ADDR_VAR 0 6
7981: PUSH
7982: LD_INT 22
7984: PUSH
7985: LD_INT 21
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// weapons := [ ru_gun , ru_gatling_gun ] ;
7992: LD_ADDR_VAR 0 7
7996: PUSH
7997: LD_INT 44
7999: PUSH
8000: LD_INT 43
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8007: LD_ADDR_VAR 0 8
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: LD_INT 3
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8022: LD_ADDR_VAR 0 9
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: LD_INT 3
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: ST_TO_ADDR
// end ; end ;
8037: GO 8040
8039: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8040: LD_ADDR_OWVAR 37
8044: PUSH
8045: LD_VAR 0 6
8049: PUSH
8050: LD_INT 1
8052: PPUSH
8053: LD_VAR 0 6
8057: PPUSH
8058: CALL_OW 12
8062: ARRAY
8063: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8064: LD_ADDR_OWVAR 39
8068: PUSH
8069: LD_VAR 0 9
8073: PUSH
8074: LD_INT 1
8076: PPUSH
8077: LD_VAR 0 9
8081: PPUSH
8082: CALL_OW 12
8086: ARRAY
8087: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8088: LD_ADDR_OWVAR 38
8092: PUSH
8093: LD_VAR 0 8
8097: PUSH
8098: LD_INT 1
8100: PPUSH
8101: LD_VAR 0 8
8105: PPUSH
8106: CALL_OW 12
8110: ARRAY
8111: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8112: LD_ADDR_OWVAR 40
8116: PUSH
8117: LD_VAR 0 7
8121: PUSH
8122: LD_INT 1
8124: PPUSH
8125: LD_VAR 0 7
8129: PPUSH
8130: CALL_OW 12
8134: ARRAY
8135: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8136: LD_ADDR_OWVAR 41
8140: PUSH
8141: LD_INT 100
8143: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 1
8161: PLUS
8162: PPUSH
8163: CALL_OW 45
8167: PPUSH
8168: CALL_OW 2
8172: ST_TO_ADDR
// end ;
8173: GO 7786
8175: POP
8176: POP
// end ;
8177: LD_VAR 0 3
8181: RET
// export function Wave6 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8182: LD_INT 0
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
// for i = 1 to n do
8191: LD_ADDR_VAR 0 4
8195: PUSH
8196: DOUBLE
8197: LD_INT 1
8199: DEC
8200: ST_TO_ADDR
8201: LD_VAR 0 1
8205: PUSH
8206: FOR_TO
8207: IFFALSE 8595
// begin uc_nation := rand ( 1 , 3 ) ;
8209: LD_ADDR_OWVAR 21
8213: PUSH
8214: LD_INT 1
8216: PPUSH
8217: LD_INT 3
8219: PPUSH
8220: CALL_OW 12
8224: ST_TO_ADDR
// case uc_nation of 1 :
8225: LD_OWVAR 21
8229: PUSH
8230: LD_INT 1
8232: DOUBLE
8233: EQUAL
8234: IFTRUE 8238
8236: GO 8305
8238: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8239: LD_ADDR_VAR 0 6
8243: PUSH
8244: LD_INT 4
8246: PUSH
8247: LD_INT 5
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_laser ] ;
8254: LD_ADDR_VAR 0 7
8258: PUSH
8259: LD_INT 6
8261: PUSH
8262: LD_INT 7
8264: PUSH
8265: LD_INT 9
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8273: LD_ADDR_VAR 0 8
8277: PUSH
8278: LD_INT 1
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8288: LD_ADDR_VAR 0 9
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: LD_INT 3
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: ST_TO_ADDR
// end ; 2 :
8303: GO 8460
8305: LD_INT 2
8307: DOUBLE
8308: EQUAL
8309: IFTRUE 8313
8311: GO 8388
8313: POP
// begin chassis := [ ar_medium_trike , ar_half_tracked ] ;
8314: LD_ADDR_VAR 0 6
8318: PUSH
8319: LD_INT 13
8321: PUSH
8322: LD_INT 14
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// weapons := [ ar_gun , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8329: LD_ADDR_VAR 0 7
8333: PUSH
8334: LD_INT 27
8336: PUSH
8337: LD_INT 26
8339: PUSH
8340: LD_INT 28
8342: PUSH
8343: LD_INT 29
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8352: LD_ADDR_VAR 0 8
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 5
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8367: LD_ADDR_VAR 0 9
8371: PUSH
8372: LD_INT 1
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// end ; 3 :
8386: GO 8460
8388: LD_INT 3
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8459
8396: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8397: LD_ADDR_VAR 0 6
8401: PUSH
8402: LD_INT 23
8404: PUSH
8405: LD_INT 24
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher ] ;
8412: LD_ADDR_VAR 0 7
8416: PUSH
8417: LD_INT 46
8419: PUSH
8420: LD_INT 45
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8427: LD_ADDR_VAR 0 8
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: LD_INT 3
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8442: LD_ADDR_VAR 0 9
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: ST_TO_ADDR
// end ; end ;
8457: GO 8460
8459: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8460: LD_ADDR_OWVAR 37
8464: PUSH
8465: LD_VAR 0 6
8469: PUSH
8470: LD_INT 1
8472: PPUSH
8473: LD_VAR 0 6
8477: PPUSH
8478: CALL_OW 12
8482: ARRAY
8483: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
8484: LD_ADDR_OWVAR 39
8488: PUSH
8489: LD_VAR 0 9
8493: PUSH
8494: LD_INT 1
8496: PPUSH
8497: LD_VAR 0 9
8501: PPUSH
8502: CALL_OW 12
8506: ARRAY
8507: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
8508: LD_ADDR_OWVAR 38
8512: PUSH
8513: LD_VAR 0 8
8517: PUSH
8518: LD_INT 1
8520: PPUSH
8521: LD_VAR 0 8
8525: PPUSH
8526: CALL_OW 12
8530: ARRAY
8531: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
8532: LD_ADDR_OWVAR 40
8536: PUSH
8537: LD_VAR 0 7
8541: PUSH
8542: LD_INT 1
8544: PPUSH
8545: LD_VAR 0 7
8549: PPUSH
8550: CALL_OW 12
8554: ARRAY
8555: ST_TO_ADDR
// vc_fuel_battery := 100 ;
8556: LD_ADDR_OWVAR 41
8560: PUSH
8561: LD_INT 100
8563: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
8564: LD_ADDR_VAR 0 3
8568: PUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_VAR 0 3
8578: PUSH
8579: LD_INT 1
8581: PLUS
8582: PPUSH
8583: CALL_OW 45
8587: PPUSH
8588: CALL_OW 2
8592: ST_TO_ADDR
// end ;
8593: GO 8206
8595: POP
8596: POP
// end ;
8597: LD_VAR 0 3
8601: RET
// export function Wave7 ( n , skill ) ; var i ; begin
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
// for i = 1 to n do
8606: LD_ADDR_VAR 0 4
8610: PUSH
8611: DOUBLE
8612: LD_INT 1
8614: DEC
8615: ST_TO_ADDR
8616: LD_VAR 0 1
8620: PUSH
8621: FOR_TO
8622: IFFALSE 8696
// begin uc_nation := rand ( 1 , 3 ) ;
8624: LD_ADDR_OWVAR 21
8628: PUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_INT 3
8634: PPUSH
8635: CALL_OW 12
8639: ST_TO_ADDR
// PrepareHuman ( false , [ class_mortar , class_bazooker , class_soldier ] [ rand ( 1 , 3 ) ] , skill ) ;
8640: LD_INT 0
8642: PPUSH
8643: LD_INT 8
8645: PUSH
8646: LD_INT 9
8648: PUSH
8649: LD_INT 1
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 1
8659: PPUSH
8660: LD_INT 3
8662: PPUSH
8663: CALL_OW 12
8667: ARRAY
8668: PPUSH
8669: LD_VAR 0 2
8673: PPUSH
8674: CALL_OW 380
// result := result ^ CreateHuman ;
8678: LD_ADDR_VAR 0 3
8682: PUSH
8683: LD_VAR 0 3
8687: PUSH
8688: CALL_OW 44
8692: ADD
8693: ST_TO_ADDR
// end ;
8694: GO 8621
8696: POP
8697: POP
// end ;
8698: LD_VAR 0 3
8702: RET
// export function Wave8 ( n , skill ) ; var i , un , chassis , weapons , control , engine ; begin
8703: LD_INT 0
8705: PPUSH
8706: PPUSH
8707: PPUSH
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
// for i = 1 to n do
8712: LD_ADDR_VAR 0 4
8716: PUSH
8717: DOUBLE
8718: LD_INT 1
8720: DEC
8721: ST_TO_ADDR
8722: LD_VAR 0 1
8726: PUSH
8727: FOR_TO
8728: IFFALSE 9124
// begin uc_nation := rand ( 1 , 3 ) ;
8730: LD_ADDR_OWVAR 21
8734: PUSH
8735: LD_INT 1
8737: PPUSH
8738: LD_INT 3
8740: PPUSH
8741: CALL_OW 12
8745: ST_TO_ADDR
// case uc_nation of 1 :
8746: LD_OWVAR 21
8750: PUSH
8751: LD_INT 1
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8832
8759: POP
// begin chassis := [ us_heavy_tracked , us_morphling ] ;
8760: LD_ADDR_VAR 0 6
8764: PUSH
8765: LD_INT 4
8767: PUSH
8768: LD_INT 5
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// weapons := [ us_heavy_gun , us_rocket_launcher , us_double_laser , us_artillery ] ;
8775: LD_ADDR_VAR 0 7
8779: PUSH
8780: LD_INT 6
8782: PUSH
8783: LD_INT 7
8785: PUSH
8786: LD_INT 10
8788: PUSH
8789: LD_EXP 14
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8800: LD_ADDR_VAR 0 8
8804: PUSH
8805: LD_INT 1
8807: PUSH
8808: LD_INT 3
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8815: LD_ADDR_VAR 0 9
8819: PUSH
8820: LD_INT 1
8822: PUSH
8823: LD_INT 3
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: ST_TO_ADDR
// end ; 2 :
8830: GO 8989
8832: LD_INT 2
8834: DOUBLE
8835: EQUAL
8836: IFTRUE 8840
8838: GO 8913
8840: POP
// begin chassis := [ ar_half_tracked ] ;
8841: LD_ADDR_VAR 0 6
8845: PUSH
8846: LD_INT 14
8848: PUSH
8849: EMPTY
8850: LIST
8851: ST_TO_ADDR
// weapons := [ ar_bio_bomb , ar_flame_thrower , ar_rocket_launcher , ar_selfpropelled_bomb ] ;
8852: LD_ADDR_VAR 0 7
8856: PUSH
8857: LD_EXP 13
8861: PUSH
8862: LD_INT 26
8864: PUSH
8865: LD_INT 28
8867: PUSH
8868: LD_INT 29
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: ST_TO_ADDR
// control := [ control_manual , control_apeman ] ;
8877: LD_ADDR_VAR 0 8
8881: PUSH
8882: LD_INT 1
8884: PUSH
8885: LD_INT 5
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: ST_TO_ADDR
// engine := [ engine_combustion , engine_solar , engine_siberite ] ;
8892: LD_ADDR_VAR 0 9
8896: PUSH
8897: LD_INT 1
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 3
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: LIST
8910: ST_TO_ADDR
// end ; 3 :
8911: GO 8989
8913: LD_INT 3
8915: DOUBLE
8916: EQUAL
8917: IFTRUE 8921
8919: GO 8988
8921: POP
// begin chassis := [ ru_heavy_wheeled , ru_heavy_tracked ] ;
8922: LD_ADDR_VAR 0 6
8926: PUSH
8927: LD_INT 23
8929: PUSH
8930: LD_INT 24
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: ST_TO_ADDR
// weapons := [ ru_heavy_gun , ru_rocket_launcher , ru_time_lapser ] ;
8937: LD_ADDR_VAR 0 7
8941: PUSH
8942: LD_INT 46
8944: PUSH
8945: LD_INT 45
8947: PUSH
8948: LD_INT 49
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: LIST
8955: ST_TO_ADDR
// control := [ control_manual , control_computer ] ;
8956: LD_ADDR_VAR 0 8
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: LD_INT 3
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: ST_TO_ADDR
// engine := [ engine_combustion , engine_siberite ] ;
8971: LD_ADDR_VAR 0 9
8975: PUSH
8976: LD_INT 1
8978: PUSH
8979: LD_INT 3
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: ST_TO_ADDR
// end ; end ;
8986: GO 8989
8988: POP
// vc_chassis := chassis [ rand ( 1 , chassis ) ] ;
8989: LD_ADDR_OWVAR 37
8993: PUSH
8994: LD_VAR 0 6
8998: PUSH
8999: LD_INT 1
9001: PPUSH
9002: LD_VAR 0 6
9006: PPUSH
9007: CALL_OW 12
9011: ARRAY
9012: ST_TO_ADDR
// vc_engine := engine [ rand ( 1 , engine ) ] ;
9013: LD_ADDR_OWVAR 39
9017: PUSH
9018: LD_VAR 0 9
9022: PUSH
9023: LD_INT 1
9025: PPUSH
9026: LD_VAR 0 9
9030: PPUSH
9031: CALL_OW 12
9035: ARRAY
9036: ST_TO_ADDR
// vc_control := control [ rand ( 1 , control ) ] ;
9037: LD_ADDR_OWVAR 38
9041: PUSH
9042: LD_VAR 0 8
9046: PUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_VAR 0 8
9054: PPUSH
9055: CALL_OW 12
9059: ARRAY
9060: ST_TO_ADDR
// vc_weapon := weapons [ rand ( 1 , weapons ) ] ;
9061: LD_ADDR_OWVAR 40
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_INT 1
9073: PPUSH
9074: LD_VAR 0 7
9078: PPUSH
9079: CALL_OW 12
9083: ARRAY
9084: ST_TO_ADDR
// vc_fuel_battery := 100 ;
9085: LD_ADDR_OWVAR 41
9089: PUSH
9090: LD_INT 100
9092: ST_TO_ADDR
// result := Insert ( result , result + 1 , CreateVehicle ) ;
9093: LD_ADDR_VAR 0 3
9097: PUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_VAR 0 3
9107: PUSH
9108: LD_INT 1
9110: PLUS
9111: PPUSH
9112: CALL_OW 45
9116: PPUSH
9117: CALL_OW 2
9121: ST_TO_ADDR
// end ;
9122: GO 8727
9124: POP
9125: POP
// end ; end_of_file
9126: LD_VAR 0 3
9130: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 7 ] ) do var i , un , tmp ;
9131: LD_INT 22
9133: PUSH
9134: LD_INT 7
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: IFFALSE 9651
9147: GO 9149
9149: DISABLE
9150: LD_INT 0
9152: PPUSH
9153: PPUSH
9154: PPUSH
// begin enable ;
9155: ENABLE
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
9156: LD_ADDR_VAR 0 3
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: LD_INT 7
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PPUSH
9171: CALL_OW 69
9175: ST_TO_ADDR
// for i in tmp do
9176: LD_ADDR_VAR 0 1
9180: PUSH
9181: LD_VAR 0 3
9185: PUSH
9186: FOR_IN
9187: IFFALSE 9649
// begin case GetType ( i ) of unit_human :
9189: LD_VAR 0 1
9193: PPUSH
9194: CALL_OW 247
9198: PUSH
9199: LD_INT 1
9201: DOUBLE
9202: EQUAL
9203: IFTRUE 9207
9205: GO 9406
9207: POP
// begin if GetLives ( i ) < 250 and GetTech ( 5 , 7 ) <> state_researched then
9208: LD_VAR 0 1
9212: PPUSH
9213: CALL_OW 256
9217: PUSH
9218: LD_INT 250
9220: LESS
9221: PUSH
9222: LD_INT 5
9224: PPUSH
9225: LD_INT 7
9227: PPUSH
9228: CALL_OW 321
9232: PUSH
9233: LD_INT 2
9235: NONEQUAL
9236: AND
9237: IFFALSE 9241
// continue ;
9239: GO 9186
// if GetClass ( i ) in [ 12 , 15 , 16 , 17 , 1 , 5 , 6 , 7 , 8 , 9 ] then
9241: LD_VAR 0 1
9245: PPUSH
9246: CALL_OW 257
9250: PUSH
9251: LD_INT 12
9253: PUSH
9254: LD_INT 15
9256: PUSH
9257: LD_INT 16
9259: PUSH
9260: LD_INT 17
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: LD_INT 5
9268: PUSH
9269: LD_INT 6
9271: PUSH
9272: LD_INT 7
9274: PUSH
9275: LD_INT 8
9277: PUSH
9278: LD_INT 9
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: IN
9293: IFFALSE 9331
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9295: LD_VAR 0 1
9299: PPUSH
9300: LD_INT 22
9302: PUSH
9303: LD_OWVAR 2
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PPUSH
9317: LD_VAR 0 1
9321: PPUSH
9322: CALL_OW 74
9326: PPUSH
9327: CALL_OW 115
// if GetClass ( i ) = 3 then
9331: LD_VAR 0 1
9335: PPUSH
9336: CALL_OW 257
9340: PUSH
9341: LD_INT 3
9343: EQUAL
9344: IFFALSE 9404
// if IsInUnit ( i ) then
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 310
9355: IFFALSE 9395
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) else
9357: LD_VAR 0 1
9361: PPUSH
9362: LD_INT 22
9364: PUSH
9365: LD_OWVAR 2
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 69
9378: PPUSH
9379: LD_VAR 0 1
9383: PPUSH
9384: CALL_OW 74
9388: PPUSH
9389: CALL_OW 115
9393: GO 9404
// ComEspace ( i ) ;
9395: LD_VAR 0 1
9399: PPUSH
9400: CALL 2259 0 1
// end ; unit_vehicle :
9404: GO 9647
9406: LD_INT 2
9408: DOUBLE
9409: EQUAL
9410: IFTRUE 9414
9412: GO 9646
9414: POP
// begin if GetLives ( i ) > 250 then
9415: LD_VAR 0 1
9419: PPUSH
9420: CALL_OW 256
9424: PUSH
9425: LD_INT 250
9427: GREATER
9428: IFFALSE 9644
// begin if GetWeapon ( i ) = us_artillery then
9430: LD_VAR 0 1
9434: PPUSH
9435: CALL_OW 264
9439: PUSH
9440: LD_EXP 14
9444: EQUAL
9445: IFFALSE 9513
// begin if IsInArea ( i , zoneOut ) then
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_INT 4
9454: PPUSH
9455: CALL_OW 308
9459: IFFALSE 9475
// ComMoveToArea ( i , zoneBorder ) else
9461: LD_VAR 0 1
9465: PPUSH
9466: LD_INT 9
9468: PPUSH
9469: CALL_OW 113
9473: GO 9511
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9475: LD_VAR 0 1
9479: PPUSH
9480: LD_INT 22
9482: PUSH
9483: LD_OWVAR 2
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 69
9496: PPUSH
9497: LD_VAR 0 1
9501: PPUSH
9502: CALL_OW 74
9506: PPUSH
9507: CALL_OW 115
// end else
9511: GO 9644
// if GetWeapon ( i ) in [ us_radar , ar_radar , ru_radar , ru_time_lapser ] then
9513: LD_VAR 0 1
9517: PPUSH
9518: CALL_OW 264
9522: PUSH
9523: LD_INT 11
9525: PUSH
9526: LD_INT 30
9528: PUSH
9529: LD_EXP 17
9533: PUSH
9534: LD_INT 49
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: IN
9543: IFFALSE 9573
// begin if IsInArea ( i , zoneOut ) then
9545: LD_VAR 0 1
9549: PPUSH
9550: LD_INT 4
9552: PPUSH
9553: CALL_OW 308
9557: IFFALSE 9571
// ComSpecMove ( i , specPos ) ;
9559: LD_VAR 0 1
9563: PPUSH
9564: LD_INT 8
9566: PPUSH
9567: CALL 2305 0 2
// end else
9571: GO 9644
// if GetWeapon ( i ) in [ ar_bio_bomb , ar_selfpropelled_bomb ] then
9573: LD_VAR 0 1
9577: PPUSH
9578: CALL_OW 264
9582: PUSH
9583: LD_EXP 13
9587: PUSH
9588: LD_INT 29
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: IN
9595: IFFALSE 9608
// ComSpecAttack ( i ) else
9597: LD_VAR 0 1
9601: PPUSH
9602: CALL 2733 0 1
9606: GO 9644
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , i ) ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: LD_INT 22
9615: PUSH
9616: LD_OWVAR 2
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PPUSH
9625: CALL_OW 69
9629: PPUSH
9630: LD_VAR 0 1
9634: PPUSH
9635: CALL_OW 74
9639: PPUSH
9640: CALL_OW 115
// end ; end ; end ;
9644: GO 9647
9646: POP
// end ;
9647: GO 9186
9649: POP
9650: POP
// end ; end_of_file
9651: PPOPN 3
9653: END
// export function InitDisplay ; begin
9654: LD_INT 0
9656: PPUSH
// while true do
9657: LD_INT 1
9659: IFFALSE 9746
// begin if waveNumber < 100 then
9661: LD_EXP 5
9665: PUSH
9666: LD_INT 100
9668: LESS
9669: IFFALSE 9720
// Display_Strings := [ #Tick , tick , #Points , points , #Attack , timeToNextAttack , #Wave , waveNumber ] else
9671: LD_ADDR_OWVAR 47
9675: PUSH
9676: LD_STRING #Tick
9678: PUSH
9679: LD_OWVAR 1
9683: PUSH
9684: LD_STRING #Points
9686: PUSH
9687: LD_EXP 2
9691: PUSH
9692: LD_STRING #Attack
9694: PUSH
9695: LD_EXP 4
9699: PUSH
9700: LD_STRING #Wave
9702: PUSH
9703: LD_EXP 5
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: ST_TO_ADDR
9718: GO 9737
// Display_Strings := [ #Win , points ] ;
9720: LD_ADDR_OWVAR 47
9724: PUSH
9725: LD_STRING #Win
9727: PUSH
9728: LD_EXP 2
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
9737: LD_INT 35
9739: PPUSH
9740: CALL_OW 67
// end ;
9744: GO 9657
// end ; end_of_file
9746: LD_VAR 0 1
9750: RET
// export function InitBonus ; var i , chance ; begin
9751: LD_INT 0
9753: PPUSH
9754: PPUSH
9755: PPUSH
// chance := rand ( 1 , 99 ) ;
9756: LD_ADDR_VAR 0 3
9760: PUSH
9761: LD_INT 1
9763: PPUSH
9764: LD_INT 99
9766: PPUSH
9767: CALL_OW 12
9771: ST_TO_ADDR
// case chance of 1 .. 10 :
9772: LD_VAR 0 3
9776: PUSH
9777: LD_INT 1
9779: DOUBLE
9780: GREATEREQUAL
9781: IFFALSE 9789
9783: LD_INT 10
9785: DOUBLE
9786: LESSEQUAL
9787: IFTRUE 9791
9789: GO 9802
9791: POP
// i := 5 ; 11 .. 25 :
9792: LD_ADDR_VAR 0 2
9796: PUSH
9797: LD_INT 5
9799: ST_TO_ADDR
9800: GO 9903
9802: LD_INT 11
9804: DOUBLE
9805: GREATEREQUAL
9806: IFFALSE 9814
9808: LD_INT 25
9810: DOUBLE
9811: LESSEQUAL
9812: IFTRUE 9816
9814: GO 9827
9816: POP
// i := 3 ; 26 .. 40 :
9817: LD_ADDR_VAR 0 2
9821: PUSH
9822: LD_INT 3
9824: ST_TO_ADDR
9825: GO 9903
9827: LD_INT 26
9829: DOUBLE
9830: GREATEREQUAL
9831: IFFALSE 9839
9833: LD_INT 40
9835: DOUBLE
9836: LESSEQUAL
9837: IFTRUE 9841
9839: GO 9852
9841: POP
// i := 2 ; 41 .. 60 :
9842: LD_ADDR_VAR 0 2
9846: PUSH
9847: LD_INT 2
9849: ST_TO_ADDR
9850: GO 9903
9852: LD_INT 41
9854: DOUBLE
9855: GREATEREQUAL
9856: IFFALSE 9864
9858: LD_INT 60
9860: DOUBLE
9861: LESSEQUAL
9862: IFTRUE 9866
9864: GO 9877
9866: POP
// i := 4 ; 61 .. 99 :
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: LD_INT 4
9874: ST_TO_ADDR
9875: GO 9903
9877: LD_INT 61
9879: DOUBLE
9880: GREATEREQUAL
9881: IFFALSE 9889
9883: LD_INT 99
9885: DOUBLE
9886: LESSEQUAL
9887: IFTRUE 9891
9889: GO 9902
9891: POP
// i := 1 ; end ;
9892: LD_ADDR_VAR 0 2
9896: PUSH
9897: LD_INT 1
9899: ST_TO_ADDR
9900: GO 9903
9902: POP
// case i of 1 :
9903: LD_VAR 0 2
9907: PUSH
9908: LD_INT 1
9910: DOUBLE
9911: EQUAL
9912: IFTRUE 9916
9914: GO 10005
9916: POP
// begin if FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) >= 10 then
9917: LD_INT 22
9919: PUSH
9920: LD_OWVAR 2
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 2
9931: PUSH
9932: LD_INT 25
9934: PUSH
9935: LD_INT 12
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 25
9944: PUSH
9945: LD_INT 16
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 25
9954: PUSH
9955: LD_INT 15
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 25
9964: PUSH
9965: LD_INT 17
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: PUSH
9988: LD_INT 10
9990: GREATEREQUAL
9991: IFFALSE 9999
// BonusIV else
9993: CALL 10578 0 0
9997: GO 10003
// BonusI ;
9999: CALL 10083 0 0
// end ; 2 :
10003: GO 10078
10005: LD_INT 2
10007: DOUBLE
10008: EQUAL
10009: IFTRUE 10013
10011: GO 10020
10013: POP
// begin BonusII ;
10014: CALL 10256 0 0
// end ; 3 :
10018: GO 10078
10020: LD_INT 3
10022: DOUBLE
10023: EQUAL
10024: IFTRUE 10028
10026: GO 10035
10028: POP
// begin BonusIII ;
10029: CALL 10404 0 0
// end ; 4 :
10033: GO 10078
10035: LD_INT 4
10037: DOUBLE
10038: EQUAL
10039: IFTRUE 10043
10041: GO 10050
10043: POP
// begin BonusIV ;
10044: CALL 10578 0 0
// end ; 5 :
10048: GO 10078
10050: LD_INT 5
10052: DOUBLE
10053: EQUAL
10054: IFTRUE 10058
10056: GO 10077
10058: POP
// begin if graveyard then
10059: LD_EXP 8
10063: IFFALSE 10071
// BonusV else
10065: CALL 10996 0 0
10069: GO 10075
// BonusIII ;
10071: CALL 10404 0 0
// end ; end ;
10075: GO 10078
10077: POP
// end ;
10078: LD_VAR 0 1
10082: RET
// export function BonusI ; var i ; begin
10083: LD_INT 0
10085: PPUSH
10086: PPUSH
// case Query ( AddGift1 ) of 1 :
10087: LD_STRING AddGift1
10089: PPUSH
10090: CALL_OW 97
10094: PUSH
10095: LD_INT 1
10097: DOUBLE
10098: EQUAL
10099: IFTRUE 10103
10101: GO 10182
10103: POP
// begin for i = 1 to 3 do
10104: LD_ADDR_VAR 0 2
10108: PUSH
10109: DOUBLE
10110: LD_INT 1
10112: DEC
10113: ST_TO_ADDR
10114: LD_INT 3
10116: PUSH
10117: FOR_TO
10118: IFFALSE 10178
// begin uc_side := your_side ;
10120: LD_ADDR_OWVAR 20
10124: PUSH
10125: LD_OWVAR 2
10129: ST_TO_ADDR
// uc_nation := 0 ;
10130: LD_ADDR_OWVAR 21
10134: PUSH
10135: LD_INT 0
10137: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10138: LD_INT 0
10140: PPUSH
10141: LD_INT 12
10143: PPUSH
10144: LD_INT 1
10146: PPUSH
10147: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , base_x , base_y , 15 , true ) ;
10151: CALL_OW 44
10155: PPUSH
10156: LD_EXP 9
10160: PPUSH
10161: LD_EXP 10
10165: PPUSH
10166: LD_INT 15
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 50
// end ;
10176: GO 10117
10178: POP
10179: POP
// end ; 2 :
10180: GO 10251
10182: LD_INT 2
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10232
10190: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10191: LD_EXP 11
10195: PPUSH
10196: CALL_OW 274
10200: PPUSH
10201: LD_INT 1
10203: PPUSH
10204: LD_EXP 11
10208: PPUSH
10209: CALL_OW 274
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 275
10221: PUSH
10222: LD_INT 100
10224: PLUS
10225: PPUSH
10226: CALL_OW 277
// end ; 3 :
10230: GO 10251
10232: LD_INT 3
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10250
10240: POP
// begin SetTeamExp ( 2 ) ;
10241: LD_INT 2
10243: PPUSH
10244: CALL 1266 0 1
// end ; end ;
10248: GO 10251
10250: POP
// end ;
10251: LD_VAR 0 1
10255: RET
// export function BonusII ; var i ; begin
10256: LD_INT 0
10258: PPUSH
10259: PPUSH
// case Query ( AddGift2 ) of 1 :
10260: LD_STRING AddGift2
10262: PPUSH
10263: CALL_OW 97
10267: PUSH
10268: LD_INT 1
10270: DOUBLE
10271: EQUAL
10272: IFTRUE 10276
10274: GO 10318
10276: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
10277: LD_EXP 11
10281: PPUSH
10282: CALL_OW 274
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_EXP 11
10294: PPUSH
10295: CALL_OW 274
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 275
10307: PUSH
10308: LD_INT 500
10310: PLUS
10311: PPUSH
10312: CALL_OW 277
// end ; 2 :
10316: GO 10399
10318: LD_INT 2
10320: DOUBLE
10321: EQUAL
10322: IFTRUE 10326
10324: GO 10336
10326: POP
// begin SetTeamExp ( 3 ) ;
10327: LD_INT 3
10329: PPUSH
10330: CALL 1266 0 1
// end ; 3 :
10334: GO 10399
10336: LD_INT 3
10338: DOUBLE
10339: EQUAL
10340: IFTRUE 10344
10342: GO 10398
10344: POP
// begin uc_side = your_side ;
10345: LD_ADDR_OWVAR 20
10349: PUSH
10350: LD_OWVAR 2
10354: ST_TO_ADDR
// uc_nation = nation_russian ;
10355: LD_ADDR_OWVAR 21
10359: PUSH
10360: LD_INT 3
10362: ST_TO_ADDR
// vc_chassis = 25 ;
10363: LD_ADDR_OWVAR 37
10367: PUSH
10368: LD_INT 25
10370: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10371: CALL_OW 45
10375: PPUSH
10376: LD_EXP 9
10380: PPUSH
10381: LD_EXP 10
10385: PPUSH
10386: LD_INT 15
10388: PPUSH
10389: LD_INT 1
10391: PPUSH
10392: CALL_OW 50
// end ; end ;
10396: GO 10399
10398: POP
// end ;
10399: LD_VAR 0 1
10403: RET
// export function BonusIII ; var i ; begin
10404: LD_INT 0
10406: PPUSH
10407: PPUSH
// case Query ( AddGift3 ) of 1 :
10408: LD_STRING AddGift3
10410: PPUSH
10411: CALL_OW 97
10415: PUSH
10416: LD_INT 1
10418: DOUBLE
10419: EQUAL
10420: IFTRUE 10424
10422: GO 10466
10424: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 1000 ) ;
10425: LD_EXP 11
10429: PPUSH
10430: CALL_OW 274
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: LD_EXP 11
10442: PPUSH
10443: CALL_OW 274
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 275
10455: PUSH
10456: LD_INT 1000
10458: PLUS
10459: PPUSH
10460: CALL_OW 277
// end ; 2 :
10464: GO 10573
10466: LD_INT 2
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10486
10474: POP
// begin PrepareGuards ( waveNumber ) ;
10475: LD_EXP 5
10479: PPUSH
10480: CALL 1412 0 1
// end ; 3 :
10484: GO 10573
10486: LD_INT 3
10488: DOUBLE
10489: EQUAL
10490: IFTRUE 10494
10492: GO 10572
10494: POP
// begin uc_side = your_side ;
10495: LD_ADDR_OWVAR 20
10499: PUSH
10500: LD_OWVAR 2
10504: ST_TO_ADDR
// uc_nation = nation_american ;
10505: LD_ADDR_OWVAR 21
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// vc_chassis = us_morphling ;
10513: LD_ADDR_OWVAR 37
10517: PUSH
10518: LD_INT 5
10520: ST_TO_ADDR
// vc_engine := engine_siberite ;
10521: LD_ADDR_OWVAR 39
10525: PUSH
10526: LD_INT 3
10528: ST_TO_ADDR
// vc_control := control_computer ;
10529: LD_ADDR_OWVAR 38
10533: PUSH
10534: LD_INT 3
10536: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
10537: LD_ADDR_OWVAR 40
10541: PUSH
10542: LD_INT 8
10544: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10545: CALL_OW 45
10549: PPUSH
10550: LD_EXP 9
10554: PPUSH
10555: LD_EXP 10
10559: PPUSH
10560: LD_INT 15
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 50
// end ; end ;
10570: GO 10573
10572: POP
// end ;
10573: LD_VAR 0 1
10577: RET
// export function BonusIV ; var i ; begin
10578: LD_INT 0
10580: PPUSH
10581: PPUSH
// case Query ( AddGift4 ) of 1 :
10582: LD_STRING AddGift4
10584: PPUSH
10585: CALL_OW 97
10589: PUSH
10590: LD_INT 1
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10922
10598: POP
// begin i := rand ( 1 , 3 ) ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_INT 1
10606: PPUSH
10607: LD_INT 3
10609: PPUSH
10610: CALL_OW 12
10614: ST_TO_ADDR
// uc_side := your_side ;
10615: LD_ADDR_OWVAR 20
10619: PUSH
10620: LD_OWVAR 2
10624: ST_TO_ADDR
// case i of 1 :
10625: LD_VAR 0 2
10629: PUSH
10630: LD_INT 1
10632: DOUBLE
10633: EQUAL
10634: IFTRUE 10638
10636: GO 10725
10638: POP
// begin uc_nation := nation_arabian ;
10639: LD_ADDR_OWVAR 21
10643: PUSH
10644: LD_INT 2
10646: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10647: LD_ADDR_OWVAR 37
10651: PUSH
10652: LD_INT 14
10654: ST_TO_ADDR
// vc_engine := engine_combustion ;
10655: LD_ADDR_OWVAR 39
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// vc_control := control_manual ;
10663: LD_ADDR_OWVAR 38
10667: PUSH
10668: LD_INT 1
10670: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10671: LD_ADDR_OWVAR 40
10675: PUSH
10676: LD_INT 27
10678: PUSH
10679: LD_INT 28
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 2
10691: PPUSH
10692: CALL_OW 12
10696: ARRAY
10697: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10698: CALL_OW 45
10702: PPUSH
10703: LD_EXP 9
10707: PPUSH
10708: LD_EXP 10
10712: PPUSH
10713: LD_INT 15
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 50
// end ; 2 :
10723: GO 10920
10725: LD_INT 2
10727: DOUBLE
10728: EQUAL
10729: IFTRUE 10733
10731: GO 10824
10733: POP
// begin uc_nation := nation_american ;
10734: LD_ADDR_OWVAR 21
10738: PUSH
10739: LD_INT 1
10741: ST_TO_ADDR
// vc_chassis := us_morphling ;
10742: LD_ADDR_OWVAR 37
10746: PUSH
10747: LD_INT 5
10749: ST_TO_ADDR
// vc_engine := engine_siberite ;
10750: LD_ADDR_OWVAR 39
10754: PUSH
10755: LD_INT 3
10757: ST_TO_ADDR
// vc_control := control_computer ;
10758: LD_ADDR_OWVAR 38
10762: PUSH
10763: LD_INT 3
10765: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_double_laser , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
10766: LD_ADDR_OWVAR 40
10770: PUSH
10771: LD_INT 12
10773: PUSH
10774: LD_INT 10
10776: PUSH
10777: LD_INT 7
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 3
10790: PPUSH
10791: CALL_OW 12
10795: ARRAY
10796: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10797: CALL_OW 45
10801: PPUSH
10802: LD_EXP 9
10806: PPUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 15
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 50
// end ; 3 :
10822: GO 10920
10824: LD_INT 3
10826: DOUBLE
10827: EQUAL
10828: IFTRUE 10832
10830: GO 10919
10832: POP
// begin uc_nation := nation_russian ;
10833: LD_ADDR_OWVAR 21
10837: PUSH
10838: LD_INT 3
10840: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10841: LD_ADDR_OWVAR 37
10845: PUSH
10846: LD_INT 22
10848: ST_TO_ADDR
// vc_engine := engine_combustion ;
10849: LD_ADDR_OWVAR 39
10853: PUSH
10854: LD_INT 1
10856: ST_TO_ADDR
// vc_control := control_manual ;
10857: LD_ADDR_OWVAR 38
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
10865: LD_ADDR_OWVAR 40
10869: PUSH
10870: LD_INT 45
10872: PUSH
10873: LD_INT 44
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 1
10882: PPUSH
10883: LD_INT 2
10885: PPUSH
10886: CALL_OW 12
10890: ARRAY
10891: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
10892: CALL_OW 45
10896: PPUSH
10897: LD_EXP 9
10901: PPUSH
10902: LD_EXP 10
10906: PPUSH
10907: LD_INT 15
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: CALL_OW 50
// end ; end ;
10917: GO 10920
10919: POP
// end ; 2 :
10920: GO 10991
10922: LD_INT 2
10924: DOUBLE
10925: EQUAL
10926: IFTRUE 10930
10928: GO 10972
10930: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 100 ) ;
10931: LD_EXP 11
10935: PPUSH
10936: CALL_OW 274
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: LD_EXP 11
10948: PPUSH
10949: CALL_OW 274
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 275
10961: PUSH
10962: LD_INT 100
10964: PLUS
10965: PPUSH
10966: CALL_OW 277
// end ; 3 :
10970: GO 10991
10972: LD_INT 3
10974: DOUBLE
10975: EQUAL
10976: IFTRUE 10980
10978: GO 10990
10980: POP
// begin SetTeamExp ( 2 ) ;
10981: LD_INT 2
10983: PPUSH
10984: CALL 1266 0 1
// end ; end ;
10988: GO 10991
10990: POP
// end ;
10991: LD_VAR 0 1
10995: RET
// export function BonusV ; var i , j ; begin
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
11000: PPUSH
// case Query ( AddGift5 ) of 1 :
11001: LD_STRING AddGift5
11003: PPUSH
11004: CALL_OW 97
11008: PUSH
11009: LD_INT 1
11011: DOUBLE
11012: EQUAL
11013: IFTRUE 11017
11015: GO 11361
11017: POP
// begin for j = 1 to 3 do
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: DOUBLE
11024: LD_INT 1
11026: DEC
11027: ST_TO_ADDR
11028: LD_INT 3
11030: PUSH
11031: FOR_TO
11032: IFFALSE 11357
// begin i := rand ( 1 , 3 ) ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_INT 1
11041: PPUSH
11042: LD_INT 3
11044: PPUSH
11045: CALL_OW 12
11049: ST_TO_ADDR
// uc_side := your_side ;
11050: LD_ADDR_OWVAR 20
11054: PUSH
11055: LD_OWVAR 2
11059: ST_TO_ADDR
// case i of 1 :
11060: LD_VAR 0 2
11064: PUSH
11065: LD_INT 1
11067: DOUBLE
11068: EQUAL
11069: IFTRUE 11073
11071: GO 11160
11073: POP
// begin uc_nation := nation_arabian ;
11074: LD_ADDR_OWVAR 21
11078: PUSH
11079: LD_INT 2
11081: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11082: LD_ADDR_OWVAR 37
11086: PUSH
11087: LD_INT 14
11089: ST_TO_ADDR
// vc_engine := engine_combustion ;
11090: LD_ADDR_OWVAR 39
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// vc_control := control_manual ;
11098: LD_ADDR_OWVAR 38
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11106: LD_ADDR_OWVAR 40
11110: PUSH
11111: LD_INT 27
11113: PUSH
11114: LD_INT 28
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 1
11123: PPUSH
11124: LD_INT 2
11126: PPUSH
11127: CALL_OW 12
11131: ARRAY
11132: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11133: CALL_OW 45
11137: PPUSH
11138: LD_EXP 9
11142: PPUSH
11143: LD_EXP 10
11147: PPUSH
11148: LD_INT 15
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 50
// end ; 2 :
11158: GO 11355
11160: LD_INT 2
11162: DOUBLE
11163: EQUAL
11164: IFTRUE 11168
11166: GO 11259
11168: POP
// begin uc_nation := nation_american ;
11169: LD_ADDR_OWVAR 21
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// vc_chassis := us_morphling ;
11177: LD_ADDR_OWVAR 37
11181: PUSH
11182: LD_INT 5
11184: ST_TO_ADDR
// vc_engine := engine_siberite ;
11185: LD_ADDR_OWVAR 39
11189: PUSH
11190: LD_INT 3
11192: ST_TO_ADDR
// vc_control := control_computer ;
11193: LD_ADDR_OWVAR 38
11197: PUSH
11198: LD_INT 3
11200: ST_TO_ADDR
// vc_weapon := [ us_cargo_bay , us_radar , us_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11201: LD_ADDR_OWVAR 40
11205: PUSH
11206: LD_INT 12
11208: PUSH
11209: LD_INT 11
11211: PUSH
11212: LD_INT 7
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 1
11222: PPUSH
11223: LD_INT 3
11225: PPUSH
11226: CALL_OW 12
11230: ARRAY
11231: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11232: CALL_OW 45
11236: PPUSH
11237: LD_EXP 9
11241: PPUSH
11242: LD_EXP 10
11246: PPUSH
11247: LD_INT 15
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 50
// end ; 3 :
11257: GO 11355
11259: LD_INT 3
11261: DOUBLE
11262: EQUAL
11263: IFTRUE 11267
11265: GO 11354
11267: POP
// begin uc_nation := nation_russian ;
11268: LD_ADDR_OWVAR 21
11272: PUSH
11273: LD_INT 3
11275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
11276: LD_ADDR_OWVAR 37
11280: PUSH
11281: LD_INT 22
11283: ST_TO_ADDR
// vc_engine := engine_combustion ;
11284: LD_ADDR_OWVAR 39
11288: PUSH
11289: LD_INT 1
11291: ST_TO_ADDR
// vc_control := control_manual ;
11292: LD_ADDR_OWVAR 38
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_gun ] [ rand ( 1 , 2 ) ] ;
11300: LD_ADDR_OWVAR 40
11304: PUSH
11305: LD_INT 45
11307: PUSH
11308: LD_INT 44
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 1
11317: PPUSH
11318: LD_INT 2
11320: PPUSH
11321: CALL_OW 12
11325: ARRAY
11326: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , base_x , base_y , 15 , true ) ;
11327: CALL_OW 45
11331: PPUSH
11332: LD_EXP 9
11336: PPUSH
11337: LD_EXP 10
11341: PPUSH
11342: LD_INT 15
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 50
// end ; end ;
11352: GO 11355
11354: POP
// end ;
11355: GO 11031
11357: POP
11358: POP
// end ; 2 :
11359: GO 11427
11361: LD_INT 2
11363: DOUBLE
11364: EQUAL
11365: IFTRUE 11369
11367: GO 11411
11369: POP
// begin SetResourceType ( GetBase ( base ) , mat_cans , GetResourceType ( GetBase ( base ) , mat_cans ) + 500 ) ;
11370: LD_EXP 11
11374: PPUSH
11375: CALL_OW 274
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_EXP 11
11387: PPUSH
11388: CALL_OW 274
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 275
11400: PUSH
11401: LD_INT 500
11403: PLUS
11404: PPUSH
11405: CALL_OW 277
// end ; 3 :
11409: GO 11427
11411: LD_INT 3
11413: DOUBLE
11414: EQUAL
11415: IFTRUE 11419
11417: GO 11426
11419: POP
// begin GetBack ( ) ;
11420: CALL 2072 0 0
// end ; end ;
11424: GO 11427
11426: POP
// end ;
11427: LD_VAR 0 1
11431: RET
